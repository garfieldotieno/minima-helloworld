var __freeze = Object.freeze;
var __defProp2 = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp2(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a, _b, _c, _d, _e2;
function __vite_legacy_guard() {
  import.meta.url;
  import("_").catch(() => 1);
  async function* g2() {
  }
  ;
}
;
function _mergeNamespaces(n2, m4) {
  for (var i3 = 0; i3 < m4.length; i3++) {
    const e3 = m4[i3];
    if (typeof e3 !== "string" && !Array.isArray(e3)) {
      for (const k3 in e3) {
        if (k3 !== "default" && !(k3 in n2)) {
          const d4 = Object.getOwnPropertyDescriptor(e3, k3);
          if (d4) {
            Object.defineProperty(n2, k3, d4.get ? d4 : {
              enumerable: true,
              get: () => e3[k3]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
}
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node2 of mutation.addedNodes) {
        if (node2.tagName === "LINK" && node2.rel === "modulepreload")
          processPreload(node2);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x3) {
  return x3 && x3.__esModule && Object.prototype.hasOwnProperty.call(x3, "default") ? x3["default"] : x3;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule)
    return n2;
  var f2 = n2.default;
  if (typeof f2 == "function") {
    var a4 = function a5() {
      if (this instanceof a5) {
        return Reflect.construct(f2, arguments, this.constructor);
      }
      return f2.apply(this, arguments);
    };
    a4.prototype = f2.prototype;
  } else
    a4 = {};
  Object.defineProperty(a4, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k3) {
    var d4 = Object.getOwnPropertyDescriptor(n2, k3);
    Object.defineProperty(a4, k3, d4.get ? d4 : {
      enumerable: true,
      get: function() {
        return n2[k3];
      }
    });
  });
  return a4;
}
var flowbite_min = { exports: {} };
(function(module2, exports2) {
  !function(t3, e3) {
    module2.exports = e3();
  }(self, function() {
    return function() {
      var t3 = { 647: function(t4, e4, i4) {
        i4.r(e4);
      }, 853: function(t4, e4, i4) {
        i4.r(e4), i4.d(e4, { afterMain: function() {
          return E3;
        }, afterRead: function() {
          return _2;
        }, afterWrite: function() {
          return x3;
        }, applyStyles: function() {
          return S4;
        }, arrow: function() {
          return Z2;
        }, auto: function() {
          return a4;
        }, basePlacements: function() {
          return c7;
        }, beforeMain: function() {
          return b3;
        }, beforeRead: function() {
          return m4;
        }, beforeWrite: function() {
          return L3;
        }, bottom: function() {
          return o2;
        }, clippingParents: function() {
          return u3;
        }, computeStyles: function() {
          return it2;
        }, createPopper: function() {
          return St2;
        }, createPopperBase: function() {
          return Pt2;
        }, createPopperLite: function() {
          return Dt2;
        }, detectOverflow: function() {
          return yt2;
        }, end: function() {
          return d4;
        }, eventListeners: function() {
          return ot2;
        }, flip: function() {
          return _t5;
        }, hide: function() {
          return Et2;
        }, left: function() {
          return s4;
        }, main: function() {
          return w3;
        }, modifierPhases: function() {
          return k3;
        }, offset: function() {
          return Lt2;
        }, placements: function() {
          return v2;
        }, popper: function() {
          return f2;
        }, popperGenerator: function() {
          return jt2;
        }, popperOffsets: function() {
          return Ot2;
        }, preventOverflow: function() {
          return xt2;
        }, read: function() {
          return y4;
        }, reference: function() {
          return h4;
        }, right: function() {
          return r2;
        }, start: function() {
          return l2;
        }, top: function() {
          return n3;
        }, variationPlacements: function() {
          return g2;
        }, viewport: function() {
          return p2;
        }, write: function() {
          return O3;
        } });
        var n3 = "top", o2 = "bottom", r2 = "right", s4 = "left", a4 = "auto", c7 = [n3, o2, r2, s4], l2 = "start", d4 = "end", u3 = "clippingParents", p2 = "viewport", f2 = "popper", h4 = "reference", g2 = c7.reduce(function(t5, e5) {
          return t5.concat([e5 + "-" + l2, e5 + "-" + d4]);
        }, []), v2 = [].concat(c7, [a4]).reduce(function(t5, e5) {
          return t5.concat([e5, e5 + "-" + l2, e5 + "-" + d4]);
        }, []), m4 = "beforeRead", y4 = "read", _2 = "afterRead", b3 = "beforeMain", w3 = "main", E3 = "afterMain", L3 = "beforeWrite", O3 = "write", x3 = "afterWrite", k3 = [m4, y4, _2, b3, w3, E3, L3, O3, x3];
        function A2(t5) {
          return t5 ? (t5.nodeName || "").toLowerCase() : null;
        }
        function T3(t5) {
          if (null == t5)
            return window;
          if ("[object Window]" !== t5.toString()) {
            var e5 = t5.ownerDocument;
            return e5 && e5.defaultView || window;
          }
          return t5;
        }
        function C2(t5) {
          return t5 instanceof T3(t5).Element || t5 instanceof Element;
        }
        function j2(t5) {
          return t5 instanceof T3(t5).HTMLElement || t5 instanceof HTMLElement;
        }
        function P2(t5) {
          return "undefined" != typeof ShadowRoot && (t5 instanceof T3(t5).ShadowRoot || t5 instanceof ShadowRoot);
        }
        var S4 = { name: "applyStyles", enabled: true, phase: "write", fn: function(t5) {
          var e5 = t5.state;
          Object.keys(e5.elements).forEach(function(t6) {
            var i5 = e5.styles[t6] || {}, n4 = e5.attributes[t6] || {}, o3 = e5.elements[t6];
            j2(o3) && A2(o3) && (Object.assign(o3.style, i5), Object.keys(n4).forEach(function(t7) {
              var e6 = n4[t7];
              false === e6 ? o3.removeAttribute(t7) : o3.setAttribute(t7, true === e6 ? "" : e6);
            }));
          });
        }, effect: function(t5) {
          var e5 = t5.state, i5 = { popper: { position: e5.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };
          return Object.assign(e5.elements.popper.style, i5.popper), e5.styles = i5, e5.elements.arrow && Object.assign(e5.elements.arrow.style, i5.arrow), function() {
            Object.keys(e5.elements).forEach(function(t6) {
              var n4 = e5.elements[t6], o3 = e5.attributes[t6] || {}, r3 = Object.keys(e5.styles.hasOwnProperty(t6) ? e5.styles[t6] : i5[t6]).reduce(function(t7, e6) {
                return t7[e6] = "", t7;
              }, {});
              j2(n4) && A2(n4) && (Object.assign(n4.style, r3), Object.keys(o3).forEach(function(t7) {
                n4.removeAttribute(t7);
              }));
            });
          };
        }, requires: ["computeStyles"] };
        function D3(t5) {
          return t5.split("-")[0];
        }
        var I3 = Math.max, M4 = Math.min, q3 = Math.round;
        function H4() {
          var t5 = navigator.userAgentData;
          return null != t5 && t5.brands ? t5.brands.map(function(t6) {
            return t6.brand + "/" + t6.version;
          }).join(" ") : navigator.userAgent;
        }
        function B3() {
          return !/^((?!chrome|android).)*safari/i.test(H4());
        }
        function V2(t5, e5, i5) {
          void 0 === e5 && (e5 = false), void 0 === i5 && (i5 = false);
          var n4 = t5.getBoundingClientRect(), o3 = 1, r3 = 1;
          e5 && j2(t5) && (o3 = t5.offsetWidth > 0 && q3(n4.width) / t5.offsetWidth || 1, r3 = t5.offsetHeight > 0 && q3(n4.height) / t5.offsetHeight || 1);
          var s5 = (C2(t5) ? T3(t5) : window).visualViewport, a5 = !B3() && i5, c8 = (n4.left + (a5 && s5 ? s5.offsetLeft : 0)) / o3, l3 = (n4.top + (a5 && s5 ? s5.offsetTop : 0)) / r3, d5 = n4.width / o3, u4 = n4.height / r3;
          return { width: d5, height: u4, top: l3, right: c8 + d5, bottom: l3 + u4, left: c8, x: c8, y: l3 };
        }
        function W2(t5) {
          var e5 = V2(t5), i5 = t5.offsetWidth, n4 = t5.offsetHeight;
          return Math.abs(e5.width - i5) <= 1 && (i5 = e5.width), Math.abs(e5.height - n4) <= 1 && (n4 = e5.height), { x: t5.offsetLeft, y: t5.offsetTop, width: i5, height: n4 };
        }
        function z3(t5, e5) {
          var i5 = e5.getRootNode && e5.getRootNode();
          if (t5.contains(e5))
            return true;
          if (i5 && P2(i5)) {
            var n4 = e5;
            do {
              if (n4 && t5.isSameNode(n4))
                return true;
              n4 = n4.parentNode || n4.host;
            } while (n4);
          }
          return false;
        }
        function R3(t5) {
          return T3(t5).getComputedStyle(t5);
        }
        function F2(t5) {
          return ["table", "td", "th"].indexOf(A2(t5)) >= 0;
        }
        function N2(t5) {
          return ((C2(t5) ? t5.ownerDocument : t5.document) || window.document).documentElement;
        }
        function K3(t5) {
          return "html" === A2(t5) ? t5 : t5.assignedSlot || t5.parentNode || (P2(t5) ? t5.host : null) || N2(t5);
        }
        function U2(t5) {
          return j2(t5) && "fixed" !== R3(t5).position ? t5.offsetParent : null;
        }
        function X3(t5) {
          for (var e5 = T3(t5), i5 = U2(t5); i5 && F2(i5) && "static" === R3(i5).position; )
            i5 = U2(i5);
          return i5 && ("html" === A2(i5) || "body" === A2(i5) && "static" === R3(i5).position) ? e5 : i5 || function(t6) {
            var e6 = /firefox/i.test(H4());
            if (/Trident/i.test(H4()) && j2(t6) && "fixed" === R3(t6).position)
              return null;
            var i6 = K3(t6);
            for (P2(i6) && (i6 = i6.host); j2(i6) && ["html", "body"].indexOf(A2(i6)) < 0; ) {
              var n4 = R3(i6);
              if ("none" !== n4.transform || "none" !== n4.perspective || "paint" === n4.contain || -1 !== ["transform", "perspective"].indexOf(n4.willChange) || e6 && "filter" === n4.willChange || e6 && n4.filter && "none" !== n4.filter)
                return i6;
              i6 = i6.parentNode;
            }
            return null;
          }(t5) || e5;
        }
        function Y3(t5) {
          return ["top", "bottom"].indexOf(t5) >= 0 ? "x" : "y";
        }
        function G3(t5, e5, i5) {
          return I3(t5, M4(e5, i5));
        }
        function J2(t5) {
          return Object.assign({}, { top: 0, right: 0, bottom: 0, left: 0 }, t5);
        }
        function Q3(t5, e5) {
          return e5.reduce(function(e6, i5) {
            return e6[i5] = t5, e6;
          }, {});
        }
        var Z2 = { name: "arrow", enabled: true, phase: "main", fn: function(t5) {
          var e5, i5 = t5.state, a5 = t5.name, l3 = t5.options, d5 = i5.elements.arrow, u4 = i5.modifiersData.popperOffsets, p3 = D3(i5.placement), f3 = Y3(p3), h5 = [s4, r2].indexOf(p3) >= 0 ? "height" : "width";
          if (d5 && u4) {
            var g3 = function(t6, e6) {
              return J2("number" != typeof (t6 = "function" == typeof t6 ? t6(Object.assign({}, e6.rects, { placement: e6.placement })) : t6) ? t6 : Q3(t6, c7));
            }(l3.padding, i5), v3 = W2(d5), m5 = "y" === f3 ? n3 : s4, y5 = "y" === f3 ? o2 : r2, _3 = i5.rects.reference[h5] + i5.rects.reference[f3] - u4[f3] - i5.rects.popper[h5], b4 = u4[f3] - i5.rects.reference[f3], w4 = X3(d5), E4 = w4 ? "y" === f3 ? w4.clientHeight || 0 : w4.clientWidth || 0 : 0, L4 = _3 / 2 - b4 / 2, O4 = g3[m5], x4 = E4 - v3[h5] - g3[y5], k4 = E4 / 2 - v3[h5] / 2 + L4, A3 = G3(O4, k4, x4), T4 = f3;
            i5.modifiersData[a5] = ((e5 = {})[T4] = A3, e5.centerOffset = A3 - k4, e5);
          }
        }, effect: function(t5) {
          var e5 = t5.state, i5 = t5.options.element, n4 = void 0 === i5 ? "[data-popper-arrow]" : i5;
          null != n4 && ("string" != typeof n4 || (n4 = e5.elements.popper.querySelector(n4))) && z3(e5.elements.popper, n4) && (e5.elements.arrow = n4);
        }, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] };
        function $2(t5) {
          return t5.split("-")[1];
        }
        var tt2 = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
        function et2(t5) {
          var e5, i5 = t5.popper, a5 = t5.popperRect, c8 = t5.placement, l3 = t5.variation, u4 = t5.offsets, p3 = t5.position, f3 = t5.gpuAcceleration, h5 = t5.adaptive, g3 = t5.roundOffsets, v3 = t5.isFixed, m5 = u4.x, y5 = void 0 === m5 ? 0 : m5, _3 = u4.y, b4 = void 0 === _3 ? 0 : _3, w4 = "function" == typeof g3 ? g3({ x: y5, y: b4 }) : { x: y5, y: b4 };
          y5 = w4.x, b4 = w4.y;
          var E4 = u4.hasOwnProperty("x"), L4 = u4.hasOwnProperty("y"), O4 = s4, x4 = n3, k4 = window;
          if (h5) {
            var A3 = X3(i5), C3 = "clientHeight", j3 = "clientWidth";
            if (A3 === T3(i5) && "static" !== R3(A3 = N2(i5)).position && "absolute" === p3 && (C3 = "scrollHeight", j3 = "scrollWidth"), c8 === n3 || (c8 === s4 || c8 === r2) && l3 === d4)
              x4 = o2, b4 -= (v3 && A3 === k4 && k4.visualViewport ? k4.visualViewport.height : A3[C3]) - a5.height, b4 *= f3 ? 1 : -1;
            if (c8 === s4 || (c8 === n3 || c8 === o2) && l3 === d4)
              O4 = r2, y5 -= (v3 && A3 === k4 && k4.visualViewport ? k4.visualViewport.width : A3[j3]) - a5.width, y5 *= f3 ? 1 : -1;
          }
          var P3, S5 = Object.assign({ position: p3 }, h5 && tt2), D4 = true === g3 ? function(t6) {
            var e6 = t6.x, i6 = t6.y, n4 = window.devicePixelRatio || 1;
            return { x: q3(e6 * n4) / n4 || 0, y: q3(i6 * n4) / n4 || 0 };
          }({ x: y5, y: b4 }) : { x: y5, y: b4 };
          return y5 = D4.x, b4 = D4.y, f3 ? Object.assign({}, S5, ((P3 = {})[x4] = L4 ? "0" : "", P3[O4] = E4 ? "0" : "", P3.transform = (k4.devicePixelRatio || 1) <= 1 ? "translate(" + y5 + "px, " + b4 + "px)" : "translate3d(" + y5 + "px, " + b4 + "px, 0)", P3)) : Object.assign({}, S5, ((e5 = {})[x4] = L4 ? b4 + "px" : "", e5[O4] = E4 ? y5 + "px" : "", e5.transform = "", e5));
        }
        var it2 = { name: "computeStyles", enabled: true, phase: "beforeWrite", fn: function(t5) {
          var e5 = t5.state, i5 = t5.options, n4 = i5.gpuAcceleration, o3 = void 0 === n4 || n4, r3 = i5.adaptive, s5 = void 0 === r3 || r3, a5 = i5.roundOffsets, c8 = void 0 === a5 || a5, l3 = { placement: D3(e5.placement), variation: $2(e5.placement), popper: e5.elements.popper, popperRect: e5.rects.popper, gpuAcceleration: o3, isFixed: "fixed" === e5.options.strategy };
          null != e5.modifiersData.popperOffsets && (e5.styles.popper = Object.assign({}, e5.styles.popper, et2(Object.assign({}, l3, { offsets: e5.modifiersData.popperOffsets, position: e5.options.strategy, adaptive: s5, roundOffsets: c8 })))), null != e5.modifiersData.arrow && (e5.styles.arrow = Object.assign({}, e5.styles.arrow, et2(Object.assign({}, l3, { offsets: e5.modifiersData.arrow, position: "absolute", adaptive: false, roundOffsets: c8 })))), e5.attributes.popper = Object.assign({}, e5.attributes.popper, { "data-popper-placement": e5.placement });
        }, data: {} }, nt2 = { passive: true };
        var ot2 = { name: "eventListeners", enabled: true, phase: "write", fn: function() {
        }, effect: function(t5) {
          var e5 = t5.state, i5 = t5.instance, n4 = t5.options, o3 = n4.scroll, r3 = void 0 === o3 || o3, s5 = n4.resize, a5 = void 0 === s5 || s5, c8 = T3(e5.elements.popper), l3 = [].concat(e5.scrollParents.reference, e5.scrollParents.popper);
          return r3 && l3.forEach(function(t6) {
            t6.addEventListener("scroll", i5.update, nt2);
          }), a5 && c8.addEventListener("resize", i5.update, nt2), function() {
            r3 && l3.forEach(function(t6) {
              t6.removeEventListener("scroll", i5.update, nt2);
            }), a5 && c8.removeEventListener("resize", i5.update, nt2);
          };
        }, data: {} }, rt2 = { left: "right", right: "left", bottom: "top", top: "bottom" };
        function st2(t5) {
          return t5.replace(/left|right|bottom|top/g, function(t6) {
            return rt2[t6];
          });
        }
        var at2 = { start: "end", end: "start" };
        function ct2(t5) {
          return t5.replace(/start|end/g, function(t6) {
            return at2[t6];
          });
        }
        function lt2(t5) {
          var e5 = T3(t5);
          return { scrollLeft: e5.pageXOffset, scrollTop: e5.pageYOffset };
        }
        function dt2(t5) {
          return V2(N2(t5)).left + lt2(t5).scrollLeft;
        }
        function ut2(t5) {
          var e5 = R3(t5), i5 = e5.overflow, n4 = e5.overflowX, o3 = e5.overflowY;
          return /auto|scroll|overlay|hidden/.test(i5 + o3 + n4);
        }
        function pt2(t5) {
          return ["html", "body", "#document"].indexOf(A2(t5)) >= 0 ? t5.ownerDocument.body : j2(t5) && ut2(t5) ? t5 : pt2(K3(t5));
        }
        function ft2(t5, e5) {
          var i5;
          void 0 === e5 && (e5 = []);
          var n4 = pt2(t5), o3 = n4 === (null == (i5 = t5.ownerDocument) ? void 0 : i5.body), r3 = T3(n4), s5 = o3 ? [r3].concat(r3.visualViewport || [], ut2(n4) ? n4 : []) : n4, a5 = e5.concat(s5);
          return o3 ? a5 : a5.concat(ft2(K3(s5)));
        }
        function ht2(t5) {
          return Object.assign({}, t5, { left: t5.x, top: t5.y, right: t5.x + t5.width, bottom: t5.y + t5.height });
        }
        function gt2(t5, e5, i5) {
          return e5 === p2 ? ht2(function(t6, e6) {
            var i6 = T3(t6), n4 = N2(t6), o3 = i6.visualViewport, r3 = n4.clientWidth, s5 = n4.clientHeight, a5 = 0, c8 = 0;
            if (o3) {
              r3 = o3.width, s5 = o3.height;
              var l3 = B3();
              (l3 || !l3 && "fixed" === e6) && (a5 = o3.offsetLeft, c8 = o3.offsetTop);
            }
            return { width: r3, height: s5, x: a5 + dt2(t6), y: c8 };
          }(t5, i5)) : C2(e5) ? function(t6, e6) {
            var i6 = V2(t6, false, "fixed" === e6);
            return i6.top = i6.top + t6.clientTop, i6.left = i6.left + t6.clientLeft, i6.bottom = i6.top + t6.clientHeight, i6.right = i6.left + t6.clientWidth, i6.width = t6.clientWidth, i6.height = t6.clientHeight, i6.x = i6.left, i6.y = i6.top, i6;
          }(e5, i5) : ht2(function(t6) {
            var e6, i6 = N2(t6), n4 = lt2(t6), o3 = null == (e6 = t6.ownerDocument) ? void 0 : e6.body, r3 = I3(i6.scrollWidth, i6.clientWidth, o3 ? o3.scrollWidth : 0, o3 ? o3.clientWidth : 0), s5 = I3(i6.scrollHeight, i6.clientHeight, o3 ? o3.scrollHeight : 0, o3 ? o3.clientHeight : 0), a5 = -n4.scrollLeft + dt2(t6), c8 = -n4.scrollTop;
            return "rtl" === R3(o3 || i6).direction && (a5 += I3(i6.clientWidth, o3 ? o3.clientWidth : 0) - r3), { width: r3, height: s5, x: a5, y: c8 };
          }(N2(t5)));
        }
        function vt2(t5, e5, i5, n4) {
          var o3 = "clippingParents" === e5 ? function(t6) {
            var e6 = ft2(K3(t6)), i6 = ["absolute", "fixed"].indexOf(R3(t6).position) >= 0 && j2(t6) ? X3(t6) : t6;
            return C2(i6) ? e6.filter(function(t7) {
              return C2(t7) && z3(t7, i6) && "body" !== A2(t7);
            }) : [];
          }(t5) : [].concat(e5), r3 = [].concat(o3, [i5]), s5 = r3[0], a5 = r3.reduce(function(e6, i6) {
            var o4 = gt2(t5, i6, n4);
            return e6.top = I3(o4.top, e6.top), e6.right = M4(o4.right, e6.right), e6.bottom = M4(o4.bottom, e6.bottom), e6.left = I3(o4.left, e6.left), e6;
          }, gt2(t5, s5, n4));
          return a5.width = a5.right - a5.left, a5.height = a5.bottom - a5.top, a5.x = a5.left, a5.y = a5.top, a5;
        }
        function mt2(t5) {
          var e5, i5 = t5.reference, a5 = t5.element, c8 = t5.placement, u4 = c8 ? D3(c8) : null, p3 = c8 ? $2(c8) : null, f3 = i5.x + i5.width / 2 - a5.width / 2, h5 = i5.y + i5.height / 2 - a5.height / 2;
          switch (u4) {
            case n3:
              e5 = { x: f3, y: i5.y - a5.height };
              break;
            case o2:
              e5 = { x: f3, y: i5.y + i5.height };
              break;
            case r2:
              e5 = { x: i5.x + i5.width, y: h5 };
              break;
            case s4:
              e5 = { x: i5.x - a5.width, y: h5 };
              break;
            default:
              e5 = { x: i5.x, y: i5.y };
          }
          var g3 = u4 ? Y3(u4) : null;
          if (null != g3) {
            var v3 = "y" === g3 ? "height" : "width";
            switch (p3) {
              case l2:
                e5[g3] = e5[g3] - (i5[v3] / 2 - a5[v3] / 2);
                break;
              case d4:
                e5[g3] = e5[g3] + (i5[v3] / 2 - a5[v3] / 2);
            }
          }
          return e5;
        }
        function yt2(t5, e5) {
          void 0 === e5 && (e5 = {});
          var i5 = e5, s5 = i5.placement, a5 = void 0 === s5 ? t5.placement : s5, l3 = i5.strategy, d5 = void 0 === l3 ? t5.strategy : l3, g3 = i5.boundary, v3 = void 0 === g3 ? u3 : g3, m5 = i5.rootBoundary, y5 = void 0 === m5 ? p2 : m5, _3 = i5.elementContext, b4 = void 0 === _3 ? f2 : _3, w4 = i5.altBoundary, E4 = void 0 !== w4 && w4, L4 = i5.padding, O4 = void 0 === L4 ? 0 : L4, x4 = J2("number" != typeof O4 ? O4 : Q3(O4, c7)), k4 = b4 === f2 ? h4 : f2, A3 = t5.rects.popper, T4 = t5.elements[E4 ? k4 : b4], j3 = vt2(C2(T4) ? T4 : T4.contextElement || N2(t5.elements.popper), v3, y5, d5), P3 = V2(t5.elements.reference), S5 = mt2({ reference: P3, element: A3, strategy: "absolute", placement: a5 }), D4 = ht2(Object.assign({}, A3, S5)), I4 = b4 === f2 ? D4 : P3, M5 = { top: j3.top - I4.top + x4.top, bottom: I4.bottom - j3.bottom + x4.bottom, left: j3.left - I4.left + x4.left, right: I4.right - j3.right + x4.right }, q4 = t5.modifiersData.offset;
          if (b4 === f2 && q4) {
            var H5 = q4[a5];
            Object.keys(M5).forEach(function(t6) {
              var e6 = [r2, o2].indexOf(t6) >= 0 ? 1 : -1, i6 = [n3, o2].indexOf(t6) >= 0 ? "y" : "x";
              M5[t6] += H5[i6] * e6;
            });
          }
          return M5;
        }
        var _t5 = { name: "flip", enabled: true, phase: "main", fn: function(t5) {
          var e5 = t5.state, i5 = t5.options, d5 = t5.name;
          if (!e5.modifiersData[d5]._skip) {
            for (var u4 = i5.mainAxis, p3 = void 0 === u4 || u4, f3 = i5.altAxis, h5 = void 0 === f3 || f3, m5 = i5.fallbackPlacements, y5 = i5.padding, _3 = i5.boundary, b4 = i5.rootBoundary, w4 = i5.altBoundary, E4 = i5.flipVariations, L4 = void 0 === E4 || E4, O4 = i5.allowedAutoPlacements, x4 = e5.options.placement, k4 = D3(x4), A3 = m5 || (k4 === x4 || !L4 ? [st2(x4)] : function(t6) {
              if (D3(t6) === a4)
                return [];
              var e6 = st2(t6);
              return [ct2(t6), e6, ct2(e6)];
            }(x4)), T4 = [x4].concat(A3).reduce(function(t6, i6) {
              return t6.concat(D3(i6) === a4 ? function(t7, e6) {
                void 0 === e6 && (e6 = {});
                var i7 = e6, n4 = i7.placement, o3 = i7.boundary, r3 = i7.rootBoundary, s5 = i7.padding, a5 = i7.flipVariations, l3 = i7.allowedAutoPlacements, d6 = void 0 === l3 ? v2 : l3, u5 = $2(n4), p4 = u5 ? a5 ? g2 : g2.filter(function(t8) {
                  return $2(t8) === u5;
                }) : c7, f4 = p4.filter(function(t8) {
                  return d6.indexOf(t8) >= 0;
                });
                0 === f4.length && (f4 = p4);
                var h6 = f4.reduce(function(e7, i8) {
                  return e7[i8] = yt2(t7, { placement: i8, boundary: o3, rootBoundary: r3, padding: s5 })[D3(i8)], e7;
                }, {});
                return Object.keys(h6).sort(function(t8, e7) {
                  return h6[t8] - h6[e7];
                });
              }(e5, { placement: i6, boundary: _3, rootBoundary: b4, padding: y5, flipVariations: L4, allowedAutoPlacements: O4 }) : i6);
            }, []), C3 = e5.rects.reference, j3 = e5.rects.popper, P3 = /* @__PURE__ */ new Map(), S5 = true, I4 = T4[0], M5 = 0; M5 < T4.length; M5++) {
              var q4 = T4[M5], H5 = D3(q4), B4 = $2(q4) === l2, V3 = [n3, o2].indexOf(H5) >= 0, W3 = V3 ? "width" : "height", z4 = yt2(e5, { placement: q4, boundary: _3, rootBoundary: b4, altBoundary: w4, padding: y5 }), R4 = V3 ? B4 ? r2 : s4 : B4 ? o2 : n3;
              C3[W3] > j3[W3] && (R4 = st2(R4));
              var F3 = st2(R4), N3 = [];
              if (p3 && N3.push(z4[H5] <= 0), h5 && N3.push(z4[R4] <= 0, z4[F3] <= 0), N3.every(function(t6) {
                return t6;
              })) {
                I4 = q4, S5 = false;
                break;
              }
              P3.set(q4, N3);
            }
            if (S5)
              for (var K4 = function(t6) {
                var e6 = T4.find(function(e7) {
                  var i6 = P3.get(e7);
                  if (i6)
                    return i6.slice(0, t6).every(function(t7) {
                      return t7;
                    });
                });
                if (e6)
                  return I4 = e6, "break";
              }, U3 = L4 ? 3 : 1; U3 > 0; U3--) {
                if ("break" === K4(U3))
                  break;
              }
            e5.placement !== I4 && (e5.modifiersData[d5]._skip = true, e5.placement = I4, e5.reset = true);
          }
        }, requiresIfExists: ["offset"], data: { _skip: false } };
        function bt2(t5, e5, i5) {
          return void 0 === i5 && (i5 = { x: 0, y: 0 }), { top: t5.top - e5.height - i5.y, right: t5.right - e5.width + i5.x, bottom: t5.bottom - e5.height + i5.y, left: t5.left - e5.width - i5.x };
        }
        function wt2(t5) {
          return [n3, r2, o2, s4].some(function(e5) {
            return t5[e5] >= 0;
          });
        }
        var Et2 = { name: "hide", enabled: true, phase: "main", requiresIfExists: ["preventOverflow"], fn: function(t5) {
          var e5 = t5.state, i5 = t5.name, n4 = e5.rects.reference, o3 = e5.rects.popper, r3 = e5.modifiersData.preventOverflow, s5 = yt2(e5, { elementContext: "reference" }), a5 = yt2(e5, { altBoundary: true }), c8 = bt2(s5, n4), l3 = bt2(a5, o3, r3), d5 = wt2(c8), u4 = wt2(l3);
          e5.modifiersData[i5] = { referenceClippingOffsets: c8, popperEscapeOffsets: l3, isReferenceHidden: d5, hasPopperEscaped: u4 }, e5.attributes.popper = Object.assign({}, e5.attributes.popper, { "data-popper-reference-hidden": d5, "data-popper-escaped": u4 });
        } };
        var Lt2 = { name: "offset", enabled: true, phase: "main", requires: ["popperOffsets"], fn: function(t5) {
          var e5 = t5.state, i5 = t5.options, o3 = t5.name, a5 = i5.offset, c8 = void 0 === a5 ? [0, 0] : a5, l3 = v2.reduce(function(t6, i6) {
            return t6[i6] = function(t7, e6, i7) {
              var o4 = D3(t7), a6 = [s4, n3].indexOf(o4) >= 0 ? -1 : 1, c9 = "function" == typeof i7 ? i7(Object.assign({}, e6, { placement: t7 })) : i7, l4 = c9[0], d6 = c9[1];
              return l4 = l4 || 0, d6 = (d6 || 0) * a6, [s4, r2].indexOf(o4) >= 0 ? { x: d6, y: l4 } : { x: l4, y: d6 };
            }(i6, e5.rects, c8), t6;
          }, {}), d5 = l3[e5.placement], u4 = d5.x, p3 = d5.y;
          null != e5.modifiersData.popperOffsets && (e5.modifiersData.popperOffsets.x += u4, e5.modifiersData.popperOffsets.y += p3), e5.modifiersData[o3] = l3;
        } };
        var Ot2 = { name: "popperOffsets", enabled: true, phase: "read", fn: function(t5) {
          var e5 = t5.state, i5 = t5.name;
          e5.modifiersData[i5] = mt2({ reference: e5.rects.reference, element: e5.rects.popper, strategy: "absolute", placement: e5.placement });
        }, data: {} };
        var xt2 = { name: "preventOverflow", enabled: true, phase: "main", fn: function(t5) {
          var e5 = t5.state, i5 = t5.options, a5 = t5.name, c8 = i5.mainAxis, d5 = void 0 === c8 || c8, u4 = i5.altAxis, p3 = void 0 !== u4 && u4, f3 = i5.boundary, h5 = i5.rootBoundary, g3 = i5.altBoundary, v3 = i5.padding, m5 = i5.tether, y5 = void 0 === m5 || m5, _3 = i5.tetherOffset, b4 = void 0 === _3 ? 0 : _3, w4 = yt2(e5, { boundary: f3, rootBoundary: h5, padding: v3, altBoundary: g3 }), E4 = D3(e5.placement), L4 = $2(e5.placement), O4 = !L4, x4 = Y3(E4), k4 = "x" === x4 ? "y" : "x", A3 = e5.modifiersData.popperOffsets, T4 = e5.rects.reference, C3 = e5.rects.popper, j3 = "function" == typeof b4 ? b4(Object.assign({}, e5.rects, { placement: e5.placement })) : b4, P3 = "number" == typeof j3 ? { mainAxis: j3, altAxis: j3 } : Object.assign({ mainAxis: 0, altAxis: 0 }, j3), S5 = e5.modifiersData.offset ? e5.modifiersData.offset[e5.placement] : null, q4 = { x: 0, y: 0 };
          if (A3) {
            if (d5) {
              var H5, B4 = "y" === x4 ? n3 : s4, V3 = "y" === x4 ? o2 : r2, z4 = "y" === x4 ? "height" : "width", R4 = A3[x4], F3 = R4 + w4[B4], N3 = R4 - w4[V3], K4 = y5 ? -C3[z4] / 2 : 0, U3 = L4 === l2 ? T4[z4] : C3[z4], J3 = L4 === l2 ? -C3[z4] : -T4[z4], Q4 = e5.elements.arrow, Z3 = y5 && Q4 ? W2(Q4) : { width: 0, height: 0 }, tt3 = e5.modifiersData["arrow#persistent"] ? e5.modifiersData["arrow#persistent"].padding : { top: 0, right: 0, bottom: 0, left: 0 }, et3 = tt3[B4], it3 = tt3[V3], nt3 = G3(0, T4[z4], Z3[z4]), ot3 = O4 ? T4[z4] / 2 - K4 - nt3 - et3 - P3.mainAxis : U3 - nt3 - et3 - P3.mainAxis, rt3 = O4 ? -T4[z4] / 2 + K4 + nt3 + it3 + P3.mainAxis : J3 + nt3 + it3 + P3.mainAxis, st3 = e5.elements.arrow && X3(e5.elements.arrow), at3 = st3 ? "y" === x4 ? st3.clientTop || 0 : st3.clientLeft || 0 : 0, ct3 = null != (H5 = null == S5 ? void 0 : S5[x4]) ? H5 : 0, lt3 = R4 + rt3 - ct3, dt3 = G3(y5 ? M4(F3, R4 + ot3 - ct3 - at3) : F3, R4, y5 ? I3(N3, lt3) : N3);
              A3[x4] = dt3, q4[x4] = dt3 - R4;
            }
            if (p3) {
              var ut3, pt3 = "x" === x4 ? n3 : s4, ft3 = "x" === x4 ? o2 : r2, ht3 = A3[k4], gt3 = "y" === k4 ? "height" : "width", vt3 = ht3 + w4[pt3], mt3 = ht3 - w4[ft3], _t6 = -1 !== [n3, s4].indexOf(E4), bt3 = null != (ut3 = null == S5 ? void 0 : S5[k4]) ? ut3 : 0, wt3 = _t6 ? vt3 : ht3 - T4[gt3] - C3[gt3] - bt3 + P3.altAxis, Et3 = _t6 ? ht3 + T4[gt3] + C3[gt3] - bt3 - P3.altAxis : mt3, Lt3 = y5 && _t6 ? function(t6, e6, i6) {
                var n4 = G3(t6, e6, i6);
                return n4 > i6 ? i6 : n4;
              }(wt3, ht3, Et3) : G3(y5 ? wt3 : vt3, ht3, y5 ? Et3 : mt3);
              A3[k4] = Lt3, q4[k4] = Lt3 - ht3;
            }
            e5.modifiersData[a5] = q4;
          }
        }, requiresIfExists: ["offset"] };
        function kt2(t5, e5, i5) {
          void 0 === i5 && (i5 = false);
          var n4, o3, r3 = j2(e5), s5 = j2(e5) && function(t6) {
            var e6 = t6.getBoundingClientRect(), i6 = q3(e6.width) / t6.offsetWidth || 1, n5 = q3(e6.height) / t6.offsetHeight || 1;
            return 1 !== i6 || 1 !== n5;
          }(e5), a5 = N2(e5), c8 = V2(t5, s5, i5), l3 = { scrollLeft: 0, scrollTop: 0 }, d5 = { x: 0, y: 0 };
          return (r3 || !r3 && !i5) && (("body" !== A2(e5) || ut2(a5)) && (l3 = (n4 = e5) !== T3(n4) && j2(n4) ? { scrollLeft: (o3 = n4).scrollLeft, scrollTop: o3.scrollTop } : lt2(n4)), j2(e5) ? ((d5 = V2(e5, true)).x += e5.clientLeft, d5.y += e5.clientTop) : a5 && (d5.x = dt2(a5))), { x: c8.left + l3.scrollLeft - d5.x, y: c8.top + l3.scrollTop - d5.y, width: c8.width, height: c8.height };
        }
        function At2(t5) {
          var e5 = /* @__PURE__ */ new Map(), i5 = /* @__PURE__ */ new Set(), n4 = [];
          function o3(t6) {
            i5.add(t6.name), [].concat(t6.requires || [], t6.requiresIfExists || []).forEach(function(t7) {
              if (!i5.has(t7)) {
                var n5 = e5.get(t7);
                n5 && o3(n5);
              }
            }), n4.push(t6);
          }
          return t5.forEach(function(t6) {
            e5.set(t6.name, t6);
          }), t5.forEach(function(t6) {
            i5.has(t6.name) || o3(t6);
          }), n4;
        }
        var Tt2 = { placement: "bottom", modifiers: [], strategy: "absolute" };
        function Ct2() {
          for (var t5 = arguments.length, e5 = new Array(t5), i5 = 0; i5 < t5; i5++)
            e5[i5] = arguments[i5];
          return !e5.some(function(t6) {
            return !(t6 && "function" == typeof t6.getBoundingClientRect);
          });
        }
        function jt2(t5) {
          void 0 === t5 && (t5 = {});
          var e5 = t5, i5 = e5.defaultModifiers, n4 = void 0 === i5 ? [] : i5, o3 = e5.defaultOptions, r3 = void 0 === o3 ? Tt2 : o3;
          return function(t6, e6, i6) {
            void 0 === i6 && (i6 = r3);
            var o4, s5, a5 = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, Tt2, r3), modifiersData: {}, elements: { reference: t6, popper: e6 }, attributes: {}, styles: {} }, c8 = [], l3 = false, d5 = { state: a5, setOptions: function(i7) {
              var o5 = "function" == typeof i7 ? i7(a5.options) : i7;
              u4(), a5.options = Object.assign({}, r3, a5.options, o5), a5.scrollParents = { reference: C2(t6) ? ft2(t6) : t6.contextElement ? ft2(t6.contextElement) : [], popper: ft2(e6) };
              var s6 = function(t7) {
                var e7 = At2(t7);
                return k3.reduce(function(t8, i8) {
                  return t8.concat(e7.filter(function(t9) {
                    return t9.phase === i8;
                  }));
                }, []);
              }(function(t7) {
                var e7 = t7.reduce(function(t8, e8) {
                  var i8 = t8[e8.name];
                  return t8[e8.name] = i8 ? Object.assign({}, i8, e8, { options: Object.assign({}, i8.options, e8.options), data: Object.assign({}, i8.data, e8.data) }) : e8, t8;
                }, {});
                return Object.keys(e7).map(function(t8) {
                  return e7[t8];
                });
              }([].concat(n4, a5.options.modifiers)));
              return a5.orderedModifiers = s6.filter(function(t7) {
                return t7.enabled;
              }), a5.orderedModifiers.forEach(function(t7) {
                var e7 = t7.name, i8 = t7.options, n5 = void 0 === i8 ? {} : i8, o6 = t7.effect;
                if ("function" == typeof o6) {
                  var r4 = o6({ state: a5, name: e7, instance: d5, options: n5 }), s7 = function() {
                  };
                  c8.push(r4 || s7);
                }
              }), d5.update();
            }, forceUpdate: function() {
              if (!l3) {
                var t7 = a5.elements, e7 = t7.reference, i7 = t7.popper;
                if (Ct2(e7, i7)) {
                  a5.rects = { reference: kt2(e7, X3(i7), "fixed" === a5.options.strategy), popper: W2(i7) }, a5.reset = false, a5.placement = a5.options.placement, a5.orderedModifiers.forEach(function(t8) {
                    return a5.modifiersData[t8.name] = Object.assign({}, t8.data);
                  });
                  for (var n5 = 0; n5 < a5.orderedModifiers.length; n5++)
                    if (true !== a5.reset) {
                      var o5 = a5.orderedModifiers[n5], r4 = o5.fn, s6 = o5.options, c9 = void 0 === s6 ? {} : s6, u5 = o5.name;
                      "function" == typeof r4 && (a5 = r4({ state: a5, options: c9, name: u5, instance: d5 }) || a5);
                    } else
                      a5.reset = false, n5 = -1;
                }
              }
            }, update: (o4 = function() {
              return new Promise(function(t7) {
                d5.forceUpdate(), t7(a5);
              });
            }, function() {
              return s5 || (s5 = new Promise(function(t7) {
                Promise.resolve().then(function() {
                  s5 = void 0, t7(o4());
                });
              })), s5;
            }), destroy: function() {
              u4(), l3 = true;
            } };
            if (!Ct2(t6, e6))
              return d5;
            function u4() {
              c8.forEach(function(t7) {
                return t7();
              }), c8 = [];
            }
            return d5.setOptions(i6).then(function(t7) {
              !l3 && i6.onFirstUpdate && i6.onFirstUpdate(t7);
            }), d5;
          };
        }
        var Pt2 = jt2(), St2 = jt2({ defaultModifiers: [ot2, Ot2, it2, S4, Lt2, _t5, xt2, Z2, Et2] }), Dt2 = jt2({ defaultModifiers: [ot2, Ot2, it2, S4] });
      }, 902: function(t4, e4) {
        var i4 = this && this.__assign || function() {
          return i4 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, i4.apply(this, arguments);
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initAccordions = void 0;
        var n3 = { alwaysOpen: false, activeClasses: "bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white", inactiveClasses: "text-gray-500 dark:text-gray-400", onOpen: function() {
        }, onClose: function() {
        }, onToggle: function() {
        } }, o2 = function() {
          function t5(t6, e5) {
            void 0 === t6 && (t6 = []), void 0 === e5 && (e5 = n3), this._items = t6, this._options = i4(i4({}, n3), e5), this._init();
          }
          return t5.prototype._init = function() {
            var t6 = this;
            this._items.length && this._items.map(function(e5) {
              e5.active && t6.open(e5.id), e5.triggerEl.addEventListener("click", function() {
                t6.toggle(e5.id);
              });
            });
          }, t5.prototype.getItem = function(t6) {
            return this._items.filter(function(e5) {
              return e5.id === t6;
            })[0];
          }, t5.prototype.open = function(t6) {
            var e5, i5, n4 = this, o3 = this.getItem(t6);
            this._options.alwaysOpen || this._items.map(function(t7) {
              var e6, i6;
              t7 !== o3 && ((e6 = t7.triggerEl.classList).remove.apply(e6, n4._options.activeClasses.split(" ")), (i6 = t7.triggerEl.classList).add.apply(i6, n4._options.inactiveClasses.split(" ")), t7.targetEl.classList.add("hidden"), t7.triggerEl.setAttribute("aria-expanded", "false"), t7.active = false, t7.iconEl && t7.iconEl.classList.remove("rotate-180"));
            }), (e5 = o3.triggerEl.classList).add.apply(e5, this._options.activeClasses.split(" ")), (i5 = o3.triggerEl.classList).remove.apply(i5, this._options.inactiveClasses.split(" ")), o3.triggerEl.setAttribute("aria-expanded", "true"), o3.targetEl.classList.remove("hidden"), o3.active = true, o3.iconEl && o3.iconEl.classList.add("rotate-180"), this._options.onOpen(this, o3);
          }, t5.prototype.toggle = function(t6) {
            var e5 = this.getItem(t6);
            e5.active ? this.close(t6) : this.open(t6), this._options.onToggle(this, e5);
          }, t5.prototype.close = function(t6) {
            var e5, i5, n4 = this.getItem(t6);
            (e5 = n4.triggerEl.classList).remove.apply(e5, this._options.activeClasses.split(" ")), (i5 = n4.triggerEl.classList).add.apply(i5, this._options.inactiveClasses.split(" ")), n4.targetEl.classList.add("hidden"), n4.triggerEl.setAttribute("aria-expanded", "false"), n4.active = false, n4.iconEl && n4.iconEl.classList.remove("rotate-180"), this._options.onClose(this, n4);
          }, t5;
        }();
        function r2() {
          document.querySelectorAll("[data-accordion]").forEach(function(t5) {
            var e5 = t5.getAttribute("data-accordion"), i5 = t5.getAttribute("data-active-classes"), r3 = t5.getAttribute("data-inactive-classes"), s4 = [];
            t5.querySelectorAll("[data-accordion-target]").forEach(function(e6) {
              if (e6.closest("[data-accordion]") === t5) {
                var i6 = { id: e6.getAttribute("data-accordion-target"), triggerEl: e6, targetEl: document.querySelector(e6.getAttribute("data-accordion-target")), iconEl: e6.querySelector("[data-accordion-icon]"), active: "true" === e6.getAttribute("aria-expanded") };
                s4.push(i6);
              }
            }), new o2(s4, { alwaysOpen: "open" === e5, activeClasses: i5 || n3.activeClasses, inactiveClasses: r3 || n3.inactiveClasses });
          });
        }
        e4.initAccordions = r2, "undefined" != typeof window && (window.Accordion = o2, window.initAccordions = r2), e4.default = o2;
      }, 33: function(t4, e4) {
        var i4 = this && this.__assign || function() {
          return i4 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, i4.apply(this, arguments);
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initCarousels = void 0;
        var n3 = { defaultPosition: 0, indicators: { items: [], activeClasses: "bg-white dark:bg-gray-800", inactiveClasses: "bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800" }, interval: 3e3, onNext: function() {
        }, onPrev: function() {
        }, onChange: function() {
        } }, o2 = function() {
          function t5(t6, e5) {
            void 0 === t6 && (t6 = []), void 0 === e5 && (e5 = n3), this._items = t6, this._options = i4(i4(i4({}, n3), e5), { indicators: i4(i4({}, n3.indicators), e5.indicators) }), this._activeItem = this.getItem(this._options.defaultPosition), this._indicators = this._options.indicators.items, this._intervalDuration = this._options.interval, this._intervalInstance = null, this._init();
          }
          return t5.prototype._init = function() {
            var t6 = this;
            this._items.map(function(t7) {
              t7.el.classList.add("absolute", "inset-0", "transition-transform", "transform");
            }), this._getActiveItem() ? this.slideTo(this._getActiveItem().position) : this.slideTo(0), this._indicators.map(function(e5, i5) {
              e5.el.addEventListener("click", function() {
                t6.slideTo(i5);
              });
            });
          }, t5.prototype.getItem = function(t6) {
            return this._items[t6];
          }, t5.prototype.slideTo = function(t6) {
            var e5 = this._items[t6], i5 = { left: 0 === e5.position ? this._items[this._items.length - 1] : this._items[e5.position - 1], middle: e5, right: e5.position === this._items.length - 1 ? this._items[0] : this._items[e5.position + 1] };
            this._rotate(i5), this._setActiveItem(e5), this._intervalInstance && (this.pause(), this.cycle()), this._options.onChange(this);
          }, t5.prototype.next = function() {
            var t6 = this._getActiveItem(), e5 = null;
            e5 = t6.position === this._items.length - 1 ? this._items[0] : this._items[t6.position + 1], this.slideTo(e5.position), this._options.onNext(this);
          }, t5.prototype.prev = function() {
            var t6 = this._getActiveItem(), e5 = null;
            e5 = 0 === t6.position ? this._items[this._items.length - 1] : this._items[t6.position - 1], this.slideTo(e5.position), this._options.onPrev(this);
          }, t5.prototype._rotate = function(t6) {
            this._items.map(function(t7) {
              t7.el.classList.add("hidden");
            }), t6.left.el.classList.remove("-translate-x-full", "translate-x-full", "translate-x-0", "hidden", "z-20"), t6.left.el.classList.add("-translate-x-full", "z-10"), t6.middle.el.classList.remove("-translate-x-full", "translate-x-full", "translate-x-0", "hidden", "z-10"), t6.middle.el.classList.add("translate-x-0", "z-20"), t6.right.el.classList.remove("-translate-x-full", "translate-x-full", "translate-x-0", "hidden", "z-20"), t6.right.el.classList.add("translate-x-full", "z-10");
          }, t5.prototype.cycle = function() {
            var t6 = this;
            "undefined" != typeof window && (this._intervalInstance = window.setInterval(function() {
              t6.next();
            }, this._intervalDuration));
          }, t5.prototype.pause = function() {
            clearInterval(this._intervalInstance);
          }, t5.prototype._getActiveItem = function() {
            return this._activeItem;
          }, t5.prototype._setActiveItem = function(t6) {
            var e5, i5, n4 = this;
            this._activeItem = t6;
            var o3 = t6.position;
            this._indicators.length && (this._indicators.map(function(t7) {
              var e6, i6;
              t7.el.setAttribute("aria-current", "false"), (e6 = t7.el.classList).remove.apply(e6, n4._options.indicators.activeClasses.split(" ")), (i6 = t7.el.classList).add.apply(i6, n4._options.indicators.inactiveClasses.split(" "));
            }), (e5 = this._indicators[o3].el.classList).add.apply(e5, this._options.indicators.activeClasses.split(" ")), (i5 = this._indicators[o3].el.classList).remove.apply(i5, this._options.indicators.inactiveClasses.split(" ")), this._indicators[o3].el.setAttribute("aria-current", "true"));
          }, t5;
        }();
        function r2() {
          document.querySelectorAll("[data-carousel]").forEach(function(t5) {
            var e5 = t5.getAttribute("data-carousel-interval"), i5 = "slide" === t5.getAttribute("data-carousel"), r3 = [], s4 = 0;
            t5.querySelectorAll("[data-carousel-item]").length && Array.from(t5.querySelectorAll("[data-carousel-item]")).map(function(t6, e6) {
              r3.push({ position: e6, el: t6 }), "active" === t6.getAttribute("data-carousel-item") && (s4 = e6);
            });
            var a4 = [];
            t5.querySelectorAll("[data-carousel-slide-to]").length && Array.from(t5.querySelectorAll("[data-carousel-slide-to]")).map(function(t6) {
              a4.push({ position: parseInt(t6.getAttribute("data-carousel-slide-to")), el: t6 });
            });
            var c7 = new o2(r3, { defaultPosition: s4, indicators: { items: a4 }, interval: e5 || n3.interval });
            i5 && c7.cycle();
            var l2 = t5.querySelector("[data-carousel-next]"), d4 = t5.querySelector("[data-carousel-prev]");
            l2 && l2.addEventListener("click", function() {
              c7.next();
            }), d4 && d4.addEventListener("click", function() {
              c7.prev();
            });
          });
        }
        e4.initCarousels = r2, "undefined" != typeof window && (window.Carousel = o2, window.initCarousels = r2), e4.default = o2;
      }, 922: function(t4, e4) {
        var i4 = this && this.__assign || function() {
          return i4 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, i4.apply(this, arguments);
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initCollapses = void 0;
        var n3 = { onCollapse: function() {
        }, onExpand: function() {
        }, onToggle: function() {
        } }, o2 = function() {
          function t5(t6, e5, o3) {
            void 0 === t6 && (t6 = null), void 0 === e5 && (e5 = null), void 0 === o3 && (o3 = n3), this._targetEl = t6, this._triggerEl = e5, this._options = i4(i4({}, n3), o3), this._visible = false, this._init();
          }
          return t5.prototype._init = function() {
            var t6 = this;
            this._triggerEl && (this._triggerEl.hasAttribute("aria-expanded") ? this._visible = "true" === this._triggerEl.getAttribute("aria-expanded") : this._visible = !this._targetEl.classList.contains("hidden"), this._triggerEl.addEventListener("click", function() {
              t6.toggle();
            }));
          }, t5.prototype.collapse = function() {
            this._targetEl.classList.add("hidden"), this._triggerEl && this._triggerEl.setAttribute("aria-expanded", "false"), this._visible = false, this._options.onCollapse(this);
          }, t5.prototype.expand = function() {
            this._targetEl.classList.remove("hidden"), this._triggerEl && this._triggerEl.setAttribute("aria-expanded", "true"), this._visible = true, this._options.onExpand(this);
          }, t5.prototype.toggle = function() {
            this._visible ? this.collapse() : this.expand(), this._options.onToggle(this);
          }, t5;
        }();
        function r2() {
          document.querySelectorAll("[data-collapse-toggle]").forEach(function(t5) {
            var e5 = t5.getAttribute("data-collapse-toggle"), i5 = document.getElementById(e5);
            i5 ? new o2(i5, t5) : console.error('The target element with id "'.concat(e5, '" does not exist. Please check the data-collapse-toggle attribute.'));
          });
        }
        e4.initCollapses = r2, "undefined" != typeof window && (window.Collapse = o2, window.initCollapses = r2), e4.default = o2;
      }, 556: function(t4, e4) {
        var i4 = this && this.__assign || function() {
          return i4 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, i4.apply(this, arguments);
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initDials = void 0;
        var n3 = { triggerType: "hover", onShow: function() {
        }, onHide: function() {
        }, onToggle: function() {
        } }, o2 = function() {
          function t5(t6, e5, o3, r3) {
            void 0 === t6 && (t6 = null), void 0 === e5 && (e5 = null), void 0 === o3 && (o3 = null), void 0 === r3 && (r3 = n3), this._parentEl = t6, this._triggerEl = e5, this._targetEl = o3, this._options = i4(i4({}, n3), r3), this._visible = false, this._init();
          }
          return t5.prototype._init = function() {
            var t6 = this;
            if (this._triggerEl) {
              var e5 = this._getTriggerEventTypes(this._options.triggerType);
              e5.showEvents.forEach(function(e6) {
                t6._triggerEl.addEventListener(e6, function() {
                  t6.show();
                }), t6._targetEl.addEventListener(e6, function() {
                  t6.show();
                });
              }), e5.hideEvents.forEach(function(e6) {
                t6._parentEl.addEventListener(e6, function() {
                  t6._parentEl.matches(":hover") || t6.hide();
                });
              });
            }
          }, t5.prototype.hide = function() {
            this._targetEl.classList.add("hidden"), this._triggerEl && this._triggerEl.setAttribute("aria-expanded", "false"), this._visible = false, this._options.onHide(this);
          }, t5.prototype.show = function() {
            this._targetEl.classList.remove("hidden"), this._triggerEl && this._triggerEl.setAttribute("aria-expanded", "true"), this._visible = true, this._options.onShow(this);
          }, t5.prototype.toggle = function() {
            this._visible ? this.hide() : this.show();
          }, t5.prototype.isHidden = function() {
            return !this._visible;
          }, t5.prototype.isVisible = function() {
            return this._visible;
          }, t5.prototype._getTriggerEventTypes = function(t6) {
            switch (t6) {
              case "hover":
              default:
                return { showEvents: ["mouseenter", "focus"], hideEvents: ["mouseleave", "blur"] };
              case "click":
                return { showEvents: ["click", "focus"], hideEvents: ["focusout", "blur"] };
              case "none":
                return { showEvents: [], hideEvents: [] };
            }
          }, t5;
        }();
        function r2() {
          document.querySelectorAll("[data-dial-init]").forEach(function(t5) {
            var e5 = t5.querySelector("[data-dial-toggle]");
            if (e5) {
              var i5 = e5.getAttribute("data-dial-toggle"), r3 = document.getElementById(i5);
              if (r3) {
                var s4 = e5.getAttribute("data-dial-trigger");
                new o2(t5, e5, r3, { triggerType: s4 || n3.triggerType });
              } else
                console.error("Dial with id ".concat(i5, " does not exist. Are you sure that the data-dial-toggle attribute points to the correct modal id?"));
            } else
              console.error("Dial with id ".concat(t5.id, " does not have a trigger element. Are you sure that the data-dial-toggle attribute exists?"));
          });
        }
        e4.initDials = r2, "undefined" != typeof window && (window.Dial = o2, window.initDials = r2), e4.default = o2;
      }, 791: function(t4, e4) {
        var i4 = this && this.__assign || function() {
          return i4 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, i4.apply(this, arguments);
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initDismisses = void 0;
        var n3 = { transition: "transition-opacity", duration: 300, timing: "ease-out", onHide: function() {
        } }, o2 = function() {
          function t5(t6, e5, o3) {
            void 0 === t6 && (t6 = null), void 0 === e5 && (e5 = null), void 0 === o3 && (o3 = n3), this._targetEl = t6, this._triggerEl = e5, this._options = i4(i4({}, n3), o3), this._init();
          }
          return t5.prototype._init = function() {
            var t6 = this;
            this._triggerEl && this._triggerEl.addEventListener("click", function() {
              t6.hide();
            });
          }, t5.prototype.hide = function() {
            var t6 = this;
            this._targetEl.classList.add(this._options.transition, "duration-".concat(this._options.duration), this._options.timing, "opacity-0"), setTimeout(function() {
              t6._targetEl.classList.add("hidden");
            }, this._options.duration), this._options.onHide(this, this._targetEl);
          }, t5;
        }();
        function r2() {
          document.querySelectorAll("[data-dismiss-target]").forEach(function(t5) {
            var e5 = t5.getAttribute("data-dismiss-target"), i5 = document.querySelector(e5);
            i5 ? new o2(i5, t5) : console.error('The dismiss element with id "'.concat(e5, '" does not exist. Please check the data-dismiss-target attribute.'));
          });
        }
        e4.initDismisses = r2, "undefined" != typeof window && (window.Dismiss = o2, window.initDismisses = r2), e4.default = o2;
      }, 340: function(t4, e4) {
        var i4 = this && this.__assign || function() {
          return i4 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, i4.apply(this, arguments);
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initDrawers = void 0;
        var n3 = { placement: "left", bodyScrolling: false, backdrop: true, edge: false, edgeOffset: "bottom-[60px]", backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-30", onShow: function() {
        }, onHide: function() {
        }, onToggle: function() {
        } }, o2 = function() {
          function t5(t6, e5) {
            void 0 === t6 && (t6 = null), void 0 === e5 && (e5 = n3), this._targetEl = t6, this._options = i4(i4({}, n3), e5), this._visible = false, this._init();
          }
          return t5.prototype._init = function() {
            var t6 = this;
            this._targetEl && (this._targetEl.setAttribute("aria-hidden", "true"), this._targetEl.classList.add("transition-transform")), this._getPlacementClasses(this._options.placement).base.map(function(e5) {
              t6._targetEl.classList.add(e5);
            }), document.addEventListener("keydown", function(e5) {
              "Escape" === e5.key && t6.isVisible() && t6.hide();
            });
          }, t5.prototype.hide = function() {
            var t6 = this;
            this._options.edge ? (this._getPlacementClasses(this._options.placement + "-edge").active.map(function(e5) {
              t6._targetEl.classList.remove(e5);
            }), this._getPlacementClasses(this._options.placement + "-edge").inactive.map(function(e5) {
              t6._targetEl.classList.add(e5);
            })) : (this._getPlacementClasses(this._options.placement).active.map(function(e5) {
              t6._targetEl.classList.remove(e5);
            }), this._getPlacementClasses(this._options.placement).inactive.map(function(e5) {
              t6._targetEl.classList.add(e5);
            })), this._targetEl.setAttribute("aria-hidden", "true"), this._targetEl.removeAttribute("aria-modal"), this._targetEl.removeAttribute("role"), this._options.bodyScrolling || document.body.classList.remove("overflow-hidden"), this._options.backdrop && this._destroyBackdropEl(), this._visible = false, this._options.onHide(this);
          }, t5.prototype.show = function() {
            var t6 = this;
            this._options.edge ? (this._getPlacementClasses(this._options.placement + "-edge").active.map(function(e5) {
              t6._targetEl.classList.add(e5);
            }), this._getPlacementClasses(this._options.placement + "-edge").inactive.map(function(e5) {
              t6._targetEl.classList.remove(e5);
            })) : (this._getPlacementClasses(this._options.placement).active.map(function(e5) {
              t6._targetEl.classList.add(e5);
            }), this._getPlacementClasses(this._options.placement).inactive.map(function(e5) {
              t6._targetEl.classList.remove(e5);
            })), this._targetEl.setAttribute("aria-modal", "true"), this._targetEl.setAttribute("role", "dialog"), this._targetEl.removeAttribute("aria-hidden"), this._options.bodyScrolling || document.body.classList.add("overflow-hidden"), this._options.backdrop && this._createBackdrop(), this._visible = true, this._options.onShow(this);
          }, t5.prototype.toggle = function() {
            this.isVisible() ? this.hide() : this.show();
          }, t5.prototype._createBackdrop = function() {
            var t6, e5 = this;
            if (!this._visible) {
              var i5 = document.createElement("div");
              i5.setAttribute("drawer-backdrop", ""), (t6 = i5.classList).add.apply(t6, this._options.backdropClasses.split(" ")), document.querySelector("body").append(i5), i5.addEventListener("click", function() {
                e5.hide();
              });
            }
          }, t5.prototype._destroyBackdropEl = function() {
            this._visible && document.querySelector("[drawer-backdrop]").remove();
          }, t5.prototype._getPlacementClasses = function(t6) {
            switch (t6) {
              case "top":
                return { base: ["top-0", "left-0", "right-0"], active: ["transform-none"], inactive: ["-translate-y-full"] };
              case "right":
                return { base: ["right-0", "top-0"], active: ["transform-none"], inactive: ["translate-x-full"] };
              case "bottom":
                return { base: ["bottom-0", "left-0", "right-0"], active: ["transform-none"], inactive: ["translate-y-full"] };
              case "left":
              default:
                return { base: ["left-0", "top-0"], active: ["transform-none"], inactive: ["-translate-x-full"] };
              case "bottom-edge":
                return { base: ["left-0", "top-0"], active: ["transform-none"], inactive: ["translate-y-full", this._options.edgeOffset] };
            }
          }, t5.prototype.isHidden = function() {
            return !this._visible;
          }, t5.prototype.isVisible = function() {
            return this._visible;
          }, t5;
        }(), r2 = function(t5, e5) {
          if (e5.some(function(e6) {
            return e6.id === t5;
          }))
            return e5.find(function(e6) {
              return e6.id === t5;
            });
        };
        function s4() {
          var t5 = [];
          document.querySelectorAll("[data-drawer-target]").forEach(function(e5) {
            var i5 = e5.getAttribute("data-drawer-target"), s5 = document.getElementById(i5);
            if (s5) {
              var a4 = e5.getAttribute("data-drawer-placement"), c7 = e5.getAttribute("data-drawer-body-scrolling"), l2 = e5.getAttribute("data-drawer-backdrop"), d4 = e5.getAttribute("data-drawer-edge"), u3 = e5.getAttribute("data-drawer-edge-offset");
              r2(i5, t5) || t5.push({ id: i5, object: new o2(s5, { placement: a4 || n3.placement, bodyScrolling: c7 ? "true" === c7 : n3.bodyScrolling, backdrop: l2 ? "true" === l2 : n3.backdrop, edge: d4 ? "true" === d4 : n3.edge, edgeOffset: u3 || n3.edgeOffset }) });
            } else
              console.error("Drawer with id ".concat(i5, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"));
          }), document.querySelectorAll("[data-drawer-toggle]").forEach(function(e5) {
            var i5 = e5.getAttribute("data-drawer-toggle");
            if (document.getElementById(i5)) {
              var n4 = r2(i5, t5);
              n4 ? e5.addEventListener("click", function() {
                n4.object.toggle();
              }) : console.error("Drawer with id ".concat(i5, " has not been initialized. Please initialize it using the data-drawer-target attribute."));
            } else
              console.error("Drawer with id ".concat(i5, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"));
          }), document.querySelectorAll("[data-drawer-dismiss], [data-drawer-hide]").forEach(function(e5) {
            var i5 = e5.getAttribute("data-drawer-dismiss") ? e5.getAttribute("data-drawer-dismiss") : e5.getAttribute("data-drawer-hide");
            if (document.getElementById(i5)) {
              var n4 = r2(i5, t5);
              n4 ? e5.addEventListener("click", function() {
                n4.object.hide();
              }) : console.error("Drawer with id ".concat(i5, " has not been initialized. Please initialize it using the data-drawer-target attribute."));
            } else
              console.error("Drawer with id ".concat(i5, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id"));
          }), document.querySelectorAll("[data-drawer-show]").forEach(function(e5) {
            var i5 = e5.getAttribute("data-drawer-show");
            if (document.getElementById(i5)) {
              var n4 = r2(i5, t5);
              n4 ? e5.addEventListener("click", function() {
                n4.object.show();
              }) : console.error("Drawer with id ".concat(i5, " has not been initialized. Please initialize it using the data-drawer-target attribute."));
            } else
              console.error("Drawer with id ".concat(i5, " not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?"));
          });
        }
        e4.initDrawers = s4, "undefined" != typeof window && (window.Drawer = o2, window.initDrawers = s4), e4.default = o2;
      }, 316: function(t4, e4, i4) {
        var n3 = this && this.__assign || function() {
          return n3 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, n3.apply(this, arguments);
        }, o2 = this && this.__spreadArray || function(t5, e5, i5) {
          if (i5 || 2 === arguments.length)
            for (var n4, o3 = 0, r3 = e5.length; o3 < r3; o3++)
              !n4 && o3 in e5 || (n4 || (n4 = Array.prototype.slice.call(e5, 0, o3)), n4[o3] = e5[o3]);
          return t5.concat(n4 || Array.prototype.slice.call(e5));
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initDropdowns = void 0;
        var r2 = i4(853), s4 = { placement: "bottom", triggerType: "click", offsetSkidding: 0, offsetDistance: 10, delay: 300, ignoreClickOutsideClass: false, onShow: function() {
        }, onHide: function() {
        }, onToggle: function() {
        } }, a4 = function() {
          function t5(t6, e5, i5) {
            void 0 === t6 && (t6 = null), void 0 === e5 && (e5 = null), void 0 === i5 && (i5 = s4), this._targetEl = t6, this._triggerEl = e5, this._options = n3(n3({}, s4), i5), this._popperInstance = this._createPopperInstance(), this._visible = false, this._init();
          }
          return t5.prototype._init = function() {
            this._triggerEl && this._setupEventListeners();
          }, t5.prototype._setupEventListeners = function() {
            var t6 = this, e5 = this._getTriggerEvents();
            "click" === this._options.triggerType && e5.showEvents.forEach(function(e6) {
              t6._triggerEl.addEventListener(e6, function() {
                t6.toggle();
              });
            }), "hover" === this._options.triggerType && (e5.showEvents.forEach(function(e6) {
              t6._triggerEl.addEventListener(e6, function() {
                "click" === e6 ? t6.toggle() : setTimeout(function() {
                  t6.show();
                }, t6._options.delay);
              }), t6._targetEl.addEventListener(e6, function() {
                t6.show();
              });
            }), e5.hideEvents.forEach(function(e6) {
              t6._triggerEl.addEventListener(e6, function() {
                setTimeout(function() {
                  t6._targetEl.matches(":hover") || t6.hide();
                }, t6._options.delay);
              }), t6._targetEl.addEventListener(e6, function() {
                setTimeout(function() {
                  t6._triggerEl.matches(":hover") || t6.hide();
                }, t6._options.delay);
              });
            }));
          }, t5.prototype._createPopperInstance = function() {
            return (0, r2.createPopper)(this._triggerEl, this._targetEl, { placement: this._options.placement, modifiers: [{ name: "offset", options: { offset: [this._options.offsetSkidding, this._options.offsetDistance] } }] });
          }, t5.prototype._setupClickOutsideListener = function() {
            var t6 = this;
            this._clickOutsideEventListener = function(e5) {
              t6._handleClickOutside(e5, t6._targetEl);
            }, document.body.addEventListener("click", this._clickOutsideEventListener, true);
          }, t5.prototype._removeClickOutsideListener = function() {
            document.body.removeEventListener("click", this._clickOutsideEventListener, true);
          }, t5.prototype._handleClickOutside = function(t6, e5) {
            var i5 = t6.target, n4 = this._options.ignoreClickOutsideClass, o3 = false;
            n4 && document.querySelectorAll(".".concat(n4)).forEach(function(t7) {
              t7.contains(i5) && (o3 = true);
            });
            i5 === e5 || e5.contains(i5) || this._triggerEl.contains(i5) || o3 || !this.isVisible() || this.hide();
          }, t5.prototype._getTriggerEvents = function() {
            switch (this._options.triggerType) {
              case "hover":
                return { showEvents: ["mouseenter", "click"], hideEvents: ["mouseleave"] };
              case "click":
              default:
                return { showEvents: ["click"], hideEvents: [] };
              case "none":
                return { showEvents: [], hideEvents: [] };
            }
          }, t5.prototype.toggle = function() {
            this.isVisible() ? this.hide() : this.show(), this._options.onToggle(this);
          }, t5.prototype.isVisible = function() {
            return this._visible;
          }, t5.prototype.show = function() {
            this._targetEl.classList.remove("hidden"), this._targetEl.classList.add("block"), this._popperInstance.setOptions(function(t6) {
              return n3(n3({}, t6), { modifiers: o2(o2([], t6.modifiers, true), [{ name: "eventListeners", enabled: true }], false) });
            }), this._setupClickOutsideListener(), this._popperInstance.update(), this._visible = true, this._options.onShow(this);
          }, t5.prototype.hide = function() {
            this._targetEl.classList.remove("block"), this._targetEl.classList.add("hidden"), this._popperInstance.setOptions(function(t6) {
              return n3(n3({}, t6), { modifiers: o2(o2([], t6.modifiers, true), [{ name: "eventListeners", enabled: false }], false) });
            }), this._visible = false, this._removeClickOutsideListener(), this._options.onHide(this);
          }, t5;
        }();
        function c7() {
          document.querySelectorAll("[data-dropdown-toggle]").forEach(function(t5) {
            var e5 = t5.getAttribute("data-dropdown-toggle"), i5 = document.getElementById(e5);
            if (i5) {
              var n4 = t5.getAttribute("data-dropdown-placement"), o3 = t5.getAttribute("data-dropdown-offset-skidding"), r3 = t5.getAttribute("data-dropdown-offset-distance"), c8 = t5.getAttribute("data-dropdown-trigger"), l2 = t5.getAttribute("data-dropdown-delay"), d4 = t5.getAttribute("data-dropdown-ignore-click-outside-class");
              new a4(i5, t5, { placement: n4 || s4.placement, triggerType: c8 || s4.triggerType, offsetSkidding: o3 ? parseInt(o3) : s4.offsetSkidding, offsetDistance: r3 ? parseInt(r3) : s4.offsetDistance, delay: l2 ? parseInt(l2) : s4.delay, ignoreClickOutsideClass: d4 || s4.ignoreClickOutsideClass });
            } else
              console.error('The dropdown element with id "'.concat(e5, '" does not exist. Please check the data-dropdown-toggle attribute.'));
          });
        }
        e4.initDropdowns = c7, "undefined" != typeof window && (window.Dropdown = a4, window.initDropdowns = c7), e4.default = a4;
      }, 311: function(t4, e4, i4) {
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initFlowbite = void 0;
        var n3 = i4(902), o2 = i4(33), r2 = i4(922), s4 = i4(556), a4 = i4(791), c7 = i4(340), l2 = i4(316), d4 = i4(16), u3 = i4(903), p2 = i4(247), f2 = i4(671);
        function h4() {
          (0, n3.initAccordions)(), (0, r2.initCollapses)(), (0, o2.initCarousels)(), (0, a4.initDismisses)(), (0, l2.initDropdowns)(), (0, d4.initModals)(), (0, c7.initDrawers)(), (0, p2.initTabs)(), (0, f2.initTooltips)(), (0, u3.initPopovers)(), (0, s4.initDials)();
        }
        e4.initFlowbite = h4, "undefined" != typeof window && (window.initFlowbite = h4);
      }, 16: function(t4, e4) {
        var i4 = this && this.__assign || function() {
          return i4 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, i4.apply(this, arguments);
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initModals = void 0;
        var n3 = { placement: "center", backdropClasses: "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-40", backdrop: "dynamic", closable: true, onHide: function() {
        }, onShow: function() {
        }, onToggle: function() {
        } }, o2 = function() {
          function t5(t6, e5) {
            void 0 === t6 && (t6 = null), void 0 === e5 && (e5 = n3), this._targetEl = t6, this._options = i4(i4({}, n3), e5), this._isHidden = true, this._backdropEl = null, this._init();
          }
          return t5.prototype._init = function() {
            var t6 = this;
            this._targetEl && this._getPlacementClasses().map(function(e5) {
              t6._targetEl.classList.add(e5);
            });
          }, t5.prototype._createBackdrop = function() {
            var t6;
            if (this._isHidden) {
              var e5 = document.createElement("div");
              e5.setAttribute("modal-backdrop", ""), (t6 = e5.classList).add.apply(t6, this._options.backdropClasses.split(" ")), document.querySelector("body").append(e5), this._backdropEl = e5;
            }
          }, t5.prototype._destroyBackdropEl = function() {
            this._isHidden || document.querySelector("[modal-backdrop]").remove();
          }, t5.prototype._setupModalCloseEventListeners = function() {
            var t6 = this;
            "dynamic" === this._options.backdrop && (this._clickOutsideEventListener = function(e5) {
              t6._handleOutsideClick(e5.target);
            }, this._targetEl.addEventListener("click", this._clickOutsideEventListener, true)), this._keydownEventListener = function(e5) {
              "Escape" === e5.key && t6.hide();
            }, document.body.addEventListener("keydown", this._keydownEventListener, true);
          }, t5.prototype._removeModalCloseEventListeners = function() {
            "dynamic" === this._options.backdrop && this._targetEl.removeEventListener("click", this._clickOutsideEventListener, true), document.body.removeEventListener("keydown", this._keydownEventListener, true);
          }, t5.prototype._handleOutsideClick = function(t6) {
            (t6 === this._targetEl || t6 === this._backdropEl && this.isVisible()) && this.hide();
          }, t5.prototype._getPlacementClasses = function() {
            switch (this._options.placement) {
              case "top-left":
                return ["justify-start", "items-start"];
              case "top-center":
                return ["justify-center", "items-start"];
              case "top-right":
                return ["justify-end", "items-start"];
              case "center-left":
                return ["justify-start", "items-center"];
              case "center":
              default:
                return ["justify-center", "items-center"];
              case "center-right":
                return ["justify-end", "items-center"];
              case "bottom-left":
                return ["justify-start", "items-end"];
              case "bottom-center":
                return ["justify-center", "items-end"];
              case "bottom-right":
                return ["justify-end", "items-end"];
            }
          }, t5.prototype.toggle = function() {
            this._isHidden ? this.show() : this.hide(), this._options.onToggle(this);
          }, t5.prototype.show = function() {
            this.isHidden && (this._targetEl.classList.add("flex"), this._targetEl.classList.remove("hidden"), this._targetEl.setAttribute("aria-modal", "true"), this._targetEl.setAttribute("role", "dialog"), this._targetEl.removeAttribute("aria-hidden"), this._createBackdrop(), this._isHidden = false, document.body.classList.add("overflow-hidden"), this._options.closable && this._setupModalCloseEventListeners(), this._options.onShow(this));
          }, t5.prototype.hide = function() {
            this.isVisible && (this._targetEl.classList.add("hidden"), this._targetEl.classList.remove("flex"), this._targetEl.setAttribute("aria-hidden", "true"), this._targetEl.removeAttribute("aria-modal"), this._targetEl.removeAttribute("role"), this._destroyBackdropEl(), this._isHidden = true, document.body.classList.remove("overflow-hidden"), this._options.closable && this._removeModalCloseEventListeners(), this._options.onHide(this));
          }, t5.prototype.isVisible = function() {
            return !this._isHidden;
          }, t5.prototype.isHidden = function() {
            return this._isHidden;
          }, t5;
        }(), r2 = function(t5, e5) {
          return e5.some(function(e6) {
            return e6.id === t5;
          }) ? e5.find(function(e6) {
            return e6.id === t5;
          }) : null;
        };
        function s4() {
          var t5 = [];
          document.querySelectorAll("[data-modal-target]").forEach(function(e5) {
            var i5 = e5.getAttribute("data-modal-target"), s5 = document.getElementById(i5);
            if (s5) {
              var a4 = s5.getAttribute("data-modal-placement"), c7 = s5.getAttribute("data-modal-backdrop");
              r2(i5, t5) || t5.push({ id: i5, object: new o2(s5, { placement: a4 || n3.placement, backdrop: c7 || n3.backdrop }) });
            } else
              console.error("Modal with id ".concat(i5, " does not exist. Are you sure that the data-modal-target attribute points to the correct modal id?."));
          }), document.querySelectorAll("[data-modal-toggle]").forEach(function(e5) {
            var i5 = e5.getAttribute("data-modal-toggle"), s5 = document.getElementById(i5);
            if (s5) {
              var a4 = s5.getAttribute("data-modal-placement"), c7 = s5.getAttribute("data-modal-backdrop"), l2 = r2(i5, t5);
              l2 || (l2 = { id: i5, object: new o2(s5, { placement: a4 || n3.placement, backdrop: c7 || n3.backdrop }) }, t5.push(l2)), e5.addEventListener("click", function() {
                l2.object.toggle();
              });
            } else
              console.error("Modal with id ".concat(i5, " does not exist. Are you sure that the data-modal-toggle attribute points to the correct modal id?"));
          }), document.querySelectorAll("[data-modal-show]").forEach(function(e5) {
            var i5 = e5.getAttribute("data-modal-show");
            if (document.getElementById(i5)) {
              var n4 = r2(i5, t5);
              n4 ? e5.addEventListener("click", function() {
                n4.object.isHidden && n4.object.show();
              }) : console.error("Modal with id ".concat(i5, " has not been initialized. Please initialize it using the data-modal-target attribute."));
            } else
              console.error("Modal with id ".concat(i5, " does not exist. Are you sure that the data-modal-show attribute points to the correct modal id?"));
          }), document.querySelectorAll("[data-modal-hide]").forEach(function(e5) {
            var i5 = e5.getAttribute("data-modal-hide");
            if (document.getElementById(i5)) {
              var n4 = r2(i5, t5);
              n4 ? e5.addEventListener("click", function() {
                n4.object.isVisible && n4.object.hide();
              }) : console.error("Modal with id ".concat(i5, " has not been initialized. Please initialize it using the data-modal-target attribute."));
            } else
              console.error("Modal with id ".concat(i5, " does not exist. Are you sure that the data-modal-hide attribute points to the correct modal id?"));
          });
        }
        e4.initModals = s4, "undefined" != typeof window && (window.Modal = o2, window.initModals = s4), e4.default = o2;
      }, 903: function(t4, e4, i4) {
        var n3 = this && this.__assign || function() {
          return n3 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, n3.apply(this, arguments);
        }, o2 = this && this.__spreadArray || function(t5, e5, i5) {
          if (i5 || 2 === arguments.length)
            for (var n4, o3 = 0, r3 = e5.length; o3 < r3; o3++)
              !n4 && o3 in e5 || (n4 || (n4 = Array.prototype.slice.call(e5, 0, o3)), n4[o3] = e5[o3]);
          return t5.concat(n4 || Array.prototype.slice.call(e5));
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initPopovers = void 0;
        var r2 = i4(853), s4 = { placement: "top", offset: 10, triggerType: "hover", onShow: function() {
        }, onHide: function() {
        }, onToggle: function() {
        } }, a4 = function() {
          function t5(t6, e5, i5) {
            void 0 === t6 && (t6 = null), void 0 === e5 && (e5 = null), void 0 === i5 && (i5 = s4), this._targetEl = t6, this._triggerEl = e5, this._options = n3(n3({}, s4), i5), this._popperInstance = this._createPopperInstance(), this._visible = false, this._init();
          }
          return t5.prototype._init = function() {
            this._triggerEl && this._setupEventListeners();
          }, t5.prototype._setupEventListeners = function() {
            var t6 = this, e5 = this._getTriggerEvents();
            e5.showEvents.forEach(function(e6) {
              t6._triggerEl.addEventListener(e6, function() {
                t6.show();
              }), t6._targetEl.addEventListener(e6, function() {
                t6.show();
              });
            }), e5.hideEvents.forEach(function(e6) {
              t6._triggerEl.addEventListener(e6, function() {
                setTimeout(function() {
                  t6._targetEl.matches(":hover") || t6.hide();
                }, 100);
              }), t6._targetEl.addEventListener(e6, function() {
                setTimeout(function() {
                  t6._triggerEl.matches(":hover") || t6.hide();
                }, 100);
              });
            });
          }, t5.prototype._createPopperInstance = function() {
            return (0, r2.createPopper)(this._triggerEl, this._targetEl, { placement: this._options.placement, modifiers: [{ name: "offset", options: { offset: [0, this._options.offset] } }] });
          }, t5.prototype._getTriggerEvents = function() {
            switch (this._options.triggerType) {
              case "hover":
              default:
                return { showEvents: ["mouseenter", "focus"], hideEvents: ["mouseleave", "blur"] };
              case "click":
                return { showEvents: ["click", "focus"], hideEvents: ["focusout", "blur"] };
              case "none":
                return { showEvents: [], hideEvents: [] };
            }
          }, t5.prototype._setupKeydownListener = function() {
            var t6 = this;
            this._keydownEventListener = function(e5) {
              "Escape" === e5.key && t6.hide();
            }, document.body.addEventListener("keydown", this._keydownEventListener, true);
          }, t5.prototype._removeKeydownListener = function() {
            document.body.removeEventListener("keydown", this._keydownEventListener, true);
          }, t5.prototype._setupClickOutsideListener = function() {
            var t6 = this;
            this._clickOutsideEventListener = function(e5) {
              t6._handleClickOutside(e5, t6._targetEl);
            }, document.body.addEventListener("click", this._clickOutsideEventListener, true);
          }, t5.prototype._removeClickOutsideListener = function() {
            document.body.removeEventListener("click", this._clickOutsideEventListener, true);
          }, t5.prototype._handleClickOutside = function(t6, e5) {
            var i5 = t6.target;
            i5 === e5 || e5.contains(i5) || this._triggerEl.contains(i5) || !this.isVisible() || this.hide();
          }, t5.prototype.isVisible = function() {
            return this._visible;
          }, t5.prototype.toggle = function() {
            this.isVisible() ? this.hide() : this.show(), this._options.onToggle(this);
          }, t5.prototype.show = function() {
            this._targetEl.classList.remove("opacity-0", "invisible"), this._targetEl.classList.add("opacity-100", "visible"), this._popperInstance.setOptions(function(t6) {
              return n3(n3({}, t6), { modifiers: o2(o2([], t6.modifiers, true), [{ name: "eventListeners", enabled: true }], false) });
            }), this._setupClickOutsideListener(), this._setupKeydownListener(), this._popperInstance.update(), this._visible = true, this._options.onShow(this);
          }, t5.prototype.hide = function() {
            this._targetEl.classList.remove("opacity-100", "visible"), this._targetEl.classList.add("opacity-0", "invisible"), this._popperInstance.setOptions(function(t6) {
              return n3(n3({}, t6), { modifiers: o2(o2([], t6.modifiers, true), [{ name: "eventListeners", enabled: false }], false) });
            }), this._removeClickOutsideListener(), this._removeKeydownListener(), this._visible = false, this._options.onHide(this);
          }, t5;
        }();
        function c7() {
          document.querySelectorAll("[data-popover-target]").forEach(function(t5) {
            var e5 = t5.getAttribute("data-popover-target"), i5 = document.getElementById(e5);
            if (i5) {
              var n4 = t5.getAttribute("data-popover-trigger"), o3 = t5.getAttribute("data-popover-placement"), r3 = t5.getAttribute("data-popover-offset");
              new a4(i5, t5, { placement: o3 || s4.placement, offset: r3 ? parseInt(r3) : s4.offset, triggerType: n4 || s4.triggerType });
            } else
              console.error('The popover element with id "'.concat(e5, '" does not exist. Please check the data-popover-target attribute.'));
          });
        }
        e4.initPopovers = c7, "undefined" != typeof window && (window.Popover = a4, window.initPopovers = c7), e4.default = a4;
      }, 247: function(t4, e4) {
        var i4 = this && this.__assign || function() {
          return i4 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, i4.apply(this, arguments);
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initTabs = void 0;
        var n3 = { defaultTabId: null, activeClasses: "text-blue-600 hover:text-blue-600 dark:text-blue-500 dark:hover:text-blue-500 border-blue-600 dark:border-blue-500", inactiveClasses: "dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-gray-100 hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300", onShow: function() {
        } }, o2 = function() {
          function t5(t6, e5) {
            void 0 === t6 && (t6 = []), void 0 === e5 && (e5 = n3), this._items = t6, this._activeTab = e5 ? this.getTab(e5.defaultTabId) : null, this._options = i4(i4({}, n3), e5), this._init();
          }
          return t5.prototype._init = function() {
            var t6 = this;
            this._items.length && (this._activeTab || this._setActiveTab(this._items[0]), this.show(this._activeTab.id, true), this._items.map(function(e5) {
              e5.triggerEl.addEventListener("click", function() {
                t6.show(e5.id);
              });
            }));
          }, t5.prototype.getActiveTab = function() {
            return this._activeTab;
          }, t5.prototype._setActiveTab = function(t6) {
            this._activeTab = t6;
          }, t5.prototype.getTab = function(t6) {
            return this._items.filter(function(e5) {
              return e5.id === t6;
            })[0];
          }, t5.prototype.show = function(t6, e5) {
            var i5, n4, o3 = this;
            void 0 === e5 && (e5 = false);
            var r3 = this.getTab(t6);
            (r3 !== this._activeTab || e5) && (this._items.map(function(t7) {
              var e6, i6;
              t7 !== r3 && ((e6 = t7.triggerEl.classList).remove.apply(e6, o3._options.activeClasses.split(" ")), (i6 = t7.triggerEl.classList).add.apply(i6, o3._options.inactiveClasses.split(" ")), t7.targetEl.classList.add("hidden"), t7.triggerEl.setAttribute("aria-selected", "false"));
            }), (i5 = r3.triggerEl.classList).add.apply(i5, this._options.activeClasses.split(" ")), (n4 = r3.triggerEl.classList).remove.apply(n4, this._options.inactiveClasses.split(" ")), r3.triggerEl.setAttribute("aria-selected", "true"), r3.targetEl.classList.remove("hidden"), this._setActiveTab(r3), this._options.onShow(this, r3));
          }, t5;
        }();
        function r2() {
          document.querySelectorAll("[data-tabs-toggle]").forEach(function(t5) {
            var e5 = [], i5 = null;
            t5.querySelectorAll('[role="tab"]').forEach(function(t6) {
              var n4 = "true" === t6.getAttribute("aria-selected"), o3 = { id: t6.getAttribute("data-tabs-target"), triggerEl: t6, targetEl: document.querySelector(t6.getAttribute("data-tabs-target")) };
              e5.push(o3), n4 && (i5 = o3.id);
            }), new o2(e5, { defaultTabId: i5 });
          });
        }
        e4.initTabs = r2, "undefined" != typeof window && (window.Tabs = o2, window.initTabs = r2), e4.default = o2;
      }, 671: function(t4, e4, i4) {
        var n3 = this && this.__assign || function() {
          return n3 = Object.assign || function(t5) {
            for (var e5, i5 = 1, n4 = arguments.length; i5 < n4; i5++)
              for (var o3 in e5 = arguments[i5])
                Object.prototype.hasOwnProperty.call(e5, o3) && (t5[o3] = e5[o3]);
            return t5;
          }, n3.apply(this, arguments);
        }, o2 = this && this.__spreadArray || function(t5, e5, i5) {
          if (i5 || 2 === arguments.length)
            for (var n4, o3 = 0, r3 = e5.length; o3 < r3; o3++)
              !n4 && o3 in e5 || (n4 || (n4 = Array.prototype.slice.call(e5, 0, o3)), n4[o3] = e5[o3]);
          return t5.concat(n4 || Array.prototype.slice.call(e5));
        };
        Object.defineProperty(e4, "__esModule", { value: true }), e4.initTooltips = void 0;
        var r2 = i4(853), s4 = { placement: "top", triggerType: "hover", onShow: function() {
        }, onHide: function() {
        }, onToggle: function() {
        } }, a4 = function() {
          function t5(t6, e5, i5) {
            void 0 === t6 && (t6 = null), void 0 === e5 && (e5 = null), void 0 === i5 && (i5 = s4), this._targetEl = t6, this._triggerEl = e5, this._options = n3(n3({}, s4), i5), this._popperInstance = this._createPopperInstance(), this._visible = false, this._init();
          }
          return t5.prototype._init = function() {
            this._triggerEl && this._setupEventListeners();
          }, t5.prototype._setupEventListeners = function() {
            var t6 = this, e5 = this._getTriggerEvents();
            e5.showEvents.forEach(function(e6) {
              t6._triggerEl.addEventListener(e6, function() {
                t6.show();
              });
            }), e5.hideEvents.forEach(function(e6) {
              t6._triggerEl.addEventListener(e6, function() {
                t6.hide();
              });
            });
          }, t5.prototype._createPopperInstance = function() {
            return (0, r2.createPopper)(this._triggerEl, this._targetEl, { placement: this._options.placement, modifiers: [{ name: "offset", options: { offset: [0, 8] } }] });
          }, t5.prototype._getTriggerEvents = function() {
            switch (this._options.triggerType) {
              case "hover":
              default:
                return { showEvents: ["mouseenter", "focus"], hideEvents: ["mouseleave", "blur"] };
              case "click":
                return { showEvents: ["click", "focus"], hideEvents: ["focusout", "blur"] };
              case "none":
                return { showEvents: [], hideEvents: [] };
            }
          }, t5.prototype._setupKeydownListener = function() {
            var t6 = this;
            this._keydownEventListener = function(e5) {
              "Escape" === e5.key && t6.hide();
            }, document.body.addEventListener("keydown", this._keydownEventListener, true);
          }, t5.prototype._removeKeydownListener = function() {
            document.body.removeEventListener("keydown", this._keydownEventListener, true);
          }, t5.prototype._setupClickOutsideListener = function() {
            var t6 = this;
            this._clickOutsideEventListener = function(e5) {
              t6._handleClickOutside(e5, t6._targetEl);
            }, document.body.addEventListener("click", this._clickOutsideEventListener, true);
          }, t5.prototype._removeClickOutsideListener = function() {
            document.body.removeEventListener("click", this._clickOutsideEventListener, true);
          }, t5.prototype._handleClickOutside = function(t6, e5) {
            var i5 = t6.target;
            i5 === e5 || e5.contains(i5) || this._triggerEl.contains(i5) || !this.isVisible() || this.hide();
          }, t5.prototype.isVisible = function() {
            return this._visible;
          }, t5.prototype.toggle = function() {
            this.isVisible() ? this.hide() : this.show();
          }, t5.prototype.show = function() {
            this._targetEl.classList.remove("opacity-0", "invisible"), this._targetEl.classList.add("opacity-100", "visible"), this._popperInstance.setOptions(function(t6) {
              return n3(n3({}, t6), { modifiers: o2(o2([], t6.modifiers, true), [{ name: "eventListeners", enabled: true }], false) });
            }), this._setupClickOutsideListener(), this._setupKeydownListener(), this._popperInstance.update(), this._visible = true, this._options.onShow(this);
          }, t5.prototype.hide = function() {
            this._targetEl.classList.remove("opacity-100", "visible"), this._targetEl.classList.add("opacity-0", "invisible"), this._popperInstance.setOptions(function(t6) {
              return n3(n3({}, t6), { modifiers: o2(o2([], t6.modifiers, true), [{ name: "eventListeners", enabled: false }], false) });
            }), this._removeClickOutsideListener(), this._removeKeydownListener(), this._visible = false, this._options.onHide(this);
          }, t5;
        }();
        function c7() {
          document.querySelectorAll("[data-tooltip-target]").forEach(function(t5) {
            var e5 = t5.getAttribute("data-tooltip-target"), i5 = document.getElementById(e5);
            if (i5) {
              var n4 = t5.getAttribute("data-tooltip-trigger"), o3 = t5.getAttribute("data-tooltip-placement");
              new a4(i5, t5, { placement: o3 || s4.placement, triggerType: n4 || s4.triggerType });
            } else
              console.error('The tooltip element with id "'.concat(e5, '" does not exist. Please check the data-tooltip-target attribute.'));
          });
        }
        e4.initTooltips = c7, "undefined" != typeof window && (window.Tooltip = a4, window.initTooltips = c7), e4.default = a4;
      }, 947: function(t4, e4) {
        Object.defineProperty(e4, "__esModule", { value: true });
        var i4 = function() {
          function t5(t6, e5) {
            void 0 === e5 && (e5 = []), this._eventType = t6, this._eventFunctions = e5;
          }
          return t5.prototype.init = function() {
            var t6 = this;
            this._eventFunctions.forEach(function(e5) {
              "undefined" != typeof window && window.addEventListener(t6._eventType, e5);
            });
          }, t5;
        }();
        e4.default = i4;
      } }, e3 = {};
      function i3(n3) {
        var o2 = e3[n3];
        if (void 0 !== o2)
          return o2.exports;
        var r2 = e3[n3] = { exports: {} };
        return t3[n3].call(r2.exports, r2, r2.exports, i3), r2.exports;
      }
      i3.d = function(t4, e4) {
        for (var n3 in e4)
          i3.o(e4, n3) && !i3.o(t4, n3) && Object.defineProperty(t4, n3, { enumerable: true, get: e4[n3] });
      }, i3.o = function(t4, e4) {
        return Object.prototype.hasOwnProperty.call(t4, e4);
      }, i3.r = function(t4) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t4, "__esModule", { value: true });
      };
      var n2 = {};
      return function() {
        var t4 = n2;
        Object.defineProperty(t4, "__esModule", { value: true }), i3(647);
        var e4 = i3(902), o2 = i3(33), r2 = i3(922), s4 = i3(556), a4 = i3(791), c7 = i3(340), l2 = i3(316), d4 = i3(16), u3 = i3(903), p2 = i3(247), f2 = i3(671);
        i3(311);
        var h4 = i3(947);
        new h4.default("load", [e4.initAccordions, r2.initCollapses, o2.initCarousels, a4.initDismisses, l2.initDropdowns, d4.initModals, c7.initDrawers, p2.initTabs, f2.initTooltips, u3.initPopovers, s4.initDials]).init(), t4.default = { Accordion: e4.default, Carousel: o2.default, Collapse: r2.default, Dial: s4.default, Drawer: c7.default, Dismiss: a4.default, Dropdown: l2.default, Modal: d4.default, Popover: u3.default, Tabs: p2.default, Tooltip: f2.default, Events: h4.default };
      }(), n2;
    }();
  });
})(flowbite_min);
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$l = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val2) {
  if (val2 === null || val2 === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val2);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i3 = 0; i3 < 10; i3++) {
      test2["_" + String.fromCharCode(i3)] = i3;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
      return test2[n2];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
  var from2;
  var to2 = toObject(target);
  var symbols2;
  for (var s4 = 1; s4 < arguments.length; s4++) {
    from2 = Object(arguments[s4]);
    for (var key2 in from2) {
      if (hasOwnProperty$l.call(from2, key2)) {
        to2[key2] = from2[key2];
      }
    }
    if (getOwnPropertySymbols) {
      symbols2 = getOwnPropertySymbols(from2);
      for (var i3 = 0; i3 < symbols2.length; i3++) {
        if (propIsEnumerable.call(from2, symbols2[i3])) {
          to2[symbols2[i3]] = from2[symbols2[i3]];
        }
      }
    }
  }
  return to2;
};
var react = { exports: {} };
var react_production_min = {};
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$2 = objectAssign, n$3 = 60103, p$3 = 60106;
react_production_min.Fragment = 60107;
react_production_min.StrictMode = 60108;
react_production_min.Profiler = 60114;
var q$3 = 60109, r$3 = 60110, t$1 = 60112;
react_production_min.Suspense = 60113;
var u$1 = 60115, v$4 = 60116;
if ("function" === typeof Symbol && Symbol.for) {
  var w$4 = Symbol.for;
  n$3 = w$4("react.element");
  p$3 = w$4("react.portal");
  react_production_min.Fragment = w$4("react.fragment");
  react_production_min.StrictMode = w$4("react.strict_mode");
  react_production_min.Profiler = w$4("react.profiler");
  q$3 = w$4("react.provider");
  r$3 = w$4("react.context");
  t$1 = w$4("react.forward_ref");
  react_production_min.Suspense = w$4("react.suspense");
  u$1 = w$4("react.memo");
  v$4 = w$4("react.lazy");
}
var x$3 = "function" === typeof Symbol && Symbol.iterator;
function y$3(a4) {
  if (null === a4 || "object" !== typeof a4)
    return null;
  a4 = x$3 && a4[x$3] || a4["@@iterator"];
  return "function" === typeof a4 ? a4 : null;
}
function z$2(a4) {
  for (var b3 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a4, c7 = 1; c7 < arguments.length; c7++)
    b3 += "&args[]=" + encodeURIComponent(arguments[c7]);
  return "Minified React error #" + a4 + "; visit " + b3 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var A$2 = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, B$2 = {};
function C$1(a4, b3, c7) {
  this.props = a4;
  this.context = b3;
  this.refs = B$2;
  this.updater = c7 || A$2;
}
C$1.prototype.isReactComponent = {};
C$1.prototype.setState = function(a4, b3) {
  if ("object" !== typeof a4 && "function" !== typeof a4 && null != a4)
    throw Error(z$2(85));
  this.updater.enqueueSetState(this, a4, b3, "setState");
};
C$1.prototype.forceUpdate = function(a4) {
  this.updater.enqueueForceUpdate(this, a4, "forceUpdate");
};
function D$2() {
}
D$2.prototype = C$1.prototype;
function E$2(a4, b3, c7) {
  this.props = a4;
  this.context = b3;
  this.refs = B$2;
  this.updater = c7 || A$2;
}
var F$2 = E$2.prototype = new D$2();
F$2.constructor = E$2;
l$2(F$2, C$1.prototype);
F$2.isPureReactComponent = true;
var G$2 = { current: null }, H$2 = Object.prototype.hasOwnProperty, I$2 = { key: true, ref: true, __self: true, __source: true };
function J$1(a4, b3, c7) {
  var e3, d4 = {}, k3 = null, h4 = null;
  if (null != b3)
    for (e3 in void 0 !== b3.ref && (h4 = b3.ref), void 0 !== b3.key && (k3 = "" + b3.key), b3)
      H$2.call(b3, e3) && !I$2.hasOwnProperty(e3) && (d4[e3] = b3[e3]);
  var g2 = arguments.length - 2;
  if (1 === g2)
    d4.children = c7;
  else if (1 < g2) {
    for (var f2 = Array(g2), m4 = 0; m4 < g2; m4++)
      f2[m4] = arguments[m4 + 2];
    d4.children = f2;
  }
  if (a4 && a4.defaultProps)
    for (e3 in g2 = a4.defaultProps, g2)
      void 0 === d4[e3] && (d4[e3] = g2[e3]);
  return { $$typeof: n$3, type: a4, key: k3, ref: h4, props: d4, _owner: G$2.current };
}
function K$1(a4, b3) {
  return { $$typeof: n$3, type: a4.type, key: b3, ref: a4.ref, props: a4.props, _owner: a4._owner };
}
function L$1(a4) {
  return "object" === typeof a4 && null !== a4 && a4.$$typeof === n$3;
}
function escape(a4) {
  var b3 = { "=": "=0", ":": "=2" };
  return "$" + a4.replace(/[=:]/g, function(a5) {
    return b3[a5];
  });
}
var M$2 = /\/+/g;
function N$2(a4, b3) {
  return "object" === typeof a4 && null !== a4 && null != a4.key ? escape("" + a4.key) : b3.toString(36);
}
function O$2(a4, b3, c7, e3, d4) {
  var k3 = typeof a4;
  if ("undefined" === k3 || "boolean" === k3)
    a4 = null;
  var h4 = false;
  if (null === a4)
    h4 = true;
  else
    switch (k3) {
      case "string":
      case "number":
        h4 = true;
        break;
      case "object":
        switch (a4.$$typeof) {
          case n$3:
          case p$3:
            h4 = true;
        }
    }
  if (h4)
    return h4 = a4, d4 = d4(h4), a4 = "" === e3 ? "." + N$2(h4, 0) : e3, Array.isArray(d4) ? (c7 = "", null != a4 && (c7 = a4.replace(M$2, "$&/") + "/"), O$2(d4, b3, c7, "", function(a5) {
      return a5;
    })) : null != d4 && (L$1(d4) && (d4 = K$1(d4, c7 + (!d4.key || h4 && h4.key === d4.key ? "" : ("" + d4.key).replace(M$2, "$&/") + "/") + a4)), b3.push(d4)), 1;
  h4 = 0;
  e3 = "" === e3 ? "." : e3 + ":";
  if (Array.isArray(a4))
    for (var g2 = 0; g2 < a4.length; g2++) {
      k3 = a4[g2];
      var f2 = e3 + N$2(k3, g2);
      h4 += O$2(k3, b3, c7, f2, d4);
    }
  else if (f2 = y$3(a4), "function" === typeof f2)
    for (a4 = f2.call(a4), g2 = 0; !(k3 = a4.next()).done; )
      k3 = k3.value, f2 = e3 + N$2(k3, g2++), h4 += O$2(k3, b3, c7, f2, d4);
  else if ("object" === k3)
    throw b3 = "" + a4, Error(z$2(31, "[object Object]" === b3 ? "object with keys {" + Object.keys(a4).join(", ") + "}" : b3));
  return h4;
}
function P$3(a4, b3, c7) {
  if (null == a4)
    return a4;
  var e3 = [], d4 = 0;
  O$2(a4, e3, "", "", function(a5) {
    return b3.call(c7, a5, d4++);
  });
  return e3;
}
function Q$1(a4) {
  if (-1 === a4._status) {
    var b3 = a4._result;
    b3 = b3();
    a4._status = 0;
    a4._result = b3;
    b3.then(function(b4) {
      0 === a4._status && (b4 = b4.default, a4._status = 1, a4._result = b4);
    }, function(b4) {
      0 === a4._status && (a4._status = 2, a4._result = b4);
    });
  }
  if (1 === a4._status)
    return a4._result;
  throw a4._result;
}
var R$2 = { current: null };
function S$2() {
  var a4 = R$2.current;
  if (null === a4)
    throw Error(z$2(321));
  return a4;
}
var T$2 = { ReactCurrentDispatcher: R$2, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G$2, IsSomeRendererActing: { current: false }, assign: l$2 };
react_production_min.Children = { map: P$3, forEach: function(a4, b3, c7) {
  P$3(a4, function() {
    b3.apply(this, arguments);
  }, c7);
}, count: function(a4) {
  var b3 = 0;
  P$3(a4, function() {
    b3++;
  });
  return b3;
}, toArray: function(a4) {
  return P$3(a4, function(a5) {
    return a5;
  }) || [];
}, only: function(a4) {
  if (!L$1(a4))
    throw Error(z$2(143));
  return a4;
} };
react_production_min.Component = C$1;
react_production_min.PureComponent = E$2;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T$2;
react_production_min.cloneElement = function(a4, b3, c7) {
  if (null === a4 || void 0 === a4)
    throw Error(z$2(267, a4));
  var e3 = l$2({}, a4.props), d4 = a4.key, k3 = a4.ref, h4 = a4._owner;
  if (null != b3) {
    void 0 !== b3.ref && (k3 = b3.ref, h4 = G$2.current);
    void 0 !== b3.key && (d4 = "" + b3.key);
    if (a4.type && a4.type.defaultProps)
      var g2 = a4.type.defaultProps;
    for (f2 in b3)
      H$2.call(b3, f2) && !I$2.hasOwnProperty(f2) && (e3[f2] = void 0 === b3[f2] && void 0 !== g2 ? g2[f2] : b3[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2)
    e3.children = c7;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m4 = 0; m4 < f2; m4++)
      g2[m4] = arguments[m4 + 2];
    e3.children = g2;
  }
  return {
    $$typeof: n$3,
    type: a4.type,
    key: d4,
    ref: k3,
    props: e3,
    _owner: h4
  };
};
react_production_min.createContext = function(a4, b3) {
  void 0 === b3 && (b3 = null);
  a4 = { $$typeof: r$3, _calculateChangedBits: b3, _currentValue: a4, _currentValue2: a4, _threadCount: 0, Provider: null, Consumer: null };
  a4.Provider = { $$typeof: q$3, _context: a4 };
  return a4.Consumer = a4;
};
react_production_min.createElement = J$1;
react_production_min.createFactory = function(a4) {
  var b3 = J$1.bind(null, a4);
  b3.type = a4;
  return b3;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a4) {
  return { $$typeof: t$1, render: a4 };
};
react_production_min.isValidElement = L$1;
react_production_min.lazy = function(a4) {
  return { $$typeof: v$4, _payload: { _status: -1, _result: a4 }, _init: Q$1 };
};
react_production_min.memo = function(a4, b3) {
  return { $$typeof: u$1, type: a4, compare: void 0 === b3 ? null : b3 };
};
react_production_min.useCallback = function(a4, b3) {
  return S$2().useCallback(a4, b3);
};
react_production_min.useContext = function(a4, b3) {
  return S$2().useContext(a4, b3);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useEffect = function(a4, b3) {
  return S$2().useEffect(a4, b3);
};
react_production_min.useImperativeHandle = function(a4, b3, c7) {
  return S$2().useImperativeHandle(a4, b3, c7);
};
react_production_min.useLayoutEffect = function(a4, b3) {
  return S$2().useLayoutEffect(a4, b3);
};
react_production_min.useMemo = function(a4, b3) {
  return S$2().useMemo(a4, b3);
};
react_production_min.useReducer = function(a4, b3, c7) {
  return S$2().useReducer(a4, b3, c7);
};
react_production_min.useRef = function(a4) {
  return S$2().useRef(a4);
};
react_production_min.useState = function(a4) {
  return S$2().useState(a4);
};
react_production_min.version = "17.0.2";
{
  react.exports = react_production_min;
}
var reactExports = react.exports;
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
const React$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: React
}, [reactExports]);
/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f$2 = reactExports, g$2 = 60103;
reactJsxRuntime_production_min.Fragment = 60107;
if ("function" === typeof Symbol && Symbol.for) {
  var h$4 = Symbol.for;
  g$2 = h$4("react.element");
  reactJsxRuntime_production_min.Fragment = h$4("react.fragment");
}
var m$3 = f$2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, n$2 = Object.prototype.hasOwnProperty, p$2 = { key: true, ref: true, __self: true, __source: true };
function q$2(c7, a4, k3) {
  var b3, d4 = {}, e3 = null, l2 = null;
  void 0 !== k3 && (e3 = "" + k3);
  void 0 !== a4.key && (e3 = "" + a4.key);
  void 0 !== a4.ref && (l2 = a4.ref);
  for (b3 in a4)
    n$2.call(a4, b3) && !p$2.hasOwnProperty(b3) && (d4[b3] = a4[b3]);
  if (c7 && c7.defaultProps)
    for (b3 in a4 = c7.defaultProps, a4)
      void 0 === d4[b3] && (d4[b3] = a4[b3]);
  return { $$typeof: g$2, type: c7, key: e3, ref: l2, props: d4, _owner: m$3.current };
}
reactJsxRuntime_production_min.jsx = q$2;
reactJsxRuntime_production_min.jsxs = q$2;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
var jsxRuntimeExports = jsxRuntime.exports;
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports2) {
  var f2, g2, h4, k3;
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports2.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q3 = p2.now();
    exports2.unstable_now = function() {
      return p2.now() - q3;
    };
  }
  if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
    var t3 = null, u3 = null, w3 = function() {
      if (null !== t3)
        try {
          var a4 = exports2.unstable_now();
          t3(true, a4);
          t3 = null;
        } catch (b3) {
          throw setTimeout(w3, 0), b3;
        }
    };
    f2 = function(a4) {
      null !== t3 ? setTimeout(f2, 0, a4) : (t3 = a4, setTimeout(w3, 0));
    };
    g2 = function(a4, b3) {
      u3 = setTimeout(a4, b3);
    };
    h4 = function() {
      clearTimeout(u3);
    };
    exports2.unstable_shouldYield = function() {
      return false;
    };
    k3 = exports2.unstable_forceFrameRate = function() {
    };
  } else {
    var x3 = window.setTimeout, y4 = window.clearTimeout;
    if ("undefined" !== typeof console) {
      var z3 = window.cancelAnimationFrame;
      "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      "function" !== typeof z3 && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    }
    var A2 = false, B3 = null, C2 = -1, D3 = 5, E3 = 0;
    exports2.unstable_shouldYield = function() {
      return exports2.unstable_now() >= E3;
    };
    k3 = function() {
    };
    exports2.unstable_forceFrameRate = function(a4) {
      0 > a4 || 125 < a4 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D3 = 0 < a4 ? Math.floor(1e3 / a4) : 5;
    };
    var F2 = new MessageChannel(), G3 = F2.port2;
    F2.port1.onmessage = function() {
      if (null !== B3) {
        var a4 = exports2.unstable_now();
        E3 = a4 + D3;
        try {
          B3(true, a4) ? G3.postMessage(null) : (A2 = false, B3 = null);
        } catch (b3) {
          throw G3.postMessage(null), b3;
        }
      } else
        A2 = false;
    };
    f2 = function(a4) {
      B3 = a4;
      A2 || (A2 = true, G3.postMessage(null));
    };
    g2 = function(a4, b3) {
      C2 = x3(function() {
        a4(exports2.unstable_now());
      }, b3);
    };
    h4 = function() {
      y4(C2);
      C2 = -1;
    };
  }
  function H4(a4, b3) {
    var c7 = a4.length;
    a4.push(b3);
    a:
      for (; ; ) {
        var d4 = c7 - 1 >>> 1, e3 = a4[d4];
        if (void 0 !== e3 && 0 < I3(e3, b3))
          a4[d4] = b3, a4[c7] = e3, c7 = d4;
        else
          break a;
      }
  }
  function J2(a4) {
    a4 = a4[0];
    return void 0 === a4 ? null : a4;
  }
  function K3(a4) {
    var b3 = a4[0];
    if (void 0 !== b3) {
      var c7 = a4.pop();
      if (c7 !== b3) {
        a4[0] = c7;
        a:
          for (var d4 = 0, e3 = a4.length; d4 < e3; ) {
            var m4 = 2 * (d4 + 1) - 1, n2 = a4[m4], v2 = m4 + 1, r2 = a4[v2];
            if (void 0 !== n2 && 0 > I3(n2, c7))
              void 0 !== r2 && 0 > I3(r2, n2) ? (a4[d4] = r2, a4[v2] = c7, d4 = v2) : (a4[d4] = n2, a4[m4] = c7, d4 = m4);
            else if (void 0 !== r2 && 0 > I3(r2, c7))
              a4[d4] = r2, a4[v2] = c7, d4 = v2;
            else
              break a;
          }
      }
      return b3;
    }
    return null;
  }
  function I3(a4, b3) {
    var c7 = a4.sortIndex - b3.sortIndex;
    return 0 !== c7 ? c7 : a4.id - b3.id;
  }
  var L3 = [], M4 = [], N2 = 1, O3 = null, P2 = 3, Q3 = false, R3 = false, S4 = false;
  function T3(a4) {
    for (var b3 = J2(M4); null !== b3; ) {
      if (null === b3.callback)
        K3(M4);
      else if (b3.startTime <= a4)
        K3(M4), b3.sortIndex = b3.expirationTime, H4(L3, b3);
      else
        break;
      b3 = J2(M4);
    }
  }
  function U2(a4) {
    S4 = false;
    T3(a4);
    if (!R3)
      if (null !== J2(L3))
        R3 = true, f2(V2);
      else {
        var b3 = J2(M4);
        null !== b3 && g2(U2, b3.startTime - a4);
      }
  }
  function V2(a4, b3) {
    R3 = false;
    S4 && (S4 = false, h4());
    Q3 = true;
    var c7 = P2;
    try {
      T3(b3);
      for (O3 = J2(L3); null !== O3 && (!(O3.expirationTime > b3) || a4 && !exports2.unstable_shouldYield()); ) {
        var d4 = O3.callback;
        if ("function" === typeof d4) {
          O3.callback = null;
          P2 = O3.priorityLevel;
          var e3 = d4(O3.expirationTime <= b3);
          b3 = exports2.unstable_now();
          "function" === typeof e3 ? O3.callback = e3 : O3 === J2(L3) && K3(L3);
          T3(b3);
        } else
          K3(L3);
        O3 = J2(L3);
      }
      if (null !== O3)
        var m4 = true;
      else {
        var n2 = J2(M4);
        null !== n2 && g2(U2, n2.startTime - b3);
        m4 = false;
      }
      return m4;
    } finally {
      O3 = null, P2 = c7, Q3 = false;
    }
  }
  var W2 = k3;
  exports2.unstable_IdlePriority = 5;
  exports2.unstable_ImmediatePriority = 1;
  exports2.unstable_LowPriority = 4;
  exports2.unstable_NormalPriority = 3;
  exports2.unstable_Profiling = null;
  exports2.unstable_UserBlockingPriority = 2;
  exports2.unstable_cancelCallback = function(a4) {
    a4.callback = null;
  };
  exports2.unstable_continueExecution = function() {
    R3 || Q3 || (R3 = true, f2(V2));
  };
  exports2.unstable_getCurrentPriorityLevel = function() {
    return P2;
  };
  exports2.unstable_getFirstCallbackNode = function() {
    return J2(L3);
  };
  exports2.unstable_next = function(a4) {
    switch (P2) {
      case 1:
      case 2:
      case 3:
        var b3 = 3;
        break;
      default:
        b3 = P2;
    }
    var c7 = P2;
    P2 = b3;
    try {
      return a4();
    } finally {
      P2 = c7;
    }
  };
  exports2.unstable_pauseExecution = function() {
  };
  exports2.unstable_requestPaint = W2;
  exports2.unstable_runWithPriority = function(a4, b3) {
    switch (a4) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a4 = 3;
    }
    var c7 = P2;
    P2 = a4;
    try {
      return b3();
    } finally {
      P2 = c7;
    }
  };
  exports2.unstable_scheduleCallback = function(a4, b3, c7) {
    var d4 = exports2.unstable_now();
    "object" === typeof c7 && null !== c7 ? (c7 = c7.delay, c7 = "number" === typeof c7 && 0 < c7 ? d4 + c7 : d4) : c7 = d4;
    switch (a4) {
      case 1:
        var e3 = -1;
        break;
      case 2:
        e3 = 250;
        break;
      case 5:
        e3 = 1073741823;
        break;
      case 4:
        e3 = 1e4;
        break;
      default:
        e3 = 5e3;
    }
    e3 = c7 + e3;
    a4 = { id: N2++, callback: b3, priorityLevel: a4, startTime: c7, expirationTime: e3, sortIndex: -1 };
    c7 > d4 ? (a4.sortIndex = c7, H4(M4, a4), null === J2(L3) && a4 === J2(M4) && (S4 ? h4() : S4 = true, g2(U2, c7 - d4))) : (a4.sortIndex = e3, H4(L3, a4), R3 || Q3 || (R3 = true, f2(V2)));
    return a4;
  };
  exports2.unstable_wrapCallback = function(a4) {
    var b3 = P2;
    return function() {
      var c7 = P2;
      P2 = b3;
      try {
        return a4.apply(this, arguments);
      } finally {
        P2 = c7;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
var schedulerExports = scheduler.exports;
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports, m$2 = objectAssign, r$2 = schedulerExports;
function y$2(a4) {
  for (var b3 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a4, c7 = 1; c7 < arguments.length; c7++)
    b3 += "&args[]=" + encodeURIComponent(arguments[c7]);
  return "Minified React error #" + a4 + "; visit " + b3 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
if (!aa)
  throw Error(y$2(227));
var ba = /* @__PURE__ */ new Set(), ca = {};
function da(a4, b3) {
  ea(a4, b3);
  ea(a4 + "Capture", b3);
}
function ea(a4, b3) {
  ca[a4] = b3;
  for (a4 = 0; a4 < b3.length; a4++)
    ba.add(b3[a4]);
}
var fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ia = Object.prototype.hasOwnProperty, ja = {}, ka = {};
function la(a4) {
  if (ia.call(ka, a4))
    return true;
  if (ia.call(ja, a4))
    return false;
  if (ha.test(a4))
    return ka[a4] = true;
  ja[a4] = true;
  return false;
}
function ma(a4, b3, c7, d4) {
  if (null !== c7 && 0 === c7.type)
    return false;
  switch (typeof b3) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d4)
        return false;
      if (null !== c7)
        return !c7.acceptsBooleans;
      a4 = a4.toLowerCase().slice(0, 5);
      return "data-" !== a4 && "aria-" !== a4;
    default:
      return false;
  }
}
function na(a4, b3, c7, d4) {
  if (null === b3 || "undefined" === typeof b3 || ma(a4, b3, c7, d4))
    return true;
  if (d4)
    return false;
  if (null !== c7)
    switch (c7.type) {
      case 3:
        return !b3;
      case 4:
        return false === b3;
      case 5:
        return isNaN(b3);
      case 6:
        return isNaN(b3) || 1 > b3;
    }
  return false;
}
function B$1(a4, b3, c7, d4, e3, f2, g2) {
  this.acceptsBooleans = 2 === b3 || 3 === b3 || 4 === b3;
  this.attributeName = d4;
  this.attributeNamespace = e3;
  this.mustUseProperty = c7;
  this.propertyName = a4;
  this.type = b3;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var D$1 = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a4) {
  D$1[a4] = new B$1(a4, 0, false, a4, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a4) {
  var b3 = a4[0];
  D$1[b3] = new B$1(b3, 1, false, a4[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a4) {
  D$1[a4] = new B$1(a4, 2, false, a4.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a4) {
  D$1[a4] = new B$1(a4, 2, false, a4, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a4) {
  D$1[a4] = new B$1(a4, 3, false, a4.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a4) {
  D$1[a4] = new B$1(a4, 3, true, a4, null, false, false);
});
["capture", "download"].forEach(function(a4) {
  D$1[a4] = new B$1(a4, 4, false, a4, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a4) {
  D$1[a4] = new B$1(a4, 6, false, a4, null, false, false);
});
["rowSpan", "start"].forEach(function(a4) {
  D$1[a4] = new B$1(a4, 5, false, a4.toLowerCase(), null, false, false);
});
var oa = /[\-:]([a-z])/g;
function pa(a4) {
  return a4[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a4) {
  var b3 = a4.replace(
    oa,
    pa
  );
  D$1[b3] = new B$1(b3, 1, false, a4, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a4) {
  var b3 = a4.replace(oa, pa);
  D$1[b3] = new B$1(b3, 1, false, a4, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a4) {
  var b3 = a4.replace(oa, pa);
  D$1[b3] = new B$1(b3, 1, false, a4, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a4) {
  D$1[a4] = new B$1(a4, 1, false, a4.toLowerCase(), null, false, false);
});
D$1.xlinkHref = new B$1("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a4) {
  D$1[a4] = new B$1(a4, 1, false, a4.toLowerCase(), null, true, true);
});
function qa(a4, b3, c7, d4) {
  var e3 = D$1.hasOwnProperty(b3) ? D$1[b3] : null;
  var f2 = null !== e3 ? 0 === e3.type : d4 ? false : !(2 < b3.length) || "o" !== b3[0] && "O" !== b3[0] || "n" !== b3[1] && "N" !== b3[1] ? false : true;
  f2 || (na(b3, c7, e3, d4) && (c7 = null), d4 || null === e3 ? la(b3) && (null === c7 ? a4.removeAttribute(b3) : a4.setAttribute(b3, "" + c7)) : e3.mustUseProperty ? a4[e3.propertyName] = null === c7 ? 3 === e3.type ? false : "" : c7 : (b3 = e3.attributeName, d4 = e3.attributeNamespace, null === c7 ? a4.removeAttribute(b3) : (e3 = e3.type, c7 = 3 === e3 || 4 === e3 && true === c7 ? "" : "" + c7, d4 ? a4.setAttributeNS(d4, b3, c7) : a4.setAttribute(b3, c7))));
}
var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, sa = 60103, ta = 60106, ua = 60107, wa = 60108, xa = 60114, ya = 60109, za = 60110, Aa = 60112, Ba = 60113, Ca = 60120, Da = 60115, Ea = 60116, Fa = 60121, Ga = 60128, Ha = 60129, Ia = 60130, Ja = 60131;
if ("function" === typeof Symbol && Symbol.for) {
  var E$1 = Symbol.for;
  sa = E$1("react.element");
  ta = E$1("react.portal");
  ua = E$1("react.fragment");
  wa = E$1("react.strict_mode");
  xa = E$1("react.profiler");
  ya = E$1("react.provider");
  za = E$1("react.context");
  Aa = E$1("react.forward_ref");
  Ba = E$1("react.suspense");
  Ca = E$1("react.suspense_list");
  Da = E$1("react.memo");
  Ea = E$1("react.lazy");
  Fa = E$1("react.block");
  E$1("react.scope");
  Ga = E$1("react.opaque.id");
  Ha = E$1("react.debug_trace_mode");
  Ia = E$1("react.offscreen");
  Ja = E$1("react.legacy_hidden");
}
var Ka = "function" === typeof Symbol && Symbol.iterator;
function La(a4) {
  if (null === a4 || "object" !== typeof a4)
    return null;
  a4 = Ka && a4[Ka] || a4["@@iterator"];
  return "function" === typeof a4 ? a4 : null;
}
var Ma;
function Na(a4) {
  if (void 0 === Ma)
    try {
      throw Error();
    } catch (c7) {
      var b3 = c7.stack.trim().match(/\n( *(at )?)/);
      Ma = b3 && b3[1] || "";
    }
  return "\n" + Ma + a4;
}
var Oa = false;
function Pa(a4, b3) {
  if (!a4 || Oa)
    return "";
  Oa = true;
  var c7 = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b3)
      if (b3 = function() {
        throw Error();
      }, Object.defineProperty(b3.prototype, "props", { set: function() {
        throw Error();
      } }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b3, []);
        } catch (k3) {
          var d4 = k3;
        }
        Reflect.construct(a4, [], b3);
      } else {
        try {
          b3.call();
        } catch (k3) {
          d4 = k3;
        }
        a4.call(b3.prototype);
      }
    else {
      try {
        throw Error();
      } catch (k3) {
        d4 = k3;
      }
      a4();
    }
  } catch (k3) {
    if (k3 && d4 && "string" === typeof k3.stack) {
      for (var e3 = k3.stack.split("\n"), f2 = d4.stack.split("\n"), g2 = e3.length - 1, h4 = f2.length - 1; 1 <= g2 && 0 <= h4 && e3[g2] !== f2[h4]; )
        h4--;
      for (; 1 <= g2 && 0 <= h4; g2--, h4--)
        if (e3[g2] !== f2[h4]) {
          if (1 !== g2 || 1 !== h4) {
            do
              if (g2--, h4--, 0 > h4 || e3[g2] !== f2[h4])
                return "\n" + e3[g2].replace(" at new ", " at ");
            while (1 <= g2 && 0 <= h4);
          }
          break;
        }
    }
  } finally {
    Oa = false, Error.prepareStackTrace = c7;
  }
  return (a4 = a4 ? a4.displayName || a4.name : "") ? Na(a4) : "";
}
function Qa(a4) {
  switch (a4.tag) {
    case 5:
      return Na(a4.type);
    case 16:
      return Na("Lazy");
    case 13:
      return Na("Suspense");
    case 19:
      return Na("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a4 = Pa(a4.type, false), a4;
    case 11:
      return a4 = Pa(a4.type.render, false), a4;
    case 22:
      return a4 = Pa(a4.type._render, false), a4;
    case 1:
      return a4 = Pa(a4.type, true), a4;
    default:
      return "";
  }
}
function Ra(a4) {
  if (null == a4)
    return null;
  if ("function" === typeof a4)
    return a4.displayName || a4.name || null;
  if ("string" === typeof a4)
    return a4;
  switch (a4) {
    case ua:
      return "Fragment";
    case ta:
      return "Portal";
    case xa:
      return "Profiler";
    case wa:
      return "StrictMode";
    case Ba:
      return "Suspense";
    case Ca:
      return "SuspenseList";
  }
  if ("object" === typeof a4)
    switch (a4.$$typeof) {
      case za:
        return (a4.displayName || "Context") + ".Consumer";
      case ya:
        return (a4._context.displayName || "Context") + ".Provider";
      case Aa:
        var b3 = a4.render;
        b3 = b3.displayName || b3.name || "";
        return a4.displayName || ("" !== b3 ? "ForwardRef(" + b3 + ")" : "ForwardRef");
      case Da:
        return Ra(a4.type);
      case Fa:
        return Ra(a4._render);
      case Ea:
        b3 = a4._payload;
        a4 = a4._init;
        try {
          return Ra(a4(b3));
        } catch (c7) {
        }
    }
  return null;
}
function Sa(a4) {
  switch (typeof a4) {
    case "boolean":
    case "number":
    case "object":
    case "string":
    case "undefined":
      return a4;
    default:
      return "";
  }
}
function Ta(a4) {
  var b3 = a4.type;
  return (a4 = a4.nodeName) && "input" === a4.toLowerCase() && ("checkbox" === b3 || "radio" === b3);
}
function Ua(a4) {
  var b3 = Ta(a4) ? "checked" : "value", c7 = Object.getOwnPropertyDescriptor(a4.constructor.prototype, b3), d4 = "" + a4[b3];
  if (!a4.hasOwnProperty(b3) && "undefined" !== typeof c7 && "function" === typeof c7.get && "function" === typeof c7.set) {
    var e3 = c7.get, f2 = c7.set;
    Object.defineProperty(a4, b3, { configurable: true, get: function() {
      return e3.call(this);
    }, set: function(a5) {
      d4 = "" + a5;
      f2.call(this, a5);
    } });
    Object.defineProperty(a4, b3, { enumerable: c7.enumerable });
    return { getValue: function() {
      return d4;
    }, setValue: function(a5) {
      d4 = "" + a5;
    }, stopTracking: function() {
      a4._valueTracker = null;
      delete a4[b3];
    } };
  }
}
function Va(a4) {
  a4._valueTracker || (a4._valueTracker = Ua(a4));
}
function Wa(a4) {
  if (!a4)
    return false;
  var b3 = a4._valueTracker;
  if (!b3)
    return true;
  var c7 = b3.getValue();
  var d4 = "";
  a4 && (d4 = Ta(a4) ? a4.checked ? "true" : "false" : a4.value);
  a4 = d4;
  return a4 !== c7 ? (b3.setValue(a4), true) : false;
}
function Xa(a4) {
  a4 = a4 || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a4)
    return null;
  try {
    return a4.activeElement || a4.body;
  } catch (b3) {
    return a4.body;
  }
}
function Ya(a4, b3) {
  var c7 = b3.checked;
  return m$2({}, b3, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c7 ? c7 : a4._wrapperState.initialChecked });
}
function Za(a4, b3) {
  var c7 = null == b3.defaultValue ? "" : b3.defaultValue, d4 = null != b3.checked ? b3.checked : b3.defaultChecked;
  c7 = Sa(null != b3.value ? b3.value : c7);
  a4._wrapperState = { initialChecked: d4, initialValue: c7, controlled: "checkbox" === b3.type || "radio" === b3.type ? null != b3.checked : null != b3.value };
}
function $a(a4, b3) {
  b3 = b3.checked;
  null != b3 && qa(a4, "checked", b3, false);
}
function ab(a4, b3) {
  $a(a4, b3);
  var c7 = Sa(b3.value), d4 = b3.type;
  if (null != c7)
    if ("number" === d4) {
      if (0 === c7 && "" === a4.value || a4.value != c7)
        a4.value = "" + c7;
    } else
      a4.value !== "" + c7 && (a4.value = "" + c7);
  else if ("submit" === d4 || "reset" === d4) {
    a4.removeAttribute("value");
    return;
  }
  b3.hasOwnProperty("value") ? bb(a4, b3.type, c7) : b3.hasOwnProperty("defaultValue") && bb(a4, b3.type, Sa(b3.defaultValue));
  null == b3.checked && null != b3.defaultChecked && (a4.defaultChecked = !!b3.defaultChecked);
}
function cb(a4, b3, c7) {
  if (b3.hasOwnProperty("value") || b3.hasOwnProperty("defaultValue")) {
    var d4 = b3.type;
    if (!("submit" !== d4 && "reset" !== d4 || void 0 !== b3.value && null !== b3.value))
      return;
    b3 = "" + a4._wrapperState.initialValue;
    c7 || b3 === a4.value || (a4.value = b3);
    a4.defaultValue = b3;
  }
  c7 = a4.name;
  "" !== c7 && (a4.name = "");
  a4.defaultChecked = !!a4._wrapperState.initialChecked;
  "" !== c7 && (a4.name = c7);
}
function bb(a4, b3, c7) {
  if ("number" !== b3 || Xa(a4.ownerDocument) !== a4)
    null == c7 ? a4.defaultValue = "" + a4._wrapperState.initialValue : a4.defaultValue !== "" + c7 && (a4.defaultValue = "" + c7);
}
function db(a4) {
  var b3 = "";
  aa.Children.forEach(a4, function(a5) {
    null != a5 && (b3 += a5);
  });
  return b3;
}
function eb(a4, b3) {
  a4 = m$2({ children: void 0 }, b3);
  if (b3 = db(b3.children))
    a4.children = b3;
  return a4;
}
function fb(a4, b3, c7, d4) {
  a4 = a4.options;
  if (b3) {
    b3 = {};
    for (var e3 = 0; e3 < c7.length; e3++)
      b3["$" + c7[e3]] = true;
    for (c7 = 0; c7 < a4.length; c7++)
      e3 = b3.hasOwnProperty("$" + a4[c7].value), a4[c7].selected !== e3 && (a4[c7].selected = e3), e3 && d4 && (a4[c7].defaultSelected = true);
  } else {
    c7 = "" + Sa(c7);
    b3 = null;
    for (e3 = 0; e3 < a4.length; e3++) {
      if (a4[e3].value === c7) {
        a4[e3].selected = true;
        d4 && (a4[e3].defaultSelected = true);
        return;
      }
      null !== b3 || a4[e3].disabled || (b3 = a4[e3]);
    }
    null !== b3 && (b3.selected = true);
  }
}
function gb(a4, b3) {
  if (null != b3.dangerouslySetInnerHTML)
    throw Error(y$2(91));
  return m$2({}, b3, { value: void 0, defaultValue: void 0, children: "" + a4._wrapperState.initialValue });
}
function hb(a4, b3) {
  var c7 = b3.value;
  if (null == c7) {
    c7 = b3.children;
    b3 = b3.defaultValue;
    if (null != c7) {
      if (null != b3)
        throw Error(y$2(92));
      if (Array.isArray(c7)) {
        if (!(1 >= c7.length))
          throw Error(y$2(93));
        c7 = c7[0];
      }
      b3 = c7;
    }
    null == b3 && (b3 = "");
    c7 = b3;
  }
  a4._wrapperState = { initialValue: Sa(c7) };
}
function ib(a4, b3) {
  var c7 = Sa(b3.value), d4 = Sa(b3.defaultValue);
  null != c7 && (c7 = "" + c7, c7 !== a4.value && (a4.value = c7), null == b3.defaultValue && a4.defaultValue !== c7 && (a4.defaultValue = c7));
  null != d4 && (a4.defaultValue = "" + d4);
}
function jb(a4) {
  var b3 = a4.textContent;
  b3 === a4._wrapperState.initialValue && "" !== b3 && null !== b3 && (a4.value = b3);
}
var kb = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
function lb(a4) {
  switch (a4) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function mb(a4, b3) {
  return null == a4 || "http://www.w3.org/1999/xhtml" === a4 ? lb(b3) : "http://www.w3.org/2000/svg" === a4 && "foreignObject" === b3 ? "http://www.w3.org/1999/xhtml" : a4;
}
var nb, ob = function(a4) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b3, c7, d4, e3) {
    MSApp.execUnsafeLocalFunction(function() {
      return a4(b3, c7, d4, e3);
    });
  } : a4;
}(function(a4, b3) {
  if (a4.namespaceURI !== kb.svg || "innerHTML" in a4)
    a4.innerHTML = b3;
  else {
    nb = nb || document.createElement("div");
    nb.innerHTML = "<svg>" + b3.valueOf().toString() + "</svg>";
    for (b3 = nb.firstChild; a4.firstChild; )
      a4.removeChild(a4.firstChild);
    for (; b3.firstChild; )
      a4.appendChild(b3.firstChild);
  }
});
function pb(a4, b3) {
  if (b3) {
    var c7 = a4.firstChild;
    if (c7 && c7 === a4.lastChild && 3 === c7.nodeType) {
      c7.nodeValue = b3;
      return;
    }
  }
  a4.textContent = b3;
}
var qb = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, rb = ["Webkit", "ms", "Moz", "O"];
Object.keys(qb).forEach(function(a4) {
  rb.forEach(function(b3) {
    b3 = b3 + a4.charAt(0).toUpperCase() + a4.substring(1);
    qb[b3] = qb[a4];
  });
});
function sb(a4, b3, c7) {
  return null == b3 || "boolean" === typeof b3 || "" === b3 ? "" : c7 || "number" !== typeof b3 || 0 === b3 || qb.hasOwnProperty(a4) && qb[a4] ? ("" + b3).trim() : b3 + "px";
}
function tb(a4, b3) {
  a4 = a4.style;
  for (var c7 in b3)
    if (b3.hasOwnProperty(c7)) {
      var d4 = 0 === c7.indexOf("--"), e3 = sb(c7, b3[c7], d4);
      "float" === c7 && (c7 = "cssFloat");
      d4 ? a4.setProperty(c7, e3) : a4[c7] = e3;
    }
}
var ub = m$2({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function vb(a4, b3) {
  if (b3) {
    if (ub[a4] && (null != b3.children || null != b3.dangerouslySetInnerHTML))
      throw Error(y$2(137, a4));
    if (null != b3.dangerouslySetInnerHTML) {
      if (null != b3.children)
        throw Error(y$2(60));
      if (!("object" === typeof b3.dangerouslySetInnerHTML && "__html" in b3.dangerouslySetInnerHTML))
        throw Error(y$2(61));
    }
    if (null != b3.style && "object" !== typeof b3.style)
      throw Error(y$2(62));
  }
}
function wb(a4, b3) {
  if (-1 === a4.indexOf("-"))
    return "string" === typeof b3.is;
  switch (a4) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
function xb(a4) {
  a4 = a4.target || a4.srcElement || window;
  a4.correspondingUseElement && (a4 = a4.correspondingUseElement);
  return 3 === a4.nodeType ? a4.parentNode : a4;
}
var yb = null, zb = null, Ab = null;
function Bb(a4) {
  if (a4 = Cb(a4)) {
    if ("function" !== typeof yb)
      throw Error(y$2(280));
    var b3 = a4.stateNode;
    b3 && (b3 = Db(b3), yb(a4.stateNode, a4.type, b3));
  }
}
function Eb(a4) {
  zb ? Ab ? Ab.push(a4) : Ab = [a4] : zb = a4;
}
function Fb() {
  if (zb) {
    var a4 = zb, b3 = Ab;
    Ab = zb = null;
    Bb(a4);
    if (b3)
      for (a4 = 0; a4 < b3.length; a4++)
        Bb(b3[a4]);
  }
}
function Gb(a4, b3) {
  return a4(b3);
}
function Hb(a4, b3, c7, d4, e3) {
  return a4(b3, c7, d4, e3);
}
function Ib() {
}
var Jb = Gb, Kb = false, Lb = false;
function Mb() {
  if (null !== zb || null !== Ab)
    Ib(), Fb();
}
function Nb(a4, b3, c7) {
  if (Lb)
    return a4(b3, c7);
  Lb = true;
  try {
    return Jb(a4, b3, c7);
  } finally {
    Lb = false, Mb();
  }
}
function Ob(a4, b3) {
  var c7 = a4.stateNode;
  if (null === c7)
    return null;
  var d4 = Db(c7);
  if (null === d4)
    return null;
  c7 = d4[b3];
  a:
    switch (b3) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d4 = !d4.disabled) || (a4 = a4.type, d4 = !("button" === a4 || "input" === a4 || "select" === a4 || "textarea" === a4));
        a4 = !d4;
        break a;
      default:
        a4 = false;
    }
  if (a4)
    return null;
  if (c7 && "function" !== typeof c7)
    throw Error(y$2(231, b3, typeof c7));
  return c7;
}
var Pb = false;
if (fa)
  try {
    var Qb = {};
    Object.defineProperty(Qb, "passive", { get: function() {
      Pb = true;
    } });
    window.addEventListener("test", Qb, Qb);
    window.removeEventListener("test", Qb, Qb);
  } catch (a4) {
    Pb = false;
  }
function Rb(a4, b3, c7, d4, e3, f2, g2, h4, k3) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b3.apply(c7, l2);
  } catch (n2) {
    this.onError(n2);
  }
}
var Sb = false, Tb = null, Ub = false, Vb = null, Wb = { onError: function(a4) {
  Sb = true;
  Tb = a4;
} };
function Xb(a4, b3, c7, d4, e3, f2, g2, h4, k3) {
  Sb = false;
  Tb = null;
  Rb.apply(Wb, arguments);
}
function Yb(a4, b3, c7, d4, e3, f2, g2, h4, k3) {
  Xb.apply(this, arguments);
  if (Sb) {
    if (Sb) {
      var l2 = Tb;
      Sb = false;
      Tb = null;
    } else
      throw Error(y$2(198));
    Ub || (Ub = true, Vb = l2);
  }
}
function Zb(a4) {
  var b3 = a4, c7 = a4;
  if (a4.alternate)
    for (; b3.return; )
      b3 = b3.return;
  else {
    a4 = b3;
    do
      b3 = a4, 0 !== (b3.flags & 1026) && (c7 = b3.return), a4 = b3.return;
    while (a4);
  }
  return 3 === b3.tag ? c7 : null;
}
function $b(a4) {
  if (13 === a4.tag) {
    var b3 = a4.memoizedState;
    null === b3 && (a4 = a4.alternate, null !== a4 && (b3 = a4.memoizedState));
    if (null !== b3)
      return b3.dehydrated;
  }
  return null;
}
function ac(a4) {
  if (Zb(a4) !== a4)
    throw Error(y$2(188));
}
function bc(a4) {
  var b3 = a4.alternate;
  if (!b3) {
    b3 = Zb(a4);
    if (null === b3)
      throw Error(y$2(188));
    return b3 !== a4 ? null : a4;
  }
  for (var c7 = a4, d4 = b3; ; ) {
    var e3 = c7.return;
    if (null === e3)
      break;
    var f2 = e3.alternate;
    if (null === f2) {
      d4 = e3.return;
      if (null !== d4) {
        c7 = d4;
        continue;
      }
      break;
    }
    if (e3.child === f2.child) {
      for (f2 = e3.child; f2; ) {
        if (f2 === c7)
          return ac(e3), a4;
        if (f2 === d4)
          return ac(e3), b3;
        f2 = f2.sibling;
      }
      throw Error(y$2(188));
    }
    if (c7.return !== d4.return)
      c7 = e3, d4 = f2;
    else {
      for (var g2 = false, h4 = e3.child; h4; ) {
        if (h4 === c7) {
          g2 = true;
          c7 = e3;
          d4 = f2;
          break;
        }
        if (h4 === d4) {
          g2 = true;
          d4 = e3;
          c7 = f2;
          break;
        }
        h4 = h4.sibling;
      }
      if (!g2) {
        for (h4 = f2.child; h4; ) {
          if (h4 === c7) {
            g2 = true;
            c7 = f2;
            d4 = e3;
            break;
          }
          if (h4 === d4) {
            g2 = true;
            d4 = f2;
            c7 = e3;
            break;
          }
          h4 = h4.sibling;
        }
        if (!g2)
          throw Error(y$2(189));
      }
    }
    if (c7.alternate !== d4)
      throw Error(y$2(190));
  }
  if (3 !== c7.tag)
    throw Error(y$2(188));
  return c7.stateNode.current === c7 ? a4 : b3;
}
function cc(a4) {
  a4 = bc(a4);
  if (!a4)
    return null;
  for (var b3 = a4; ; ) {
    if (5 === b3.tag || 6 === b3.tag)
      return b3;
    if (b3.child)
      b3.child.return = b3, b3 = b3.child;
    else {
      if (b3 === a4)
        break;
      for (; !b3.sibling; ) {
        if (!b3.return || b3.return === a4)
          return null;
        b3 = b3.return;
      }
      b3.sibling.return = b3.return;
      b3 = b3.sibling;
    }
  }
  return null;
}
function dc(a4, b3) {
  for (var c7 = a4.alternate; null !== b3; ) {
    if (b3 === a4 || b3 === c7)
      return true;
    b3 = b3.return;
  }
  return false;
}
var ec, fc, gc, hc, ic = false, jc = [], kc = null, lc = null, mc = null, nc = /* @__PURE__ */ new Map(), oc = /* @__PURE__ */ new Map(), pc = [], qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function rc(a4, b3, c7, d4, e3) {
  return { blockedOn: a4, domEventName: b3, eventSystemFlags: c7 | 16, nativeEvent: e3, targetContainers: [d4] };
}
function sc(a4, b3) {
  switch (a4) {
    case "focusin":
    case "focusout":
      kc = null;
      break;
    case "dragenter":
    case "dragleave":
      lc = null;
      break;
    case "mouseover":
    case "mouseout":
      mc = null;
      break;
    case "pointerover":
    case "pointerout":
      nc.delete(b3.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      oc.delete(b3.pointerId);
  }
}
function tc(a4, b3, c7, d4, e3, f2) {
  if (null === a4 || a4.nativeEvent !== f2)
    return a4 = rc(b3, c7, d4, e3, f2), null !== b3 && (b3 = Cb(b3), null !== b3 && fc(b3)), a4;
  a4.eventSystemFlags |= d4;
  b3 = a4.targetContainers;
  null !== e3 && -1 === b3.indexOf(e3) && b3.push(e3);
  return a4;
}
function uc(a4, b3, c7, d4, e3) {
  switch (b3) {
    case "focusin":
      return kc = tc(kc, a4, b3, c7, d4, e3), true;
    case "dragenter":
      return lc = tc(lc, a4, b3, c7, d4, e3), true;
    case "mouseover":
      return mc = tc(mc, a4, b3, c7, d4, e3), true;
    case "pointerover":
      var f2 = e3.pointerId;
      nc.set(f2, tc(nc.get(f2) || null, a4, b3, c7, d4, e3));
      return true;
    case "gotpointercapture":
      return f2 = e3.pointerId, oc.set(f2, tc(oc.get(f2) || null, a4, b3, c7, d4, e3)), true;
  }
  return false;
}
function vc(a4) {
  var b3 = wc(a4.target);
  if (null !== b3) {
    var c7 = Zb(b3);
    if (null !== c7) {
      if (b3 = c7.tag, 13 === b3) {
        if (b3 = $b(c7), null !== b3) {
          a4.blockedOn = b3;
          hc(a4.lanePriority, function() {
            r$2.unstable_runWithPriority(a4.priority, function() {
              gc(c7);
            });
          });
          return;
        }
      } else if (3 === b3 && c7.stateNode.hydrate) {
        a4.blockedOn = 3 === c7.tag ? c7.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a4.blockedOn = null;
}
function xc(a4) {
  if (null !== a4.blockedOn)
    return false;
  for (var b3 = a4.targetContainers; 0 < b3.length; ) {
    var c7 = yc(a4.domEventName, a4.eventSystemFlags, b3[0], a4.nativeEvent);
    if (null !== c7)
      return b3 = Cb(c7), null !== b3 && fc(b3), a4.blockedOn = c7, false;
    b3.shift();
  }
  return true;
}
function zc(a4, b3, c7) {
  xc(a4) && c7.delete(b3);
}
function Ac() {
  for (ic = false; 0 < jc.length; ) {
    var a4 = jc[0];
    if (null !== a4.blockedOn) {
      a4 = Cb(a4.blockedOn);
      null !== a4 && ec(a4);
      break;
    }
    for (var b3 = a4.targetContainers; 0 < b3.length; ) {
      var c7 = yc(a4.domEventName, a4.eventSystemFlags, b3[0], a4.nativeEvent);
      if (null !== c7) {
        a4.blockedOn = c7;
        break;
      }
      b3.shift();
    }
    null === a4.blockedOn && jc.shift();
  }
  null !== kc && xc(kc) && (kc = null);
  null !== lc && xc(lc) && (lc = null);
  null !== mc && xc(mc) && (mc = null);
  nc.forEach(zc);
  oc.forEach(zc);
}
function Bc(a4, b3) {
  a4.blockedOn === b3 && (a4.blockedOn = null, ic || (ic = true, r$2.unstable_scheduleCallback(r$2.unstable_NormalPriority, Ac)));
}
function Cc(a4) {
  function b3(b4) {
    return Bc(b4, a4);
  }
  if (0 < jc.length) {
    Bc(jc[0], a4);
    for (var c7 = 1; c7 < jc.length; c7++) {
      var d4 = jc[c7];
      d4.blockedOn === a4 && (d4.blockedOn = null);
    }
  }
  null !== kc && Bc(kc, a4);
  null !== lc && Bc(lc, a4);
  null !== mc && Bc(mc, a4);
  nc.forEach(b3);
  oc.forEach(b3);
  for (c7 = 0; c7 < pc.length; c7++)
    d4 = pc[c7], d4.blockedOn === a4 && (d4.blockedOn = null);
  for (; 0 < pc.length && (c7 = pc[0], null === c7.blockedOn); )
    vc(c7), null === c7.blockedOn && pc.shift();
}
function Dc(a4, b3) {
  var c7 = {};
  c7[a4.toLowerCase()] = b3.toLowerCase();
  c7["Webkit" + a4] = "webkit" + b3;
  c7["Moz" + a4] = "moz" + b3;
  return c7;
}
var Ec = { animationend: Dc("Animation", "AnimationEnd"), animationiteration: Dc("Animation", "AnimationIteration"), animationstart: Dc("Animation", "AnimationStart"), transitionend: Dc("Transition", "TransitionEnd") }, Fc = {}, Gc = {};
fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
function Hc(a4) {
  if (Fc[a4])
    return Fc[a4];
  if (!Ec[a4])
    return a4;
  var b3 = Ec[a4], c7;
  for (c7 in b3)
    if (b3.hasOwnProperty(c7) && c7 in Gc)
      return Fc[a4] = b3[c7];
  return a4;
}
var Ic = Hc("animationend"), Jc = Hc("animationiteration"), Kc = Hc("animationstart"), Lc = Hc("transitionend"), Mc = /* @__PURE__ */ new Map(), Nc = /* @__PURE__ */ new Map(), Oc = [
  "abort",
  "abort",
  Ic,
  "animationEnd",
  Jc,
  "animationIteration",
  Kc,
  "animationStart",
  "canplay",
  "canPlay",
  "canplaythrough",
  "canPlayThrough",
  "durationchange",
  "durationChange",
  "emptied",
  "emptied",
  "encrypted",
  "encrypted",
  "ended",
  "ended",
  "error",
  "error",
  "gotpointercapture",
  "gotPointerCapture",
  "load",
  "load",
  "loadeddata",
  "loadedData",
  "loadedmetadata",
  "loadedMetadata",
  "loadstart",
  "loadStart",
  "lostpointercapture",
  "lostPointerCapture",
  "playing",
  "playing",
  "progress",
  "progress",
  "seeking",
  "seeking",
  "stalled",
  "stalled",
  "suspend",
  "suspend",
  "timeupdate",
  "timeUpdate",
  Lc,
  "transitionEnd",
  "waiting",
  "waiting"
];
function Pc(a4, b3) {
  for (var c7 = 0; c7 < a4.length; c7 += 2) {
    var d4 = a4[c7], e3 = a4[c7 + 1];
    e3 = "on" + (e3[0].toUpperCase() + e3.slice(1));
    Nc.set(d4, b3);
    Mc.set(d4, e3);
    da(e3, [d4]);
  }
}
var Qc = r$2.unstable_now;
Qc();
var F$1 = 8;
function Rc(a4) {
  if (0 !== (1 & a4))
    return F$1 = 15, 1;
  if (0 !== (2 & a4))
    return F$1 = 14, 2;
  if (0 !== (4 & a4))
    return F$1 = 13, 4;
  var b3 = 24 & a4;
  if (0 !== b3)
    return F$1 = 12, b3;
  if (0 !== (a4 & 32))
    return F$1 = 11, 32;
  b3 = 192 & a4;
  if (0 !== b3)
    return F$1 = 10, b3;
  if (0 !== (a4 & 256))
    return F$1 = 9, 256;
  b3 = 3584 & a4;
  if (0 !== b3)
    return F$1 = 8, b3;
  if (0 !== (a4 & 4096))
    return F$1 = 7, 4096;
  b3 = 4186112 & a4;
  if (0 !== b3)
    return F$1 = 6, b3;
  b3 = 62914560 & a4;
  if (0 !== b3)
    return F$1 = 5, b3;
  if (a4 & 67108864)
    return F$1 = 4, 67108864;
  if (0 !== (a4 & 134217728))
    return F$1 = 3, 134217728;
  b3 = 805306368 & a4;
  if (0 !== b3)
    return F$1 = 2, b3;
  if (0 !== (1073741824 & a4))
    return F$1 = 1, 1073741824;
  F$1 = 8;
  return a4;
}
function Sc(a4) {
  switch (a4) {
    case 99:
      return 15;
    case 98:
      return 10;
    case 97:
    case 96:
      return 8;
    case 95:
      return 2;
    default:
      return 0;
  }
}
function Tc(a4) {
  switch (a4) {
    case 15:
    case 14:
      return 99;
    case 13:
    case 12:
    case 11:
    case 10:
      return 98;
    case 9:
    case 8:
    case 7:
    case 6:
    case 4:
    case 5:
      return 97;
    case 3:
    case 2:
    case 1:
      return 95;
    case 0:
      return 90;
    default:
      throw Error(y$2(358, a4));
  }
}
function Uc(a4, b3) {
  var c7 = a4.pendingLanes;
  if (0 === c7)
    return F$1 = 0;
  var d4 = 0, e3 = 0, f2 = a4.expiredLanes, g2 = a4.suspendedLanes, h4 = a4.pingedLanes;
  if (0 !== f2)
    d4 = f2, e3 = F$1 = 15;
  else if (f2 = c7 & 134217727, 0 !== f2) {
    var k3 = f2 & ~g2;
    0 !== k3 ? (d4 = Rc(k3), e3 = F$1) : (h4 &= f2, 0 !== h4 && (d4 = Rc(h4), e3 = F$1));
  } else
    f2 = c7 & ~g2, 0 !== f2 ? (d4 = Rc(f2), e3 = F$1) : 0 !== h4 && (d4 = Rc(h4), e3 = F$1);
  if (0 === d4)
    return 0;
  d4 = 31 - Vc(d4);
  d4 = c7 & ((0 > d4 ? 0 : 1 << d4) << 1) - 1;
  if (0 !== b3 && b3 !== d4 && 0 === (b3 & g2)) {
    Rc(b3);
    if (e3 <= F$1)
      return b3;
    F$1 = e3;
  }
  b3 = a4.entangledLanes;
  if (0 !== b3)
    for (a4 = a4.entanglements, b3 &= d4; 0 < b3; )
      c7 = 31 - Vc(b3), e3 = 1 << c7, d4 |= a4[c7], b3 &= ~e3;
  return d4;
}
function Wc(a4) {
  a4 = a4.pendingLanes & -1073741825;
  return 0 !== a4 ? a4 : a4 & 1073741824 ? 1073741824 : 0;
}
function Xc(a4, b3) {
  switch (a4) {
    case 15:
      return 1;
    case 14:
      return 2;
    case 12:
      return a4 = Yc(24 & ~b3), 0 === a4 ? Xc(10, b3) : a4;
    case 10:
      return a4 = Yc(192 & ~b3), 0 === a4 ? Xc(8, b3) : a4;
    case 8:
      return a4 = Yc(3584 & ~b3), 0 === a4 && (a4 = Yc(4186112 & ~b3), 0 === a4 && (a4 = 512)), a4;
    case 2:
      return b3 = Yc(805306368 & ~b3), 0 === b3 && (b3 = 268435456), b3;
  }
  throw Error(y$2(358, a4));
}
function Yc(a4) {
  return a4 & -a4;
}
function Zc(a4) {
  for (var b3 = [], c7 = 0; 31 > c7; c7++)
    b3.push(a4);
  return b3;
}
function $c(a4, b3, c7) {
  a4.pendingLanes |= b3;
  var d4 = b3 - 1;
  a4.suspendedLanes &= d4;
  a4.pingedLanes &= d4;
  a4 = a4.eventTimes;
  b3 = 31 - Vc(b3);
  a4[b3] = c7;
}
var Vc = Math.clz32 ? Math.clz32 : ad, bd = Math.log, cd = Math.LN2;
function ad(a4) {
  return 0 === a4 ? 32 : 31 - (bd(a4) / cd | 0) | 0;
}
var dd$1 = r$2.unstable_UserBlockingPriority, ed = r$2.unstable_runWithPriority, fd = true;
function gd(a4, b3, c7, d4) {
  Kb || Ib();
  var e3 = hd, f2 = Kb;
  Kb = true;
  try {
    Hb(e3, a4, b3, c7, d4);
  } finally {
    (Kb = f2) || Mb();
  }
}
function id(a4, b3, c7, d4) {
  ed(dd$1, hd.bind(null, a4, b3, c7, d4));
}
function hd(a4, b3, c7, d4) {
  if (fd) {
    var e3;
    if ((e3 = 0 === (b3 & 4)) && 0 < jc.length && -1 < qc.indexOf(a4))
      a4 = rc(null, a4, b3, c7, d4), jc.push(a4);
    else {
      var f2 = yc(a4, b3, c7, d4);
      if (null === f2)
        e3 && sc(a4, d4);
      else {
        if (e3) {
          if (-1 < qc.indexOf(a4)) {
            a4 = rc(f2, a4, b3, c7, d4);
            jc.push(a4);
            return;
          }
          if (uc(f2, a4, b3, c7, d4))
            return;
          sc(a4, d4);
        }
        jd(a4, b3, d4, null, c7);
      }
    }
  }
}
function yc(a4, b3, c7, d4) {
  var e3 = xb(d4);
  e3 = wc(e3);
  if (null !== e3) {
    var f2 = Zb(e3);
    if (null === f2)
      e3 = null;
    else {
      var g2 = f2.tag;
      if (13 === g2) {
        e3 = $b(f2);
        if (null !== e3)
          return e3;
        e3 = null;
      } else if (3 === g2) {
        if (f2.stateNode.hydrate)
          return 3 === f2.tag ? f2.stateNode.containerInfo : null;
        e3 = null;
      } else
        f2 !== e3 && (e3 = null);
    }
  }
  jd(a4, b3, d4, e3, c7);
  return null;
}
var kd = null, ld = null, md = null;
function nd() {
  if (md)
    return md;
  var a4, b3 = ld, c7 = b3.length, d4, e3 = "value" in kd ? kd.value : kd.textContent, f2 = e3.length;
  for (a4 = 0; a4 < c7 && b3[a4] === e3[a4]; a4++)
    ;
  var g2 = c7 - a4;
  for (d4 = 1; d4 <= g2 && b3[c7 - d4] === e3[f2 - d4]; d4++)
    ;
  return md = e3.slice(a4, 1 < d4 ? 1 - d4 : void 0);
}
function od(a4) {
  var b3 = a4.keyCode;
  "charCode" in a4 ? (a4 = a4.charCode, 0 === a4 && 13 === b3 && (a4 = 13)) : a4 = b3;
  10 === a4 && (a4 = 13);
  return 32 <= a4 || 13 === a4 ? a4 : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a4) {
  function b3(b4, d4, e3, f2, g2) {
    this._reactName = b4;
    this._targetInst = e3;
    this.type = d4;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c7 in a4)
      a4.hasOwnProperty(c7) && (b4 = a4[c7], this[c7] = b4 ? b4(f2) : f2[c7]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  m$2(b3.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a5 = this.nativeEvent;
    a5 && (a5.preventDefault ? a5.preventDefault() : "unknown" !== typeof a5.returnValue && (a5.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a5 = this.nativeEvent;
    a5 && (a5.stopPropagation ? a5.stopPropagation() : "unknown" !== typeof a5.cancelBubble && (a5.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b3;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a4) {
  return a4.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = m$2({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = m$2({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a4) {
  return void 0 === a4.relatedTarget ? a4.fromElement === a4.srcElement ? a4.toElement : a4.fromElement : a4.relatedTarget;
}, movementX: function(a4) {
  if ("movementX" in a4)
    return a4.movementX;
  a4 !== yd && (yd && "mousemove" === a4.type ? (wd = a4.screenX - yd.screenX, xd = a4.screenY - yd.screenY) : xd = wd = 0, yd = a4);
  return wd;
}, movementY: function(a4) {
  return "movementY" in a4 ? a4.movementY : xd;
} }), Bd = rd(Ad), Cd = m$2({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = m$2({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = m$2({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = m$2({}, sd, { clipboardData: function(a4) {
  return "clipboardData" in a4 ? a4.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = m$2({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a4) {
  var b3 = this.nativeEvent;
  return b3.getModifierState ? b3.getModifierState(a4) : (a4 = Od[a4]) ? !!b3[a4] : false;
}
function zd() {
  return Pd;
}
var Qd = m$2({}, ud, { key: function(a4) {
  if (a4.key) {
    var b3 = Md[a4.key] || a4.key;
    if ("Unidentified" !== b3)
      return b3;
  }
  return "keypress" === a4.type ? (a4 = od(a4), 13 === a4 ? "Enter" : String.fromCharCode(a4)) : "keydown" === a4.type || "keyup" === a4.type ? Nd[a4.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a4) {
  return "keypress" === a4.type ? od(a4) : 0;
}, keyCode: function(a4) {
  return "keydown" === a4.type || "keyup" === a4.type ? a4.keyCode : 0;
}, which: function(a4) {
  return "keypress" === a4.type ? od(a4) : "keydown" === a4.type || "keyup" === a4.type ? a4.keyCode : 0;
} }), Rd = rd(Qd), Sd = m$2({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = m$2({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = m$2({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = m$2({}, Ad, {
  deltaX: function(a4) {
    return "deltaX" in a4 ? a4.deltaX : "wheelDeltaX" in a4 ? -a4.wheelDeltaX : 0;
  },
  deltaY: function(a4) {
    return "deltaY" in a4 ? a4.deltaY : "wheelDeltaY" in a4 ? -a4.wheelDeltaY : "wheelDelta" in a4 ? -a4.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae$1 = fa && "CompositionEvent" in window, be$1 = null;
fa && "documentMode" in document && (be$1 = document.documentMode);
var ce$1 = fa && "TextEvent" in window && !be$1, de$1 = fa && (!ae$1 || be$1 && 8 < be$1 && 11 >= be$1), ee$1 = String.fromCharCode(32), fe$1 = false;
function ge$1(a4, b3) {
  switch (a4) {
    case "keyup":
      return -1 !== $d.indexOf(b3.keyCode);
    case "keydown":
      return 229 !== b3.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he$1(a4) {
  a4 = a4.detail;
  return "object" === typeof a4 && "data" in a4 ? a4.data : null;
}
var ie$1 = false;
function je$1(a4, b3) {
  switch (a4) {
    case "compositionend":
      return he$1(b3);
    case "keypress":
      if (32 !== b3.which)
        return null;
      fe$1 = true;
      return ee$1;
    case "textInput":
      return a4 = b3.data, a4 === ee$1 && fe$1 ? null : a4;
    default:
      return null;
  }
}
function ke$1(a4, b3) {
  if (ie$1)
    return "compositionend" === a4 || !ae$1 && ge$1(a4, b3) ? (a4 = nd(), md = ld = kd = null, ie$1 = false, a4) : null;
  switch (a4) {
    case "paste":
      return null;
    case "keypress":
      if (!(b3.ctrlKey || b3.altKey || b3.metaKey) || b3.ctrlKey && b3.altKey) {
        if (b3.char && 1 < b3.char.length)
          return b3.char;
        if (b3.which)
          return String.fromCharCode(b3.which);
      }
      return null;
    case "compositionend":
      return de$1 && "ko" !== b3.locale ? null : b3.data;
    default:
      return null;
  }
}
var le$1 = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me$1(a4) {
  var b3 = a4 && a4.nodeName && a4.nodeName.toLowerCase();
  return "input" === b3 ? !!le$1[a4.type] : "textarea" === b3 ? true : false;
}
function ne$1(a4, b3, c7, d4) {
  Eb(d4);
  b3 = oe$1(b3, "onChange");
  0 < b3.length && (c7 = new td("onChange", "change", null, c7, d4), a4.push({ event: c7, listeners: b3 }));
}
var pe$1 = null, qe$1 = null;
function re$1(a4) {
  se$1(a4, 0);
}
function te$1(a4) {
  var b3 = ue$1(a4);
  if (Wa(b3))
    return a4;
}
function ve$1(a4, b3) {
  if ("change" === a4)
    return b3;
}
var we$1 = false;
if (fa) {
  var xe$1;
  if (fa) {
    var ye$1 = "oninput" in document;
    if (!ye$1) {
      var ze$1 = document.createElement("div");
      ze$1.setAttribute("oninput", "return;");
      ye$1 = "function" === typeof ze$1.oninput;
    }
    xe$1 = ye$1;
  } else
    xe$1 = false;
  we$1 = xe$1 && (!document.documentMode || 9 < document.documentMode);
}
function Ae$1() {
  pe$1 && (pe$1.detachEvent("onpropertychange", Be$1), qe$1 = pe$1 = null);
}
function Be$1(a4) {
  if ("value" === a4.propertyName && te$1(qe$1)) {
    var b3 = [];
    ne$1(b3, qe$1, a4, xb(a4));
    a4 = re$1;
    if (Kb)
      a4(b3);
    else {
      Kb = true;
      try {
        Gb(a4, b3);
      } finally {
        Kb = false, Mb();
      }
    }
  }
}
function Ce$1(a4, b3, c7) {
  "focusin" === a4 ? (Ae$1(), pe$1 = b3, qe$1 = c7, pe$1.attachEvent("onpropertychange", Be$1)) : "focusout" === a4 && Ae$1();
}
function De$1(a4) {
  if ("selectionchange" === a4 || "keyup" === a4 || "keydown" === a4)
    return te$1(qe$1);
}
function Ee$1(a4, b3) {
  if ("click" === a4)
    return te$1(b3);
}
function Fe$1(a4, b3) {
  if ("input" === a4 || "change" === a4)
    return te$1(b3);
}
function Ge$1(a4, b3) {
  return a4 === b3 && (0 !== a4 || 1 / a4 === 1 / b3) || a4 !== a4 && b3 !== b3;
}
var He$1 = "function" === typeof Object.is ? Object.is : Ge$1, Ie$1 = Object.prototype.hasOwnProperty;
function Je$1(a4, b3) {
  if (He$1(a4, b3))
    return true;
  if ("object" !== typeof a4 || null === a4 || "object" !== typeof b3 || null === b3)
    return false;
  var c7 = Object.keys(a4), d4 = Object.keys(b3);
  if (c7.length !== d4.length)
    return false;
  for (d4 = 0; d4 < c7.length; d4++)
    if (!Ie$1.call(b3, c7[d4]) || !He$1(a4[c7[d4]], b3[c7[d4]]))
      return false;
  return true;
}
function Ke$1(a4) {
  for (; a4 && a4.firstChild; )
    a4 = a4.firstChild;
  return a4;
}
function Le$1(a4, b3) {
  var c7 = Ke$1(a4);
  a4 = 0;
  for (var d4; c7; ) {
    if (3 === c7.nodeType) {
      d4 = a4 + c7.textContent.length;
      if (a4 <= b3 && d4 >= b3)
        return { node: c7, offset: b3 - a4 };
      a4 = d4;
    }
    a: {
      for (; c7; ) {
        if (c7.nextSibling) {
          c7 = c7.nextSibling;
          break a;
        }
        c7 = c7.parentNode;
      }
      c7 = void 0;
    }
    c7 = Ke$1(c7);
  }
}
function Me$1(a4, b3) {
  return a4 && b3 ? a4 === b3 ? true : a4 && 3 === a4.nodeType ? false : b3 && 3 === b3.nodeType ? Me$1(a4, b3.parentNode) : "contains" in a4 ? a4.contains(b3) : a4.compareDocumentPosition ? !!(a4.compareDocumentPosition(b3) & 16) : false : false;
}
function Ne$1() {
  for (var a4 = window, b3 = Xa(); b3 instanceof a4.HTMLIFrameElement; ) {
    try {
      var c7 = "string" === typeof b3.contentWindow.location.href;
    } catch (d4) {
      c7 = false;
    }
    if (c7)
      a4 = b3.contentWindow;
    else
      break;
    b3 = Xa(a4.document);
  }
  return b3;
}
function Oe$1(a4) {
  var b3 = a4 && a4.nodeName && a4.nodeName.toLowerCase();
  return b3 && ("input" === b3 && ("text" === a4.type || "search" === a4.type || "tel" === a4.type || "url" === a4.type || "password" === a4.type) || "textarea" === b3 || "true" === a4.contentEditable);
}
var Pe$1 = fa && "documentMode" in document && 11 >= document.documentMode, Qe$1 = null, Re$1 = null, Se$1 = null, Te$1 = false;
function Ue$1(a4, b3, c7) {
  var d4 = c7.window === c7 ? c7.document : 9 === c7.nodeType ? c7 : c7.ownerDocument;
  Te$1 || null == Qe$1 || Qe$1 !== Xa(d4) || (d4 = Qe$1, "selectionStart" in d4 && Oe$1(d4) ? d4 = { start: d4.selectionStart, end: d4.selectionEnd } : (d4 = (d4.ownerDocument && d4.ownerDocument.defaultView || window).getSelection(), d4 = { anchorNode: d4.anchorNode, anchorOffset: d4.anchorOffset, focusNode: d4.focusNode, focusOffset: d4.focusOffset }), Se$1 && Je$1(Se$1, d4) || (Se$1 = d4, d4 = oe$1(Re$1, "onSelect"), 0 < d4.length && (b3 = new td("onSelect", "select", null, b3, c7), a4.push({ event: b3, listeners: d4 }), b3.target = Qe$1)));
}
Pc(
  "cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),
  0
);
Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
Pc(Oc, 2);
for (var Ve$1 = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We$1 = 0; We$1 < Ve$1.length; We$1++)
  Nc.set(Ve$1[We$1], 0);
ea("onMouseEnter", ["mouseout", "mouseover"]);
ea("onMouseLeave", ["mouseout", "mouseover"]);
ea("onPointerEnter", ["pointerout", "pointerover"]);
ea("onPointerLeave", ["pointerout", "pointerover"]);
da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var Xe$1 = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), Ye$1 = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe$1));
function Ze$1(a4, b3, c7) {
  var d4 = a4.type || "unknown-event";
  a4.currentTarget = c7;
  Yb(d4, b3, void 0, a4);
  a4.currentTarget = null;
}
function se$1(a4, b3) {
  b3 = 0 !== (b3 & 4);
  for (var c7 = 0; c7 < a4.length; c7++) {
    var d4 = a4[c7], e3 = d4.event;
    d4 = d4.listeners;
    a: {
      var f2 = void 0;
      if (b3)
        for (var g2 = d4.length - 1; 0 <= g2; g2--) {
          var h4 = d4[g2], k3 = h4.instance, l2 = h4.currentTarget;
          h4 = h4.listener;
          if (k3 !== f2 && e3.isPropagationStopped())
            break a;
          Ze$1(e3, h4, l2);
          f2 = k3;
        }
      else
        for (g2 = 0; g2 < d4.length; g2++) {
          h4 = d4[g2];
          k3 = h4.instance;
          l2 = h4.currentTarget;
          h4 = h4.listener;
          if (k3 !== f2 && e3.isPropagationStopped())
            break a;
          Ze$1(e3, h4, l2);
          f2 = k3;
        }
    }
  }
  if (Ub)
    throw a4 = Vb, Ub = false, Vb = null, a4;
}
function G$1(a4, b3) {
  var c7 = $e$1(b3), d4 = a4 + "__bubble";
  c7.has(d4) || (af(b3, a4, 2, false), c7.add(d4));
}
var bf = "_reactListening" + Math.random().toString(36).slice(2);
function cf(a4) {
  a4[bf] || (a4[bf] = true, ba.forEach(function(b3) {
    Ye$1.has(b3) || df(b3, false, a4, null);
    df(b3, true, a4, null);
  }));
}
function df(a4, b3, c7, d4) {
  var e3 = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0, f2 = c7;
  "selectionchange" === a4 && 9 !== c7.nodeType && (f2 = c7.ownerDocument);
  if (null !== d4 && !b3 && Ye$1.has(a4)) {
    if ("scroll" !== a4)
      return;
    e3 |= 2;
    f2 = d4;
  }
  var g2 = $e$1(f2), h4 = a4 + "__" + (b3 ? "capture" : "bubble");
  g2.has(h4) || (b3 && (e3 |= 4), af(f2, a4, e3, b3), g2.add(h4));
}
function af(a4, b3, c7, d4) {
  var e3 = Nc.get(b3);
  switch (void 0 === e3 ? 2 : e3) {
    case 0:
      e3 = gd;
      break;
    case 1:
      e3 = id;
      break;
    default:
      e3 = hd;
  }
  c7 = e3.bind(null, b3, c7, a4);
  e3 = void 0;
  !Pb || "touchstart" !== b3 && "touchmove" !== b3 && "wheel" !== b3 || (e3 = true);
  d4 ? void 0 !== e3 ? a4.addEventListener(b3, c7, { capture: true, passive: e3 }) : a4.addEventListener(b3, c7, true) : void 0 !== e3 ? a4.addEventListener(b3, c7, { passive: e3 }) : a4.addEventListener(b3, c7, false);
}
function jd(a4, b3, c7, d4, e3) {
  var f2 = d4;
  if (0 === (b3 & 1) && 0 === (b3 & 2) && null !== d4)
    a:
      for (; ; ) {
        if (null === d4)
          return;
        var g2 = d4.tag;
        if (3 === g2 || 4 === g2) {
          var h4 = d4.stateNode.containerInfo;
          if (h4 === e3 || 8 === h4.nodeType && h4.parentNode === e3)
            break;
          if (4 === g2)
            for (g2 = d4.return; null !== g2; ) {
              var k3 = g2.tag;
              if (3 === k3 || 4 === k3) {
                if (k3 = g2.stateNode.containerInfo, k3 === e3 || 8 === k3.nodeType && k3.parentNode === e3)
                  return;
              }
              g2 = g2.return;
            }
          for (; null !== h4; ) {
            g2 = wc(h4);
            if (null === g2)
              return;
            k3 = g2.tag;
            if (5 === k3 || 6 === k3) {
              d4 = f2 = g2;
              continue a;
            }
            h4 = h4.parentNode;
          }
        }
        d4 = d4.return;
      }
  Nb(function() {
    var d5 = f2, e4 = xb(c7), g3 = [];
    a: {
      var h5 = Mc.get(a4);
      if (void 0 !== h5) {
        var k4 = td, x3 = a4;
        switch (a4) {
          case "keypress":
            if (0 === od(c7))
              break a;
          case "keydown":
          case "keyup":
            k4 = Rd;
            break;
          case "focusin":
            x3 = "focus";
            k4 = Fd;
            break;
          case "focusout":
            x3 = "blur";
            k4 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k4 = Fd;
            break;
          case "click":
            if (2 === c7.button)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k4 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k4 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k4 = Vd;
            break;
          case Ic:
          case Jc:
          case Kc:
            k4 = Hd;
            break;
          case Lc:
            k4 = Xd;
            break;
          case "scroll":
            k4 = vd;
            break;
          case "wheel":
            k4 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k4 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k4 = Td;
        }
        var w3 = 0 !== (b3 & 4), z3 = !w3 && "scroll" === a4, u3 = w3 ? null !== h5 ? h5 + "Capture" : null : h5;
        w3 = [];
        for (var t3 = d5, q3; null !== t3; ) {
          q3 = t3;
          var v2 = q3.stateNode;
          5 === q3.tag && null !== v2 && (q3 = v2, null !== u3 && (v2 = Ob(t3, u3), null != v2 && w3.push(ef(t3, v2, q3))));
          if (z3)
            break;
          t3 = t3.return;
        }
        0 < w3.length && (h5 = new k4(h5, x3, null, c7, e4), g3.push({ event: h5, listeners: w3 }));
      }
    }
    if (0 === (b3 & 7)) {
      a: {
        h5 = "mouseover" === a4 || "pointerover" === a4;
        k4 = "mouseout" === a4 || "pointerout" === a4;
        if (h5 && 0 === (b3 & 16) && (x3 = c7.relatedTarget || c7.fromElement) && (wc(x3) || x3[ff]))
          break a;
        if (k4 || h5) {
          h5 = e4.window === e4 ? e4 : (h5 = e4.ownerDocument) ? h5.defaultView || h5.parentWindow : window;
          if (k4) {
            if (x3 = c7.relatedTarget || c7.toElement, k4 = d5, x3 = x3 ? wc(x3) : null, null !== x3 && (z3 = Zb(x3), x3 !== z3 || 5 !== x3.tag && 6 !== x3.tag))
              x3 = null;
          } else
            k4 = null, x3 = d5;
          if (k4 !== x3) {
            w3 = Bd;
            v2 = "onMouseLeave";
            u3 = "onMouseEnter";
            t3 = "mouse";
            if ("pointerout" === a4 || "pointerover" === a4)
              w3 = Td, v2 = "onPointerLeave", u3 = "onPointerEnter", t3 = "pointer";
            z3 = null == k4 ? h5 : ue$1(k4);
            q3 = null == x3 ? h5 : ue$1(x3);
            h5 = new w3(v2, t3 + "leave", k4, c7, e4);
            h5.target = z3;
            h5.relatedTarget = q3;
            v2 = null;
            wc(e4) === d5 && (w3 = new w3(u3, t3 + "enter", x3, c7, e4), w3.target = q3, w3.relatedTarget = z3, v2 = w3);
            z3 = v2;
            if (k4 && x3)
              b: {
                w3 = k4;
                u3 = x3;
                t3 = 0;
                for (q3 = w3; q3; q3 = gf(q3))
                  t3++;
                q3 = 0;
                for (v2 = u3; v2; v2 = gf(v2))
                  q3++;
                for (; 0 < t3 - q3; )
                  w3 = gf(w3), t3--;
                for (; 0 < q3 - t3; )
                  u3 = gf(u3), q3--;
                for (; t3--; ) {
                  if (w3 === u3 || null !== u3 && w3 === u3.alternate)
                    break b;
                  w3 = gf(w3);
                  u3 = gf(u3);
                }
                w3 = null;
              }
            else
              w3 = null;
            null !== k4 && hf(g3, h5, k4, w3, false);
            null !== x3 && null !== z3 && hf(g3, z3, x3, w3, true);
          }
        }
      }
      a: {
        h5 = d5 ? ue$1(d5) : window;
        k4 = h5.nodeName && h5.nodeName.toLowerCase();
        if ("select" === k4 || "input" === k4 && "file" === h5.type)
          var J2 = ve$1;
        else if (me$1(h5))
          if (we$1)
            J2 = Fe$1;
          else {
            J2 = De$1;
            var K3 = Ce$1;
          }
        else
          (k4 = h5.nodeName) && "input" === k4.toLowerCase() && ("checkbox" === h5.type || "radio" === h5.type) && (J2 = Ee$1);
        if (J2 && (J2 = J2(a4, d5))) {
          ne$1(g3, J2, c7, e4);
          break a;
        }
        K3 && K3(a4, h5, d5);
        "focusout" === a4 && (K3 = h5._wrapperState) && K3.controlled && "number" === h5.type && bb(h5, "number", h5.value);
      }
      K3 = d5 ? ue$1(d5) : window;
      switch (a4) {
        case "focusin":
          if (me$1(K3) || "true" === K3.contentEditable)
            Qe$1 = K3, Re$1 = d5, Se$1 = null;
          break;
        case "focusout":
          Se$1 = Re$1 = Qe$1 = null;
          break;
        case "mousedown":
          Te$1 = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te$1 = false;
          Ue$1(g3, c7, e4);
          break;
        case "selectionchange":
          if (Pe$1)
            break;
        case "keydown":
        case "keyup":
          Ue$1(g3, c7, e4);
      }
      var Q3;
      if (ae$1)
        b: {
          switch (a4) {
            case "compositionstart":
              var L3 = "onCompositionStart";
              break b;
            case "compositionend":
              L3 = "onCompositionEnd";
              break b;
            case "compositionupdate":
              L3 = "onCompositionUpdate";
              break b;
          }
          L3 = void 0;
        }
      else
        ie$1 ? ge$1(a4, c7) && (L3 = "onCompositionEnd") : "keydown" === a4 && 229 === c7.keyCode && (L3 = "onCompositionStart");
      L3 && (de$1 && "ko" !== c7.locale && (ie$1 || "onCompositionStart" !== L3 ? "onCompositionEnd" === L3 && ie$1 && (Q3 = nd()) : (kd = e4, ld = "value" in kd ? kd.value : kd.textContent, ie$1 = true)), K3 = oe$1(d5, L3), 0 < K3.length && (L3 = new Ld(L3, a4, null, c7, e4), g3.push({ event: L3, listeners: K3 }), Q3 ? L3.data = Q3 : (Q3 = he$1(c7), null !== Q3 && (L3.data = Q3))));
      if (Q3 = ce$1 ? je$1(a4, c7) : ke$1(a4, c7))
        d5 = oe$1(d5, "onBeforeInput"), 0 < d5.length && (e4 = new Ld(
          "onBeforeInput",
          "beforeinput",
          null,
          c7,
          e4
        ), g3.push({ event: e4, listeners: d5 }), e4.data = Q3);
    }
    se$1(g3, b3);
  });
}
function ef(a4, b3, c7) {
  return { instance: a4, listener: b3, currentTarget: c7 };
}
function oe$1(a4, b3) {
  for (var c7 = b3 + "Capture", d4 = []; null !== a4; ) {
    var e3 = a4, f2 = e3.stateNode;
    5 === e3.tag && null !== f2 && (e3 = f2, f2 = Ob(a4, c7), null != f2 && d4.unshift(ef(a4, f2, e3)), f2 = Ob(a4, b3), null != f2 && d4.push(ef(a4, f2, e3)));
    a4 = a4.return;
  }
  return d4;
}
function gf(a4) {
  if (null === a4)
    return null;
  do
    a4 = a4.return;
  while (a4 && 5 !== a4.tag);
  return a4 ? a4 : null;
}
function hf(a4, b3, c7, d4, e3) {
  for (var f2 = b3._reactName, g2 = []; null !== c7 && c7 !== d4; ) {
    var h4 = c7, k3 = h4.alternate, l2 = h4.stateNode;
    if (null !== k3 && k3 === d4)
      break;
    5 === h4.tag && null !== l2 && (h4 = l2, e3 ? (k3 = Ob(c7, f2), null != k3 && g2.unshift(ef(c7, k3, h4))) : e3 || (k3 = Ob(c7, f2), null != k3 && g2.push(ef(c7, k3, h4))));
    c7 = c7.return;
  }
  0 !== g2.length && a4.push({ event: b3, listeners: g2 });
}
function jf() {
}
var kf = null, lf = null;
function mf(a4, b3) {
  switch (a4) {
    case "button":
    case "input":
    case "select":
    case "textarea":
      return !!b3.autoFocus;
  }
  return false;
}
function nf(a4, b3) {
  return "textarea" === a4 || "option" === a4 || "noscript" === a4 || "string" === typeof b3.children || "number" === typeof b3.children || "object" === typeof b3.dangerouslySetInnerHTML && null !== b3.dangerouslySetInnerHTML && null != b3.dangerouslySetInnerHTML.__html;
}
var of = "function" === typeof setTimeout ? setTimeout : void 0, pf = "function" === typeof clearTimeout ? clearTimeout : void 0;
function qf(a4) {
  1 === a4.nodeType ? a4.textContent = "" : 9 === a4.nodeType && (a4 = a4.body, null != a4 && (a4.textContent = ""));
}
function rf(a4) {
  for (; null != a4; a4 = a4.nextSibling) {
    var b3 = a4.nodeType;
    if (1 === b3 || 3 === b3)
      break;
  }
  return a4;
}
function sf(a4) {
  a4 = a4.previousSibling;
  for (var b3 = 0; a4; ) {
    if (8 === a4.nodeType) {
      var c7 = a4.data;
      if ("$" === c7 || "$!" === c7 || "$?" === c7) {
        if (0 === b3)
          return a4;
        b3--;
      } else
        "/$" === c7 && b3++;
    }
    a4 = a4.previousSibling;
  }
  return null;
}
var tf = 0;
function uf(a4) {
  return { $$typeof: Ga, toString: a4, valueOf: a4 };
}
var vf = Math.random().toString(36).slice(2), wf = "__reactFiber$" + vf, xf = "__reactProps$" + vf, ff = "__reactContainer$" + vf, yf = "__reactEvents$" + vf;
function wc(a4) {
  var b3 = a4[wf];
  if (b3)
    return b3;
  for (var c7 = a4.parentNode; c7; ) {
    if (b3 = c7[ff] || c7[wf]) {
      c7 = b3.alternate;
      if (null !== b3.child || null !== c7 && null !== c7.child)
        for (a4 = sf(a4); null !== a4; ) {
          if (c7 = a4[wf])
            return c7;
          a4 = sf(a4);
        }
      return b3;
    }
    a4 = c7;
    c7 = a4.parentNode;
  }
  return null;
}
function Cb(a4) {
  a4 = a4[wf] || a4[ff];
  return !a4 || 5 !== a4.tag && 6 !== a4.tag && 13 !== a4.tag && 3 !== a4.tag ? null : a4;
}
function ue$1(a4) {
  if (5 === a4.tag || 6 === a4.tag)
    return a4.stateNode;
  throw Error(y$2(33));
}
function Db(a4) {
  return a4[xf] || null;
}
function $e$1(a4) {
  var b3 = a4[yf];
  void 0 === b3 && (b3 = a4[yf] = /* @__PURE__ */ new Set());
  return b3;
}
var zf = [], Af = -1;
function Bf(a4) {
  return { current: a4 };
}
function H$1(a4) {
  0 > Af || (a4.current = zf[Af], zf[Af] = null, Af--);
}
function I$1(a4, b3) {
  Af++;
  zf[Af] = a4.current;
  a4.current = b3;
}
var Cf = {}, M$1 = Bf(Cf), N$1 = Bf(false), Df = Cf;
function Ef(a4, b3) {
  var c7 = a4.type.contextTypes;
  if (!c7)
    return Cf;
  var d4 = a4.stateNode;
  if (d4 && d4.__reactInternalMemoizedUnmaskedChildContext === b3)
    return d4.__reactInternalMemoizedMaskedChildContext;
  var e3 = {}, f2;
  for (f2 in c7)
    e3[f2] = b3[f2];
  d4 && (a4 = a4.stateNode, a4.__reactInternalMemoizedUnmaskedChildContext = b3, a4.__reactInternalMemoizedMaskedChildContext = e3);
  return e3;
}
function Ff(a4) {
  a4 = a4.childContextTypes;
  return null !== a4 && void 0 !== a4;
}
function Gf() {
  H$1(N$1);
  H$1(M$1);
}
function Hf(a4, b3, c7) {
  if (M$1.current !== Cf)
    throw Error(y$2(168));
  I$1(M$1, b3);
  I$1(N$1, c7);
}
function If(a4, b3, c7) {
  var d4 = a4.stateNode;
  a4 = b3.childContextTypes;
  if ("function" !== typeof d4.getChildContext)
    return c7;
  d4 = d4.getChildContext();
  for (var e3 in d4)
    if (!(e3 in a4))
      throw Error(y$2(108, Ra(b3) || "Unknown", e3));
  return m$2({}, c7, d4);
}
function Jf(a4) {
  a4 = (a4 = a4.stateNode) && a4.__reactInternalMemoizedMergedChildContext || Cf;
  Df = M$1.current;
  I$1(M$1, a4);
  I$1(N$1, N$1.current);
  return true;
}
function Kf(a4, b3, c7) {
  var d4 = a4.stateNode;
  if (!d4)
    throw Error(y$2(169));
  c7 ? (a4 = If(a4, b3, Df), d4.__reactInternalMemoizedMergedChildContext = a4, H$1(N$1), H$1(M$1), I$1(M$1, a4)) : H$1(N$1);
  I$1(N$1, c7);
}
var Lf = null, Mf = null, Nf = r$2.unstable_runWithPriority, Of = r$2.unstable_scheduleCallback, Pf = r$2.unstable_cancelCallback, Qf = r$2.unstable_shouldYield, Rf = r$2.unstable_requestPaint, Sf = r$2.unstable_now, Tf = r$2.unstable_getCurrentPriorityLevel, Uf = r$2.unstable_ImmediatePriority, Vf = r$2.unstable_UserBlockingPriority, Wf = r$2.unstable_NormalPriority, Xf = r$2.unstable_LowPriority, Yf = r$2.unstable_IdlePriority, Zf = {}, $f = void 0 !== Rf ? Rf : function() {
}, ag = null, bg = null, cg = false, dg = Sf(), O$1 = 1e4 > dg ? Sf : function() {
  return Sf() - dg;
};
function eg() {
  switch (Tf()) {
    case Uf:
      return 99;
    case Vf:
      return 98;
    case Wf:
      return 97;
    case Xf:
      return 96;
    case Yf:
      return 95;
    default:
      throw Error(y$2(332));
  }
}
function fg(a4) {
  switch (a4) {
    case 99:
      return Uf;
    case 98:
      return Vf;
    case 97:
      return Wf;
    case 96:
      return Xf;
    case 95:
      return Yf;
    default:
      throw Error(y$2(332));
  }
}
function gg(a4, b3) {
  a4 = fg(a4);
  return Nf(a4, b3);
}
function hg(a4, b3, c7) {
  a4 = fg(a4);
  return Of(a4, b3, c7);
}
function ig() {
  if (null !== bg) {
    var a4 = bg;
    bg = null;
    Pf(a4);
  }
  jg();
}
function jg() {
  if (!cg && null !== ag) {
    cg = true;
    var a4 = 0;
    try {
      var b3 = ag;
      gg(99, function() {
        for (; a4 < b3.length; a4++) {
          var c7 = b3[a4];
          do
            c7 = c7(true);
          while (null !== c7);
        }
      });
      ag = null;
    } catch (c7) {
      throw null !== ag && (ag = ag.slice(a4 + 1)), Of(Uf, ig), c7;
    } finally {
      cg = false;
    }
  }
}
var kg = ra.ReactCurrentBatchConfig;
function lg(a4, b3) {
  if (a4 && a4.defaultProps) {
    b3 = m$2({}, b3);
    a4 = a4.defaultProps;
    for (var c7 in a4)
      void 0 === b3[c7] && (b3[c7] = a4[c7]);
    return b3;
  }
  return b3;
}
var mg = Bf(null), ng = null, og = null, pg = null;
function qg() {
  pg = og = ng = null;
}
function rg(a4) {
  var b3 = mg.current;
  H$1(mg);
  a4.type._context._currentValue = b3;
}
function sg(a4, b3) {
  for (; null !== a4; ) {
    var c7 = a4.alternate;
    if ((a4.childLanes & b3) === b3)
      if (null === c7 || (c7.childLanes & b3) === b3)
        break;
      else
        c7.childLanes |= b3;
    else
      a4.childLanes |= b3, null !== c7 && (c7.childLanes |= b3);
    a4 = a4.return;
  }
}
function tg(a4, b3) {
  ng = a4;
  pg = og = null;
  a4 = a4.dependencies;
  null !== a4 && null !== a4.firstContext && (0 !== (a4.lanes & b3) && (ug = true), a4.firstContext = null);
}
function vg(a4, b3) {
  if (pg !== a4 && false !== b3 && 0 !== b3) {
    if ("number" !== typeof b3 || 1073741823 === b3)
      pg = a4, b3 = 1073741823;
    b3 = { context: a4, observedBits: b3, next: null };
    if (null === og) {
      if (null === ng)
        throw Error(y$2(308));
      og = b3;
      ng.dependencies = { lanes: 0, firstContext: b3, responders: null };
    } else
      og = og.next = b3;
  }
  return a4._currentValue;
}
var wg = false;
function xg(a4) {
  a4.updateQueue = { baseState: a4.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null }, effects: null };
}
function yg(a4, b3) {
  a4 = a4.updateQueue;
  b3.updateQueue === a4 && (b3.updateQueue = { baseState: a4.baseState, firstBaseUpdate: a4.firstBaseUpdate, lastBaseUpdate: a4.lastBaseUpdate, shared: a4.shared, effects: a4.effects });
}
function zg(a4, b3) {
  return { eventTime: a4, lane: b3, tag: 0, payload: null, callback: null, next: null };
}
function Ag(a4, b3) {
  a4 = a4.updateQueue;
  if (null !== a4) {
    a4 = a4.shared;
    var c7 = a4.pending;
    null === c7 ? b3.next = b3 : (b3.next = c7.next, c7.next = b3);
    a4.pending = b3;
  }
}
function Bg(a4, b3) {
  var c7 = a4.updateQueue, d4 = a4.alternate;
  if (null !== d4 && (d4 = d4.updateQueue, c7 === d4)) {
    var e3 = null, f2 = null;
    c7 = c7.firstBaseUpdate;
    if (null !== c7) {
      do {
        var g2 = { eventTime: c7.eventTime, lane: c7.lane, tag: c7.tag, payload: c7.payload, callback: c7.callback, next: null };
        null === f2 ? e3 = f2 = g2 : f2 = f2.next = g2;
        c7 = c7.next;
      } while (null !== c7);
      null === f2 ? e3 = f2 = b3 : f2 = f2.next = b3;
    } else
      e3 = f2 = b3;
    c7 = { baseState: d4.baseState, firstBaseUpdate: e3, lastBaseUpdate: f2, shared: d4.shared, effects: d4.effects };
    a4.updateQueue = c7;
    return;
  }
  a4 = c7.lastBaseUpdate;
  null === a4 ? c7.firstBaseUpdate = b3 : a4.next = b3;
  c7.lastBaseUpdate = b3;
}
function Cg(a4, b3, c7, d4) {
  var e3 = a4.updateQueue;
  wg = false;
  var f2 = e3.firstBaseUpdate, g2 = e3.lastBaseUpdate, h4 = e3.shared.pending;
  if (null !== h4) {
    e3.shared.pending = null;
    var k3 = h4, l2 = k3.next;
    k3.next = null;
    null === g2 ? f2 = l2 : g2.next = l2;
    g2 = k3;
    var n2 = a4.alternate;
    if (null !== n2) {
      n2 = n2.updateQueue;
      var A2 = n2.lastBaseUpdate;
      A2 !== g2 && (null === A2 ? n2.firstBaseUpdate = l2 : A2.next = l2, n2.lastBaseUpdate = k3);
    }
  }
  if (null !== f2) {
    A2 = e3.baseState;
    g2 = 0;
    n2 = l2 = k3 = null;
    do {
      h4 = f2.lane;
      var p2 = f2.eventTime;
      if ((d4 & h4) === h4) {
        null !== n2 && (n2 = n2.next = {
          eventTime: p2,
          lane: 0,
          tag: f2.tag,
          payload: f2.payload,
          callback: f2.callback,
          next: null
        });
        a: {
          var C2 = a4, x3 = f2;
          h4 = b3;
          p2 = c7;
          switch (x3.tag) {
            case 1:
              C2 = x3.payload;
              if ("function" === typeof C2) {
                A2 = C2.call(p2, A2, h4);
                break a;
              }
              A2 = C2;
              break a;
            case 3:
              C2.flags = C2.flags & -4097 | 64;
            case 0:
              C2 = x3.payload;
              h4 = "function" === typeof C2 ? C2.call(p2, A2, h4) : C2;
              if (null === h4 || void 0 === h4)
                break a;
              A2 = m$2({}, A2, h4);
              break a;
            case 2:
              wg = true;
          }
        }
        null !== f2.callback && (a4.flags |= 32, h4 = e3.effects, null === h4 ? e3.effects = [f2] : h4.push(f2));
      } else
        p2 = { eventTime: p2, lane: h4, tag: f2.tag, payload: f2.payload, callback: f2.callback, next: null }, null === n2 ? (l2 = n2 = p2, k3 = A2) : n2 = n2.next = p2, g2 |= h4;
      f2 = f2.next;
      if (null === f2)
        if (h4 = e3.shared.pending, null === h4)
          break;
        else
          f2 = h4.next, h4.next = null, e3.lastBaseUpdate = h4, e3.shared.pending = null;
    } while (1);
    null === n2 && (k3 = A2);
    e3.baseState = k3;
    e3.firstBaseUpdate = l2;
    e3.lastBaseUpdate = n2;
    Dg |= g2;
    a4.lanes = g2;
    a4.memoizedState = A2;
  }
}
function Eg(a4, b3, c7) {
  a4 = b3.effects;
  b3.effects = null;
  if (null !== a4)
    for (b3 = 0; b3 < a4.length; b3++) {
      var d4 = a4[b3], e3 = d4.callback;
      if (null !== e3) {
        d4.callback = null;
        d4 = c7;
        if ("function" !== typeof e3)
          throw Error(y$2(191, e3));
        e3.call(d4);
      }
    }
}
var Fg = new aa.Component().refs;
function Gg(a4, b3, c7, d4) {
  b3 = a4.memoizedState;
  c7 = c7(d4, b3);
  c7 = null === c7 || void 0 === c7 ? b3 : m$2({}, b3, c7);
  a4.memoizedState = c7;
  0 === a4.lanes && (a4.updateQueue.baseState = c7);
}
var Kg = { isMounted: function(a4) {
  return (a4 = a4._reactInternals) ? Zb(a4) === a4 : false;
}, enqueueSetState: function(a4, b3, c7) {
  a4 = a4._reactInternals;
  var d4 = Hg(), e3 = Ig(a4), f2 = zg(d4, e3);
  f2.payload = b3;
  void 0 !== c7 && null !== c7 && (f2.callback = c7);
  Ag(a4, f2);
  Jg(a4, e3, d4);
}, enqueueReplaceState: function(a4, b3, c7) {
  a4 = a4._reactInternals;
  var d4 = Hg(), e3 = Ig(a4), f2 = zg(d4, e3);
  f2.tag = 1;
  f2.payload = b3;
  void 0 !== c7 && null !== c7 && (f2.callback = c7);
  Ag(a4, f2);
  Jg(a4, e3, d4);
}, enqueueForceUpdate: function(a4, b3) {
  a4 = a4._reactInternals;
  var c7 = Hg(), d4 = Ig(a4), e3 = zg(c7, d4);
  e3.tag = 2;
  void 0 !== b3 && null !== b3 && (e3.callback = b3);
  Ag(a4, e3);
  Jg(a4, d4, c7);
} };
function Lg(a4, b3, c7, d4, e3, f2, g2) {
  a4 = a4.stateNode;
  return "function" === typeof a4.shouldComponentUpdate ? a4.shouldComponentUpdate(d4, f2, g2) : b3.prototype && b3.prototype.isPureReactComponent ? !Je$1(c7, d4) || !Je$1(e3, f2) : true;
}
function Mg(a4, b3, c7) {
  var d4 = false, e3 = Cf;
  var f2 = b3.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = vg(f2) : (e3 = Ff(b3) ? Df : M$1.current, d4 = b3.contextTypes, f2 = (d4 = null !== d4 && void 0 !== d4) ? Ef(a4, e3) : Cf);
  b3 = new b3(c7, f2);
  a4.memoizedState = null !== b3.state && void 0 !== b3.state ? b3.state : null;
  b3.updater = Kg;
  a4.stateNode = b3;
  b3._reactInternals = a4;
  d4 && (a4 = a4.stateNode, a4.__reactInternalMemoizedUnmaskedChildContext = e3, a4.__reactInternalMemoizedMaskedChildContext = f2);
  return b3;
}
function Ng(a4, b3, c7, d4) {
  a4 = b3.state;
  "function" === typeof b3.componentWillReceiveProps && b3.componentWillReceiveProps(c7, d4);
  "function" === typeof b3.UNSAFE_componentWillReceiveProps && b3.UNSAFE_componentWillReceiveProps(c7, d4);
  b3.state !== a4 && Kg.enqueueReplaceState(b3, b3.state, null);
}
function Og(a4, b3, c7, d4) {
  var e3 = a4.stateNode;
  e3.props = c7;
  e3.state = a4.memoizedState;
  e3.refs = Fg;
  xg(a4);
  var f2 = b3.contextType;
  "object" === typeof f2 && null !== f2 ? e3.context = vg(f2) : (f2 = Ff(b3) ? Df : M$1.current, e3.context = Ef(a4, f2));
  Cg(a4, c7, e3, d4);
  e3.state = a4.memoizedState;
  f2 = b3.getDerivedStateFromProps;
  "function" === typeof f2 && (Gg(a4, b3, f2, c7), e3.state = a4.memoizedState);
  "function" === typeof b3.getDerivedStateFromProps || "function" === typeof e3.getSnapshotBeforeUpdate || "function" !== typeof e3.UNSAFE_componentWillMount && "function" !== typeof e3.componentWillMount || (b3 = e3.state, "function" === typeof e3.componentWillMount && e3.componentWillMount(), "function" === typeof e3.UNSAFE_componentWillMount && e3.UNSAFE_componentWillMount(), b3 !== e3.state && Kg.enqueueReplaceState(e3, e3.state, null), Cg(a4, c7, e3, d4), e3.state = a4.memoizedState);
  "function" === typeof e3.componentDidMount && (a4.flags |= 4);
}
var Pg = Array.isArray;
function Qg(a4, b3, c7) {
  a4 = c7.ref;
  if (null !== a4 && "function" !== typeof a4 && "object" !== typeof a4) {
    if (c7._owner) {
      c7 = c7._owner;
      if (c7) {
        if (1 !== c7.tag)
          throw Error(y$2(309));
        var d4 = c7.stateNode;
      }
      if (!d4)
        throw Error(y$2(147, a4));
      var e3 = "" + a4;
      if (null !== b3 && null !== b3.ref && "function" === typeof b3.ref && b3.ref._stringRef === e3)
        return b3.ref;
      b3 = function(a5) {
        var b4 = d4.refs;
        b4 === Fg && (b4 = d4.refs = {});
        null === a5 ? delete b4[e3] : b4[e3] = a5;
      };
      b3._stringRef = e3;
      return b3;
    }
    if ("string" !== typeof a4)
      throw Error(y$2(284));
    if (!c7._owner)
      throw Error(y$2(290, a4));
  }
  return a4;
}
function Rg(a4, b3) {
  if ("textarea" !== a4.type)
    throw Error(y$2(31, "[object Object]" === Object.prototype.toString.call(b3) ? "object with keys {" + Object.keys(b3).join(", ") + "}" : b3));
}
function Sg(a4) {
  function b3(b4, c8) {
    if (a4) {
      var d5 = b4.lastEffect;
      null !== d5 ? (d5.nextEffect = c8, b4.lastEffect = c8) : b4.firstEffect = b4.lastEffect = c8;
      c8.nextEffect = null;
      c8.flags = 8;
    }
  }
  function c7(c8, d5) {
    if (!a4)
      return null;
    for (; null !== d5; )
      b3(c8, d5), d5 = d5.sibling;
    return null;
  }
  function d4(a5, b4) {
    for (a5 = /* @__PURE__ */ new Map(); null !== b4; )
      null !== b4.key ? a5.set(b4.key, b4) : a5.set(b4.index, b4), b4 = b4.sibling;
    return a5;
  }
  function e3(a5, b4) {
    a5 = Tg(a5, b4);
    a5.index = 0;
    a5.sibling = null;
    return a5;
  }
  function f2(b4, c8, d5) {
    b4.index = d5;
    if (!a4)
      return c8;
    d5 = b4.alternate;
    if (null !== d5)
      return d5 = d5.index, d5 < c8 ? (b4.flags = 2, c8) : d5;
    b4.flags = 2;
    return c8;
  }
  function g2(b4) {
    a4 && null === b4.alternate && (b4.flags = 2);
    return b4;
  }
  function h4(a5, b4, c8, d5) {
    if (null === b4 || 6 !== b4.tag)
      return b4 = Ug(c8, a5.mode, d5), b4.return = a5, b4;
    b4 = e3(b4, c8);
    b4.return = a5;
    return b4;
  }
  function k3(a5, b4, c8, d5) {
    if (null !== b4 && b4.elementType === c8.type)
      return d5 = e3(b4, c8.props), d5.ref = Qg(a5, b4, c8), d5.return = a5, d5;
    d5 = Vg(c8.type, c8.key, c8.props, null, a5.mode, d5);
    d5.ref = Qg(a5, b4, c8);
    d5.return = a5;
    return d5;
  }
  function l2(a5, b4, c8, d5) {
    if (null === b4 || 4 !== b4.tag || b4.stateNode.containerInfo !== c8.containerInfo || b4.stateNode.implementation !== c8.implementation)
      return b4 = Wg(c8, a5.mode, d5), b4.return = a5, b4;
    b4 = e3(b4, c8.children || []);
    b4.return = a5;
    return b4;
  }
  function n2(a5, b4, c8, d5, f3) {
    if (null === b4 || 7 !== b4.tag)
      return b4 = Xg(c8, a5.mode, d5, f3), b4.return = a5, b4;
    b4 = e3(b4, c8);
    b4.return = a5;
    return b4;
  }
  function A2(a5, b4, c8) {
    if ("string" === typeof b4 || "number" === typeof b4)
      return b4 = Ug("" + b4, a5.mode, c8), b4.return = a5, b4;
    if ("object" === typeof b4 && null !== b4) {
      switch (b4.$$typeof) {
        case sa:
          return c8 = Vg(b4.type, b4.key, b4.props, null, a5.mode, c8), c8.ref = Qg(a5, null, b4), c8.return = a5, c8;
        case ta:
          return b4 = Wg(b4, a5.mode, c8), b4.return = a5, b4;
      }
      if (Pg(b4) || La(b4))
        return b4 = Xg(
          b4,
          a5.mode,
          c8,
          null
        ), b4.return = a5, b4;
      Rg(a5, b4);
    }
    return null;
  }
  function p2(a5, b4, c8, d5) {
    var e4 = null !== b4 ? b4.key : null;
    if ("string" === typeof c8 || "number" === typeof c8)
      return null !== e4 ? null : h4(a5, b4, "" + c8, d5);
    if ("object" === typeof c8 && null !== c8) {
      switch (c8.$$typeof) {
        case sa:
          return c8.key === e4 ? c8.type === ua ? n2(a5, b4, c8.props.children, d5, e4) : k3(a5, b4, c8, d5) : null;
        case ta:
          return c8.key === e4 ? l2(a5, b4, c8, d5) : null;
      }
      if (Pg(c8) || La(c8))
        return null !== e4 ? null : n2(a5, b4, c8, d5, null);
      Rg(a5, c8);
    }
    return null;
  }
  function C2(a5, b4, c8, d5, e4) {
    if ("string" === typeof d5 || "number" === typeof d5)
      return a5 = a5.get(c8) || null, h4(b4, a5, "" + d5, e4);
    if ("object" === typeof d5 && null !== d5) {
      switch (d5.$$typeof) {
        case sa:
          return a5 = a5.get(null === d5.key ? c8 : d5.key) || null, d5.type === ua ? n2(b4, a5, d5.props.children, e4, d5.key) : k3(b4, a5, d5, e4);
        case ta:
          return a5 = a5.get(null === d5.key ? c8 : d5.key) || null, l2(b4, a5, d5, e4);
      }
      if (Pg(d5) || La(d5))
        return a5 = a5.get(c8) || null, n2(b4, a5, d5, e4, null);
      Rg(b4, d5);
    }
    return null;
  }
  function x3(e4, g3, h5, k4) {
    for (var l3 = null, t3 = null, u3 = g3, z3 = g3 = 0, q3 = null; null !== u3 && z3 < h5.length; z3++) {
      u3.index > z3 ? (q3 = u3, u3 = null) : q3 = u3.sibling;
      var n3 = p2(e4, u3, h5[z3], k4);
      if (null === n3) {
        null === u3 && (u3 = q3);
        break;
      }
      a4 && u3 && null === n3.alternate && b3(e4, u3);
      g3 = f2(n3, g3, z3);
      null === t3 ? l3 = n3 : t3.sibling = n3;
      t3 = n3;
      u3 = q3;
    }
    if (z3 === h5.length)
      return c7(e4, u3), l3;
    if (null === u3) {
      for (; z3 < h5.length; z3++)
        u3 = A2(e4, h5[z3], k4), null !== u3 && (g3 = f2(u3, g3, z3), null === t3 ? l3 = u3 : t3.sibling = u3, t3 = u3);
      return l3;
    }
    for (u3 = d4(e4, u3); z3 < h5.length; z3++)
      q3 = C2(u3, e4, z3, h5[z3], k4), null !== q3 && (a4 && null !== q3.alternate && u3.delete(null === q3.key ? z3 : q3.key), g3 = f2(q3, g3, z3), null === t3 ? l3 = q3 : t3.sibling = q3, t3 = q3);
    a4 && u3.forEach(function(a5) {
      return b3(e4, a5);
    });
    return l3;
  }
  function w3(e4, g3, h5, k4) {
    var l3 = La(h5);
    if ("function" !== typeof l3)
      throw Error(y$2(150));
    h5 = l3.call(h5);
    if (null == h5)
      throw Error(y$2(151));
    for (var t3 = l3 = null, u3 = g3, z3 = g3 = 0, q3 = null, n3 = h5.next(); null !== u3 && !n3.done; z3++, n3 = h5.next()) {
      u3.index > z3 ? (q3 = u3, u3 = null) : q3 = u3.sibling;
      var w4 = p2(e4, u3, n3.value, k4);
      if (null === w4) {
        null === u3 && (u3 = q3);
        break;
      }
      a4 && u3 && null === w4.alternate && b3(e4, u3);
      g3 = f2(w4, g3, z3);
      null === t3 ? l3 = w4 : t3.sibling = w4;
      t3 = w4;
      u3 = q3;
    }
    if (n3.done)
      return c7(e4, u3), l3;
    if (null === u3) {
      for (; !n3.done; z3++, n3 = h5.next())
        n3 = A2(e4, n3.value, k4), null !== n3 && (g3 = f2(n3, g3, z3), null === t3 ? l3 = n3 : t3.sibling = n3, t3 = n3);
      return l3;
    }
    for (u3 = d4(e4, u3); !n3.done; z3++, n3 = h5.next())
      n3 = C2(u3, e4, z3, n3.value, k4), null !== n3 && (a4 && null !== n3.alternate && u3.delete(null === n3.key ? z3 : n3.key), g3 = f2(n3, g3, z3), null === t3 ? l3 = n3 : t3.sibling = n3, t3 = n3);
    a4 && u3.forEach(function(a5) {
      return b3(e4, a5);
    });
    return l3;
  }
  return function(a5, d5, f3, h5) {
    var k4 = "object" === typeof f3 && null !== f3 && f3.type === ua && null === f3.key;
    k4 && (f3 = f3.props.children);
    var l3 = "object" === typeof f3 && null !== f3;
    if (l3)
      switch (f3.$$typeof) {
        case sa:
          a: {
            l3 = f3.key;
            for (k4 = d5; null !== k4; ) {
              if (k4.key === l3) {
                switch (k4.tag) {
                  case 7:
                    if (f3.type === ua) {
                      c7(a5, k4.sibling);
                      d5 = e3(k4, f3.props.children);
                      d5.return = a5;
                      a5 = d5;
                      break a;
                    }
                    break;
                  default:
                    if (k4.elementType === f3.type) {
                      c7(a5, k4.sibling);
                      d5 = e3(k4, f3.props);
                      d5.ref = Qg(a5, k4, f3);
                      d5.return = a5;
                      a5 = d5;
                      break a;
                    }
                }
                c7(a5, k4);
                break;
              } else
                b3(a5, k4);
              k4 = k4.sibling;
            }
            f3.type === ua ? (d5 = Xg(f3.props.children, a5.mode, h5, f3.key), d5.return = a5, a5 = d5) : (h5 = Vg(f3.type, f3.key, f3.props, null, a5.mode, h5), h5.ref = Qg(a5, d5, f3), h5.return = a5, a5 = h5);
          }
          return g2(a5);
        case ta:
          a: {
            for (k4 = f3.key; null !== d5; ) {
              if (d5.key === k4)
                if (4 === d5.tag && d5.stateNode.containerInfo === f3.containerInfo && d5.stateNode.implementation === f3.implementation) {
                  c7(a5, d5.sibling);
                  d5 = e3(d5, f3.children || []);
                  d5.return = a5;
                  a5 = d5;
                  break a;
                } else {
                  c7(a5, d5);
                  break;
                }
              else
                b3(a5, d5);
              d5 = d5.sibling;
            }
            d5 = Wg(f3, a5.mode, h5);
            d5.return = a5;
            a5 = d5;
          }
          return g2(a5);
      }
    if ("string" === typeof f3 || "number" === typeof f3)
      return f3 = "" + f3, null !== d5 && 6 === d5.tag ? (c7(a5, d5.sibling), d5 = e3(d5, f3), d5.return = a5, a5 = d5) : (c7(a5, d5), d5 = Ug(f3, a5.mode, h5), d5.return = a5, a5 = d5), g2(a5);
    if (Pg(f3))
      return x3(a5, d5, f3, h5);
    if (La(f3))
      return w3(a5, d5, f3, h5);
    l3 && Rg(a5, f3);
    if ("undefined" === typeof f3 && !k4)
      switch (a5.tag) {
        case 1:
        case 22:
        case 0:
        case 11:
        case 15:
          throw Error(y$2(152, Ra(a5.type) || "Component"));
      }
    return c7(a5, d5);
  };
}
var Yg = Sg(true), Zg = Sg(false), $g = {}, ah = Bf($g), bh = Bf($g), ch = Bf($g);
function dh(a4) {
  if (a4 === $g)
    throw Error(y$2(174));
  return a4;
}
function eh(a4, b3) {
  I$1(ch, b3);
  I$1(bh, a4);
  I$1(ah, $g);
  a4 = b3.nodeType;
  switch (a4) {
    case 9:
    case 11:
      b3 = (b3 = b3.documentElement) ? b3.namespaceURI : mb(null, "");
      break;
    default:
      a4 = 8 === a4 ? b3.parentNode : b3, b3 = a4.namespaceURI || null, a4 = a4.tagName, b3 = mb(b3, a4);
  }
  H$1(ah);
  I$1(ah, b3);
}
function fh() {
  H$1(ah);
  H$1(bh);
  H$1(ch);
}
function gh(a4) {
  dh(ch.current);
  var b3 = dh(ah.current);
  var c7 = mb(b3, a4.type);
  b3 !== c7 && (I$1(bh, a4), I$1(ah, c7));
}
function hh(a4) {
  bh.current === a4 && (H$1(ah), H$1(bh));
}
var P$2 = Bf(0);
function ih(a4) {
  for (var b3 = a4; null !== b3; ) {
    if (13 === b3.tag) {
      var c7 = b3.memoizedState;
      if (null !== c7 && (c7 = c7.dehydrated, null === c7 || "$?" === c7.data || "$!" === c7.data))
        return b3;
    } else if (19 === b3.tag && void 0 !== b3.memoizedProps.revealOrder) {
      if (0 !== (b3.flags & 64))
        return b3;
    } else if (null !== b3.child) {
      b3.child.return = b3;
      b3 = b3.child;
      continue;
    }
    if (b3 === a4)
      break;
    for (; null === b3.sibling; ) {
      if (null === b3.return || b3.return === a4)
        return null;
      b3 = b3.return;
    }
    b3.sibling.return = b3.return;
    b3 = b3.sibling;
  }
  return null;
}
var jh = null, kh = null, lh = false;
function mh(a4, b3) {
  var c7 = nh(5, null, null, 0);
  c7.elementType = "DELETED";
  c7.type = "DELETED";
  c7.stateNode = b3;
  c7.return = a4;
  c7.flags = 8;
  null !== a4.lastEffect ? (a4.lastEffect.nextEffect = c7, a4.lastEffect = c7) : a4.firstEffect = a4.lastEffect = c7;
}
function oh(a4, b3) {
  switch (a4.tag) {
    case 5:
      var c7 = a4.type;
      b3 = 1 !== b3.nodeType || c7.toLowerCase() !== b3.nodeName.toLowerCase() ? null : b3;
      return null !== b3 ? (a4.stateNode = b3, true) : false;
    case 6:
      return b3 = "" === a4.pendingProps || 3 !== b3.nodeType ? null : b3, null !== b3 ? (a4.stateNode = b3, true) : false;
    case 13:
      return false;
    default:
      return false;
  }
}
function ph(a4) {
  if (lh) {
    var b3 = kh;
    if (b3) {
      var c7 = b3;
      if (!oh(a4, b3)) {
        b3 = rf(c7.nextSibling);
        if (!b3 || !oh(a4, b3)) {
          a4.flags = a4.flags & -1025 | 2;
          lh = false;
          jh = a4;
          return;
        }
        mh(jh, c7);
      }
      jh = a4;
      kh = rf(b3.firstChild);
    } else
      a4.flags = a4.flags & -1025 | 2, lh = false, jh = a4;
  }
}
function qh(a4) {
  for (a4 = a4.return; null !== a4 && 5 !== a4.tag && 3 !== a4.tag && 13 !== a4.tag; )
    a4 = a4.return;
  jh = a4;
}
function rh(a4) {
  if (a4 !== jh)
    return false;
  if (!lh)
    return qh(a4), lh = true, false;
  var b3 = a4.type;
  if (5 !== a4.tag || "head" !== b3 && "body" !== b3 && !nf(b3, a4.memoizedProps))
    for (b3 = kh; b3; )
      mh(a4, b3), b3 = rf(b3.nextSibling);
  qh(a4);
  if (13 === a4.tag) {
    a4 = a4.memoizedState;
    a4 = null !== a4 ? a4.dehydrated : null;
    if (!a4)
      throw Error(y$2(317));
    a: {
      a4 = a4.nextSibling;
      for (b3 = 0; a4; ) {
        if (8 === a4.nodeType) {
          var c7 = a4.data;
          if ("/$" === c7) {
            if (0 === b3) {
              kh = rf(a4.nextSibling);
              break a;
            }
            b3--;
          } else
            "$" !== c7 && "$!" !== c7 && "$?" !== c7 || b3++;
        }
        a4 = a4.nextSibling;
      }
      kh = null;
    }
  } else
    kh = jh ? rf(a4.stateNode.nextSibling) : null;
  return true;
}
function sh() {
  kh = jh = null;
  lh = false;
}
var th = [];
function uh() {
  for (var a4 = 0; a4 < th.length; a4++)
    th[a4]._workInProgressVersionPrimary = null;
  th.length = 0;
}
var vh = ra.ReactCurrentDispatcher, wh = ra.ReactCurrentBatchConfig, xh = 0, R$1 = null, S$1 = null, T$1 = null, yh = false, zh = false;
function Ah() {
  throw Error(y$2(321));
}
function Bh(a4, b3) {
  if (null === b3)
    return false;
  for (var c7 = 0; c7 < b3.length && c7 < a4.length; c7++)
    if (!He$1(a4[c7], b3[c7]))
      return false;
  return true;
}
function Ch(a4, b3, c7, d4, e3, f2) {
  xh = f2;
  R$1 = b3;
  b3.memoizedState = null;
  b3.updateQueue = null;
  b3.lanes = 0;
  vh.current = null === a4 || null === a4.memoizedState ? Dh : Eh;
  a4 = c7(d4, e3);
  if (zh) {
    f2 = 0;
    do {
      zh = false;
      if (!(25 > f2))
        throw Error(y$2(301));
      f2 += 1;
      T$1 = S$1 = null;
      b3.updateQueue = null;
      vh.current = Fh;
      a4 = c7(d4, e3);
    } while (zh);
  }
  vh.current = Gh;
  b3 = null !== S$1 && null !== S$1.next;
  xh = 0;
  T$1 = S$1 = R$1 = null;
  yh = false;
  if (b3)
    throw Error(y$2(300));
  return a4;
}
function Hh() {
  var a4 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === T$1 ? R$1.memoizedState = T$1 = a4 : T$1 = T$1.next = a4;
  return T$1;
}
function Ih() {
  if (null === S$1) {
    var a4 = R$1.alternate;
    a4 = null !== a4 ? a4.memoizedState : null;
  } else
    a4 = S$1.next;
  var b3 = null === T$1 ? R$1.memoizedState : T$1.next;
  if (null !== b3)
    T$1 = b3, S$1 = a4;
  else {
    if (null === a4)
      throw Error(y$2(310));
    S$1 = a4;
    a4 = { memoizedState: S$1.memoizedState, baseState: S$1.baseState, baseQueue: S$1.baseQueue, queue: S$1.queue, next: null };
    null === T$1 ? R$1.memoizedState = T$1 = a4 : T$1 = T$1.next = a4;
  }
  return T$1;
}
function Jh(a4, b3) {
  return "function" === typeof b3 ? b3(a4) : b3;
}
function Kh(a4) {
  var b3 = Ih(), c7 = b3.queue;
  if (null === c7)
    throw Error(y$2(311));
  c7.lastRenderedReducer = a4;
  var d4 = S$1, e3 = d4.baseQueue, f2 = c7.pending;
  if (null !== f2) {
    if (null !== e3) {
      var g2 = e3.next;
      e3.next = f2.next;
      f2.next = g2;
    }
    d4.baseQueue = e3 = f2;
    c7.pending = null;
  }
  if (null !== e3) {
    e3 = e3.next;
    d4 = d4.baseState;
    var h4 = g2 = f2 = null, k3 = e3;
    do {
      var l2 = k3.lane;
      if ((xh & l2) === l2)
        null !== h4 && (h4 = h4.next = { lane: 0, action: k3.action, eagerReducer: k3.eagerReducer, eagerState: k3.eagerState, next: null }), d4 = k3.eagerReducer === a4 ? k3.eagerState : a4(d4, k3.action);
      else {
        var n2 = {
          lane: l2,
          action: k3.action,
          eagerReducer: k3.eagerReducer,
          eagerState: k3.eagerState,
          next: null
        };
        null === h4 ? (g2 = h4 = n2, f2 = d4) : h4 = h4.next = n2;
        R$1.lanes |= l2;
        Dg |= l2;
      }
      k3 = k3.next;
    } while (null !== k3 && k3 !== e3);
    null === h4 ? f2 = d4 : h4.next = g2;
    He$1(d4, b3.memoizedState) || (ug = true);
    b3.memoizedState = d4;
    b3.baseState = f2;
    b3.baseQueue = h4;
    c7.lastRenderedState = d4;
  }
  return [b3.memoizedState, c7.dispatch];
}
function Lh(a4) {
  var b3 = Ih(), c7 = b3.queue;
  if (null === c7)
    throw Error(y$2(311));
  c7.lastRenderedReducer = a4;
  var d4 = c7.dispatch, e3 = c7.pending, f2 = b3.memoizedState;
  if (null !== e3) {
    c7.pending = null;
    var g2 = e3 = e3.next;
    do
      f2 = a4(f2, g2.action), g2 = g2.next;
    while (g2 !== e3);
    He$1(f2, b3.memoizedState) || (ug = true);
    b3.memoizedState = f2;
    null === b3.baseQueue && (b3.baseState = f2);
    c7.lastRenderedState = f2;
  }
  return [f2, d4];
}
function Mh(a4, b3, c7) {
  var d4 = b3._getVersion;
  d4 = d4(b3._source);
  var e3 = b3._workInProgressVersionPrimary;
  if (null !== e3)
    a4 = e3 === d4;
  else if (a4 = a4.mutableReadLanes, a4 = (xh & a4) === a4)
    b3._workInProgressVersionPrimary = d4, th.push(b3);
  if (a4)
    return c7(b3._source);
  th.push(b3);
  throw Error(y$2(350));
}
function Nh(a4, b3, c7, d4) {
  var e3 = U$1;
  if (null === e3)
    throw Error(y$2(349));
  var f2 = b3._getVersion, g2 = f2(b3._source), h4 = vh.current, k3 = h4.useState(function() {
    return Mh(e3, b3, c7);
  }), l2 = k3[1], n2 = k3[0];
  k3 = T$1;
  var A2 = a4.memoizedState, p2 = A2.refs, C2 = p2.getSnapshot, x3 = A2.source;
  A2 = A2.subscribe;
  var w3 = R$1;
  a4.memoizedState = { refs: p2, source: b3, subscribe: d4 };
  h4.useEffect(function() {
    p2.getSnapshot = c7;
    p2.setSnapshot = l2;
    var a5 = f2(b3._source);
    if (!He$1(g2, a5)) {
      a5 = c7(b3._source);
      He$1(n2, a5) || (l2(a5), a5 = Ig(w3), e3.mutableReadLanes |= a5 & e3.pendingLanes);
      a5 = e3.mutableReadLanes;
      e3.entangledLanes |= a5;
      for (var d5 = e3.entanglements, h5 = a5; 0 < h5; ) {
        var k4 = 31 - Vc(h5), v2 = 1 << k4;
        d5[k4] |= a5;
        h5 &= ~v2;
      }
    }
  }, [c7, b3, d4]);
  h4.useEffect(function() {
    return d4(b3._source, function() {
      var a5 = p2.getSnapshot, c8 = p2.setSnapshot;
      try {
        c8(a5(b3._source));
        var d5 = Ig(w3);
        e3.mutableReadLanes |= d5 & e3.pendingLanes;
      } catch (q3) {
        c8(function() {
          throw q3;
        });
      }
    });
  }, [b3, d4]);
  He$1(C2, c7) && He$1(x3, b3) && He$1(A2, d4) || (a4 = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n2 }, a4.dispatch = l2 = Oh.bind(null, R$1, a4), k3.queue = a4, k3.baseQueue = null, n2 = Mh(e3, b3, c7), k3.memoizedState = k3.baseState = n2);
  return n2;
}
function Ph(a4, b3, c7) {
  var d4 = Ih();
  return Nh(d4, a4, b3, c7);
}
function Qh(a4) {
  var b3 = Hh();
  "function" === typeof a4 && (a4 = a4());
  b3.memoizedState = b3.baseState = a4;
  a4 = b3.queue = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a4 };
  a4 = a4.dispatch = Oh.bind(null, R$1, a4);
  return [b3.memoizedState, a4];
}
function Rh(a4, b3, c7, d4) {
  a4 = { tag: a4, create: b3, destroy: c7, deps: d4, next: null };
  b3 = R$1.updateQueue;
  null === b3 ? (b3 = { lastEffect: null }, R$1.updateQueue = b3, b3.lastEffect = a4.next = a4) : (c7 = b3.lastEffect, null === c7 ? b3.lastEffect = a4.next = a4 : (d4 = c7.next, c7.next = a4, a4.next = d4, b3.lastEffect = a4));
  return a4;
}
function Sh(a4) {
  var b3 = Hh();
  a4 = { current: a4 };
  return b3.memoizedState = a4;
}
function Th() {
  return Ih().memoizedState;
}
function Uh(a4, b3, c7, d4) {
  var e3 = Hh();
  R$1.flags |= a4;
  e3.memoizedState = Rh(1 | b3, c7, void 0, void 0 === d4 ? null : d4);
}
function Vh(a4, b3, c7, d4) {
  var e3 = Ih();
  d4 = void 0 === d4 ? null : d4;
  var f2 = void 0;
  if (null !== S$1) {
    var g2 = S$1.memoizedState;
    f2 = g2.destroy;
    if (null !== d4 && Bh(d4, g2.deps)) {
      Rh(b3, c7, f2, d4);
      return;
    }
  }
  R$1.flags |= a4;
  e3.memoizedState = Rh(1 | b3, c7, f2, d4);
}
function Wh(a4, b3) {
  return Uh(516, 4, a4, b3);
}
function Xh(a4, b3) {
  return Vh(516, 4, a4, b3);
}
function Yh(a4, b3) {
  return Vh(4, 2, a4, b3);
}
function Zh(a4, b3) {
  if ("function" === typeof b3)
    return a4 = a4(), b3(a4), function() {
      b3(null);
    };
  if (null !== b3 && void 0 !== b3)
    return a4 = a4(), b3.current = a4, function() {
      b3.current = null;
    };
}
function $h(a4, b3, c7) {
  c7 = null !== c7 && void 0 !== c7 ? c7.concat([a4]) : null;
  return Vh(4, 2, Zh.bind(null, b3, a4), c7);
}
function ai() {
}
function bi(a4, b3) {
  var c7 = Ih();
  b3 = void 0 === b3 ? null : b3;
  var d4 = c7.memoizedState;
  if (null !== d4 && null !== b3 && Bh(b3, d4[1]))
    return d4[0];
  c7.memoizedState = [a4, b3];
  return a4;
}
function ci(a4, b3) {
  var c7 = Ih();
  b3 = void 0 === b3 ? null : b3;
  var d4 = c7.memoizedState;
  if (null !== d4 && null !== b3 && Bh(b3, d4[1]))
    return d4[0];
  a4 = a4();
  c7.memoizedState = [a4, b3];
  return a4;
}
function di(a4, b3) {
  var c7 = eg();
  gg(98 > c7 ? 98 : c7, function() {
    a4(true);
  });
  gg(97 < c7 ? 97 : c7, function() {
    var c8 = wh.transition;
    wh.transition = 1;
    try {
      a4(false), b3();
    } finally {
      wh.transition = c8;
    }
  });
}
function Oh(a4, b3, c7) {
  var d4 = Hg(), e3 = Ig(a4), f2 = { lane: e3, action: c7, eagerReducer: null, eagerState: null, next: null }, g2 = b3.pending;
  null === g2 ? f2.next = f2 : (f2.next = g2.next, g2.next = f2);
  b3.pending = f2;
  g2 = a4.alternate;
  if (a4 === R$1 || null !== g2 && g2 === R$1)
    zh = yh = true;
  else {
    if (0 === a4.lanes && (null === g2 || 0 === g2.lanes) && (g2 = b3.lastRenderedReducer, null !== g2))
      try {
        var h4 = b3.lastRenderedState, k3 = g2(h4, c7);
        f2.eagerReducer = g2;
        f2.eagerState = k3;
        if (He$1(k3, h4))
          return;
      } catch (l2) {
      } finally {
      }
    Jg(a4, e3, d4);
  }
}
var Gh = { readContext: vg, useCallback: Ah, useContext: Ah, useEffect: Ah, useImperativeHandle: Ah, useLayoutEffect: Ah, useMemo: Ah, useReducer: Ah, useRef: Ah, useState: Ah, useDebugValue: Ah, useDeferredValue: Ah, useTransition: Ah, useMutableSource: Ah, useOpaqueIdentifier: Ah, unstable_isNewReconciler: false }, Dh = { readContext: vg, useCallback: function(a4, b3) {
  Hh().memoizedState = [a4, void 0 === b3 ? null : b3];
  return a4;
}, useContext: vg, useEffect: Wh, useImperativeHandle: function(a4, b3, c7) {
  c7 = null !== c7 && void 0 !== c7 ? c7.concat([a4]) : null;
  return Uh(4, 2, Zh.bind(
    null,
    b3,
    a4
  ), c7);
}, useLayoutEffect: function(a4, b3) {
  return Uh(4, 2, a4, b3);
}, useMemo: function(a4, b3) {
  var c7 = Hh();
  b3 = void 0 === b3 ? null : b3;
  a4 = a4();
  c7.memoizedState = [a4, b3];
  return a4;
}, useReducer: function(a4, b3, c7) {
  var d4 = Hh();
  b3 = void 0 !== c7 ? c7(b3) : b3;
  d4.memoizedState = d4.baseState = b3;
  a4 = d4.queue = { pending: null, dispatch: null, lastRenderedReducer: a4, lastRenderedState: b3 };
  a4 = a4.dispatch = Oh.bind(null, R$1, a4);
  return [d4.memoizedState, a4];
}, useRef: Sh, useState: Qh, useDebugValue: ai, useDeferredValue: function(a4) {
  var b3 = Qh(a4), c7 = b3[0], d4 = b3[1];
  Wh(function() {
    var b4 = wh.transition;
    wh.transition = 1;
    try {
      d4(a4);
    } finally {
      wh.transition = b4;
    }
  }, [a4]);
  return c7;
}, useTransition: function() {
  var a4 = Qh(false), b3 = a4[0];
  a4 = di.bind(null, a4[1]);
  Sh(a4);
  return [a4, b3];
}, useMutableSource: function(a4, b3, c7) {
  var d4 = Hh();
  d4.memoizedState = { refs: { getSnapshot: b3, setSnapshot: null }, source: a4, subscribe: c7 };
  return Nh(d4, a4, b3, c7);
}, useOpaqueIdentifier: function() {
  if (lh) {
    var a4 = false, b3 = uf(function() {
      a4 || (a4 = true, c7("r:" + (tf++).toString(36)));
      throw Error(y$2(355));
    }), c7 = Qh(b3)[1];
    0 === (R$1.mode & 2) && (R$1.flags |= 516, Rh(
      5,
      function() {
        c7("r:" + (tf++).toString(36));
      },
      void 0,
      null
    ));
    return b3;
  }
  b3 = "r:" + (tf++).toString(36);
  Qh(b3);
  return b3;
}, unstable_isNewReconciler: false }, Eh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Kh, useRef: Th, useState: function() {
  return Kh(Jh);
}, useDebugValue: ai, useDeferredValue: function(a4) {
  var b3 = Kh(Jh), c7 = b3[0], d4 = b3[1];
  Xh(function() {
    var b4 = wh.transition;
    wh.transition = 1;
    try {
      d4(a4);
    } finally {
      wh.transition = b4;
    }
  }, [a4]);
  return c7;
}, useTransition: function() {
  var a4 = Kh(Jh)[0];
  return [
    Th().current,
    a4
  ];
}, useMutableSource: Ph, useOpaqueIdentifier: function() {
  return Kh(Jh)[0];
}, unstable_isNewReconciler: false }, Fh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Lh, useRef: Th, useState: function() {
  return Lh(Jh);
}, useDebugValue: ai, useDeferredValue: function(a4) {
  var b3 = Lh(Jh), c7 = b3[0], d4 = b3[1];
  Xh(function() {
    var b4 = wh.transition;
    wh.transition = 1;
    try {
      d4(a4);
    } finally {
      wh.transition = b4;
    }
  }, [a4]);
  return c7;
}, useTransition: function() {
  var a4 = Lh(Jh)[0];
  return [
    Th().current,
    a4
  ];
}, useMutableSource: Ph, useOpaqueIdentifier: function() {
  return Lh(Jh)[0];
}, unstable_isNewReconciler: false }, ei = ra.ReactCurrentOwner, ug = false;
function fi(a4, b3, c7, d4) {
  b3.child = null === a4 ? Zg(b3, null, c7, d4) : Yg(b3, a4.child, c7, d4);
}
function gi(a4, b3, c7, d4, e3) {
  c7 = c7.render;
  var f2 = b3.ref;
  tg(b3, e3);
  d4 = Ch(a4, b3, c7, d4, f2, e3);
  if (null !== a4 && !ug)
    return b3.updateQueue = a4.updateQueue, b3.flags &= -517, a4.lanes &= ~e3, hi(a4, b3, e3);
  b3.flags |= 1;
  fi(a4, b3, d4, e3);
  return b3.child;
}
function ii(a4, b3, c7, d4, e3, f2) {
  if (null === a4) {
    var g2 = c7.type;
    if ("function" === typeof g2 && !ji(g2) && void 0 === g2.defaultProps && null === c7.compare && void 0 === c7.defaultProps)
      return b3.tag = 15, b3.type = g2, ki(a4, b3, g2, d4, e3, f2);
    a4 = Vg(c7.type, null, d4, b3, b3.mode, f2);
    a4.ref = b3.ref;
    a4.return = b3;
    return b3.child = a4;
  }
  g2 = a4.child;
  if (0 === (e3 & f2) && (e3 = g2.memoizedProps, c7 = c7.compare, c7 = null !== c7 ? c7 : Je$1, c7(e3, d4) && a4.ref === b3.ref))
    return hi(a4, b3, f2);
  b3.flags |= 1;
  a4 = Tg(g2, d4);
  a4.ref = b3.ref;
  a4.return = b3;
  return b3.child = a4;
}
function ki(a4, b3, c7, d4, e3, f2) {
  if (null !== a4 && Je$1(a4.memoizedProps, d4) && a4.ref === b3.ref)
    if (ug = false, 0 !== (f2 & e3))
      0 !== (a4.flags & 16384) && (ug = true);
    else
      return b3.lanes = a4.lanes, hi(a4, b3, f2);
  return li(a4, b3, c7, d4, f2);
}
function mi(a4, b3, c7) {
  var d4 = b3.pendingProps, e3 = d4.children, f2 = null !== a4 ? a4.memoizedState : null;
  if ("hidden" === d4.mode || "unstable-defer-without-hiding" === d4.mode)
    if (0 === (b3.mode & 4))
      b3.memoizedState = { baseLanes: 0 }, ni(b3, c7);
    else if (0 !== (c7 & 1073741824))
      b3.memoizedState = { baseLanes: 0 }, ni(b3, null !== f2 ? f2.baseLanes : c7);
    else
      return a4 = null !== f2 ? f2.baseLanes | c7 : c7, b3.lanes = b3.childLanes = 1073741824, b3.memoizedState = { baseLanes: a4 }, ni(b3, a4), null;
  else
    null !== f2 ? (d4 = f2.baseLanes | c7, b3.memoizedState = null) : d4 = c7, ni(b3, d4);
  fi(a4, b3, e3, c7);
  return b3.child;
}
function oi(a4, b3) {
  var c7 = b3.ref;
  if (null === a4 && null !== c7 || null !== a4 && a4.ref !== c7)
    b3.flags |= 128;
}
function li(a4, b3, c7, d4, e3) {
  var f2 = Ff(c7) ? Df : M$1.current;
  f2 = Ef(b3, f2);
  tg(b3, e3);
  c7 = Ch(a4, b3, c7, d4, f2, e3);
  if (null !== a4 && !ug)
    return b3.updateQueue = a4.updateQueue, b3.flags &= -517, a4.lanes &= ~e3, hi(a4, b3, e3);
  b3.flags |= 1;
  fi(a4, b3, c7, e3);
  return b3.child;
}
function pi(a4, b3, c7, d4, e3) {
  if (Ff(c7)) {
    var f2 = true;
    Jf(b3);
  } else
    f2 = false;
  tg(b3, e3);
  if (null === b3.stateNode)
    null !== a4 && (a4.alternate = null, b3.alternate = null, b3.flags |= 2), Mg(b3, c7, d4), Og(b3, c7, d4, e3), d4 = true;
  else if (null === a4) {
    var g2 = b3.stateNode, h4 = b3.memoizedProps;
    g2.props = h4;
    var k3 = g2.context, l2 = c7.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = vg(l2) : (l2 = Ff(c7) ? Df : M$1.current, l2 = Ef(b3, l2));
    var n2 = c7.getDerivedStateFromProps, A2 = "function" === typeof n2 || "function" === typeof g2.getSnapshotBeforeUpdate;
    A2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h4 !== d4 || k3 !== l2) && Ng(b3, g2, d4, l2);
    wg = false;
    var p2 = b3.memoizedState;
    g2.state = p2;
    Cg(b3, d4, g2, e3);
    k3 = b3.memoizedState;
    h4 !== d4 || p2 !== k3 || N$1.current || wg ? ("function" === typeof n2 && (Gg(b3, c7, n2, d4), k3 = b3.memoizedState), (h4 = wg || Lg(b3, c7, h4, d4, p2, k3, l2)) ? (A2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b3.flags |= 4)) : ("function" === typeof g2.componentDidMount && (b3.flags |= 4), b3.memoizedProps = d4, b3.memoizedState = k3), g2.props = d4, g2.state = k3, g2.context = l2, d4 = h4) : ("function" === typeof g2.componentDidMount && (b3.flags |= 4), d4 = false);
  } else {
    g2 = b3.stateNode;
    yg(a4, b3);
    h4 = b3.memoizedProps;
    l2 = b3.type === b3.elementType ? h4 : lg(b3.type, h4);
    g2.props = l2;
    A2 = b3.pendingProps;
    p2 = g2.context;
    k3 = c7.contextType;
    "object" === typeof k3 && null !== k3 ? k3 = vg(k3) : (k3 = Ff(c7) ? Df : M$1.current, k3 = Ef(b3, k3));
    var C2 = c7.getDerivedStateFromProps;
    (n2 = "function" === typeof C2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h4 !== A2 || p2 !== k3) && Ng(b3, g2, d4, k3);
    wg = false;
    p2 = b3.memoizedState;
    g2.state = p2;
    Cg(b3, d4, g2, e3);
    var x3 = b3.memoizedState;
    h4 !== A2 || p2 !== x3 || N$1.current || wg ? ("function" === typeof C2 && (Gg(b3, c7, C2, d4), x3 = b3.memoizedState), (l2 = wg || Lg(b3, c7, l2, d4, p2, x3, k3)) ? (n2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(
      d4,
      x3,
      k3
    ), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d4, x3, k3)), "function" === typeof g2.componentDidUpdate && (b3.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b3.flags |= 256)) : ("function" !== typeof g2.componentDidUpdate || h4 === a4.memoizedProps && p2 === a4.memoizedState || (b3.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h4 === a4.memoizedProps && p2 === a4.memoizedState || (b3.flags |= 256), b3.memoizedProps = d4, b3.memoizedState = x3), g2.props = d4, g2.state = x3, g2.context = k3, d4 = l2) : ("function" !== typeof g2.componentDidUpdate || h4 === a4.memoizedProps && p2 === a4.memoizedState || (b3.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h4 === a4.memoizedProps && p2 === a4.memoizedState || (b3.flags |= 256), d4 = false);
  }
  return qi(a4, b3, c7, d4, f2, e3);
}
function qi(a4, b3, c7, d4, e3, f2) {
  oi(a4, b3);
  var g2 = 0 !== (b3.flags & 64);
  if (!d4 && !g2)
    return e3 && Kf(b3, c7, false), hi(a4, b3, f2);
  d4 = b3.stateNode;
  ei.current = b3;
  var h4 = g2 && "function" !== typeof c7.getDerivedStateFromError ? null : d4.render();
  b3.flags |= 1;
  null !== a4 && g2 ? (b3.child = Yg(b3, a4.child, null, f2), b3.child = Yg(b3, null, h4, f2)) : fi(a4, b3, h4, f2);
  b3.memoizedState = d4.state;
  e3 && Kf(b3, c7, true);
  return b3.child;
}
function ri(a4) {
  var b3 = a4.stateNode;
  b3.pendingContext ? Hf(a4, b3.pendingContext, b3.pendingContext !== b3.context) : b3.context && Hf(a4, b3.context, false);
  eh(a4, b3.containerInfo);
}
var si = { dehydrated: null, retryLane: 0 };
function ti(a4, b3, c7) {
  var d4 = b3.pendingProps, e3 = P$2.current, f2 = false, g2;
  (g2 = 0 !== (b3.flags & 64)) || (g2 = null !== a4 && null === a4.memoizedState ? false : 0 !== (e3 & 2));
  g2 ? (f2 = true, b3.flags &= -65) : null !== a4 && null === a4.memoizedState || void 0 === d4.fallback || true === d4.unstable_avoidThisFallback || (e3 |= 1);
  I$1(P$2, e3 & 1);
  if (null === a4) {
    void 0 !== d4.fallback && ph(b3);
    a4 = d4.children;
    e3 = d4.fallback;
    if (f2)
      return a4 = ui(b3, a4, e3, c7), b3.child.memoizedState = { baseLanes: c7 }, b3.memoizedState = si, a4;
    if ("number" === typeof d4.unstable_expectedLoadTime)
      return a4 = ui(b3, a4, e3, c7), b3.child.memoizedState = { baseLanes: c7 }, b3.memoizedState = si, b3.lanes = 33554432, a4;
    c7 = vi({ mode: "visible", children: a4 }, b3.mode, c7, null);
    c7.return = b3;
    return b3.child = c7;
  }
  if (null !== a4.memoizedState) {
    if (f2)
      return d4 = wi(a4, b3, d4.children, d4.fallback, c7), f2 = b3.child, e3 = a4.child.memoizedState, f2.memoizedState = null === e3 ? { baseLanes: c7 } : { baseLanes: e3.baseLanes | c7 }, f2.childLanes = a4.childLanes & ~c7, b3.memoizedState = si, d4;
    c7 = xi(a4, b3, d4.children, c7);
    b3.memoizedState = null;
    return c7;
  }
  if (f2)
    return d4 = wi(a4, b3, d4.children, d4.fallback, c7), f2 = b3.child, e3 = a4.child.memoizedState, f2.memoizedState = null === e3 ? { baseLanes: c7 } : { baseLanes: e3.baseLanes | c7 }, f2.childLanes = a4.childLanes & ~c7, b3.memoizedState = si, d4;
  c7 = xi(a4, b3, d4.children, c7);
  b3.memoizedState = null;
  return c7;
}
function ui(a4, b3, c7, d4) {
  var e3 = a4.mode, f2 = a4.child;
  b3 = { mode: "hidden", children: b3 };
  0 === (e3 & 2) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = b3) : f2 = vi(b3, e3, 0, null);
  c7 = Xg(c7, e3, d4, null);
  f2.return = a4;
  c7.return = a4;
  f2.sibling = c7;
  a4.child = f2;
  return c7;
}
function xi(a4, b3, c7, d4) {
  var e3 = a4.child;
  a4 = e3.sibling;
  c7 = Tg(e3, { mode: "visible", children: c7 });
  0 === (b3.mode & 2) && (c7.lanes = d4);
  c7.return = b3;
  c7.sibling = null;
  null !== a4 && (a4.nextEffect = null, a4.flags = 8, b3.firstEffect = b3.lastEffect = a4);
  return b3.child = c7;
}
function wi(a4, b3, c7, d4, e3) {
  var f2 = b3.mode, g2 = a4.child;
  a4 = g2.sibling;
  var h4 = { mode: "hidden", children: c7 };
  0 === (f2 & 2) && b3.child !== g2 ? (c7 = b3.child, c7.childLanes = 0, c7.pendingProps = h4, g2 = c7.lastEffect, null !== g2 ? (b3.firstEffect = c7.firstEffect, b3.lastEffect = g2, g2.nextEffect = null) : b3.firstEffect = b3.lastEffect = null) : c7 = Tg(g2, h4);
  null !== a4 ? d4 = Tg(a4, d4) : (d4 = Xg(d4, f2, e3, null), d4.flags |= 2);
  d4.return = b3;
  c7.return = b3;
  c7.sibling = d4;
  b3.child = c7;
  return d4;
}
function yi(a4, b3) {
  a4.lanes |= b3;
  var c7 = a4.alternate;
  null !== c7 && (c7.lanes |= b3);
  sg(a4.return, b3);
}
function zi(a4, b3, c7, d4, e3, f2) {
  var g2 = a4.memoizedState;
  null === g2 ? a4.memoizedState = { isBackwards: b3, rendering: null, renderingStartTime: 0, last: d4, tail: c7, tailMode: e3, lastEffect: f2 } : (g2.isBackwards = b3, g2.rendering = null, g2.renderingStartTime = 0, g2.last = d4, g2.tail = c7, g2.tailMode = e3, g2.lastEffect = f2);
}
function Ai(a4, b3, c7) {
  var d4 = b3.pendingProps, e3 = d4.revealOrder, f2 = d4.tail;
  fi(a4, b3, d4.children, c7);
  d4 = P$2.current;
  if (0 !== (d4 & 2))
    d4 = d4 & 1 | 2, b3.flags |= 64;
  else {
    if (null !== a4 && 0 !== (a4.flags & 64))
      a:
        for (a4 = b3.child; null !== a4; ) {
          if (13 === a4.tag)
            null !== a4.memoizedState && yi(a4, c7);
          else if (19 === a4.tag)
            yi(a4, c7);
          else if (null !== a4.child) {
            a4.child.return = a4;
            a4 = a4.child;
            continue;
          }
          if (a4 === b3)
            break a;
          for (; null === a4.sibling; ) {
            if (null === a4.return || a4.return === b3)
              break a;
            a4 = a4.return;
          }
          a4.sibling.return = a4.return;
          a4 = a4.sibling;
        }
    d4 &= 1;
  }
  I$1(P$2, d4);
  if (0 === (b3.mode & 2))
    b3.memoizedState = null;
  else
    switch (e3) {
      case "forwards":
        c7 = b3.child;
        for (e3 = null; null !== c7; )
          a4 = c7.alternate, null !== a4 && null === ih(a4) && (e3 = c7), c7 = c7.sibling;
        c7 = e3;
        null === c7 ? (e3 = b3.child, b3.child = null) : (e3 = c7.sibling, c7.sibling = null);
        zi(b3, false, e3, c7, f2, b3.lastEffect);
        break;
      case "backwards":
        c7 = null;
        e3 = b3.child;
        for (b3.child = null; null !== e3; ) {
          a4 = e3.alternate;
          if (null !== a4 && null === ih(a4)) {
            b3.child = e3;
            break;
          }
          a4 = e3.sibling;
          e3.sibling = c7;
          c7 = e3;
          e3 = a4;
        }
        zi(b3, true, c7, null, f2, b3.lastEffect);
        break;
      case "together":
        zi(b3, false, null, null, void 0, b3.lastEffect);
        break;
      default:
        b3.memoizedState = null;
    }
  return b3.child;
}
function hi(a4, b3, c7) {
  null !== a4 && (b3.dependencies = a4.dependencies);
  Dg |= b3.lanes;
  if (0 !== (c7 & b3.childLanes)) {
    if (null !== a4 && b3.child !== a4.child)
      throw Error(y$2(153));
    if (null !== b3.child) {
      a4 = b3.child;
      c7 = Tg(a4, a4.pendingProps);
      b3.child = c7;
      for (c7.return = b3; null !== a4.sibling; )
        a4 = a4.sibling, c7 = c7.sibling = Tg(a4, a4.pendingProps), c7.return = b3;
      c7.sibling = null;
    }
    return b3.child;
  }
  return null;
}
var Bi, Ci, Di, Ei;
Bi = function(a4, b3) {
  for (var c7 = b3.child; null !== c7; ) {
    if (5 === c7.tag || 6 === c7.tag)
      a4.appendChild(c7.stateNode);
    else if (4 !== c7.tag && null !== c7.child) {
      c7.child.return = c7;
      c7 = c7.child;
      continue;
    }
    if (c7 === b3)
      break;
    for (; null === c7.sibling; ) {
      if (null === c7.return || c7.return === b3)
        return;
      c7 = c7.return;
    }
    c7.sibling.return = c7.return;
    c7 = c7.sibling;
  }
};
Ci = function() {
};
Di = function(a4, b3, c7, d4) {
  var e3 = a4.memoizedProps;
  if (e3 !== d4) {
    a4 = b3.stateNode;
    dh(ah.current);
    var f2 = null;
    switch (c7) {
      case "input":
        e3 = Ya(a4, e3);
        d4 = Ya(a4, d4);
        f2 = [];
        break;
      case "option":
        e3 = eb(a4, e3);
        d4 = eb(a4, d4);
        f2 = [];
        break;
      case "select":
        e3 = m$2({}, e3, { value: void 0 });
        d4 = m$2({}, d4, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e3 = gb(a4, e3);
        d4 = gb(a4, d4);
        f2 = [];
        break;
      default:
        "function" !== typeof e3.onClick && "function" === typeof d4.onClick && (a4.onclick = jf);
    }
    vb(c7, d4);
    var g2;
    c7 = null;
    for (l2 in e3)
      if (!d4.hasOwnProperty(l2) && e3.hasOwnProperty(l2) && null != e3[l2])
        if ("style" === l2) {
          var h4 = e3[l2];
          for (g2 in h4)
            h4.hasOwnProperty(g2) && (c7 || (c7 = {}), c7[g2] = "");
        } else
          "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ca.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d4) {
      var k3 = d4[l2];
      h4 = null != e3 ? e3[l2] : void 0;
      if (d4.hasOwnProperty(l2) && k3 !== h4 && (null != k3 || null != h4))
        if ("style" === l2)
          if (h4) {
            for (g2 in h4)
              !h4.hasOwnProperty(g2) || k3 && k3.hasOwnProperty(g2) || (c7 || (c7 = {}), c7[g2] = "");
            for (g2 in k3)
              k3.hasOwnProperty(g2) && h4[g2] !== k3[g2] && (c7 || (c7 = {}), c7[g2] = k3[g2]);
          } else
            c7 || (f2 || (f2 = []), f2.push(l2, c7)), c7 = k3;
        else
          "dangerouslySetInnerHTML" === l2 ? (k3 = k3 ? k3.__html : void 0, h4 = h4 ? h4.__html : void 0, null != k3 && h4 !== k3 && (f2 = f2 || []).push(l2, k3)) : "children" === l2 ? "string" !== typeof k3 && "number" !== typeof k3 || (f2 = f2 || []).push(l2, "" + k3) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ca.hasOwnProperty(l2) ? (null != k3 && "onScroll" === l2 && G$1("scroll", a4), f2 || h4 === k3 || (f2 = [])) : "object" === typeof k3 && null !== k3 && k3.$$typeof === Ga ? k3.toString() : (f2 = f2 || []).push(l2, k3));
    }
    c7 && (f2 = f2 || []).push(
      "style",
      c7
    );
    var l2 = f2;
    if (b3.updateQueue = l2)
      b3.flags |= 4;
  }
};
Ei = function(a4, b3, c7, d4) {
  c7 !== d4 && (b3.flags |= 4);
};
function Fi(a4, b3) {
  if (!lh)
    switch (a4.tailMode) {
      case "hidden":
        b3 = a4.tail;
        for (var c7 = null; null !== b3; )
          null !== b3.alternate && (c7 = b3), b3 = b3.sibling;
        null === c7 ? a4.tail = null : c7.sibling = null;
        break;
      case "collapsed":
        c7 = a4.tail;
        for (var d4 = null; null !== c7; )
          null !== c7.alternate && (d4 = c7), c7 = c7.sibling;
        null === d4 ? b3 || null === a4.tail ? a4.tail = null : a4.tail.sibling = null : d4.sibling = null;
    }
}
function Gi(a4, b3, c7) {
  var d4 = b3.pendingProps;
  switch (b3.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return null;
    case 1:
      return Ff(b3.type) && Gf(), null;
    case 3:
      fh();
      H$1(N$1);
      H$1(M$1);
      uh();
      d4 = b3.stateNode;
      d4.pendingContext && (d4.context = d4.pendingContext, d4.pendingContext = null);
      if (null === a4 || null === a4.child)
        rh(b3) ? b3.flags |= 4 : d4.hydrate || (b3.flags |= 256);
      Ci(b3);
      return null;
    case 5:
      hh(b3);
      var e3 = dh(ch.current);
      c7 = b3.type;
      if (null !== a4 && null != b3.stateNode)
        Di(a4, b3, c7, d4, e3), a4.ref !== b3.ref && (b3.flags |= 128);
      else {
        if (!d4) {
          if (null === b3.stateNode)
            throw Error(y$2(166));
          return null;
        }
        a4 = dh(ah.current);
        if (rh(b3)) {
          d4 = b3.stateNode;
          c7 = b3.type;
          var f2 = b3.memoizedProps;
          d4[wf] = b3;
          d4[xf] = f2;
          switch (c7) {
            case "dialog":
              G$1("cancel", d4);
              G$1("close", d4);
              break;
            case "iframe":
            case "object":
            case "embed":
              G$1("load", d4);
              break;
            case "video":
            case "audio":
              for (a4 = 0; a4 < Xe$1.length; a4++)
                G$1(Xe$1[a4], d4);
              break;
            case "source":
              G$1("error", d4);
              break;
            case "img":
            case "image":
            case "link":
              G$1("error", d4);
              G$1("load", d4);
              break;
            case "details":
              G$1("toggle", d4);
              break;
            case "input":
              Za(d4, f2);
              G$1("invalid", d4);
              break;
            case "select":
              d4._wrapperState = { wasMultiple: !!f2.multiple };
              G$1("invalid", d4);
              break;
            case "textarea":
              hb(d4, f2), G$1("invalid", d4);
          }
          vb(c7, f2);
          a4 = null;
          for (var g2 in f2)
            f2.hasOwnProperty(g2) && (e3 = f2[g2], "children" === g2 ? "string" === typeof e3 ? d4.textContent !== e3 && (a4 = ["children", e3]) : "number" === typeof e3 && d4.textContent !== "" + e3 && (a4 = ["children", "" + e3]) : ca.hasOwnProperty(g2) && null != e3 && "onScroll" === g2 && G$1("scroll", d4));
          switch (c7) {
            case "input":
              Va(d4);
              cb(d4, f2, true);
              break;
            case "textarea":
              Va(d4);
              jb(d4);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d4.onclick = jf);
          }
          d4 = a4;
          b3.updateQueue = d4;
          null !== d4 && (b3.flags |= 4);
        } else {
          g2 = 9 === e3.nodeType ? e3 : e3.ownerDocument;
          a4 === kb.html && (a4 = lb(c7));
          a4 === kb.html ? "script" === c7 ? (a4 = g2.createElement("div"), a4.innerHTML = "<script><\/script>", a4 = a4.removeChild(a4.firstChild)) : "string" === typeof d4.is ? a4 = g2.createElement(c7, { is: d4.is }) : (a4 = g2.createElement(c7), "select" === c7 && (g2 = a4, d4.multiple ? g2.multiple = true : d4.size && (g2.size = d4.size))) : a4 = g2.createElementNS(a4, c7);
          a4[wf] = b3;
          a4[xf] = d4;
          Bi(a4, b3, false, false);
          b3.stateNode = a4;
          g2 = wb(c7, d4);
          switch (c7) {
            case "dialog":
              G$1("cancel", a4);
              G$1("close", a4);
              e3 = d4;
              break;
            case "iframe":
            case "object":
            case "embed":
              G$1("load", a4);
              e3 = d4;
              break;
            case "video":
            case "audio":
              for (e3 = 0; e3 < Xe$1.length; e3++)
                G$1(Xe$1[e3], a4);
              e3 = d4;
              break;
            case "source":
              G$1("error", a4);
              e3 = d4;
              break;
            case "img":
            case "image":
            case "link":
              G$1("error", a4);
              G$1("load", a4);
              e3 = d4;
              break;
            case "details":
              G$1("toggle", a4);
              e3 = d4;
              break;
            case "input":
              Za(a4, d4);
              e3 = Ya(a4, d4);
              G$1("invalid", a4);
              break;
            case "option":
              e3 = eb(a4, d4);
              break;
            case "select":
              a4._wrapperState = { wasMultiple: !!d4.multiple };
              e3 = m$2({}, d4, { value: void 0 });
              G$1("invalid", a4);
              break;
            case "textarea":
              hb(a4, d4);
              e3 = gb(a4, d4);
              G$1("invalid", a4);
              break;
            default:
              e3 = d4;
          }
          vb(c7, e3);
          var h4 = e3;
          for (f2 in h4)
            if (h4.hasOwnProperty(f2)) {
              var k3 = h4[f2];
              "style" === f2 ? tb(a4, k3) : "dangerouslySetInnerHTML" === f2 ? (k3 = k3 ? k3.__html : void 0, null != k3 && ob(a4, k3)) : "children" === f2 ? "string" === typeof k3 ? ("textarea" !== c7 || "" !== k3) && pb(a4, k3) : "number" === typeof k3 && pb(a4, "" + k3) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ca.hasOwnProperty(f2) ? null != k3 && "onScroll" === f2 && G$1("scroll", a4) : null != k3 && qa(a4, f2, k3, g2));
            }
          switch (c7) {
            case "input":
              Va(a4);
              cb(a4, d4, false);
              break;
            case "textarea":
              Va(a4);
              jb(a4);
              break;
            case "option":
              null != d4.value && a4.setAttribute("value", "" + Sa(d4.value));
              break;
            case "select":
              a4.multiple = !!d4.multiple;
              f2 = d4.value;
              null != f2 ? fb(a4, !!d4.multiple, f2, false) : null != d4.defaultValue && fb(a4, !!d4.multiple, d4.defaultValue, true);
              break;
            default:
              "function" === typeof e3.onClick && (a4.onclick = jf);
          }
          mf(c7, d4) && (b3.flags |= 4);
        }
        null !== b3.ref && (b3.flags |= 128);
      }
      return null;
    case 6:
      if (a4 && null != b3.stateNode)
        Ei(a4, b3, a4.memoizedProps, d4);
      else {
        if ("string" !== typeof d4 && null === b3.stateNode)
          throw Error(y$2(166));
        c7 = dh(ch.current);
        dh(ah.current);
        rh(b3) ? (d4 = b3.stateNode, c7 = b3.memoizedProps, d4[wf] = b3, d4.nodeValue !== c7 && (b3.flags |= 4)) : (d4 = (9 === c7.nodeType ? c7 : c7.ownerDocument).createTextNode(d4), d4[wf] = b3, b3.stateNode = d4);
      }
      return null;
    case 13:
      H$1(P$2);
      d4 = b3.memoizedState;
      if (0 !== (b3.flags & 64))
        return b3.lanes = c7, b3;
      d4 = null !== d4;
      c7 = false;
      null === a4 ? void 0 !== b3.memoizedProps.fallback && rh(b3) : c7 = null !== a4.memoizedState;
      if (d4 && !c7 && 0 !== (b3.mode & 2))
        if (null === a4 && true !== b3.memoizedProps.unstable_avoidThisFallback || 0 !== (P$2.current & 1))
          0 === V$1 && (V$1 = 3);
        else {
          if (0 === V$1 || 3 === V$1)
            V$1 = 4;
          null === U$1 || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U$1, W$1);
        }
      if (d4 || c7)
        b3.flags |= 4;
      return null;
    case 4:
      return fh(), Ci(b3), null === a4 && cf(b3.stateNode.containerInfo), null;
    case 10:
      return rg(b3), null;
    case 17:
      return Ff(b3.type) && Gf(), null;
    case 19:
      H$1(P$2);
      d4 = b3.memoizedState;
      if (null === d4)
        return null;
      f2 = 0 !== (b3.flags & 64);
      g2 = d4.rendering;
      if (null === g2)
        if (f2)
          Fi(d4, false);
        else {
          if (0 !== V$1 || null !== a4 && 0 !== (a4.flags & 64))
            for (a4 = b3.child; null !== a4; ) {
              g2 = ih(a4);
              if (null !== g2) {
                b3.flags |= 64;
                Fi(d4, false);
                f2 = g2.updateQueue;
                null !== f2 && (b3.updateQueue = f2, b3.flags |= 4);
                null === d4.lastEffect && (b3.firstEffect = null);
                b3.lastEffect = d4.lastEffect;
                d4 = c7;
                for (c7 = b3.child; null !== c7; )
                  f2 = c7, a4 = d4, f2.flags &= 2, f2.nextEffect = null, f2.firstEffect = null, f2.lastEffect = null, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a4, f2.child = null, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a4 = g2.dependencies, f2.dependencies = null === a4 ? null : { lanes: a4.lanes, firstContext: a4.firstContext }), c7 = c7.sibling;
                I$1(P$2, P$2.current & 1 | 2);
                return b3.child;
              }
              a4 = a4.sibling;
            }
          null !== d4.tail && O$1() > Ji && (b3.flags |= 64, f2 = true, Fi(d4, false), b3.lanes = 33554432);
        }
      else {
        if (!f2)
          if (a4 = ih(g2), null !== a4) {
            if (b3.flags |= 64, f2 = true, c7 = a4.updateQueue, null !== c7 && (b3.updateQueue = c7, b3.flags |= 4), Fi(d4, true), null === d4.tail && "hidden" === d4.tailMode && !g2.alternate && !lh)
              return b3 = b3.lastEffect = d4.lastEffect, null !== b3 && (b3.nextEffect = null), null;
          } else
            2 * O$1() - d4.renderingStartTime > Ji && 1073741824 !== c7 && (b3.flags |= 64, f2 = true, Fi(d4, false), b3.lanes = 33554432);
        d4.isBackwards ? (g2.sibling = b3.child, b3.child = g2) : (c7 = d4.last, null !== c7 ? c7.sibling = g2 : b3.child = g2, d4.last = g2);
      }
      return null !== d4.tail ? (c7 = d4.tail, d4.rendering = c7, d4.tail = c7.sibling, d4.lastEffect = b3.lastEffect, d4.renderingStartTime = O$1(), c7.sibling = null, b3 = P$2.current, I$1(P$2, f2 ? b3 & 1 | 2 : b3 & 1), c7) : null;
    case 23:
    case 24:
      return Ki(), null !== a4 && null !== a4.memoizedState !== (null !== b3.memoizedState) && "unstable-defer-without-hiding" !== d4.mode && (b3.flags |= 4), null;
  }
  throw Error(y$2(156, b3.tag));
}
function Li(a4) {
  switch (a4.tag) {
    case 1:
      Ff(a4.type) && Gf();
      var b3 = a4.flags;
      return b3 & 4096 ? (a4.flags = b3 & -4097 | 64, a4) : null;
    case 3:
      fh();
      H$1(N$1);
      H$1(M$1);
      uh();
      b3 = a4.flags;
      if (0 !== (b3 & 64))
        throw Error(y$2(285));
      a4.flags = b3 & -4097 | 64;
      return a4;
    case 5:
      return hh(a4), null;
    case 13:
      return H$1(P$2), b3 = a4.flags, b3 & 4096 ? (a4.flags = b3 & -4097 | 64, a4) : null;
    case 19:
      return H$1(P$2), null;
    case 4:
      return fh(), null;
    case 10:
      return rg(a4), null;
    case 23:
    case 24:
      return Ki(), null;
    default:
      return null;
  }
}
function Mi(a4, b3) {
  try {
    var c7 = "", d4 = b3;
    do
      c7 += Qa(d4), d4 = d4.return;
    while (d4);
    var e3 = c7;
  } catch (f2) {
    e3 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a4, source: b3, stack: e3 };
}
function Ni(a4, b3) {
  try {
    console.error(b3.value);
  } catch (c7) {
    setTimeout(function() {
      throw c7;
    });
  }
}
var Oi = "function" === typeof WeakMap ? WeakMap : Map;
function Pi(a4, b3, c7) {
  c7 = zg(-1, c7);
  c7.tag = 3;
  c7.payload = { element: null };
  var d4 = b3.value;
  c7.callback = function() {
    Qi || (Qi = true, Ri = d4);
    Ni(a4, b3);
  };
  return c7;
}
function Si(a4, b3, c7) {
  c7 = zg(-1, c7);
  c7.tag = 3;
  var d4 = a4.type.getDerivedStateFromError;
  if ("function" === typeof d4) {
    var e3 = b3.value;
    c7.payload = function() {
      Ni(a4, b3);
      return d4(e3);
    };
  }
  var f2 = a4.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c7.callback = function() {
    "function" !== typeof d4 && (null === Ti ? Ti = /* @__PURE__ */ new Set([this]) : Ti.add(this), Ni(a4, b3));
    var c8 = b3.stack;
    this.componentDidCatch(b3.value, { componentStack: null !== c8 ? c8 : "" });
  });
  return c7;
}
var Ui = "function" === typeof WeakSet ? WeakSet : Set;
function Vi(a4) {
  var b3 = a4.ref;
  if (null !== b3)
    if ("function" === typeof b3)
      try {
        b3(null);
      } catch (c7) {
        Wi(a4, c7);
      }
    else
      b3.current = null;
}
function Xi(a4, b3) {
  switch (b3.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      return;
    case 1:
      if (b3.flags & 256 && null !== a4) {
        var c7 = a4.memoizedProps, d4 = a4.memoizedState;
        a4 = b3.stateNode;
        b3 = a4.getSnapshotBeforeUpdate(b3.elementType === b3.type ? c7 : lg(b3.type, c7), d4);
        a4.__reactInternalSnapshotBeforeUpdate = b3;
      }
      return;
    case 3:
      b3.flags & 256 && qf(b3.stateNode.containerInfo);
      return;
    case 5:
    case 6:
    case 4:
    case 17:
      return;
  }
  throw Error(y$2(163));
}
function Yi(a4, b3, c7) {
  switch (c7.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      b3 = c7.updateQueue;
      b3 = null !== b3 ? b3.lastEffect : null;
      if (null !== b3) {
        a4 = b3 = b3.next;
        do {
          if (3 === (a4.tag & 3)) {
            var d4 = a4.create;
            a4.destroy = d4();
          }
          a4 = a4.next;
        } while (a4 !== b3);
      }
      b3 = c7.updateQueue;
      b3 = null !== b3 ? b3.lastEffect : null;
      if (null !== b3) {
        a4 = b3 = b3.next;
        do {
          var e3 = a4;
          d4 = e3.next;
          e3 = e3.tag;
          0 !== (e3 & 4) && 0 !== (e3 & 1) && (Zi(c7, a4), $i(c7, a4));
          a4 = d4;
        } while (a4 !== b3);
      }
      return;
    case 1:
      a4 = c7.stateNode;
      c7.flags & 4 && (null === b3 ? a4.componentDidMount() : (d4 = c7.elementType === c7.type ? b3.memoizedProps : lg(c7.type, b3.memoizedProps), a4.componentDidUpdate(
        d4,
        b3.memoizedState,
        a4.__reactInternalSnapshotBeforeUpdate
      )));
      b3 = c7.updateQueue;
      null !== b3 && Eg(c7, b3, a4);
      return;
    case 3:
      b3 = c7.updateQueue;
      if (null !== b3) {
        a4 = null;
        if (null !== c7.child)
          switch (c7.child.tag) {
            case 5:
              a4 = c7.child.stateNode;
              break;
            case 1:
              a4 = c7.child.stateNode;
          }
        Eg(c7, b3, a4);
      }
      return;
    case 5:
      a4 = c7.stateNode;
      null === b3 && c7.flags & 4 && mf(c7.type, c7.memoizedProps) && a4.focus();
      return;
    case 6:
      return;
    case 4:
      return;
    case 12:
      return;
    case 13:
      null === c7.memoizedState && (c7 = c7.alternate, null !== c7 && (c7 = c7.memoizedState, null !== c7 && (c7 = c7.dehydrated, null !== c7 && Cc(c7))));
      return;
    case 19:
    case 17:
    case 20:
    case 21:
    case 23:
    case 24:
      return;
  }
  throw Error(y$2(163));
}
function aj(a4, b3) {
  for (var c7 = a4; ; ) {
    if (5 === c7.tag) {
      var d4 = c7.stateNode;
      if (b3)
        d4 = d4.style, "function" === typeof d4.setProperty ? d4.setProperty("display", "none", "important") : d4.display = "none";
      else {
        d4 = c7.stateNode;
        var e3 = c7.memoizedProps.style;
        e3 = void 0 !== e3 && null !== e3 && e3.hasOwnProperty("display") ? e3.display : null;
        d4.style.display = sb("display", e3);
      }
    } else if (6 === c7.tag)
      c7.stateNode.nodeValue = b3 ? "" : c7.memoizedProps;
    else if ((23 !== c7.tag && 24 !== c7.tag || null === c7.memoizedState || c7 === a4) && null !== c7.child) {
      c7.child.return = c7;
      c7 = c7.child;
      continue;
    }
    if (c7 === a4)
      break;
    for (; null === c7.sibling; ) {
      if (null === c7.return || c7.return === a4)
        return;
      c7 = c7.return;
    }
    c7.sibling.return = c7.return;
    c7 = c7.sibling;
  }
}
function bj(a4, b3) {
  if (Mf && "function" === typeof Mf.onCommitFiberUnmount)
    try {
      Mf.onCommitFiberUnmount(Lf, b3);
    } catch (f2) {
    }
  switch (b3.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      a4 = b3.updateQueue;
      if (null !== a4 && (a4 = a4.lastEffect, null !== a4)) {
        var c7 = a4 = a4.next;
        do {
          var d4 = c7, e3 = d4.destroy;
          d4 = d4.tag;
          if (void 0 !== e3)
            if (0 !== (d4 & 4))
              Zi(b3, c7);
            else {
              d4 = b3;
              try {
                e3();
              } catch (f2) {
                Wi(d4, f2);
              }
            }
          c7 = c7.next;
        } while (c7 !== a4);
      }
      break;
    case 1:
      Vi(b3);
      a4 = b3.stateNode;
      if ("function" === typeof a4.componentWillUnmount)
        try {
          a4.props = b3.memoizedProps, a4.state = b3.memoizedState, a4.componentWillUnmount();
        } catch (f2) {
          Wi(
            b3,
            f2
          );
        }
      break;
    case 5:
      Vi(b3);
      break;
    case 4:
      cj(a4, b3);
  }
}
function dj(a4) {
  a4.alternate = null;
  a4.child = null;
  a4.dependencies = null;
  a4.firstEffect = null;
  a4.lastEffect = null;
  a4.memoizedProps = null;
  a4.memoizedState = null;
  a4.pendingProps = null;
  a4.return = null;
  a4.updateQueue = null;
}
function ej(a4) {
  return 5 === a4.tag || 3 === a4.tag || 4 === a4.tag;
}
function fj(a4) {
  a: {
    for (var b3 = a4.return; null !== b3; ) {
      if (ej(b3))
        break a;
      b3 = b3.return;
    }
    throw Error(y$2(160));
  }
  var c7 = b3;
  b3 = c7.stateNode;
  switch (c7.tag) {
    case 5:
      var d4 = false;
      break;
    case 3:
      b3 = b3.containerInfo;
      d4 = true;
      break;
    case 4:
      b3 = b3.containerInfo;
      d4 = true;
      break;
    default:
      throw Error(y$2(161));
  }
  c7.flags & 16 && (pb(b3, ""), c7.flags &= -17);
  a:
    b:
      for (c7 = a4; ; ) {
        for (; null === c7.sibling; ) {
          if (null === c7.return || ej(c7.return)) {
            c7 = null;
            break a;
          }
          c7 = c7.return;
        }
        c7.sibling.return = c7.return;
        for (c7 = c7.sibling; 5 !== c7.tag && 6 !== c7.tag && 18 !== c7.tag; ) {
          if (c7.flags & 2)
            continue b;
          if (null === c7.child || 4 === c7.tag)
            continue b;
          else
            c7.child.return = c7, c7 = c7.child;
        }
        if (!(c7.flags & 2)) {
          c7 = c7.stateNode;
          break a;
        }
      }
  d4 ? gj(a4, c7, b3) : hj(a4, c7, b3);
}
function gj(a4, b3, c7) {
  var d4 = a4.tag, e3 = 5 === d4 || 6 === d4;
  if (e3)
    a4 = e3 ? a4.stateNode : a4.stateNode.instance, b3 ? 8 === c7.nodeType ? c7.parentNode.insertBefore(a4, b3) : c7.insertBefore(a4, b3) : (8 === c7.nodeType ? (b3 = c7.parentNode, b3.insertBefore(a4, c7)) : (b3 = c7, b3.appendChild(a4)), c7 = c7._reactRootContainer, null !== c7 && void 0 !== c7 || null !== b3.onclick || (b3.onclick = jf));
  else if (4 !== d4 && (a4 = a4.child, null !== a4))
    for (gj(a4, b3, c7), a4 = a4.sibling; null !== a4; )
      gj(a4, b3, c7), a4 = a4.sibling;
}
function hj(a4, b3, c7) {
  var d4 = a4.tag, e3 = 5 === d4 || 6 === d4;
  if (e3)
    a4 = e3 ? a4.stateNode : a4.stateNode.instance, b3 ? c7.insertBefore(a4, b3) : c7.appendChild(a4);
  else if (4 !== d4 && (a4 = a4.child, null !== a4))
    for (hj(a4, b3, c7), a4 = a4.sibling; null !== a4; )
      hj(a4, b3, c7), a4 = a4.sibling;
}
function cj(a4, b3) {
  for (var c7 = b3, d4 = false, e3, f2; ; ) {
    if (!d4) {
      d4 = c7.return;
      a:
        for (; ; ) {
          if (null === d4)
            throw Error(y$2(160));
          e3 = d4.stateNode;
          switch (d4.tag) {
            case 5:
              f2 = false;
              break a;
            case 3:
              e3 = e3.containerInfo;
              f2 = true;
              break a;
            case 4:
              e3 = e3.containerInfo;
              f2 = true;
              break a;
          }
          d4 = d4.return;
        }
      d4 = true;
    }
    if (5 === c7.tag || 6 === c7.tag) {
      a:
        for (var g2 = a4, h4 = c7, k3 = h4; ; )
          if (bj(g2, k3), null !== k3.child && 4 !== k3.tag)
            k3.child.return = k3, k3 = k3.child;
          else {
            if (k3 === h4)
              break a;
            for (; null === k3.sibling; ) {
              if (null === k3.return || k3.return === h4)
                break a;
              k3 = k3.return;
            }
            k3.sibling.return = k3.return;
            k3 = k3.sibling;
          }
      f2 ? (g2 = e3, h4 = c7.stateNode, 8 === g2.nodeType ? g2.parentNode.removeChild(h4) : g2.removeChild(h4)) : e3.removeChild(c7.stateNode);
    } else if (4 === c7.tag) {
      if (null !== c7.child) {
        e3 = c7.stateNode.containerInfo;
        f2 = true;
        c7.child.return = c7;
        c7 = c7.child;
        continue;
      }
    } else if (bj(a4, c7), null !== c7.child) {
      c7.child.return = c7;
      c7 = c7.child;
      continue;
    }
    if (c7 === b3)
      break;
    for (; null === c7.sibling; ) {
      if (null === c7.return || c7.return === b3)
        return;
      c7 = c7.return;
      4 === c7.tag && (d4 = false);
    }
    c7.sibling.return = c7.return;
    c7 = c7.sibling;
  }
}
function ij(a4, b3) {
  switch (b3.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      var c7 = b3.updateQueue;
      c7 = null !== c7 ? c7.lastEffect : null;
      if (null !== c7) {
        var d4 = c7 = c7.next;
        do
          3 === (d4.tag & 3) && (a4 = d4.destroy, d4.destroy = void 0, void 0 !== a4 && a4()), d4 = d4.next;
        while (d4 !== c7);
      }
      return;
    case 1:
      return;
    case 5:
      c7 = b3.stateNode;
      if (null != c7) {
        d4 = b3.memoizedProps;
        var e3 = null !== a4 ? a4.memoizedProps : d4;
        a4 = b3.type;
        var f2 = b3.updateQueue;
        b3.updateQueue = null;
        if (null !== f2) {
          c7[xf] = d4;
          "input" === a4 && "radio" === d4.type && null != d4.name && $a(c7, d4);
          wb(a4, e3);
          b3 = wb(a4, d4);
          for (e3 = 0; e3 < f2.length; e3 += 2) {
            var g2 = f2[e3], h4 = f2[e3 + 1];
            "style" === g2 ? tb(c7, h4) : "dangerouslySetInnerHTML" === g2 ? ob(c7, h4) : "children" === g2 ? pb(c7, h4) : qa(c7, g2, h4, b3);
          }
          switch (a4) {
            case "input":
              ab(c7, d4);
              break;
            case "textarea":
              ib(c7, d4);
              break;
            case "select":
              a4 = c7._wrapperState.wasMultiple, c7._wrapperState.wasMultiple = !!d4.multiple, f2 = d4.value, null != f2 ? fb(c7, !!d4.multiple, f2, false) : a4 !== !!d4.multiple && (null != d4.defaultValue ? fb(c7, !!d4.multiple, d4.defaultValue, true) : fb(c7, !!d4.multiple, d4.multiple ? [] : "", false));
          }
        }
      }
      return;
    case 6:
      if (null === b3.stateNode)
        throw Error(y$2(162));
      b3.stateNode.nodeValue = b3.memoizedProps;
      return;
    case 3:
      c7 = b3.stateNode;
      c7.hydrate && (c7.hydrate = false, Cc(c7.containerInfo));
      return;
    case 12:
      return;
    case 13:
      null !== b3.memoizedState && (jj = O$1(), aj(b3.child, true));
      kj(b3);
      return;
    case 19:
      kj(b3);
      return;
    case 17:
      return;
    case 23:
    case 24:
      aj(b3, null !== b3.memoizedState);
      return;
  }
  throw Error(y$2(163));
}
function kj(a4) {
  var b3 = a4.updateQueue;
  if (null !== b3) {
    a4.updateQueue = null;
    var c7 = a4.stateNode;
    null === c7 && (c7 = a4.stateNode = new Ui());
    b3.forEach(function(b4) {
      var d4 = lj.bind(null, a4, b4);
      c7.has(b4) || (c7.add(b4), b4.then(d4, d4));
    });
  }
}
function mj(a4, b3) {
  return null !== a4 && (a4 = a4.memoizedState, null === a4 || null !== a4.dehydrated) ? (b3 = b3.memoizedState, null !== b3 && null === b3.dehydrated) : false;
}
var nj = Math.ceil, oj = ra.ReactCurrentDispatcher, pj = ra.ReactCurrentOwner, X$1 = 0, U$1 = null, Y$1 = null, W$1 = 0, qj = 0, rj = Bf(0), V$1 = 0, sj = null, tj = 0, Dg = 0, Hi = 0, uj = 0, vj = null, jj = 0, Ji = Infinity;
function wj() {
  Ji = O$1() + 500;
}
var Z$1 = null, Qi = false, Ri = null, Ti = null, xj = false, yj = null, zj = 90, Aj = [], Bj = [], Cj = null, Dj = 0, Ej = null, Fj = -1, Gj = 0, Hj = 0, Ij = null, Jj = false;
function Hg() {
  return 0 !== (X$1 & 48) ? O$1() : -1 !== Fj ? Fj : Fj = O$1();
}
function Ig(a4) {
  a4 = a4.mode;
  if (0 === (a4 & 2))
    return 1;
  if (0 === (a4 & 4))
    return 99 === eg() ? 1 : 2;
  0 === Gj && (Gj = tj);
  if (0 !== kg.transition) {
    0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);
    a4 = Gj;
    var b3 = 4186112 & ~Hj;
    b3 &= -b3;
    0 === b3 && (a4 = 4186112 & ~a4, b3 = a4 & -a4, 0 === b3 && (b3 = 8192));
    return b3;
  }
  a4 = eg();
  0 !== (X$1 & 4) && 98 === a4 ? a4 = Xc(12, Gj) : (a4 = Sc(a4), a4 = Xc(a4, Gj));
  return a4;
}
function Jg(a4, b3, c7) {
  if (50 < Dj)
    throw Dj = 0, Ej = null, Error(y$2(185));
  a4 = Kj(a4, b3);
  if (null === a4)
    return null;
  $c(a4, b3, c7);
  a4 === U$1 && (Hi |= b3, 4 === V$1 && Ii(a4, W$1));
  var d4 = eg();
  1 === b3 ? 0 !== (X$1 & 8) && 0 === (X$1 & 48) ? Lj(a4) : (Mj(a4, c7), 0 === X$1 && (wj(), ig())) : (0 === (X$1 & 4) || 98 !== d4 && 99 !== d4 || (null === Cj ? Cj = /* @__PURE__ */ new Set([a4]) : Cj.add(a4)), Mj(a4, c7));
  vj = a4;
}
function Kj(a4, b3) {
  a4.lanes |= b3;
  var c7 = a4.alternate;
  null !== c7 && (c7.lanes |= b3);
  c7 = a4;
  for (a4 = a4.return; null !== a4; )
    a4.childLanes |= b3, c7 = a4.alternate, null !== c7 && (c7.childLanes |= b3), c7 = a4, a4 = a4.return;
  return 3 === c7.tag ? c7.stateNode : null;
}
function Mj(a4, b3) {
  for (var c7 = a4.callbackNode, d4 = a4.suspendedLanes, e3 = a4.pingedLanes, f2 = a4.expirationTimes, g2 = a4.pendingLanes; 0 < g2; ) {
    var h4 = 31 - Vc(g2), k3 = 1 << h4, l2 = f2[h4];
    if (-1 === l2) {
      if (0 === (k3 & d4) || 0 !== (k3 & e3)) {
        l2 = b3;
        Rc(k3);
        var n2 = F$1;
        f2[h4] = 10 <= n2 ? l2 + 250 : 6 <= n2 ? l2 + 5e3 : -1;
      }
    } else
      l2 <= b3 && (a4.expiredLanes |= k3);
    g2 &= ~k3;
  }
  d4 = Uc(a4, a4 === U$1 ? W$1 : 0);
  b3 = F$1;
  if (0 === d4)
    null !== c7 && (c7 !== Zf && Pf(c7), a4.callbackNode = null, a4.callbackPriority = 0);
  else {
    if (null !== c7) {
      if (a4.callbackPriority === b3)
        return;
      c7 !== Zf && Pf(c7);
    }
    15 === b3 ? (c7 = Lj.bind(null, a4), null === ag ? (ag = [c7], bg = Of(Uf, jg)) : ag.push(c7), c7 = Zf) : 14 === b3 ? c7 = hg(99, Lj.bind(null, a4)) : (c7 = Tc(b3), c7 = hg(c7, Nj.bind(null, a4)));
    a4.callbackPriority = b3;
    a4.callbackNode = c7;
  }
}
function Nj(a4) {
  Fj = -1;
  Hj = Gj = 0;
  if (0 !== (X$1 & 48))
    throw Error(y$2(327));
  var b3 = a4.callbackNode;
  if (Oj() && a4.callbackNode !== b3)
    return null;
  var c7 = Uc(a4, a4 === U$1 ? W$1 : 0);
  if (0 === c7)
    return null;
  var d4 = c7;
  var e3 = X$1;
  X$1 |= 16;
  var f2 = Pj();
  if (U$1 !== a4 || W$1 !== d4)
    wj(), Qj(a4, d4);
  do
    try {
      Rj();
      break;
    } catch (h4) {
      Sj(a4, h4);
    }
  while (1);
  qg();
  oj.current = f2;
  X$1 = e3;
  null !== Y$1 ? d4 = 0 : (U$1 = null, W$1 = 0, d4 = V$1);
  if (0 !== (tj & Hi))
    Qj(a4, 0);
  else if (0 !== d4) {
    2 === d4 && (X$1 |= 64, a4.hydrate && (a4.hydrate = false, qf(a4.containerInfo)), c7 = Wc(a4), 0 !== c7 && (d4 = Tj(a4, c7)));
    if (1 === d4)
      throw b3 = sj, Qj(a4, 0), Ii(a4, c7), Mj(a4, O$1()), b3;
    a4.finishedWork = a4.current.alternate;
    a4.finishedLanes = c7;
    switch (d4) {
      case 0:
      case 1:
        throw Error(y$2(345));
      case 2:
        Uj(a4);
        break;
      case 3:
        Ii(a4, c7);
        if ((c7 & 62914560) === c7 && (d4 = jj + 500 - O$1(), 10 < d4)) {
          if (0 !== Uc(a4, 0))
            break;
          e3 = a4.suspendedLanes;
          if ((e3 & c7) !== c7) {
            Hg();
            a4.pingedLanes |= a4.suspendedLanes & e3;
            break;
          }
          a4.timeoutHandle = of(Uj.bind(null, a4), d4);
          break;
        }
        Uj(a4);
        break;
      case 4:
        Ii(a4, c7);
        if ((c7 & 4186112) === c7)
          break;
        d4 = a4.eventTimes;
        for (e3 = -1; 0 < c7; ) {
          var g2 = 31 - Vc(c7);
          f2 = 1 << g2;
          g2 = d4[g2];
          g2 > e3 && (e3 = g2);
          c7 &= ~f2;
        }
        c7 = e3;
        c7 = O$1() - c7;
        c7 = (120 > c7 ? 120 : 480 > c7 ? 480 : 1080 > c7 ? 1080 : 1920 > c7 ? 1920 : 3e3 > c7 ? 3e3 : 4320 > c7 ? 4320 : 1960 * nj(c7 / 1960)) - c7;
        if (10 < c7) {
          a4.timeoutHandle = of(Uj.bind(null, a4), c7);
          break;
        }
        Uj(a4);
        break;
      case 5:
        Uj(a4);
        break;
      default:
        throw Error(y$2(329));
    }
  }
  Mj(a4, O$1());
  return a4.callbackNode === b3 ? Nj.bind(null, a4) : null;
}
function Ii(a4, b3) {
  b3 &= ~uj;
  b3 &= ~Hi;
  a4.suspendedLanes |= b3;
  a4.pingedLanes &= ~b3;
  for (a4 = a4.expirationTimes; 0 < b3; ) {
    var c7 = 31 - Vc(b3), d4 = 1 << c7;
    a4[c7] = -1;
    b3 &= ~d4;
  }
}
function Lj(a4) {
  if (0 !== (X$1 & 48))
    throw Error(y$2(327));
  Oj();
  if (a4 === U$1 && 0 !== (a4.expiredLanes & W$1)) {
    var b3 = W$1;
    var c7 = Tj(a4, b3);
    0 !== (tj & Hi) && (b3 = Uc(a4, b3), c7 = Tj(a4, b3));
  } else
    b3 = Uc(a4, 0), c7 = Tj(a4, b3);
  0 !== a4.tag && 2 === c7 && (X$1 |= 64, a4.hydrate && (a4.hydrate = false, qf(a4.containerInfo)), b3 = Wc(a4), 0 !== b3 && (c7 = Tj(a4, b3)));
  if (1 === c7)
    throw c7 = sj, Qj(a4, 0), Ii(a4, b3), Mj(a4, O$1()), c7;
  a4.finishedWork = a4.current.alternate;
  a4.finishedLanes = b3;
  Uj(a4);
  Mj(a4, O$1());
  return null;
}
function Vj() {
  if (null !== Cj) {
    var a4 = Cj;
    Cj = null;
    a4.forEach(function(a5) {
      a5.expiredLanes |= 24 & a5.pendingLanes;
      Mj(a5, O$1());
    });
  }
  ig();
}
function Wj(a4, b3) {
  var c7 = X$1;
  X$1 |= 1;
  try {
    return a4(b3);
  } finally {
    X$1 = c7, 0 === X$1 && (wj(), ig());
  }
}
function Xj(a4, b3) {
  var c7 = X$1;
  X$1 &= -2;
  X$1 |= 8;
  try {
    return a4(b3);
  } finally {
    X$1 = c7, 0 === X$1 && (wj(), ig());
  }
}
function ni(a4, b3) {
  I$1(rj, qj);
  qj |= b3;
  tj |= b3;
}
function Ki() {
  qj = rj.current;
  H$1(rj);
}
function Qj(a4, b3) {
  a4.finishedWork = null;
  a4.finishedLanes = 0;
  var c7 = a4.timeoutHandle;
  -1 !== c7 && (a4.timeoutHandle = -1, pf(c7));
  if (null !== Y$1)
    for (c7 = Y$1.return; null !== c7; ) {
      var d4 = c7;
      switch (d4.tag) {
        case 1:
          d4 = d4.type.childContextTypes;
          null !== d4 && void 0 !== d4 && Gf();
          break;
        case 3:
          fh();
          H$1(N$1);
          H$1(M$1);
          uh();
          break;
        case 5:
          hh(d4);
          break;
        case 4:
          fh();
          break;
        case 13:
          H$1(P$2);
          break;
        case 19:
          H$1(P$2);
          break;
        case 10:
          rg(d4);
          break;
        case 23:
        case 24:
          Ki();
      }
      c7 = c7.return;
    }
  U$1 = a4;
  Y$1 = Tg(a4.current, null);
  W$1 = qj = tj = b3;
  V$1 = 0;
  sj = null;
  uj = Hi = Dg = 0;
}
function Sj(a4, b3) {
  do {
    var c7 = Y$1;
    try {
      qg();
      vh.current = Gh;
      if (yh) {
        for (var d4 = R$1.memoizedState; null !== d4; ) {
          var e3 = d4.queue;
          null !== e3 && (e3.pending = null);
          d4 = d4.next;
        }
        yh = false;
      }
      xh = 0;
      T$1 = S$1 = R$1 = null;
      zh = false;
      pj.current = null;
      if (null === c7 || null === c7.return) {
        V$1 = 1;
        sj = b3;
        Y$1 = null;
        break;
      }
      a: {
        var f2 = a4, g2 = c7.return, h4 = c7, k3 = b3;
        b3 = W$1;
        h4.flags |= 2048;
        h4.firstEffect = h4.lastEffect = null;
        if (null !== k3 && "object" === typeof k3 && "function" === typeof k3.then) {
          var l2 = k3;
          if (0 === (h4.mode & 2)) {
            var n2 = h4.alternate;
            n2 ? (h4.updateQueue = n2.updateQueue, h4.memoizedState = n2.memoizedState, h4.lanes = n2.lanes) : (h4.updateQueue = null, h4.memoizedState = null);
          }
          var A2 = 0 !== (P$2.current & 1), p2 = g2;
          do {
            var C2;
            if (C2 = 13 === p2.tag) {
              var x3 = p2.memoizedState;
              if (null !== x3)
                C2 = null !== x3.dehydrated ? true : false;
              else {
                var w3 = p2.memoizedProps;
                C2 = void 0 === w3.fallback ? false : true !== w3.unstable_avoidThisFallback ? true : A2 ? false : true;
              }
            }
            if (C2) {
              var z3 = p2.updateQueue;
              if (null === z3) {
                var u3 = /* @__PURE__ */ new Set();
                u3.add(l2);
                p2.updateQueue = u3;
              } else
                z3.add(l2);
              if (0 === (p2.mode & 2)) {
                p2.flags |= 64;
                h4.flags |= 16384;
                h4.flags &= -2981;
                if (1 === h4.tag)
                  if (null === h4.alternate)
                    h4.tag = 17;
                  else {
                    var t3 = zg(-1, 1);
                    t3.tag = 2;
                    Ag(h4, t3);
                  }
                h4.lanes |= 1;
                break a;
              }
              k3 = void 0;
              h4 = b3;
              var q3 = f2.pingCache;
              null === q3 ? (q3 = f2.pingCache = new Oi(), k3 = /* @__PURE__ */ new Set(), q3.set(l2, k3)) : (k3 = q3.get(l2), void 0 === k3 && (k3 = /* @__PURE__ */ new Set(), q3.set(l2, k3)));
              if (!k3.has(h4)) {
                k3.add(h4);
                var v2 = Yj.bind(null, f2, l2, h4);
                l2.then(v2, v2);
              }
              p2.flags |= 4096;
              p2.lanes = b3;
              break a;
            }
            p2 = p2.return;
          } while (null !== p2);
          k3 = Error((Ra(h4.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
        }
        5 !== V$1 && (V$1 = 2);
        k3 = Mi(k3, h4);
        p2 = g2;
        do {
          switch (p2.tag) {
            case 3:
              f2 = k3;
              p2.flags |= 4096;
              b3 &= -b3;
              p2.lanes |= b3;
              var J2 = Pi(p2, f2, b3);
              Bg(p2, J2);
              break a;
            case 1:
              f2 = k3;
              var K3 = p2.type, Q3 = p2.stateNode;
              if (0 === (p2.flags & 64) && ("function" === typeof K3.getDerivedStateFromError || null !== Q3 && "function" === typeof Q3.componentDidCatch && (null === Ti || !Ti.has(Q3)))) {
                p2.flags |= 4096;
                b3 &= -b3;
                p2.lanes |= b3;
                var L3 = Si(p2, f2, b3);
                Bg(p2, L3);
                break a;
              }
          }
          p2 = p2.return;
        } while (null !== p2);
      }
      Zj(c7);
    } catch (va) {
      b3 = va;
      Y$1 === c7 && null !== c7 && (Y$1 = c7 = c7.return);
      continue;
    }
    break;
  } while (1);
}
function Pj() {
  var a4 = oj.current;
  oj.current = Gh;
  return null === a4 ? Gh : a4;
}
function Tj(a4, b3) {
  var c7 = X$1;
  X$1 |= 16;
  var d4 = Pj();
  U$1 === a4 && W$1 === b3 || Qj(a4, b3);
  do
    try {
      ak();
      break;
    } catch (e3) {
      Sj(a4, e3);
    }
  while (1);
  qg();
  X$1 = c7;
  oj.current = d4;
  if (null !== Y$1)
    throw Error(y$2(261));
  U$1 = null;
  W$1 = 0;
  return V$1;
}
function ak() {
  for (; null !== Y$1; )
    bk(Y$1);
}
function Rj() {
  for (; null !== Y$1 && !Qf(); )
    bk(Y$1);
}
function bk(a4) {
  var b3 = ck(a4.alternate, a4, qj);
  a4.memoizedProps = a4.pendingProps;
  null === b3 ? Zj(a4) : Y$1 = b3;
  pj.current = null;
}
function Zj(a4) {
  var b3 = a4;
  do {
    var c7 = b3.alternate;
    a4 = b3.return;
    if (0 === (b3.flags & 2048)) {
      c7 = Gi(c7, b3, qj);
      if (null !== c7) {
        Y$1 = c7;
        return;
      }
      c7 = b3;
      if (24 !== c7.tag && 23 !== c7.tag || null === c7.memoizedState || 0 !== (qj & 1073741824) || 0 === (c7.mode & 4)) {
        for (var d4 = 0, e3 = c7.child; null !== e3; )
          d4 |= e3.lanes | e3.childLanes, e3 = e3.sibling;
        c7.childLanes = d4;
      }
      null !== a4 && 0 === (a4.flags & 2048) && (null === a4.firstEffect && (a4.firstEffect = b3.firstEffect), null !== b3.lastEffect && (null !== a4.lastEffect && (a4.lastEffect.nextEffect = b3.firstEffect), a4.lastEffect = b3.lastEffect), 1 < b3.flags && (null !== a4.lastEffect ? a4.lastEffect.nextEffect = b3 : a4.firstEffect = b3, a4.lastEffect = b3));
    } else {
      c7 = Li(b3);
      if (null !== c7) {
        c7.flags &= 2047;
        Y$1 = c7;
        return;
      }
      null !== a4 && (a4.firstEffect = a4.lastEffect = null, a4.flags |= 2048);
    }
    b3 = b3.sibling;
    if (null !== b3) {
      Y$1 = b3;
      return;
    }
    Y$1 = b3 = a4;
  } while (null !== b3);
  0 === V$1 && (V$1 = 5);
}
function Uj(a4) {
  var b3 = eg();
  gg(99, dk.bind(null, a4, b3));
  return null;
}
function dk(a4, b3) {
  do
    Oj();
  while (null !== yj);
  if (0 !== (X$1 & 48))
    throw Error(y$2(327));
  var c7 = a4.finishedWork;
  if (null === c7)
    return null;
  a4.finishedWork = null;
  a4.finishedLanes = 0;
  if (c7 === a4.current)
    throw Error(y$2(177));
  a4.callbackNode = null;
  var d4 = c7.lanes | c7.childLanes, e3 = d4, f2 = a4.pendingLanes & ~e3;
  a4.pendingLanes = e3;
  a4.suspendedLanes = 0;
  a4.pingedLanes = 0;
  a4.expiredLanes &= e3;
  a4.mutableReadLanes &= e3;
  a4.entangledLanes &= e3;
  e3 = a4.entanglements;
  for (var g2 = a4.eventTimes, h4 = a4.expirationTimes; 0 < f2; ) {
    var k3 = 31 - Vc(f2), l2 = 1 << k3;
    e3[k3] = 0;
    g2[k3] = -1;
    h4[k3] = -1;
    f2 &= ~l2;
  }
  null !== Cj && 0 === (d4 & 24) && Cj.has(a4) && Cj.delete(a4);
  a4 === U$1 && (Y$1 = U$1 = null, W$1 = 0);
  1 < c7.flags ? null !== c7.lastEffect ? (c7.lastEffect.nextEffect = c7, d4 = c7.firstEffect) : d4 = c7 : d4 = c7.firstEffect;
  if (null !== d4) {
    e3 = X$1;
    X$1 |= 32;
    pj.current = null;
    kf = fd;
    g2 = Ne$1();
    if (Oe$1(g2)) {
      if ("selectionStart" in g2)
        h4 = { start: g2.selectionStart, end: g2.selectionEnd };
      else
        a:
          if (h4 = (h4 = g2.ownerDocument) && h4.defaultView || window, (l2 = h4.getSelection && h4.getSelection()) && 0 !== l2.rangeCount) {
            h4 = l2.anchorNode;
            f2 = l2.anchorOffset;
            k3 = l2.focusNode;
            l2 = l2.focusOffset;
            try {
              h4.nodeType, k3.nodeType;
            } catch (va) {
              h4 = null;
              break a;
            }
            var n2 = 0, A2 = -1, p2 = -1, C2 = 0, x3 = 0, w3 = g2, z3 = null;
            b:
              for (; ; ) {
                for (var u3; ; ) {
                  w3 !== h4 || 0 !== f2 && 3 !== w3.nodeType || (A2 = n2 + f2);
                  w3 !== k3 || 0 !== l2 && 3 !== w3.nodeType || (p2 = n2 + l2);
                  3 === w3.nodeType && (n2 += w3.nodeValue.length);
                  if (null === (u3 = w3.firstChild))
                    break;
                  z3 = w3;
                  w3 = u3;
                }
                for (; ; ) {
                  if (w3 === g2)
                    break b;
                  z3 === h4 && ++C2 === f2 && (A2 = n2);
                  z3 === k3 && ++x3 === l2 && (p2 = n2);
                  if (null !== (u3 = w3.nextSibling))
                    break;
                  w3 = z3;
                  z3 = w3.parentNode;
                }
                w3 = u3;
              }
            h4 = -1 === A2 || -1 === p2 ? null : { start: A2, end: p2 };
          } else
            h4 = null;
      h4 = h4 || { start: 0, end: 0 };
    } else
      h4 = null;
    lf = { focusedElem: g2, selectionRange: h4 };
    fd = false;
    Ij = null;
    Jj = false;
    Z$1 = d4;
    do
      try {
        ek();
      } catch (va) {
        if (null === Z$1)
          throw Error(y$2(330));
        Wi(Z$1, va);
        Z$1 = Z$1.nextEffect;
      }
    while (null !== Z$1);
    Ij = null;
    Z$1 = d4;
    do
      try {
        for (g2 = a4; null !== Z$1; ) {
          var t3 = Z$1.flags;
          t3 & 16 && pb(Z$1.stateNode, "");
          if (t3 & 128) {
            var q3 = Z$1.alternate;
            if (null !== q3) {
              var v2 = q3.ref;
              null !== v2 && ("function" === typeof v2 ? v2(null) : v2.current = null);
            }
          }
          switch (t3 & 1038) {
            case 2:
              fj(Z$1);
              Z$1.flags &= -3;
              break;
            case 6:
              fj(Z$1);
              Z$1.flags &= -3;
              ij(Z$1.alternate, Z$1);
              break;
            case 1024:
              Z$1.flags &= -1025;
              break;
            case 1028:
              Z$1.flags &= -1025;
              ij(Z$1.alternate, Z$1);
              break;
            case 4:
              ij(Z$1.alternate, Z$1);
              break;
            case 8:
              h4 = Z$1;
              cj(g2, h4);
              var J2 = h4.alternate;
              dj(h4);
              null !== J2 && dj(J2);
          }
          Z$1 = Z$1.nextEffect;
        }
      } catch (va) {
        if (null === Z$1)
          throw Error(y$2(330));
        Wi(Z$1, va);
        Z$1 = Z$1.nextEffect;
      }
    while (null !== Z$1);
    v2 = lf;
    q3 = Ne$1();
    t3 = v2.focusedElem;
    g2 = v2.selectionRange;
    if (q3 !== t3 && t3 && t3.ownerDocument && Me$1(t3.ownerDocument.documentElement, t3)) {
      null !== g2 && Oe$1(t3) && (q3 = g2.start, v2 = g2.end, void 0 === v2 && (v2 = q3), "selectionStart" in t3 ? (t3.selectionStart = q3, t3.selectionEnd = Math.min(v2, t3.value.length)) : (v2 = (q3 = t3.ownerDocument || document) && q3.defaultView || window, v2.getSelection && (v2 = v2.getSelection(), h4 = t3.textContent.length, J2 = Math.min(g2.start, h4), g2 = void 0 === g2.end ? J2 : Math.min(g2.end, h4), !v2.extend && J2 > g2 && (h4 = g2, g2 = J2, J2 = h4), h4 = Le$1(t3, J2), f2 = Le$1(t3, g2), h4 && f2 && (1 !== v2.rangeCount || v2.anchorNode !== h4.node || v2.anchorOffset !== h4.offset || v2.focusNode !== f2.node || v2.focusOffset !== f2.offset) && (q3 = q3.createRange(), q3.setStart(h4.node, h4.offset), v2.removeAllRanges(), J2 > g2 ? (v2.addRange(q3), v2.extend(f2.node, f2.offset)) : (q3.setEnd(f2.node, f2.offset), v2.addRange(q3))))));
      q3 = [];
      for (v2 = t3; v2 = v2.parentNode; )
        1 === v2.nodeType && q3.push({ element: v2, left: v2.scrollLeft, top: v2.scrollTop });
      "function" === typeof t3.focus && t3.focus();
      for (t3 = 0; t3 < q3.length; t3++)
        v2 = q3[t3], v2.element.scrollLeft = v2.left, v2.element.scrollTop = v2.top;
    }
    fd = !!kf;
    lf = kf = null;
    a4.current = c7;
    Z$1 = d4;
    do
      try {
        for (t3 = a4; null !== Z$1; ) {
          var K3 = Z$1.flags;
          K3 & 36 && Yi(t3, Z$1.alternate, Z$1);
          if (K3 & 128) {
            q3 = void 0;
            var Q3 = Z$1.ref;
            if (null !== Q3) {
              var L3 = Z$1.stateNode;
              switch (Z$1.tag) {
                case 5:
                  q3 = L3;
                  break;
                default:
                  q3 = L3;
              }
              "function" === typeof Q3 ? Q3(q3) : Q3.current = q3;
            }
          }
          Z$1 = Z$1.nextEffect;
        }
      } catch (va) {
        if (null === Z$1)
          throw Error(y$2(330));
        Wi(Z$1, va);
        Z$1 = Z$1.nextEffect;
      }
    while (null !== Z$1);
    Z$1 = null;
    $f();
    X$1 = e3;
  } else
    a4.current = c7;
  if (xj)
    xj = false, yj = a4, zj = b3;
  else
    for (Z$1 = d4; null !== Z$1; )
      b3 = Z$1.nextEffect, Z$1.nextEffect = null, Z$1.flags & 8 && (K3 = Z$1, K3.sibling = null, K3.stateNode = null), Z$1 = b3;
  d4 = a4.pendingLanes;
  0 === d4 && (Ti = null);
  1 === d4 ? a4 === Ej ? Dj++ : (Dj = 0, Ej = a4) : Dj = 0;
  c7 = c7.stateNode;
  if (Mf && "function" === typeof Mf.onCommitFiberRoot)
    try {
      Mf.onCommitFiberRoot(Lf, c7, void 0, 64 === (c7.current.flags & 64));
    } catch (va) {
    }
  Mj(a4, O$1());
  if (Qi)
    throw Qi = false, a4 = Ri, Ri = null, a4;
  if (0 !== (X$1 & 8))
    return null;
  ig();
  return null;
}
function ek() {
  for (; null !== Z$1; ) {
    var a4 = Z$1.alternate;
    Jj || null === Ij || (0 !== (Z$1.flags & 8) ? dc(Z$1, Ij) && (Jj = true) : 13 === Z$1.tag && mj(a4, Z$1) && dc(Z$1, Ij) && (Jj = true));
    var b3 = Z$1.flags;
    0 !== (b3 & 256) && Xi(a4, Z$1);
    0 === (b3 & 512) || xj || (xj = true, hg(97, function() {
      Oj();
      return null;
    }));
    Z$1 = Z$1.nextEffect;
  }
}
function Oj() {
  if (90 !== zj) {
    var a4 = 97 < zj ? 97 : zj;
    zj = 90;
    return gg(a4, fk);
  }
  return false;
}
function $i(a4, b3) {
  Aj.push(b3, a4);
  xj || (xj = true, hg(97, function() {
    Oj();
    return null;
  }));
}
function Zi(a4, b3) {
  Bj.push(b3, a4);
  xj || (xj = true, hg(97, function() {
    Oj();
    return null;
  }));
}
function fk() {
  if (null === yj)
    return false;
  var a4 = yj;
  yj = null;
  if (0 !== (X$1 & 48))
    throw Error(y$2(331));
  var b3 = X$1;
  X$1 |= 32;
  var c7 = Bj;
  Bj = [];
  for (var d4 = 0; d4 < c7.length; d4 += 2) {
    var e3 = c7[d4], f2 = c7[d4 + 1], g2 = e3.destroy;
    e3.destroy = void 0;
    if ("function" === typeof g2)
      try {
        g2();
      } catch (k3) {
        if (null === f2)
          throw Error(y$2(330));
        Wi(f2, k3);
      }
  }
  c7 = Aj;
  Aj = [];
  for (d4 = 0; d4 < c7.length; d4 += 2) {
    e3 = c7[d4];
    f2 = c7[d4 + 1];
    try {
      var h4 = e3.create;
      e3.destroy = h4();
    } catch (k3) {
      if (null === f2)
        throw Error(y$2(330));
      Wi(f2, k3);
    }
  }
  for (h4 = a4.current.firstEffect; null !== h4; )
    a4 = h4.nextEffect, h4.nextEffect = null, h4.flags & 8 && (h4.sibling = null, h4.stateNode = null), h4 = a4;
  X$1 = b3;
  ig();
  return true;
}
function gk(a4, b3, c7) {
  b3 = Mi(c7, b3);
  b3 = Pi(a4, b3, 1);
  Ag(a4, b3);
  b3 = Hg();
  a4 = Kj(a4, 1);
  null !== a4 && ($c(a4, 1, b3), Mj(a4, b3));
}
function Wi(a4, b3) {
  if (3 === a4.tag)
    gk(a4, a4, b3);
  else
    for (var c7 = a4.return; null !== c7; ) {
      if (3 === c7.tag) {
        gk(c7, a4, b3);
        break;
      } else if (1 === c7.tag) {
        var d4 = c7.stateNode;
        if ("function" === typeof c7.type.getDerivedStateFromError || "function" === typeof d4.componentDidCatch && (null === Ti || !Ti.has(d4))) {
          a4 = Mi(b3, a4);
          var e3 = Si(c7, a4, 1);
          Ag(c7, e3);
          e3 = Hg();
          c7 = Kj(c7, 1);
          if (null !== c7)
            $c(c7, 1, e3), Mj(c7, e3);
          else if ("function" === typeof d4.componentDidCatch && (null === Ti || !Ti.has(d4)))
            try {
              d4.componentDidCatch(b3, a4);
            } catch (f2) {
            }
          break;
        }
      }
      c7 = c7.return;
    }
}
function Yj(a4, b3, c7) {
  var d4 = a4.pingCache;
  null !== d4 && d4.delete(b3);
  b3 = Hg();
  a4.pingedLanes |= a4.suspendedLanes & c7;
  U$1 === a4 && (W$1 & c7) === c7 && (4 === V$1 || 3 === V$1 && (W$1 & 62914560) === W$1 && 500 > O$1() - jj ? Qj(a4, 0) : uj |= c7);
  Mj(a4, b3);
}
function lj(a4, b3) {
  var c7 = a4.stateNode;
  null !== c7 && c7.delete(b3);
  b3 = 0;
  0 === b3 && (b3 = a4.mode, 0 === (b3 & 2) ? b3 = 1 : 0 === (b3 & 4) ? b3 = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b3 = Yc(62914560 & ~Gj), 0 === b3 && (b3 = 4194304)));
  c7 = Hg();
  a4 = Kj(a4, b3);
  null !== a4 && ($c(a4, b3, c7), Mj(a4, c7));
}
var ck;
ck = function(a4, b3, c7) {
  var d4 = b3.lanes;
  if (null !== a4)
    if (a4.memoizedProps !== b3.pendingProps || N$1.current)
      ug = true;
    else if (0 !== (c7 & d4))
      ug = 0 !== (a4.flags & 16384) ? true : false;
    else {
      ug = false;
      switch (b3.tag) {
        case 3:
          ri(b3);
          sh();
          break;
        case 5:
          gh(b3);
          break;
        case 1:
          Ff(b3.type) && Jf(b3);
          break;
        case 4:
          eh(b3, b3.stateNode.containerInfo);
          break;
        case 10:
          d4 = b3.memoizedProps.value;
          var e3 = b3.type._context;
          I$1(mg, e3._currentValue);
          e3._currentValue = d4;
          break;
        case 13:
          if (null !== b3.memoizedState) {
            if (0 !== (c7 & b3.child.childLanes))
              return ti(a4, b3, c7);
            I$1(P$2, P$2.current & 1);
            b3 = hi(a4, b3, c7);
            return null !== b3 ? b3.sibling : null;
          }
          I$1(P$2, P$2.current & 1);
          break;
        case 19:
          d4 = 0 !== (c7 & b3.childLanes);
          if (0 !== (a4.flags & 64)) {
            if (d4)
              return Ai(a4, b3, c7);
            b3.flags |= 64;
          }
          e3 = b3.memoizedState;
          null !== e3 && (e3.rendering = null, e3.tail = null, e3.lastEffect = null);
          I$1(P$2, P$2.current);
          if (d4)
            break;
          else
            return null;
        case 23:
        case 24:
          return b3.lanes = 0, mi(a4, b3, c7);
      }
      return hi(a4, b3, c7);
    }
  else
    ug = false;
  b3.lanes = 0;
  switch (b3.tag) {
    case 2:
      d4 = b3.type;
      null !== a4 && (a4.alternate = null, b3.alternate = null, b3.flags |= 2);
      a4 = b3.pendingProps;
      e3 = Ef(b3, M$1.current);
      tg(b3, c7);
      e3 = Ch(null, b3, d4, a4, e3, c7);
      b3.flags |= 1;
      if ("object" === typeof e3 && null !== e3 && "function" === typeof e3.render && void 0 === e3.$$typeof) {
        b3.tag = 1;
        b3.memoizedState = null;
        b3.updateQueue = null;
        if (Ff(d4)) {
          var f2 = true;
          Jf(b3);
        } else
          f2 = false;
        b3.memoizedState = null !== e3.state && void 0 !== e3.state ? e3.state : null;
        xg(b3);
        var g2 = d4.getDerivedStateFromProps;
        "function" === typeof g2 && Gg(b3, d4, g2, a4);
        e3.updater = Kg;
        b3.stateNode = e3;
        e3._reactInternals = b3;
        Og(b3, d4, a4, c7);
        b3 = qi(null, b3, d4, true, f2, c7);
      } else
        b3.tag = 0, fi(null, b3, e3, c7), b3 = b3.child;
      return b3;
    case 16:
      e3 = b3.elementType;
      a: {
        null !== a4 && (a4.alternate = null, b3.alternate = null, b3.flags |= 2);
        a4 = b3.pendingProps;
        f2 = e3._init;
        e3 = f2(e3._payload);
        b3.type = e3;
        f2 = b3.tag = hk(e3);
        a4 = lg(e3, a4);
        switch (f2) {
          case 0:
            b3 = li(null, b3, e3, a4, c7);
            break a;
          case 1:
            b3 = pi(null, b3, e3, a4, c7);
            break a;
          case 11:
            b3 = gi(null, b3, e3, a4, c7);
            break a;
          case 14:
            b3 = ii(null, b3, e3, lg(e3.type, a4), d4, c7);
            break a;
        }
        throw Error(y$2(306, e3, ""));
      }
      return b3;
    case 0:
      return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : lg(d4, e3), li(a4, b3, d4, e3, c7);
    case 1:
      return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : lg(d4, e3), pi(a4, b3, d4, e3, c7);
    case 3:
      ri(b3);
      d4 = b3.updateQueue;
      if (null === a4 || null === d4)
        throw Error(y$2(282));
      d4 = b3.pendingProps;
      e3 = b3.memoizedState;
      e3 = null !== e3 ? e3.element : null;
      yg(a4, b3);
      Cg(b3, d4, null, c7);
      d4 = b3.memoizedState.element;
      if (d4 === e3)
        sh(), b3 = hi(a4, b3, c7);
      else {
        e3 = b3.stateNode;
        if (f2 = e3.hydrate)
          kh = rf(b3.stateNode.containerInfo.firstChild), jh = b3, f2 = lh = true;
        if (f2) {
          a4 = e3.mutableSourceEagerHydrationData;
          if (null != a4)
            for (e3 = 0; e3 < a4.length; e3 += 2)
              f2 = a4[e3], f2._workInProgressVersionPrimary = a4[e3 + 1], th.push(f2);
          c7 = Zg(b3, null, d4, c7);
          for (b3.child = c7; c7; )
            c7.flags = c7.flags & -3 | 1024, c7 = c7.sibling;
        } else
          fi(a4, b3, d4, c7), sh();
        b3 = b3.child;
      }
      return b3;
    case 5:
      return gh(b3), null === a4 && ph(b3), d4 = b3.type, e3 = b3.pendingProps, f2 = null !== a4 ? a4.memoizedProps : null, g2 = e3.children, nf(d4, e3) ? g2 = null : null !== f2 && nf(d4, f2) && (b3.flags |= 16), oi(a4, b3), fi(a4, b3, g2, c7), b3.child;
    case 6:
      return null === a4 && ph(b3), null;
    case 13:
      return ti(a4, b3, c7);
    case 4:
      return eh(b3, b3.stateNode.containerInfo), d4 = b3.pendingProps, null === a4 ? b3.child = Yg(b3, null, d4, c7) : fi(a4, b3, d4, c7), b3.child;
    case 11:
      return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : lg(d4, e3), gi(a4, b3, d4, e3, c7);
    case 7:
      return fi(a4, b3, b3.pendingProps, c7), b3.child;
    case 8:
      return fi(
        a4,
        b3,
        b3.pendingProps.children,
        c7
      ), b3.child;
    case 12:
      return fi(a4, b3, b3.pendingProps.children, c7), b3.child;
    case 10:
      a: {
        d4 = b3.type._context;
        e3 = b3.pendingProps;
        g2 = b3.memoizedProps;
        f2 = e3.value;
        var h4 = b3.type._context;
        I$1(mg, h4._currentValue);
        h4._currentValue = f2;
        if (null !== g2)
          if (h4 = g2.value, f2 = He$1(h4, f2) ? 0 : ("function" === typeof d4._calculateChangedBits ? d4._calculateChangedBits(h4, f2) : 1073741823) | 0, 0 === f2) {
            if (g2.children === e3.children && !N$1.current) {
              b3 = hi(a4, b3, c7);
              break a;
            }
          } else
            for (h4 = b3.child, null !== h4 && (h4.return = b3); null !== h4; ) {
              var k3 = h4.dependencies;
              if (null !== k3) {
                g2 = h4.child;
                for (var l2 = k3.firstContext; null !== l2; ) {
                  if (l2.context === d4 && 0 !== (l2.observedBits & f2)) {
                    1 === h4.tag && (l2 = zg(-1, c7 & -c7), l2.tag = 2, Ag(h4, l2));
                    h4.lanes |= c7;
                    l2 = h4.alternate;
                    null !== l2 && (l2.lanes |= c7);
                    sg(h4.return, c7);
                    k3.lanes |= c7;
                    break;
                  }
                  l2 = l2.next;
                }
              } else
                g2 = 10 === h4.tag ? h4.type === b3.type ? null : h4.child : h4.child;
              if (null !== g2)
                g2.return = h4;
              else
                for (g2 = h4; null !== g2; ) {
                  if (g2 === b3) {
                    g2 = null;
                    break;
                  }
                  h4 = g2.sibling;
                  if (null !== h4) {
                    h4.return = g2.return;
                    g2 = h4;
                    break;
                  }
                  g2 = g2.return;
                }
              h4 = g2;
            }
        fi(a4, b3, e3.children, c7);
        b3 = b3.child;
      }
      return b3;
    case 9:
      return e3 = b3.type, f2 = b3.pendingProps, d4 = f2.children, tg(b3, c7), e3 = vg(
        e3,
        f2.unstable_observedBits
      ), d4 = d4(e3), b3.flags |= 1, fi(a4, b3, d4, c7), b3.child;
    case 14:
      return e3 = b3.type, f2 = lg(e3, b3.pendingProps), f2 = lg(e3.type, f2), ii(a4, b3, e3, f2, d4, c7);
    case 15:
      return ki(a4, b3, b3.type, b3.pendingProps, d4, c7);
    case 17:
      return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : lg(d4, e3), null !== a4 && (a4.alternate = null, b3.alternate = null, b3.flags |= 2), b3.tag = 1, Ff(d4) ? (a4 = true, Jf(b3)) : a4 = false, tg(b3, c7), Mg(b3, d4, e3), Og(b3, d4, e3, c7), qi(null, b3, d4, true, a4, c7);
    case 19:
      return Ai(a4, b3, c7);
    case 23:
      return mi(a4, b3, c7);
    case 24:
      return mi(a4, b3, c7);
  }
  throw Error(y$2(156, b3.tag));
};
function ik(a4, b3, c7, d4) {
  this.tag = a4;
  this.key = c7;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b3;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d4;
  this.flags = 0;
  this.lastEffect = this.firstEffect = this.nextEffect = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function nh(a4, b3, c7, d4) {
  return new ik(a4, b3, c7, d4);
}
function ji(a4) {
  a4 = a4.prototype;
  return !(!a4 || !a4.isReactComponent);
}
function hk(a4) {
  if ("function" === typeof a4)
    return ji(a4) ? 1 : 0;
  if (void 0 !== a4 && null !== a4) {
    a4 = a4.$$typeof;
    if (a4 === Aa)
      return 11;
    if (a4 === Da)
      return 14;
  }
  return 2;
}
function Tg(a4, b3) {
  var c7 = a4.alternate;
  null === c7 ? (c7 = nh(a4.tag, b3, a4.key, a4.mode), c7.elementType = a4.elementType, c7.type = a4.type, c7.stateNode = a4.stateNode, c7.alternate = a4, a4.alternate = c7) : (c7.pendingProps = b3, c7.type = a4.type, c7.flags = 0, c7.nextEffect = null, c7.firstEffect = null, c7.lastEffect = null);
  c7.childLanes = a4.childLanes;
  c7.lanes = a4.lanes;
  c7.child = a4.child;
  c7.memoizedProps = a4.memoizedProps;
  c7.memoizedState = a4.memoizedState;
  c7.updateQueue = a4.updateQueue;
  b3 = a4.dependencies;
  c7.dependencies = null === b3 ? null : { lanes: b3.lanes, firstContext: b3.firstContext };
  c7.sibling = a4.sibling;
  c7.index = a4.index;
  c7.ref = a4.ref;
  return c7;
}
function Vg(a4, b3, c7, d4, e3, f2) {
  var g2 = 2;
  d4 = a4;
  if ("function" === typeof a4)
    ji(a4) && (g2 = 1);
  else if ("string" === typeof a4)
    g2 = 5;
  else
    a:
      switch (a4) {
        case ua:
          return Xg(c7.children, e3, f2, b3);
        case Ha:
          g2 = 8;
          e3 |= 16;
          break;
        case wa:
          g2 = 8;
          e3 |= 1;
          break;
        case xa:
          return a4 = nh(12, c7, b3, e3 | 8), a4.elementType = xa, a4.type = xa, a4.lanes = f2, a4;
        case Ba:
          return a4 = nh(13, c7, b3, e3), a4.type = Ba, a4.elementType = Ba, a4.lanes = f2, a4;
        case Ca:
          return a4 = nh(19, c7, b3, e3), a4.elementType = Ca, a4.lanes = f2, a4;
        case Ia:
          return vi(c7, e3, f2, b3);
        case Ja:
          return a4 = nh(24, c7, b3, e3), a4.elementType = Ja, a4.lanes = f2, a4;
        default:
          if ("object" === typeof a4 && null !== a4)
            switch (a4.$$typeof) {
              case ya:
                g2 = 10;
                break a;
              case za:
                g2 = 9;
                break a;
              case Aa:
                g2 = 11;
                break a;
              case Da:
                g2 = 14;
                break a;
              case Ea:
                g2 = 16;
                d4 = null;
                break a;
              case Fa:
                g2 = 22;
                break a;
            }
          throw Error(y$2(130, null == a4 ? a4 : typeof a4, ""));
      }
  b3 = nh(g2, c7, b3, e3);
  b3.elementType = a4;
  b3.type = d4;
  b3.lanes = f2;
  return b3;
}
function Xg(a4, b3, c7, d4) {
  a4 = nh(7, a4, d4, b3);
  a4.lanes = c7;
  return a4;
}
function vi(a4, b3, c7, d4) {
  a4 = nh(23, a4, d4, b3);
  a4.elementType = Ia;
  a4.lanes = c7;
  return a4;
}
function Ug(a4, b3, c7) {
  a4 = nh(6, a4, null, b3);
  a4.lanes = c7;
  return a4;
}
function Wg(a4, b3, c7) {
  b3 = nh(4, null !== a4.children ? a4.children : [], a4.key, b3);
  b3.lanes = c7;
  b3.stateNode = { containerInfo: a4.containerInfo, pendingChildren: null, implementation: a4.implementation };
  return b3;
}
function jk(a4, b3, c7) {
  this.tag = b3;
  this.containerInfo = a4;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.pendingContext = this.context = null;
  this.hydrate = c7;
  this.callbackNode = null;
  this.callbackPriority = 0;
  this.eventTimes = Zc(0);
  this.expirationTimes = Zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = Zc(0);
  this.mutableSourceEagerHydrationData = null;
}
function kk(a4, b3, c7) {
  var d4 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: ta, key: null == d4 ? null : "" + d4, children: a4, containerInfo: b3, implementation: c7 };
}
function lk(a4, b3, c7, d4) {
  var e3 = b3.current, f2 = Hg(), g2 = Ig(e3);
  a:
    if (c7) {
      c7 = c7._reactInternals;
      b: {
        if (Zb(c7) !== c7 || 1 !== c7.tag)
          throw Error(y$2(170));
        var h4 = c7;
        do {
          switch (h4.tag) {
            case 3:
              h4 = h4.stateNode.context;
              break b;
            case 1:
              if (Ff(h4.type)) {
                h4 = h4.stateNode.__reactInternalMemoizedMergedChildContext;
                break b;
              }
          }
          h4 = h4.return;
        } while (null !== h4);
        throw Error(y$2(171));
      }
      if (1 === c7.tag) {
        var k3 = c7.type;
        if (Ff(k3)) {
          c7 = If(c7, k3, h4);
          break a;
        }
      }
      c7 = h4;
    } else
      c7 = Cf;
  null === b3.context ? b3.context = c7 : b3.pendingContext = c7;
  b3 = zg(f2, g2);
  b3.payload = { element: a4 };
  d4 = void 0 === d4 ? null : d4;
  null !== d4 && (b3.callback = d4);
  Ag(e3, b3);
  Jg(e3, g2, f2);
  return g2;
}
function mk(a4) {
  a4 = a4.current;
  if (!a4.child)
    return null;
  switch (a4.child.tag) {
    case 5:
      return a4.child.stateNode;
    default:
      return a4.child.stateNode;
  }
}
function nk(a4, b3) {
  a4 = a4.memoizedState;
  if (null !== a4 && null !== a4.dehydrated) {
    var c7 = a4.retryLane;
    a4.retryLane = 0 !== c7 && c7 < b3 ? c7 : b3;
  }
}
function ok(a4, b3) {
  nk(a4, b3);
  (a4 = a4.alternate) && nk(a4, b3);
}
function pk() {
  return null;
}
function qk(a4, b3, c7) {
  var d4 = null != c7 && null != c7.hydrationOptions && c7.hydrationOptions.mutableSources || null;
  c7 = new jk(a4, b3, null != c7 && true === c7.hydrate);
  b3 = nh(3, null, null, 2 === b3 ? 7 : 1 === b3 ? 3 : 0);
  c7.current = b3;
  b3.stateNode = c7;
  xg(b3);
  a4[ff] = c7.current;
  cf(8 === a4.nodeType ? a4.parentNode : a4);
  if (d4)
    for (a4 = 0; a4 < d4.length; a4++) {
      b3 = d4[a4];
      var e3 = b3._getVersion;
      e3 = e3(b3._source);
      null == c7.mutableSourceEagerHydrationData ? c7.mutableSourceEagerHydrationData = [b3, e3] : c7.mutableSourceEagerHydrationData.push(b3, e3);
    }
  this._internalRoot = c7;
}
qk.prototype.render = function(a4) {
  lk(a4, this._internalRoot, null, null);
};
qk.prototype.unmount = function() {
  var a4 = this._internalRoot, b3 = a4.containerInfo;
  lk(null, a4, null, function() {
    b3[ff] = null;
  });
};
function rk(a4) {
  return !(!a4 || 1 !== a4.nodeType && 9 !== a4.nodeType && 11 !== a4.nodeType && (8 !== a4.nodeType || " react-mount-point-unstable " !== a4.nodeValue));
}
function sk(a4, b3) {
  b3 || (b3 = a4 ? 9 === a4.nodeType ? a4.documentElement : a4.firstChild : null, b3 = !(!b3 || 1 !== b3.nodeType || !b3.hasAttribute("data-reactroot")));
  if (!b3)
    for (var c7; c7 = a4.lastChild; )
      a4.removeChild(c7);
  return new qk(a4, 0, b3 ? { hydrate: true } : void 0);
}
function tk(a4, b3, c7, d4, e3) {
  var f2 = c7._reactRootContainer;
  if (f2) {
    var g2 = f2._internalRoot;
    if ("function" === typeof e3) {
      var h4 = e3;
      e3 = function() {
        var a5 = mk(g2);
        h4.call(a5);
      };
    }
    lk(b3, g2, a4, e3);
  } else {
    f2 = c7._reactRootContainer = sk(c7, d4);
    g2 = f2._internalRoot;
    if ("function" === typeof e3) {
      var k3 = e3;
      e3 = function() {
        var a5 = mk(g2);
        k3.call(a5);
      };
    }
    Xj(function() {
      lk(b3, g2, a4, e3);
    });
  }
  return mk(g2);
}
ec = function(a4) {
  if (13 === a4.tag) {
    var b3 = Hg();
    Jg(a4, 4, b3);
    ok(a4, 4);
  }
};
fc = function(a4) {
  if (13 === a4.tag) {
    var b3 = Hg();
    Jg(a4, 67108864, b3);
    ok(a4, 67108864);
  }
};
gc = function(a4) {
  if (13 === a4.tag) {
    var b3 = Hg(), c7 = Ig(a4);
    Jg(a4, c7, b3);
    ok(a4, c7);
  }
};
hc = function(a4, b3) {
  return b3();
};
yb = function(a4, b3, c7) {
  switch (b3) {
    case "input":
      ab(a4, c7);
      b3 = c7.name;
      if ("radio" === c7.type && null != b3) {
        for (c7 = a4; c7.parentNode; )
          c7 = c7.parentNode;
        c7 = c7.querySelectorAll("input[name=" + JSON.stringify("" + b3) + '][type="radio"]');
        for (b3 = 0; b3 < c7.length; b3++) {
          var d4 = c7[b3];
          if (d4 !== a4 && d4.form === a4.form) {
            var e3 = Db(d4);
            if (!e3)
              throw Error(y$2(90));
            Wa(d4);
            ab(d4, e3);
          }
        }
      }
      break;
    case "textarea":
      ib(a4, c7);
      break;
    case "select":
      b3 = c7.value, null != b3 && fb(a4, !!c7.multiple, b3, false);
  }
};
Gb = Wj;
Hb = function(a4, b3, c7, d4, e3) {
  var f2 = X$1;
  X$1 |= 4;
  try {
    return gg(98, a4.bind(null, b3, c7, d4, e3));
  } finally {
    X$1 = f2, 0 === X$1 && (wj(), ig());
  }
};
Ib = function() {
  0 === (X$1 & 49) && (Vj(), Oj());
};
Jb = function(a4, b3) {
  var c7 = X$1;
  X$1 |= 2;
  try {
    return a4(b3);
  } finally {
    X$1 = c7, 0 === X$1 && (wj(), ig());
  }
};
function uk(a4, b3) {
  var c7 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!rk(b3))
    throw Error(y$2(200));
  return kk(a4, b3, null, c7);
}
var vk = { Events: [Cb, ue$1, Db, Eb, Fb, Oj, { current: false }] }, wk = { findFiberByHostInstance: wc, bundleType: 0, version: "17.0.2", rendererPackageName: "react-dom" };
var xk = { bundleType: wk.bundleType, version: wk.version, rendererPackageName: wk.rendererPackageName, rendererConfig: wk.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ra.ReactCurrentDispatcher, findHostInstanceByFiber: function(a4) {
  a4 = cc(a4);
  return null === a4 ? null : a4.stateNode;
}, findFiberByHostInstance: wk.findFiberByHostInstance || pk, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!yk.isDisabled && yk.supportsFiber)
    try {
      Lf = yk.inject(xk), Mf = yk;
    } catch (a4) {
    }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
reactDom_production_min.createPortal = uk;
reactDom_production_min.findDOMNode = function(a4) {
  if (null == a4)
    return null;
  if (1 === a4.nodeType)
    return a4;
  var b3 = a4._reactInternals;
  if (void 0 === b3) {
    if ("function" === typeof a4.render)
      throw Error(y$2(188));
    throw Error(y$2(268, Object.keys(a4)));
  }
  a4 = cc(b3);
  a4 = null === a4 ? null : a4.stateNode;
  return a4;
};
reactDom_production_min.flushSync = function(a4, b3) {
  var c7 = X$1;
  if (0 !== (c7 & 48))
    return a4(b3);
  X$1 |= 1;
  try {
    if (a4)
      return gg(99, a4.bind(null, b3));
  } finally {
    X$1 = c7, ig();
  }
};
reactDom_production_min.hydrate = function(a4, b3, c7) {
  if (!rk(b3))
    throw Error(y$2(200));
  return tk(null, a4, b3, true, c7);
};
reactDom_production_min.render = function(a4, b3, c7) {
  if (!rk(b3))
    throw Error(y$2(200));
  return tk(null, a4, b3, false, c7);
};
reactDom_production_min.unmountComponentAtNode = function(a4) {
  if (!rk(a4))
    throw Error(y$2(40));
  return a4._reactRootContainer ? (Xj(function() {
    tk(null, null, a4, false, function() {
      a4._reactRootContainer = null;
      a4[ff] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Wj;
reactDom_production_min.unstable_createPortal = function(a4, b3) {
  return uk(a4, b3, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a4, b3, c7, d4) {
  if (!rk(c7))
    throw Error(y$2(200));
  if (null == a4 || void 0 === a4._reactInternals)
    throw Error(y$2(38));
  return tk(a4, b3, c7, false, d4);
};
reactDom_production_min.version = "17.0.2";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
var reactDomExports = reactDom.exports;
const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
/**
 * @remix-run/router v1.3.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$b() {
  _extends$b = Object.assign ? Object.assign.bind() : function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$b.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
const PopStateEventType = "popstate";
function createHashHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash: hash2 = ""
    } = parsePath(window2.location.hash.substr(1));
    return createLocation(
      "",
      {
        pathname,
        search,
        hash: hash2
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to2) {
    let base = window2.document.querySelector("base");
    let href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to2 === "string" ? to2 : createPath(to2));
  }
  function validateHashLocation(location, to2) {
    warning$1$1(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to2) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant(value2, message) {
  if (value2 === false || value2 === null || typeof value2 === "undefined") {
    throw new Error(message);
  }
}
function warning$1$1(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined")
      console.warn(message);
    try {
      throw new Error(message);
    } catch (e3) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index2) {
  return {
    usr: location.state,
    key: location.key,
    idx: index2
  };
}
function createLocation(current, to2, state, key2) {
  if (state === void 0) {
    state = null;
  }
  let location = _extends$b({
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to2 === "string" ? parsePath(to2) : to2, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to2 && to2.key || key2 || createKey()
  });
  return location;
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash: hash2 = ""
  } = _ref;
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash2 && hash2 !== "#")
    pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener = null;
  let index2 = getIndex();
  if (index2 == null) {
    index2 = 0;
    globalHistory.replaceState(_extends$b({}, globalHistory.state, {
      idx: index2
    }), "");
  }
  function getIndex() {
    let state = globalHistory.state || {
      idx: null
    };
    return state.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index2;
    index2 = nextIndex;
    if (listener) {
      listener({
        action,
        location: history.location,
        delta
      });
    }
  }
  function push(to2, state) {
    action = Action.Push;
    let location = createLocation(history.location, to2, state);
    if (validateLocation)
      validateLocation(location, to2);
    index2 = getIndex() + 1;
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace2(to2, state) {
    action = Action.Replace;
    let location = createLocation(history.location, to2, state);
    if (validateLocation)
      validateLocation(location, to2);
    index2 = getIndex();
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to2) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to2 === "string" ? to2 : createPath(to2);
    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn2) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn2;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to2) {
      return createHref(window2, to2);
    },
    createURL,
    encodeLocation(to2) {
      let url = createURL(to2);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace: replace2,
    go(n2) {
      return globalHistory.go(n2);
    }
  };
  return history;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
function isIndexRoute(route) {
  return route.index === true;
}
function convertRoutesToDataRoutes(routes, parentPath, allIds) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  if (allIds === void 0) {
    allIds = /* @__PURE__ */ new Set();
  }
  return routes.map((route, index2) => {
    let treePath = [...parentPath, index2];
    let id2 = typeof route.id === "string" ? route.id : treePath.join("-");
    invariant(route.index !== true || !route.children, "Cannot specify children on an index route");
    invariant(!allIds.has(id2), 'Found a route id collision on id "' + id2 + "\".  Route id's must be globally unique within Data Router usages");
    allIds.add(id2);
    if (isIndexRoute(route)) {
      let indexRoute = _extends$b({}, route, {
        id: id2
      });
      return indexRoute;
    } else {
      let pathOrLayoutRoute = _extends$b({}, route, {
        id: id2,
        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : void 0
      });
      return pathOrLayoutRoute;
    }
  });
}
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i3 = 0; matches == null && i3 < branches.length; ++i3) {
    matches = matchRouteBranch(
      branches[i3],
      // Incoming pathnames are generally encoded from either window.location
      // or from router.navigate, but we want to match against the unencoded
      // paths in the route definitions.  Memory router locations won't be
      // encoded here but there also shouldn't be anything to decode so this
      // should be a safe operation.  This avoids needing matchRoutes to be
      // history-aware.
      safelyDecodeURI(pathname)
    );
  }
  return matches;
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index2, relativePath) => {
    let meta2 = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index2,
      route
    };
    if (meta2.relativePath.startsWith("/")) {
      invariant(meta2.relativePath.startsWith(parentPath), 'Absolute route path "' + meta2.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta2.relativePath = meta2.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta2.relativePath]);
    let routesMeta = parentsMeta.concat(meta2);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index2) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index2);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index2, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result2 = [];
  result2.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result2.push(...restExploded);
  }
  return result2.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a4, b3) => a4.score !== b3.score ? b3.score - a4.score : compareIndexes(a4.routesMeta.map((meta2) => meta2.childrenIndex), b3.routesMeta.map((meta2) => meta2.childrenIndex)));
}
const paramRe = /^:\w+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;
const isSplat = (s4) => s4 === "*";
function computeScore(path, index2) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index2) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s4) => !isSplat(s4)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a4, b3) {
  let siblings = a4.length === b3.length && a4.slice(0, -1).every((n2, i3) => n2 === b3[i3]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a4[a4.length - 1] - b3[b3.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i3 = 0; i3 < routesMeta.length; ++i3) {
    let meta2 = routesMeta[i3];
    let end = i3 === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match2 = matchPath({
      path: meta2.relativePath,
      caseSensitive: meta2.caseSensitive,
      end
    }, remainingPathname);
    if (!match2)
      return null;
    Object.assign(matchedParams, match2.params);
    let route = meta2.route;
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    });
    if (match2.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match2 = pathname.match(matcher);
  if (!match2)
    return null;
  let matchedPathname = match2[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match2.slice(1);
  let params = paramNames.reduce((memo, paramName, index2) => {
    if (paramName === "*") {
      let splatValue = captureGroups[index2] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    memo[paramName] = safelyDecodeURIComponent(captureGroups[index2] || "", paramName);
    return memo;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning$2(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let paramNames = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_2, paramName) => {
    paramNames.push(paramName);
    return "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    paramNames.push("*");
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else
    ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, paramNames];
}
function safelyDecodeURI(value2) {
  try {
    return decodeURI(value2);
  } catch (error) {
    warning$2(false, 'The URL path "' + value2 + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value2;
  }
}
function safelyDecodeURIComponent(value2, paramName) {
  try {
    return decodeURIComponent(value2);
  } catch (error) {
    warning$2(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value2 + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
    return value2;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function warning$2(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined")
      console.warn(message);
    try {
      throw new Error(message);
    } catch (e3) {
    }
  }
}
function resolvePath(to2, fromPathname) {
  if (fromPathname === void 0) {
    fromPathname = "/";
  }
  let {
    pathname: toPathname,
    search = "",
    hash: hash2 = ""
  } = typeof to2 === "string" ? parsePath(to2) : to2;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash2)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1)
        segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char2, field, dest, path) {
  return "Cannot include a '" + char2 + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match2, index2) => index2 === 0 || match2.route.path && match2.route.path.length > 0);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  if (isPathRelative === void 0) {
    isPathRelative = false;
  }
  let to2;
  if (typeof toArg === "string") {
    to2 = parsePath(toArg);
  } else {
    to2 = _extends$b({}, toArg);
    invariant(!to2.pathname || !to2.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to2));
    invariant(!to2.pathname || !to2.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to2));
    invariant(!to2.search || !to2.search.includes("#"), getInvalidPathError("#", "search", "hash", to2));
  }
  let isEmptyPath = toArg === "" || to2.pathname === "";
  let toPathname = isEmptyPath ? "/" : to2.pathname;
  let from2;
  if (isPathRelative || toPathname == null) {
    from2 = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to2.pathname = toSegments.join("/");
    }
    from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to2, from2);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
const normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
const normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
class AbortedDeferredError extends Error {
}
class DeferredData {
  constructor(data2, responseInit) {
    this.pendingKeysSet = /* @__PURE__ */ new Set();
    this.subscribers = /* @__PURE__ */ new Set();
    this.deferredKeys = [];
    invariant(data2 && typeof data2 === "object" && !Array.isArray(data2), "defer() only accepts plain objects");
    let reject;
    this.abortPromise = new Promise((_2, r2) => reject = r2);
    this.controller = new AbortController();
    let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort);
    this.controller.signal.addEventListener("abort", onAbort);
    this.data = Object.entries(data2).reduce((acc, _ref) => {
      let [key2, value2] = _ref;
      return Object.assign(acc, {
        [key2]: this.trackPromise(key2, value2)
      });
    }, {});
    if (this.done) {
      this.unlistenAbortSignal();
    }
    this.init = responseInit;
  }
  trackPromise(key2, value2) {
    if (!(value2 instanceof Promise)) {
      return value2;
    }
    this.deferredKeys.push(key2);
    this.pendingKeysSet.add(key2);
    let promise = Promise.race([value2, this.abortPromise]).then((data2) => this.onSettle(promise, key2, null, data2), (error) => this.onSettle(promise, key2, error));
    promise.catch(() => {
    });
    Object.defineProperty(promise, "_tracked", {
      get: () => true
    });
    return promise;
  }
  onSettle(promise, key2, error, data2) {
    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {
      this.unlistenAbortSignal();
      Object.defineProperty(promise, "_error", {
        get: () => error
      });
      return Promise.reject(error);
    }
    this.pendingKeysSet.delete(key2);
    if (this.done) {
      this.unlistenAbortSignal();
    }
    if (error) {
      Object.defineProperty(promise, "_error", {
        get: () => error
      });
      this.emit(false, key2);
      return Promise.reject(error);
    }
    Object.defineProperty(promise, "_data", {
      get: () => data2
    });
    this.emit(false, key2);
    return data2;
  }
  emit(aborted, settledKey) {
    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
  }
  subscribe(fn2) {
    this.subscribers.add(fn2);
    return () => this.subscribers.delete(fn2);
  }
  cancel() {
    this.controller.abort();
    this.pendingKeysSet.forEach((v2, k3) => this.pendingKeysSet.delete(k3));
    this.emit(true);
  }
  async resolveData(signal) {
    let aborted = false;
    if (!this.done) {
      let onAbort = () => this.cancel();
      signal.addEventListener("abort", onAbort);
      aborted = await new Promise((resolve2) => {
        this.subscribe((aborted2) => {
          signal.removeEventListener("abort", onAbort);
          if (aborted2 || this.done) {
            resolve2(aborted2);
          }
        });
      });
    }
    return aborted;
  }
  get done() {
    return this.pendingKeysSet.size === 0;
  }
  get unwrappedData() {
    invariant(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");
    return Object.entries(this.data).reduce((acc, _ref2) => {
      let [key2, value2] = _ref2;
      return Object.assign(acc, {
        [key2]: unwrapTrackedPromise(value2)
      });
    }, {});
  }
  get pendingKeys() {
    return Array.from(this.pendingKeysSet);
  }
}
function isTrackedPromise(value2) {
  return value2 instanceof Promise && value2._tracked === true;
}
function unwrapTrackedPromise(value2) {
  if (!isTrackedPromise(value2)) {
    return value2;
  }
  if (value2._error) {
    throw value2._error;
  }
  return value2._data;
}
class ErrorResponse {
  constructor(status, statusText, data2, internal) {
    if (internal === void 0) {
      internal = false;
    }
    this.status = status;
    this.statusText = statusText || "";
    this.internal = internal;
    if (data2 instanceof Error) {
      this.data = data2.toString();
      this.error = data2;
    } else {
      this.data = data2;
    }
  }
}
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const validMutationMethodsArr = ["post", "put", "patch", "delete"];
const validMutationMethods = new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
const validRequestMethods = new Set(validRequestMethodsArr);
const redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
const redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);
const IDLE_NAVIGATION = {
  state: "idle",
  location: void 0,
  formMethod: void 0,
  formAction: void 0,
  formEncType: void 0,
  formData: void 0
};
const IDLE_FETCHER = {
  state: "idle",
  data: void 0,
  formMethod: void 0,
  formAction: void 0,
  formEncType: void 0,
  formData: void 0
};
const IDLE_BLOCKER = {
  state: "unblocked",
  proceed: void 0,
  reset: void 0,
  location: void 0
};
const ABSOLUTE_URL_REGEX$1 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const isBrowser$2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
const isServer = !isBrowser$2;
function createRouter(init) {
  invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
  let dataRoutes = convertRoutesToDataRoutes(init.routes);
  let inFlightDataRoutes;
  let unlistenHistory = null;
  let subscribers = /* @__PURE__ */ new Set();
  let savedScrollPositions = null;
  let getScrollRestorationKey = null;
  let getScrollPosition = null;
  let initialScrollRestored = init.hydrationData != null;
  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);
  let initialErrors = null;
  if (initialMatches == null) {
    let error = getInternalRouterError(404, {
      pathname: init.history.location.pathname
    });
    let {
      matches,
      route
    } = getShortCircuitMatches(dataRoutes);
    initialMatches = matches;
    initialErrors = {
      [route.id]: error
    };
  }
  let initialized = !initialMatches.some((m4) => m4.route.loader) || init.hydrationData != null;
  let router2;
  let state = {
    historyAction: init.history.action,
    location: init.history.location,
    matches: initialMatches,
    initialized,
    navigation: IDLE_NAVIGATION,
    // Don't restore on initial updateState() if we were SSR'd
    restoreScrollPosition: init.hydrationData != null ? false : null,
    preventScrollReset: false,
    revalidation: "idle",
    loaderData: init.hydrationData && init.hydrationData.loaderData || {},
    actionData: init.hydrationData && init.hydrationData.actionData || null,
    errors: init.hydrationData && init.hydrationData.errors || initialErrors,
    fetchers: /* @__PURE__ */ new Map(),
    blockers: /* @__PURE__ */ new Map()
  };
  let pendingAction = Action.Pop;
  let pendingPreventScrollReset = false;
  let pendingNavigationController;
  let isUninterruptedRevalidation = false;
  let isRevalidationRequired = false;
  let cancelledDeferredRoutes = [];
  let cancelledFetcherLoads = [];
  let fetchControllers = /* @__PURE__ */ new Map();
  let incrementingLoadId = 0;
  let pendingNavigationLoadId = -1;
  let fetchReloadIds = /* @__PURE__ */ new Map();
  let fetchRedirectIds = /* @__PURE__ */ new Set();
  let fetchLoadMatches = /* @__PURE__ */ new Map();
  let activeDeferreds = /* @__PURE__ */ new Map();
  let blockerFunctions = /* @__PURE__ */ new Map();
  let ignoreNextHistoryUpdate = false;
  function initialize2() {
    unlistenHistory = init.history.listen((_ref) => {
      let {
        action: historyAction,
        location,
        delta
      } = _ref;
      if (ignoreNextHistoryUpdate) {
        ignoreNextHistoryUpdate = false;
        return;
      }
      warning$2(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
      let blockerKey = shouldBlockNavigation({
        currentLocation: state.location,
        nextLocation: location,
        historyAction
      });
      if (blockerKey && delta != null) {
        ignoreNextHistoryUpdate = true;
        init.history.go(delta * -1);
        updateBlocker(blockerKey, {
          state: "blocked",
          location,
          proceed() {
            updateBlocker(blockerKey, {
              state: "proceeding",
              proceed: void 0,
              reset: void 0,
              location
            });
            init.history.go(delta);
          },
          reset() {
            deleteBlocker(blockerKey);
            updateState({
              blockers: new Map(router2.state.blockers)
            });
          }
        });
        return;
      }
      return startNavigation(historyAction, location);
    });
    if (!state.initialized) {
      startNavigation(Action.Pop, state.location);
    }
    return router2;
  }
  function dispose() {
    if (unlistenHistory) {
      unlistenHistory();
    }
    subscribers.clear();
    pendingNavigationController && pendingNavigationController.abort();
    state.fetchers.forEach((_2, key2) => deleteFetcher(key2));
    state.blockers.forEach((_2, key2) => deleteBlocker(key2));
  }
  function subscribe(fn2) {
    subscribers.add(fn2);
    return () => subscribers.delete(fn2);
  }
  function updateState(newState) {
    state = _extends$b({}, state, newState);
    subscribers.forEach((subscriber) => subscriber(state));
  }
  function completeNavigation(location, newState) {
    var _location$state, _location$state2;
    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;
    let actionData;
    if (newState.actionData) {
      if (Object.keys(newState.actionData).length > 0) {
        actionData = newState.actionData;
      } else {
        actionData = null;
      }
    } else if (isActionReload) {
      actionData = state.actionData;
    } else {
      actionData = null;
    }
    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
    for (let [key2] of blockerFunctions) {
      deleteBlocker(key2);
    }
    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
    if (inFlightDataRoutes) {
      dataRoutes = inFlightDataRoutes;
      inFlightDataRoutes = void 0;
    }
    updateState(_extends$b({}, newState, {
      actionData,
      loaderData,
      historyAction: pendingAction,
      location,
      initialized: true,
      navigation: IDLE_NAVIGATION,
      revalidation: "idle",
      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
      preventScrollReset,
      blockers: new Map(state.blockers)
    }));
    if (isUninterruptedRevalidation)
      ;
    else if (pendingAction === Action.Pop)
      ;
    else if (pendingAction === Action.Push) {
      init.history.push(location, location.state);
    } else if (pendingAction === Action.Replace) {
      init.history.replace(location, location.state);
    }
    pendingAction = Action.Pop;
    pendingPreventScrollReset = false;
    isUninterruptedRevalidation = false;
    isRevalidationRequired = false;
    cancelledDeferredRoutes = [];
    cancelledFetcherLoads = [];
  }
  async function navigate(to2, opts) {
    if (typeof to2 === "number") {
      init.history.go(to2);
      return;
    }
    let {
      path,
      submission,
      error
    } = normalizeNavigateOptions(to2, opts);
    let currentLocation = state.location;
    let nextLocation = createLocation(state.location, path, opts && opts.state);
    nextLocation = _extends$b({}, nextLocation, init.history.encodeLocation(nextLocation));
    let userReplace = opts && opts.replace != null ? opts.replace : void 0;
    let historyAction = Action.Push;
    if (userReplace === true) {
      historyAction = Action.Replace;
    } else if (userReplace === false)
      ;
    else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
      historyAction = Action.Replace;
    }
    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0;
    let blockerKey = shouldBlockNavigation({
      currentLocation,
      nextLocation,
      historyAction
    });
    if (blockerKey) {
      updateBlocker(blockerKey, {
        state: "blocked",
        location: nextLocation,
        proceed() {
          updateBlocker(blockerKey, {
            state: "proceeding",
            proceed: void 0,
            reset: void 0,
            location: nextLocation
          });
          navigate(to2, opts);
        },
        reset() {
          deleteBlocker(blockerKey);
          updateState({
            blockers: new Map(state.blockers)
          });
        }
      });
      return;
    }
    return await startNavigation(historyAction, nextLocation, {
      submission,
      // Send through the formData serialization error if we have one so we can
      // render at the right error boundary after we match routes
      pendingError: error,
      preventScrollReset,
      replace: opts && opts.replace
    });
  }
  function revalidate() {
    interruptActiveLoads();
    updateState({
      revalidation: "loading"
    });
    if (state.navigation.state === "submitting") {
      return;
    }
    if (state.navigation.state === "idle") {
      startNavigation(state.historyAction, state.location, {
        startUninterruptedRevalidation: true
      });
      return;
    }
    startNavigation(pendingAction || state.historyAction, state.navigation.location, {
      overrideNavigation: state.navigation
    });
  }
  async function startNavigation(historyAction, location, opts) {
    pendingNavigationController && pendingNavigationController.abort();
    pendingNavigationController = null;
    pendingAction = historyAction;
    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
    saveScrollPosition(state.location, state.matches);
    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let loadingNavigation = opts && opts.overrideNavigation;
    let matches = matchRoutes(routesToUse, location, init.basename);
    if (!matches) {
      let error = getInternalRouterError(404, {
        pathname: location.pathname
      });
      let {
        matches: notFoundMatches,
        route
      } = getShortCircuitMatches(routesToUse);
      cancelActiveDeferreds();
      completeNavigation(location, {
        matches: notFoundMatches,
        loaderData: {},
        errors: {
          [route.id]: error
        }
      });
      return;
    }
    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
      completeNavigation(location, {
        matches
      });
      return;
    }
    pendingNavigationController = new AbortController();
    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);
    let pendingActionData;
    let pendingError;
    if (opts && opts.pendingError) {
      pendingError = {
        [findNearestBoundary(matches).route.id]: opts.pendingError
      };
    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
      let actionOutput = await handleAction(request, location, opts.submission, matches, {
        replace: opts.replace
      });
      if (actionOutput.shortCircuited) {
        return;
      }
      pendingActionData = actionOutput.pendingActionData;
      pendingError = actionOutput.pendingActionError;
      let navigation = _extends$b({
        state: "loading",
        location
      }, opts.submission);
      loadingNavigation = navigation;
      request = new Request(request.url, {
        signal: request.signal
      });
    }
    let {
      shortCircuited,
      loaderData,
      errors
    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);
    if (shortCircuited) {
      return;
    }
    pendingNavigationController = null;
    completeNavigation(location, _extends$b({
      matches
    }, pendingActionData ? {
      actionData: pendingActionData
    } : {}, {
      loaderData,
      errors
    }));
  }
  async function handleAction(request, location, submission, matches, opts) {
    interruptActiveLoads();
    let navigation = _extends$b({
      state: "submitting",
      location
    }, submission);
    updateState({
      navigation
    });
    let result2;
    let actionMatch = getTargetMatch(matches, location);
    if (!actionMatch.route.action) {
      result2 = {
        type: ResultType.error,
        error: getInternalRouterError(405, {
          method: request.method,
          pathname: location.pathname,
          routeId: actionMatch.route.id
        })
      };
    } else {
      result2 = await callLoaderOrAction("action", request, actionMatch, matches, router2.basename);
      if (request.signal.aborted) {
        return {
          shortCircuited: true
        };
      }
    }
    if (isRedirectResult(result2)) {
      let replace2;
      if (opts && opts.replace != null) {
        replace2 = opts.replace;
      } else {
        replace2 = result2.location === state.location.pathname + state.location.search;
      }
      await startRedirectNavigation(state, result2, {
        submission,
        replace: replace2
      });
      return {
        shortCircuited: true
      };
    }
    if (isErrorResult(result2)) {
      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
      if ((opts && opts.replace) !== true) {
        pendingAction = Action.Push;
      }
      return {
        // Send back an empty object we can use to clear out any prior actionData
        pendingActionData: {},
        pendingActionError: {
          [boundaryMatch.route.id]: result2.error
        }
      };
    }
    if (isDeferredResult(result2)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    return {
      pendingActionData: {
        [actionMatch.route.id]: result2.data
      }
    };
  }
  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace2, pendingActionData, pendingError) {
    let loadingNavigation = overrideNavigation;
    if (!loadingNavigation) {
      let navigation = _extends$b({
        state: "loading",
        location,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0
      }, submission);
      loadingNavigation = navigation;
    }
    let activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {
      formMethod: loadingNavigation.formMethod,
      formAction: loadingNavigation.formAction,
      formData: loadingNavigation.formData,
      formEncType: loadingNavigation.formEncType
    } : void 0;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, pendingActionData, pendingError);
    cancelActiveDeferreds((routeId) => !(matches && matches.some((m4) => m4.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m4) => m4.route.id === routeId));
    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
      completeNavigation(location, _extends$b({
        matches,
        loaderData: {},
        // Commit pending error if we're short circuiting
        errors: pendingError || null
      }, pendingActionData ? {
        actionData: pendingActionData
      } : {}));
      return {
        shortCircuited: true
      };
    }
    if (!isUninterruptedRevalidation) {
      revalidatingFetchers.forEach((rf2) => {
        let fetcher = state.fetchers.get(rf2.key);
        let revalidatingFetcher = {
          state: "loading",
          data: fetcher && fetcher.data,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          " _hasFetcherDoneAnything ": true
        };
        state.fetchers.set(rf2.key, revalidatingFetcher);
      });
      let actionData = pendingActionData || state.actionData;
      updateState(_extends$b({
        navigation: loadingNavigation
      }, actionData ? Object.keys(actionData).length === 0 ? {
        actionData: null
      } : {
        actionData
      } : {}, revalidatingFetchers.length > 0 ? {
        fetchers: new Map(state.fetchers)
      } : {}));
    }
    pendingNavigationLoadId = ++incrementingLoadId;
    revalidatingFetchers.forEach((rf2) => fetchControllers.set(rf2.key, pendingNavigationController));
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
    if (request.signal.aborted) {
      return {
        shortCircuited: true
      };
    }
    revalidatingFetchers.forEach((rf2) => fetchControllers.delete(rf2.key));
    let redirect = findRedirect(results);
    if (redirect) {
      await startRedirectNavigation(state, redirect, {
        replace: replace2
      });
      return {
        shortCircuited: true
      };
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
    activeDeferreds.forEach((deferredData, routeId) => {
      deferredData.subscribe((aborted) => {
        if (aborted || deferredData.done) {
          activeDeferreds.delete(routeId);
        }
      });
    });
    markFetchRedirectsDone();
    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
    return _extends$b({
      loaderData,
      errors
    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {
      fetchers: new Map(state.fetchers)
    } : {});
  }
  function getFetcher(key2) {
    return state.fetchers.get(key2) || IDLE_FETCHER;
  }
  function fetch2(key2, routeId, href, opts) {
    if (isServer) {
      throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
    }
    if (fetchControllers.has(key2))
      abortFetcher(key2);
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let matches = matchRoutes(routesToUse, href, init.basename);
    if (!matches) {
      setFetcherError(key2, routeId, getInternalRouterError(404, {
        pathname: href
      }));
      return;
    }
    let {
      path,
      submission
    } = normalizeNavigateOptions(href, opts, true);
    let match2 = getTargetMatch(matches, path);
    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
    if (submission && isMutationMethod(submission.formMethod)) {
      handleFetcherAction(key2, routeId, path, match2, matches, submission);
      return;
    }
    fetchLoadMatches.set(key2, {
      routeId,
      path
    });
    handleFetcherLoader(key2, routeId, path, match2, matches, submission);
  }
  async function handleFetcherAction(key2, routeId, path, match2, requestMatches, submission) {
    interruptActiveLoads();
    fetchLoadMatches.delete(key2);
    if (!match2.route.action) {
      let error = getInternalRouterError(405, {
        method: submission.formMethod,
        pathname: path,
        routeId
      });
      setFetcherError(key2, routeId, error);
      return;
    }
    let existingFetcher = state.fetchers.get(key2);
    let fetcher = _extends$b({
      state: "submitting"
    }, submission, {
      data: existingFetcher && existingFetcher.data,
      " _hasFetcherDoneAnything ": true
    });
    state.fetchers.set(key2, fetcher);
    updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
    fetchControllers.set(key2, abortController);
    let actionResult = await callLoaderOrAction("action", fetchRequest, match2, requestMatches, router2.basename);
    if (fetchRequest.signal.aborted) {
      if (fetchControllers.get(key2) === abortController) {
        fetchControllers.delete(key2);
      }
      return;
    }
    if (isRedirectResult(actionResult)) {
      fetchControllers.delete(key2);
      fetchRedirectIds.add(key2);
      let loadingFetcher = _extends$b({
        state: "loading"
      }, submission, {
        data: void 0,
        " _hasFetcherDoneAnything ": true
      });
      state.fetchers.set(key2, loadingFetcher);
      updateState({
        fetchers: new Map(state.fetchers)
      });
      return startRedirectNavigation(state, actionResult, {
        isFetchActionRedirect: true
      });
    }
    if (isErrorResult(actionResult)) {
      setFetcherError(key2, routeId, actionResult.error);
      return;
    }
    if (isDeferredResult(actionResult)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    let nextLocation = state.navigation.location || state.location;
    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, init.basename) : state.matches;
    invariant(matches, "Didn't find any matches after fetcher action");
    let loadId = ++incrementingLoadId;
    fetchReloadIds.set(key2, loadId);
    let loadFetcher = _extends$b({
      state: "loading",
      data: actionResult.data
    }, submission, {
      " _hasFetcherDoneAnything ": true
    });
    state.fetchers.set(key2, loadFetcher);
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
      init.history,
      state,
      matches,
      submission,
      nextLocation,
      isRevalidationRequired,
      cancelledDeferredRoutes,
      cancelledFetcherLoads,
      fetchLoadMatches,
      routesToUse,
      init.basename,
      {
        [match2.route.id]: actionResult.data
      },
      void 0
      // No need to send through errors since we short circuit above
    );
    revalidatingFetchers.filter((rf2) => rf2.key !== key2).forEach((rf2) => {
      let staleKey = rf2.key;
      let existingFetcher2 = state.fetchers.get(staleKey);
      let revalidatingFetcher = {
        state: "loading",
        data: existingFetcher2 && existingFetcher2.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": true
      };
      state.fetchers.set(staleKey, revalidatingFetcher);
      fetchControllers.set(staleKey, abortController);
    });
    updateState({
      fetchers: new Map(state.fetchers)
    });
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
    if (abortController.signal.aborted) {
      return;
    }
    fetchReloadIds.delete(key2);
    fetchControllers.delete(key2);
    revalidatingFetchers.forEach((r2) => fetchControllers.delete(r2.key));
    let redirect = findRedirect(results);
    if (redirect) {
      return startRedirectNavigation(state, redirect);
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
    let doneFetcher = {
      state: "idle",
      data: actionResult.data,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      " _hasFetcherDoneAnything ": true
    };
    state.fetchers.set(key2, doneFetcher);
    let didAbortFetchLoads = abortStaleFetchLoads(loadId);
    if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
      invariant(pendingAction, "Expected pending action");
      pendingNavigationController && pendingNavigationController.abort();
      completeNavigation(state.navigation.location, {
        matches,
        loaderData,
        errors,
        fetchers: new Map(state.fetchers)
      });
    } else {
      updateState(_extends$b({
        errors,
        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)
      }, didAbortFetchLoads ? {
        fetchers: new Map(state.fetchers)
      } : {}));
      isRevalidationRequired = false;
    }
  }
  async function handleFetcherLoader(key2, routeId, path, match2, matches, submission) {
    let existingFetcher = state.fetchers.get(key2);
    let loadingFetcher = _extends$b({
      state: "loading",
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, submission, {
      data: existingFetcher && existingFetcher.data,
      " _hasFetcherDoneAnything ": true
    });
    state.fetchers.set(key2, loadingFetcher);
    updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
    fetchControllers.set(key2, abortController);
    let result2 = await callLoaderOrAction("loader", fetchRequest, match2, matches, router2.basename);
    if (isDeferredResult(result2)) {
      result2 = await resolveDeferredData(result2, fetchRequest.signal, true) || result2;
    }
    if (fetchControllers.get(key2) === abortController) {
      fetchControllers.delete(key2);
    }
    if (fetchRequest.signal.aborted) {
      return;
    }
    if (isRedirectResult(result2)) {
      await startRedirectNavigation(state, result2);
      return;
    }
    if (isErrorResult(result2)) {
      let boundaryMatch = findNearestBoundary(state.matches, routeId);
      state.fetchers.delete(key2);
      updateState({
        fetchers: new Map(state.fetchers),
        errors: {
          [boundaryMatch.route.id]: result2.error
        }
      });
      return;
    }
    invariant(!isDeferredResult(result2), "Unhandled fetcher deferred data");
    let doneFetcher = {
      state: "idle",
      data: result2.data,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      " _hasFetcherDoneAnything ": true
    };
    state.fetchers.set(key2, doneFetcher);
    updateState({
      fetchers: new Map(state.fetchers)
    });
  }
  async function startRedirectNavigation(state2, redirect, _temp) {
    var _window;
    let {
      submission,
      replace: replace2,
      isFetchActionRedirect
    } = _temp === void 0 ? {} : _temp;
    if (redirect.revalidate) {
      isRevalidationRequired = true;
    }
    let redirectLocation = createLocation(
      state2.location,
      redirect.location,
      // TODO: This can be removed once we get rid of useTransition in Remix v2
      _extends$b({
        _isRedirect: true
      }, isFetchActionRedirect ? {
        _isFetchActionRedirect: true
      } : {})
    );
    invariant(redirectLocation, "Expected a location on the redirect navigation");
    if (ABSOLUTE_URL_REGEX$1.test(redirect.location) && isBrowser$2 && typeof ((_window = window) == null ? void 0 : _window.location) !== "undefined") {
      let url = init.history.createURL(redirect.location);
      let isDifferentBasename = stripBasename(url.pathname, init.basename || "/") == null;
      if (window.location.origin !== url.origin || isDifferentBasename) {
        if (replace2) {
          window.location.replace(redirect.location);
        } else {
          window.location.assign(redirect.location);
        }
        return;
      }
    }
    pendingNavigationController = null;
    let redirectHistoryAction = replace2 === true ? Action.Replace : Action.Push;
    let {
      formMethod,
      formAction,
      formEncType,
      formData
    } = state2.navigation;
    if (!submission && formMethod && formAction && formData && formEncType) {
      submission = {
        formMethod,
        formAction,
        formEncType,
        formData
      };
    }
    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {
      await startNavigation(redirectHistoryAction, redirectLocation, {
        submission: _extends$b({}, submission, {
          formAction: redirect.location
        }),
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    } else {
      await startNavigation(redirectHistoryAction, redirectLocation, {
        overrideNavigation: {
          state: "loading",
          location: redirectLocation,
          formMethod: submission ? submission.formMethod : void 0,
          formAction: submission ? submission.formAction : void 0,
          formEncType: submission ? submission.formEncType : void 0,
          formData: submission ? submission.formData : void 0
        },
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    }
  }
  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
    let results = await Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches, router2.basename)), ...fetchersToLoad.map((f2) => {
      if (f2.matches && f2.match) {
        return callLoaderOrAction("loader", createClientSideRequest(init.history, f2.path, request.signal), f2.match, f2.matches, router2.basename);
      } else {
        let error = {
          type: ResultType.error,
          error: getInternalRouterError(404, {
            pathname: f2.path
          })
        };
        return error;
      }
    })]);
    let loaderResults = results.slice(0, matchesToLoad.length);
    let fetcherResults = results.slice(matchesToLoad.length);
    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f2) => f2.match), fetcherResults, request.signal, true)]);
    return {
      results,
      loaderResults,
      fetcherResults
    };
  }
  function interruptActiveLoads() {
    isRevalidationRequired = true;
    cancelledDeferredRoutes.push(...cancelActiveDeferreds());
    fetchLoadMatches.forEach((_2, key2) => {
      if (fetchControllers.has(key2)) {
        cancelledFetcherLoads.push(key2);
        abortFetcher(key2);
      }
    });
  }
  function setFetcherError(key2, routeId, error) {
    let boundaryMatch = findNearestBoundary(state.matches, routeId);
    deleteFetcher(key2);
    updateState({
      errors: {
        [boundaryMatch.route.id]: error
      },
      fetchers: new Map(state.fetchers)
    });
  }
  function deleteFetcher(key2) {
    if (fetchControllers.has(key2))
      abortFetcher(key2);
    fetchLoadMatches.delete(key2);
    fetchReloadIds.delete(key2);
    fetchRedirectIds.delete(key2);
    state.fetchers.delete(key2);
  }
  function abortFetcher(key2) {
    let controller = fetchControllers.get(key2);
    invariant(controller, "Expected fetch controller: " + key2);
    controller.abort();
    fetchControllers.delete(key2);
  }
  function markFetchersDone(keys2) {
    for (let key2 of keys2) {
      let fetcher = getFetcher(key2);
      let doneFetcher = {
        state: "idle",
        data: fetcher.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": true
      };
      state.fetchers.set(key2, doneFetcher);
    }
  }
  function markFetchRedirectsDone() {
    let doneKeys = [];
    for (let key2 of fetchRedirectIds) {
      let fetcher = state.fetchers.get(key2);
      invariant(fetcher, "Expected fetcher: " + key2);
      if (fetcher.state === "loading") {
        fetchRedirectIds.delete(key2);
        doneKeys.push(key2);
      }
    }
    markFetchersDone(doneKeys);
  }
  function abortStaleFetchLoads(landedId) {
    let yeetedKeys = [];
    for (let [key2, id2] of fetchReloadIds) {
      if (id2 < landedId) {
        let fetcher = state.fetchers.get(key2);
        invariant(fetcher, "Expected fetcher: " + key2);
        if (fetcher.state === "loading") {
          abortFetcher(key2);
          fetchReloadIds.delete(key2);
          yeetedKeys.push(key2);
        }
      }
    }
    markFetchersDone(yeetedKeys);
    return yeetedKeys.length > 0;
  }
  function getBlocker(key2, fn2) {
    let blocker = state.blockers.get(key2) || IDLE_BLOCKER;
    if (blockerFunctions.get(key2) !== fn2) {
      blockerFunctions.set(key2, fn2);
    }
    return blocker;
  }
  function deleteBlocker(key2) {
    state.blockers.delete(key2);
    blockerFunctions.delete(key2);
  }
  function updateBlocker(key2, newBlocker) {
    let blocker = state.blockers.get(key2) || IDLE_BLOCKER;
    invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
    state.blockers.set(key2, newBlocker);
    updateState({
      blockers: new Map(state.blockers)
    });
  }
  function shouldBlockNavigation(_ref2) {
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = _ref2;
    if (blockerFunctions.size === 0) {
      return;
    }
    if (blockerFunctions.size > 1) {
      warning$2(false, "A router only supports one blocker at a time");
    }
    let entries = Array.from(blockerFunctions.entries());
    let [blockerKey, blockerFunction] = entries[entries.length - 1];
    let blocker = state.blockers.get(blockerKey);
    if (blocker && blocker.state === "proceeding") {
      return;
    }
    if (blockerFunction({
      currentLocation,
      nextLocation,
      historyAction
    })) {
      return blockerKey;
    }
  }
  function cancelActiveDeferreds(predicate) {
    let cancelledRouteIds = [];
    activeDeferreds.forEach((dfd, routeId) => {
      if (!predicate || predicate(routeId)) {
        dfd.cancel();
        cancelledRouteIds.push(routeId);
        activeDeferreds.delete(routeId);
      }
    });
    return cancelledRouteIds;
  }
  function enableScrollRestoration(positions, getPosition, getKey) {
    savedScrollPositions = positions;
    getScrollPosition = getPosition;
    getScrollRestorationKey = getKey || ((location) => location.key);
    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
      initialScrollRestored = true;
      let y4 = getSavedScrollPosition(state.location, state.matches);
      if (y4 != null) {
        updateState({
          restoreScrollPosition: y4
        });
      }
    }
    return () => {
      savedScrollPositions = null;
      getScrollPosition = null;
      getScrollRestorationKey = null;
    };
  }
  function saveScrollPosition(location, matches) {
    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {
      let userMatches = matches.map((m4) => createUseMatchesMatch(m4, state.loaderData));
      let key2 = getScrollRestorationKey(location, userMatches) || location.key;
      savedScrollPositions[key2] = getScrollPosition();
    }
  }
  function getSavedScrollPosition(location, matches) {
    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {
      let userMatches = matches.map((m4) => createUseMatchesMatch(m4, state.loaderData));
      let key2 = getScrollRestorationKey(location, userMatches) || location.key;
      let y4 = savedScrollPositions[key2];
      if (typeof y4 === "number") {
        return y4;
      }
    }
    return null;
  }
  function _internalSetRoutes(newRoutes) {
    inFlightDataRoutes = newRoutes;
  }
  router2 = {
    get basename() {
      return init.basename;
    },
    get state() {
      return state;
    },
    get routes() {
      return dataRoutes;
    },
    initialize: initialize2,
    subscribe,
    enableScrollRestoration,
    navigate,
    fetch: fetch2,
    revalidate,
    // Passthrough to history-aware createHref used by useHref so we get proper
    // hash-aware URLs in DOM paths
    createHref: (to2) => init.history.createHref(to2),
    encodeLocation: (to2) => init.history.encodeLocation(to2),
    getFetcher,
    deleteFetcher,
    dispose,
    getBlocker,
    deleteBlocker,
    _internalFetchControllers: fetchControllers,
    _internalActiveDeferreds: activeDeferreds,
    // TODO: Remove setRoutes, it's temporary to avoid dealing with
    // updating the tree while validating the update algorithm.
    _internalSetRoutes
  };
  return router2;
}
function isSubmissionNavigation(opts) {
  return opts != null && "formData" in opts;
}
function normalizeNavigateOptions(to2, opts, isFetcher) {
  if (isFetcher === void 0) {
    isFetcher = false;
  }
  let path = typeof to2 === "string" ? to2 : createPath(to2);
  if (!opts || !isSubmissionNavigation(opts)) {
    return {
      path
    };
  }
  if (opts.formMethod && !isValidMethod(opts.formMethod)) {
    return {
      path,
      error: getInternalRouterError(405, {
        method: opts.formMethod
      })
    };
  }
  let submission;
  if (opts.formData) {
    submission = {
      formMethod: opts.formMethod || "get",
      formAction: stripHashFromPath(path),
      formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
      formData: opts.formData
    };
    if (isMutationMethod(submission.formMethod)) {
      return {
        path,
        submission
      };
    }
  }
  let parsedPath = parsePath(path);
  let searchParams = convertFormDataToSearchParams(opts.formData);
  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
    searchParams.append("index", "");
  }
  parsedPath.search = "?" + searchParams;
  return {
    path: createPath(parsedPath),
    submission
  };
}
function getLoaderMatchesUntilBoundary(matches, boundaryId) {
  let boundaryMatches = matches;
  if (boundaryId) {
    let index2 = matches.findIndex((m4) => m4.route.id === boundaryId);
    if (index2 >= 0) {
      boundaryMatches = matches.slice(0, index2);
    }
  }
  return boundaryMatches;
}
function getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {
  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0;
  let currentUrl = history.createURL(state.location);
  let nextUrl = history.createURL(location);
  let defaultShouldRevalidate = (
    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate
    isRevalidationRequired || // Clicked the same link, resubmitted a GET form
    currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders
    currentUrl.search !== nextUrl.search
  );
  let boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0;
  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);
  let navigationMatches = boundaryMatches.filter((match2, index2) => {
    if (match2.route.loader == null) {
      return false;
    }
    if (isNewLoader(state.loaderData, state.matches[index2], match2) || cancelledDeferredRoutes.some((id2) => id2 === match2.route.id)) {
      return true;
    }
    let currentRouteMatch = state.matches[index2];
    let nextRouteMatch = match2;
    return shouldRevalidateLoader(match2, _extends$b({
      currentUrl,
      currentParams: currentRouteMatch.params,
      nextUrl,
      nextParams: nextRouteMatch.params
    }, submission, {
      actionResult,
      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
    }));
  });
  let revalidatingFetchers = [];
  fetchLoadMatches.forEach((f2, key2) => {
    if (!matches.some((m4) => m4.route.id === f2.routeId)) {
      return;
    }
    let fetcherMatches = matchRoutes(routesToUse, f2.path, basename);
    if (!fetcherMatches) {
      revalidatingFetchers.push(_extends$b({
        key: key2
      }, f2, {
        matches: null,
        match: null
      }));
      return;
    }
    let fetcherMatch = getTargetMatch(fetcherMatches, f2.path);
    if (cancelledFetcherLoads.includes(key2)) {
      revalidatingFetchers.push(_extends$b({
        key: key2,
        matches: fetcherMatches,
        match: fetcherMatch
      }, f2));
      return;
    }
    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends$b({
      currentUrl,
      currentParams: state.matches[state.matches.length - 1].params,
      nextUrl,
      nextParams: matches[matches.length - 1].params
    }, submission, {
      actionResult,
      defaultShouldRevalidate
    }));
    if (shouldRevalidate) {
      revalidatingFetchers.push(_extends$b({
        key: key2,
        matches: fetcherMatches,
        match: fetcherMatch
      }, f2));
    }
  });
  return [navigationMatches, revalidatingFetchers];
}
function isNewLoader(currentLoaderData, currentMatch, match2) {
  let isNew = (
    // [a] -> [a, b]
    !currentMatch || // [a, b] -> [a, c]
    match2.route.id !== currentMatch.route.id
  );
  let isMissingData = currentLoaderData[match2.route.id] === void 0;
  return isNew || isMissingData;
}
function isNewRouteInstance(currentMatch, match2) {
  let currentPath = currentMatch.route.path;
  return (
    // param change for this match, /users/123 -> /users/456
    currentMatch.pathname !== match2.pathname || // splat param changed, which is not present in match.path
    // e.g. /files/images/avatar.jpg -> files/finances.xls
    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match2.params["*"]
  );
}
function shouldRevalidateLoader(loaderMatch, arg) {
  if (loaderMatch.route.shouldRevalidate) {
    let routeChoice = loaderMatch.route.shouldRevalidate(arg);
    if (typeof routeChoice === "boolean") {
      return routeChoice;
    }
  }
  return arg.defaultShouldRevalidate;
}
async function callLoaderOrAction(type, request, match2, matches, basename, isStaticRequest, isRouteRequest, requestContext) {
  if (basename === void 0) {
    basename = "/";
  }
  if (isStaticRequest === void 0) {
    isStaticRequest = false;
  }
  if (isRouteRequest === void 0) {
    isRouteRequest = false;
  }
  let resultType;
  let result2;
  let reject;
  let abortPromise = new Promise((_2, r2) => reject = r2);
  let onReject = () => reject();
  request.signal.addEventListener("abort", onReject);
  try {
    let handler = match2.route[type];
    invariant(handler, "Could not find the " + type + ' to run on the "' + match2.route.id + '" route');
    result2 = await Promise.race([handler({
      request,
      params: match2.params,
      context: requestContext
    }), abortPromise]);
    invariant(result2 !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match2.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
  } catch (e3) {
    resultType = ResultType.error;
    result2 = e3;
  } finally {
    request.signal.removeEventListener("abort", onReject);
  }
  if (isResponse(result2)) {
    let status = result2.status;
    if (redirectStatusCodes.has(status)) {
      let location = result2.headers.get("Location");
      invariant(location, "Redirects returned/thrown from loaders/actions must have a Location header");
      if (!ABSOLUTE_URL_REGEX$1.test(location)) {
        let activeMatches = matches.slice(0, matches.indexOf(match2) + 1);
        let routePathnames = getPathContributingMatches(activeMatches).map((match3) => match3.pathnameBase);
        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);
        invariant(createPath(resolvedLocation), "Unable to resolve redirect location: " + location);
        if (basename) {
          let path = resolvedLocation.pathname;
          resolvedLocation.pathname = path === "/" ? basename : joinPaths([basename, path]);
        }
        location = createPath(resolvedLocation);
      } else if (!isStaticRequest) {
        let currentUrl = new URL(request.url);
        let url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location);
        let isSameBasename = stripBasename(url.pathname, basename) != null;
        if (url.origin === currentUrl.origin && isSameBasename) {
          location = url.pathname + url.search + url.hash;
        }
      }
      if (isStaticRequest) {
        result2.headers.set("Location", location);
        throw result2;
      }
      return {
        type: ResultType.redirect,
        status,
        location,
        revalidate: result2.headers.get("X-Remix-Revalidate") !== null
      };
    }
    if (isRouteRequest) {
      throw {
        type: resultType || ResultType.data,
        response: result2
      };
    }
    let data2;
    let contentType = result2.headers.get("Content-Type");
    if (contentType && /\bapplication\/json\b/.test(contentType)) {
      data2 = await result2.json();
    } else {
      data2 = await result2.text();
    }
    if (resultType === ResultType.error) {
      return {
        type: resultType,
        error: new ErrorResponse(status, result2.statusText, data2),
        headers: result2.headers
      };
    }
    return {
      type: ResultType.data,
      data: data2,
      statusCode: result2.status,
      headers: result2.headers
    };
  }
  if (resultType === ResultType.error) {
    return {
      type: resultType,
      error: result2
    };
  }
  if (result2 instanceof DeferredData) {
    var _result$init, _result$init2;
    return {
      type: ResultType.deferred,
      deferredData: result2,
      statusCode: (_result$init = result2.init) == null ? void 0 : _result$init.status,
      headers: ((_result$init2 = result2.init) == null ? void 0 : _result$init2.headers) && new Headers(result2.init.headers)
    };
  }
  return {
    type: ResultType.data,
    data: result2
  };
}
function createClientSideRequest(history, location, signal, submission) {
  let url = history.createURL(stripHashFromPath(location)).toString();
  let init = {
    signal
  };
  if (submission && isMutationMethod(submission.formMethod)) {
    let {
      formMethod,
      formEncType,
      formData
    } = submission;
    init.method = formMethod.toUpperCase();
    init.body = formEncType === "application/x-www-form-urlencoded" ? convertFormDataToSearchParams(formData) : formData;
  }
  return new Request(url, init);
}
function convertFormDataToSearchParams(formData) {
  let searchParams = new URLSearchParams();
  for (let [key2, value2] of formData.entries()) {
    searchParams.append(key2, value2 instanceof File ? value2.name : value2);
  }
  return searchParams;
}
function processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
  let loaderData = {};
  let errors = null;
  let statusCode;
  let foundError = false;
  let loaderHeaders = {};
  results.forEach((result2, index2) => {
    let id2 = matchesToLoad[index2].route.id;
    invariant(!isRedirectResult(result2), "Cannot handle redirect results in processLoaderData");
    if (isErrorResult(result2)) {
      let boundaryMatch = findNearestBoundary(matches, id2);
      let error = result2.error;
      if (pendingError) {
        error = Object.values(pendingError)[0];
        pendingError = void 0;
      }
      errors = errors || {};
      if (errors[boundaryMatch.route.id] == null) {
        errors[boundaryMatch.route.id] = error;
      }
      loaderData[id2] = void 0;
      if (!foundError) {
        foundError = true;
        statusCode = isRouteErrorResponse(result2.error) ? result2.error.status : 500;
      }
      if (result2.headers) {
        loaderHeaders[id2] = result2.headers;
      }
    } else {
      if (isDeferredResult(result2)) {
        activeDeferreds.set(id2, result2.deferredData);
        loaderData[id2] = result2.deferredData.data;
      } else {
        loaderData[id2] = result2.data;
      }
      if (result2.statusCode != null && result2.statusCode !== 200 && !foundError) {
        statusCode = result2.statusCode;
      }
      if (result2.headers) {
        loaderHeaders[id2] = result2.headers;
      }
    }
  });
  if (pendingError) {
    errors = pendingError;
    loaderData[Object.keys(pendingError)[0]] = void 0;
  }
  return {
    loaderData,
    errors,
    statusCode: statusCode || 200,
    loaderHeaders
  };
}
function processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
  let {
    loaderData,
    errors
  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);
  for (let index2 = 0; index2 < revalidatingFetchers.length; index2++) {
    let {
      key: key2,
      match: match2
    } = revalidatingFetchers[index2];
    invariant(fetcherResults !== void 0 && fetcherResults[index2] !== void 0, "Did not find corresponding fetcher result");
    let result2 = fetcherResults[index2];
    if (isErrorResult(result2)) {
      let boundaryMatch = findNearestBoundary(state.matches, match2 == null ? void 0 : match2.route.id);
      if (!(errors && errors[boundaryMatch.route.id])) {
        errors = _extends$b({}, errors, {
          [boundaryMatch.route.id]: result2.error
        });
      }
      state.fetchers.delete(key2);
    } else if (isRedirectResult(result2)) {
      invariant(false, "Unhandled fetcher revalidation redirect");
    } else if (isDeferredResult(result2)) {
      invariant(false, "Unhandled fetcher deferred data");
    } else {
      let doneFetcher = {
        state: "idle",
        data: result2.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": true
      };
      state.fetchers.set(key2, doneFetcher);
    }
  }
  return {
    loaderData,
    errors
  };
}
function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
  let mergedLoaderData = _extends$b({}, newLoaderData);
  for (let match2 of matches) {
    let id2 = match2.route.id;
    if (newLoaderData.hasOwnProperty(id2)) {
      if (newLoaderData[id2] !== void 0) {
        mergedLoaderData[id2] = newLoaderData[id2];
      }
    } else if (loaderData[id2] !== void 0 && match2.route.loader) {
      mergedLoaderData[id2] = loaderData[id2];
    }
    if (errors && errors.hasOwnProperty(id2)) {
      break;
    }
  }
  return mergedLoaderData;
}
function findNearestBoundary(matches, routeId) {
  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m4) => m4.route.id === routeId) + 1) : [...matches];
  return eligibleMatches.reverse().find((m4) => m4.route.hasErrorBoundary === true) || matches[0];
}
function getShortCircuitMatches(routes) {
  let route = routes.find((r2) => r2.index || !r2.path || r2.path === "/") || {
    id: "__shim-error-route__"
  };
  return {
    matches: [{
      params: {},
      pathname: "",
      pathnameBase: "",
      route
    }],
    route
  };
}
function getInternalRouterError(status, _temp4) {
  let {
    pathname,
    routeId,
    method,
    type
  } = _temp4 === void 0 ? {} : _temp4;
  let statusText = "Unknown Server Error";
  let errorMessage = "Unknown @remix-run/router error";
  if (status === 400) {
    statusText = "Bad Request";
    if (method && pathname && routeId) {
      errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (type === "defer-action") {
      errorMessage = "defer() is not supported in actions";
    }
  } else if (status === 403) {
    statusText = "Forbidden";
    errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
  } else if (status === 404) {
    statusText = "Not Found";
    errorMessage = 'No route matches URL "' + pathname + '"';
  } else if (status === 405) {
    statusText = "Method Not Allowed";
    if (method && pathname && routeId) {
      errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (method) {
      errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
    }
  }
  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);
}
function findRedirect(results) {
  for (let i3 = results.length - 1; i3 >= 0; i3--) {
    let result2 = results[i3];
    if (isRedirectResult(result2)) {
      return result2;
    }
  }
}
function stripHashFromPath(path) {
  let parsedPath = typeof path === "string" ? parsePath(path) : path;
  return createPath(_extends$b({}, parsedPath, {
    hash: ""
  }));
}
function isHashChangeOnly(a4, b3) {
  return a4.pathname === b3.pathname && a4.search === b3.search && a4.hash !== b3.hash;
}
function isDeferredResult(result2) {
  return result2.type === ResultType.deferred;
}
function isErrorResult(result2) {
  return result2.type === ResultType.error;
}
function isRedirectResult(result2) {
  return (result2 && result2.type) === ResultType.redirect;
}
function isResponse(value2) {
  return value2 != null && typeof value2.status === "number" && typeof value2.statusText === "string" && typeof value2.headers === "object" && typeof value2.body !== "undefined";
}
function isValidMethod(method) {
  return validRequestMethods.has(method);
}
function isMutationMethod(method) {
  return validMutationMethods.has(method);
}
async function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {
  for (let index2 = 0; index2 < results.length; index2++) {
    let result2 = results[index2];
    let match2 = matchesToLoad[index2];
    if (!match2) {
      continue;
    }
    let currentMatch = currentMatches.find((m4) => m4.route.id === match2.route.id);
    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match2) && (currentLoaderData && currentLoaderData[match2.route.id]) !== void 0;
    if (isDeferredResult(result2) && (isFetcher || isRevalidatingLoader)) {
      await resolveDeferredData(result2, signal, isFetcher).then((result3) => {
        if (result3) {
          results[index2] = result3 || results[index2];
        }
      });
    }
  }
}
async function resolveDeferredData(result2, signal, unwrap) {
  if (unwrap === void 0) {
    unwrap = false;
  }
  let aborted = await result2.deferredData.resolveData(signal);
  if (aborted) {
    return;
  }
  if (unwrap) {
    try {
      return {
        type: ResultType.data,
        data: result2.deferredData.unwrappedData
      };
    } catch (e3) {
      return {
        type: ResultType.error,
        error: e3
      };
    }
  }
  return {
    type: ResultType.data,
    data: result2.deferredData.data
  };
}
function hasNakedIndexQuery(search) {
  return new URLSearchParams(search).getAll("index").some((v2) => v2 === "");
}
function createUseMatchesMatch(match2, loaderData) {
  let {
    route,
    pathname,
    params
  } = match2;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function getTargetMatch(matches, location) {
  let search = typeof location === "string" ? parsePath(location).search : location.search;
  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {
    return matches[matches.length - 1];
  }
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches[pathMatches.length - 1];
}
/**
 * React Router v6.8.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$a() {
  _extends$a = Object.assign ? Object.assign.bind() : function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$a.apply(this, arguments);
}
function isPolyfill(x3, y4) {
  return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
}
const is$1 = typeof Object.is === "function" ? Object.is : isPolyfill;
const {
  useState,
  useEffect,
  useLayoutEffect,
  useDebugValue
} = React$1;
function useSyncExternalStore$2(subscribe, getSnapshot, getServerSnapshot) {
  const value2 = getSnapshot();
  const [{
    inst
  }, forceUpdate] = useState({
    inst: {
      value: value2,
      getSnapshot
    }
  });
  useLayoutEffect(() => {
    inst.value = value2;
    inst.getSnapshot = getSnapshot;
    if (checkIfSnapshotChanged(inst)) {
      forceUpdate({
        inst
      });
    }
  }, [subscribe, value2, getSnapshot]);
  useEffect(() => {
    if (checkIfSnapshotChanged(inst)) {
      forceUpdate({
        inst
      });
    }
    const handleStoreChange = () => {
      if (checkIfSnapshotChanged(inst)) {
        forceUpdate({
          inst
        });
      }
    };
    return subscribe(handleStoreChange);
  }, [subscribe]);
  useDebugValue(value2);
  return value2;
}
function checkIfSnapshotChanged(inst) {
  const latestGetSnapshot = inst.getSnapshot;
  const prevValue = inst.value;
  try {
    const nextValue = latestGetSnapshot();
    return !is$1(prevValue, nextValue);
  } catch (error) {
    return true;
  }
}
function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
  return getSnapshot();
}
const canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
const isServerEnvironment = !canUseDOM;
const shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore$2;
const useSyncExternalStore = "useSyncExternalStore" in React$1 ? ((module2) => module2.useSyncExternalStore)(React$1) : shim;
const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
const RouteContext = /* @__PURE__ */ reactExports.createContext({
  outlet: null,
  matches: []
});
const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
function useHref(to2, _temp) {
  let {
    relative: relative2
  } = _temp === void 0 ? {} : _temp;
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    basename,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    hash: hash2,
    pathname,
    search
  } = useResolvedPath(to2, {
    relative: relative2
  });
  let joinedPathname = pathname;
  if (basename !== "/") {
    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
  }
  return navigator2.createHref({
    pathname: joinedPathname,
    search,
    hash: hash2
  });
}
function useInRouterContext() {
  return reactExports.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? invariant(false) : void 0;
  return reactExports.useContext(LocationContext).location;
}
function useNavigate() {
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    basename,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
  let activeRef = reactExports.useRef(false);
  reactExports.useEffect(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to2, options) {
    if (options === void 0) {
      options = {};
    }
    if (!activeRef.current)
      return;
    if (typeof to2 === "number") {
      navigator2.go(to2);
      return;
    }
    let path = resolveTo(to2, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname]);
  return navigate;
}
const OutletContext = /* @__PURE__ */ reactExports.createContext(null);
function useOutlet(context) {
  let outlet = reactExports.useContext(RouteContext).outlet;
  if (outlet) {
    return /* @__PURE__ */ reactExports.createElement(OutletContext.Provider, {
      value: context
    }, outlet);
  }
  return outlet;
}
function useParams() {
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to2, _temp2) {
  let {
    relative: relative2
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
  return reactExports.useMemo(() => resolveTo(to2, JSON.parse(routePathnamesJson), locationPathname, relative2 === "path"), [to2, routePathnamesJson, locationPathname, relative2]);
}
function useRoutes(routes, locationArg) {
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let dataRouterStateContext = reactExports.useContext(DataRouterStateContext);
  let {
    matches: parentMatches
  } = reactExports.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  routeMatch && routeMatch.route;
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false) : void 0;
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterStateContext || void 0);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
      value: {
        location: _extends$a({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorElement() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
class RenderErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location) {
      return {
        error: props.error,
        location: props.location
      };
    }
    return {
      error: props.error || state.error,
      location: state.location
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("React Router caught the following error during render", error, errorInfo);
  }
  render() {
    return this.state.error ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match: match2,
    children
  } = _ref;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && match2.route.errorElement) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
  }
  return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState) {
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (matches == null) {
    if (dataRouterState != null && dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = dataRouterState == null ? void 0 : dataRouterState.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m4) => m4.route.id && (errors == null ? void 0 : errors[m4.route.id]));
    !(errorIndex >= 0) ? invariant(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  return renderedMatches.reduceRight((outlet, match2, index2) => {
    let error = match2.route.id ? errors == null ? void 0 : errors[match2.route.id] : null;
    let errorElement = dataRouterState ? match2.route.errorElement || /* @__PURE__ */ reactExports.createElement(DefaultErrorElement, null) : null;
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
    let getChildren2 = () => /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
      match: match2,
      routeContext: {
        outlet,
        matches: matches2
      }
    }, error ? errorElement : match2.route.element !== void 0 ? match2.route.element : outlet);
    return dataRouterState && (match2.route.errorElement || index2 === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      component: errorElement,
      error,
      children: getChildren2(),
      routeContext: {
        outlet: null,
        matches: matches2
      }
    }) : getChildren2();
  }, null);
}
var DataRouterHook$1;
(function(DataRouterHook2) {
  DataRouterHook2["UseBlocker"] = "useBlocker";
  DataRouterHook2["UseRevalidator"] = "useRevalidator";
})(DataRouterHook$1 || (DataRouterHook$1 = {}));
var DataRouterStateHook$1;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook2["UseActionData"] = "useActionData";
  DataRouterStateHook2["UseRouteError"] = "useRouteError";
  DataRouterStateHook2["UseNavigation"] = "useNavigation";
  DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook2["UseMatches"] = "useMatches";
  DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
})(DataRouterStateHook$1 || (DataRouterStateHook$1 = {}));
function useDataRouterState(hookName) {
  let state = reactExports.useContext(DataRouterStateContext);
  !state ? invariant(false) : void 0;
  return state;
}
function useRouteContext(hookName) {
  let route = reactExports.useContext(RouteContext);
  !route ? invariant(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext();
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? invariant(false) : void 0;
  return thisRoute.route.id;
}
function useRouteError() {
  var _state$errors;
  let error = reactExports.useContext(RouteErrorContext);
  let state = useDataRouterState(DataRouterStateHook$1.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
  if (error) {
    return error;
  }
  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function RouterProvider(_ref) {
  let {
    fallbackElement,
    router: router2
  } = _ref;
  let state = useSyncExternalStore(
    router2.subscribe,
    () => router2.state,
    // We have to provide this so React@18 doesn't complain during hydration,
    // but we pass our serialized hydration data into the router so state here
    // is already synced with what the server saw
    () => router2.state
  );
  let navigator2 = reactExports.useMemo(() => {
    return {
      createHref: router2.createHref,
      encodeLocation: router2.encodeLocation,
      go: (n2) => router2.navigate(n2),
      push: (to2, state2, opts) => router2.navigate(to2, {
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      }),
      replace: (to2, state2, opts) => router2.navigate(to2, {
        replace: true,
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      })
    };
  }, [router2]);
  let basename = router2.basename || "/";
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(DataRouterContext.Provider, {
    value: {
      router: router2,
      navigator: navigator2,
      static: false,
      // Do we need this?
      basename
    }
  }, /* @__PURE__ */ reactExports.createElement(DataRouterStateContext.Provider, {
    value: state
  }, /* @__PURE__ */ reactExports.createElement(Router, {
    basename: router2.basename,
    location: router2.state.location,
    navigationType: router2.state.historyAction,
    navigator: navigator2
  }, router2.state.initialized ? /* @__PURE__ */ reactExports.createElement(Routes, null) : fallbackElement))), null);
}
function Navigate(_ref3) {
  let {
    to: to2,
    replace: replace2,
    state,
    relative: relative2
  } = _ref3;
  !useInRouterContext() ? invariant(false) : void 0;
  let dataRouterState = reactExports.useContext(DataRouterStateContext);
  let navigate = useNavigate();
  reactExports.useEffect(() => {
    if (dataRouterState && dataRouterState.navigation.state !== "idle") {
      return;
    }
    navigate(to2, {
      replace: replace2,
      state,
      relative: relative2
    });
  });
  return null;
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  invariant(false);
}
function Router(_ref4) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false
  } = _ref4;
  !!useInRouterContext() ? invariant(false) : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = reactExports.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp
  }), [basename, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash: hash2 = "",
    state = null,
    key: key2 = "default"
  } = locationProp;
  let location = reactExports.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      pathname: trailingPathname,
      search,
      hash: hash2,
      state,
      key: key2
    };
  }, [basename, pathname, search, hash2, state, key2]);
  if (location == null) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
    children,
    value: {
      location,
      navigationType
    }
  }));
}
function Routes(_ref5) {
  let {
    children,
    location
  } = _ref5;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  let routes = dataRouterContext && !children ? dataRouterContext.router.routes : createRoutesFromChildren(children);
  return useRoutes(routes, location);
}
var AwaitRenderStatus;
(function(AwaitRenderStatus2) {
  AwaitRenderStatus2[AwaitRenderStatus2["pending"] = 0] = "pending";
  AwaitRenderStatus2[AwaitRenderStatus2["success"] = 1] = "success";
  AwaitRenderStatus2[AwaitRenderStatus2["error"] = 2] = "error";
})(AwaitRenderStatus || (AwaitRenderStatus = {}));
new Promise(() => {
});
function createRoutesFromChildren(children, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  reactExports.Children.forEach(children, (element, index2) => {
    if (!/* @__PURE__ */ reactExports.isValidElement(element)) {
      return;
    }
    if (element.type === reactExports.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element.props.children, parentPath));
      return;
    }
    !(element.type === Route) ? invariant(false) : void 0;
    !(!element.props.index || !element.props.children) ? invariant(false) : void 0;
    let treePath = [...parentPath, index2];
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      hasErrorBoundary: element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(element.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}
function enhanceManualRouteObjects(routes) {
  return routes.map((route) => {
    let routeClone = _extends$a({}, route);
    if (routeClone.hasErrorBoundary == null) {
      routeClone.hasErrorBoundary = routeClone.errorElement != null;
    }
    if (routeClone.children) {
      routeClone.children = enhanceManualRouteObjects(routeClone.children);
    }
    return routeClone;
  });
}
/**
 * React Router DOM v6.8.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$9() {
  _extends$9 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$9.apply(this, arguments);
}
function _objectWithoutPropertiesLoose$5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key2 = sourceKeys[i3];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
function createSearchParams(init) {
  if (init === void 0) {
    init = "";
  }
  return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key2) => {
    let value2 = init[key2];
    return memo.concat(Array.isArray(value2) ? value2.map((v2) => [key2, v2]) : [[key2, value2]]);
  }, []));
}
function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
  let searchParams = createSearchParams(locationSearch);
  if (defaultSearchParams) {
    for (let key2 of defaultSearchParams.keys()) {
      if (!searchParams.has(key2)) {
        defaultSearchParams.getAll(key2).forEach((value2) => {
          searchParams.append(key2, value2);
        });
      }
    }
  }
  return searchParams;
}
const _excluded$m = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"], _excluded2$1 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"];
function createHashRouter(routes, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    history: createHashHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes: enhanceManualRouteObjects(routes)
  }).initialize();
}
function parseHydrationData() {
  var _window;
  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
  if (state && state.errors) {
    state = _extends$9({}, state, {
      errors: deserializeErrors(state.errors)
    });
  }
  return state;
}
function deserializeErrors(errors) {
  if (!errors)
    return null;
  let entries = Object.entries(errors);
  let serialized = {};
  for (let [key2, val2] of entries) {
    if (val2 && val2.__type === "RouteErrorResponse") {
      serialized[key2] = new ErrorResponse(val2.status, val2.statusText, val2.data, val2.internal === true);
    } else if (val2 && val2.__type === "Error") {
      let error = new Error(val2.message);
      error.stack = "";
      serialized[key2] = error;
    } else {
      serialized[key2] = val2;
    }
  }
  return serialized;
}
const isBrowser$1 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const Link = /* @__PURE__ */ reactExports.forwardRef(function LinkWithRef(_ref4, ref) {
  let {
    onClick,
    relative: relative2,
    reloadDocument,
    replace: replace2,
    state,
    target,
    to: to2,
    preventScrollReset
  } = _ref4, rest = _objectWithoutPropertiesLoose$5(_ref4, _excluded$m);
  let {
    basename
  } = reactExports.useContext(NavigationContext);
  let absoluteHref;
  let isExternal = false;
  if (typeof to2 === "string" && ABSOLUTE_URL_REGEX.test(to2)) {
    absoluteHref = to2;
    if (isBrowser$1) {
      let currentUrl = new URL(window.location.href);
      let targetUrl = to2.startsWith("//") ? new URL(currentUrl.protocol + to2) : new URL(to2);
      let path = stripBasename(targetUrl.pathname, basename);
      if (targetUrl.origin === currentUrl.origin && path != null) {
        to2 = path + targetUrl.search + targetUrl.hash;
      } else {
        isExternal = true;
      }
    }
  }
  let href = useHref(to2, {
    relative: relative2
  });
  let internalOnClick = useLinkClickHandler(to2, {
    replace: replace2,
    state,
    target,
    preventScrollReset,
    relative: relative2
  });
  function handleClick(event) {
    if (onClick)
      onClick(event);
    if (!event.defaultPrevented) {
      internalOnClick(event);
    }
  }
  return (
    // eslint-disable-next-line jsx-a11y/anchor-has-content
    /* @__PURE__ */ reactExports.createElement("a", _extends$9({}, rest, {
      href: absoluteHref || href,
      onClick: isExternal || reloadDocument ? onClick : handleClick,
      ref,
      target
    }))
  );
});
const NavLink = /* @__PURE__ */ reactExports.forwardRef(function NavLinkWithRef(_ref5, ref) {
  let {
    "aria-current": ariaCurrentProp = "page",
    caseSensitive = false,
    className: classNameProp = "",
    end = false,
    style: styleProp,
    to: to2,
    children
  } = _ref5, rest = _objectWithoutPropertiesLoose$5(_ref5, _excluded2$1);
  let path = useResolvedPath(to2, {
    relative: rest.relative
  });
  let location = useLocation();
  let routerState = reactExports.useContext(DataRouterStateContext);
  let {
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
  let locationPathname = location.pathname;
  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
  if (!caseSensitive) {
    locationPathname = locationPathname.toLowerCase();
    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
    toPathname = toPathname.toLowerCase();
  }
  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
  let ariaCurrent = isActive ? ariaCurrentProp : void 0;
  let className;
  if (typeof classNameProp === "function") {
    className = classNameProp({
      isActive,
      isPending
    });
  } else {
    className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
  }
  let style2 = typeof styleProp === "function" ? styleProp({
    isActive,
    isPending
  }) : styleProp;
  return /* @__PURE__ */ reactExports.createElement(Link, _extends$9({}, rest, {
    "aria-current": ariaCurrent,
    className,
    ref,
    style: style2,
    to: to2
  }), typeof children === "function" ? children({
    isActive,
    isPending
  }) : children);
});
var DataRouterHook;
(function(DataRouterHook2) {
  DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook2["UseSubmitImpl"] = "useSubmitImpl";
  DataRouterHook2["UseFetcher"] = "useFetcher";
})(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseFetchers"] = "useFetchers";
  DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook || (DataRouterStateHook = {}));
function useLinkClickHandler(to2, _temp) {
  let {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative: relative2
  } = _temp === void 0 ? {} : _temp;
  let navigate = useNavigate();
  let location = useLocation();
  let path = useResolvedPath(to2, {
    relative: relative2
  });
  return reactExports.useCallback((event) => {
    if (shouldProcessLinkClick(event, target)) {
      event.preventDefault();
      let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
      navigate(to2, {
        replace: replace2,
        state,
        preventScrollReset,
        relative: relative2
      });
    }
  }, [location, navigate, path, replaceProp, state, target, to2, preventScrollReset, relative2]);
}
function useSearchParams(defaultInit) {
  let defaultSearchParamsRef = reactExports.useRef(createSearchParams(defaultInit));
  let hasSetSearchParamsRef = reactExports.useRef(false);
  let location = useLocation();
  let searchParams = reactExports.useMemo(() => (
    // Only merge in the defaults if we haven't yet called setSearchParams.
    // Once we call that we want those to take precedence, otherwise you can't
    // remove a param with setSearchParams({}) if it has an initial value
    getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)
  ), [location.search]);
  let navigate = useNavigate();
  let setSearchParams = reactExports.useCallback((nextInit, navigateOptions) => {
    const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
    hasSetSearchParamsRef.current = true;
    navigate("?" + newSearchParams, navigateOptions);
  }, [navigate, searchParams]);
  return [searchParams, setSearchParams];
}
const common = {
  black: "#000",
  white: "#fff"
};
const common$1 = common;
const red = {
  50: "#ffebee",
  100: "#ffcdd2",
  200: "#ef9a9a",
  300: "#e57373",
  400: "#ef5350",
  500: "#f44336",
  600: "#e53935",
  700: "#d32f2f",
  800: "#c62828",
  900: "#b71c1c",
  A100: "#ff8a80",
  A200: "#ff5252",
  A400: "#ff1744",
  A700: "#d50000"
};
const red$1 = red;
const purple = {
  50: "#f3e5f5",
  100: "#e1bee7",
  200: "#ce93d8",
  300: "#ba68c8",
  400: "#ab47bc",
  500: "#9c27b0",
  600: "#8e24aa",
  700: "#7b1fa2",
  800: "#6a1b9a",
  900: "#4a148c",
  A100: "#ea80fc",
  A200: "#e040fb",
  A400: "#d500f9",
  A700: "#aa00ff"
};
const purple$1 = purple;
const blue = {
  50: "#e3f2fd",
  100: "#bbdefb",
  200: "#90caf9",
  300: "#64b5f6",
  400: "#42a5f5",
  500: "#2196f3",
  600: "#1e88e5",
  700: "#1976d2",
  800: "#1565c0",
  900: "#0d47a1",
  A100: "#82b1ff",
  A200: "#448aff",
  A400: "#2979ff",
  A700: "#2962ff"
};
const blue$1 = blue;
const lightBlue = {
  50: "#e1f5fe",
  100: "#b3e5fc",
  200: "#81d4fa",
  300: "#4fc3f7",
  400: "#29b6f6",
  500: "#03a9f4",
  600: "#039be5",
  700: "#0288d1",
  800: "#0277bd",
  900: "#01579b",
  A100: "#80d8ff",
  A200: "#40c4ff",
  A400: "#00b0ff",
  A700: "#0091ea"
};
const lightBlue$1 = lightBlue;
const green = {
  50: "#e8f5e9",
  100: "#c8e6c9",
  200: "#a5d6a7",
  300: "#81c784",
  400: "#66bb6a",
  500: "#4caf50",
  600: "#43a047",
  700: "#388e3c",
  800: "#2e7d32",
  900: "#1b5e20",
  A100: "#b9f6ca",
  A200: "#69f0ae",
  A400: "#00e676",
  A700: "#00c853"
};
const green$1 = green;
const orange = {
  50: "#fff3e0",
  100: "#ffe0b2",
  200: "#ffcc80",
  300: "#ffb74d",
  400: "#ffa726",
  500: "#ff9800",
  600: "#fb8c00",
  700: "#f57c00",
  800: "#ef6c00",
  900: "#e65100",
  A100: "#ffd180",
  A200: "#ffab40",
  A400: "#ff9100",
  A700: "#ff6d00"
};
const orange$1 = orange;
const grey = {
  50: "#fafafa",
  100: "#f5f5f5",
  200: "#eeeeee",
  300: "#e0e0e0",
  400: "#bdbdbd",
  500: "#9e9e9e",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  900: "#212121",
  A100: "#f5f5f5",
  A200: "#eeeeee",
  A400: "#bdbdbd",
  A700: "#616161"
};
const grey$1 = grey;
function _extends$8() {
  _extends$8 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$8.apply(this, arguments);
}
function isPlainObject$4(item) {
  return item !== null && typeof item === "object" && item.constructor === Object;
}
function deepClone(source) {
  if (!isPlainObject$4(source)) {
    return source;
  }
  const output = {};
  Object.keys(source).forEach((key2) => {
    output[key2] = deepClone(source[key2]);
  });
  return output;
}
function deepmerge$3(target, source, options = {
  clone: true
}) {
  const output = options.clone ? _extends$8({}, target) : target;
  if (isPlainObject$4(target) && isPlainObject$4(source)) {
    Object.keys(source).forEach((key2) => {
      if (key2 === "__proto__") {
        return;
      }
      if (isPlainObject$4(source[key2]) && key2 in target && isPlainObject$4(target[key2])) {
        output[key2] = deepmerge$3(target[key2], source[key2], options);
      } else if (options.clone) {
        output[key2] = isPlainObject$4(source[key2]) ? deepClone(source[key2]) : source[key2];
      } else {
        output[key2] = source[key2];
      }
    });
  }
  return output;
}
var propTypes$2 = { exports: {} };
var ReactPropTypesSecret$1 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
var ReactPropTypesSecret = ReactPropTypesSecret_1;
function emptyFunction() {
}
function emptyFunctionWithReset() {
}
emptyFunctionWithReset.resetWarningCache = emptyFunction;
var factoryWithThrowingShims = function() {
  function shim2(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      return;
    }
    var err = new Error(
      "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
    );
    err.name = "Invariant Violation";
    throw err;
  }
  shim2.isRequired = shim2;
  function getShim() {
    return shim2;
  }
  var ReactPropTypes = {
    array: shim2,
    bigint: shim2,
    bool: shim2,
    func: shim2,
    number: shim2,
    object: shim2,
    string: shim2,
    symbol: shim2,
    any: shim2,
    arrayOf: getShim,
    element: shim2,
    elementType: shim2,
    instanceOf: getShim,
    node: shim2,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};
{
  propTypes$2.exports = factoryWithThrowingShims();
}
var propTypesExports = propTypes$2.exports;
function formatMuiErrorMessage(code) {
  let url = "https://mui.com/production-error/?code=" + code;
  for (let i3 = 1; i3 < arguments.length; i3 += 1) {
    url += "&args[]=" + encodeURIComponent(arguments[i3]);
  }
  return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
}
function capitalize$3(string2) {
  if (typeof string2 !== "string") {
    throw new Error(formatMuiErrorMessage(7));
  }
  return string2.charAt(0).toUpperCase() + string2.slice(1);
}
function createChainedFunction(...funcs) {
  return funcs.reduce((acc, func) => {
    if (func == null) {
      return acc;
    }
    return function chainedFunction(...args) {
      acc.apply(this, args);
      func.apply(this, args);
    };
  }, () => {
  });
}
function debounce(func, wait = 166) {
  let timeout;
  function debounced(...args) {
    const later = () => {
      func.apply(this, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  }
  debounced.clear = () => {
    clearTimeout(timeout);
  };
  return debounced;
}
function ownerDocument(node2) {
  return node2 && node2.ownerDocument || document;
}
function ownerWindow(node2) {
  const doc = ownerDocument(node2);
  return doc.defaultView || window;
}
function setRef(ref, value2) {
  if (typeof ref === "function") {
    ref(value2);
  } else if (ref) {
    ref.current = value2;
  }
}
const useEnhancedEffect = typeof window !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
const useEnhancedEffect$1 = useEnhancedEffect;
function useEventCallback$1(fn2) {
  const ref = reactExports.useRef(fn2);
  useEnhancedEffect$1(() => {
    ref.current = fn2;
  });
  return reactExports.useCallback((...args) => (
    // @ts-expect-error hide `this`
    // tslint:disable-next-line:ban-comma-operator
    (0, ref.current)(...args)
  ), []);
}
function useForkRef(...refs) {
  return reactExports.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (instance) => {
      refs.forEach((ref) => {
        setRef(ref, instance);
      });
    };
  }, refs);
}
function getScrollbarSize(doc) {
  const documentWidth = doc.documentElement.clientWidth;
  return Math.abs(window.innerWidth - documentWidth);
}
function resolveProps(defaultProps2, props) {
  const output = _extends$8({}, props);
  Object.keys(defaultProps2).forEach((propName) => {
    if (propName.toString().match(/^(components|slots)$/)) {
      output[propName] = _extends$8({}, defaultProps2[propName], output[propName]);
    } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
      const defaultSlotProps = defaultProps2[propName] || {};
      const slotProps = props[propName];
      output[propName] = {};
      if (!slotProps || !Object.keys(slotProps)) {
        output[propName] = defaultSlotProps;
      } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
        output[propName] = slotProps;
      } else {
        output[propName] = _extends$8({}, slotProps);
        Object.keys(defaultSlotProps).forEach((slotPropName) => {
          output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
        });
      }
    } else if (output[propName] === void 0) {
      output[propName] = defaultProps2[propName];
    }
  });
  return output;
}
function composeClasses(slots, getUtilityClass, classes = void 0) {
  const output = {};
  Object.keys(slots).forEach(
    // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
    // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
    (slot) => {
      output[slot] = slots[slot].reduce((acc, key2) => {
        if (key2) {
          const utilityClass = getUtilityClass(key2);
          if (utilityClass !== "") {
            acc.push(utilityClass);
          }
          if (classes && classes[key2]) {
            acc.push(classes[key2]);
          }
        }
        return acc;
      }, []).join(" ");
    }
  );
  return output;
}
const defaultGenerator = (componentName) => componentName;
const createClassNameGenerator = () => {
  let generate = defaultGenerator;
  return {
    configure(generator) {
      generate = generator;
    },
    generate(componentName) {
      return generate(componentName);
    },
    reset() {
      generate = defaultGenerator;
    }
  };
};
const ClassNameGenerator = createClassNameGenerator();
const ClassNameGenerator$1 = ClassNameGenerator;
const globalStateClassesMapping = {
  active: "active",
  checked: "checked",
  completed: "completed",
  disabled: "disabled",
  error: "error",
  expanded: "expanded",
  focused: "focused",
  focusVisible: "focusVisible",
  open: "open",
  readOnly: "readOnly",
  required: "required",
  selected: "selected"
};
function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
  const globalStateClass = globalStateClassesMapping[slot];
  return globalStateClass ? "".concat(globalStatePrefix, "-").concat(globalStateClass) : "".concat(ClassNameGenerator$1.generate(componentName), "-").concat(slot);
}
function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
  const result2 = {};
  slots.forEach((slot) => {
    result2[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
  });
  return result2;
}
const THEME_ID = "$$material";
function _objectWithoutPropertiesLoose$4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key2 = sourceKeys[i3];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
function memoize$4(fn2) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn2(arg);
    return cache[arg];
  };
}
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = /* @__PURE__ */ memoize$4(
  function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
);
function sheetForTag(tag2) {
  if (tag2.sheet) {
    return tag2.sheet;
  }
  for (var i3 = 0; i3 < document.styleSheets.length; i3++) {
    if (document.styleSheets[i3].ownerNode === tag2) {
      return document.styleSheets[i3];
    }
  }
}
function createStyleElement(options) {
  var tag2 = document.createElement("style");
  tag2.setAttribute("data-emotion", options.key);
  if (options.nonce !== void 0) {
    tag2.setAttribute("nonce", options.nonce);
  }
  tag2.appendChild(document.createTextNode(""));
  tag2.setAttribute("data-s", "");
  return tag2;
}
var StyleSheet = /* @__PURE__ */ function() {
  function StyleSheet2(options) {
    var _this = this;
    this._insertTag = function(tag2) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag2, before);
      _this.tags.push(tag2);
    };
    this.isSpeedy = options.speedy === void 0 ? true : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce;
    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule2) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag2 = this.tags[this.tags.length - 1];
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag2);
      try {
        sheet.insertRule(rule2, sheet.cssRules.length);
      } catch (e3) {
      }
    } else {
      tag2.appendChild(document.createTextNode(rule2));
    }
    this.ctr++;
  };
  _proto.flush = function flush2() {
    this.tags.forEach(function(tag2) {
      return tag2.parentNode && tag2.parentNode.removeChild(tag2);
    });
    this.tags = [];
    this.ctr = 0;
  };
  return StyleSheet2;
}();
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";
var abs$1 = Math.abs;
var from = String.fromCharCode;
var assign$1 = Object.assign;
function hash(value2, length2) {
  return charat(value2, 0) ^ 45 ? (((length2 << 2 ^ charat(value2, 0)) << 2 ^ charat(value2, 1)) << 2 ^ charat(value2, 2)) << 2 ^ charat(value2, 3) : 0;
}
function trim$1(value2) {
  return value2.trim();
}
function match$2(value2, pattern) {
  return (value2 = pattern.exec(value2)) ? value2[0] : value2;
}
function replace(value2, pattern, replacement) {
  return value2.replace(pattern, replacement);
}
function indexof(value2, search) {
  return value2.indexOf(search);
}
function charat(value2, index2) {
  return value2.charCodeAt(index2) | 0;
}
function substr(value2, begin, end) {
  return value2.slice(begin, end);
}
function strlen(value2) {
  return value2.length;
}
function sizeof(value2) {
  return value2.length;
}
function append$1(value2, array2) {
  return array2.push(value2), value2;
}
function combine(array2, callback) {
  return array2.map(callback).join("");
}
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node$2(value2, root2, parent2, type, props, children, length2) {
  return { value: value2, root: root2, parent: parent2, type, props, children, line, column, length: length2, return: "" };
}
function copy$1(root2, props) {
  return assign$1(node$2("", null, null, "", null, null, 0), root2, { length: -root2.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value2) {
  return line = column = 1, length = strlen(characters = value2), position = 0, [];
}
function dealloc(value2) {
  return characters = "", value2;
}
function delimit(type) {
  return trim$1(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index2, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index2, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index2) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index2, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index2) {
  while (!token(peek()))
    next();
  return slice(index2, position);
}
function compile(value2) {
  return dealloc(parse$5("", null, null, null, [""], value2 = alloc(value2), 0, [0], value2));
}
function parse$5(value2, root2, parent2, rule2, rules, rulesets, pseudo, points, declarations) {
  var index2 = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property2 = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule2;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append$1(comment$1(commenter(next(), caret()), root2, parent2), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index2++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (ampersand == -1)
              characters2 = replace(characters2, /\f/g, "");
            if (property2 > 0 && strlen(characters2) - length2)
              append$1(property2 > 32 ? declaration$1(characters2 + ";", rule2, parent2, length2 - 1) : declaration$1(replace(characters2, " ", "") + ";", rule2, parent2, length2 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append$1(reference = ruleset(characters2, root2, parent2, index2, offset, rules, points, type, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse$5(characters2, root2, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse$5(value2, reference, reference, rule2 && append$1(ruleset(value2, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule2 ? props : children);
                    break;
                  default:
                    parse$5(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index2 = offset = property2 = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property2 = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value2, root2, parent2, index2, offset, rules, points, type, props, children, length2) {
  var post = offset - 1;
  var rule2 = offset === 0 ? rules : [""];
  var size = sizeof(rule2);
  for (var i3 = 0, j2 = 0, k3 = 0; i3 < index2; ++i3)
    for (var x3 = 0, y4 = substr(value2, post + 1, post = abs$1(j2 = points[i3])), z3 = value2; x3 < size; ++x3)
      if (z3 = trim$1(j2 > 0 ? rule2[x3] + " " + y4 : replace(y4, /&\f/g, rule2[x3])))
        props[k3++] = z3;
  return node$2(value2, root2, parent2, offset === 0 ? RULESET : type, props, children, length2);
}
function comment$1(value2, root2, parent2) {
  return node$2(value2, root2, parent2, COMMENT, from(char()), substr(value2, 2, -2), 0);
}
function declaration$1(value2, root2, parent2, length2) {
  return node$2(value2, root2, parent2, DECLARATION, substr(value2, 0, length2), substr(value2, length2 + 1, -1), length2);
}
function serialize(children, callback) {
  var output = "";
  var length2 = sizeof(children);
  for (var i3 = 0; i3 < length2; i3++)
    output += callback(children[i3], i3, children, callback) || "";
  return output;
}
function stringify$6(element, index2, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index2, children, callback) {
    var output = "";
    for (var i3 = 0; i3 < length2; i3++)
      output += collection[i3](element, index2, children, callback) || "";
    return output;
  };
}
function rulesheet(callback) {
  return function(element) {
    if (!element.root) {
      if (element = element.return)
        callback(element);
    }
  };
}
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
  var previous = 0;
  var character2 = 0;
  while (true) {
    previous = character2;
    character2 = peek();
    if (previous === 38 && character2 === 12) {
      points[index2] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice(begin, position);
};
var toRules = function toRules2(parsed, points) {
  var index2 = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index2] = 1;
        }
        parsed[index2] += identifierWithPointTracking(position - 1, points, index2);
        break;
      case 2:
        parsed[index2] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index2] = peek() === 58 ? "&\f" : "";
          points[index2] = parsed[index2].length;
          break;
        }
      default:
        parsed[index2] += from(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value2, points) {
  return dealloc(toRules(alloc(value2), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element) {
  if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }
  var value2 = element.value, parent2 = element.parent;
  var isImplicitRule = element.column === parent2.column && element.line === parent2.line;
  while (parent2.type !== "rule") {
    parent2 = parent2.parent;
    if (!parent2)
      return;
  }
  if (element.props.length === 1 && value2.charCodeAt(0) !== 58 && !fixedElements.get(parent2)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value2, points);
  var parentRules = parent2.props;
  for (var i3 = 0, k3 = 0; i3 < rules.length; i3++) {
    for (var j2 = 0; j2 < parentRules.length; j2++, k3++) {
      element.props[k3] = points[i3] ? rules[i3].replace(/&\f/g, parentRules[j2]) : parentRules[j2] + " " + rules[i3];
    }
  }
};
var removeLabel = function removeLabel2(element) {
  if (element.type === "decl") {
    var value2 = element.value;
    if (
      // charcode for l
      value2.charCodeAt(0) === 108 && // charcode for b
      value2.charCodeAt(2) === 98
    ) {
      element["return"] = "";
      element.value = "";
    }
  }
};
function prefix$1(value2, length2) {
  switch (hash(value2, length2)) {
    case 5103:
      return WEBKIT + "print-" + value2 + value2;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value2 + value2;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value2 + MOZ + value2 + MS + value2 + value2;
    case 6828:
    case 4268:
      return WEBKIT + value2 + MS + value2 + value2;
    case 6165:
      return WEBKIT + value2 + MS + "flex-" + value2 + value2;
    case 5187:
      return WEBKIT + value2 + replace(value2, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value2;
    case 5443:
      return WEBKIT + value2 + MS + "flex-item-" + replace(value2, /flex-|-self/, "") + value2;
    case 4675:
      return WEBKIT + value2 + MS + "flex-line-pack" + replace(value2, /align-content|flex-|-self/, "") + value2;
    case 5548:
      return WEBKIT + value2 + MS + replace(value2, "shrink", "negative") + value2;
    case 5292:
      return WEBKIT + value2 + MS + replace(value2, "basis", "preferred-size") + value2;
    case 6060:
      return WEBKIT + "box-" + replace(value2, "-grow", "") + WEBKIT + value2 + MS + replace(value2, "grow", "positive") + value2;
    case 4554:
      return WEBKIT + replace(value2, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value2;
    case 6187:
      return replace(replace(replace(value2, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value2, "") + value2;
    case 5495:
    case 3959:
      return replace(value2, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value2, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value2 + value2;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value2, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value2;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value2) - 1 - length2 > 6)
        switch (charat(value2, length2 + 1)) {
          case 109:
            if (charat(value2, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value2, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value2, length2 + 3) == 108 ? "$3" : "$2-$3")) + value2;
          case 115:
            return ~indexof(value2, "stretch") ? prefix$1(replace(value2, "stretch", "fill-available"), length2) + value2 : value2;
        }
      break;
    case 4949:
      if (charat(value2, length2 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value2, strlen(value2) - 3 - (~indexof(value2, "!important") && 10))) {
        case 107:
          return replace(value2, ":", ":" + WEBKIT) + value2;
        case 101:
          return replace(value2, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value2, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value2;
      }
      break;
    case 5936:
      switch (charat(value2, length2 + 11)) {
        case 114:
          return WEBKIT + value2 + MS + replace(value2, /[svh]\w+-[tblr]{2}/, "tb") + value2;
        case 108:
          return WEBKIT + value2 + MS + replace(value2, /[svh]\w+-[tblr]{2}/, "tb-rl") + value2;
        case 45:
          return WEBKIT + value2 + MS + replace(value2, /[svh]\w+-[tblr]{2}/, "lr") + value2;
      }
      return WEBKIT + value2 + MS + value2 + value2;
  }
  return value2;
}
var prefixer = function prefixer2(element, index2, children, callback) {
  if (element.length > -1) {
    if (!element["return"])
      switch (element.type) {
        case DECLARATION:
          element["return"] = prefix$1(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize([copy$1(element, {
            value: replace(element.value, "@", "@" + WEBKIT)
          })], callback);
        case RULESET:
          if (element.length)
            return combine(element.props, function(value2) {
              switch (match$2(value2, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize([copy$1(element, {
                    props: [replace(value2, /:(read-\w+)/, ":" + MOZ + "$1")]
                  })], callback);
                case "::placeholder":
                  return serialize([copy$1(element, {
                    props: [replace(value2, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                  }), copy$1(element, {
                    props: [replace(value2, /:(plac\w+)/, ":" + MOZ + "$1")]
                  }), copy$1(element, {
                    props: [replace(value2, /:(plac\w+)/, MS + "input-$1")]
                  })], callback);
              }
              return "";
            });
      }
  }
};
var defaultStylisPlugins = [prefixer];
var createCache = function createCache2(options) {
  var key2 = options.key;
  if (key2 === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node2) {
      var dataEmotionAttribute = node2.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node2);
      node2.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
  var inserted = {};
  var container2;
  var nodesToHydrate = [];
  {
    container2 = options.container || document.head;
    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll('style[data-emotion^="' + key2 + ' "]'),
      function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i3 = 1; i3 < attrib.length; i3++) {
          inserted[attrib[i3]] = true;
        }
        nodesToHydrate.push(node2);
      }
    );
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  {
    var currentSheet;
    var finalizingPlugins = [stringify$6, rulesheet(function(rule2) {
      currentSheet.insert(rule2);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles2) {
      return serialize(compile(styles2), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }
  var cache = {
    key: key2,
    sheet: new StyleSheet({
      key: key2,
      container: container2,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};
var reactIs$1 = { exports: {} };
var reactIs_production_min = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b$1 = "function" === typeof Symbol && Symbol.for, c$1 = b$1 ? Symbol.for("react.element") : 60103, d$1 = b$1 ? Symbol.for("react.portal") : 60106, e = b$1 ? Symbol.for("react.fragment") : 60107, f$1 = b$1 ? Symbol.for("react.strict_mode") : 60108, g$1 = b$1 ? Symbol.for("react.profiler") : 60114, h$3 = b$1 ? Symbol.for("react.provider") : 60109, k$1 = b$1 ? Symbol.for("react.context") : 60110, l$1 = b$1 ? Symbol.for("react.async_mode") : 60111, m$1 = b$1 ? Symbol.for("react.concurrent_mode") : 60111, n$1 = b$1 ? Symbol.for("react.forward_ref") : 60112, p$1 = b$1 ? Symbol.for("react.suspense") : 60113, q$1 = b$1 ? Symbol.for("react.suspense_list") : 60120, r$1 = b$1 ? Symbol.for("react.memo") : 60115, t = b$1 ? Symbol.for("react.lazy") : 60116, v$3 = b$1 ? Symbol.for("react.block") : 60121, w$3 = b$1 ? Symbol.for("react.fundamental") : 60117, x$2 = b$1 ? Symbol.for("react.responder") : 60118, y$1 = b$1 ? Symbol.for("react.scope") : 60119;
function z$1(a4) {
  if ("object" === typeof a4 && null !== a4) {
    var u3 = a4.$$typeof;
    switch (u3) {
      case c$1:
        switch (a4 = a4.type, a4) {
          case l$1:
          case m$1:
          case e:
          case g$1:
          case f$1:
          case p$1:
            return a4;
          default:
            switch (a4 = a4 && a4.$$typeof, a4) {
              case k$1:
              case n$1:
              case t:
              case r$1:
              case h$3:
                return a4;
              default:
                return u3;
            }
        }
      case d$1:
        return u3;
    }
  }
}
function A$1(a4) {
  return z$1(a4) === m$1;
}
reactIs_production_min.AsyncMode = l$1;
reactIs_production_min.ConcurrentMode = m$1;
reactIs_production_min.ContextConsumer = k$1;
reactIs_production_min.ContextProvider = h$3;
reactIs_production_min.Element = c$1;
reactIs_production_min.ForwardRef = n$1;
reactIs_production_min.Fragment = e;
reactIs_production_min.Lazy = t;
reactIs_production_min.Memo = r$1;
reactIs_production_min.Portal = d$1;
reactIs_production_min.Profiler = g$1;
reactIs_production_min.StrictMode = f$1;
reactIs_production_min.Suspense = p$1;
reactIs_production_min.isAsyncMode = function(a4) {
  return A$1(a4) || z$1(a4) === l$1;
};
reactIs_production_min.isConcurrentMode = A$1;
reactIs_production_min.isContextConsumer = function(a4) {
  return z$1(a4) === k$1;
};
reactIs_production_min.isContextProvider = function(a4) {
  return z$1(a4) === h$3;
};
reactIs_production_min.isElement = function(a4) {
  return "object" === typeof a4 && null !== a4 && a4.$$typeof === c$1;
};
reactIs_production_min.isForwardRef = function(a4) {
  return z$1(a4) === n$1;
};
reactIs_production_min.isFragment = function(a4) {
  return z$1(a4) === e;
};
reactIs_production_min.isLazy = function(a4) {
  return z$1(a4) === t;
};
reactIs_production_min.isMemo = function(a4) {
  return z$1(a4) === r$1;
};
reactIs_production_min.isPortal = function(a4) {
  return z$1(a4) === d$1;
};
reactIs_production_min.isProfiler = function(a4) {
  return z$1(a4) === g$1;
};
reactIs_production_min.isStrictMode = function(a4) {
  return z$1(a4) === f$1;
};
reactIs_production_min.isSuspense = function(a4) {
  return z$1(a4) === p$1;
};
reactIs_production_min.isValidElementType = function(a4) {
  return "string" === typeof a4 || "function" === typeof a4 || a4 === e || a4 === m$1 || a4 === g$1 || a4 === f$1 || a4 === p$1 || a4 === q$1 || "object" === typeof a4 && null !== a4 && (a4.$$typeof === t || a4.$$typeof === r$1 || a4.$$typeof === h$3 || a4.$$typeof === k$1 || a4.$$typeof === n$1 || a4.$$typeof === w$3 || a4.$$typeof === x$2 || a4.$$typeof === y$1 || a4.$$typeof === v$3);
};
reactIs_production_min.typeOf = z$1;
{
  reactIs$1.exports = reactIs_production_min;
}
var reactIsExports = reactIs$1.exports;
var reactIs = reactIsExports;
var FORWARD_REF_STATICS = {
  "$$typeof": true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  "$$typeof": true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = "";
  classNames.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag2) {
  var className = cache.key + "-" + serialized.name;
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag2 === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache.registered[className] === void 0
  ) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache, serialized, isStringTag2) {
  registerStyles(cache, serialized, isStringTag2);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};
function murmur2(str) {
  var h4 = 0;
  var k3, i3 = 0, len = str.length;
  for (; len >= 4; ++i3, len -= 4) {
    k3 = str.charCodeAt(i3) & 255 | (str.charCodeAt(++i3) & 255) << 8 | (str.charCodeAt(++i3) & 255) << 16 | (str.charCodeAt(++i3) & 255) << 24;
    k3 = /* Math.imul(k, m): */
    (k3 & 65535) * 1540483477 + ((k3 >>> 16) * 59797 << 16);
    k3 ^= /* k >>> r: */
    k3 >>> 24;
    h4 = /* Math.imul(k, m): */
    (k3 & 65535) * 1540483477 + ((k3 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h4 & 65535) * 1540483477 + ((h4 >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h4 ^= (str.charCodeAt(i3 + 2) & 255) << 16;
    case 2:
      h4 ^= (str.charCodeAt(i3 + 1) & 255) << 8;
    case 1:
      h4 ^= str.charCodeAt(i3) & 255;
      h4 = /* Math.imul(h, m): */
      (h4 & 65535) * 1540483477 + ((h4 >>> 16) * 59797 << 16);
  }
  h4 ^= h4 >>> 13;
  h4 = /* Math.imul(h, m): */
  (h4 & 65535) * 1540483477 + ((h4 >>> 16) * 59797 << 16);
  return ((h4 ^ h4 >>> 15) >>> 0).toString(36);
}
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property2) {
  return property2.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value2) {
  return value2 != null && typeof value2 !== "boolean";
};
var processStyleName = /* @__PURE__ */ memoize$4(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key2, value2) {
  switch (key2) {
    case "animation":
    case "animationName": {
      if (typeof value2 === "string") {
        return value2.replace(animationRegex, function(match2, p1, p2) {
          cursor = {
            name: p1,
            styles: p2,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitlessKeys[key2] !== 1 && !isCustomProperty(key2) && typeof value2 === "number" && value2 !== 0) {
    return value2 + "px";
  }
  return value2;
};
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  if (interpolation.__emotion_styles !== void 0) {
    return interpolation;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      if (interpolation.anim === 1) {
        cursor = {
          name: interpolation.name,
          styles: interpolation.styles,
          next: cursor
        };
        return interpolation.name;
      }
      if (interpolation.styles !== void 0) {
        var next2 = interpolation.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles2 = interpolation.styles + ";";
        return styles2;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result2 = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result2);
      }
      break;
    }
  }
  if (registered == null) {
    return interpolation;
  }
  var cached = registered[interpolation];
  return cached !== void 0 ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string2 = "";
  if (Array.isArray(obj)) {
    for (var i3 = 0; i3 < obj.length; i3++) {
      string2 += handleInterpolation(mergedProps, registered, obj[i3]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value2 = obj[_key];
      if (typeof value2 !== "object") {
        if (registered != null && registered[value2] !== void 0) {
          string2 += _key + "{" + registered[value2] + "}";
        } else if (isProcessableValue(value2)) {
          string2 += processStyleName(_key) + ":" + processStyleValue(_key, value2) + ";";
        }
      } else {
        if (_key === "NO_COMPONENT_SELECTOR" && false) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value2) && typeof value2[0] === "string" && (registered == null || registered[value2[0]] === void 0)) {
          for (var _i = 0; _i < value2.length; _i++) {
            if (isProcessableValue(value2[_i])) {
              string2 += processStyleName(_key) + ":" + processStyleValue(_key, value2[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value2);
          switch (_key) {
            case "animation":
            case "animationName": {
              string2 += processStyleName(_key) + ":" + interpolated + ";";
              break;
            }
            default: {
              string2 += _key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string2;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var cursor;
var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles2 = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles2 += handleInterpolation(mergedProps, registered, strings);
  } else {
    styles2 += strings[0];
  }
  for (var i3 = 1; i3 < args.length; i3++) {
    styles2 += handleInterpolation(mergedProps, registered, args[i3]);
    if (stringMode) {
      styles2 += strings[i3];
    }
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles2)) !== null) {
    identifierName += "-" + // $FlowFixMe we know it's not null
    match2[1];
  }
  var name2 = murmur2(styles2) + identifierName;
  return {
    name: name2,
    styles: styles2,
    next: cursor
  };
};
var syncFallback = function syncFallback2(create2) {
  return create2();
};
var useInsertionEffect = React$1["useInsertionEffect"] ? React$1["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var EmotionCacheContext = /* @__PURE__ */ reactExports.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
    key: "css"
  }) : null
);
EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache2(func) {
  return /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
    var cache = reactExports.useContext(EmotionCacheContext);
    return func(props, cache, ref);
  });
};
var ThemeContext = /* @__PURE__ */ reactExports.createContext({});
function css() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return serializeStyles(args);
}
var keyframes = function keyframes2() {
  var insertable = css.apply(void 0, arguments);
  var name2 = "animation-" + insertable.name;
  return {
    name: name2,
    styles: "@keyframes " + name2 + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString2() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};
var testOmitPropsOnStringTag = isPropValid;
var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key2) {
  return key2 !== "theme";
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag2) {
  return typeof tag2 === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag2.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps2(tag2, options, isReal) {
  var shouldForwardProp2;
  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp2 = tag2.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
      return tag2.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }
  if (typeof shouldForwardProp2 !== "function" && isReal) {
    shouldForwardProp2 = tag2.__emotion_forwardProp;
  }
  return shouldForwardProp2;
};
var Insertion = function Insertion2(_ref) {
  var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag2);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag2);
  });
  return null;
};
var createStyled$1 = function createStyled2(tag2, options) {
  var isReal = tag2.__emotion_real === tag2;
  var baseTag = isReal && tag2.__emotion_base || tag2;
  var identifierName;
  var targetClassName;
  if (options !== void 0) {
    identifierName = options.label;
    targetClassName = options.target;
  }
  var shouldForwardProp2 = composeShouldForwardProps(tag2, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp("as");
  return function() {
    var args = arguments;
    var styles2 = isReal && tag2.__emotion_styles !== void 0 ? tag2.__emotion_styles.slice(0) : [];
    if (identifierName !== void 0) {
      styles2.push("label:" + identifierName + ";");
    }
    if (args[0] == null || args[0].raw === void 0) {
      styles2.push.apply(styles2, args);
    } else {
      styles2.push(args[0][0]);
      var len = args.length;
      var i3 = 1;
      for (; i3 < len; i3++) {
        styles2.push(args[i3], args[0][i3]);
      }
    }
    var Styled = withEmotionCache(function(props, cache, ref) {
      var FinalTag = shouldUseAs && props.as || baseTag;
      var className = "";
      var classInterpolations = [];
      var mergedProps = props;
      if (props.theme == null) {
        mergedProps = {};
        for (var key2 in props) {
          mergedProps[key2] = props[key2];
        }
        mergedProps.theme = reactExports.useContext(ThemeContext);
      }
      if (typeof props.className === "string") {
        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
      className += cache.key + "-" + serialized.name;
      if (targetClassName !== void 0) {
        className += " " + targetClassName;
      }
      var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};
      for (var _key in props) {
        if (shouldUseAs && _key === "as")
          continue;
        if (
          // $FlowFixMe
          finalShouldForwardProp(_key)
        ) {
          newProps[_key] = props[_key];
        }
      }
      newProps.className = className;
      newProps.ref = ref;
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion, {
        cache,
        serialized,
        isStringTag: typeof FinalTag === "string"
      }), /* @__PURE__ */ reactExports.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
    Styled.defaultProps = tag2.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles2;
    Styled.__emotion_forwardProp = shouldForwardProp2;
    Object.defineProperty(Styled, "toString", {
      value: function value2() {
        if (targetClassName === void 0 && false) {
          return "NO_COMPONENT_SELECTOR";
        }
        return "." + targetClassName;
      }
    });
    Styled.withComponent = function(nextTag, nextOptions) {
      return createStyled2(nextTag, _extends$8({}, options, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      })).apply(void 0, styles2);
    };
    return Styled;
  };
};
var tags = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var newStyled = createStyled$1.bind();
tags.forEach(function(tagName) {
  newStyled[tagName] = newStyled(tagName);
});
/**
 * @mui/styled-engine v5.14.12
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function styled$3(tag2, options) {
  const stylesFactory = newStyled(tag2, options);
  return stylesFactory;
}
const internal_processStyles = (tag2, processor2) => {
  if (Array.isArray(tag2.__emotion_styles)) {
    tag2.__emotion_styles = processor2(tag2.__emotion_styles);
  }
};
const _excluded$l = ["values", "unit", "step"];
const sortBreakpointsValues = (values2) => {
  const breakpointsAsArray = Object.keys(values2).map((key2) => ({
    key: key2,
    val: values2[key2]
  })) || [];
  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
  return breakpointsAsArray.reduce((acc, obj) => {
    return _extends$8({}, acc, {
      [obj.key]: obj.val
    });
  }, {});
};
function createBreakpoints(breakpoints) {
  const {
    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values: values2 = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    },
    unit = "px",
    step = 5
  } = breakpoints, other = _objectWithoutPropertiesLoose$4(breakpoints, _excluded$l);
  const sortedValues = sortBreakpointsValues(values2);
  const keys2 = Object.keys(sortedValues);
  function up(key2) {
    const value2 = typeof values2[key2] === "number" ? values2[key2] : key2;
    return "@media (min-width:".concat(value2).concat(unit, ")");
  }
  function down(key2) {
    const value2 = typeof values2[key2] === "number" ? values2[key2] : key2;
    return "@media (max-width:".concat(value2 - step / 100).concat(unit, ")");
  }
  function between(start2, end) {
    const endIndex = keys2.indexOf(end);
    return "@media (min-width:".concat(typeof values2[start2] === "number" ? values2[start2] : start2).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values2[keys2[endIndex]] === "number" ? values2[keys2[endIndex]] : end) - step / 100).concat(unit, ")");
  }
  function only(key2) {
    if (keys2.indexOf(key2) + 1 < keys2.length) {
      return between(key2, keys2[keys2.indexOf(key2) + 1]);
    }
    return up(key2);
  }
  function not(key2) {
    const keyIndex = keys2.indexOf(key2);
    if (keyIndex === 0) {
      return up(keys2[1]);
    }
    if (keyIndex === keys2.length - 1) {
      return down(keys2[keyIndex]);
    }
    return between(key2, keys2[keys2.indexOf(key2) + 1]).replace("@media", "@media not all and");
  }
  return _extends$8({
    keys: keys2,
    values: sortedValues,
    up,
    down,
    between,
    only,
    not,
    unit
  }, other);
}
const shape = {
  borderRadius: 4
};
const shape$1 = shape;
function merge(acc, item) {
  if (!item) {
    return acc;
  }
  return deepmerge$3(acc, item, {
    clone: false
    // No need to clone deep, it's way faster.
  });
}
const values = {
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536
  // large screen
};
const defaultBreakpoints = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ["xs", "sm", "md", "lg", "xl"],
  up: (key2) => "@media (min-width:".concat(values[key2], "px)")
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
  const theme = props.theme || {};
  if (Array.isArray(propValue)) {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return propValue.reduce((acc, item, index2) => {
      acc[themeBreakpoints.up(themeBreakpoints.keys[index2])] = styleFromPropValue(propValue[index2]);
      return acc;
    }, {});
  }
  if (typeof propValue === "object") {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return Object.keys(propValue).reduce((acc, breakpoint) => {
      if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
        const mediaKey = themeBreakpoints.up(breakpoint);
        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
      } else {
        const cssKey = breakpoint;
        acc[cssKey] = propValue[cssKey];
      }
      return acc;
    }, {});
  }
  const output = styleFromPropValue(propValue);
  return output;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
  var _breakpointsInput$key;
  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key2) => {
    const breakpointStyleKey = breakpointsInput.up(key2);
    acc[breakpointStyleKey] = {};
    return acc;
  }, {});
  return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style2) {
  return breakpointKeys.reduce((acc, key2) => {
    const breakpointOutput = acc[key2];
    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
    if (isBreakpointUnused) {
      delete acc[key2];
    }
    return acc;
  }, style2);
}
function mergeBreakpointsInOrder(breakpointsInput, ...styles2) {
  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
  const mergedOutput = [emptyBreakpoints, ...styles2].reduce((prev2, next2) => deepmerge$3(prev2, next2), {});
  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
}
function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
  if (typeof breakpointValues !== "object") {
    return {};
  }
  const base = {};
  const breakpointsKeys = Object.keys(themeBreakpoints);
  if (Array.isArray(breakpointValues)) {
    breakpointsKeys.forEach((breakpoint, i3) => {
      if (i3 < breakpointValues.length) {
        base[breakpoint] = true;
      }
    });
  } else {
    breakpointsKeys.forEach((breakpoint) => {
      if (breakpointValues[breakpoint] != null) {
        base[breakpoint] = true;
      }
    });
  }
  return base;
}
function resolveBreakpointValues({
  values: breakpointValues,
  breakpoints: themeBreakpoints,
  base: customBase
}) {
  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
  const keys2 = Object.keys(base);
  if (keys2.length === 0) {
    return breakpointValues;
  }
  let previous;
  return keys2.reduce((acc, breakpoint, i3) => {
    if (Array.isArray(breakpointValues)) {
      acc[breakpoint] = breakpointValues[i3] != null ? breakpointValues[i3] : breakpointValues[previous];
      previous = i3;
    } else if (typeof breakpointValues === "object") {
      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
      previous = breakpoint;
    } else {
      acc[breakpoint] = breakpointValues;
    }
    return acc;
  }, {});
}
function getPath(obj, path, checkVars = true) {
  if (!path || typeof path !== "string") {
    return null;
  }
  if (obj && obj.vars && checkVars) {
    const val2 = "vars.".concat(path).split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
    if (val2 != null) {
      return val2;
    }
  }
  return path.split(".").reduce((acc, item) => {
    if (acc && acc[item] != null) {
      return acc[item];
    }
    return null;
  }, obj);
}
function getStyleValue(themeMapping, transform2, propValueFinal, userValue = propValueFinal) {
  let value2;
  if (typeof themeMapping === "function") {
    value2 = themeMapping(propValueFinal);
  } else if (Array.isArray(themeMapping)) {
    value2 = themeMapping[propValueFinal] || userValue;
  } else {
    value2 = getPath(themeMapping, propValueFinal) || userValue;
  }
  if (transform2) {
    value2 = transform2(value2, userValue, themeMapping);
  }
  return value2;
}
function style$2(options) {
  const {
    prop,
    cssProperty = options.prop,
    themeKey,
    transform: transform2
  } = options;
  const fn2 = (props) => {
    if (props[prop] == null) {
      return null;
    }
    const propValue = props[prop];
    const theme = props.theme;
    const themeMapping = getPath(theme, themeKey) || {};
    const styleFromPropValue = (propValueFinal) => {
      let value2 = getStyleValue(themeMapping, transform2, propValueFinal);
      if (propValueFinal === value2 && typeof propValueFinal === "string") {
        value2 = getStyleValue(themeMapping, transform2, "".concat(prop).concat(propValueFinal === "default" ? "" : capitalize$3(propValueFinal)), propValueFinal);
      }
      if (cssProperty === false) {
        return value2;
      }
      return {
        [cssProperty]: value2
      };
    };
    return handleBreakpoints(props, propValue, styleFromPropValue);
  };
  fn2.propTypes = {};
  fn2.filterProps = [prop];
  return fn2;
}
function memoize$3(fn2) {
  const cache = {};
  return (arg) => {
    if (cache[arg] === void 0) {
      cache[arg] = fn2(arg);
    }
    return cache[arg];
  };
}
const properties = {
  m: "margin",
  p: "padding"
};
const directions = {
  t: "Top",
  r: "Right",
  b: "Bottom",
  l: "Left",
  x: ["Left", "Right"],
  y: ["Top", "Bottom"]
};
const aliases = {
  marginX: "mx",
  marginY: "my",
  paddingX: "px",
  paddingY: "py"
};
const getCssProperties = memoize$3((prop) => {
  if (prop.length > 2) {
    if (aliases[prop]) {
      prop = aliases[prop];
    } else {
      return [prop];
    }
  }
  const [a4, b3] = prop.split("");
  const property2 = properties[a4];
  const direction = directions[b3] || "";
  return Array.isArray(direction) ? direction.map((dir) => property2 + dir) : [property2 + direction];
});
const marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
const paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
[...marginKeys, ...paddingKeys];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
  var _getPath;
  const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
  if (typeof themeSpacing === "number") {
    return (abs2) => {
      if (typeof abs2 === "string") {
        return abs2;
      }
      return themeSpacing * abs2;
    };
  }
  if (Array.isArray(themeSpacing)) {
    return (abs2) => {
      if (typeof abs2 === "string") {
        return abs2;
      }
      return themeSpacing[abs2];
    };
  }
  if (typeof themeSpacing === "function") {
    return themeSpacing;
  }
  return () => void 0;
}
function createUnarySpacing(theme) {
  return createUnaryUnit(theme, "spacing", 8);
}
function getValue$3(transformer, propValue) {
  if (typeof propValue === "string" || propValue == null) {
    return propValue;
  }
  const abs2 = Math.abs(propValue);
  const transformed = transformer(abs2);
  if (propValue >= 0) {
    return transformed;
  }
  if (typeof transformed === "number") {
    return -transformed;
  }
  return "-".concat(transformed);
}
function getStyleFromPropValue(cssProperties, transformer) {
  return (propValue) => cssProperties.reduce((acc, cssProperty) => {
    acc[cssProperty] = getValue$3(transformer, propValue);
    return acc;
  }, {});
}
function resolveCssProperty(props, keys2, prop, transformer) {
  if (keys2.indexOf(prop) === -1) {
    return null;
  }
  const cssProperties = getCssProperties(prop);
  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
  const propValue = props[prop];
  return handleBreakpoints(props, propValue, styleFromPropValue);
}
function style$1(props, keys2) {
  const transformer = createUnarySpacing(props.theme);
  return Object.keys(props).map((prop) => resolveCssProperty(props, keys2, prop, transformer)).reduce(merge, {});
}
function margin(props) {
  return style$1(props, marginKeys);
}
margin.propTypes = {};
margin.filterProps = marginKeys;
function padding(props) {
  return style$1(props, paddingKeys);
}
padding.propTypes = {};
padding.filterProps = paddingKeys;
function createSpacing(spacingInput = 8) {
  if (spacingInput.mui) {
    return spacingInput;
  }
  const transform2 = createUnarySpacing({
    spacing: spacingInput
  });
  const spacing = (...argsInput) => {
    const args = argsInput.length === 0 ? [1] : argsInput;
    return args.map((argument) => {
      const output = transform2(argument);
      return typeof output === "number" ? "".concat(output, "px") : output;
    }).join(" ");
  };
  spacing.mui = true;
  return spacing;
}
function compose(...styles2) {
  const handlers = styles2.reduce((acc, style2) => {
    style2.filterProps.forEach((prop) => {
      acc[prop] = style2;
    });
    return acc;
  }, {});
  const fn2 = (props) => {
    return Object.keys(props).reduce((acc, prop) => {
      if (handlers[prop]) {
        return merge(acc, handlers[prop](props));
      }
      return acc;
    }, {});
  };
  fn2.propTypes = {};
  fn2.filterProps = styles2.reduce((acc, style2) => acc.concat(style2.filterProps), []);
  return fn2;
}
function borderTransform(value2) {
  if (typeof value2 !== "number") {
    return value2;
  }
  return "".concat(value2, "px solid");
}
const border = style$2({
  prop: "border",
  themeKey: "borders",
  transform: borderTransform
});
const borderTop = style$2({
  prop: "borderTop",
  themeKey: "borders",
  transform: borderTransform
});
const borderRight = style$2({
  prop: "borderRight",
  themeKey: "borders",
  transform: borderTransform
});
const borderBottom = style$2({
  prop: "borderBottom",
  themeKey: "borders",
  transform: borderTransform
});
const borderLeft = style$2({
  prop: "borderLeft",
  themeKey: "borders",
  transform: borderTransform
});
const borderColor = style$2({
  prop: "borderColor",
  themeKey: "palette"
});
const borderTopColor = style$2({
  prop: "borderTopColor",
  themeKey: "palette"
});
const borderRightColor = style$2({
  prop: "borderRightColor",
  themeKey: "palette"
});
const borderBottomColor = style$2({
  prop: "borderBottomColor",
  themeKey: "palette"
});
const borderLeftColor = style$2({
  prop: "borderLeftColor",
  themeKey: "palette"
});
const borderRadius = (props) => {
  if (props.borderRadius !== void 0 && props.borderRadius !== null) {
    const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4);
    const styleFromPropValue = (propValue) => ({
      borderRadius: getValue$3(transformer, propValue)
    });
    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
  }
  return null;
};
borderRadius.propTypes = {};
borderRadius.filterProps = ["borderRadius"];
compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
const gap = (props) => {
  if (props.gap !== void 0 && props.gap !== null) {
    const transformer = createUnaryUnit(props.theme, "spacing", 8);
    const styleFromPropValue = (propValue) => ({
      gap: getValue$3(transformer, propValue)
    });
    return handleBreakpoints(props, props.gap, styleFromPropValue);
  }
  return null;
};
gap.propTypes = {};
gap.filterProps = ["gap"];
const columnGap = (props) => {
  if (props.columnGap !== void 0 && props.columnGap !== null) {
    const transformer = createUnaryUnit(props.theme, "spacing", 8);
    const styleFromPropValue = (propValue) => ({
      columnGap: getValue$3(transformer, propValue)
    });
    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
  }
  return null;
};
columnGap.propTypes = {};
columnGap.filterProps = ["columnGap"];
const rowGap = (props) => {
  if (props.rowGap !== void 0 && props.rowGap !== null) {
    const transformer = createUnaryUnit(props.theme, "spacing", 8);
    const styleFromPropValue = (propValue) => ({
      rowGap: getValue$3(transformer, propValue)
    });
    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
  }
  return null;
};
rowGap.propTypes = {};
rowGap.filterProps = ["rowGap"];
const gridColumn = style$2({
  prop: "gridColumn"
});
const gridRow = style$2({
  prop: "gridRow"
});
const gridAutoFlow = style$2({
  prop: "gridAutoFlow"
});
const gridAutoColumns = style$2({
  prop: "gridAutoColumns"
});
const gridAutoRows = style$2({
  prop: "gridAutoRows"
});
const gridTemplateColumns = style$2({
  prop: "gridTemplateColumns"
});
const gridTemplateRows = style$2({
  prop: "gridTemplateRows"
});
const gridTemplateAreas = style$2({
  prop: "gridTemplateAreas"
});
const gridArea = style$2({
  prop: "gridArea"
});
compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
function paletteTransform(value2, userValue) {
  if (userValue === "grey") {
    return userValue;
  }
  return value2;
}
const color = style$2({
  prop: "color",
  themeKey: "palette",
  transform: paletteTransform
});
const bgcolor = style$2({
  prop: "bgcolor",
  cssProperty: "backgroundColor",
  themeKey: "palette",
  transform: paletteTransform
});
const backgroundColor = style$2({
  prop: "backgroundColor",
  themeKey: "palette",
  transform: paletteTransform
});
compose(color, bgcolor, backgroundColor);
function sizingTransform(value2) {
  return value2 <= 1 && value2 !== 0 ? "".concat(value2 * 100, "%") : value2;
}
const width = style$2({
  prop: "width",
  transform: sizingTransform
});
const maxWidth = (props) => {
  if (props.maxWidth !== void 0 && props.maxWidth !== null) {
    const styleFromPropValue = (propValue) => {
      var _props$theme, _props$theme2;
      const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values[propValue];
      if (!breakpoint) {
        return {
          maxWidth: sizingTransform(propValue)
        };
      }
      if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
        return {
          maxWidth: "".concat(breakpoint).concat(props.theme.breakpoints.unit)
        };
      }
      return {
        maxWidth: breakpoint
      };
    };
    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
  }
  return null;
};
maxWidth.filterProps = ["maxWidth"];
const minWidth = style$2({
  prop: "minWidth",
  transform: sizingTransform
});
const height = style$2({
  prop: "height",
  transform: sizingTransform
});
const maxHeight = style$2({
  prop: "maxHeight",
  transform: sizingTransform
});
const minHeight = style$2({
  prop: "minHeight",
  transform: sizingTransform
});
style$2({
  prop: "size",
  cssProperty: "width",
  transform: sizingTransform
});
style$2({
  prop: "size",
  cssProperty: "height",
  transform: sizingTransform
});
const boxSizing = style$2({
  prop: "boxSizing"
});
compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
const defaultSxConfig = {
  // borders
  border: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderTop: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderRight: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderBottom: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderLeft: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderColor: {
    themeKey: "palette"
  },
  borderTopColor: {
    themeKey: "palette"
  },
  borderRightColor: {
    themeKey: "palette"
  },
  borderBottomColor: {
    themeKey: "palette"
  },
  borderLeftColor: {
    themeKey: "palette"
  },
  borderRadius: {
    themeKey: "shape.borderRadius",
    style: borderRadius
  },
  // palette
  color: {
    themeKey: "palette",
    transform: paletteTransform
  },
  bgcolor: {
    themeKey: "palette",
    cssProperty: "backgroundColor",
    transform: paletteTransform
  },
  backgroundColor: {
    themeKey: "palette",
    transform: paletteTransform
  },
  // spacing
  p: {
    style: padding
  },
  pt: {
    style: padding
  },
  pr: {
    style: padding
  },
  pb: {
    style: padding
  },
  pl: {
    style: padding
  },
  px: {
    style: padding
  },
  py: {
    style: padding
  },
  padding: {
    style: padding
  },
  paddingTop: {
    style: padding
  },
  paddingRight: {
    style: padding
  },
  paddingBottom: {
    style: padding
  },
  paddingLeft: {
    style: padding
  },
  paddingX: {
    style: padding
  },
  paddingY: {
    style: padding
  },
  paddingInline: {
    style: padding
  },
  paddingInlineStart: {
    style: padding
  },
  paddingInlineEnd: {
    style: padding
  },
  paddingBlock: {
    style: padding
  },
  paddingBlockStart: {
    style: padding
  },
  paddingBlockEnd: {
    style: padding
  },
  m: {
    style: margin
  },
  mt: {
    style: margin
  },
  mr: {
    style: margin
  },
  mb: {
    style: margin
  },
  ml: {
    style: margin
  },
  mx: {
    style: margin
  },
  my: {
    style: margin
  },
  margin: {
    style: margin
  },
  marginTop: {
    style: margin
  },
  marginRight: {
    style: margin
  },
  marginBottom: {
    style: margin
  },
  marginLeft: {
    style: margin
  },
  marginX: {
    style: margin
  },
  marginY: {
    style: margin
  },
  marginInline: {
    style: margin
  },
  marginInlineStart: {
    style: margin
  },
  marginInlineEnd: {
    style: margin
  },
  marginBlock: {
    style: margin
  },
  marginBlockStart: {
    style: margin
  },
  marginBlockEnd: {
    style: margin
  },
  // display
  displayPrint: {
    cssProperty: false,
    transform: (value2) => ({
      "@media print": {
        display: value2
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
    style: gap
  },
  rowGap: {
    style: rowGap
  },
  columnGap: {
    style: columnGap
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: "zIndex"
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: "shadows"
  },
  // sizing
  width: {
    transform: sizingTransform
  },
  maxWidth: {
    style: maxWidth
  },
  minWidth: {
    transform: sizingTransform
  },
  height: {
    transform: sizingTransform
  },
  maxHeight: {
    transform: sizingTransform
  },
  minHeight: {
    transform: sizingTransform
  },
  boxSizing: {},
  // typography
  fontFamily: {
    themeKey: "typography"
  },
  fontSize: {
    themeKey: "typography"
  },
  fontStyle: {
    themeKey: "typography"
  },
  fontWeight: {
    themeKey: "typography"
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: false,
    themeKey: "typography"
  }
};
const defaultSxConfig$1 = defaultSxConfig;
function objectsHaveSameKeys(...objects) {
  const allKeys = objects.reduce((keys2, object2) => keys2.concat(Object.keys(object2)), []);
  const union = new Set(allKeys);
  return objects.every((object2) => union.size === Object.keys(object2).length);
}
function callIfFn(maybeFn, arg) {
  return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
}
function unstable_createStyleFunctionSx() {
  function getThemeValue(prop, val2, theme, config2) {
    const props = {
      [prop]: val2,
      theme
    };
    const options = config2[prop];
    if (!options) {
      return {
        [prop]: val2
      };
    }
    const {
      cssProperty = prop,
      themeKey,
      transform: transform2,
      style: style2
    } = options;
    if (val2 == null) {
      return null;
    }
    if (themeKey === "typography" && val2 === "inherit") {
      return {
        [prop]: val2
      };
    }
    const themeMapping = getPath(theme, themeKey) || {};
    if (style2) {
      return style2(props);
    }
    const styleFromPropValue = (propValueFinal) => {
      let value2 = getStyleValue(themeMapping, transform2, propValueFinal);
      if (propValueFinal === value2 && typeof propValueFinal === "string") {
        value2 = getStyleValue(themeMapping, transform2, "".concat(prop).concat(propValueFinal === "default" ? "" : capitalize$3(propValueFinal)), propValueFinal);
      }
      if (cssProperty === false) {
        return value2;
      }
      return {
        [cssProperty]: value2
      };
    };
    return handleBreakpoints(props, val2, styleFromPropValue);
  }
  function styleFunctionSx2(props) {
    var _theme$unstable_sxCon;
    const {
      sx,
      theme = {}
    } = props || {};
    if (!sx) {
      return null;
    }
    const config2 = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig$1;
    function traverse(sxInput) {
      let sxObject = sxInput;
      if (typeof sxInput === "function") {
        sxObject = sxInput(theme);
      } else if (typeof sxInput !== "object") {
        return sxInput;
      }
      if (!sxObject) {
        return null;
      }
      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
      const breakpointsKeys = Object.keys(emptyBreakpoints);
      let css2 = emptyBreakpoints;
      Object.keys(sxObject).forEach((styleKey) => {
        const value2 = callIfFn(sxObject[styleKey], theme);
        if (value2 !== null && value2 !== void 0) {
          if (typeof value2 === "object") {
            if (config2[styleKey]) {
              css2 = merge(css2, getThemeValue(styleKey, value2, theme, config2));
            } else {
              const breakpointsValues = handleBreakpoints({
                theme
              }, value2, (x3) => ({
                [styleKey]: x3
              }));
              if (objectsHaveSameKeys(breakpointsValues, value2)) {
                css2[styleKey] = styleFunctionSx2({
                  sx: value2,
                  theme
                });
              } else {
                css2 = merge(css2, breakpointsValues);
              }
            }
          } else {
            css2 = merge(css2, getThemeValue(styleKey, value2, theme, config2));
          }
        }
      });
      return removeUnusedBreakpoints(breakpointsKeys, css2);
    }
    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
  }
  return styleFunctionSx2;
}
const styleFunctionSx = unstable_createStyleFunctionSx();
styleFunctionSx.filterProps = ["sx"];
const styleFunctionSx$1 = styleFunctionSx;
const _excluded$k = ["breakpoints", "palette", "spacing", "shape"];
function createTheme$1(options = {}, ...args) {
  const {
    breakpoints: breakpointsInput = {},
    palette: paletteInput = {},
    spacing: spacingInput,
    shape: shapeInput = {}
  } = options, other = _objectWithoutPropertiesLoose$4(options, _excluded$k);
  const breakpoints = createBreakpoints(breakpointsInput);
  const spacing = createSpacing(spacingInput);
  let muiTheme = deepmerge$3({
    breakpoints,
    direction: "ltr",
    components: {},
    // Inject component definitions.
    palette: _extends$8({
      mode: "light"
    }, paletteInput),
    spacing,
    shape: _extends$8({}, shape$1, shapeInput)
  }, other);
  muiTheme = args.reduce((acc, argument) => deepmerge$3(acc, argument), muiTheme);
  muiTheme.unstable_sxConfig = _extends$8({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx$1({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}
function isObjectEmpty(obj) {
  return Object.keys(obj).length === 0;
}
function useTheme$2(defaultTheme2 = null) {
  const contextTheme = reactExports.useContext(ThemeContext);
  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme2 : contextTheme;
}
const systemDefaultTheme$1 = createTheme$1();
function useTheme$1(defaultTheme2 = systemDefaultTheme$1) {
  return useTheme$2(defaultTheme2);
}
const _excluded$j = ["sx"];
const splitProps = (props) => {
  var _props$theme$unstable, _props$theme;
  const result2 = {
    systemProps: {},
    otherProps: {}
  };
  const config2 = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig$1;
  Object.keys(props).forEach((prop) => {
    if (config2[prop]) {
      result2.systemProps[prop] = props[prop];
    } else {
      result2.otherProps[prop] = props[prop];
    }
  });
  return result2;
};
function extendSxProp(props) {
  const {
    sx: inSx
  } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$j);
  const {
    systemProps,
    otherProps
  } = splitProps(other);
  let finalSx;
  if (Array.isArray(inSx)) {
    finalSx = [systemProps, ...inSx];
  } else if (typeof inSx === "function") {
    finalSx = (...args) => {
      const result2 = inSx(...args);
      if (!isPlainObject$4(result2)) {
        return systemProps;
      }
      return _extends$8({}, systemProps, result2);
    };
  } else {
    finalSx = _extends$8({}, systemProps, inSx);
  }
  return _extends$8({}, otherProps, {
    sx: finalSx
  });
}
function r(e3) {
  var t3, f2, n2 = "";
  if ("string" == typeof e3 || "number" == typeof e3)
    n2 += e3;
  else if ("object" == typeof e3)
    if (Array.isArray(e3))
      for (t3 = 0; t3 < e3.length; t3++)
        e3[t3] && (f2 = r(e3[t3])) && (n2 && (n2 += " "), n2 += f2);
    else
      for (t3 in e3)
        e3[t3] && (n2 && (n2 += " "), n2 += t3);
  return n2;
}
function clsx() {
  for (var e3, t3, f2 = 0, n2 = ""; f2 < arguments.length; )
    (e3 = arguments[f2++]) && (t3 = r(e3)) && (n2 && (n2 += " "), n2 += t3);
  return n2;
}
const _excluded$i = ["className", "component"];
function createBox(options = {}) {
  const {
    themeId,
    defaultTheme: defaultTheme2,
    defaultClassName = "MuiBox-root",
    generateClassName
  } = options;
  const BoxRoot = styled$3("div", {
    shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
  })(styleFunctionSx$1);
  const Box2 = /* @__PURE__ */ reactExports.forwardRef(function Box3(inProps, ref) {
    const theme = useTheme$1(defaultTheme2);
    const _extendSxProp = extendSxProp(inProps), {
      className,
      component = "div"
    } = _extendSxProp, other = _objectWithoutPropertiesLoose$4(_extendSxProp, _excluded$i);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(BoxRoot, _extends$8({
      as: component,
      ref,
      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
      theme: themeId ? theme[themeId] || theme : theme
    }, other));
  });
  return Box2;
}
const _excluded$h = ["variant"];
function isEmpty$1(string2) {
  return string2.length === 0;
}
function propsToClassKey(props) {
  const {
    variant
  } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$h);
  let classKey = variant || "";
  Object.keys(other).sort().forEach((key2) => {
    if (key2 === "color") {
      classKey += isEmpty$1(classKey) ? props[key2] : capitalize$3(props[key2]);
    } else {
      classKey += "".concat(isEmpty$1(classKey) ? key2 : capitalize$3(key2)).concat(capitalize$3(props[key2].toString()));
    }
  });
  return classKey;
}
const _excluded$g = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
function isEmpty(obj) {
  return Object.keys(obj).length === 0;
}
function isStringTag(tag2) {
  return typeof tag2 === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag2.charCodeAt(0) > 96;
}
const getStyleOverrides = (name2, theme) => {
  if (theme.components && theme.components[name2] && theme.components[name2].styleOverrides) {
    return theme.components[name2].styleOverrides;
  }
  return null;
};
const transformVariants = (variants) => {
  const variantsStyles = {};
  if (variants) {
    variants.forEach((definition) => {
      const key2 = propsToClassKey(definition.props);
      variantsStyles[key2] = definition.style;
    });
  }
  return variantsStyles;
};
const getVariantStyles = (name2, theme) => {
  let variants = [];
  if (theme && theme.components && theme.components[name2] && theme.components[name2].variants) {
    variants = theme.components[name2].variants;
  }
  return transformVariants(variants);
};
const variantsResolver = (props, styles2, variants) => {
  const {
    ownerState = {}
  } = props;
  const variantsStyles = [];
  if (variants) {
    variants.forEach((variant) => {
      let isMatch = true;
      Object.keys(variant.props).forEach((key2) => {
        if (ownerState[key2] !== variant.props[key2] && props[key2] !== variant.props[key2]) {
          isMatch = false;
        }
      });
      if (isMatch) {
        variantsStyles.push(styles2[propsToClassKey(variant.props)]);
      }
    });
  }
  return variantsStyles;
};
const themeVariantsResolver = (props, styles2, theme, name2) => {
  var _theme$components;
  const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name2]) == null ? void 0 : _theme$components.variants;
  return variantsResolver(props, styles2, themeVariants);
};
function shouldForwardProp(prop) {
  return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
}
const systemDefaultTheme = createTheme$1();
const lowercaseFirstLetter = (string2) => {
  if (!string2) {
    return string2;
  }
  return string2.charAt(0).toLowerCase() + string2.slice(1);
};
function resolveTheme({
  defaultTheme: defaultTheme2,
  theme,
  themeId
}) {
  return isEmpty(theme) ? defaultTheme2 : theme[themeId] || theme;
}
function defaultOverridesResolver(slot) {
  if (!slot) {
    return null;
  }
  return (props, styles2) => styles2[slot];
}
const muiStyledFunctionResolver = ({
  styledArg,
  props,
  defaultTheme: defaultTheme2,
  themeId
}) => {
  const resolvedStyles = styledArg(_extends$8({}, props, {
    theme: resolveTheme(_extends$8({}, props, {
      defaultTheme: defaultTheme2,
      themeId
    }))
  }));
  let optionalVariants;
  if (resolvedStyles && resolvedStyles.variants) {
    optionalVariants = resolvedStyles.variants;
    delete resolvedStyles.variants;
  }
  if (optionalVariants) {
    const variantsStyles = variantsResolver(props, transformVariants(optionalVariants), optionalVariants);
    return [resolvedStyles, ...variantsStyles];
  }
  return resolvedStyles;
};
function createStyled(input2 = {}) {
  const {
    themeId,
    defaultTheme: defaultTheme2 = systemDefaultTheme,
    rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
    slotShouldForwardProp = shouldForwardProp
  } = input2;
  const systemSx = (props) => {
    return styleFunctionSx$1(_extends$8({}, props, {
      theme: resolveTheme(_extends$8({}, props, {
        defaultTheme: defaultTheme2,
        themeId
      }))
    }));
  };
  systemSx.__mui_systemSx = true;
  return (tag2, inputOptions = {}) => {
    internal_processStyles(tag2, (styles2) => styles2.filter((style2) => !(style2 != null && style2.__mui_systemSx)));
    const {
      name: componentName,
      slot: componentSlot,
      skipVariantsResolver: inputSkipVariantsResolver,
      skipSx: inputSkipSx,
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      overridesResolver: overridesResolver2 = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
    } = inputOptions, options = _objectWithoutPropertiesLoose$4(inputOptions, _excluded$g);
    const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
      // TODO v6: remove `Root` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
    );
    const skipSx = inputSkipSx || false;
    let label;
    let shouldForwardPropOption = shouldForwardProp;
    if (componentSlot === "Root" || componentSlot === "root") {
      shouldForwardPropOption = rootShouldForwardProp2;
    } else if (componentSlot) {
      shouldForwardPropOption = slotShouldForwardProp;
    } else if (isStringTag(tag2)) {
      shouldForwardPropOption = void 0;
    }
    const defaultStyledResolver = styled$3(tag2, _extends$8({
      shouldForwardProp: shouldForwardPropOption,
      label
    }, options));
    const muiStyledResolver = (styleArg, ...expressions) => {
      const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
        if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg) {
          return (props) => muiStyledFunctionResolver({
            styledArg: stylesArg,
            props,
            defaultTheme: defaultTheme2,
            themeId
          });
        }
        if (isPlainObject$4(stylesArg)) {
          let transformedStylesArg = stylesArg;
          let styledArgVariants;
          if (stylesArg && stylesArg.variants) {
            styledArgVariants = stylesArg.variants;
            delete transformedStylesArg.variants;
            transformedStylesArg = (props) => {
              let result2 = stylesArg;
              const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
              variantStyles.forEach((variantStyle) => {
                result2 = deepmerge$3(result2, variantStyle);
              });
              return result2;
            };
          }
          return transformedStylesArg;
        }
        return stylesArg;
      }) : [];
      let transformedStyleArg = styleArg;
      if (isPlainObject$4(styleArg)) {
        let styledArgVariants;
        if (styleArg && styleArg.variants) {
          styledArgVariants = styleArg.variants;
          delete transformedStyleArg.variants;
          transformedStyleArg = (props) => {
            let result2 = styleArg;
            const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
            variantStyles.forEach((variantStyle) => {
              result2 = deepmerge$3(result2, variantStyle);
            });
            return result2;
          };
        }
      } else if (typeof styleArg === "function" && // On the server Emotion doesn't use React.forwardRef for creating components, so the created
      // component stays as a function. This condition makes sure that we do not interpolate functions
      // which are basically components used as a selectors.
      styleArg.__emotion_real !== styleArg) {
        transformedStyleArg = (props) => muiStyledFunctionResolver({
          styledArg: styleArg,
          props,
          defaultTheme: defaultTheme2,
          themeId
        });
      }
      if (componentName && overridesResolver2) {
        expressionsWithDefaultTheme.push((props) => {
          const theme = resolveTheme(_extends$8({}, props, {
            defaultTheme: defaultTheme2,
            themeId
          }));
          const styleOverrides = getStyleOverrides(componentName, theme);
          if (styleOverrides) {
            const resolvedStyleOverrides = {};
            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
              resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle(_extends$8({}, props, {
                theme
              })) : slotStyle;
            });
            return overridesResolver2(props, resolvedStyleOverrides);
          }
          return null;
        });
      }
      if (componentName && !skipVariantsResolver) {
        expressionsWithDefaultTheme.push((props) => {
          const theme = resolveTheme(_extends$8({}, props, {
            defaultTheme: defaultTheme2,
            themeId
          }));
          return themeVariantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
        });
      }
      if (!skipSx) {
        expressionsWithDefaultTheme.push(systemSx);
      }
      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
        const placeholders = new Array(numOfCustomFnsApplied).fill("");
        transformedStyleArg = [...styleArg, ...placeholders];
        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
      }
      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
      if (tag2.muiName) {
        Component.muiName = tag2.muiName;
      }
      return Component;
    };
    if (defaultStyledResolver.withConfig) {
      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
    }
    return muiStyledResolver;
  };
}
const styled$2 = createStyled();
const systemStyled = styled$2;
function getThemeProps(params) {
  const {
    theme,
    name: name2,
    props
  } = params;
  if (!theme || !theme.components || !theme.components[name2] || !theme.components[name2].defaultProps) {
    return props;
  }
  return resolveProps(theme.components[name2].defaultProps, props);
}
function useThemeProps$1({
  props,
  name: name2,
  defaultTheme: defaultTheme2,
  themeId
}) {
  let theme = useTheme$1(defaultTheme2);
  if (themeId) {
    theme = theme[themeId] || theme;
  }
  const mergedProps = getThemeProps({
    theme,
    name: name2,
    props
  });
  return mergedProps;
}
function clamp$2(value2, min2 = 0, max2 = 1) {
  return Math.min(Math.max(min2, value2), max2);
}
function hexToRgb(color2) {
  color2 = color2.slice(1);
  const re2 = new RegExp(".{1,".concat(color2.length >= 6 ? 2 : 1, "}"), "g");
  let colors3 = color2.match(re2);
  if (colors3 && colors3[0].length === 1) {
    colors3 = colors3.map((n2) => n2 + n2);
  }
  return colors3 ? "rgb".concat(colors3.length === 4 ? "a" : "", "(").concat(colors3.map((n2, index2) => {
    return index2 < 3 ? parseInt(n2, 16) : Math.round(parseInt(n2, 16) / 255 * 1e3) / 1e3;
  }).join(", "), ")") : "";
}
function decomposeColor(color2) {
  if (color2.type) {
    return color2;
  }
  if (color2.charAt(0) === "#") {
    return decomposeColor(hexToRgb(color2));
  }
  const marker = color2.indexOf("(");
  const type = color2.substring(0, marker);
  if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
    throw new Error(formatMuiErrorMessage(9, color2));
  }
  let values2 = color2.substring(marker + 1, color2.length - 1);
  let colorSpace;
  if (type === "color") {
    values2 = values2.split(" ");
    colorSpace = values2.shift();
    if (values2.length === 4 && values2[3].charAt(0) === "/") {
      values2[3] = values2[3].slice(1);
    }
    if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
      throw new Error(formatMuiErrorMessage(10, colorSpace));
    }
  } else {
    values2 = values2.split(",");
  }
  values2 = values2.map((value2) => parseFloat(value2));
  return {
    type,
    values: values2,
    colorSpace
  };
}
function recomposeColor(color2) {
  const {
    type,
    colorSpace
  } = color2;
  let {
    values: values2
  } = color2;
  if (type.indexOf("rgb") !== -1) {
    values2 = values2.map((n2, i3) => i3 < 3 ? parseInt(n2, 10) : n2);
  } else if (type.indexOf("hsl") !== -1) {
    values2[1] = "".concat(values2[1], "%");
    values2[2] = "".concat(values2[2], "%");
  }
  if (type.indexOf("color") !== -1) {
    values2 = "".concat(colorSpace, " ").concat(values2.join(" "));
  } else {
    values2 = "".concat(values2.join(", "));
  }
  return "".concat(type, "(").concat(values2, ")");
}
function hslToRgb$1(color2) {
  color2 = decomposeColor(color2);
  const {
    values: values2
  } = color2;
  const h4 = values2[0];
  const s4 = values2[1] / 100;
  const l2 = values2[2] / 100;
  const a4 = s4 * Math.min(l2, 1 - l2);
  const f2 = (n2, k3 = (n2 + h4 / 30) % 12) => l2 - a4 * Math.max(Math.min(k3 - 3, 9 - k3, 1), -1);
  let type = "rgb";
  const rgb2 = [Math.round(f2(0) * 255), Math.round(f2(8) * 255), Math.round(f2(4) * 255)];
  if (color2.type === "hsla") {
    type += "a";
    rgb2.push(values2[3]);
  }
  return recomposeColor({
    type,
    values: rgb2
  });
}
function getLuminance(color2) {
  color2 = decomposeColor(color2);
  let rgb2 = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb$1(color2)).values : color2.values;
  rgb2 = rgb2.map((val2) => {
    if (color2.type !== "color") {
      val2 /= 255;
    }
    return val2 <= 0.03928 ? val2 / 12.92 : ((val2 + 0.055) / 1.055) ** 2.4;
  });
  return Number((0.2126 * rgb2[0] + 0.7152 * rgb2[1] + 0.0722 * rgb2[2]).toFixed(3));
}
function getContrastRatio(foreground, background) {
  const lumA = getLuminance(foreground);
  const lumB = getLuminance(background);
  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}
function alpha(color2, value2) {
  color2 = decomposeColor(color2);
  value2 = clamp$2(value2);
  if (color2.type === "rgb" || color2.type === "hsl") {
    color2.type += "a";
  }
  if (color2.type === "color") {
    color2.values[3] = "/".concat(value2);
  } else {
    color2.values[3] = value2;
  }
  return recomposeColor(color2);
}
function darken(color2, coefficient) {
  color2 = decomposeColor(color2);
  coefficient = clamp$2(coefficient);
  if (color2.type.indexOf("hsl") !== -1) {
    color2.values[2] *= 1 - coefficient;
  } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
    for (let i3 = 0; i3 < 3; i3 += 1) {
      color2.values[i3] *= 1 - coefficient;
    }
  }
  return recomposeColor(color2);
}
function lighten(color2, coefficient) {
  color2 = decomposeColor(color2);
  coefficient = clamp$2(coefficient);
  if (color2.type.indexOf("hsl") !== -1) {
    color2.values[2] += (100 - color2.values[2]) * coefficient;
  } else if (color2.type.indexOf("rgb") !== -1) {
    for (let i3 = 0; i3 < 3; i3 += 1) {
      color2.values[i3] += (255 - color2.values[i3]) * coefficient;
    }
  } else if (color2.type.indexOf("color") !== -1) {
    for (let i3 = 0; i3 < 3; i3 += 1) {
      color2.values[i3] += (1 - color2.values[i3]) * coefficient;
    }
  }
  return recomposeColor(color2);
}
const _excluded$f = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"];
const defaultTheme$3 = createTheme$1();
const defaultCreateStyledComponent = systemStyled("div", {
  name: "MuiStack",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
});
function useThemePropsDefault(props) {
  return useThemeProps$1({
    props,
    name: "MuiStack",
    defaultTheme: defaultTheme$3
  });
}
function joinChildren(children, separator) {
  const childrenArray = reactExports.Children.toArray(children).filter(Boolean);
  return childrenArray.reduce((output, child, index2) => {
    output.push(child);
    if (index2 < childrenArray.length - 1) {
      output.push(/* @__PURE__ */ reactExports.cloneElement(separator, {
        key: "separator-".concat(index2)
      }));
    }
    return output;
  }, []);
}
const getSideFromDirection = (direction) => {
  return {
    row: "Left",
    "row-reverse": "Right",
    column: "Top",
    "column-reverse": "Bottom"
  }[direction];
};
const style = ({
  ownerState,
  theme
}) => {
  let styles2 = _extends$8({
    display: "flex",
    flexDirection: "column"
  }, handleBreakpoints({
    theme
  }, resolveBreakpointValues({
    values: ownerState.direction,
    breakpoints: theme.breakpoints.values
  }), (propValue) => ({
    flexDirection: propValue
  })));
  if (ownerState.spacing) {
    const transformer = createUnarySpacing(theme);
    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
      if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
        acc[breakpoint] = true;
      }
      return acc;
    }, {});
    const directionValues = resolveBreakpointValues({
      values: ownerState.direction,
      base
    });
    const spacingValues = resolveBreakpointValues({
      values: ownerState.spacing,
      base
    });
    if (typeof directionValues === "object") {
      Object.keys(directionValues).forEach((breakpoint, index2, breakpoints) => {
        const directionValue = directionValues[breakpoint];
        if (!directionValue) {
          const previousDirectionValue = index2 > 0 ? directionValues[breakpoints[index2 - 1]] : "column";
          directionValues[breakpoint] = previousDirectionValue;
        }
      });
    }
    const styleFromPropValue = (propValue, breakpoint) => {
      if (ownerState.useFlexGap) {
        return {
          gap: getValue$3(transformer, propValue)
        };
      }
      return {
        // The useFlexGap={false} implement relies on each child to give up control of the margin.
        // We need to reset the margin to avoid double spacing.
        "& > :not(style):not(style)": {
          margin: 0
        },
        "& > :not(style) ~ :not(style)": {
          ["margin".concat(getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction))]: getValue$3(transformer, propValue)
        }
      };
    };
    styles2 = deepmerge$3(styles2, handleBreakpoints({
      theme
    }, spacingValues, styleFromPropValue));
  }
  styles2 = mergeBreakpointsInOrder(theme.breakpoints, styles2);
  return styles2;
};
function createStack(options = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent = defaultCreateStyledComponent,
    useThemeProps: useThemeProps2 = useThemePropsDefault,
    componentName = "MuiStack"
  } = options;
  const useUtilityClasses2 = () => {
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
  };
  const StackRoot = createStyledComponent(style);
  const Stack2 = /* @__PURE__ */ reactExports.forwardRef(function Grid2(inProps, ref) {
    const themeProps = useThemeProps2(inProps);
    const props = extendSxProp(themeProps);
    const {
      component = "div",
      direction = "column",
      spacing = 0,
      divider,
      children,
      className,
      useFlexGap = false
    } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$f);
    const ownerState = {
      direction,
      spacing,
      useFlexGap
    };
    const classes = useUtilityClasses2();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(StackRoot, _extends$8({
      as: component,
      ownerState,
      ref,
      className: clsx(classes.root, className)
    }, other, {
      children: divider ? joinChildren(children, divider) : children
    }));
  });
  return Stack2;
}
function createMixins(breakpoints, mixins) {
  return _extends$8({
    toolbar: {
      minHeight: 56,
      [breakpoints.up("xs")]: {
        "@media (orientation: landscape)": {
          minHeight: 48
        }
      },
      [breakpoints.up("sm")]: {
        minHeight: 64
      }
    }
  }, mixins);
}
const _excluded$e = ["mode", "contrastThreshold", "tonalOffset"];
const light = {
  // The colors used to style the text.
  text: {
    // The most important text.
    primary: "rgba(0, 0, 0, 0.87)",
    // Secondary text.
    secondary: "rgba(0, 0, 0, 0.6)",
    // Disabled text have even lower visual prominence.
    disabled: "rgba(0, 0, 0, 0.38)"
  },
  // The color used to divide different elements.
  divider: "rgba(0, 0, 0, 0.12)",
  // The background colors used to style the surfaces.
  // Consistency between these values is important.
  background: {
    paper: common$1.white,
    default: common$1.white
  },
  // The colors used to style the action elements.
  action: {
    // The color of an active action like an icon button.
    active: "rgba(0, 0, 0, 0.54)",
    // The color of an hovered action.
    hover: "rgba(0, 0, 0, 0.04)",
    hoverOpacity: 0.04,
    // The color of a selected action.
    selected: "rgba(0, 0, 0, 0.08)",
    selectedOpacity: 0.08,
    // The color of a disabled action.
    disabled: "rgba(0, 0, 0, 0.26)",
    // The background color of a disabled action.
    disabledBackground: "rgba(0, 0, 0, 0.12)",
    disabledOpacity: 0.38,
    focus: "rgba(0, 0, 0, 0.12)",
    focusOpacity: 0.12,
    activatedOpacity: 0.12
  }
};
const dark = {
  text: {
    primary: common$1.white,
    secondary: "rgba(255, 255, 255, 0.7)",
    disabled: "rgba(255, 255, 255, 0.5)",
    icon: "rgba(255, 255, 255, 0.5)"
  },
  divider: "rgba(255, 255, 255, 0.12)",
  background: {
    paper: "#121212",
    default: "#121212"
  },
  action: {
    active: common$1.white,
    hover: "rgba(255, 255, 255, 0.08)",
    hoverOpacity: 0.08,
    selected: "rgba(255, 255, 255, 0.16)",
    selectedOpacity: 0.16,
    disabled: "rgba(255, 255, 255, 0.3)",
    disabledBackground: "rgba(255, 255, 255, 0.12)",
    disabledOpacity: 0.38,
    focus: "rgba(255, 255, 255, 0.12)",
    focusOpacity: 0.12,
    activatedOpacity: 0.24
  }
};
function addLightOrDark(intent, direction, shade, tonalOffset) {
  const tonalOffsetLight = tonalOffset.light || tonalOffset;
  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
  if (!intent[direction]) {
    if (intent.hasOwnProperty(shade)) {
      intent[direction] = intent[shade];
    } else if (direction === "light") {
      intent.light = lighten(intent.main, tonalOffsetLight);
    } else if (direction === "dark") {
      intent.dark = darken(intent.main, tonalOffsetDark);
    }
  }
}
function getDefaultPrimary(mode2 = "light") {
  if (mode2 === "dark") {
    return {
      main: blue$1[200],
      light: blue$1[50],
      dark: blue$1[400]
    };
  }
  return {
    main: blue$1[700],
    light: blue$1[400],
    dark: blue$1[800]
  };
}
function getDefaultSecondary(mode2 = "light") {
  if (mode2 === "dark") {
    return {
      main: purple$1[200],
      light: purple$1[50],
      dark: purple$1[400]
    };
  }
  return {
    main: purple$1[500],
    light: purple$1[300],
    dark: purple$1[700]
  };
}
function getDefaultError(mode2 = "light") {
  if (mode2 === "dark") {
    return {
      main: red$1[500],
      light: red$1[300],
      dark: red$1[700]
    };
  }
  return {
    main: red$1[700],
    light: red$1[400],
    dark: red$1[800]
  };
}
function getDefaultInfo(mode2 = "light") {
  if (mode2 === "dark") {
    return {
      main: lightBlue$1[400],
      light: lightBlue$1[300],
      dark: lightBlue$1[700]
    };
  }
  return {
    main: lightBlue$1[700],
    light: lightBlue$1[500],
    dark: lightBlue$1[900]
  };
}
function getDefaultSuccess(mode2 = "light") {
  if (mode2 === "dark") {
    return {
      main: green$1[400],
      light: green$1[300],
      dark: green$1[700]
    };
  }
  return {
    main: green$1[800],
    light: green$1[500],
    dark: green$1[900]
  };
}
function getDefaultWarning(mode2 = "light") {
  if (mode2 === "dark") {
    return {
      main: orange$1[400],
      light: orange$1[300],
      dark: orange$1[700]
    };
  }
  return {
    main: "#ed6c02",
    // closest to orange[800] that pass 3:1.
    light: orange$1[500],
    dark: orange$1[900]
  };
}
function createPalette(palette) {
  const {
    mode: mode2 = "light",
    contrastThreshold = 3,
    tonalOffset = 0.2
  } = palette, other = _objectWithoutPropertiesLoose$4(palette, _excluded$e);
  const primary = palette.primary || getDefaultPrimary(mode2);
  const secondary = palette.secondary || getDefaultSecondary(mode2);
  const error = palette.error || getDefaultError(mode2);
  const info = palette.info || getDefaultInfo(mode2);
  const success = palette.success || getDefaultSuccess(mode2);
  const warning2 = palette.warning || getDefaultWarning(mode2);
  function getContrastText(background) {
    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
    return contrastText;
  }
  const augmentColor = ({
    color: color2,
    name: name2,
    mainShade = 500,
    lightShade = 300,
    darkShade = 700
  }) => {
    color2 = _extends$8({}, color2);
    if (!color2.main && color2[mainShade]) {
      color2.main = color2[mainShade];
    }
    if (!color2.hasOwnProperty("main")) {
      throw new Error(formatMuiErrorMessage(11, name2 ? " (".concat(name2, ")") : "", mainShade));
    }
    if (typeof color2.main !== "string") {
      throw new Error(formatMuiErrorMessage(12, name2 ? " (".concat(name2, ")") : "", JSON.stringify(color2.main)));
    }
    addLightOrDark(color2, "light", lightShade, tonalOffset);
    addLightOrDark(color2, "dark", darkShade, tonalOffset);
    if (!color2.contrastText) {
      color2.contrastText = getContrastText(color2.main);
    }
    return color2;
  };
  const modes = {
    dark,
    light
  };
  const paletteOutput = deepmerge$3(_extends$8({
    // A collection of common colors.
    common: _extends$8({}, common$1),
    // prevent mutable object.
    // The palette mode, can be light or dark.
    mode: mode2,
    // The colors used to represent primary interface elements for a user.
    primary: augmentColor({
      color: primary,
      name: "primary"
    }),
    // The colors used to represent secondary interface elements for a user.
    secondary: augmentColor({
      color: secondary,
      name: "secondary",
      mainShade: "A400",
      lightShade: "A200",
      darkShade: "A700"
    }),
    // The colors used to represent interface elements that the user should be made aware of.
    error: augmentColor({
      color: error,
      name: "error"
    }),
    // The colors used to represent potentially dangerous actions or important messages.
    warning: augmentColor({
      color: warning2,
      name: "warning"
    }),
    // The colors used to present information to the user that is neutral and not necessarily important.
    info: augmentColor({
      color: info,
      name: "info"
    }),
    // The colors used to indicate the successful completion of an action that user triggered.
    success: augmentColor({
      color: success,
      name: "success"
    }),
    // The grey colors.
    grey: grey$1,
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold,
    // Takes a background color and returns the text color that maximizes the contrast.
    getContrastText,
    // Generate a rich color object.
    augmentColor,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset
  }, modes[mode2]), other);
  return paletteOutput;
}
const _excluded$d = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
function round$2(value2) {
  return Math.round(value2 * 1e5) / 1e5;
}
const caseAllCaps = {
  textTransform: "uppercase"
};
const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
function createTypography(palette, typography) {
  const _ref = typeof typography === "function" ? typography(palette) : typography, {
    fontFamily = defaultFontFamily,
    // The default font size of the Material Specification.
    fontSize = 14,
    // px
    fontWeightLight = 300,
    fontWeightRegular = 400,
    fontWeightMedium = 500,
    fontWeightBold = 700,
    // Tell MUI what's the font-size on the html element.
    // 16px is the default font-size used by browsers.
    htmlFontSize = 16,
    // Apply the CSS properties to all the variants.
    allVariants,
    pxToRem: pxToRem2
  } = _ref, other = _objectWithoutPropertiesLoose$4(_ref, _excluded$d);
  const coef = fontSize / 14;
  const pxToRem = pxToRem2 || ((size) => "".concat(size / htmlFontSize * coef, "rem"));
  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends$8({
    fontFamily,
    fontWeight,
    fontSize: pxToRem(size),
    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
    lineHeight
  }, fontFamily === defaultFontFamily ? {
    letterSpacing: "".concat(round$2(letterSpacing / size), "em")
  } : {}, casing, allVariants);
  const variants = {
    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
    inherit: {
      fontFamily: "inherit",
      fontWeight: "inherit",
      fontSize: "inherit",
      lineHeight: "inherit",
      letterSpacing: "inherit"
    }
  };
  return deepmerge$3(_extends$8({
    htmlFontSize,
    pxToRem,
    fontFamily,
    fontSize,
    fontWeightLight,
    fontWeightRegular,
    fontWeightMedium,
    fontWeightBold
  }, variants), other, {
    clone: false
    // No need to clone deep
  });
}
const shadowKeyUmbraOpacity = 0.2;
const shadowKeyPenumbraOpacity = 0.14;
const shadowAmbientShadowOpacity = 0.12;
function createShadow(...px) {
  return ["".concat(px[0], "px ").concat(px[1], "px ").concat(px[2], "px ").concat(px[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(px[4], "px ").concat(px[5], "px ").concat(px[6], "px ").concat(px[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(px[8], "px ").concat(px[9], "px ").concat(px[10], "px ").concat(px[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(",");
}
const shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
const shadows$1 = shadows;
const _excluded$c = ["duration", "easing", "delay"];
const easing = {
  // This is the most common easing curve.
  easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: "cubic-bezier(0.4, 0, 1, 1)",
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
};
const duration = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
function formatMs(milliseconds) {
  return "".concat(Math.round(milliseconds), "ms");
}
function getAutoHeightDuration(height2) {
  if (!height2) {
    return 0;
  }
  const constant = height2 / 36;
  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
}
function createTransitions(inputTransitions) {
  const mergedEasing = _extends$8({}, easing, inputTransitions.easing);
  const mergedDuration = _extends$8({}, duration, inputTransitions.duration);
  const create2 = (props = ["all"], options = {}) => {
    const {
      duration: durationOption = mergedDuration.standard,
      easing: easingOption = mergedEasing.easeInOut,
      delay = 0
    } = options;
    _objectWithoutPropertiesLoose$4(options, _excluded$c);
    return (Array.isArray(props) ? props : [props]).map((animatedProp) => "".concat(animatedProp, " ").concat(typeof durationOption === "string" ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === "string" ? delay : formatMs(delay))).join(",");
  };
  return _extends$8({
    getAutoHeightDuration,
    create: create2
  }, inputTransitions, {
    easing: mergedEasing,
    duration: mergedDuration
  });
}
const zIndex = {
  mobileStepper: 1e3,
  fab: 1050,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};
const zIndex$1 = zIndex;
const _excluded$b = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
function createTheme(options = {}, ...args) {
  const {
    mixins: mixinsInput = {},
    palette: paletteInput = {},
    transitions: transitionsInput = {},
    typography: typographyInput = {}
  } = options, other = _objectWithoutPropertiesLoose$4(options, _excluded$b);
  if (options.vars) {
    throw new Error(formatMuiErrorMessage(18));
  }
  const palette = createPalette(paletteInput);
  const systemTheme = createTheme$1(options);
  let muiTheme = deepmerge$3(systemTheme, {
    mixins: createMixins(systemTheme.breakpoints, mixinsInput),
    palette,
    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
    shadows: shadows$1.slice(),
    typography: createTypography(palette, typographyInput),
    transitions: createTransitions(transitionsInput),
    zIndex: _extends$8({}, zIndex$1)
  });
  muiTheme = deepmerge$3(muiTheme, other);
  muiTheme = args.reduce((acc, argument) => deepmerge$3(acc, argument), muiTheme);
  muiTheme.unstable_sxConfig = _extends$8({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx$1({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}
const defaultTheme$1 = createTheme();
const defaultTheme$2 = defaultTheme$1;
function useTheme() {
  const theme = useTheme$1(defaultTheme$2);
  return theme[THEME_ID] || theme;
}
function useThemeProps({
  props,
  name: name2
}) {
  return useThemeProps$1({
    props,
    name: name2,
    defaultTheme: defaultTheme$2,
    themeId: THEME_ID
  });
}
const rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
const styled = createStyled({
  themeId: THEME_ID,
  defaultTheme: defaultTheme$2,
  rootShouldForwardProp
});
const styled$1 = styled;
const getOverlayAlpha = (elevation) => {
  let alphaValue;
  if (elevation < 1) {
    alphaValue = 5.11916 * elevation ** 2;
  } else {
    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
  }
  return (alphaValue / 100).toFixed(2);
};
const getOverlayAlpha$1 = getOverlayAlpha;
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
const config$2 = {
  disabled: false
};
const TransitionGroupContext = React.createContext(null);
var forceReflow = function forceReflow2(node2) {
  return node2.scrollTop;
};
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Transition2, _React$Component);
  function Transition2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;
    if (timeout != null && typeof timeout !== "number") {
      exit = timeout.exit;
      enter = timeout.enter;
      appear = timeout.appear !== void 0 ? timeout.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
          if (node2)
            forceReflow(node2);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts2 = this.getTimeouts();
    var enterTimeout = appearing ? timeouts2.appear : timeouts2.enter;
    if (!mounting && !enter || config$2.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts2 = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
    if (!exit || config$2.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts2.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active2 = true;
    this.nextCallback = function(event) {
      if (active2) {
        active2 = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active2 = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
    this.setNextCallback(handler);
    var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
    if (!node2 || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };
  _proto.render = function render2() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children = _this$props.children;
    _this$props.in;
    _this$props.mountOnEnter;
    _this$props.unmountOnExit;
    _this$props.appear;
    _this$props.enter;
    _this$props.exit;
    _this$props.timeout;
    _this$props.addEndListener;
    _this$props.onEnter;
    _this$props.onEntering;
    _this$props.onEntered;
    _this$props.onExit;
    _this$props.onExiting;
    _this$props.onExited;
    _this$props.nodeRef;
    var childProps = _objectWithoutPropertiesLoose$4(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
    );
  };
  return Transition2;
}(React.Component);
Transition.contextType = TransitionGroupContext;
Transition.propTypes = {};
function noop$1() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop$1,
  onEntering: noop$1,
  onEntered: noop$1,
  onExit: noop$1,
  onExiting: noop$1,
  onExited: noop$1
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
const Transition$1 = Transition;
const reflow = (node2) => node2.scrollTop;
function getTransitionProps(props, options) {
  var _style$transitionDura, _style$transitionTimi;
  const {
    timeout,
    easing: easing2,
    style: style2 = {}
  } = props;
  return {
    duration: (_style$transitionDura = style2.transitionDuration) != null ? _style$transitionDura : typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
    easing: (_style$transitionTimi = style2.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
    delay: style2.transitionDelay
  };
}
function getPaperUtilityClass(slot) {
  return generateUtilityClass("MuiPaper", slot);
}
generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
const _excluded$a = ["className", "component", "elevation", "square", "variant"];
const useUtilityClasses$5 = (ownerState) => {
  const {
    square,
    elevation,
    variant,
    classes
  } = ownerState;
  const slots = {
    root: ["root", variant, !square && "rounded", variant === "elevation" && "elevation".concat(elevation)]
  };
  return composeClasses(slots, getPaperUtilityClass, classes);
};
const PaperRoot = styled$1("div", {
  name: "MuiPaper",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, styles2[ownerState.variant], !ownerState.square && styles2.rounded, ownerState.variant === "elevation" && styles2["elevation".concat(ownerState.elevation)]];
  }
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$overlays;
  return _extends$8({
    backgroundColor: (theme.vars || theme).palette.background.paper,
    color: (theme.vars || theme).palette.text.primary,
    transition: theme.transitions.create("box-shadow")
  }, !ownerState.square && {
    borderRadius: theme.shape.borderRadius
  }, ownerState.variant === "outlined" && {
    border: "1px solid ".concat((theme.vars || theme).palette.divider)
  }, ownerState.variant === "elevation" && _extends$8({
    boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
  }, !theme.vars && theme.palette.mode === "dark" && {
    backgroundImage: "linear-gradient(".concat(alpha("#fff", getOverlayAlpha$1(ownerState.elevation)), ", ").concat(alpha("#fff", getOverlayAlpha$1(ownerState.elevation)), ")")
  }, theme.vars && {
    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
  }));
});
const Paper = /* @__PURE__ */ reactExports.forwardRef(function Paper2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPaper"
  });
  const {
    className,
    component = "div",
    elevation = 1,
    square = false,
    variant = "elevation"
  } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$a);
  const ownerState = _extends$8({}, props, {
    component,
    elevation,
    square,
    variant
  });
  const classes = useUtilityClasses$5(ownerState);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(PaperRoot, _extends$8({
    as: component,
    ownerState,
    className: clsx(classes.root, className),
    ref
  }, other));
});
const Paper$1 = Paper;
function getTypographyUtilityClass(slot) {
  return generateUtilityClass("MuiTypography", slot);
}
generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
const _excluded$9 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
const useUtilityClasses$4 = (ownerState) => {
  const {
    align,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    classes
  } = ownerState;
  const slots = {
    root: ["root", variant, ownerState.align !== "inherit" && "align".concat(capitalize$3(align)), gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
  };
  return composeClasses(slots, getTypographyUtilityClass, classes);
};
const TypographyRoot = styled$1("span", {
  name: "MuiTypography",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, ownerState.variant && styles2[ownerState.variant], ownerState.align !== "inherit" && styles2["align".concat(capitalize$3(ownerState.align))], ownerState.noWrap && styles2.noWrap, ownerState.gutterBottom && styles2.gutterBottom, ownerState.paragraph && styles2.paragraph];
  }
})(({
  theme,
  ownerState
}) => _extends$8({
  margin: 0
}, ownerState.variant === "inherit" && {
  // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
  font: "inherit"
}, ownerState.variant !== "inherit" && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
  textAlign: ownerState.align
}, ownerState.noWrap && {
  overflow: "hidden",
  textOverflow: "ellipsis",
  whiteSpace: "nowrap"
}, ownerState.gutterBottom && {
  marginBottom: "0.35em"
}, ownerState.paragraph && {
  marginBottom: 16
}));
const defaultVariantMapping = {
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  subtitle1: "h6",
  subtitle2: "h6",
  body1: "p",
  body2: "p",
  inherit: "p"
};
const colorTransformations = {
  primary: "primary.main",
  textPrimary: "text.primary",
  secondary: "secondary.main",
  textSecondary: "text.secondary",
  error: "error.main"
};
const transformDeprecatedColors = (color2) => {
  return colorTransformations[color2] || color2;
};
const Typography = /* @__PURE__ */ reactExports.forwardRef(function Typography2(inProps, ref) {
  const themeProps = useThemeProps({
    props: inProps,
    name: "MuiTypography"
  });
  const color2 = transformDeprecatedColors(themeProps.color);
  const props = extendSxProp(_extends$8({}, themeProps, {
    color: color2
  }));
  const {
    align = "inherit",
    className,
    component,
    gutterBottom = false,
    noWrap = false,
    paragraph = false,
    variant = "body1",
    variantMapping = defaultVariantMapping
  } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$9);
  const ownerState = _extends$8({}, props, {
    align,
    color: color2,
    className,
    component,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    variantMapping
  });
  const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
  const classes = useUtilityClasses$4(ownerState);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(TypographyRoot, _extends$8({
    as: Component,
    ref,
    ownerState,
    className: clsx(classes.root, className)
  }, other));
});
const Typography$1 = Typography;
function isHostComponent(element) {
  return typeof element === "string";
}
function appendOwnerState(elementType, otherProps, ownerState) {
  if (elementType === void 0 || isHostComponent(elementType)) {
    return otherProps;
  }
  return _extends$8({}, otherProps, {
    ownerState: _extends$8({}, otherProps.ownerState, ownerState)
  });
}
function extractEventHandlers(object2, excludeKeys = []) {
  if (object2 === void 0) {
    return {};
  }
  const result2 = {};
  Object.keys(object2).filter((prop) => prop.match(/^on[A-Z]/) && typeof object2[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
    result2[prop] = object2[prop];
  });
  return result2;
}
function resolveComponentProps(componentProps, ownerState, slotState) {
  if (typeof componentProps === "function") {
    return componentProps(ownerState, slotState);
  }
  return componentProps;
}
function omitEventHandlers(object2) {
  if (object2 === void 0) {
    return {};
  }
  const result2 = {};
  Object.keys(object2).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object2[prop] === "function")).forEach((prop) => {
    result2[prop] = object2[prop];
  });
  return result2;
}
function mergeSlotProps(parameters) {
  const {
    getSlotProps,
    additionalProps,
    externalSlotProps,
    externalForwardedProps,
    className
  } = parameters;
  if (!getSlotProps) {
    const joinedClasses2 = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
    const mergedStyle2 = _extends$8({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props2 = _extends$8({}, additionalProps, externalForwardedProps, externalSlotProps);
    if (joinedClasses2.length > 0) {
      props2.className = joinedClasses2;
    }
    if (Object.keys(mergedStyle2).length > 0) {
      props2.style = mergedStyle2;
    }
    return {
      props: props2,
      internalRef: void 0
    };
  }
  const eventHandlers = extractEventHandlers(_extends$8({}, externalForwardedProps, externalSlotProps));
  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
  const internalSlotProps = getSlotProps(eventHandlers);
  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
  const mergedStyle = _extends$8({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
  const props = _extends$8({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
  if (joinedClasses.length > 0) {
    props.className = joinedClasses;
  }
  if (Object.keys(mergedStyle).length > 0) {
    props.style = mergedStyle;
  }
  return {
    props,
    internalRef: internalSlotProps.ref
  };
}
const _excluded$8 = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
function useSlotProps(parameters) {
  var _parameters$additiona;
  const {
    elementType,
    externalSlotProps,
    ownerState,
    skipResolvingSlotProps = false
  } = parameters, rest = _objectWithoutPropertiesLoose$4(parameters, _excluded$8);
  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
  const {
    props: mergedProps,
    internalRef
  } = mergeSlotProps(_extends$8({}, rest, {
    externalSlotProps: resolvedComponentsProps
  }));
  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
  const props = appendOwnerState(elementType, _extends$8({}, mergedProps, {
    ref
  }), ownerState);
  return props;
}
const candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
function getTabIndex(node2) {
  const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
  if (!Number.isNaN(tabindexAttr)) {
    return tabindexAttr;
  }
  if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
    return 0;
  }
  return node2.tabIndex;
}
function isNonTabbableRadio(node2) {
  if (node2.tagName !== "INPUT" || node2.type !== "radio") {
    return false;
  }
  if (!node2.name) {
    return false;
  }
  const getRadio = (selector) => node2.ownerDocument.querySelector('input[type="radio"]'.concat(selector));
  let roving = getRadio('[name="'.concat(node2.name, '"]:checked'));
  if (!roving) {
    roving = getRadio('[name="'.concat(node2.name, '"]'));
  }
  return roving !== node2;
}
function isNodeMatchingSelectorFocusable(node2) {
  if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
    return false;
  }
  return true;
}
function defaultGetTabbable(root2) {
  const regularTabNodes = [];
  const orderedTabNodes = [];
  Array.from(root2.querySelectorAll(candidatesSelector)).forEach((node2, i3) => {
    const nodeTabIndex = getTabIndex(node2);
    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
      return;
    }
    if (nodeTabIndex === 0) {
      regularTabNodes.push(node2);
    } else {
      orderedTabNodes.push({
        documentOrder: i3,
        tabIndex: nodeTabIndex,
        node: node2
      });
    }
  });
  return orderedTabNodes.sort((a4, b3) => a4.tabIndex === b3.tabIndex ? a4.documentOrder - b3.documentOrder : a4.tabIndex - b3.tabIndex).map((a4) => a4.node).concat(regularTabNodes);
}
function defaultIsEnabled() {
  return true;
}
function FocusTrap(props) {
  const {
    children,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableRestoreFocus = false,
    getTabbable = defaultGetTabbable,
    isEnabled = defaultIsEnabled,
    open
  } = props;
  const ignoreNextEnforceFocus = reactExports.useRef(false);
  const sentinelStart = reactExports.useRef(null);
  const sentinelEnd = reactExports.useRef(null);
  const nodeToRestore = reactExports.useRef(null);
  const reactFocusEventTarget = reactExports.useRef(null);
  const activated = reactExports.useRef(false);
  const rootRef = reactExports.useRef(null);
  const handleRef = useForkRef(children.ref, rootRef);
  const lastKeydown = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (!open || !rootRef.current) {
      return;
    }
    activated.current = !disableAutoFocus;
  }, [disableAutoFocus, open]);
  reactExports.useEffect(() => {
    if (!open || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    if (!rootRef.current.contains(doc.activeElement)) {
      if (!rootRef.current.hasAttribute("tabIndex")) {
        rootRef.current.setAttribute("tabIndex", "-1");
      }
      if (activated.current) {
        rootRef.current.focus();
      }
    }
    return () => {
      if (!disableRestoreFocus) {
        if (nodeToRestore.current && nodeToRestore.current.focus) {
          ignoreNextEnforceFocus.current = true;
          nodeToRestore.current.focus();
        }
        nodeToRestore.current = null;
      }
    };
  }, [open]);
  reactExports.useEffect(() => {
    if (!open || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    const loopFocus = (nativeEvent) => {
      lastKeydown.current = nativeEvent;
      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
        return;
      }
      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
        ignoreNextEnforceFocus.current = true;
        if (sentinelEnd.current) {
          sentinelEnd.current.focus();
        }
      }
    };
    const contain = () => {
      const rootElement = rootRef.current;
      if (rootElement === null) {
        return;
      }
      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
        ignoreNextEnforceFocus.current = false;
        return;
      }
      if (rootElement.contains(doc.activeElement)) {
        return;
      }
      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
        return;
      }
      if (doc.activeElement !== reactFocusEventTarget.current) {
        reactFocusEventTarget.current = null;
      } else if (reactFocusEventTarget.current !== null) {
        return;
      }
      if (!activated.current) {
        return;
      }
      let tabbable = [];
      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
        tabbable = getTabbable(rootRef.current);
      }
      if (tabbable.length > 0) {
        var _lastKeydown$current, _lastKeydown$current2;
        const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
        const focusNext = tabbable[0];
        const focusPrevious = tabbable[tabbable.length - 1];
        if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
          if (isShiftTab) {
            focusPrevious.focus();
          } else {
            focusNext.focus();
          }
        }
      } else {
        rootElement.focus();
      }
    };
    doc.addEventListener("focusin", contain);
    doc.addEventListener("keydown", loopFocus, true);
    const interval = setInterval(() => {
      if (doc.activeElement && doc.activeElement.tagName === "BODY") {
        contain();
      }
    }, 50);
    return () => {
      clearInterval(interval);
      doc.removeEventListener("focusin", contain);
      doc.removeEventListener("keydown", loopFocus, true);
    };
  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
  const onFocus = (event) => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
    reactFocusEventTarget.current = event.target;
    const childrenPropsHandler = children.props.onFocus;
    if (childrenPropsHandler) {
      childrenPropsHandler(event);
    }
  };
  const handleFocusSentinel = (event) => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, {
    children: [/* @__PURE__ */ jsxRuntimeExports.jsx("div", {
      tabIndex: open ? 0 : -1,
      onFocus: handleFocusSentinel,
      ref: sentinelStart,
      "data-testid": "sentinelStart"
    }), /* @__PURE__ */ reactExports.cloneElement(children, {
      ref: handleRef,
      onFocus
    }), /* @__PURE__ */ jsxRuntimeExports.jsx("div", {
      tabIndex: open ? 0 : -1,
      onFocus: handleFocusSentinel,
      ref: sentinelEnd,
      "data-testid": "sentinelEnd"
    })]
  });
}
function getContainer$1(container2) {
  return typeof container2 === "function" ? container2() : container2;
}
const Portal = /* @__PURE__ */ reactExports.forwardRef(function Portal2(props, forwardedRef) {
  const {
    children,
    container: container2,
    disablePortal = false
  } = props;
  const [mountNode, setMountNode] = reactExports.useState(null);
  const handleRef = useForkRef(/* @__PURE__ */ reactExports.isValidElement(children) ? children.ref : null, forwardedRef);
  useEnhancedEffect$1(() => {
    if (!disablePortal) {
      setMountNode(getContainer$1(container2) || document.body);
    }
  }, [container2, disablePortal]);
  useEnhancedEffect$1(() => {
    if (mountNode && !disablePortal) {
      setRef(forwardedRef, mountNode);
      return () => {
        setRef(forwardedRef, null);
      };
    }
    return void 0;
  }, [forwardedRef, mountNode, disablePortal]);
  if (disablePortal) {
    if (/* @__PURE__ */ reactExports.isValidElement(children)) {
      const newProps = {
        ref: handleRef
      };
      return /* @__PURE__ */ reactExports.cloneElement(children, newProps);
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Fragment, {
      children
    });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Fragment, {
    children: mountNode ? /* @__PURE__ */ reactDomExports.createPortal(children, mountNode) : mountNode
  });
});
function isOverflowing(container2) {
  const doc = ownerDocument(container2);
  if (doc.body === container2) {
    return ownerWindow(container2).innerWidth > doc.documentElement.clientWidth;
  }
  return container2.scrollHeight > container2.clientHeight;
}
function ariaHidden(element, show) {
  if (show) {
    element.setAttribute("aria-hidden", "true");
  } else {
    element.removeAttribute("aria-hidden");
  }
}
function getPaddingRight(element) {
  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
}
function isAriaHiddenForbiddenOnElement(element) {
  const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
  const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
  return isForbiddenTagName || isInputHidden;
}
function ariaHiddenSiblings(container2, mountElement, currentElement, elementsToExclude, show) {
  const blacklist = [mountElement, currentElement, ...elementsToExclude];
  [].forEach.call(container2.children, (element) => {
    const isNotExcludedElement = blacklist.indexOf(element) === -1;
    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
    if (isNotExcludedElement && isNotForbiddenElement) {
      ariaHidden(element, show);
    }
  });
}
function findIndexOf(items, callback) {
  let idx = -1;
  items.some((item, index2) => {
    if (callback(item)) {
      idx = index2;
      return true;
    }
    return false;
  });
  return idx;
}
function handleContainer(containerInfo, props) {
  const restoreStyle = [];
  const container2 = containerInfo.container;
  if (!props.disableScrollLock) {
    if (isOverflowing(container2)) {
      const scrollbarSize = getScrollbarSize(ownerDocument(container2));
      restoreStyle.push({
        value: container2.style.paddingRight,
        property: "padding-right",
        el: container2
      });
      container2.style.paddingRight = "".concat(getPaddingRight(container2) + scrollbarSize, "px");
      const fixedElements2 = ownerDocument(container2).querySelectorAll(".mui-fixed");
      [].forEach.call(fixedElements2, (element) => {
        restoreStyle.push({
          value: element.style.paddingRight,
          property: "padding-right",
          el: element
        });
        element.style.paddingRight = "".concat(getPaddingRight(element) + scrollbarSize, "px");
      });
    }
    let scrollContainer;
    if (container2.parentNode instanceof DocumentFragment) {
      scrollContainer = ownerDocument(container2).body;
    } else {
      const parent2 = container2.parentElement;
      const containerWindow = ownerWindow(container2);
      scrollContainer = (parent2 == null ? void 0 : parent2.nodeName) === "HTML" && containerWindow.getComputedStyle(parent2).overflowY === "scroll" ? parent2 : container2;
    }
    restoreStyle.push({
      value: scrollContainer.style.overflow,
      property: "overflow",
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowX,
      property: "overflow-x",
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowY,
      property: "overflow-y",
      el: scrollContainer
    });
    scrollContainer.style.overflow = "hidden";
  }
  const restore = () => {
    restoreStyle.forEach(({
      value: value2,
      el,
      property: property2
    }) => {
      if (value2) {
        el.style.setProperty(property2, value2);
      } else {
        el.style.removeProperty(property2);
      }
    });
  };
  return restore;
}
function getHiddenSiblings(container2) {
  const hiddenSiblings = [];
  [].forEach.call(container2.children, (element) => {
    if (element.getAttribute("aria-hidden") === "true") {
      hiddenSiblings.push(element);
    }
  });
  return hiddenSiblings;
}
class ModalManager {
  constructor() {
    this.containers = void 0;
    this.modals = void 0;
    this.modals = [];
    this.containers = [];
  }
  add(modal2, container2) {
    let modalIndex = this.modals.indexOf(modal2);
    if (modalIndex !== -1) {
      return modalIndex;
    }
    modalIndex = this.modals.length;
    this.modals.push(modal2);
    if (modal2.modalRef) {
      ariaHidden(modal2.modalRef, false);
    }
    const hiddenSiblings = getHiddenSiblings(container2);
    ariaHiddenSiblings(container2, modal2.mount, modal2.modalRef, hiddenSiblings, true);
    const containerIndex = findIndexOf(this.containers, (item) => item.container === container2);
    if (containerIndex !== -1) {
      this.containers[containerIndex].modals.push(modal2);
      return modalIndex;
    }
    this.containers.push({
      modals: [modal2],
      container: container2,
      restore: null,
      hiddenSiblings
    });
    return modalIndex;
  }
  mount(modal2, props) {
    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal2) !== -1);
    const containerInfo = this.containers[containerIndex];
    if (!containerInfo.restore) {
      containerInfo.restore = handleContainer(containerInfo, props);
    }
  }
  remove(modal2, ariaHiddenState = true) {
    const modalIndex = this.modals.indexOf(modal2);
    if (modalIndex === -1) {
      return modalIndex;
    }
    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal2) !== -1);
    const containerInfo = this.containers[containerIndex];
    containerInfo.modals.splice(containerInfo.modals.indexOf(modal2), 1);
    this.modals.splice(modalIndex, 1);
    if (containerInfo.modals.length === 0) {
      if (containerInfo.restore) {
        containerInfo.restore();
      }
      if (modal2.modalRef) {
        ariaHidden(modal2.modalRef, ariaHiddenState);
      }
      ariaHiddenSiblings(containerInfo.container, modal2.mount, modal2.modalRef, containerInfo.hiddenSiblings, false);
      this.containers.splice(containerIndex, 1);
    } else {
      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
      if (nextTop.modalRef) {
        ariaHidden(nextTop.modalRef, false);
      }
    }
    return modalIndex;
  }
  isTopModal(modal2) {
    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal2;
  }
}
function getContainer(container2) {
  return typeof container2 === "function" ? container2() : container2;
}
function getHasTransition(children) {
  return children ? children.props.hasOwnProperty("in") : false;
}
const defaultManager = new ModalManager();
function useModal(parameters) {
  const {
    container: container2,
    disableEscapeKeyDown = false,
    disableScrollLock = false,
    // @ts-ignore internal logic - Base UI supports the manager as a prop too
    manager = defaultManager,
    closeAfterTransition = false,
    onTransitionEnter,
    onTransitionExited,
    children,
    onClose,
    open,
    rootRef
  } = parameters;
  const modal2 = reactExports.useRef({});
  const mountNodeRef = reactExports.useRef(null);
  const modalRef = reactExports.useRef(null);
  const handleRef = useForkRef(modalRef, rootRef);
  const [exited, setExited] = reactExports.useState(!open);
  const hasTransition = getHasTransition(children);
  let ariaHiddenProp = true;
  if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
    ariaHiddenProp = false;
  }
  const getDoc = () => ownerDocument(mountNodeRef.current);
  const getModal = () => {
    modal2.current.modalRef = modalRef.current;
    modal2.current.mount = mountNodeRef.current;
    return modal2.current;
  };
  const handleMounted = () => {
    manager.mount(getModal(), {
      disableScrollLock
    });
    if (modalRef.current) {
      modalRef.current.scrollTop = 0;
    }
  };
  const handleOpen = useEventCallback$1(() => {
    const resolvedContainer = getContainer(container2) || getDoc().body;
    manager.add(getModal(), resolvedContainer);
    if (modalRef.current) {
      handleMounted();
    }
  });
  const isTopModal = reactExports.useCallback(() => manager.isTopModal(getModal()), [manager]);
  const handlePortalRef = useEventCallback$1((node2) => {
    mountNodeRef.current = node2;
    if (!node2) {
      return;
    }
    if (open && isTopModal()) {
      handleMounted();
    } else if (modalRef.current) {
      ariaHidden(modalRef.current, ariaHiddenProp);
    }
  });
  const handleClose = reactExports.useCallback(() => {
    manager.remove(getModal(), ariaHiddenProp);
  }, [ariaHiddenProp, manager]);
  reactExports.useEffect(() => {
    return () => {
      handleClose();
    };
  }, [handleClose]);
  reactExports.useEffect(() => {
    if (open) {
      handleOpen();
    } else if (!hasTransition || !closeAfterTransition) {
      handleClose();
    }
  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
  const createHandleKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.key !== "Escape" || !isTopModal()) {
      return;
    }
    if (!disableEscapeKeyDown) {
      event.stopPropagation();
      if (onClose) {
        onClose(event, "escapeKeyDown");
      }
    }
  };
  const createHandleBackdropClick = (otherHandlers) => (event) => {
    var _otherHandlers$onClic;
    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    if (event.target !== event.currentTarget) {
      return;
    }
    if (onClose) {
      onClose(event, "backdropClick");
    }
  };
  const getRootProps = (otherHandlers = {}) => {
    const propsEventHandlers = extractEventHandlers(parameters);
    delete propsEventHandlers.onTransitionEnter;
    delete propsEventHandlers.onTransitionExited;
    const externalEventHandlers = _extends$8({}, propsEventHandlers, otherHandlers);
    return _extends$8({
      role: "presentation"
    }, externalEventHandlers, {
      onKeyDown: createHandleKeyDown(externalEventHandlers),
      ref: handleRef
    });
  };
  const getBackdropProps = (otherHandlers = {}) => {
    const externalEventHandlers = otherHandlers;
    return _extends$8({
      "aria-hidden": true
    }, externalEventHandlers, {
      onClick: createHandleBackdropClick(externalEventHandlers),
      open
    });
  };
  const getTransitionProps2 = () => {
    const handleEnter = () => {
      setExited(false);
      if (onTransitionEnter) {
        onTransitionEnter();
      }
    };
    const handleExited = () => {
      setExited(true);
      if (onTransitionExited) {
        onTransitionExited();
      }
      if (closeAfterTransition) {
        handleClose();
      }
    };
    return {
      onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
      onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
    };
  };
  return {
    getRootProps,
    getBackdropProps,
    getTransitionProps: getTransitionProps2,
    rootRef: handleRef,
    portalRef: handlePortalRef,
    isTopModal,
    exited,
    hasTransition
  };
}
const _excluded$7 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
const styles$3 = {
  entering: {
    opacity: 1
  },
  entered: {
    opacity: 1
  }
};
const Fade = /* @__PURE__ */ reactExports.forwardRef(function Fade2(props, ref) {
  const theme = useTheme();
  const defaultTimeout = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    addEndListener,
    appear = true,
    children,
    easing: easing2,
    in: inProp,
    onEnter,
    onEntered,
    onEntering,
    onExit,
    onExited,
    onExiting,
    style: style2,
    timeout = defaultTimeout,
    // eslint-disable-next-line react/prop-types
    TransitionComponent = Transition$1
  } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$7);
  const nodeRef = reactExports.useRef(null);
  const handleRef = useForkRef(nodeRef, children.ref, ref);
  const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
    if (callback) {
      const node2 = nodeRef.current;
      if (maybeIsAppearing === void 0) {
        callback(node2);
      } else {
        callback(node2, maybeIsAppearing);
      }
    }
  };
  const handleEntering = normalizedTransitionCallback(onEntering);
  const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
    reflow(node2);
    const transitionProps = getTransitionProps({
      style: style2,
      timeout,
      easing: easing2
    }, {
      mode: "enter"
    });
    node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
    node2.style.transition = theme.transitions.create("opacity", transitionProps);
    if (onEnter) {
      onEnter(node2, isAppearing);
    }
  });
  const handleEntered = normalizedTransitionCallback(onEntered);
  const handleExiting = normalizedTransitionCallback(onExiting);
  const handleExit = normalizedTransitionCallback((node2) => {
    const transitionProps = getTransitionProps({
      style: style2,
      timeout,
      easing: easing2
    }, {
      mode: "exit"
    });
    node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
    node2.style.transition = theme.transitions.create("opacity", transitionProps);
    if (onExit) {
      onExit(node2);
    }
  });
  const handleExited = normalizedTransitionCallback(onExited);
  const handleAddEndListener = (next2) => {
    if (addEndListener) {
      addEndListener(nodeRef.current, next2);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$8({
    appear,
    in: inProp,
    nodeRef,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: handleAddEndListener,
    timeout
  }, other, {
    children: (state, childProps) => {
      return /* @__PURE__ */ reactExports.cloneElement(children, _extends$8({
        style: _extends$8({
          opacity: 0,
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, styles$3[state], style2, children.props.style),
        ref: handleRef
      }, childProps));
    }
  }));
});
const Fade$1 = Fade;
function getBackdropUtilityClass(slot) {
  return generateUtilityClass("MuiBackdrop", slot);
}
generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);
const _excluded$6 = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
const useUtilityClasses$3 = (ownerState) => {
  const {
    classes,
    invisible
  } = ownerState;
  const slots = {
    root: ["root", invisible && "invisible"]
  };
  return composeClasses(slots, getBackdropUtilityClass, classes);
};
const BackdropRoot = styled$1("div", {
  name: "MuiBackdrop",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, ownerState.invisible && styles2.invisible];
  }
})(({
  ownerState
}) => _extends$8({
  position: "fixed",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  backgroundColor: "rgba(0, 0, 0, 0.5)",
  WebkitTapHighlightColor: "transparent"
}, ownerState.invisible && {
  backgroundColor: "transparent"
}));
const Backdrop = /* @__PURE__ */ reactExports.forwardRef(function Backdrop2(inProps, ref) {
  var _slotProps$root, _ref, _slots$root;
  const props = useThemeProps({
    props: inProps,
    name: "MuiBackdrop"
  });
  const {
    children,
    className,
    component = "div",
    components = {},
    componentsProps = {},
    invisible = false,
    open,
    slotProps = {},
    slots = {},
    TransitionComponent = Fade$1,
    transitionDuration
  } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$6);
  const ownerState = _extends$8({}, props, {
    component,
    invisible
  });
  const classes = useUtilityClasses$3(ownerState);
  const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$8({
    in: open,
    timeout: transitionDuration
  }, other, {
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropRoot, _extends$8({
      "aria-hidden": true
    }, rootSlotProps, {
      as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
      className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
      ownerState: _extends$8({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
      classes,
      ref,
      children
    }))
  }));
});
const Backdrop$1 = Backdrop;
const defaultTheme = createTheme();
const Box = createBox({
  themeId: THEME_ID,
  defaultTheme,
  defaultClassName: "MuiBox-root",
  generateClassName: ClassNameGenerator$1.generate
});
const Box$1 = Box;
function getCircularProgressUtilityClass(slot) {
  return generateUtilityClass("MuiCircularProgress", slot);
}
generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
const _excluded$5 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
let _$2 = (t3) => t3, _t$1, _t2, _t3, _t4;
const SIZE = 44;
const circularRotateKeyframe = keyframes(_t$1 || (_t$1 = _$2(_a || (_a = __template(["\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n"])))));
const circularDashKeyframe = keyframes(_t2 || (_t2 = _$2(_b || (_b = __template(["\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n"])))));
const useUtilityClasses$2 = (ownerState) => {
  const {
    classes,
    variant,
    color: color2,
    disableShrink
  } = ownerState;
  const slots = {
    root: ["root", variant, "color".concat(capitalize$3(color2))],
    svg: ["svg"],
    circle: ["circle", "circle".concat(capitalize$3(variant)), disableShrink && "circleDisableShrink"]
  };
  return composeClasses(slots, getCircularProgressUtilityClass, classes);
};
const CircularProgressRoot = styled$1("span", {
  name: "MuiCircularProgress",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, styles2[ownerState.variant], styles2["color".concat(capitalize$3(ownerState.color))]];
  }
})(({
  ownerState,
  theme
}) => _extends$8({
  display: "inline-block"
}, ownerState.variant === "determinate" && {
  transition: theme.transitions.create("transform")
}, ownerState.color !== "inherit" && {
  color: (theme.vars || theme).palette[ownerState.color].main
}), ({
  ownerState
}) => ownerState.variant === "indeterminate" && css(_t3 || (_t3 = _$2(_c || (_c = __template(["\n      animation: ", " 1.4s linear infinite;\n    "])), 0)), circularRotateKeyframe));
const CircularProgressSVG = styled$1("svg", {
  name: "MuiCircularProgress",
  slot: "Svg",
  overridesResolver: (props, styles2) => styles2.svg
})({
  display: "block"
  // Keeps the progress centered
});
const CircularProgressCircle = styled$1("circle", {
  name: "MuiCircularProgress",
  slot: "Circle",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.circle, styles2["circle".concat(capitalize$3(ownerState.variant))], ownerState.disableShrink && styles2.circleDisableShrink];
  }
})(({
  ownerState,
  theme
}) => _extends$8({
  stroke: "currentColor"
}, ownerState.variant === "determinate" && {
  transition: theme.transitions.create("stroke-dashoffset")
}, ownerState.variant === "indeterminate" && {
  // Some default value that looks fine waiting for the animation to kicks in.
  strokeDasharray: "80px, 200px",
  strokeDashoffset: 0
  // Add the unit to fix a Edge 16 and below bug.
}), ({
  ownerState
}) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t4 || (_t4 = _$2(_d || (_d = __template(["\n      animation: ", " 1.4s ease-in-out infinite;\n    "])), 0)), circularDashKeyframe));
const CircularProgress = /* @__PURE__ */ reactExports.forwardRef(function CircularProgress2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiCircularProgress"
  });
  const {
    className,
    color: color2 = "primary",
    disableShrink = false,
    size = 40,
    style: style2,
    thickness = 3.6,
    value: value2 = 0,
    variant = "indeterminate"
  } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$5);
  const ownerState = _extends$8({}, props, {
    color: color2,
    disableShrink,
    size,
    thickness,
    value: value2,
    variant
  });
  const classes = useUtilityClasses$2(ownerState);
  const circleStyle = {};
  const rootStyle = {};
  const rootProps = {};
  if (variant === "determinate") {
    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
    circleStyle.strokeDasharray = circumference.toFixed(3);
    rootProps["aria-valuenow"] = Math.round(value2);
    circleStyle.strokeDashoffset = "".concat(((100 - value2) / 100 * circumference).toFixed(3), "px");
    rootStyle.transform = "rotate(-90deg)";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressRoot, _extends$8({
    className: clsx(classes.root, className),
    style: _extends$8({
      width: size,
      height: size
    }, rootStyle, style2),
    ownerState,
    ref,
    role: "progressbar"
  }, rootProps, other, {
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressSVG, {
      className: classes.svg,
      ownerState,
      viewBox: "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE),
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgressCircle, {
        className: classes.circle,
        style: circleStyle,
        ownerState,
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })
    })
  }));
});
const CircularProgress$1 = CircularProgress;
function getModalUtilityClass(slot) {
  return generateUtilityClass("MuiModal", slot);
}
generateUtilityClasses("MuiModal", ["root", "hidden", "backdrop"]);
const _excluded$4 = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
const useUtilityClasses$1 = (ownerState) => {
  const {
    open,
    exited,
    classes
  } = ownerState;
  const slots = {
    root: ["root", !open && exited && "hidden"],
    backdrop: ["backdrop"]
  };
  return composeClasses(slots, getModalUtilityClass, classes);
};
const ModalRoot = styled$1("div", {
  name: "MuiModal",
  slot: "Root",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.root, !ownerState.open && ownerState.exited && styles2.hidden];
  }
})(({
  theme,
  ownerState
}) => _extends$8({
  position: "fixed",
  zIndex: (theme.vars || theme).zIndex.modal,
  right: 0,
  bottom: 0,
  top: 0,
  left: 0
}, !ownerState.open && ownerState.exited && {
  visibility: "hidden"
}));
const ModalBackdrop = styled$1(Backdrop$1, {
  name: "MuiModal",
  slot: "Backdrop",
  overridesResolver: (props, styles2) => {
    return styles2.backdrop;
  }
})({
  zIndex: -1
});
const Modal = /* @__PURE__ */ reactExports.forwardRef(function Modal2(inProps, ref) {
  var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
  const props = useThemeProps({
    name: "MuiModal",
    props: inProps
  });
  const {
    BackdropComponent = ModalBackdrop,
    BackdropProps,
    className,
    closeAfterTransition = false,
    children,
    container: container2,
    component,
    components = {},
    componentsProps = {},
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableEscapeKeyDown = false,
    disablePortal = false,
    disableRestoreFocus = false,
    disableScrollLock = false,
    hideBackdrop = false,
    keepMounted = false,
    onBackdropClick,
    open,
    slotProps,
    slots
    // eslint-disable-next-line react/prop-types
  } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$4);
  const propsWithDefaults = _extends$8({}, props, {
    closeAfterTransition,
    disableAutoFocus,
    disableEnforceFocus,
    disableEscapeKeyDown,
    disablePortal,
    disableRestoreFocus,
    disableScrollLock,
    hideBackdrop,
    keepMounted
  });
  const {
    getRootProps,
    getBackdropProps,
    getTransitionProps: getTransitionProps2,
    portalRef,
    isTopModal,
    exited,
    hasTransition
  } = useModal(_extends$8({}, propsWithDefaults, {
    rootRef: ref
  }));
  const ownerState = _extends$8({}, propsWithDefaults, {
    exited
  });
  const classes = useUtilityClasses$1(ownerState);
  const childProps = {};
  if (children.props.tabIndex === void 0) {
    childProps.tabIndex = "-1";
  }
  if (hasTransition) {
    const {
      onEnter,
      onExited
    } = getTransitionProps2();
    childProps.onEnter = onEnter;
    childProps.onExited = onExited;
  }
  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
  const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
  const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
  const rootProps = useSlotProps({
    elementType: RootSlot,
    externalSlotProps: rootSlotProps,
    externalForwardedProps: other,
    getSlotProps: getRootProps,
    additionalProps: {
      ref,
      as: component
    },
    ownerState,
    className: clsx(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
  });
  const backdropProps = useSlotProps({
    elementType: BackdropSlot,
    externalSlotProps: backdropSlotProps,
    additionalProps: BackdropProps,
    getSlotProps: (otherHandlers) => {
      return getBackdropProps(_extends$8({}, otherHandlers, {
        onClick: (e3) => {
          if (onBackdropClick) {
            onBackdropClick(e3);
          }
          if (otherHandlers != null && otherHandlers.onClick) {
            otherHandlers.onClick(e3);
          }
        }
      }));
    },
    className: clsx(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
    ownerState
  });
  if (!keepMounted && !open && (!hasTransition || exited)) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, {
    ref: portalRef,
    container: container2,
    disablePortal,
    children: /* @__PURE__ */ jsxRuntimeExports.jsxs(RootSlot, _extends$8({}, rootProps, {
      children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ jsxRuntimeExports.jsx(BackdropSlot, _extends$8({}, backdropProps)) : null, /* @__PURE__ */ jsxRuntimeExports.jsx(FocusTrap, {
        disableEnforceFocus,
        disableAutoFocus,
        disableRestoreFocus,
        isEnabled: isTopModal,
        open,
        children: /* @__PURE__ */ reactExports.cloneElement(children, childProps)
      })]
    }))
  });
});
const Modal$1 = Modal;
const _excluded$3 = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
function getTranslateValue(direction, node2, resolvedContainer) {
  const rect = node2.getBoundingClientRect();
  const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
  const containerWindow = ownerWindow(node2);
  let transform2;
  if (node2.fakeTransform) {
    transform2 = node2.fakeTransform;
  } else {
    const computedStyle = containerWindow.getComputedStyle(node2);
    transform2 = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
  }
  let offsetX = 0;
  let offsetY = 0;
  if (transform2 && transform2 !== "none" && typeof transform2 === "string") {
    const transformValues = transform2.split("(")[1].split(")")[0].split(",");
    offsetX = parseInt(transformValues[4], 10);
    offsetY = parseInt(transformValues[5], 10);
  }
  if (direction === "left") {
    if (containerRect) {
      return "translateX(".concat(containerRect.right + offsetX - rect.left, "px)");
    }
    return "translateX(".concat(containerWindow.innerWidth + offsetX - rect.left, "px)");
  }
  if (direction === "right") {
    if (containerRect) {
      return "translateX(-".concat(rect.right - containerRect.left - offsetX, "px)");
    }
    return "translateX(-".concat(rect.left + rect.width - offsetX, "px)");
  }
  if (direction === "up") {
    if (containerRect) {
      return "translateY(".concat(containerRect.bottom + offsetY - rect.top, "px)");
    }
    return "translateY(".concat(containerWindow.innerHeight + offsetY - rect.top, "px)");
  }
  if (containerRect) {
    return "translateY(-".concat(rect.top - containerRect.top + rect.height - offsetY, "px)");
  }
  return "translateY(-".concat(rect.top + rect.height - offsetY, "px)");
}
function resolveContainer(containerPropProp) {
  return typeof containerPropProp === "function" ? containerPropProp() : containerPropProp;
}
function setTranslateValue(direction, node2, containerProp) {
  const resolvedContainer = resolveContainer(containerProp);
  const transform2 = getTranslateValue(direction, node2, resolvedContainer);
  if (transform2) {
    node2.style.webkitTransform = transform2;
    node2.style.transform = transform2;
  }
}
const Slide = /* @__PURE__ */ reactExports.forwardRef(function Slide2(props, ref) {
  const theme = useTheme();
  const defaultEasing = {
    enter: theme.transitions.easing.easeOut,
    exit: theme.transitions.easing.sharp
  };
  const defaultTimeout = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    addEndListener,
    appear = true,
    children,
    container: containerProp,
    direction = "down",
    easing: easingProp = defaultEasing,
    in: inProp,
    onEnter,
    onEntered,
    onEntering,
    onExit,
    onExited,
    onExiting,
    style: style2,
    timeout = defaultTimeout,
    // eslint-disable-next-line react/prop-types
    TransitionComponent = Transition$1
  } = props, other = _objectWithoutPropertiesLoose$4(props, _excluded$3);
  const childrenRef = reactExports.useRef(null);
  const handleRef = useForkRef(children.ref, childrenRef, ref);
  const normalizedTransitionCallback = (callback) => (isAppearing) => {
    if (callback) {
      if (isAppearing === void 0) {
        callback(childrenRef.current);
      } else {
        callback(childrenRef.current, isAppearing);
      }
    }
  };
  const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
    setTranslateValue(direction, node2, containerProp);
    reflow(node2);
    if (onEnter) {
      onEnter(node2, isAppearing);
    }
  });
  const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
    const transitionProps = getTransitionProps({
      timeout,
      style: style2,
      easing: easingProp
    }, {
      mode: "enter"
    });
    node2.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends$8({}, transitionProps));
    node2.style.transition = theme.transitions.create("transform", _extends$8({}, transitionProps));
    node2.style.webkitTransform = "none";
    node2.style.transform = "none";
    if (onEntering) {
      onEntering(node2, isAppearing);
    }
  });
  const handleEntered = normalizedTransitionCallback(onEntered);
  const handleExiting = normalizedTransitionCallback(onExiting);
  const handleExit = normalizedTransitionCallback((node2) => {
    const transitionProps = getTransitionProps({
      timeout,
      style: style2,
      easing: easingProp
    }, {
      mode: "exit"
    });
    node2.style.webkitTransition = theme.transitions.create("-webkit-transform", transitionProps);
    node2.style.transition = theme.transitions.create("transform", transitionProps);
    setTranslateValue(direction, node2, containerProp);
    if (onExit) {
      onExit(node2);
    }
  });
  const handleExited = normalizedTransitionCallback((node2) => {
    node2.style.webkitTransition = "";
    node2.style.transition = "";
    if (onExited) {
      onExited(node2);
    }
  });
  const handleAddEndListener = (next2) => {
    if (addEndListener) {
      addEndListener(childrenRef.current, next2);
    }
  };
  const updatePosition = reactExports.useCallback(() => {
    if (childrenRef.current) {
      setTranslateValue(direction, childrenRef.current, containerProp);
    }
  }, [direction, containerProp]);
  reactExports.useEffect(() => {
    if (inProp || direction === "down" || direction === "right") {
      return void 0;
    }
    const handleResize = debounce(() => {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current, containerProp);
      }
    });
    const containerWindow = ownerWindow(childrenRef.current);
    containerWindow.addEventListener("resize", handleResize);
    return () => {
      handleResize.clear();
      containerWindow.removeEventListener("resize", handleResize);
    };
  }, [direction, inProp, containerProp]);
  reactExports.useEffect(() => {
    if (!inProp) {
      updatePosition();
    }
  }, [inProp, updatePosition]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$8({
    nodeRef: childrenRef,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: handleAddEndListener,
    appear,
    in: inProp,
    timeout
  }, other, {
    children: (state, childProps) => {
      return /* @__PURE__ */ reactExports.cloneElement(children, _extends$8({
        ref: handleRef,
        style: _extends$8({
          visibility: state === "exited" && !inProp ? "hidden" : void 0
        }, style2, children.props.style)
      }, childProps));
    }
  }));
});
const Slide$1 = Slide;
function getDrawerUtilityClass(slot) {
  return generateUtilityClass("MuiDrawer", slot);
}
generateUtilityClasses("MuiDrawer", ["root", "docked", "paper", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]);
const _excluded$2 = ["BackdropProps"], _excluded2 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];
const overridesResolver = (props, styles2) => {
  const {
    ownerState
  } = props;
  return [styles2.root, (ownerState.variant === "permanent" || ownerState.variant === "persistent") && styles2.docked, styles2.modal];
};
const useUtilityClasses = (ownerState) => {
  const {
    classes,
    anchor,
    variant
  } = ownerState;
  const slots = {
    root: ["root"],
    docked: [(variant === "permanent" || variant === "persistent") && "docked"],
    modal: ["modal"],
    paper: ["paper", "paperAnchor".concat(capitalize$3(anchor)), variant !== "temporary" && "paperAnchorDocked".concat(capitalize$3(anchor))]
  };
  return composeClasses(slots, getDrawerUtilityClass, classes);
};
const DrawerRoot = styled$1(Modal$1, {
  name: "MuiDrawer",
  slot: "Root",
  overridesResolver
})(({
  theme
}) => ({
  zIndex: (theme.vars || theme).zIndex.drawer
}));
const DrawerDockedRoot = styled$1("div", {
  shouldForwardProp: rootShouldForwardProp,
  name: "MuiDrawer",
  slot: "Docked",
  skipVariantsResolver: false,
  overridesResolver
})({
  flex: "0 0 auto"
});
const DrawerPaper = styled$1(Paper$1, {
  name: "MuiDrawer",
  slot: "Paper",
  overridesResolver: (props, styles2) => {
    const {
      ownerState
    } = props;
    return [styles2.paper, styles2["paperAnchor".concat(capitalize$3(ownerState.anchor))], ownerState.variant !== "temporary" && styles2["paperAnchorDocked".concat(capitalize$3(ownerState.anchor))]];
  }
})(({
  theme,
  ownerState
}) => _extends$8({
  overflowY: "auto",
  display: "flex",
  flexDirection: "column",
  height: "100%",
  flex: "1 0 auto",
  zIndex: (theme.vars || theme).zIndex.drawer,
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  // temporary style
  position: "fixed",
  top: 0,
  // We disable the focus ring for mouse, touch and keyboard users.
  // At some point, it would be better to keep it for keyboard users.
  // :focus-ring CSS pseudo-class will help.
  outline: 0
}, ownerState.anchor === "left" && {
  left: 0
}, ownerState.anchor === "top" && {
  top: 0,
  left: 0,
  right: 0,
  height: "auto",
  maxHeight: "100%"
}, ownerState.anchor === "right" && {
  right: 0
}, ownerState.anchor === "bottom" && {
  top: "auto",
  left: 0,
  bottom: 0,
  right: 0,
  height: "auto",
  maxHeight: "100%"
}, ownerState.anchor === "left" && ownerState.variant !== "temporary" && {
  borderRight: "1px solid ".concat((theme.vars || theme).palette.divider)
}, ownerState.anchor === "top" && ownerState.variant !== "temporary" && {
  borderBottom: "1px solid ".concat((theme.vars || theme).palette.divider)
}, ownerState.anchor === "right" && ownerState.variant !== "temporary" && {
  borderLeft: "1px solid ".concat((theme.vars || theme).palette.divider)
}, ownerState.anchor === "bottom" && ownerState.variant !== "temporary" && {
  borderTop: "1px solid ".concat((theme.vars || theme).palette.divider)
}));
const oppositeDirection = {
  left: "right",
  right: "left",
  top: "down",
  bottom: "up"
};
function isHorizontal(anchor) {
  return ["left", "right"].indexOf(anchor) !== -1;
}
function getAnchor(theme, anchor) {
  return theme.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
}
const Drawer = /* @__PURE__ */ reactExports.forwardRef(function Drawer2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDrawer"
  });
  const theme = useTheme();
  const defaultTransitionDuration = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    anchor: anchorProp = "left",
    BackdropProps,
    children,
    className,
    elevation = 16,
    hideBackdrop = false,
    ModalProps: {
      BackdropProps: BackdropPropsProp
    } = {},
    onClose,
    open = false,
    PaperProps = {},
    SlideProps,
    // eslint-disable-next-line react/prop-types
    TransitionComponent = Slide$1,
    transitionDuration = defaultTransitionDuration,
    variant = "temporary"
  } = props, ModalProps = _objectWithoutPropertiesLoose$4(props.ModalProps, _excluded$2), other = _objectWithoutPropertiesLoose$4(props, _excluded2);
  const mounted = reactExports.useRef(false);
  reactExports.useEffect(() => {
    mounted.current = true;
  }, []);
  const anchorInvariant = getAnchor(theme, anchorProp);
  const anchor = anchorProp;
  const ownerState = _extends$8({}, props, {
    anchor,
    elevation,
    open,
    variant
  }, other);
  const classes = useUtilityClasses(ownerState);
  const drawer = /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerPaper, _extends$8({
    elevation: variant === "temporary" ? elevation : 0,
    square: true
  }, PaperProps, {
    className: clsx(classes.paper, PaperProps.className),
    ownerState,
    children
  }));
  if (variant === "permanent") {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerDockedRoot, _extends$8({
      className: clsx(classes.root, classes.docked, className),
      ownerState,
      ref
    }, other, {
      children: drawer
    }));
  }
  const slidingDrawer = /* @__PURE__ */ jsxRuntimeExports.jsx(TransitionComponent, _extends$8({
    in: open,
    direction: oppositeDirection[anchorInvariant],
    timeout: transitionDuration,
    appear: mounted.current
  }, SlideProps, {
    children: drawer
  }));
  if (variant === "persistent") {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerDockedRoot, _extends$8({
      className: clsx(classes.root, classes.docked, className),
      ownerState,
      ref
    }, other, {
      children: slidingDrawer
    }));
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(DrawerRoot, _extends$8({
    BackdropProps: _extends$8({}, BackdropProps, BackdropPropsProp, {
      transitionDuration
    }),
    className: clsx(classes.root, classes.modal, className),
    open,
    ownerState,
    onClose,
    hideBackdrop,
    ref
  }, other, ModalProps, {
    children: slidingDrawer
  }));
});
const Drawer$1 = Drawer;
const Stack$4 = createStack({
  createStyledComponent: styled$1("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (props, styles2) => styles2.root
  }),
  useThemeProps: (inProps) => useThemeProps({
    props: inProps,
    name: "MuiStack"
  })
});
const Stack$5 = Stack$4;
const isVaultLocked = () => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("status", (response) => {
      if (!response.status)
        reject(response.error ? response.error : "Rpc failed");
      if (response.status) {
        const isLocked = response.response.locked;
        resolve2(isLocked);
      }
    });
  });
};
function isWriteMode() {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("checkmode", function(response) {
      if (response.status) {
        return resolve2(response.response.mode === "WRITE");
      }
      return reject();
    });
  });
}
const getMinimaBalance = () => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("balance", (res) => {
      if (!res.status)
        reject("RPC Unavailable");
      resolve2(res.response);
    });
  });
};
const getTokens = () => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("balance", (resp) => {
      if (!resp.status)
        reject("Fetching balance cmd failed");
      const tokenBalance = resp.response.filter((t3) => t3.tokenid !== "0x00").map((t3) => t3.tokenid);
      window.MDS.cmd("tokens", (resp2) => {
        if (!resp2.status)
          reject("Fetching tokens failed");
        const tokens = resp2.response.filter((t3) => tokenBalance.includes(t3.tokenid) && t3.decimals === 0);
        resolve2(tokens);
      });
    });
  });
};
const getScripts = () => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("scripts", (res) => {
      if (!res.status)
        reject(res.error ? res.error : "RPC Failed");
      resolve2(res.response);
    });
  });
};
const checkAddress = (address) => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("checkaddress address:".concat(address), (res) => {
      if (!res.status)
        reject(res.error ? res.error : "RPC Failed");
      resolve2(res.response);
    });
  });
};
var lib$6 = {};
var Parser$3 = {};
var Tokenizer = {};
var decode$1 = {};
var decodeDataHtml = {};
Object.defineProperty(decodeDataHtml, "__esModule", { value: true });
decodeDataHtml.default = new Uint16Array(
  // prettier-ignore
  'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map(function(c7) {
    return c7.charCodeAt(0);
  })
);
var decodeDataXml = {};
Object.defineProperty(decodeDataXml, "__esModule", { value: true });
decodeDataXml.default = new Uint16Array(
  // prettier-ignore
  "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map(function(c7) {
    return c7.charCodeAt(0);
  })
);
var decode_codepoint = {};
(function(exports2) {
  var _a2;
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.replaceCodePoint = exports2.fromCodePoint = void 0;
  var decodeMap = /* @__PURE__ */ new Map([
    [0, 65533],
    [128, 8364],
    [130, 8218],
    [131, 402],
    [132, 8222],
    [133, 8230],
    [134, 8224],
    [135, 8225],
    [136, 710],
    [137, 8240],
    [138, 352],
    [139, 8249],
    [140, 338],
    [142, 381],
    [145, 8216],
    [146, 8217],
    [147, 8220],
    [148, 8221],
    [149, 8226],
    [150, 8211],
    [151, 8212],
    [152, 732],
    [153, 8482],
    [154, 353],
    [155, 8250],
    [156, 339],
    [158, 382],
    [159, 376]
  ]);
  exports2.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
  (_a2 = String.fromCodePoint) !== null && _a2 !== void 0 ? _a2 : function(codePoint) {
    var output = "";
    if (codePoint > 65535) {
      codePoint -= 65536;
      output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    output += String.fromCharCode(codePoint);
    return output;
  };
  function replaceCodePoint(codePoint) {
    var _a3;
    if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
      return 65533;
    }
    return (_a3 = decodeMap.get(codePoint)) !== null && _a3 !== void 0 ? _a3 : codePoint;
  }
  exports2.replaceCodePoint = replaceCodePoint;
  function decodeCodePoint(codePoint) {
    return (0, exports2.fromCodePoint)(replaceCodePoint(codePoint));
  }
  exports2.default = decodeCodePoint;
})(decode_codepoint);
(function(exports2) {
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
    return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.decodeXML = exports2.decodeHTMLStrict = exports2.decodeHTML = exports2.determineBranch = exports2.BinTrieFlags = exports2.fromCodePoint = exports2.replaceCodePoint = exports2.decodeCodePoint = exports2.xmlDecodeTree = exports2.htmlDecodeTree = void 0;
  var decode_data_html_js_1 = __importDefault2(decodeDataHtml);
  exports2.htmlDecodeTree = decode_data_html_js_1.default;
  var decode_data_xml_js_1 = __importDefault2(decodeDataXml);
  exports2.xmlDecodeTree = decode_data_xml_js_1.default;
  var decode_codepoint_js_1 = __importDefault2(decode_codepoint);
  exports2.decodeCodePoint = decode_codepoint_js_1.default;
  var decode_codepoint_js_2 = decode_codepoint;
  Object.defineProperty(exports2, "replaceCodePoint", { enumerable: true, get: function() {
    return decode_codepoint_js_2.replaceCodePoint;
  } });
  Object.defineProperty(exports2, "fromCodePoint", { enumerable: true, get: function() {
    return decode_codepoint_js_2.fromCodePoint;
  } });
  var CharCodes;
  (function(CharCodes2) {
    CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
    CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
    CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
    CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
    CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
    CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
    CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
    CharCodes2[CharCodes2["To_LOWER_BIT"] = 32] = "To_LOWER_BIT";
  })(CharCodes || (CharCodes = {}));
  var BinTrieFlags;
  (function(BinTrieFlags2) {
    BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
    BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
    BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
  })(BinTrieFlags = exports2.BinTrieFlags || (exports2.BinTrieFlags = {}));
  function getDecoder(decodeTree) {
    return function decodeHTMLBinary(str, strict) {
      var ret = "";
      var lastIdx = 0;
      var strIdx = 0;
      while ((strIdx = str.indexOf("&", strIdx)) >= 0) {
        ret += str.slice(lastIdx, strIdx);
        lastIdx = strIdx;
        strIdx += 1;
        if (str.charCodeAt(strIdx) === CharCodes.NUM) {
          var start2 = strIdx + 1;
          var base = 10;
          var cp = str.charCodeAt(start2);
          if ((cp | CharCodes.To_LOWER_BIT) === CharCodes.LOWER_X) {
            base = 16;
            strIdx += 1;
            start2 += 1;
          }
          do
            cp = str.charCodeAt(++strIdx);
          while (cp >= CharCodes.ZERO && cp <= CharCodes.NINE || base === 16 && (cp | CharCodes.To_LOWER_BIT) >= CharCodes.LOWER_A && (cp | CharCodes.To_LOWER_BIT) <= CharCodes.LOWER_F);
          if (start2 !== strIdx) {
            var entity = str.substring(start2, strIdx);
            var parsed = parseInt(entity, base);
            if (str.charCodeAt(strIdx) === CharCodes.SEMI) {
              strIdx += 1;
            } else if (strict) {
              continue;
            }
            ret += (0, decode_codepoint_js_1.default)(parsed);
            lastIdx = strIdx;
          }
          continue;
        }
        var resultIdx = 0;
        var excess = 1;
        var treeIdx = 0;
        var current = decodeTree[treeIdx];
        for (; strIdx < str.length; strIdx++, excess++) {
          treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));
          if (treeIdx < 0)
            break;
          current = decodeTree[treeIdx];
          var masked = current & BinTrieFlags.VALUE_LENGTH;
          if (masked) {
            if (!strict || str.charCodeAt(strIdx) === CharCodes.SEMI) {
              resultIdx = treeIdx;
              excess = 0;
            }
            var valueLength = (masked >> 14) - 1;
            if (valueLength === 0)
              break;
            treeIdx += valueLength;
          }
        }
        if (resultIdx !== 0) {
          var valueLength = (decodeTree[resultIdx] & BinTrieFlags.VALUE_LENGTH) >> 14;
          ret += valueLength === 1 ? String.fromCharCode(decodeTree[resultIdx] & ~BinTrieFlags.VALUE_LENGTH) : valueLength === 2 ? String.fromCharCode(decodeTree[resultIdx + 1]) : String.fromCharCode(decodeTree[resultIdx + 1], decodeTree[resultIdx + 2]);
          lastIdx = strIdx - excess + 1;
        }
      }
      return ret + str.slice(lastIdx);
    };
  }
  function determineBranch(decodeTree, current, nodeIdx, char2) {
    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;
    if (branchCount === 0) {
      return jumpOffset !== 0 && char2 === jumpOffset ? nodeIdx : -1;
    }
    if (jumpOffset) {
      var value2 = char2 - jumpOffset;
      return value2 < 0 || value2 >= branchCount ? -1 : decodeTree[nodeIdx + value2] - 1;
    }
    var lo = nodeIdx;
    var hi2 = lo + branchCount - 1;
    while (lo <= hi2) {
      var mid = lo + hi2 >>> 1;
      var midVal = decodeTree[mid];
      if (midVal < char2) {
        lo = mid + 1;
      } else if (midVal > char2) {
        hi2 = mid - 1;
      } else {
        return decodeTree[mid + branchCount];
      }
    }
    return -1;
  }
  exports2.determineBranch = determineBranch;
  var htmlDecoder = getDecoder(decode_data_html_js_1.default);
  var xmlDecoder = getDecoder(decode_data_xml_js_1.default);
  function decodeHTML(str) {
    return htmlDecoder(str, false);
  }
  exports2.decodeHTML = decodeHTML;
  function decodeHTMLStrict(str) {
    return htmlDecoder(str, true);
  }
  exports2.decodeHTMLStrict = decodeHTMLStrict;
  function decodeXML(str) {
    return xmlDecoder(str, true);
  }
  exports2.decodeXML = decodeXML;
})(decode$1);
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.QuoteType = void 0;
  var decode_js_12 = decode$1;
  var CharCodes;
  (function(CharCodes2) {
    CharCodes2[CharCodes2["Tab"] = 9] = "Tab";
    CharCodes2[CharCodes2["NewLine"] = 10] = "NewLine";
    CharCodes2[CharCodes2["FormFeed"] = 12] = "FormFeed";
    CharCodes2[CharCodes2["CarriageReturn"] = 13] = "CarriageReturn";
    CharCodes2[CharCodes2["Space"] = 32] = "Space";
    CharCodes2[CharCodes2["ExclamationMark"] = 33] = "ExclamationMark";
    CharCodes2[CharCodes2["Num"] = 35] = "Num";
    CharCodes2[CharCodes2["Amp"] = 38] = "Amp";
    CharCodes2[CharCodes2["SingleQuote"] = 39] = "SingleQuote";
    CharCodes2[CharCodes2["DoubleQuote"] = 34] = "DoubleQuote";
    CharCodes2[CharCodes2["Dash"] = 45] = "Dash";
    CharCodes2[CharCodes2["Slash"] = 47] = "Slash";
    CharCodes2[CharCodes2["Zero"] = 48] = "Zero";
    CharCodes2[CharCodes2["Nine"] = 57] = "Nine";
    CharCodes2[CharCodes2["Semi"] = 59] = "Semi";
    CharCodes2[CharCodes2["Lt"] = 60] = "Lt";
    CharCodes2[CharCodes2["Eq"] = 61] = "Eq";
    CharCodes2[CharCodes2["Gt"] = 62] = "Gt";
    CharCodes2[CharCodes2["Questionmark"] = 63] = "Questionmark";
    CharCodes2[CharCodes2["UpperA"] = 65] = "UpperA";
    CharCodes2[CharCodes2["LowerA"] = 97] = "LowerA";
    CharCodes2[CharCodes2["UpperF"] = 70] = "UpperF";
    CharCodes2[CharCodes2["LowerF"] = 102] = "LowerF";
    CharCodes2[CharCodes2["UpperZ"] = 90] = "UpperZ";
    CharCodes2[CharCodes2["LowerZ"] = 122] = "LowerZ";
    CharCodes2[CharCodes2["LowerX"] = 120] = "LowerX";
    CharCodes2[CharCodes2["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
  })(CharCodes || (CharCodes = {}));
  var State;
  (function(State2) {
    State2[State2["Text"] = 1] = "Text";
    State2[State2["BeforeTagName"] = 2] = "BeforeTagName";
    State2[State2["InTagName"] = 3] = "InTagName";
    State2[State2["InSelfClosingTag"] = 4] = "InSelfClosingTag";
    State2[State2["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
    State2[State2["InClosingTagName"] = 6] = "InClosingTagName";
    State2[State2["AfterClosingTagName"] = 7] = "AfterClosingTagName";
    State2[State2["BeforeAttributeName"] = 8] = "BeforeAttributeName";
    State2[State2["InAttributeName"] = 9] = "InAttributeName";
    State2[State2["AfterAttributeName"] = 10] = "AfterAttributeName";
    State2[State2["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
    State2[State2["InAttributeValueDq"] = 12] = "InAttributeValueDq";
    State2[State2["InAttributeValueSq"] = 13] = "InAttributeValueSq";
    State2[State2["InAttributeValueNq"] = 14] = "InAttributeValueNq";
    State2[State2["BeforeDeclaration"] = 15] = "BeforeDeclaration";
    State2[State2["InDeclaration"] = 16] = "InDeclaration";
    State2[State2["InProcessingInstruction"] = 17] = "InProcessingInstruction";
    State2[State2["BeforeComment"] = 18] = "BeforeComment";
    State2[State2["CDATASequence"] = 19] = "CDATASequence";
    State2[State2["InSpecialComment"] = 20] = "InSpecialComment";
    State2[State2["InCommentLike"] = 21] = "InCommentLike";
    State2[State2["BeforeSpecialS"] = 22] = "BeforeSpecialS";
    State2[State2["SpecialStartSequence"] = 23] = "SpecialStartSequence";
    State2[State2["InSpecialTag"] = 24] = "InSpecialTag";
    State2[State2["BeforeEntity"] = 25] = "BeforeEntity";
    State2[State2["BeforeNumericEntity"] = 26] = "BeforeNumericEntity";
    State2[State2["InNamedEntity"] = 27] = "InNamedEntity";
    State2[State2["InNumericEntity"] = 28] = "InNumericEntity";
    State2[State2["InHexEntity"] = 29] = "InHexEntity";
  })(State || (State = {}));
  function isWhitespace(c7) {
    return c7 === CharCodes.Space || c7 === CharCodes.NewLine || c7 === CharCodes.Tab || c7 === CharCodes.FormFeed || c7 === CharCodes.CarriageReturn;
  }
  function isEndOfTagSection(c7) {
    return c7 === CharCodes.Slash || c7 === CharCodes.Gt || isWhitespace(c7);
  }
  function isNumber(c7) {
    return c7 >= CharCodes.Zero && c7 <= CharCodes.Nine;
  }
  function isASCIIAlpha(c7) {
    return c7 >= CharCodes.LowerA && c7 <= CharCodes.LowerZ || c7 >= CharCodes.UpperA && c7 <= CharCodes.UpperZ;
  }
  function isHexDigit(c7) {
    return c7 >= CharCodes.UpperA && c7 <= CharCodes.UpperF || c7 >= CharCodes.LowerA && c7 <= CharCodes.LowerF;
  }
  var QuoteType;
  (function(QuoteType2) {
    QuoteType2[QuoteType2["NoValue"] = 0] = "NoValue";
    QuoteType2[QuoteType2["Unquoted"] = 1] = "Unquoted";
    QuoteType2[QuoteType2["Single"] = 2] = "Single";
    QuoteType2[QuoteType2["Double"] = 3] = "Double";
  })(QuoteType = exports2.QuoteType || (exports2.QuoteType = {}));
  var Sequences = {
    Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
    CdataEnd: new Uint8Array([93, 93, 62]),
    CommentEnd: new Uint8Array([45, 45, 62]),
    ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
    StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
    TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101])
    // `</title`
  };
  var Tokenizer2 = (
    /** @class */
    function() {
      function Tokenizer3(_a2, cbs) {
        var _b2 = _a2.xmlMode, xmlMode = _b2 === void 0 ? false : _b2, _c2 = _a2.decodeEntities, decodeEntities = _c2 === void 0 ? true : _c2;
        this.cbs = cbs;
        this.state = State.Text;
        this.buffer = "";
        this.sectionStart = 0;
        this.index = 0;
        this.baseState = State.Text;
        this.isSpecial = false;
        this.running = true;
        this.offset = 0;
        this.sequenceIndex = 0;
        this.trieIndex = 0;
        this.trieCurrent = 0;
        this.entityResult = 0;
        this.entityExcess = 0;
        this.xmlMode = xmlMode;
        this.decodeEntities = decodeEntities;
        this.entityTrie = xmlMode ? decode_js_12.xmlDecodeTree : decode_js_12.htmlDecodeTree;
      }
      Tokenizer3.prototype.reset = function() {
        this.state = State.Text;
        this.buffer = "";
        this.sectionStart = 0;
        this.index = 0;
        this.baseState = State.Text;
        this.currentSequence = void 0;
        this.running = true;
        this.offset = 0;
      };
      Tokenizer3.prototype.write = function(chunk) {
        this.offset += this.buffer.length;
        this.buffer = chunk;
        this.parse();
      };
      Tokenizer3.prototype.end = function() {
        if (this.running)
          this.finish();
      };
      Tokenizer3.prototype.pause = function() {
        this.running = false;
      };
      Tokenizer3.prototype.resume = function() {
        this.running = true;
        if (this.index < this.buffer.length + this.offset) {
          this.parse();
        }
      };
      Tokenizer3.prototype.getIndex = function() {
        return this.index;
      };
      Tokenizer3.prototype.getSectionStart = function() {
        return this.sectionStart;
      };
      Tokenizer3.prototype.stateText = function(c7) {
        if (c7 === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {
          if (this.index > this.sectionStart) {
            this.cbs.ontext(this.sectionStart, this.index);
          }
          this.state = State.BeforeTagName;
          this.sectionStart = this.index;
        } else if (this.decodeEntities && c7 === CharCodes.Amp) {
          this.state = State.BeforeEntity;
        }
      };
      Tokenizer3.prototype.stateSpecialStartSequence = function(c7) {
        var isEnd = this.sequenceIndex === this.currentSequence.length;
        var isMatch = isEnd ? (
          // If we are at the end of the sequence, make sure the tag name has ended
          isEndOfTagSection(c7)
        ) : (
          // Otherwise, do a case-insensitive comparison
          (c7 | 32) === this.currentSequence[this.sequenceIndex]
        );
        if (!isMatch) {
          this.isSpecial = false;
        } else if (!isEnd) {
          this.sequenceIndex++;
          return;
        }
        this.sequenceIndex = 0;
        this.state = State.InTagName;
        this.stateInTagName(c7);
      };
      Tokenizer3.prototype.stateInSpecialTag = function(c7) {
        if (this.sequenceIndex === this.currentSequence.length) {
          if (c7 === CharCodes.Gt || isWhitespace(c7)) {
            var endOfText = this.index - this.currentSequence.length;
            if (this.sectionStart < endOfText) {
              var actualIndex = this.index;
              this.index = endOfText;
              this.cbs.ontext(this.sectionStart, endOfText);
              this.index = actualIndex;
            }
            this.isSpecial = false;
            this.sectionStart = endOfText + 2;
            this.stateInClosingTagName(c7);
            return;
          }
          this.sequenceIndex = 0;
        }
        if ((c7 | 32) === this.currentSequence[this.sequenceIndex]) {
          this.sequenceIndex += 1;
        } else if (this.sequenceIndex === 0) {
          if (this.currentSequence === Sequences.TitleEnd) {
            if (this.decodeEntities && c7 === CharCodes.Amp) {
              this.state = State.BeforeEntity;
            }
          } else if (this.fastForwardTo(CharCodes.Lt)) {
            this.sequenceIndex = 1;
          }
        } else {
          this.sequenceIndex = Number(c7 === CharCodes.Lt);
        }
      };
      Tokenizer3.prototype.stateCDATASequence = function(c7) {
        if (c7 === Sequences.Cdata[this.sequenceIndex]) {
          if (++this.sequenceIndex === Sequences.Cdata.length) {
            this.state = State.InCommentLike;
            this.currentSequence = Sequences.CdataEnd;
            this.sequenceIndex = 0;
            this.sectionStart = this.index + 1;
          }
        } else {
          this.sequenceIndex = 0;
          this.state = State.InDeclaration;
          this.stateInDeclaration(c7);
        }
      };
      Tokenizer3.prototype.fastForwardTo = function(c7) {
        while (++this.index < this.buffer.length + this.offset) {
          if (this.buffer.charCodeAt(this.index - this.offset) === c7) {
            return true;
          }
        }
        this.index = this.buffer.length + this.offset - 1;
        return false;
      };
      Tokenizer3.prototype.stateInCommentLike = function(c7) {
        if (c7 === this.currentSequence[this.sequenceIndex]) {
          if (++this.sequenceIndex === this.currentSequence.length) {
            if (this.currentSequence === Sequences.CdataEnd) {
              this.cbs.oncdata(this.sectionStart, this.index, 2);
            } else {
              this.cbs.oncomment(this.sectionStart, this.index, 2);
            }
            this.sequenceIndex = 0;
            this.sectionStart = this.index + 1;
            this.state = State.Text;
          }
        } else if (this.sequenceIndex === 0) {
          if (this.fastForwardTo(this.currentSequence[0])) {
            this.sequenceIndex = 1;
          }
        } else if (c7 !== this.currentSequence[this.sequenceIndex - 1]) {
          this.sequenceIndex = 0;
        }
      };
      Tokenizer3.prototype.isTagStartChar = function(c7) {
        return this.xmlMode ? !isEndOfTagSection(c7) : isASCIIAlpha(c7);
      };
      Tokenizer3.prototype.startSpecial = function(sequence, offset) {
        this.isSpecial = true;
        this.currentSequence = sequence;
        this.sequenceIndex = offset;
        this.state = State.SpecialStartSequence;
      };
      Tokenizer3.prototype.stateBeforeTagName = function(c7) {
        if (c7 === CharCodes.ExclamationMark) {
          this.state = State.BeforeDeclaration;
          this.sectionStart = this.index + 1;
        } else if (c7 === CharCodes.Questionmark) {
          this.state = State.InProcessingInstruction;
          this.sectionStart = this.index + 1;
        } else if (this.isTagStartChar(c7)) {
          var lower = c7 | 32;
          this.sectionStart = this.index;
          if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {
            this.startSpecial(Sequences.TitleEnd, 3);
          } else {
            this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;
          }
        } else if (c7 === CharCodes.Slash) {
          this.state = State.BeforeClosingTagName;
        } else {
          this.state = State.Text;
          this.stateText(c7);
        }
      };
      Tokenizer3.prototype.stateInTagName = function(c7) {
        if (isEndOfTagSection(c7)) {
          this.cbs.onopentagname(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.state = State.BeforeAttributeName;
          this.stateBeforeAttributeName(c7);
        }
      };
      Tokenizer3.prototype.stateBeforeClosingTagName = function(c7) {
        if (isWhitespace(c7))
          ;
        else if (c7 === CharCodes.Gt) {
          this.state = State.Text;
        } else {
          this.state = this.isTagStartChar(c7) ? State.InClosingTagName : State.InSpecialComment;
          this.sectionStart = this.index;
        }
      };
      Tokenizer3.prototype.stateInClosingTagName = function(c7) {
        if (c7 === CharCodes.Gt || isWhitespace(c7)) {
          this.cbs.onclosetag(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.state = State.AfterClosingTagName;
          this.stateAfterClosingTagName(c7);
        }
      };
      Tokenizer3.prototype.stateAfterClosingTagName = function(c7) {
        if (c7 === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
          this.state = State.Text;
          this.sectionStart = this.index + 1;
        }
      };
      Tokenizer3.prototype.stateBeforeAttributeName = function(c7) {
        if (c7 === CharCodes.Gt) {
          this.cbs.onopentagend(this.index);
          if (this.isSpecial) {
            this.state = State.InSpecialTag;
            this.sequenceIndex = 0;
          } else {
            this.state = State.Text;
          }
          this.baseState = this.state;
          this.sectionStart = this.index + 1;
        } else if (c7 === CharCodes.Slash) {
          this.state = State.InSelfClosingTag;
        } else if (!isWhitespace(c7)) {
          this.state = State.InAttributeName;
          this.sectionStart = this.index;
        }
      };
      Tokenizer3.prototype.stateInSelfClosingTag = function(c7) {
        if (c7 === CharCodes.Gt) {
          this.cbs.onselfclosingtag(this.index);
          this.state = State.Text;
          this.baseState = State.Text;
          this.sectionStart = this.index + 1;
          this.isSpecial = false;
        } else if (!isWhitespace(c7)) {
          this.state = State.BeforeAttributeName;
          this.stateBeforeAttributeName(c7);
        }
      };
      Tokenizer3.prototype.stateInAttributeName = function(c7) {
        if (c7 === CharCodes.Eq || isEndOfTagSection(c7)) {
          this.cbs.onattribname(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.state = State.AfterAttributeName;
          this.stateAfterAttributeName(c7);
        }
      };
      Tokenizer3.prototype.stateAfterAttributeName = function(c7) {
        if (c7 === CharCodes.Eq) {
          this.state = State.BeforeAttributeValue;
        } else if (c7 === CharCodes.Slash || c7 === CharCodes.Gt) {
          this.cbs.onattribend(QuoteType.NoValue, this.index);
          this.state = State.BeforeAttributeName;
          this.stateBeforeAttributeName(c7);
        } else if (!isWhitespace(c7)) {
          this.cbs.onattribend(QuoteType.NoValue, this.index);
          this.state = State.InAttributeName;
          this.sectionStart = this.index;
        }
      };
      Tokenizer3.prototype.stateBeforeAttributeValue = function(c7) {
        if (c7 === CharCodes.DoubleQuote) {
          this.state = State.InAttributeValueDq;
          this.sectionStart = this.index + 1;
        } else if (c7 === CharCodes.SingleQuote) {
          this.state = State.InAttributeValueSq;
          this.sectionStart = this.index + 1;
        } else if (!isWhitespace(c7)) {
          this.sectionStart = this.index;
          this.state = State.InAttributeValueNq;
          this.stateInAttributeValueNoQuotes(c7);
        }
      };
      Tokenizer3.prototype.handleInAttributeValue = function(c7, quote) {
        if (c7 === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
          this.cbs.onattribdata(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);
          this.state = State.BeforeAttributeName;
        } else if (this.decodeEntities && c7 === CharCodes.Amp) {
          this.baseState = this.state;
          this.state = State.BeforeEntity;
        }
      };
      Tokenizer3.prototype.stateInAttributeValueDoubleQuotes = function(c7) {
        this.handleInAttributeValue(c7, CharCodes.DoubleQuote);
      };
      Tokenizer3.prototype.stateInAttributeValueSingleQuotes = function(c7) {
        this.handleInAttributeValue(c7, CharCodes.SingleQuote);
      };
      Tokenizer3.prototype.stateInAttributeValueNoQuotes = function(c7) {
        if (isWhitespace(c7) || c7 === CharCodes.Gt) {
          this.cbs.onattribdata(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.cbs.onattribend(QuoteType.Unquoted, this.index);
          this.state = State.BeforeAttributeName;
          this.stateBeforeAttributeName(c7);
        } else if (this.decodeEntities && c7 === CharCodes.Amp) {
          this.baseState = this.state;
          this.state = State.BeforeEntity;
        }
      };
      Tokenizer3.prototype.stateBeforeDeclaration = function(c7) {
        if (c7 === CharCodes.OpeningSquareBracket) {
          this.state = State.CDATASequence;
          this.sequenceIndex = 0;
        } else {
          this.state = c7 === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;
        }
      };
      Tokenizer3.prototype.stateInDeclaration = function(c7) {
        if (c7 === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
          this.cbs.ondeclaration(this.sectionStart, this.index);
          this.state = State.Text;
          this.sectionStart = this.index + 1;
        }
      };
      Tokenizer3.prototype.stateInProcessingInstruction = function(c7) {
        if (c7 === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
          this.cbs.onprocessinginstruction(this.sectionStart, this.index);
          this.state = State.Text;
          this.sectionStart = this.index + 1;
        }
      };
      Tokenizer3.prototype.stateBeforeComment = function(c7) {
        if (c7 === CharCodes.Dash) {
          this.state = State.InCommentLike;
          this.currentSequence = Sequences.CommentEnd;
          this.sequenceIndex = 2;
          this.sectionStart = this.index + 1;
        } else {
          this.state = State.InDeclaration;
        }
      };
      Tokenizer3.prototype.stateInSpecialComment = function(c7) {
        if (c7 === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
          this.cbs.oncomment(this.sectionStart, this.index, 0);
          this.state = State.Text;
          this.sectionStart = this.index + 1;
        }
      };
      Tokenizer3.prototype.stateBeforeSpecialS = function(c7) {
        var lower = c7 | 32;
        if (lower === Sequences.ScriptEnd[3]) {
          this.startSpecial(Sequences.ScriptEnd, 4);
        } else if (lower === Sequences.StyleEnd[3]) {
          this.startSpecial(Sequences.StyleEnd, 4);
        } else {
          this.state = State.InTagName;
          this.stateInTagName(c7);
        }
      };
      Tokenizer3.prototype.stateBeforeEntity = function(c7) {
        this.entityExcess = 1;
        this.entityResult = 0;
        if (c7 === CharCodes.Num) {
          this.state = State.BeforeNumericEntity;
        } else if (c7 === CharCodes.Amp)
          ;
        else {
          this.trieIndex = 0;
          this.trieCurrent = this.entityTrie[0];
          this.state = State.InNamedEntity;
          this.stateInNamedEntity(c7);
        }
      };
      Tokenizer3.prototype.stateInNamedEntity = function(c7) {
        this.entityExcess += 1;
        this.trieIndex = (0, decode_js_12.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c7);
        if (this.trieIndex < 0) {
          this.emitNamedEntity();
          this.index--;
          return;
        }
        this.trieCurrent = this.entityTrie[this.trieIndex];
        var masked = this.trieCurrent & decode_js_12.BinTrieFlags.VALUE_LENGTH;
        if (masked) {
          var valueLength = (masked >> 14) - 1;
          if (!this.allowLegacyEntity() && c7 !== CharCodes.Semi) {
            this.trieIndex += valueLength;
          } else {
            var entityStart = this.index - this.entityExcess + 1;
            if (entityStart > this.sectionStart) {
              this.emitPartial(this.sectionStart, entityStart);
            }
            this.entityResult = this.trieIndex;
            this.trieIndex += valueLength;
            this.entityExcess = 0;
            this.sectionStart = this.index + 1;
            if (valueLength === 0) {
              this.emitNamedEntity();
            }
          }
        }
      };
      Tokenizer3.prototype.emitNamedEntity = function() {
        this.state = this.baseState;
        if (this.entityResult === 0) {
          return;
        }
        var valueLength = (this.entityTrie[this.entityResult] & decode_js_12.BinTrieFlags.VALUE_LENGTH) >> 14;
        switch (valueLength) {
          case 1:
            this.emitCodePoint(this.entityTrie[this.entityResult] & ~decode_js_12.BinTrieFlags.VALUE_LENGTH);
            break;
          case 2:
            this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
            break;
          case 3: {
            this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
            this.emitCodePoint(this.entityTrie[this.entityResult + 2]);
          }
        }
      };
      Tokenizer3.prototype.stateBeforeNumericEntity = function(c7) {
        if ((c7 | 32) === CharCodes.LowerX) {
          this.entityExcess++;
          this.state = State.InHexEntity;
        } else {
          this.state = State.InNumericEntity;
          this.stateInNumericEntity(c7);
        }
      };
      Tokenizer3.prototype.emitNumericEntity = function(strict) {
        var entityStart = this.index - this.entityExcess - 1;
        var numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);
        if (numberStart !== this.index) {
          if (entityStart > this.sectionStart) {
            this.emitPartial(this.sectionStart, entityStart);
          }
          this.sectionStart = this.index + Number(strict);
          this.emitCodePoint((0, decode_js_12.replaceCodePoint)(this.entityResult));
        }
        this.state = this.baseState;
      };
      Tokenizer3.prototype.stateInNumericEntity = function(c7) {
        if (c7 === CharCodes.Semi) {
          this.emitNumericEntity(true);
        } else if (isNumber(c7)) {
          this.entityResult = this.entityResult * 10 + (c7 - CharCodes.Zero);
          this.entityExcess++;
        } else {
          if (this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
          } else {
            this.state = this.baseState;
          }
          this.index--;
        }
      };
      Tokenizer3.prototype.stateInHexEntity = function(c7) {
        if (c7 === CharCodes.Semi) {
          this.emitNumericEntity(true);
        } else if (isNumber(c7)) {
          this.entityResult = this.entityResult * 16 + (c7 - CharCodes.Zero);
          this.entityExcess++;
        } else if (isHexDigit(c7)) {
          this.entityResult = this.entityResult * 16 + ((c7 | 32) - CharCodes.LowerA + 10);
          this.entityExcess++;
        } else {
          if (this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
          } else {
            this.state = this.baseState;
          }
          this.index--;
        }
      };
      Tokenizer3.prototype.allowLegacyEntity = function() {
        return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);
      };
      Tokenizer3.prototype.cleanup = function() {
        if (this.running && this.sectionStart !== this.index) {
          if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {
            this.cbs.ontext(this.sectionStart, this.index);
            this.sectionStart = this.index;
          } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = this.index;
          }
        }
      };
      Tokenizer3.prototype.shouldContinue = function() {
        return this.index < this.buffer.length + this.offset && this.running;
      };
      Tokenizer3.prototype.parse = function() {
        while (this.shouldContinue()) {
          var c7 = this.buffer.charCodeAt(this.index - this.offset);
          if (this.state === State.Text) {
            this.stateText(c7);
          } else if (this.state === State.SpecialStartSequence) {
            this.stateSpecialStartSequence(c7);
          } else if (this.state === State.InSpecialTag) {
            this.stateInSpecialTag(c7);
          } else if (this.state === State.CDATASequence) {
            this.stateCDATASequence(c7);
          } else if (this.state === State.InAttributeValueDq) {
            this.stateInAttributeValueDoubleQuotes(c7);
          } else if (this.state === State.InAttributeName) {
            this.stateInAttributeName(c7);
          } else if (this.state === State.InCommentLike) {
            this.stateInCommentLike(c7);
          } else if (this.state === State.InSpecialComment) {
            this.stateInSpecialComment(c7);
          } else if (this.state === State.BeforeAttributeName) {
            this.stateBeforeAttributeName(c7);
          } else if (this.state === State.InTagName) {
            this.stateInTagName(c7);
          } else if (this.state === State.InClosingTagName) {
            this.stateInClosingTagName(c7);
          } else if (this.state === State.BeforeTagName) {
            this.stateBeforeTagName(c7);
          } else if (this.state === State.AfterAttributeName) {
            this.stateAfterAttributeName(c7);
          } else if (this.state === State.InAttributeValueSq) {
            this.stateInAttributeValueSingleQuotes(c7);
          } else if (this.state === State.BeforeAttributeValue) {
            this.stateBeforeAttributeValue(c7);
          } else if (this.state === State.BeforeClosingTagName) {
            this.stateBeforeClosingTagName(c7);
          } else if (this.state === State.AfterClosingTagName) {
            this.stateAfterClosingTagName(c7);
          } else if (this.state === State.BeforeSpecialS) {
            this.stateBeforeSpecialS(c7);
          } else if (this.state === State.InAttributeValueNq) {
            this.stateInAttributeValueNoQuotes(c7);
          } else if (this.state === State.InSelfClosingTag) {
            this.stateInSelfClosingTag(c7);
          } else if (this.state === State.InDeclaration) {
            this.stateInDeclaration(c7);
          } else if (this.state === State.BeforeDeclaration) {
            this.stateBeforeDeclaration(c7);
          } else if (this.state === State.BeforeComment) {
            this.stateBeforeComment(c7);
          } else if (this.state === State.InProcessingInstruction) {
            this.stateInProcessingInstruction(c7);
          } else if (this.state === State.InNamedEntity) {
            this.stateInNamedEntity(c7);
          } else if (this.state === State.BeforeEntity) {
            this.stateBeforeEntity(c7);
          } else if (this.state === State.InHexEntity) {
            this.stateInHexEntity(c7);
          } else if (this.state === State.InNumericEntity) {
            this.stateInNumericEntity(c7);
          } else {
            this.stateBeforeNumericEntity(c7);
          }
          this.index++;
        }
        this.cleanup();
      };
      Tokenizer3.prototype.finish = function() {
        if (this.state === State.InNamedEntity) {
          this.emitNamedEntity();
        }
        if (this.sectionStart < this.index) {
          this.handleTrailingData();
        }
        this.cbs.onend();
      };
      Tokenizer3.prototype.handleTrailingData = function() {
        var endIndex = this.buffer.length + this.offset;
        if (this.state === State.InCommentLike) {
          if (this.currentSequence === Sequences.CdataEnd) {
            this.cbs.oncdata(this.sectionStart, endIndex, 0);
          } else {
            this.cbs.oncomment(this.sectionStart, endIndex, 0);
          }
        } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {
          this.emitNumericEntity(false);
        } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {
          this.emitNumericEntity(false);
        } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName)
          ;
        else {
          this.cbs.ontext(this.sectionStart, endIndex);
        }
      };
      Tokenizer3.prototype.emitPartial = function(start2, endIndex) {
        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
          this.cbs.onattribdata(start2, endIndex);
        } else {
          this.cbs.ontext(start2, endIndex);
        }
      };
      Tokenizer3.prototype.emitCodePoint = function(cp) {
        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
          this.cbs.onattribentity(cp);
        } else {
          this.cbs.ontextentity(cp);
        }
      };
      return Tokenizer3;
    }()
  );
  exports2.default = Tokenizer2;
})(Tokenizer);
var __createBinding$1 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m4, k3, k22) {
  if (k22 === void 0)
    k22 = k3;
  var desc = Object.getOwnPropertyDescriptor(m4, k3);
  if (!desc || ("get" in desc ? !m4.__esModule : desc.writable || desc.configurable)) {
    desc = { enumerable: true, get: function() {
      return m4[k3];
    } };
  }
  Object.defineProperty(o2, k22, desc);
} : function(o2, m4, k3, k22) {
  if (k22 === void 0)
    k22 = k3;
  o2[k22] = m4[k3];
});
var __setModuleDefault$1 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
  Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
} : function(o2, v2) {
  o2["default"] = v2;
});
var __importStar$1 = commonjsGlobal && commonjsGlobal.__importStar || function(mod2) {
  if (mod2 && mod2.__esModule)
    return mod2;
  var result2 = {};
  if (mod2 != null) {
    for (var k3 in mod2)
      if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k3))
        __createBinding$1(result2, mod2, k3);
  }
  __setModuleDefault$1(result2, mod2);
  return result2;
};
Object.defineProperty(Parser$3, "__esModule", { value: true });
Parser$3.Parser = void 0;
var Tokenizer_js_1 = __importStar$1(Tokenizer);
var decode_js_1 = decode$1;
var formTags = /* @__PURE__ */ new Set([
  "input",
  "option",
  "optgroup",
  "select",
  "button",
  "datalist",
  "textarea"
]);
var pTag = /* @__PURE__ */ new Set(["p"]);
var tableSectionTags = /* @__PURE__ */ new Set(["thead", "tbody"]);
var ddtTags = /* @__PURE__ */ new Set(["dd", "dt"]);
var rtpTags = /* @__PURE__ */ new Set(["rt", "rp"]);
var openImpliesClose = /* @__PURE__ */ new Map([
  ["tr", /* @__PURE__ */ new Set(["tr", "th", "td"])],
  ["th", /* @__PURE__ */ new Set(["th"])],
  ["td", /* @__PURE__ */ new Set(["thead", "th", "td"])],
  ["body", /* @__PURE__ */ new Set(["head", "link", "script"])],
  ["li", /* @__PURE__ */ new Set(["li"])],
  ["p", pTag],
  ["h1", pTag],
  ["h2", pTag],
  ["h3", pTag],
  ["h4", pTag],
  ["h5", pTag],
  ["h6", pTag],
  ["select", formTags],
  ["input", formTags],
  ["output", formTags],
  ["button", formTags],
  ["datalist", formTags],
  ["textarea", formTags],
  ["option", /* @__PURE__ */ new Set(["option"])],
  ["optgroup", /* @__PURE__ */ new Set(["optgroup", "option"])],
  ["dd", ddtTags],
  ["dt", ddtTags],
  ["address", pTag],
  ["article", pTag],
  ["aside", pTag],
  ["blockquote", pTag],
  ["details", pTag],
  ["div", pTag],
  ["dl", pTag],
  ["fieldset", pTag],
  ["figcaption", pTag],
  ["figure", pTag],
  ["footer", pTag],
  ["form", pTag],
  ["header", pTag],
  ["hr", pTag],
  ["main", pTag],
  ["nav", pTag],
  ["ol", pTag],
  ["pre", pTag],
  ["section", pTag],
  ["table", pTag],
  ["ul", pTag],
  ["rt", rtpTags],
  ["rp", rtpTags],
  ["tbody", tableSectionTags],
  ["tfoot", tableSectionTags]
]);
var voidElements = /* @__PURE__ */ new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
var htmlIntegrationElements = /* @__PURE__ */ new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignobject",
  "desc",
  "title"
]);
var reNameEnd = /\s|\//;
var Parser$2 = (
  /** @class */
  function() {
    function Parser3(cbs, options) {
      if (options === void 0) {
        options = {};
      }
      var _a2, _b2, _c2, _d2, _e3;
      this.options = options;
      this.startIndex = 0;
      this.endIndex = 0;
      this.openTagStart = 0;
      this.tagname = "";
      this.attribname = "";
      this.attribvalue = "";
      this.attribs = null;
      this.stack = [];
      this.foreignContext = [];
      this.buffers = [];
      this.bufferOffset = 0;
      this.writeIndex = 0;
      this.ended = false;
      this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
      this.lowerCaseTagNames = (_a2 = options.lowerCaseTags) !== null && _a2 !== void 0 ? _a2 : !options.xmlMode;
      this.lowerCaseAttributeNames = (_b2 = options.lowerCaseAttributeNames) !== null && _b2 !== void 0 ? _b2 : !options.xmlMode;
      this.tokenizer = new ((_c2 = options.Tokenizer) !== null && _c2 !== void 0 ? _c2 : Tokenizer_js_1.default)(this.options, this);
      (_e3 = (_d2 = this.cbs).onparserinit) === null || _e3 === void 0 ? void 0 : _e3.call(_d2, this);
    }
    Parser3.prototype.ontext = function(start2, endIndex) {
      var _a2, _b2;
      var data2 = this.getSlice(start2, endIndex);
      this.endIndex = endIndex - 1;
      (_b2 = (_a2 = this.cbs).ontext) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, data2);
      this.startIndex = endIndex;
    };
    Parser3.prototype.ontextentity = function(cp) {
      var _a2, _b2;
      var idx = this.tokenizer.getSectionStart();
      this.endIndex = idx - 1;
      (_b2 = (_a2 = this.cbs).ontext) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, (0, decode_js_1.fromCodePoint)(cp));
      this.startIndex = idx;
    };
    Parser3.prototype.isVoidElement = function(name2) {
      return !this.options.xmlMode && voidElements.has(name2);
    };
    Parser3.prototype.onopentagname = function(start2, endIndex) {
      this.endIndex = endIndex;
      var name2 = this.getSlice(start2, endIndex);
      if (this.lowerCaseTagNames) {
        name2 = name2.toLowerCase();
      }
      this.emitOpenTag(name2);
    };
    Parser3.prototype.emitOpenTag = function(name2) {
      var _a2, _b2, _c2, _d2;
      this.openTagStart = this.startIndex;
      this.tagname = name2;
      var impliesClose = !this.options.xmlMode && openImpliesClose.get(name2);
      if (impliesClose) {
        while (this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])) {
          var el = this.stack.pop();
          (_b2 = (_a2 = this.cbs).onclosetag) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, el, true);
        }
      }
      if (!this.isVoidElement(name2)) {
        this.stack.push(name2);
        if (foreignContextElements.has(name2)) {
          this.foreignContext.push(true);
        } else if (htmlIntegrationElements.has(name2)) {
          this.foreignContext.push(false);
        }
      }
      (_d2 = (_c2 = this.cbs).onopentagname) === null || _d2 === void 0 ? void 0 : _d2.call(_c2, name2);
      if (this.cbs.onopentag)
        this.attribs = {};
    };
    Parser3.prototype.endOpenTag = function(isImplied) {
      var _a2, _b2;
      this.startIndex = this.openTagStart;
      if (this.attribs) {
        (_b2 = (_a2 = this.cbs).onopentag) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, this.tagname, this.attribs, isImplied);
        this.attribs = null;
      }
      if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
        this.cbs.onclosetag(this.tagname, true);
      }
      this.tagname = "";
    };
    Parser3.prototype.onopentagend = function(endIndex) {
      this.endIndex = endIndex;
      this.endOpenTag(false);
      this.startIndex = endIndex + 1;
    };
    Parser3.prototype.onclosetag = function(start2, endIndex) {
      var _a2, _b2, _c2, _d2, _e3, _f;
      this.endIndex = endIndex;
      var name2 = this.getSlice(start2, endIndex);
      if (this.lowerCaseTagNames) {
        name2 = name2.toLowerCase();
      }
      if (foreignContextElements.has(name2) || htmlIntegrationElements.has(name2)) {
        this.foreignContext.pop();
      }
      if (!this.isVoidElement(name2)) {
        var pos = this.stack.lastIndexOf(name2);
        if (pos !== -1) {
          if (this.cbs.onclosetag) {
            var count = this.stack.length - pos;
            while (count--) {
              this.cbs.onclosetag(this.stack.pop(), count !== 0);
            }
          } else
            this.stack.length = pos;
        } else if (!this.options.xmlMode && name2 === "p") {
          this.emitOpenTag("p");
          this.closeCurrentTag(true);
        }
      } else if (!this.options.xmlMode && name2 === "br") {
        (_b2 = (_a2 = this.cbs).onopentagname) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, "br");
        (_d2 = (_c2 = this.cbs).onopentag) === null || _d2 === void 0 ? void 0 : _d2.call(_c2, "br", {}, true);
        (_f = (_e3 = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e3, "br", false);
      }
      this.startIndex = endIndex + 1;
    };
    Parser3.prototype.onselfclosingtag = function(endIndex) {
      this.endIndex = endIndex;
      if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
        this.closeCurrentTag(false);
        this.startIndex = endIndex + 1;
      } else {
        this.onopentagend(endIndex);
      }
    };
    Parser3.prototype.closeCurrentTag = function(isOpenImplied) {
      var _a2, _b2;
      var name2 = this.tagname;
      this.endOpenTag(isOpenImplied);
      if (this.stack[this.stack.length - 1] === name2) {
        (_b2 = (_a2 = this.cbs).onclosetag) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, name2, !isOpenImplied);
        this.stack.pop();
      }
    };
    Parser3.prototype.onattribname = function(start2, endIndex) {
      this.startIndex = start2;
      var name2 = this.getSlice(start2, endIndex);
      this.attribname = this.lowerCaseAttributeNames ? name2.toLowerCase() : name2;
    };
    Parser3.prototype.onattribdata = function(start2, endIndex) {
      this.attribvalue += this.getSlice(start2, endIndex);
    };
    Parser3.prototype.onattribentity = function(cp) {
      this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);
    };
    Parser3.prototype.onattribend = function(quote, endIndex) {
      var _a2, _b2;
      this.endIndex = endIndex;
      (_b2 = (_a2 = this.cbs).onattribute) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '"' : quote === Tokenizer_js_1.QuoteType.Single ? "'" : quote === Tokenizer_js_1.QuoteType.NoValue ? void 0 : null);
      if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
        this.attribs[this.attribname] = this.attribvalue;
      }
      this.attribvalue = "";
    };
    Parser3.prototype.getInstructionName = function(value2) {
      var idx = value2.search(reNameEnd);
      var name2 = idx < 0 ? value2 : value2.substr(0, idx);
      if (this.lowerCaseTagNames) {
        name2 = name2.toLowerCase();
      }
      return name2;
    };
    Parser3.prototype.ondeclaration = function(start2, endIndex) {
      this.endIndex = endIndex;
      var value2 = this.getSlice(start2, endIndex);
      if (this.cbs.onprocessinginstruction) {
        var name2 = this.getInstructionName(value2);
        this.cbs.onprocessinginstruction("!".concat(name2), "!".concat(value2));
      }
      this.startIndex = endIndex + 1;
    };
    Parser3.prototype.onprocessinginstruction = function(start2, endIndex) {
      this.endIndex = endIndex;
      var value2 = this.getSlice(start2, endIndex);
      if (this.cbs.onprocessinginstruction) {
        var name2 = this.getInstructionName(value2);
        this.cbs.onprocessinginstruction("?".concat(name2), "?".concat(value2));
      }
      this.startIndex = endIndex + 1;
    };
    Parser3.prototype.oncomment = function(start2, endIndex, offset) {
      var _a2, _b2, _c2, _d2;
      this.endIndex = endIndex;
      (_b2 = (_a2 = this.cbs).oncomment) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, this.getSlice(start2, endIndex - offset));
      (_d2 = (_c2 = this.cbs).oncommentend) === null || _d2 === void 0 ? void 0 : _d2.call(_c2);
      this.startIndex = endIndex + 1;
    };
    Parser3.prototype.oncdata = function(start2, endIndex, offset) {
      var _a2, _b2, _c2, _d2, _e3, _f, _g, _h, _j, _k;
      this.endIndex = endIndex;
      var value2 = this.getSlice(start2, endIndex - offset);
      if (this.options.xmlMode || this.options.recognizeCDATA) {
        (_b2 = (_a2 = this.cbs).oncdatastart) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
        (_d2 = (_c2 = this.cbs).ontext) === null || _d2 === void 0 ? void 0 : _d2.call(_c2, value2);
        (_f = (_e3 = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e3);
      } else {
        (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, "[CDATA[".concat(value2, "]]"));
        (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
      }
      this.startIndex = endIndex + 1;
    };
    Parser3.prototype.onend = function() {
      var _a2, _b2;
      if (this.cbs.onclosetag) {
        this.endIndex = this.startIndex;
        for (var i3 = this.stack.length; i3 > 0; this.cbs.onclosetag(this.stack[--i3], true))
          ;
      }
      (_b2 = (_a2 = this.cbs).onend) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
    };
    Parser3.prototype.reset = function() {
      var _a2, _b2, _c2, _d2;
      (_b2 = (_a2 = this.cbs).onreset) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
      this.tokenizer.reset();
      this.tagname = "";
      this.attribname = "";
      this.attribs = null;
      this.stack.length = 0;
      this.startIndex = 0;
      this.endIndex = 0;
      (_d2 = (_c2 = this.cbs).onparserinit) === null || _d2 === void 0 ? void 0 : _d2.call(_c2, this);
      this.buffers.length = 0;
      this.bufferOffset = 0;
      this.writeIndex = 0;
      this.ended = false;
    };
    Parser3.prototype.parseComplete = function(data2) {
      this.reset();
      this.end(data2);
    };
    Parser3.prototype.getSlice = function(start2, end) {
      while (start2 - this.bufferOffset >= this.buffers[0].length) {
        this.shiftBuffer();
      }
      var str = this.buffers[0].slice(start2 - this.bufferOffset, end - this.bufferOffset);
      while (end - this.bufferOffset > this.buffers[0].length) {
        this.shiftBuffer();
        str += this.buffers[0].slice(0, end - this.bufferOffset);
      }
      return str;
    };
    Parser3.prototype.shiftBuffer = function() {
      this.bufferOffset += this.buffers[0].length;
      this.writeIndex--;
      this.buffers.shift();
    };
    Parser3.prototype.write = function(chunk) {
      var _a2, _b2;
      if (this.ended) {
        (_b2 = (_a2 = this.cbs).onerror) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, new Error(".write() after done!"));
        return;
      }
      this.buffers.push(chunk);
      if (this.tokenizer.running) {
        this.tokenizer.write(chunk);
        this.writeIndex++;
      }
    };
    Parser3.prototype.end = function(chunk) {
      var _a2, _b2;
      if (this.ended) {
        (_b2 = (_a2 = this.cbs).onerror) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, Error(".end() after done!"));
        return;
      }
      if (chunk)
        this.write(chunk);
      this.ended = true;
      this.tokenizer.end();
    };
    Parser3.prototype.pause = function() {
      this.tokenizer.pause();
    };
    Parser3.prototype.resume = function() {
      this.tokenizer.resume();
      while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
        this.tokenizer.write(this.buffers[this.writeIndex++]);
      }
      if (this.ended)
        this.tokenizer.end();
    };
    Parser3.prototype.parseChunk = function(chunk) {
      this.write(chunk);
    };
    Parser3.prototype.done = function(chunk) {
      this.end(chunk);
    };
    return Parser3;
  }()
);
Parser$3.Parser = Parser$2;
var lib$5 = {};
var lib$4 = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.Doctype = exports2.CDATA = exports2.Tag = exports2.Style = exports2.Script = exports2.Comment = exports2.Directive = exports2.Text = exports2.Root = exports2.isTag = exports2.ElementType = void 0;
  var ElementType2;
  (function(ElementType3) {
    ElementType3["Root"] = "root";
    ElementType3["Text"] = "text";
    ElementType3["Directive"] = "directive";
    ElementType3["Comment"] = "comment";
    ElementType3["Script"] = "script";
    ElementType3["Style"] = "style";
    ElementType3["Tag"] = "tag";
    ElementType3["CDATA"] = "cdata";
    ElementType3["Doctype"] = "doctype";
  })(ElementType2 = exports2.ElementType || (exports2.ElementType = {}));
  function isTag2(elem2) {
    return elem2.type === ElementType2.Tag || elem2.type === ElementType2.Script || elem2.type === ElementType2.Style;
  }
  exports2.isTag = isTag2;
  exports2.Root = ElementType2.Root;
  exports2.Text = ElementType2.Text;
  exports2.Directive = ElementType2.Directive;
  exports2.Comment = ElementType2.Comment;
  exports2.Script = ElementType2.Script;
  exports2.Style = ElementType2.Style;
  exports2.Tag = ElementType2.Tag;
  exports2.CDATA = ElementType2.CDATA;
  exports2.Doctype = ElementType2.Doctype;
})(lib$4);
var node$1 = {};
var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics = function(d4, b3) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d5, b4) {
      d5.__proto__ = b4;
    } || function(d5, b4) {
      for (var p2 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p2))
          d5[p2] = b4[p2];
    };
    return extendStatics(d4, b3);
  };
  return function(d4, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics(d4, b3);
    function __() {
      this.constructor = d4;
    }
    d4.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  };
}();
var __assign$1 = commonjsGlobal && commonjsGlobal.__assign || function() {
  __assign$1 = Object.assign || function(t3) {
    for (var s4, i3 = 1, n2 = arguments.length; i3 < n2; i3++) {
      s4 = arguments[i3];
      for (var p2 in s4)
        if (Object.prototype.hasOwnProperty.call(s4, p2))
          t3[p2] = s4[p2];
    }
    return t3;
  };
  return __assign$1.apply(this, arguments);
};
Object.defineProperty(node$1, "__esModule", { value: true });
node$1.cloneNode = node$1.hasChildren = node$1.isDocument = node$1.isDirective = node$1.isComment = node$1.isText = node$1.isCDATA = node$1.isTag = node$1.Element = node$1.Document = node$1.CDATA = node$1.NodeWithChildren = node$1.ProcessingInstruction = node$1.Comment = node$1.Text = node$1.DataNode = node$1.Node = void 0;
var domelementtype_1$1 = lib$4;
var Node$5 = (
  /** @class */
  function() {
    function Node3() {
      this.parent = null;
      this.prev = null;
      this.next = null;
      this.startIndex = null;
      this.endIndex = null;
    }
    Object.defineProperty(Node3.prototype, "parentNode", {
      // Read-write aliases for properties
      /**
       * Same as {@link parent}.
       * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
       */
      get: function() {
        return this.parent;
      },
      set: function(parent2) {
        this.parent = parent2;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Node3.prototype, "previousSibling", {
      /**
       * Same as {@link prev}.
       * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
       */
      get: function() {
        return this.prev;
      },
      set: function(prev2) {
        this.prev = prev2;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Node3.prototype, "nextSibling", {
      /**
       * Same as {@link next}.
       * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
       */
      get: function() {
        return this.next;
      },
      set: function(next2) {
        this.next = next2;
      },
      enumerable: false,
      configurable: true
    });
    Node3.prototype.cloneNode = function(recursive) {
      if (recursive === void 0) {
        recursive = false;
      }
      return cloneNode$1(this, recursive);
    };
    return Node3;
  }()
);
node$1.Node = Node$5;
var DataNode = (
  /** @class */
  function(_super) {
    __extends(DataNode2, _super);
    function DataNode2(data2) {
      var _this = _super.call(this) || this;
      _this.data = data2;
      return _this;
    }
    Object.defineProperty(DataNode2.prototype, "nodeValue", {
      /**
       * Same as {@link data}.
       * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
       */
      get: function() {
        return this.data;
      },
      set: function(data2) {
        this.data = data2;
      },
      enumerable: false,
      configurable: true
    });
    return DataNode2;
  }(Node$5)
);
node$1.DataNode = DataNode;
var Text = (
  /** @class */
  function(_super) {
    __extends(Text2, _super);
    function Text2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.type = domelementtype_1$1.ElementType.Text;
      return _this;
    }
    Object.defineProperty(Text2.prototype, "nodeType", {
      get: function() {
        return 3;
      },
      enumerable: false,
      configurable: true
    });
    return Text2;
  }(DataNode)
);
node$1.Text = Text;
var Comment$5 = (
  /** @class */
  function(_super) {
    __extends(Comment3, _super);
    function Comment3() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.type = domelementtype_1$1.ElementType.Comment;
      return _this;
    }
    Object.defineProperty(Comment3.prototype, "nodeType", {
      get: function() {
        return 8;
      },
      enumerable: false,
      configurable: true
    });
    return Comment3;
  }(DataNode)
);
node$1.Comment = Comment$5;
var ProcessingInstruction = (
  /** @class */
  function(_super) {
    __extends(ProcessingInstruction2, _super);
    function ProcessingInstruction2(name2, data2) {
      var _this = _super.call(this, data2) || this;
      _this.name = name2;
      _this.type = domelementtype_1$1.ElementType.Directive;
      return _this;
    }
    Object.defineProperty(ProcessingInstruction2.prototype, "nodeType", {
      get: function() {
        return 1;
      },
      enumerable: false,
      configurable: true
    });
    return ProcessingInstruction2;
  }(DataNode)
);
node$1.ProcessingInstruction = ProcessingInstruction;
var NodeWithChildren = (
  /** @class */
  function(_super) {
    __extends(NodeWithChildren2, _super);
    function NodeWithChildren2(children) {
      var _this = _super.call(this) || this;
      _this.children = children;
      return _this;
    }
    Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
      // Aliases
      /** First child of the node. */
      get: function() {
        var _a2;
        return (_a2 = this.children[0]) !== null && _a2 !== void 0 ? _a2 : null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
      /** Last child of the node. */
      get: function() {
        return this.children.length > 0 ? this.children[this.children.length - 1] : null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
      /**
       * Same as {@link children}.
       * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
       */
      get: function() {
        return this.children;
      },
      set: function(children) {
        this.children = children;
      },
      enumerable: false,
      configurable: true
    });
    return NodeWithChildren2;
  }(Node$5)
);
node$1.NodeWithChildren = NodeWithChildren;
var CDATA = (
  /** @class */
  function(_super) {
    __extends(CDATA2, _super);
    function CDATA2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.type = domelementtype_1$1.ElementType.CDATA;
      return _this;
    }
    Object.defineProperty(CDATA2.prototype, "nodeType", {
      get: function() {
        return 4;
      },
      enumerable: false,
      configurable: true
    });
    return CDATA2;
  }(NodeWithChildren)
);
node$1.CDATA = CDATA;
var Document$4 = (
  /** @class */
  function(_super) {
    __extends(Document3, _super);
    function Document3() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.type = domelementtype_1$1.ElementType.Root;
      return _this;
    }
    Object.defineProperty(Document3.prototype, "nodeType", {
      get: function() {
        return 9;
      },
      enumerable: false,
      configurable: true
    });
    return Document3;
  }(NodeWithChildren)
);
node$1.Document = Document$4;
var Element$1 = (
  /** @class */
  function(_super) {
    __extends(Element2, _super);
    function Element2(name2, attribs, children, type) {
      if (children === void 0) {
        children = [];
      }
      if (type === void 0) {
        type = name2 === "script" ? domelementtype_1$1.ElementType.Script : name2 === "style" ? domelementtype_1$1.ElementType.Style : domelementtype_1$1.ElementType.Tag;
      }
      var _this = _super.call(this, children) || this;
      _this.name = name2;
      _this.attribs = attribs;
      _this.type = type;
      return _this;
    }
    Object.defineProperty(Element2.prototype, "nodeType", {
      get: function() {
        return 1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Element2.prototype, "tagName", {
      // DOM Level 1 aliases
      /**
       * Same as {@link name}.
       * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
       */
      get: function() {
        return this.name;
      },
      set: function(name2) {
        this.name = name2;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Element2.prototype, "attributes", {
      get: function() {
        var _this = this;
        return Object.keys(this.attribs).map(function(name2) {
          var _a2, _b2;
          return {
            name: name2,
            value: _this.attribs[name2],
            namespace: (_a2 = _this["x-attribsNamespace"]) === null || _a2 === void 0 ? void 0 : _a2[name2],
            prefix: (_b2 = _this["x-attribsPrefix"]) === null || _b2 === void 0 ? void 0 : _b2[name2]
          };
        });
      },
      enumerable: false,
      configurable: true
    });
    return Element2;
  }(NodeWithChildren)
);
node$1.Element = Element$1;
function isTag(node2) {
  return (0, domelementtype_1$1.isTag)(node2);
}
node$1.isTag = isTag;
function isCDATA(node2) {
  return node2.type === domelementtype_1$1.ElementType.CDATA;
}
node$1.isCDATA = isCDATA;
function isText(node2) {
  return node2.type === domelementtype_1$1.ElementType.Text;
}
node$1.isText = isText;
function isComment(node2) {
  return node2.type === domelementtype_1$1.ElementType.Comment;
}
node$1.isComment = isComment;
function isDirective(node2) {
  return node2.type === domelementtype_1$1.ElementType.Directive;
}
node$1.isDirective = isDirective;
function isDocument(node2) {
  return node2.type === domelementtype_1$1.ElementType.Root;
}
node$1.isDocument = isDocument;
function hasChildren(node2) {
  return Object.prototype.hasOwnProperty.call(node2, "children");
}
node$1.hasChildren = hasChildren;
function cloneNode$1(node2, recursive) {
  if (recursive === void 0) {
    recursive = false;
  }
  var result2;
  if (isText(node2)) {
    result2 = new Text(node2.data);
  } else if (isComment(node2)) {
    result2 = new Comment$5(node2.data);
  } else if (isTag(node2)) {
    var children = recursive ? cloneChildren(node2.children) : [];
    var clone_1 = new Element$1(node2.name, __assign$1({}, node2.attribs), children);
    children.forEach(function(child) {
      return child.parent = clone_1;
    });
    if (node2.namespace != null) {
      clone_1.namespace = node2.namespace;
    }
    if (node2["x-attribsNamespace"]) {
      clone_1["x-attribsNamespace"] = __assign$1({}, node2["x-attribsNamespace"]);
    }
    if (node2["x-attribsPrefix"]) {
      clone_1["x-attribsPrefix"] = __assign$1({}, node2["x-attribsPrefix"]);
    }
    result2 = clone_1;
  } else if (isCDATA(node2)) {
    var children = recursive ? cloneChildren(node2.children) : [];
    var clone_2 = new CDATA(children);
    children.forEach(function(child) {
      return child.parent = clone_2;
    });
    result2 = clone_2;
  } else if (isDocument(node2)) {
    var children = recursive ? cloneChildren(node2.children) : [];
    var clone_3 = new Document$4(children);
    children.forEach(function(child) {
      return child.parent = clone_3;
    });
    if (node2["x-mode"]) {
      clone_3["x-mode"] = node2["x-mode"];
    }
    result2 = clone_3;
  } else if (isDirective(node2)) {
    var instruction = new ProcessingInstruction(node2.name, node2.data);
    if (node2["x-name"] != null) {
      instruction["x-name"] = node2["x-name"];
      instruction["x-publicId"] = node2["x-publicId"];
      instruction["x-systemId"] = node2["x-systemId"];
    }
    result2 = instruction;
  } else {
    throw new Error("Not implemented yet: ".concat(node2.type));
  }
  result2.startIndex = node2.startIndex;
  result2.endIndex = node2.endIndex;
  if (node2.sourceCodeLocation != null) {
    result2.sourceCodeLocation = node2.sourceCodeLocation;
  }
  return result2;
}
node$1.cloneNode = cloneNode$1;
function cloneChildren(childs) {
  var children = childs.map(function(child) {
    return cloneNode$1(child, true);
  });
  for (var i3 = 1; i3 < children.length; i3++) {
    children[i3].prev = children[i3 - 1];
    children[i3 - 1].next = children[i3];
  }
  return children;
}
(function(exports2) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m4, k3, k22) {
    if (k22 === void 0)
      k22 = k3;
    var desc = Object.getOwnPropertyDescriptor(m4, k3);
    if (!desc || ("get" in desc ? !m4.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m4[k3];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m4, k3, k22) {
    if (k22 === void 0)
      k22 = k3;
    o2[k22] = m4[k3];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m4, exports3) {
    for (var p2 in m4)
      if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p2))
        __createBinding2(exports3, m4, p2);
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.DomHandler = void 0;
  var domelementtype_12 = lib$4;
  var node_js_1 = node$1;
  __exportStar(node$1, exports2);
  var defaultOpts = {
    withStartIndices: false,
    withEndIndices: false,
    xmlMode: false
  };
  var DomHandler = (
    /** @class */
    function() {
      function DomHandler2(callback, options, elementCB) {
        this.dom = [];
        this.root = new node_js_1.Document(this.dom);
        this.done = false;
        this.tagStack = [this.root];
        this.lastNode = null;
        this.parser = null;
        if (typeof options === "function") {
          elementCB = options;
          options = defaultOpts;
        }
        if (typeof callback === "object") {
          options = callback;
          callback = void 0;
        }
        this.callback = callback !== null && callback !== void 0 ? callback : null;
        this.options = options !== null && options !== void 0 ? options : defaultOpts;
        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
      }
      DomHandler2.prototype.onparserinit = function(parser2) {
        this.parser = parser2;
      };
      DomHandler2.prototype.onreset = function() {
        this.dom = [];
        this.root = new node_js_1.Document(this.dom);
        this.done = false;
        this.tagStack = [this.root];
        this.lastNode = null;
        this.parser = null;
      };
      DomHandler2.prototype.onend = function() {
        if (this.done)
          return;
        this.done = true;
        this.parser = null;
        this.handleCallback(null);
      };
      DomHandler2.prototype.onerror = function(error) {
        this.handleCallback(error);
      };
      DomHandler2.prototype.onclosetag = function() {
        this.lastNode = null;
        var elem2 = this.tagStack.pop();
        if (this.options.withEndIndices) {
          elem2.endIndex = this.parser.endIndex;
        }
        if (this.elementCB)
          this.elementCB(elem2);
      };
      DomHandler2.prototype.onopentag = function(name2, attribs) {
        var type = this.options.xmlMode ? domelementtype_12.ElementType.Tag : void 0;
        var element = new node_js_1.Element(name2, attribs, void 0, type);
        this.addNode(element);
        this.tagStack.push(element);
      };
      DomHandler2.prototype.ontext = function(data2) {
        var lastNode = this.lastNode;
        if (lastNode && lastNode.type === domelementtype_12.ElementType.Text) {
          lastNode.data += data2;
          if (this.options.withEndIndices) {
            lastNode.endIndex = this.parser.endIndex;
          }
        } else {
          var node2 = new node_js_1.Text(data2);
          this.addNode(node2);
          this.lastNode = node2;
        }
      };
      DomHandler2.prototype.oncomment = function(data2) {
        if (this.lastNode && this.lastNode.type === domelementtype_12.ElementType.Comment) {
          this.lastNode.data += data2;
          return;
        }
        var node2 = new node_js_1.Comment(data2);
        this.addNode(node2);
        this.lastNode = node2;
      };
      DomHandler2.prototype.oncommentend = function() {
        this.lastNode = null;
      };
      DomHandler2.prototype.oncdatastart = function() {
        var text2 = new node_js_1.Text("");
        var node2 = new node_js_1.CDATA([text2]);
        this.addNode(node2);
        text2.parent = node2;
        this.lastNode = text2;
      };
      DomHandler2.prototype.oncdataend = function() {
        this.lastNode = null;
      };
      DomHandler2.prototype.onprocessinginstruction = function(name2, data2) {
        var node2 = new node_js_1.ProcessingInstruction(name2, data2);
        this.addNode(node2);
      };
      DomHandler2.prototype.handleCallback = function(error) {
        if (typeof this.callback === "function") {
          this.callback(error, this.dom);
        } else if (error) {
          throw error;
        }
      };
      DomHandler2.prototype.addNode = function(node2) {
        var parent2 = this.tagStack[this.tagStack.length - 1];
        var previousSibling = parent2.children[parent2.children.length - 1];
        if (this.options.withStartIndices) {
          node2.startIndex = this.parser.startIndex;
        }
        if (this.options.withEndIndices) {
          node2.endIndex = this.parser.endIndex;
        }
        parent2.children.push(node2);
        if (previousSibling) {
          node2.prev = previousSibling;
          previousSibling.next = node2;
        }
        node2.parent = parent2;
        this.lastNode = null;
      };
      return DomHandler2;
    }()
  );
  exports2.DomHandler = DomHandler;
  exports2.default = DomHandler;
})(lib$5);
var lib$3 = {};
var stringify$5 = {};
var lib$2 = {};
var lib$1 = {};
var encode$1 = {};
var encodeHtml = {};
Object.defineProperty(encodeHtml, "__esModule", { value: true });
function restoreDiff(arr) {
  for (var i3 = 1; i3 < arr.length; i3++) {
    arr[i3][0] += arr[i3 - 1][0] + 1;
  }
  return arr;
}
encodeHtml.default = new Map(/* @__PURE__ */ restoreDiff([[9, "&Tab;"], [0, "&NewLine;"], [22, "&excl;"], [0, "&quot;"], [0, "&num;"], [0, "&dollar;"], [0, "&percnt;"], [0, "&amp;"], [0, "&apos;"], [0, "&lpar;"], [0, "&rpar;"], [0, "&ast;"], [0, "&plus;"], [0, "&comma;"], [1, "&period;"], [0, "&sol;"], [10, "&colon;"], [0, "&semi;"], [0, { v: "&lt;", n: 8402, o: "&nvlt;" }], [0, { v: "&equals;", n: 8421, o: "&bne;" }], [0, { v: "&gt;", n: 8402, o: "&nvgt;" }], [0, "&quest;"], [0, "&commat;"], [26, "&lbrack;"], [0, "&bsol;"], [0, "&rbrack;"], [0, "&Hat;"], [0, "&lowbar;"], [0, "&DiacriticalGrave;"], [5, { n: 106, o: "&fjlig;" }], [20, "&lbrace;"], [0, "&verbar;"], [0, "&rbrace;"], [34, "&nbsp;"], [0, "&iexcl;"], [0, "&cent;"], [0, "&pound;"], [0, "&curren;"], [0, "&yen;"], [0, "&brvbar;"], [0, "&sect;"], [0, "&die;"], [0, "&copy;"], [0, "&ordf;"], [0, "&laquo;"], [0, "&not;"], [0, "&shy;"], [0, "&circledR;"], [0, "&macr;"], [0, "&deg;"], [0, "&PlusMinus;"], [0, "&sup2;"], [0, "&sup3;"], [0, "&acute;"], [0, "&micro;"], [0, "&para;"], [0, "&centerdot;"], [0, "&cedil;"], [0, "&sup1;"], [0, "&ordm;"], [0, "&raquo;"], [0, "&frac14;"], [0, "&frac12;"], [0, "&frac34;"], [0, "&iquest;"], [0, "&Agrave;"], [0, "&Aacute;"], [0, "&Acirc;"], [0, "&Atilde;"], [0, "&Auml;"], [0, "&angst;"], [0, "&AElig;"], [0, "&Ccedil;"], [0, "&Egrave;"], [0, "&Eacute;"], [0, "&Ecirc;"], [0, "&Euml;"], [0, "&Igrave;"], [0, "&Iacute;"], [0, "&Icirc;"], [0, "&Iuml;"], [0, "&ETH;"], [0, "&Ntilde;"], [0, "&Ograve;"], [0, "&Oacute;"], [0, "&Ocirc;"], [0, "&Otilde;"], [0, "&Ouml;"], [0, "&times;"], [0, "&Oslash;"], [0, "&Ugrave;"], [0, "&Uacute;"], [0, "&Ucirc;"], [0, "&Uuml;"], [0, "&Yacute;"], [0, "&THORN;"], [0, "&szlig;"], [0, "&agrave;"], [0, "&aacute;"], [0, "&acirc;"], [0, "&atilde;"], [0, "&auml;"], [0, "&aring;"], [0, "&aelig;"], [0, "&ccedil;"], [0, "&egrave;"], [0, "&eacute;"], [0, "&ecirc;"], [0, "&euml;"], [0, "&igrave;"], [0, "&iacute;"], [0, "&icirc;"], [0, "&iuml;"], [0, "&eth;"], [0, "&ntilde;"], [0, "&ograve;"], [0, "&oacute;"], [0, "&ocirc;"], [0, "&otilde;"], [0, "&ouml;"], [0, "&div;"], [0, "&oslash;"], [0, "&ugrave;"], [0, "&uacute;"], [0, "&ucirc;"], [0, "&uuml;"], [0, "&yacute;"], [0, "&thorn;"], [0, "&yuml;"], [0, "&Amacr;"], [0, "&amacr;"], [0, "&Abreve;"], [0, "&abreve;"], [0, "&Aogon;"], [0, "&aogon;"], [0, "&Cacute;"], [0, "&cacute;"], [0, "&Ccirc;"], [0, "&ccirc;"], [0, "&Cdot;"], [0, "&cdot;"], [0, "&Ccaron;"], [0, "&ccaron;"], [0, "&Dcaron;"], [0, "&dcaron;"], [0, "&Dstrok;"], [0, "&dstrok;"], [0, "&Emacr;"], [0, "&emacr;"], [2, "&Edot;"], [0, "&edot;"], [0, "&Eogon;"], [0, "&eogon;"], [0, "&Ecaron;"], [0, "&ecaron;"], [0, "&Gcirc;"], [0, "&gcirc;"], [0, "&Gbreve;"], [0, "&gbreve;"], [0, "&Gdot;"], [0, "&gdot;"], [0, "&Gcedil;"], [1, "&Hcirc;"], [0, "&hcirc;"], [0, "&Hstrok;"], [0, "&hstrok;"], [0, "&Itilde;"], [0, "&itilde;"], [0, "&Imacr;"], [0, "&imacr;"], [2, "&Iogon;"], [0, "&iogon;"], [0, "&Idot;"], [0, "&imath;"], [0, "&IJlig;"], [0, "&ijlig;"], [0, "&Jcirc;"], [0, "&jcirc;"], [0, "&Kcedil;"], [0, "&kcedil;"], [0, "&kgreen;"], [0, "&Lacute;"], [0, "&lacute;"], [0, "&Lcedil;"], [0, "&lcedil;"], [0, "&Lcaron;"], [0, "&lcaron;"], [0, "&Lmidot;"], [0, "&lmidot;"], [0, "&Lstrok;"], [0, "&lstrok;"], [0, "&Nacute;"], [0, "&nacute;"], [0, "&Ncedil;"], [0, "&ncedil;"], [0, "&Ncaron;"], [0, "&ncaron;"], [0, "&napos;"], [0, "&ENG;"], [0, "&eng;"], [0, "&Omacr;"], [0, "&omacr;"], [2, "&Odblac;"], [0, "&odblac;"], [0, "&OElig;"], [0, "&oelig;"], [0, "&Racute;"], [0, "&racute;"], [0, "&Rcedil;"], [0, "&rcedil;"], [0, "&Rcaron;"], [0, "&rcaron;"], [0, "&Sacute;"], [0, "&sacute;"], [0, "&Scirc;"], [0, "&scirc;"], [0, "&Scedil;"], [0, "&scedil;"], [0, "&Scaron;"], [0, "&scaron;"], [0, "&Tcedil;"], [0, "&tcedil;"], [0, "&Tcaron;"], [0, "&tcaron;"], [0, "&Tstrok;"], [0, "&tstrok;"], [0, "&Utilde;"], [0, "&utilde;"], [0, "&Umacr;"], [0, "&umacr;"], [0, "&Ubreve;"], [0, "&ubreve;"], [0, "&Uring;"], [0, "&uring;"], [0, "&Udblac;"], [0, "&udblac;"], [0, "&Uogon;"], [0, "&uogon;"], [0, "&Wcirc;"], [0, "&wcirc;"], [0, "&Ycirc;"], [0, "&ycirc;"], [0, "&Yuml;"], [0, "&Zacute;"], [0, "&zacute;"], [0, "&Zdot;"], [0, "&zdot;"], [0, "&Zcaron;"], [0, "&zcaron;"], [19, "&fnof;"], [34, "&imped;"], [63, "&gacute;"], [65, "&jmath;"], [142, "&circ;"], [0, "&caron;"], [16, "&breve;"], [0, "&DiacriticalDot;"], [0, "&ring;"], [0, "&ogon;"], [0, "&DiacriticalTilde;"], [0, "&dblac;"], [51, "&DownBreve;"], [127, "&Alpha;"], [0, "&Beta;"], [0, "&Gamma;"], [0, "&Delta;"], [0, "&Epsilon;"], [0, "&Zeta;"], [0, "&Eta;"], [0, "&Theta;"], [0, "&Iota;"], [0, "&Kappa;"], [0, "&Lambda;"], [0, "&Mu;"], [0, "&Nu;"], [0, "&Xi;"], [0, "&Omicron;"], [0, "&Pi;"], [0, "&Rho;"], [1, "&Sigma;"], [0, "&Tau;"], [0, "&Upsilon;"], [0, "&Phi;"], [0, "&Chi;"], [0, "&Psi;"], [0, "&ohm;"], [7, "&alpha;"], [0, "&beta;"], [0, "&gamma;"], [0, "&delta;"], [0, "&epsi;"], [0, "&zeta;"], [0, "&eta;"], [0, "&theta;"], [0, "&iota;"], [0, "&kappa;"], [0, "&lambda;"], [0, "&mu;"], [0, "&nu;"], [0, "&xi;"], [0, "&omicron;"], [0, "&pi;"], [0, "&rho;"], [0, "&sigmaf;"], [0, "&sigma;"], [0, "&tau;"], [0, "&upsi;"], [0, "&phi;"], [0, "&chi;"], [0, "&psi;"], [0, "&omega;"], [7, "&thetasym;"], [0, "&Upsi;"], [2, "&phiv;"], [0, "&piv;"], [5, "&Gammad;"], [0, "&digamma;"], [18, "&kappav;"], [0, "&rhov;"], [3, "&epsiv;"], [0, "&backepsilon;"], [10, "&IOcy;"], [0, "&DJcy;"], [0, "&GJcy;"], [0, "&Jukcy;"], [0, "&DScy;"], [0, "&Iukcy;"], [0, "&YIcy;"], [0, "&Jsercy;"], [0, "&LJcy;"], [0, "&NJcy;"], [0, "&TSHcy;"], [0, "&KJcy;"], [1, "&Ubrcy;"], [0, "&DZcy;"], [0, "&Acy;"], [0, "&Bcy;"], [0, "&Vcy;"], [0, "&Gcy;"], [0, "&Dcy;"], [0, "&IEcy;"], [0, "&ZHcy;"], [0, "&Zcy;"], [0, "&Icy;"], [0, "&Jcy;"], [0, "&Kcy;"], [0, "&Lcy;"], [0, "&Mcy;"], [0, "&Ncy;"], [0, "&Ocy;"], [0, "&Pcy;"], [0, "&Rcy;"], [0, "&Scy;"], [0, "&Tcy;"], [0, "&Ucy;"], [0, "&Fcy;"], [0, "&KHcy;"], [0, "&TScy;"], [0, "&CHcy;"], [0, "&SHcy;"], [0, "&SHCHcy;"], [0, "&HARDcy;"], [0, "&Ycy;"], [0, "&SOFTcy;"], [0, "&Ecy;"], [0, "&YUcy;"], [0, "&YAcy;"], [0, "&acy;"], [0, "&bcy;"], [0, "&vcy;"], [0, "&gcy;"], [0, "&dcy;"], [0, "&iecy;"], [0, "&zhcy;"], [0, "&zcy;"], [0, "&icy;"], [0, "&jcy;"], [0, "&kcy;"], [0, "&lcy;"], [0, "&mcy;"], [0, "&ncy;"], [0, "&ocy;"], [0, "&pcy;"], [0, "&rcy;"], [0, "&scy;"], [0, "&tcy;"], [0, "&ucy;"], [0, "&fcy;"], [0, "&khcy;"], [0, "&tscy;"], [0, "&chcy;"], [0, "&shcy;"], [0, "&shchcy;"], [0, "&hardcy;"], [0, "&ycy;"], [0, "&softcy;"], [0, "&ecy;"], [0, "&yucy;"], [0, "&yacy;"], [1, "&iocy;"], [0, "&djcy;"], [0, "&gjcy;"], [0, "&jukcy;"], [0, "&dscy;"], [0, "&iukcy;"], [0, "&yicy;"], [0, "&jsercy;"], [0, "&ljcy;"], [0, "&njcy;"], [0, "&tshcy;"], [0, "&kjcy;"], [1, "&ubrcy;"], [0, "&dzcy;"], [7074, "&ensp;"], [0, "&emsp;"], [0, "&emsp13;"], [0, "&emsp14;"], [1, "&numsp;"], [0, "&puncsp;"], [0, "&ThinSpace;"], [0, "&hairsp;"], [0, "&NegativeMediumSpace;"], [0, "&zwnj;"], [0, "&zwj;"], [0, "&lrm;"], [0, "&rlm;"], [0, "&dash;"], [2, "&ndash;"], [0, "&mdash;"], [0, "&horbar;"], [0, "&Verbar;"], [1, "&lsquo;"], [0, "&CloseCurlyQuote;"], [0, "&lsquor;"], [1, "&ldquo;"], [0, "&CloseCurlyDoubleQuote;"], [0, "&bdquo;"], [1, "&dagger;"], [0, "&Dagger;"], [0, "&bull;"], [2, "&nldr;"], [0, "&hellip;"], [9, "&permil;"], [0, "&pertenk;"], [0, "&prime;"], [0, "&Prime;"], [0, "&tprime;"], [0, "&backprime;"], [3, "&lsaquo;"], [0, "&rsaquo;"], [3, "&oline;"], [2, "&caret;"], [1, "&hybull;"], [0, "&frasl;"], [10, "&bsemi;"], [7, "&qprime;"], [7, { v: "&MediumSpace;", n: 8202, o: "&ThickSpace;" }], [0, "&NoBreak;"], [0, "&af;"], [0, "&InvisibleTimes;"], [0, "&ic;"], [72, "&euro;"], [46, "&tdot;"], [0, "&DotDot;"], [37, "&complexes;"], [2, "&incare;"], [4, "&gscr;"], [0, "&hamilt;"], [0, "&Hfr;"], [0, "&Hopf;"], [0, "&planckh;"], [0, "&hbar;"], [0, "&imagline;"], [0, "&Ifr;"], [0, "&lagran;"], [0, "&ell;"], [1, "&naturals;"], [0, "&numero;"], [0, "&copysr;"], [0, "&weierp;"], [0, "&Popf;"], [0, "&Qopf;"], [0, "&realine;"], [0, "&real;"], [0, "&reals;"], [0, "&rx;"], [3, "&trade;"], [1, "&integers;"], [2, "&mho;"], [0, "&zeetrf;"], [0, "&iiota;"], [2, "&bernou;"], [0, "&Cayleys;"], [1, "&escr;"], [0, "&Escr;"], [0, "&Fouriertrf;"], [1, "&Mellintrf;"], [0, "&order;"], [0, "&alefsym;"], [0, "&beth;"], [0, "&gimel;"], [0, "&daleth;"], [12, "&CapitalDifferentialD;"], [0, "&dd;"], [0, "&ee;"], [0, "&ii;"], [10, "&frac13;"], [0, "&frac23;"], [0, "&frac15;"], [0, "&frac25;"], [0, "&frac35;"], [0, "&frac45;"], [0, "&frac16;"], [0, "&frac56;"], [0, "&frac18;"], [0, "&frac38;"], [0, "&frac58;"], [0, "&frac78;"], [49, "&larr;"], [0, "&ShortUpArrow;"], [0, "&rarr;"], [0, "&darr;"], [0, "&harr;"], [0, "&updownarrow;"], [0, "&nwarr;"], [0, "&nearr;"], [0, "&LowerRightArrow;"], [0, "&LowerLeftArrow;"], [0, "&nlarr;"], [0, "&nrarr;"], [1, { v: "&rarrw;", n: 824, o: "&nrarrw;" }], [0, "&Larr;"], [0, "&Uarr;"], [0, "&Rarr;"], [0, "&Darr;"], [0, "&larrtl;"], [0, "&rarrtl;"], [0, "&LeftTeeArrow;"], [0, "&mapstoup;"], [0, "&map;"], [0, "&DownTeeArrow;"], [1, "&hookleftarrow;"], [0, "&hookrightarrow;"], [0, "&larrlp;"], [0, "&looparrowright;"], [0, "&harrw;"], [0, "&nharr;"], [1, "&lsh;"], [0, "&rsh;"], [0, "&ldsh;"], [0, "&rdsh;"], [1, "&crarr;"], [0, "&cularr;"], [0, "&curarr;"], [2, "&circlearrowleft;"], [0, "&circlearrowright;"], [0, "&leftharpoonup;"], [0, "&DownLeftVector;"], [0, "&RightUpVector;"], [0, "&LeftUpVector;"], [0, "&rharu;"], [0, "&DownRightVector;"], [0, "&dharr;"], [0, "&dharl;"], [0, "&RightArrowLeftArrow;"], [0, "&udarr;"], [0, "&LeftArrowRightArrow;"], [0, "&leftleftarrows;"], [0, "&upuparrows;"], [0, "&rightrightarrows;"], [0, "&ddarr;"], [0, "&leftrightharpoons;"], [0, "&Equilibrium;"], [0, "&nlArr;"], [0, "&nhArr;"], [0, "&nrArr;"], [0, "&DoubleLeftArrow;"], [0, "&DoubleUpArrow;"], [0, "&DoubleRightArrow;"], [0, "&dArr;"], [0, "&DoubleLeftRightArrow;"], [0, "&DoubleUpDownArrow;"], [0, "&nwArr;"], [0, "&neArr;"], [0, "&seArr;"], [0, "&swArr;"], [0, "&lAarr;"], [0, "&rAarr;"], [1, "&zigrarr;"], [6, "&larrb;"], [0, "&rarrb;"], [15, "&DownArrowUpArrow;"], [7, "&loarr;"], [0, "&roarr;"], [0, "&hoarr;"], [0, "&forall;"], [0, "&comp;"], [0, { v: "&part;", n: 824, o: "&npart;" }], [0, "&exist;"], [0, "&nexist;"], [0, "&empty;"], [1, "&Del;"], [0, "&Element;"], [0, "&NotElement;"], [1, "&ni;"], [0, "&notni;"], [2, "&prod;"], [0, "&coprod;"], [0, "&sum;"], [0, "&minus;"], [0, "&MinusPlus;"], [0, "&dotplus;"], [1, "&Backslash;"], [0, "&lowast;"], [0, "&compfn;"], [1, "&radic;"], [2, "&prop;"], [0, "&infin;"], [0, "&angrt;"], [0, { v: "&ang;", n: 8402, o: "&nang;" }], [0, "&angmsd;"], [0, "&angsph;"], [0, "&mid;"], [0, "&nmid;"], [0, "&DoubleVerticalBar;"], [0, "&NotDoubleVerticalBar;"], [0, "&and;"], [0, "&or;"], [0, { v: "&cap;", n: 65024, o: "&caps;" }], [0, { v: "&cup;", n: 65024, o: "&cups;" }], [0, "&int;"], [0, "&Int;"], [0, "&iiint;"], [0, "&conint;"], [0, "&Conint;"], [0, "&Cconint;"], [0, "&cwint;"], [0, "&ClockwiseContourIntegral;"], [0, "&awconint;"], [0, "&there4;"], [0, "&becaus;"], [0, "&ratio;"], [0, "&Colon;"], [0, "&dotminus;"], [1, "&mDDot;"], [0, "&homtht;"], [0, { v: "&sim;", n: 8402, o: "&nvsim;" }], [0, { v: "&backsim;", n: 817, o: "&race;" }], [0, { v: "&ac;", n: 819, o: "&acE;" }], [0, "&acd;"], [0, "&VerticalTilde;"], [0, "&NotTilde;"], [0, { v: "&eqsim;", n: 824, o: "&nesim;" }], [0, "&sime;"], [0, "&NotTildeEqual;"], [0, "&cong;"], [0, "&simne;"], [0, "&ncong;"], [0, "&ap;"], [0, "&nap;"], [0, "&ape;"], [0, { v: "&apid;", n: 824, o: "&napid;" }], [0, "&backcong;"], [0, { v: "&asympeq;", n: 8402, o: "&nvap;" }], [0, { v: "&bump;", n: 824, o: "&nbump;" }], [0, { v: "&bumpe;", n: 824, o: "&nbumpe;" }], [0, { v: "&doteq;", n: 824, o: "&nedot;" }], [0, "&doteqdot;"], [0, "&efDot;"], [0, "&erDot;"], [0, "&Assign;"], [0, "&ecolon;"], [0, "&ecir;"], [0, "&circeq;"], [1, "&wedgeq;"], [0, "&veeeq;"], [1, "&triangleq;"], [2, "&equest;"], [0, "&ne;"], [0, { v: "&Congruent;", n: 8421, o: "&bnequiv;" }], [0, "&nequiv;"], [1, { v: "&le;", n: 8402, o: "&nvle;" }], [0, { v: "&ge;", n: 8402, o: "&nvge;" }], [0, { v: "&lE;", n: 824, o: "&nlE;" }], [0, { v: "&gE;", n: 824, o: "&ngE;" }], [0, { v: "&lnE;", n: 65024, o: "&lvertneqq;" }], [0, { v: "&gnE;", n: 65024, o: "&gvertneqq;" }], [0, { v: "&ll;", n: new Map(/* @__PURE__ */ restoreDiff([[824, "&nLtv;"], [7577, "&nLt;"]])) }], [0, { v: "&gg;", n: new Map(/* @__PURE__ */ restoreDiff([[824, "&nGtv;"], [7577, "&nGt;"]])) }], [0, "&between;"], [0, "&NotCupCap;"], [0, "&nless;"], [0, "&ngt;"], [0, "&nle;"], [0, "&nge;"], [0, "&lesssim;"], [0, "&GreaterTilde;"], [0, "&nlsim;"], [0, "&ngsim;"], [0, "&LessGreater;"], [0, "&gl;"], [0, "&NotLessGreater;"], [0, "&NotGreaterLess;"], [0, "&pr;"], [0, "&sc;"], [0, "&prcue;"], [0, "&sccue;"], [0, "&PrecedesTilde;"], [0, { v: "&scsim;", n: 824, o: "&NotSucceedsTilde;" }], [0, "&NotPrecedes;"], [0, "&NotSucceeds;"], [0, { v: "&sub;", n: 8402, o: "&NotSubset;" }], [0, { v: "&sup;", n: 8402, o: "&NotSuperset;" }], [0, "&nsub;"], [0, "&nsup;"], [0, "&sube;"], [0, "&supe;"], [0, "&NotSubsetEqual;"], [0, "&NotSupersetEqual;"], [0, { v: "&subne;", n: 65024, o: "&varsubsetneq;" }], [0, { v: "&supne;", n: 65024, o: "&varsupsetneq;" }], [1, "&cupdot;"], [0, "&UnionPlus;"], [0, { v: "&sqsub;", n: 824, o: "&NotSquareSubset;" }], [0, { v: "&sqsup;", n: 824, o: "&NotSquareSuperset;" }], [0, "&sqsube;"], [0, "&sqsupe;"], [0, { v: "&sqcap;", n: 65024, o: "&sqcaps;" }], [0, { v: "&sqcup;", n: 65024, o: "&sqcups;" }], [0, "&CirclePlus;"], [0, "&CircleMinus;"], [0, "&CircleTimes;"], [0, "&osol;"], [0, "&CircleDot;"], [0, "&circledcirc;"], [0, "&circledast;"], [1, "&circleddash;"], [0, "&boxplus;"], [0, "&boxminus;"], [0, "&boxtimes;"], [0, "&dotsquare;"], [0, "&RightTee;"], [0, "&dashv;"], [0, "&DownTee;"], [0, "&bot;"], [1, "&models;"], [0, "&DoubleRightTee;"], [0, "&Vdash;"], [0, "&Vvdash;"], [0, "&VDash;"], [0, "&nvdash;"], [0, "&nvDash;"], [0, "&nVdash;"], [0, "&nVDash;"], [0, "&prurel;"], [1, "&LeftTriangle;"], [0, "&RightTriangle;"], [0, { v: "&LeftTriangleEqual;", n: 8402, o: "&nvltrie;" }], [0, { v: "&RightTriangleEqual;", n: 8402, o: "&nvrtrie;" }], [0, "&origof;"], [0, "&imof;"], [0, "&multimap;"], [0, "&hercon;"], [0, "&intcal;"], [0, "&veebar;"], [1, "&barvee;"], [0, "&angrtvb;"], [0, "&lrtri;"], [0, "&bigwedge;"], [0, "&bigvee;"], [0, "&bigcap;"], [0, "&bigcup;"], [0, "&diam;"], [0, "&sdot;"], [0, "&sstarf;"], [0, "&divideontimes;"], [0, "&bowtie;"], [0, "&ltimes;"], [0, "&rtimes;"], [0, "&leftthreetimes;"], [0, "&rightthreetimes;"], [0, "&backsimeq;"], [0, "&curlyvee;"], [0, "&curlywedge;"], [0, "&Sub;"], [0, "&Sup;"], [0, "&Cap;"], [0, "&Cup;"], [0, "&fork;"], [0, "&epar;"], [0, "&lessdot;"], [0, "&gtdot;"], [0, { v: "&Ll;", n: 824, o: "&nLl;" }], [0, { v: "&Gg;", n: 824, o: "&nGg;" }], [0, { v: "&leg;", n: 65024, o: "&lesg;" }], [0, { v: "&gel;", n: 65024, o: "&gesl;" }], [2, "&cuepr;"], [0, "&cuesc;"], [0, "&NotPrecedesSlantEqual;"], [0, "&NotSucceedsSlantEqual;"], [0, "&NotSquareSubsetEqual;"], [0, "&NotSquareSupersetEqual;"], [2, "&lnsim;"], [0, "&gnsim;"], [0, "&precnsim;"], [0, "&scnsim;"], [0, "&nltri;"], [0, "&NotRightTriangle;"], [0, "&nltrie;"], [0, "&NotRightTriangleEqual;"], [0, "&vellip;"], [0, "&ctdot;"], [0, "&utdot;"], [0, "&dtdot;"], [0, "&disin;"], [0, "&isinsv;"], [0, "&isins;"], [0, { v: "&isindot;", n: 824, o: "&notindot;" }], [0, "&notinvc;"], [0, "&notinvb;"], [1, { v: "&isinE;", n: 824, o: "&notinE;" }], [0, "&nisd;"], [0, "&xnis;"], [0, "&nis;"], [0, "&notnivc;"], [0, "&notnivb;"], [6, "&barwed;"], [0, "&Barwed;"], [1, "&lceil;"], [0, "&rceil;"], [0, "&LeftFloor;"], [0, "&rfloor;"], [0, "&drcrop;"], [0, "&dlcrop;"], [0, "&urcrop;"], [0, "&ulcrop;"], [0, "&bnot;"], [1, "&profline;"], [0, "&profsurf;"], [1, "&telrec;"], [0, "&target;"], [5, "&ulcorn;"], [0, "&urcorn;"], [0, "&dlcorn;"], [0, "&drcorn;"], [2, "&frown;"], [0, "&smile;"], [9, "&cylcty;"], [0, "&profalar;"], [7, "&topbot;"], [6, "&ovbar;"], [1, "&solbar;"], [60, "&angzarr;"], [51, "&lmoustache;"], [0, "&rmoustache;"], [2, "&OverBracket;"], [0, "&bbrk;"], [0, "&bbrktbrk;"], [37, "&OverParenthesis;"], [0, "&UnderParenthesis;"], [0, "&OverBrace;"], [0, "&UnderBrace;"], [2, "&trpezium;"], [4, "&elinters;"], [59, "&blank;"], [164, "&circledS;"], [55, "&boxh;"], [1, "&boxv;"], [9, "&boxdr;"], [3, "&boxdl;"], [3, "&boxur;"], [3, "&boxul;"], [3, "&boxvr;"], [7, "&boxvl;"], [7, "&boxhd;"], [7, "&boxhu;"], [7, "&boxvh;"], [19, "&boxH;"], [0, "&boxV;"], [0, "&boxdR;"], [0, "&boxDr;"], [0, "&boxDR;"], [0, "&boxdL;"], [0, "&boxDl;"], [0, "&boxDL;"], [0, "&boxuR;"], [0, "&boxUr;"], [0, "&boxUR;"], [0, "&boxuL;"], [0, "&boxUl;"], [0, "&boxUL;"], [0, "&boxvR;"], [0, "&boxVr;"], [0, "&boxVR;"], [0, "&boxvL;"], [0, "&boxVl;"], [0, "&boxVL;"], [0, "&boxHd;"], [0, "&boxhD;"], [0, "&boxHD;"], [0, "&boxHu;"], [0, "&boxhU;"], [0, "&boxHU;"], [0, "&boxvH;"], [0, "&boxVh;"], [0, "&boxVH;"], [19, "&uhblk;"], [3, "&lhblk;"], [3, "&block;"], [8, "&blk14;"], [0, "&blk12;"], [0, "&blk34;"], [13, "&square;"], [8, "&blacksquare;"], [0, "&EmptyVerySmallSquare;"], [1, "&rect;"], [0, "&marker;"], [2, "&fltns;"], [1, "&bigtriangleup;"], [0, "&blacktriangle;"], [0, "&triangle;"], [2, "&blacktriangleright;"], [0, "&rtri;"], [3, "&bigtriangledown;"], [0, "&blacktriangledown;"], [0, "&dtri;"], [2, "&blacktriangleleft;"], [0, "&ltri;"], [6, "&loz;"], [0, "&cir;"], [32, "&tridot;"], [2, "&bigcirc;"], [8, "&ultri;"], [0, "&urtri;"], [0, "&lltri;"], [0, "&EmptySmallSquare;"], [0, "&FilledSmallSquare;"], [8, "&bigstar;"], [0, "&star;"], [7, "&phone;"], [49, "&female;"], [1, "&male;"], [29, "&spades;"], [2, "&clubs;"], [1, "&hearts;"], [0, "&diamondsuit;"], [3, "&sung;"], [2, "&flat;"], [0, "&natural;"], [0, "&sharp;"], [163, "&check;"], [3, "&cross;"], [8, "&malt;"], [21, "&sext;"], [33, "&VerticalSeparator;"], [25, "&lbbrk;"], [0, "&rbbrk;"], [84, "&bsolhsub;"], [0, "&suphsol;"], [28, "&LeftDoubleBracket;"], [0, "&RightDoubleBracket;"], [0, "&lang;"], [0, "&rang;"], [0, "&Lang;"], [0, "&Rang;"], [0, "&loang;"], [0, "&roang;"], [7, "&longleftarrow;"], [0, "&longrightarrow;"], [0, "&longleftrightarrow;"], [0, "&DoubleLongLeftArrow;"], [0, "&DoubleLongRightArrow;"], [0, "&DoubleLongLeftRightArrow;"], [1, "&longmapsto;"], [2, "&dzigrarr;"], [258, "&nvlArr;"], [0, "&nvrArr;"], [0, "&nvHarr;"], [0, "&Map;"], [6, "&lbarr;"], [0, "&bkarow;"], [0, "&lBarr;"], [0, "&dbkarow;"], [0, "&drbkarow;"], [0, "&DDotrahd;"], [0, "&UpArrowBar;"], [0, "&DownArrowBar;"], [2, "&Rarrtl;"], [2, "&latail;"], [0, "&ratail;"], [0, "&lAtail;"], [0, "&rAtail;"], [0, "&larrfs;"], [0, "&rarrfs;"], [0, "&larrbfs;"], [0, "&rarrbfs;"], [2, "&nwarhk;"], [0, "&nearhk;"], [0, "&hksearow;"], [0, "&hkswarow;"], [0, "&nwnear;"], [0, "&nesear;"], [0, "&seswar;"], [0, "&swnwar;"], [8, { v: "&rarrc;", n: 824, o: "&nrarrc;" }], [1, "&cudarrr;"], [0, "&ldca;"], [0, "&rdca;"], [0, "&cudarrl;"], [0, "&larrpl;"], [2, "&curarrm;"], [0, "&cularrp;"], [7, "&rarrpl;"], [2, "&harrcir;"], [0, "&Uarrocir;"], [0, "&lurdshar;"], [0, "&ldrushar;"], [2, "&LeftRightVector;"], [0, "&RightUpDownVector;"], [0, "&DownLeftRightVector;"], [0, "&LeftUpDownVector;"], [0, "&LeftVectorBar;"], [0, "&RightVectorBar;"], [0, "&RightUpVectorBar;"], [0, "&RightDownVectorBar;"], [0, "&DownLeftVectorBar;"], [0, "&DownRightVectorBar;"], [0, "&LeftUpVectorBar;"], [0, "&LeftDownVectorBar;"], [0, "&LeftTeeVector;"], [0, "&RightTeeVector;"], [0, "&RightUpTeeVector;"], [0, "&RightDownTeeVector;"], [0, "&DownLeftTeeVector;"], [0, "&DownRightTeeVector;"], [0, "&LeftUpTeeVector;"], [0, "&LeftDownTeeVector;"], [0, "&lHar;"], [0, "&uHar;"], [0, "&rHar;"], [0, "&dHar;"], [0, "&luruhar;"], [0, "&ldrdhar;"], [0, "&ruluhar;"], [0, "&rdldhar;"], [0, "&lharul;"], [0, "&llhard;"], [0, "&rharul;"], [0, "&lrhard;"], [0, "&udhar;"], [0, "&duhar;"], [0, "&RoundImplies;"], [0, "&erarr;"], [0, "&simrarr;"], [0, "&larrsim;"], [0, "&rarrsim;"], [0, "&rarrap;"], [0, "&ltlarr;"], [1, "&gtrarr;"], [0, "&subrarr;"], [1, "&suplarr;"], [0, "&lfisht;"], [0, "&rfisht;"], [0, "&ufisht;"], [0, "&dfisht;"], [5, "&lopar;"], [0, "&ropar;"], [4, "&lbrke;"], [0, "&rbrke;"], [0, "&lbrkslu;"], [0, "&rbrksld;"], [0, "&lbrksld;"], [0, "&rbrkslu;"], [0, "&langd;"], [0, "&rangd;"], [0, "&lparlt;"], [0, "&rpargt;"], [0, "&gtlPar;"], [0, "&ltrPar;"], [3, "&vzigzag;"], [1, "&vangrt;"], [0, "&angrtvbd;"], [6, "&ange;"], [0, "&range;"], [0, "&dwangle;"], [0, "&uwangle;"], [0, "&angmsdaa;"], [0, "&angmsdab;"], [0, "&angmsdac;"], [0, "&angmsdad;"], [0, "&angmsdae;"], [0, "&angmsdaf;"], [0, "&angmsdag;"], [0, "&angmsdah;"], [0, "&bemptyv;"], [0, "&demptyv;"], [0, "&cemptyv;"], [0, "&raemptyv;"], [0, "&laemptyv;"], [0, "&ohbar;"], [0, "&omid;"], [0, "&opar;"], [1, "&operp;"], [1, "&olcross;"], [0, "&odsold;"], [1, "&olcir;"], [0, "&ofcir;"], [0, "&olt;"], [0, "&ogt;"], [0, "&cirscir;"], [0, "&cirE;"], [0, "&solb;"], [0, "&bsolb;"], [3, "&boxbox;"], [3, "&trisb;"], [0, "&rtriltri;"], [0, { v: "&LeftTriangleBar;", n: 824, o: "&NotLeftTriangleBar;" }], [0, { v: "&RightTriangleBar;", n: 824, o: "&NotRightTriangleBar;" }], [11, "&iinfin;"], [0, "&infintie;"], [0, "&nvinfin;"], [4, "&eparsl;"], [0, "&smeparsl;"], [0, "&eqvparsl;"], [5, "&blacklozenge;"], [8, "&RuleDelayed;"], [1, "&dsol;"], [9, "&bigodot;"], [0, "&bigoplus;"], [0, "&bigotimes;"], [1, "&biguplus;"], [1, "&bigsqcup;"], [5, "&iiiint;"], [0, "&fpartint;"], [2, "&cirfnint;"], [0, "&awint;"], [0, "&rppolint;"], [0, "&scpolint;"], [0, "&npolint;"], [0, "&pointint;"], [0, "&quatint;"], [0, "&intlarhk;"], [10, "&pluscir;"], [0, "&plusacir;"], [0, "&simplus;"], [0, "&plusdu;"], [0, "&plussim;"], [0, "&plustwo;"], [1, "&mcomma;"], [0, "&minusdu;"], [2, "&loplus;"], [0, "&roplus;"], [0, "&Cross;"], [0, "&timesd;"], [0, "&timesbar;"], [1, "&smashp;"], [0, "&lotimes;"], [0, "&rotimes;"], [0, "&otimesas;"], [0, "&Otimes;"], [0, "&odiv;"], [0, "&triplus;"], [0, "&triminus;"], [0, "&tritime;"], [0, "&intprod;"], [2, "&amalg;"], [0, "&capdot;"], [1, "&ncup;"], [0, "&ncap;"], [0, "&capand;"], [0, "&cupor;"], [0, "&cupcap;"], [0, "&capcup;"], [0, "&cupbrcap;"], [0, "&capbrcup;"], [0, "&cupcup;"], [0, "&capcap;"], [0, "&ccups;"], [0, "&ccaps;"], [2, "&ccupssm;"], [2, "&And;"], [0, "&Or;"], [0, "&andand;"], [0, "&oror;"], [0, "&orslope;"], [0, "&andslope;"], [1, "&andv;"], [0, "&orv;"], [0, "&andd;"], [0, "&ord;"], [1, "&wedbar;"], [6, "&sdote;"], [3, "&simdot;"], [2, { v: "&congdot;", n: 824, o: "&ncongdot;" }], [0, "&easter;"], [0, "&apacir;"], [0, { v: "&apE;", n: 824, o: "&napE;" }], [0, "&eplus;"], [0, "&pluse;"], [0, "&Esim;"], [0, "&Colone;"], [0, "&Equal;"], [1, "&ddotseq;"], [0, "&equivDD;"], [0, "&ltcir;"], [0, "&gtcir;"], [0, "&ltquest;"], [0, "&gtquest;"], [0, { v: "&leqslant;", n: 824, o: "&nleqslant;" }], [0, { v: "&geqslant;", n: 824, o: "&ngeqslant;" }], [0, "&lesdot;"], [0, "&gesdot;"], [0, "&lesdoto;"], [0, "&gesdoto;"], [0, "&lesdotor;"], [0, "&gesdotol;"], [0, "&lap;"], [0, "&gap;"], [0, "&lne;"], [0, "&gne;"], [0, "&lnap;"], [0, "&gnap;"], [0, "&lEg;"], [0, "&gEl;"], [0, "&lsime;"], [0, "&gsime;"], [0, "&lsimg;"], [0, "&gsiml;"], [0, "&lgE;"], [0, "&glE;"], [0, "&lesges;"], [0, "&gesles;"], [0, "&els;"], [0, "&egs;"], [0, "&elsdot;"], [0, "&egsdot;"], [0, "&el;"], [0, "&eg;"], [2, "&siml;"], [0, "&simg;"], [0, "&simlE;"], [0, "&simgE;"], [0, { v: "&LessLess;", n: 824, o: "&NotNestedLessLess;" }], [0, { v: "&GreaterGreater;", n: 824, o: "&NotNestedGreaterGreater;" }], [1, "&glj;"], [0, "&gla;"], [0, "&ltcc;"], [0, "&gtcc;"], [0, "&lescc;"], [0, "&gescc;"], [0, "&smt;"], [0, "&lat;"], [0, { v: "&smte;", n: 65024, o: "&smtes;" }], [0, { v: "&late;", n: 65024, o: "&lates;" }], [0, "&bumpE;"], [0, { v: "&PrecedesEqual;", n: 824, o: "&NotPrecedesEqual;" }], [0, { v: "&sce;", n: 824, o: "&NotSucceedsEqual;" }], [2, "&prE;"], [0, "&scE;"], [0, "&precneqq;"], [0, "&scnE;"], [0, "&prap;"], [0, "&scap;"], [0, "&precnapprox;"], [0, "&scnap;"], [0, "&Pr;"], [0, "&Sc;"], [0, "&subdot;"], [0, "&supdot;"], [0, "&subplus;"], [0, "&supplus;"], [0, "&submult;"], [0, "&supmult;"], [0, "&subedot;"], [0, "&supedot;"], [0, { v: "&subE;", n: 824, o: "&nsubE;" }], [0, { v: "&supE;", n: 824, o: "&nsupE;" }], [0, "&subsim;"], [0, "&supsim;"], [2, { v: "&subnE;", n: 65024, o: "&varsubsetneqq;" }], [0, { v: "&supnE;", n: 65024, o: "&varsupsetneqq;" }], [2, "&csub;"], [0, "&csup;"], [0, "&csube;"], [0, "&csupe;"], [0, "&subsup;"], [0, "&supsub;"], [0, "&subsub;"], [0, "&supsup;"], [0, "&suphsub;"], [0, "&supdsub;"], [0, "&forkv;"], [0, "&topfork;"], [0, "&mlcp;"], [8, "&Dashv;"], [1, "&Vdashl;"], [0, "&Barv;"], [0, "&vBar;"], [0, "&vBarv;"], [1, "&Vbar;"], [0, "&Not;"], [0, "&bNot;"], [0, "&rnmid;"], [0, "&cirmid;"], [0, "&midcir;"], [0, "&topcir;"], [0, "&nhpar;"], [0, "&parsim;"], [9, { v: "&parsl;", n: 8421, o: "&nparsl;" }], [44343, { n: new Map(/* @__PURE__ */ restoreDiff([[56476, "&Ascr;"], [1, "&Cscr;"], [0, "&Dscr;"], [2, "&Gscr;"], [2, "&Jscr;"], [0, "&Kscr;"], [2, "&Nscr;"], [0, "&Oscr;"], [0, "&Pscr;"], [0, "&Qscr;"], [1, "&Sscr;"], [0, "&Tscr;"], [0, "&Uscr;"], [0, "&Vscr;"], [0, "&Wscr;"], [0, "&Xscr;"], [0, "&Yscr;"], [0, "&Zscr;"], [0, "&ascr;"], [0, "&bscr;"], [0, "&cscr;"], [0, "&dscr;"], [1, "&fscr;"], [1, "&hscr;"], [0, "&iscr;"], [0, "&jscr;"], [0, "&kscr;"], [0, "&lscr;"], [0, "&mscr;"], [0, "&nscr;"], [1, "&pscr;"], [0, "&qscr;"], [0, "&rscr;"], [0, "&sscr;"], [0, "&tscr;"], [0, "&uscr;"], [0, "&vscr;"], [0, "&wscr;"], [0, "&xscr;"], [0, "&yscr;"], [0, "&zscr;"], [52, "&Afr;"], [0, "&Bfr;"], [1, "&Dfr;"], [0, "&Efr;"], [0, "&Ffr;"], [0, "&Gfr;"], [2, "&Jfr;"], [0, "&Kfr;"], [0, "&Lfr;"], [0, "&Mfr;"], [0, "&Nfr;"], [0, "&Ofr;"], [0, "&Pfr;"], [0, "&Qfr;"], [1, "&Sfr;"], [0, "&Tfr;"], [0, "&Ufr;"], [0, "&Vfr;"], [0, "&Wfr;"], [0, "&Xfr;"], [0, "&Yfr;"], [1, "&afr;"], [0, "&bfr;"], [0, "&cfr;"], [0, "&dfr;"], [0, "&efr;"], [0, "&ffr;"], [0, "&gfr;"], [0, "&hfr;"], [0, "&ifr;"], [0, "&jfr;"], [0, "&kfr;"], [0, "&lfr;"], [0, "&mfr;"], [0, "&nfr;"], [0, "&ofr;"], [0, "&pfr;"], [0, "&qfr;"], [0, "&rfr;"], [0, "&sfr;"], [0, "&tfr;"], [0, "&ufr;"], [0, "&vfr;"], [0, "&wfr;"], [0, "&xfr;"], [0, "&yfr;"], [0, "&zfr;"], [0, "&Aopf;"], [0, "&Bopf;"], [1, "&Dopf;"], [0, "&Eopf;"], [0, "&Fopf;"], [0, "&Gopf;"], [1, "&Iopf;"], [0, "&Jopf;"], [0, "&Kopf;"], [0, "&Lopf;"], [0, "&Mopf;"], [1, "&Oopf;"], [3, "&Sopf;"], [0, "&Topf;"], [0, "&Uopf;"], [0, "&Vopf;"], [0, "&Wopf;"], [0, "&Xopf;"], [0, "&Yopf;"], [1, "&aopf;"], [0, "&bopf;"], [0, "&copf;"], [0, "&dopf;"], [0, "&eopf;"], [0, "&fopf;"], [0, "&gopf;"], [0, "&hopf;"], [0, "&iopf;"], [0, "&jopf;"], [0, "&kopf;"], [0, "&lopf;"], [0, "&mopf;"], [0, "&nopf;"], [0, "&oopf;"], [0, "&popf;"], [0, "&qopf;"], [0, "&ropf;"], [0, "&sopf;"], [0, "&topf;"], [0, "&uopf;"], [0, "&vopf;"], [0, "&wopf;"], [0, "&xopf;"], [0, "&yopf;"], [0, "&zopf;"]])) }], [8906, "&fflig;"], [0, "&filig;"], [0, "&fllig;"], [0, "&ffilig;"], [0, "&ffllig;"]]));
var _escape = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.escapeText = exports2.escapeAttribute = exports2.escapeUTF8 = exports2.escape = exports2.encodeXML = exports2.getCodePoint = exports2.xmlReplacer = void 0;
  exports2.xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
  var xmlCodeMap = /* @__PURE__ */ new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [39, "&apos;"],
    [60, "&lt;"],
    [62, "&gt;"]
  ]);
  exports2.getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  String.prototype.codePointAt != null ? function(str, index2) {
    return str.codePointAt(index2);
  } : (
    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    function(c7, index2) {
      return (c7.charCodeAt(index2) & 64512) === 55296 ? (c7.charCodeAt(index2) - 55296) * 1024 + c7.charCodeAt(index2 + 1) - 56320 + 65536 : c7.charCodeAt(index2);
    }
  );
  function encodeXML(str) {
    var ret = "";
    var lastIdx = 0;
    var match2;
    while ((match2 = exports2.xmlReplacer.exec(str)) !== null) {
      var i3 = match2.index;
      var char2 = str.charCodeAt(i3);
      var next2 = xmlCodeMap.get(char2);
      if (next2 !== void 0) {
        ret += str.substring(lastIdx, i3) + next2;
        lastIdx = i3 + 1;
      } else {
        ret += "".concat(str.substring(lastIdx, i3), "&#x").concat((0, exports2.getCodePoint)(str, i3).toString(16), ";");
        lastIdx = exports2.xmlReplacer.lastIndex += Number((char2 & 64512) === 55296);
      }
    }
    return ret + str.substr(lastIdx);
  }
  exports2.encodeXML = encodeXML;
  exports2.escape = encodeXML;
  function getEscaper(regex, map2) {
    return function escape2(data2) {
      var match2;
      var lastIdx = 0;
      var result2 = "";
      while (match2 = regex.exec(data2)) {
        if (lastIdx !== match2.index) {
          result2 += data2.substring(lastIdx, match2.index);
        }
        result2 += map2.get(match2[0].charCodeAt(0));
        lastIdx = match2.index + 1;
      }
      return result2 + data2.substring(lastIdx);
    };
  }
  exports2.escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
  exports2.escapeAttribute = getEscaper(/["&\u00A0]/g, /* @__PURE__ */ new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [160, "&nbsp;"]
  ]));
  exports2.escapeText = getEscaper(/[&<>\u00A0]/g, /* @__PURE__ */ new Map([
    [38, "&amp;"],
    [60, "&lt;"],
    [62, "&gt;"],
    [160, "&nbsp;"]
  ]));
})(_escape);
var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
};
Object.defineProperty(encode$1, "__esModule", { value: true });
encode$1.encodeNonAsciiHTML = encode$1.encodeHTML = void 0;
var encode_html_js_1 = __importDefault$1(encodeHtml);
var escape_js_1 = _escape;
var htmlReplacer = /[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;
function encodeHTML(data2) {
  return encodeHTMLTrieRe(htmlReplacer, data2);
}
encode$1.encodeHTML = encodeHTML;
function encodeNonAsciiHTML(data2) {
  return encodeHTMLTrieRe(escape_js_1.xmlReplacer, data2);
}
encode$1.encodeNonAsciiHTML = encodeNonAsciiHTML;
function encodeHTMLTrieRe(regExp, str) {
  var ret = "";
  var lastIdx = 0;
  var match2;
  while ((match2 = regExp.exec(str)) !== null) {
    var i3 = match2.index;
    ret += str.substring(lastIdx, i3);
    var char2 = str.charCodeAt(i3);
    var next2 = encode_html_js_1.default.get(char2);
    if (typeof next2 === "object") {
      if (i3 + 1 < str.length) {
        var nextChar = str.charCodeAt(i3 + 1);
        var value2 = typeof next2.n === "number" ? next2.n === nextChar ? next2.o : void 0 : next2.n.get(nextChar);
        if (value2 !== void 0) {
          ret += value2;
          lastIdx = regExp.lastIndex += 1;
          continue;
        }
      }
      next2 = next2.v;
    }
    if (next2 !== void 0) {
      ret += next2;
      lastIdx = i3 + 1;
    } else {
      var cp = (0, escape_js_1.getCodePoint)(str, i3);
      ret += "&#x".concat(cp.toString(16), ";");
      lastIdx = regExp.lastIndex += Number(cp !== char2);
    }
  }
  return ret + str.substr(lastIdx);
}
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.decodeXMLStrict = exports2.decodeHTML5Strict = exports2.decodeHTML4Strict = exports2.decodeHTML5 = exports2.decodeHTML4 = exports2.decodeHTMLStrict = exports2.decodeHTML = exports2.decodeXML = exports2.encodeHTML5 = exports2.encodeHTML4 = exports2.encodeNonAsciiHTML = exports2.encodeHTML = exports2.escapeText = exports2.escapeAttribute = exports2.escapeUTF8 = exports2.escape = exports2.encodeXML = exports2.encode = exports2.decodeStrict = exports2.decode = exports2.EncodingMode = exports2.DecodingMode = exports2.EntityLevel = void 0;
  var decode_js_12 = decode$1;
  var encode_js_1 = encode$1;
  var escape_js_12 = _escape;
  var EntityLevel;
  (function(EntityLevel2) {
    EntityLevel2[EntityLevel2["XML"] = 0] = "XML";
    EntityLevel2[EntityLevel2["HTML"] = 1] = "HTML";
  })(EntityLevel = exports2.EntityLevel || (exports2.EntityLevel = {}));
  var DecodingMode;
  (function(DecodingMode2) {
    DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
    DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
  })(DecodingMode = exports2.DecodingMode || (exports2.DecodingMode = {}));
  var EncodingMode;
  (function(EncodingMode2) {
    EncodingMode2[EncodingMode2["UTF8"] = 0] = "UTF8";
    EncodingMode2[EncodingMode2["ASCII"] = 1] = "ASCII";
    EncodingMode2[EncodingMode2["Extensive"] = 2] = "Extensive";
    EncodingMode2[EncodingMode2["Attribute"] = 3] = "Attribute";
    EncodingMode2[EncodingMode2["Text"] = 4] = "Text";
  })(EncodingMode = exports2.EncodingMode || (exports2.EncodingMode = {}));
  function decode2(data2, options) {
    if (options === void 0) {
      options = EntityLevel.XML;
    }
    var opts = typeof options === "number" ? { level: options } : options;
    if (opts.level === EntityLevel.HTML) {
      if (opts.mode === DecodingMode.Strict) {
        return (0, decode_js_12.decodeHTMLStrict)(data2);
      }
      return (0, decode_js_12.decodeHTML)(data2);
    }
    return (0, decode_js_12.decodeXML)(data2);
  }
  exports2.decode = decode2;
  function decodeStrict(data2, options) {
    if (options === void 0) {
      options = EntityLevel.XML;
    }
    var opts = typeof options === "number" ? { level: options } : options;
    if (opts.level === EntityLevel.HTML) {
      if (opts.mode === DecodingMode.Legacy) {
        return (0, decode_js_12.decodeHTML)(data2);
      }
      return (0, decode_js_12.decodeHTMLStrict)(data2);
    }
    return (0, decode_js_12.decodeXML)(data2);
  }
  exports2.decodeStrict = decodeStrict;
  function encode2(data2, options) {
    if (options === void 0) {
      options = EntityLevel.XML;
    }
    var opts = typeof options === "number" ? { level: options } : options;
    if (opts.mode === EncodingMode.UTF8)
      return (0, escape_js_12.escapeUTF8)(data2);
    if (opts.mode === EncodingMode.Attribute)
      return (0, escape_js_12.escapeAttribute)(data2);
    if (opts.mode === EncodingMode.Text)
      return (0, escape_js_12.escapeText)(data2);
    if (opts.level === EntityLevel.HTML) {
      if (opts.mode === EncodingMode.ASCII) {
        return (0, encode_js_1.encodeNonAsciiHTML)(data2);
      }
      return (0, encode_js_1.encodeHTML)(data2);
    }
    return (0, escape_js_12.encodeXML)(data2);
  }
  exports2.encode = encode2;
  var escape_js_2 = _escape;
  Object.defineProperty(exports2, "encodeXML", { enumerable: true, get: function() {
    return escape_js_2.encodeXML;
  } });
  Object.defineProperty(exports2, "escape", { enumerable: true, get: function() {
    return escape_js_2.escape;
  } });
  Object.defineProperty(exports2, "escapeUTF8", { enumerable: true, get: function() {
    return escape_js_2.escapeUTF8;
  } });
  Object.defineProperty(exports2, "escapeAttribute", { enumerable: true, get: function() {
    return escape_js_2.escapeAttribute;
  } });
  Object.defineProperty(exports2, "escapeText", { enumerable: true, get: function() {
    return escape_js_2.escapeText;
  } });
  var encode_js_2 = encode$1;
  Object.defineProperty(exports2, "encodeHTML", { enumerable: true, get: function() {
    return encode_js_2.encodeHTML;
  } });
  Object.defineProperty(exports2, "encodeNonAsciiHTML", { enumerable: true, get: function() {
    return encode_js_2.encodeNonAsciiHTML;
  } });
  Object.defineProperty(exports2, "encodeHTML4", { enumerable: true, get: function() {
    return encode_js_2.encodeHTML;
  } });
  Object.defineProperty(exports2, "encodeHTML5", { enumerable: true, get: function() {
    return encode_js_2.encodeHTML;
  } });
  var decode_js_2 = decode$1;
  Object.defineProperty(exports2, "decodeXML", { enumerable: true, get: function() {
    return decode_js_2.decodeXML;
  } });
  Object.defineProperty(exports2, "decodeHTML", { enumerable: true, get: function() {
    return decode_js_2.decodeHTML;
  } });
  Object.defineProperty(exports2, "decodeHTMLStrict", { enumerable: true, get: function() {
    return decode_js_2.decodeHTMLStrict;
  } });
  Object.defineProperty(exports2, "decodeHTML4", { enumerable: true, get: function() {
    return decode_js_2.decodeHTML;
  } });
  Object.defineProperty(exports2, "decodeHTML5", { enumerable: true, get: function() {
    return decode_js_2.decodeHTML;
  } });
  Object.defineProperty(exports2, "decodeHTML4Strict", { enumerable: true, get: function() {
    return decode_js_2.decodeHTMLStrict;
  } });
  Object.defineProperty(exports2, "decodeHTML5Strict", { enumerable: true, get: function() {
    return decode_js_2.decodeHTMLStrict;
  } });
  Object.defineProperty(exports2, "decodeXMLStrict", { enumerable: true, get: function() {
    return decode_js_2.decodeXML;
  } });
})(lib$1);
var foreignNames = {};
Object.defineProperty(foreignNames, "__esModule", { value: true });
foreignNames.attributeNames = foreignNames.elementNames = void 0;
foreignNames.elementNames = new Map([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "textPath"
].map(function(val2) {
  return [val2.toLowerCase(), val2];
}));
foreignNames.attributeNames = new Map([
  "definitionURL",
  "attributeName",
  "attributeType",
  "baseFrequency",
  "baseProfile",
  "calcMode",
  "clipPathUnits",
  "diffuseConstant",
  "edgeMode",
  "filterUnits",
  "glyphRef",
  "gradientTransform",
  "gradientUnits",
  "kernelMatrix",
  "kernelUnitLength",
  "keyPoints",
  "keySplines",
  "keyTimes",
  "lengthAdjust",
  "limitingConeAngle",
  "markerHeight",
  "markerUnits",
  "markerWidth",
  "maskContentUnits",
  "maskUnits",
  "numOctaves",
  "pathLength",
  "patternContentUnits",
  "patternTransform",
  "patternUnits",
  "pointsAtX",
  "pointsAtY",
  "pointsAtZ",
  "preserveAlpha",
  "preserveAspectRatio",
  "primitiveUnits",
  "refX",
  "refY",
  "repeatCount",
  "repeatDur",
  "requiredExtensions",
  "requiredFeatures",
  "specularConstant",
  "specularExponent",
  "spreadMethod",
  "startOffset",
  "stdDeviation",
  "stitchTiles",
  "surfaceScale",
  "systemLanguage",
  "tableValues",
  "targetX",
  "targetY",
  "textLength",
  "viewBox",
  "viewTarget",
  "xChannelSelector",
  "yChannelSelector",
  "zoomAndPan"
].map(function(val2) {
  return [val2.toLowerCase(), val2];
}));
var __assign = commonjsGlobal && commonjsGlobal.__assign || function() {
  __assign = Object.assign || function(t3) {
    for (var s4, i3 = 1, n2 = arguments.length; i3 < n2; i3++) {
      s4 = arguments[i3];
      for (var p2 in s4)
        if (Object.prototype.hasOwnProperty.call(s4, p2))
          t3[p2] = s4[p2];
    }
    return t3;
  };
  return __assign.apply(this, arguments);
};
var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m4, k3, k22) {
  if (k22 === void 0)
    k22 = k3;
  var desc = Object.getOwnPropertyDescriptor(m4, k3);
  if (!desc || ("get" in desc ? !m4.__esModule : desc.writable || desc.configurable)) {
    desc = { enumerable: true, get: function() {
      return m4[k3];
    } };
  }
  Object.defineProperty(o2, k22, desc);
} : function(o2, m4, k3, k22) {
  if (k22 === void 0)
    k22 = k3;
  o2[k22] = m4[k3];
});
var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
  Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
} : function(o2, v2) {
  o2["default"] = v2;
});
var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod2) {
  if (mod2 && mod2.__esModule)
    return mod2;
  var result2 = {};
  if (mod2 != null) {
    for (var k3 in mod2)
      if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k3))
        __createBinding(result2, mod2, k3);
  }
  __setModuleDefault(result2, mod2);
  return result2;
};
Object.defineProperty(lib$2, "__esModule", { value: true });
lib$2.render = void 0;
var ElementType = __importStar(lib$4);
var entities_1 = lib$1;
var foreignNames_js_1 = foreignNames;
var unencodedElements = /* @__PURE__ */ new Set([
  "style",
  "script",
  "xmp",
  "iframe",
  "noembed",
  "noframes",
  "plaintext",
  "noscript"
]);
function replaceQuotes(value2) {
  return value2.replace(/"/g, "&quot;");
}
function formatAttributes(attributes, opts) {
  var _a2;
  if (!attributes)
    return;
  var encode2 = ((_a2 = opts.encodeEntities) !== null && _a2 !== void 0 ? _a2 : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== "utf8" ? entities_1.encodeXML : entities_1.escapeAttribute;
  return Object.keys(attributes).map(function(key2) {
    var _a3, _b2;
    var value2 = (_a3 = attributes[key2]) !== null && _a3 !== void 0 ? _a3 : "";
    if (opts.xmlMode === "foreign") {
      key2 = (_b2 = foreignNames_js_1.attributeNames.get(key2)) !== null && _b2 !== void 0 ? _b2 : key2;
    }
    if (!opts.emptyAttrs && !opts.xmlMode && value2 === "") {
      return key2;
    }
    return "".concat(key2, '="').concat(encode2(value2), '"');
  }).join(" ");
}
var singleTag = /* @__PURE__ */ new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
function render(node2, options) {
  if (options === void 0) {
    options = {};
  }
  var nodes = "length" in node2 ? node2 : [node2];
  var output = "";
  for (var i3 = 0; i3 < nodes.length; i3++) {
    output += renderNode(nodes[i3], options);
  }
  return output;
}
lib$2.render = render;
lib$2.default = render;
function renderNode(node2, options) {
  switch (node2.type) {
    case ElementType.Root:
      return render(node2.children, options);
    case ElementType.Doctype:
    case ElementType.Directive:
      return renderDirective(node2);
    case ElementType.Comment:
      return renderComment(node2);
    case ElementType.CDATA:
      return renderCdata(node2);
    case ElementType.Script:
    case ElementType.Style:
    case ElementType.Tag:
      return renderTag(node2, options);
    case ElementType.Text:
      return renderText(node2, options);
  }
}
var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignObject",
  "desc",
  "title"
]);
var foreignElements = /* @__PURE__ */ new Set(["svg", "math"]);
function renderTag(elem2, opts) {
  var _a2;
  if (opts.xmlMode === "foreign") {
    elem2.name = (_a2 = foreignNames_js_1.elementNames.get(elem2.name)) !== null && _a2 !== void 0 ? _a2 : elem2.name;
    if (elem2.parent && foreignModeIntegrationPoints.has(elem2.parent.name)) {
      opts = __assign(__assign({}, opts), { xmlMode: false });
    }
  }
  if (!opts.xmlMode && foreignElements.has(elem2.name)) {
    opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
  }
  var tag2 = "<".concat(elem2.name);
  var attribs = formatAttributes(elem2.attribs, opts);
  if (attribs) {
    tag2 += " ".concat(attribs);
  }
  if (elem2.children.length === 0 && (opts.xmlMode ? (
    // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
    opts.selfClosingTags !== false
  ) : (
    // User explicitly asked for self-closing tags, even in HTML mode
    opts.selfClosingTags && singleTag.has(elem2.name)
  ))) {
    if (!opts.xmlMode)
      tag2 += " ";
    tag2 += "/>";
  } else {
    tag2 += ">";
    if (elem2.children.length > 0) {
      tag2 += render(elem2.children, opts);
    }
    if (opts.xmlMode || !singleTag.has(elem2.name)) {
      tag2 += "</".concat(elem2.name, ">");
    }
  }
  return tag2;
}
function renderDirective(elem2) {
  return "<".concat(elem2.data, ">");
}
function renderText(elem2, opts) {
  var _a2;
  var data2 = elem2.data || "";
  if (((_a2 = opts.encodeEntities) !== null && _a2 !== void 0 ? _a2 : opts.decodeEntities) !== false && !(!opts.xmlMode && elem2.parent && unencodedElements.has(elem2.parent.name))) {
    data2 = opts.xmlMode || opts.encodeEntities !== "utf8" ? (0, entities_1.encodeXML)(data2) : (0, entities_1.escapeText)(data2);
  }
  return data2;
}
function renderCdata(elem2) {
  return "<![CDATA[".concat(elem2.children[0].data, "]]>");
}
function renderComment(elem2) {
  return "<!--".concat(elem2.data, "-->");
}
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
};
Object.defineProperty(stringify$5, "__esModule", { value: true });
stringify$5.innerText = stringify$5.textContent = stringify$5.getText = stringify$5.getInnerHTML = stringify$5.getOuterHTML = void 0;
var domhandler_1$3 = lib$5;
var dom_serializer_1 = __importDefault(lib$2);
var domelementtype_1 = lib$4;
function getOuterHTML(node2, options) {
  return (0, dom_serializer_1.default)(node2, options);
}
stringify$5.getOuterHTML = getOuterHTML;
function getInnerHTML(node2, options) {
  return (0, domhandler_1$3.hasChildren)(node2) ? node2.children.map(function(node3) {
    return getOuterHTML(node3, options);
  }).join("") : "";
}
stringify$5.getInnerHTML = getInnerHTML;
function getText(node2) {
  if (Array.isArray(node2))
    return node2.map(getText).join("");
  if ((0, domhandler_1$3.isTag)(node2))
    return node2.name === "br" ? "\n" : getText(node2.children);
  if ((0, domhandler_1$3.isCDATA)(node2))
    return getText(node2.children);
  if ((0, domhandler_1$3.isText)(node2))
    return node2.data;
  return "";
}
stringify$5.getText = getText;
function textContent(node2) {
  if (Array.isArray(node2))
    return node2.map(textContent).join("");
  if ((0, domhandler_1$3.hasChildren)(node2) && !(0, domhandler_1$3.isComment)(node2)) {
    return textContent(node2.children);
  }
  if ((0, domhandler_1$3.isText)(node2))
    return node2.data;
  return "";
}
stringify$5.textContent = textContent;
function innerText(node2) {
  if (Array.isArray(node2))
    return node2.map(innerText).join("");
  if ((0, domhandler_1$3.hasChildren)(node2) && (node2.type === domelementtype_1.ElementType.Tag || (0, domhandler_1$3.isCDATA)(node2))) {
    return innerText(node2.children);
  }
  if ((0, domhandler_1$3.isText)(node2))
    return node2.data;
  return "";
}
stringify$5.innerText = innerText;
var traversal = {};
Object.defineProperty(traversal, "__esModule", { value: true });
traversal.prevElementSibling = traversal.nextElementSibling = traversal.getName = traversal.hasAttrib = traversal.getAttributeValue = traversal.getSiblings = traversal.getParent = traversal.getChildren = void 0;
var domhandler_1$2 = lib$5;
function getChildren(elem2) {
  return (0, domhandler_1$2.hasChildren)(elem2) ? elem2.children : [];
}
traversal.getChildren = getChildren;
function getParent(elem2) {
  return elem2.parent || null;
}
traversal.getParent = getParent;
function getSiblings(elem2) {
  var _a2, _b2;
  var parent2 = getParent(elem2);
  if (parent2 != null)
    return getChildren(parent2);
  var siblings = [elem2];
  var prev2 = elem2.prev, next2 = elem2.next;
  while (prev2 != null) {
    siblings.unshift(prev2);
    _a2 = prev2, prev2 = _a2.prev;
  }
  while (next2 != null) {
    siblings.push(next2);
    _b2 = next2, next2 = _b2.next;
  }
  return siblings;
}
traversal.getSiblings = getSiblings;
function getAttributeValue(elem2, name2) {
  var _a2;
  return (_a2 = elem2.attribs) === null || _a2 === void 0 ? void 0 : _a2[name2];
}
traversal.getAttributeValue = getAttributeValue;
function hasAttrib(elem2, name2) {
  return elem2.attribs != null && Object.prototype.hasOwnProperty.call(elem2.attribs, name2) && elem2.attribs[name2] != null;
}
traversal.hasAttrib = hasAttrib;
function getName(elem2) {
  return elem2.name;
}
traversal.getName = getName;
function nextElementSibling(elem2) {
  var _a2;
  var next2 = elem2.next;
  while (next2 !== null && !(0, domhandler_1$2.isTag)(next2))
    _a2 = next2, next2 = _a2.next;
  return next2;
}
traversal.nextElementSibling = nextElementSibling;
function prevElementSibling(elem2) {
  var _a2;
  var prev2 = elem2.prev;
  while (prev2 !== null && !(0, domhandler_1$2.isTag)(prev2))
    _a2 = prev2, prev2 = _a2.prev;
  return prev2;
}
traversal.prevElementSibling = prevElementSibling;
var manipulation = {};
Object.defineProperty(manipulation, "__esModule", { value: true });
manipulation.prepend = manipulation.prependChild = manipulation.append = manipulation.appendChild = manipulation.replaceElement = manipulation.removeElement = void 0;
function removeElement(elem2) {
  if (elem2.prev)
    elem2.prev.next = elem2.next;
  if (elem2.next)
    elem2.next.prev = elem2.prev;
  if (elem2.parent) {
    var childs = elem2.parent.children;
    childs.splice(childs.lastIndexOf(elem2), 1);
  }
}
manipulation.removeElement = removeElement;
function replaceElement(elem2, replacement) {
  var prev2 = replacement.prev = elem2.prev;
  if (prev2) {
    prev2.next = replacement;
  }
  var next2 = replacement.next = elem2.next;
  if (next2) {
    next2.prev = replacement;
  }
  var parent2 = replacement.parent = elem2.parent;
  if (parent2) {
    var childs = parent2.children;
    childs[childs.lastIndexOf(elem2)] = replacement;
    elem2.parent = null;
  }
}
manipulation.replaceElement = replaceElement;
function appendChild(elem2, child) {
  removeElement(child);
  child.next = null;
  child.parent = elem2;
  if (elem2.children.push(child) > 1) {
    var sibling = elem2.children[elem2.children.length - 2];
    sibling.next = child;
    child.prev = sibling;
  } else {
    child.prev = null;
  }
}
manipulation.appendChild = appendChild;
function append(elem2, next2) {
  removeElement(next2);
  var parent2 = elem2.parent;
  var currNext = elem2.next;
  next2.next = currNext;
  next2.prev = elem2;
  elem2.next = next2;
  next2.parent = parent2;
  if (currNext) {
    currNext.prev = next2;
    if (parent2) {
      var childs = parent2.children;
      childs.splice(childs.lastIndexOf(currNext), 0, next2);
    }
  } else if (parent2) {
    parent2.children.push(next2);
  }
}
manipulation.append = append;
function prependChild(elem2, child) {
  removeElement(child);
  child.parent = elem2;
  child.prev = null;
  if (elem2.children.unshift(child) !== 1) {
    var sibling = elem2.children[1];
    sibling.prev = child;
    child.next = sibling;
  } else {
    child.next = null;
  }
}
manipulation.prependChild = prependChild;
function prepend(elem2, prev2) {
  removeElement(prev2);
  var parent2 = elem2.parent;
  if (parent2) {
    var childs = parent2.children;
    childs.splice(childs.indexOf(elem2), 0, prev2);
  }
  if (elem2.prev) {
    elem2.prev.next = prev2;
  }
  prev2.parent = parent2;
  prev2.prev = elem2.prev;
  prev2.next = elem2;
  elem2.prev = prev2;
}
manipulation.prepend = prepend;
var querying = {};
Object.defineProperty(querying, "__esModule", { value: true });
querying.findAll = querying.existsOne = querying.findOne = querying.findOneChild = querying.find = querying.filter = void 0;
var domhandler_1$1 = lib$5;
function filter$1(test, node2, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (limit === void 0) {
    limit = Infinity;
  }
  if (!Array.isArray(node2))
    node2 = [node2];
  return find(test, node2, recurse, limit);
}
querying.filter = filter$1;
function find(test, nodes, recurse, limit) {
  var result2 = [];
  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
    var elem2 = nodes_1[_i];
    if (test(elem2)) {
      result2.push(elem2);
      if (--limit <= 0)
        break;
    }
    if (recurse && (0, domhandler_1$1.hasChildren)(elem2) && elem2.children.length > 0) {
      var children = find(test, elem2.children, recurse, limit);
      result2.push.apply(result2, children);
      limit -= children.length;
      if (limit <= 0)
        break;
    }
  }
  return result2;
}
querying.find = find;
function findOneChild(test, nodes) {
  return nodes.find(test);
}
querying.findOneChild = findOneChild;
function findOne(test, nodes, recurse) {
  if (recurse === void 0) {
    recurse = true;
  }
  var elem2 = null;
  for (var i3 = 0; i3 < nodes.length && !elem2; i3++) {
    var checked = nodes[i3];
    if (!(0, domhandler_1$1.isTag)(checked)) {
      continue;
    } else if (test(checked)) {
      elem2 = checked;
    } else if (recurse && checked.children.length > 0) {
      elem2 = findOne(test, checked.children, true);
    }
  }
  return elem2;
}
querying.findOne = findOne;
function existsOne(test, nodes) {
  return nodes.some(function(checked) {
    return (0, domhandler_1$1.isTag)(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));
  });
}
querying.existsOne = existsOne;
function findAll(test, nodes) {
  var _a2;
  var result2 = [];
  var stack = nodes.filter(domhandler_1$1.isTag);
  var elem2;
  while (elem2 = stack.shift()) {
    var children = (_a2 = elem2.children) === null || _a2 === void 0 ? void 0 : _a2.filter(domhandler_1$1.isTag);
    if (children && children.length > 0) {
      stack.unshift.apply(stack, children);
    }
    if (test(elem2))
      result2.push(elem2);
  }
  return result2;
}
querying.findAll = findAll;
var legacy = {};
Object.defineProperty(legacy, "__esModule", { value: true });
legacy.getElementsByTagType = legacy.getElementsByTagName = legacy.getElementById = legacy.getElements = legacy.testElement = void 0;
var domhandler_1 = lib$5;
var querying_js_1 = querying;
var Checks = {
  tag_name: function(name2) {
    if (typeof name2 === "function") {
      return function(elem2) {
        return (0, domhandler_1.isTag)(elem2) && name2(elem2.name);
      };
    } else if (name2 === "*") {
      return domhandler_1.isTag;
    }
    return function(elem2) {
      return (0, domhandler_1.isTag)(elem2) && elem2.name === name2;
    };
  },
  tag_type: function(type) {
    if (typeof type === "function") {
      return function(elem2) {
        return type(elem2.type);
      };
    }
    return function(elem2) {
      return elem2.type === type;
    };
  },
  tag_contains: function(data2) {
    if (typeof data2 === "function") {
      return function(elem2) {
        return (0, domhandler_1.isText)(elem2) && data2(elem2.data);
      };
    }
    return function(elem2) {
      return (0, domhandler_1.isText)(elem2) && elem2.data === data2;
    };
  }
};
function getAttribCheck(attrib, value2) {
  if (typeof value2 === "function") {
    return function(elem2) {
      return (0, domhandler_1.isTag)(elem2) && value2(elem2.attribs[attrib]);
    };
  }
  return function(elem2) {
    return (0, domhandler_1.isTag)(elem2) && elem2.attribs[attrib] === value2;
  };
}
function combineFuncs(a4, b3) {
  return function(elem2) {
    return a4(elem2) || b3(elem2);
  };
}
function compileTest(options) {
  var funcs = Object.keys(options).map(function(key2) {
    var value2 = options[key2];
    return Object.prototype.hasOwnProperty.call(Checks, key2) ? Checks[key2](value2) : getAttribCheck(key2, value2);
  });
  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
function testElement(options, node2) {
  var test = compileTest(options);
  return test ? test(node2) : true;
}
legacy.testElement = testElement;
function getElements(options, nodes, recurse, limit) {
  if (limit === void 0) {
    limit = Infinity;
  }
  var test = compileTest(options);
  return test ? (0, querying_js_1.filter)(test, nodes, recurse, limit) : [];
}
legacy.getElements = getElements;
function getElementById(id2, nodes, recurse) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (!Array.isArray(nodes))
    nodes = [nodes];
  return (0, querying_js_1.findOne)(getAttribCheck("id", id2), nodes, recurse);
}
legacy.getElementById = getElementById;
function getElementsByTagName(tagName, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (limit === void 0) {
    limit = Infinity;
  }
  return (0, querying_js_1.filter)(Checks["tag_name"](tagName), nodes, recurse, limit);
}
legacy.getElementsByTagName = getElementsByTagName;
function getElementsByTagType(type, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (limit === void 0) {
    limit = Infinity;
  }
  return (0, querying_js_1.filter)(Checks["tag_type"](type), nodes, recurse, limit);
}
legacy.getElementsByTagType = getElementsByTagType;
var helpers = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.uniqueSort = exports2.compareDocumentPosition = exports2.DocumentPosition = exports2.removeSubsets = void 0;
  var domhandler_12 = lib$5;
  function removeSubsets(nodes) {
    var idx = nodes.length;
    while (--idx >= 0) {
      var node2 = nodes[idx];
      if (idx > 0 && nodes.lastIndexOf(node2, idx - 1) >= 0) {
        nodes.splice(idx, 1);
        continue;
      }
      for (var ancestor = node2.parent; ancestor; ancestor = ancestor.parent) {
        if (nodes.includes(ancestor)) {
          nodes.splice(idx, 1);
          break;
        }
      }
    }
    return nodes;
  }
  exports2.removeSubsets = removeSubsets;
  var DocumentPosition;
  (function(DocumentPosition2) {
    DocumentPosition2[DocumentPosition2["DISCONNECTED"] = 1] = "DISCONNECTED";
    DocumentPosition2[DocumentPosition2["PRECEDING"] = 2] = "PRECEDING";
    DocumentPosition2[DocumentPosition2["FOLLOWING"] = 4] = "FOLLOWING";
    DocumentPosition2[DocumentPosition2["CONTAINS"] = 8] = "CONTAINS";
    DocumentPosition2[DocumentPosition2["CONTAINED_BY"] = 16] = "CONTAINED_BY";
  })(DocumentPosition = exports2.DocumentPosition || (exports2.DocumentPosition = {}));
  function compareDocumentPosition(nodeA, nodeB) {
    var aParents = [];
    var bParents = [];
    if (nodeA === nodeB) {
      return 0;
    }
    var current = (0, domhandler_12.hasChildren)(nodeA) ? nodeA : nodeA.parent;
    while (current) {
      aParents.unshift(current);
      current = current.parent;
    }
    current = (0, domhandler_12.hasChildren)(nodeB) ? nodeB : nodeB.parent;
    while (current) {
      bParents.unshift(current);
      current = current.parent;
    }
    var maxIdx = Math.min(aParents.length, bParents.length);
    var idx = 0;
    while (idx < maxIdx && aParents[idx] === bParents[idx]) {
      idx++;
    }
    if (idx === 0) {
      return DocumentPosition.DISCONNECTED;
    }
    var sharedParent = aParents[idx - 1];
    var siblings = sharedParent.children;
    var aSibling = aParents[idx];
    var bSibling = bParents[idx];
    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
      if (sharedParent === nodeB) {
        return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
      }
      return DocumentPosition.FOLLOWING;
    }
    if (sharedParent === nodeA) {
      return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
    }
    return DocumentPosition.PRECEDING;
  }
  exports2.compareDocumentPosition = compareDocumentPosition;
  function uniqueSort(nodes) {
    nodes = nodes.filter(function(node2, i3, arr) {
      return !arr.includes(node2, i3 + 1);
    });
    nodes.sort(function(a4, b3) {
      var relative2 = compareDocumentPosition(a4, b3);
      if (relative2 & DocumentPosition.PRECEDING) {
        return -1;
      } else if (relative2 & DocumentPosition.FOLLOWING) {
        return 1;
      }
      return 0;
    });
    return nodes;
  }
  exports2.uniqueSort = uniqueSort;
})(helpers);
var feeds = {};
Object.defineProperty(feeds, "__esModule", { value: true });
feeds.getFeed = void 0;
var stringify_js_1 = stringify$5;
var legacy_js_1 = legacy;
function getFeed(doc) {
  var feedRoot = getOneElement(isValidFeed, doc);
  return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
}
feeds.getFeed = getFeed;
function getAtomFeed(feedRoot) {
  var _a2;
  var childs = feedRoot.children;
  var feed = {
    type: "atom",
    items: (0, legacy_js_1.getElementsByTagName)("entry", childs).map(function(item) {
      var _a3;
      var children = item.children;
      var entry = { media: getMediaElements(children) };
      addConditionally(entry, "id", "id", children);
      addConditionally(entry, "title", "title", children);
      var href2 = (_a3 = getOneElement("link", children)) === null || _a3 === void 0 ? void 0 : _a3.attribs["href"];
      if (href2) {
        entry.link = href2;
      }
      var description = fetch$1("summary", children) || fetch$1("content", children);
      if (description) {
        entry.description = description;
      }
      var pubDate = fetch$1("updated", children);
      if (pubDate) {
        entry.pubDate = new Date(pubDate);
      }
      return entry;
    })
  };
  addConditionally(feed, "id", "id", childs);
  addConditionally(feed, "title", "title", childs);
  var href = (_a2 = getOneElement("link", childs)) === null || _a2 === void 0 ? void 0 : _a2.attribs["href"];
  if (href) {
    feed.link = href;
  }
  addConditionally(feed, "description", "subtitle", childs);
  var updated = fetch$1("updated", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "email", childs, true);
  return feed;
}
function getRssFeed(feedRoot) {
  var _a2, _b2;
  var childs = (_b2 = (_a2 = getOneElement("channel", feedRoot.children)) === null || _a2 === void 0 ? void 0 : _a2.children) !== null && _b2 !== void 0 ? _b2 : [];
  var feed = {
    type: feedRoot.name.substr(0, 3),
    id: "",
    items: (0, legacy_js_1.getElementsByTagName)("item", feedRoot.children).map(function(item) {
      var children = item.children;
      var entry = { media: getMediaElements(children) };
      addConditionally(entry, "id", "guid", children);
      addConditionally(entry, "title", "title", children);
      addConditionally(entry, "link", "link", children);
      addConditionally(entry, "description", "description", children);
      var pubDate = fetch$1("pubDate", children);
      if (pubDate)
        entry.pubDate = new Date(pubDate);
      return entry;
    })
  };
  addConditionally(feed, "title", "title", childs);
  addConditionally(feed, "link", "link", childs);
  addConditionally(feed, "description", "description", childs);
  var updated = fetch$1("lastBuildDate", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "managingEditor", childs, true);
  return feed;
}
var MEDIA_KEYS_STRING = ["url", "type", "lang"];
var MEDIA_KEYS_INT = [
  "fileSize",
  "bitrate",
  "framerate",
  "samplingrate",
  "channels",
  "duration",
  "height",
  "width"
];
function getMediaElements(where) {
  return (0, legacy_js_1.getElementsByTagName)("media:content", where).map(function(elem2) {
    var attribs = elem2.attribs;
    var media = {
      medium: attribs["medium"],
      isDefault: !!attribs["isDefault"]
    };
    for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
      var attrib = MEDIA_KEYS_STRING_1[_i];
      if (attribs[attrib]) {
        media[attrib] = attribs[attrib];
      }
    }
    for (var _a2 = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a2 < MEDIA_KEYS_INT_1.length; _a2++) {
      var attrib = MEDIA_KEYS_INT_1[_a2];
      if (attribs[attrib]) {
        media[attrib] = parseInt(attribs[attrib], 10);
      }
    }
    if (attribs["expression"]) {
      media.expression = attribs["expression"];
    }
    return media;
  });
}
function getOneElement(tagName, node2) {
  return (0, legacy_js_1.getElementsByTagName)(tagName, node2, true, 1)[0];
}
function fetch$1(tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }
  return (0, stringify_js_1.textContent)((0, legacy_js_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
}
function addConditionally(obj, prop, tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }
  var val2 = fetch$1(tagName, where, recurse);
  if (val2)
    obj[prop] = val2;
}
function isValidFeed(value2) {
  return value2 === "rss" || value2 === "feed" || value2 === "rdf:RDF";
}
(function(exports2) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m4, k3, k22) {
    if (k22 === void 0)
      k22 = k3;
    var desc = Object.getOwnPropertyDescriptor(m4, k3);
    if (!desc || ("get" in desc ? !m4.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m4[k3];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m4, k3, k22) {
    if (k22 === void 0)
      k22 = k3;
    o2[k22] = m4[k3];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m4, exports3) {
    for (var p2 in m4)
      if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p2))
        __createBinding2(exports3, m4, p2);
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.hasChildren = exports2.isDocument = exports2.isComment = exports2.isText = exports2.isCDATA = exports2.isTag = void 0;
  __exportStar(stringify$5, exports2);
  __exportStar(traversal, exports2);
  __exportStar(manipulation, exports2);
  __exportStar(querying, exports2);
  __exportStar(legacy, exports2);
  __exportStar(helpers, exports2);
  __exportStar(feeds, exports2);
  var domhandler_12 = lib$5;
  Object.defineProperty(exports2, "isTag", { enumerable: true, get: function() {
    return domhandler_12.isTag;
  } });
  Object.defineProperty(exports2, "isCDATA", { enumerable: true, get: function() {
    return domhandler_12.isCDATA;
  } });
  Object.defineProperty(exports2, "isText", { enumerable: true, get: function() {
    return domhandler_12.isText;
  } });
  Object.defineProperty(exports2, "isComment", { enumerable: true, get: function() {
    return domhandler_12.isComment;
  } });
  Object.defineProperty(exports2, "isDocument", { enumerable: true, get: function() {
    return domhandler_12.isDocument;
  } });
  Object.defineProperty(exports2, "hasChildren", { enumerable: true, get: function() {
    return domhandler_12.hasChildren;
  } });
})(lib$3);
(function(exports2) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m4, k3, k22) {
    if (k22 === void 0)
      k22 = k3;
    var desc = Object.getOwnPropertyDescriptor(m4, k3);
    if (!desc || ("get" in desc ? !m4.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m4[k3];
      } };
    }
    Object.defineProperty(o2, k22, desc);
  } : function(o2, m4, k3, k22) {
    if (k22 === void 0)
      k22 = k3;
    o2[k22] = m4[k3];
  });
  var __setModuleDefault2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod2) {
    if (mod2 && mod2.__esModule)
      return mod2;
    var result2 = {};
    if (mod2 != null) {
      for (var k3 in mod2)
        if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k3))
          __createBinding2(result2, mod2, k3);
    }
    __setModuleDefault2(result2, mod2);
    return result2;
  };
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
    return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.DefaultHandler = exports2.DomUtils = exports2.parseFeed = exports2.getFeed = exports2.ElementType = exports2.Tokenizer = exports2.createDomStream = exports2.parseDOM = exports2.parseDocument = exports2.DomHandler = exports2.Parser = void 0;
  var Parser_js_1 = Parser$3;
  Object.defineProperty(exports2, "Parser", { enumerable: true, get: function() {
    return Parser_js_1.Parser;
  } });
  var domhandler_12 = lib$5;
  Object.defineProperty(exports2, "DomHandler", { enumerable: true, get: function() {
    return domhandler_12.DomHandler;
  } });
  Object.defineProperty(exports2, "DefaultHandler", { enumerable: true, get: function() {
    return domhandler_12.DomHandler;
  } });
  function parseDocument(data2, options) {
    var handler = new domhandler_12.DomHandler(void 0, options);
    new Parser_js_1.Parser(handler, options).end(data2);
    return handler.root;
  }
  exports2.parseDocument = parseDocument;
  function parseDOM(data2, options) {
    return parseDocument(data2, options).children;
  }
  exports2.parseDOM = parseDOM;
  function createDomStream(cb2, options, elementCb) {
    var handler = new domhandler_12.DomHandler(cb2, options, elementCb);
    return new Parser_js_1.Parser(handler, options);
  }
  exports2.createDomStream = createDomStream;
  var Tokenizer_js_12 = Tokenizer;
  Object.defineProperty(exports2, "Tokenizer", { enumerable: true, get: function() {
    return __importDefault2(Tokenizer_js_12).default;
  } });
  var ElementType2 = __importStar2(lib$4);
  exports2.ElementType = ElementType2;
  var domutils_1 = lib$3;
  Object.defineProperty(exports2, "getFeed", { enumerable: true, get: function() {
    return domutils_1.getFeed;
  } });
  function parseFeed(feed, options) {
    if (options === void 0) {
      options = { xmlMode: true };
    }
    return (0, domutils_1.getFeed)(parseDOM(feed, options));
  }
  exports2.parseFeed = parseFeed;
  exports2.DomUtils = __importStar2(lib$3);
})(lib$6);
var escapeStringRegexp$1 = (string2) => {
  if (typeof string2 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
};
var isPlainObject$3 = {};
Object.defineProperty(isPlainObject$3, "__esModule", { value: true });
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
function isObject$7(o2) {
  return Object.prototype.toString.call(o2) === "[object Object]";
}
function isPlainObject$2(o2) {
  var ctor, prot;
  if (isObject$7(o2) === false)
    return false;
  ctor = o2.constructor;
  if (ctor === void 0)
    return true;
  prot = ctor.prototype;
  if (isObject$7(prot) === false)
    return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}
isPlainObject$3.isPlainObject = isPlainObject$2;
var isMergeableObject$1 = function isMergeableObject2(value2) {
  return isNonNullObject$1(value2) && !isSpecial$1(value2);
};
function isNonNullObject$1(value2) {
  return !!value2 && typeof value2 === "object";
}
function isSpecial$1(value2) {
  var stringValue = Object.prototype.toString.call(value2);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement$1(value2);
}
var canUseSymbol$1 = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE$1 = canUseSymbol$1 ? Symbol.for("react.element") : 60103;
function isReactElement$1(value2) {
  return value2.$$typeof === REACT_ELEMENT_TYPE$1;
}
function emptyTarget$1(val2) {
  return Array.isArray(val2) ? [] : {};
}
function cloneUnlessOtherwiseSpecified$1(value2, options) {
  return options.clone !== false && options.isMergeableObject(value2) ? deepmerge$2(emptyTarget$1(value2), value2, options) : value2;
}
function defaultArrayMerge$1(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified$1(element, options);
  });
}
function getMergeFunction(key2, options) {
  if (!options.customMerge) {
    return deepmerge$2;
  }
  var customMerge = options.customMerge(key2);
  return typeof customMerge === "function" ? customMerge : deepmerge$2;
}
function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    return Object.propertyIsEnumerable.call(target, symbol);
  }) : [];
}
function getKeys$1(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object2, property2) {
  try {
    return property2 in object2;
  } catch (_2) {
    return false;
  }
}
function propertyIsUnsafe(target, key2) {
  return propertyIsOnObject(target, key2) && !(Object.hasOwnProperty.call(target, key2) && Object.propertyIsEnumerable.call(target, key2));
}
function mergeObject$1(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    getKeys$1(target).forEach(function(key2) {
      destination[key2] = cloneUnlessOtherwiseSpecified$1(target[key2], options);
    });
  }
  getKeys$1(source).forEach(function(key2) {
    if (propertyIsUnsafe(target, key2)) {
      return;
    }
    if (propertyIsOnObject(target, key2) && options.isMergeableObject(source[key2])) {
      destination[key2] = getMergeFunction(key2, options)(target[key2], source[key2], options);
    } else {
      destination[key2] = cloneUnlessOtherwiseSpecified$1(source[key2], options);
    }
  });
  return destination;
}
function deepmerge$2(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge$1;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject$1;
  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified$1;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified$1(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject$1(target, source, options);
  }
}
deepmerge$2.all = function deepmergeAll(array2, options) {
  if (!Array.isArray(array2)) {
    throw new Error("first argument should be an array");
  }
  return array2.reduce(function(prev2, next2) {
    return deepmerge$2(prev2, next2, options);
  }, {});
};
var deepmerge_1$1 = deepmerge$2;
var cjs = deepmerge_1$1;
var parseSrcset$1 = { exports: {} };
(function(module2) {
  (function(root2, factory) {
    if (module2.exports) {
      module2.exports = factory();
    } else {
      root2.parseSrcset = factory();
    }
  })(commonjsGlobal, function() {
    return function(input2) {
      function isSpace(c8) {
        return c8 === " " || // space
        c8 === "	" || // horizontal tab
        c8 === "\n" || // new line
        c8 === "\f" || // form feed
        c8 === "\r";
      }
      function collectCharacters(regEx) {
        var chars, match2 = regEx.exec(input2.substring(pos));
        if (match2) {
          chars = match2[0];
          pos += chars.length;
          return chars;
        }
      }
      var inputLength = input2.length, regexLeadingSpaces = /^[ \t\n\r\u000c]+/, regexLeadingCommasOrSpaces = /^[, \t\n\r\u000c]+/, regexLeadingNotSpaces = /^[^ \t\n\r\u000c]+/, regexTrailingCommas = /[,]+$/, regexNonNegativeInteger = /^\d+$/, regexFloatingPoint = /^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/, url, descriptors, currentDescriptor, state, c7, pos = 0, candidates = [];
      while (true) {
        collectCharacters(regexLeadingCommasOrSpaces);
        if (pos >= inputLength) {
          return candidates;
        }
        url = collectCharacters(regexLeadingNotSpaces);
        descriptors = [];
        if (url.slice(-1) === ",") {
          url = url.replace(regexTrailingCommas, "");
          parseDescriptors();
        } else {
          tokenize2();
        }
      }
      function tokenize2() {
        collectCharacters(regexLeadingSpaces);
        currentDescriptor = "";
        state = "in descriptor";
        while (true) {
          c7 = input2.charAt(pos);
          if (state === "in descriptor") {
            if (isSpace(c7)) {
              if (currentDescriptor) {
                descriptors.push(currentDescriptor);
                currentDescriptor = "";
                state = "after descriptor";
              }
            } else if (c7 === ",") {
              pos += 1;
              if (currentDescriptor) {
                descriptors.push(currentDescriptor);
              }
              parseDescriptors();
              return;
            } else if (c7 === "(") {
              currentDescriptor = currentDescriptor + c7;
              state = "in parens";
            } else if (c7 === "") {
              if (currentDescriptor) {
                descriptors.push(currentDescriptor);
              }
              parseDescriptors();
              return;
            } else {
              currentDescriptor = currentDescriptor + c7;
            }
          } else if (state === "in parens") {
            if (c7 === ")") {
              currentDescriptor = currentDescriptor + c7;
              state = "in descriptor";
            } else if (c7 === "") {
              descriptors.push(currentDescriptor);
              parseDescriptors();
              return;
            } else {
              currentDescriptor = currentDescriptor + c7;
            }
          } else if (state === "after descriptor") {
            if (isSpace(c7))
              ;
            else if (c7 === "") {
              parseDescriptors();
              return;
            } else {
              state = "in descriptor";
              pos -= 1;
            }
          }
          pos += 1;
        }
      }
      function parseDescriptors() {
        var pError = false, w3, d4, h4, i3, candidate = {}, desc, lastChar, value2, intVal, floatVal;
        for (i3 = 0; i3 < descriptors.length; i3++) {
          desc = descriptors[i3];
          lastChar = desc[desc.length - 1];
          value2 = desc.substring(0, desc.length - 1);
          intVal = parseInt(value2, 10);
          floatVal = parseFloat(value2);
          if (regexNonNegativeInteger.test(value2) && lastChar === "w") {
            if (w3 || d4) {
              pError = true;
            }
            if (intVal === 0) {
              pError = true;
            } else {
              w3 = intVal;
            }
          } else if (regexFloatingPoint.test(value2) && lastChar === "x") {
            if (w3 || d4 || h4) {
              pError = true;
            }
            if (floatVal < 0) {
              pError = true;
            } else {
              d4 = floatVal;
            }
          } else if (regexNonNegativeInteger.test(value2) && lastChar === "h") {
            if (h4 || d4) {
              pError = true;
            }
            if (intVal === 0) {
              pError = true;
            } else {
              h4 = intVal;
            }
          } else {
            pError = true;
          }
        }
        if (!pError) {
          candidate.url = url;
          if (w3) {
            candidate.w = w3;
          }
          if (d4) {
            candidate.d = d4;
          }
          if (h4) {
            candidate.h = h4;
          }
          candidates.push(candidate);
        } else if (console && console.log) {
          console.log("Invalid srcset descriptor found in '" + input2 + "' at '" + desc + "'.");
        }
      }
    };
  });
})(parseSrcset$1);
var parseSrcsetExports = parseSrcset$1.exports;
var picocolors_browser = { exports: {} };
var x$1 = String;
var create$2 = function() {
  return { isColorSupported: false, reset: x$1, bold: x$1, dim: x$1, italic: x$1, underline: x$1, inverse: x$1, hidden: x$1, strikethrough: x$1, black: x$1, red: x$1, green: x$1, yellow: x$1, blue: x$1, magenta: x$1, cyan: x$1, white: x$1, gray: x$1, bgBlack: x$1, bgRed: x$1, bgGreen: x$1, bgYellow: x$1, bgBlue: x$1, bgMagenta: x$1, bgCyan: x$1, bgWhite: x$1 };
};
picocolors_browser.exports = create$2();
picocolors_browser.exports.createColors = create$2;
var picocolors_browserExports = picocolors_browser.exports;
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$2 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
let pico = picocolors_browserExports;
let terminalHighlight$1 = require$$2;
let CssSyntaxError$3 = class CssSyntaxError2 extends Error {
  constructor(message, line2, column2, source, file, plugin2) {
    super(message);
    this.name = "CssSyntaxError";
    this.reason = message;
    if (file) {
      this.file = file;
    }
    if (source) {
      this.source = source;
    }
    if (plugin2) {
      this.plugin = plugin2;
    }
    if (typeof line2 !== "undefined" && typeof column2 !== "undefined") {
      if (typeof line2 === "number") {
        this.line = line2;
        this.column = column2;
      } else {
        this.line = line2.line;
        this.column = line2.column;
        this.endLine = column2.line;
        this.endColumn = column2.column;
      }
    }
    this.setMessage();
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, CssSyntaxError2);
    }
  }
  setMessage() {
    this.message = this.plugin ? this.plugin + ": " : "";
    this.message += this.file ? this.file : "<css input>";
    if (typeof this.line !== "undefined") {
      this.message += ":" + this.line + ":" + this.column;
    }
    this.message += ": " + this.reason;
  }
  showSourceCode(color2) {
    if (!this.source)
      return "";
    let css2 = this.source;
    if (color2 == null)
      color2 = pico.isColorSupported;
    if (terminalHighlight$1) {
      if (color2)
        css2 = terminalHighlight$1(css2);
    }
    let lines = css2.split(/\r?\n/);
    let start2 = Math.max(this.line - 3, 0);
    let end = Math.min(this.line + 2, lines.length);
    let maxWidth2 = String(end).length;
    let mark, aside;
    if (color2) {
      let { bold, gray, red: red2 } = pico.createColors(true);
      mark = (text2) => bold(red2(text2));
      aside = (text2) => gray(text2);
    } else {
      mark = aside = (str) => str;
    }
    return lines.slice(start2, end).map((line2, index2) => {
      let number2 = start2 + 1 + index2;
      let gutter = " " + (" " + number2).slice(-maxWidth2) + " | ";
      if (number2 === this.line) {
        let spacing = aside(gutter.replace(/\d/g, " ")) + line2.slice(0, this.column - 1).replace(/[^\t]/g, " ");
        return mark(">") + aside(gutter) + line2 + "\n " + spacing + mark("^");
      }
      return " " + aside(gutter) + line2;
    }).join("\n");
  }
  toString() {
    let code = this.showSourceCode();
    if (code) {
      code = "\n\n" + code + "\n";
    }
    return this.name + ": " + this.message + code;
  }
};
var cssSyntaxError = CssSyntaxError$3;
CssSyntaxError$3.default = CssSyntaxError$3;
var symbols = {};
symbols.isClean = Symbol("isClean");
symbols.my = Symbol("my");
const DEFAULT_RAW = {
  after: "\n",
  beforeClose: "\n",
  beforeComment: "\n",
  beforeDecl: "\n",
  beforeOpen: " ",
  beforeRule: "\n",
  colon: ": ",
  commentLeft: " ",
  commentRight: " ",
  emptyBody: "",
  indent: "    ",
  semicolon: false
};
function capitalize$2(str) {
  return str[0].toUpperCase() + str.slice(1);
}
let Stringifier$2 = class Stringifier2 {
  constructor(builder) {
    this.builder = builder;
  }
  atrule(node2, semicolon) {
    let name2 = "@" + node2.name;
    let params = node2.params ? this.rawValue(node2, "params") : "";
    if (typeof node2.raws.afterName !== "undefined") {
      name2 += node2.raws.afterName;
    } else if (params) {
      name2 += " ";
    }
    if (node2.nodes) {
      this.block(node2, name2 + params);
    } else {
      let end = (node2.raws.between || "") + (semicolon ? ";" : "");
      this.builder(name2 + params + end, node2);
    }
  }
  beforeAfter(node2, detect) {
    let value2;
    if (node2.type === "decl") {
      value2 = this.raw(node2, null, "beforeDecl");
    } else if (node2.type === "comment") {
      value2 = this.raw(node2, null, "beforeComment");
    } else if (detect === "before") {
      value2 = this.raw(node2, null, "beforeRule");
    } else {
      value2 = this.raw(node2, null, "beforeClose");
    }
    let buf = node2.parent;
    let depth = 0;
    while (buf && buf.type !== "root") {
      depth += 1;
      buf = buf.parent;
    }
    if (value2.includes("\n")) {
      let indent = this.raw(node2, null, "indent");
      if (indent.length) {
        for (let step = 0; step < depth; step++)
          value2 += indent;
      }
    }
    return value2;
  }
  block(node2, start2) {
    let between = this.raw(node2, "between", "beforeOpen");
    this.builder(start2 + between + "{", node2, "start");
    let after;
    if (node2.nodes && node2.nodes.length) {
      this.body(node2);
      after = this.raw(node2, "after");
    } else {
      after = this.raw(node2, "after", "emptyBody");
    }
    if (after)
      this.builder(after);
    this.builder("}", node2, "end");
  }
  body(node2) {
    let last = node2.nodes.length - 1;
    while (last > 0) {
      if (node2.nodes[last].type !== "comment")
        break;
      last -= 1;
    }
    let semicolon = this.raw(node2, "semicolon");
    for (let i3 = 0; i3 < node2.nodes.length; i3++) {
      let child = node2.nodes[i3];
      let before = this.raw(child, "before");
      if (before)
        this.builder(before);
      this.stringify(child, last !== i3 || semicolon);
    }
  }
  comment(node2) {
    let left = this.raw(node2, "left", "commentLeft");
    let right = this.raw(node2, "right", "commentRight");
    this.builder("/*" + left + node2.text + right + "*/", node2);
  }
  decl(node2, semicolon) {
    let between = this.raw(node2, "between", "colon");
    let string2 = node2.prop + between + this.rawValue(node2, "value");
    if (node2.important) {
      string2 += node2.raws.important || " !important";
    }
    if (semicolon)
      string2 += ";";
    this.builder(string2, node2);
  }
  document(node2) {
    this.body(node2);
  }
  raw(node2, own, detect) {
    let value2;
    if (!detect)
      detect = own;
    if (own) {
      value2 = node2.raws[own];
      if (typeof value2 !== "undefined")
        return value2;
    }
    let parent2 = node2.parent;
    if (detect === "before") {
      if (!parent2 || parent2.type === "root" && parent2.first === node2) {
        return "";
      }
      if (parent2 && parent2.type === "document") {
        return "";
      }
    }
    if (!parent2)
      return DEFAULT_RAW[detect];
    let root2 = node2.root();
    if (!root2.rawCache)
      root2.rawCache = {};
    if (typeof root2.rawCache[detect] !== "undefined") {
      return root2.rawCache[detect];
    }
    if (detect === "before" || detect === "after") {
      return this.beforeAfter(node2, detect);
    } else {
      let method = "raw" + capitalize$2(detect);
      if (this[method]) {
        value2 = this[method](root2, node2);
      } else {
        root2.walk((i3) => {
          value2 = i3.raws[own];
          if (typeof value2 !== "undefined")
            return false;
        });
      }
    }
    if (typeof value2 === "undefined")
      value2 = DEFAULT_RAW[detect];
    root2.rawCache[detect] = value2;
    return value2;
  }
  rawBeforeClose(root2) {
    let value2;
    root2.walk((i3) => {
      if (i3.nodes && i3.nodes.length > 0) {
        if (typeof i3.raws.after !== "undefined") {
          value2 = i3.raws.after;
          if (value2.includes("\n")) {
            value2 = value2.replace(/[^\n]+$/, "");
          }
          return false;
        }
      }
    });
    if (value2)
      value2 = value2.replace(/\S/g, "");
    return value2;
  }
  rawBeforeComment(root2, node2) {
    let value2;
    root2.walkComments((i3) => {
      if (typeof i3.raws.before !== "undefined") {
        value2 = i3.raws.before;
        if (value2.includes("\n")) {
          value2 = value2.replace(/[^\n]+$/, "");
        }
        return false;
      }
    });
    if (typeof value2 === "undefined") {
      value2 = this.raw(node2, null, "beforeDecl");
    } else if (value2) {
      value2 = value2.replace(/\S/g, "");
    }
    return value2;
  }
  rawBeforeDecl(root2, node2) {
    let value2;
    root2.walkDecls((i3) => {
      if (typeof i3.raws.before !== "undefined") {
        value2 = i3.raws.before;
        if (value2.includes("\n")) {
          value2 = value2.replace(/[^\n]+$/, "");
        }
        return false;
      }
    });
    if (typeof value2 === "undefined") {
      value2 = this.raw(node2, null, "beforeRule");
    } else if (value2) {
      value2 = value2.replace(/\S/g, "");
    }
    return value2;
  }
  rawBeforeOpen(root2) {
    let value2;
    root2.walk((i3) => {
      if (i3.type !== "decl") {
        value2 = i3.raws.between;
        if (typeof value2 !== "undefined")
          return false;
      }
    });
    return value2;
  }
  rawBeforeRule(root2) {
    let value2;
    root2.walk((i3) => {
      if (i3.nodes && (i3.parent !== root2 || root2.first !== i3)) {
        if (typeof i3.raws.before !== "undefined") {
          value2 = i3.raws.before;
          if (value2.includes("\n")) {
            value2 = value2.replace(/[^\n]+$/, "");
          }
          return false;
        }
      }
    });
    if (value2)
      value2 = value2.replace(/\S/g, "");
    return value2;
  }
  rawColon(root2) {
    let value2;
    root2.walkDecls((i3) => {
      if (typeof i3.raws.between !== "undefined") {
        value2 = i3.raws.between.replace(/[^\s:]/g, "");
        return false;
      }
    });
    return value2;
  }
  rawEmptyBody(root2) {
    let value2;
    root2.walk((i3) => {
      if (i3.nodes && i3.nodes.length === 0) {
        value2 = i3.raws.after;
        if (typeof value2 !== "undefined")
          return false;
      }
    });
    return value2;
  }
  rawIndent(root2) {
    if (root2.raws.indent)
      return root2.raws.indent;
    let value2;
    root2.walk((i3) => {
      let p2 = i3.parent;
      if (p2 && p2 !== root2 && p2.parent && p2.parent === root2) {
        if (typeof i3.raws.before !== "undefined") {
          let parts = i3.raws.before.split("\n");
          value2 = parts[parts.length - 1];
          value2 = value2.replace(/\S/g, "");
          return false;
        }
      }
    });
    return value2;
  }
  rawSemicolon(root2) {
    let value2;
    root2.walk((i3) => {
      if (i3.nodes && i3.nodes.length && i3.last.type === "decl") {
        value2 = i3.raws.semicolon;
        if (typeof value2 !== "undefined")
          return false;
      }
    });
    return value2;
  }
  rawValue(node2, prop) {
    let value2 = node2[prop];
    let raw = node2.raws[prop];
    if (raw && raw.value === value2) {
      return raw.raw;
    }
    return value2;
  }
  root(node2) {
    this.body(node2);
    if (node2.raws.after)
      this.builder(node2.raws.after);
  }
  rule(node2) {
    this.block(node2, this.rawValue(node2, "selector"));
    if (node2.raws.ownSemicolon) {
      this.builder(node2.raws.ownSemicolon, node2, "end");
    }
  }
  stringify(node2, semicolon) {
    if (!this[node2.type]) {
      throw new Error(
        "Unknown AST node type " + node2.type + ". Maybe you need to change PostCSS stringifier."
      );
    }
    this[node2.type](node2, semicolon);
  }
};
var stringifier = Stringifier$2;
Stringifier$2.default = Stringifier$2;
let Stringifier$1 = stringifier;
function stringify$4(node2, builder) {
  let str = new Stringifier$1(builder);
  str.stringify(node2);
}
var stringify_1 = stringify$4;
stringify$4.default = stringify$4;
let { isClean: isClean$2, my: my$2 } = symbols;
let CssSyntaxError$2 = cssSyntaxError;
let Stringifier = stringifier;
let stringify$3 = stringify_1;
function cloneNode(obj, parent2) {
  let cloned = new obj.constructor();
  for (let i3 in obj) {
    if (!Object.prototype.hasOwnProperty.call(obj, i3)) {
      continue;
    }
    if (i3 === "proxyCache")
      continue;
    let value2 = obj[i3];
    let type = typeof value2;
    if (i3 === "parent" && type === "object") {
      if (parent2)
        cloned[i3] = parent2;
    } else if (i3 === "source") {
      cloned[i3] = value2;
    } else if (Array.isArray(value2)) {
      cloned[i3] = value2.map((j2) => cloneNode(j2, cloned));
    } else {
      if (type === "object" && value2 !== null)
        value2 = cloneNode(value2);
      cloned[i3] = value2;
    }
  }
  return cloned;
}
let Node$4 = class Node2 {
  constructor(defaults2 = {}) {
    this.raws = {};
    this[isClean$2] = false;
    this[my$2] = true;
    for (let name2 in defaults2) {
      if (name2 === "nodes") {
        this.nodes = [];
        for (let node2 of defaults2[name2]) {
          if (typeof node2.clone === "function") {
            this.append(node2.clone());
          } else {
            this.append(node2);
          }
        }
      } else {
        this[name2] = defaults2[name2];
      }
    }
  }
  addToError(error) {
    error.postcssNode = this;
    if (error.stack && this.source && /\n\s{4}at /.test(error.stack)) {
      let s4 = this.source;
      error.stack = error.stack.replace(
        /\n\s{4}at /,
        "$&".concat(s4.input.from, ":").concat(s4.start.line, ":").concat(s4.start.column, "$&")
      );
    }
    return error;
  }
  after(add2) {
    this.parent.insertAfter(this, add2);
    return this;
  }
  assign(overrides = {}) {
    for (let name2 in overrides) {
      this[name2] = overrides[name2];
    }
    return this;
  }
  before(add2) {
    this.parent.insertBefore(this, add2);
    return this;
  }
  cleanRaws(keepBetween) {
    delete this.raws.before;
    delete this.raws.after;
    if (!keepBetween)
      delete this.raws.between;
  }
  clone(overrides = {}) {
    let cloned = cloneNode(this);
    for (let name2 in overrides) {
      cloned[name2] = overrides[name2];
    }
    return cloned;
  }
  cloneAfter(overrides = {}) {
    let cloned = this.clone(overrides);
    this.parent.insertAfter(this, cloned);
    return cloned;
  }
  cloneBefore(overrides = {}) {
    let cloned = this.clone(overrides);
    this.parent.insertBefore(this, cloned);
    return cloned;
  }
  error(message, opts = {}) {
    if (this.source) {
      let { end, start: start2 } = this.rangeBy(opts);
      return this.source.input.error(
        message,
        { column: start2.column, line: start2.line },
        { column: end.column, line: end.line },
        opts
      );
    }
    return new CssSyntaxError$2(message);
  }
  getProxyProcessor() {
    return {
      get(node2, prop) {
        if (prop === "proxyOf") {
          return node2;
        } else if (prop === "root") {
          return () => node2.root().toProxy();
        } else {
          return node2[prop];
        }
      },
      set(node2, prop, value2) {
        if (node2[prop] === value2)
          return true;
        node2[prop] = value2;
        if (prop === "prop" || prop === "value" || prop === "name" || prop === "params" || prop === "important" || /* c8 ignore next */
        prop === "text") {
          node2.markDirty();
        }
        return true;
      }
    };
  }
  markDirty() {
    if (this[isClean$2]) {
      this[isClean$2] = false;
      let next2 = this;
      while (next2 = next2.parent) {
        next2[isClean$2] = false;
      }
    }
  }
  next() {
    if (!this.parent)
      return void 0;
    let index2 = this.parent.index(this);
    return this.parent.nodes[index2 + 1];
  }
  positionBy(opts, stringRepresentation) {
    let pos = this.source.start;
    if (opts.index) {
      pos = this.positionInside(opts.index, stringRepresentation);
    } else if (opts.word) {
      stringRepresentation = this.toString();
      let index2 = stringRepresentation.indexOf(opts.word);
      if (index2 !== -1)
        pos = this.positionInside(index2, stringRepresentation);
    }
    return pos;
  }
  positionInside(index2, stringRepresentation) {
    let string2 = stringRepresentation || this.toString();
    let column2 = this.source.start.column;
    let line2 = this.source.start.line;
    for (let i3 = 0; i3 < index2; i3++) {
      if (string2[i3] === "\n") {
        column2 = 1;
        line2 += 1;
      } else {
        column2 += 1;
      }
    }
    return { column: column2, line: line2 };
  }
  prev() {
    if (!this.parent)
      return void 0;
    let index2 = this.parent.index(this);
    return this.parent.nodes[index2 - 1];
  }
  rangeBy(opts) {
    let start2 = {
      column: this.source.start.column,
      line: this.source.start.line
    };
    let end = this.source.end ? {
      column: this.source.end.column + 1,
      line: this.source.end.line
    } : {
      column: start2.column + 1,
      line: start2.line
    };
    if (opts.word) {
      let stringRepresentation = this.toString();
      let index2 = stringRepresentation.indexOf(opts.word);
      if (index2 !== -1) {
        start2 = this.positionInside(index2, stringRepresentation);
        end = this.positionInside(index2 + opts.word.length, stringRepresentation);
      }
    } else {
      if (opts.start) {
        start2 = {
          column: opts.start.column,
          line: opts.start.line
        };
      } else if (opts.index) {
        start2 = this.positionInside(opts.index);
      }
      if (opts.end) {
        end = {
          column: opts.end.column,
          line: opts.end.line
        };
      } else if (opts.endIndex) {
        end = this.positionInside(opts.endIndex);
      } else if (opts.index) {
        end = this.positionInside(opts.index + 1);
      }
    }
    if (end.line < start2.line || end.line === start2.line && end.column <= start2.column) {
      end = { column: start2.column + 1, line: start2.line };
    }
    return { end, start: start2 };
  }
  raw(prop, defaultType) {
    let str = new Stringifier();
    return str.raw(this, prop, defaultType);
  }
  remove() {
    if (this.parent) {
      this.parent.removeChild(this);
    }
    this.parent = void 0;
    return this;
  }
  replaceWith(...nodes) {
    if (this.parent) {
      let bookmark = this;
      let foundSelf = false;
      for (let node2 of nodes) {
        if (node2 === this) {
          foundSelf = true;
        } else if (foundSelf) {
          this.parent.insertAfter(bookmark, node2);
          bookmark = node2;
        } else {
          this.parent.insertBefore(bookmark, node2);
        }
      }
      if (!foundSelf) {
        this.remove();
      }
    }
    return this;
  }
  root() {
    let result2 = this;
    while (result2.parent && result2.parent.type !== "document") {
      result2 = result2.parent;
    }
    return result2;
  }
  toJSON(_2, inputs) {
    let fixed = {};
    let emitInputs = inputs == null;
    inputs = inputs || /* @__PURE__ */ new Map();
    let inputsNextIndex = 0;
    for (let name2 in this) {
      if (!Object.prototype.hasOwnProperty.call(this, name2)) {
        continue;
      }
      if (name2 === "parent" || name2 === "proxyCache")
        continue;
      let value2 = this[name2];
      if (Array.isArray(value2)) {
        fixed[name2] = value2.map((i3) => {
          if (typeof i3 === "object" && i3.toJSON) {
            return i3.toJSON(null, inputs);
          } else {
            return i3;
          }
        });
      } else if (typeof value2 === "object" && value2.toJSON) {
        fixed[name2] = value2.toJSON(null, inputs);
      } else if (name2 === "source") {
        let inputId = inputs.get(value2.input);
        if (inputId == null) {
          inputId = inputsNextIndex;
          inputs.set(value2.input, inputsNextIndex);
          inputsNextIndex++;
        }
        fixed[name2] = {
          end: value2.end,
          inputId,
          start: value2.start
        };
      } else {
        fixed[name2] = value2;
      }
    }
    if (emitInputs) {
      fixed.inputs = [...inputs.keys()].map((input2) => input2.toJSON());
    }
    return fixed;
  }
  toProxy() {
    if (!this.proxyCache) {
      this.proxyCache = new Proxy(this, this.getProxyProcessor());
    }
    return this.proxyCache;
  }
  toString(stringifier2 = stringify$3) {
    if (stringifier2.stringify)
      stringifier2 = stringifier2.stringify;
    let result2 = "";
    stringifier2(this, (i3) => {
      result2 += i3;
    });
    return result2;
  }
  warn(result2, text2, opts) {
    let data2 = { node: this };
    for (let i3 in opts)
      data2[i3] = opts[i3];
    return result2.warn(text2, data2);
  }
  get proxyOf() {
    return this;
  }
};
var node = Node$4;
Node$4.default = Node$4;
let Node$3 = node;
let Declaration$4 = class Declaration2 extends Node$3 {
  constructor(defaults2) {
    if (defaults2 && typeof defaults2.value !== "undefined" && typeof defaults2.value !== "string") {
      defaults2 = { ...defaults2, value: String(defaults2.value) };
    }
    super(defaults2);
    this.type = "decl";
  }
  get variable() {
    return this.prop.startsWith("--") || this.prop[0] === "$";
  }
};
var declaration = Declaration$4;
Declaration$4.default = Declaration$4;
let urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
let customAlphabet = (alphabet, defaultSize = 21) => {
  return (size = defaultSize) => {
    let id2 = "";
    let i3 = size;
    while (i3--) {
      id2 += alphabet[Math.random() * alphabet.length | 0];
    }
    return id2;
  };
};
let nanoid$1 = (size = 21) => {
  let id2 = "";
  let i3 = size;
  while (i3--) {
    id2 += urlAlphabet[Math.random() * 64 | 0];
  }
  return id2;
};
var nonSecure = { nanoid: nanoid$1, customAlphabet };
let { SourceMapConsumer: SourceMapConsumer$2, SourceMapGenerator: SourceMapGenerator$2 } = require$$2;
let { existsSync, readFileSync } = require$$2;
let { dirname: dirname$1, join } = require$$2;
function fromBase64(str) {
  if (Buffer) {
    return Buffer.from(str, "base64").toString();
  } else {
    return window.atob(str);
  }
}
let PreviousMap$2 = class PreviousMap2 {
  constructor(css2, opts) {
    if (opts.map === false)
      return;
    this.loadAnnotation(css2);
    this.inline = this.startWith(this.annotation, "data:");
    let prev2 = opts.map ? opts.map.prev : void 0;
    let text2 = this.loadMap(opts.from, prev2);
    if (!this.mapFile && opts.from) {
      this.mapFile = opts.from;
    }
    if (this.mapFile)
      this.root = dirname$1(this.mapFile);
    if (text2)
      this.text = text2;
  }
  consumer() {
    if (!this.consumerCache) {
      this.consumerCache = new SourceMapConsumer$2(this.text);
    }
    return this.consumerCache;
  }
  decodeInline(text2) {
    let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
    let baseUri = /^data:application\/json;base64,/;
    let charsetUri = /^data:application\/json;charset=utf-?8,/;
    let uri = /^data:application\/json,/;
    if (charsetUri.test(text2) || uri.test(text2)) {
      return decodeURIComponent(text2.substr(RegExp.lastMatch.length));
    }
    if (baseCharsetUri.test(text2) || baseUri.test(text2)) {
      return fromBase64(text2.substr(RegExp.lastMatch.length));
    }
    let encoding = text2.match(/data:application\/json;([^,]+),/)[1];
    throw new Error("Unsupported source map encoding " + encoding);
  }
  getAnnotationURL(sourceMapString) {
    return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, "").trim();
  }
  isMap(map2) {
    if (typeof map2 !== "object")
      return false;
    return typeof map2.mappings === "string" || typeof map2._mappings === "string" || Array.isArray(map2.sections);
  }
  loadAnnotation(css2) {
    let comments = css2.match(/\/\*\s*# sourceMappingURL=/gm);
    if (!comments)
      return;
    let start2 = css2.lastIndexOf(comments.pop());
    let end = css2.indexOf("*/", start2);
    if (start2 > -1 && end > -1) {
      this.annotation = this.getAnnotationURL(css2.substring(start2, end));
    }
  }
  loadFile(path) {
    this.root = dirname$1(path);
    if (existsSync(path)) {
      this.mapFile = path;
      return readFileSync(path, "utf-8").toString().trim();
    }
  }
  loadMap(file, prev2) {
    if (prev2 === false)
      return false;
    if (prev2) {
      if (typeof prev2 === "string") {
        return prev2;
      } else if (typeof prev2 === "function") {
        let prevPath = prev2(file);
        if (prevPath) {
          let map2 = this.loadFile(prevPath);
          if (!map2) {
            throw new Error(
              "Unable to load previous source map: " + prevPath.toString()
            );
          }
          return map2;
        }
      } else if (prev2 instanceof SourceMapConsumer$2) {
        return SourceMapGenerator$2.fromSourceMap(prev2).toString();
      } else if (prev2 instanceof SourceMapGenerator$2) {
        return prev2.toString();
      } else if (this.isMap(prev2)) {
        return JSON.stringify(prev2);
      } else {
        throw new Error(
          "Unsupported previous source map format: " + prev2.toString()
        );
      }
    } else if (this.inline) {
      return this.decodeInline(this.annotation);
    } else if (this.annotation) {
      let map2 = this.annotation;
      if (file)
        map2 = join(dirname$1(file), map2);
      return this.loadFile(map2);
    }
  }
  startWith(string2, start2) {
    if (!string2)
      return false;
    return string2.substr(0, start2.length) === start2;
  }
  withContent() {
    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
  }
};
var previousMap = PreviousMap$2;
PreviousMap$2.default = PreviousMap$2;
let { SourceMapConsumer: SourceMapConsumer$1, SourceMapGenerator: SourceMapGenerator$1 } = require$$2;
let { fileURLToPath, pathToFileURL: pathToFileURL$1 } = require$$2;
let { isAbsolute, resolve: resolve$1 } = require$$2;
let { nanoid } = nonSecure;
let terminalHighlight = require$$2;
let CssSyntaxError$1 = cssSyntaxError;
let PreviousMap$1 = previousMap;
let fromOffsetCache = Symbol("fromOffsetCache");
let sourceMapAvailable$1 = Boolean(SourceMapConsumer$1 && SourceMapGenerator$1);
let pathAvailable$1 = Boolean(resolve$1 && isAbsolute);
let Input$5 = class Input2 {
  constructor(css2, opts = {}) {
    if (css2 === null || typeof css2 === "undefined" || typeof css2 === "object" && !css2.toString) {
      throw new Error("PostCSS received ".concat(css2, " instead of CSS string"));
    }
    this.css = css2.toString();
    if (this.css[0] === "\uFEFF" || this.css[0] === "￾") {
      this.hasBOM = true;
      this.css = this.css.slice(1);
    } else {
      this.hasBOM = false;
    }
    if (opts.from) {
      if (!pathAvailable$1 || /^\w+:\/\//.test(opts.from) || isAbsolute(opts.from)) {
        this.file = opts.from;
      } else {
        this.file = resolve$1(opts.from);
      }
    }
    if (pathAvailable$1 && sourceMapAvailable$1) {
      let map2 = new PreviousMap$1(this.css, opts);
      if (map2.text) {
        this.map = map2;
        let file = map2.consumer().file;
        if (!this.file && file)
          this.file = this.mapResolve(file);
      }
    }
    if (!this.file) {
      this.id = "<input css " + nanoid(6) + ">";
    }
    if (this.map)
      this.map.file = this.from;
  }
  error(message, line2, column2, opts = {}) {
    let result2, endLine, endColumn;
    if (line2 && typeof line2 === "object") {
      let start2 = line2;
      let end = column2;
      if (typeof start2.offset === "number") {
        let pos = this.fromOffset(start2.offset);
        line2 = pos.line;
        column2 = pos.col;
      } else {
        line2 = start2.line;
        column2 = start2.column;
      }
      if (typeof end.offset === "number") {
        let pos = this.fromOffset(end.offset);
        endLine = pos.line;
        endColumn = pos.col;
      } else {
        endLine = end.line;
        endColumn = end.column;
      }
    } else if (!column2) {
      let pos = this.fromOffset(line2);
      line2 = pos.line;
      column2 = pos.col;
    }
    let origin = this.origin(line2, column2, endLine, endColumn);
    if (origin) {
      result2 = new CssSyntaxError$1(
        message,
        origin.endLine === void 0 ? origin.line : { column: origin.column, line: origin.line },
        origin.endLine === void 0 ? origin.column : { column: origin.endColumn, line: origin.endLine },
        origin.source,
        origin.file,
        opts.plugin
      );
    } else {
      result2 = new CssSyntaxError$1(
        message,
        endLine === void 0 ? line2 : { column: column2, line: line2 },
        endLine === void 0 ? column2 : { column: endColumn, line: endLine },
        this.css,
        this.file,
        opts.plugin
      );
    }
    result2.input = { column: column2, endColumn, endLine, line: line2, source: this.css };
    if (this.file) {
      if (pathToFileURL$1) {
        result2.input.url = pathToFileURL$1(this.file).toString();
      }
      result2.input.file = this.file;
    }
    return result2;
  }
  fromOffset(offset) {
    let lastLine, lineToIndex;
    if (!this[fromOffsetCache]) {
      let lines = this.css.split("\n");
      lineToIndex = new Array(lines.length);
      let prevIndex = 0;
      for (let i3 = 0, l2 = lines.length; i3 < l2; i3++) {
        lineToIndex[i3] = prevIndex;
        prevIndex += lines[i3].length + 1;
      }
      this[fromOffsetCache] = lineToIndex;
    } else {
      lineToIndex = this[fromOffsetCache];
    }
    lastLine = lineToIndex[lineToIndex.length - 1];
    let min2 = 0;
    if (offset >= lastLine) {
      min2 = lineToIndex.length - 1;
    } else {
      let max2 = lineToIndex.length - 2;
      let mid;
      while (min2 < max2) {
        mid = min2 + (max2 - min2 >> 1);
        if (offset < lineToIndex[mid]) {
          max2 = mid - 1;
        } else if (offset >= lineToIndex[mid + 1]) {
          min2 = mid + 1;
        } else {
          min2 = mid;
          break;
        }
      }
    }
    return {
      col: offset - lineToIndex[min2] + 1,
      line: min2 + 1
    };
  }
  mapResolve(file) {
    if (/^\w+:\/\//.test(file)) {
      return file;
    }
    return resolve$1(this.map.consumer().sourceRoot || this.map.root || ".", file);
  }
  origin(line2, column2, endLine, endColumn) {
    if (!this.map)
      return false;
    let consumer = this.map.consumer();
    let from2 = consumer.originalPositionFor({ column: column2, line: line2 });
    if (!from2.source)
      return false;
    let to2;
    if (typeof endLine === "number") {
      to2 = consumer.originalPositionFor({ column: endColumn, line: endLine });
    }
    let fromUrl;
    if (isAbsolute(from2.source)) {
      fromUrl = pathToFileURL$1(from2.source);
    } else {
      fromUrl = new URL(
        from2.source,
        this.map.consumer().sourceRoot || pathToFileURL$1(this.map.mapFile)
      );
    }
    let result2 = {
      column: from2.column,
      endColumn: to2 && to2.column,
      endLine: to2 && to2.line,
      line: from2.line,
      url: fromUrl.toString()
    };
    if (fromUrl.protocol === "file:") {
      if (fileURLToPath) {
        result2.file = fileURLToPath(fromUrl);
      } else {
        throw new Error("file: protocol is not available in this PostCSS build");
      }
    }
    let source = consumer.sourceContentFor(from2.source);
    if (source)
      result2.source = source;
    return result2;
  }
  toJSON() {
    let json = {};
    for (let name2 of ["hasBOM", "css", "file", "id"]) {
      if (this[name2] != null) {
        json[name2] = this[name2];
      }
    }
    if (this.map) {
      json.map = { ...this.map };
      if (json.map.consumerCache) {
        json.map.consumerCache = void 0;
      }
    }
    return json;
  }
  get from() {
    return this.file || this.id;
  }
};
var input = Input$5;
Input$5.default = Input$5;
if (terminalHighlight && terminalHighlight.registerInput) {
  terminalHighlight.registerInput(Input$5);
}
let { SourceMapConsumer, SourceMapGenerator } = require$$2;
let { dirname, relative, resolve, sep } = require$$2;
let { pathToFileURL } = require$$2;
let Input$4 = input;
let sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
let pathAvailable = Boolean(dirname && resolve && relative && sep);
let MapGenerator$2 = class MapGenerator2 {
  constructor(stringify2, root2, opts, cssString) {
    this.stringify = stringify2;
    this.mapOpts = opts.map || {};
    this.root = root2;
    this.opts = opts;
    this.css = cssString;
    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;
    this.memoizedFileURLs = /* @__PURE__ */ new Map();
    this.memoizedPaths = /* @__PURE__ */ new Map();
    this.memoizedURLs = /* @__PURE__ */ new Map();
  }
  addAnnotation() {
    let content2;
    if (this.isInline()) {
      content2 = "data:application/json;base64," + this.toBase64(this.map.toString());
    } else if (typeof this.mapOpts.annotation === "string") {
      content2 = this.mapOpts.annotation;
    } else if (typeof this.mapOpts.annotation === "function") {
      content2 = this.mapOpts.annotation(this.opts.to, this.root);
    } else {
      content2 = this.outputFile() + ".map";
    }
    let eol = "\n";
    if (this.css.includes("\r\n"))
      eol = "\r\n";
    this.css += eol + "/*# sourceMappingURL=" + content2 + " */";
  }
  applyPrevMaps() {
    for (let prev2 of this.previous()) {
      let from2 = this.toUrl(this.path(prev2.file));
      let root2 = prev2.root || dirname(prev2.file);
      let map2;
      if (this.mapOpts.sourcesContent === false) {
        map2 = new SourceMapConsumer(prev2.text);
        if (map2.sourcesContent) {
          map2.sourcesContent = map2.sourcesContent.map(() => null);
        }
      } else {
        map2 = prev2.consumer();
      }
      this.map.applySourceMap(map2, from2, this.toUrl(this.path(root2)));
    }
  }
  clearAnnotation() {
    if (this.mapOpts.annotation === false)
      return;
    if (this.root) {
      let node2;
      for (let i3 = this.root.nodes.length - 1; i3 >= 0; i3--) {
        node2 = this.root.nodes[i3];
        if (node2.type !== "comment")
          continue;
        if (node2.text.indexOf("# sourceMappingURL=") === 0) {
          this.root.removeChild(i3);
        }
      }
    } else if (this.css) {
      this.css = this.css.replace(/(\n)?\/\*#[\S\s]*?\*\/$/gm, "");
    }
  }
  generate() {
    this.clearAnnotation();
    if (pathAvailable && sourceMapAvailable && this.isMap()) {
      return this.generateMap();
    } else {
      let result2 = "";
      this.stringify(this.root, (i3) => {
        result2 += i3;
      });
      return [result2];
    }
  }
  generateMap() {
    if (this.root) {
      this.generateString();
    } else if (this.previous().length === 1) {
      let prev2 = this.previous()[0].consumer();
      prev2.file = this.outputFile();
      this.map = SourceMapGenerator.fromSourceMap(prev2);
    } else {
      this.map = new SourceMapGenerator({ file: this.outputFile() });
      this.map.addMapping({
        generated: { column: 0, line: 1 },
        original: { column: 0, line: 1 },
        source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>"
      });
    }
    if (this.isSourcesContent())
      this.setSourcesContent();
    if (this.root && this.previous().length > 0)
      this.applyPrevMaps();
    if (this.isAnnotation())
      this.addAnnotation();
    if (this.isInline()) {
      return [this.css];
    } else {
      return [this.css, this.map];
    }
  }
  generateString() {
    this.css = "";
    this.map = new SourceMapGenerator({ file: this.outputFile() });
    let line2 = 1;
    let column2 = 1;
    let noSource = "<no source>";
    let mapping = {
      generated: { column: 0, line: 0 },
      original: { column: 0, line: 0 },
      source: ""
    };
    let lines, last;
    this.stringify(this.root, (str, node2, type) => {
      this.css += str;
      if (node2 && type !== "end") {
        mapping.generated.line = line2;
        mapping.generated.column = column2 - 1;
        if (node2.source && node2.source.start) {
          mapping.source = this.sourcePath(node2);
          mapping.original.line = node2.source.start.line;
          mapping.original.column = node2.source.start.column - 1;
          this.map.addMapping(mapping);
        } else {
          mapping.source = noSource;
          mapping.original.line = 1;
          mapping.original.column = 0;
          this.map.addMapping(mapping);
        }
      }
      lines = str.match(/\n/g);
      if (lines) {
        line2 += lines.length;
        last = str.lastIndexOf("\n");
        column2 = str.length - last;
      } else {
        column2 += str.length;
      }
      if (node2 && type !== "start") {
        let p2 = node2.parent || { raws: {} };
        let childless = node2.type === "decl" || node2.type === "atrule" && !node2.nodes;
        if (!childless || node2 !== p2.last || p2.raws.semicolon) {
          if (node2.source && node2.source.end) {
            mapping.source = this.sourcePath(node2);
            mapping.original.line = node2.source.end.line;
            mapping.original.column = node2.source.end.column - 1;
            mapping.generated.line = line2;
            mapping.generated.column = column2 - 2;
            this.map.addMapping(mapping);
          } else {
            mapping.source = noSource;
            mapping.original.line = 1;
            mapping.original.column = 0;
            mapping.generated.line = line2;
            mapping.generated.column = column2 - 1;
            this.map.addMapping(mapping);
          }
        }
      }
    });
  }
  isAnnotation() {
    if (this.isInline()) {
      return true;
    }
    if (typeof this.mapOpts.annotation !== "undefined") {
      return this.mapOpts.annotation;
    }
    if (this.previous().length) {
      return this.previous().some((i3) => i3.annotation);
    }
    return true;
  }
  isInline() {
    if (typeof this.mapOpts.inline !== "undefined") {
      return this.mapOpts.inline;
    }
    let annotation = this.mapOpts.annotation;
    if (typeof annotation !== "undefined" && annotation !== true) {
      return false;
    }
    if (this.previous().length) {
      return this.previous().some((i3) => i3.inline);
    }
    return true;
  }
  isMap() {
    if (typeof this.opts.map !== "undefined") {
      return !!this.opts.map;
    }
    return this.previous().length > 0;
  }
  isSourcesContent() {
    if (typeof this.mapOpts.sourcesContent !== "undefined") {
      return this.mapOpts.sourcesContent;
    }
    if (this.previous().length) {
      return this.previous().some((i3) => i3.withContent());
    }
    return true;
  }
  outputFile() {
    if (this.opts.to) {
      return this.path(this.opts.to);
    } else if (this.opts.from) {
      return this.path(this.opts.from);
    } else {
      return "to.css";
    }
  }
  path(file) {
    if (this.mapOpts.absolute)
      return file;
    if (file.charCodeAt(0) === 60)
      return file;
    if (/^\w+:\/\//.test(file))
      return file;
    let cached = this.memoizedPaths.get(file);
    if (cached)
      return cached;
    let from2 = this.opts.to ? dirname(this.opts.to) : ".";
    if (typeof this.mapOpts.annotation === "string") {
      from2 = dirname(resolve(from2, this.mapOpts.annotation));
    }
    let path = relative(from2, file);
    this.memoizedPaths.set(file, path);
    return path;
  }
  previous() {
    if (!this.previousMaps) {
      this.previousMaps = [];
      if (this.root) {
        this.root.walk((node2) => {
          if (node2.source && node2.source.input.map) {
            let map2 = node2.source.input.map;
            if (!this.previousMaps.includes(map2)) {
              this.previousMaps.push(map2);
            }
          }
        });
      } else {
        let input2 = new Input$4(this.css, this.opts);
        if (input2.map)
          this.previousMaps.push(input2.map);
      }
    }
    return this.previousMaps;
  }
  setSourcesContent() {
    let already = {};
    if (this.root) {
      this.root.walk((node2) => {
        if (node2.source) {
          let from2 = node2.source.input.from;
          if (from2 && !already[from2]) {
            already[from2] = true;
            let fromUrl = this.usesFileUrls ? this.toFileUrl(from2) : this.toUrl(this.path(from2));
            this.map.setSourceContent(fromUrl, node2.source.input.css);
          }
        }
      });
    } else if (this.css) {
      let from2 = this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>";
      this.map.setSourceContent(from2, this.css);
    }
  }
  sourcePath(node2) {
    if (this.mapOpts.from) {
      return this.toUrl(this.mapOpts.from);
    } else if (this.usesFileUrls) {
      return this.toFileUrl(node2.source.input.from);
    } else {
      return this.toUrl(this.path(node2.source.input.from));
    }
  }
  toBase64(str) {
    if (Buffer) {
      return Buffer.from(str).toString("base64");
    } else {
      return window.btoa(unescape(encodeURIComponent(str)));
    }
  }
  toFileUrl(path) {
    let cached = this.memoizedFileURLs.get(path);
    if (cached)
      return cached;
    if (pathToFileURL) {
      let fileURL = pathToFileURL(path).toString();
      this.memoizedFileURLs.set(path, fileURL);
      return fileURL;
    } else {
      throw new Error(
        "`map.absolute` option is not available in this PostCSS build"
      );
    }
  }
  toUrl(path) {
    let cached = this.memoizedURLs.get(path);
    if (cached)
      return cached;
    if (sep === "\\") {
      path = path.replace(/\\/g, "/");
    }
    let url = encodeURI(path).replace(/[#?]/g, encodeURIComponent);
    this.memoizedURLs.set(path, url);
    return url;
  }
};
var mapGenerator = MapGenerator$2;
let Node$2 = node;
let Comment$4 = class Comment2 extends Node$2 {
  constructor(defaults2) {
    super(defaults2);
    this.type = "comment";
  }
};
var comment = Comment$4;
Comment$4.default = Comment$4;
let { isClean: isClean$1, my: my$1 } = symbols;
let Declaration$3 = declaration;
let Comment$3 = comment;
let Node$1 = node;
let parse$4, Rule$4, AtRule$4, Root$6;
function cleanSource(nodes) {
  return nodes.map((i3) => {
    if (i3.nodes)
      i3.nodes = cleanSource(i3.nodes);
    delete i3.source;
    return i3;
  });
}
function markDirtyUp(node2) {
  node2[isClean$1] = false;
  if (node2.proxyOf.nodes) {
    for (let i3 of node2.proxyOf.nodes) {
      markDirtyUp(i3);
    }
  }
}
let Container$7 = class Container2 extends Node$1 {
  append(...children) {
    for (let child of children) {
      let nodes = this.normalize(child, this.last);
      for (let node2 of nodes)
        this.proxyOf.nodes.push(node2);
    }
    this.markDirty();
    return this;
  }
  cleanRaws(keepBetween) {
    super.cleanRaws(keepBetween);
    if (this.nodes) {
      for (let node2 of this.nodes)
        node2.cleanRaws(keepBetween);
    }
  }
  each(callback) {
    if (!this.proxyOf.nodes)
      return void 0;
    let iterator = this.getIterator();
    let index2, result2;
    while (this.indexes[iterator] < this.proxyOf.nodes.length) {
      index2 = this.indexes[iterator];
      result2 = callback(this.proxyOf.nodes[index2], index2);
      if (result2 === false)
        break;
      this.indexes[iterator] += 1;
    }
    delete this.indexes[iterator];
    return result2;
  }
  every(condition) {
    return this.nodes.every(condition);
  }
  getIterator() {
    if (!this.lastEach)
      this.lastEach = 0;
    if (!this.indexes)
      this.indexes = {};
    this.lastEach += 1;
    let iterator = this.lastEach;
    this.indexes[iterator] = 0;
    return iterator;
  }
  getProxyProcessor() {
    return {
      get(node2, prop) {
        if (prop === "proxyOf") {
          return node2;
        } else if (!node2[prop]) {
          return node2[prop];
        } else if (prop === "each" || typeof prop === "string" && prop.startsWith("walk")) {
          return (...args) => {
            return node2[prop](
              ...args.map((i3) => {
                if (typeof i3 === "function") {
                  return (child, index2) => i3(child.toProxy(), index2);
                } else {
                  return i3;
                }
              })
            );
          };
        } else if (prop === "every" || prop === "some") {
          return (cb2) => {
            return node2[prop](
              (child, ...other) => cb2(child.toProxy(), ...other)
            );
          };
        } else if (prop === "root") {
          return () => node2.root().toProxy();
        } else if (prop === "nodes") {
          return node2.nodes.map((i3) => i3.toProxy());
        } else if (prop === "first" || prop === "last") {
          return node2[prop].toProxy();
        } else {
          return node2[prop];
        }
      },
      set(node2, prop, value2) {
        if (node2[prop] === value2)
          return true;
        node2[prop] = value2;
        if (prop === "name" || prop === "params" || prop === "selector") {
          node2.markDirty();
        }
        return true;
      }
    };
  }
  index(child) {
    if (typeof child === "number")
      return child;
    if (child.proxyOf)
      child = child.proxyOf;
    return this.proxyOf.nodes.indexOf(child);
  }
  insertAfter(exist, add2) {
    let existIndex = this.index(exist);
    let nodes = this.normalize(add2, this.proxyOf.nodes[existIndex]).reverse();
    existIndex = this.index(exist);
    for (let node2 of nodes)
      this.proxyOf.nodes.splice(existIndex + 1, 0, node2);
    let index2;
    for (let id2 in this.indexes) {
      index2 = this.indexes[id2];
      if (existIndex < index2) {
        this.indexes[id2] = index2 + nodes.length;
      }
    }
    this.markDirty();
    return this;
  }
  insertBefore(exist, add2) {
    let existIndex = this.index(exist);
    let type = existIndex === 0 ? "prepend" : false;
    let nodes = this.normalize(add2, this.proxyOf.nodes[existIndex], type).reverse();
    existIndex = this.index(exist);
    for (let node2 of nodes)
      this.proxyOf.nodes.splice(existIndex, 0, node2);
    let index2;
    for (let id2 in this.indexes) {
      index2 = this.indexes[id2];
      if (existIndex <= index2) {
        this.indexes[id2] = index2 + nodes.length;
      }
    }
    this.markDirty();
    return this;
  }
  normalize(nodes, sample) {
    if (typeof nodes === "string") {
      nodes = cleanSource(parse$4(nodes).nodes);
    } else if (Array.isArray(nodes)) {
      nodes = nodes.slice(0);
      for (let i3 of nodes) {
        if (i3.parent)
          i3.parent.removeChild(i3, "ignore");
      }
    } else if (nodes.type === "root" && this.type !== "document") {
      nodes = nodes.nodes.slice(0);
      for (let i3 of nodes) {
        if (i3.parent)
          i3.parent.removeChild(i3, "ignore");
      }
    } else if (nodes.type) {
      nodes = [nodes];
    } else if (nodes.prop) {
      if (typeof nodes.value === "undefined") {
        throw new Error("Value field is missed in node creation");
      } else if (typeof nodes.value !== "string") {
        nodes.value = String(nodes.value);
      }
      nodes = [new Declaration$3(nodes)];
    } else if (nodes.selector) {
      nodes = [new Rule$4(nodes)];
    } else if (nodes.name) {
      nodes = [new AtRule$4(nodes)];
    } else if (nodes.text) {
      nodes = [new Comment$3(nodes)];
    } else {
      throw new Error("Unknown node type in node creation");
    }
    let processed = nodes.map((i3) => {
      if (!i3[my$1])
        Container2.rebuild(i3);
      i3 = i3.proxyOf;
      if (i3.parent)
        i3.parent.removeChild(i3);
      if (i3[isClean$1])
        markDirtyUp(i3);
      if (typeof i3.raws.before === "undefined") {
        if (sample && typeof sample.raws.before !== "undefined") {
          i3.raws.before = sample.raws.before.replace(/\S/g, "");
        }
      }
      i3.parent = this.proxyOf;
      return i3;
    });
    return processed;
  }
  prepend(...children) {
    children = children.reverse();
    for (let child of children) {
      let nodes = this.normalize(child, this.first, "prepend").reverse();
      for (let node2 of nodes)
        this.proxyOf.nodes.unshift(node2);
      for (let id2 in this.indexes) {
        this.indexes[id2] = this.indexes[id2] + nodes.length;
      }
    }
    this.markDirty();
    return this;
  }
  push(child) {
    child.parent = this;
    this.proxyOf.nodes.push(child);
    return this;
  }
  removeAll() {
    for (let node2 of this.proxyOf.nodes)
      node2.parent = void 0;
    this.proxyOf.nodes = [];
    this.markDirty();
    return this;
  }
  removeChild(child) {
    child = this.index(child);
    this.proxyOf.nodes[child].parent = void 0;
    this.proxyOf.nodes.splice(child, 1);
    let index2;
    for (let id2 in this.indexes) {
      index2 = this.indexes[id2];
      if (index2 >= child) {
        this.indexes[id2] = index2 - 1;
      }
    }
    this.markDirty();
    return this;
  }
  replaceValues(pattern, opts, callback) {
    if (!callback) {
      callback = opts;
      opts = {};
    }
    this.walkDecls((decl) => {
      if (opts.props && !opts.props.includes(decl.prop))
        return;
      if (opts.fast && !decl.value.includes(opts.fast))
        return;
      decl.value = decl.value.replace(pattern, callback);
    });
    this.markDirty();
    return this;
  }
  some(condition) {
    return this.nodes.some(condition);
  }
  walk(callback) {
    return this.each((child, i3) => {
      let result2;
      try {
        result2 = callback(child, i3);
      } catch (e3) {
        throw child.addToError(e3);
      }
      if (result2 !== false && child.walk) {
        result2 = child.walk(callback);
      }
      return result2;
    });
  }
  walkAtRules(name2, callback) {
    if (!callback) {
      callback = name2;
      return this.walk((child, i3) => {
        if (child.type === "atrule") {
          return callback(child, i3);
        }
      });
    }
    if (name2 instanceof RegExp) {
      return this.walk((child, i3) => {
        if (child.type === "atrule" && name2.test(child.name)) {
          return callback(child, i3);
        }
      });
    }
    return this.walk((child, i3) => {
      if (child.type === "atrule" && child.name === name2) {
        return callback(child, i3);
      }
    });
  }
  walkComments(callback) {
    return this.walk((child, i3) => {
      if (child.type === "comment") {
        return callback(child, i3);
      }
    });
  }
  walkDecls(prop, callback) {
    if (!callback) {
      callback = prop;
      return this.walk((child, i3) => {
        if (child.type === "decl") {
          return callback(child, i3);
        }
      });
    }
    if (prop instanceof RegExp) {
      return this.walk((child, i3) => {
        if (child.type === "decl" && prop.test(child.prop)) {
          return callback(child, i3);
        }
      });
    }
    return this.walk((child, i3) => {
      if (child.type === "decl" && child.prop === prop) {
        return callback(child, i3);
      }
    });
  }
  walkRules(selector, callback) {
    if (!callback) {
      callback = selector;
      return this.walk((child, i3) => {
        if (child.type === "rule") {
          return callback(child, i3);
        }
      });
    }
    if (selector instanceof RegExp) {
      return this.walk((child, i3) => {
        if (child.type === "rule" && selector.test(child.selector)) {
          return callback(child, i3);
        }
      });
    }
    return this.walk((child, i3) => {
      if (child.type === "rule" && child.selector === selector) {
        return callback(child, i3);
      }
    });
  }
  get first() {
    if (!this.proxyOf.nodes)
      return void 0;
    return this.proxyOf.nodes[0];
  }
  get last() {
    if (!this.proxyOf.nodes)
      return void 0;
    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
  }
};
Container$7.registerParse = (dependant) => {
  parse$4 = dependant;
};
Container$7.registerRule = (dependant) => {
  Rule$4 = dependant;
};
Container$7.registerAtRule = (dependant) => {
  AtRule$4 = dependant;
};
Container$7.registerRoot = (dependant) => {
  Root$6 = dependant;
};
var container = Container$7;
Container$7.default = Container$7;
Container$7.rebuild = (node2) => {
  if (node2.type === "atrule") {
    Object.setPrototypeOf(node2, AtRule$4.prototype);
  } else if (node2.type === "rule") {
    Object.setPrototypeOf(node2, Rule$4.prototype);
  } else if (node2.type === "decl") {
    Object.setPrototypeOf(node2, Declaration$3.prototype);
  } else if (node2.type === "comment") {
    Object.setPrototypeOf(node2, Comment$3.prototype);
  } else if (node2.type === "root") {
    Object.setPrototypeOf(node2, Root$6.prototype);
  }
  node2[my$1] = true;
  if (node2.nodes) {
    node2.nodes.forEach((child) => {
      Container$7.rebuild(child);
    });
  }
};
let Container$6 = container;
let LazyResult$4, Processor$3;
let Document$3 = class Document2 extends Container$6 {
  constructor(defaults2) {
    super({ type: "document", ...defaults2 });
    if (!this.nodes) {
      this.nodes = [];
    }
  }
  toResult(opts = {}) {
    let lazy = new LazyResult$4(new Processor$3(), this, opts);
    return lazy.stringify();
  }
};
Document$3.registerLazyResult = (dependant) => {
  LazyResult$4 = dependant;
};
Document$3.registerProcessor = (dependant) => {
  Processor$3 = dependant;
};
var document$1 = Document$3;
Document$3.default = Document$3;
let Warning$2 = class Warning2 {
  constructor(text2, opts = {}) {
    this.type = "warning";
    this.text = text2;
    if (opts.node && opts.node.source) {
      let range = opts.node.rangeBy(opts);
      this.line = range.start.line;
      this.column = range.start.column;
      this.endLine = range.end.line;
      this.endColumn = range.end.column;
    }
    for (let opt in opts)
      this[opt] = opts[opt];
  }
  toString() {
    if (this.node) {
      return this.node.error(this.text, {
        index: this.index,
        plugin: this.plugin,
        word: this.word
      }).message;
    }
    if (this.plugin) {
      return this.plugin + ": " + this.text;
    }
    return this.text;
  }
};
var warning$1 = Warning$2;
Warning$2.default = Warning$2;
let Warning$1 = warning$1;
let Result$3 = class Result2 {
  constructor(processor2, root2, opts) {
    this.processor = processor2;
    this.messages = [];
    this.root = root2;
    this.opts = opts;
    this.css = void 0;
    this.map = void 0;
  }
  toString() {
    return this.css;
  }
  warn(text2, opts = {}) {
    if (!opts.plugin) {
      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
        opts.plugin = this.lastPlugin.postcssPlugin;
      }
    }
    let warning2 = new Warning$1(text2, opts);
    this.messages.push(warning2);
    return warning2;
  }
  warnings() {
    return this.messages.filter((i3) => i3.type === "warning");
  }
  get content() {
    return this.css;
  }
};
var result = Result$3;
Result$3.default = Result$3;
const SINGLE_QUOTE = "'".charCodeAt(0);
const DOUBLE_QUOTE = '"'.charCodeAt(0);
const BACKSLASH = "\\".charCodeAt(0);
const SLASH = "/".charCodeAt(0);
const NEWLINE = "\n".charCodeAt(0);
const SPACE = " ".charCodeAt(0);
const FEED = "\f".charCodeAt(0);
const TAB = "	".charCodeAt(0);
const CR = "\r".charCodeAt(0);
const OPEN_SQUARE = "[".charCodeAt(0);
const CLOSE_SQUARE = "]".charCodeAt(0);
const OPEN_PARENTHESES = "(".charCodeAt(0);
const CLOSE_PARENTHESES = ")".charCodeAt(0);
const OPEN_CURLY = "{".charCodeAt(0);
const CLOSE_CURLY = "}".charCodeAt(0);
const SEMICOLON = ";".charCodeAt(0);
const ASTERISK = "*".charCodeAt(0);
const COLON = ":".charCodeAt(0);
const AT = "@".charCodeAt(0);
const RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
const RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
const RE_BAD_BRACKET = /.[\r\n"'(/\\]/;
const RE_HEX_ESCAPE = /[\da-f]/i;
var tokenize = function tokenizer2(input2, options = {}) {
  let css2 = input2.css.valueOf();
  let ignore = options.ignoreErrors;
  let code, next2, quote, content2, escape2;
  let escaped, escapePos, prev2, n2, currentToken;
  let length2 = css2.length;
  let pos = 0;
  let buffer = [];
  let returned = [];
  function position2() {
    return pos;
  }
  function unclosed(what) {
    throw input2.error("Unclosed " + what, pos);
  }
  function endOfFile() {
    return returned.length === 0 && pos >= length2;
  }
  function nextToken(opts) {
    if (returned.length)
      return returned.pop();
    if (pos >= length2)
      return;
    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
    code = css2.charCodeAt(pos);
    switch (code) {
      case NEWLINE:
      case SPACE:
      case TAB:
      case CR:
      case FEED: {
        next2 = pos;
        do {
          next2 += 1;
          code = css2.charCodeAt(next2);
        } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);
        currentToken = ["space", css2.slice(pos, next2)];
        pos = next2 - 1;
        break;
      }
      case OPEN_SQUARE:
      case CLOSE_SQUARE:
      case OPEN_CURLY:
      case CLOSE_CURLY:
      case COLON:
      case SEMICOLON:
      case CLOSE_PARENTHESES: {
        let controlChar = String.fromCharCode(code);
        currentToken = [controlChar, controlChar, pos];
        break;
      }
      case OPEN_PARENTHESES: {
        prev2 = buffer.length ? buffer.pop()[1] : "";
        n2 = css2.charCodeAt(pos + 1);
        if (prev2 === "url" && n2 !== SINGLE_QUOTE && n2 !== DOUBLE_QUOTE && n2 !== SPACE && n2 !== NEWLINE && n2 !== TAB && n2 !== FEED && n2 !== CR) {
          next2 = pos;
          do {
            escaped = false;
            next2 = css2.indexOf(")", next2 + 1);
            if (next2 === -1) {
              if (ignore || ignoreUnclosed) {
                next2 = pos;
                break;
              } else {
                unclosed("bracket");
              }
            }
            escapePos = next2;
            while (css2.charCodeAt(escapePos - 1) === BACKSLASH) {
              escapePos -= 1;
              escaped = !escaped;
            }
          } while (escaped);
          currentToken = ["brackets", css2.slice(pos, next2 + 1), pos, next2];
          pos = next2;
        } else {
          next2 = css2.indexOf(")", pos + 1);
          content2 = css2.slice(pos, next2 + 1);
          if (next2 === -1 || RE_BAD_BRACKET.test(content2)) {
            currentToken = ["(", "(", pos];
          } else {
            currentToken = ["brackets", content2, pos, next2];
            pos = next2;
          }
        }
        break;
      }
      case SINGLE_QUOTE:
      case DOUBLE_QUOTE: {
        quote = code === SINGLE_QUOTE ? "'" : '"';
        next2 = pos;
        do {
          escaped = false;
          next2 = css2.indexOf(quote, next2 + 1);
          if (next2 === -1) {
            if (ignore || ignoreUnclosed) {
              next2 = pos + 1;
              break;
            } else {
              unclosed("string");
            }
          }
          escapePos = next2;
          while (css2.charCodeAt(escapePos - 1) === BACKSLASH) {
            escapePos -= 1;
            escaped = !escaped;
          }
        } while (escaped);
        currentToken = ["string", css2.slice(pos, next2 + 1), pos, next2];
        pos = next2;
        break;
      }
      case AT: {
        RE_AT_END.lastIndex = pos + 1;
        RE_AT_END.test(css2);
        if (RE_AT_END.lastIndex === 0) {
          next2 = css2.length - 1;
        } else {
          next2 = RE_AT_END.lastIndex - 2;
        }
        currentToken = ["at-word", css2.slice(pos, next2 + 1), pos, next2];
        pos = next2;
        break;
      }
      case BACKSLASH: {
        next2 = pos;
        escape2 = true;
        while (css2.charCodeAt(next2 + 1) === BACKSLASH) {
          next2 += 1;
          escape2 = !escape2;
        }
        code = css2.charCodeAt(next2 + 1);
        if (escape2 && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {
          next2 += 1;
          if (RE_HEX_ESCAPE.test(css2.charAt(next2))) {
            while (RE_HEX_ESCAPE.test(css2.charAt(next2 + 1))) {
              next2 += 1;
            }
            if (css2.charCodeAt(next2 + 1) === SPACE) {
              next2 += 1;
            }
          }
        }
        currentToken = ["word", css2.slice(pos, next2 + 1), pos, next2];
        pos = next2;
        break;
      }
      default: {
        if (code === SLASH && css2.charCodeAt(pos + 1) === ASTERISK) {
          next2 = css2.indexOf("*/", pos + 2) + 1;
          if (next2 === 0) {
            if (ignore || ignoreUnclosed) {
              next2 = css2.length;
            } else {
              unclosed("comment");
            }
          }
          currentToken = ["comment", css2.slice(pos, next2 + 1), pos, next2];
          pos = next2;
        } else {
          RE_WORD_END.lastIndex = pos + 1;
          RE_WORD_END.test(css2);
          if (RE_WORD_END.lastIndex === 0) {
            next2 = css2.length - 1;
          } else {
            next2 = RE_WORD_END.lastIndex - 2;
          }
          currentToken = ["word", css2.slice(pos, next2 + 1), pos, next2];
          buffer.push(currentToken);
          pos = next2;
        }
        break;
      }
    }
    pos++;
    return currentToken;
  }
  function back(token2) {
    returned.push(token2);
  }
  return {
    back,
    endOfFile,
    nextToken,
    position: position2
  };
};
let Container$5 = container;
let AtRule$3 = class AtRule2 extends Container$5 {
  constructor(defaults2) {
    super(defaults2);
    this.type = "atrule";
  }
  append(...children) {
    if (!this.proxyOf.nodes)
      this.nodes = [];
    return super.append(...children);
  }
  prepend(...children) {
    if (!this.proxyOf.nodes)
      this.nodes = [];
    return super.prepend(...children);
  }
};
var atRule = AtRule$3;
AtRule$3.default = AtRule$3;
Container$5.registerAtRule(AtRule$3);
let Container$4 = container;
let LazyResult$3, Processor$2;
let Root$5 = class Root2 extends Container$4 {
  constructor(defaults2) {
    super(defaults2);
    this.type = "root";
    if (!this.nodes)
      this.nodes = [];
  }
  normalize(child, sample, type) {
    let nodes = super.normalize(child);
    if (sample) {
      if (type === "prepend") {
        if (this.nodes.length > 1) {
          sample.raws.before = this.nodes[1].raws.before;
        } else {
          delete sample.raws.before;
        }
      } else if (this.first !== sample) {
        for (let node2 of nodes) {
          node2.raws.before = sample.raws.before;
        }
      }
    }
    return nodes;
  }
  removeChild(child, ignore) {
    let index2 = this.index(child);
    if (!ignore && index2 === 0 && this.nodes.length > 1) {
      this.nodes[1].raws.before = this.nodes[index2].raws.before;
    }
    return super.removeChild(child);
  }
  toResult(opts = {}) {
    let lazy = new LazyResult$3(new Processor$2(), this, opts);
    return lazy.stringify();
  }
};
Root$5.registerLazyResult = (dependant) => {
  LazyResult$3 = dependant;
};
Root$5.registerProcessor = (dependant) => {
  Processor$2 = dependant;
};
var root$b = Root$5;
Root$5.default = Root$5;
Container$4.registerRoot(Root$5);
let list$2 = {
  comma(string2) {
    return list$2.split(string2, [","], true);
  },
  space(string2) {
    let spaces = [" ", "\n", "	"];
    return list$2.split(string2, spaces);
  },
  split(string2, separators, last) {
    let array2 = [];
    let current = "";
    let split2 = false;
    let func = 0;
    let inQuote = false;
    let prevQuote = "";
    let escape2 = false;
    for (let letter of string2) {
      if (escape2) {
        escape2 = false;
      } else if (letter === "\\") {
        escape2 = true;
      } else if (inQuote) {
        if (letter === prevQuote) {
          inQuote = false;
        }
      } else if (letter === '"' || letter === "'") {
        inQuote = true;
        prevQuote = letter;
      } else if (letter === "(") {
        func += 1;
      } else if (letter === ")") {
        if (func > 0)
          func -= 1;
      } else if (func === 0) {
        if (separators.includes(letter))
          split2 = true;
      }
      if (split2) {
        if (current !== "")
          array2.push(current.trim());
        current = "";
        split2 = false;
      } else {
        current += letter;
      }
    }
    if (last || current !== "")
      array2.push(current.trim());
    return array2;
  }
};
var list_1 = list$2;
list$2.default = list$2;
let Container$3 = container;
let list$1 = list_1;
let Rule$3 = class Rule2 extends Container$3 {
  constructor(defaults2) {
    super(defaults2);
    this.type = "rule";
    if (!this.nodes)
      this.nodes = [];
  }
  get selectors() {
    return list$1.comma(this.selector);
  }
  set selectors(values2) {
    let match2 = this.selector ? this.selector.match(/,\s*/) : null;
    let sep2 = match2 ? match2[0] : "," + this.raw("between", "beforeOpen");
    this.selector = values2.join(sep2);
  }
};
var rule = Rule$3;
Rule$3.default = Rule$3;
Container$3.registerRule(Rule$3);
let Declaration$2 = declaration;
let tokenizer = tokenize;
let Comment$2 = comment;
let AtRule$2 = atRule;
let Root$4 = root$b;
let Rule$2 = rule;
const SAFE_COMMENT_NEIGHBOR = {
  empty: true,
  space: true
};
function findLastWithPosition(tokens) {
  for (let i3 = tokens.length - 1; i3 >= 0; i3--) {
    let token2 = tokens[i3];
    let pos = token2[3] || token2[2];
    if (pos)
      return pos;
  }
}
let Parser$1 = class Parser2 {
  constructor(input2) {
    this.input = input2;
    this.root = new Root$4();
    this.current = this.root;
    this.spaces = "";
    this.semicolon = false;
    this.customProperty = false;
    this.createTokenizer();
    this.root.source = { input: input2, start: { column: 1, line: 1, offset: 0 } };
  }
  atrule(token2) {
    let node2 = new AtRule$2();
    node2.name = token2[1].slice(1);
    if (node2.name === "") {
      this.unnamedAtrule(node2, token2);
    }
    this.init(node2, token2[2]);
    let type;
    let prev2;
    let shift;
    let last = false;
    let open = false;
    let params = [];
    let brackets = [];
    while (!this.tokenizer.endOfFile()) {
      token2 = this.tokenizer.nextToken();
      type = token2[0];
      if (type === "(" || type === "[") {
        brackets.push(type === "(" ? ")" : "]");
      } else if (type === "{" && brackets.length > 0) {
        brackets.push("}");
      } else if (type === brackets[brackets.length - 1]) {
        brackets.pop();
      }
      if (brackets.length === 0) {
        if (type === ";") {
          node2.source.end = this.getPosition(token2[2]);
          node2.source.end.offset++;
          this.semicolon = true;
          break;
        } else if (type === "{") {
          open = true;
          break;
        } else if (type === "}") {
          if (params.length > 0) {
            shift = params.length - 1;
            prev2 = params[shift];
            while (prev2 && prev2[0] === "space") {
              prev2 = params[--shift];
            }
            if (prev2) {
              node2.source.end = this.getPosition(prev2[3] || prev2[2]);
              node2.source.end.offset++;
            }
          }
          this.end(token2);
          break;
        } else {
          params.push(token2);
        }
      } else {
        params.push(token2);
      }
      if (this.tokenizer.endOfFile()) {
        last = true;
        break;
      }
    }
    node2.raws.between = this.spacesAndCommentsFromEnd(params);
    if (params.length) {
      node2.raws.afterName = this.spacesAndCommentsFromStart(params);
      this.raw(node2, "params", params);
      if (last) {
        token2 = params[params.length - 1];
        node2.source.end = this.getPosition(token2[3] || token2[2]);
        node2.source.end.offset++;
        this.spaces = node2.raws.between;
        node2.raws.between = "";
      }
    } else {
      node2.raws.afterName = "";
      node2.params = "";
    }
    if (open) {
      node2.nodes = [];
      this.current = node2;
    }
  }
  checkMissedSemicolon(tokens) {
    let colon = this.colon(tokens);
    if (colon === false)
      return;
    let founded = 0;
    let token2;
    for (let j2 = colon - 1; j2 >= 0; j2--) {
      token2 = tokens[j2];
      if (token2[0] !== "space") {
        founded += 1;
        if (founded === 2)
          break;
      }
    }
    throw this.input.error(
      "Missed semicolon",
      token2[0] === "word" ? token2[3] + 1 : token2[2]
    );
  }
  colon(tokens) {
    let brackets = 0;
    let token2, type, prev2;
    for (let [i3, element] of tokens.entries()) {
      token2 = element;
      type = token2[0];
      if (type === "(") {
        brackets += 1;
      }
      if (type === ")") {
        brackets -= 1;
      }
      if (brackets === 0 && type === ":") {
        if (!prev2) {
          this.doubleColon(token2);
        } else if (prev2[0] === "word" && prev2[1] === "progid") {
          continue;
        } else {
          return i3;
        }
      }
      prev2 = token2;
    }
    return false;
  }
  comment(token2) {
    let node2 = new Comment$2();
    this.init(node2, token2[2]);
    node2.source.end = this.getPosition(token2[3] || token2[2]);
    node2.source.end.offset++;
    let text2 = token2[1].slice(2, -2);
    if (/^\s*$/.test(text2)) {
      node2.text = "";
      node2.raws.left = text2;
      node2.raws.right = "";
    } else {
      let match2 = text2.match(/^(\s*)([^]*\S)(\s*)$/);
      node2.text = match2[2];
      node2.raws.left = match2[1];
      node2.raws.right = match2[3];
    }
  }
  createTokenizer() {
    this.tokenizer = tokenizer(this.input);
  }
  decl(tokens, customProperty) {
    let node2 = new Declaration$2();
    this.init(node2, tokens[0][2]);
    let last = tokens[tokens.length - 1];
    if (last[0] === ";") {
      this.semicolon = true;
      tokens.pop();
    }
    node2.source.end = this.getPosition(
      last[3] || last[2] || findLastWithPosition(tokens)
    );
    node2.source.end.offset++;
    while (tokens[0][0] !== "word") {
      if (tokens.length === 1)
        this.unknownWord(tokens);
      node2.raws.before += tokens.shift()[1];
    }
    node2.source.start = this.getPosition(tokens[0][2]);
    node2.prop = "";
    while (tokens.length) {
      let type = tokens[0][0];
      if (type === ":" || type === "space" || type === "comment") {
        break;
      }
      node2.prop += tokens.shift()[1];
    }
    node2.raws.between = "";
    let token2;
    while (tokens.length) {
      token2 = tokens.shift();
      if (token2[0] === ":") {
        node2.raws.between += token2[1];
        break;
      } else {
        if (token2[0] === "word" && /\w/.test(token2[1])) {
          this.unknownWord([token2]);
        }
        node2.raws.between += token2[1];
      }
    }
    if (node2.prop[0] === "_" || node2.prop[0] === "*") {
      node2.raws.before += node2.prop[0];
      node2.prop = node2.prop.slice(1);
    }
    let firstSpaces = [];
    let next2;
    while (tokens.length) {
      next2 = tokens[0][0];
      if (next2 !== "space" && next2 !== "comment")
        break;
      firstSpaces.push(tokens.shift());
    }
    this.precheckMissedSemicolon(tokens);
    for (let i3 = tokens.length - 1; i3 >= 0; i3--) {
      token2 = tokens[i3];
      if (token2[1].toLowerCase() === "!important") {
        node2.important = true;
        let string2 = this.stringFrom(tokens, i3);
        string2 = this.spacesFromEnd(tokens) + string2;
        if (string2 !== " !important")
          node2.raws.important = string2;
        break;
      } else if (token2[1].toLowerCase() === "important") {
        let cache = tokens.slice(0);
        let str = "";
        for (let j2 = i3; j2 > 0; j2--) {
          let type = cache[j2][0];
          if (str.trim().indexOf("!") === 0 && type !== "space") {
            break;
          }
          str = cache.pop()[1] + str;
        }
        if (str.trim().indexOf("!") === 0) {
          node2.important = true;
          node2.raws.important = str;
          tokens = cache;
        }
      }
      if (token2[0] !== "space" && token2[0] !== "comment") {
        break;
      }
    }
    let hasWord = tokens.some((i3) => i3[0] !== "space" && i3[0] !== "comment");
    if (hasWord) {
      node2.raws.between += firstSpaces.map((i3) => i3[1]).join("");
      firstSpaces = [];
    }
    this.raw(node2, "value", firstSpaces.concat(tokens), customProperty);
    if (node2.value.includes(":") && !customProperty) {
      this.checkMissedSemicolon(tokens);
    }
  }
  doubleColon(token2) {
    throw this.input.error(
      "Double colon",
      { offset: token2[2] },
      { offset: token2[2] + token2[1].length }
    );
  }
  emptyRule(token2) {
    let node2 = new Rule$2();
    this.init(node2, token2[2]);
    node2.selector = "";
    node2.raws.between = "";
    this.current = node2;
  }
  end(token2) {
    if (this.current.nodes && this.current.nodes.length) {
      this.current.raws.semicolon = this.semicolon;
    }
    this.semicolon = false;
    this.current.raws.after = (this.current.raws.after || "") + this.spaces;
    this.spaces = "";
    if (this.current.parent) {
      this.current.source.end = this.getPosition(token2[2]);
      this.current.source.end.offset++;
      this.current = this.current.parent;
    } else {
      this.unexpectedClose(token2);
    }
  }
  endFile() {
    if (this.current.parent)
      this.unclosedBlock();
    if (this.current.nodes && this.current.nodes.length) {
      this.current.raws.semicolon = this.semicolon;
    }
    this.current.raws.after = (this.current.raws.after || "") + this.spaces;
    this.root.source.end = this.getPosition(this.tokenizer.position());
  }
  freeSemicolon(token2) {
    this.spaces += token2[1];
    if (this.current.nodes) {
      let prev2 = this.current.nodes[this.current.nodes.length - 1];
      if (prev2 && prev2.type === "rule" && !prev2.raws.ownSemicolon) {
        prev2.raws.ownSemicolon = this.spaces;
        this.spaces = "";
      }
    }
  }
  // Helpers
  getPosition(offset) {
    let pos = this.input.fromOffset(offset);
    return {
      column: pos.col,
      line: pos.line,
      offset
    };
  }
  init(node2, offset) {
    this.current.push(node2);
    node2.source = {
      input: this.input,
      start: this.getPosition(offset)
    };
    node2.raws.before = this.spaces;
    this.spaces = "";
    if (node2.type !== "comment")
      this.semicolon = false;
  }
  other(start2) {
    let end = false;
    let type = null;
    let colon = false;
    let bracket = null;
    let brackets = [];
    let customProperty = start2[1].startsWith("--");
    let tokens = [];
    let token2 = start2;
    while (token2) {
      type = token2[0];
      tokens.push(token2);
      if (type === "(" || type === "[") {
        if (!bracket)
          bracket = token2;
        brackets.push(type === "(" ? ")" : "]");
      } else if (customProperty && colon && type === "{") {
        if (!bracket)
          bracket = token2;
        brackets.push("}");
      } else if (brackets.length === 0) {
        if (type === ";") {
          if (colon) {
            this.decl(tokens, customProperty);
            return;
          } else {
            break;
          }
        } else if (type === "{") {
          this.rule(tokens);
          return;
        } else if (type === "}") {
          this.tokenizer.back(tokens.pop());
          end = true;
          break;
        } else if (type === ":") {
          colon = true;
        }
      } else if (type === brackets[brackets.length - 1]) {
        brackets.pop();
        if (brackets.length === 0)
          bracket = null;
      }
      token2 = this.tokenizer.nextToken();
    }
    if (this.tokenizer.endOfFile())
      end = true;
    if (brackets.length > 0)
      this.unclosedBracket(bracket);
    if (end && colon) {
      if (!customProperty) {
        while (tokens.length) {
          token2 = tokens[tokens.length - 1][0];
          if (token2 !== "space" && token2 !== "comment")
            break;
          this.tokenizer.back(tokens.pop());
        }
      }
      this.decl(tokens, customProperty);
    } else {
      this.unknownWord(tokens);
    }
  }
  parse() {
    let token2;
    while (!this.tokenizer.endOfFile()) {
      token2 = this.tokenizer.nextToken();
      switch (token2[0]) {
        case "space":
          this.spaces += token2[1];
          break;
        case ";":
          this.freeSemicolon(token2);
          break;
        case "}":
          this.end(token2);
          break;
        case "comment":
          this.comment(token2);
          break;
        case "at-word":
          this.atrule(token2);
          break;
        case "{":
          this.emptyRule(token2);
          break;
        default:
          this.other(token2);
          break;
      }
    }
    this.endFile();
  }
  precheckMissedSemicolon() {
  }
  raw(node2, prop, tokens, customProperty) {
    let token2, type;
    let length2 = tokens.length;
    let value2 = "";
    let clean = true;
    let next2, prev2;
    for (let i3 = 0; i3 < length2; i3 += 1) {
      token2 = tokens[i3];
      type = token2[0];
      if (type === "space" && i3 === length2 - 1 && !customProperty) {
        clean = false;
      } else if (type === "comment") {
        prev2 = tokens[i3 - 1] ? tokens[i3 - 1][0] : "empty";
        next2 = tokens[i3 + 1] ? tokens[i3 + 1][0] : "empty";
        if (!SAFE_COMMENT_NEIGHBOR[prev2] && !SAFE_COMMENT_NEIGHBOR[next2]) {
          if (value2.slice(-1) === ",") {
            clean = false;
          } else {
            value2 += token2[1];
          }
        } else {
          clean = false;
        }
      } else {
        value2 += token2[1];
      }
    }
    if (!clean) {
      let raw = tokens.reduce((all, i3) => all + i3[1], "");
      node2.raws[prop] = { raw, value: value2 };
    }
    node2[prop] = value2;
  }
  rule(tokens) {
    tokens.pop();
    let node2 = new Rule$2();
    this.init(node2, tokens[0][2]);
    node2.raws.between = this.spacesAndCommentsFromEnd(tokens);
    this.raw(node2, "selector", tokens);
    this.current = node2;
  }
  spacesAndCommentsFromEnd(tokens) {
    let lastTokenType;
    let spaces = "";
    while (tokens.length) {
      lastTokenType = tokens[tokens.length - 1][0];
      if (lastTokenType !== "space" && lastTokenType !== "comment")
        break;
      spaces = tokens.pop()[1] + spaces;
    }
    return spaces;
  }
  // Errors
  spacesAndCommentsFromStart(tokens) {
    let next2;
    let spaces = "";
    while (tokens.length) {
      next2 = tokens[0][0];
      if (next2 !== "space" && next2 !== "comment")
        break;
      spaces += tokens.shift()[1];
    }
    return spaces;
  }
  spacesFromEnd(tokens) {
    let lastTokenType;
    let spaces = "";
    while (tokens.length) {
      lastTokenType = tokens[tokens.length - 1][0];
      if (lastTokenType !== "space")
        break;
      spaces = tokens.pop()[1] + spaces;
    }
    return spaces;
  }
  stringFrom(tokens, from2) {
    let result2 = "";
    for (let i3 = from2; i3 < tokens.length; i3++) {
      result2 += tokens[i3][1];
    }
    tokens.splice(from2, tokens.length - from2);
    return result2;
  }
  unclosedBlock() {
    let pos = this.current.source.start;
    throw this.input.error("Unclosed block", pos.line, pos.column);
  }
  unclosedBracket(bracket) {
    throw this.input.error(
      "Unclosed bracket",
      { offset: bracket[2] },
      { offset: bracket[2] + 1 }
    );
  }
  unexpectedClose(token2) {
    throw this.input.error(
      "Unexpected }",
      { offset: token2[2] },
      { offset: token2[2] + 1 }
    );
  }
  unknownWord(tokens) {
    throw this.input.error(
      "Unknown word",
      { offset: tokens[0][2] },
      { offset: tokens[0][2] + tokens[0][1].length }
    );
  }
  unnamedAtrule(node2, token2) {
    throw this.input.error(
      "At-rule without name",
      { offset: token2[2] },
      { offset: token2[2] + token2[1].length }
    );
  }
};
var parser = Parser$1;
let Container$2 = container;
let Parser = parser;
let Input$3 = input;
function parse$3(css2, opts) {
  let input2 = new Input$3(css2, opts);
  let parser2 = new Parser(input2);
  try {
    parser2.parse();
  } catch (e3) {
    throw e3;
  }
  return parser2.root;
}
var parse_1 = parse$3;
parse$3.default = parse$3;
Container$2.registerParse(parse$3);
let { isClean, my } = symbols;
let MapGenerator$1 = mapGenerator;
let stringify$2 = stringify_1;
let Container$1 = container;
let Document$2 = document$1;
let Result$2 = result;
let parse$2 = parse_1;
let Root$3 = root$b;
const TYPE_TO_CLASS_NAME = {
  atrule: "AtRule",
  comment: "Comment",
  decl: "Declaration",
  document: "Document",
  root: "Root",
  rule: "Rule"
};
const PLUGIN_PROPS = {
  AtRule: true,
  AtRuleExit: true,
  Comment: true,
  CommentExit: true,
  Declaration: true,
  DeclarationExit: true,
  Document: true,
  DocumentExit: true,
  Once: true,
  OnceExit: true,
  postcssPlugin: true,
  prepare: true,
  Root: true,
  RootExit: true,
  Rule: true,
  RuleExit: true
};
const NOT_VISITORS = {
  Once: true,
  postcssPlugin: true,
  prepare: true
};
const CHILDREN = 0;
function isPromise$1(obj) {
  return typeof obj === "object" && typeof obj.then === "function";
}
function getEvents(node2) {
  let key2 = false;
  let type = TYPE_TO_CLASS_NAME[node2.type];
  if (node2.type === "decl") {
    key2 = node2.prop.toLowerCase();
  } else if (node2.type === "atrule") {
    key2 = node2.name.toLowerCase();
  }
  if (key2 && node2.append) {
    return [
      type,
      type + "-" + key2,
      CHILDREN,
      type + "Exit",
      type + "Exit-" + key2
    ];
  } else if (key2) {
    return [type, type + "-" + key2, type + "Exit", type + "Exit-" + key2];
  } else if (node2.append) {
    return [type, CHILDREN, type + "Exit"];
  } else {
    return [type, type + "Exit"];
  }
}
function toStack(node2) {
  let events;
  if (node2.type === "document") {
    events = ["Document", CHILDREN, "DocumentExit"];
  } else if (node2.type === "root") {
    events = ["Root", CHILDREN, "RootExit"];
  } else {
    events = getEvents(node2);
  }
  return {
    eventIndex: 0,
    events,
    iterator: 0,
    node: node2,
    visitorIndex: 0,
    visitors: []
  };
}
function cleanMarks(node2) {
  node2[isClean] = false;
  if (node2.nodes)
    node2.nodes.forEach((i3) => cleanMarks(i3));
  return node2;
}
let postcss$1 = {};
let LazyResult$2 = class LazyResult2 {
  constructor(processor2, css2, opts) {
    this.stringified = false;
    this.processed = false;
    let root2;
    if (typeof css2 === "object" && css2 !== null && (css2.type === "root" || css2.type === "document")) {
      root2 = cleanMarks(css2);
    } else if (css2 instanceof LazyResult2 || css2 instanceof Result$2) {
      root2 = cleanMarks(css2.root);
      if (css2.map) {
        if (typeof opts.map === "undefined")
          opts.map = {};
        if (!opts.map.inline)
          opts.map.inline = false;
        opts.map.prev = css2.map;
      }
    } else {
      let parser2 = parse$2;
      if (opts.syntax)
        parser2 = opts.syntax.parse;
      if (opts.parser)
        parser2 = opts.parser;
      if (parser2.parse)
        parser2 = parser2.parse;
      try {
        root2 = parser2(css2, opts);
      } catch (error) {
        this.processed = true;
        this.error = error;
      }
      if (root2 && !root2[my]) {
        Container$1.rebuild(root2);
      }
    }
    this.result = new Result$2(processor2, root2, opts);
    this.helpers = { ...postcss$1, postcss: postcss$1, result: this.result };
    this.plugins = this.processor.plugins.map((plugin2) => {
      if (typeof plugin2 === "object" && plugin2.prepare) {
        return { ...plugin2, ...plugin2.prepare(this.result) };
      } else {
        return plugin2;
      }
    });
  }
  async() {
    if (this.error)
      return Promise.reject(this.error);
    if (this.processed)
      return Promise.resolve(this.result);
    if (!this.processing) {
      this.processing = this.runAsync();
    }
    return this.processing;
  }
  catch(onRejected) {
    return this.async().catch(onRejected);
  }
  finally(onFinally) {
    return this.async().then(onFinally, onFinally);
  }
  getAsyncError() {
    throw new Error("Use process(css).then(cb) to work with async plugins");
  }
  handleError(error, node2) {
    let plugin2 = this.result.lastPlugin;
    try {
      if (node2)
        node2.addToError(error);
      this.error = error;
      if (error.name === "CssSyntaxError" && !error.plugin) {
        error.plugin = plugin2.postcssPlugin;
        error.setMessage();
      } else if (plugin2.postcssVersion) {
        if (false)
          ;
      }
    } catch (err) {
      if (console && console.error)
        console.error(err);
    }
    return error;
  }
  prepareVisitors() {
    this.listeners = {};
    let add2 = (plugin2, type, cb2) => {
      if (!this.listeners[type])
        this.listeners[type] = [];
      this.listeners[type].push([plugin2, cb2]);
    };
    for (let plugin2 of this.plugins) {
      if (typeof plugin2 === "object") {
        for (let event in plugin2) {
          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
            throw new Error(
              "Unknown event ".concat(event, " in ").concat(plugin2.postcssPlugin, ". ") + "Try to update PostCSS (".concat(this.processor.version, " now).")
            );
          }
          if (!NOT_VISITORS[event]) {
            if (typeof plugin2[event] === "object") {
              for (let filter2 in plugin2[event]) {
                if (filter2 === "*") {
                  add2(plugin2, event, plugin2[event][filter2]);
                } else {
                  add2(
                    plugin2,
                    event + "-" + filter2.toLowerCase(),
                    plugin2[event][filter2]
                  );
                }
              }
            } else if (typeof plugin2[event] === "function") {
              add2(plugin2, event, plugin2[event]);
            }
          }
        }
      }
    }
    this.hasListener = Object.keys(this.listeners).length > 0;
  }
  async runAsync() {
    this.plugin = 0;
    for (let i3 = 0; i3 < this.plugins.length; i3++) {
      let plugin2 = this.plugins[i3];
      let promise = this.runOnRoot(plugin2);
      if (isPromise$1(promise)) {
        try {
          await promise;
        } catch (error) {
          throw this.handleError(error);
        }
      }
    }
    this.prepareVisitors();
    if (this.hasListener) {
      let root2 = this.result.root;
      while (!root2[isClean]) {
        root2[isClean] = true;
        let stack = [toStack(root2)];
        while (stack.length > 0) {
          let promise = this.visitTick(stack);
          if (isPromise$1(promise)) {
            try {
              await promise;
            } catch (e3) {
              let node2 = stack[stack.length - 1].node;
              throw this.handleError(e3, node2);
            }
          }
        }
      }
      if (this.listeners.OnceExit) {
        for (let [plugin2, visitor] of this.listeners.OnceExit) {
          this.result.lastPlugin = plugin2;
          try {
            if (root2.type === "document") {
              let roots = root2.nodes.map(
                (subRoot) => visitor(subRoot, this.helpers)
              );
              await Promise.all(roots);
            } else {
              await visitor(root2, this.helpers);
            }
          } catch (e3) {
            throw this.handleError(e3);
          }
        }
      }
    }
    this.processed = true;
    return this.stringify();
  }
  runOnRoot(plugin2) {
    this.result.lastPlugin = plugin2;
    try {
      if (typeof plugin2 === "object" && plugin2.Once) {
        if (this.result.root.type === "document") {
          let roots = this.result.root.nodes.map(
            (root2) => plugin2.Once(root2, this.helpers)
          );
          if (isPromise$1(roots[0])) {
            return Promise.all(roots);
          }
          return roots;
        }
        return plugin2.Once(this.result.root, this.helpers);
      } else if (typeof plugin2 === "function") {
        return plugin2(this.result.root, this.result);
      }
    } catch (error) {
      throw this.handleError(error);
    }
  }
  stringify() {
    if (this.error)
      throw this.error;
    if (this.stringified)
      return this.result;
    this.stringified = true;
    this.sync();
    let opts = this.result.opts;
    let str = stringify$2;
    if (opts.syntax)
      str = opts.syntax.stringify;
    if (opts.stringifier)
      str = opts.stringifier;
    if (str.stringify)
      str = str.stringify;
    let map2 = new MapGenerator$1(str, this.result.root, this.result.opts);
    let data2 = map2.generate();
    this.result.css = data2[0];
    this.result.map = data2[1];
    return this.result;
  }
  sync() {
    if (this.error)
      throw this.error;
    if (this.processed)
      return this.result;
    this.processed = true;
    if (this.processing) {
      throw this.getAsyncError();
    }
    for (let plugin2 of this.plugins) {
      let promise = this.runOnRoot(plugin2);
      if (isPromise$1(promise)) {
        throw this.getAsyncError();
      }
    }
    this.prepareVisitors();
    if (this.hasListener) {
      let root2 = this.result.root;
      while (!root2[isClean]) {
        root2[isClean] = true;
        this.walkSync(root2);
      }
      if (this.listeners.OnceExit) {
        if (root2.type === "document") {
          for (let subRoot of root2.nodes) {
            this.visitSync(this.listeners.OnceExit, subRoot);
          }
        } else {
          this.visitSync(this.listeners.OnceExit, root2);
        }
      }
    }
    return this.result;
  }
  then(onFulfilled, onRejected) {
    return this.async().then(onFulfilled, onRejected);
  }
  toString() {
    return this.css;
  }
  visitSync(visitors, node2) {
    for (let [plugin2, visitor] of visitors) {
      this.result.lastPlugin = plugin2;
      let promise;
      try {
        promise = visitor(node2, this.helpers);
      } catch (e3) {
        throw this.handleError(e3, node2.proxyOf);
      }
      if (node2.type !== "root" && node2.type !== "document" && !node2.parent) {
        return true;
      }
      if (isPromise$1(promise)) {
        throw this.getAsyncError();
      }
    }
  }
  visitTick(stack) {
    let visit = stack[stack.length - 1];
    let { node: node2, visitors } = visit;
    if (node2.type !== "root" && node2.type !== "document" && !node2.parent) {
      stack.pop();
      return;
    }
    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
      let [plugin2, visitor] = visitors[visit.visitorIndex];
      visit.visitorIndex += 1;
      if (visit.visitorIndex === visitors.length) {
        visit.visitors = [];
        visit.visitorIndex = 0;
      }
      this.result.lastPlugin = plugin2;
      try {
        return visitor(node2.toProxy(), this.helpers);
      } catch (e3) {
        throw this.handleError(e3, node2);
      }
    }
    if (visit.iterator !== 0) {
      let iterator = visit.iterator;
      let child;
      while (child = node2.nodes[node2.indexes[iterator]]) {
        node2.indexes[iterator] += 1;
        if (!child[isClean]) {
          child[isClean] = true;
          stack.push(toStack(child));
          return;
        }
      }
      visit.iterator = 0;
      delete node2.indexes[iterator];
    }
    let events = visit.events;
    while (visit.eventIndex < events.length) {
      let event = events[visit.eventIndex];
      visit.eventIndex += 1;
      if (event === CHILDREN) {
        if (node2.nodes && node2.nodes.length) {
          node2[isClean] = true;
          visit.iterator = node2.getIterator();
        }
        return;
      } else if (this.listeners[event]) {
        visit.visitors = this.listeners[event];
        return;
      }
    }
    stack.pop();
  }
  walkSync(node2) {
    node2[isClean] = true;
    let events = getEvents(node2);
    for (let event of events) {
      if (event === CHILDREN) {
        if (node2.nodes) {
          node2.each((child) => {
            if (!child[isClean])
              this.walkSync(child);
          });
        }
      } else {
        let visitors = this.listeners[event];
        if (visitors) {
          if (this.visitSync(visitors, node2.toProxy()))
            return;
        }
      }
    }
  }
  warnings() {
    return this.sync().warnings();
  }
  get content() {
    return this.stringify().content;
  }
  get css() {
    return this.stringify().css;
  }
  get map() {
    return this.stringify().map;
  }
  get messages() {
    return this.sync().messages;
  }
  get opts() {
    return this.result.opts;
  }
  get processor() {
    return this.result.processor;
  }
  get root() {
    return this.sync().root;
  }
  get [Symbol.toStringTag]() {
    return "LazyResult";
  }
};
LazyResult$2.registerPostcss = (dependant) => {
  postcss$1 = dependant;
};
var lazyResult = LazyResult$2;
LazyResult$2.default = LazyResult$2;
Root$3.registerLazyResult(LazyResult$2);
Document$2.registerLazyResult(LazyResult$2);
let MapGenerator = mapGenerator;
let stringify$1 = stringify_1;
let parse$1 = parse_1;
const Result$1 = result;
let NoWorkResult$1 = class NoWorkResult2 {
  constructor(processor2, css2, opts) {
    css2 = css2.toString();
    this.stringified = false;
    this._processor = processor2;
    this._css = css2;
    this._opts = opts;
    this._map = void 0;
    let root2;
    let str = stringify$1;
    this.result = new Result$1(this._processor, root2, this._opts);
    this.result.css = css2;
    let self2 = this;
    Object.defineProperty(this.result, "root", {
      get() {
        return self2.root;
      }
    });
    let map2 = new MapGenerator(str, root2, this._opts, css2);
    if (map2.isMap()) {
      let [generatedCSS, generatedMap] = map2.generate();
      if (generatedCSS) {
        this.result.css = generatedCSS;
      }
      if (generatedMap) {
        this.result.map = generatedMap;
      }
    }
  }
  async() {
    if (this.error)
      return Promise.reject(this.error);
    return Promise.resolve(this.result);
  }
  catch(onRejected) {
    return this.async().catch(onRejected);
  }
  finally(onFinally) {
    return this.async().then(onFinally, onFinally);
  }
  sync() {
    if (this.error)
      throw this.error;
    return this.result;
  }
  then(onFulfilled, onRejected) {
    return this.async().then(onFulfilled, onRejected);
  }
  toString() {
    return this._css;
  }
  warnings() {
    return [];
  }
  get content() {
    return this.result.css;
  }
  get css() {
    return this.result.css;
  }
  get map() {
    return this.result.map;
  }
  get messages() {
    return [];
  }
  get opts() {
    return this.result.opts;
  }
  get processor() {
    return this.result.processor;
  }
  get root() {
    if (this._root) {
      return this._root;
    }
    let root2;
    let parser2 = parse$1;
    try {
      root2 = parser2(this._css, this._opts);
    } catch (error) {
      this.error = error;
    }
    if (this.error) {
      throw this.error;
    } else {
      this._root = root2;
      return root2;
    }
  }
  get [Symbol.toStringTag]() {
    return "NoWorkResult";
  }
};
var noWorkResult = NoWorkResult$1;
NoWorkResult$1.default = NoWorkResult$1;
let NoWorkResult = noWorkResult;
let LazyResult$1 = lazyResult;
let Document$1 = document$1;
let Root$2 = root$b;
let Processor$1 = class Processor2 {
  constructor(plugins = []) {
    this.version = "8.4.31";
    this.plugins = this.normalize(plugins);
  }
  normalize(plugins) {
    let normalized = [];
    for (let i3 of plugins) {
      if (i3.postcss === true) {
        i3 = i3();
      } else if (i3.postcss) {
        i3 = i3.postcss;
      }
      if (typeof i3 === "object" && Array.isArray(i3.plugins)) {
        normalized = normalized.concat(i3.plugins);
      } else if (typeof i3 === "object" && i3.postcssPlugin) {
        normalized.push(i3);
      } else if (typeof i3 === "function") {
        normalized.push(i3);
      } else if (typeof i3 === "object" && (i3.parse || i3.stringify))
        ;
      else {
        throw new Error(i3 + " is not a PostCSS plugin");
      }
    }
    return normalized;
  }
  process(css2, opts = {}) {
    if (this.plugins.length === 0 && typeof opts.parser === "undefined" && typeof opts.stringifier === "undefined" && typeof opts.syntax === "undefined") {
      return new NoWorkResult(this, css2, opts);
    } else {
      return new LazyResult$1(this, css2, opts);
    }
  }
  use(plugin2) {
    this.plugins = this.plugins.concat(this.normalize([plugin2]));
    return this;
  }
};
var processor = Processor$1;
Processor$1.default = Processor$1;
Root$2.registerProcessor(Processor$1);
Document$1.registerProcessor(Processor$1);
let Declaration$1 = declaration;
let PreviousMap = previousMap;
let Comment$1 = comment;
let AtRule$1 = atRule;
let Input$2 = input;
let Root$1 = root$b;
let Rule$1 = rule;
function fromJSON$1(json, inputs) {
  if (Array.isArray(json))
    return json.map((n2) => fromJSON$1(n2));
  let { inputs: ownInputs, ...defaults2 } = json;
  if (ownInputs) {
    inputs = [];
    for (let input2 of ownInputs) {
      let inputHydrated = { ...input2, __proto__: Input$2.prototype };
      if (inputHydrated.map) {
        inputHydrated.map = {
          ...inputHydrated.map,
          __proto__: PreviousMap.prototype
        };
      }
      inputs.push(inputHydrated);
    }
  }
  if (defaults2.nodes) {
    defaults2.nodes = json.nodes.map((n2) => fromJSON$1(n2, inputs));
  }
  if (defaults2.source) {
    let { inputId, ...source } = defaults2.source;
    defaults2.source = source;
    if (inputId != null) {
      defaults2.source.input = inputs[inputId];
    }
  }
  if (defaults2.type === "root") {
    return new Root$1(defaults2);
  } else if (defaults2.type === "decl") {
    return new Declaration$1(defaults2);
  } else if (defaults2.type === "rule") {
    return new Rule$1(defaults2);
  } else if (defaults2.type === "comment") {
    return new Comment$1(defaults2);
  } else if (defaults2.type === "atrule") {
    return new AtRule$1(defaults2);
  } else {
    throw new Error("Unknown node type: " + json.type);
  }
}
var fromJSON_1 = fromJSON$1;
fromJSON$1.default = fromJSON$1;
let CssSyntaxError = cssSyntaxError;
let Declaration = declaration;
let LazyResult = lazyResult;
let Container = container;
let Processor = processor;
let stringify = stringify_1;
let fromJSON = fromJSON_1;
let Document = document$1;
let Warning = warning$1;
let Comment = comment;
let AtRule = atRule;
let Result = result;
let Input$1 = input;
let parse = parse_1;
let list = list_1;
let Rule = rule;
let Root = root$b;
let Node = node;
function postcss(...plugins) {
  if (plugins.length === 1 && Array.isArray(plugins[0])) {
    plugins = plugins[0];
  }
  return new Processor(plugins);
}
postcss.plugin = function plugin(name2, initializer) {
  let warningPrinted = false;
  function creator(...args) {
    if (console && console.warn && !warningPrinted) {
      warningPrinted = true;
      console.warn(
        name2 + ": postcss.plugin was deprecated. Migration guide:\nhttps://evilmartians.com/chronicles/postcss-8-plugin-migration"
      );
      if ({}.LANG && {}.LANG.startsWith("cn")) {
        console.warn(
          name2 + ": 里面 postcss.plugin 被弃用. 迁移指南:\nhttps://www.w3ctech.com/topic/2226"
        );
      }
    }
    let transformer = initializer(...args);
    transformer.postcssPlugin = name2;
    transformer.postcssVersion = new Processor().version;
    return transformer;
  }
  let cache;
  Object.defineProperty(creator, "postcss", {
    get() {
      if (!cache)
        cache = creator();
      return cache;
    }
  });
  creator.process = function(css2, processOpts, pluginOpts) {
    return postcss([creator(pluginOpts)]).process(css2, processOpts);
  };
  return creator;
};
postcss.stringify = stringify;
postcss.parse = parse;
postcss.fromJSON = fromJSON;
postcss.list = list;
postcss.comment = (defaults2) => new Comment(defaults2);
postcss.atRule = (defaults2) => new AtRule(defaults2);
postcss.decl = (defaults2) => new Declaration(defaults2);
postcss.rule = (defaults2) => new Rule(defaults2);
postcss.root = (defaults2) => new Root(defaults2);
postcss.document = (defaults2) => new Document(defaults2);
postcss.CssSyntaxError = CssSyntaxError;
postcss.Declaration = Declaration;
postcss.Container = Container;
postcss.Processor = Processor;
postcss.Document = Document;
postcss.Comment = Comment;
postcss.Warning = Warning;
postcss.AtRule = AtRule;
postcss.Result = Result;
postcss.Input = Input$1;
postcss.Rule = Rule;
postcss.Root = Root;
postcss.Node = Node;
LazyResult.registerPostcss(postcss);
var postcss_1 = postcss;
postcss.default = postcss;
const htmlparser = lib$6;
const escapeStringRegexp = escapeStringRegexp$1;
const { isPlainObject: isPlainObject$1 } = isPlainObject$3;
const deepmerge$1 = cjs;
const parseSrcset = parseSrcsetExports;
const { parse: postcssParse } = postcss_1;
const mediaTags = [
  "img",
  "audio",
  "video",
  "picture",
  "svg",
  "object",
  "map",
  "iframe",
  "embed"
];
const vulnerableTags = ["script", "style"];
function each$1(obj, cb2) {
  if (obj) {
    Object.keys(obj).forEach(function(key2) {
      cb2(obj[key2], key2);
    });
  }
}
function has$2(obj, key2) {
  return {}.hasOwnProperty.call(obj, key2);
}
function filter(a4, cb2) {
  const n2 = [];
  each$1(a4, function(v2) {
    if (cb2(v2)) {
      n2.push(v2);
    }
  });
  return n2;
}
function isEmptyObject(obj) {
  for (const key2 in obj) {
    if (has$2(obj, key2)) {
      return false;
    }
  }
  return true;
}
function stringifySrcset(parsedSrcset) {
  return parsedSrcset.map(function(part) {
    if (!part.url) {
      throw new Error("URL missing");
    }
    return part.url + (part.w ? " ".concat(part.w, "w") : "") + (part.h ? " ".concat(part.h, "h") : "") + (part.d ? " ".concat(part.d, "x") : "");
  }).join(", ");
}
var sanitizeHtml_1 = sanitizeHtml;
const VALID_HTML_ATTRIBUTE_NAME = /^[^\0\t\n\f\r /<=>]+$/;
function sanitizeHtml(html, options, _recursing) {
  if (html == null) {
    return "";
  }
  if (typeof html === "number") {
    html = html.toString();
  }
  let result2 = "";
  let tempResult = "";
  function Frame(tag2, attribs) {
    const that = this;
    this.tag = tag2;
    this.attribs = attribs || {};
    this.tagPosition = result2.length;
    this.text = "";
    this.mediaChildren = [];
    this.updateParentNodeText = function() {
      if (stack.length) {
        const parentFrame = stack[stack.length - 1];
        parentFrame.text += that.text;
      }
    };
    this.updateParentNodeMediaChildren = function() {
      if (stack.length && mediaTags.includes(this.tag)) {
        const parentFrame = stack[stack.length - 1];
        parentFrame.mediaChildren.push(this.tag);
      }
    };
  }
  options = Object.assign({}, sanitizeHtml.defaults, options);
  options.parser = Object.assign({}, htmlParserDefaults, options.parser);
  const tagAllowed = function(name2) {
    return options.allowedTags === false || (options.allowedTags || []).indexOf(name2) > -1;
  };
  vulnerableTags.forEach(function(tag2) {
    if (tagAllowed(tag2) && !options.allowVulnerableTags) {
      console.warn("\n\n⚠️ Your `allowedTags` option includes, `".concat(tag2, "`, which is inherently\nvulnerable to XSS attacks. Please remove it from `allowedTags`.\nOr, to disable this warning, add the `allowVulnerableTags` option\nand ensure you are accounting for this risk.\n\n"));
    }
  });
  const nonTextTagsArray = options.nonTextTags || [
    "script",
    "style",
    "textarea",
    "option"
  ];
  let allowedAttributesMap;
  let allowedAttributesGlobMap;
  if (options.allowedAttributes) {
    allowedAttributesMap = {};
    allowedAttributesGlobMap = {};
    each$1(options.allowedAttributes, function(attributes, tag2) {
      allowedAttributesMap[tag2] = [];
      const globRegex = [];
      attributes.forEach(function(obj) {
        if (typeof obj === "string" && obj.indexOf("*") >= 0) {
          globRegex.push(escapeStringRegexp(obj).replace(/\\\*/g, ".*"));
        } else {
          allowedAttributesMap[tag2].push(obj);
        }
      });
      if (globRegex.length) {
        allowedAttributesGlobMap[tag2] = new RegExp("^(" + globRegex.join("|") + ")$");
      }
    });
  }
  const allowedClassesMap = {};
  const allowedClassesGlobMap = {};
  const allowedClassesRegexMap = {};
  each$1(options.allowedClasses, function(classes, tag2) {
    if (allowedAttributesMap) {
      if (!has$2(allowedAttributesMap, tag2)) {
        allowedAttributesMap[tag2] = [];
      }
      allowedAttributesMap[tag2].push("class");
    }
    allowedClassesMap[tag2] = [];
    allowedClassesRegexMap[tag2] = [];
    const globRegex = [];
    classes.forEach(function(obj) {
      if (typeof obj === "string" && obj.indexOf("*") >= 0) {
        globRegex.push(escapeStringRegexp(obj).replace(/\\\*/g, ".*"));
      } else if (obj instanceof RegExp) {
        allowedClassesRegexMap[tag2].push(obj);
      } else {
        allowedClassesMap[tag2].push(obj);
      }
    });
    if (globRegex.length) {
      allowedClassesGlobMap[tag2] = new RegExp("^(" + globRegex.join("|") + ")$");
    }
  });
  const transformTagsMap = {};
  let transformTagsAll;
  each$1(options.transformTags, function(transform2, tag2) {
    let transFun;
    if (typeof transform2 === "function") {
      transFun = transform2;
    } else if (typeof transform2 === "string") {
      transFun = sanitizeHtml.simpleTransform(transform2);
    }
    if (tag2 === "*") {
      transformTagsAll = transFun;
    } else {
      transformTagsMap[tag2] = transFun;
    }
  });
  let depth;
  let stack;
  let skipMap;
  let transformMap;
  let skipText;
  let skipTextDepth;
  let addedText = false;
  initializeState();
  const parser2 = new htmlparser.Parser({
    onopentag: function(name2, attribs) {
      if (options.enforceHtmlBoundary && name2 === "html") {
        initializeState();
      }
      if (skipText) {
        skipTextDepth++;
        return;
      }
      const frame = new Frame(name2, attribs);
      stack.push(frame);
      let skip = false;
      const hasText = !!frame.text;
      let transformedTag;
      if (has$2(transformTagsMap, name2)) {
        transformedTag = transformTagsMap[name2](name2, attribs);
        frame.attribs = attribs = transformedTag.attribs;
        if (transformedTag.text !== void 0) {
          frame.innerText = transformedTag.text;
        }
        if (name2 !== transformedTag.tagName) {
          frame.name = name2 = transformedTag.tagName;
          transformMap[depth] = transformedTag.tagName;
        }
      }
      if (transformTagsAll) {
        transformedTag = transformTagsAll(name2, attribs);
        frame.attribs = attribs = transformedTag.attribs;
        if (name2 !== transformedTag.tagName) {
          frame.name = name2 = transformedTag.tagName;
          transformMap[depth] = transformedTag.tagName;
        }
      }
      if (!tagAllowed(name2) || options.disallowedTagsMode === "recursiveEscape" && !isEmptyObject(skipMap) || options.nestingLimit != null && depth >= options.nestingLimit) {
        skip = true;
        skipMap[depth] = true;
        if (options.disallowedTagsMode === "discard") {
          if (nonTextTagsArray.indexOf(name2) !== -1) {
            skipText = true;
            skipTextDepth = 1;
          }
        }
        skipMap[depth] = true;
      }
      depth++;
      if (skip) {
        if (options.disallowedTagsMode === "discard") {
          return;
        }
        tempResult = result2;
        result2 = "";
      }
      result2 += "<" + name2;
      if (name2 === "script") {
        if (options.allowedScriptHostnames || options.allowedScriptDomains) {
          frame.innerText = "";
        }
      }
      if (!allowedAttributesMap || has$2(allowedAttributesMap, name2) || allowedAttributesMap["*"]) {
        each$1(attribs, function(value2, a4) {
          if (!VALID_HTML_ATTRIBUTE_NAME.test(a4)) {
            delete frame.attribs[a4];
            return;
          }
          let passedAllowedAttributesMapCheck = false;
          if (!allowedAttributesMap || has$2(allowedAttributesMap, name2) && allowedAttributesMap[name2].indexOf(a4) !== -1 || allowedAttributesMap["*"] && allowedAttributesMap["*"].indexOf(a4) !== -1 || has$2(allowedAttributesGlobMap, name2) && allowedAttributesGlobMap[name2].test(a4) || allowedAttributesGlobMap["*"] && allowedAttributesGlobMap["*"].test(a4)) {
            passedAllowedAttributesMapCheck = true;
          } else if (allowedAttributesMap && allowedAttributesMap[name2]) {
            for (const o2 of allowedAttributesMap[name2]) {
              if (isPlainObject$1(o2) && o2.name && o2.name === a4) {
                passedAllowedAttributesMapCheck = true;
                let newValue = "";
                if (o2.multiple === true) {
                  const splitStrArray = value2.split(" ");
                  for (const s4 of splitStrArray) {
                    if (o2.values.indexOf(s4) !== -1) {
                      if (newValue === "") {
                        newValue = s4;
                      } else {
                        newValue += " " + s4;
                      }
                    }
                  }
                } else if (o2.values.indexOf(value2) >= 0) {
                  newValue = value2;
                }
                value2 = newValue;
              }
            }
          }
          if (passedAllowedAttributesMapCheck) {
            if (options.allowedSchemesAppliedToAttributes.indexOf(a4) !== -1) {
              if (naughtyHref(name2, value2)) {
                delete frame.attribs[a4];
                return;
              }
            }
            if (name2 === "script" && a4 === "src") {
              let allowed = true;
              try {
                const parsed = parseUrl(value2);
                if (options.allowedScriptHostnames || options.allowedScriptDomains) {
                  const allowedHostname = (options.allowedScriptHostnames || []).find(function(hostname) {
                    return hostname === parsed.url.hostname;
                  });
                  const allowedDomain = (options.allowedScriptDomains || []).find(function(domain) {
                    return parsed.url.hostname === domain || parsed.url.hostname.endsWith(".".concat(domain));
                  });
                  allowed = allowedHostname || allowedDomain;
                }
              } catch (e3) {
                allowed = false;
              }
              if (!allowed) {
                delete frame.attribs[a4];
                return;
              }
            }
            if (name2 === "iframe" && a4 === "src") {
              let allowed = true;
              try {
                const parsed = parseUrl(value2);
                if (parsed.isRelativeUrl) {
                  allowed = has$2(options, "allowIframeRelativeUrls") ? options.allowIframeRelativeUrls : !options.allowedIframeHostnames && !options.allowedIframeDomains;
                } else if (options.allowedIframeHostnames || options.allowedIframeDomains) {
                  const allowedHostname = (options.allowedIframeHostnames || []).find(function(hostname) {
                    return hostname === parsed.url.hostname;
                  });
                  const allowedDomain = (options.allowedIframeDomains || []).find(function(domain) {
                    return parsed.url.hostname === domain || parsed.url.hostname.endsWith(".".concat(domain));
                  });
                  allowed = allowedHostname || allowedDomain;
                }
              } catch (e3) {
                allowed = false;
              }
              if (!allowed) {
                delete frame.attribs[a4];
                return;
              }
            }
            if (a4 === "srcset") {
              try {
                let parsed = parseSrcset(value2);
                parsed.forEach(function(value3) {
                  if (naughtyHref("srcset", value3.url)) {
                    value3.evil = true;
                  }
                });
                parsed = filter(parsed, function(v2) {
                  return !v2.evil;
                });
                if (!parsed.length) {
                  delete frame.attribs[a4];
                  return;
                } else {
                  value2 = stringifySrcset(filter(parsed, function(v2) {
                    return !v2.evil;
                  }));
                  frame.attribs[a4] = value2;
                }
              } catch (e3) {
                delete frame.attribs[a4];
                return;
              }
            }
            if (a4 === "class") {
              const allowedSpecificClasses = allowedClassesMap[name2];
              const allowedWildcardClasses = allowedClassesMap["*"];
              const allowedSpecificClassesGlob = allowedClassesGlobMap[name2];
              const allowedSpecificClassesRegex = allowedClassesRegexMap[name2];
              const allowedWildcardClassesGlob = allowedClassesGlobMap["*"];
              const allowedClassesGlobs = [
                allowedSpecificClassesGlob,
                allowedWildcardClassesGlob
              ].concat(allowedSpecificClassesRegex).filter(function(t3) {
                return t3;
              });
              if (allowedSpecificClasses && allowedWildcardClasses) {
                value2 = filterClasses(value2, deepmerge$1(allowedSpecificClasses, allowedWildcardClasses), allowedClassesGlobs);
              } else {
                value2 = filterClasses(value2, allowedSpecificClasses || allowedWildcardClasses, allowedClassesGlobs);
              }
              if (!value2.length) {
                delete frame.attribs[a4];
                return;
              }
            }
            if (a4 === "style") {
              if (options.parseStyleAttributes) {
                try {
                  const abstractSyntaxTree = postcssParse(name2 + " {" + value2 + "}");
                  const filteredAST = filterCss(abstractSyntaxTree, options.allowedStyles);
                  value2 = stringifyStyleAttributes(filteredAST);
                  if (value2.length === 0) {
                    delete frame.attribs[a4];
                    return;
                  }
                } catch (e3) {
                  console.warn('Failed to parse "' + name2 + " {" + value2 + "}\", If you're running this in a browser, we recommend to disable style parsing: options.parseStyleAttributes: false, since this only works in a node environment due to a postcss dependency, More info: https://github.com/apostrophecms/sanitize-html/issues/547");
                  delete frame.attribs[a4];
                  return;
                }
              } else if (options.allowedStyles) {
                throw new Error("allowedStyles option cannot be used together with parseStyleAttributes: false.");
              }
            }
            result2 += " " + a4;
            if (value2 && value2.length) {
              result2 += '="' + escapeHtml(value2, true) + '"';
            }
          } else {
            delete frame.attribs[a4];
          }
        });
      }
      if (options.selfClosing.indexOf(name2) !== -1) {
        result2 += " />";
      } else {
        result2 += ">";
        if (frame.innerText && !hasText && !options.textFilter) {
          result2 += escapeHtml(frame.innerText);
          addedText = true;
        }
      }
      if (skip) {
        result2 = tempResult + escapeHtml(result2);
        tempResult = "";
      }
    },
    ontext: function(text2) {
      if (skipText) {
        return;
      }
      const lastFrame = stack[stack.length - 1];
      let tag2;
      if (lastFrame) {
        tag2 = lastFrame.tag;
        text2 = lastFrame.innerText !== void 0 ? lastFrame.innerText : text2;
      }
      if (options.disallowedTagsMode === "discard" && (tag2 === "script" || tag2 === "style")) {
        result2 += text2;
      } else {
        const escaped = escapeHtml(text2, false);
        if (options.textFilter && !addedText) {
          result2 += options.textFilter(escaped, tag2);
        } else if (!addedText) {
          result2 += escaped;
        }
      }
      if (stack.length) {
        const frame = stack[stack.length - 1];
        frame.text += text2;
      }
    },
    onclosetag: function(name2, isImplied) {
      if (skipText) {
        skipTextDepth--;
        if (!skipTextDepth) {
          skipText = false;
        } else {
          return;
        }
      }
      const frame = stack.pop();
      if (!frame) {
        return;
      }
      if (frame.tag !== name2) {
        stack.push(frame);
        return;
      }
      skipText = options.enforceHtmlBoundary ? name2 === "html" : false;
      depth--;
      const skip = skipMap[depth];
      if (skip) {
        delete skipMap[depth];
        if (options.disallowedTagsMode === "discard") {
          frame.updateParentNodeText();
          return;
        }
        tempResult = result2;
        result2 = "";
      }
      if (transformMap[depth]) {
        name2 = transformMap[depth];
        delete transformMap[depth];
      }
      if (options.exclusiveFilter && options.exclusiveFilter(frame)) {
        result2 = result2.substr(0, frame.tagPosition);
        return;
      }
      frame.updateParentNodeMediaChildren();
      frame.updateParentNodeText();
      if (
        // Already output />
        options.selfClosing.indexOf(name2) !== -1 || // Escaped tag, closing tag is implied
        isImplied && !tagAllowed(name2) && ["escape", "recursiveEscape"].indexOf(options.disallowedTagsMode) >= 0
      ) {
        if (skip) {
          result2 = tempResult;
          tempResult = "";
        }
        return;
      }
      result2 += "</" + name2 + ">";
      if (skip) {
        result2 = tempResult + escapeHtml(result2);
        tempResult = "";
      }
      addedText = false;
    }
  }, options.parser);
  parser2.write(html);
  parser2.end();
  return result2;
  function initializeState() {
    result2 = "";
    depth = 0;
    stack = [];
    skipMap = {};
    transformMap = {};
    skipText = false;
    skipTextDepth = 0;
  }
  function escapeHtml(s4, quote) {
    if (typeof s4 !== "string") {
      s4 = s4 + "";
    }
    if (options.parser.decodeEntities) {
      s4 = s4.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
      if (quote) {
        s4 = s4.replace(/"/g, "&quot;");
      }
    }
    s4 = s4.replace(/&(?![a-zA-Z0-9#]{1,20};)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    if (quote) {
      s4 = s4.replace(/"/g, "&quot;");
    }
    return s4;
  }
  function naughtyHref(name2, href) {
    href = href.replace(/[\x00-\x20]+/g, "");
    while (true) {
      const firstIndex = href.indexOf("<!--");
      if (firstIndex === -1) {
        break;
      }
      const lastIndex = href.indexOf("-->", firstIndex + 4);
      if (lastIndex === -1) {
        break;
      }
      href = href.substring(0, firstIndex) + href.substring(lastIndex + 3);
    }
    const matches = href.match(/^([a-zA-Z][a-zA-Z0-9.\-+]*):/);
    if (!matches) {
      if (href.match(/^[/\\]{2}/)) {
        return !options.allowProtocolRelative;
      }
      return false;
    }
    const scheme = matches[1].toLowerCase();
    if (has$2(options.allowedSchemesByTag, name2)) {
      return options.allowedSchemesByTag[name2].indexOf(scheme) === -1;
    }
    return !options.allowedSchemes || options.allowedSchemes.indexOf(scheme) === -1;
  }
  function parseUrl(value2) {
    value2 = value2.replace(/^(\w+:)?\s*[\\/]\s*[\\/]/, "$1//");
    if (value2.startsWith("relative:")) {
      throw new Error("relative: exploit attempt");
    }
    let base = "relative://relative-site";
    for (let i3 = 0; i3 < 100; i3++) {
      base += "/".concat(i3);
    }
    const parsed = new URL(value2, base);
    const isRelativeUrl = parsed && parsed.hostname === "relative-site" && parsed.protocol === "relative:";
    return {
      isRelativeUrl,
      url: parsed
    };
  }
  function filterCss(abstractSyntaxTree, allowedStyles) {
    if (!allowedStyles) {
      return abstractSyntaxTree;
    }
    const astRules = abstractSyntaxTree.nodes[0];
    let selectedRule;
    if (allowedStyles[astRules.selector] && allowedStyles["*"]) {
      selectedRule = deepmerge$1(
        allowedStyles[astRules.selector],
        allowedStyles["*"]
      );
    } else {
      selectedRule = allowedStyles[astRules.selector] || allowedStyles["*"];
    }
    if (selectedRule) {
      abstractSyntaxTree.nodes[0].nodes = astRules.nodes.reduce(filterDeclarations(selectedRule), []);
    }
    return abstractSyntaxTree;
  }
  function stringifyStyleAttributes(filteredAST) {
    return filteredAST.nodes[0].nodes.reduce(function(extractedAttributes, attrObject) {
      extractedAttributes.push(
        "".concat(attrObject.prop, ":").concat(attrObject.value).concat(attrObject.important ? " !important" : "")
      );
      return extractedAttributes;
    }, []).join(";");
  }
  function filterDeclarations(selectedRule) {
    return function(allowedDeclarationsList, attributeObject) {
      if (has$2(selectedRule, attributeObject.prop)) {
        const matchesRegex = selectedRule[attributeObject.prop].some(function(regularExpression) {
          return regularExpression.test(attributeObject.value);
        });
        if (matchesRegex) {
          allowedDeclarationsList.push(attributeObject);
        }
      }
      return allowedDeclarationsList;
    };
  }
  function filterClasses(classes, allowed, allowedGlobs) {
    if (!allowed) {
      return classes;
    }
    classes = classes.split(/\s+/);
    return classes.filter(function(clss) {
      return allowed.indexOf(clss) !== -1 || allowedGlobs.some(function(glob) {
        return glob.test(clss);
      });
    }).join(" ");
  }
}
const htmlParserDefaults = {
  decodeEntities: true
};
sanitizeHtml.defaults = {
  allowedTags: [
    // Sections derived from MDN element categories and limited to the more
    // benign categories.
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element
    // Content sectioning
    "address",
    "article",
    "aside",
    "footer",
    "header",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "hgroup",
    "main",
    "nav",
    "section",
    // Text content
    "blockquote",
    "dd",
    "div",
    "dl",
    "dt",
    "figcaption",
    "figure",
    "hr",
    "li",
    "main",
    "ol",
    "p",
    "pre",
    "ul",
    // Inline text semantics
    "a",
    "abbr",
    "b",
    "bdi",
    "bdo",
    "br",
    "cite",
    "code",
    "data",
    "dfn",
    "em",
    "i",
    "kbd",
    "mark",
    "q",
    "rb",
    "rp",
    "rt",
    "rtc",
    "ruby",
    "s",
    "samp",
    "small",
    "span",
    "strong",
    "sub",
    "sup",
    "time",
    "u",
    "var",
    "wbr",
    // Table content
    "caption",
    "col",
    "colgroup",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "tr"
  ],
  disallowedTagsMode: "discard",
  allowedAttributes: {
    a: ["href", "name", "target"],
    // We don't currently allow img itself by default, but
    // these attributes would make sense if we did.
    img: ["src", "srcset", "alt", "title", "width", "height", "loading"]
  },
  // Lots of these won't come up by default because we don't allow them
  selfClosing: ["img", "br", "hr", "area", "base", "basefont", "input", "link", "meta"],
  // URL schemes we permit
  allowedSchemes: ["http", "https", "ftp", "mailto", "tel"],
  allowedSchemesByTag: {},
  allowedSchemesAppliedToAttributes: ["href", "src", "cite"],
  allowProtocolRelative: true,
  enforceHtmlBoundary: false,
  parseStyleAttributes: true
};
sanitizeHtml.simpleTransform = function(newTagName, newAttribs, merge2) {
  merge2 = merge2 === void 0 ? true : merge2;
  newAttribs = newAttribs || {};
  return function(tagName, attribs) {
    let attrib;
    if (merge2) {
      for (attrib in newAttribs) {
        attribs[attrib] = newAttribs[attrib];
      }
    } else {
      attribs = newAttribs;
    }
    return {
      tagName: newTagName,
      attribs
    };
  };
};
const sanitizeHtml$1 = /* @__PURE__ */ getDefaultExportFromCjs(sanitizeHtml_1);
function imageSize(url) {
  const img = document.createElement("img");
  const promise = new Promise((resolve2, reject) => {
    img.onload = () => {
      const width2 = img.naturalWidth;
      const height2 = img.naturalHeight;
      resolve2({ width: width2, height: height2 });
    };
    img.onerror = reject;
  });
  img.src = sanitizeHtml$1(url);
  return promise;
}
async function createImage(file, quality) {
  const image = await imageSize(file);
  let imageWidth = image.width;
  let imageHeight = image.height;
  const img = new Image();
  img.src = sanitizeHtml$1(file);
  const canvas = document.createElement("canvas");
  const ctx2 = canvas.getContext("2d");
  const MAX_IMAGE_SIZE = 80;
  if (imageWidth > MAX_IMAGE_SIZE || imageHeight > MAX_IMAGE_SIZE) {
    if (imageWidth > imageHeight) {
      let ratio = MAX_IMAGE_SIZE / imageWidth;
      imageWidth = MAX_IMAGE_SIZE;
      imageHeight *= ratio;
    } else {
      let ratio = MAX_IMAGE_SIZE / imageHeight;
      imageHeight = MAX_IMAGE_SIZE;
      imageWidth *= ratio;
    }
  }
  canvas.width = imageWidth;
  canvas.height = imageHeight;
  ctx2.drawImage(img, 0, 0, imageWidth, imageHeight);
  return canvas.toDataURL("image/jpeg", quality);
}
async function getSuitableImage(file) {
  return await createImage(file, 0.6);
}
const createToken = async (data2, amount, decimals) => {
  return new Promise(async (resolve2, reject) => {
    if (data2.url.startsWith("data:image/", 0)) {
      const compressedImage = await getSuitableImage(data2.url);
      const pureCompressedImage = compressedImage.slice(compressedImage.indexOf(",") + 1);
      var xmlString = "<artimage></artimage>";
      var parser2 = new DOMParser();
      var xmlDoc = parser2.parseFromString(xmlString, "text/xml");
      xmlDoc.firstElementChild.innerHTML = pureCompressedImage;
      var serializer = new XMLSerializer();
      data2.url = serializer.serializeToString(xmlDoc);
    }
    window.MDS.cmd(
      'tokencreate name:"'.concat(JSON.stringify(data2), '" amount:"').concat(amount, '" decimals:"').concat(decimals),
      (resp) => {
        if (!resp.status && !resp.pending)
          reject(
            resp.error ? resp.error : resp.message ? resp.message : "Sending failed, please try again later"
          );
        if (!resp.status && resp.pending)
          resolve2(3);
        if (resp.status)
          resolve2(2);
      }
    );
  });
};
const consolidate = (tokenid, burn, password) => {
  return new Promise((resolve2, reject) => {
    const hasBurn = burn && burn.length ? burn : false;
    const hasPassword = password && password.length ? password : false;
    window.MDS.cmd(
      "consolidate tokenid:".concat(tokenid, " ").concat(hasBurn ? "burn:" + burn : "", " ").concat(hasPassword ? "password:" + hasPassword : ""),
      (resp) => {
        if (!resp.status && !resp.pending)
          reject(
            resp.error ? resp.error : resp.message ? resp.message : "Consolidating failed, please try again later"
          );
        if (!resp.status && resp.pending)
          resolve2(3);
        if (resp.status)
          resolve2(2);
      }
    );
  });
};
function copy(text2) {
  var input2 = document.createElement("textarea");
  input2.textContent = text2;
  document.body.appendChild(input2);
  input2.select();
  var result2 = document.execCommand("copy");
  document.body.removeChild(input2);
  return Promise.resolve(result2);
}
const containsText = (text2, searchText) => text2.toLowerCase().indexOf(searchText.toLowerCase()) > -1;
const isValidURLAll = (urlString) => {
  try {
    new URL(urlString);
    return true;
  } catch (err) {
    console.error(err);
    return false;
  }
};
const isValidURLSecureOnly = (urlString) => {
  try {
    const url = new URL(urlString);
    return url.protocol === "https:";
  } catch (err) {
    console.error(err);
    return false;
  }
};
const makeTokenImage = (imageData, tokenid) => {
  let imageUrl = void 0;
  try {
    var parser2 = new DOMParser();
    const doc = parser2.parseFromString(imageData, "application/xml");
    const errorNode = doc.querySelector("parsererror");
    if (errorNode) {
      console.error("Token does not contain an image", tokenid);
    } else {
      var imageString = doc.getElementsByTagName("artimage")[0].innerHTML;
      imageUrl = "data:image/jpeg;base64,".concat(imageString);
    }
    return imageUrl;
  } catch (err) {
    console.error("Failed to create image data ".concat(tokenid), err);
  }
  return void 0;
};
function sql(query, singleResult = true) {
  return new Promise((resolve2, reject) => {
    window.MDS.sql(query, function(response) {
      if (response.status) {
        if (response.rows && singleResult) {
          return resolve2(response.rows[0]);
        } else if (response.rows) {
          return resolve2(response.rows);
        }
        return resolve2(response.status);
      }
      return reject();
    });
  });
}
const appContext = reactExports.createContext({});
var balanceInterval;
const AppProvider = ({ children }) => {
  const loaded = reactExports.useRef(false);
  const [mode2, setMode] = reactExports.useState("desktop");
  const [isCreatingKeys, setCreatingKeys] = reactExports.useState(false);
  const [appIsInWriteMode, setAppIsInWriteMode] = reactExports.useState(null);
  const [minidappSystemFailed, setMinidappSystemFailed] = reactExports.useState(null);
  const [shuttingDown, setShuttingDown] = reactExports.useState(null);
  const [_maxima, setMaxima] = reactExports.useState("");
  const [NFTs2, setNFTs] = reactExports.useState([]);
  const [balance, setBalance] = reactExports.useState([]);
  const [history, setHistory] = reactExports.useState([]);
  const [logs2, setLogs] = reactExports.useState([]);
  const [_promptTransactionDetails, setPromptTransactionDetails] = reactExports.useState(false);
  const [_maxHistory, setMaxHistory] = reactExports.useState(20);
  const [_currentPage, setCurrentPage] = reactExports.useState(1);
  const [_historyTransactions, setHistoryTransactions] = reactExports.useState([]);
  const [_historyDetails, setHistoryDetails] = reactExports.useState([]);
  const [simpleAddresses, setSimpleAddresses] = reactExports.useState([]);
  const [avgBurn, setAvgBurn] = reactExports.useState(0);
  const [vaultLocked, setVaultLocked] = reactExports.useState(null);
  const [notificationMessage, setNotificationMessage] = reactExports.useState(false);
  const [openDrawer, setOpenDrawer] = reactExports.useState(false);
  const [showEditNickname, setShowEditNickname] = reactExports.useState(false);
  const [_nicknameAddress, setDefaultAddressesWithName] = reactExports.useState([]);
  const [_favoriteTokens, setFavoriteTokens] = reactExports.useState([]);
  const [_currencyFormat, setCurrencyFormat] = reactExports.useState({
    decimal: ".",
    thousands: ""
  });
  reactExports.useEffect(() => {
    if (!loaded.current) {
      loaded.current = true;
      window.MDS.init((msg) => {
        if (msg.event === "inited") {
          isWriteMode().then((appIsInWriteMode2) => {
            setAppIsInWriteMode(appIsInWriteMode2);
          });
          getMaximaName();
          getBalance();
          getTokens$1();
          getSimpleAddresses();
          checkVaultLocked();
          get50BlockBurnAvg();
          (async () => {
            await sql("CREATE TABLE IF NOT EXISTS cache (name varchar(255), data longtext);");
            const nicknameAddresses = await sql(
              "SELECT * FROM cache WHERE name = 'NICKNAME_ADDRESSES'"
            );
            const favoriteTokens = await sql("SELECT * FROM cache WHERE name= 'FAVORITE_TOKENS'");
            const currFormat = await sql("SELECT * FROM cache WHERE name= 'CURRENCY_FORMAT'");
            if (nicknameAddresses) {
              setDefaultAddressesWithName(JSON.parse(nicknameAddresses.DATA));
            }
            if (favoriteTokens) {
              setFavoriteTokens(JSON.parse(favoriteTokens.DATA));
            }
            if (currFormat) {
              setCurrencyFormat(JSON.parse(currFormat.DATA));
            }
          })();
        }
        if (msg.event === "NEWBLOCK") {
          get50BlockBurnAvg();
        }
        if (msg.event === "NEWBALANCE") {
          setNotificationMessage(
            /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "fill-black",
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "24",
                  viewBox: "0 -960 960 960",
                  width: "24",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M160-200v-80h80v-280q0-83 50-147.5T420-792v-28q0-25 17.5-42.5T480-880q25 0 42.5 17.5T540-820v28q80 20 130 84.5T720-560v280h80v80H160Zm320-300Zm0 420q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-280h320v-280q0-66-47-113t-113-47q-66 0-113 47t-47 113v280Z" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black", children: "Your balance has updated!" })
            ] })
          );
          setTimeout(() => setNotificationMessage(false), 2500);
          getBalance();
          getTokens$1();
        }
        if (msg.event === "MINIMALOG") {
          const log3 = msg.data.message;
          setLogs((prevState) => [...prevState, log3]);
          const isCreatingKeys2 = log3.includes("8 more initial keys created..");
          const isDoneCreatingKeys = log3.includes("All default getaddress keys created..");
          if (isCreatingKeys2) {
            setCreatingKeys(true);
          }
          if (isDoneCreatingKeys) {
            setCreatingKeys(false);
            window.location.reload();
          }
        }
        if (msg.event === "MDS_SHUTDOWN") {
          setShuttingDown(true);
        }
        if (msg.event === "MDSFAIL") {
          setMinidappSystemFailed(true);
        }
      });
    }
  }, [loaded]);
  reactExports.useEffect(() => {
    if (window.innerWidth < 568) {
      setMode("mobile");
    }
  }, []);
  const getMaximaName = () => {
    window.MDS.cmd("maxima", (resp) => {
      if (resp.status) {
        setMaxima(resp.response.name);
      }
    });
  };
  const checkVaultLocked = () => {
    isVaultLocked().then((r2) => {
      setVaultLocked(r2);
    });
  };
  const get50BlockBurnAvg = async () => {
    window.MDS.cmd("burn", (resp) => {
      if (resp.status) {
        setAvgBurn(resp.response["50block"].avg);
      }
    });
  };
  const getSimpleAddresses = async () => {
    getScripts().then((scripts2) => {
      const allSimpleAddresses = scripts2.filter((s4) => s4.simple && s4.default);
      setSimpleAddresses(allSimpleAddresses);
    });
  };
  const getHistory = () => {
    const offSet = _currentPage - 1;
    window.MDS.cmd("history max:".concat(_maxHistory, " offset:").concat(offSet * 20), (resp) => {
      if (resp.status) {
        setHistoryTransactions(resp.response.txpows);
        setHistoryDetails(resp.response.details);
      }
    });
  };
  const fetchIPFSImageUri = async (image) => {
    try {
      const resp = await fetch(image);
      if (!resp.ok) {
        throw new Error("Failed to fetch image");
      }
      const blob = await resp.blob();
      const dataUrl = URL.createObjectURL(blob);
      return dataUrl;
    } catch (error) {
      console.error(error);
      return "";
    }
  };
  const getBalance = async () => {
    await getMinimaBalance().then((b3) => {
      b3.map(async (t3) => {
        if (t3.token.url && t3.token.url.startsWith("<artimage>", 0)) {
          t3.token.url = makeTokenImage(t3.token.url, t3.tokenid);
        }
        if (t3.token.url && t3.token.url.startsWith("https://ipfs.io/ipns/")) {
          t3.token.url = await fetchIPFSImageUri(t3.token.url);
        }
      });
      const walletNeedsUpdating = !!b3.find((t3) => t3.unconfirmed !== "0");
      if (!walletNeedsUpdating) {
        window.clearInterval(balanceInterval);
      }
      if (walletNeedsUpdating) {
        setBalance(b3);
        if (!balanceInterval) {
          balanceInterval = setInterval(() => {
            getBalance();
          }, 1e4);
        }
      }
      setBalance(b3);
    });
  };
  const getTokens$1 = async () => {
    await getTokens().then((tokens) => {
      const t3 = tokens.map((t22) => {
        if ("url" in t22.name && t22.name.url && t22.name.url.startsWith("<artimage>", 0)) {
          t22.name.url = makeTokenImage(t22.name.url, t22.tokenid);
        }
        return t22;
      });
      setNFTs(t3);
    });
  };
  const updateCurrencyFormat = async (decimal, thousands) => {
    const updatedFormat = {
      decimal,
      thousands
    };
    setCurrencyFormat(updatedFormat);
    const format2 = await sql("SELECT * FROM cache WHERE name = 'CURRENCY_FORMAT'");
    if (!format2) {
      await sql("INSERT INTO cache (name, data) VALUES ('CURRENCY_FORMAT', '".concat(JSON.stringify(updatedFormat), "')"));
    } else {
      await sql("UPDATE cache SET data = '".concat(JSON.stringify(updatedFormat), "' WHERE name = 'CURRENCY_FORMAT'"));
    }
  };
  const editNickname = async (address, nickname) => {
    const updatedNicknames = {
      ..._nicknameAddress,
      [address]: nickname
    };
    setDefaultAddressesWithName(updatedNicknames);
    const nicknames = await sql("SELECT * FROM cache WHERE name = 'NICKNAME_ADDRESSES'");
    if (!nicknames) {
      await sql(
        "INSERT INTO cache (name, data) VALUES ('NICKNAME_ADDRESSES', '".concat(JSON.stringify(updatedNicknames), "')")
      );
      setShowEditNickname(false);
    } else {
      await sql(
        "UPDATE cache SET data = '".concat(JSON.stringify(updatedNicknames), "' WHERE name = 'NICKNAME_ADDRESSES'")
      );
      setShowEditNickname(false);
    }
  };
  const toggleFavourite = async (tokenid) => {
    const updatedFavourites = _favoriteTokens.includes(tokenid) ? _favoriteTokens.filter((i3) => i3 !== tokenid) : [..._favoriteTokens, tokenid];
    setFavoriteTokens(updatedFavourites);
    const favourites = await sql("SELECT * FROM cache WHERE name = 'FAVORITE_TOKENS'");
    if (!favourites) {
      await sql(
        "INSERT INTO cache (name, data) VALUES ('FAVORITE_TOKENS', '".concat(JSON.stringify(updatedFavourites), "')")
      );
    } else {
      await sql("UPDATE cache SET data = '".concat(JSON.stringify(updatedFavourites), "' WHERE name = 'FAVORITE_TOKENS'"));
    }
  };
  const promptTransactionDetails = (state) => {
    setPromptTransactionDetails(state);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    appContext.Provider,
    {
      value: {
        vaultLocked,
        checkVaultLocked,
        appIsInWriteMode,
        minidappSystemFailed,
        mode: mode2,
        isMobile: mode2 === "mobile",
        _promptTransactionDetails,
        promptTransactionDetails,
        balance,
        NFTs: NFTs2,
        simpleAddresses,
        history,
        _historyDetails,
        _historyTransactions,
        getBalance,
        _currentPage,
        setCurrentPage,
        getHistory,
        logs: logs2,
        isCreatingKeys,
        notificationMessage,
        // drawer
        openDrawer,
        setOpenDrawer,
        avgBurn,
        loaded,
        // Cache
        _favoriteTokens,
        toggleFavourite,
        _nicknameAddress,
        editNickname,
        setShowEditNickname,
        showEditNickname,
        // currenyFormatter
        _currencyFormat,
        updateCurrencyFormat,
        // maxima name
        maximaName: _maxima
      },
      children
    }
  );
};
const SideMenu = () => {
  const { setOpenDrawer } = reactExports.useContext(appContext);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "min-w-[240px] grid grid-rows-[auto_1fr_auto] grid-cols-1 h-full", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { className: "bg-black flex items-center gap-4 px-4 py-3", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("svg", { width: "32", height: "32", viewBox: "0 0 220 205", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "path",
          {
            d: "M68.5074 65.4331L128.501 89.6635L165.238 74.8196L178.081 18.0364L128.501 38.0647L34.2537 0L0 151.449L53.9818 129.647L68.5074 65.4331Z",
            fill: "#FFA010"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "path",
          {
            d: "M165.239 74.8198L150.713 139.034L90.7195 114.804L53.9827 129.648L41.1399 186.431L90.7195 166.402L184.967 204.467L219.221 53.0179L165.239 74.8198Z",
            fill: "#FFA010"
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-white text-lg", children: "Wallet" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("main", { className: "flex flex-col gap-2 mt-4", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        NavLink,
        {
          onClick: () => setOpenDrawer(false),
          to: "/balance",
          className: "flex items-center gap-2 px-3 py-2",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", height: "24", viewBox: "0 -960 960 960", width: "24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M240-160q-66 0-113-47T80-320v-320q0-66 47-113t113-47h480q66 0 113 47t47 113v320q0 66-47 113t-113 47H240Zm0-480h480q22 0 42 5t38 16v-21q0-33-23.5-56.5T720-720H240q-33 0-56.5 23.5T160-640v21q18-11 38-16t42-5Zm-74 130 445 108q9 2 18 0t17-8l139-116q-11-15-28-24.5t-37-9.5H240q-26 0-45.5 13.5T166-510Z" }) }),
            "Balance"
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        NavLink,
        {
          onClick: () => setOpenDrawer(false),
          to: "/send",
          className: "".concat(({ isActive }) => isActive ? "active" : "", " flex items-center gap-2 px-3 py-2"),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", height: "24", viewBox: "0 -960 960 960", width: "24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M320-160q-117 0-198.5-81.5T40-440q0-107 70.5-186.5T287-718l-63-66 56-56 160 160-160 160-56-57 59-59q-71 14-117 69t-46 127q0 83 58.5 141.5T320-240h120v80H320Zm200-360v-280h360v280H520Zm0 360v-280h360v280H520Zm80-80h200v-120H600v120Z" }) }),
            "Send"
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        NavLink,
        {
          onClick: () => setOpenDrawer(false),
          to: "/receive",
          className: "".concat(({ isActive }) => isActive ? "active" : "", " flex items-center gap-2 px-3 py-2"),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", height: "24", viewBox: "0 -960 960 960", width: "24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m280-120-56-56 63-66q-106-12-176.5-91.5T40-520q0-117 81.5-198.5T320-800h120v80H320q-83 0-141.5 58.5T120-520q0 72 46 127t117 69l-59-59 56-57 160 160-160 160Zm240-40v-280h360v280H520Zm0-360v-280h360v280H520Zm80-80h200v-120H600v120Z" }) }),
            "Receive"
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        NavLink,
        {
          onClick: () => setOpenDrawer(false),
          to: "/status",
          className: "".concat(({ isActive }) => isActive ? "active" : "", " flex items-center gap-2 px-3 py-2"),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", height: "24", viewBox: "0 -960 960 960", width: "24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M438-120 296-262l57-56 85 85 169-170 57 57-226 226ZM200-760v40h560v-40H200Zm124 120 12 40h288l12-40H324Zm12 120q-26 0-47-15.5T260-576l-20-64h-40q-33 0-56.5-23.5T120-720v-120h720v120q0 33-23.5 56.5T760-640h-40l-26 68q-9 23-29 37.5T620-520H336ZM200-760v40-40Z" }) }),
            " ",
            "Status"
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        NavLink,
        {
          onClick: () => setOpenDrawer(false),
          to: "/tokencreate",
          className: "".concat(({ isActive }) => isActive ? "active" : "", " flex items-center gap-2 px-3 py-2"),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", height: "24", viewBox: "0 -960 960 960", width: "24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M167-120q-21 5-36.5-10.5T120-167l40-191 198 198-191 40Zm191-40L160-358l458-458q23-23 57-23t57 23l84 84q23 23 23 57t-23 57L358-160Zm317-600L261-346l85 85 414-414-85-85Z" }) }),
            " ",
            "Token create"
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        NavLink,
        {
          onClick: () => setOpenDrawer(false),
          to: "/nfts",
          className: "".concat(({ isActive }) => isActive ? "active" : "", " flex items-center gap-2 px-3 py-2"),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", height: "24", viewBox: "0 -960 960 960", width: "24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M560-120q-17 0-28.5-11.5T520-160q0-17 11.5-28.5T560-200q47 0 83.5-18.5T680-260q0-14-13-26t-36-22l59-59q32 19 51 45t19 62q0 66-63 103t-137 37ZM183-426q-29-17-46-39.5T120-520q0-42 31-70.5T262-654q63-29 80.5-40.5T360-720q0-16-19.5-28T280-760q-25 0-42 6t-31 20q-11 11-27 13t-29-9q-13-10-15-26t9-29q19-23 54.5-39t80.5-16q72 0 116 32.5t44 87.5q0 39-29 70t-117 69q-58 25-76 37t-18 24q0 9 11.5 17.5T243-486l-60 60Zm571-118L584-714l42-42q24-24 57.5-24t56.5 24l56 56q24 23 24 56.5T796-586l-42 42ZM240-200h56l288-288-56-56-288 288v56Zm-80 80v-170l368-368 170 170-368 368H160Zm368-424 56 56-56-56Z" }) }),
            " ",
            "View/Create NFTs"
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        NavLink,
        {
          onClick: () => setOpenDrawer(false),
          to: "/history",
          className: "".concat(({ isActive }) => isActive ? "active" : "", " flex items-center gap-2 px-3 py-2"),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { xmlns: "http://www.w3.org/2000/svg", height: "24", viewBox: "0 -960 960 960", width: "24", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M240-80q-50 0-85-35t-35-85v-120h120v-560l60 60 60-60 60 60 60-60 60 60 60-60 60 60 60-60 60 60 60-60v680q0 50-35 85t-85 35H240Zm480-80q17 0 28.5-11.5T760-200v-560H320v440h360v120q0 17 11.5 28.5T720-160ZM360-600v-80h240v80H360Zm0 120v-80h240v80H360Zm320-120q-17 0-28.5-11.5T640-640q0-17 11.5-28.5T680-680q17 0 28.5 11.5T720-640q0 17-11.5 28.5T680-600Zm0 120q-17 0-28.5-11.5T640-520q0-17 11.5-28.5T680-560q17 0 28.5 11.5T720-520q0 17-11.5 28.5T680-480ZM240-160h360v-80H200v40q0 17 11.5 28.5T240-160Zm-40 0v-80 80Z" }) }),
            " ",
            "Transaction History"
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        NavLink,
        {
          onClick: () => setOpenDrawer(false),
          to: "/settings",
          className: "".concat(({ isActive }) => isActive ? "active" : "", " flex items-center gap-2 px-3 py-2"),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                width: "24",
                height: "24",
                viewBox: "0 0 24 24",
                strokeWidth: "2",
                stroke: "currentColor",
                fill: "none",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0" })
                ]
              }
            ),
            " ",
            "Settings"
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("footer", { className: "flex items-center p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { className: "w-[128px]", alt: "", src: "./assets/minima-landscape.png" }) })
  ] });
};
const Notification = () => {
  const { notificationMessage } = reactExports.useContext(appContext);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: notificationMessage && reactDomExports.createPortal(
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-[calc(100%-32px)] left-2 md:left-auto md:right-4 absolute md:max-w-max md: right-2 bottom-5 rounded bg-[#FFA010] p-4 z-50 animate-fadeIn flex items-center gap-2", children: notificationMessage }),
    document.body
  ) });
};
const useIsMinimaBrowser = () => {
  const [isMinimaBrowser, setAndroidInternalBrowser] = reactExports.useState(false);
  const openTitleBar = () => {
    if (!isMinimaBrowser)
      return;
    Android.showTitleBar();
  };
  reactExports.useEffect(() => {
    var _a2, _b2;
    if ((_b2 = (_a2 = window.navigator) == null ? void 0 : _a2.userAgent) == null ? void 0 : _b2.includes("Minima Browser")) {
      setAndroidInternalBrowser(true);
    }
  }, []);
  return openTitleBar;
};
const Grid = ({ title, children, variant }) => {
  const openTitleBar = useIsMinimaBrowser();
  let base = "grid grid-cols-[1fr_minmax(0,760px)_1fr] grid-rows-1 pt-4";
  if (variant === "sm") {
    base = "grid grid-cols-[1fr_minmax(0,560px)_1fr] grid-rows-1 pt-4";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-1 grid-rows-[56px,1fr] pb-4 ", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("header", { onClick: openTitleBar, className: "p-4 bg-black text-white text-md flex items-center gap-2", children: title }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("main", { style: { height: "".concat(innerHeight - 56, "px") }, className: "".concat(base, " overflow-y-scroll"), children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
      children,
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
    ] })
  ] });
};
const logs = "_logs_1supl_3";
const toggle = "_toggle_1supl_3";
const stream = "_stream_1supl_12";
const active$1 = "_active_1supl_29";
const passive = "_passive_1supl_33";
const borderAll = "_borderAll_1supl_38";
const borderTwo = "_borderTwo_1supl_42";
const styles$2 = {
  logs,
  toggle,
  stream,
  active: active$1,
  passive,
  borderAll,
  borderTwo
};
const Logs = () => {
  const [hide, setHide] = reactExports.useState(true);
  const ref = reactExports.createRef();
  const { logs: logs2 } = reactExports.useContext(appContext);
  const scrollToBottomOfList = reactExports.useCallback(() => {
    if (ref && ref.current) {
      ref.current.scrollIntoView({
        behavior: "smooth",
        block: "end"
      });
    }
  }, [ref]);
  reactExports.useEffect(() => {
    scrollToBottomOfList();
  }, [logs2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$2["logs"], children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "".concat(styles$2.toggle, " ").concat(hide ? styles$2.borderAll : styles$2.borderTwo),
        onClick: () => setHide((prevState) => !prevState),
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            hide ? "Show" : "Hide",
            " logs"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "svg",
            {
              className: "".concat(!hide ? styles$2.active : styles$2.passive),
              xmlns: "http://www.w3.org/2000/svg",
              width: "24",
              height: "24",
              viewBox: "0 0 24 24",
              fill: "none",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "path",
                {
                  d: "M11.6502 15.2747L6 9.5999L6.9 8.7251L11.6502 13.4747L16.4004 8.7251L17.3004 9.6251L11.6502 15.2747Z",
                  fill: "#F4F4F5"
                }
              )
            }
          )
        ]
      }
    ),
    !hide && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$2["stream"], children: [
      logs2.length ? logs2.map((l2, i3) => /* @__PURE__ */ jsxRuntimeExports.jsx("code", { className: "text-white", children: l2 }, i3)) : /* @__PURE__ */ jsxRuntimeExports.jsx("code", { className: "text-white", children: "Loading logs..." }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ref, className: "pt-2" })
    ] })
  ] });
};
const App = () => {
  const openTitleBar = useIsMinimaBrowser();
  const { openDrawer, setOpenDrawer, minidappSystemFailed, isCreatingKeys } = reactExports.useContext(appContext);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    isCreatingKeys && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn z-[100000]", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          onClick: openTitleBar,
          className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 grid-rows-1 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 24 24",
                  strokeWidth: "2",
                  stroke: "currentColor",
                  fill: "none",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16.555 3.843l3.602 3.602a2.877 2.877 0 0 1 0 4.069l-2.643 2.643a2.877 2.877 0 0 1 -4.069 0l-.301 -.301l-6.558 6.558a2 2 0 0 1 -1.239 .578l-.175 .008h-1.172a1 1 0 0 1 -.993 -.883l-.007 -.117v-1.172a2 2 0 0 1 .467 -1.284l.119 -.13l.414 -.414h2v-2h2v-2l2.144 -2.144l-.301 -.301a2.877 2.877 0 0 1 0 -4.069l2.643 -2.643a2.877 2.877 0 0 1 4.069 0z" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M15 9h.01" })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-xl font-semibold mt-4", children: "Creating your keys!" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center mb-4", children: "Please be patient until all your keys are created." }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Logs, {})
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
          ]
        }
      ) }) }),
      document.body
    ),
    minidappSystemFailed && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn z-[100000]", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          onClick: openTitleBar,
          className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 grid-rows-1 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "80",
                  viewBox: "0 -960 960 960",
                  width: "80",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m456-200 179.022-340H510v-220L324.978-420H456v220Zm24 128.13q-84.913 0-159.345-32.117-74.432-32.118-129.491-87.177-55.059-55.059-87.177-129.491Q71.869-395.087 71.869-480t32.118-159.345q32.118-74.432 87.177-129.491 55.059-55.059 129.491-87.177Q395.087-888.131 480-888.131t159.345 32.118q74.432 32.118 129.491 87.177 55.059 55.059 87.177 129.491Q888.131-564.913 888.131-480t-32.118 159.345q-32.118 74.432-87.177 129.491-55.059 55.059-129.491 87.177Q564.913-71.869 480-71.869Z" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-xl font-semibold mt-4", children: "Minidapp System is offline!" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "Please make sure you're logged into the MiniHub and your node is running." })
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
          ]
        }
      ) }) }),
      document.body
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Notification, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("main", { id: "navigation", className: "md:ml-[240px]", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {}) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Drawer$1,
        {
          variant: "temporary",
          open: openDrawer,
          onClick: () => setOpenDrawer(false),
          ModalProps: { keepMounted: true },
          className: "md:hidden grid z-[100000]",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(SideMenu, {})
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Drawer$1, { variant: "permanent", className: "hidden md:grid", children: /* @__PURE__ */ jsxRuntimeExports.jsx(SideMenu, {}) })
    ] })
  ] });
};
const index = "";
const callSend = async (token2, amount, address, message, burn, password) => {
  return new Promise((resolve2, reject) => {
    const hasPassword = password && password.length ? password : false;
    const hasBurn = burn && parseInt(burn) > 0 ? burn : false;
    window.MDS.cmd(
      "send amount:".concat(amount, " address:").concat(address, " tokenid:").concat(token2.tokenid, " ").concat(hasBurn ? "burn:" + hasBurn : "", " ").concat(hasPassword ? "password:" + hasPassword : "", " ").concat(message.length > 0 ? 'state:{"44":"['.concat(message, ']"}') : ""),
      (resp) => {
        if (!resp.status && !resp.pending)
          reject(
            resp.error ? resp.error : resp.message ? resp.message : "Sending failed, please try again later"
          );
        if (!resp.status && resp.pending)
          resolve2(3);
        if (resp.status)
          resolve2(2);
      }
    );
  });
};
const callStatus = async () => {
  try {
    const nodeStatus = await rpc("status");
    return nodeStatus;
  } catch (err) {
    throw new Error(err);
  }
};
const rpc = (command) => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd(command, (resp) => {
      if (resp.length > 0) {
        let success = true;
        let error = "";
        resp.forEach((r2) => {
          if (!r2.status) {
            success = false;
            error = r2.error;
            return;
          }
        });
        if (success) {
          resolve2(resp[resp.length - 1].response);
        } else {
          reject(error);
        }
      }
      if (resp.status && !resp.pending) {
        resolve2(resp.response);
      }
      if (!resp.status && resp.pending) {
        reject("pending");
      }
      if (!resp.status && !resp.pending) {
        reject(
          resp.message ? resp.message : resp.error ? resp.error : "RPC ".concat(command, " has failed to fire off, please try again later.")
        );
      }
    });
  });
};
const validateMinimaAddress = async (minimaAddress) => {
  try {
    return await rpc("checkaddress address:".concat(minimaAddress));
  } catch (err) {
    console.error(err);
    throw new Error(err);
  }
};
const tokenValidate = (tokenid) => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("tokenvalidate tokenid:".concat(tokenid), (r2) => {
      if (!r2.status)
        reject(r2.error ? r2.error : "RPC Failed");
      if (r2.response.web.valid)
        resolve2(true);
    });
  });
};
const getStatus = () => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("status", (res) => {
      if (!res.status)
        reject(res.error ? res.error : "RPC Failed");
      resolve2(res.response);
    });
  });
};
const NFTAuthenticity = ({ tokenid, relative: relative2 = false }) => {
  const [isTokenValidated, setIsTokenValidated] = React.useState(false);
  React.useEffect(() => {
    tokenValidate(tokenid).then(() => {
      setIsTokenValidated(true);
    });
  }, [tokenid]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    isTokenValidated && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        className: "fill-blue-500 ".concat(relative2 ? "relative" : "absolute right-1 bottom-0"),
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        strokeWidth: "2",
        stroke: "currentColor",
        fill: "none",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M21 21l-6 -6" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M7 10l2 2l4 -4" })
        ]
      }
    ),
    !isTokenValidated && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        className: "fill-yellow-100 ".concat(relative2 ? "relative" : "absolute right-1 bottom-0"),
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        strokeWidth: "2",
        stroke: "currentColor",
        fill: "none",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M21 21l-6 -6" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 13l0 .01" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 10a1.5 1.5 0 1 0 -1.14 -2.474" })
        ]
      }
    )
  ] });
};
const CardContent = ({ header, content: content2, className, onClick }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      onClick,
      className: "flex h-max flex-col gap-4 mx-4 rounded bg-white bg-opacity-90 p-4 shadow-sm mb-4 ".concat(className ? className : ""),
      children: [
        header,
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "divide-y-2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { id: "card-content", className: "h-max", children: content2 })
      ]
    }
  );
};
/*!
 *  decimal.js v10.4.3
 *  An arbitrary-precision Decimal type for JavaScript.
 *  https://github.com/MikeMcl/decimal.js
 *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *  MIT Licence
 */
var EXP_LIMIT = 9e15, MAX_DIGITS = 1e9, NUMERALS = "0123456789abcdef", LN10 = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058", PI = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789", DEFAULTS = {
  // These values must be integers within the stated ranges (inclusive).
  // Most of these values can be changed at run-time using the `Decimal.config` method.
  // The maximum number of significant digits of the result of a calculation or base conversion.
  // E.g. `Decimal.config({ precision: 20 });`
  precision: 20,
  // 1 to MAX_DIGITS
  // The rounding mode used when rounding to `precision`.
  //
  // ROUND_UP         0 Away from zero.
  // ROUND_DOWN       1 Towards zero.
  // ROUND_CEIL       2 Towards +Infinity.
  // ROUND_FLOOR      3 Towards -Infinity.
  // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
  // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
  // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
  // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
  // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
  //
  // E.g.
  // `Decimal.rounding = 4;`
  // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
  rounding: 4,
  // 0 to 8
  // The modulo mode used when calculating the modulus: a mod n.
  // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
  // The remainder (r) is calculated as: r = a - n * q.
  //
  // UP         0 The remainder is positive if the dividend is negative, else is negative.
  // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
  // FLOOR      3 The remainder has the same sign as the divisor (Python %).
  // HALF_EVEN  6 The IEEE 754 remainder function.
  // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
  //
  // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
  // division (9) are commonly used for the modulus operation. The other rounding modes can also
  // be used, but they may not give useful results.
  modulo: 1,
  // 0 to 9
  // The exponent value at and beneath which `toString` returns exponential notation.
  // JavaScript numbers: -7
  toExpNeg: -7,
  // 0 to -EXP_LIMIT
  // The exponent value at and above which `toString` returns exponential notation.
  // JavaScript numbers: 21
  toExpPos: 21,
  // 0 to EXP_LIMIT
  // The minimum exponent value, beneath which underflow to zero occurs.
  // JavaScript numbers: -324  (5e-324)
  minE: -EXP_LIMIT,
  // -1 to -EXP_LIMIT
  // The maximum exponent value, above which overflow to Infinity occurs.
  // JavaScript numbers: 308  (1.7976931348623157e+308)
  maxE: EXP_LIMIT,
  // 1 to EXP_LIMIT
  // Whether to use cryptographically-secure random number generation, if available.
  crypto: false
  // true/false
}, inexact, quadrant, external = true, decimalError = "[DecimalError] ", invalidArgument = decimalError + "Invalid argument: ", precisionLimitExceeded = decimalError + "Precision limit exceeded", cryptoUnavailable = decimalError + "crypto unavailable", tag = "[object Decimal]", mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER$4 = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, P$1 = { toStringTag: tag };
P$1.absoluteValue = P$1.abs = function() {
  var x3 = new this.constructor(this);
  if (x3.s < 0)
    x3.s = 1;
  return finalise(x3);
};
P$1.ceil = function() {
  return finalise(new this.constructor(this), this.e + 1, 2);
};
P$1.clampedTo = P$1.clamp = function(min2, max2) {
  var k3, x3 = this, Ctor = x3.constructor;
  min2 = new Ctor(min2);
  max2 = new Ctor(max2);
  if (!min2.s || !max2.s)
    return new Ctor(NaN);
  if (min2.gt(max2))
    throw Error(invalidArgument + max2);
  k3 = x3.cmp(min2);
  return k3 < 0 ? min2 : x3.cmp(max2) > 0 ? max2 : new Ctor(x3);
};
P$1.comparedTo = P$1.cmp = function(y4) {
  var i3, j2, xdL, ydL, x3 = this, xd2 = x3.d, yd2 = (y4 = new x3.constructor(y4)).d, xs = x3.s, ys = y4.s;
  if (!xd2 || !yd2) {
    return !xs || !ys ? NaN : xs !== ys ? xs : xd2 === yd2 ? 0 : !xd2 ^ xs < 0 ? 1 : -1;
  }
  if (!xd2[0] || !yd2[0])
    return xd2[0] ? xs : yd2[0] ? -ys : 0;
  if (xs !== ys)
    return xs;
  if (x3.e !== y4.e)
    return x3.e > y4.e ^ xs < 0 ? 1 : -1;
  xdL = xd2.length;
  ydL = yd2.length;
  for (i3 = 0, j2 = xdL < ydL ? xdL : ydL; i3 < j2; ++i3) {
    if (xd2[i3] !== yd2[i3])
      return xd2[i3] > yd2[i3] ^ xs < 0 ? 1 : -1;
  }
  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
};
P$1.cosine = P$1.cos = function() {
  var pr2, rm, x3 = this, Ctor = x3.constructor;
  if (!x3.d)
    return new Ctor(NaN);
  if (!x3.d[0])
    return new Ctor(1);
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr2 + Math.max(x3.e, x3.sd()) + LOG_BASE;
  Ctor.rounding = 1;
  x3 = cosine(Ctor, toLessThanHalfPi(Ctor, x3));
  Ctor.precision = pr2;
  Ctor.rounding = rm;
  return finalise(quadrant == 2 || quadrant == 3 ? x3.neg() : x3, pr2, rm, true);
};
P$1.cubeRoot = P$1.cbrt = function() {
  var e3, m4, n2, r2, rep, s4, sd2, t3, t32, t3plusx, x3 = this, Ctor = x3.constructor;
  if (!x3.isFinite() || x3.isZero())
    return new Ctor(x3);
  external = false;
  s4 = x3.s * mathpow(x3.s * x3, 1 / 3);
  if (!s4 || Math.abs(s4) == 1 / 0) {
    n2 = digitsToString(x3.d);
    e3 = x3.e;
    if (s4 = (e3 - n2.length + 1) % 3)
      n2 += s4 == 1 || s4 == -2 ? "0" : "00";
    s4 = mathpow(n2, 1 / 3);
    e3 = mathfloor((e3 + 1) / 3) - (e3 % 3 == (e3 < 0 ? -1 : 2));
    if (s4 == 1 / 0) {
      n2 = "5e" + e3;
    } else {
      n2 = s4.toExponential();
      n2 = n2.slice(0, n2.indexOf("e") + 1) + e3;
    }
    r2 = new Ctor(n2);
    r2.s = x3.s;
  } else {
    r2 = new Ctor(s4.toString());
  }
  sd2 = (e3 = Ctor.precision) + 3;
  for (; ; ) {
    t3 = r2;
    t32 = t3.times(t3).times(t3);
    t3plusx = t32.plus(x3);
    r2 = divide(t3plusx.plus(x3).times(t3), t3plusx.plus(t32), sd2 + 2, 1);
    if (digitsToString(t3.d).slice(0, sd2) === (n2 = digitsToString(r2.d)).slice(0, sd2)) {
      n2 = n2.slice(sd2 - 3, sd2 + 1);
      if (n2 == "9999" || !rep && n2 == "4999") {
        if (!rep) {
          finalise(t3, e3 + 1, 0);
          if (t3.times(t3).times(t3).eq(x3)) {
            r2 = t3;
            break;
          }
        }
        sd2 += 4;
        rep = 1;
      } else {
        if (!+n2 || !+n2.slice(1) && n2.charAt(0) == "5") {
          finalise(r2, e3 + 1, 1);
          m4 = !r2.times(r2).times(r2).eq(x3);
        }
        break;
      }
    }
  }
  external = true;
  return finalise(r2, e3, Ctor.rounding, m4);
};
P$1.decimalPlaces = P$1.dp = function() {
  var w3, d4 = this.d, n2 = NaN;
  if (d4) {
    w3 = d4.length - 1;
    n2 = (w3 - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
    w3 = d4[w3];
    if (w3)
      for (; w3 % 10 == 0; w3 /= 10)
        n2--;
    if (n2 < 0)
      n2 = 0;
  }
  return n2;
};
P$1.dividedBy = P$1.div = function(y4) {
  return divide(this, new this.constructor(y4));
};
P$1.dividedToIntegerBy = P$1.divToInt = function(y4) {
  var x3 = this, Ctor = x3.constructor;
  return finalise(divide(x3, new Ctor(y4), 0, 1, 1), Ctor.precision, Ctor.rounding);
};
P$1.equals = P$1.eq = function(y4) {
  return this.cmp(y4) === 0;
};
P$1.floor = function() {
  return finalise(new this.constructor(this), this.e + 1, 3);
};
P$1.greaterThan = P$1.gt = function(y4) {
  return this.cmp(y4) > 0;
};
P$1.greaterThanOrEqualTo = P$1.gte = function(y4) {
  var k3 = this.cmp(y4);
  return k3 == 1 || k3 === 0;
};
P$1.hyperbolicCosine = P$1.cosh = function() {
  var k3, n2, pr2, rm, len, x3 = this, Ctor = x3.constructor, one = new Ctor(1);
  if (!x3.isFinite())
    return new Ctor(x3.s ? 1 / 0 : NaN);
  if (x3.isZero())
    return one;
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr2 + Math.max(x3.e, x3.sd()) + 4;
  Ctor.rounding = 1;
  len = x3.d.length;
  if (len < 32) {
    k3 = Math.ceil(len / 3);
    n2 = (1 / tinyPow(4, k3)).toString();
  } else {
    k3 = 16;
    n2 = "2.3283064365386962890625e-10";
  }
  x3 = taylorSeries(Ctor, 1, x3.times(n2), new Ctor(1), true);
  var cosh2_x, i3 = k3, d8 = new Ctor(8);
  for (; i3--; ) {
    cosh2_x = x3.times(x3);
    x3 = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
  }
  return finalise(x3, Ctor.precision = pr2, Ctor.rounding = rm, true);
};
P$1.hyperbolicSine = P$1.sinh = function() {
  var k3, pr2, rm, len, x3 = this, Ctor = x3.constructor;
  if (!x3.isFinite() || x3.isZero())
    return new Ctor(x3);
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr2 + Math.max(x3.e, x3.sd()) + 4;
  Ctor.rounding = 1;
  len = x3.d.length;
  if (len < 3) {
    x3 = taylorSeries(Ctor, 2, x3, x3, true);
  } else {
    k3 = 1.4 * Math.sqrt(len);
    k3 = k3 > 16 ? 16 : k3 | 0;
    x3 = x3.times(1 / tinyPow(5, k3));
    x3 = taylorSeries(Ctor, 2, x3, x3, true);
    var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
    for (; k3--; ) {
      sinh2_x = x3.times(x3);
      x3 = x3.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
    }
  }
  Ctor.precision = pr2;
  Ctor.rounding = rm;
  return finalise(x3, pr2, rm, true);
};
P$1.hyperbolicTangent = P$1.tanh = function() {
  var pr2, rm, x3 = this, Ctor = x3.constructor;
  if (!x3.isFinite())
    return new Ctor(x3.s);
  if (x3.isZero())
    return new Ctor(x3);
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr2 + 7;
  Ctor.rounding = 1;
  return divide(x3.sinh(), x3.cosh(), Ctor.precision = pr2, Ctor.rounding = rm);
};
P$1.inverseCosine = P$1.acos = function() {
  var halfPi, x3 = this, Ctor = x3.constructor, k3 = x3.abs().cmp(1), pr2 = Ctor.precision, rm = Ctor.rounding;
  if (k3 !== -1) {
    return k3 === 0 ? x3.isNeg() ? getPi(Ctor, pr2, rm) : new Ctor(0) : new Ctor(NaN);
  }
  if (x3.isZero())
    return getPi(Ctor, pr2 + 4, rm).times(0.5);
  Ctor.precision = pr2 + 6;
  Ctor.rounding = 1;
  x3 = x3.asin();
  halfPi = getPi(Ctor, pr2 + 4, rm).times(0.5);
  Ctor.precision = pr2;
  Ctor.rounding = rm;
  return halfPi.minus(x3);
};
P$1.inverseHyperbolicCosine = P$1.acosh = function() {
  var pr2, rm, x3 = this, Ctor = x3.constructor;
  if (x3.lte(1))
    return new Ctor(x3.eq(1) ? 0 : NaN);
  if (!x3.isFinite())
    return new Ctor(x3);
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr2 + Math.max(Math.abs(x3.e), x3.sd()) + 4;
  Ctor.rounding = 1;
  external = false;
  x3 = x3.times(x3).minus(1).sqrt().plus(x3);
  external = true;
  Ctor.precision = pr2;
  Ctor.rounding = rm;
  return x3.ln();
};
P$1.inverseHyperbolicSine = P$1.asinh = function() {
  var pr2, rm, x3 = this, Ctor = x3.constructor;
  if (!x3.isFinite() || x3.isZero())
    return new Ctor(x3);
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr2 + 2 * Math.max(Math.abs(x3.e), x3.sd()) + 6;
  Ctor.rounding = 1;
  external = false;
  x3 = x3.times(x3).plus(1).sqrt().plus(x3);
  external = true;
  Ctor.precision = pr2;
  Ctor.rounding = rm;
  return x3.ln();
};
P$1.inverseHyperbolicTangent = P$1.atanh = function() {
  var pr2, rm, wpr, xsd, x3 = this, Ctor = x3.constructor;
  if (!x3.isFinite())
    return new Ctor(NaN);
  if (x3.e >= 0)
    return new Ctor(x3.abs().eq(1) ? x3.s / 0 : x3.isZero() ? x3 : NaN);
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  xsd = x3.sd();
  if (Math.max(xsd, pr2) < 2 * -x3.e - 1)
    return finalise(new Ctor(x3), pr2, rm, true);
  Ctor.precision = wpr = xsd - x3.e;
  x3 = divide(x3.plus(1), new Ctor(1).minus(x3), wpr + pr2, 1);
  Ctor.precision = pr2 + 4;
  Ctor.rounding = 1;
  x3 = x3.ln();
  Ctor.precision = pr2;
  Ctor.rounding = rm;
  return x3.times(0.5);
};
P$1.inverseSine = P$1.asin = function() {
  var halfPi, k3, pr2, rm, x3 = this, Ctor = x3.constructor;
  if (x3.isZero())
    return new Ctor(x3);
  k3 = x3.abs().cmp(1);
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  if (k3 !== -1) {
    if (k3 === 0) {
      halfPi = getPi(Ctor, pr2 + 4, rm).times(0.5);
      halfPi.s = x3.s;
      return halfPi;
    }
    return new Ctor(NaN);
  }
  Ctor.precision = pr2 + 6;
  Ctor.rounding = 1;
  x3 = x3.div(new Ctor(1).minus(x3.times(x3)).sqrt().plus(1)).atan();
  Ctor.precision = pr2;
  Ctor.rounding = rm;
  return x3.times(2);
};
P$1.inverseTangent = P$1.atan = function() {
  var i3, j2, k3, n2, px, t3, r2, wpr, x22, x3 = this, Ctor = x3.constructor, pr2 = Ctor.precision, rm = Ctor.rounding;
  if (!x3.isFinite()) {
    if (!x3.s)
      return new Ctor(NaN);
    if (pr2 + 4 <= PI_PRECISION) {
      r2 = getPi(Ctor, pr2 + 4, rm).times(0.5);
      r2.s = x3.s;
      return r2;
    }
  } else if (x3.isZero()) {
    return new Ctor(x3);
  } else if (x3.abs().eq(1) && pr2 + 4 <= PI_PRECISION) {
    r2 = getPi(Ctor, pr2 + 4, rm).times(0.25);
    r2.s = x3.s;
    return r2;
  }
  Ctor.precision = wpr = pr2 + 10;
  Ctor.rounding = 1;
  k3 = Math.min(28, wpr / LOG_BASE + 2 | 0);
  for (i3 = k3; i3; --i3)
    x3 = x3.div(x3.times(x3).plus(1).sqrt().plus(1));
  external = false;
  j2 = Math.ceil(wpr / LOG_BASE);
  n2 = 1;
  x22 = x3.times(x3);
  r2 = new Ctor(x3);
  px = x3;
  for (; i3 !== -1; ) {
    px = px.times(x22);
    t3 = r2.minus(px.div(n2 += 2));
    px = px.times(x22);
    r2 = t3.plus(px.div(n2 += 2));
    if (r2.d[j2] !== void 0)
      for (i3 = j2; r2.d[i3] === t3.d[i3] && i3--; )
        ;
  }
  if (k3)
    r2 = r2.times(2 << k3 - 1);
  external = true;
  return finalise(r2, Ctor.precision = pr2, Ctor.rounding = rm, true);
};
P$1.isFinite = function() {
  return !!this.d;
};
P$1.isInteger = P$1.isInt = function() {
  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
};
P$1.isNaN = function() {
  return !this.s;
};
P$1.isNegative = P$1.isNeg = function() {
  return this.s < 0;
};
P$1.isPositive = P$1.isPos = function() {
  return this.s > 0;
};
P$1.isZero = function() {
  return !!this.d && this.d[0] === 0;
};
P$1.lessThan = P$1.lt = function(y4) {
  return this.cmp(y4) < 0;
};
P$1.lessThanOrEqualTo = P$1.lte = function(y4) {
  return this.cmp(y4) < 1;
};
P$1.logarithm = P$1.log = function(base) {
  var isBase10, d4, denominator, k3, inf, num, sd2, r2, arg = this, Ctor = arg.constructor, pr2 = Ctor.precision, rm = Ctor.rounding, guard = 5;
  if (base == null) {
    base = new Ctor(10);
    isBase10 = true;
  } else {
    base = new Ctor(base);
    d4 = base.d;
    if (base.s < 0 || !d4 || !d4[0] || base.eq(1))
      return new Ctor(NaN);
    isBase10 = base.eq(10);
  }
  d4 = arg.d;
  if (arg.s < 0 || !d4 || !d4[0] || arg.eq(1)) {
    return new Ctor(d4 && !d4[0] ? -1 / 0 : arg.s != 1 ? NaN : d4 ? 0 : 1 / 0);
  }
  if (isBase10) {
    if (d4.length > 1) {
      inf = true;
    } else {
      for (k3 = d4[0]; k3 % 10 === 0; )
        k3 /= 10;
      inf = k3 !== 1;
    }
  }
  external = false;
  sd2 = pr2 + guard;
  num = naturalLogarithm(arg, sd2);
  denominator = isBase10 ? getLn10(Ctor, sd2 + 10) : naturalLogarithm(base, sd2);
  r2 = divide(num, denominator, sd2, 1);
  if (checkRoundingDigits(r2.d, k3 = pr2, rm)) {
    do {
      sd2 += 10;
      num = naturalLogarithm(arg, sd2);
      denominator = isBase10 ? getLn10(Ctor, sd2 + 10) : naturalLogarithm(base, sd2);
      r2 = divide(num, denominator, sd2, 1);
      if (!inf) {
        if (+digitsToString(r2.d).slice(k3 + 1, k3 + 15) + 1 == 1e14) {
          r2 = finalise(r2, pr2 + 1, 0);
        }
        break;
      }
    } while (checkRoundingDigits(r2.d, k3 += 10, rm));
  }
  external = true;
  return finalise(r2, pr2, rm);
};
P$1.minus = P$1.sub = function(y4) {
  var d4, e3, i3, j2, k3, len, pr2, rm, xd2, xe2, xLTy, yd2, x3 = this, Ctor = x3.constructor;
  y4 = new Ctor(y4);
  if (!x3.d || !y4.d) {
    if (!x3.s || !y4.s)
      y4 = new Ctor(NaN);
    else if (x3.d)
      y4.s = -y4.s;
    else
      y4 = new Ctor(y4.d || x3.s !== y4.s ? x3 : NaN);
    return y4;
  }
  if (x3.s != y4.s) {
    y4.s = -y4.s;
    return x3.plus(y4);
  }
  xd2 = x3.d;
  yd2 = y4.d;
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  if (!xd2[0] || !yd2[0]) {
    if (yd2[0])
      y4.s = -y4.s;
    else if (xd2[0])
      y4 = new Ctor(x3);
    else
      return new Ctor(rm === 3 ? -0 : 0);
    return external ? finalise(y4, pr2, rm) : y4;
  }
  e3 = mathfloor(y4.e / LOG_BASE);
  xe2 = mathfloor(x3.e / LOG_BASE);
  xd2 = xd2.slice();
  k3 = xe2 - e3;
  if (k3) {
    xLTy = k3 < 0;
    if (xLTy) {
      d4 = xd2;
      k3 = -k3;
      len = yd2.length;
    } else {
      d4 = yd2;
      e3 = xe2;
      len = xd2.length;
    }
    i3 = Math.max(Math.ceil(pr2 / LOG_BASE), len) + 2;
    if (k3 > i3) {
      k3 = i3;
      d4.length = 1;
    }
    d4.reverse();
    for (i3 = k3; i3--; )
      d4.push(0);
    d4.reverse();
  } else {
    i3 = xd2.length;
    len = yd2.length;
    xLTy = i3 < len;
    if (xLTy)
      len = i3;
    for (i3 = 0; i3 < len; i3++) {
      if (xd2[i3] != yd2[i3]) {
        xLTy = xd2[i3] < yd2[i3];
        break;
      }
    }
    k3 = 0;
  }
  if (xLTy) {
    d4 = xd2;
    xd2 = yd2;
    yd2 = d4;
    y4.s = -y4.s;
  }
  len = xd2.length;
  for (i3 = yd2.length - len; i3 > 0; --i3)
    xd2[len++] = 0;
  for (i3 = yd2.length; i3 > k3; ) {
    if (xd2[--i3] < yd2[i3]) {
      for (j2 = i3; j2 && xd2[--j2] === 0; )
        xd2[j2] = BASE - 1;
      --xd2[j2];
      xd2[i3] += BASE;
    }
    xd2[i3] -= yd2[i3];
  }
  for (; xd2[--len] === 0; )
    xd2.pop();
  for (; xd2[0] === 0; xd2.shift())
    --e3;
  if (!xd2[0])
    return new Ctor(rm === 3 ? -0 : 0);
  y4.d = xd2;
  y4.e = getBase10Exponent(xd2, e3);
  return external ? finalise(y4, pr2, rm) : y4;
};
P$1.modulo = P$1.mod = function(y4) {
  var q3, x3 = this, Ctor = x3.constructor;
  y4 = new Ctor(y4);
  if (!x3.d || !y4.s || y4.d && !y4.d[0])
    return new Ctor(NaN);
  if (!y4.d || x3.d && !x3.d[0]) {
    return finalise(new Ctor(x3), Ctor.precision, Ctor.rounding);
  }
  external = false;
  if (Ctor.modulo == 9) {
    q3 = divide(x3, y4.abs(), 0, 3, 1);
    q3.s *= y4.s;
  } else {
    q3 = divide(x3, y4, 0, Ctor.modulo, 1);
  }
  q3 = q3.times(y4);
  external = true;
  return x3.minus(q3);
};
P$1.naturalExponential = P$1.exp = function() {
  return naturalExponential(this);
};
P$1.naturalLogarithm = P$1.ln = function() {
  return naturalLogarithm(this);
};
P$1.negated = P$1.neg = function() {
  var x3 = new this.constructor(this);
  x3.s = -x3.s;
  return finalise(x3);
};
P$1.plus = P$1.add = function(y4) {
  var carry, d4, e3, i3, k3, len, pr2, rm, xd2, yd2, x3 = this, Ctor = x3.constructor;
  y4 = new Ctor(y4);
  if (!x3.d || !y4.d) {
    if (!x3.s || !y4.s)
      y4 = new Ctor(NaN);
    else if (!x3.d)
      y4 = new Ctor(y4.d || x3.s === y4.s ? x3 : NaN);
    return y4;
  }
  if (x3.s != y4.s) {
    y4.s = -y4.s;
    return x3.minus(y4);
  }
  xd2 = x3.d;
  yd2 = y4.d;
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  if (!xd2[0] || !yd2[0]) {
    if (!yd2[0])
      y4 = new Ctor(x3);
    return external ? finalise(y4, pr2, rm) : y4;
  }
  k3 = mathfloor(x3.e / LOG_BASE);
  e3 = mathfloor(y4.e / LOG_BASE);
  xd2 = xd2.slice();
  i3 = k3 - e3;
  if (i3) {
    if (i3 < 0) {
      d4 = xd2;
      i3 = -i3;
      len = yd2.length;
    } else {
      d4 = yd2;
      e3 = k3;
      len = xd2.length;
    }
    k3 = Math.ceil(pr2 / LOG_BASE);
    len = k3 > len ? k3 + 1 : len + 1;
    if (i3 > len) {
      i3 = len;
      d4.length = 1;
    }
    d4.reverse();
    for (; i3--; )
      d4.push(0);
    d4.reverse();
  }
  len = xd2.length;
  i3 = yd2.length;
  if (len - i3 < 0) {
    i3 = len;
    d4 = yd2;
    yd2 = xd2;
    xd2 = d4;
  }
  for (carry = 0; i3; ) {
    carry = (xd2[--i3] = xd2[i3] + yd2[i3] + carry) / BASE | 0;
    xd2[i3] %= BASE;
  }
  if (carry) {
    xd2.unshift(carry);
    ++e3;
  }
  for (len = xd2.length; xd2[--len] == 0; )
    xd2.pop();
  y4.d = xd2;
  y4.e = getBase10Exponent(xd2, e3);
  return external ? finalise(y4, pr2, rm) : y4;
};
P$1.precision = P$1.sd = function(z3) {
  var k3, x3 = this;
  if (z3 !== void 0 && z3 !== !!z3 && z3 !== 1 && z3 !== 0)
    throw Error(invalidArgument + z3);
  if (x3.d) {
    k3 = getPrecision(x3.d);
    if (z3 && x3.e + 1 > k3)
      k3 = x3.e + 1;
  } else {
    k3 = NaN;
  }
  return k3;
};
P$1.round = function() {
  var x3 = this, Ctor = x3.constructor;
  return finalise(new Ctor(x3), x3.e + 1, Ctor.rounding);
};
P$1.sine = P$1.sin = function() {
  var pr2, rm, x3 = this, Ctor = x3.constructor;
  if (!x3.isFinite())
    return new Ctor(NaN);
  if (x3.isZero())
    return new Ctor(x3);
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr2 + Math.max(x3.e, x3.sd()) + LOG_BASE;
  Ctor.rounding = 1;
  x3 = sine(Ctor, toLessThanHalfPi(Ctor, x3));
  Ctor.precision = pr2;
  Ctor.rounding = rm;
  return finalise(quadrant > 2 ? x3.neg() : x3, pr2, rm, true);
};
P$1.squareRoot = P$1.sqrt = function() {
  var m4, n2, sd2, r2, rep, t3, x3 = this, d4 = x3.d, e3 = x3.e, s4 = x3.s, Ctor = x3.constructor;
  if (s4 !== 1 || !d4 || !d4[0]) {
    return new Ctor(!s4 || s4 < 0 && (!d4 || d4[0]) ? NaN : d4 ? x3 : 1 / 0);
  }
  external = false;
  s4 = Math.sqrt(+x3);
  if (s4 == 0 || s4 == 1 / 0) {
    n2 = digitsToString(d4);
    if ((n2.length + e3) % 2 == 0)
      n2 += "0";
    s4 = Math.sqrt(n2);
    e3 = mathfloor((e3 + 1) / 2) - (e3 < 0 || e3 % 2);
    if (s4 == 1 / 0) {
      n2 = "5e" + e3;
    } else {
      n2 = s4.toExponential();
      n2 = n2.slice(0, n2.indexOf("e") + 1) + e3;
    }
    r2 = new Ctor(n2);
  } else {
    r2 = new Ctor(s4.toString());
  }
  sd2 = (e3 = Ctor.precision) + 3;
  for (; ; ) {
    t3 = r2;
    r2 = t3.plus(divide(x3, t3, sd2 + 2, 1)).times(0.5);
    if (digitsToString(t3.d).slice(0, sd2) === (n2 = digitsToString(r2.d)).slice(0, sd2)) {
      n2 = n2.slice(sd2 - 3, sd2 + 1);
      if (n2 == "9999" || !rep && n2 == "4999") {
        if (!rep) {
          finalise(t3, e3 + 1, 0);
          if (t3.times(t3).eq(x3)) {
            r2 = t3;
            break;
          }
        }
        sd2 += 4;
        rep = 1;
      } else {
        if (!+n2 || !+n2.slice(1) && n2.charAt(0) == "5") {
          finalise(r2, e3 + 1, 1);
          m4 = !r2.times(r2).eq(x3);
        }
        break;
      }
    }
  }
  external = true;
  return finalise(r2, e3, Ctor.rounding, m4);
};
P$1.tangent = P$1.tan = function() {
  var pr2, rm, x3 = this, Ctor = x3.constructor;
  if (!x3.isFinite())
    return new Ctor(NaN);
  if (x3.isZero())
    return new Ctor(x3);
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr2 + 10;
  Ctor.rounding = 1;
  x3 = x3.sin();
  x3.s = 1;
  x3 = divide(x3, new Ctor(1).minus(x3.times(x3)).sqrt(), pr2 + 10, 0);
  Ctor.precision = pr2;
  Ctor.rounding = rm;
  return finalise(quadrant == 2 || quadrant == 4 ? x3.neg() : x3, pr2, rm, true);
};
P$1.times = P$1.mul = function(y4) {
  var carry, e3, i3, k3, r2, rL, t3, xdL, ydL, x3 = this, Ctor = x3.constructor, xd2 = x3.d, yd2 = (y4 = new Ctor(y4)).d;
  y4.s *= x3.s;
  if (!xd2 || !xd2[0] || !yd2 || !yd2[0]) {
    return new Ctor(!y4.s || xd2 && !xd2[0] && !yd2 || yd2 && !yd2[0] && !xd2 ? NaN : !xd2 || !yd2 ? y4.s / 0 : y4.s * 0);
  }
  e3 = mathfloor(x3.e / LOG_BASE) + mathfloor(y4.e / LOG_BASE);
  xdL = xd2.length;
  ydL = yd2.length;
  if (xdL < ydL) {
    r2 = xd2;
    xd2 = yd2;
    yd2 = r2;
    rL = xdL;
    xdL = ydL;
    ydL = rL;
  }
  r2 = [];
  rL = xdL + ydL;
  for (i3 = rL; i3--; )
    r2.push(0);
  for (i3 = ydL; --i3 >= 0; ) {
    carry = 0;
    for (k3 = xdL + i3; k3 > i3; ) {
      t3 = r2[k3] + yd2[i3] * xd2[k3 - i3 - 1] + carry;
      r2[k3--] = t3 % BASE | 0;
      carry = t3 / BASE | 0;
    }
    r2[k3] = (r2[k3] + carry) % BASE | 0;
  }
  for (; !r2[--rL]; )
    r2.pop();
  if (carry)
    ++e3;
  else
    r2.shift();
  y4.d = r2;
  y4.e = getBase10Exponent(r2, e3);
  return external ? finalise(y4, Ctor.precision, Ctor.rounding) : y4;
};
P$1.toBinary = function(sd2, rm) {
  return toStringBinary(this, 2, sd2, rm);
};
P$1.toDecimalPlaces = P$1.toDP = function(dp, rm) {
  var x3 = this, Ctor = x3.constructor;
  x3 = new Ctor(x3);
  if (dp === void 0)
    return x3;
  checkInt32(dp, 0, MAX_DIGITS);
  if (rm === void 0)
    rm = Ctor.rounding;
  else
    checkInt32(rm, 0, 8);
  return finalise(x3, dp + x3.e + 1, rm);
};
P$1.toExponential = function(dp, rm) {
  var str, x3 = this, Ctor = x3.constructor;
  if (dp === void 0) {
    str = finiteToString(x3, true);
  } else {
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
    x3 = finalise(new Ctor(x3), dp + 1, rm);
    str = finiteToString(x3, true, dp + 1);
  }
  return x3.isNeg() && !x3.isZero() ? "-" + str : str;
};
P$1.toFixed = function(dp, rm) {
  var str, y4, x3 = this, Ctor = x3.constructor;
  if (dp === void 0) {
    str = finiteToString(x3);
  } else {
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
    y4 = finalise(new Ctor(x3), dp + x3.e + 1, rm);
    str = finiteToString(y4, false, dp + y4.e + 1);
  }
  return x3.isNeg() && !x3.isZero() ? "-" + str : str;
};
P$1.toFraction = function(maxD) {
  var d4, d0, d1, d22, e3, k3, n2, n0, n1, pr2, q3, r2, x3 = this, xd2 = x3.d, Ctor = x3.constructor;
  if (!xd2)
    return new Ctor(x3);
  n1 = d0 = new Ctor(1);
  d1 = n0 = new Ctor(0);
  d4 = new Ctor(d1);
  e3 = d4.e = getPrecision(xd2) - x3.e - 1;
  k3 = e3 % LOG_BASE;
  d4.d[0] = mathpow(10, k3 < 0 ? LOG_BASE + k3 : k3);
  if (maxD == null) {
    maxD = e3 > 0 ? d4 : n1;
  } else {
    n2 = new Ctor(maxD);
    if (!n2.isInt() || n2.lt(n1))
      throw Error(invalidArgument + n2);
    maxD = n2.gt(d4) ? e3 > 0 ? d4 : n1 : n2;
  }
  external = false;
  n2 = new Ctor(digitsToString(xd2));
  pr2 = Ctor.precision;
  Ctor.precision = e3 = xd2.length * LOG_BASE * 2;
  for (; ; ) {
    q3 = divide(n2, d4, 0, 1, 1);
    d22 = d0.plus(q3.times(d1));
    if (d22.cmp(maxD) == 1)
      break;
    d0 = d1;
    d1 = d22;
    d22 = n1;
    n1 = n0.plus(q3.times(d22));
    n0 = d22;
    d22 = d4;
    d4 = n2.minus(q3.times(d22));
    n2 = d22;
  }
  d22 = divide(maxD.minus(d0), d1, 0, 1, 1);
  n0 = n0.plus(d22.times(n1));
  d0 = d0.plus(d22.times(d1));
  n0.s = n1.s = x3.s;
  r2 = divide(n1, d1, e3, 1).minus(x3).abs().cmp(divide(n0, d0, e3, 1).minus(x3).abs()) < 1 ? [n1, d1] : [n0, d0];
  Ctor.precision = pr2;
  external = true;
  return r2;
};
P$1.toHexadecimal = P$1.toHex = function(sd2, rm) {
  return toStringBinary(this, 16, sd2, rm);
};
P$1.toNearest = function(y4, rm) {
  var x3 = this, Ctor = x3.constructor;
  x3 = new Ctor(x3);
  if (y4 == null) {
    if (!x3.d)
      return x3;
    y4 = new Ctor(1);
    rm = Ctor.rounding;
  } else {
    y4 = new Ctor(y4);
    if (rm === void 0) {
      rm = Ctor.rounding;
    } else {
      checkInt32(rm, 0, 8);
    }
    if (!x3.d)
      return y4.s ? x3 : y4;
    if (!y4.d) {
      if (y4.s)
        y4.s = x3.s;
      return y4;
    }
  }
  if (y4.d[0]) {
    external = false;
    x3 = divide(x3, y4, 0, rm, 1).times(y4);
    external = true;
    finalise(x3);
  } else {
    y4.s = x3.s;
    x3 = y4;
  }
  return x3;
};
P$1.toNumber = function() {
  return +this;
};
P$1.toOctal = function(sd2, rm) {
  return toStringBinary(this, 8, sd2, rm);
};
P$1.toPower = P$1.pow = function(y4) {
  var e3, k3, pr2, r2, rm, s4, x3 = this, Ctor = x3.constructor, yn2 = +(y4 = new Ctor(y4));
  if (!x3.d || !y4.d || !x3.d[0] || !y4.d[0])
    return new Ctor(mathpow(+x3, yn2));
  x3 = new Ctor(x3);
  if (x3.eq(1))
    return x3;
  pr2 = Ctor.precision;
  rm = Ctor.rounding;
  if (y4.eq(1))
    return finalise(x3, pr2, rm);
  e3 = mathfloor(y4.e / LOG_BASE);
  if (e3 >= y4.d.length - 1 && (k3 = yn2 < 0 ? -yn2 : yn2) <= MAX_SAFE_INTEGER$4) {
    r2 = intPow(Ctor, x3, k3, pr2);
    return y4.s < 0 ? new Ctor(1).div(r2) : finalise(r2, pr2, rm);
  }
  s4 = x3.s;
  if (s4 < 0) {
    if (e3 < y4.d.length - 1)
      return new Ctor(NaN);
    if ((y4.d[e3] & 1) == 0)
      s4 = 1;
    if (x3.e == 0 && x3.d[0] == 1 && x3.d.length == 1) {
      x3.s = s4;
      return x3;
    }
  }
  k3 = mathpow(+x3, yn2);
  e3 = k3 == 0 || !isFinite(k3) ? mathfloor(yn2 * (Math.log("0." + digitsToString(x3.d)) / Math.LN10 + x3.e + 1)) : new Ctor(k3 + "").e;
  if (e3 > Ctor.maxE + 1 || e3 < Ctor.minE - 1)
    return new Ctor(e3 > 0 ? s4 / 0 : 0);
  external = false;
  Ctor.rounding = x3.s = 1;
  k3 = Math.min(12, (e3 + "").length);
  r2 = naturalExponential(y4.times(naturalLogarithm(x3, pr2 + k3)), pr2);
  if (r2.d) {
    r2 = finalise(r2, pr2 + 5, 1);
    if (checkRoundingDigits(r2.d, pr2, rm)) {
      e3 = pr2 + 10;
      r2 = finalise(naturalExponential(y4.times(naturalLogarithm(x3, e3 + k3)), e3), e3 + 5, 1);
      if (+digitsToString(r2.d).slice(pr2 + 1, pr2 + 15) + 1 == 1e14) {
        r2 = finalise(r2, pr2 + 1, 0);
      }
    }
  }
  r2.s = s4;
  external = true;
  Ctor.rounding = rm;
  return finalise(r2, pr2, rm);
};
P$1.toPrecision = function(sd2, rm) {
  var str, x3 = this, Ctor = x3.constructor;
  if (sd2 === void 0) {
    str = finiteToString(x3, x3.e <= Ctor.toExpNeg || x3.e >= Ctor.toExpPos);
  } else {
    checkInt32(sd2, 1, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
    x3 = finalise(new Ctor(x3), sd2, rm);
    str = finiteToString(x3, sd2 <= x3.e || x3.e <= Ctor.toExpNeg, sd2);
  }
  return x3.isNeg() && !x3.isZero() ? "-" + str : str;
};
P$1.toSignificantDigits = P$1.toSD = function(sd2, rm) {
  var x3 = this, Ctor = x3.constructor;
  if (sd2 === void 0) {
    sd2 = Ctor.precision;
    rm = Ctor.rounding;
  } else {
    checkInt32(sd2, 1, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
  }
  return finalise(new Ctor(x3), sd2, rm);
};
P$1.toString = function() {
  var x3 = this, Ctor = x3.constructor, str = finiteToString(x3, x3.e <= Ctor.toExpNeg || x3.e >= Ctor.toExpPos);
  return x3.isNeg() && !x3.isZero() ? "-" + str : str;
};
P$1.truncated = P$1.trunc = function() {
  return finalise(new this.constructor(this), this.e + 1, 1);
};
P$1.valueOf = P$1.toJSON = function() {
  var x3 = this, Ctor = x3.constructor, str = finiteToString(x3, x3.e <= Ctor.toExpNeg || x3.e >= Ctor.toExpPos);
  return x3.isNeg() ? "-" + str : str;
};
function digitsToString(d4) {
  var i3, k3, ws, indexOfLastWord = d4.length - 1, str = "", w3 = d4[0];
  if (indexOfLastWord > 0) {
    str += w3;
    for (i3 = 1; i3 < indexOfLastWord; i3++) {
      ws = d4[i3] + "";
      k3 = LOG_BASE - ws.length;
      if (k3)
        str += getZeroString(k3);
      str += ws;
    }
    w3 = d4[i3];
    ws = w3 + "";
    k3 = LOG_BASE - ws.length;
    if (k3)
      str += getZeroString(k3);
  } else if (w3 === 0) {
    return "0";
  }
  for (; w3 % 10 === 0; )
    w3 /= 10;
  return str + w3;
}
function checkInt32(i3, min2, max2) {
  if (i3 !== ~~i3 || i3 < min2 || i3 > max2) {
    throw Error(invalidArgument + i3);
  }
}
function checkRoundingDigits(d4, i3, rm, repeating) {
  var di2, k3, r2, rd2;
  for (k3 = d4[0]; k3 >= 10; k3 /= 10)
    --i3;
  if (--i3 < 0) {
    i3 += LOG_BASE;
    di2 = 0;
  } else {
    di2 = Math.ceil((i3 + 1) / LOG_BASE);
    i3 %= LOG_BASE;
  }
  k3 = mathpow(10, LOG_BASE - i3);
  rd2 = d4[di2] % k3 | 0;
  if (repeating == null) {
    if (i3 < 3) {
      if (i3 == 0)
        rd2 = rd2 / 100 | 0;
      else if (i3 == 1)
        rd2 = rd2 / 10 | 0;
      r2 = rm < 4 && rd2 == 99999 || rm > 3 && rd2 == 49999 || rd2 == 5e4 || rd2 == 0;
    } else {
      r2 = (rm < 4 && rd2 + 1 == k3 || rm > 3 && rd2 + 1 == k3 / 2) && (d4[di2 + 1] / k3 / 100 | 0) == mathpow(10, i3 - 2) - 1 || (rd2 == k3 / 2 || rd2 == 0) && (d4[di2 + 1] / k3 / 100 | 0) == 0;
    }
  } else {
    if (i3 < 4) {
      if (i3 == 0)
        rd2 = rd2 / 1e3 | 0;
      else if (i3 == 1)
        rd2 = rd2 / 100 | 0;
      else if (i3 == 2)
        rd2 = rd2 / 10 | 0;
      r2 = (repeating || rm < 4) && rd2 == 9999 || !repeating && rm > 3 && rd2 == 4999;
    } else {
      r2 = ((repeating || rm < 4) && rd2 + 1 == k3 || !repeating && rm > 3 && rd2 + 1 == k3 / 2) && (d4[di2 + 1] / k3 / 1e3 | 0) == mathpow(10, i3 - 3) - 1;
    }
  }
  return r2;
}
function convertBase(str, baseIn, baseOut) {
  var j2, arr = [0], arrL, i3 = 0, strL = str.length;
  for (; i3 < strL; ) {
    for (arrL = arr.length; arrL--; )
      arr[arrL] *= baseIn;
    arr[0] += NUMERALS.indexOf(str.charAt(i3++));
    for (j2 = 0; j2 < arr.length; j2++) {
      if (arr[j2] > baseOut - 1) {
        if (arr[j2 + 1] === void 0)
          arr[j2 + 1] = 0;
        arr[j2 + 1] += arr[j2] / baseOut | 0;
        arr[j2] %= baseOut;
      }
    }
  }
  return arr.reverse();
}
function cosine(Ctor, x3) {
  var k3, len, y4;
  if (x3.isZero())
    return x3;
  len = x3.d.length;
  if (len < 32) {
    k3 = Math.ceil(len / 3);
    y4 = (1 / tinyPow(4, k3)).toString();
  } else {
    k3 = 16;
    y4 = "2.3283064365386962890625e-10";
  }
  Ctor.precision += k3;
  x3 = taylorSeries(Ctor, 1, x3.times(y4), new Ctor(1));
  for (var i3 = k3; i3--; ) {
    var cos2x = x3.times(x3);
    x3 = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
  }
  Ctor.precision -= k3;
  return x3;
}
var divide = function() {
  function multiplyInteger(x3, k3, base) {
    var temp, carry = 0, i3 = x3.length;
    for (x3 = x3.slice(); i3--; ) {
      temp = x3[i3] * k3 + carry;
      x3[i3] = temp % base | 0;
      carry = temp / base | 0;
    }
    if (carry)
      x3.unshift(carry);
    return x3;
  }
  function compare(a4, b3, aL, bL) {
    var i3, r2;
    if (aL != bL) {
      r2 = aL > bL ? 1 : -1;
    } else {
      for (i3 = r2 = 0; i3 < aL; i3++) {
        if (a4[i3] != b3[i3]) {
          r2 = a4[i3] > b3[i3] ? 1 : -1;
          break;
        }
      }
    }
    return r2;
  }
  function subtract(a4, b3, aL, base) {
    var i3 = 0;
    for (; aL--; ) {
      a4[aL] -= i3;
      i3 = a4[aL] < b3[aL] ? 1 : 0;
      a4[aL] = i3 * base + a4[aL] - b3[aL];
    }
    for (; !a4[0] && a4.length > 1; )
      a4.shift();
  }
  return function(x3, y4, pr2, rm, dp, base) {
    var cmp, e3, i3, k3, logBase, more, prod, prodL, q3, qd2, rem, remL, rem0, sd2, t3, xi2, xL, yd0, yL, yz, Ctor = x3.constructor, sign2 = x3.s == y4.s ? 1 : -1, xd2 = x3.d, yd2 = y4.d;
    if (!xd2 || !xd2[0] || !yd2 || !yd2[0]) {
      return new Ctor(
        // Return NaN if either NaN, or both Infinity or 0.
        !x3.s || !y4.s || (xd2 ? yd2 && xd2[0] == yd2[0] : !yd2) ? NaN : (
          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          xd2 && xd2[0] == 0 || !yd2 ? sign2 * 0 : sign2 / 0
        )
      );
    }
    if (base) {
      logBase = 1;
      e3 = x3.e - y4.e;
    } else {
      base = BASE;
      logBase = LOG_BASE;
      e3 = mathfloor(x3.e / logBase) - mathfloor(y4.e / logBase);
    }
    yL = yd2.length;
    xL = xd2.length;
    q3 = new Ctor(sign2);
    qd2 = q3.d = [];
    for (i3 = 0; yd2[i3] == (xd2[i3] || 0); i3++)
      ;
    if (yd2[i3] > (xd2[i3] || 0))
      e3--;
    if (pr2 == null) {
      sd2 = pr2 = Ctor.precision;
      rm = Ctor.rounding;
    } else if (dp) {
      sd2 = pr2 + (x3.e - y4.e) + 1;
    } else {
      sd2 = pr2;
    }
    if (sd2 < 0) {
      qd2.push(1);
      more = true;
    } else {
      sd2 = sd2 / logBase + 2 | 0;
      i3 = 0;
      if (yL == 1) {
        k3 = 0;
        yd2 = yd2[0];
        sd2++;
        for (; (i3 < xL || k3) && sd2--; i3++) {
          t3 = k3 * base + (xd2[i3] || 0);
          qd2[i3] = t3 / yd2 | 0;
          k3 = t3 % yd2 | 0;
        }
        more = k3 || i3 < xL;
      } else {
        k3 = base / (yd2[0] + 1) | 0;
        if (k3 > 1) {
          yd2 = multiplyInteger(yd2, k3, base);
          xd2 = multiplyInteger(xd2, k3, base);
          yL = yd2.length;
          xL = xd2.length;
        }
        xi2 = yL;
        rem = xd2.slice(0, yL);
        remL = rem.length;
        for (; remL < yL; )
          rem[remL++] = 0;
        yz = yd2.slice();
        yz.unshift(0);
        yd0 = yd2[0];
        if (yd2[1] >= base / 2)
          ++yd0;
        do {
          k3 = 0;
          cmp = compare(yd2, rem, yL, remL);
          if (cmp < 0) {
            rem0 = rem[0];
            if (yL != remL)
              rem0 = rem0 * base + (rem[1] || 0);
            k3 = rem0 / yd0 | 0;
            if (k3 > 1) {
              if (k3 >= base)
                k3 = base - 1;
              prod = multiplyInteger(yd2, k3, base);
              prodL = prod.length;
              remL = rem.length;
              cmp = compare(prod, rem, prodL, remL);
              if (cmp == 1) {
                k3--;
                subtract(prod, yL < prodL ? yz : yd2, prodL, base);
              }
            } else {
              if (k3 == 0)
                cmp = k3 = 1;
              prod = yd2.slice();
            }
            prodL = prod.length;
            if (prodL < remL)
              prod.unshift(0);
            subtract(rem, prod, remL, base);
            if (cmp == -1) {
              remL = rem.length;
              cmp = compare(yd2, rem, yL, remL);
              if (cmp < 1) {
                k3++;
                subtract(rem, yL < remL ? yz : yd2, remL, base);
              }
            }
            remL = rem.length;
          } else if (cmp === 0) {
            k3++;
            rem = [0];
          }
          qd2[i3++] = k3;
          if (cmp && rem[0]) {
            rem[remL++] = xd2[xi2] || 0;
          } else {
            rem = [xd2[xi2]];
            remL = 1;
          }
        } while ((xi2++ < xL || rem[0] !== void 0) && sd2--);
        more = rem[0] !== void 0;
      }
      if (!qd2[0])
        qd2.shift();
    }
    if (logBase == 1) {
      q3.e = e3;
      inexact = more;
    } else {
      for (i3 = 1, k3 = qd2[0]; k3 >= 10; k3 /= 10)
        i3++;
      q3.e = i3 + e3 * logBase - 1;
      finalise(q3, dp ? pr2 + q3.e + 1 : pr2, rm, more);
    }
    return q3;
  };
}();
function finalise(x3, sd2, rm, isTruncated) {
  var digits, i3, j2, k3, rd2, roundUp, w3, xd2, xdi, Ctor = x3.constructor;
  out:
    if (sd2 != null) {
      xd2 = x3.d;
      if (!xd2)
        return x3;
      for (digits = 1, k3 = xd2[0]; k3 >= 10; k3 /= 10)
        digits++;
      i3 = sd2 - digits;
      if (i3 < 0) {
        i3 += LOG_BASE;
        j2 = sd2;
        w3 = xd2[xdi = 0];
        rd2 = w3 / mathpow(10, digits - j2 - 1) % 10 | 0;
      } else {
        xdi = Math.ceil((i3 + 1) / LOG_BASE);
        k3 = xd2.length;
        if (xdi >= k3) {
          if (isTruncated) {
            for (; k3++ <= xdi; )
              xd2.push(0);
            w3 = rd2 = 0;
            digits = 1;
            i3 %= LOG_BASE;
            j2 = i3 - LOG_BASE + 1;
          } else {
            break out;
          }
        } else {
          w3 = k3 = xd2[xdi];
          for (digits = 1; k3 >= 10; k3 /= 10)
            digits++;
          i3 %= LOG_BASE;
          j2 = i3 - LOG_BASE + digits;
          rd2 = j2 < 0 ? 0 : w3 / mathpow(10, digits - j2 - 1) % 10 | 0;
        }
      }
      isTruncated = isTruncated || sd2 < 0 || xd2[xdi + 1] !== void 0 || (j2 < 0 ? w3 : w3 % mathpow(10, digits - j2 - 1));
      roundUp = rm < 4 ? (rd2 || isTruncated) && (rm == 0 || rm == (x3.s < 0 ? 3 : 2)) : rd2 > 5 || rd2 == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
      (i3 > 0 ? j2 > 0 ? w3 / mathpow(10, digits - j2) : 0 : xd2[xdi - 1]) % 10 & 1 || rm == (x3.s < 0 ? 8 : 7));
      if (sd2 < 1 || !xd2[0]) {
        xd2.length = 0;
        if (roundUp) {
          sd2 -= x3.e + 1;
          xd2[0] = mathpow(10, (LOG_BASE - sd2 % LOG_BASE) % LOG_BASE);
          x3.e = -sd2 || 0;
        } else {
          xd2[0] = x3.e = 0;
        }
        return x3;
      }
      if (i3 == 0) {
        xd2.length = xdi;
        k3 = 1;
        xdi--;
      } else {
        xd2.length = xdi + 1;
        k3 = mathpow(10, LOG_BASE - i3);
        xd2[xdi] = j2 > 0 ? (w3 / mathpow(10, digits - j2) % mathpow(10, j2) | 0) * k3 : 0;
      }
      if (roundUp) {
        for (; ; ) {
          if (xdi == 0) {
            for (i3 = 1, j2 = xd2[0]; j2 >= 10; j2 /= 10)
              i3++;
            j2 = xd2[0] += k3;
            for (k3 = 1; j2 >= 10; j2 /= 10)
              k3++;
            if (i3 != k3) {
              x3.e++;
              if (xd2[0] == BASE)
                xd2[0] = 1;
            }
            break;
          } else {
            xd2[xdi] += k3;
            if (xd2[xdi] != BASE)
              break;
            xd2[xdi--] = 0;
            k3 = 1;
          }
        }
      }
      for (i3 = xd2.length; xd2[--i3] === 0; )
        xd2.pop();
    }
  if (external) {
    if (x3.e > Ctor.maxE) {
      x3.d = null;
      x3.e = NaN;
    } else if (x3.e < Ctor.minE) {
      x3.e = 0;
      x3.d = [0];
    }
  }
  return x3;
}
function finiteToString(x3, isExp, sd2) {
  if (!x3.isFinite())
    return nonFiniteToString(x3);
  var k3, e3 = x3.e, str = digitsToString(x3.d), len = str.length;
  if (isExp) {
    if (sd2 && (k3 = sd2 - len) > 0) {
      str = str.charAt(0) + "." + str.slice(1) + getZeroString(k3);
    } else if (len > 1) {
      str = str.charAt(0) + "." + str.slice(1);
    }
    str = str + (x3.e < 0 ? "e" : "e+") + x3.e;
  } else if (e3 < 0) {
    str = "0." + getZeroString(-e3 - 1) + str;
    if (sd2 && (k3 = sd2 - len) > 0)
      str += getZeroString(k3);
  } else if (e3 >= len) {
    str += getZeroString(e3 + 1 - len);
    if (sd2 && (k3 = sd2 - e3 - 1) > 0)
      str = str + "." + getZeroString(k3);
  } else {
    if ((k3 = e3 + 1) < len)
      str = str.slice(0, k3) + "." + str.slice(k3);
    if (sd2 && (k3 = sd2 - len) > 0) {
      if (e3 + 1 === len)
        str += ".";
      str += getZeroString(k3);
    }
  }
  return str;
}
function getBase10Exponent(digits, e3) {
  var w3 = digits[0];
  for (e3 *= LOG_BASE; w3 >= 10; w3 /= 10)
    e3++;
  return e3;
}
function getLn10(Ctor, sd2, pr2) {
  if (sd2 > LN10_PRECISION) {
    external = true;
    if (pr2)
      Ctor.precision = pr2;
    throw Error(precisionLimitExceeded);
  }
  return finalise(new Ctor(LN10), sd2, 1, true);
}
function getPi(Ctor, sd2, rm) {
  if (sd2 > PI_PRECISION)
    throw Error(precisionLimitExceeded);
  return finalise(new Ctor(PI), sd2, rm, true);
}
function getPrecision(digits) {
  var w3 = digits.length - 1, len = w3 * LOG_BASE + 1;
  w3 = digits[w3];
  if (w3) {
    for (; w3 % 10 == 0; w3 /= 10)
      len--;
    for (w3 = digits[0]; w3 >= 10; w3 /= 10)
      len++;
  }
  return len;
}
function getZeroString(k3) {
  var zs = "";
  for (; k3--; )
    zs += "0";
  return zs;
}
function intPow(Ctor, x3, n2, pr2) {
  var isTruncated, r2 = new Ctor(1), k3 = Math.ceil(pr2 / LOG_BASE + 4);
  external = false;
  for (; ; ) {
    if (n2 % 2) {
      r2 = r2.times(x3);
      if (truncate$1(r2.d, k3))
        isTruncated = true;
    }
    n2 = mathfloor(n2 / 2);
    if (n2 === 0) {
      n2 = r2.d.length - 1;
      if (isTruncated && r2.d[n2] === 0)
        ++r2.d[n2];
      break;
    }
    x3 = x3.times(x3);
    truncate$1(x3.d, k3);
  }
  external = true;
  return r2;
}
function isOdd(n2) {
  return n2.d[n2.d.length - 1] & 1;
}
function maxOrMin(Ctor, args, ltgt) {
  var y4, x3 = new Ctor(args[0]), i3 = 0;
  for (; ++i3 < args.length; ) {
    y4 = new Ctor(args[i3]);
    if (!y4.s) {
      x3 = y4;
      break;
    } else if (x3[ltgt](y4)) {
      x3 = y4;
    }
  }
  return x3;
}
function naturalExponential(x3, sd2) {
  var denominator, guard, j2, pow2, sum2, t3, wpr, rep = 0, i3 = 0, k3 = 0, Ctor = x3.constructor, rm = Ctor.rounding, pr2 = Ctor.precision;
  if (!x3.d || !x3.d[0] || x3.e > 17) {
    return new Ctor(x3.d ? !x3.d[0] ? 1 : x3.s < 0 ? 0 : 1 / 0 : x3.s ? x3.s < 0 ? 0 : x3 : 0 / 0);
  }
  if (sd2 == null) {
    external = false;
    wpr = pr2;
  } else {
    wpr = sd2;
  }
  t3 = new Ctor(0.03125);
  while (x3.e > -2) {
    x3 = x3.times(t3);
    k3 += 5;
  }
  guard = Math.log(mathpow(2, k3)) / Math.LN10 * 2 + 5 | 0;
  wpr += guard;
  denominator = pow2 = sum2 = new Ctor(1);
  Ctor.precision = wpr;
  for (; ; ) {
    pow2 = finalise(pow2.times(x3), wpr, 1);
    denominator = denominator.times(++i3);
    t3 = sum2.plus(divide(pow2, denominator, wpr, 1));
    if (digitsToString(t3.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
      j2 = k3;
      while (j2--)
        sum2 = finalise(sum2.times(sum2), wpr, 1);
      if (sd2 == null) {
        if (rep < 3 && checkRoundingDigits(sum2.d, wpr - guard, rm, rep)) {
          Ctor.precision = wpr += 10;
          denominator = pow2 = t3 = new Ctor(1);
          i3 = 0;
          rep++;
        } else {
          return finalise(sum2, Ctor.precision = pr2, rm, external = true);
        }
      } else {
        Ctor.precision = pr2;
        return sum2;
      }
    }
    sum2 = t3;
  }
}
function naturalLogarithm(y4, sd2) {
  var c7, c0, denominator, e3, numerator, rep, sum2, t3, wpr, x1, x22, n2 = 1, guard = 10, x3 = y4, xd2 = x3.d, Ctor = x3.constructor, rm = Ctor.rounding, pr2 = Ctor.precision;
  if (x3.s < 0 || !xd2 || !xd2[0] || !x3.e && xd2[0] == 1 && xd2.length == 1) {
    return new Ctor(xd2 && !xd2[0] ? -1 / 0 : x3.s != 1 ? NaN : xd2 ? 0 : x3);
  }
  if (sd2 == null) {
    external = false;
    wpr = pr2;
  } else {
    wpr = sd2;
  }
  Ctor.precision = wpr += guard;
  c7 = digitsToString(xd2);
  c0 = c7.charAt(0);
  if (Math.abs(e3 = x3.e) < 15e14) {
    while (c0 < 7 && c0 != 1 || c0 == 1 && c7.charAt(1) > 3) {
      x3 = x3.times(y4);
      c7 = digitsToString(x3.d);
      c0 = c7.charAt(0);
      n2++;
    }
    e3 = x3.e;
    if (c0 > 1) {
      x3 = new Ctor("0." + c7);
      e3++;
    } else {
      x3 = new Ctor(c0 + "." + c7.slice(1));
    }
  } else {
    t3 = getLn10(Ctor, wpr + 2, pr2).times(e3 + "");
    x3 = naturalLogarithm(new Ctor(c0 + "." + c7.slice(1)), wpr - guard).plus(t3);
    Ctor.precision = pr2;
    return sd2 == null ? finalise(x3, pr2, rm, external = true) : x3;
  }
  x1 = x3;
  sum2 = numerator = x3 = divide(x3.minus(1), x3.plus(1), wpr, 1);
  x22 = finalise(x3.times(x3), wpr, 1);
  denominator = 3;
  for (; ; ) {
    numerator = finalise(numerator.times(x22), wpr, 1);
    t3 = sum2.plus(divide(numerator, new Ctor(denominator), wpr, 1));
    if (digitsToString(t3.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
      sum2 = sum2.times(2);
      if (e3 !== 0)
        sum2 = sum2.plus(getLn10(Ctor, wpr + 2, pr2).times(e3 + ""));
      sum2 = divide(sum2, new Ctor(n2), wpr, 1);
      if (sd2 == null) {
        if (checkRoundingDigits(sum2.d, wpr - guard, rm, rep)) {
          Ctor.precision = wpr += guard;
          t3 = numerator = x3 = divide(x1.minus(1), x1.plus(1), wpr, 1);
          x22 = finalise(x3.times(x3), wpr, 1);
          denominator = rep = 1;
        } else {
          return finalise(sum2, Ctor.precision = pr2, rm, external = true);
        }
      } else {
        Ctor.precision = pr2;
        return sum2;
      }
    }
    sum2 = t3;
    denominator += 2;
  }
}
function nonFiniteToString(x3) {
  return String(x3.s * x3.s / 0);
}
function parseDecimal(x3, str) {
  var e3, i3, len;
  if ((e3 = str.indexOf(".")) > -1)
    str = str.replace(".", "");
  if ((i3 = str.search(/e/i)) > 0) {
    if (e3 < 0)
      e3 = i3;
    e3 += +str.slice(i3 + 1);
    str = str.substring(0, i3);
  } else if (e3 < 0) {
    e3 = str.length;
  }
  for (i3 = 0; str.charCodeAt(i3) === 48; i3++)
    ;
  for (len = str.length; str.charCodeAt(len - 1) === 48; --len)
    ;
  str = str.slice(i3, len);
  if (str) {
    len -= i3;
    x3.e = e3 = e3 - i3 - 1;
    x3.d = [];
    i3 = (e3 + 1) % LOG_BASE;
    if (e3 < 0)
      i3 += LOG_BASE;
    if (i3 < len) {
      if (i3)
        x3.d.push(+str.slice(0, i3));
      for (len -= LOG_BASE; i3 < len; )
        x3.d.push(+str.slice(i3, i3 += LOG_BASE));
      str = str.slice(i3);
      i3 = LOG_BASE - str.length;
    } else {
      i3 -= len;
    }
    for (; i3--; )
      str += "0";
    x3.d.push(+str);
    if (external) {
      if (x3.e > x3.constructor.maxE) {
        x3.d = null;
        x3.e = NaN;
      } else if (x3.e < x3.constructor.minE) {
        x3.e = 0;
        x3.d = [0];
      }
    }
  } else {
    x3.e = 0;
    x3.d = [0];
  }
  return x3;
}
function parseOther(x3, str) {
  var base, Ctor, divisor, i3, isFloat, len, p2, xd2, xe2;
  if (str.indexOf("_") > -1) {
    str = str.replace(/(\d)_(?=\d)/g, "$1");
    if (isDecimal.test(str))
      return parseDecimal(x3, str);
  } else if (str === "Infinity" || str === "NaN") {
    if (!+str)
      x3.s = NaN;
    x3.e = NaN;
    x3.d = null;
    return x3;
  }
  if (isHex.test(str)) {
    base = 16;
    str = str.toLowerCase();
  } else if (isBinary.test(str)) {
    base = 2;
  } else if (isOctal.test(str)) {
    base = 8;
  } else {
    throw Error(invalidArgument + str);
  }
  i3 = str.search(/p/i);
  if (i3 > 0) {
    p2 = +str.slice(i3 + 1);
    str = str.substring(2, i3);
  } else {
    str = str.slice(2);
  }
  i3 = str.indexOf(".");
  isFloat = i3 >= 0;
  Ctor = x3.constructor;
  if (isFloat) {
    str = str.replace(".", "");
    len = str.length;
    i3 = len - i3;
    divisor = intPow(Ctor, new Ctor(base), i3, i3 * 2);
  }
  xd2 = convertBase(str, base, BASE);
  xe2 = xd2.length - 1;
  for (i3 = xe2; xd2[i3] === 0; --i3)
    xd2.pop();
  if (i3 < 0)
    return new Ctor(x3.s * 0);
  x3.e = getBase10Exponent(xd2, xe2);
  x3.d = xd2;
  external = false;
  if (isFloat)
    x3 = divide(x3, divisor, len * 4);
  if (p2)
    x3 = x3.times(Math.abs(p2) < 54 ? mathpow(2, p2) : Decimal.pow(2, p2));
  external = true;
  return x3;
}
function sine(Ctor, x3) {
  var k3, len = x3.d.length;
  if (len < 3) {
    return x3.isZero() ? x3 : taylorSeries(Ctor, 2, x3, x3);
  }
  k3 = 1.4 * Math.sqrt(len);
  k3 = k3 > 16 ? 16 : k3 | 0;
  x3 = x3.times(1 / tinyPow(5, k3));
  x3 = taylorSeries(Ctor, 2, x3, x3);
  var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
  for (; k3--; ) {
    sin2_x = x3.times(x3);
    x3 = x3.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
  }
  return x3;
}
function taylorSeries(Ctor, n2, x3, y4, isHyperbolic) {
  var j2, t3, u3, x22, pr2 = Ctor.precision, k3 = Math.ceil(pr2 / LOG_BASE);
  external = false;
  x22 = x3.times(x3);
  u3 = new Ctor(y4);
  for (; ; ) {
    t3 = divide(u3.times(x22), new Ctor(n2++ * n2++), pr2, 1);
    u3 = isHyperbolic ? y4.plus(t3) : y4.minus(t3);
    y4 = divide(t3.times(x22), new Ctor(n2++ * n2++), pr2, 1);
    t3 = u3.plus(y4);
    if (t3.d[k3] !== void 0) {
      for (j2 = k3; t3.d[j2] === u3.d[j2] && j2--; )
        ;
      if (j2 == -1)
        break;
    }
    j2 = u3;
    u3 = y4;
    y4 = t3;
    t3 = j2;
  }
  external = true;
  t3.d.length = k3 + 1;
  return t3;
}
function tinyPow(b3, e3) {
  var n2 = b3;
  while (--e3)
    n2 *= b3;
  return n2;
}
function toLessThanHalfPi(Ctor, x3) {
  var t3, isNeg = x3.s < 0, pi2 = getPi(Ctor, Ctor.precision, 1), halfPi = pi2.times(0.5);
  x3 = x3.abs();
  if (x3.lte(halfPi)) {
    quadrant = isNeg ? 4 : 1;
    return x3;
  }
  t3 = x3.divToInt(pi2);
  if (t3.isZero()) {
    quadrant = isNeg ? 3 : 2;
  } else {
    x3 = x3.minus(t3.times(pi2));
    if (x3.lte(halfPi)) {
      quadrant = isOdd(t3) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
      return x3;
    }
    quadrant = isOdd(t3) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
  }
  return x3.minus(pi2).abs();
}
function toStringBinary(x3, baseOut, sd2, rm) {
  var base, e3, i3, k3, len, roundUp, str, xd2, y4, Ctor = x3.constructor, isExp = sd2 !== void 0;
  if (isExp) {
    checkInt32(sd2, 1, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
  } else {
    sd2 = Ctor.precision;
    rm = Ctor.rounding;
  }
  if (!x3.isFinite()) {
    str = nonFiniteToString(x3);
  } else {
    str = finiteToString(x3);
    i3 = str.indexOf(".");
    if (isExp) {
      base = 2;
      if (baseOut == 16) {
        sd2 = sd2 * 4 - 3;
      } else if (baseOut == 8) {
        sd2 = sd2 * 3 - 2;
      }
    } else {
      base = baseOut;
    }
    if (i3 >= 0) {
      str = str.replace(".", "");
      y4 = new Ctor(1);
      y4.e = str.length - i3;
      y4.d = convertBase(finiteToString(y4), 10, base);
      y4.e = y4.d.length;
    }
    xd2 = convertBase(str, 10, base);
    e3 = len = xd2.length;
    for (; xd2[--len] == 0; )
      xd2.pop();
    if (!xd2[0]) {
      str = isExp ? "0p+0" : "0";
    } else {
      if (i3 < 0) {
        e3--;
      } else {
        x3 = new Ctor(x3);
        x3.d = xd2;
        x3.e = e3;
        x3 = divide(x3, y4, sd2, rm, 0, base);
        xd2 = x3.d;
        e3 = x3.e;
        roundUp = inexact;
      }
      i3 = xd2[sd2];
      k3 = base / 2;
      roundUp = roundUp || xd2[sd2 + 1] !== void 0;
      roundUp = rm < 4 ? (i3 !== void 0 || roundUp) && (rm === 0 || rm === (x3.s < 0 ? 3 : 2)) : i3 > k3 || i3 === k3 && (rm === 4 || roundUp || rm === 6 && xd2[sd2 - 1] & 1 || rm === (x3.s < 0 ? 8 : 7));
      xd2.length = sd2;
      if (roundUp) {
        for (; ++xd2[--sd2] > base - 1; ) {
          xd2[sd2] = 0;
          if (!sd2) {
            ++e3;
            xd2.unshift(1);
          }
        }
      }
      for (len = xd2.length; !xd2[len - 1]; --len)
        ;
      for (i3 = 0, str = ""; i3 < len; i3++)
        str += NUMERALS.charAt(xd2[i3]);
      if (isExp) {
        if (len > 1) {
          if (baseOut == 16 || baseOut == 8) {
            i3 = baseOut == 16 ? 4 : 3;
            for (--len; len % i3; len++)
              str += "0";
            xd2 = convertBase(str, base, baseOut);
            for (len = xd2.length; !xd2[len - 1]; --len)
              ;
            for (i3 = 1, str = "1."; i3 < len; i3++)
              str += NUMERALS.charAt(xd2[i3]);
          } else {
            str = str.charAt(0) + "." + str.slice(1);
          }
        }
        str = str + (e3 < 0 ? "p" : "p+") + e3;
      } else if (e3 < 0) {
        for (; ++e3; )
          str = "0" + str;
        str = "0." + str;
      } else {
        if (++e3 > len)
          for (e3 -= len; e3--; )
            str += "0";
        else if (e3 < len)
          str = str.slice(0, e3) + "." + str.slice(e3);
      }
    }
    str = (baseOut == 16 ? "0x" : baseOut == 2 ? "0b" : baseOut == 8 ? "0o" : "") + str;
  }
  return x3.s < 0 ? "-" + str : str;
}
function truncate$1(arr, len) {
  if (arr.length > len) {
    arr.length = len;
    return true;
  }
}
function abs(x3) {
  return new this(x3).abs();
}
function acos(x3) {
  return new this(x3).acos();
}
function acosh(x3) {
  return new this(x3).acosh();
}
function add(x3, y4) {
  return new this(x3).plus(y4);
}
function asin(x3) {
  return new this(x3).asin();
}
function asinh(x3) {
  return new this(x3).asinh();
}
function atan(x3) {
  return new this(x3).atan();
}
function atanh(x3) {
  return new this(x3).atanh();
}
function atan2(y4, x3) {
  y4 = new this(y4);
  x3 = new this(x3);
  var r2, pr2 = this.precision, rm = this.rounding, wpr = pr2 + 4;
  if (!y4.s || !x3.s) {
    r2 = new this(NaN);
  } else if (!y4.d && !x3.d) {
    r2 = getPi(this, wpr, 1).times(x3.s > 0 ? 0.25 : 0.75);
    r2.s = y4.s;
  } else if (!x3.d || y4.isZero()) {
    r2 = x3.s < 0 ? getPi(this, pr2, rm) : new this(0);
    r2.s = y4.s;
  } else if (!y4.d || x3.isZero()) {
    r2 = getPi(this, wpr, 1).times(0.5);
    r2.s = y4.s;
  } else if (x3.s < 0) {
    this.precision = wpr;
    this.rounding = 1;
    r2 = this.atan(divide(y4, x3, wpr, 1));
    x3 = getPi(this, wpr, 1);
    this.precision = pr2;
    this.rounding = rm;
    r2 = y4.s < 0 ? r2.minus(x3) : r2.plus(x3);
  } else {
    r2 = this.atan(divide(y4, x3, wpr, 1));
  }
  return r2;
}
function cbrt(x3) {
  return new this(x3).cbrt();
}
function ceil(x3) {
  return finalise(x3 = new this(x3), x3.e + 1, 2);
}
function clamp$1(x3, min2, max2) {
  return new this(x3).clamp(min2, max2);
}
function config$1(obj) {
  if (!obj || typeof obj !== "object")
    throw Error(decimalError + "Object expected");
  var i3, p2, v2, useDefaults = obj.defaults === true, ps = [
    "precision",
    1,
    MAX_DIGITS,
    "rounding",
    0,
    8,
    "toExpNeg",
    -EXP_LIMIT,
    0,
    "toExpPos",
    0,
    EXP_LIMIT,
    "maxE",
    0,
    EXP_LIMIT,
    "minE",
    -EXP_LIMIT,
    0,
    "modulo",
    0,
    9
  ];
  for (i3 = 0; i3 < ps.length; i3 += 3) {
    if (p2 = ps[i3], useDefaults)
      this[p2] = DEFAULTS[p2];
    if ((v2 = obj[p2]) !== void 0) {
      if (mathfloor(v2) === v2 && v2 >= ps[i3 + 1] && v2 <= ps[i3 + 2])
        this[p2] = v2;
      else
        throw Error(invalidArgument + p2 + ": " + v2);
    }
  }
  if (p2 = "crypto", useDefaults)
    this[p2] = DEFAULTS[p2];
  if ((v2 = obj[p2]) !== void 0) {
    if (v2 === true || v2 === false || v2 === 0 || v2 === 1) {
      if (v2) {
        if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
          this[p2] = true;
        } else {
          throw Error(cryptoUnavailable);
        }
      } else {
        this[p2] = false;
      }
    } else {
      throw Error(invalidArgument + p2 + ": " + v2);
    }
  }
  return this;
}
function cos(x3) {
  return new this(x3).cos();
}
function cosh(x3) {
  return new this(x3).cosh();
}
function clone$2(obj) {
  var i3, p2, ps;
  function Decimal2(v2) {
    var e3, i4, t3, x3 = this;
    if (!(x3 instanceof Decimal2))
      return new Decimal2(v2);
    x3.constructor = Decimal2;
    if (isDecimalInstance(v2)) {
      x3.s = v2.s;
      if (external) {
        if (!v2.d || v2.e > Decimal2.maxE) {
          x3.e = NaN;
          x3.d = null;
        } else if (v2.e < Decimal2.minE) {
          x3.e = 0;
          x3.d = [0];
        } else {
          x3.e = v2.e;
          x3.d = v2.d.slice();
        }
      } else {
        x3.e = v2.e;
        x3.d = v2.d ? v2.d.slice() : v2.d;
      }
      return;
    }
    t3 = typeof v2;
    if (t3 === "number") {
      if (v2 === 0) {
        x3.s = 1 / v2 < 0 ? -1 : 1;
        x3.e = 0;
        x3.d = [0];
        return;
      }
      if (v2 < 0) {
        v2 = -v2;
        x3.s = -1;
      } else {
        x3.s = 1;
      }
      if (v2 === ~~v2 && v2 < 1e7) {
        for (e3 = 0, i4 = v2; i4 >= 10; i4 /= 10)
          e3++;
        if (external) {
          if (e3 > Decimal2.maxE) {
            x3.e = NaN;
            x3.d = null;
          } else if (e3 < Decimal2.minE) {
            x3.e = 0;
            x3.d = [0];
          } else {
            x3.e = e3;
            x3.d = [v2];
          }
        } else {
          x3.e = e3;
          x3.d = [v2];
        }
        return;
      } else if (v2 * 0 !== 0) {
        if (!v2)
          x3.s = NaN;
        x3.e = NaN;
        x3.d = null;
        return;
      }
      return parseDecimal(x3, v2.toString());
    } else if (t3 !== "string") {
      throw Error(invalidArgument + v2);
    }
    if ((i4 = v2.charCodeAt(0)) === 45) {
      v2 = v2.slice(1);
      x3.s = -1;
    } else {
      if (i4 === 43)
        v2 = v2.slice(1);
      x3.s = 1;
    }
    return isDecimal.test(v2) ? parseDecimal(x3, v2) : parseOther(x3, v2);
  }
  Decimal2.prototype = P$1;
  Decimal2.ROUND_UP = 0;
  Decimal2.ROUND_DOWN = 1;
  Decimal2.ROUND_CEIL = 2;
  Decimal2.ROUND_FLOOR = 3;
  Decimal2.ROUND_HALF_UP = 4;
  Decimal2.ROUND_HALF_DOWN = 5;
  Decimal2.ROUND_HALF_EVEN = 6;
  Decimal2.ROUND_HALF_CEIL = 7;
  Decimal2.ROUND_HALF_FLOOR = 8;
  Decimal2.EUCLID = 9;
  Decimal2.config = Decimal2.set = config$1;
  Decimal2.clone = clone$2;
  Decimal2.isDecimal = isDecimalInstance;
  Decimal2.abs = abs;
  Decimal2.acos = acos;
  Decimal2.acosh = acosh;
  Decimal2.add = add;
  Decimal2.asin = asin;
  Decimal2.asinh = asinh;
  Decimal2.atan = atan;
  Decimal2.atanh = atanh;
  Decimal2.atan2 = atan2;
  Decimal2.cbrt = cbrt;
  Decimal2.ceil = ceil;
  Decimal2.clamp = clamp$1;
  Decimal2.cos = cos;
  Decimal2.cosh = cosh;
  Decimal2.div = div;
  Decimal2.exp = exp;
  Decimal2.floor = floor;
  Decimal2.hypot = hypot;
  Decimal2.ln = ln$1;
  Decimal2.log = log;
  Decimal2.log10 = log10;
  Decimal2.log2 = log2;
  Decimal2.max = max;
  Decimal2.min = min;
  Decimal2.mod = mod;
  Decimal2.mul = mul;
  Decimal2.pow = pow;
  Decimal2.random = random;
  Decimal2.round = round$1;
  Decimal2.sign = sign;
  Decimal2.sin = sin;
  Decimal2.sinh = sinh;
  Decimal2.sqrt = sqrt;
  Decimal2.sub = sub;
  Decimal2.sum = sum;
  Decimal2.tan = tan;
  Decimal2.tanh = tanh;
  Decimal2.trunc = trunc;
  if (obj === void 0)
    obj = {};
  if (obj) {
    if (obj.defaults !== true) {
      ps = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"];
      for (i3 = 0; i3 < ps.length; )
        if (!obj.hasOwnProperty(p2 = ps[i3++]))
          obj[p2] = this[p2];
    }
  }
  Decimal2.config(obj);
  return Decimal2;
}
function div(x3, y4) {
  return new this(x3).div(y4);
}
function exp(x3) {
  return new this(x3).exp();
}
function floor(x3) {
  return finalise(x3 = new this(x3), x3.e + 1, 3);
}
function hypot() {
  var i3, n2, t3 = new this(0);
  external = false;
  for (i3 = 0; i3 < arguments.length; ) {
    n2 = new this(arguments[i3++]);
    if (!n2.d) {
      if (n2.s) {
        external = true;
        return new this(1 / 0);
      }
      t3 = n2;
    } else if (t3.d) {
      t3 = t3.plus(n2.times(n2));
    }
  }
  external = true;
  return t3.sqrt();
}
function isDecimalInstance(obj) {
  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
}
function ln$1(x3) {
  return new this(x3).ln();
}
function log(x3, y4) {
  return new this(x3).log(y4);
}
function log2(x3) {
  return new this(x3).log(2);
}
function log10(x3) {
  return new this(x3).log(10);
}
function max() {
  return maxOrMin(this, arguments, "lt");
}
function min() {
  return maxOrMin(this, arguments, "gt");
}
function mod(x3, y4) {
  return new this(x3).mod(y4);
}
function mul(x3, y4) {
  return new this(x3).mul(y4);
}
function pow(x3, y4) {
  return new this(x3).pow(y4);
}
function random(sd2) {
  var d4, e3, k3, n2, i3 = 0, r2 = new this(1), rd2 = [];
  if (sd2 === void 0)
    sd2 = this.precision;
  else
    checkInt32(sd2, 1, MAX_DIGITS);
  k3 = Math.ceil(sd2 / LOG_BASE);
  if (!this.crypto) {
    for (; i3 < k3; )
      rd2[i3++] = Math.random() * 1e7 | 0;
  } else if (crypto.getRandomValues) {
    d4 = crypto.getRandomValues(new Uint32Array(k3));
    for (; i3 < k3; ) {
      n2 = d4[i3];
      if (n2 >= 429e7) {
        d4[i3] = crypto.getRandomValues(new Uint32Array(1))[0];
      } else {
        rd2[i3++] = n2 % 1e7;
      }
    }
  } else if (crypto.randomBytes) {
    d4 = crypto.randomBytes(k3 *= 4);
    for (; i3 < k3; ) {
      n2 = d4[i3] + (d4[i3 + 1] << 8) + (d4[i3 + 2] << 16) + ((d4[i3 + 3] & 127) << 24);
      if (n2 >= 214e7) {
        crypto.randomBytes(4).copy(d4, i3);
      } else {
        rd2.push(n2 % 1e7);
        i3 += 4;
      }
    }
    i3 = k3 / 4;
  } else {
    throw Error(cryptoUnavailable);
  }
  k3 = rd2[--i3];
  sd2 %= LOG_BASE;
  if (k3 && sd2) {
    n2 = mathpow(10, LOG_BASE - sd2);
    rd2[i3] = (k3 / n2 | 0) * n2;
  }
  for (; rd2[i3] === 0; i3--)
    rd2.pop();
  if (i3 < 0) {
    e3 = 0;
    rd2 = [0];
  } else {
    e3 = -1;
    for (; rd2[0] === 0; e3 -= LOG_BASE)
      rd2.shift();
    for (k3 = 1, n2 = rd2[0]; n2 >= 10; n2 /= 10)
      k3++;
    if (k3 < LOG_BASE)
      e3 -= LOG_BASE - k3;
  }
  r2.e = e3;
  r2.d = rd2;
  return r2;
}
function round$1(x3) {
  return finalise(x3 = new this(x3), x3.e + 1, this.rounding);
}
function sign(x3) {
  x3 = new this(x3);
  return x3.d ? x3.d[0] ? x3.s : 0 * x3.s : x3.s || NaN;
}
function sin(x3) {
  return new this(x3).sin();
}
function sinh(x3) {
  return new this(x3).sinh();
}
function sqrt(x3) {
  return new this(x3).sqrt();
}
function sub(x3, y4) {
  return new this(x3).sub(y4);
}
function sum() {
  var i3 = 0, args = arguments, x3 = new this(args[i3]);
  external = false;
  for (; x3.s && ++i3 < args.length; )
    x3 = x3.plus(args[i3]);
  external = true;
  return finalise(x3, this.precision, this.rounding);
}
function tan(x3) {
  return new this(x3).tan();
}
function tanh(x3) {
  return new this(x3).tanh();
}
function trunc(x3) {
  return finalise(x3 = new this(x3), x3.e + 1, 1);
}
P$1[Symbol.for("nodejs.util.inspect.custom")] = P$1.toString;
P$1[Symbol.toStringTag] = "Decimal";
var Decimal = P$1.constructor = clone$2(DEFAULTS);
LN10 = new Decimal(LN10);
PI = new Decimal(PI);
const getCharacterCountAfterChar = (word, char2) => {
  const index2 = word.indexOf(char2);
  if (index2 === -1) {
    return 0;
  }
  const charactersAfter = word.substring(index2 + 1);
  const count = charactersAfter.length;
  return count;
};
var formatNumber$1 = { exports: {} };
formatNumber$1.exports = formatter;
formatNumber$1.exports.default = formatter;
function formatter(options) {
  options = options || {};
  options.negativeType = options.negativeType || (options.negative === "R" ? "right" : "left");
  if (typeof options.negativeLeftSymbol !== "string") {
    switch (options.negativeType) {
      case "left":
        options.negativeLeftSymbol = "-";
        break;
      case "brackets":
        options.negativeLeftSymbol = "(";
        break;
      default:
        options.negativeLeftSymbol = "";
    }
  }
  if (typeof options.negativeRightSymbol !== "string") {
    switch (options.negativeType) {
      case "right":
        options.negativeRightSymbol = "-";
        break;
      case "brackets":
        options.negativeRightSymbol = ")";
        break;
      default:
        options.negativeRightSymbol = "";
    }
  }
  if (typeof options.negativeLeftOut !== "boolean") {
    options.negativeLeftOut = options.negativeOut === false ? false : true;
  }
  if (typeof options.negativeRightOut !== "boolean") {
    options.negativeRightOut = options.negativeOut === false ? false : true;
  }
  options.prefix = options.prefix || "";
  options.suffix = options.suffix || "";
  if (typeof options.integerSeparator !== "string") {
    options.integerSeparator = typeof options.separator === "string" ? options.separator : ",";
  }
  options.decimalsSeparator = typeof options.decimalsSeparator === "string" ? options.decimalsSeparator : "";
  options.decimal = options.decimal || ".";
  options.padLeft = options.padLeft || -1;
  options.padRight = options.padRight || -1;
  function format2(number2, overrideOptions) {
    overrideOptions = overrideOptions || {};
    if (number2 || number2 === 0) {
      number2 = "" + number2;
    } else {
      return "";
    }
    var output = [];
    var negative = number2.charAt(0) === "-";
    number2 = number2.replace(/^\-/g, "");
    if (!options.negativeLeftOut && !overrideOptions.noUnits) {
      output.push(options.prefix);
    }
    if (negative) {
      output.push(options.negativeLeftSymbol);
    }
    if (options.negativeLeftOut && !overrideOptions.noUnits) {
      output.push(options.prefix);
    }
    number2 = number2.split(".");
    if (options.round != null)
      round(number2, options.round);
    if (options.truncate != null)
      number2[1] = truncate(number2[1], options.truncate);
    if (options.padLeft > 0)
      number2[0] = padLeft(number2[0], options.padLeft);
    if (options.padRight > 0)
      number2[1] = padRight(number2[1], options.padRight);
    if (!overrideOptions.noSeparator && number2[1])
      number2[1] = addDecimalSeparators(number2[1], options.decimalsSeparator);
    if (!overrideOptions.noSeparator && number2[0])
      number2[0] = addIntegerSeparators(number2[0], options.integerSeparator);
    output.push(number2[0]);
    if (number2[1]) {
      output.push(options.decimal);
      output.push(number2[1]);
    }
    if (options.negativeRightOut && !overrideOptions.noUnits) {
      output.push(options.suffix);
    }
    if (negative) {
      output.push(options.negativeRightSymbol);
    }
    if (!options.negativeRightOut && !overrideOptions.noUnits) {
      output.push(options.suffix);
    }
    return output.join("");
  }
  format2.negative = options.negative;
  format2.negativeOut = options.negativeOut;
  format2.negativeType = options.negativeType;
  format2.negativeLeftOut = options.negativeLeftOut;
  format2.negativeLeftSymbol = options.negativeLeftSymbol;
  format2.negativeRightOut = options.negativeRightOut;
  format2.negativeRightSymbol = options.negativeRightSymbol;
  format2.prefix = options.prefix;
  format2.suffix = options.suffix;
  format2.separate = options.separate;
  format2.integerSeparator = options.integerSeparator;
  format2.decimalsSeparator = options.decimalsSeparator;
  format2.decimal = options.decimal;
  format2.padLeft = options.padLeft;
  format2.padRight = options.padRight;
  format2.truncate = options.truncate;
  format2.round = options.round;
  function unformat(number2, allowedSeparators) {
    allowedSeparators = allowedSeparators || [];
    if (options.allowedSeparators) {
      options.allowedSeparators.forEach(function(s4) {
        allowedSeparators.push(s4);
      });
    }
    allowedSeparators.push(options.integerSeparator);
    allowedSeparators.push(options.decimalsSeparator);
    number2 = number2.replace(options.prefix, "");
    number2 = number2.replace(options.suffix, "");
    var newNumber = number2;
    do {
      number2 = newNumber;
      for (var i3 = 0; i3 < allowedSeparators.length; i3++) {
        newNumber = newNumber.replace(allowedSeparators[i3], "");
      }
    } while (newNumber != number2);
    return number2;
  }
  format2.unformat = unformat;
  return format2;
}
function addIntegerSeparators(x3, separator) {
  x3 += "";
  if (!separator)
    return x3;
  var rgx = /(\d+)(\d{3})/;
  while (rgx.test(x3)) {
    x3 = x3.replace(rgx, "$1" + separator + "$2");
  }
  return x3;
}
function addDecimalSeparators(x3, separator) {
  x3 += "";
  if (!separator)
    return x3;
  var rgx = /(\d{3})(\d+)/;
  while (rgx.test(x3)) {
    x3 = x3.replace(rgx, "$1" + separator + "$2");
  }
  return x3;
}
function padLeft(x3, padding2) {
  x3 = x3 + "";
  var buf = [];
  while (buf.length + x3.length < padding2) {
    buf.push("0");
  }
  return buf.join("") + x3;
}
function padRight(x3, padding2) {
  if (x3) {
    x3 += "";
  } else {
    x3 = "";
  }
  var buf = [];
  while (buf.length + x3.length < padding2) {
    buf.push("0");
  }
  return x3 + buf.join("");
}
function truncate(x3, length2) {
  if (x3) {
    x3 += "";
  }
  if (x3 && x3.length > length2) {
    return x3.substr(0, length2);
  } else {
    return x3;
  }
}
function round(number2, places) {
  if (number2[1] && places >= 0 && number2[1].length > places) {
    var decim = number2[1].slice(0, places);
    if (+number2[1].substr(places, 1) >= 5) {
      var leadingzeros = "";
      while (decim.charAt(0) === "0") {
        leadingzeros = leadingzeros + "0";
        decim = decim.substr(1);
      }
      decim = +decim + 1 + "";
      decim = leadingzeros + decim;
      if (decim.length > places) {
        number2[0] = +number2[0] + +decim.charAt(0) + "";
        decim = decim.substring(1);
      }
    }
    number2[1] = decim;
  }
  return number2;
}
var formatNumberExports = formatNumber$1.exports;
const formatNumber = /* @__PURE__ */ getDefaultExportFromCjs(formatNumberExports);
const formatNumberPreference = (number2, truncate2, suffix, format2) => {
  return formatNumber({
    truncate: truncate2,
    suffix,
    decimal: format2.decimal,
    integerSeparator: format2.thousands
  })(number2);
};
const decode = (val2) => {
  return decodeURIComponent(val2);
};
const encode = (val2) => {
  return encodeURIComponent(val2);
};
Decimal.set({ precision: 44 });
const useFormatMinimaNumber = () => {
  const { _currencyFormat } = reactExports.useContext(appContext);
  const makeMinimaNumber = (initialValue, decimals) => {
    try {
      if (initialValue.length === 0) {
        throw new Error("No value passed for formatter.");
      }
      return formatNumberPreference(
        new Decimal(initialValue).toString(),
        decimals,
        getCharacterCountAfterChar(initialValue, ".") > decimals ? "..." : "",
        _currencyFormat
      );
    } catch (error) {
      console.error(error);
      return 0;
    }
  };
  return { makeMinimaNumber };
};
const Wallet = () => {
  const navigate = useNavigate();
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const { balance } = reactExports.useContext(appContext);
  const [filterText, setFilterText] = React.useState("");
  const [tokenInformation, setTokenInformation] = React.useState(false);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    balance.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "svg",
      {
        className: "animate-spin ",
        xmlns: "http://www.w3.org/2000/svg",
        height: "24",
        viewBox: "0 -960 960 960",
        width: "24",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M480-80q-82 0-155-31.5t-127.5-86Q143-252 111.5-325T80-480q0-83 31.5-155.5t86-127Q252-817 325-848.5T480-880q17 0 28.5 11.5T520-840q0 17-11.5 28.5T480-800q-133 0-226.5 93.5T160-480q0 133 93.5 226.5T480-160q133 0 226.5-93.5T800-480q0-17 11.5-28.5T840-520q17 0 28.5 11.5T880-480q0 82-31.5 155t-86 127.5q-54.5 54.5-127 86T480-80Z" })
      }
    ) }),
    balance.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
      CardContent,
      {
        header: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            value: filterText,
            onChange: (e3) => setFilterText(e3.target.value),
            type: "search",
            className: "appearance-none border-none w-full bg-violet-500 bg-opacity-10 py-3 rounded text-sm placeholder:text-black placeholder:text-opacity-30",
            placeholder: "Search by token name or id"
          }
        ),
        content: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          tokenInformation && reactDomExports.createPortal(
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                onClick: () => setTokenInformation(false),
                className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Grid,
                  {
                    variant: "lg",
                    title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "svg",
                        {
                          onClick: () => setTokenInformation(false),
                          className: "fill-white hover:cursor-pointer",
                          xmlns: "http://www.w3.org/2000/svg",
                          height: "24",
                          viewBox: "0 -960 960 960",
                          width: "24",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
                        }
                      ),
                      "Token Info"
                    ] }),
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "div",
                      {
                        onClick: (e3) => e3.stopPropagation(),
                        className: "flex flex-col gap-4 mx-4 rounded bg-white bg-opacity-90 p-4 mb-4 shadow-sm h-max",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "my-2 mb-4", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-semibold mb-6", children: "There are three possible states for a token:" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-y-2.5", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white rounded-lg px-4 py-2 flex-col", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 justify-center", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                  "svg",
                                  {
                                    xmlns: "http://www.w3.org/2000/svg",
                                    width: "24",
                                    height: "24",
                                    className: "min-h-[24px] min-w-[24px]",
                                    viewBox: "0 0 24 24",
                                    strokeWidth: "2",
                                    stroke: "#22c55e",
                                    fill: "none",
                                    strokeLinecap: "round",
                                    strokeLinejoin: "round",
                                    children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M7 9m0 2a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v6a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2z" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M14 14m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17 9v-2a2 2 0 0 0 -2 -2h-10a2 2 0 0 0 -2 2v6a2 2 0 0 0 2 2h2" })
                                    ]
                                  }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-semibold", children: "Sendable" })
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t m-2" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center font-mono text-slate-500 bg-white truncate rounded-lg p-2", children: makeMinimaNumber(tokenInformation.sendable, 2e3) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-center mt-8", children: "Funds are available to be spent immediately." })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white rounded-lg px-4 py-2 flex-col", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 justify-center", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                  "svg",
                                  {
                                    xmlns: "http://www.w3.org/2000/svg",
                                    width: "24",
                                    height: "24",
                                    className: "min-h-[24px] min-w-[24px]",
                                    viewBox: "0 0 24 24",
                                    strokeWidth: "2",
                                    stroke: "currentColor",
                                    fill: "none",
                                    strokeLinecap: "round",
                                    strokeLinejoin: "round",
                                    children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "path",
                                        {
                                          d: "M12 2c-.218 0 -.432 .002 -.642 .005l-.616 .017l-.299 .013l-.579 .034l-.553 .046c-4.785 .464 -6.732 2.411 -7.196 7.196l-.046 .553l-.034 .579c-.005 .098 -.01 .198 -.013 .299l-.017 .616l-.004 .318l-.001 .324c0 .218 .002 .432 .005 .642l.017 .616l.013 .299l.034 .579l.046 .553c.464 4.785 2.411 6.732 7.196 7.196l.553 .046l.579 .034c.098 .005 .198 .01 .299 .013l.616 .017l.642 .005l.642 -.005l.616 -.017l.299 -.013l.579 -.034l.553 -.046c4.785 -.464 6.732 -2.411 7.196 -7.196l.046 -.553l.034 -.579c.005 -.098 .01 -.198 .013 -.299l.017 -.616l.005 -.642l-.005 -.642l-.017 -.616l-.013 -.299l-.034 -.579l-.046 -.553c-.464 -4.785 -2.411 -6.732 -7.196 -7.196l-.553 -.046l-.579 -.034a28.058 28.058 0 0 0 -.299 -.013l-.616 -.017l-.318 -.004l-.324 -.001zm0 4a3 3 0 0 1 2.995 2.824l.005 .176v1a2 2 0 0 1 1.995 1.85l.005 .15v3a2 2 0 0 1 -1.85 1.995l-.15 .005h-6a2 2 0 0 1 -1.995 -1.85l-.005 -.15v-3a2 2 0 0 1 1.85 -1.995l.15 -.005v-1a3 3 0 0 1 3 -3zm3 6h-6v3h6v-3zm-3 -4a1 1 0 0 0 -.993 .883l-.007 .117v1h2v-1a1 1 0 0 0 -1 -1z",
                                          fill: "currentColor",
                                          strokeWidth: "0"
                                        }
                                      )
                                    ]
                                  }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-semibold", children: "Locked" })
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t m-2" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center font-mono text-slate-500 bg-white rounded-lg p-2 whitespace-normal overflow-x-auto", children: [
                                "The difference of Confirmed(",
                                makeMinimaNumber(tokenInformation.confirmed, 3),
                                ") & Sendable(",
                                makeMinimaNumber(tokenInformation.sendable, 3),
                                ") returns TotalLockedCoins(",
                                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-bold", children: makeMinimaNumber(
                                  new Decimal(tokenInformation.sendable).minus(tokenInformation.confirmed).abs().toString(),
                                  3
                                ) }),
                                ")"
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-center mt-8", children: "Locked will show coins that were locked in a smart contract." })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white rounded-lg px-4 py-2 flex-col", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 justify-center", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                  "svg",
                                  {
                                    xmlns: "http://www.w3.org/2000/svg",
                                    className: "min-h-[24px] min-w-[24px] animate-pulse",
                                    width: "24",
                                    height: "24",
                                    viewBox: "0 0 24 24",
                                    strokeWidth: "2",
                                    stroke: "#eab308",
                                    fill: "none",
                                    strokeLinecap: "round",
                                    strokeLinejoin: "round",
                                    children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6.5 7h11" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 20v-2a6 6 0 1 1 12 0v2a1 1 0 0 1 -1 1h-10a1 1 0 0 1 -1 -1z" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 4v2a6 6 0 1 0 12 0v-2a1 1 0 0 0 -1 -1h-10a1 1 0 0 0 -1 1z" })
                                    ]
                                  }
                                ),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-semibold", children: "Unconfirmed" })
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t m-2" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center font-mono text-slate-500 bg-white rounded-lg p-2", children: makeMinimaNumber(tokenInformation.unconfirmed, 3) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-center mt-8", children: "Unconfirmed are funds awaiting minimum block time confirmation in the mempool." })
                            ] })
                          ] })
                        ] })
                      }
                    )
                  }
                )
              }
            ),
            document.body
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { children: balance.filter(
            (t3) => containsText(
              t3.tokenid === "0x00" ? t3.token : "name" in t3.token ? t3.token.name : "",
              filterText
            ) || containsText(t3.tokenid, filterText)
          ).map((t3) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "li",
            {
              onClick: () => navigate(t3.tokenid),
              className: "hover:bg-slate-200 hover:cursor-pointer bg-white rounded-lg mb-4 whitespace-nowrap grid grid-cols-[auto_1fr] items-center",
              children: [
                t3.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-max inline-block mr-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "svg",
                    {
                      className: "absolute right-1 bottom-2",
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "16",
                      viewBox: "0 -960 960 960",
                      width: "16",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "path",
                        {
                          fill: "#3DA2FF",
                          d: "m344-60-76-128-144-32 14-148-98-112 98-112-14-148 144-32 76-128 136 58 136-58 76 128 144 32-14 148 98 112-98 112 14 148-144 32-76 128-136-58-136 58Zm94-278 226-226-56-58-170 170-86-84-56 56 142 142Z"
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "svg",
                    {
                      className: "rounded-l-lg min-h-[80px] min-w-[80px]",
                      width: "80",
                      height: "80",
                      viewBox: "0 0 80 81",
                      fill: "none",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "rect",
                          {
                            width: "80",
                            height: "80",
                            transform: "translate(0 0.550781)",
                            fill: "#08090B"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "path",
                          {
                            d: "M52.3627 30.187L50.5506 37.9909L48.2331 28.5753L40.1133 25.3689L37.9178 34.8015L35.9836 23.7402L27.8638 20.5508L19.5 56.5508H28.3691L30.9305 45.4895L32.8646 56.5508H41.7512L43.9292 47.1182L46.2467 56.5508H55.1158L60.5 33.3764L52.3627 30.187Z",
                            fill: "white"
                          }
                        )
                      ]
                    }
                  )
                ] }),
                t3.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-max inline-block mr-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "img",
                    {
                      className: "rounded-l-lg w-[80px] h-[80px]",
                      alt: "token-icon",
                      src: "url" in t3.token && t3.token.url.length ? t3.token.url : "https://robohash.org/".concat(t3.tokenid)
                    }
                  ),
                  t3.tokenid !== "0x00" && t3.token.webvalidate && !!t3.token.webvalidate.length && /* @__PURE__ */ jsxRuntimeExports.jsx(NFTAuthenticity, { tokenid: t3.tokenid })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[auto_1fr] gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "overflow-hidden", children: [
                    t3.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold truncate text-black", children: "Minima" }),
                    t3.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold text-black truncate", children: t3.token && "name" in (t3 == null ? void 0 : t3.token) ? t3 == null ? void 0 : t3.token.name : "Name not available" }),
                    t3.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-bold truncate text-black text-opacity-50", children: "MINIMA" }),
                    t3.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-bold text-black text-opacity-50", children: t3.token && "ticker" in (t3 == null ? void 0 : t3.token) ? t3 == null ? void 0 : t3.token.ticker : "" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-end w-full justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        onClick: (e3) => {
                          e3.stopPropagation();
                          setTokenInformation({
                            confirmed: t3.confirmed,
                            sendable: t3.sendable,
                            unconfirmed: t3.unconfirmed
                          });
                        },
                        className: "grid grid-cols-[1fr_auto] items-center mr-4",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "p",
                            {
                              className: "".concat(t3.unconfirmed !== "0" ? "bg-yellow-500 text-yellow-200 animate-pulse" : "bg-green-200 text-green-600", " w-max justify-self-end text-green-600 text-[12px] rounded-full px-2 max-w-max  font-bold"),
                              children: makeMinimaNumber(t3.sendable, 3)
                            }
                          ),
                          t3.unconfirmed === "0" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "svg",
                            {
                              xmlns: "http://www.w3.org/2000/svg",
                              width: "24",
                              height: "24",
                              className: "min-h-[24px] min-w-[24px]",
                              viewBox: "0 0 24 24",
                              strokeWidth: "2",
                              stroke: "#22c55e",
                              fill: "none",
                              strokeLinecap: "round",
                              strokeLinejoin: "round",
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M7 9m0 2a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v6a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2z" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M14 14m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17 9v-2a2 2 0 0 0 -2 -2h-10a2 2 0 0 0 -2 2v6a2 2 0 0 0 2 2h2" })
                              ]
                            }
                          ),
                          t3.unconfirmed !== "0" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "svg",
                            {
                              xmlns: "http://www.w3.org/2000/svg",
                              className: "min-h-[24px] min-w-[24px] animate-pulse",
                              width: "24",
                              height: "24",
                              viewBox: "0 0 24 24",
                              strokeWidth: "2",
                              stroke: "#eab308",
                              fill: "none",
                              strokeLinecap: "round",
                              strokeLinejoin: "round",
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6.5 7h11" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 20v-2a6 6 0 1 1 12 0v2a1 1 0 0 1 -1 1h-10a1 1 0 0 1 -1 -1z" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 4v2a6 6 0 1 0 12 0v-2a1 1 0 0 0 -1 -1h-10a1 1 0 0 0 -1 1z" })
                              ]
                            }
                          )
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        onClick: (e3) => {
                          e3.stopPropagation();
                          setTokenInformation({
                            confirmed: t3.confirmed,
                            sendable: t3.sendable,
                            unconfirmed: t3.unconfirmed
                          });
                        },
                        className: "grid grid-cols-[1fr_auto] items-center mr-4",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "w-max justify-self-end text-white text-[12px] rounded-full px-2 max-w-max bg-black", children: makeMinimaNumber(
                            new Decimal(t3.confirmed).minus(t3.sendable).toString(),
                            3
                          ) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "svg",
                            {
                              xmlns: "http://www.w3.org/2000/svg",
                              width: "24",
                              height: "24",
                              className: "min-h-[24px] min-w-[24px]",
                              viewBox: "0 0 24 24",
                              strokeWidth: "2",
                              stroke: "currentColor",
                              fill: "none",
                              strokeLinecap: "round",
                              strokeLinejoin: "round",
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "path",
                                  {
                                    d: "M12 2c-.218 0 -.432 .002 -.642 .005l-.616 .017l-.299 .013l-.579 .034l-.553 .046c-4.785 .464 -6.732 2.411 -7.196 7.196l-.046 .553l-.034 .579c-.005 .098 -.01 .198 -.013 .299l-.017 .616l-.004 .318l-.001 .324c0 .218 .002 .432 .005 .642l.017 .616l.013 .299l.034 .579l.046 .553c.464 4.785 2.411 6.732 7.196 7.196l.553 .046l.579 .034c.098 .005 .198 .01 .299 .013l.616 .017l.642 .005l.642 -.005l.616 -.017l.299 -.013l.579 -.034l.553 -.046c4.785 -.464 6.732 -2.411 7.196 -7.196l.046 -.553l.034 -.579c.005 -.098 .01 -.198 .013 -.299l.017 -.616l.005 -.642l-.005 -.642l-.017 -.616l-.013 -.299l-.034 -.579l-.046 -.553c-.464 -4.785 -2.411 -6.732 -7.196 -7.196l-.553 -.046l-.579 -.034a28.058 28.058 0 0 0 -.299 -.013l-.616 -.017l-.318 -.004l-.324 -.001zm0 4a3 3 0 0 1 2.995 2.824l.005 .176v1a2 2 0 0 1 1.995 1.85l.005 .15v3a2 2 0 0 1 -1.85 1.995l-.15 .005h-6a2 2 0 0 1 -1.995 -1.85l-.005 -.15v-3a2 2 0 0 1 1.85 -1.995l.15 -.005v-1a3 3 0 0 1 3 -3zm3 6h-6v3h6v-3zm-3 -4a1 1 0 0 0 -.993 .883l-.007 .117v1h2v-1a1 1 0 0 0 -1 -1z",
                                    fill: "currentColor",
                                    strokeWidth: "0"
                                  }
                                )
                              ]
                            }
                          )
                        ]
                      }
                    )
                  ] }) })
                ] })
              ]
            },
            t3.tokenid
          )) }),
          !!balance.length && !balance.filter(
            (t3) => containsText(
              t3.tokenid === "0x00" ? t3.token : "name" in t3.token ? t3.token.name : "",
              filterText
            ) || containsText(t3.tokenid, filterText)
          ).length && /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-center text-black", children: "No results found" })
        ] })
      }
    )
  ] });
};
const Balance = () => {
  const { setOpenDrawer } = reactExports.useContext(appContext);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Grid,
    {
      variant: "lg",
      title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            onClick: (e3) => {
              e3.stopPropagation();
              setOpenDrawer(true);
            },
            className: "block md:hidden fill-white",
            xmlns: "http://www.w3.org/2000/svg",
            height: "24",
            viewBox: "0 -960 960 960",
            width: "24",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" })
          }
        ),
        "Balance"
      ] }),
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Wallet, {}) })
    }
  );
};
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var globals_exports = {};
__export(globals_exports, {
  assign: () => assign,
  colors: () => colors,
  createStringInterpolator: () => createStringInterpolator,
  skipAnimation: () => skipAnimation,
  to: () => to$1,
  willAdvance: () => willAdvance
});
var updateQueue = makeQueue();
var raf = (fn2) => schedule(fn2, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn2) => schedule(fn2, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn2) => schedule(fn2, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn2) => schedule(fn2, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn2) => schedule(fn2, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  const time2 = raf.now() + ms;
  const cancel = () => {
    const i3 = timeouts.findIndex((t3) => t3.cancel == cancel);
    if (~i3)
      timeouts.splice(i3, 1);
    pendingCount -= ~i3 ? 1 : 0;
  };
  const timeout = { time: time2, handler, cancel };
  timeouts.splice(findTimeout(time2), 0, timeout);
  pendingCount += 1;
  start();
  return timeout;
};
var findTimeout = (time2) => ~(~timeouts.findIndex((t3) => t3.time > time2) || ~timeouts.length);
raf.cancel = (fn2) => {
  onStartQueue.delete(fn2);
  onFrameQueue.delete(fn2);
  onFinishQueue.delete(fn2);
  updateQueue.delete(fn2);
  writeQueue.delete(fn2);
};
raf.sync = (fn2) => {
  sync = true;
  raf.batchedUpdates(fn2);
  sync = false;
};
raf.throttle = (fn2) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn2(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn2;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : (
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  () => {
  }
);
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn2) => fn2();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn(
      "Cannot call the manual advancement of rafz whilst frameLoop is not set as demand"
    );
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn2, queue) {
  if (sync) {
    queue.delete(fn2);
    fn2(0);
  } else {
    queue.add(fn2);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  const prevTs = ts;
  ts = raf.now();
  const count = findTimeout(ts);
  if (count) {
    eachSafely(timeouts.splice(0, count), (t3) => t3.handler());
    pendingCount -= count;
  }
  if (!pendingCount) {
    stop();
    return;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next2 = /* @__PURE__ */ new Set();
  let current = next2;
  return {
    add(fn2) {
      pendingCount += current == next2 && !next2.has(fn2) ? 1 : 0;
      next2.add(fn2);
    },
    delete(fn2) {
      pendingCount -= current == next2 && next2.has(fn2) ? 1 : 0;
      return next2.delete(fn2);
    },
    flush(arg) {
      if (current.size) {
        next2 = /* @__PURE__ */ new Set();
        pendingCount -= current.size;
        eachSafely(current, (fn2) => fn2(arg) && next2.add(fn2));
        pendingCount += next2.size;
        current = next2;
      }
    }
  };
}
function eachSafely(values2, each2) {
  values2.forEach((value2) => {
    try {
      each2(value2);
    } catch (e3) {
      raf.catch(e3);
    }
  });
}
function noop() {
}
var defineHidden = (obj, key2, value2) => Object.defineProperty(obj, key2, { value: value2, writable: true, configurable: true });
var is = {
  arr: Array.isArray,
  obj: (a4) => !!a4 && a4.constructor.name === "Object",
  fun: (a4) => typeof a4 === "function",
  str: (a4) => typeof a4 === "string",
  num: (a4) => typeof a4 === "number",
  und: (a4) => a4 === void 0
};
function isEqual$1(a4, b3) {
  if (is.arr(a4)) {
    if (!is.arr(b3) || a4.length !== b3.length)
      return false;
    for (let i3 = 0; i3 < a4.length; i3++) {
      if (a4[i3] !== b3[i3])
        return false;
    }
    return true;
  }
  return a4 === b3;
}
var each = (obj, fn2) => obj.forEach(fn2);
function eachProp(obj, fn2, ctx2) {
  if (is.arr(obj)) {
    for (let i3 = 0; i3 < obj.length; i3++) {
      fn2.call(ctx2, obj[i3], "".concat(i3));
    }
    return;
  }
  for (const key2 in obj) {
    if (obj.hasOwnProperty(key2)) {
      fn2.call(ctx2, obj[key2], key2);
    }
  }
}
var toArray$1 = (a4) => is.und(a4) ? [] : is.arr(a4) ? a4 : [a4];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn2) => fn2(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator;
var to$1;
var colors = null;
var skipAnimation = false;
var willAdvance = noop;
var assign = (globals) => {
  if (globals.to)
    to$1 = globals.to;
  if (globals.now)
    raf.now = globals.now;
  if (globals.colors !== void 0)
    colors = globals.colors;
  if (globals.skipAnimation != null)
    skipAnimation = globals.skipAnimation;
  if (globals.createStringInterpolator)
    createStringInterpolator = globals.createStringInterpolator;
  if (globals.requestAnimationFrame)
    raf.use(globals.requestAnimationFrame);
  if (globals.batchedUpdates)
    raf.batchedUpdates = globals.batchedUpdates;
  if (globals.willAdvance)
    willAdvance = globals.willAdvance;
  if (globals.frameLoop)
    raf.frameLoop = globals.frameLoop;
};
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  /** Advance the given animation on every frame until idle. */
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  /** Advance all animations by the given time. */
  advance,
  /** Call this when an animation's priority changes. */
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  /**
   * Clear all animations. For testing purposes.
   *
   * ☠️ Never call this from within the frameloop.
   */
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(
    findIndex$2(currentFrame, (other) => other.priority > animation.priority),
    0,
    animation
  );
}
function advance(dt2) {
  const nextFrame = prevFrame;
  for (let i3 = 0; i3 < currentFrame.length; i3++) {
    const animation = currentFrame[i3];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt2);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex$2(arr, test) {
  const index2 = arr.findIndex(test);
  return index2 < 0 ? arr.length : index2;
}
var clamp = (min2, max2, v2) => Math.min(Math.max(v2, min2), max2);
var colors2 = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp(
  "hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)
);
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color2) {
  let match2;
  if (typeof color2 === "number") {
    return color2 >>> 0 === color2 && color2 >= 0 && color2 <= 4294967295 ? color2 : null;
  }
  if (match2 = hex6.exec(color2))
    return parseInt(match2[1] + "ff", 16) >>> 0;
  if (colors && colors[color2] !== void 0) {
    return colors[color2];
  }
  if (match2 = rgb.exec(color2)) {
    return (parse255(match2[1]) << 24 | // r
    parse255(match2[2]) << 16 | // g
    parse255(match2[3]) << 8 | // b
    255) >>> // a
    0;
  }
  if (match2 = rgba.exec(color2)) {
    return (parse255(match2[1]) << 24 | // r
    parse255(match2[2]) << 16 | // g
    parse255(match2[3]) << 8 | // b
    parse1(match2[4])) >>> // a
    0;
  }
  if (match2 = hex3.exec(color2)) {
    return parseInt(
      match2[1] + match2[1] + // r
      match2[2] + match2[2] + // g
      match2[3] + match2[3] + // b
      "ff",
      // a
      16
    ) >>> 0;
  }
  if (match2 = hex8.exec(color2))
    return parseInt(match2[1], 16) >>> 0;
  if (match2 = hex4.exec(color2)) {
    return parseInt(
      match2[1] + match2[1] + // r
      match2[2] + match2[2] + // g
      match2[3] + match2[3] + // b
      match2[4] + match2[4],
      // a
      16
    ) >>> 0;
  }
  if (match2 = hsl.exec(color2)) {
    return (hslToRgb(
      parse360(match2[1]),
      // h
      parsePercentage(match2[2]),
      // s
      parsePercentage(match2[3])
      // l
    ) | 255) >>> // a
    0;
  }
  if (match2 = hsla.exec(color2)) {
    return (hslToRgb(
      parse360(match2[1]),
      // h
      parsePercentage(match2[2]),
      // s
      parsePercentage(match2[3])
      // l
    ) | parse1(match2[4])) >>> // a
    0;
  }
  return null;
}
function hue2rgb(p2, q3, t3) {
  if (t3 < 0)
    t3 += 1;
  if (t3 > 1)
    t3 -= 1;
  if (t3 < 1 / 6)
    return p2 + (q3 - p2) * 6 * t3;
  if (t3 < 1 / 2)
    return q3;
  if (t3 < 2 / 3)
    return p2 + (q3 - p2) * (2 / 3 - t3) * 6;
  return p2;
}
function hslToRgb(h4, s4, l2) {
  const q3 = l2 < 0.5 ? l2 * (1 + s4) : l2 + s4 - l2 * s4;
  const p2 = 2 * l2 - q3;
  const r2 = hue2rgb(p2, q3, h4 + 1 / 3);
  const g2 = hue2rgb(p2, q3, h4);
  const b3 = hue2rgb(p2, q3, h4 - 1 / 3);
  return Math.round(r2 * 255) << 24 | Math.round(g2 * 255) << 16 | Math.round(b3 * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input2) {
  let int32Color = normalizeColor(input2);
  if (int32Color === null)
    return input2;
  int32Color = int32Color || 0;
  const r2 = (int32Color & 4278190080) >>> 24;
  const g2 = (int32Color & 16711680) >>> 16;
  const b3 = (int32Color & 65280) >>> 8;
  const a4 = (int32Color & 255) / 255;
  return "rgba(".concat(r2, ", ").concat(g2, ", ").concat(b3, ", ").concat(a4, ")");
}
var createInterpolator = (range, output, extrapolate) => {
  if (is.fun(range)) {
    return range;
  }
  if (is.arr(range)) {
    return createInterpolator({
      range,
      output,
      extrapolate
    });
  }
  if (is.str(range.output[0])) {
    return createStringInterpolator(range);
  }
  const config2 = range;
  const outputRange = config2.output;
  const inputRange = config2.range || [0, 1];
  const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
  const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
  const easing2 = config2.easing || ((t3) => t3);
  return (input2) => {
    const range2 = findRange(input2, inputRange);
    return interpolate(
      input2,
      inputRange[range2],
      inputRange[range2 + 1],
      outputRange[range2],
      outputRange[range2 + 1],
      easing2,
      extrapolateLeft,
      extrapolateRight,
      config2.map
    );
  };
};
function interpolate(input2, inputMin, inputMax, outputMin, outputMax, easing2, extrapolateLeft, extrapolateRight, map2) {
  let result2 = map2 ? map2(input2) : input2;
  if (result2 < inputMin) {
    if (extrapolateLeft === "identity")
      return result2;
    else if (extrapolateLeft === "clamp")
      result2 = inputMin;
  }
  if (result2 > inputMax) {
    if (extrapolateRight === "identity")
      return result2;
    else if (extrapolateRight === "clamp")
      result2 = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input2 <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result2 = -result2;
  else if (inputMax === Infinity)
    result2 = result2 - inputMin;
  else
    result2 = (result2 - inputMin) / (inputMax - inputMin);
  result2 = easing2(result2);
  if (outputMin === -Infinity)
    result2 = -result2;
  else if (outputMax === Infinity)
    result2 = result2 + outputMin;
  else
    result2 = result2 * (outputMax - outputMin) + outputMin;
  return result2;
}
function findRange(input2, inputRange) {
  for (var i3 = 1; i3 < inputRange.length - 1; ++i3)
    if (inputRange[i3] >= input2)
      break;
  return i3 - 1;
}
var steps = (steps2, direction = "end") => (progress2) => {
  progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);
  const expanded = progress2 * steps2;
  const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
  return clamp(0, 1, rounded / steps2);
};
var c1 = 1.70158;
var c2 = c1 * 1.525;
var c3 = c1 + 1;
var c4 = 2 * Math.PI / 3;
var c5 = 2 * Math.PI / 4.5;
var bounceOut = (x3) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x3 < 1 / d1) {
    return n1 * x3 * x3;
  } else if (x3 < 2 / d1) {
    return n1 * (x3 -= 1.5 / d1) * x3 + 0.75;
  } else if (x3 < 2.5 / d1) {
    return n1 * (x3 -= 2.25 / d1) * x3 + 0.9375;
  } else {
    return n1 * (x3 -= 2.625 / d1) * x3 + 0.984375;
  }
};
var easings = {
  linear: (x3) => x3,
  easeInQuad: (x3) => x3 * x3,
  easeOutQuad: (x3) => 1 - (1 - x3) * (1 - x3),
  easeInOutQuad: (x3) => x3 < 0.5 ? 2 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 2) / 2,
  easeInCubic: (x3) => x3 * x3 * x3,
  easeOutCubic: (x3) => 1 - Math.pow(1 - x3, 3),
  easeInOutCubic: (x3) => x3 < 0.5 ? 4 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 3) / 2,
  easeInQuart: (x3) => x3 * x3 * x3 * x3,
  easeOutQuart: (x3) => 1 - Math.pow(1 - x3, 4),
  easeInOutQuart: (x3) => x3 < 0.5 ? 8 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 4) / 2,
  easeInQuint: (x3) => x3 * x3 * x3 * x3 * x3,
  easeOutQuint: (x3) => 1 - Math.pow(1 - x3, 5),
  easeInOutQuint: (x3) => x3 < 0.5 ? 16 * x3 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 5) / 2,
  easeInSine: (x3) => 1 - Math.cos(x3 * Math.PI / 2),
  easeOutSine: (x3) => Math.sin(x3 * Math.PI / 2),
  easeInOutSine: (x3) => -(Math.cos(Math.PI * x3) - 1) / 2,
  easeInExpo: (x3) => x3 === 0 ? 0 : Math.pow(2, 10 * x3 - 10),
  easeOutExpo: (x3) => x3 === 1 ? 1 : 1 - Math.pow(2, -10 * x3),
  easeInOutExpo: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? Math.pow(2, 20 * x3 - 10) / 2 : (2 - Math.pow(2, -20 * x3 + 10)) / 2,
  easeInCirc: (x3) => 1 - Math.sqrt(1 - Math.pow(x3, 2)),
  easeOutCirc: (x3) => Math.sqrt(1 - Math.pow(x3 - 1, 2)),
  easeInOutCirc: (x3) => x3 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x3, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x3 + 2, 2)) + 1) / 2,
  easeInBack: (x3) => c3 * x3 * x3 * x3 - c1 * x3 * x3,
  easeOutBack: (x3) => 1 + c3 * Math.pow(x3 - 1, 3) + c1 * Math.pow(x3 - 1, 2),
  easeInOutBack: (x3) => x3 < 0.5 ? Math.pow(2 * x3, 2) * ((c2 + 1) * 2 * x3 - c2) / 2 : (Math.pow(2 * x3 - 2, 2) * ((c2 + 1) * (x3 * 2 - 2) + c2) + 2) / 2,
  easeInElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : -Math.pow(2, 10 * x3 - 10) * Math.sin((x3 * 10 - 10.75) * c4),
  easeOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : Math.pow(2, -10 * x3) * Math.sin((x3 * 10 - 0.75) * c4) + 1,
  easeInOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? -(Math.pow(2, 20 * x3 - 10) * Math.sin((20 * x3 - 11.125) * c5)) / 2 : Math.pow(2, -20 * x3 + 10) * Math.sin((20 * x3 - 11.125) * c5) / 2 + 1,
  easeInBounce: (x3) => 1 - bounceOut(1 - x3),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x3) => x3 < 0.5 ? (1 - bounceOut(1 - 2 * x3)) / 2 : (1 + bounceOut(2 * x3 - 1)) / 2,
  steps
};
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer2, event) {
  if (observer2.eventObserved) {
    observer2.eventObserved(event);
  } else {
    observer2(event);
  }
}
function callFluidObservers(target, event) {
  const observers = target[$observers];
  if (observers) {
    observers.forEach((observer2) => {
      callFluidObserver(observer2, event);
    });
  }
}
var FluidValue = class {
  constructor(get2) {
    if (!get2 && !(get2 = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get2);
  }
};
var setFluidGetter = (target, get2) => setHidden(target, $get, get2);
function addFluidObserver(target, observer2) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer2)) {
      observers.add(observer2);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer2);
      }
    }
  }
  return observer2;
}
function removeFluidObserver(target, observer2) {
  const observers = target[$observers];
  if (observers && observers.has(observer2)) {
    const count = observers.size - 1;
    if (count) {
      observers.delete(observer2);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count, observer2);
    }
  }
}
var setHidden = (target, key2, value2) => Object.defineProperty(target, key2, {
  value: value2,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp("(".concat(numberRegex.source, ")(%|[a-z]+)"), "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input2) => {
  const [token2, fallback] = parseCSSVariable(input2);
  if (!token2 || isSSR()) {
    return input2;
  }
  const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(token2);
  if (value2) {
    return value2.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const value22 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (value22) {
      return value22;
    } else {
      return input2;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input2;
};
var parseCSSVariable = (current) => {
  const match2 = cssVariableRegex.exec(current);
  if (!match2)
    return [,];
  const [, token2, fallback] = match2;
  return [token2, fallback];
};
var namedColorRegex;
var rgbaRound = (_2, p1, p2, p3, p4) => "rgba(".concat(Math.round(p1), ", ").concat(Math.round(p2), ", ").concat(Math.round(p3), ", ").concat(p4, ")");
var createStringInterpolator2 = (config2) => {
  if (!namedColorRegex)
    namedColorRegex = colors ? (
      // match color names, ignore partial matches
      new RegExp("(".concat(Object.keys(colors).join("|"), ")(?!\\w)"), "g")
    ) : (
      // never match
      /^\b$/
    );
  const output = config2.output.map((value2) => {
    return getFluidValue(value2).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes3 = output.map((value2) => value2.match(numberRegex).map(Number));
  const outputRanges = keyframes3[0].map(
    (_2, i3) => keyframes3.map((values2) => {
      if (!(i3 in values2)) {
        throw Error('The arity of each "output" value must be equal');
      }
      return values2[i3];
    })
  );
  const interpolators = outputRanges.map(
    (output2) => createInterpolator({ ...config2, output: output2 })
  );
  return (input2) => {
    var _a2;
    const missingUnit = !unitRegex.test(output[0]) && ((_a2 = output.find((value2) => unitRegex.test(value2))) == null ? void 0 : _a2.replace(numberRegex, ""));
    let i3 = 0;
    return output[0].replace(
      numberRegex,
      () => "".concat(interpolators[i3++](input2)).concat(missingUnit || "")
    ).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once$1 = (fn2) => {
  const func = fn2;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError("".concat(prefix, "once requires a function parameter"));
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once$1(console.warn);
function deprecateInterpolate() {
  warnInterpolate(
    "".concat(prefix, 'The "interpolate" function is deprecated in v9 (use "to" instead)')
  );
}
var warnDirectCall = once$1(console.warn);
function deprecateDirectCall() {
  warnDirectCall(
    "".concat(prefix, 'Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions')
  );
}
function isAnimatedString(value2) {
  return is.str(value2) && (value2[0] == "#" || /\d/.test(value2) || // Do not identify a CSS variable as an AnimatedString if its SSR
  !isSSR() && cssVariableRegex.test(value2) || value2 in (colors || {}));
}
var useIsomorphicLayoutEffect$1 = isSSR() ? reactExports.useEffect : reactExports.useLayoutEffect;
var useIsMounted = () => {
  const isMounted = reactExports.useRef(false);
  useIsomorphicLayoutEffect$1(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update2 = reactExports.useState()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update2(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = reactExports.useState(
    () => ({
      inputs,
      result: getResult()
    })
  );
  const committed = reactExports.useRef();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(
      inputs && cache.inputs && areInputsEqual(inputs, cache.inputs)
    );
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  reactExports.useEffect(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next2, prev2) {
  if (next2.length !== prev2.length) {
    return false;
  }
  for (let i3 = 0; i3 < next2.length; i3++) {
    if (next2[i3] !== prev2[i3]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect2) => reactExports.useEffect(effect2, emptyDeps);
var emptyDeps = [];
function usePrev(value2) {
  const prevRef = reactExports.useRef();
  reactExports.useEffect(() => {
    prevRef.current = value2;
  });
  return prevRef.current;
}
var $node = Symbol.for("Animated:node");
var isAnimated = (value2) => !!value2 && value2[$node] === value2;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node2) => defineHidden(owner, $node, node2);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    setAnimated(this, this);
  }
  /** Get every `AnimatedValue` used by this node. */
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class extends Animated {
  constructor(_value) {
    super();
    this._value = _value;
    this.done = true;
    this.durationProgress = 0;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  /** @internal */
  static create(value2) {
    return new AnimatedValue(value2);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value2, step) {
    if (is.num(value2)) {
      this.lastPosition = value2;
      if (step) {
        value2 = Math.round(value2 / step) * step;
        if (this.done) {
          this.lastPosition = value2;
        }
      }
    }
    if (this._value === value2) {
      return false;
    }
    this._value = value2;
    return true;
  }
  reset() {
    const { done } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class extends AnimatedValue {
  constructor(value2) {
    super(0);
    this._string = null;
    this._toString = createInterpolator({
      output: [value2, value2]
    });
  }
  /** @internal */
  static create(value2) {
    return new AnimatedString(value2);
  }
  getValue() {
    const value2 = this._string;
    return value2 == null ? this._string = this._toString(this._value) : value2;
  }
  setValue(value2) {
    if (is.str(value2)) {
      if (value2 == this._string) {
        return false;
      }
      this._string = value2;
      this._value = 1;
    } else if (super.setValue(value2)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = { dependencies: null };
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values2 = {};
    eachProp(this.source, (source, key2) => {
      if (isAnimated(source)) {
        values2[key2] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values2[key2] = getFluidValue(source);
      } else if (!animated2) {
        values2[key2] = source;
      }
    });
    return values2;
  }
  /** Replace the raw object data */
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node2) => node2.reset());
    }
  }
  /** Create a payload set. */
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  /** Add to a payload set. */
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node2) => this.add(node2));
    }
  }
};
var AnimatedArray = class extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  /** @internal */
  static create(source) {
    return new AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node2) => node2.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node2, i3) => node2.setValue(source[i3])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value2) {
  const nodeType = isAnimatedString(value2) ? AnimatedString : AnimatedValue;
  return nodeType.create(value2);
}
function getAnimatedType(value2) {
  const parentNode = getAnimated(value2);
  return parentNode ? parentNode.constructor : is.arr(value2) ? AnimatedArray : isAnimatedString(value2) ? AnimatedString : AnimatedValue;
}
var withAnimated = (Component, host2) => {
  const hasInstance = (
    // Function components must use "forwardRef" to avoid being
    // re-rendered on every animation frame.
    !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent
  );
  return reactExports.forwardRef((givenProps, givenRef) => {
    const instanceRef = reactExports.useRef(null);
    const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks
    reactExports.useCallback(
      (value2) => {
        instanceRef.current = updateRef(givenRef, value2);
      },
      [givenRef]
    );
    const [props, deps] = getAnimatedState(givenProps, host2);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = reactExports.useRef();
    useIsomorphicLayoutEffect$1(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(
            observerRef.current.deps,
            (dep) => removeFluidObserver(dep, observerRef.current)
          );
          raf.cancel(observerRef.current.update);
        }
      };
    });
    reactExports.useEffect(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host2.getComponentProps(props.getValue());
    return /* @__PURE__ */ reactExports.createElement(Component, { ...usedProps, ref });
  });
};
var PropsObserver = class {
  constructor(update2, deps) {
    this.update = update2;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host2) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = {
      ...props,
      style: host2.createAnimatedStyle(props.style)
    };
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value2) {
  if (ref) {
    if (is.fun(ref))
      ref(value2);
    else
      ref.current = value2;
  }
  return value2;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: applyAnimatedValues2 = () => false,
  createAnimatedStyle = (style2) => new AnimatedObject(style2),
  getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: applyAnimatedValues2,
    createAnimatedStyle,
    getComponentProps
  };
  const animated2 = (Component) => {
    const displayName = getDisplayName(Component) || "Anonymous";
    if (is.str(Component)) {
      Component = animated2[Component] || (animated2[Component] = withAnimated(Component, hostConfig));
    } else {
      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
    }
    Component.displayName = "Animated(".concat(displayName, ")");
    return Component;
  };
  eachProp(components, (Component, key2) => {
    if (is.arr(components)) {
      key2 = getDisplayName(Component);
    }
    animated2[key2] = animated2(Component);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;
function callProp(value2, ...args) {
  return is.fun(value2) ? value2(...args) : value2;
}
var matchProp = (value2, key2) => value2 === true || !!(key2 && value2 && (is.fun(value2) ? value2(key2) : toArray$1(value2).includes(key2)));
var resolveProp = (prop, key2) => is.obj(prop) ? key2 && prop[key2] : prop;
var getDefaultProp = (props, key2) => props.default === true ? props[key2] : props.default ? props.default[key2] : void 0;
var noopTransform = (value2) => value2;
var getDefaultProps = (props, transform2 = noopTransform) => {
  let keys2 = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys2 = Object.keys(props);
  }
  const defaults2 = {};
  for (const key2 of keys2) {
    const value2 = transform2(props[key2], key2);
    if (!is.und(value2)) {
      defaults2[key2] = value2;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = [
  "config",
  "onProps",
  "onStart",
  "onChange",
  "onPause",
  "onResume",
  "onRest"
];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  // Transition props
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  // Internal props
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count = 0;
  eachProp(props, (value2, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value2;
      count++;
    }
  });
  if (count) {
    return forward;
  }
}
function inferTo(props) {
  const to2 = getForwardProps(props);
  if (to2) {
    const out = { to: to2 };
    eachProp(props, (val2, key2) => key2 in to2 || (out[key2] = val2));
    return out;
  }
  return { ...props };
}
function computeGoal(value2) {
  value2 = getFluidValue(value2);
  return is.arr(value2) ? value2.map(computeGoal) : isAnimatedString(value2) ? globals_exports.createStringInterpolator({
    range: [0, 1],
    output: [value2, value2]
  })(1) : value2;
}
function hasProps(props) {
  for (const _2 in props)
    return true;
  return false;
}
function isAsyncTo(to2) {
  return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);
}
function detachRefs(ctrl, ref) {
  var _a2;
  (_a2 = ctrl.ref) == null ? void 0 : _a2.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  var _a2;
  if (ref && ctrl.ref !== ref) {
    (_a2 = ctrl.ref) == null ? void 0 : _a2.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: { tension: 170, friction: 26 },
  gentle: { tension: 120, friction: 14 },
  wobbly: { tension: 180, friction: 12 },
  stiff: { tension: 210, friction: 20 },
  slow: { tension: 280, friction: 60 },
  molasses: { tension: 280, friction: 120 }
};
var defaults = {
  ...config.default,
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
};
var AnimationConfig = class {
  constructor() {
    this.velocity = 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config2, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = { ...defaultConfig };
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = { ...defaultConfig, ...newConfig };
  }
  sanitizeConfig(config2, newConfig);
  Object.assign(config2, newConfig);
  for (const key2 in defaults) {
    if (config2[key2] == null) {
      config2[key2] = defaults[key2];
    }
  }
  let { frequency, damping } = config2;
  const { mass } = config2;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config2.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config2;
}
function sanitizeConfig(config2, props) {
  if (!is.und(props.decay)) {
    config2.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config2.duration = void 0;
      config2.decay = void 0;
    }
    if (isTensionConfig) {
      config2.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, { key: key2, props, defaultProps: defaultProps2, state, actions }) {
  return new Promise((resolve2, reject) => {
    var _a2;
    let delay;
    let timeout;
    let cancel = matchProp((_a2 = props.cancel) != null ? _a2 : defaultProps2 == null ? void 0 : defaultProps2.cancel, key2);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key2);
      }
      let pause = defaultProps2 == null ? void 0 : defaultProps2.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key2);
      }
      delay = callProp(props.delay || 0, key2);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals_exports.skipAnimation) {
        state.delayed = true;
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start({ ...props, callId, cancel }, resolve2);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result2) => result2.cancelled) ? getCancelledResult(target.get()) : results.every((result2) => result2.noop) ? getNoopResult(target.get()) : getFinishedResult(
  target.get(),
  results.every((result2) => result2.finished)
);
var getNoopResult = (value2) => ({
  value: value2,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value2, finished, cancelled = false) => ({
  value: value2,
  finished,
  cancelled
});
var getCancelledResult = (value2) => ({
  value: value2,
  cancelled: true,
  finished: false
});
function runAsync(to2, props, state, target) {
  const { callId, parentId, onRest } = props;
  const { asyncTo: prevTo, promise: prevPromise } = state;
  if (!parentId && to2 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to2;
    const defaultProps2 = getDefaultProps(
      props,
      (value2, key2) => (
        // The `onRest` prop is only called when the `runAsync` promise is resolved.
        key2 === "onRest" ? void 0 : value2
      )
    );
    let preventBail;
    let bail;
    const bailPromise = new Promise(
      (resolve2, reject) => (preventBail = resolve2, bail = reject)
    );
    const bailIfEnded = (bailSignal) => {
      const bailResult = (
        // The `cancel` prop or `stop` method was used.
        callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.
        callId !== state.asyncId && getFinishedResult(target, false)
      );
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAnimationSignal();
      return (async () => {
        if (globals_exports.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 };
        props2.parentId = callId;
        eachProp(defaultProps2, (value2, key2) => {
          if (is.und(props2[key2])) {
            props2[key2] = value2;
          }
        });
        const result22 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result22;
      })();
    };
    let result2;
    if (globals_exports.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to2)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to2);
      } else {
        animating = Promise.resolve(to2(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result2 = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result2 = err.result;
      } else if (err instanceof SkipAnimationSignal) {
        result2 = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result2, target, target.item);
      });
    }
    return result2;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t3) => t3.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super(
      "An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise."
    );
  }
};
var SkipAnimationSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
  }
};
var isFrameValue = (value2) => value2 instanceof FrameValue;
var nextId = 1;
var FrameValue = class extends FluidValue {
  constructor() {
    super(...arguments);
    this.id = nextId++;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  /** Get the current value */
  get() {
    const node2 = getAnimated(this);
    return node2 && node2.getValue();
  }
  /** Create a spring that maps our value to another value */
  to(...args) {
    return globals_exports.to(this, args);
  }
  /** @deprecated Use the `to` method instead. */
  interpolate(...args) {
    deprecateInterpolate();
    return globals_exports.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count) {
    if (count == 1)
      this._attach();
  }
  observerRemoved(count) {
    if (count == 0)
      this._detach();
  }
  /** Called when the first child is added. */
  _attach() {
  }
  /** Called when the last child is removed. */
  _detach() {
  }
  /** Tell our children about our new value */
  _onChange(value2, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value: value2,
      idle
    });
  }
  /** Tell our children about our new priority */
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active2) => active2 ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.animation = new Animation();
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 };
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  /** Equals true when not advancing on each frame. */
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node2 = getAnimated(this);
    return node2 instanceof AnimatedValue ? node2.lastVelocity || 0 : node2.getPayload().map((node22) => node22.lastVelocity || 0);
  }
  /**
   * When true, this value has been animated at least once.
   */
  get hasAnimated() {
    return hasAnimated(this);
  }
  /**
   * When true, this value has an unfinished animation,
   * which is either active or paused.
   */
  get isAnimating() {
    return isAnimating(this);
  }
  /**
   * When true, all current and future animations are paused.
   */
  get isPaused() {
    return isPaused(this);
  }
  /**
   *
   *
   */
  get isDelayed() {
    return this._state.delayed;
  }
  /** Advance the current animation by a number of milliseconds */
  advance(dt2) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let { toValues } = anim;
    const { config: config2 } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray$1(getFluidValue(anim.to));
    }
    anim.values.forEach((node22, i3) => {
      if (node22.done)
        return;
      const to2 = (
        // Animated strings always go from 0 to 1.
        node22.constructor == AnimatedString ? 1 : payload ? payload[i3].lastPosition : toValues[i3]
      );
      let finished = anim.immediate;
      let position2 = to2;
      if (!finished) {
        position2 = node22.lastPosition;
        if (config2.tension <= 0) {
          node22.done = true;
          return;
        }
        let elapsed = node22.elapsedTime += dt2;
        const from2 = anim.fromValues[i3];
        const v0 = node22.v0 != null ? node22.v0 : node22.v0 = is.arr(config2.velocity) ? config2.velocity[i3] : config2.velocity;
        let velocity2;
        const precision = config2.precision || (from2 == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from2) * 1e-3));
        if (!is.und(config2.duration)) {
          let p2 = 1;
          if (config2.duration > 0) {
            if (this._memoizedDuration !== config2.duration) {
              this._memoizedDuration = config2.duration;
              if (node22.durationProgress > 0) {
                node22.elapsedTime = config2.duration * node22.durationProgress;
                elapsed = node22.elapsedTime += dt2;
              }
            }
            p2 = (config2.progress || 0) + elapsed / this._memoizedDuration;
            p2 = p2 > 1 ? 1 : p2 < 0 ? 0 : p2;
            node22.durationProgress = p2;
          }
          position2 = from2 + config2.easing(p2) * (to2 - from2);
          velocity2 = (position2 - node22.lastPosition) / dt2;
          finished = p2 == 1;
        } else if (config2.decay) {
          const decay = config2.decay === true ? 0.998 : config2.decay;
          const e3 = Math.exp(-(1 - decay) * elapsed);
          position2 = from2 + v0 / (1 - decay) * (1 - e3);
          finished = Math.abs(node22.lastPosition - position2) <= precision;
          velocity2 = v0 * e3;
        } else {
          velocity2 = node22.lastVelocity == null ? v0 : node22.lastVelocity;
          const restVelocity = config2.restVelocity || precision / 10;
          const bounceFactor = config2.clamp ? 0 : config2.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from2 == to2 ? node22.v0 > 0 : from2 < to2;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt2 / step);
          for (let n2 = 0; n2 < numSteps; ++n2) {
            isMoving = Math.abs(velocity2) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to2 - position2) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position2 == to2 || position2 > to2 == isGrowing;
              if (isBouncing) {
                velocity2 = -velocity2 * bounceFactor;
                position2 = to2;
              }
            }
            const springForce = -config2.tension * 1e-6 * (position2 - to2);
            const dampingForce = -config2.friction * 1e-3 * velocity2;
            const acceleration = (springForce + dampingForce) / config2.mass;
            velocity2 = velocity2 + acceleration * step;
            position2 = position2 + velocity2 * step;
          }
        }
        node22.lastVelocity = velocity2;
        if (Number.isNaN(position2)) {
          console.warn("Got NaN while animating:", this);
          finished = true;
        }
      }
      if (payload && !payload[i3].done) {
        finished = false;
      }
      if (finished) {
        node22.done = true;
      } else {
        idle = false;
      }
      if (node22.setValue(position2, config2.round)) {
        changed = true;
      }
    });
    const node2 = getAnimated(this);
    const currVal = node2.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config2.decay) {
        node2.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config2.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  /** Set the current value, while stopping the current animation */
  set(value2) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value2);
      this._set(value2);
    });
    return this;
  }
  /**
   * Freeze the active animation in time, as well as any updates merged
   * before `resume` is called.
   */
  pause() {
    this._update({ pause: true });
  }
  /** Resume the animation if paused. */
  resume() {
    this._update({ pause: false });
  }
  /** Skip to the end of the current animation. */
  finish() {
    if (isAnimating(this)) {
      const { to: to2, config: config2 } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config2.decay) {
          this._set(to2, false);
        }
        this._stop();
      });
    }
    return this;
  }
  /** Push props into the pending queue. */
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to2, arg2) {
    let queue;
    if (!is.und(to2)) {
      queue = [is.obj(to2) ? to2 : { ...arg2, to: to2 }];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(
      queue.map((props) => {
        const up = this._update(props);
        return up;
      })
    ).then((results) => getCombinedResult(this, results));
  }
  /**
   * Stop the current animation, and cancel any delayed updates.
   *
   * Pass `true` to call `onRest` with `cancelled: true`.
   */
  stop(cancel) {
    const { to: to2 } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to2, cancel));
    return this;
  }
  /** Restart the animation. */
  reset() {
    this._update({ reset: true });
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  /**
   * Parse the `to` and `from` range from the given `props` object.
   *
   * This also ensures the initial value is available to animated components
   * during the render phase.
   */
  _prepareNode(props) {
    const key2 = this.key || "";
    let { to: to2, from: from2 } = props;
    to2 = is.obj(to2) ? to2[key2] : to2;
    if (to2 == null || isAsyncTo(to2)) {
      to2 = void 0;
    }
    from2 = is.obj(from2) ? from2[key2] : from2;
    if (from2 == null) {
      from2 = void 0;
    }
    const range = { to: to2, from: from2 };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to2, from2] = [from2, to2];
      from2 = getFluidValue(from2);
      if (!is.und(from2)) {
        this._set(from2);
      } else if (!getAnimated(this)) {
        this._set(to2);
      }
    }
    return range;
  }
  /** Every update is processed by this method before merging. */
  _update({ ...props }, isLoop) {
    const { key: key2, defaultProps: defaultProps2 } = this;
    if (props.default)
      Object.assign(
        defaultProps2,
        getDefaultProps(
          props,
          (value2, prop) => /^on/.test(prop) ? resolveProp(value2, key2) : value2
        )
      );
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error(
        "Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?"
      );
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key: key2,
      props,
      defaultProps: defaultProps2,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(
              this,
              "onPause",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(
              this,
              "onResume",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        start: this._merge.bind(this, range)
      }
    }).then((result2) => {
      if (props.loop && result2.finished && !(isLoop && result2.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result2;
    });
  }
  /** Merge props into the current animation */
  _merge(range, props, resolve2) {
    if (props.cancel) {
      this.stop(true);
      return resolve2(getCancelledResult(this));
    }
    const hasToProp = !is.und(range.to);
    const hasFromProp = !is.und(range.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve2(getCancelledResult(this));
      }
    }
    const { key: key2, defaultProps: defaultProps2, animation: anim } = this;
    const { to: prevTo, from: prevFrom } = anim;
    let { to: to2 = prevTo, from: from2 = prevFrom } = range;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to2))) {
      to2 = from2;
    }
    if (props.reverse)
      [to2, from2] = [from2, to2];
    const hasFromChanged = !isEqual$1(from2, prevFrom);
    if (hasFromChanged) {
      anim.from = from2;
    }
    from2 = getFluidValue(from2);
    const hasToChanged = !isEqual$1(to2, prevTo);
    if (hasToChanged) {
      this._focus(to2);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const { config: config2 } = anim;
    const { decay, velocity: velocity2 } = config2;
    if (hasToProp || hasFromProp) {
      config2.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(
        config2,
        callProp(props.config, key2),
        // Avoid calling the same "config" prop twice.
        props.config !== defaultProps2.config ? callProp(defaultProps2.config, key2) : void 0
      );
    }
    let node2 = getAnimated(this);
    if (!node2 || is.und(to2)) {
      return resolve2(getFinishedResult(this, true));
    }
    const reset = (
      // When `reset` is undefined, the `from` prop implies `reset: true`,
      // except for declarative updates. When `reset` is defined, there
      // must exist a value to animate from.
      is.und(props.reset) ? hasFromProp && !props.default : !is.und(from2) && matchProp(props.reset, key2)
    );
    const value2 = reset ? from2 : this.get();
    const goal = computeGoal(to2);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps2.immediate || props.immediate, key2));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to2);
      if (nodeType !== node2.constructor) {
        if (immediate) {
          node2 = this._set(goal);
        } else
          throw Error(
            "Cannot animate between ".concat(node2.constructor.name, " and ").concat(nodeType.name, ', as the "to" prop suggests')
          );
      }
    }
    const goalType = node2.constructor;
    let started = hasFluidValue(to2);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual$1(computeGoal(value2), goal);
        started = !finished;
      }
      if (!isEqual$1(anim.immediate, immediate) && !immediate || !isEqual$1(config2.decay, decay) || !isEqual$1(config2.velocity, velocity2)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node2.getPayload();
        anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray$1(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const { onRest } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result2 = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result2);
        this._pendingCalls.add(resolve2);
        if (anim.changed)
          raf.batchedUpdates(() => {
            var _a2;
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result2, this);
            if (reset) {
              callProp(defaultProps2.onRest, result2);
            } else {
              (_a2 = anim.onStart) == null ? void 0 : _a2.call(anim, result2, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value2);
    }
    if (hasAsyncTo) {
      resolve2(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve2);
    } else {
      resolve2(getNoopResult(value2));
    }
  }
  /** Update the `animation.to` value, which might be a `FluidValue` */
  _focus(value2) {
    const anim = this.animation;
    if (value2 !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value2;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const { to: to2 } = this.animation;
    if (hasFluidValue(to2)) {
      addFluidObserver(to2, this);
      if (isFrameValue(to2)) {
        priority2 = to2.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const { to: to2 } = this.animation;
    if (hasFluidValue(to2)) {
      removeFluidObserver(to2, this);
    }
  }
  /**
   * Update the current value from outside the frameloop,
   * and return the `Animated` node.
   */
  _set(arg, idle = true) {
    const value2 = getFluidValue(arg);
    if (!is.und(value2)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual$1(value2, oldNode.getValue())) {
        const nodeType = getAnimatedType(value2);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value2));
        } else {
          oldNode.setValue(value2);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value2, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(
        this,
        "onStart",
        getFinishedResult(this, checkFinished(this, anim.to)),
        this
      );
    }
  }
  _onChange(value2, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value2, this);
    }
    callProp(this.defaultProps.onChange, value2, this);
    super._onChange(value2, idle);
  }
  // This method resets the animation state (even if already animating) to
  // ensure the latest from/to range is used, and it also ensures this spring
  // is added to the frameloop.
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node2) => node2.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals_exports.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  /**
   * Exit the frameloop and notify `onRest` listeners.
   *
   * Always wrap `_stop` calls with `batchedUpdates`.
   */
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node2) => {
        node2.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result2 = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));
      flushCalls(this._pendingCalls, result2);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result2, this);
      }
    }
  }
};
function checkFinished(target, to2) {
  const goal = computeGoal(to2);
  const value2 = computeGoal(target.get());
  return isEqual$1(value2, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to2 = props.to) {
  const loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate({
      ...props,
      loop: loop2,
      // Avoid updating default props when looping.
      default: false,
      // Never loop the `pause` prop.
      pause: void 0,
      // For the "reverse" prop to loop as expected, the "to" prop
      // must be undefined. The "reverse" prop is ignored when the
      // "to" prop is an array or function.
      to: !reverse || isAsyncTo(to2) ? to2 : void 0,
      // Ignore the "from" prop except on reset.
      from: reset ? props.from : void 0,
      reset,
      // The "loop" prop can return a "useSpring" props object to
      // override any of the original props.
      ...overrides
    });
  }
}
function createUpdate(props) {
  const { to: to2, from: from2 } = props = inferTo(props);
  const keys2 = /* @__PURE__ */ new Set();
  if (is.obj(to2))
    findDefined(to2, keys2);
  if (is.obj(from2))
    findDefined(from2, keys2);
  props.keys = keys2.size ? Array.from(keys2) : null;
  return props;
}
function declareUpdate(props) {
  const update2 = createUpdate(props);
  if (is.und(update2.default)) {
    update2.default = getDefaultProps(update2);
  }
  return update2;
}
function findDefined(values2, keys2) {
  eachProp(values2, (value2, key2) => value2 != null && keys2.add(key2));
}
var ACTIVE_EVENTS = [
  "onStart",
  "onRest",
  "onChange",
  "onPause",
  "onResume"
];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
}
function sendEvent(target, type, ...args) {
  var _a2, _b2, _c2, _d2;
  (_b2 = (_a2 = target.animation)[type]) == null ? void 0 : _b2.call(_a2, ...args);
  (_d2 = (_c2 = target.defaultProps)[type]) == null ? void 0 : _d2.call(_c2, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId2 = 1;
var Controller = class {
  constructor(props, flush3) {
    this.id = nextId2++;
    this.springs = {};
    this.queue = [];
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush3) {
      this._flush = flush3;
    }
    if (props) {
      this.start({ default: true, ...props });
    }
  }
  /**
   * Equals `true` when no spring values are in the frameloop, and
   * no async animation is currently active.
   */
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  /** Get the current values of our springs */
  get() {
    const values2 = {};
    this.each((spring, key2) => values2[key2] = spring.get());
    return values2;
  }
  /** Set the current values without animating. */
  set(values2) {
    for (const key2 in values2) {
      const value2 = values2[key2];
      if (!is.und(value2)) {
        this.springs[key2].set(value2);
      }
    }
  }
  /** Push an update onto the queue of each value. */
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  /**
   * Start the queued animations for every spring, and resolve the returned
   * promise once all queued animations have finished or been cancelled.
   *
   * When you pass a queue (instead of nothing), that queue is used instead of
   * the queued animations added with the `update` method, which are left alone.
   */
  start(props) {
    let { queue } = this;
    if (props) {
      queue = toArray$1(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  /** @internal */
  stop(arg, keys2) {
    if (arg !== !!arg) {
      keys2 = arg;
    }
    if (keys2) {
      const springs = this.springs;
      each(toArray$1(keys2), (key2) => springs[key2].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  /** Freeze the active animation in time */
  pause(keys2) {
    if (is.und(keys2)) {
      this.start({ pause: true });
    } else {
      const springs = this.springs;
      each(toArray$1(keys2), (key2) => springs[key2].pause());
    }
    return this;
  }
  /** Resume the animation if paused. */
  resume(keys2) {
    if (is.und(keys2)) {
      this.start({ pause: false });
    } else {
      const springs = this.springs;
      each(toArray$1(keys2), (key2) => springs[key2].resume());
    }
    return this;
  }
  /** Call a function once per spring value */
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  /** @internal Called at the end of every animation frame */
  _onFrame() {
    const { onStart, onChange, onRest } = this._events;
    const active2 = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active2 && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result2]) => {
        result2.value = this.get();
        onStart2(result2, this, this._item);
      });
    }
    const idle = !active2 && this._started;
    const values2 = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result2]) => {
        result2.value = values2;
        onChange2(result2, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result2]) => {
        result2.value = values2;
        onRest2(result2, this, this._item);
      });
    }
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then(
    (results) => getCombinedResult(ctrl, results)
  );
}
async function flushUpdate(ctrl, props, isLoop) {
  const { keys: keys2, to: to2, from: from2, loop: loop2, onRest, onResolve } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to2 === false)
    props.to = null;
  if (from2 === false)
    props.from = null;
  const asyncTo = is.arr(to2) || is.fun(to2) ? to2 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key2) => {
      const handler = props[key2];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key2];
        props[key2] = ({ finished, cancelled }) => {
          const result22 = queue.get(handler);
          if (result22) {
            if (!finished)
              result22.finished = false;
            if (cancelled)
              result22.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key2] = props[key2];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys2 || Object.keys(ctrl.springs)).map(
    (key2) => ctrl.springs[key2].start(props)
  );
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(
      scheduleProps(++ctrl["_lastAsyncId"], {
        props,
        state,
        actions: {
          pause: noop,
          resume: noop,
          start(props2, resolve2) {
            if (cancel) {
              stopAsync(state, ctrl["_lastAsyncId"]);
              resolve2(getCancelledResult(ctrl));
            } else {
              props2.onRest = onRest;
              resolve2(
                runAsync(
                  asyncTo,
                  props2,
                  state,
                  ctrl
                )
              );
            }
          }
        }
      })
    );
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result2 = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result2.finished && !(isLoop && result2.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to2);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result2, ctrl, ctrl.item));
  }
  return result2;
}
function getSprings(ctrl, props) {
  const springs = { ...ctrl.springs };
  if (props) {
    each(toArray$1(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = { ...props2, to: void 0 };
      }
      prepareSprings(springs, props2, (key2) => {
        return createSpring(key2);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key2) => {
    if (!ctrl.springs[key2]) {
      ctrl.springs[key2] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key2, observer) {
  const spring = new SpringValue();
  spring.key = key2;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create2) {
  if (props.keys) {
    each(props.keys, (key2) => {
      const spring = springs[key2] || (springs[key2] = create2(key2));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key2) => {
      return createSpring(key2, ctrl);
    });
  });
}
var SpringContext = ({
  children,
  ...props
}) => {
  const inherited = reactExports.useContext(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({ pause, immediate }), [pause, immediate]);
  const { Provider } = ctx;
  return /* @__PURE__ */ reactExports.createElement(Provider, { value: props }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, reactExports.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i3) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update2 = _getProps(props, ctrl, i3);
        if (update2) {
          results.push(ctrl.start(update2));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i3 = current.indexOf(ctrl);
    if (~i3)
      current.splice(i3, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values2) {
    each(current, (ctrl, i3) => {
      const update2 = is.fun(values2) ? values2(i3, ctrl) : values2;
      if (update2) {
        ctrl.set(update2);
      }
    });
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i3) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update2 = this._getProps(props, ctrl, i3);
        if (update2) {
          results.push(ctrl.start(update2));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i3) => ctrl.update(this._getProps(props, ctrl, i3)));
    return this;
  };
  const _getProps = function(arg, ctrl, index2) {
    return is.fun(arg) ? arg(index2, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length2, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = reactExports.useMemo(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const layoutId = reactExports.useRef(0);
  const forceUpdate = useForceUpdate();
  const state = reactExports.useMemo(
    () => ({
      ctrls: [],
      queue: [],
      flush(ctrl, updates2) {
        const springs2 = getSprings(ctrl, updates2);
        const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key2) => !ctrl.springs[key2]);
        return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve2) => {
          setSprings(ctrl, springs2);
          state.queue.push(() => {
            resolve2(flushUpdateQueue(ctrl, updates2));
          });
          forceUpdate();
        });
      }
    }),
    []
  );
  const ctrls = reactExports.useRef([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length2) || 0;
  reactExports.useMemo(() => {
    each(ctrls.current.slice(length2, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length2;
    declareUpdates(prevLength, length2);
  }, [length2]);
  reactExports.useMemo(() => {
    declareUpdates(0, Math.min(prevLength, length2));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i3 = startIndex; i3 < endIndex; i3++) {
      const ctrl = ctrls.current[i3] || (ctrls.current[i3] = new Controller(null, state.flush));
      const update2 = propsFn ? propsFn(i3, ctrl) : props[i3];
      if (update2) {
        updates[i3] = declareUpdate(update2);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i3) => getSprings(ctrl, updates[i3]));
  const context = reactExports.useContext(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect$1(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const { queue } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb2) => cb2());
    }
    each(ctrls.current, (ctrl, i3) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({ default: context });
      }
      const update2 = updates[i3];
      if (update2) {
        replaceRef(ctrl, update2.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update2);
        } else {
          ctrl.start(update2);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values2 = springs.map((x3) => ({ ...x3 }));
  return ref ? [values2, ref] : values2;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values2], ref] = useSprings(
    1,
    isFn ? props : [props],
    isFn ? deps || [] : deps
  );
  return isFn || arguments.length == 2 ? [values2, ref] : values2;
}
function useTransition(data2, props, deps) {
  const propsFn = is.fun(props) && props;
  const {
    reset,
    sort,
    trail = 0,
    expires = true,
    exitBeforeEnter = false,
    onDestroyed,
    ref: propsRef,
    config: propsConfig
  } = propsFn ? propsFn() : props;
  const ref = reactExports.useMemo(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const items = toArray$1(data2);
  const transitions = [];
  const usedTransitions = reactExports.useRef(null);
  const prevTransitions = reset ? null : usedTransitions.current;
  useIsomorphicLayoutEffect$1(() => {
    usedTransitions.current = transitions;
  });
  useOnce(() => {
    each(transitions, (t3) => {
      ref == null ? void 0 : ref.add(t3.ctrl);
      t3.ctrl.ref = ref;
    });
    return () => {
      each(usedTransitions.current, (t3) => {
        if (t3.expired) {
          clearTimeout(t3.expirationId);
        }
        detachRefs(t3.ctrl, ref);
        t3.ctrl.stop(true);
      });
    };
  });
  const keys2 = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
  const expired = reset && usedTransitions.current || [];
  useIsomorphicLayoutEffect$1(
    () => each(expired, ({ ctrl, item, key: key2 }) => {
      detachRefs(ctrl, ref);
      callProp(onDestroyed, item, key2);
    })
  );
  const reused = [];
  if (prevTransitions)
    each(prevTransitions, (t3, i3) => {
      if (t3.expired) {
        clearTimeout(t3.expirationId);
        expired.push(t3);
      } else {
        i3 = reused[i3] = keys2.indexOf(t3.key);
        if (~i3)
          transitions[i3] = t3;
      }
    });
  each(items, (item, i3) => {
    if (!transitions[i3]) {
      transitions[i3] = {
        key: keys2[i3],
        item,
        phase: "mount",
        ctrl: new Controller()
      };
      transitions[i3].ctrl.item = item;
    }
  });
  if (reused.length) {
    let i3 = -1;
    const { leave } = propsFn ? propsFn() : props;
    each(reused, (keyIndex, prevIndex) => {
      const t3 = prevTransitions[prevIndex];
      if (~keyIndex) {
        i3 = transitions.indexOf(t3);
        transitions[i3] = { ...t3, item: items[keyIndex] };
      } else if (leave) {
        transitions.splice(++i3, 0, t3);
      }
    });
  }
  if (is.fun(sort)) {
    transitions.sort((a4, b3) => sort(a4.item, b3.item));
  }
  let delay = -trail;
  const forceUpdate = useForceUpdate();
  const defaultProps2 = getDefaultProps(props);
  const changes = /* @__PURE__ */ new Map();
  const exitingTransitions = reactExports.useRef(/* @__PURE__ */ new Map());
  const forceChange = reactExports.useRef(false);
  each(transitions, (t3, i3) => {
    const key2 = t3.key;
    const prevPhase = t3.phase;
    const p2 = propsFn ? propsFn() : props;
    let to2;
    let phase;
    const propsDelay = callProp(p2.delay || 0, key2);
    if (prevPhase == "mount") {
      to2 = p2.enter;
      phase = "enter";
    } else {
      const isLeave = keys2.indexOf(key2) < 0;
      if (prevPhase != "leave") {
        if (isLeave) {
          to2 = p2.leave;
          phase = "leave";
        } else if (to2 = p2.update) {
          phase = "update";
        } else
          return;
      } else if (!isLeave) {
        to2 = p2.enter;
        phase = "enter";
      } else
        return;
    }
    to2 = callProp(to2, t3.item, i3);
    to2 = is.obj(to2) ? inferTo(to2) : { to: to2 };
    if (!to2.config) {
      const config2 = propsConfig || defaultProps2.config;
      to2.config = callProp(config2, t3.item, i3, phase);
    }
    delay += trail;
    const payload = {
      ...defaultProps2,
      // we need to add our props.delay value you here.
      delay: propsDelay + delay,
      ref: propsRef,
      immediate: p2.immediate,
      // This prevents implied resets.
      reset: false,
      // Merge any phase-specific props.
      ...to2
    };
    if (phase == "enter" && is.und(payload.from)) {
      const p22 = propsFn ? propsFn() : props;
      const from2 = is.und(p22.initial) || prevTransitions ? p22.from : p22.initial;
      payload.from = callProp(from2, t3.item, i3);
    }
    const { onResolve } = payload;
    payload.onResolve = (result2) => {
      callProp(onResolve, result2);
      const transitions2 = usedTransitions.current;
      const t22 = transitions2.find((t32) => t32.key === key2);
      if (!t22)
        return;
      if (result2.cancelled && t22.phase != "update") {
        return;
      }
      if (t22.ctrl.idle) {
        const idle = transitions2.every((t32) => t32.ctrl.idle);
        if (t22.phase == "leave") {
          const expiry = callProp(expires, t22.item);
          if (expiry !== false) {
            const expiryMs = expiry === true ? 0 : expiry;
            t22.expired = true;
            if (!idle && expiryMs > 0) {
              if (expiryMs <= 2147483647)
                t22.expirationId = setTimeout(forceUpdate, expiryMs);
              return;
            }
          }
        }
        if (idle && transitions2.some((t32) => t32.expired)) {
          exitingTransitions.current.delete(t22);
          if (exitBeforeEnter) {
            forceChange.current = true;
          }
          forceUpdate();
        }
      }
    };
    const springs = getSprings(t3.ctrl, payload);
    if (phase === "leave" && exitBeforeEnter) {
      exitingTransitions.current.set(t3, { phase, springs, payload });
    } else {
      changes.set(t3, { phase, springs, payload });
    }
  });
  const context = reactExports.useContext(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect$1(() => {
    if (hasContext) {
      each(transitions, (t3) => {
        t3.ctrl.start({ default: context });
      });
    }
  }, [context]);
  each(changes, (_2, t3) => {
    if (exitingTransitions.current.size) {
      const ind = transitions.findIndex((state) => state.key === t3.key);
      transitions.splice(ind, 1);
    }
  });
  useIsomorphicLayoutEffect$1(
    () => {
      each(
        exitingTransitions.current.size ? exitingTransitions.current : changes,
        ({ phase, payload }, t3) => {
          const { ctrl } = t3;
          t3.phase = phase;
          ref == null ? void 0 : ref.add(ctrl);
          if (hasContext && phase == "enter") {
            ctrl.start({ default: context });
          }
          if (payload) {
            replaceRef(ctrl, payload.ref);
            if ((ctrl.ref || ref) && !forceChange.current) {
              ctrl.update(payload);
            } else {
              ctrl.start(payload);
              if (forceChange.current) {
                forceChange.current = false;
              }
            }
          }
        }
      );
    },
    reset ? void 0 : deps
  );
  const renderTransitions = (render2) => /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, transitions.map((t3, i3) => {
    const { springs } = changes.get(t3) || t3.ctrl;
    const elem2 = render2({ ...springs }, t3.item, t3, i3);
    return elem2 && elem2.type ? /* @__PURE__ */ reactExports.createElement(
      elem2.type,
      {
        ...elem2.props,
        key: is.str(t3.key) || is.num(t3.key) ? t3.key : t3.ctrl.id,
        ref: elem2.ref
      }
    ) : elem2;
  }));
  return ref ? [renderTransitions, ref] : renderTransitions;
}
var nextKey = 1;
function getKeys(items, { key: key2, keys: keys2 = key2 }, prevTransitions) {
  if (keys2 === null) {
    const reused = /* @__PURE__ */ new Set();
    return items.map((item) => {
      const t3 = prevTransitions && prevTransitions.find(
        (t22) => t22.item === item && t22.phase !== "leave" && !reused.has(t22)
      );
      if (t3) {
        reused.add(t3);
        return t3.key;
      }
      return nextKey++;
    });
  }
  return is.und(keys2) ? items : is.fun(keys2) ? items.map(keys2) : toArray$1(keys2);
}
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.source = source;
    this.idle = true;
    this._active = /* @__PURE__ */ new Set();
    this.calc = createInterpolator(...args);
    const value2 = this._get();
    const nodeType = getAnimatedType(value2);
    setAnimated(this, nodeType.create(value2));
  }
  advance(_dt) {
    const value2 = this._get();
    const oldValue = this.get();
    if (!isEqual$1(value2, oldValue)) {
      getAnimated(this).setValue(value2);
      this._onChange(value2, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray$1(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node2) => {
        node2.done = false;
      });
      if (globals_exports.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  // Observe our sources only when we're observed.
  _attach() {
    let priority2 = 1;
    each(toArray$1(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  // Stop observing our sources once we have no observers.
  _detach() {
    each(toArray$1(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray$1(this.source).reduce(
        (highest, parent2) => Math.max(highest, (isFrameValue(parent2) ? parent2.priority : 0) + 1),
        0
      );
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active2) {
  return !active2.size || Array.from(active2).every(isIdle);
}
function becomeIdle(self2) {
  if (!self2.idle) {
    self2.idle = true;
    each(getPayload(self2), (node2) => {
      node2.done = true;
    });
    callFluidObservers(self2, {
      type: "idle",
      parent: self2
    });
  }
}
globals_exports.assign({
  createStringInterpolator: createStringInterpolator2,
  to: (source, args) => new Interpolation(source, args)
});
var isCustomPropRE = /^--/;
function dangerousStyleValue(name2, value2) {
  if (value2 == null || typeof value2 === "boolean" || value2 === "")
    return "";
  if (typeof value2 === "number" && value2 !== 0 && !isCustomPropRE.test(name2) && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2]))
    return value2 + "px";
  return ("" + value2).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const { style: style2, children, scrollTop, scrollLeft, viewBox, ...attributes } = props;
  const values2 = Object.values(attributes);
  const names = Object.keys(attributes).map(
    (name2) => isFilterElement || instance.hasAttribute(name2) ? name2 : attributeCache[name2] || (attributeCache[name2] = name2.replace(
      /([A-Z])/g,
      // Attributes are written in dash case
      (n2) => "-" + n2.toLowerCase()
    ))
  );
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (const name2 in style2) {
    if (style2.hasOwnProperty(name2)) {
      const value2 = dangerousStyleValue(name2, style2[name2]);
      if (isCustomPropRE.test(name2)) {
        instance.style.setProperty(name2, value2);
      } else {
        instance.style[name2] = value2;
      }
    }
  }
  names.forEach((name2, i3) => {
    instance.setAttribute(name2, values2[i3]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
  if (viewBox !== void 0) {
    instance.setAttribute("viewBox", viewBox);
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key2) => prefix2 + key2.charAt(0).toUpperCase() + key2.substring(1);
var prefixes$1 = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes$1.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value2, unit) => is.num(value2) && value2 !== 0 ? value2 + unit : value2;
var isValueIdentity = (value2, id2) => is.arr(value2) ? value2.every((v2) => isValueIdentity(v2, id2)) : is.num(value2) ? value2 === id2 : parseFloat(value2) === id2;
var AnimatedStyle = class extends AnimatedObject {
  constructor({ x: x3, y: y4, z: z3, ...style2 }) {
    const inputs = [];
    const transforms = [];
    if (x3 || y4 || z3) {
      inputs.push([x3 || 0, y4 || 0, z3 || 0]);
      transforms.push((xyz) => [
        "translate3d(".concat(xyz.map((v2) => addUnit(v2, "px")).join(","), ")"),
        // prettier-ignore
        isValueIdentity(xyz, 0)
      ]);
    }
    eachProp(style2, (value2, key2) => {
      if (key2 === "transform") {
        inputs.push([value2 || ""]);
        transforms.push((transform2) => [transform2, transform2 === ""]);
      } else if (domTransforms.test(key2)) {
        delete style2[key2];
        if (is.und(value2))
          return;
        const unit = pxTransforms.test(key2) ? "px" : degTransforms.test(key2) ? "deg" : "";
        inputs.push(toArray$1(value2));
        transforms.push(
          key2 === "rotate3d" ? ([x22, y22, z22, deg]) => [
            "rotate3d(".concat(x22, ",").concat(y22, ",").concat(z22, ",").concat(addUnit(deg, unit), ")"),
            isValueIdentity(deg, 0)
          ] : (input2) => [
            "".concat(key2, "(").concat(input2.map((v2) => addUnit(v2, unit)).join(","), ")"),
            isValueIdentity(input2, key2.startsWith("scale") ? 1 : 0)
          ]
        );
      }
    });
    if (inputs.length) {
      style2.transform = new FluidTransform(inputs, transforms);
    }
    super(style2);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this.inputs = inputs;
    this.transforms = transforms;
    this._value = null;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform2 = "";
    let identity2 = true;
    each(this.inputs, (input2, i3) => {
      const arg1 = getFluidValue(input2[0]);
      const [t3, id2] = this.transforms[i3](
        is.arr(arg1) ? arg1 : input2.map(getFluidValue)
      );
      transform2 += " " + t3;
      identity2 = identity2 && id2;
    });
    return identity2 ? "none" : transform2;
  }
  // Start observing our inputs once we have an observer.
  observerAdded(count) {
    if (count == 1)
      each(
        this.inputs,
        (input2) => each(
          input2,
          (value2) => hasFluidValue(value2) && addFluidObserver(value2, this)
        )
      );
  }
  // Stop observing our inputs once we have no observers.
  observerRemoved(count) {
    if (count == 0)
      each(
        this.inputs,
        (input2) => each(
          input2,
          (value2) => hasFluidValue(value2) && removeFluidObserver(value2, this)
        )
      );
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
globals_exports.assign({
  batchedUpdates: reactDomExports.unstable_batchedUpdates,
  createStringInterpolator: createStringInterpolator2,
  colors: colors2
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style2) => new AnimatedStyle(style2),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
});
var animated = host.animated;
const FadeIn = ({ isOpen, children }) => {
  const transition = useTransition(isOpen, {
    from: {
      opacity: 0
    },
    enter: {
      opacity: 1
    },
    leave: {
      opacity: 0
    }
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: transition(
    //@ts-ignore
    (style2, isOpen2) => !!isOpen2 && /* @__PURE__ */ jsxRuntimeExports.jsx(animated.div, { style: style2, children })
  ) });
};
const KeyValue = ({ title, value: value2, clickable, className, help, clipboard, truncate: truncate2 = true }) => {
  const [showHelp, setShowHelp] = reactExports.useState(false);
  const [_copy, setCopy] = reactExports.useState(false);
  const handleCopyClick = () => {
    copy(value2);
    setCopy(true);
    setTimeout(() => {
      setCopy(false);
    }, 2500);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      className: "bg-white p-4 overflow-hidden relative rounded flex flex-col md:grid md:items-center md:grid-cols-[auto_1fr] md:grid-rows-1 md:gap-2 ".concat(clickable ? "hover:bg-opacity-50 hover:cursor-pointer" : ""),
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " ".concat(help && showHelp ? "grid grid-cols-[auto_1fr] grid-rows-1 gap-4" : ""), children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 items-center", children: [
            typeof title === "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-black truncate font-bold", children: title }),
            typeof title !== "string" && title,
            help && !showHelp && /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                onClick: () => setShowHelp(true),
                xmlns: "http://www.w3.org/2000/svg",
                className: "fill-gray-400 hover:cursor-pointer hover:scale-110",
                height: "20",
                viewBox: "0 -960 960 960",
                width: "20",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M440-280h80v-240h-80v240Zm40-320q17 0 28.5-11.5T520-640q0-17-11.5-28.5T480-680q-17 0-28.5 11.5T440-640q0 17 11.5 28.5T480-600Zm0 520q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
              }
            ),
            help && showHelp && /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                className: "fill-gray-400 hover:cursor-pointer hover:scale-110",
                onClick: () => setShowHelp(false),
                xmlns: "http://www.w3.org/2000/svg",
                height: "20",
                viewBox: "0 -960 960 960",
                width: "20",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m336-280 144-144 144 144 56-56-144-144 144-144-56-56-144 144-144-144-56 56 144 144-144 144 56 56ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
              }
            )
          ] }),
          help && showHelp && help
        ] }),
        !showHelp && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: typeof value2 === "string" || typeof value2 === "number" ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_".concat(clipboard ? "auto" : "", "] gap-5"), children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "p",
            {
              className: "text-black animate-fadeIn ".concat(truncate2 ? "truncate" : "overflow-x-auto", " ").concat(className ? className : ""),
              children: value2
            }
          ),
          clipboard && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
            !_copy && /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                onClick: handleCopyClick,
                xmlns: "http://www.w3.org/2000/svg",
                width: "24",
                height: "24",
                viewBox: "0 0 24 24",
                strokeWidth: "2",
                stroke: "currentColor",
                fill: "none",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 3m0 2a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-2a2 2 0 0 1 -2 -2z" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 12h6" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 16h6" })
                ]
              }
            ),
            !!_copy && /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                className: "animate-fadeIn",
                width: "24",
                height: "24",
                viewBox: "0 0 24 24",
                strokeWidth: "2",
                stroke: "#00B894",
                fill: "none",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 3m0 2a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-2a2 2 0 0 1 -2 -2z" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("path", { className: "animate-fadeIn3", d: "M9 14l2 2l4 -4" })
                ]
              }
            )
          ] })
        ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-fadeIn", children: value2 }) })
      ]
    }
  );
};
const TokenDetail = () => {
  const navigate = useNavigate();
  const { tokenid } = useParams();
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const { balance } = reactExports.useContext(appContext);
  const [viewingToken, setViewingToken] = reactExports.useState(null);
  const [fullscreenView, setFullScreenView] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (tokenid) {
      setViewingToken(balance.find((b3) => b3.tokenid === tokenid));
    }
  }, [tokenid, balance]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Grid,
    {
      variant: "lg",
      title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            onClick: (e3) => {
              e3.stopPropagation();
              navigate(-1);
            },
            className: "fill-white hover:cursor-pointer",
            xmlns: "http://www.w3.org/2000/svg",
            height: "24",
            viewBox: "0 -960 960 960",
            width: "24",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m313-440 224 224-57 56-320-320 320-320 57 56-224 224h487v80H313Z" })
          }
        ),
        "Token details"
      ] }) }),
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        fullscreenView && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              onClick: () => setFullScreenView(false),
              className: "sm:ml-[240px] backdrop-blur-sm absolute left-0 right-0 bottom-0 top-0 grid grid-cols-[1fr_minmax(0,_560px)_1fr] grid-rows-1",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { isOpen: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mx-4 rounded-lg  max-h-fit flex flex-col mt-16 hover:drop-shadow-2xl shadow-2xl", children: viewingToken && viewingToken.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "img",
                    {
                      className: "h-auto rounded-lg relative w-full",
                      alt: "token-icon",
                      src: "url" in viewingToken.token && viewingToken.token.url.length ? viewingToken.token.url : "https://robohash.org/".concat(viewingToken.tokenid)
                    }
                  ) }) }) }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
                ] })
              ]
            }
          ),
          document.body
        ),
        viewingToken && /* @__PURE__ */ jsxRuntimeExports.jsx(
          CardContent,
          {
            header: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white flex gap-4 rounded-lg", children: [
              viewingToken.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "svg",
                  {
                    className: "absolute right-1 bottom-2",
                    xmlns: "http://www.w3.org/2000/svg",
                    height: "16",
                    viewBox: "0 -960 960 960",
                    width: "16",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "path",
                      {
                        fill: "#3DA2FF",
                        d: "m344-60-76-128-144-32 14-148-98-112 98-112-14-148 144-32 76-128 136 58 136-58 76 128 144 32-14 148 98 112-98 112 14 148-144 32-76 128-136-58-136 58Zm94-278 226-226-56-58-170 170-86-84-56 56 142 142Z"
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "svg",
                  {
                    className: "rounded-l-lg min-h-[80px] min-w-[80px]",
                    width: "80",
                    height: "80",
                    viewBox: "0 0 80 81",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "rect",
                        {
                          width: "80",
                          height: "80",
                          transform: "translate(0 0.550781)",
                          fill: "#08090B"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "path",
                        {
                          d: "M52.3627 30.187L50.5506 37.9909L48.2331 28.5753L40.1133 25.3689L37.9178 34.8015L35.9836 23.7402L27.8638 20.5508L19.5 56.5508H28.3691L30.9305 45.4895L32.8646 56.5508H41.7512L43.9292 47.1182L46.2467 56.5508H55.1158L60.5 33.3764L52.3627 30.187Z",
                          fill: "white"
                        }
                      )
                    ]
                  }
                )
              ] }),
              viewingToken.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "img",
                  {
                    onClick: () => "url" in viewingToken.token && viewingToken.token.url.length && viewingToken.token.url.includes("https") ? setFullScreenView(true) : null,
                    className: "max-w-[80px] max-h-[80px] w-[80px] h-[80px] rounded-l-lg min-h-[80px] min-w-[80px] ".concat("url" in viewingToken.token && viewingToken.token.url.length && viewingToken.token.url.includes("https") ? "hover:cursor-pointer hover:scale-105 temporary-pulse animate-pulse " : ""),
                    alt: "token-icon",
                    src: "url" in viewingToken.token && viewingToken.token.url.length ? viewingToken.token.url : "https://robohash.org/".concat(viewingToken.tokenid)
                  }
                ),
                viewingToken.tokenid !== "0x00" && viewingToken.token.webvalidate && viewingToken.token.webvalidate.length && /* @__PURE__ */ jsxRuntimeExports.jsx(NFTAuthenticity, { tokenid: viewingToken.tokenid })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "my-auto overflow-x-hidden", children: [
                viewingToken.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "text-lg font-bold text-black", children: "Minima" }),
                viewingToken.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "text-lg font-bold text-black truncate", children: viewingToken && "name" in viewingToken.token ? viewingToken.token.name : "Name not available" }),
                viewingToken.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-black", children: "MINIMA" }),
                viewingToken.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  viewingToken && "ticker" in viewingToken.token && !!viewingToken.token.ticker.length && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-black", children: viewingToken.token.ticker }),
                  viewingToken && "ticker" in viewingToken.token && !viewingToken.token.ticker.length && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-4 bg-white rounded-full dark:bg-white max-w-[360px] text-black" })
                ] })
              ] })
            ] }),
            content: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-4 divide-solid divide-y-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col divide-solid divide-y-2", children: [
                viewingToken.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Name", value: viewingToken.token }),
                viewingToken.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    title: "Name",
                    value: viewingToken.token.name ? viewingToken.token.name : "N/A"
                  }
                ),
                viewingToken.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Description", value: "Minima's Official Token" }),
                viewingToken.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    title: "Description",
                    value: viewingToken.token.description ? viewingToken.token.description : "N/A"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Token ID", value: viewingToken.tokenid, clipboard: true }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    title: "Total Minted",
                    value: makeMinimaNumber(viewingToken.total, 2e3)
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    title: "Total Coins",
                    value: makeMinimaNumber(viewingToken.coins, 2e3)
                  }
                ),
                viewingToken.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    help: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "p-4 bg-black text-white rounded-lg animate-fadeIn text-sm", children: [
                      "A web validated token would mean that the tokenid of this token was put in a public .txt file on a URL you have provided after minting was successful. If valid it will display",
                      " ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "svg",
                        {
                          className: "fill-green-400 inline",
                          xmlns: "http://www.w3.org/2000/svg",
                          height: "16",
                          viewBox: "0 -960 960 960",
                          width: "16",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m438-338 226-226-57-57-169 169-84-84-57 57 141 141Zm42 258q-139-35-229.5-159.5T160-516v-244l320-120 320 120v244q0 152-90.5 276.5T480-80Zm0-84q104-33 172-132t68-220v-189l-240-90-240 90v189q0 121 68 220t172 132Zm0-316Z" })
                        }
                      ),
                      " ",
                      "and if invalid",
                      " ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "svg",
                        {
                          className: "fill-red-700 inline",
                          xmlns: "http://www.w3.org/2000/svg",
                          height: "16",
                          viewBox: "0 -960 960 960",
                          width: "16",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M200-120v-680h360l16 80h224v400H520l-16-80H280v280h-80Zm300-440Zm86 160h134v-240H510l-16-80H280v240h290l16 80Z" })
                        }
                      ),
                      " ",
                      "on the token's icon."
                    ] }),
                    title: "Web validation",
                    value: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: viewingToken.token.tokenid !== "0x00" && viewingToken.token.webvalidate && !!viewingToken.token.webvalidate.length ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "a",
                      {
                        className: "hover:cursor-pointer text-blue-400 hover:underline break-all",
                        href: viewingToken.token.webvalidate,
                        target: "_blank",
                        children: viewingToken.token.webvalidate
                      }
                    ) : "N/A" })
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col divide-solid divide-y-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    title: "Sendable",
                    value: makeMinimaNumber(viewingToken.sendable, 2e3)
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    title: "Confirmed",
                    value: makeMinimaNumber(viewingToken.confirmed, 2e3)
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    title: "Unconfirmed",
                    value: makeMinimaNumber(viewingToken.unconfirmed, 2e3)
                  }
                )
              ] })
            ] }) })
          }
        )
      ] })
    }
  );
};
var isArray$b = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
var hasElementType = typeof Element !== "undefined";
function equal(a4, b3) {
  if (a4 === b3)
    return true;
  if (a4 && b3 && typeof a4 == "object" && typeof b3 == "object") {
    var arrA = isArray$b(a4), arrB = isArray$b(b3), i3, length2, key2;
    if (arrA && arrB) {
      length2 = a4.length;
      if (length2 != b3.length)
        return false;
      for (i3 = length2; i3-- !== 0; )
        if (!equal(a4[i3], b3[i3]))
          return false;
      return true;
    }
    if (arrA != arrB)
      return false;
    var dateA = a4 instanceof Date, dateB = b3 instanceof Date;
    if (dateA != dateB)
      return false;
    if (dateA && dateB)
      return a4.getTime() == b3.getTime();
    var regexpA = a4 instanceof RegExp, regexpB = b3 instanceof RegExp;
    if (regexpA != regexpB)
      return false;
    if (regexpA && regexpB)
      return a4.toString() == b3.toString();
    var keys2 = keyList(a4);
    length2 = keys2.length;
    if (length2 !== keyList(b3).length)
      return false;
    for (i3 = length2; i3-- !== 0; )
      if (!hasProp.call(b3, keys2[i3]))
        return false;
    if (hasElementType && a4 instanceof Element && b3 instanceof Element)
      return a4 === b3;
    for (i3 = length2; i3-- !== 0; ) {
      key2 = keys2[i3];
      if (key2 === "_owner" && a4.$$typeof) {
        continue;
      } else {
        if (!equal(a4[key2], b3[key2]))
          return false;
      }
    }
    return true;
  }
  return a4 !== a4 && b3 !== b3;
}
var reactFastCompare = function exportedEqual(a4, b3) {
  try {
    return equal(a4, b3);
  } catch (error) {
    if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
      console.warn("Warning: react-fast-compare does not handle circular references.", error.name, error.message);
      return false;
    }
    throw error;
  }
};
const isEqual = /* @__PURE__ */ getDefaultExportFromCjs(reactFastCompare);
var isMergeableObject = function isMergeableObject3(value2) {
  return isNonNullObject(value2) && !isSpecial(value2);
};
function isNonNullObject(value2) {
  return !!value2 && typeof value2 === "object";
}
function isSpecial(value2) {
  var stringValue = Object.prototype.toString.call(value2);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value2);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value2) {
  return value2.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val2) {
  return Array.isArray(val2) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value2, options) {
  return options.clone !== false && options.isMergeableObject(value2) ? deepmerge(emptyTarget(value2), value2, options) : value2;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function mergeObject(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    Object.keys(target).forEach(function(key2) {
      destination[key2] = cloneUnlessOtherwiseSpecified(target[key2], options);
    });
  }
  Object.keys(source).forEach(function(key2) {
    if (!options.isMergeableObject(source[key2]) || !target[key2]) {
      destination[key2] = cloneUnlessOtherwiseSpecified(source[key2], options);
    } else {
      destination[key2] = deepmerge(target[key2], source[key2], options);
    }
  });
  return destination;
}
function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
deepmerge.all = function deepmergeAll2(array2, options) {
  if (!Array.isArray(array2)) {
    throw new Error("first argument should be an array");
  }
  return array2.reduce(function(prev2, next2) {
    return deepmerge(prev2, next2, options);
  }, {});
};
var deepmerge_1 = deepmerge;
var freeGlobal$2 = typeof global == "object" && global && global.Object === Object && global;
const freeGlobal$3 = freeGlobal$2;
var freeSelf$1 = typeof self == "object" && self && self.Object === Object && self;
var root$9 = freeGlobal$3 || freeSelf$1 || Function("return this")();
const root$a = root$9;
var Symbol$6 = root$a.Symbol;
const Symbol$7 = Symbol$6;
var objectProto$q = Object.prototype;
var hasOwnProperty$k = objectProto$q.hasOwnProperty;
var nativeObjectToString$3 = objectProto$q.toString;
var symToStringTag$3 = Symbol$7 ? Symbol$7.toStringTag : void 0;
function getRawTag$2(value2) {
  var isOwn = hasOwnProperty$k.call(value2, symToStringTag$3), tag2 = value2[symToStringTag$3];
  try {
    value2[symToStringTag$3] = void 0;
    var unmasked = true;
  } catch (e3) {
  }
  var result2 = nativeObjectToString$3.call(value2);
  if (unmasked) {
    if (isOwn) {
      value2[symToStringTag$3] = tag2;
    } else {
      delete value2[symToStringTag$3];
    }
  }
  return result2;
}
var objectProto$p = Object.prototype;
var nativeObjectToString$2 = objectProto$p.toString;
function objectToString$2(value2) {
  return nativeObjectToString$2.call(value2);
}
var nullTag$1 = "[object Null]", undefinedTag$1 = "[object Undefined]";
var symToStringTag$2 = Symbol$7 ? Symbol$7.toStringTag : void 0;
function baseGetTag$6(value2) {
  if (value2 == null) {
    return value2 === void 0 ? undefinedTag$1 : nullTag$1;
  }
  return symToStringTag$2 && symToStringTag$2 in Object(value2) ? getRawTag$2(value2) : objectToString$2(value2);
}
function overArg$2(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var getPrototype = overArg$2(Object.getPrototypeOf, Object);
const getPrototype$1 = getPrototype;
function isObjectLike$6(value2) {
  return value2 != null && typeof value2 == "object";
}
var objectTag$6 = "[object Object]";
var funcProto$4 = Function.prototype, objectProto$o = Object.prototype;
var funcToString$4 = funcProto$4.toString;
var hasOwnProperty$j = objectProto$o.hasOwnProperty;
var objectCtorString = funcToString$4.call(Object);
function isPlainObject(value2) {
  if (!isObjectLike$6(value2) || baseGetTag$6(value2) != objectTag$6) {
    return false;
  }
  var proto2 = getPrototype$1(value2);
  if (proto2 === null) {
    return true;
  }
  var Ctor = hasOwnProperty$j.call(proto2, "constructor") && proto2.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString$4.call(Ctor) == objectCtorString;
}
function listCacheClear$2() {
  this.__data__ = [];
  this.size = 0;
}
function eq$3(value2, other) {
  return value2 === other || value2 !== value2 && other !== other;
}
function assocIndexOf$5(array2, key2) {
  var length2 = array2.length;
  while (length2--) {
    if (eq$3(array2[length2][0], key2)) {
      return length2;
    }
  }
  return -1;
}
var arrayProto$1 = Array.prototype;
var splice$1 = arrayProto$1.splice;
function listCacheDelete$2(key2) {
  var data2 = this.__data__, index2 = assocIndexOf$5(data2, key2);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data2.length - 1;
  if (index2 == lastIndex) {
    data2.pop();
  } else {
    splice$1.call(data2, index2, 1);
  }
  --this.size;
  return true;
}
function listCacheGet$2(key2) {
  var data2 = this.__data__, index2 = assocIndexOf$5(data2, key2);
  return index2 < 0 ? void 0 : data2[index2][1];
}
function listCacheHas$2(key2) {
  return assocIndexOf$5(this.__data__, key2) > -1;
}
function listCacheSet$2(key2, value2) {
  var data2 = this.__data__, index2 = assocIndexOf$5(data2, key2);
  if (index2 < 0) {
    ++this.size;
    data2.push([key2, value2]);
  } else {
    data2[index2][1] = value2;
  }
  return this;
}
function ListCache$5(entries) {
  var index2 = -1, length2 = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length2) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
ListCache$5.prototype.clear = listCacheClear$2;
ListCache$5.prototype["delete"] = listCacheDelete$2;
ListCache$5.prototype.get = listCacheGet$2;
ListCache$5.prototype.has = listCacheHas$2;
ListCache$5.prototype.set = listCacheSet$2;
function stackClear$2() {
  this.__data__ = new ListCache$5();
  this.size = 0;
}
function stackDelete$2(key2) {
  var data2 = this.__data__, result2 = data2["delete"](key2);
  this.size = data2.size;
  return result2;
}
function stackGet$2(key2) {
  return this.__data__.get(key2);
}
function stackHas$2(key2) {
  return this.__data__.has(key2);
}
function isObject$6(value2) {
  var type = typeof value2;
  return value2 != null && (type == "object" || type == "function");
}
var asyncTag$1 = "[object AsyncFunction]", funcTag$4 = "[object Function]", genTag$2 = "[object GeneratorFunction]", proxyTag$1 = "[object Proxy]";
function isFunction$4(value2) {
  if (!isObject$6(value2)) {
    return false;
  }
  var tag2 = baseGetTag$6(value2);
  return tag2 == funcTag$4 || tag2 == genTag$2 || tag2 == asyncTag$1 || tag2 == proxyTag$1;
}
var coreJsData$2 = root$a["__core-js_shared__"];
const coreJsData$3 = coreJsData$2;
var maskSrcKey$1 = function() {
  var uid = /[^.]+$/.exec(coreJsData$3 && coreJsData$3.keys && coreJsData$3.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked$2(func) {
  return !!maskSrcKey$1 && maskSrcKey$1 in func;
}
var funcProto$3 = Function.prototype;
var funcToString$3 = funcProto$3.toString;
function toSource$3(func) {
  if (func != null) {
    try {
      return funcToString$3.call(func);
    } catch (e3) {
    }
    try {
      return func + "";
    } catch (e3) {
    }
  }
  return "";
}
var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;
var funcProto$2 = Function.prototype, objectProto$n = Object.prototype;
var funcToString$2 = funcProto$2.toString;
var hasOwnProperty$i = objectProto$n.hasOwnProperty;
var reIsNative$1 = RegExp(
  "^" + funcToString$2.call(hasOwnProperty$i).replace(reRegExpChar$1, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative$2(value2) {
  if (!isObject$6(value2) || isMasked$2(value2)) {
    return false;
  }
  var pattern = isFunction$4(value2) ? reIsNative$1 : reIsHostCtor$1;
  return pattern.test(toSource$3(value2));
}
function getValue$2(object2, key2) {
  return object2 == null ? void 0 : object2[key2];
}
function getNative$8(object2, key2) {
  var value2 = getValue$2(object2, key2);
  return baseIsNative$2(value2) ? value2 : void 0;
}
var Map$5 = getNative$8(root$a, "Map");
const Map$6 = Map$5;
var nativeCreate$5 = getNative$8(Object, "create");
const nativeCreate$6 = nativeCreate$5;
function hashClear$2() {
  this.__data__ = nativeCreate$6 ? nativeCreate$6(null) : {};
  this.size = 0;
}
function hashDelete$2(key2) {
  var result2 = this.has(key2) && delete this.__data__[key2];
  this.size -= result2 ? 1 : 0;
  return result2;
}
var HASH_UNDEFINED$4 = "__lodash_hash_undefined__";
var objectProto$m = Object.prototype;
var hasOwnProperty$h = objectProto$m.hasOwnProperty;
function hashGet$2(key2) {
  var data2 = this.__data__;
  if (nativeCreate$6) {
    var result2 = data2[key2];
    return result2 === HASH_UNDEFINED$4 ? void 0 : result2;
  }
  return hasOwnProperty$h.call(data2, key2) ? data2[key2] : void 0;
}
var objectProto$l = Object.prototype;
var hasOwnProperty$g = objectProto$l.hasOwnProperty;
function hashHas$2(key2) {
  var data2 = this.__data__;
  return nativeCreate$6 ? data2[key2] !== void 0 : hasOwnProperty$g.call(data2, key2);
}
var HASH_UNDEFINED$3 = "__lodash_hash_undefined__";
function hashSet$2(key2, value2) {
  var data2 = this.__data__;
  this.size += this.has(key2) ? 0 : 1;
  data2[key2] = nativeCreate$6 && value2 === void 0 ? HASH_UNDEFINED$3 : value2;
  return this;
}
function Hash$2(entries) {
  var index2 = -1, length2 = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length2) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
Hash$2.prototype.clear = hashClear$2;
Hash$2.prototype["delete"] = hashDelete$2;
Hash$2.prototype.get = hashGet$2;
Hash$2.prototype.has = hashHas$2;
Hash$2.prototype.set = hashSet$2;
function mapCacheClear$2() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash$2(),
    "map": new (Map$6 || ListCache$5)(),
    "string": new Hash$2()
  };
}
function isKeyable$2(value2) {
  var type = typeof value2;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
}
function getMapData$5(map2, key2) {
  var data2 = map2.__data__;
  return isKeyable$2(key2) ? data2[typeof key2 == "string" ? "string" : "hash"] : data2.map;
}
function mapCacheDelete$2(key2) {
  var result2 = getMapData$5(this, key2)["delete"](key2);
  this.size -= result2 ? 1 : 0;
  return result2;
}
function mapCacheGet$2(key2) {
  return getMapData$5(this, key2).get(key2);
}
function mapCacheHas$2(key2) {
  return getMapData$5(this, key2).has(key2);
}
function mapCacheSet$2(key2, value2) {
  var data2 = getMapData$5(this, key2), size = data2.size;
  data2.set(key2, value2);
  this.size += data2.size == size ? 0 : 1;
  return this;
}
function MapCache$4(entries) {
  var index2 = -1, length2 = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length2) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
MapCache$4.prototype.clear = mapCacheClear$2;
MapCache$4.prototype["delete"] = mapCacheDelete$2;
MapCache$4.prototype.get = mapCacheGet$2;
MapCache$4.prototype.has = mapCacheHas$2;
MapCache$4.prototype.set = mapCacheSet$2;
var LARGE_ARRAY_SIZE$1 = 200;
function stackSet$2(key2, value2) {
  var data2 = this.__data__;
  if (data2 instanceof ListCache$5) {
    var pairs = data2.__data__;
    if (!Map$6 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
      pairs.push([key2, value2]);
      this.size = ++data2.size;
      return this;
    }
    data2 = this.__data__ = new MapCache$4(pairs);
  }
  data2.set(key2, value2);
  this.size = data2.size;
  return this;
}
function Stack$3(entries) {
  var data2 = this.__data__ = new ListCache$5(entries);
  this.size = data2.size;
}
Stack$3.prototype.clear = stackClear$2;
Stack$3.prototype["delete"] = stackDelete$2;
Stack$3.prototype.get = stackGet$2;
Stack$3.prototype.has = stackHas$2;
Stack$3.prototype.set = stackSet$2;
function arrayEach(array2, iteratee) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length;
  while (++index2 < length2) {
    if (iteratee(array2[index2], index2, array2) === false) {
      break;
    }
  }
  return array2;
}
var defineProperty$2 = function() {
  try {
    var func = getNative$8(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e3) {
  }
}();
const defineProperty$3 = defineProperty$2;
function baseAssignValue$3(object2, key2, value2) {
  if (key2 == "__proto__" && defineProperty$3) {
    defineProperty$3(object2, key2, {
      "configurable": true,
      "enumerable": true,
      "value": value2,
      "writable": true
    });
  } else {
    object2[key2] = value2;
  }
}
var objectProto$k = Object.prototype;
var hasOwnProperty$f = objectProto$k.hasOwnProperty;
function assignValue(object2, key2, value2) {
  var objValue = object2[key2];
  if (!(hasOwnProperty$f.call(object2, key2) && eq$3(objValue, value2)) || value2 === void 0 && !(key2 in object2)) {
    baseAssignValue$3(object2, key2, value2);
  }
}
function copyObject(source, props, object2, customizer) {
  var isNew = !object2;
  object2 || (object2 = {});
  var index2 = -1, length2 = props.length;
  while (++index2 < length2) {
    var key2 = props[index2];
    var newValue = customizer ? customizer(object2[key2], source[key2], key2, object2, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key2];
    }
    if (isNew) {
      baseAssignValue$3(object2, key2, newValue);
    } else {
      assignValue(object2, key2, newValue);
    }
  }
  return object2;
}
function baseTimes$2(n2, iteratee) {
  var index2 = -1, result2 = Array(n2);
  while (++index2 < n2) {
    result2[index2] = iteratee(index2);
  }
  return result2;
}
var argsTag$5 = "[object Arguments]";
function baseIsArguments$2(value2) {
  return isObjectLike$6(value2) && baseGetTag$6(value2) == argsTag$5;
}
var objectProto$j = Object.prototype;
var hasOwnProperty$e = objectProto$j.hasOwnProperty;
var propertyIsEnumerable$3 = objectProto$j.propertyIsEnumerable;
var isArguments$3 = baseIsArguments$2(function() {
  return arguments;
}()) ? baseIsArguments$2 : function(value2) {
  return isObjectLike$6(value2) && hasOwnProperty$e.call(value2, "callee") && !propertyIsEnumerable$3.call(value2, "callee");
};
const isArguments$4 = isArguments$3;
var isArray$9 = Array.isArray;
const isArray$a = isArray$9;
function stubFalse$1() {
  return false;
}
var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
var Buffer$2 = moduleExports$2 ? root$a.Buffer : void 0;
var nativeIsBuffer = Buffer$2 ? Buffer$2.isBuffer : void 0;
var isBuffer$3 = nativeIsBuffer || stubFalse$1;
const isBuffer$4 = isBuffer$3;
var MAX_SAFE_INTEGER$3 = 9007199254740991;
var reIsUint$1 = /^(?:0|[1-9]\d*)$/;
function isIndex$3(value2, length2) {
  var type = typeof value2;
  length2 = length2 == null ? MAX_SAFE_INTEGER$3 : length2;
  return !!length2 && (type == "number" || type != "symbol" && reIsUint$1.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
}
var MAX_SAFE_INTEGER$2 = 9007199254740991;
function isLength$4(value2) {
  return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER$2;
}
var argsTag$4 = "[object Arguments]", arrayTag$3 = "[object Array]", boolTag$4 = "[object Boolean]", dateTag$4 = "[object Date]", errorTag$3 = "[object Error]", funcTag$3 = "[object Function]", mapTag$7 = "[object Map]", numberTag$4 = "[object Number]", objectTag$5 = "[object Object]", regexpTag$4 = "[object RegExp]", setTag$7 = "[object Set]", stringTag$4 = "[object String]", weakMapTag$4 = "[object WeakMap]";
var arrayBufferTag$4 = "[object ArrayBuffer]", dataViewTag$6 = "[object DataView]", float32Tag$3 = "[object Float32Array]", float64Tag$3 = "[object Float64Array]", int8Tag$3 = "[object Int8Array]", int16Tag$3 = "[object Int16Array]", int32Tag$3 = "[object Int32Array]", uint8Tag$3 = "[object Uint8Array]", uint8ClampedTag$3 = "[object Uint8ClampedArray]", uint16Tag$3 = "[object Uint16Array]", uint32Tag$3 = "[object Uint32Array]";
var typedArrayTags$1 = {};
typedArrayTags$1[float32Tag$3] = typedArrayTags$1[float64Tag$3] = typedArrayTags$1[int8Tag$3] = typedArrayTags$1[int16Tag$3] = typedArrayTags$1[int32Tag$3] = typedArrayTags$1[uint8Tag$3] = typedArrayTags$1[uint8ClampedTag$3] = typedArrayTags$1[uint16Tag$3] = typedArrayTags$1[uint32Tag$3] = true;
typedArrayTags$1[argsTag$4] = typedArrayTags$1[arrayTag$3] = typedArrayTags$1[arrayBufferTag$4] = typedArrayTags$1[boolTag$4] = typedArrayTags$1[dataViewTag$6] = typedArrayTags$1[dateTag$4] = typedArrayTags$1[errorTag$3] = typedArrayTags$1[funcTag$3] = typedArrayTags$1[mapTag$7] = typedArrayTags$1[numberTag$4] = typedArrayTags$1[objectTag$5] = typedArrayTags$1[regexpTag$4] = typedArrayTags$1[setTag$7] = typedArrayTags$1[stringTag$4] = typedArrayTags$1[weakMapTag$4] = false;
function baseIsTypedArray$2(value2) {
  return isObjectLike$6(value2) && isLength$4(value2.length) && !!typedArrayTags$1[baseGetTag$6(value2)];
}
function baseUnary$2(func) {
  return function(value2) {
    return func(value2);
  };
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
var freeProcess = moduleExports$1 && freeGlobal$3.process;
var nodeUtil$1 = function() {
  try {
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e3) {
  }
}();
const nodeUtil$2 = nodeUtil$1;
var nodeIsTypedArray$1 = nodeUtil$2 && nodeUtil$2.isTypedArray;
var isTypedArray$3 = nodeIsTypedArray$1 ? baseUnary$2(nodeIsTypedArray$1) : baseIsTypedArray$2;
const isTypedArray$4 = isTypedArray$3;
var objectProto$i = Object.prototype;
var hasOwnProperty$d = objectProto$i.hasOwnProperty;
function arrayLikeKeys$2(value2, inherited) {
  var isArr = isArray$a(value2), isArg = !isArr && isArguments$4(value2), isBuff = !isArr && !isArg && isBuffer$4(value2), isType = !isArr && !isArg && !isBuff && isTypedArray$4(value2), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes$2(value2.length, String) : [], length2 = result2.length;
  for (var key2 in value2) {
    if ((inherited || hasOwnProperty$d.call(value2, key2)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
    isIndex$3(key2, length2)))) {
      result2.push(key2);
    }
  }
  return result2;
}
var objectProto$h = Object.prototype;
function isPrototype$2(value2) {
  var Ctor = value2 && value2.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$h;
  return value2 === proto2;
}
var nativeKeys$2 = overArg$2(Object.keys, Object);
const nativeKeys$3 = nativeKeys$2;
var objectProto$g = Object.prototype;
var hasOwnProperty$c = objectProto$g.hasOwnProperty;
function baseKeys$2(object2) {
  if (!isPrototype$2(object2)) {
    return nativeKeys$3(object2);
  }
  var result2 = [];
  for (var key2 in Object(object2)) {
    if (hasOwnProperty$c.call(object2, key2) && key2 != "constructor") {
      result2.push(key2);
    }
  }
  return result2;
}
function isArrayLike$2(value2) {
  return value2 != null && isLength$4(value2.length) && !isFunction$4(value2);
}
function keys$4(object2) {
  return isArrayLike$2(object2) ? arrayLikeKeys$2(object2) : baseKeys$2(object2);
}
function baseAssign(object2, source) {
  return object2 && copyObject(source, keys$4(source), object2);
}
function nativeKeysIn(object2) {
  var result2 = [];
  if (object2 != null) {
    for (var key2 in Object(object2)) {
      result2.push(key2);
    }
  }
  return result2;
}
var objectProto$f = Object.prototype;
var hasOwnProperty$b = objectProto$f.hasOwnProperty;
function baseKeysIn(object2) {
  if (!isObject$6(object2)) {
    return nativeKeysIn(object2);
  }
  var isProto = isPrototype$2(object2), result2 = [];
  for (var key2 in object2) {
    if (!(key2 == "constructor" && (isProto || !hasOwnProperty$b.call(object2, key2)))) {
      result2.push(key2);
    }
  }
  return result2;
}
function keysIn(object2) {
  return isArrayLike$2(object2) ? arrayLikeKeys$2(object2, true) : baseKeysIn(object2);
}
function baseAssignIn(object2, source) {
  return object2 && copyObject(source, keysIn(source), object2);
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer$1 = moduleExports ? root$a.Buffer : void 0, allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : void 0;
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length2 = buffer.length, result2 = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
  buffer.copy(result2);
  return result2;
}
function copyArray(source, array2) {
  var index2 = -1, length2 = source.length;
  array2 || (array2 = Array(length2));
  while (++index2 < length2) {
    array2[index2] = source[index2];
  }
  return array2;
}
function arrayFilter$2(array2, predicate) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result2 = [];
  while (++index2 < length2) {
    var value2 = array2[index2];
    if (predicate(value2, index2, array2)) {
      result2[resIndex++] = value2;
    }
  }
  return result2;
}
function stubArray$2() {
  return [];
}
var objectProto$e = Object.prototype;
var propertyIsEnumerable$2 = objectProto$e.propertyIsEnumerable;
var nativeGetSymbols$2 = Object.getOwnPropertySymbols;
var getSymbols$2 = !nativeGetSymbols$2 ? stubArray$2 : function(object2) {
  if (object2 == null) {
    return [];
  }
  object2 = Object(object2);
  return arrayFilter$2(nativeGetSymbols$2(object2), function(symbol) {
    return propertyIsEnumerable$2.call(object2, symbol);
  });
};
const getSymbols$3 = getSymbols$2;
function copySymbols(source, object2) {
  return copyObject(source, getSymbols$3(source), object2);
}
function arrayPush$2(array2, values2) {
  var index2 = -1, length2 = values2.length, offset = array2.length;
  while (++index2 < length2) {
    array2[offset + index2] = values2[index2];
  }
  return array2;
}
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols$1 ? stubArray$2 : function(object2) {
  var result2 = [];
  while (object2) {
    arrayPush$2(result2, getSymbols$3(object2));
    object2 = getPrototype$1(object2);
  }
  return result2;
};
const getSymbolsIn$1 = getSymbolsIn;
function copySymbolsIn(source, object2) {
  return copyObject(source, getSymbolsIn$1(source), object2);
}
function baseGetAllKeys$2(object2, keysFunc, symbolsFunc) {
  var result2 = keysFunc(object2);
  return isArray$a(object2) ? result2 : arrayPush$2(result2, symbolsFunc(object2));
}
function getAllKeys$2(object2) {
  return baseGetAllKeys$2(object2, keys$4, getSymbols$3);
}
function getAllKeysIn(object2) {
  return baseGetAllKeys$2(object2, keysIn, getSymbolsIn$1);
}
var DataView$2 = getNative$8(root$a, "DataView");
const DataView$3 = DataView$2;
var Promise$3 = getNative$8(root$a, "Promise");
const Promise$4 = Promise$3;
var Set$3 = getNative$8(root$a, "Set");
const Set$4 = Set$3;
var WeakMap$3 = getNative$8(root$a, "WeakMap");
const WeakMap$4 = WeakMap$3;
var mapTag$6 = "[object Map]", objectTag$4 = "[object Object]", promiseTag$1 = "[object Promise]", setTag$6 = "[object Set]", weakMapTag$3 = "[object WeakMap]";
var dataViewTag$5 = "[object DataView]";
var dataViewCtorString$1 = toSource$3(DataView$3), mapCtorString$1 = toSource$3(Map$6), promiseCtorString$1 = toSource$3(Promise$4), setCtorString$1 = toSource$3(Set$4), weakMapCtorString$1 = toSource$3(WeakMap$4);
var getTag$2 = baseGetTag$6;
if (DataView$3 && getTag$2(new DataView$3(new ArrayBuffer(1))) != dataViewTag$5 || Map$6 && getTag$2(new Map$6()) != mapTag$6 || Promise$4 && getTag$2(Promise$4.resolve()) != promiseTag$1 || Set$4 && getTag$2(new Set$4()) != setTag$6 || WeakMap$4 && getTag$2(new WeakMap$4()) != weakMapTag$3) {
  getTag$2 = function(value2) {
    var result2 = baseGetTag$6(value2), Ctor = result2 == objectTag$4 ? value2.constructor : void 0, ctorString = Ctor ? toSource$3(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString$1:
          return dataViewTag$5;
        case mapCtorString$1:
          return mapTag$6;
        case promiseCtorString$1:
          return promiseTag$1;
        case setCtorString$1:
          return setTag$6;
        case weakMapCtorString$1:
          return weakMapTag$3;
      }
    }
    return result2;
  };
}
const getTag$3 = getTag$2;
var objectProto$d = Object.prototype;
var hasOwnProperty$a = objectProto$d.hasOwnProperty;
function initCloneArray(array2) {
  var length2 = array2.length, result2 = new array2.constructor(length2);
  if (length2 && typeof array2[0] == "string" && hasOwnProperty$a.call(array2, "index")) {
    result2.index = array2.index;
    result2.input = array2.input;
  }
  return result2;
}
var Uint8Array$3 = root$a.Uint8Array;
const Uint8Array$4 = Uint8Array$3;
function cloneArrayBuffer(arrayBuffer) {
  var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$4(result2).set(new Uint8Array$4(arrayBuffer));
  return result2;
}
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var reFlags = /\w*$/;
function cloneRegExp(regexp) {
  var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result2.lastIndex = regexp.lastIndex;
  return result2;
}
var symbolProto$3 = Symbol$7 ? Symbol$7.prototype : void 0, symbolValueOf$1 = symbolProto$3 ? symbolProto$3.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", symbolTag$4 = "[object Symbol]";
var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
function initCloneByTag(object2, tag2, isDeep) {
  var Ctor = object2.constructor;
  switch (tag2) {
    case arrayBufferTag$3:
      return cloneArrayBuffer(object2);
    case boolTag$3:
    case dateTag$3:
      return new Ctor(+object2);
    case dataViewTag$4:
      return cloneDataView(object2, isDeep);
    case float32Tag$2:
    case float64Tag$2:
    case int8Tag$2:
    case int16Tag$2:
    case int32Tag$2:
    case uint8Tag$2:
    case uint8ClampedTag$2:
    case uint16Tag$2:
    case uint32Tag$2:
      return cloneTypedArray(object2, isDeep);
    case mapTag$5:
      return new Ctor();
    case numberTag$3:
    case stringTag$3:
      return new Ctor(object2);
    case regexpTag$3:
      return cloneRegExp(object2);
    case setTag$5:
      return new Ctor();
    case symbolTag$4:
      return cloneSymbol(object2);
  }
}
var objectCreate = Object.create;
var baseCreate = function() {
  function object2() {
  }
  return function(proto2) {
    if (!isObject$6(proto2)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto2);
    }
    object2.prototype = proto2;
    var result2 = new object2();
    object2.prototype = void 0;
    return result2;
  };
}();
const baseCreate$1 = baseCreate;
function initCloneObject(object2) {
  return typeof object2.constructor == "function" && !isPrototype$2(object2) ? baseCreate$1(getPrototype$1(object2)) : {};
}
var mapTag$4 = "[object Map]";
function baseIsMap(value2) {
  return isObjectLike$6(value2) && getTag$3(value2) == mapTag$4;
}
var nodeIsMap = nodeUtil$2 && nodeUtil$2.isMap;
var isMap = nodeIsMap ? baseUnary$2(nodeIsMap) : baseIsMap;
const isMap$1 = isMap;
var setTag$4 = "[object Set]";
function baseIsSet(value2) {
  return isObjectLike$6(value2) && getTag$3(value2) == setTag$4;
}
var nodeIsSet = nodeUtil$2 && nodeUtil$2.isSet;
var isSet = nodeIsSet ? baseUnary$2(nodeIsSet) : baseIsSet;
const isSet$1 = isSet;
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
var argsTag$3 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", errorTag$2 = "[object Error]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", objectTag$3 = "[object Object]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$3 = "[object Symbol]", weakMapTag$2 = "[object WeakMap]";
var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$3 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] = cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] = cloneableTags[boolTag$2] = cloneableTags[dateTag$2] = cloneableTags[float32Tag$1] = cloneableTags[float64Tag$1] = cloneableTags[int8Tag$1] = cloneableTags[int16Tag$1] = cloneableTags[int32Tag$1] = cloneableTags[mapTag$3] = cloneableTags[numberTag$2] = cloneableTags[objectTag$3] = cloneableTags[regexpTag$2] = cloneableTags[setTag$3] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$3] = cloneableTags[uint8Tag$1] = cloneableTags[uint8ClampedTag$1] = cloneableTags[uint16Tag$1] = cloneableTags[uint32Tag$1] = true;
cloneableTags[errorTag$2] = cloneableTags[funcTag$2] = cloneableTags[weakMapTag$2] = false;
function baseClone$1(value2, bitmask, customizer, key2, object2, stack) {
  var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
  if (customizer) {
    result2 = object2 ? customizer(value2, key2, object2, stack) : customizer(value2);
  }
  if (result2 !== void 0) {
    return result2;
  }
  if (!isObject$6(value2)) {
    return value2;
  }
  var isArr = isArray$a(value2);
  if (isArr) {
    result2 = initCloneArray(value2);
    if (!isDeep) {
      return copyArray(value2, result2);
    }
  } else {
    var tag2 = getTag$3(value2), isFunc = tag2 == funcTag$2 || tag2 == genTag$1;
    if (isBuffer$4(value2)) {
      return cloneBuffer(value2, isDeep);
    }
    if (tag2 == objectTag$3 || tag2 == argsTag$3 || isFunc && !object2) {
      result2 = isFlat || isFunc ? {} : initCloneObject(value2);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value2, baseAssignIn(result2, value2)) : copySymbols(value2, baseAssign(result2, value2));
      }
    } else {
      if (!cloneableTags[tag2]) {
        return object2 ? value2 : {};
      }
      result2 = initCloneByTag(value2, tag2, isDeep);
    }
  }
  stack || (stack = new Stack$3());
  var stacked = stack.get(value2);
  if (stacked) {
    return stacked;
  }
  stack.set(value2, result2);
  if (isSet$1(value2)) {
    value2.forEach(function(subValue) {
      result2.add(baseClone$1(subValue, bitmask, customizer, subValue, value2, stack));
    });
  } else if (isMap$1(value2)) {
    value2.forEach(function(subValue, key3) {
      result2.set(key3, baseClone$1(subValue, bitmask, customizer, key3, value2, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys$2 : isFlat ? keysIn : keys$4;
  var props = isArr ? void 0 : keysFunc(value2);
  arrayEach(props || value2, function(subValue, key3) {
    if (props) {
      key3 = subValue;
      subValue = value2[key3];
    }
    assignValue(result2, key3, baseClone$1(subValue, bitmask, customizer, key3, value2, stack));
  });
  return result2;
}
var CLONE_SYMBOLS_FLAG = 4;
function clone$1(value2) {
  return baseClone$1(value2, CLONE_SYMBOLS_FLAG);
}
function arrayMap$2(array2, iteratee) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length, result2 = Array(length2);
  while (++index2 < length2) {
    result2[index2] = iteratee(array2[index2], index2, array2);
  }
  return result2;
}
var symbolTag$2 = "[object Symbol]";
function isSymbol$4(value2) {
  return typeof value2 == "symbol" || isObjectLike$6(value2) && baseGetTag$6(value2) == symbolTag$2;
}
var FUNC_ERROR_TEXT$1 = "Expected a function";
function memoize$2(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  var memoized = function() {
    var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key2)) {
      return cache.get(key2);
    }
    var result2 = func.apply(this, args);
    memoized.cache = cache.set(key2, result2) || cache;
    return result2;
  };
  memoized.cache = new (memoize$2.Cache || MapCache$4)();
  return memoized;
}
memoize$2.Cache = MapCache$4;
var MAX_MEMOIZE_SIZE$1 = 500;
function memoizeCapped$2(func) {
  var result2 = memoize$2(func, function(key2) {
    if (cache.size === MAX_MEMOIZE_SIZE$1) {
      cache.clear();
    }
    return key2;
  });
  var cache = result2.cache;
  return result2;
}
var rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar$1 = /\\(\\)?/g;
var stringToPath$2 = memoizeCapped$2(function(string2) {
  var result2 = [];
  if (string2.charCodeAt(0) === 46) {
    result2.push("");
  }
  string2.replace(rePropName$1, function(match2, number2, quote, subString) {
    result2.push(quote ? subString.replace(reEscapeChar$1, "$1") : number2 || match2);
  });
  return result2;
});
const stringToPath$3 = stringToPath$2;
var INFINITY$3 = 1 / 0;
function toKey$5(value2) {
  if (typeof value2 == "string" || isSymbol$4(value2)) {
    return value2;
  }
  var result2 = value2 + "";
  return result2 == "0" && 1 / value2 == -INFINITY$3 ? "-0" : result2;
}
var INFINITY$2 = 1 / 0;
var symbolProto$2 = Symbol$7 ? Symbol$7.prototype : void 0, symbolToString$2 = symbolProto$2 ? symbolProto$2.toString : void 0;
function baseToString$2(value2) {
  if (typeof value2 == "string") {
    return value2;
  }
  if (isArray$a(value2)) {
    return arrayMap$2(value2, baseToString$2) + "";
  }
  if (isSymbol$4(value2)) {
    return symbolToString$2 ? symbolToString$2.call(value2) : "";
  }
  var result2 = value2 + "";
  return result2 == "0" && 1 / value2 == -INFINITY$2 ? "-0" : result2;
}
function toString$7(value2) {
  return value2 == null ? "" : baseToString$2(value2);
}
function toPath(value2) {
  if (isArray$a(value2)) {
    return arrayMap$2(value2, toKey$5);
  }
  return isSymbol$4(value2) ? [value2] : copyArray(stringToPath$3(toString$7(value2)));
}
var isProduction = true;
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }
    var text2 = "Warning: " + message;
    if (typeof console !== "undefined") {
      console.warn(text2);
    }
    try {
      throw Error(text2);
    } catch (x3) {
    }
  }
}
function _extends$7() {
  _extends$7 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$7.apply(this, arguments);
}
function _objectWithoutPropertiesLoose$3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key2 = sourceKeys[i3];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
var isFunction$3 = function isFunction2(obj) {
  return typeof obj === "function";
};
var isObject$5 = function isObject2(obj) {
  return obj !== null && typeof obj === "object";
};
var isInteger = function isInteger2(obj) {
  return String(Math.floor(Number(obj))) === obj;
};
var isString$1 = function isString2(obj) {
  return Object.prototype.toString.call(obj) === "[object String]";
};
var isEmptyChildren = function isEmptyChildren2(children) {
  return reactExports.Children.count(children) === 0;
};
var isPromise = function isPromise2(value2) {
  return isObject$5(value2) && isFunction$3(value2.then);
};
function getIn$1(obj, key2, def, p2) {
  if (p2 === void 0) {
    p2 = 0;
  }
  var path = toPath(key2);
  while (obj && p2 < path.length) {
    obj = obj[path[p2++]];
  }
  return obj === void 0 ? def : obj;
}
function setIn(obj, path, value2) {
  var res = clone$1(obj);
  var resVal = res;
  var i3 = 0;
  var pathArray = toPath(path);
  for (; i3 < pathArray.length - 1; i3++) {
    var currentPath = pathArray[i3];
    var currentObj = getIn$1(obj, pathArray.slice(0, i3 + 1));
    if (currentObj && (isObject$5(currentObj) || Array.isArray(currentObj))) {
      resVal = resVal[currentPath] = clone$1(currentObj);
    } else {
      var nextPath = pathArray[i3 + 1];
      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};
    }
  }
  if ((i3 === 0 ? obj : resVal)[pathArray[i3]] === value2) {
    return obj;
  }
  if (value2 === void 0) {
    delete resVal[pathArray[i3]];
  } else {
    resVal[pathArray[i3]] = value2;
  }
  if (i3 === 0 && value2 === void 0) {
    delete res[pathArray[i3]];
  }
  return res;
}
function setNestedObjectValues(object2, value2, visited, response) {
  if (visited === void 0) {
    visited = /* @__PURE__ */ new WeakMap();
  }
  if (response === void 0) {
    response = {};
  }
  for (var _i = 0, _Object$keys = Object.keys(object2); _i < _Object$keys.length; _i++) {
    var k3 = _Object$keys[_i];
    var val2 = object2[k3];
    if (isObject$5(val2)) {
      if (!visited.get(val2)) {
        visited.set(val2, true);
        response[k3] = Array.isArray(val2) ? [] : {};
        setNestedObjectValues(val2, value2, visited, response[k3]);
      }
    } else {
      response[k3] = value2;
    }
  }
  return response;
}
var FormikContext = /* @__PURE__ */ reactExports.createContext(void 0);
FormikContext.displayName = "FormikContext";
var FormikProvider = FormikContext.Provider;
FormikContext.Consumer;
function useFormikContext() {
  var formik = reactExports.useContext(FormikContext);
  !!!formik ? warning(false) : void 0;
  return formik;
}
function formikReducer(state, msg) {
  switch (msg.type) {
    case "SET_VALUES":
      return _extends$7({}, state, {
        values: msg.payload
      });
    case "SET_TOUCHED":
      return _extends$7({}, state, {
        touched: msg.payload
      });
    case "SET_ERRORS":
      if (isEqual(state.errors, msg.payload)) {
        return state;
      }
      return _extends$7({}, state, {
        errors: msg.payload
      });
    case "SET_STATUS":
      return _extends$7({}, state, {
        status: msg.payload
      });
    case "SET_ISSUBMITTING":
      return _extends$7({}, state, {
        isSubmitting: msg.payload
      });
    case "SET_ISVALIDATING":
      return _extends$7({}, state, {
        isValidating: msg.payload
      });
    case "SET_FIELD_VALUE":
      return _extends$7({}, state, {
        values: setIn(state.values, msg.payload.field, msg.payload.value)
      });
    case "SET_FIELD_TOUCHED":
      return _extends$7({}, state, {
        touched: setIn(state.touched, msg.payload.field, msg.payload.value)
      });
    case "SET_FIELD_ERROR":
      return _extends$7({}, state, {
        errors: setIn(state.errors, msg.payload.field, msg.payload.value)
      });
    case "RESET_FORM":
      return _extends$7({}, state, msg.payload);
    case "SET_FORMIK_STATE":
      return msg.payload(state);
    case "SUBMIT_ATTEMPT":
      return _extends$7({}, state, {
        touched: setNestedObjectValues(state.values, true),
        isSubmitting: true,
        submitCount: state.submitCount + 1
      });
    case "SUBMIT_FAILURE":
      return _extends$7({}, state, {
        isSubmitting: false
      });
    case "SUBMIT_SUCCESS":
      return _extends$7({}, state, {
        isSubmitting: false
      });
    default:
      return state;
  }
}
var emptyErrors = {};
var emptyTouched = {};
function useFormik(_ref) {
  var _ref$validateOnChange = _ref.validateOnChange, validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange, _ref$validateOnBlur = _ref.validateOnBlur, validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur, _ref$validateOnMount = _ref.validateOnMount, validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount, isInitialValid = _ref.isInitialValid, _ref$enableReinitiali = _ref.enableReinitialize, enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali, onSubmit = _ref.onSubmit, rest = _objectWithoutPropertiesLoose$3(_ref, ["validateOnChange", "validateOnBlur", "validateOnMount", "isInitialValid", "enableReinitialize", "onSubmit"]);
  var props = _extends$7({
    validateOnChange,
    validateOnBlur,
    validateOnMount,
    onSubmit
  }, rest);
  var initialValues = reactExports.useRef(props.initialValues);
  var initialErrors = reactExports.useRef(props.initialErrors || emptyErrors);
  var initialTouched = reactExports.useRef(props.initialTouched || emptyTouched);
  var initialStatus = reactExports.useRef(props.initialStatus);
  var isMounted = reactExports.useRef(false);
  var fieldRegistry = reactExports.useRef({});
  reactExports.useEffect(function() {
    isMounted.current = true;
    return function() {
      isMounted.current = false;
    };
  }, []);
  var _React$useReducer = reactExports.useReducer(formikReducer, {
    values: props.initialValues,
    errors: props.initialErrors || emptyErrors,
    touched: props.initialTouched || emptyTouched,
    status: props.initialStatus,
    isSubmitting: false,
    isValidating: false,
    submitCount: 0
  }), state = _React$useReducer[0], dispatch = _React$useReducer[1];
  var runValidateHandler = reactExports.useCallback(function(values2, field) {
    return new Promise(function(resolve2, reject) {
      var maybePromisedErrors = props.validate(values2, field);
      if (maybePromisedErrors == null) {
        resolve2(emptyErrors);
      } else if (isPromise(maybePromisedErrors)) {
        maybePromisedErrors.then(function(errors) {
          resolve2(errors || emptyErrors);
        }, function(actualException) {
          reject(actualException);
        });
      } else {
        resolve2(maybePromisedErrors);
      }
    });
  }, [props.validate]);
  var runValidationSchema = reactExports.useCallback(function(values2, field) {
    var validationSchema2 = props.validationSchema;
    var schema = isFunction$3(validationSchema2) ? validationSchema2(field) : validationSchema2;
    var promise = field && schema.validateAt ? schema.validateAt(field, values2) : validateYupSchema(values2, schema);
    return new Promise(function(resolve2, reject) {
      promise.then(function() {
        resolve2(emptyErrors);
      }, function(err) {
        if (err.name === "ValidationError") {
          resolve2(yupToFormErrors(err));
        } else {
          reject(err);
        }
      });
    });
  }, [props.validationSchema]);
  var runSingleFieldLevelValidation = reactExports.useCallback(function(field, value2) {
    return new Promise(function(resolve2) {
      return resolve2(fieldRegistry.current[field].validate(value2));
    });
  }, []);
  var runFieldLevelValidations = reactExports.useCallback(function(values2) {
    var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function(f2) {
      return isFunction$3(fieldRegistry.current[f2].validate);
    });
    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function(f2) {
      return runSingleFieldLevelValidation(f2, getIn$1(values2, f2));
    }) : [Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];
    return Promise.all(fieldValidations).then(function(fieldErrorsList) {
      return fieldErrorsList.reduce(function(prev2, curr, index2) {
        if (curr === "DO_NOT_DELETE_YOU_WILL_BE_FIRED") {
          return prev2;
        }
        if (curr) {
          prev2 = setIn(prev2, fieldKeysWithValidation[index2], curr);
        }
        return prev2;
      }, {});
    });
  }, [runSingleFieldLevelValidation]);
  var runAllValidations = reactExports.useCallback(function(values2) {
    return Promise.all([runFieldLevelValidations(values2), props.validationSchema ? runValidationSchema(values2) : {}, props.validate ? runValidateHandler(values2) : {}]).then(function(_ref2) {
      var fieldErrors = _ref2[0], schemaErrors = _ref2[1], validateErrors = _ref2[2];
      var combinedErrors = deepmerge_1.all([fieldErrors, schemaErrors, validateErrors], {
        arrayMerge
      });
      return combinedErrors;
    });
  }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]);
  var validateFormWithHighPriority = useEventCallback(function(values2) {
    if (values2 === void 0) {
      values2 = state.values;
    }
    dispatch({
      type: "SET_ISVALIDATING",
      payload: true
    });
    return runAllValidations(values2).then(function(combinedErrors) {
      if (!!isMounted.current) {
        dispatch({
          type: "SET_ISVALIDATING",
          payload: false
        });
        dispatch({
          type: "SET_ERRORS",
          payload: combinedErrors
        });
      }
      return combinedErrors;
    });
  });
  reactExports.useEffect(function() {
    if (validateOnMount && isMounted.current === true && isEqual(initialValues.current, props.initialValues)) {
      validateFormWithHighPriority(initialValues.current);
    }
  }, [validateOnMount, validateFormWithHighPriority]);
  var resetForm = reactExports.useCallback(function(nextState) {
    var values2 = nextState && nextState.values ? nextState.values : initialValues.current;
    var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};
    var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};
    var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;
    initialValues.current = values2;
    initialErrors.current = errors;
    initialTouched.current = touched;
    initialStatus.current = status;
    var dispatchFn = function dispatchFn2() {
      dispatch({
        type: "RESET_FORM",
        payload: {
          isSubmitting: !!nextState && !!nextState.isSubmitting,
          errors,
          touched,
          status,
          values: values2,
          isValidating: !!nextState && !!nextState.isValidating,
          submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === "number" ? nextState.submitCount : 0
        }
      });
    };
    if (props.onReset) {
      var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);
      if (isPromise(maybePromisedOnReset)) {
        maybePromisedOnReset.then(dispatchFn);
      } else {
        dispatchFn();
      }
    } else {
      dispatchFn();
    }
  }, [props.initialErrors, props.initialStatus, props.initialTouched]);
  reactExports.useEffect(function() {
    if (isMounted.current === true && !isEqual(initialValues.current, props.initialValues)) {
      if (enableReinitialize) {
        initialValues.current = props.initialValues;
        resetForm();
      }
      if (validateOnMount) {
        validateFormWithHighPriority(initialValues.current);
      }
    }
  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);
  reactExports.useEffect(function() {
    if (enableReinitialize && isMounted.current === true && !isEqual(initialErrors.current, props.initialErrors)) {
      initialErrors.current = props.initialErrors || emptyErrors;
      dispatch({
        type: "SET_ERRORS",
        payload: props.initialErrors || emptyErrors
      });
    }
  }, [enableReinitialize, props.initialErrors]);
  reactExports.useEffect(function() {
    if (enableReinitialize && isMounted.current === true && !isEqual(initialTouched.current, props.initialTouched)) {
      initialTouched.current = props.initialTouched || emptyTouched;
      dispatch({
        type: "SET_TOUCHED",
        payload: props.initialTouched || emptyTouched
      });
    }
  }, [enableReinitialize, props.initialTouched]);
  reactExports.useEffect(function() {
    if (enableReinitialize && isMounted.current === true && !isEqual(initialStatus.current, props.initialStatus)) {
      initialStatus.current = props.initialStatus;
      dispatch({
        type: "SET_STATUS",
        payload: props.initialStatus
      });
    }
  }, [enableReinitialize, props.initialStatus, props.initialTouched]);
  var validateField = useEventCallback(function(name2) {
    if (fieldRegistry.current[name2] && isFunction$3(fieldRegistry.current[name2].validate)) {
      var value2 = getIn$1(state.values, name2);
      var maybePromise = fieldRegistry.current[name2].validate(value2);
      if (isPromise(maybePromise)) {
        dispatch({
          type: "SET_ISVALIDATING",
          payload: true
        });
        return maybePromise.then(function(x3) {
          return x3;
        }).then(function(error) {
          dispatch({
            type: "SET_FIELD_ERROR",
            payload: {
              field: name2,
              value: error
            }
          });
          dispatch({
            type: "SET_ISVALIDATING",
            payload: false
          });
        });
      } else {
        dispatch({
          type: "SET_FIELD_ERROR",
          payload: {
            field: name2,
            value: maybePromise
          }
        });
        return Promise.resolve(maybePromise);
      }
    } else if (props.validationSchema) {
      dispatch({
        type: "SET_ISVALIDATING",
        payload: true
      });
      return runValidationSchema(state.values, name2).then(function(x3) {
        return x3;
      }).then(function(error) {
        dispatch({
          type: "SET_FIELD_ERROR",
          payload: {
            field: name2,
            value: error[name2]
          }
        });
        dispatch({
          type: "SET_ISVALIDATING",
          payload: false
        });
      });
    }
    return Promise.resolve();
  });
  var registerField = reactExports.useCallback(function(name2, _ref3) {
    var validate = _ref3.validate;
    fieldRegistry.current[name2] = {
      validate
    };
  }, []);
  var unregisterField = reactExports.useCallback(function(name2) {
    delete fieldRegistry.current[name2];
  }, []);
  var setTouched = useEventCallback(function(touched, shouldValidate) {
    dispatch({
      type: "SET_TOUCHED",
      payload: touched
    });
    var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var setErrors = reactExports.useCallback(function(errors) {
    dispatch({
      type: "SET_ERRORS",
      payload: errors
    });
  }, []);
  var setValues = useEventCallback(function(values2, shouldValidate) {
    var resolvedValues = isFunction$3(values2) ? values2(state.values) : values2;
    dispatch({
      type: "SET_VALUES",
      payload: resolvedValues
    });
    var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();
  });
  var setFieldError = reactExports.useCallback(function(field, value2) {
    dispatch({
      type: "SET_FIELD_ERROR",
      payload: {
        field,
        value: value2
      }
    });
  }, []);
  var setFieldValue = useEventCallback(function(field, value2, shouldValidate) {
    dispatch({
      type: "SET_FIELD_VALUE",
      payload: {
        field,
        value: value2
      }
    });
    var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value2)) : Promise.resolve();
  });
  var executeChange = reactExports.useCallback(function(eventOrTextValue, maybePath) {
    var field = maybePath;
    var val2 = eventOrTextValue;
    var parsed;
    if (!isString$1(eventOrTextValue)) {
      if (eventOrTextValue.persist) {
        eventOrTextValue.persist();
      }
      var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;
      var type = target.type, name2 = target.name, id2 = target.id, value2 = target.value, checked = target.checked, outerHTML = target.outerHTML, options = target.options, multiple = target.multiple;
      field = maybePath ? maybePath : name2 ? name2 : id2;
      if (!field && false) {
        warnAboutMissingIdentifier({
          htmlContent: outerHTML,
          documentationAnchorLink: "handlechange-e-reactchangeeventany--void",
          handlerName: "handleChange"
        });
      }
      val2 = /number|range/.test(type) ? (parsed = parseFloat(value2), isNaN(parsed) ? "" : parsed) : /checkbox/.test(type) ? getValueForCheckbox(getIn$1(state.values, field), checked, value2) : options && multiple ? getSelectedValues(options) : value2;
    }
    if (field) {
      setFieldValue(field, val2);
    }
  }, [setFieldValue, state.values]);
  var handleChange = useEventCallback(function(eventOrPath) {
    if (isString$1(eventOrPath)) {
      return function(event) {
        return executeChange(event, eventOrPath);
      };
    } else {
      executeChange(eventOrPath);
    }
  });
  var setFieldTouched = useEventCallback(function(field, touched, shouldValidate) {
    if (touched === void 0) {
      touched = true;
    }
    dispatch({
      type: "SET_FIELD_TOUCHED",
      payload: {
        field,
        value: touched
      }
    });
    var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var executeBlur = reactExports.useCallback(function(e3, path) {
    if (e3.persist) {
      e3.persist();
    }
    var _e$target = e3.target, name2 = _e$target.name, id2 = _e$target.id, outerHTML = _e$target.outerHTML;
    var field = path ? path : name2 ? name2 : id2;
    if (!field && false) {
      warnAboutMissingIdentifier({
        htmlContent: outerHTML,
        documentationAnchorLink: "handleblur-e-any--void",
        handlerName: "handleBlur"
      });
    }
    setFieldTouched(field, true);
  }, [setFieldTouched]);
  var handleBlur = useEventCallback(function(eventOrString) {
    if (isString$1(eventOrString)) {
      return function(event) {
        return executeBlur(event, eventOrString);
      };
    } else {
      executeBlur(eventOrString);
    }
  });
  var setFormikState = reactExports.useCallback(function(stateOrCb) {
    if (isFunction$3(stateOrCb)) {
      dispatch({
        type: "SET_FORMIK_STATE",
        payload: stateOrCb
      });
    } else {
      dispatch({
        type: "SET_FORMIK_STATE",
        payload: function payload() {
          return stateOrCb;
        }
      });
    }
  }, []);
  var setStatus = reactExports.useCallback(function(status) {
    dispatch({
      type: "SET_STATUS",
      payload: status
    });
  }, []);
  var setSubmitting = reactExports.useCallback(function(isSubmitting) {
    dispatch({
      type: "SET_ISSUBMITTING",
      payload: isSubmitting
    });
  }, []);
  var submitForm = useEventCallback(function() {
    dispatch({
      type: "SUBMIT_ATTEMPT"
    });
    return validateFormWithHighPriority().then(function(combinedErrors) {
      var isInstanceOfError = combinedErrors instanceof Error;
      var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;
      if (isActuallyValid) {
        var promiseOrUndefined;
        try {
          promiseOrUndefined = executeSubmit();
          if (promiseOrUndefined === void 0) {
            return;
          }
        } catch (error) {
          throw error;
        }
        return Promise.resolve(promiseOrUndefined).then(function(result2) {
          if (!!isMounted.current) {
            dispatch({
              type: "SUBMIT_SUCCESS"
            });
          }
          return result2;
        })["catch"](function(_errors) {
          if (!!isMounted.current) {
            dispatch({
              type: "SUBMIT_FAILURE"
            });
            throw _errors;
          }
        });
      } else if (!!isMounted.current) {
        dispatch({
          type: "SUBMIT_FAILURE"
        });
        if (isInstanceOfError) {
          throw combinedErrors;
        }
      }
      return;
    });
  });
  var handleSubmit = useEventCallback(function(e3) {
    if (e3 && e3.preventDefault && isFunction$3(e3.preventDefault)) {
      e3.preventDefault();
    }
    if (e3 && e3.stopPropagation && isFunction$3(e3.stopPropagation)) {
      e3.stopPropagation();
    }
    submitForm()["catch"](function(reason) {
      console.warn("Warning: An unhandled error was caught from submitForm()", reason);
    });
  });
  var imperativeMethods = {
    resetForm,
    validateForm: validateFormWithHighPriority,
    validateField,
    setErrors,
    setFieldError,
    setFieldTouched,
    setFieldValue,
    setStatus,
    setSubmitting,
    setTouched,
    setValues,
    setFormikState,
    submitForm
  };
  var executeSubmit = useEventCallback(function() {
    return onSubmit(state.values, imperativeMethods);
  });
  var handleReset = useEventCallback(function(e3) {
    if (e3 && e3.preventDefault && isFunction$3(e3.preventDefault)) {
      e3.preventDefault();
    }
    if (e3 && e3.stopPropagation && isFunction$3(e3.stopPropagation)) {
      e3.stopPropagation();
    }
    resetForm();
  });
  var getFieldMeta = reactExports.useCallback(function(name2) {
    return {
      value: getIn$1(state.values, name2),
      error: getIn$1(state.errors, name2),
      touched: !!getIn$1(state.touched, name2),
      initialValue: getIn$1(initialValues.current, name2),
      initialTouched: !!getIn$1(initialTouched.current, name2),
      initialError: getIn$1(initialErrors.current, name2)
    };
  }, [state.errors, state.touched, state.values]);
  var getFieldHelpers = reactExports.useCallback(function(name2) {
    return {
      setValue: function setValue(value2, shouldValidate) {
        return setFieldValue(name2, value2, shouldValidate);
      },
      setTouched: function setTouched2(value2, shouldValidate) {
        return setFieldTouched(name2, value2, shouldValidate);
      },
      setError: function setError(value2) {
        return setFieldError(name2, value2);
      }
    };
  }, [setFieldValue, setFieldTouched, setFieldError]);
  var getFieldProps = reactExports.useCallback(function(nameOrOptions) {
    var isAnObject = isObject$5(nameOrOptions);
    var name2 = isAnObject ? nameOrOptions.name : nameOrOptions;
    var valueState = getIn$1(state.values, name2);
    var field = {
      name: name2,
      value: valueState,
      onChange: handleChange,
      onBlur: handleBlur
    };
    if (isAnObject) {
      var type = nameOrOptions.type, valueProp = nameOrOptions.value, is2 = nameOrOptions.as, multiple = nameOrOptions.multiple;
      if (type === "checkbox") {
        if (valueProp === void 0) {
          field.checked = !!valueState;
        } else {
          field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));
          field.value = valueProp;
        }
      } else if (type === "radio") {
        field.checked = valueState === valueProp;
        field.value = valueProp;
      } else if (is2 === "select" && multiple) {
        field.value = field.value || [];
        field.multiple = true;
      }
    }
    return field;
  }, [handleBlur, handleChange, state.values]);
  var dirty = reactExports.useMemo(function() {
    return !isEqual(initialValues.current, state.values);
  }, [initialValues.current, state.values]);
  var isValid2 = reactExports.useMemo(function() {
    return typeof isInitialValid !== "undefined" ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction$3(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;
  }, [isInitialValid, dirty, state.errors, props]);
  var ctx2 = _extends$7({}, state, {
    initialValues: initialValues.current,
    initialErrors: initialErrors.current,
    initialTouched: initialTouched.current,
    initialStatus: initialStatus.current,
    handleBlur,
    handleChange,
    handleReset,
    handleSubmit,
    resetForm,
    setErrors,
    setFormikState,
    setFieldTouched,
    setFieldValue,
    setFieldError,
    setStatus,
    setSubmitting,
    setTouched,
    setValues,
    submitForm,
    validateForm: validateFormWithHighPriority,
    validateField,
    isValid: isValid2,
    dirty,
    unregisterField,
    registerField,
    getFieldProps,
    getFieldMeta,
    getFieldHelpers,
    validateOnBlur,
    validateOnChange,
    validateOnMount
  });
  return ctx2;
}
function Formik(props) {
  var formikbag = useFormik(props);
  var component = props.component, children = props.children, render2 = props.render, innerRef = props.innerRef;
  reactExports.useImperativeHandle(innerRef, function() {
    return formikbag;
  });
  return reactExports.createElement(FormikProvider, {
    value: formikbag
  }, component ? reactExports.createElement(component, formikbag) : render2 ? render2(formikbag) : children ? isFunction$3(children) ? children(formikbag) : !isEmptyChildren(children) ? reactExports.Children.only(children) : null : null);
}
function warnAboutMissingIdentifier(_ref4) {
  var htmlContent = _ref4.htmlContent, documentationAnchorLink = _ref4.documentationAnchorLink, handlerName = _ref4.handlerName;
  console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n    " + htmlContent + "\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#" + documentationAnchorLink + "\n  ");
}
function yupToFormErrors(yupError) {
  var errors = {};
  if (yupError.inner) {
    if (yupError.inner.length === 0) {
      return setIn(errors, yupError.path, yupError.message);
    }
    for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
      var _ref5;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref5 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref5 = _i.value;
      }
      var err = _ref5;
      if (!getIn$1(errors, err.path)) {
        errors = setIn(errors, err.path, err.message);
      }
    }
  }
  return errors;
}
function validateYupSchema(values2, schema, sync2, context) {
  if (sync2 === void 0) {
    sync2 = false;
  }
  if (context === void 0) {
    context = {};
  }
  var validateData = prepareDataForValidation(values2);
  return schema[sync2 ? "validateSync" : "validate"](validateData, {
    abortEarly: false,
    context
  });
}
function prepareDataForValidation(values2) {
  var data2 = Array.isArray(values2) ? [] : {};
  for (var k3 in values2) {
    if (Object.prototype.hasOwnProperty.call(values2, k3)) {
      var key2 = String(k3);
      if (Array.isArray(values2[key2]) === true) {
        data2[key2] = values2[key2].map(function(value2) {
          if (Array.isArray(value2) === true || isPlainObject(value2)) {
            return prepareDataForValidation(value2);
          } else {
            return value2 !== "" ? value2 : void 0;
          }
        });
      } else if (isPlainObject(values2[key2])) {
        data2[key2] = prepareDataForValidation(values2[key2]);
      } else {
        data2[key2] = values2[key2] !== "" ? values2[key2] : void 0;
      }
    }
  }
  return data2;
}
function arrayMerge(target, source, options) {
  var destination = target.slice();
  source.forEach(function merge2(e3, i3) {
    if (typeof destination[i3] === "undefined") {
      var cloneRequested = options.clone !== false;
      var shouldClone = cloneRequested && options.isMergeableObject(e3);
      destination[i3] = shouldClone ? deepmerge_1(Array.isArray(e3) ? [] : {}, e3, options) : e3;
    } else if (options.isMergeableObject(e3)) {
      destination[i3] = deepmerge_1(target[i3], e3, options);
    } else if (target.indexOf(e3) === -1) {
      destination.push(e3);
    }
  });
  return destination;
}
function getSelectedValues(options) {
  return Array.from(options).filter(function(el) {
    return el.selected;
  }).map(function(el) {
    return el.value;
  });
}
function getValueForCheckbox(currentValue, checked, valueProp) {
  if (typeof currentValue === "boolean") {
    return Boolean(checked);
  }
  var currentArrayOfValues = [];
  var isValueInArray = false;
  var index2 = -1;
  if (!Array.isArray(currentValue)) {
    if (!valueProp || valueProp == "true" || valueProp == "false") {
      return Boolean(checked);
    }
  } else {
    currentArrayOfValues = currentValue;
    index2 = currentValue.indexOf(valueProp);
    isValueInArray = index2 >= 0;
  }
  if (checked && valueProp && !isValueInArray) {
    return currentArrayOfValues.concat(valueProp);
  }
  if (!isValueInArray) {
    return currentArrayOfValues;
  }
  return currentArrayOfValues.slice(0, index2).concat(currentArrayOfValues.slice(index2 + 1));
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
function useEventCallback(fn2) {
  var ref = reactExports.useRef(fn2);
  useIsomorphicLayoutEffect(function() {
    ref.current = fn2;
  });
  return reactExports.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current.apply(void 0, args);
  }, []);
}
var Form = /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
  var action = props.action, rest = _objectWithoutPropertiesLoose$3(props, ["action"]);
  var _action = action != null ? action : "#";
  var _useFormikContext = useFormikContext(), handleReset = _useFormikContext.handleReset, handleSubmit = _useFormikContext.handleSubmit;
  return reactExports.createElement("form", Object.assign({
    onSubmit: handleSubmit,
    ref,
    onReset: handleReset,
    action: _action
  }, rest));
});
Form.displayName = "Form";
var map;
try {
  map = Map;
} catch (_2) {
}
var set;
try {
  set = Set;
} catch (_2) {
}
function baseClone(src, circulars, clones) {
  if (!src || typeof src !== "object" || typeof src === "function") {
    return src;
  }
  if (src.nodeType && "cloneNode" in src) {
    return src.cloneNode(true);
  }
  if (src instanceof Date) {
    return new Date(src.getTime());
  }
  if (src instanceof RegExp) {
    return new RegExp(src);
  }
  if (Array.isArray(src)) {
    return src.map(clone);
  }
  if (map && src instanceof map) {
    return new Map(Array.from(src.entries()));
  }
  if (set && src instanceof set) {
    return new Set(Array.from(src.values()));
  }
  if (src instanceof Object) {
    circulars.push(src);
    var obj = Object.create(src);
    clones.push(obj);
    for (var key2 in src) {
      var idx = circulars.findIndex(function(i3) {
        return i3 === src[key2];
      });
      obj[key2] = idx > -1 ? clones[idx] : baseClone(src[key2], circulars, clones);
    }
    return obj;
  }
  return src;
}
function clone(src) {
  return baseClone(src, [], []);
}
const toString$6 = Object.prototype.toString;
const errorToString = Error.prototype.toString;
const regExpToString = RegExp.prototype.toString;
const symbolToString$1 = typeof Symbol !== "undefined" ? Symbol.prototype.toString : () => "";
const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
function printNumber(val2) {
  if (val2 != +val2)
    return "NaN";
  const isNegativeZero = val2 === 0 && 1 / val2 < 0;
  return isNegativeZero ? "-0" : "" + val2;
}
function printSimpleValue(val2, quoteStrings = false) {
  if (val2 == null || val2 === true || val2 === false)
    return "" + val2;
  const typeOf = typeof val2;
  if (typeOf === "number")
    return printNumber(val2);
  if (typeOf === "string")
    return quoteStrings ? '"'.concat(val2, '"') : val2;
  if (typeOf === "function")
    return "[Function " + (val2.name || "anonymous") + "]";
  if (typeOf === "symbol")
    return symbolToString$1.call(val2).replace(SYMBOL_REGEXP, "Symbol($1)");
  const tag2 = toString$6.call(val2).slice(8, -1);
  if (tag2 === "Date")
    return isNaN(val2.getTime()) ? "" + val2 : val2.toISOString(val2);
  if (tag2 === "Error" || val2 instanceof Error)
    return "[" + errorToString.call(val2) + "]";
  if (tag2 === "RegExp")
    return regExpToString.call(val2);
  return null;
}
function printValue(value2, quoteStrings) {
  let result2 = printSimpleValue(value2, quoteStrings);
  if (result2 !== null)
    return result2;
  return JSON.stringify(value2, function(key2, value3) {
    let result3 = printSimpleValue(this[key2], quoteStrings);
    if (result3 !== null)
      return result3;
    return value3;
  }, 2);
}
let mixed = {
  default: "${path} is invalid",
  required: "${path} is a required field",
  oneOf: "${path} must be one of the following values: ${values}",
  notOneOf: "${path} must not be one of the following values: ${values}",
  notType: ({
    path,
    type,
    value: value2,
    originalValue
  }) => {
    let isCast = originalValue != null && originalValue !== value2;
    let msg = "".concat(path, " must be a `").concat(type, "` type, ") + "but the final value was: `".concat(printValue(value2, true), "`") + (isCast ? " (cast from the value `".concat(printValue(originalValue, true), "`).") : ".");
    if (value2 === null) {
      msg += '\n If "null" is intended as an empty value be sure to mark the schema as `.nullable()`';
    }
    return msg;
  },
  defined: "${path} must be defined"
};
let string = {
  length: "${path} must be exactly ${length} characters",
  min: "${path} must be at least ${min} characters",
  max: "${path} must be at most ${max} characters",
  matches: '${path} must match the following: "${regex}"',
  email: "${path} must be a valid email",
  url: "${path} must be a valid URL",
  uuid: "${path} must be a valid UUID",
  trim: "${path} must be a trimmed string",
  lowercase: "${path} must be a lowercase string",
  uppercase: "${path} must be a upper case string"
};
let number = {
  min: "${path} must be greater than or equal to ${min}",
  max: "${path} must be less than or equal to ${max}",
  lessThan: "${path} must be less than ${less}",
  moreThan: "${path} must be greater than ${more}",
  positive: "${path} must be a positive number",
  negative: "${path} must be a negative number",
  integer: "${path} must be an integer"
};
let date = {
  min: "${path} field must be later than ${min}",
  max: "${path} field must be at earlier than ${max}"
};
let boolean = {
  isValue: "${path} field must be ${value}"
};
let object = {
  noUnknown: "${path} field has unspecified keys: ${unknown}"
};
let array = {
  min: "${path} field must have at least ${min} items",
  max: "${path} field must have less than or equal to ${max} items",
  length: "${path} must have ${length} items"
};
Object.assign(/* @__PURE__ */ Object.create(null), {
  mixed,
  string,
  number,
  date,
  object,
  array,
  boolean
});
var objectProto$c = Object.prototype;
var hasOwnProperty$9 = objectProto$c.hasOwnProperty;
function baseHas$1(object2, key2) {
  return object2 != null && hasOwnProperty$9.call(object2, key2);
}
var _baseHas = baseHas$1;
var isArray$8 = Array.isArray;
var isArray_1 = isArray$8;
var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal$1;
var freeGlobal = _freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root$8 = freeGlobal || freeSelf || Function("return this")();
var _root = root$8;
var root$7 = _root;
var Symbol$5 = root$7.Symbol;
var _Symbol = Symbol$5;
var Symbol$4 = _Symbol;
var objectProto$b = Object.prototype;
var hasOwnProperty$8 = objectProto$b.hasOwnProperty;
var nativeObjectToString$1 = objectProto$b.toString;
var symToStringTag$1 = Symbol$4 ? Symbol$4.toStringTag : void 0;
function getRawTag$1(value2) {
  var isOwn = hasOwnProperty$8.call(value2, symToStringTag$1), tag2 = value2[symToStringTag$1];
  try {
    value2[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e3) {
  }
  var result2 = nativeObjectToString$1.call(value2);
  if (unmasked) {
    if (isOwn) {
      value2[symToStringTag$1] = tag2;
    } else {
      delete value2[symToStringTag$1];
    }
  }
  return result2;
}
var _getRawTag = getRawTag$1;
var objectProto$a = Object.prototype;
var nativeObjectToString = objectProto$a.toString;
function objectToString$1(value2) {
  return nativeObjectToString.call(value2);
}
var _objectToString = objectToString$1;
var Symbol$3 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$3 ? Symbol$3.toStringTag : void 0;
function baseGetTag$5(value2) {
  if (value2 == null) {
    return value2 === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
}
var _baseGetTag = baseGetTag$5;
function isObjectLike$5(value2) {
  return value2 != null && typeof value2 == "object";
}
var isObjectLike_1 = isObjectLike$5;
var baseGetTag$4 = _baseGetTag, isObjectLike$4 = isObjectLike_1;
var symbolTag$1 = "[object Symbol]";
function isSymbol$3(value2) {
  return typeof value2 == "symbol" || isObjectLike$4(value2) && baseGetTag$4(value2) == symbolTag$1;
}
var isSymbol_1 = isSymbol$3;
var isArray$7 = isArray_1, isSymbol$2 = isSymbol_1;
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey$3(value2, object2) {
  if (isArray$7(value2)) {
    return false;
  }
  var type = typeof value2;
  if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol$2(value2)) {
    return true;
  }
  return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object2 != null && value2 in Object(object2);
}
var _isKey = isKey$3;
function isObject$4(value2) {
  var type = typeof value2;
  return value2 != null && (type == "object" || type == "function");
}
var isObject_1 = isObject$4;
var baseGetTag$3 = _baseGetTag, isObject$3 = isObject_1;
var asyncTag = "[object AsyncFunction]", funcTag$1 = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction$2(value2) {
  if (!isObject$3(value2)) {
    return false;
  }
  var tag2 = baseGetTag$3(value2);
  return tag2 == funcTag$1 || tag2 == genTag || tag2 == asyncTag || tag2 == proxyTag;
}
var isFunction_1 = isFunction$2;
var root$6 = _root;
var coreJsData$1 = root$6["__core-js_shared__"];
var _coreJsData = coreJsData$1;
var coreJsData = _coreJsData;
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked$1(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var _isMasked = isMasked$1;
var funcProto$1 = Function.prototype;
var funcToString$1 = funcProto$1.toString;
function toSource$2(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e3) {
    }
    try {
      return func + "";
    } catch (e3) {
    }
  }
  return "";
}
var _toSource = toSource$2;
var isFunction$1 = isFunction_1, isMasked = _isMasked, isObject$2 = isObject_1, toSource$1 = _toSource;
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto = Function.prototype, objectProto$9 = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString.call(hasOwnProperty$7).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative$1(value2) {
  if (!isObject$2(value2) || isMasked(value2)) {
    return false;
  }
  var pattern = isFunction$1(value2) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource$1(value2));
}
var _baseIsNative = baseIsNative$1;
function getValue$1(object2, key2) {
  return object2 == null ? void 0 : object2[key2];
}
var _getValue = getValue$1;
var baseIsNative = _baseIsNative, getValue = _getValue;
function getNative$7(object2, key2) {
  var value2 = getValue(object2, key2);
  return baseIsNative(value2) ? value2 : void 0;
}
var _getNative = getNative$7;
var getNative$6 = _getNative;
var nativeCreate$4 = getNative$6(Object, "create");
var _nativeCreate = nativeCreate$4;
var nativeCreate$3 = _nativeCreate;
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}
var _hashClear = hashClear$1;
function hashDelete$1(key2) {
  var result2 = this.has(key2) && delete this.__data__[key2];
  this.size -= result2 ? 1 : 0;
  return result2;
}
var _hashDelete = hashDelete$1;
var nativeCreate$2 = _nativeCreate;
var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
var objectProto$8 = Object.prototype;
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
function hashGet$1(key2) {
  var data2 = this.__data__;
  if (nativeCreate$2) {
    var result2 = data2[key2];
    return result2 === HASH_UNDEFINED$2 ? void 0 : result2;
  }
  return hasOwnProperty$6.call(data2, key2) ? data2[key2] : void 0;
}
var _hashGet = hashGet$1;
var nativeCreate$1 = _nativeCreate;
var objectProto$7 = Object.prototype;
var hasOwnProperty$5 = objectProto$7.hasOwnProperty;
function hashHas$1(key2) {
  var data2 = this.__data__;
  return nativeCreate$1 ? data2[key2] !== void 0 : hasOwnProperty$5.call(data2, key2);
}
var _hashHas = hashHas$1;
var nativeCreate = _nativeCreate;
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
function hashSet$1(key2, value2) {
  var data2 = this.__data__;
  this.size += this.has(key2) ? 0 : 1;
  data2[key2] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED$1 : value2;
  return this;
}
var _hashSet = hashSet$1;
var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
function Hash$1(entries) {
  var index2 = -1, length2 = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length2) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
Hash$1.prototype.clear = hashClear;
Hash$1.prototype["delete"] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;
var _Hash = Hash$1;
function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}
var _listCacheClear = listCacheClear$1;
function eq$2(value2, other) {
  return value2 === other || value2 !== value2 && other !== other;
}
var eq_1 = eq$2;
var eq$1 = eq_1;
function assocIndexOf$4(array2, key2) {
  var length2 = array2.length;
  while (length2--) {
    if (eq$1(array2[length2][0], key2)) {
      return length2;
    }
  }
  return -1;
}
var _assocIndexOf = assocIndexOf$4;
var assocIndexOf$3 = _assocIndexOf;
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete$1(key2) {
  var data2 = this.__data__, index2 = assocIndexOf$3(data2, key2);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data2.length - 1;
  if (index2 == lastIndex) {
    data2.pop();
  } else {
    splice.call(data2, index2, 1);
  }
  --this.size;
  return true;
}
var _listCacheDelete = listCacheDelete$1;
var assocIndexOf$2 = _assocIndexOf;
function listCacheGet$1(key2) {
  var data2 = this.__data__, index2 = assocIndexOf$2(data2, key2);
  return index2 < 0 ? void 0 : data2[index2][1];
}
var _listCacheGet = listCacheGet$1;
var assocIndexOf$1 = _assocIndexOf;
function listCacheHas$1(key2) {
  return assocIndexOf$1(this.__data__, key2) > -1;
}
var _listCacheHas = listCacheHas$1;
var assocIndexOf = _assocIndexOf;
function listCacheSet$1(key2, value2) {
  var data2 = this.__data__, index2 = assocIndexOf(data2, key2);
  if (index2 < 0) {
    ++this.size;
    data2.push([key2, value2]);
  } else {
    data2[index2][1] = value2;
  }
  return this;
}
var _listCacheSet = listCacheSet$1;
var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
function ListCache$4(entries) {
  var index2 = -1, length2 = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length2) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
ListCache$4.prototype.clear = listCacheClear;
ListCache$4.prototype["delete"] = listCacheDelete;
ListCache$4.prototype.get = listCacheGet;
ListCache$4.prototype.has = listCacheHas;
ListCache$4.prototype.set = listCacheSet;
var _ListCache = ListCache$4;
var getNative$5 = _getNative, root$5 = _root;
var Map$4 = getNative$5(root$5, "Map");
var _Map = Map$4;
var Hash = _Hash, ListCache$3 = _ListCache, Map$3 = _Map;
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$3 || ListCache$3)(),
    "string": new Hash()
  };
}
var _mapCacheClear = mapCacheClear$1;
function isKeyable$1(value2) {
  var type = typeof value2;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
}
var _isKeyable = isKeyable$1;
var isKeyable = _isKeyable;
function getMapData$4(map2, key2) {
  var data2 = map2.__data__;
  return isKeyable(key2) ? data2[typeof key2 == "string" ? "string" : "hash"] : data2.map;
}
var _getMapData = getMapData$4;
var getMapData$3 = _getMapData;
function mapCacheDelete$1(key2) {
  var result2 = getMapData$3(this, key2)["delete"](key2);
  this.size -= result2 ? 1 : 0;
  return result2;
}
var _mapCacheDelete = mapCacheDelete$1;
var getMapData$2 = _getMapData;
function mapCacheGet$1(key2) {
  return getMapData$2(this, key2).get(key2);
}
var _mapCacheGet = mapCacheGet$1;
var getMapData$1 = _getMapData;
function mapCacheHas$1(key2) {
  return getMapData$1(this, key2).has(key2);
}
var _mapCacheHas = mapCacheHas$1;
var getMapData = _getMapData;
function mapCacheSet$1(key2, value2) {
  var data2 = getMapData(this, key2), size = data2.size;
  data2.set(key2, value2);
  this.size += data2.size == size ? 0 : 1;
  return this;
}
var _mapCacheSet = mapCacheSet$1;
var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
function MapCache$3(entries) {
  var index2 = -1, length2 = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length2) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
MapCache$3.prototype.clear = mapCacheClear;
MapCache$3.prototype["delete"] = mapCacheDelete;
MapCache$3.prototype.get = mapCacheGet;
MapCache$3.prototype.has = mapCacheHas;
MapCache$3.prototype.set = mapCacheSet;
var _MapCache = MapCache$3;
var MapCache$2 = _MapCache;
var FUNC_ERROR_TEXT = "Expected a function";
function memoize$1(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key2)) {
      return cache.get(key2);
    }
    var result2 = func.apply(this, args);
    memoized.cache = cache.set(key2, result2) || cache;
    return result2;
  };
  memoized.cache = new (memoize$1.Cache || MapCache$2)();
  return memoized;
}
memoize$1.Cache = MapCache$2;
var memoize_1 = memoize$1;
var memoize = memoize_1;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped$1(func) {
  var result2 = memoize(func, function(key2) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key2;
  });
  var cache = result2.cache;
  return result2;
}
var _memoizeCapped = memoizeCapped$1;
var memoizeCapped = _memoizeCapped;
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath$1 = memoizeCapped(function(string2) {
  var result2 = [];
  if (string2.charCodeAt(0) === 46) {
    result2.push("");
  }
  string2.replace(rePropName, function(match2, number2, quote, subString) {
    result2.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match2);
  });
  return result2;
});
var _stringToPath = stringToPath$1;
function arrayMap$1(array2, iteratee) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length, result2 = Array(length2);
  while (++index2 < length2) {
    result2[index2] = iteratee(array2[index2], index2, array2);
  }
  return result2;
}
var _arrayMap = arrayMap$1;
var Symbol$2 = _Symbol, arrayMap = _arrayMap, isArray$6 = isArray_1, isSymbol$1 = isSymbol_1;
var INFINITY$1 = 1 / 0;
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
function baseToString$1(value2) {
  if (typeof value2 == "string") {
    return value2;
  }
  if (isArray$6(value2)) {
    return arrayMap(value2, baseToString$1) + "";
  }
  if (isSymbol$1(value2)) {
    return symbolToString ? symbolToString.call(value2) : "";
  }
  var result2 = value2 + "";
  return result2 == "0" && 1 / value2 == -INFINITY$1 ? "-0" : result2;
}
var _baseToString = baseToString$1;
var baseToString = _baseToString;
function toString$5(value2) {
  return value2 == null ? "" : baseToString(value2);
}
var toString_1 = toString$5;
var isArray$5 = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString$4 = toString_1;
function castPath$2(value2, object2) {
  if (isArray$5(value2)) {
    return value2;
  }
  return isKey$2(value2, object2) ? [value2] : stringToPath(toString$4(value2));
}
var _castPath = castPath$2;
var baseGetTag$2 = _baseGetTag, isObjectLike$3 = isObjectLike_1;
var argsTag$2 = "[object Arguments]";
function baseIsArguments$1(value2) {
  return isObjectLike$3(value2) && baseGetTag$2(value2) == argsTag$2;
}
var _baseIsArguments = baseIsArguments$1;
var baseIsArguments = _baseIsArguments, isObjectLike$2 = isObjectLike_1;
var objectProto$6 = Object.prototype;
var hasOwnProperty$4 = objectProto$6.hasOwnProperty;
var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;
var isArguments$2 = baseIsArguments(function() {
  return arguments;
}()) ? baseIsArguments : function(value2) {
  return isObjectLike$2(value2) && hasOwnProperty$4.call(value2, "callee") && !propertyIsEnumerable$1.call(value2, "callee");
};
var isArguments_1 = isArguments$2;
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex$2(value2, length2) {
  var type = typeof value2;
  length2 = length2 == null ? MAX_SAFE_INTEGER$1 : length2;
  return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
}
var _isIndex = isIndex$2;
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength$3(value2) {
  return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
}
var isLength_1 = isLength$3;
var isSymbol = isSymbol_1;
var INFINITY = 1 / 0;
function toKey$4(value2) {
  if (typeof value2 == "string" || isSymbol(value2)) {
    return value2;
  }
  var result2 = value2 + "";
  return result2 == "0" && 1 / value2 == -INFINITY ? "-0" : result2;
}
var _toKey = toKey$4;
var castPath$1 = _castPath, isArguments$1 = isArguments_1, isArray$4 = isArray_1, isIndex$1 = _isIndex, isLength$2 = isLength_1, toKey$3 = _toKey;
function hasPath$2(object2, path, hasFunc) {
  path = castPath$1(path, object2);
  var index2 = -1, length2 = path.length, result2 = false;
  while (++index2 < length2) {
    var key2 = toKey$3(path[index2]);
    if (!(result2 = object2 != null && hasFunc(object2, key2))) {
      break;
    }
    object2 = object2[key2];
  }
  if (result2 || ++index2 != length2) {
    return result2;
  }
  length2 = object2 == null ? 0 : object2.length;
  return !!length2 && isLength$2(length2) && isIndex$1(key2, length2) && (isArray$4(object2) || isArguments$1(object2));
}
var _hasPath = hasPath$2;
var baseHas = _baseHas, hasPath$1 = _hasPath;
function has(object2, path) {
  return object2 != null && hasPath$1(object2, path, baseHas);
}
var has_1 = has;
const has$1 = /* @__PURE__ */ getDefaultExportFromCjs(has_1);
const isSchema = (obj) => obj && obj.__isYupSchema__;
class Condition {
  constructor(refs, options) {
    this.fn = void 0;
    this.refs = refs;
    this.refs = refs;
    if (typeof options === "function") {
      this.fn = options;
      return;
    }
    if (!has$1(options, "is"))
      throw new TypeError("`is:` is required for `when()` conditions");
    if (!options.then && !options.otherwise)
      throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
    let {
      is: is2,
      then,
      otherwise
    } = options;
    let check = typeof is2 === "function" ? is2 : (...values2) => values2.every((value2) => value2 === is2);
    this.fn = function(...args) {
      let options2 = args.pop();
      let schema = args.pop();
      let branch = check(...args) ? then : otherwise;
      if (!branch)
        return void 0;
      if (typeof branch === "function")
        return branch(schema);
      return schema.concat(branch.resolve(options2));
    };
  }
  resolve(base, options) {
    let values2 = this.refs.map((ref) => ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));
    let schema = this.fn.apply(base, values2.concat(base, options));
    if (schema === void 0 || schema === base)
      return base;
    if (!isSchema(schema))
      throw new TypeError("conditions must return a schema object");
    return schema.resolve(options);
  }
}
function toArray(value2) {
  return value2 == null ? [] : [].concat(value2);
}
function _extends$6() {
  _extends$6 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$6.apply(this, arguments);
}
let strReg = /\$\{\s*(\w+)\s*\}/g;
class ValidationError extends Error {
  static formatError(message, params) {
    const path = params.label || params.path || "this";
    if (path !== params.path)
      params = _extends$6({}, params, {
        path
      });
    if (typeof message === "string")
      return message.replace(strReg, (_2, key2) => printValue(params[key2]));
    if (typeof message === "function")
      return message(params);
    return message;
  }
  static isError(err) {
    return err && err.name === "ValidationError";
  }
  constructor(errorOrErrors, value2, field, type) {
    super();
    this.value = void 0;
    this.path = void 0;
    this.type = void 0;
    this.errors = void 0;
    this.params = void 0;
    this.inner = void 0;
    this.name = "ValidationError";
    this.value = value2;
    this.path = field;
    this.type = type;
    this.errors = [];
    this.inner = [];
    toArray(errorOrErrors).forEach((err) => {
      if (ValidationError.isError(err)) {
        this.errors.push(...err.errors);
        this.inner = this.inner.concat(err.inner.length ? err.inner : err);
      } else {
        this.errors.push(err);
      }
    });
    this.message = this.errors.length > 1 ? "".concat(this.errors.length, " errors occurred") : this.errors[0];
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ValidationError);
  }
}
const once = (cb2) => {
  let fired = false;
  return (...args) => {
    if (fired)
      return;
    fired = true;
    cb2(...args);
  };
};
function runTests(options, cb2) {
  let {
    endEarly,
    tests,
    args,
    value: value2,
    errors,
    sort,
    path
  } = options;
  let callback = once(cb2);
  let count = tests.length;
  const nestedErrors = [];
  errors = errors ? errors : [];
  if (!count)
    return errors.length ? callback(new ValidationError(errors, value2, path)) : callback(null, value2);
  for (let i3 = 0; i3 < tests.length; i3++) {
    const test = tests[i3];
    test(args, function finishTestRun(err) {
      if (err) {
        if (!ValidationError.isError(err)) {
          return callback(err, value2);
        }
        if (endEarly) {
          err.value = value2;
          return callback(err, value2);
        }
        nestedErrors.push(err);
      }
      if (--count <= 0) {
        if (nestedErrors.length) {
          if (sort)
            nestedErrors.sort(sort);
          if (errors.length)
            nestedErrors.push(...errors);
          errors = nestedErrors;
        }
        if (errors.length) {
          callback(new ValidationError(errors, value2, path), value2);
          return;
        }
        callback(null, value2);
      }
    });
  }
}
var getNative$4 = _getNative;
var defineProperty$1 = function() {
  try {
    var func = getNative$4(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e3) {
  }
}();
var _defineProperty$2 = defineProperty$1;
var defineProperty = _defineProperty$2;
function baseAssignValue$2(object2, key2, value2) {
  if (key2 == "__proto__" && defineProperty) {
    defineProperty(object2, key2, {
      "configurable": true,
      "enumerable": true,
      "value": value2,
      "writable": true
    });
  } else {
    object2[key2] = value2;
  }
}
var _baseAssignValue = baseAssignValue$2;
function createBaseFor$1(fromRight) {
  return function(object2, iteratee, keysFunc) {
    var index2 = -1, iterable = Object(object2), props = keysFunc(object2), length2 = props.length;
    while (length2--) {
      var key2 = props[fromRight ? length2 : ++index2];
      if (iteratee(iterable[key2], key2, iterable) === false) {
        break;
      }
    }
    return object2;
  };
}
var _createBaseFor = createBaseFor$1;
var createBaseFor = _createBaseFor;
var baseFor$1 = createBaseFor();
var _baseFor = baseFor$1;
function baseTimes$1(n2, iteratee) {
  var index2 = -1, result2 = Array(n2);
  while (++index2 < n2) {
    result2[index2] = iteratee(index2);
  }
  return result2;
}
var _baseTimes = baseTimes$1;
var isBuffer$2 = { exports: {} };
function stubFalse() {
  return false;
}
var stubFalse_1 = stubFalse;
isBuffer$2.exports;
(function(module2, exports2) {
  var root2 = _root, stubFalse2 = stubFalse_1;
  var freeExports2 = exports2 && !exports2.nodeType && exports2;
  var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var Buffer2 = moduleExports2 ? root2.Buffer : void 0;
  var nativeIsBuffer2 = Buffer2 ? Buffer2.isBuffer : void 0;
  var isBuffer2 = nativeIsBuffer2 || stubFalse2;
  module2.exports = isBuffer2;
})(isBuffer$2, isBuffer$2.exports);
var isBufferExports = isBuffer$2.exports;
var baseGetTag$1 = _baseGetTag, isLength$1 = isLength_1, isObjectLike$1 = isObjectLike_1;
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", weakMapTag$1 = "[object WeakMap]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] = typedArrayTags[dataViewTag$2] = typedArrayTags[dateTag$1] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag] = typedArrayTags[mapTag$2] = typedArrayTags[numberTag$1] = typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$1] = typedArrayTags[setTag$2] = typedArrayTags[stringTag$1] = typedArrayTags[weakMapTag$1] = false;
function baseIsTypedArray$1(value2) {
  return isObjectLike$1(value2) && isLength$1(value2.length) && !!typedArrayTags[baseGetTag$1(value2)];
}
var _baseIsTypedArray = baseIsTypedArray$1;
function baseUnary$1(func) {
  return function(value2) {
    return func(value2);
  };
}
var _baseUnary = baseUnary$1;
var _nodeUtil = { exports: {} };
_nodeUtil.exports;
(function(module2, exports2) {
  var freeGlobal2 = _freeGlobal;
  var freeExports2 = exports2 && !exports2.nodeType && exports2;
  var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var freeProcess2 = moduleExports2 && freeGlobal2.process;
  var nodeUtil2 = function() {
    try {
      var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
    } catch (e3) {
    }
  }();
  module2.exports = nodeUtil2;
})(_nodeUtil, _nodeUtil.exports);
var _nodeUtilExports = _nodeUtil.exports;
var baseIsTypedArray = _baseIsTypedArray, baseUnary = _baseUnary, nodeUtil = _nodeUtilExports;
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
var isTypedArray$2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
var isTypedArray_1 = isTypedArray$2;
var baseTimes = _baseTimes, isArguments = isArguments_1, isArray$3 = isArray_1, isBuffer$1 = isBufferExports, isIndex = _isIndex, isTypedArray$1 = isTypedArray_1;
var objectProto$5 = Object.prototype;
var hasOwnProperty$3 = objectProto$5.hasOwnProperty;
function arrayLikeKeys$1(value2, inherited) {
  var isArr = isArray$3(value2), isArg = !isArr && isArguments(value2), isBuff = !isArr && !isArg && isBuffer$1(value2), isType = !isArr && !isArg && !isBuff && isTypedArray$1(value2), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value2.length, String) : [], length2 = result2.length;
  for (var key2 in value2) {
    if ((inherited || hasOwnProperty$3.call(value2, key2)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
    isIndex(key2, length2)))) {
      result2.push(key2);
    }
  }
  return result2;
}
var _arrayLikeKeys = arrayLikeKeys$1;
var objectProto$4 = Object.prototype;
function isPrototype$1(value2) {
  var Ctor = value2 && value2.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$4;
  return value2 === proto2;
}
var _isPrototype = isPrototype$1;
function overArg$1(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var _overArg = overArg$1;
var overArg = _overArg;
var nativeKeys$1 = overArg(Object.keys, Object);
var _nativeKeys = nativeKeys$1;
var isPrototype = _isPrototype, nativeKeys = _nativeKeys;
var objectProto$3 = Object.prototype;
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
function baseKeys$1(object2) {
  if (!isPrototype(object2)) {
    return nativeKeys(object2);
  }
  var result2 = [];
  for (var key2 in Object(object2)) {
    if (hasOwnProperty$2.call(object2, key2) && key2 != "constructor") {
      result2.push(key2);
    }
  }
  return result2;
}
var _baseKeys = baseKeys$1;
var isFunction = isFunction_1, isLength = isLength_1;
function isArrayLike$1(value2) {
  return value2 != null && isLength(value2.length) && !isFunction(value2);
}
var isArrayLike_1 = isArrayLike$1;
var arrayLikeKeys = _arrayLikeKeys, baseKeys = _baseKeys, isArrayLike = isArrayLike_1;
function keys$3(object2) {
  return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
}
var keys_1 = keys$3;
var baseFor = _baseFor, keys$2 = keys_1;
function baseForOwn$2(object2, iteratee) {
  return object2 && baseFor(object2, iteratee, keys$2);
}
var _baseForOwn = baseForOwn$2;
var ListCache$2 = _ListCache;
function stackClear$1() {
  this.__data__ = new ListCache$2();
  this.size = 0;
}
var _stackClear = stackClear$1;
function stackDelete$1(key2) {
  var data2 = this.__data__, result2 = data2["delete"](key2);
  this.size = data2.size;
  return result2;
}
var _stackDelete = stackDelete$1;
function stackGet$1(key2) {
  return this.__data__.get(key2);
}
var _stackGet = stackGet$1;
function stackHas$1(key2) {
  return this.__data__.has(key2);
}
var _stackHas = stackHas$1;
var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$1 = _MapCache;
var LARGE_ARRAY_SIZE = 200;
function stackSet$1(key2, value2) {
  var data2 = this.__data__;
  if (data2 instanceof ListCache$1) {
    var pairs = data2.__data__;
    if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key2, value2]);
      this.size = ++data2.size;
      return this;
    }
    data2 = this.__data__ = new MapCache$1(pairs);
  }
  data2.set(key2, value2);
  this.size = data2.size;
  return this;
}
var _stackSet = stackSet$1;
var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
function Stack$2(entries) {
  var data2 = this.__data__ = new ListCache(entries);
  this.size = data2.size;
}
Stack$2.prototype.clear = stackClear;
Stack$2.prototype["delete"] = stackDelete;
Stack$2.prototype.get = stackGet;
Stack$2.prototype.has = stackHas;
Stack$2.prototype.set = stackSet;
var _Stack = Stack$2;
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function setCacheAdd$1(value2) {
  this.__data__.set(value2, HASH_UNDEFINED);
  return this;
}
var _setCacheAdd = setCacheAdd$1;
function setCacheHas$1(value2) {
  return this.__data__.has(value2);
}
var _setCacheHas = setCacheHas$1;
var MapCache = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
function SetCache$1(values2) {
  var index2 = -1, length2 = values2 == null ? 0 : values2.length;
  this.__data__ = new MapCache();
  while (++index2 < length2) {
    this.add(values2[index2]);
  }
}
SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
SetCache$1.prototype.has = setCacheHas;
var _SetCache = SetCache$1;
function arraySome$1(array2, predicate) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length;
  while (++index2 < length2) {
    if (predicate(array2[index2], index2, array2)) {
      return true;
    }
  }
  return false;
}
var _arraySome = arraySome$1;
function cacheHas$1(cache, key2) {
  return cache.has(key2);
}
var _cacheHas = cacheHas$1;
var SetCache = _SetCache, arraySome = _arraySome, cacheHas = _cacheHas;
var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
function equalArrays$2(array2, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array2.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array2);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array2;
  }
  var index2 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
  stack.set(array2, other);
  stack.set(other, array2);
  while (++index2 < arrLength) {
    var arrValue = array2[index2], othValue = other[index2];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack) : customizer(arrValue, othValue, index2, array2, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result2 = false;
      break;
    }
    if (seen) {
      if (!arraySome(other, function(othValue2, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result2 = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result2 = false;
      break;
    }
  }
  stack["delete"](array2);
  stack["delete"](other);
  return result2;
}
var _equalArrays = equalArrays$2;
var root$4 = _root;
var Uint8Array$2 = root$4.Uint8Array;
var _Uint8Array = Uint8Array$2;
function mapToArray$1(map2) {
  var index2 = -1, result2 = Array(map2.size);
  map2.forEach(function(value2, key2) {
    result2[++index2] = [key2, value2];
  });
  return result2;
}
var _mapToArray = mapToArray$1;
function setToArray$1(set2) {
  var index2 = -1, result2 = Array(set2.size);
  set2.forEach(function(value2) {
    result2[++index2] = value2;
  });
  return result2;
}
var _setToArray = setToArray$1;
var Symbol$1 = _Symbol, Uint8Array$1 = _Uint8Array, eq = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag$1 = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag$1 = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]";
var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function equalByTag$1(object2, other, tag2, bitmask, customizer, equalFunc, stack) {
  switch (tag2) {
    case dataViewTag$1:
      if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
        return false;
      }
      object2 = object2.buffer;
      other = other.buffer;
    case arrayBufferTag:
      if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object2), new Uint8Array$1(other))) {
        return false;
      }
      return true;
    case boolTag:
    case dateTag:
    case numberTag:
      return eq(+object2, +other);
    case errorTag:
      return object2.name == other.name && object2.message == other.message;
    case regexpTag:
    case stringTag:
      return object2 == other + "";
    case mapTag$1:
      var convert = mapToArray;
    case setTag$1:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray);
      if (object2.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object2);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;
      stack.set(object2, other);
      var result2 = equalArrays$1(convert(object2), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object2);
      return result2;
    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object2) == symbolValueOf.call(other);
      }
  }
  return false;
}
var _equalByTag = equalByTag$1;
function arrayPush$1(array2, values2) {
  var index2 = -1, length2 = values2.length, offset = array2.length;
  while (++index2 < length2) {
    array2[offset + index2] = values2[index2];
  }
  return array2;
}
var _arrayPush = arrayPush$1;
var arrayPush = _arrayPush, isArray$2 = isArray_1;
function baseGetAllKeys$1(object2, keysFunc, symbolsFunc) {
  var result2 = keysFunc(object2);
  return isArray$2(object2) ? result2 : arrayPush(result2, symbolsFunc(object2));
}
var _baseGetAllKeys = baseGetAllKeys$1;
function arrayFilter$1(array2, predicate) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result2 = [];
  while (++index2 < length2) {
    var value2 = array2[index2];
    if (predicate(value2, index2, array2)) {
      result2[resIndex++] = value2;
    }
  }
  return result2;
}
var _arrayFilter = arrayFilter$1;
function stubArray$1() {
  return [];
}
var stubArray_1 = stubArray$1;
var arrayFilter = _arrayFilter, stubArray = stubArray_1;
var objectProto$2 = Object.prototype;
var propertyIsEnumerable = objectProto$2.propertyIsEnumerable;
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbols$1 = !nativeGetSymbols ? stubArray : function(object2) {
  if (object2 == null) {
    return [];
  }
  object2 = Object(object2);
  return arrayFilter(nativeGetSymbols(object2), function(symbol) {
    return propertyIsEnumerable.call(object2, symbol);
  });
};
var _getSymbols = getSymbols$1;
var baseGetAllKeys = _baseGetAllKeys, getSymbols = _getSymbols, keys$1 = keys_1;
function getAllKeys$1(object2) {
  return baseGetAllKeys(object2, keys$1, getSymbols);
}
var _getAllKeys = getAllKeys$1;
var getAllKeys = _getAllKeys;
var COMPARE_PARTIAL_FLAG$3 = 1;
var objectProto$1 = Object.prototype;
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
function equalObjects$1(object2, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index2 = objLength;
  while (index2--) {
    var key2 = objProps[index2];
    if (!(isPartial ? key2 in other : hasOwnProperty$1.call(other, key2))) {
      return false;
    }
  }
  var objStacked = stack.get(object2);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object2;
  }
  var result2 = true;
  stack.set(object2, other);
  stack.set(other, object2);
  var skipCtor = isPartial;
  while (++index2 < objLength) {
    key2 = objProps[index2];
    var objValue = object2[key2], othValue = other[key2];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key2, other, object2, stack) : customizer(objValue, othValue, key2, object2, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result2 = false;
      break;
    }
    skipCtor || (skipCtor = key2 == "constructor");
  }
  if (result2 && !skipCtor) {
    var objCtor = object2.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result2 = false;
    }
  }
  stack["delete"](object2);
  stack["delete"](other);
  return result2;
}
var _equalObjects = equalObjects$1;
var getNative$3 = _getNative, root$3 = _root;
var DataView$1 = getNative$3(root$3, "DataView");
var _DataView = DataView$1;
var getNative$2 = _getNative, root$2 = _root;
var Promise$2 = getNative$2(root$2, "Promise");
var _Promise = Promise$2;
var getNative$1 = _getNative, root$1 = _root;
var Set$2 = getNative$1(root$1, "Set");
var _Set = Set$2;
var getNative = _getNative, root = _root;
var WeakMap$2 = getNative(root, "WeakMap");
var _WeakMap = WeakMap$2;
var DataView = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag = _baseGetTag, toSource = _toSource;
var mapTag = "[object Map]", objectTag$1 = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
var dataViewTag = "[object DataView]";
var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
var getTag$1 = baseGetTag;
if (DataView && getTag$1(new DataView(new ArrayBuffer(1))) != dataViewTag || Map$1 && getTag$1(new Map$1()) != mapTag || Promise$1 && getTag$1(Promise$1.resolve()) != promiseTag || Set$1 && getTag$1(new Set$1()) != setTag || WeakMap$1 && getTag$1(new WeakMap$1()) != weakMapTag) {
  getTag$1 = function(value2) {
    var result2 = baseGetTag(value2), Ctor = result2 == objectTag$1 ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;
        case mapCtorString:
          return mapTag;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag;
        case weakMapCtorString:
          return weakMapTag;
      }
    }
    return result2;
  };
}
var _getTag = getTag$1;
var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag = _getTag, isArray$1 = isArray_1, isBuffer = isBufferExports, isTypedArray = isTypedArray_1;
var COMPARE_PARTIAL_FLAG$2 = 1;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function baseIsEqualDeep$1(object2, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$1(object2), othIsArr = isArray$1(other), objTag = objIsArr ? arrayTag : getTag(object2), othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer(object2)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack$1());
    return objIsArr || isTypedArray(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack$1());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack$1());
  return equalObjects(object2, other, bitmask, customizer, equalFunc, stack);
}
var _baseIsEqualDeep = baseIsEqualDeep$1;
var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike = isObjectLike_1;
function baseIsEqual$2(value2, other, bitmask, customizer, stack) {
  if (value2 === other) {
    return true;
  }
  if (value2 == null || other == null || !isObjectLike(value2) && !isObjectLike(other)) {
    return value2 !== value2 && other !== other;
  }
  return baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual$2, stack);
}
var _baseIsEqual = baseIsEqual$2;
var Stack = _Stack, baseIsEqual$1 = _baseIsEqual;
var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
function baseIsMatch$1(object2, source, matchData, customizer) {
  var index2 = matchData.length, length2 = index2, noCustomizer = !customizer;
  if (object2 == null) {
    return !length2;
  }
  object2 = Object(object2);
  while (index2--) {
    var data2 = matchData[index2];
    if (noCustomizer && data2[2] ? data2[1] !== object2[data2[0]] : !(data2[0] in object2)) {
      return false;
    }
  }
  while (++index2 < length2) {
    data2 = matchData[index2];
    var key2 = data2[0], objValue = object2[key2], srcValue = data2[1];
    if (noCustomizer && data2[2]) {
      if (objValue === void 0 && !(key2 in object2)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result2 = customizer(objValue, srcValue, key2, object2, source, stack);
      }
      if (!(result2 === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result2)) {
        return false;
      }
    }
  }
  return true;
}
var _baseIsMatch = baseIsMatch$1;
var isObject$1 = isObject_1;
function isStrictComparable$2(value2) {
  return value2 === value2 && !isObject$1(value2);
}
var _isStrictComparable = isStrictComparable$2;
var isStrictComparable$1 = _isStrictComparable, keys = keys_1;
function getMatchData$1(object2) {
  var result2 = keys(object2), length2 = result2.length;
  while (length2--) {
    var key2 = result2[length2], value2 = object2[key2];
    result2[length2] = [key2, value2, isStrictComparable$1(value2)];
  }
  return result2;
}
var _getMatchData = getMatchData$1;
function matchesStrictComparable$2(key2, srcValue) {
  return function(object2) {
    if (object2 == null) {
      return false;
    }
    return object2[key2] === srcValue && (srcValue !== void 0 || key2 in Object(object2));
  };
}
var _matchesStrictComparable = matchesStrictComparable$2;
var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
function baseMatches$1(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
  }
  return function(object2) {
    return object2 === source || baseIsMatch(object2, source, matchData);
  };
}
var _baseMatches = baseMatches$1;
var castPath = _castPath, toKey$2 = _toKey;
function baseGet$2(object2, path) {
  path = castPath(path, object2);
  var index2 = 0, length2 = path.length;
  while (object2 != null && index2 < length2) {
    object2 = object2[toKey$2(path[index2++])];
  }
  return index2 && index2 == length2 ? object2 : void 0;
}
var _baseGet = baseGet$2;
var baseGet$1 = _baseGet;
function get$1(object2, path, defaultValue) {
  var result2 = object2 == null ? void 0 : baseGet$1(object2, path);
  return result2 === void 0 ? defaultValue : result2;
}
var get_1 = get$1;
function baseHasIn$1(object2, key2) {
  return object2 != null && key2 in Object(object2);
}
var _baseHasIn = baseHasIn$1;
var baseHasIn = _baseHasIn, hasPath = _hasPath;
function hasIn$1(object2, path) {
  return object2 != null && hasPath(object2, path, baseHasIn);
}
var hasIn_1 = hasIn$1;
var baseIsEqual = _baseIsEqual, get = get_1, hasIn = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$1 = _toKey;
var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
function baseMatchesProperty$1(path, srcValue) {
  if (isKey$1(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey$1(path), srcValue);
  }
  return function(object2) {
    var objValue = get(object2, path);
    return objValue === void 0 && objValue === srcValue ? hasIn(object2, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
var _baseMatchesProperty = baseMatchesProperty$1;
function identity$1(value2) {
  return value2;
}
var identity_1 = identity$1;
function baseProperty$1(key2) {
  return function(object2) {
    return object2 == null ? void 0 : object2[key2];
  };
}
var _baseProperty = baseProperty$1;
var baseGet = _baseGet;
function basePropertyDeep$1(path) {
  return function(object2) {
    return baseGet(object2, path);
  };
}
var _basePropertyDeep = basePropertyDeep$1;
var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey = _toKey;
function property$1(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
var property_1 = property$1;
var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity = identity_1, isArray = isArray_1, property = property_1;
function baseIteratee$2(value2) {
  if (typeof value2 == "function") {
    return value2;
  }
  if (value2 == null) {
    return identity;
  }
  if (typeof value2 == "object") {
    return isArray(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
  }
  return property(value2);
}
var _baseIteratee = baseIteratee$2;
var baseAssignValue$1 = _baseAssignValue, baseForOwn$1 = _baseForOwn, baseIteratee$1 = _baseIteratee;
function mapValues(object2, iteratee) {
  var result2 = {};
  iteratee = baseIteratee$1(iteratee);
  baseForOwn$1(object2, function(value2, key2, object3) {
    baseAssignValue$1(result2, key2, iteratee(value2, key2, object3));
  });
  return result2;
}
var mapValues_1 = mapValues;
const mapValues$1 = /* @__PURE__ */ getDefaultExportFromCjs(mapValues_1);
function Cache(maxSize) {
  this._maxSize = maxSize;
  this.clear();
}
Cache.prototype.clear = function() {
  this._size = 0;
  this._values = /* @__PURE__ */ Object.create(null);
};
Cache.prototype.get = function(key2) {
  return this._values[key2];
};
Cache.prototype.set = function(key2, value2) {
  this._size >= this._maxSize && this.clear();
  if (!(key2 in this._values))
    this._size++;
  return this._values[key2] = value2;
};
var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g, DIGIT_REGEX = /^\d+$/, LEAD_DIGIT_REGEX = /^\d/, SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g, CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/, MAX_CACHE_SIZE = 512;
var pathCache = new Cache(MAX_CACHE_SIZE), setCache = new Cache(MAX_CACHE_SIZE), getCache = new Cache(MAX_CACHE_SIZE);
var propertyExpr = {
  Cache,
  split,
  normalizePath,
  setter: function(path) {
    var parts = normalizePath(path);
    return setCache.get(path) || setCache.set(path, function setter(obj, value2) {
      var index2 = 0;
      var len = parts.length;
      var data2 = obj;
      while (index2 < len - 1) {
        var part = parts[index2];
        if (part === "__proto__" || part === "constructor" || part === "prototype") {
          return obj;
        }
        data2 = data2[parts[index2++]];
      }
      data2[parts[index2]] = value2;
    });
  },
  getter: function(path, safe) {
    var parts = normalizePath(path);
    return getCache.get(path) || getCache.set(path, function getter(data2) {
      var index2 = 0, len = parts.length;
      while (index2 < len) {
        if (data2 != null || !safe)
          data2 = data2[parts[index2++]];
        else
          return;
      }
      return data2;
    });
  },
  join: function(segments) {
    return segments.reduce(function(path, part) {
      return path + (isQuoted(part) || DIGIT_REGEX.test(part) ? "[" + part + "]" : (path ? "." : "") + part);
    }, "");
  },
  forEach: function(path, cb2, thisArg) {
    forEach(Array.isArray(path) ? path : split(path), cb2, thisArg);
  }
};
function normalizePath(path) {
  return pathCache.get(path) || pathCache.set(
    path,
    split(path).map(function(part) {
      return part.replace(CLEAN_QUOTES_REGEX, "$2");
    })
  );
}
function split(path) {
  return path.match(SPLIT_REGEX) || [""];
}
function forEach(parts, iter, thisArg) {
  var len = parts.length, part, idx, isArray2, isBracket;
  for (idx = 0; idx < len; idx++) {
    part = parts[idx];
    if (part) {
      if (shouldBeQuoted(part)) {
        part = '"' + part + '"';
      }
      isBracket = isQuoted(part);
      isArray2 = !isBracket && /^\d+$/.test(part);
      iter.call(thisArg, part, isBracket, isArray2, idx, parts);
    }
  }
}
function isQuoted(str) {
  return typeof str === "string" && str && ["'", '"'].indexOf(str.charAt(0)) !== -1;
}
function hasLeadingNumber(part) {
  return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
}
function hasSpecialChars(part) {
  return SPEC_CHAR_REGEX.test(part);
}
function shouldBeQuoted(part) {
  return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
}
const prefixes = {
  context: "$",
  value: "."
};
class Reference {
  constructor(key2, options = {}) {
    this.key = void 0;
    this.isContext = void 0;
    this.isValue = void 0;
    this.isSibling = void 0;
    this.path = void 0;
    this.getter = void 0;
    this.map = void 0;
    if (typeof key2 !== "string")
      throw new TypeError("ref must be a string, got: " + key2);
    this.key = key2.trim();
    if (key2 === "")
      throw new TypeError("ref must be a non-empty string");
    this.isContext = this.key[0] === prefixes.context;
    this.isValue = this.key[0] === prefixes.value;
    this.isSibling = !this.isContext && !this.isValue;
    let prefix2 = this.isContext ? prefixes.context : this.isValue ? prefixes.value : "";
    this.path = this.key.slice(prefix2.length);
    this.getter = this.path && propertyExpr.getter(this.path, true);
    this.map = options.map;
  }
  getValue(value2, parent2, context) {
    let result2 = this.isContext ? context : this.isValue ? value2 : parent2;
    if (this.getter)
      result2 = this.getter(result2 || {});
    if (this.map)
      result2 = this.map(result2);
    return result2;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */
  cast(value2, options) {
    return this.getValue(value2, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
  }
  resolve() {
    return this;
  }
  describe() {
    return {
      type: "ref",
      key: this.key
    };
  }
  toString() {
    return "Ref(".concat(this.key, ")");
  }
  static isRef(value2) {
    return value2 && value2.__isYupRef;
  }
}
Reference.prototype.__isYupRef = true;
function _extends$5() {
  _extends$5 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$5.apply(this, arguments);
}
function _objectWithoutPropertiesLoose$2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key2 = sourceKeys[i3];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
function createValidation(config2) {
  function validate(_ref, cb2) {
    let {
      value: value2,
      path = "",
      label,
      options,
      originalValue,
      sync: sync2
    } = _ref, rest = _objectWithoutPropertiesLoose$2(_ref, ["value", "path", "label", "options", "originalValue", "sync"]);
    const {
      name: name2,
      test,
      params,
      message
    } = config2;
    let {
      parent: parent2,
      context
    } = options;
    function resolve2(item) {
      return Reference.isRef(item) ? item.getValue(value2, parent2, context) : item;
    }
    function createError(overrides = {}) {
      const nextParams = mapValues$1(_extends$5({
        value: value2,
        originalValue,
        label,
        path: overrides.path || path
      }, params, overrides.params), resolve2);
      const error = new ValidationError(ValidationError.formatError(overrides.message || message, nextParams), value2, nextParams.path, overrides.type || name2);
      error.params = nextParams;
      return error;
    }
    let ctx2 = _extends$5({
      path,
      parent: parent2,
      type: name2,
      createError,
      resolve: resolve2,
      options,
      originalValue
    }, rest);
    if (!sync2) {
      try {
        Promise.resolve(test.call(ctx2, value2, ctx2)).then((validOrError) => {
          if (ValidationError.isError(validOrError))
            cb2(validOrError);
          else if (!validOrError)
            cb2(createError());
          else
            cb2(null, validOrError);
        }).catch(cb2);
      } catch (err) {
        cb2(err);
      }
      return;
    }
    let result2;
    try {
      var _ref2;
      result2 = test.call(ctx2, value2, ctx2);
      if (typeof ((_ref2 = result2) == null ? void 0 : _ref2.then) === "function") {
        throw new Error('Validation test of type: "'.concat(ctx2.type, '" returned a Promise during a synchronous validate. ') + "This test will finish after the validate call has returned");
      }
    } catch (err) {
      cb2(err);
      return;
    }
    if (ValidationError.isError(result2))
      cb2(result2);
    else if (!result2)
      cb2(createError());
    else
      cb2(null, result2);
  }
  validate.OPTIONS = config2;
  return validate;
}
let trim = (part) => part.substr(0, part.length - 1).substr(1);
function getIn(schema, path, value2, context = value2) {
  let parent2, lastPart, lastPartDebug;
  if (!path)
    return {
      parent: parent2,
      parentPath: path,
      schema
    };
  propertyExpr.forEach(path, (_part, isBracket, isArray2) => {
    let part = isBracket ? trim(_part) : _part;
    schema = schema.resolve({
      context,
      parent: parent2,
      value: value2
    });
    if (schema.innerType) {
      let idx = isArray2 ? parseInt(part, 10) : 0;
      if (value2 && idx >= value2.length) {
        throw new Error("Yup.reach cannot resolve an array item at index: ".concat(_part, ", in the path: ").concat(path, ". ") + "because there is no value at that index. ");
      }
      parent2 = value2;
      value2 = value2 && value2[idx];
      schema = schema.innerType;
    }
    if (!isArray2) {
      if (!schema.fields || !schema.fields[part])
        throw new Error("The schema does not contain the path: ".concat(path, ". ") + "(failed at: ".concat(lastPartDebug, ' which is a type: "').concat(schema._type, '")'));
      parent2 = value2;
      value2 = value2 && value2[part];
      schema = schema.fields[part];
    }
    lastPart = part;
    lastPartDebug = isBracket ? "[" + _part + "]" : "." + _part;
  });
  return {
    schema,
    parent: parent2,
    parentPath: lastPart
  };
}
class ReferenceSet {
  constructor() {
    this.list = void 0;
    this.refs = void 0;
    this.list = /* @__PURE__ */ new Set();
    this.refs = /* @__PURE__ */ new Map();
  }
  get size() {
    return this.list.size + this.refs.size;
  }
  describe() {
    const description = [];
    for (const item of this.list)
      description.push(item);
    for (const [, ref] of this.refs)
      description.push(ref.describe());
    return description;
  }
  toArray() {
    return Array.from(this.list).concat(Array.from(this.refs.values()));
  }
  resolveAll(resolve2) {
    return this.toArray().reduce((acc, e3) => acc.concat(Reference.isRef(e3) ? resolve2(e3) : e3), []);
  }
  add(value2) {
    Reference.isRef(value2) ? this.refs.set(value2.key, value2) : this.list.add(value2);
  }
  delete(value2) {
    Reference.isRef(value2) ? this.refs.delete(value2.key) : this.list.delete(value2);
  }
  clone() {
    const next2 = new ReferenceSet();
    next2.list = new Set(this.list);
    next2.refs = new Map(this.refs);
    return next2;
  }
  merge(newItems, removeItems) {
    const next2 = this.clone();
    newItems.list.forEach((value2) => next2.add(value2));
    newItems.refs.forEach((value2) => next2.add(value2));
    removeItems.list.forEach((value2) => next2.delete(value2));
    removeItems.refs.forEach((value2) => next2.delete(value2));
    return next2;
  }
}
function _extends$4() {
  _extends$4 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$4.apply(this, arguments);
}
class BaseSchema {
  constructor(options) {
    this.deps = [];
    this.tests = void 0;
    this.transforms = void 0;
    this.conditions = [];
    this._mutate = void 0;
    this._typeError = void 0;
    this._whitelist = new ReferenceSet();
    this._blacklist = new ReferenceSet();
    this.exclusiveTests = /* @__PURE__ */ Object.create(null);
    this.spec = void 0;
    this.tests = [];
    this.transforms = [];
    this.withMutation(() => {
      this.typeError(mixed.notType);
    });
    this.type = (options == null ? void 0 : options.type) || "mixed";
    this.spec = _extends$4({
      strip: false,
      strict: false,
      abortEarly: true,
      recursive: true,
      nullable: false,
      presence: "optional"
    }, options == null ? void 0 : options.spec);
  }
  // TODO: remove
  get _type() {
    return this.type;
  }
  _typeCheck(_value) {
    return true;
  }
  clone(spec) {
    if (this._mutate) {
      if (spec)
        Object.assign(this.spec, spec);
      return this;
    }
    const next2 = Object.create(Object.getPrototypeOf(this));
    next2.type = this.type;
    next2._typeError = this._typeError;
    next2._whitelistError = this._whitelistError;
    next2._blacklistError = this._blacklistError;
    next2._whitelist = this._whitelist.clone();
    next2._blacklist = this._blacklist.clone();
    next2.exclusiveTests = _extends$4({}, this.exclusiveTests);
    next2.deps = [...this.deps];
    next2.conditions = [...this.conditions];
    next2.tests = [...this.tests];
    next2.transforms = [...this.transforms];
    next2.spec = clone(_extends$4({}, this.spec, spec));
    return next2;
  }
  label(label) {
    let next2 = this.clone();
    next2.spec.label = label;
    return next2;
  }
  meta(...args) {
    if (args.length === 0)
      return this.spec.meta;
    let next2 = this.clone();
    next2.spec.meta = Object.assign(next2.spec.meta || {}, args[0]);
    return next2;
  }
  // withContext<TContext extends AnyObject>(): BaseSchema<
  //   TCast,
  //   TContext,
  //   TOutput
  // > {
  //   return this as any;
  // }
  withMutation(fn2) {
    let before = this._mutate;
    this._mutate = true;
    let result2 = fn2(this);
    this._mutate = before;
    return result2;
  }
  concat(schema) {
    if (!schema || schema === this)
      return this;
    if (schema.type !== this.type && this.type !== "mixed")
      throw new TypeError("You cannot `concat()` schema's of different types: ".concat(this.type, " and ").concat(schema.type));
    let base = this;
    let combined = schema.clone();
    const mergedSpec = _extends$4({}, base.spec, combined.spec);
    combined.spec = mergedSpec;
    combined._typeError || (combined._typeError = base._typeError);
    combined._whitelistError || (combined._whitelistError = base._whitelistError);
    combined._blacklistError || (combined._blacklistError = base._blacklistError);
    combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);
    combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist);
    combined.tests = base.tests;
    combined.exclusiveTests = base.exclusiveTests;
    combined.withMutation((next2) => {
      schema.tests.forEach((fn2) => {
        next2.test(fn2.OPTIONS);
      });
    });
    combined.transforms = [...base.transforms, ...combined.transforms];
    return combined;
  }
  isType(v2) {
    if (this.spec.nullable && v2 === null)
      return true;
    return this._typeCheck(v2);
  }
  resolve(options) {
    let schema = this;
    if (schema.conditions.length) {
      let conditions = schema.conditions;
      schema = schema.clone();
      schema.conditions = [];
      schema = conditions.reduce((schema2, condition) => condition.resolve(schema2, options), schema);
      schema = schema.resolve(options);
    }
    return schema;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {*=} options.parent
   * @param {*=} options.context
   */
  cast(value2, options = {}) {
    let resolvedSchema = this.resolve(_extends$4({
      value: value2
    }, options));
    let result2 = resolvedSchema._cast(value2, options);
    if (value2 !== void 0 && options.assert !== false && resolvedSchema.isType(result2) !== true) {
      let formattedValue = printValue(value2);
      let formattedResult = printValue(result2);
      throw new TypeError("The value of ".concat(options.path || "field", " could not be cast to a value ") + 'that satisfies the schema type: "'.concat(resolvedSchema._type, '". \n\n') + "attempted value: ".concat(formattedValue, " \n") + (formattedResult !== formattedValue ? "result of cast: ".concat(formattedResult) : ""));
    }
    return result2;
  }
  _cast(rawValue, _options) {
    let value2 = rawValue === void 0 ? rawValue : this.transforms.reduce((value3, fn2) => fn2.call(this, value3, rawValue, this), rawValue);
    if (value2 === void 0) {
      value2 = this.getDefault();
    }
    return value2;
  }
  _validate(_value, options = {}, cb2) {
    let {
      sync: sync2,
      path,
      from: from2 = [],
      originalValue = _value,
      strict = this.spec.strict,
      abortEarly = this.spec.abortEarly
    } = options;
    let value2 = _value;
    if (!strict) {
      value2 = this._cast(value2, _extends$4({
        assert: false
      }, options));
    }
    let args = {
      value: value2,
      path,
      options,
      originalValue,
      schema: this,
      label: this.spec.label,
      sync: sync2,
      from: from2
    };
    let initialTests = [];
    if (this._typeError)
      initialTests.push(this._typeError);
    let finalTests = [];
    if (this._whitelistError)
      finalTests.push(this._whitelistError);
    if (this._blacklistError)
      finalTests.push(this._blacklistError);
    runTests({
      args,
      value: value2,
      path,
      sync: sync2,
      tests: initialTests,
      endEarly: abortEarly
    }, (err) => {
      if (err)
        return void cb2(err, value2);
      runTests({
        tests: this.tests.concat(finalTests),
        args,
        path,
        sync: sync2,
        value: value2,
        endEarly: abortEarly
      }, cb2);
    });
  }
  validate(value2, options, maybeCb) {
    let schema = this.resolve(_extends$4({}, options, {
      value: value2
    }));
    return typeof maybeCb === "function" ? schema._validate(value2, options, maybeCb) : new Promise((resolve2, reject) => schema._validate(value2, options, (err, value3) => {
      if (err)
        reject(err);
      else
        resolve2(value3);
    }));
  }
  validateSync(value2, options) {
    let schema = this.resolve(_extends$4({}, options, {
      value: value2
    }));
    let result2;
    schema._validate(value2, _extends$4({}, options, {
      sync: true
    }), (err, value3) => {
      if (err)
        throw err;
      result2 = value3;
    });
    return result2;
  }
  isValid(value2, options) {
    return this.validate(value2, options).then(() => true, (err) => {
      if (ValidationError.isError(err))
        return false;
      throw err;
    });
  }
  isValidSync(value2, options) {
    try {
      this.validateSync(value2, options);
      return true;
    } catch (err) {
      if (ValidationError.isError(err))
        return false;
      throw err;
    }
  }
  _getDefault() {
    let defaultValue = this.spec.default;
    if (defaultValue == null) {
      return defaultValue;
    }
    return typeof defaultValue === "function" ? defaultValue.call(this) : clone(defaultValue);
  }
  getDefault(options) {
    let schema = this.resolve(options || {});
    return schema._getDefault();
  }
  default(def) {
    if (arguments.length === 0) {
      return this._getDefault();
    }
    let next2 = this.clone({
      default: def
    });
    return next2;
  }
  strict(isStrict = true) {
    let next2 = this.clone();
    next2.spec.strict = isStrict;
    return next2;
  }
  _isPresent(value2) {
    return value2 != null;
  }
  defined(message = mixed.defined) {
    return this.test({
      message,
      name: "defined",
      exclusive: true,
      test(value2) {
        return value2 !== void 0;
      }
    });
  }
  required(message = mixed.required) {
    return this.clone({
      presence: "required"
    }).withMutation((s4) => s4.test({
      message,
      name: "required",
      exclusive: true,
      test(value2) {
        return this.schema._isPresent(value2);
      }
    }));
  }
  notRequired() {
    let next2 = this.clone({
      presence: "optional"
    });
    next2.tests = next2.tests.filter((test) => test.OPTIONS.name !== "required");
    return next2;
  }
  nullable(isNullable = true) {
    let next2 = this.clone({
      nullable: isNullable !== false
    });
    return next2;
  }
  transform(fn2) {
    let next2 = this.clone();
    next2.transforms.push(fn2);
    return next2;
  }
  /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */
  test(...args) {
    let opts;
    if (args.length === 1) {
      if (typeof args[0] === "function") {
        opts = {
          test: args[0]
        };
      } else {
        opts = args[0];
      }
    } else if (args.length === 2) {
      opts = {
        name: args[0],
        test: args[1]
      };
    } else {
      opts = {
        name: args[0],
        message: args[1],
        test: args[2]
      };
    }
    if (opts.message === void 0)
      opts.message = mixed.default;
    if (typeof opts.test !== "function")
      throw new TypeError("`test` is a required parameters");
    let next2 = this.clone();
    let validate = createValidation(opts);
    let isExclusive = opts.exclusive || opts.name && next2.exclusiveTests[opts.name] === true;
    if (opts.exclusive) {
      if (!opts.name)
        throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");
    }
    if (opts.name)
      next2.exclusiveTests[opts.name] = !!opts.exclusive;
    next2.tests = next2.tests.filter((fn2) => {
      if (fn2.OPTIONS.name === opts.name) {
        if (isExclusive)
          return false;
        if (fn2.OPTIONS.test === validate.OPTIONS.test)
          return false;
      }
      return true;
    });
    next2.tests.push(validate);
    return next2;
  }
  when(keys2, options) {
    if (!Array.isArray(keys2) && typeof keys2 !== "string") {
      options = keys2;
      keys2 = ".";
    }
    let next2 = this.clone();
    let deps = toArray(keys2).map((key2) => new Reference(key2));
    deps.forEach((dep) => {
      if (dep.isSibling)
        next2.deps.push(dep.key);
    });
    next2.conditions.push(new Condition(deps, options));
    return next2;
  }
  typeError(message) {
    let next2 = this.clone();
    next2._typeError = createValidation({
      message,
      name: "typeError",
      test(value2) {
        if (value2 !== void 0 && !this.schema.isType(value2))
          return this.createError({
            params: {
              type: this.schema._type
            }
          });
        return true;
      }
    });
    return next2;
  }
  oneOf(enums, message = mixed.oneOf) {
    let next2 = this.clone();
    enums.forEach((val2) => {
      next2._whitelist.add(val2);
      next2._blacklist.delete(val2);
    });
    next2._whitelistError = createValidation({
      message,
      name: "oneOf",
      test(value2) {
        if (value2 === void 0)
          return true;
        let valids = this.schema._whitelist;
        let resolved = valids.resolveAll(this.resolve);
        return resolved.includes(value2) ? true : this.createError({
          params: {
            values: valids.toArray().join(", "),
            resolved
          }
        });
      }
    });
    return next2;
  }
  notOneOf(enums, message = mixed.notOneOf) {
    let next2 = this.clone();
    enums.forEach((val2) => {
      next2._blacklist.add(val2);
      next2._whitelist.delete(val2);
    });
    next2._blacklistError = createValidation({
      message,
      name: "notOneOf",
      test(value2) {
        let invalids = this.schema._blacklist;
        let resolved = invalids.resolveAll(this.resolve);
        if (resolved.includes(value2))
          return this.createError({
            params: {
              values: invalids.toArray().join(", "),
              resolved
            }
          });
        return true;
      }
    });
    return next2;
  }
  strip(strip = true) {
    let next2 = this.clone();
    next2.spec.strip = strip;
    return next2;
  }
  describe() {
    const next2 = this.clone();
    const {
      label,
      meta: meta2
    } = next2.spec;
    const description = {
      meta: meta2,
      label,
      type: next2.type,
      oneOf: next2._whitelist.describe(),
      notOneOf: next2._blacklist.describe(),
      tests: next2.tests.map((fn2) => ({
        name: fn2.OPTIONS.name,
        params: fn2.OPTIONS.params
      })).filter((n2, idx, list2) => list2.findIndex((c7) => c7.name === n2.name) === idx)
    };
    return description;
  }
}
BaseSchema.prototype.__isYupSchema__ = true;
for (const method of ["validate", "validateSync"])
  BaseSchema.prototype["".concat(method, "At")] = function(path, value2, options = {}) {
    const {
      parent: parent2,
      parentPath,
      schema
    } = getIn(this, path, value2, options.context);
    return schema[method](parent2 && parent2[parentPath], _extends$4({}, options, {
      parent: parent2,
      path
    }));
  };
for (const alias of ["equals", "is"])
  BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;
for (const alias of ["not", "nope"])
  BaseSchema.prototype[alias] = BaseSchema.prototype.notOneOf;
BaseSchema.prototype.optional = BaseSchema.prototype.notRequired;
const Mixed = BaseSchema;
Mixed.prototype;
const isAbsent = (value2) => value2 == null;
let rEmail = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
let rUrl = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
let rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
let isTrimmed = (value2) => isAbsent(value2) || value2 === value2.trim();
let objStringTag = {}.toString();
function create$1() {
  return new StringSchema();
}
class StringSchema extends BaseSchema {
  constructor() {
    super({
      type: "string"
    });
    this.withMutation(() => {
      this.transform(function(value2) {
        if (this.isType(value2))
          return value2;
        if (Array.isArray(value2))
          return value2;
        const strValue = value2 != null && value2.toString ? value2.toString() : value2;
        if (strValue === objStringTag)
          return value2;
        return strValue;
      });
    });
  }
  _typeCheck(value2) {
    if (value2 instanceof String)
      value2 = value2.valueOf();
    return typeof value2 === "string";
  }
  _isPresent(value2) {
    return super._isPresent(value2) && !!value2.length;
  }
  length(length2, message = string.length) {
    return this.test({
      message,
      name: "length",
      exclusive: true,
      params: {
        length: length2
      },
      test(value2) {
        return isAbsent(value2) || value2.length === this.resolve(length2);
      }
    });
  }
  min(min2, message = string.min) {
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min: min2
      },
      test(value2) {
        return isAbsent(value2) || value2.length >= this.resolve(min2);
      }
    });
  }
  max(max2, message = string.max) {
    return this.test({
      name: "max",
      exclusive: true,
      message,
      params: {
        max: max2
      },
      test(value2) {
        return isAbsent(value2) || value2.length <= this.resolve(max2);
      }
    });
  }
  matches(regex, options) {
    let excludeEmptyString = false;
    let message;
    let name2;
    if (options) {
      if (typeof options === "object") {
        ({
          excludeEmptyString = false,
          message,
          name: name2
        } = options);
      } else {
        message = options;
      }
    }
    return this.test({
      name: name2 || "matches",
      message: message || string.matches,
      params: {
        regex
      },
      test: (value2) => isAbsent(value2) || value2 === "" && excludeEmptyString || value2.search(regex) !== -1
    });
  }
  email(message = string.email) {
    return this.matches(rEmail, {
      name: "email",
      message,
      excludeEmptyString: true
    });
  }
  url(message = string.url) {
    return this.matches(rUrl, {
      name: "url",
      message,
      excludeEmptyString: true
    });
  }
  uuid(message = string.uuid) {
    return this.matches(rUUID, {
      name: "uuid",
      message,
      excludeEmptyString: false
    });
  }
  //-- transforms --
  ensure() {
    return this.default("").transform((val2) => val2 === null ? "" : val2);
  }
  trim(message = string.trim) {
    return this.transform((val2) => val2 != null ? val2.trim() : val2).test({
      message,
      name: "trim",
      test: isTrimmed
    });
  }
  lowercase(message = string.lowercase) {
    return this.transform((value2) => !isAbsent(value2) ? value2.toLowerCase() : value2).test({
      message,
      name: "string_case",
      exclusive: true,
      test: (value2) => isAbsent(value2) || value2 === value2.toLowerCase()
    });
  }
  uppercase(message = string.uppercase) {
    return this.transform((value2) => !isAbsent(value2) ? value2.toUpperCase() : value2).test({
      message,
      name: "string_case",
      exclusive: true,
      test: (value2) => isAbsent(value2) || value2 === value2.toUpperCase()
    });
  }
}
create$1.prototype = StringSchema.prototype;
var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
function parseIsoDate(date2) {
  var numericKeys = [1, 4, 5, 6, 7, 10, 11], minutesOffset = 0, timestamp, struct;
  if (struct = isoReg.exec(date2)) {
    for (var i3 = 0, k3; k3 = numericKeys[i3]; ++i3)
      struct[k3] = +struct[k3] || 0;
    struct[2] = (+struct[2] || 1) - 1;
    struct[3] = +struct[3] || 1;
    struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0;
    if ((struct[8] === void 0 || struct[8] === "") && (struct[9] === void 0 || struct[9] === ""))
      timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);
    else {
      if (struct[8] !== "Z" && struct[9] !== void 0) {
        minutesOffset = struct[10] * 60 + struct[11];
        if (struct[9] === "+")
          minutesOffset = 0 - minutesOffset;
      }
      timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    }
  } else
    timestamp = Date.parse ? Date.parse(date2) : NaN;
  return timestamp;
}
let invalidDate = /* @__PURE__ */ new Date("");
let isDate$1 = (obj) => Object.prototype.toString.call(obj) === "[object Date]";
class DateSchema extends BaseSchema {
  constructor() {
    super({
      type: "date"
    });
    this.withMutation(() => {
      this.transform(function(value2) {
        if (this.isType(value2))
          return value2;
        value2 = parseIsoDate(value2);
        return !isNaN(value2) ? new Date(value2) : invalidDate;
      });
    });
  }
  _typeCheck(v2) {
    return isDate$1(v2) && !isNaN(v2.getTime());
  }
  prepareParam(ref, name2) {
    let param;
    if (!Reference.isRef(ref)) {
      let cast = this.cast(ref);
      if (!this._typeCheck(cast))
        throw new TypeError("`".concat(name2, "` must be a Date or a value that can be `cast()` to a Date"));
      param = cast;
    } else {
      param = ref;
    }
    return param;
  }
  min(min2, message = date.min) {
    let limit = this.prepareParam(min2, "min");
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min: min2
      },
      test(value2) {
        return isAbsent(value2) || value2 >= this.resolve(limit);
      }
    });
  }
  max(max2, message = date.max) {
    let limit = this.prepareParam(max2, "max");
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        max: max2
      },
      test(value2) {
        return isAbsent(value2) || value2 <= this.resolve(limit);
      }
    });
  }
}
DateSchema.INVALID_DATE = invalidDate;
DateSchema.prototype;
function arrayReduce$1(array2, iteratee, accumulator, initAccum) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length;
  if (initAccum && length2) {
    accumulator = array2[++index2];
  }
  while (++index2 < length2) {
    accumulator = iteratee(accumulator, array2[index2], index2, array2);
  }
  return accumulator;
}
var _arrayReduce = arrayReduce$1;
function basePropertyOf$1(object2) {
  return function(key2) {
    return object2 == null ? void 0 : object2[key2];
  };
}
var _basePropertyOf = basePropertyOf$1;
var basePropertyOf = _basePropertyOf;
var deburredLetters = {
  // Latin-1 Supplement block.
  "À": "A",
  "Á": "A",
  "Â": "A",
  "Ã": "A",
  "Ä": "A",
  "Å": "A",
  "à": "a",
  "á": "a",
  "â": "a",
  "ã": "a",
  "ä": "a",
  "å": "a",
  "Ç": "C",
  "ç": "c",
  "Ð": "D",
  "ð": "d",
  "È": "E",
  "É": "E",
  "Ê": "E",
  "Ë": "E",
  "è": "e",
  "é": "e",
  "ê": "e",
  "ë": "e",
  "Ì": "I",
  "Í": "I",
  "Î": "I",
  "Ï": "I",
  "ì": "i",
  "í": "i",
  "î": "i",
  "ï": "i",
  "Ñ": "N",
  "ñ": "n",
  "Ò": "O",
  "Ó": "O",
  "Ô": "O",
  "Õ": "O",
  "Ö": "O",
  "Ø": "O",
  "ò": "o",
  "ó": "o",
  "ô": "o",
  "õ": "o",
  "ö": "o",
  "ø": "o",
  "Ù": "U",
  "Ú": "U",
  "Û": "U",
  "Ü": "U",
  "ù": "u",
  "ú": "u",
  "û": "u",
  "ü": "u",
  "Ý": "Y",
  "ý": "y",
  "ÿ": "y",
  "Æ": "Ae",
  "æ": "ae",
  "Þ": "Th",
  "þ": "th",
  "ß": "ss",
  // Latin Extended-A block.
  "Ā": "A",
  "Ă": "A",
  "Ą": "A",
  "ā": "a",
  "ă": "a",
  "ą": "a",
  "Ć": "C",
  "Ĉ": "C",
  "Ċ": "C",
  "Č": "C",
  "ć": "c",
  "ĉ": "c",
  "ċ": "c",
  "č": "c",
  "Ď": "D",
  "Đ": "D",
  "ď": "d",
  "đ": "d",
  "Ē": "E",
  "Ĕ": "E",
  "Ė": "E",
  "Ę": "E",
  "Ě": "E",
  "ē": "e",
  "ĕ": "e",
  "ė": "e",
  "ę": "e",
  "ě": "e",
  "Ĝ": "G",
  "Ğ": "G",
  "Ġ": "G",
  "Ģ": "G",
  "ĝ": "g",
  "ğ": "g",
  "ġ": "g",
  "ģ": "g",
  "Ĥ": "H",
  "Ħ": "H",
  "ĥ": "h",
  "ħ": "h",
  "Ĩ": "I",
  "Ī": "I",
  "Ĭ": "I",
  "Į": "I",
  "İ": "I",
  "ĩ": "i",
  "ī": "i",
  "ĭ": "i",
  "į": "i",
  "ı": "i",
  "Ĵ": "J",
  "ĵ": "j",
  "Ķ": "K",
  "ķ": "k",
  "ĸ": "k",
  "Ĺ": "L",
  "Ļ": "L",
  "Ľ": "L",
  "Ŀ": "L",
  "Ł": "L",
  "ĺ": "l",
  "ļ": "l",
  "ľ": "l",
  "ŀ": "l",
  "ł": "l",
  "Ń": "N",
  "Ņ": "N",
  "Ň": "N",
  "Ŋ": "N",
  "ń": "n",
  "ņ": "n",
  "ň": "n",
  "ŋ": "n",
  "Ō": "O",
  "Ŏ": "O",
  "Ő": "O",
  "ō": "o",
  "ŏ": "o",
  "ő": "o",
  "Ŕ": "R",
  "Ŗ": "R",
  "Ř": "R",
  "ŕ": "r",
  "ŗ": "r",
  "ř": "r",
  "Ś": "S",
  "Ŝ": "S",
  "Ş": "S",
  "Š": "S",
  "ś": "s",
  "ŝ": "s",
  "ş": "s",
  "š": "s",
  "Ţ": "T",
  "Ť": "T",
  "Ŧ": "T",
  "ţ": "t",
  "ť": "t",
  "ŧ": "t",
  "Ũ": "U",
  "Ū": "U",
  "Ŭ": "U",
  "Ů": "U",
  "Ű": "U",
  "Ų": "U",
  "ũ": "u",
  "ū": "u",
  "ŭ": "u",
  "ů": "u",
  "ű": "u",
  "ų": "u",
  "Ŵ": "W",
  "ŵ": "w",
  "Ŷ": "Y",
  "ŷ": "y",
  "Ÿ": "Y",
  "Ź": "Z",
  "Ż": "Z",
  "Ž": "Z",
  "ź": "z",
  "ż": "z",
  "ž": "z",
  "Ĳ": "IJ",
  "ĳ": "ij",
  "Œ": "Oe",
  "œ": "oe",
  "ŉ": "'n",
  "ſ": "s"
};
var deburrLetter$1 = basePropertyOf(deburredLetters);
var _deburrLetter = deburrLetter$1;
var deburrLetter = _deburrLetter, toString$3 = toString_1;
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
var rsComboMarksRange$3 = "\\u0300-\\u036f", reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$3 = "\\u20d0-\\u20ff", rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3;
var rsCombo$2 = "[" + rsComboRange$3 + "]";
var reComboMark = RegExp(rsCombo$2, "g");
function deburr$1(string2) {
  string2 = toString$3(string2);
  return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
}
var deburr_1 = deburr$1;
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function asciiWords$1(string2) {
  return string2.match(reAsciiWord) || [];
}
var _asciiWords = asciiWords$1;
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function hasUnicodeWord$1(string2) {
  return reHasUnicodeWord.test(string2);
}
var _hasUnicodeWord = hasUnicodeWord$1;
var rsAstralRange$2 = "\\ud800-\\udfff", rsComboMarksRange$2 = "\\u0300-\\u036f", reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$2 = "\\u20d0-\\u20ff", rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange$2 = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
var rsApos$1 = "['’]", rsBreak = "[" + rsBreakRange + "]", rsCombo$1 = "[" + rsComboRange$2 + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz$1 = "\\ud83c[\\udffb-\\udfff]", rsModifier$1 = "(?:" + rsCombo$1 + "|" + rsFitz$1 + ")", rsNonAstral$1 = "[^" + rsAstralRange$2 + "]", rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ$2 = "\\u200d";
var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos$1 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos$1 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod$1 = rsModifier$1 + "?", rsOptVar$1 = "[" + rsVarRange$2 + "]?", rsOptJoin$1 = "(?:" + rsZWJ$2 + "(?:" + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsOptVar$1 + reOptMod$1 + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1, rsEmoji = "(?:" + [rsDingbat, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsSeq$1;
var reUnicodeWord = RegExp([
  rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
  rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
  rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
  rsUpper + "+" + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join("|"), "g");
function unicodeWords$1(string2) {
  return string2.match(reUnicodeWord) || [];
}
var _unicodeWords = unicodeWords$1;
var asciiWords = _asciiWords, hasUnicodeWord = _hasUnicodeWord, toString$2 = toString_1, unicodeWords = _unicodeWords;
function words$1(string2, pattern, guard) {
  string2 = toString$2(string2);
  pattern = guard ? void 0 : pattern;
  if (pattern === void 0) {
    return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
  }
  return string2.match(pattern) || [];
}
var words_1 = words$1;
var arrayReduce = _arrayReduce, deburr = deburr_1, words = words_1;
var rsApos = "['’]";
var reApos = RegExp(rsApos, "g");
function createCompounder$2(callback) {
  return function(string2) {
    return arrayReduce(words(deburr(string2).replace(reApos, "")), callback, "");
  };
}
var _createCompounder = createCompounder$2;
var createCompounder$1 = _createCompounder;
var snakeCase = createCompounder$1(function(result2, word, index2) {
  return result2 + (index2 ? "_" : "") + word.toLowerCase();
});
var snakeCase_1 = snakeCase;
const snakeCase$1 = /* @__PURE__ */ getDefaultExportFromCjs(snakeCase_1);
function baseSlice$1(array2, start2, end) {
  var index2 = -1, length2 = array2.length;
  if (start2 < 0) {
    start2 = -start2 > length2 ? 0 : length2 + start2;
  }
  end = end > length2 ? length2 : end;
  if (end < 0) {
    end += length2;
  }
  length2 = start2 > end ? 0 : end - start2 >>> 0;
  start2 >>>= 0;
  var result2 = Array(length2);
  while (++index2 < length2) {
    result2[index2] = array2[index2 + start2];
  }
  return result2;
}
var _baseSlice = baseSlice$1;
var baseSlice = _baseSlice;
function castSlice$1(array2, start2, end) {
  var length2 = array2.length;
  end = end === void 0 ? length2 : end;
  return !start2 && end >= length2 ? array2 : baseSlice(array2, start2, end);
}
var _castSlice = castSlice$1;
var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1, rsVarRange$1 = "\\ufe0e\\ufe0f";
var rsZWJ$1 = "\\u200d";
var reHasUnicode = RegExp("[" + rsZWJ$1 + rsAstralRange$1 + rsComboRange$1 + rsVarRange$1 + "]");
function hasUnicode$2(string2) {
  return reHasUnicode.test(string2);
}
var _hasUnicode = hasUnicode$2;
function asciiToArray$1(string2) {
  return string2.split("");
}
var _asciiToArray = asciiToArray$1;
var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
function unicodeToArray$1(string2) {
  return string2.match(reUnicode) || [];
}
var _unicodeToArray = unicodeToArray$1;
var asciiToArray = _asciiToArray, hasUnicode$1 = _hasUnicode, unicodeToArray = _unicodeToArray;
function stringToArray$1(string2) {
  return hasUnicode$1(string2) ? unicodeToArray(string2) : asciiToArray(string2);
}
var _stringToArray = stringToArray$1;
var castSlice = _castSlice, hasUnicode = _hasUnicode, stringToArray = _stringToArray, toString$1 = toString_1;
function createCaseFirst$1(methodName) {
  return function(string2) {
    string2 = toString$1(string2);
    var strSymbols = hasUnicode(string2) ? stringToArray(string2) : void 0;
    var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
    var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
    return chr[methodName]() + trailing;
  };
}
var _createCaseFirst = createCaseFirst$1;
var createCaseFirst = _createCaseFirst;
var upperFirst$1 = createCaseFirst("toUpperCase");
var upperFirst_1 = upperFirst$1;
var toString = toString_1, upperFirst = upperFirst_1;
function capitalize$1(string2) {
  return upperFirst(toString(string2).toLowerCase());
}
var capitalize_1 = capitalize$1;
var capitalize = capitalize_1, createCompounder = _createCompounder;
var camelCase = createCompounder(function(result2, word, index2) {
  word = word.toLowerCase();
  return result2 + (index2 ? capitalize(word) : word);
});
var camelCase_1 = camelCase;
const camelCase$1 = /* @__PURE__ */ getDefaultExportFromCjs(camelCase_1);
var baseAssignValue = _baseAssignValue, baseForOwn = _baseForOwn, baseIteratee = _baseIteratee;
function mapKeys(object2, iteratee) {
  var result2 = {};
  iteratee = baseIteratee(iteratee);
  baseForOwn(object2, function(value2, key2, object3) {
    baseAssignValue(result2, iteratee(value2, key2, object3), value2);
  });
  return result2;
}
var mapKeys_1 = mapKeys;
const mapKeys$1 = /* @__PURE__ */ getDefaultExportFromCjs(mapKeys_1);
var toposort$2 = { exports: {} };
toposort$2.exports = function(edges) {
  return toposort(uniqueNodes(edges), edges);
};
toposort$2.exports.array = toposort;
function toposort(nodes, edges) {
  var cursor2 = nodes.length, sorted = new Array(cursor2), visited = {}, i3 = cursor2, outgoingEdges = makeOutgoingEdges(edges), nodesHash = makeNodesHash(nodes);
  edges.forEach(function(edge) {
    if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
      throw new Error("Unknown node. There is an unknown node in the supplied edges.");
    }
  });
  while (i3--) {
    if (!visited[i3])
      visit(nodes[i3], i3, /* @__PURE__ */ new Set());
  }
  return sorted;
  function visit(node2, i4, predecessors) {
    if (predecessors.has(node2)) {
      var nodeRep;
      try {
        nodeRep = ", node was:" + JSON.stringify(node2);
      } catch (e3) {
        nodeRep = "";
      }
      throw new Error("Cyclic dependency" + nodeRep);
    }
    if (!nodesHash.has(node2)) {
      throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(node2));
    }
    if (visited[i4])
      return;
    visited[i4] = true;
    var outgoing = outgoingEdges.get(node2) || /* @__PURE__ */ new Set();
    outgoing = Array.from(outgoing);
    if (i4 = outgoing.length) {
      predecessors.add(node2);
      do {
        var child = outgoing[--i4];
        visit(child, nodesHash.get(child), predecessors);
      } while (i4);
      predecessors.delete(node2);
    }
    sorted[--cursor2] = node2;
  }
}
function uniqueNodes(arr) {
  var res = /* @__PURE__ */ new Set();
  for (var i3 = 0, len = arr.length; i3 < len; i3++) {
    var edge = arr[i3];
    res.add(edge[0]);
    res.add(edge[1]);
  }
  return Array.from(res);
}
function makeOutgoingEdges(arr) {
  var edges = /* @__PURE__ */ new Map();
  for (var i3 = 0, len = arr.length; i3 < len; i3++) {
    var edge = arr[i3];
    if (!edges.has(edge[0]))
      edges.set(edge[0], /* @__PURE__ */ new Set());
    if (!edges.has(edge[1]))
      edges.set(edge[1], /* @__PURE__ */ new Set());
    edges.get(edge[0]).add(edge[1]);
  }
  return edges;
}
function makeNodesHash(arr) {
  var res = /* @__PURE__ */ new Map();
  for (var i3 = 0, len = arr.length; i3 < len; i3++) {
    res.set(arr[i3], i3);
  }
  return res;
}
var toposortExports = toposort$2.exports;
const toposort$1 = /* @__PURE__ */ getDefaultExportFromCjs(toposortExports);
function sortFields(fields, excludedEdges = []) {
  let edges = [];
  let nodes = /* @__PURE__ */ new Set();
  let excludes = new Set(excludedEdges.map(([a4, b3]) => "".concat(a4, "-").concat(b3)));
  function addNode(depPath, key2) {
    let node2 = propertyExpr.split(depPath)[0];
    nodes.add(node2);
    if (!excludes.has("".concat(key2, "-").concat(node2)))
      edges.push([key2, node2]);
  }
  for (const key2 in fields)
    if (has$1(fields, key2)) {
      let value2 = fields[key2];
      nodes.add(key2);
      if (Reference.isRef(value2) && value2.isSibling)
        addNode(value2.path, key2);
      else if (isSchema(value2) && "deps" in value2)
        value2.deps.forEach((path) => addNode(path, key2));
    }
  return toposort$1.array(Array.from(nodes), edges).reverse();
}
function findIndex$1(arr, err) {
  let idx = Infinity;
  arr.some((key2, ii2) => {
    var _err$path;
    if (((_err$path = err.path) == null ? void 0 : _err$path.indexOf(key2)) !== -1) {
      idx = ii2;
      return true;
    }
  });
  return idx;
}
function sortByKeyOrder(keys2) {
  return (a4, b3) => {
    return findIndex$1(keys2, a4) - findIndex$1(keys2, b3);
  };
}
function _extends$3() {
  _extends$3 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$3.apply(this, arguments);
}
let isObject = (obj) => Object.prototype.toString.call(obj) === "[object Object]";
function unknown(ctx2, value2) {
  let known = Object.keys(ctx2.fields);
  return Object.keys(value2).filter((key2) => known.indexOf(key2) === -1);
}
const defaultSort = sortByKeyOrder([]);
class ObjectSchema extends BaseSchema {
  constructor(spec) {
    super({
      type: "object"
    });
    this.fields = /* @__PURE__ */ Object.create(null);
    this._sortErrors = defaultSort;
    this._nodes = [];
    this._excludedEdges = [];
    this.withMutation(() => {
      this.transform(function coerce(value2) {
        if (typeof value2 === "string") {
          try {
            value2 = JSON.parse(value2);
          } catch (err) {
            value2 = null;
          }
        }
        if (this.isType(value2))
          return value2;
        return null;
      });
      if (spec) {
        this.shape(spec);
      }
    });
  }
  _typeCheck(value2) {
    return isObject(value2) || typeof value2 === "function";
  }
  _cast(_value, options = {}) {
    var _options$stripUnknown;
    let value2 = super._cast(_value, options);
    if (value2 === void 0)
      return this.getDefault();
    if (!this._typeCheck(value2))
      return value2;
    let fields = this.fields;
    let strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
    let props = this._nodes.concat(Object.keys(value2).filter((v2) => this._nodes.indexOf(v2) === -1));
    let intermediateValue = {};
    let innerOptions = _extends$3({}, options, {
      parent: intermediateValue,
      __validating: options.__validating || false
    });
    let isChanged = false;
    for (const prop of props) {
      let field = fields[prop];
      let exists = has$1(value2, prop);
      if (field) {
        let fieldValue;
        let inputValue = value2[prop];
        innerOptions.path = (options.path ? "".concat(options.path, ".") : "") + prop;
        field = field.resolve({
          value: inputValue,
          context: options.context,
          parent: intermediateValue
        });
        let fieldSpec = "spec" in field ? field.spec : void 0;
        let strict = fieldSpec == null ? void 0 : fieldSpec.strict;
        if (fieldSpec == null ? void 0 : fieldSpec.strip) {
          isChanged = isChanged || prop in value2;
          continue;
        }
        fieldValue = !options.__validating || !strict ? (
          // TODO: use _cast, this is double resolving
          field.cast(value2[prop], innerOptions)
        ) : value2[prop];
        if (fieldValue !== void 0) {
          intermediateValue[prop] = fieldValue;
        }
      } else if (exists && !strip) {
        intermediateValue[prop] = value2[prop];
      }
      if (intermediateValue[prop] !== value2[prop]) {
        isChanged = true;
      }
    }
    return isChanged ? intermediateValue : value2;
  }
  _validate(_value, opts = {}, callback) {
    let errors = [];
    let {
      sync: sync2,
      from: from2 = [],
      originalValue = _value,
      abortEarly = this.spec.abortEarly,
      recursive = this.spec.recursive
    } = opts;
    from2 = [{
      schema: this,
      value: originalValue
    }, ...from2];
    opts.__validating = true;
    opts.originalValue = originalValue;
    opts.from = from2;
    super._validate(_value, opts, (err, value2) => {
      if (err) {
        if (!ValidationError.isError(err) || abortEarly) {
          return void callback(err, value2);
        }
        errors.push(err);
      }
      if (!recursive || !isObject(value2)) {
        callback(errors[0] || null, value2);
        return;
      }
      originalValue = originalValue || value2;
      let tests = this._nodes.map((key2) => (_2, cb2) => {
        let path = key2.indexOf(".") === -1 ? (opts.path ? "".concat(opts.path, ".") : "") + key2 : "".concat(opts.path || "", '["').concat(key2, '"]');
        let field = this.fields[key2];
        if (field && "validate" in field) {
          field.validate(value2[key2], _extends$3({}, opts, {
            // @ts-ignore
            path,
            from: from2,
            // inner fields are always strict:
            // 1. this isn't strict so the casting will also have cast inner values
            // 2. this is strict in which case the nested values weren't cast either
            strict: true,
            parent: value2,
            originalValue: originalValue[key2]
          }), cb2);
          return;
        }
        cb2(null);
      });
      runTests({
        sync: sync2,
        tests,
        value: value2,
        errors,
        endEarly: abortEarly,
        sort: this._sortErrors,
        path: opts.path
      }, callback);
    });
  }
  clone(spec) {
    const next2 = super.clone(spec);
    next2.fields = _extends$3({}, this.fields);
    next2._nodes = this._nodes;
    next2._excludedEdges = this._excludedEdges;
    next2._sortErrors = this._sortErrors;
    return next2;
  }
  concat(schema) {
    let next2 = super.concat(schema);
    let nextFields = next2.fields;
    for (let [field, schemaOrRef] of Object.entries(this.fields)) {
      const target = nextFields[field];
      if (target === void 0) {
        nextFields[field] = schemaOrRef;
      } else if (target instanceof BaseSchema && schemaOrRef instanceof BaseSchema) {
        nextFields[field] = schemaOrRef.concat(target);
      }
    }
    return next2.withMutation(() => next2.shape(nextFields, this._excludedEdges));
  }
  getDefaultFromShape() {
    let dft = {};
    this._nodes.forEach((key2) => {
      const field = this.fields[key2];
      dft[key2] = "default" in field ? field.getDefault() : void 0;
    });
    return dft;
  }
  _getDefault() {
    if ("default" in this.spec) {
      return super._getDefault();
    }
    if (!this._nodes.length) {
      return void 0;
    }
    return this.getDefaultFromShape();
  }
  shape(additions, excludes = []) {
    let next2 = this.clone();
    let fields = Object.assign(next2.fields, additions);
    next2.fields = fields;
    next2._sortErrors = sortByKeyOrder(Object.keys(fields));
    if (excludes.length) {
      if (!Array.isArray(excludes[0]))
        excludes = [excludes];
      next2._excludedEdges = [...next2._excludedEdges, ...excludes];
    }
    next2._nodes = sortFields(fields, next2._excludedEdges);
    return next2;
  }
  pick(keys2) {
    const picked = {};
    for (const key2 of keys2) {
      if (this.fields[key2])
        picked[key2] = this.fields[key2];
    }
    return this.clone().withMutation((next2) => {
      next2.fields = {};
      return next2.shape(picked);
    });
  }
  omit(keys2) {
    const next2 = this.clone();
    const fields = next2.fields;
    next2.fields = {};
    for (const key2 of keys2) {
      delete fields[key2];
    }
    return next2.withMutation(() => next2.shape(fields));
  }
  from(from2, to2, alias) {
    let fromGetter = propertyExpr.getter(from2, true);
    return this.transform((obj) => {
      if (obj == null)
        return obj;
      let newObj = obj;
      if (has$1(obj, from2)) {
        newObj = _extends$3({}, obj);
        if (!alias)
          delete newObj[from2];
        newObj[to2] = fromGetter(obj);
      }
      return newObj;
    });
  }
  noUnknown(noAllow = true, message = object.noUnknown) {
    if (typeof noAllow === "string") {
      message = noAllow;
      noAllow = true;
    }
    let next2 = this.test({
      name: "noUnknown",
      exclusive: true,
      message,
      test(value2) {
        if (value2 == null)
          return true;
        const unknownKeys = unknown(this.schema, value2);
        return !noAllow || unknownKeys.length === 0 || this.createError({
          params: {
            unknown: unknownKeys.join(", ")
          }
        });
      }
    });
    next2.spec.noUnknown = noAllow;
    return next2;
  }
  unknown(allow = true, message = object.noUnknown) {
    return this.noUnknown(!allow, message);
  }
  transformKeys(fn2) {
    return this.transform((obj) => obj && mapKeys$1(obj, (_2, key2) => fn2(key2)));
  }
  camelCase() {
    return this.transformKeys(camelCase$1);
  }
  snakeCase() {
    return this.transformKeys(snakeCase$1);
  }
  constantCase() {
    return this.transformKeys((key2) => snakeCase$1(key2).toUpperCase());
  }
  describe() {
    let base = super.describe();
    base.fields = mapValues$1(this.fields, (value2) => value2.describe());
    return base;
  }
}
function create(spec) {
  return new ObjectSchema(spec);
}
create.prototype = ObjectSchema.prototype;
const Button = ({
  variant = "primary",
  onClick = null,
  onContextMenu = null,
  children,
  disabled,
  type = "button",
  extraClass,
  onMouseDown,
  onTouchStart,
  onMouseUp,
  onMouseLeave,
  onTouchEnd
}) => {
  let base = "w-full px-4 py-3.5 rounded font-medium disabled:cursor-not-allowed disabled:bg-opacity-50 focus:outline-none hover:border-color-transparent hover:outline-none";
  if (extraClass && extraClass.length) {
    base += " ".concat(extraClass ? extraClass + "" : "");
  }
  if (variant === "primary") {
    base += " text-white bg-black hover:bg-opacity-90 font-semibold";
  } else if (variant === "secondary") {
    base += " text-white bg-gray-400";
  }
  if (disabled) {
    base += " bg-opacity-20 text-slate-50 hover:bg-opacity-20";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "button",
    {
      onMouseUp,
      onMouseDown,
      onTouchStart,
      onMouseLeave,
      onTouchEnd,
      onContextMenu,
      type,
      disabled,
      className: base,
      onClick,
      children
    }
  );
};
var n, o, i$1 = (n = function(t3, e3) {
  return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
    t4.__proto__ = e4;
  } || function(t4, e4) {
    for (var r2 in e4)
      e4.hasOwnProperty(r2) && (t4[r2] = e4[r2]);
  }, n(t3, e3);
}, function(t3, e3) {
  function r2() {
    this.constructor = t3;
  }
  n(t3, e3), t3.prototype = null === e3 ? Object.create(e3) : (r2.prototype = e3.prototype, new r2());
}), a = function(t3) {
  function e3(e4) {
    var r2, n2, o2, i3 = this.constructor, a4 = t3.call(this, e4) || this;
    return Object.defineProperty(a4, "name", { value: i3.name, enumerable: false, configurable: true }), r2 = a4, n2 = i3.prototype, (o2 = Object.setPrototypeOf) ? o2(r2, n2) : r2.__proto__ = n2, function(t4, e5) {
      void 0 === e5 && (e5 = t4.constructor);
      var r3 = Error.captureStackTrace;
      r3 && r3(t4, e5);
    }(a4), a4;
  }
  return i$1(e3, t3), e3;
}(Error), u = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), s = function(t3) {
  function e3(e4) {
    void 0 === e4 && (e4 = void 0);
    var r2 = t3.call(this, e4) || this;
    return r2.message = e4, r2;
  }
  return u(e3, t3), e3.prototype.getKind = function() {
    return this.constructor.kind;
  }, e3.kind = "Exception", e3;
}(a), c = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), f = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return c(e3, t3), e3.kind = "ArgumentException", e3;
}(s), h$2 = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), l = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return h$2(e3, t3), e3.kind = "IllegalArgumentException", e3;
}(s), d = function() {
  function t3(t4) {
    if (this.binarizer = t4, null === t4)
      throw new l("Binarizer must be non-null.");
  }
  return t3.prototype.getWidth = function() {
    return this.binarizer.getWidth();
  }, t3.prototype.getHeight = function() {
    return this.binarizer.getHeight();
  }, t3.prototype.getBlackRow = function(t4, e3) {
    return this.binarizer.getBlackRow(t4, e3);
  }, t3.prototype.getBlackMatrix = function() {
    return null !== this.matrix && void 0 !== this.matrix || (this.matrix = this.binarizer.getBlackMatrix()), this.matrix;
  }, t3.prototype.isCropSupported = function() {
    return this.binarizer.getLuminanceSource().isCropSupported();
  }, t3.prototype.crop = function(e3, r2, n2, o2) {
    var i3 = this.binarizer.getLuminanceSource().crop(e3, r2, n2, o2);
    return new t3(this.binarizer.createBinarizer(i3));
  }, t3.prototype.isRotateSupported = function() {
    return this.binarizer.getLuminanceSource().isRotateSupported();
  }, t3.prototype.rotateCounterClockwise = function() {
    var e3 = this.binarizer.getLuminanceSource().rotateCounterClockwise();
    return new t3(this.binarizer.createBinarizer(e3));
  }, t3.prototype.rotateCounterClockwise45 = function() {
    var e3 = this.binarizer.getLuminanceSource().rotateCounterClockwise45();
    return new t3(this.binarizer.createBinarizer(e3));
  }, t3.prototype.toString = function() {
    try {
      return this.getBlackMatrix().toString();
    } catch (t4) {
      return "";
    }
  }, t3;
}(), p = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), g = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return p(e3, t3), e3.getChecksumInstance = function() {
    return new e3();
  }, e3.kind = "ChecksumException", e3;
}(s), y = function() {
  function t3(t4) {
    this.source = t4;
  }
  return t3.prototype.getLuminanceSource = function() {
    return this.source;
  }, t3.prototype.getWidth = function() {
    return this.source.getWidth();
  }, t3.prototype.getHeight = function() {
    return this.source.getHeight();
  }, t3;
}(), w$2 = function() {
  function t3() {
  }
  return t3.arraycopy = function(t4, e3, r2, n2, o2) {
    for (; o2--; )
      r2[n2++] = t4[e3++];
  }, t3.currentTimeMillis = function() {
    return Date.now();
  }, t3;
}(), _$1 = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), v$2 = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return _$1(e3, t3), e3.kind = "IndexOutOfBoundsException", e3;
}(s), m = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), A = function(t3) {
  function e3(e4, r2) {
    void 0 === e4 && (e4 = void 0), void 0 === r2 && (r2 = void 0);
    var n2 = t3.call(this, r2) || this;
    return n2.index = e4, n2.message = r2, n2;
  }
  return m(e3, t3), e3.kind = "ArrayIndexOutOfBoundsException", e3;
}(v$2), E = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, C = function() {
  function t3() {
  }
  return t3.fill = function(t4, e3) {
    for (var r2 = 0, n2 = t4.length; r2 < n2; r2++)
      t4[r2] = e3;
  }, t3.fillWithin = function(e3, r2, n2, o2) {
    t3.rangeCheck(e3.length, r2, n2);
    for (var i3 = r2; i3 < n2; i3++)
      e3[i3] = o2;
  }, t3.rangeCheck = function(t4, e3, r2) {
    if (e3 > r2)
      throw new l("fromIndex(" + e3 + ") > toIndex(" + r2 + ")");
    if (e3 < 0)
      throw new A(e3);
    if (r2 > t4)
      throw new A(r2);
  }, t3.asList = function() {
    for (var t4 = [], e3 = 0; e3 < arguments.length; e3++)
      t4[e3] = arguments[e3];
    return t4;
  }, t3.create = function(t4, e3, r2) {
    return Array.from({ length: t4 }).map(function(t5) {
      return Array.from({ length: e3 }).fill(r2);
    });
  }, t3.createInt32Array = function(t4, e3, r2) {
    return Array.from({ length: t4 }).map(function(t5) {
      return Int32Array.from({ length: e3 }).fill(r2);
    });
  }, t3.equals = function(t4, e3) {
    if (!t4)
      return false;
    if (!e3)
      return false;
    if (!t4.length)
      return false;
    if (!e3.length)
      return false;
    if (t4.length !== e3.length)
      return false;
    for (var r2 = 0, n2 = t4.length; r2 < n2; r2++)
      if (t4[r2] !== e3[r2])
        return false;
    return true;
  }, t3.hashCode = function(t4) {
    var e3, r2;
    if (null === t4)
      return 0;
    var n2 = 1;
    try {
      for (var o2 = E(t4), i3 = o2.next(); !i3.done; i3 = o2.next()) {
        n2 = 31 * n2 + i3.value;
      }
    } catch (t5) {
      e3 = { error: t5 };
    } finally {
      try {
        i3 && !i3.done && (r2 = o2.return) && r2.call(o2);
      } finally {
        if (e3)
          throw e3.error;
      }
    }
    return n2;
  }, t3.fillUint8Array = function(t4, e3) {
    for (var r2 = 0; r2 !== t4.length; r2++)
      t4[r2] = e3;
  }, t3.copyOf = function(t4, e3) {
    return t4.slice(0, e3);
  }, t3.copyOfUint8Array = function(t4, e3) {
    if (t4.length <= e3) {
      var r2 = new Uint8Array(e3);
      return r2.set(t4), r2;
    }
    return t4.slice(0, e3);
  }, t3.copyOfRange = function(t4, e3, r2) {
    var n2 = r2 - e3, o2 = new Int32Array(n2);
    return w$2.arraycopy(t4, e3, o2, 0, n2), o2;
  }, t3.binarySearch = function(e3, r2, n2) {
    void 0 === n2 && (n2 = t3.numberComparator);
    for (var o2 = 0, i3 = e3.length - 1; o2 <= i3; ) {
      var a4 = i3 + o2 >> 1, u3 = n2(r2, e3[a4]);
      if (u3 > 0)
        o2 = a4 + 1;
      else {
        if (!(u3 < 0))
          return a4;
        i3 = a4 - 1;
      }
    }
    return -o2 - 1;
  }, t3.numberComparator = function(t4, e3) {
    return t4 - e3;
  }, t3;
}(), I = function() {
  function t3() {
  }
  return t3.numberOfTrailingZeros = function(t4) {
    var e3;
    if (0 === t4)
      return 32;
    var r2 = 31;
    return 0 !== (e3 = t4 << 16) && (r2 -= 16, t4 = e3), 0 !== (e3 = t4 << 8) && (r2 -= 8, t4 = e3), 0 !== (e3 = t4 << 4) && (r2 -= 4, t4 = e3), 0 !== (e3 = t4 << 2) && (r2 -= 2, t4 = e3), r2 - (t4 << 1 >>> 31);
  }, t3.numberOfLeadingZeros = function(t4) {
    if (0 === t4)
      return 32;
    var e3 = 1;
    return t4 >>> 16 == 0 && (e3 += 16, t4 <<= 16), t4 >>> 24 == 0 && (e3 += 8, t4 <<= 8), t4 >>> 28 == 0 && (e3 += 4, t4 <<= 4), t4 >>> 30 == 0 && (e3 += 2, t4 <<= 2), e3 -= t4 >>> 31;
  }, t3.toHexString = function(t4) {
    return t4.toString(16);
  }, t3.toBinaryString = function(t4) {
    return String(parseInt(String(t4), 2));
  }, t3.bitCount = function(t4) {
    return t4 = (t4 = (858993459 & (t4 -= t4 >>> 1 & 1431655765)) + (t4 >>> 2 & 858993459)) + (t4 >>> 4) & 252645135, t4 += t4 >>> 8, 63 & (t4 += t4 >>> 16);
  }, t3.truncDivision = function(t4, e3) {
    return Math.trunc(t4 / e3);
  }, t3.parseInt = function(t4, e3) {
    return void 0 === e3 && (e3 = void 0), parseInt(t4, e3);
  }, t3.MIN_VALUE_32_BITS = -2147483648, t3.MAX_VALUE = Number.MAX_SAFE_INTEGER, t3;
}(), S = function() {
  function t3(e3, r2) {
    void 0 === e3 ? (this.size = 0, this.bits = new Int32Array(1)) : (this.size = e3, this.bits = null == r2 ? t3.makeArray(e3) : r2);
  }
  return t3.prototype.getSize = function() {
    return this.size;
  }, t3.prototype.getSizeInBytes = function() {
    return Math.floor((this.size + 7) / 8);
  }, t3.prototype.ensureCapacity = function(e3) {
    if (e3 > 32 * this.bits.length) {
      var r2 = t3.makeArray(e3);
      w$2.arraycopy(this.bits, 0, r2, 0, this.bits.length), this.bits = r2;
    }
  }, t3.prototype.get = function(t4) {
    return 0 != (this.bits[Math.floor(t4 / 32)] & 1 << (31 & t4));
  }, t3.prototype.set = function(t4) {
    this.bits[Math.floor(t4 / 32)] |= 1 << (31 & t4);
  }, t3.prototype.flip = function(t4) {
    this.bits[Math.floor(t4 / 32)] ^= 1 << (31 & t4);
  }, t3.prototype.getNextSet = function(t4) {
    var e3 = this.size;
    if (t4 >= e3)
      return e3;
    var r2 = this.bits, n2 = Math.floor(t4 / 32), o2 = r2[n2];
    o2 &= ~((1 << (31 & t4)) - 1);
    for (var i3 = r2.length; 0 === o2; ) {
      if (++n2 === i3)
        return e3;
      o2 = r2[n2];
    }
    var a4 = 32 * n2 + I.numberOfTrailingZeros(o2);
    return a4 > e3 ? e3 : a4;
  }, t3.prototype.getNextUnset = function(t4) {
    var e3 = this.size;
    if (t4 >= e3)
      return e3;
    var r2 = this.bits, n2 = Math.floor(t4 / 32), o2 = ~r2[n2];
    o2 &= ~((1 << (31 & t4)) - 1);
    for (var i3 = r2.length; 0 === o2; ) {
      if (++n2 === i3)
        return e3;
      o2 = ~r2[n2];
    }
    var a4 = 32 * n2 + I.numberOfTrailingZeros(o2);
    return a4 > e3 ? e3 : a4;
  }, t3.prototype.setBulk = function(t4, e3) {
    this.bits[Math.floor(t4 / 32)] = e3;
  }, t3.prototype.setRange = function(t4, e3) {
    if (e3 < t4 || t4 < 0 || e3 > this.size)
      throw new l();
    if (e3 !== t4) {
      e3--;
      for (var r2 = Math.floor(t4 / 32), n2 = Math.floor(e3 / 32), o2 = this.bits, i3 = r2; i3 <= n2; i3++) {
        var a4 = (2 << (i3 < n2 ? 31 : 31 & e3)) - (1 << (i3 > r2 ? 0 : 31 & t4));
        o2[i3] |= a4;
      }
    }
  }, t3.prototype.clear = function() {
    for (var t4 = this.bits.length, e3 = this.bits, r2 = 0; r2 < t4; r2++)
      e3[r2] = 0;
  }, t3.prototype.isRange = function(t4, e3, r2) {
    if (e3 < t4 || t4 < 0 || e3 > this.size)
      throw new l();
    if (e3 === t4)
      return true;
    e3--;
    for (var n2 = Math.floor(t4 / 32), o2 = Math.floor(e3 / 32), i3 = this.bits, a4 = n2; a4 <= o2; a4++) {
      var u3 = (2 << (a4 < o2 ? 31 : 31 & e3)) - (1 << (a4 > n2 ? 0 : 31 & t4)) & 4294967295;
      if ((i3[a4] & u3) !== (r2 ? u3 : 0))
        return false;
    }
    return true;
  }, t3.prototype.appendBit = function(t4) {
    this.ensureCapacity(this.size + 1), t4 && (this.bits[Math.floor(this.size / 32)] |= 1 << (31 & this.size)), this.size++;
  }, t3.prototype.appendBits = function(t4, e3) {
    if (e3 < 0 || e3 > 32)
      throw new l("Num bits must be between 0 and 32");
    this.ensureCapacity(this.size + e3);
    for (var r2 = e3; r2 > 0; r2--)
      this.appendBit(1 == (t4 >> r2 - 1 & 1));
  }, t3.prototype.appendBitArray = function(t4) {
    var e3 = t4.size;
    this.ensureCapacity(this.size + e3);
    for (var r2 = 0; r2 < e3; r2++)
      this.appendBit(t4.get(r2));
  }, t3.prototype.xor = function(t4) {
    if (this.size !== t4.size)
      throw new l("Sizes don't match");
    for (var e3 = this.bits, r2 = 0, n2 = e3.length; r2 < n2; r2++)
      e3[r2] ^= t4.bits[r2];
  }, t3.prototype.toBytes = function(t4, e3, r2, n2) {
    for (var o2 = 0; o2 < n2; o2++) {
      for (var i3 = 0, a4 = 0; a4 < 8; a4++)
        this.get(t4) && (i3 |= 1 << 7 - a4), t4++;
      e3[r2 + o2] = i3;
    }
  }, t3.prototype.getBitArray = function() {
    return this.bits;
  }, t3.prototype.reverse = function() {
    for (var t4 = new Int32Array(this.bits.length), e3 = Math.floor((this.size - 1) / 32), r2 = e3 + 1, n2 = this.bits, o2 = 0; o2 < r2; o2++) {
      var i3 = n2[o2];
      i3 = (i3 = (i3 = (i3 = (i3 = i3 >> 1 & 1431655765 | (1431655765 & i3) << 1) >> 2 & 858993459 | (858993459 & i3) << 2) >> 4 & 252645135 | (252645135 & i3) << 4) >> 8 & 16711935 | (16711935 & i3) << 8) >> 16 & 65535 | (65535 & i3) << 16, t4[e3 - o2] = i3;
    }
    if (this.size !== 32 * r2) {
      var a4 = 32 * r2 - this.size, u3 = t4[0] >>> a4;
      for (o2 = 1; o2 < r2; o2++) {
        var s4 = t4[o2];
        u3 |= s4 << 32 - a4, t4[o2 - 1] = u3, u3 = s4 >>> a4;
      }
      t4[r2 - 1] = u3;
    }
    this.bits = t4;
  }, t3.makeArray = function(t4) {
    return new Int32Array(Math.floor((t4 + 31) / 32));
  }, t3.prototype.equals = function(e3) {
    if (!(e3 instanceof t3))
      return false;
    var r2 = e3;
    return this.size === r2.size && C.equals(this.bits, r2.bits);
  }, t3.prototype.hashCode = function() {
    return 31 * this.size + C.hashCode(this.bits);
  }, t3.prototype.toString = function() {
    for (var t4 = "", e3 = 0, r2 = this.size; e3 < r2; e3++)
      0 == (7 & e3) && (t4 += " "), t4 += this.get(e3) ? "X" : ".";
    return t4;
  }, t3.prototype.clone = function() {
    return new t3(this.size, this.bits.slice());
  }, t3;
}();
!function(t3) {
  t3[t3.OTHER = 0] = "OTHER", t3[t3.PURE_BARCODE = 1] = "PURE_BARCODE", t3[t3.POSSIBLE_FORMATS = 2] = "POSSIBLE_FORMATS", t3[t3.TRY_HARDER = 3] = "TRY_HARDER", t3[t3.CHARACTER_SET = 4] = "CHARACTER_SET", t3[t3.ALLOWED_LENGTHS = 5] = "ALLOWED_LENGTHS", t3[t3.ASSUME_CODE_39_CHECK_DIGIT = 6] = "ASSUME_CODE_39_CHECK_DIGIT", t3[t3.ASSUME_GS1 = 7] = "ASSUME_GS1", t3[t3.RETURN_CODABAR_START_END = 8] = "RETURN_CODABAR_START_END", t3[t3.NEED_RESULT_POINT_CALLBACK = 9] = "NEED_RESULT_POINT_CALLBACK", t3[t3.ALLOWED_EAN_EXTENSIONS = 10] = "ALLOWED_EAN_EXTENSIONS";
}(o || (o = {}));
var O, T = o, b = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), R = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return b(e3, t3), e3.getFormatInstance = function() {
    return new e3();
  }, e3.kind = "FormatException", e3;
}(s), N = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
!function(t3) {
  t3[t3.Cp437 = 0] = "Cp437", t3[t3.ISO8859_1 = 1] = "ISO8859_1", t3[t3.ISO8859_2 = 2] = "ISO8859_2", t3[t3.ISO8859_3 = 3] = "ISO8859_3", t3[t3.ISO8859_4 = 4] = "ISO8859_4", t3[t3.ISO8859_5 = 5] = "ISO8859_5", t3[t3.ISO8859_6 = 6] = "ISO8859_6", t3[t3.ISO8859_7 = 7] = "ISO8859_7", t3[t3.ISO8859_8 = 8] = "ISO8859_8", t3[t3.ISO8859_9 = 9] = "ISO8859_9", t3[t3.ISO8859_10 = 10] = "ISO8859_10", t3[t3.ISO8859_11 = 11] = "ISO8859_11", t3[t3.ISO8859_13 = 12] = "ISO8859_13", t3[t3.ISO8859_14 = 13] = "ISO8859_14", t3[t3.ISO8859_15 = 14] = "ISO8859_15", t3[t3.ISO8859_16 = 15] = "ISO8859_16", t3[t3.SJIS = 16] = "SJIS", t3[t3.Cp1250 = 17] = "Cp1250", t3[t3.Cp1251 = 18] = "Cp1251", t3[t3.Cp1252 = 19] = "Cp1252", t3[t3.Cp1256 = 20] = "Cp1256", t3[t3.UnicodeBigUnmarked = 21] = "UnicodeBigUnmarked", t3[t3.UTF8 = 22] = "UTF8", t3[t3.ASCII = 23] = "ASCII", t3[t3.Big5 = 24] = "Big5", t3[t3.GB18030 = 25] = "GB18030", t3[t3.EUC_KR = 26] = "EUC_KR";
}(O || (O = {}));
var D, P = function() {
  function t3(e3, r2, n2) {
    for (var o2, i3, a4 = [], u3 = 3; u3 < arguments.length; u3++)
      a4[u3 - 3] = arguments[u3];
    this.valueIdentifier = e3, this.name = n2, this.values = "number" == typeof r2 ? Int32Array.from([r2]) : r2, this.otherEncodingNames = a4, t3.VALUE_IDENTIFIER_TO_ECI.set(e3, this), t3.NAME_TO_ECI.set(n2, this);
    for (var s4 = this.values, c7 = 0, f2 = s4.length; c7 !== f2; c7++) {
      var h4 = s4[c7];
      t3.VALUES_TO_ECI.set(h4, this);
    }
    try {
      for (var l2 = N(a4), d4 = l2.next(); !d4.done; d4 = l2.next()) {
        var p2 = d4.value;
        t3.NAME_TO_ECI.set(p2, this);
      }
    } catch (t4) {
      o2 = { error: t4 };
    } finally {
      try {
        d4 && !d4.done && (i3 = l2.return) && i3.call(l2);
      } finally {
        if (o2)
          throw o2.error;
      }
    }
  }
  return t3.prototype.getValueIdentifier = function() {
    return this.valueIdentifier;
  }, t3.prototype.getName = function() {
    return this.name;
  }, t3.prototype.getValue = function() {
    return this.values[0];
  }, t3.getCharacterSetECIByValue = function(e3) {
    if (e3 < 0 || e3 >= 900)
      throw new R("incorect value");
    var r2 = t3.VALUES_TO_ECI.get(e3);
    if (void 0 === r2)
      throw new R("incorect value");
    return r2;
  }, t3.getCharacterSetECIByName = function(e3) {
    var r2 = t3.NAME_TO_ECI.get(e3);
    if (void 0 === r2)
      throw new R("incorect value");
    return r2;
  }, t3.prototype.equals = function(e3) {
    if (!(e3 instanceof t3))
      return false;
    var r2 = e3;
    return this.getName() === r2.getName();
  }, t3.VALUE_IDENTIFIER_TO_ECI = /* @__PURE__ */ new Map(), t3.VALUES_TO_ECI = /* @__PURE__ */ new Map(), t3.NAME_TO_ECI = /* @__PURE__ */ new Map(), t3.Cp437 = new t3(O.Cp437, Int32Array.from([0, 2]), "Cp437"), t3.ISO8859_1 = new t3(O.ISO8859_1, Int32Array.from([1, 3]), "ISO-8859-1", "ISO88591", "ISO8859_1"), t3.ISO8859_2 = new t3(O.ISO8859_2, 4, "ISO-8859-2", "ISO88592", "ISO8859_2"), t3.ISO8859_3 = new t3(O.ISO8859_3, 5, "ISO-8859-3", "ISO88593", "ISO8859_3"), t3.ISO8859_4 = new t3(O.ISO8859_4, 6, "ISO-8859-4", "ISO88594", "ISO8859_4"), t3.ISO8859_5 = new t3(O.ISO8859_5, 7, "ISO-8859-5", "ISO88595", "ISO8859_5"), t3.ISO8859_6 = new t3(O.ISO8859_6, 8, "ISO-8859-6", "ISO88596", "ISO8859_6"), t3.ISO8859_7 = new t3(O.ISO8859_7, 9, "ISO-8859-7", "ISO88597", "ISO8859_7"), t3.ISO8859_8 = new t3(O.ISO8859_8, 10, "ISO-8859-8", "ISO88598", "ISO8859_8"), t3.ISO8859_9 = new t3(O.ISO8859_9, 11, "ISO-8859-9", "ISO88599", "ISO8859_9"), t3.ISO8859_10 = new t3(O.ISO8859_10, 12, "ISO-8859-10", "ISO885910", "ISO8859_10"), t3.ISO8859_11 = new t3(O.ISO8859_11, 13, "ISO-8859-11", "ISO885911", "ISO8859_11"), t3.ISO8859_13 = new t3(O.ISO8859_13, 15, "ISO-8859-13", "ISO885913", "ISO8859_13"), t3.ISO8859_14 = new t3(O.ISO8859_14, 16, "ISO-8859-14", "ISO885914", "ISO8859_14"), t3.ISO8859_15 = new t3(O.ISO8859_15, 17, "ISO-8859-15", "ISO885915", "ISO8859_15"), t3.ISO8859_16 = new t3(O.ISO8859_16, 18, "ISO-8859-16", "ISO885916", "ISO8859_16"), t3.SJIS = new t3(O.SJIS, 20, "SJIS", "Shift_JIS"), t3.Cp1250 = new t3(O.Cp1250, 21, "Cp1250", "windows-1250"), t3.Cp1251 = new t3(O.Cp1251, 22, "Cp1251", "windows-1251"), t3.Cp1252 = new t3(O.Cp1252, 23, "Cp1252", "windows-1252"), t3.Cp1256 = new t3(O.Cp1256, 24, "Cp1256", "windows-1256"), t3.UnicodeBigUnmarked = new t3(O.UnicodeBigUnmarked, 25, "UnicodeBigUnmarked", "UTF-16BE", "UnicodeBig"), t3.UTF8 = new t3(O.UTF8, 26, "UTF8", "UTF-8"), t3.ASCII = new t3(O.ASCII, Int32Array.from([27, 170]), "ASCII", "US-ASCII"), t3.Big5 = new t3(O.Big5, 28, "Big5"), t3.GB18030 = new t3(O.GB18030, 29, "GB18030", "GB2312", "EUC_CN", "GBK"), t3.EUC_KR = new t3(O.EUC_KR, 30, "EUC_KR", "EUC-KR"), t3;
}(), M = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), B = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return M(e3, t3), e3.kind = "UnsupportedOperationException", e3;
}(s), L = function() {
  function t3() {
  }
  return t3.decode = function(t4, e3) {
    var r2 = this.encodingName(e3);
    return this.customDecoder ? this.customDecoder(t4, r2) : "undefined" == typeof TextDecoder || this.shouldDecodeOnFallback(r2) ? this.decodeFallback(t4, r2) : new TextDecoder(r2).decode(t4);
  }, t3.shouldDecodeOnFallback = function(e3) {
    return !t3.isBrowser() && "ISO-8859-1" === e3;
  }, t3.encode = function(t4, e3) {
    var r2 = this.encodingName(e3);
    return this.customEncoder ? this.customEncoder(t4, r2) : "undefined" == typeof TextEncoder ? this.encodeFallback(t4) : new TextEncoder().encode(t4);
  }, t3.isBrowser = function() {
    return "undefined" != typeof window && "[object Window]" === {}.toString.call(window);
  }, t3.encodingName = function(t4) {
    return "string" == typeof t4 ? t4 : t4.getName();
  }, t3.encodingCharacterSet = function(t4) {
    return t4 instanceof P ? t4 : P.getCharacterSetECIByName(t4);
  }, t3.decodeFallback = function(e3, r2) {
    var n2 = this.encodingCharacterSet(r2);
    if (t3.isDecodeFallbackSupported(n2)) {
      for (var o2 = "", i3 = 0, a4 = e3.length; i3 < a4; i3++) {
        var u3 = e3[i3].toString(16);
        u3.length < 2 && (u3 = "0" + u3), o2 += "%" + u3;
      }
      return decodeURIComponent(o2);
    }
    if (n2.equals(P.UnicodeBigUnmarked))
      return String.fromCharCode.apply(null, new Uint16Array(e3.buffer));
    throw new B("Encoding " + this.encodingName(r2) + " not supported by fallback.");
  }, t3.isDecodeFallbackSupported = function(t4) {
    return t4.equals(P.UTF8) || t4.equals(P.ISO8859_1) || t4.equals(P.ASCII);
  }, t3.encodeFallback = function(t4) {
    for (var e3 = btoa(unescape(encodeURIComponent(t4))).split(""), r2 = [], n2 = 0; n2 < e3.length; n2++)
      r2.push(e3[n2].charCodeAt(0));
    return new Uint8Array(r2);
  }, t3;
}(), F = function() {
  function t3() {
  }
  return t3.castAsNonUtf8Char = function(t4, e3) {
    void 0 === e3 && (e3 = null);
    var r2 = e3 ? e3.getName() : this.ISO88591;
    return L.decode(new Uint8Array([t4]), r2);
  }, t3.guessEncoding = function(e3, r2) {
    if (null != r2 && void 0 !== r2.get(T.CHARACTER_SET))
      return r2.get(T.CHARACTER_SET).toString();
    for (var n2 = e3.length, o2 = true, i3 = true, a4 = true, u3 = 0, s4 = 0, c7 = 0, f2 = 0, h4 = 0, l2 = 0, d4 = 0, p2 = 0, g2 = 0, y4 = 0, w3 = 0, _2 = e3.length > 3 && 239 === e3[0] && 187 === e3[1] && 191 === e3[2], v2 = 0; v2 < n2 && (o2 || i3 || a4); v2++) {
      var m4 = 255 & e3[v2];
      a4 && (u3 > 0 ? 0 == (128 & m4) ? a4 = false : u3-- : 0 != (128 & m4) && (0 == (64 & m4) ? a4 = false : (u3++, 0 == (32 & m4) ? s4++ : (u3++, 0 == (16 & m4) ? c7++ : (u3++, 0 == (8 & m4) ? f2++ : a4 = false))))), o2 && (m4 > 127 && m4 < 160 ? o2 = false : m4 > 159 && (m4 < 192 || 215 === m4 || 247 === m4) && w3++), i3 && (h4 > 0 ? m4 < 64 || 127 === m4 || m4 > 252 ? i3 = false : h4-- : 128 === m4 || 160 === m4 || m4 > 239 ? i3 = false : m4 > 160 && m4 < 224 ? (l2++, p2 = 0, ++d4 > g2 && (g2 = d4)) : m4 > 127 ? (h4++, d4 = 0, ++p2 > y4 && (y4 = p2)) : (d4 = 0, p2 = 0));
    }
    return a4 && u3 > 0 && (a4 = false), i3 && h4 > 0 && (i3 = false), a4 && (_2 || s4 + c7 + f2 > 0) ? t3.UTF8 : i3 && (t3.ASSUME_SHIFT_JIS || g2 >= 3 || y4 >= 3) ? t3.SHIFT_JIS : o2 && i3 ? 2 === g2 && 2 === l2 || 10 * w3 >= n2 ? t3.SHIFT_JIS : t3.ISO88591 : o2 ? t3.ISO88591 : i3 ? t3.SHIFT_JIS : a4 ? t3.UTF8 : t3.PLATFORM_DEFAULT_ENCODING;
  }, t3.format = function(t4) {
    for (var e3 = [], r2 = 1; r2 < arguments.length; r2++)
      e3[r2 - 1] = arguments[r2];
    var n2 = -1;
    function o2(t5, r3, o3, i4, a4, u3) {
      if ("%%" === t5)
        return "%";
      if (void 0 !== e3[++n2]) {
        t5 = i4 ? parseInt(i4.substr(1)) : void 0;
        var s4, c7 = a4 ? parseInt(a4.substr(1)) : void 0;
        switch (u3) {
          case "s":
            s4 = e3[n2];
            break;
          case "c":
            s4 = e3[n2][0];
            break;
          case "f":
            s4 = parseFloat(e3[n2]).toFixed(t5);
            break;
          case "p":
            s4 = parseFloat(e3[n2]).toPrecision(t5);
            break;
          case "e":
            s4 = parseFloat(e3[n2]).toExponential(t5);
            break;
          case "x":
            s4 = parseInt(e3[n2]).toString(c7 || 16);
            break;
          case "d":
            s4 = parseFloat(parseInt(e3[n2], c7 || 10).toPrecision(t5)).toFixed(0);
        }
        s4 = "object" == typeof s4 ? JSON.stringify(s4) : (+s4).toString(c7);
        for (var f2 = parseInt(o3), h4 = o3 && o3[0] + "" == "0" ? "0" : " "; s4.length < f2; )
          s4 = void 0 !== r3 ? s4 + h4 : h4 + s4;
        return s4;
      }
    }
    var i3 = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;
    return t4.replace(i3, o2);
  }, t3.getBytes = function(t4, e3) {
    return L.encode(t4, e3);
  }, t3.getCharCode = function(t4, e3) {
    return void 0 === e3 && (e3 = 0), t4.charCodeAt(e3);
  }, t3.getCharAt = function(t4) {
    return String.fromCharCode(t4);
  }, t3.SHIFT_JIS = P.SJIS.getName(), t3.GB2312 = "GB2312", t3.ISO88591 = P.ISO8859_1.getName(), t3.EUC_JP = "EUC_JP", t3.UTF8 = P.UTF8.getName(), t3.PLATFORM_DEFAULT_ENCODING = t3.UTF8, t3.ASSUME_SHIFT_JIS = false, t3;
}(), k = function() {
  function t3(t4) {
    void 0 === t4 && (t4 = ""), this.value = t4;
  }
  return t3.prototype.enableDecoding = function(t4) {
    return this.encoding = t4, this;
  }, t3.prototype.append = function(t4) {
    return "string" == typeof t4 ? this.value += t4.toString() : this.encoding ? this.value += F.castAsNonUtf8Char(t4, this.encoding) : this.value += String.fromCharCode(t4), this;
  }, t3.prototype.appendChars = function(t4, e3, r2) {
    for (var n2 = e3; e3 < e3 + r2; n2++)
      this.append(t4[n2]);
    return this;
  }, t3.prototype.length = function() {
    return this.value.length;
  }, t3.prototype.charAt = function(t4) {
    return this.value.charAt(t4);
  }, t3.prototype.deleteCharAt = function(t4) {
    this.value = this.value.substr(0, t4) + this.value.substring(t4 + 1);
  }, t3.prototype.setCharAt = function(t4, e3) {
    this.value = this.value.substr(0, t4) + e3 + this.value.substr(t4 + 1);
  }, t3.prototype.substring = function(t4, e3) {
    return this.value.substring(t4, e3);
  }, t3.prototype.setLengthToZero = function() {
    this.value = "";
  }, t3.prototype.toString = function() {
    return this.value;
  }, t3.prototype.insert = function(t4, e3) {
    this.value = this.value.substr(0, t4) + e3 + this.value.substr(t4 + e3.length);
  }, t3;
}(), x = function() {
  function t3(t4, e3, r2, n2) {
    if (this.width = t4, this.height = e3, this.rowSize = r2, this.bits = n2, null == e3 && (e3 = t4), this.height = e3, t4 < 1 || e3 < 1)
      throw new l("Both dimensions must be greater than 0");
    null == r2 && (r2 = Math.floor((t4 + 31) / 32)), this.rowSize = r2, null == n2 && (this.bits = new Int32Array(this.rowSize * this.height));
  }
  return t3.parseFromBooleanArray = function(e3) {
    for (var r2 = e3.length, n2 = e3[0].length, o2 = new t3(n2, r2), i3 = 0; i3 < r2; i3++)
      for (var a4 = e3[i3], u3 = 0; u3 < n2; u3++)
        a4[u3] && o2.set(u3, i3);
    return o2;
  }, t3.parseFromString = function(e3, r2, n2) {
    if (null === e3)
      throw new l("stringRepresentation cannot be null");
    for (var o2 = new Array(e3.length), i3 = 0, a4 = 0, u3 = -1, s4 = 0, c7 = 0; c7 < e3.length; )
      if ("\n" === e3.charAt(c7) || "\r" === e3.charAt(c7)) {
        if (i3 > a4) {
          if (-1 === u3)
            u3 = i3 - a4;
          else if (i3 - a4 !== u3)
            throw new l("row lengths do not match");
          a4 = i3, s4++;
        }
        c7++;
      } else if (e3.substring(c7, c7 + r2.length) === r2)
        c7 += r2.length, o2[i3] = true, i3++;
      else {
        if (e3.substring(c7, c7 + n2.length) !== n2)
          throw new l("illegal character encountered: " + e3.substring(c7));
        c7 += n2.length, o2[i3] = false, i3++;
      }
    if (i3 > a4) {
      if (-1 === u3)
        u3 = i3 - a4;
      else if (i3 - a4 !== u3)
        throw new l("row lengths do not match");
      s4++;
    }
    for (var f2 = new t3(u3, s4), h4 = 0; h4 < i3; h4++)
      o2[h4] && f2.set(Math.floor(h4 % u3), Math.floor(h4 / u3));
    return f2;
  }, t3.prototype.get = function(t4, e3) {
    var r2 = e3 * this.rowSize + Math.floor(t4 / 32);
    return 0 != (this.bits[r2] >>> (31 & t4) & 1);
  }, t3.prototype.set = function(t4, e3) {
    var r2 = e3 * this.rowSize + Math.floor(t4 / 32);
    this.bits[r2] |= 1 << (31 & t4) & 4294967295;
  }, t3.prototype.unset = function(t4, e3) {
    var r2 = e3 * this.rowSize + Math.floor(t4 / 32);
    this.bits[r2] &= ~(1 << (31 & t4) & 4294967295);
  }, t3.prototype.flip = function(t4, e3) {
    var r2 = e3 * this.rowSize + Math.floor(t4 / 32);
    this.bits[r2] ^= 1 << (31 & t4) & 4294967295;
  }, t3.prototype.xor = function(t4) {
    if (this.width !== t4.getWidth() || this.height !== t4.getHeight() || this.rowSize !== t4.getRowSize())
      throw new l("input matrix dimensions do not match");
    for (var e3 = new S(Math.floor(this.width / 32) + 1), r2 = this.rowSize, n2 = this.bits, o2 = 0, i3 = this.height; o2 < i3; o2++)
      for (var a4 = o2 * r2, u3 = t4.getRow(o2, e3).getBitArray(), s4 = 0; s4 < r2; s4++)
        n2[a4 + s4] ^= u3[s4];
  }, t3.prototype.clear = function() {
    for (var t4 = this.bits, e3 = t4.length, r2 = 0; r2 < e3; r2++)
      t4[r2] = 0;
  }, t3.prototype.setRegion = function(t4, e3, r2, n2) {
    if (e3 < 0 || t4 < 0)
      throw new l("Left and top must be nonnegative");
    if (n2 < 1 || r2 < 1)
      throw new l("Height and width must be at least 1");
    var o2 = t4 + r2, i3 = e3 + n2;
    if (i3 > this.height || o2 > this.width)
      throw new l("The region must fit inside the matrix");
    for (var a4 = this.rowSize, u3 = this.bits, s4 = e3; s4 < i3; s4++)
      for (var c7 = s4 * a4, f2 = t4; f2 < o2; f2++)
        u3[c7 + Math.floor(f2 / 32)] |= 1 << (31 & f2) & 4294967295;
  }, t3.prototype.getRow = function(t4, e3) {
    null == e3 || e3.getSize() < this.width ? e3 = new S(this.width) : e3.clear();
    for (var r2 = this.rowSize, n2 = this.bits, o2 = t4 * r2, i3 = 0; i3 < r2; i3++)
      e3.setBulk(32 * i3, n2[o2 + i3]);
    return e3;
  }, t3.prototype.setRow = function(t4, e3) {
    w$2.arraycopy(e3.getBitArray(), 0, this.bits, t4 * this.rowSize, this.rowSize);
  }, t3.prototype.rotate180 = function() {
    for (var t4 = this.getWidth(), e3 = this.getHeight(), r2 = new S(t4), n2 = new S(t4), o2 = 0, i3 = Math.floor((e3 + 1) / 2); o2 < i3; o2++)
      r2 = this.getRow(o2, r2), n2 = this.getRow(e3 - 1 - o2, n2), r2.reverse(), n2.reverse(), this.setRow(o2, n2), this.setRow(e3 - 1 - o2, r2);
  }, t3.prototype.getEnclosingRectangle = function() {
    for (var t4 = this.width, e3 = this.height, r2 = this.rowSize, n2 = this.bits, o2 = t4, i3 = e3, a4 = -1, u3 = -1, s4 = 0; s4 < e3; s4++)
      for (var c7 = 0; c7 < r2; c7++) {
        var f2 = n2[s4 * r2 + c7];
        if (0 !== f2) {
          if (s4 < i3 && (i3 = s4), s4 > u3 && (u3 = s4), 32 * c7 < o2) {
            for (var h4 = 0; 0 == (f2 << 31 - h4 & 4294967295); )
              h4++;
            32 * c7 + h4 < o2 && (o2 = 32 * c7 + h4);
          }
          if (32 * c7 + 31 > a4) {
            for (h4 = 31; f2 >>> h4 == 0; )
              h4--;
            32 * c7 + h4 > a4 && (a4 = 32 * c7 + h4);
          }
        }
      }
    return a4 < o2 || u3 < i3 ? null : Int32Array.from([o2, i3, a4 - o2 + 1, u3 - i3 + 1]);
  }, t3.prototype.getTopLeftOnBit = function() {
    for (var t4 = this.rowSize, e3 = this.bits, r2 = 0; r2 < e3.length && 0 === e3[r2]; )
      r2++;
    if (r2 === e3.length)
      return null;
    for (var n2 = r2 / t4, o2 = r2 % t4 * 32, i3 = e3[r2], a4 = 0; 0 == (i3 << 31 - a4 & 4294967295); )
      a4++;
    return o2 += a4, Int32Array.from([o2, n2]);
  }, t3.prototype.getBottomRightOnBit = function() {
    for (var t4 = this.rowSize, e3 = this.bits, r2 = e3.length - 1; r2 >= 0 && 0 === e3[r2]; )
      r2--;
    if (r2 < 0)
      return null;
    for (var n2 = Math.floor(r2 / t4), o2 = 32 * Math.floor(r2 % t4), i3 = e3[r2], a4 = 31; i3 >>> a4 == 0; )
      a4--;
    return o2 += a4, Int32Array.from([o2, n2]);
  }, t3.prototype.getWidth = function() {
    return this.width;
  }, t3.prototype.getHeight = function() {
    return this.height;
  }, t3.prototype.getRowSize = function() {
    return this.rowSize;
  }, t3.prototype.equals = function(e3) {
    if (!(e3 instanceof t3))
      return false;
    var r2 = e3;
    return this.width === r2.width && this.height === r2.height && this.rowSize === r2.rowSize && C.equals(this.bits, r2.bits);
  }, t3.prototype.hashCode = function() {
    var t4 = this.width;
    return t4 = 31 * (t4 = 31 * (t4 = 31 * (t4 = 31 * t4 + this.width) + this.height) + this.rowSize) + C.hashCode(this.bits);
  }, t3.prototype.toString = function(t4, e3, r2) {
    return void 0 === t4 && (t4 = "X "), void 0 === e3 && (e3 = "  "), void 0 === r2 && (r2 = "\n"), this.buildToString(t4, e3, r2);
  }, t3.prototype.buildToString = function(t4, e3, r2) {
    for (var n2 = new k(), o2 = 0, i3 = this.height; o2 < i3; o2++) {
      for (var a4 = 0, u3 = this.width; a4 < u3; a4++)
        n2.append(this.get(a4, o2) ? t4 : e3);
      n2.append(r2);
    }
    return n2.toString();
  }, t3.prototype.clone = function() {
    return new t3(this.width, this.height, this.rowSize, this.bits.slice());
  }, t3;
}(), V = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), U = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return V(e3, t3), e3.getNotFoundInstance = function() {
    return new e3();
  }, e3.kind = "NotFoundException", e3;
}(s), H = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), G = function(t3) {
  function e3(r2) {
    var n2 = t3.call(this, r2) || this;
    return n2.luminances = e3.EMPTY, n2.buckets = new Int32Array(e3.LUMINANCE_BUCKETS), n2;
  }
  return H(e3, t3), e3.prototype.getBlackRow = function(t4, r2) {
    var n2 = this.getLuminanceSource(), o2 = n2.getWidth();
    null == r2 || r2.getSize() < o2 ? r2 = new S(o2) : r2.clear(), this.initArrays(o2);
    for (var i3 = n2.getRow(t4, this.luminances), a4 = this.buckets, u3 = 0; u3 < o2; u3++)
      a4[(255 & i3[u3]) >> e3.LUMINANCE_SHIFT]++;
    var s4 = e3.estimateBlackPoint(a4);
    if (o2 < 3)
      for (u3 = 0; u3 < o2; u3++)
        (255 & i3[u3]) < s4 && r2.set(u3);
    else {
      var c7 = 255 & i3[0], f2 = 255 & i3[1];
      for (u3 = 1; u3 < o2 - 1; u3++) {
        var h4 = 255 & i3[u3 + 1];
        (4 * f2 - c7 - h4) / 2 < s4 && r2.set(u3), c7 = f2, f2 = h4;
      }
    }
    return r2;
  }, e3.prototype.getBlackMatrix = function() {
    var t4 = this.getLuminanceSource(), r2 = t4.getWidth(), n2 = t4.getHeight(), o2 = new x(r2, n2);
    this.initArrays(r2);
    for (var i3 = this.buckets, a4 = 1; a4 < 5; a4++)
      for (var u3 = Math.floor(n2 * a4 / 5), s4 = t4.getRow(u3, this.luminances), c7 = Math.floor(4 * r2 / 5), f2 = Math.floor(r2 / 5); f2 < c7; f2++) {
        i3[(255 & s4[f2]) >> e3.LUMINANCE_SHIFT]++;
      }
    var h4 = e3.estimateBlackPoint(i3), l2 = t4.getMatrix();
    for (a4 = 0; a4 < n2; a4++) {
      var d4 = a4 * r2;
      for (f2 = 0; f2 < r2; f2++) {
        (255 & l2[d4 + f2]) < h4 && o2.set(f2, a4);
      }
    }
    return o2;
  }, e3.prototype.createBinarizer = function(t4) {
    return new e3(t4);
  }, e3.prototype.initArrays = function(t4) {
    this.luminances.length < t4 && (this.luminances = new Uint8ClampedArray(t4));
    for (var r2 = this.buckets, n2 = 0; n2 < e3.LUMINANCE_BUCKETS; n2++)
      r2[n2] = 0;
  }, e3.estimateBlackPoint = function(t4) {
    for (var r2 = t4.length, n2 = 0, o2 = 0, i3 = 0, a4 = 0; a4 < r2; a4++)
      t4[a4] > i3 && (o2 = a4, i3 = t4[a4]), t4[a4] > n2 && (n2 = t4[a4]);
    var u3 = 0, s4 = 0;
    for (a4 = 0; a4 < r2; a4++) {
      var c7 = a4 - o2;
      (d4 = t4[a4] * c7 * c7) > s4 && (u3 = a4, s4 = d4);
    }
    if (o2 > u3) {
      var f2 = o2;
      o2 = u3, u3 = f2;
    }
    if (u3 - o2 <= r2 / 16)
      throw new U();
    var h4 = u3 - 1, l2 = -1;
    for (a4 = u3 - 1; a4 > o2; a4--) {
      var d4, p2 = a4 - o2;
      (d4 = p2 * p2 * (u3 - a4) * (n2 - t4[a4])) > l2 && (h4 = a4, l2 = d4);
    }
    return h4 << e3.LUMINANCE_SHIFT;
  }, e3.LUMINANCE_BITS = 5, e3.LUMINANCE_SHIFT = 8 - e3.LUMINANCE_BITS, e3.LUMINANCE_BUCKETS = 1 << e3.LUMINANCE_BITS, e3.EMPTY = Uint8ClampedArray.from([0]), e3;
}(y), X = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), W = function(t3) {
  function e3(e4) {
    var r2 = t3.call(this, e4) || this;
    return r2.matrix = null, r2;
  }
  return X(e3, t3), e3.prototype.getBlackMatrix = function() {
    if (null !== this.matrix)
      return this.matrix;
    var r2 = this.getLuminanceSource(), n2 = r2.getWidth(), o2 = r2.getHeight();
    if (n2 >= e3.MINIMUM_DIMENSION && o2 >= e3.MINIMUM_DIMENSION) {
      var i3 = r2.getMatrix(), a4 = n2 >> e3.BLOCK_SIZE_POWER;
      0 != (n2 & e3.BLOCK_SIZE_MASK) && a4++;
      var u3 = o2 >> e3.BLOCK_SIZE_POWER;
      0 != (o2 & e3.BLOCK_SIZE_MASK) && u3++;
      var s4 = e3.calculateBlackPoints(i3, a4, u3, n2, o2), c7 = new x(n2, o2);
      e3.calculateThresholdForBlock(i3, a4, u3, n2, o2, s4, c7), this.matrix = c7;
    } else
      this.matrix = t3.prototype.getBlackMatrix.call(this);
    return this.matrix;
  }, e3.prototype.createBinarizer = function(t4) {
    return new e3(t4);
  }, e3.calculateThresholdForBlock = function(t4, r2, n2, o2, i3, a4, u3) {
    for (var s4 = i3 - e3.BLOCK_SIZE, c7 = o2 - e3.BLOCK_SIZE, f2 = 0; f2 < n2; f2++) {
      var h4 = f2 << e3.BLOCK_SIZE_POWER;
      h4 > s4 && (h4 = s4);
      for (var l2 = e3.cap(f2, 2, n2 - 3), d4 = 0; d4 < r2; d4++) {
        var p2 = d4 << e3.BLOCK_SIZE_POWER;
        p2 > c7 && (p2 = c7);
        for (var g2 = e3.cap(d4, 2, r2 - 3), y4 = 0, w3 = -2; w3 <= 2; w3++) {
          var _2 = a4[l2 + w3];
          y4 += _2[g2 - 2] + _2[g2 - 1] + _2[g2] + _2[g2 + 1] + _2[g2 + 2];
        }
        var v2 = y4 / 25;
        e3.thresholdBlock(t4, p2, h4, v2, o2, u3);
      }
    }
  }, e3.cap = function(t4, e4, r2) {
    return t4 < e4 ? e4 : t4 > r2 ? r2 : t4;
  }, e3.thresholdBlock = function(t4, r2, n2, o2, i3, a4) {
    for (var u3 = 0, s4 = n2 * i3 + r2; u3 < e3.BLOCK_SIZE; u3++, s4 += i3)
      for (var c7 = 0; c7 < e3.BLOCK_SIZE; c7++)
        (255 & t4[s4 + c7]) <= o2 && a4.set(r2 + c7, n2 + u3);
  }, e3.calculateBlackPoints = function(t4, r2, n2, o2, i3) {
    for (var a4 = i3 - e3.BLOCK_SIZE, u3 = o2 - e3.BLOCK_SIZE, s4 = new Array(n2), c7 = 0; c7 < n2; c7++) {
      s4[c7] = new Int32Array(r2);
      var f2 = c7 << e3.BLOCK_SIZE_POWER;
      f2 > a4 && (f2 = a4);
      for (var h4 = 0; h4 < r2; h4++) {
        var l2 = h4 << e3.BLOCK_SIZE_POWER;
        l2 > u3 && (l2 = u3);
        for (var d4 = 0, p2 = 255, g2 = 0, y4 = 0, w3 = f2 * o2 + l2; y4 < e3.BLOCK_SIZE; y4++, w3 += o2) {
          for (var _2 = 0; _2 < e3.BLOCK_SIZE; _2++) {
            var v2 = 255 & t4[w3 + _2];
            d4 += v2, v2 < p2 && (p2 = v2), v2 > g2 && (g2 = v2);
          }
          if (g2 - p2 > e3.MIN_DYNAMIC_RANGE)
            for (y4++, w3 += o2; y4 < e3.BLOCK_SIZE; y4++, w3 += o2)
              for (_2 = 0; _2 < e3.BLOCK_SIZE; _2++)
                d4 += 255 & t4[w3 + _2];
        }
        var m4 = d4 >> 2 * e3.BLOCK_SIZE_POWER;
        if (g2 - p2 <= e3.MIN_DYNAMIC_RANGE && (m4 = p2 / 2, c7 > 0 && h4 > 0)) {
          var A2 = (s4[c7 - 1][h4] + 2 * s4[c7][h4 - 1] + s4[c7 - 1][h4 - 1]) / 4;
          p2 < A2 && (m4 = A2);
        }
        s4[c7][h4] = m4;
      }
    }
    return s4;
  }, e3.BLOCK_SIZE_POWER = 3, e3.BLOCK_SIZE = 1 << e3.BLOCK_SIZE_POWER, e3.BLOCK_SIZE_MASK = e3.BLOCK_SIZE - 1, e3.MINIMUM_DIMENSION = 5 * e3.BLOCK_SIZE, e3.MIN_DYNAMIC_RANGE = 24, e3;
}(G), j = function() {
  function t3(t4, e3) {
    this.width = t4, this.height = e3;
  }
  return t3.prototype.getWidth = function() {
    return this.width;
  }, t3.prototype.getHeight = function() {
    return this.height;
  }, t3.prototype.isCropSupported = function() {
    return false;
  }, t3.prototype.crop = function(t4, e3, r2, n2) {
    throw new B("This luminance source does not support cropping.");
  }, t3.prototype.isRotateSupported = function() {
    return false;
  }, t3.prototype.rotateCounterClockwise = function() {
    throw new B("This luminance source does not support rotation by 90 degrees.");
  }, t3.prototype.rotateCounterClockwise45 = function() {
    throw new B("This luminance source does not support rotation by 45 degrees.");
  }, t3.prototype.toString = function() {
    for (var t4 = new Uint8ClampedArray(this.width), e3 = new k(), r2 = 0; r2 < this.height; r2++) {
      for (var n2 = this.getRow(r2, t4), o2 = 0; o2 < this.width; o2++) {
        var i3 = 255 & n2[o2], a4 = void 0;
        a4 = i3 < 64 ? "#" : i3 < 128 ? "+" : i3 < 192 ? "." : " ", e3.append(a4);
      }
      e3.append("\n");
    }
    return e3.toString();
  }, t3;
}(), z = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Y = function(t3) {
  function e3(e4) {
    var r2 = t3.call(this, e4.getWidth(), e4.getHeight()) || this;
    return r2.delegate = e4, r2;
  }
  return z(e3, t3), e3.prototype.getRow = function(t4, e4) {
    for (var r2 = this.delegate.getRow(t4, e4), n2 = this.getWidth(), o2 = 0; o2 < n2; o2++)
      r2[o2] = 255 - (255 & r2[o2]);
    return r2;
  }, e3.prototype.getMatrix = function() {
    for (var t4 = this.delegate.getMatrix(), e4 = this.getWidth() * this.getHeight(), r2 = new Uint8ClampedArray(e4), n2 = 0; n2 < e4; n2++)
      r2[n2] = 255 - (255 & t4[n2]);
    return r2;
  }, e3.prototype.isCropSupported = function() {
    return this.delegate.isCropSupported();
  }, e3.prototype.crop = function(t4, r2, n2, o2) {
    return new e3(this.delegate.crop(t4, r2, n2, o2));
  }, e3.prototype.isRotateSupported = function() {
    return this.delegate.isRotateSupported();
  }, e3.prototype.invert = function() {
    return this.delegate;
  }, e3.prototype.rotateCounterClockwise = function() {
    return new e3(this.delegate.rotateCounterClockwise());
  }, e3.prototype.rotateCounterClockwise45 = function() {
    return new e3(this.delegate.rotateCounterClockwise45());
  }, e3;
}(j), Z = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), K = function(t3) {
  function e3(r2) {
    var n2 = t3.call(this, r2.width, r2.height) || this;
    return n2.canvas = r2, n2.tempCanvasElement = null, n2.buffer = e3.makeBufferFromCanvasImageData(r2), n2;
  }
  return Z(e3, t3), e3.makeBufferFromCanvasImageData = function(t4) {
    var r2 = t4.getContext("2d").getImageData(0, 0, t4.width, t4.height);
    return e3.toGrayscaleBuffer(r2.data, t4.width, t4.height);
  }, e3.toGrayscaleBuffer = function(t4, e4, r2) {
    for (var n2 = new Uint8ClampedArray(e4 * r2), o2 = 0, i3 = 0, a4 = t4.length; o2 < a4; o2 += 4, i3++) {
      var u3 = void 0;
      if (0 === t4[o2 + 3])
        u3 = 255;
      else
        u3 = 306 * t4[o2] + 601 * t4[o2 + 1] + 117 * t4[o2 + 2] + 512 >> 10;
      n2[i3] = u3;
    }
    return n2;
  }, e3.prototype.getRow = function(t4, e4) {
    if (t4 < 0 || t4 >= this.getHeight())
      throw new l("Requested row is outside the image: " + t4);
    var r2 = this.getWidth(), n2 = t4 * r2;
    return null === e4 ? e4 = this.buffer.slice(n2, n2 + r2) : (e4.length < r2 && (e4 = new Uint8ClampedArray(r2)), e4.set(this.buffer.slice(n2, n2 + r2))), e4;
  }, e3.prototype.getMatrix = function() {
    return this.buffer;
  }, e3.prototype.isCropSupported = function() {
    return true;
  }, e3.prototype.crop = function(e4, r2, n2, o2) {
    return t3.prototype.crop.call(this, e4, r2, n2, o2), this;
  }, e3.prototype.isRotateSupported = function() {
    return true;
  }, e3.prototype.rotateCounterClockwise = function() {
    return this.rotate(-90), this;
  }, e3.prototype.rotateCounterClockwise45 = function() {
    return this.rotate(-45), this;
  }, e3.prototype.getTempCanvasElement = function() {
    if (null === this.tempCanvasElement) {
      var t4 = this.canvas.ownerDocument.createElement("canvas");
      t4.width = this.canvas.width, t4.height = this.canvas.height, this.tempCanvasElement = t4;
    }
    return this.tempCanvasElement;
  }, e3.prototype.rotate = function(t4) {
    var r2 = this.getTempCanvasElement(), n2 = r2.getContext("2d"), o2 = t4 * e3.DEGREE_TO_RADIANS, i3 = this.canvas.width, a4 = this.canvas.height, u3 = Math.ceil(Math.abs(Math.cos(o2)) * i3 + Math.abs(Math.sin(o2)) * a4), s4 = Math.ceil(Math.abs(Math.sin(o2)) * i3 + Math.abs(Math.cos(o2)) * a4);
    return r2.width = u3, r2.height = s4, n2.translate(u3 / 2, s4 / 2), n2.rotate(o2), n2.drawImage(this.canvas, i3 / -2, a4 / -2), this.buffer = e3.makeBufferFromCanvasImageData(r2), this;
  }, e3.prototype.invert = function() {
    return new Y(this);
  }, e3.DEGREE_TO_RADIANS = Math.PI / 180, e3;
}(j), q = function() {
  function t3(t4, e3, r2) {
    this.deviceId = t4, this.label = e3, this.kind = "videoinput", this.groupId = r2 || void 0;
  }
  return t3.prototype.toJSON = function() {
    return { kind: this.kind, groupId: this.groupId, deviceId: this.deviceId, label: this.label };
  }, t3;
}(), Q = function(t3, e3, r2, n2) {
  return new (r2 || (r2 = Promise))(function(o2, i3) {
    function a4(t4) {
      try {
        s4(n2.next(t4));
      } catch (t5) {
        i3(t5);
      }
    }
    function u3(t4) {
      try {
        s4(n2.throw(t4));
      } catch (t5) {
        i3(t5);
      }
    }
    function s4(t4) {
      var e4;
      t4.done ? o2(t4.value) : (e4 = t4.value, e4 instanceof r2 ? e4 : new r2(function(t5) {
        t5(e4);
      })).then(a4, u3);
    }
    s4((n2 = n2.apply(t3, e3 || [])).next());
  });
}, J = function(t3, e3) {
  var r2, n2, o2, i3, a4 = { label: 0, sent: function() {
    if (1 & o2[0])
      throw o2[1];
    return o2[1];
  }, trys: [], ops: [] };
  return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
    return this;
  }), i3;
  function u3(i4) {
    return function(u4) {
      return function(i5) {
        if (r2)
          throw new TypeError("Generator is already executing.");
        for (; a4; )
          try {
            if (r2 = 1, n2 && (o2 = 2 & i5[0] ? n2.return : i5[0] ? n2.throw || ((o2 = n2.return) && o2.call(n2), 0) : n2.next) && !(o2 = o2.call(n2, i5[1])).done)
              return o2;
            switch (n2 = 0, o2 && (i5 = [2 & i5[0], o2.value]), i5[0]) {
              case 0:
              case 1:
                o2 = i5;
                break;
              case 4:
                return a4.label++, { value: i5[1], done: false };
              case 5:
                a4.label++, n2 = i5[1], i5 = [0];
                continue;
              case 7:
                i5 = a4.ops.pop(), a4.trys.pop();
                continue;
              default:
                if (!(o2 = a4.trys, (o2 = o2.length > 0 && o2[o2.length - 1]) || 6 !== i5[0] && 2 !== i5[0])) {
                  a4 = 0;
                  continue;
                }
                if (3 === i5[0] && (!o2 || i5[1] > o2[0] && i5[1] < o2[3])) {
                  a4.label = i5[1];
                  break;
                }
                if (6 === i5[0] && a4.label < o2[1]) {
                  a4.label = o2[1], o2 = i5;
                  break;
                }
                if (o2 && a4.label < o2[2]) {
                  a4.label = o2[2], a4.ops.push(i5);
                  break;
                }
                o2[2] && a4.ops.pop(), a4.trys.pop();
                continue;
            }
            i5 = e3.call(t3, a4);
          } catch (t4) {
            i5 = [6, t4], n2 = 0;
          } finally {
            r2 = o2 = 0;
          }
        if (5 & i5[0])
          throw i5[1];
        return { value: i5[0] ? i5[1] : void 0, done: true };
      }([i4, u4]);
    };
  }
}, $ = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, tt = function() {
  function t3(t4, e3, r2) {
    void 0 === e3 && (e3 = 500), this.reader = t4, this.timeBetweenScansMillis = e3, this._hints = r2, this._stopContinuousDecode = false, this._stopAsyncDecode = false, this._timeBetweenDecodingAttempts = 0;
  }
  return Object.defineProperty(t3.prototype, "hasNavigator", { get: function() {
    return "undefined" != typeof navigator;
  }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "isMediaDevicesSuported", { get: function() {
    return this.hasNavigator && !!navigator.mediaDevices;
  }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "canEnumerateDevices", { get: function() {
    return !(!this.isMediaDevicesSuported || !navigator.mediaDevices.enumerateDevices);
  }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "timeBetweenDecodingAttempts", { get: function() {
    return this._timeBetweenDecodingAttempts;
  }, set: function(t4) {
    this._timeBetweenDecodingAttempts = t4 < 0 ? 0 : t4;
  }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "hints", { get: function() {
    return this._hints;
  }, set: function(t4) {
    this._hints = t4 || null;
  }, enumerable: false, configurable: true }), t3.prototype.listVideoInputDevices = function() {
    return Q(this, void 0, void 0, function() {
      var t4, e3, r2, n2, o2, i3, a4, u3, s4, c7, f2, h4;
      return J(this, function(l2) {
        switch (l2.label) {
          case 0:
            if (!this.hasNavigator)
              throw new Error("Can't enumerate devices, navigator is not present.");
            if (!this.canEnumerateDevices)
              throw new Error("Can't enumerate devices, method not supported.");
            return [4, navigator.mediaDevices.enumerateDevices()];
          case 1:
            t4 = l2.sent(), e3 = [];
            try {
              for (r2 = $(t4), n2 = r2.next(); !n2.done; n2 = r2.next())
                o2 = n2.value, "videoinput" === (i3 = "video" === o2.kind ? "videoinput" : o2.kind) && (a4 = o2.deviceId || o2.id, u3 = o2.label || "Video device " + (e3.length + 1), s4 = o2.groupId, c7 = { deviceId: a4, label: u3, kind: i3, groupId: s4 }, e3.push(c7));
            } catch (t5) {
              f2 = { error: t5 };
            } finally {
              try {
                n2 && !n2.done && (h4 = r2.return) && h4.call(r2);
              } finally {
                if (f2)
                  throw f2.error;
              }
            }
            return [2, e3];
        }
      });
    });
  }, t3.prototype.getVideoInputDevices = function() {
    return Q(this, void 0, void 0, function() {
      return J(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this.listVideoInputDevices()];
          case 1:
            return [2, t4.sent().map(function(t5) {
              return new q(t5.deviceId, t5.label);
            })];
        }
      });
    });
  }, t3.prototype.findDeviceById = function(t4) {
    return Q(this, void 0, void 0, function() {
      var e3;
      return J(this, function(r2) {
        switch (r2.label) {
          case 0:
            return [4, this.listVideoInputDevices()];
          case 1:
            return (e3 = r2.sent()) ? [2, e3.find(function(e4) {
              return e4.deviceId === t4;
            })] : [2, null];
        }
      });
    });
  }, t3.prototype.decodeFromInputVideoDevice = function(t4, e3) {
    return Q(this, void 0, void 0, function() {
      return J(this, function(r2) {
        switch (r2.label) {
          case 0:
            return [4, this.decodeOnceFromVideoDevice(t4, e3)];
          case 1:
            return [2, r2.sent()];
        }
      });
    });
  }, t3.prototype.decodeOnceFromVideoDevice = function(t4, e3) {
    return Q(this, void 0, void 0, function() {
      var r2;
      return J(this, function(n2) {
        switch (n2.label) {
          case 0:
            return this.reset(), r2 = { video: t4 ? { deviceId: { exact: t4 } } : { facingMode: "environment" } }, [4, this.decodeOnceFromConstraints(r2, e3)];
          case 1:
            return [2, n2.sent()];
        }
      });
    });
  }, t3.prototype.decodeOnceFromConstraints = function(t4, e3) {
    return Q(this, void 0, void 0, function() {
      var r2;
      return J(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, navigator.mediaDevices.getUserMedia(t4)];
          case 1:
            return r2 = n2.sent(), [4, this.decodeOnceFromStream(r2, e3)];
          case 2:
            return [2, n2.sent()];
        }
      });
    });
  }, t3.prototype.decodeOnceFromStream = function(t4, e3) {
    return Q(this, void 0, void 0, function() {
      var r2;
      return J(this, function(n2) {
        switch (n2.label) {
          case 0:
            return this.reset(), [4, this.attachStreamToVideo(t4, e3)];
          case 1:
            return r2 = n2.sent(), [4, this.decodeOnce(r2)];
          case 2:
            return [2, n2.sent()];
        }
      });
    });
  }, t3.prototype.decodeFromInputVideoDeviceContinuously = function(t4, e3, r2) {
    return Q(this, void 0, void 0, function() {
      return J(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, this.decodeFromVideoDevice(t4, e3, r2)];
          case 1:
            return [2, n2.sent()];
        }
      });
    });
  }, t3.prototype.decodeFromVideoDevice = function(t4, e3, r2) {
    return Q(this, void 0, void 0, function() {
      var n2;
      return J(this, function(o2) {
        switch (o2.label) {
          case 0:
            return n2 = { video: t4 ? { deviceId: { exact: t4 } } : { facingMode: "environment" } }, [4, this.decodeFromConstraints(n2, e3, r2)];
          case 1:
            return [2, o2.sent()];
        }
      });
    });
  }, t3.prototype.decodeFromConstraints = function(t4, e3, r2) {
    return Q(this, void 0, void 0, function() {
      var n2;
      return J(this, function(o2) {
        switch (o2.label) {
          case 0:
            return [4, navigator.mediaDevices.getUserMedia(t4)];
          case 1:
            return n2 = o2.sent(), [4, this.decodeFromStream(n2, e3, r2)];
          case 2:
            return [2, o2.sent()];
        }
      });
    });
  }, t3.prototype.decodeFromStream = function(t4, e3, r2) {
    return Q(this, void 0, void 0, function() {
      var n2;
      return J(this, function(o2) {
        switch (o2.label) {
          case 0:
            return this.reset(), [4, this.attachStreamToVideo(t4, e3)];
          case 1:
            return n2 = o2.sent(), [4, this.decodeContinuously(n2, r2)];
          case 2:
            return [2, o2.sent()];
        }
      });
    });
  }, t3.prototype.stopAsyncDecode = function() {
    this._stopAsyncDecode = true;
  }, t3.prototype.stopContinuousDecode = function() {
    this._stopContinuousDecode = true;
  }, t3.prototype.attachStreamToVideo = function(t4, e3) {
    return Q(this, void 0, void 0, function() {
      var r2;
      return J(this, function(n2) {
        switch (n2.label) {
          case 0:
            return r2 = this.prepareVideoElement(e3), this.addVideoSource(r2, t4), this.videoElement = r2, this.stream = t4, [4, this.playVideoOnLoadAsync(r2)];
          case 1:
            return n2.sent(), [2, r2];
        }
      });
    });
  }, t3.prototype.playVideoOnLoadAsync = function(t4) {
    var e3 = this;
    return new Promise(function(r2, n2) {
      return e3.playVideoOnLoad(t4, function() {
        return r2();
      });
    });
  }, t3.prototype.playVideoOnLoad = function(t4, e3) {
    var r2 = this;
    this.videoEndedListener = function() {
      return r2.stopStreams();
    }, this.videoCanPlayListener = function() {
      return r2.tryPlayVideo(t4);
    }, t4.addEventListener("ended", this.videoEndedListener), t4.addEventListener("canplay", this.videoCanPlayListener), t4.addEventListener("playing", e3), this.tryPlayVideo(t4);
  }, t3.prototype.isVideoPlaying = function(t4) {
    return t4.currentTime > 0 && !t4.paused && !t4.ended && t4.readyState > 2;
  }, t3.prototype.tryPlayVideo = function(t4) {
    return Q(this, void 0, void 0, function() {
      return J(this, function(e3) {
        switch (e3.label) {
          case 0:
            if (this.isVideoPlaying(t4))
              return console.warn("Trying to play video that is already playing."), [2];
            e3.label = 1;
          case 1:
            return e3.trys.push([1, 3, , 4]), [4, t4.play()];
          case 2:
            return e3.sent(), [3, 4];
          case 3:
            return e3.sent(), console.warn("It was not possible to play the video."), [3, 4];
          case 4:
            return [2];
        }
      });
    });
  }, t3.prototype.getMediaElement = function(t4, e3) {
    var r2 = document.getElementById(t4);
    if (!r2)
      throw new f("element with id '" + t4 + "' not found");
    if (r2.nodeName.toLowerCase() !== e3.toLowerCase())
      throw new f("element with id '" + t4 + "' must be an " + e3 + " element");
    return r2;
  }, t3.prototype.decodeFromImage = function(t4, e3) {
    if (!t4 && !e3)
      throw new f("either imageElement with a src set or an url must be provided");
    return e3 && !t4 ? this.decodeFromImageUrl(e3) : this.decodeFromImageElement(t4);
  }, t3.prototype.decodeFromVideo = function(t4, e3) {
    if (!t4 && !e3)
      throw new f("Either an element with a src set or an URL must be provided");
    return e3 && !t4 ? this.decodeFromVideoUrl(e3) : this.decodeFromVideoElement(t4);
  }, t3.prototype.decodeFromVideoContinuously = function(t4, e3, r2) {
    if (void 0 === t4 && void 0 === e3)
      throw new f("Either an element with a src set or an URL must be provided");
    return e3 && !t4 ? this.decodeFromVideoUrlContinuously(e3, r2) : this.decodeFromVideoElementContinuously(t4, r2);
  }, t3.prototype.decodeFromImageElement = function(t4) {
    if (!t4)
      throw new f("An image element must be provided.");
    this.reset();
    var e3 = this.prepareImageElement(t4);
    return this.imageElement = e3, this.isImageLoaded(e3) ? this.decodeOnce(e3, false, true) : this._decodeOnLoadImage(e3);
  }, t3.prototype.decodeFromVideoElement = function(t4) {
    var e3 = this._decodeFromVideoElementSetup(t4);
    return this._decodeOnLoadVideo(e3);
  }, t3.prototype.decodeFromVideoElementContinuously = function(t4, e3) {
    var r2 = this._decodeFromVideoElementSetup(t4);
    return this._decodeOnLoadVideoContinuously(r2, e3);
  }, t3.prototype._decodeFromVideoElementSetup = function(t4) {
    if (!t4)
      throw new f("A video element must be provided.");
    this.reset();
    var e3 = this.prepareVideoElement(t4);
    return this.videoElement = e3, e3;
  }, t3.prototype.decodeFromImageUrl = function(t4) {
    if (!t4)
      throw new f("An URL must be provided.");
    this.reset();
    var e3 = this.prepareImageElement();
    this.imageElement = e3;
    var r2 = this._decodeOnLoadImage(e3);
    return e3.src = t4, r2;
  }, t3.prototype.decodeFromVideoUrl = function(t4) {
    if (!t4)
      throw new f("An URL must be provided.");
    this.reset();
    var e3 = this.prepareVideoElement(), r2 = this.decodeFromVideoElement(e3);
    return e3.src = t4, r2;
  }, t3.prototype.decodeFromVideoUrlContinuously = function(t4, e3) {
    if (!t4)
      throw new f("An URL must be provided.");
    this.reset();
    var r2 = this.prepareVideoElement(), n2 = this.decodeFromVideoElementContinuously(r2, e3);
    return r2.src = t4, n2;
  }, t3.prototype._decodeOnLoadImage = function(t4) {
    var e3 = this;
    return new Promise(function(r2, n2) {
      e3.imageLoadedListener = function() {
        return e3.decodeOnce(t4, false, true).then(r2, n2);
      }, t4.addEventListener("load", e3.imageLoadedListener);
    });
  }, t3.prototype._decodeOnLoadVideo = function(t4) {
    return Q(this, void 0, void 0, function() {
      return J(this, function(e3) {
        switch (e3.label) {
          case 0:
            return [4, this.playVideoOnLoadAsync(t4)];
          case 1:
            return e3.sent(), [4, this.decodeOnce(t4)];
          case 2:
            return [2, e3.sent()];
        }
      });
    });
  }, t3.prototype._decodeOnLoadVideoContinuously = function(t4, e3) {
    return Q(this, void 0, void 0, function() {
      return J(this, function(r2) {
        switch (r2.label) {
          case 0:
            return [4, this.playVideoOnLoadAsync(t4)];
          case 1:
            return r2.sent(), this.decodeContinuously(t4, e3), [2];
        }
      });
    });
  }, t3.prototype.isImageLoaded = function(t4) {
    return !!t4.complete && 0 !== t4.naturalWidth;
  }, t3.prototype.prepareImageElement = function(t4) {
    var e3;
    return void 0 === t4 && ((e3 = document.createElement("img")).width = 200, e3.height = 200), "string" == typeof t4 && (e3 = this.getMediaElement(t4, "img")), t4 instanceof HTMLImageElement && (e3 = t4), e3;
  }, t3.prototype.prepareVideoElement = function(t4) {
    var e3;
    return t4 || "undefined" == typeof document || ((e3 = document.createElement("video")).width = 200, e3.height = 200), "string" == typeof t4 && (e3 = this.getMediaElement(t4, "video")), t4 instanceof HTMLVideoElement && (e3 = t4), e3.setAttribute("autoplay", "true"), e3.setAttribute("muted", "true"), e3.setAttribute("playsinline", "true"), e3;
  }, t3.prototype.decodeOnce = function(t4, e3, r2) {
    var n2 = this;
    void 0 === e3 && (e3 = true), void 0 === r2 && (r2 = true), this._stopAsyncDecode = false;
    var o2 = function(i3, a4) {
      if (n2._stopAsyncDecode)
        return a4(new U("Video stream has ended before any code could be detected.")), void (n2._stopAsyncDecode = void 0);
      try {
        i3(n2.decode(t4));
      } catch (t5) {
        if (e3 && t5 instanceof U || (t5 instanceof g || t5 instanceof R) && r2)
          return setTimeout(o2, n2._timeBetweenDecodingAttempts, i3, a4);
        a4(t5);
      }
    };
    return new Promise(function(t5, e4) {
      return o2(t5, e4);
    });
  }, t3.prototype.decodeContinuously = function(t4, e3) {
    var r2 = this;
    this._stopContinuousDecode = false;
    var n2 = function() {
      if (r2._stopContinuousDecode)
        r2._stopContinuousDecode = void 0;
      else
        try {
          var o2 = r2.decode(t4);
          e3(o2, null), setTimeout(n2, r2.timeBetweenScansMillis);
        } catch (t5) {
          e3(null, t5), (t5 instanceof g || t5 instanceof R || t5 instanceof U) && setTimeout(n2, r2._timeBetweenDecodingAttempts);
        }
    };
    n2();
  }, t3.prototype.decode = function(t4) {
    var e3 = this.createBinaryBitmap(t4);
    return this.decodeBitmap(e3);
  }, t3.prototype.createBinaryBitmap = function(t4) {
    var e3 = this.getCaptureCanvasContext(t4);
    this.drawImageOnCanvas(e3, t4);
    var r2 = this.getCaptureCanvas(t4), n2 = new K(r2), o2 = new W(n2);
    return new d(o2);
  }, t3.prototype.getCaptureCanvasContext = function(t4) {
    if (!this.captureCanvasContext) {
      var e3 = this.getCaptureCanvas(t4).getContext("2d");
      this.captureCanvasContext = e3;
    }
    return this.captureCanvasContext;
  }, t3.prototype.getCaptureCanvas = function(t4) {
    if (!this.captureCanvas) {
      var e3 = this.createCaptureCanvas(t4);
      this.captureCanvas = e3;
    }
    return this.captureCanvas;
  }, t3.prototype.drawImageOnCanvas = function(t4, e3) {
    t4.drawImage(e3, 0, 0);
  }, t3.prototype.decodeBitmap = function(t4) {
    return this.reader.decode(t4, this._hints);
  }, t3.prototype.createCaptureCanvas = function(t4) {
    if ("undefined" == typeof document)
      return this._destroyCaptureCanvas(), null;
    var e3, r2, n2 = document.createElement("canvas");
    return void 0 !== t4 && (t4 instanceof HTMLVideoElement ? (e3 = t4.videoWidth, r2 = t4.videoHeight) : t4 instanceof HTMLImageElement && (e3 = t4.naturalWidth || t4.width, r2 = t4.naturalHeight || t4.height)), n2.style.width = e3 + "px", n2.style.height = r2 + "px", n2.width = e3, n2.height = r2, n2;
  }, t3.prototype.stopStreams = function() {
    this.stream && (this.stream.getVideoTracks().forEach(function(t4) {
      return t4.stop();
    }), this.stream = void 0), false === this._stopAsyncDecode && this.stopAsyncDecode(), false === this._stopContinuousDecode && this.stopContinuousDecode();
  }, t3.prototype.reset = function() {
    this.stopStreams(), this._destroyVideoElement(), this._destroyImageElement(), this._destroyCaptureCanvas();
  }, t3.prototype._destroyVideoElement = function() {
    this.videoElement && (void 0 !== this.videoEndedListener && this.videoElement.removeEventListener("ended", this.videoEndedListener), void 0 !== this.videoPlayingEventListener && this.videoElement.removeEventListener("playing", this.videoPlayingEventListener), void 0 !== this.videoCanPlayListener && this.videoElement.removeEventListener("loadedmetadata", this.videoCanPlayListener), this.cleanVideoSource(this.videoElement), this.videoElement = void 0);
  }, t3.prototype._destroyImageElement = function() {
    this.imageElement && (void 0 !== this.imageLoadedListener && this.imageElement.removeEventListener("load", this.imageLoadedListener), this.imageElement.src = void 0, this.imageElement.removeAttribute("src"), this.imageElement = void 0);
  }, t3.prototype._destroyCaptureCanvas = function() {
    this.captureCanvasContext = void 0, this.captureCanvas = void 0;
  }, t3.prototype.addVideoSource = function(t4, e3) {
    try {
      t4.srcObject = e3;
    } catch (r2) {
      t4.src = URL.createObjectURL(e3);
    }
  }, t3.prototype.cleanVideoSource = function(t4) {
    try {
      t4.srcObject = null;
    } catch (e3) {
      t4.src = "";
    }
    this.videoElement.removeAttribute("src");
  }, t3;
}(), et = function() {
  function t3(t4, e3, r2, n2, o2, i3) {
    void 0 === r2 && (r2 = null == e3 ? 0 : 8 * e3.length), void 0 === i3 && (i3 = w$2.currentTimeMillis()), this.text = t4, this.rawBytes = e3, this.numBits = r2, this.resultPoints = n2, this.format = o2, this.timestamp = i3, this.text = t4, this.rawBytes = e3, this.numBits = null == r2 ? null == e3 ? 0 : 8 * e3.length : r2, this.resultPoints = n2, this.format = o2, this.resultMetadata = null, this.timestamp = null == i3 ? w$2.currentTimeMillis() : i3;
  }
  return t3.prototype.getText = function() {
    return this.text;
  }, t3.prototype.getRawBytes = function() {
    return this.rawBytes;
  }, t3.prototype.getNumBits = function() {
    return this.numBits;
  }, t3.prototype.getResultPoints = function() {
    return this.resultPoints;
  }, t3.prototype.getBarcodeFormat = function() {
    return this.format;
  }, t3.prototype.getResultMetadata = function() {
    return this.resultMetadata;
  }, t3.prototype.putMetadata = function(t4, e3) {
    null === this.resultMetadata && (this.resultMetadata = /* @__PURE__ */ new Map()), this.resultMetadata.set(t4, e3);
  }, t3.prototype.putAllMetadata = function(t4) {
    null !== t4 && (null === this.resultMetadata ? this.resultMetadata = t4 : this.resultMetadata = new Map(t4));
  }, t3.prototype.addResultPoints = function(t4) {
    var e3 = this.resultPoints;
    if (null === e3)
      this.resultPoints = t4;
    else if (null !== t4 && t4.length > 0) {
      var r2 = new Array(e3.length + t4.length);
      w$2.arraycopy(e3, 0, r2, 0, e3.length), w$2.arraycopy(t4, 0, r2, e3.length, t4.length), this.resultPoints = r2;
    }
  }, t3.prototype.getTimestamp = function() {
    return this.timestamp;
  }, t3.prototype.toString = function() {
    return this.text;
  }, t3;
}();
!function(t3) {
  t3[t3.AZTEC = 0] = "AZTEC", t3[t3.CODABAR = 1] = "CODABAR", t3[t3.CODE_39 = 2] = "CODE_39", t3[t3.CODE_93 = 3] = "CODE_93", t3[t3.CODE_128 = 4] = "CODE_128", t3[t3.DATA_MATRIX = 5] = "DATA_MATRIX", t3[t3.EAN_8 = 6] = "EAN_8", t3[t3.EAN_13 = 7] = "EAN_13", t3[t3.ITF = 8] = "ITF", t3[t3.MAXICODE = 9] = "MAXICODE", t3[t3.PDF_417 = 10] = "PDF_417", t3[t3.QR_CODE = 11] = "QR_CODE", t3[t3.RSS_14 = 12] = "RSS_14", t3[t3.RSS_EXPANDED = 13] = "RSS_EXPANDED", t3[t3.UPC_A = 14] = "UPC_A", t3[t3.UPC_E = 15] = "UPC_E", t3[t3.UPC_EAN_EXTENSION = 16] = "UPC_EAN_EXTENSION";
}(D || (D = {}));
var rt, nt = D;
!function(t3) {
  t3[t3.OTHER = 0] = "OTHER", t3[t3.ORIENTATION = 1] = "ORIENTATION", t3[t3.BYTE_SEGMENTS = 2] = "BYTE_SEGMENTS", t3[t3.ERROR_CORRECTION_LEVEL = 3] = "ERROR_CORRECTION_LEVEL", t3[t3.ISSUE_NUMBER = 4] = "ISSUE_NUMBER", t3[t3.SUGGESTED_PRICE = 5] = "SUGGESTED_PRICE", t3[t3.POSSIBLE_COUNTRY = 6] = "POSSIBLE_COUNTRY", t3[t3.UPC_EAN_EXTENSION = 7] = "UPC_EAN_EXTENSION", t3[t3.PDF417_EXTRA_METADATA = 8] = "PDF417_EXTRA_METADATA", t3[t3.STRUCTURED_APPEND_SEQUENCE = 9] = "STRUCTURED_APPEND_SEQUENCE", t3[t3.STRUCTURED_APPEND_PARITY = 10] = "STRUCTURED_APPEND_PARITY";
}(rt || (rt = {}));
var ot, it = rt, at = function() {
  function t3(t4, e3, r2, n2, o2, i3) {
    void 0 === o2 && (o2 = -1), void 0 === i3 && (i3 = -1), this.rawBytes = t4, this.text = e3, this.byteSegments = r2, this.ecLevel = n2, this.structuredAppendSequenceNumber = o2, this.structuredAppendParity = i3, this.numBits = null == t4 ? 0 : 8 * t4.length;
  }
  return t3.prototype.getRawBytes = function() {
    return this.rawBytes;
  }, t3.prototype.getNumBits = function() {
    return this.numBits;
  }, t3.prototype.setNumBits = function(t4) {
    this.numBits = t4;
  }, t3.prototype.getText = function() {
    return this.text;
  }, t3.prototype.getByteSegments = function() {
    return this.byteSegments;
  }, t3.prototype.getECLevel = function() {
    return this.ecLevel;
  }, t3.prototype.getErrorsCorrected = function() {
    return this.errorsCorrected;
  }, t3.prototype.setErrorsCorrected = function(t4) {
    this.errorsCorrected = t4;
  }, t3.prototype.getErasures = function() {
    return this.erasures;
  }, t3.prototype.setErasures = function(t4) {
    this.erasures = t4;
  }, t3.prototype.getOther = function() {
    return this.other;
  }, t3.prototype.setOther = function(t4) {
    this.other = t4;
  }, t3.prototype.hasStructuredAppend = function() {
    return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;
  }, t3.prototype.getStructuredAppendParity = function() {
    return this.structuredAppendParity;
  }, t3.prototype.getStructuredAppendSequenceNumber = function() {
    return this.structuredAppendSequenceNumber;
  }, t3;
}(), ut = function() {
  function t3() {
  }
  return t3.prototype.exp = function(t4) {
    return this.expTable[t4];
  }, t3.prototype.log = function(t4) {
    if (0 === t4)
      throw new l();
    return this.logTable[t4];
  }, t3.addOrSubtract = function(t4, e3) {
    return t4 ^ e3;
  }, t3;
}(), st = function() {
  function t3(t4, e3) {
    if (0 === e3.length)
      throw new l();
    this.field = t4;
    var r2 = e3.length;
    if (r2 > 1 && 0 === e3[0]) {
      for (var n2 = 1; n2 < r2 && 0 === e3[n2]; )
        n2++;
      n2 === r2 ? this.coefficients = Int32Array.from([0]) : (this.coefficients = new Int32Array(r2 - n2), w$2.arraycopy(e3, n2, this.coefficients, 0, this.coefficients.length));
    } else
      this.coefficients = e3;
  }
  return t3.prototype.getCoefficients = function() {
    return this.coefficients;
  }, t3.prototype.getDegree = function() {
    return this.coefficients.length - 1;
  }, t3.prototype.isZero = function() {
    return 0 === this.coefficients[0];
  }, t3.prototype.getCoefficient = function(t4) {
    return this.coefficients[this.coefficients.length - 1 - t4];
  }, t3.prototype.evaluateAt = function(t4) {
    if (0 === t4)
      return this.getCoefficient(0);
    var e3, r2 = this.coefficients;
    if (1 === t4) {
      e3 = 0;
      for (var n2 = 0, o2 = r2.length; n2 !== o2; n2++) {
        var i3 = r2[n2];
        e3 = ut.addOrSubtract(e3, i3);
      }
      return e3;
    }
    e3 = r2[0];
    var a4 = r2.length, u3 = this.field;
    for (n2 = 1; n2 < a4; n2++)
      e3 = ut.addOrSubtract(u3.multiply(t4, e3), r2[n2]);
    return e3;
  }, t3.prototype.addOrSubtract = function(e3) {
    if (!this.field.equals(e3.field))
      throw new l("GenericGFPolys do not have same GenericGF field");
    if (this.isZero())
      return e3;
    if (e3.isZero())
      return this;
    var r2 = this.coefficients, n2 = e3.coefficients;
    if (r2.length > n2.length) {
      var o2 = r2;
      r2 = n2, n2 = o2;
    }
    var i3 = new Int32Array(n2.length), a4 = n2.length - r2.length;
    w$2.arraycopy(n2, 0, i3, 0, a4);
    for (var u3 = a4; u3 < n2.length; u3++)
      i3[u3] = ut.addOrSubtract(r2[u3 - a4], n2[u3]);
    return new t3(this.field, i3);
  }, t3.prototype.multiply = function(e3) {
    if (!this.field.equals(e3.field))
      throw new l("GenericGFPolys do not have same GenericGF field");
    if (this.isZero() || e3.isZero())
      return this.field.getZero();
    for (var r2 = this.coefficients, n2 = r2.length, o2 = e3.coefficients, i3 = o2.length, a4 = new Int32Array(n2 + i3 - 1), u3 = this.field, s4 = 0; s4 < n2; s4++)
      for (var c7 = r2[s4], f2 = 0; f2 < i3; f2++)
        a4[s4 + f2] = ut.addOrSubtract(a4[s4 + f2], u3.multiply(c7, o2[f2]));
    return new t3(u3, a4);
  }, t3.prototype.multiplyScalar = function(e3) {
    if (0 === e3)
      return this.field.getZero();
    if (1 === e3)
      return this;
    for (var r2 = this.coefficients.length, n2 = this.field, o2 = new Int32Array(r2), i3 = this.coefficients, a4 = 0; a4 < r2; a4++)
      o2[a4] = n2.multiply(i3[a4], e3);
    return new t3(n2, o2);
  }, t3.prototype.multiplyByMonomial = function(e3, r2) {
    if (e3 < 0)
      throw new l();
    if (0 === r2)
      return this.field.getZero();
    for (var n2 = this.coefficients, o2 = n2.length, i3 = new Int32Array(o2 + e3), a4 = this.field, u3 = 0; u3 < o2; u3++)
      i3[u3] = a4.multiply(n2[u3], r2);
    return new t3(a4, i3);
  }, t3.prototype.divide = function(t4) {
    if (!this.field.equals(t4.field))
      throw new l("GenericGFPolys do not have same GenericGF field");
    if (t4.isZero())
      throw new l("Divide by 0");
    for (var e3 = this.field, r2 = e3.getZero(), n2 = this, o2 = t4.getCoefficient(t4.getDegree()), i3 = e3.inverse(o2); n2.getDegree() >= t4.getDegree() && !n2.isZero(); ) {
      var a4 = n2.getDegree() - t4.getDegree(), u3 = e3.multiply(n2.getCoefficient(n2.getDegree()), i3), s4 = t4.multiplyByMonomial(a4, u3), c7 = e3.buildMonomial(a4, u3);
      r2 = r2.addOrSubtract(c7), n2 = n2.addOrSubtract(s4);
    }
    return [r2, n2];
  }, t3.prototype.toString = function() {
    for (var t4 = "", e3 = this.getDegree(); e3 >= 0; e3--) {
      var r2 = this.getCoefficient(e3);
      if (0 !== r2) {
        if (r2 < 0 ? (t4 += " - ", r2 = -r2) : t4.length > 0 && (t4 += " + "), 0 === e3 || 1 !== r2) {
          var n2 = this.field.log(r2);
          0 === n2 ? t4 += "1" : 1 === n2 ? t4 += "a" : (t4 += "a^", t4 += n2);
        }
        0 !== e3 && (1 === e3 ? t4 += "x" : (t4 += "x^", t4 += e3));
      }
    }
    return t4;
  }, t3;
}(), ct = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), ft = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return ct(e3, t3), e3.kind = "ArithmeticException", e3;
}(s), ht = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), lt = function(t3) {
  function e3(e4, r2, n2) {
    var o2 = t3.call(this) || this;
    o2.primitive = e4, o2.size = r2, o2.generatorBase = n2;
    for (var i3 = new Int32Array(r2), a4 = 1, u3 = 0; u3 < r2; u3++)
      i3[u3] = a4, (a4 *= 2) >= r2 && (a4 ^= e4, a4 &= r2 - 1);
    o2.expTable = i3;
    var s4 = new Int32Array(r2);
    for (u3 = 0; u3 < r2 - 1; u3++)
      s4[i3[u3]] = u3;
    return o2.logTable = s4, o2.zero = new st(o2, Int32Array.from([0])), o2.one = new st(o2, Int32Array.from([1])), o2;
  }
  return ht(e3, t3), e3.prototype.getZero = function() {
    return this.zero;
  }, e3.prototype.getOne = function() {
    return this.one;
  }, e3.prototype.buildMonomial = function(t4, e4) {
    if (t4 < 0)
      throw new l();
    if (0 === e4)
      return this.zero;
    var r2 = new Int32Array(t4 + 1);
    return r2[0] = e4, new st(this, r2);
  }, e3.prototype.inverse = function(t4) {
    if (0 === t4)
      throw new ft();
    return this.expTable[this.size - this.logTable[t4] - 1];
  }, e3.prototype.multiply = function(t4, e4) {
    return 0 === t4 || 0 === e4 ? 0 : this.expTable[(this.logTable[t4] + this.logTable[e4]) % (this.size - 1)];
  }, e3.prototype.getSize = function() {
    return this.size;
  }, e3.prototype.getGeneratorBase = function() {
    return this.generatorBase;
  }, e3.prototype.toString = function() {
    return "GF(0x" + I.toHexString(this.primitive) + "," + this.size + ")";
  }, e3.prototype.equals = function(t4) {
    return t4 === this;
  }, e3.AZTEC_DATA_12 = new e3(4201, 4096, 1), e3.AZTEC_DATA_10 = new e3(1033, 1024, 1), e3.AZTEC_DATA_6 = new e3(67, 64, 1), e3.AZTEC_PARAM = new e3(19, 16, 1), e3.QR_CODE_FIELD_256 = new e3(285, 256, 0), e3.DATA_MATRIX_FIELD_256 = new e3(301, 256, 1), e3.AZTEC_DATA_8 = e3.DATA_MATRIX_FIELD_256, e3.MAXICODE_FIELD_64 = e3.AZTEC_DATA_6, e3;
}(ut), dt = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), pt = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return dt(e3, t3), e3.kind = "ReedSolomonException", e3;
}(s), gt = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), yt = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return gt(e3, t3), e3.kind = "IllegalStateException", e3;
}(s), wt = function() {
  function t3(t4) {
    this.field = t4;
  }
  return t3.prototype.decode = function(t4, e3) {
    for (var r2 = this.field, n2 = new st(r2, t4), o2 = new Int32Array(e3), i3 = true, a4 = 0; a4 < e3; a4++) {
      var u3 = n2.evaluateAt(r2.exp(a4 + r2.getGeneratorBase()));
      o2[o2.length - 1 - a4] = u3, 0 !== u3 && (i3 = false);
    }
    if (!i3) {
      var s4 = new st(r2, o2), c7 = this.runEuclideanAlgorithm(r2.buildMonomial(e3, 1), s4, e3), f2 = c7[0], h4 = c7[1], l2 = this.findErrorLocations(f2), d4 = this.findErrorMagnitudes(h4, l2);
      for (a4 = 0; a4 < l2.length; a4++) {
        var p2 = t4.length - 1 - r2.log(l2[a4]);
        if (p2 < 0)
          throw new pt("Bad error location");
        t4[p2] = lt.addOrSubtract(t4[p2], d4[a4]);
      }
    }
  }, t3.prototype.runEuclideanAlgorithm = function(t4, e3, r2) {
    if (t4.getDegree() < e3.getDegree()) {
      var n2 = t4;
      t4 = e3, e3 = n2;
    }
    for (var o2 = this.field, i3 = t4, a4 = e3, u3 = o2.getZero(), s4 = o2.getOne(); a4.getDegree() >= (r2 / 2 | 0); ) {
      var c7 = i3, f2 = u3;
      if (u3 = s4, (i3 = a4).isZero())
        throw new pt("r_{i-1} was zero");
      a4 = c7;
      for (var h4 = o2.getZero(), l2 = i3.getCoefficient(i3.getDegree()), d4 = o2.inverse(l2); a4.getDegree() >= i3.getDegree() && !a4.isZero(); ) {
        var p2 = a4.getDegree() - i3.getDegree(), g2 = o2.multiply(a4.getCoefficient(a4.getDegree()), d4);
        h4 = h4.addOrSubtract(o2.buildMonomial(p2, g2)), a4 = a4.addOrSubtract(i3.multiplyByMonomial(p2, g2));
      }
      if (s4 = h4.multiply(u3).addOrSubtract(f2), a4.getDegree() >= i3.getDegree())
        throw new yt("Division algorithm failed to reduce polynomial?");
    }
    var y4 = s4.getCoefficient(0);
    if (0 === y4)
      throw new pt("sigmaTilde(0) was zero");
    var w3 = o2.inverse(y4);
    return [s4.multiplyScalar(w3), a4.multiplyScalar(w3)];
  }, t3.prototype.findErrorLocations = function(t4) {
    var e3 = t4.getDegree();
    if (1 === e3)
      return Int32Array.from([t4.getCoefficient(1)]);
    for (var r2 = new Int32Array(e3), n2 = 0, o2 = this.field, i3 = 1; i3 < o2.getSize() && n2 < e3; i3++)
      0 === t4.evaluateAt(i3) && (r2[n2] = o2.inverse(i3), n2++);
    if (n2 !== e3)
      throw new pt("Error locator degree does not match number of roots");
    return r2;
  }, t3.prototype.findErrorMagnitudes = function(t4, e3) {
    for (var r2 = e3.length, n2 = new Int32Array(r2), o2 = this.field, i3 = 0; i3 < r2; i3++) {
      for (var a4 = o2.inverse(e3[i3]), u3 = 1, s4 = 0; s4 < r2; s4++)
        if (i3 !== s4) {
          var c7 = o2.multiply(e3[s4], a4), f2 = 0 == (1 & c7) ? 1 | c7 : -2 & c7;
          u3 = o2.multiply(u3, f2);
        }
      n2[i3] = o2.multiply(t4.evaluateAt(a4), o2.inverse(u3)), 0 !== o2.getGeneratorBase() && (n2[i3] = o2.multiply(n2[i3], a4));
    }
    return n2;
  }, t3;
}();
!function(t3) {
  t3[t3.UPPER = 0] = "UPPER", t3[t3.LOWER = 1] = "LOWER", t3[t3.MIXED = 2] = "MIXED", t3[t3.DIGIT = 3] = "DIGIT", t3[t3.PUNCT = 4] = "PUNCT", t3[t3.BINARY = 5] = "BINARY";
}(ot || (ot = {}));
var _t = function() {
  function t3() {
  }
  return t3.prototype.decode = function(e3) {
    this.ddata = e3;
    var r2 = e3.getBits(), n2 = this.extractBits(r2), o2 = this.correctBits(n2), i3 = t3.convertBoolArrayToByteArray(o2), a4 = t3.getEncodedData(o2), u3 = new at(i3, a4, null, null);
    return u3.setNumBits(o2.length), u3;
  }, t3.highLevelDecode = function(t4) {
    return this.getEncodedData(t4);
  }, t3.getEncodedData = function(e3) {
    for (var r2 = e3.length, n2 = ot.UPPER, o2 = ot.UPPER, i3 = "", a4 = 0; a4 < r2; )
      if (o2 === ot.BINARY) {
        if (r2 - a4 < 5)
          break;
        var u3 = t3.readCode(e3, a4, 5);
        if (a4 += 5, 0 === u3) {
          if (r2 - a4 < 11)
            break;
          u3 = t3.readCode(e3, a4, 11) + 31, a4 += 11;
        }
        for (var s4 = 0; s4 < u3; s4++) {
          if (r2 - a4 < 8) {
            a4 = r2;
            break;
          }
          var c7 = t3.readCode(e3, a4, 8);
          i3 += F.castAsNonUtf8Char(c7), a4 += 8;
        }
        o2 = n2;
      } else {
        var f2 = o2 === ot.DIGIT ? 4 : 5;
        if (r2 - a4 < f2)
          break;
        c7 = t3.readCode(e3, a4, f2);
        a4 += f2;
        var h4 = t3.getCharacter(o2, c7);
        h4.startsWith("CTRL_") ? (n2 = o2, o2 = t3.getTable(h4.charAt(5)), "L" === h4.charAt(6) && (n2 = o2)) : (i3 += h4, o2 = n2);
      }
    return i3;
  }, t3.getTable = function(t4) {
    switch (t4) {
      case "L":
        return ot.LOWER;
      case "P":
        return ot.PUNCT;
      case "M":
        return ot.MIXED;
      case "D":
        return ot.DIGIT;
      case "B":
        return ot.BINARY;
      default:
        return ot.UPPER;
    }
  }, t3.getCharacter = function(e3, r2) {
    switch (e3) {
      case ot.UPPER:
        return t3.UPPER_TABLE[r2];
      case ot.LOWER:
        return t3.LOWER_TABLE[r2];
      case ot.MIXED:
        return t3.MIXED_TABLE[r2];
      case ot.PUNCT:
        return t3.PUNCT_TABLE[r2];
      case ot.DIGIT:
        return t3.DIGIT_TABLE[r2];
      default:
        throw new yt("Bad table");
    }
  }, t3.prototype.correctBits = function(e3) {
    var r2, n2;
    this.ddata.getNbLayers() <= 2 ? (n2 = 6, r2 = lt.AZTEC_DATA_6) : this.ddata.getNbLayers() <= 8 ? (n2 = 8, r2 = lt.AZTEC_DATA_8) : this.ddata.getNbLayers() <= 22 ? (n2 = 10, r2 = lt.AZTEC_DATA_10) : (n2 = 12, r2 = lt.AZTEC_DATA_12);
    var o2 = this.ddata.getNbDatablocks(), i3 = e3.length / n2;
    if (i3 < o2)
      throw new R();
    for (var a4 = e3.length % n2, u3 = new Int32Array(i3), s4 = 0; s4 < i3; s4++, a4 += n2)
      u3[s4] = t3.readCode(e3, a4, n2);
    try {
      new wt(r2).decode(u3, i3 - o2);
    } catch (t4) {
      throw new R(t4);
    }
    var c7 = (1 << n2) - 1, f2 = 0;
    for (s4 = 0; s4 < o2; s4++) {
      if (0 === (d4 = u3[s4]) || d4 === c7)
        throw new R();
      1 !== d4 && d4 !== c7 - 1 || f2++;
    }
    var h4 = new Array(o2 * n2 - f2), l2 = 0;
    for (s4 = 0; s4 < o2; s4++) {
      var d4;
      if (1 === (d4 = u3[s4]) || d4 === c7 - 1)
        h4.fill(d4 > 1, l2, l2 + n2 - 1), l2 += n2 - 1;
      else
        for (var p2 = n2 - 1; p2 >= 0; --p2)
          h4[l2++] = 0 != (d4 & 1 << p2);
    }
    return h4;
  }, t3.prototype.extractBits = function(t4) {
    var e3 = this.ddata.isCompact(), r2 = this.ddata.getNbLayers(), n2 = (e3 ? 11 : 14) + 4 * r2, o2 = new Int32Array(n2), i3 = new Array(this.totalBitsInLayer(r2, e3));
    if (e3)
      for (var a4 = 0; a4 < o2.length; a4++)
        o2[a4] = a4;
    else {
      var u3 = n2 + 1 + 2 * I.truncDivision(I.truncDivision(n2, 2) - 1, 15), s4 = n2 / 2, c7 = I.truncDivision(u3, 2);
      for (a4 = 0; a4 < s4; a4++) {
        var f2 = a4 + I.truncDivision(a4, 15);
        o2[s4 - a4 - 1] = c7 - f2 - 1, o2[s4 + a4] = c7 + f2 + 1;
      }
    }
    a4 = 0;
    for (var h4 = 0; a4 < r2; a4++) {
      for (var l2 = 4 * (r2 - a4) + (e3 ? 9 : 12), d4 = 2 * a4, p2 = n2 - 1 - d4, g2 = 0; g2 < l2; g2++)
        for (var y4 = 2 * g2, w3 = 0; w3 < 2; w3++)
          i3[h4 + y4 + w3] = t4.get(o2[d4 + w3], o2[d4 + g2]), i3[h4 + 2 * l2 + y4 + w3] = t4.get(o2[d4 + g2], o2[p2 - w3]), i3[h4 + 4 * l2 + y4 + w3] = t4.get(o2[p2 - w3], o2[p2 - g2]), i3[h4 + 6 * l2 + y4 + w3] = t4.get(o2[p2 - g2], o2[d4 + w3]);
      h4 += 8 * l2;
    }
    return i3;
  }, t3.readCode = function(t4, e3, r2) {
    for (var n2 = 0, o2 = e3; o2 < e3 + r2; o2++)
      n2 <<= 1, t4[o2] && (n2 |= 1);
    return n2;
  }, t3.readByte = function(e3, r2) {
    var n2 = e3.length - r2;
    return n2 >= 8 ? t3.readCode(e3, r2, 8) : t3.readCode(e3, r2, n2) << 8 - n2;
  }, t3.convertBoolArrayToByteArray = function(e3) {
    for (var r2 = new Uint8Array((e3.length + 7) / 8), n2 = 0; n2 < r2.length; n2++)
      r2[n2] = t3.readByte(e3, 8 * n2);
    return r2;
  }, t3.prototype.totalBitsInLayer = function(t4, e3) {
    return ((e3 ? 88 : 112) + 16 * t4) * t4;
  }, t3.UPPER_TABLE = ["CTRL_PS", " ", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "CTRL_LL", "CTRL_ML", "CTRL_DL", "CTRL_BS"], t3.LOWER_TABLE = ["CTRL_PS", " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "CTRL_US", "CTRL_ML", "CTRL_DL", "CTRL_BS"], t3.MIXED_TABLE = ["CTRL_PS", " ", "\\1", "\\2", "\\3", "\\4", "\\5", "\\6", "\\7", "\b", "	", "\n", "\\13", "\f", "\r", "\\33", "\\34", "\\35", "\\36", "\\37", "@", "\\", "^", "_", "`", "|", "~", "\\177", "CTRL_LL", "CTRL_UL", "CTRL_PL", "CTRL_BS"], t3.PUNCT_TABLE = ["", "\r", "\r\n", ". ", ", ", ": ", "!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "[", "]", "{", "}", "CTRL_UL"], t3.DIGIT_TABLE = ["CTRL_PS", " ", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ",", ".", "CTRL_UL", "CTRL_US"], t3;
}(), vt = function() {
  function t3() {
  }
  return t3.round = function(t4) {
    return NaN === t4 ? 0 : t4 <= Number.MIN_SAFE_INTEGER ? Number.MIN_SAFE_INTEGER : t4 >= Number.MAX_SAFE_INTEGER ? Number.MAX_SAFE_INTEGER : t4 + (t4 < 0 ? -0.5 : 0.5) | 0;
  }, t3.distance = function(t4, e3, r2, n2) {
    var o2 = t4 - r2, i3 = e3 - n2;
    return Math.sqrt(o2 * o2 + i3 * i3);
  }, t3.sum = function(t4) {
    for (var e3 = 0, r2 = 0, n2 = t4.length; r2 !== n2; r2++) {
      e3 += t4[r2];
    }
    return e3;
  }, t3;
}(), mt = function() {
  function t3() {
  }
  return t3.floatToIntBits = function(t4) {
    return t4;
  }, t3.MAX_VALUE = Number.MAX_SAFE_INTEGER, t3;
}(), At = function() {
  function t3(t4, e3) {
    this.x = t4, this.y = e3;
  }
  return t3.prototype.getX = function() {
    return this.x;
  }, t3.prototype.getY = function() {
    return this.y;
  }, t3.prototype.equals = function(e3) {
    if (e3 instanceof t3) {
      var r2 = e3;
      return this.x === r2.x && this.y === r2.y;
    }
    return false;
  }, t3.prototype.hashCode = function() {
    return 31 * mt.floatToIntBits(this.x) + mt.floatToIntBits(this.y);
  }, t3.prototype.toString = function() {
    return "(" + this.x + "," + this.y + ")";
  }, t3.orderBestPatterns = function(t4) {
    var e3, r2, n2, o2 = this.distance(t4[0], t4[1]), i3 = this.distance(t4[1], t4[2]), a4 = this.distance(t4[0], t4[2]);
    if (i3 >= o2 && i3 >= a4 ? (r2 = t4[0], e3 = t4[1], n2 = t4[2]) : a4 >= i3 && a4 >= o2 ? (r2 = t4[1], e3 = t4[0], n2 = t4[2]) : (r2 = t4[2], e3 = t4[0], n2 = t4[1]), this.crossProductZ(e3, r2, n2) < 0) {
      var u3 = e3;
      e3 = n2, n2 = u3;
    }
    t4[0] = e3, t4[1] = r2, t4[2] = n2;
  }, t3.distance = function(t4, e3) {
    return vt.distance(t4.x, t4.y, e3.x, e3.y);
  }, t3.crossProductZ = function(t4, e3, r2) {
    var n2 = e3.x, o2 = e3.y;
    return (r2.x - n2) * (t4.y - o2) - (r2.y - o2) * (t4.x - n2);
  }, t3;
}(), Et = function() {
  function t3(t4, e3) {
    this.bits = t4, this.points = e3;
  }
  return t3.prototype.getBits = function() {
    return this.bits;
  }, t3.prototype.getPoints = function() {
    return this.points;
  }, t3;
}(), Ct = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), It = function(t3) {
  function e3(e4, r2, n2, o2, i3) {
    var a4 = t3.call(this, e4, r2) || this;
    return a4.compact = n2, a4.nbDatablocks = o2, a4.nbLayers = i3, a4;
  }
  return Ct(e3, t3), e3.prototype.getNbLayers = function() {
    return this.nbLayers;
  }, e3.prototype.getNbDatablocks = function() {
    return this.nbDatablocks;
  }, e3.prototype.isCompact = function() {
    return this.compact;
  }, e3;
}(Et), St = function() {
  function t3(e3, r2, n2, o2) {
    this.image = e3, this.height = e3.getHeight(), this.width = e3.getWidth(), null == r2 && (r2 = t3.INIT_SIZE), null == n2 && (n2 = e3.getWidth() / 2 | 0), null == o2 && (o2 = e3.getHeight() / 2 | 0);
    var i3 = r2 / 2 | 0;
    if (this.leftInit = n2 - i3, this.rightInit = n2 + i3, this.upInit = o2 - i3, this.downInit = o2 + i3, this.upInit < 0 || this.leftInit < 0 || this.downInit >= this.height || this.rightInit >= this.width)
      throw new U();
  }
  return t3.prototype.detect = function() {
    for (var t4 = this.leftInit, e3 = this.rightInit, r2 = this.upInit, n2 = this.downInit, o2 = false, i3 = true, a4 = false, u3 = false, s4 = false, c7 = false, f2 = false, h4 = this.width, l2 = this.height; i3; ) {
      i3 = false;
      for (var d4 = true; (d4 || !u3) && e3 < h4; )
        (d4 = this.containsBlackPoint(r2, n2, e3, false)) ? (e3++, i3 = true, u3 = true) : u3 || e3++;
      if (e3 >= h4) {
        o2 = true;
        break;
      }
      for (var p2 = true; (p2 || !s4) && n2 < l2; )
        (p2 = this.containsBlackPoint(t4, e3, n2, true)) ? (n2++, i3 = true, s4 = true) : s4 || n2++;
      if (n2 >= l2) {
        o2 = true;
        break;
      }
      for (var g2 = true; (g2 || !c7) && t4 >= 0; )
        (g2 = this.containsBlackPoint(r2, n2, t4, false)) ? (t4--, i3 = true, c7 = true) : c7 || t4--;
      if (t4 < 0) {
        o2 = true;
        break;
      }
      for (var y4 = true; (y4 || !f2) && r2 >= 0; )
        (y4 = this.containsBlackPoint(t4, e3, r2, true)) ? (r2--, i3 = true, f2 = true) : f2 || r2--;
      if (r2 < 0) {
        o2 = true;
        break;
      }
      i3 && (a4 = true);
    }
    if (!o2 && a4) {
      for (var w3 = e3 - t4, _2 = null, v2 = 1; null === _2 && v2 < w3; v2++)
        _2 = this.getBlackPointOnSegment(t4, n2 - v2, t4 + v2, n2);
      if (null == _2)
        throw new U();
      var m4 = null;
      for (v2 = 1; null === m4 && v2 < w3; v2++)
        m4 = this.getBlackPointOnSegment(t4, r2 + v2, t4 + v2, r2);
      if (null == m4)
        throw new U();
      var A2 = null;
      for (v2 = 1; null === A2 && v2 < w3; v2++)
        A2 = this.getBlackPointOnSegment(e3, r2 + v2, e3 - v2, r2);
      if (null == A2)
        throw new U();
      var E3 = null;
      for (v2 = 1; null === E3 && v2 < w3; v2++)
        E3 = this.getBlackPointOnSegment(e3, n2 - v2, e3 - v2, n2);
      if (null == E3)
        throw new U();
      return this.centerEdges(E3, _2, A2, m4);
    }
    throw new U();
  }, t3.prototype.getBlackPointOnSegment = function(t4, e3, r2, n2) {
    for (var o2 = vt.round(vt.distance(t4, e3, r2, n2)), i3 = (r2 - t4) / o2, a4 = (n2 - e3) / o2, u3 = this.image, s4 = 0; s4 < o2; s4++) {
      var c7 = vt.round(t4 + s4 * i3), f2 = vt.round(e3 + s4 * a4);
      if (u3.get(c7, f2))
        return new At(c7, f2);
    }
    return null;
  }, t3.prototype.centerEdges = function(e3, r2, n2, o2) {
    var i3 = e3.getX(), a4 = e3.getY(), u3 = r2.getX(), s4 = r2.getY(), c7 = n2.getX(), f2 = n2.getY(), h4 = o2.getX(), l2 = o2.getY(), d4 = t3.CORR;
    return i3 < this.width / 2 ? [new At(h4 - d4, l2 + d4), new At(u3 + d4, s4 + d4), new At(c7 - d4, f2 - d4), new At(i3 + d4, a4 - d4)] : [new At(h4 + d4, l2 + d4), new At(u3 + d4, s4 - d4), new At(c7 - d4, f2 + d4), new At(i3 - d4, a4 - d4)];
  }, t3.prototype.containsBlackPoint = function(t4, e3, r2, n2) {
    var o2 = this.image;
    if (n2) {
      for (var i3 = t4; i3 <= e3; i3++)
        if (o2.get(i3, r2))
          return true;
    } else
      for (var a4 = t4; a4 <= e3; a4++)
        if (o2.get(r2, a4))
          return true;
    return false;
  }, t3.INIT_SIZE = 10, t3.CORR = 1, t3;
}(), Ot = function() {
  function t3() {
  }
  return t3.checkAndNudgePoints = function(t4, e3) {
    for (var r2 = t4.getWidth(), n2 = t4.getHeight(), o2 = true, i3 = 0; i3 < e3.length && o2; i3 += 2) {
      var a4 = Math.floor(e3[i3]), u3 = Math.floor(e3[i3 + 1]);
      if (a4 < -1 || a4 > r2 || u3 < -1 || u3 > n2)
        throw new U();
      o2 = false, -1 === a4 ? (e3[i3] = 0, o2 = true) : a4 === r2 && (e3[i3] = r2 - 1, o2 = true), -1 === u3 ? (e3[i3 + 1] = 0, o2 = true) : u3 === n2 && (e3[i3 + 1] = n2 - 1, o2 = true);
    }
    o2 = true;
    for (i3 = e3.length - 2; i3 >= 0 && o2; i3 -= 2) {
      a4 = Math.floor(e3[i3]), u3 = Math.floor(e3[i3 + 1]);
      if (a4 < -1 || a4 > r2 || u3 < -1 || u3 > n2)
        throw new U();
      o2 = false, -1 === a4 ? (e3[i3] = 0, o2 = true) : a4 === r2 && (e3[i3] = r2 - 1, o2 = true), -1 === u3 ? (e3[i3 + 1] = 0, o2 = true) : u3 === n2 && (e3[i3 + 1] = n2 - 1, o2 = true);
    }
  }, t3;
}(), Tt = function() {
  function t3(t4, e3, r2, n2, o2, i3, a4, u3, s4) {
    this.a11 = t4, this.a21 = e3, this.a31 = r2, this.a12 = n2, this.a22 = o2, this.a32 = i3, this.a13 = a4, this.a23 = u3, this.a33 = s4;
  }
  return t3.quadrilateralToQuadrilateral = function(e3, r2, n2, o2, i3, a4, u3, s4, c7, f2, h4, l2, d4, p2, g2, y4) {
    var w3 = t3.quadrilateralToSquare(e3, r2, n2, o2, i3, a4, u3, s4);
    return t3.squareToQuadrilateral(c7, f2, h4, l2, d4, p2, g2, y4).times(w3);
  }, t3.prototype.transformPoints = function(t4) {
    for (var e3 = t4.length, r2 = this.a11, n2 = this.a12, o2 = this.a13, i3 = this.a21, a4 = this.a22, u3 = this.a23, s4 = this.a31, c7 = this.a32, f2 = this.a33, h4 = 0; h4 < e3; h4 += 2) {
      var l2 = t4[h4], d4 = t4[h4 + 1], p2 = o2 * l2 + u3 * d4 + f2;
      t4[h4] = (r2 * l2 + i3 * d4 + s4) / p2, t4[h4 + 1] = (n2 * l2 + a4 * d4 + c7) / p2;
    }
  }, t3.prototype.transformPointsWithValues = function(t4, e3) {
    for (var r2 = this.a11, n2 = this.a12, o2 = this.a13, i3 = this.a21, a4 = this.a22, u3 = this.a23, s4 = this.a31, c7 = this.a32, f2 = this.a33, h4 = t4.length, l2 = 0; l2 < h4; l2++) {
      var d4 = t4[l2], p2 = e3[l2], g2 = o2 * d4 + u3 * p2 + f2;
      t4[l2] = (r2 * d4 + i3 * p2 + s4) / g2, e3[l2] = (n2 * d4 + a4 * p2 + c7) / g2;
    }
  }, t3.squareToQuadrilateral = function(e3, r2, n2, o2, i3, a4, u3, s4) {
    var c7 = e3 - n2 + i3 - u3, f2 = r2 - o2 + a4 - s4;
    if (0 === c7 && 0 === f2)
      return new t3(n2 - e3, i3 - n2, e3, o2 - r2, a4 - o2, r2, 0, 0, 1);
    var h4 = n2 - i3, l2 = u3 - i3, d4 = o2 - a4, p2 = s4 - a4, g2 = h4 * p2 - l2 * d4, y4 = (c7 * p2 - l2 * f2) / g2, w3 = (h4 * f2 - c7 * d4) / g2;
    return new t3(n2 - e3 + y4 * n2, u3 - e3 + w3 * u3, e3, o2 - r2 + y4 * o2, s4 - r2 + w3 * s4, r2, y4, w3, 1);
  }, t3.quadrilateralToSquare = function(e3, r2, n2, o2, i3, a4, u3, s4) {
    return t3.squareToQuadrilateral(e3, r2, n2, o2, i3, a4, u3, s4).buildAdjoint();
  }, t3.prototype.buildAdjoint = function() {
    return new t3(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);
  }, t3.prototype.times = function(e3) {
    return new t3(this.a11 * e3.a11 + this.a21 * e3.a12 + this.a31 * e3.a13, this.a11 * e3.a21 + this.a21 * e3.a22 + this.a31 * e3.a23, this.a11 * e3.a31 + this.a21 * e3.a32 + this.a31 * e3.a33, this.a12 * e3.a11 + this.a22 * e3.a12 + this.a32 * e3.a13, this.a12 * e3.a21 + this.a22 * e3.a22 + this.a32 * e3.a23, this.a12 * e3.a31 + this.a22 * e3.a32 + this.a32 * e3.a33, this.a13 * e3.a11 + this.a23 * e3.a12 + this.a33 * e3.a13, this.a13 * e3.a21 + this.a23 * e3.a22 + this.a33 * e3.a23, this.a13 * e3.a31 + this.a23 * e3.a32 + this.a33 * e3.a33);
  }, t3;
}(), bt = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Rt = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return bt(e3, t3), e3.prototype.sampleGrid = function(t4, e4, r2, n2, o2, i3, a4, u3, s4, c7, f2, h4, l2, d4, p2, g2, y4, w3, _2) {
    var v2 = Tt.quadrilateralToQuadrilateral(n2, o2, i3, a4, u3, s4, c7, f2, h4, l2, d4, p2, g2, y4, w3, _2);
    return this.sampleGridWithTransform(t4, e4, r2, v2);
  }, e3.prototype.sampleGridWithTransform = function(t4, e4, r2, n2) {
    if (e4 <= 0 || r2 <= 0)
      throw new U();
    for (var o2 = new x(e4, r2), i3 = new Float32Array(2 * e4), a4 = 0; a4 < r2; a4++) {
      for (var u3 = i3.length, s4 = a4 + 0.5, c7 = 0; c7 < u3; c7 += 2)
        i3[c7] = c7 / 2 + 0.5, i3[c7 + 1] = s4;
      n2.transformPoints(i3), Ot.checkAndNudgePoints(t4, i3);
      try {
        for (c7 = 0; c7 < u3; c7 += 2)
          t4.get(Math.floor(i3[c7]), Math.floor(i3[c7 + 1])) && o2.set(c7 / 2, a4);
      } catch (t5) {
        throw new U();
      }
    }
    return o2;
  }, e3;
}(Ot), Nt = function() {
  function t3() {
  }
  return t3.setGridSampler = function(e3) {
    t3.gridSampler = e3;
  }, t3.getInstance = function() {
    return t3.gridSampler;
  }, t3.gridSampler = new Rt(), t3;
}(), Dt = function() {
  function t3(t4, e3) {
    this.x = t4, this.y = e3;
  }
  return t3.prototype.toResultPoint = function() {
    return new At(this.getX(), this.getY());
  }, t3.prototype.getX = function() {
    return this.x;
  }, t3.prototype.getY = function() {
    return this.y;
  }, t3;
}(), Pt = function() {
  function t3(t4) {
    this.EXPECTED_CORNER_BITS = new Int32Array([3808, 476, 2107, 1799]), this.image = t4;
  }
  return t3.prototype.detect = function() {
    return this.detectMirror(false);
  }, t3.prototype.detectMirror = function(t4) {
    var e3 = this.getMatrixCenter(), r2 = this.getBullsEyeCorners(e3);
    if (t4) {
      var n2 = r2[0];
      r2[0] = r2[2], r2[2] = n2;
    }
    this.extractParameters(r2);
    var o2 = this.sampleGrid(this.image, r2[this.shift % 4], r2[(this.shift + 1) % 4], r2[(this.shift + 2) % 4], r2[(this.shift + 3) % 4]), i3 = this.getMatrixCornerPoints(r2);
    return new It(o2, i3, this.compact, this.nbDataBlocks, this.nbLayers);
  }, t3.prototype.extractParameters = function(t4) {
    if (!(this.isValidPoint(t4[0]) && this.isValidPoint(t4[1]) && this.isValidPoint(t4[2]) && this.isValidPoint(t4[3])))
      throw new U();
    var e3 = 2 * this.nbCenterLayers, r2 = new Int32Array([this.sampleLine(t4[0], t4[1], e3), this.sampleLine(t4[1], t4[2], e3), this.sampleLine(t4[2], t4[3], e3), this.sampleLine(t4[3], t4[0], e3)]);
    this.shift = this.getRotation(r2, e3);
    for (var n2 = 0, o2 = 0; o2 < 4; o2++) {
      var i3 = r2[(this.shift + o2) % 4];
      this.compact ? (n2 <<= 7, n2 += i3 >> 1 & 127) : (n2 <<= 10, n2 += (i3 >> 2 & 992) + (i3 >> 1 & 31));
    }
    var a4 = this.getCorrectedParameterData(n2, this.compact);
    this.compact ? (this.nbLayers = 1 + (a4 >> 6), this.nbDataBlocks = 1 + (63 & a4)) : (this.nbLayers = 1 + (a4 >> 11), this.nbDataBlocks = 1 + (2047 & a4));
  }, t3.prototype.getRotation = function(t4, e3) {
    var r2 = 0;
    t4.forEach(function(t5, n3, o2) {
      r2 = (r2 << 3) + ((t5 >> e3 - 2 << 1) + (1 & t5));
    }), r2 = ((1 & r2) << 11) + (r2 >> 1);
    for (var n2 = 0; n2 < 4; n2++)
      if (I.bitCount(r2 ^ this.EXPECTED_CORNER_BITS[n2]) <= 2)
        return n2;
    throw new U();
  }, t3.prototype.getCorrectedParameterData = function(t4, e3) {
    var r2, n2;
    e3 ? (r2 = 7, n2 = 2) : (r2 = 10, n2 = 4);
    for (var o2 = r2 - n2, i3 = new Int32Array(r2), a4 = r2 - 1; a4 >= 0; --a4)
      i3[a4] = 15 & t4, t4 >>= 4;
    try {
      new wt(lt.AZTEC_PARAM).decode(i3, o2);
    } catch (t5) {
      throw new U();
    }
    var u3 = 0;
    for (a4 = 0; a4 < n2; a4++)
      u3 = (u3 << 4) + i3[a4];
    return u3;
  }, t3.prototype.getBullsEyeCorners = function(t4) {
    var e3 = t4, r2 = t4, n2 = t4, o2 = t4, i3 = true;
    for (this.nbCenterLayers = 1; this.nbCenterLayers < 9; this.nbCenterLayers++) {
      var a4 = this.getFirstDifferent(e3, i3, 1, -1), u3 = this.getFirstDifferent(r2, i3, 1, 1), s4 = this.getFirstDifferent(n2, i3, -1, 1), c7 = this.getFirstDifferent(o2, i3, -1, -1);
      if (this.nbCenterLayers > 2) {
        var f2 = this.distancePoint(c7, a4) * this.nbCenterLayers / (this.distancePoint(o2, e3) * (this.nbCenterLayers + 2));
        if (f2 < 0.75 || f2 > 1.25 || !this.isWhiteOrBlackRectangle(a4, u3, s4, c7))
          break;
      }
      e3 = a4, r2 = u3, n2 = s4, o2 = c7, i3 = !i3;
    }
    if (5 !== this.nbCenterLayers && 7 !== this.nbCenterLayers)
      throw new U();
    this.compact = 5 === this.nbCenterLayers;
    var h4 = new At(e3.getX() + 0.5, e3.getY() - 0.5), l2 = new At(r2.getX() + 0.5, r2.getY() + 0.5), d4 = new At(n2.getX() - 0.5, n2.getY() + 0.5), p2 = new At(o2.getX() - 0.5, o2.getY() - 0.5);
    return this.expandSquare([h4, l2, d4, p2], 2 * this.nbCenterLayers - 3, 2 * this.nbCenterLayers);
  }, t3.prototype.getMatrixCenter = function() {
    var t4, e3, r2, n2;
    try {
      t4 = (s4 = new St(this.image).detect())[0], e3 = s4[1], r2 = s4[2], n2 = s4[3];
    } catch (a5) {
      var o2 = this.image.getWidth() / 2, i3 = this.image.getHeight() / 2;
      t4 = this.getFirstDifferent(new Dt(o2 + 7, i3 - 7), false, 1, -1).toResultPoint(), e3 = this.getFirstDifferent(new Dt(o2 + 7, i3 + 7), false, 1, 1).toResultPoint(), r2 = this.getFirstDifferent(new Dt(o2 - 7, i3 + 7), false, -1, 1).toResultPoint(), n2 = this.getFirstDifferent(new Dt(o2 - 7, i3 - 7), false, -1, -1).toResultPoint();
    }
    var a4 = vt.round((t4.getX() + n2.getX() + e3.getX() + r2.getX()) / 4), u3 = vt.round((t4.getY() + n2.getY() + e3.getY() + r2.getY()) / 4);
    try {
      var s4;
      t4 = (s4 = new St(this.image, 15, a4, u3).detect())[0], e3 = s4[1], r2 = s4[2], n2 = s4[3];
    } catch (o3) {
      t4 = this.getFirstDifferent(new Dt(a4 + 7, u3 - 7), false, 1, -1).toResultPoint(), e3 = this.getFirstDifferent(new Dt(a4 + 7, u3 + 7), false, 1, 1).toResultPoint(), r2 = this.getFirstDifferent(new Dt(a4 - 7, u3 + 7), false, -1, 1).toResultPoint(), n2 = this.getFirstDifferent(new Dt(a4 - 7, u3 - 7), false, -1, -1).toResultPoint();
    }
    return a4 = vt.round((t4.getX() + n2.getX() + e3.getX() + r2.getX()) / 4), u3 = vt.round((t4.getY() + n2.getY() + e3.getY() + r2.getY()) / 4), new Dt(a4, u3);
  }, t3.prototype.getMatrixCornerPoints = function(t4) {
    return this.expandSquare(t4, 2 * this.nbCenterLayers, this.getDimension());
  }, t3.prototype.sampleGrid = function(t4, e3, r2, n2, o2) {
    var i3 = Nt.getInstance(), a4 = this.getDimension(), u3 = a4 / 2 - this.nbCenterLayers, s4 = a4 / 2 + this.nbCenterLayers;
    return i3.sampleGrid(t4, a4, a4, u3, u3, s4, u3, s4, s4, u3, s4, e3.getX(), e3.getY(), r2.getX(), r2.getY(), n2.getX(), n2.getY(), o2.getX(), o2.getY());
  }, t3.prototype.sampleLine = function(t4, e3, r2) {
    for (var n2 = 0, o2 = this.distanceResultPoint(t4, e3), i3 = o2 / r2, a4 = t4.getX(), u3 = t4.getY(), s4 = i3 * (e3.getX() - t4.getX()) / o2, c7 = i3 * (e3.getY() - t4.getY()) / o2, f2 = 0; f2 < r2; f2++)
      this.image.get(vt.round(a4 + f2 * s4), vt.round(u3 + f2 * c7)) && (n2 |= 1 << r2 - f2 - 1);
    return n2;
  }, t3.prototype.isWhiteOrBlackRectangle = function(t4, e3, r2, n2) {
    t4 = new Dt(t4.getX() - 3, t4.getY() + 3), e3 = new Dt(e3.getX() - 3, e3.getY() - 3), r2 = new Dt(r2.getX() + 3, r2.getY() - 3), n2 = new Dt(n2.getX() + 3, n2.getY() + 3);
    var o2 = this.getColor(n2, t4);
    if (0 === o2)
      return false;
    var i3 = this.getColor(t4, e3);
    return i3 === o2 && ((i3 = this.getColor(e3, r2)) === o2 && (i3 = this.getColor(r2, n2)) === o2);
  }, t3.prototype.getColor = function(t4, e3) {
    for (var r2 = this.distancePoint(t4, e3), n2 = (e3.getX() - t4.getX()) / r2, o2 = (e3.getY() - t4.getY()) / r2, i3 = 0, a4 = t4.getX(), u3 = t4.getY(), s4 = this.image.get(t4.getX(), t4.getY()), c7 = Math.ceil(r2), f2 = 0; f2 < c7; f2++)
      a4 += n2, u3 += o2, this.image.get(vt.round(a4), vt.round(u3)) !== s4 && i3++;
    var h4 = i3 / r2;
    return h4 > 0.1 && h4 < 0.9 ? 0 : h4 <= 0.1 === s4 ? 1 : -1;
  }, t3.prototype.getFirstDifferent = function(t4, e3, r2, n2) {
    for (var o2 = t4.getX() + r2, i3 = t4.getY() + n2; this.isValid(o2, i3) && this.image.get(o2, i3) === e3; )
      o2 += r2, i3 += n2;
    for (o2 -= r2, i3 -= n2; this.isValid(o2, i3) && this.image.get(o2, i3) === e3; )
      o2 += r2;
    for (o2 -= r2; this.isValid(o2, i3) && this.image.get(o2, i3) === e3; )
      i3 += n2;
    return new Dt(o2, i3 -= n2);
  }, t3.prototype.expandSquare = function(t4, e3, r2) {
    var n2 = r2 / (2 * e3), o2 = t4[0].getX() - t4[2].getX(), i3 = t4[0].getY() - t4[2].getY(), a4 = (t4[0].getX() + t4[2].getX()) / 2, u3 = (t4[0].getY() + t4[2].getY()) / 2, s4 = new At(a4 + n2 * o2, u3 + n2 * i3), c7 = new At(a4 - n2 * o2, u3 - n2 * i3);
    return o2 = t4[1].getX() - t4[3].getX(), i3 = t4[1].getY() - t4[3].getY(), a4 = (t4[1].getX() + t4[3].getX()) / 2, u3 = (t4[1].getY() + t4[3].getY()) / 2, [s4, new At(a4 + n2 * o2, u3 + n2 * i3), c7, new At(a4 - n2 * o2, u3 - n2 * i3)];
  }, t3.prototype.isValid = function(t4, e3) {
    return t4 >= 0 && t4 < this.image.getWidth() && e3 > 0 && e3 < this.image.getHeight();
  }, t3.prototype.isValidPoint = function(t4) {
    var e3 = vt.round(t4.getX()), r2 = vt.round(t4.getY());
    return this.isValid(e3, r2);
  }, t3.prototype.distancePoint = function(t4, e3) {
    return vt.distance(t4.getX(), t4.getY(), e3.getX(), e3.getY());
  }, t3.prototype.distanceResultPoint = function(t4, e3) {
    return vt.distance(t4.getX(), t4.getY(), e3.getX(), e3.getY());
  }, t3.prototype.getDimension = function() {
    return this.compact ? 4 * this.nbLayers + 11 : this.nbLayers <= 4 ? 4 * this.nbLayers + 15 : 4 * this.nbLayers + 2 * (I.truncDivision(this.nbLayers - 4, 8) + 1) + 15;
  }, t3;
}(), Mt = function() {
  function t3() {
  }
  return t3.prototype.decode = function(t4, e3) {
    void 0 === e3 && (e3 = null);
    var r2 = null, n2 = new Pt(t4.getBlackMatrix()), o2 = null, i3 = null;
    try {
      o2 = (a4 = n2.detectMirror(false)).getPoints(), this.reportFoundResultPoints(e3, o2), i3 = new _t().decode(a4);
    } catch (t5) {
      r2 = t5;
    }
    if (null == i3)
      try {
        var a4;
        o2 = (a4 = n2.detectMirror(true)).getPoints(), this.reportFoundResultPoints(e3, o2), i3 = new _t().decode(a4);
      } catch (t5) {
        if (null != r2)
          throw r2;
        throw t5;
      }
    var u3 = new et(i3.getText(), i3.getRawBytes(), i3.getNumBits(), o2, nt.AZTEC, w$2.currentTimeMillis()), s4 = i3.getByteSegments();
    null != s4 && u3.putMetadata(it.BYTE_SEGMENTS, s4);
    var c7 = i3.getECLevel();
    return null != c7 && u3.putMetadata(it.ERROR_CORRECTION_LEVEL, c7), u3;
  }, t3.prototype.reportFoundResultPoints = function(t4, e3) {
    if (null != t4) {
      var r2 = t4.get(T.NEED_RESULT_POINT_CALLBACK);
      null != r2 && e3.forEach(function(t5, e4, n2) {
        r2.foundPossibleResultPoint(t5);
      });
    }
  }, t3.prototype.reset = function() {
  }, t3;
}(), Bt = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4) {
    return void 0 === e4 && (e4 = 500), t3.call(this, new Mt(), e4) || this;
  }
  Bt(e3, t3);
}(tt);
var Lt = function() {
  function t3() {
  }
  return t3.prototype.decode = function(t4, e3) {
    try {
      return this.doDecode(t4, e3);
    } catch (c7) {
      if (e3 && true === e3.get(T.TRY_HARDER) && t4.isRotateSupported()) {
        var r2 = t4.rotateCounterClockwise(), n2 = this.doDecode(r2, e3), o2 = n2.getResultMetadata(), i3 = 270;
        null !== o2 && true === o2.get(it.ORIENTATION) && (i3 += o2.get(it.ORIENTATION) % 360), n2.putMetadata(it.ORIENTATION, i3);
        var a4 = n2.getResultPoints();
        if (null !== a4)
          for (var u3 = r2.getHeight(), s4 = 0; s4 < a4.length; s4++)
            a4[s4] = new At(u3 - a4[s4].getY() - 1, a4[s4].getX());
        return n2;
      }
      throw new U();
    }
  }, t3.prototype.reset = function() {
  }, t3.prototype.doDecode = function(t4, e3) {
    var r2, n2 = t4.getWidth(), o2 = t4.getHeight(), i3 = new S(n2), a4 = e3 && true === e3.get(T.TRY_HARDER), u3 = Math.max(1, o2 >> (a4 ? 8 : 5));
    r2 = a4 ? o2 : 15;
    for (var s4 = Math.trunc(o2 / 2), c7 = 0; c7 < r2; c7++) {
      var f2 = Math.trunc((c7 + 1) / 2), h4 = s4 + u3 * (0 == (1 & c7) ? f2 : -f2);
      if (h4 < 0 || h4 >= o2)
        break;
      try {
        i3 = t4.getBlackRow(h4, i3);
      } catch (t5) {
        continue;
      }
      for (var l2 = function(t5) {
        if (1 === t5 && (i3.reverse(), e3 && true === e3.get(T.NEED_RESULT_POINT_CALLBACK))) {
          var r3 = /* @__PURE__ */ new Map();
          e3.forEach(function(t6, e4) {
            return r3.set(e4, t6);
          }), r3.delete(T.NEED_RESULT_POINT_CALLBACK), e3 = r3;
        }
        try {
          var o3 = d4.decodeRow(h4, i3, e3);
          if (1 === t5) {
            o3.putMetadata(it.ORIENTATION, 180);
            var a5 = o3.getResultPoints();
            null !== a5 && (a5[0] = new At(n2 - a5[0].getX() - 1, a5[0].getY()), a5[1] = new At(n2 - a5[1].getX() - 1, a5[1].getY()));
          }
          return { value: o3 };
        } catch (t6) {
        }
      }, d4 = this, p2 = 0; p2 < 2; p2++) {
        var g2 = l2(p2);
        if ("object" == typeof g2)
          return g2.value;
      }
    }
    throw new U();
  }, t3.recordPattern = function(t4, e3, r2) {
    for (var n2 = r2.length, o2 = 0; o2 < n2; o2++)
      r2[o2] = 0;
    var i3 = t4.getSize();
    if (e3 >= i3)
      throw new U();
    for (var a4 = !t4.get(e3), u3 = 0, s4 = e3; s4 < i3; ) {
      if (t4.get(s4) !== a4)
        r2[u3]++;
      else {
        if (++u3 === n2)
          break;
        r2[u3] = 1, a4 = !a4;
      }
      s4++;
    }
    if (u3 !== n2 && (u3 !== n2 - 1 || s4 !== i3))
      throw new U();
  }, t3.recordPatternInReverse = function(e3, r2, n2) {
    for (var o2 = n2.length, i3 = e3.get(r2); r2 > 0 && o2 >= 0; )
      e3.get(--r2) !== i3 && (o2--, i3 = !i3);
    if (o2 >= 0)
      throw new U();
    t3.recordPattern(e3, r2 + 1, n2);
  }, t3.patternMatchVariance = function(t4, e3, r2) {
    for (var n2 = t4.length, o2 = 0, i3 = 0, a4 = 0; a4 < n2; a4++)
      o2 += t4[a4], i3 += e3[a4];
    if (o2 < i3)
      return Number.POSITIVE_INFINITY;
    var u3 = o2 / i3;
    r2 *= u3;
    for (var s4 = 0, c7 = 0; c7 < n2; c7++) {
      var f2 = t4[c7], h4 = e3[c7] * u3, l2 = f2 > h4 ? f2 - h4 : h4 - f2;
      if (l2 > r2)
        return Number.POSITIVE_INFINITY;
      s4 += l2;
    }
    return s4 / o2;
  }, t3;
}(), Ft = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), kt = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return Ft(e3, t3), e3.findStartPattern = function(t4) {
    for (var r2 = t4.getSize(), n2 = t4.getNextSet(0), o2 = 0, i3 = Int32Array.from([0, 0, 0, 0, 0, 0]), a4 = n2, u3 = false, s4 = n2; s4 < r2; s4++)
      if (t4.get(s4) !== u3)
        i3[o2]++;
      else {
        if (5 === o2) {
          for (var c7 = e3.MAX_AVG_VARIANCE, f2 = -1, h4 = e3.CODE_START_A; h4 <= e3.CODE_START_C; h4++) {
            var l2 = Lt.patternMatchVariance(i3, e3.CODE_PATTERNS[h4], e3.MAX_INDIVIDUAL_VARIANCE);
            l2 < c7 && (c7 = l2, f2 = h4);
          }
          if (f2 >= 0 && t4.isRange(Math.max(0, a4 - (s4 - a4) / 2), a4, false))
            return Int32Array.from([a4, s4, f2]);
          a4 += i3[0] + i3[1], (i3 = i3.slice(2, i3.length - 1))[o2 - 1] = 0, i3[o2] = 0, o2--;
        } else
          o2++;
        i3[o2] = 1, u3 = !u3;
      }
    throw new U();
  }, e3.decodeCode = function(t4, r2, n2) {
    Lt.recordPattern(t4, n2, r2);
    for (var o2 = e3.MAX_AVG_VARIANCE, i3 = -1, a4 = 0; a4 < e3.CODE_PATTERNS.length; a4++) {
      var u3 = e3.CODE_PATTERNS[a4], s4 = this.patternMatchVariance(r2, u3, e3.MAX_INDIVIDUAL_VARIANCE);
      s4 < o2 && (o2 = s4, i3 = a4);
    }
    if (i3 >= 0)
      return i3;
    throw new U();
  }, e3.prototype.decodeRow = function(t4, r2, n2) {
    var o2, i3 = n2 && true === n2.get(T.ASSUME_GS1), a4 = e3.findStartPattern(r2), u3 = a4[2], s4 = 0, c7 = new Uint8Array(20);
    switch (c7[s4++] = u3, u3) {
      case e3.CODE_START_A:
        o2 = e3.CODE_CODE_A;
        break;
      case e3.CODE_START_B:
        o2 = e3.CODE_CODE_B;
        break;
      case e3.CODE_START_C:
        o2 = e3.CODE_CODE_C;
        break;
      default:
        throw new R();
    }
    for (var f2 = false, h4 = false, l2 = "", d4 = a4[0], p2 = a4[1], y4 = Int32Array.from([0, 0, 0, 0, 0, 0]), w3 = 0, _2 = 0, v2 = u3, m4 = 0, A2 = true, E3 = false, C2 = false; !f2; ) {
      var I3 = h4;
      switch (h4 = false, w3 = _2, _2 = e3.decodeCode(r2, y4, p2), c7[s4++] = _2, _2 !== e3.CODE_STOP && (A2 = true), _2 !== e3.CODE_STOP && (v2 += ++m4 * _2), d4 = p2, p2 += y4.reduce(function(t5, e4) {
        return t5 + e4;
      }, 0), _2) {
        case e3.CODE_START_A:
        case e3.CODE_START_B:
        case e3.CODE_START_C:
          throw new R();
      }
      switch (o2) {
        case e3.CODE_CODE_A:
          if (_2 < 64)
            l2 += C2 === E3 ? String.fromCharCode(" ".charCodeAt(0) + _2) : String.fromCharCode(" ".charCodeAt(0) + _2 + 128), C2 = false;
          else if (_2 < 96)
            l2 += C2 === E3 ? String.fromCharCode(_2 - 64) : String.fromCharCode(_2 + 64), C2 = false;
          else
            switch (_2 !== e3.CODE_STOP && (A2 = false), _2) {
              case e3.CODE_FNC_1:
                i3 && (0 === l2.length ? l2 += "]C1" : l2 += String.fromCharCode(29));
                break;
              case e3.CODE_FNC_2:
              case e3.CODE_FNC_3:
                break;
              case e3.CODE_FNC_4_A:
                !E3 && C2 ? (E3 = true, C2 = false) : E3 && C2 ? (E3 = false, C2 = false) : C2 = true;
                break;
              case e3.CODE_SHIFT:
                h4 = true, o2 = e3.CODE_CODE_B;
                break;
              case e3.CODE_CODE_B:
                o2 = e3.CODE_CODE_B;
                break;
              case e3.CODE_CODE_C:
                o2 = e3.CODE_CODE_C;
                break;
              case e3.CODE_STOP:
                f2 = true;
            }
          break;
        case e3.CODE_CODE_B:
          if (_2 < 96)
            l2 += C2 === E3 ? String.fromCharCode(" ".charCodeAt(0) + _2) : String.fromCharCode(" ".charCodeAt(0) + _2 + 128), C2 = false;
          else
            switch (_2 !== e3.CODE_STOP && (A2 = false), _2) {
              case e3.CODE_FNC_1:
                i3 && (0 === l2.length ? l2 += "]C1" : l2 += String.fromCharCode(29));
                break;
              case e3.CODE_FNC_2:
              case e3.CODE_FNC_3:
                break;
              case e3.CODE_FNC_4_B:
                !E3 && C2 ? (E3 = true, C2 = false) : E3 && C2 ? (E3 = false, C2 = false) : C2 = true;
                break;
              case e3.CODE_SHIFT:
                h4 = true, o2 = e3.CODE_CODE_A;
                break;
              case e3.CODE_CODE_A:
                o2 = e3.CODE_CODE_A;
                break;
              case e3.CODE_CODE_C:
                o2 = e3.CODE_CODE_C;
                break;
              case e3.CODE_STOP:
                f2 = true;
            }
          break;
        case e3.CODE_CODE_C:
          if (_2 < 100)
            _2 < 10 && (l2 += "0"), l2 += _2;
          else
            switch (_2 !== e3.CODE_STOP && (A2 = false), _2) {
              case e3.CODE_FNC_1:
                i3 && (0 === l2.length ? l2 += "]C1" : l2 += String.fromCharCode(29));
                break;
              case e3.CODE_CODE_A:
                o2 = e3.CODE_CODE_A;
                break;
              case e3.CODE_CODE_B:
                o2 = e3.CODE_CODE_B;
                break;
              case e3.CODE_STOP:
                f2 = true;
            }
      }
      I3 && (o2 = o2 === e3.CODE_CODE_A ? e3.CODE_CODE_B : e3.CODE_CODE_A);
    }
    var S4 = p2 - d4;
    if (p2 = r2.getNextUnset(p2), !r2.isRange(p2, Math.min(r2.getSize(), p2 + (p2 - d4) / 2), false))
      throw new U();
    if ((v2 -= m4 * w3) % 103 !== w3)
      throw new g();
    var O3 = l2.length;
    if (0 === O3)
      throw new U();
    O3 > 0 && A2 && (l2 = o2 === e3.CODE_CODE_C ? l2.substring(0, O3 - 2) : l2.substring(0, O3 - 1));
    for (var b3 = (a4[1] + a4[0]) / 2, N2 = d4 + S4 / 2, D3 = c7.length, P2 = new Uint8Array(D3), M4 = 0; M4 < D3; M4++)
      P2[M4] = c7[M4];
    var B3 = [new At(b3, t4), new At(N2, t4)];
    return new et(l2, P2, 0, B3, nt.CODE_128, (/* @__PURE__ */ new Date()).getTime());
  }, e3.CODE_PATTERNS = [Int32Array.from([2, 1, 2, 2, 2, 2]), Int32Array.from([2, 2, 2, 1, 2, 2]), Int32Array.from([2, 2, 2, 2, 2, 1]), Int32Array.from([1, 2, 1, 2, 2, 3]), Int32Array.from([1, 2, 1, 3, 2, 2]), Int32Array.from([1, 3, 1, 2, 2, 2]), Int32Array.from([1, 2, 2, 2, 1, 3]), Int32Array.from([1, 2, 2, 3, 1, 2]), Int32Array.from([1, 3, 2, 2, 1, 2]), Int32Array.from([2, 2, 1, 2, 1, 3]), Int32Array.from([2, 2, 1, 3, 1, 2]), Int32Array.from([2, 3, 1, 2, 1, 2]), Int32Array.from([1, 1, 2, 2, 3, 2]), Int32Array.from([1, 2, 2, 1, 3, 2]), Int32Array.from([1, 2, 2, 2, 3, 1]), Int32Array.from([1, 1, 3, 2, 2, 2]), Int32Array.from([1, 2, 3, 1, 2, 2]), Int32Array.from([1, 2, 3, 2, 2, 1]), Int32Array.from([2, 2, 3, 2, 1, 1]), Int32Array.from([2, 2, 1, 1, 3, 2]), Int32Array.from([2, 2, 1, 2, 3, 1]), Int32Array.from([2, 1, 3, 2, 1, 2]), Int32Array.from([2, 2, 3, 1, 1, 2]), Int32Array.from([3, 1, 2, 1, 3, 1]), Int32Array.from([3, 1, 1, 2, 2, 2]), Int32Array.from([3, 2, 1, 1, 2, 2]), Int32Array.from([3, 2, 1, 2, 2, 1]), Int32Array.from([3, 1, 2, 2, 1, 2]), Int32Array.from([3, 2, 2, 1, 1, 2]), Int32Array.from([3, 2, 2, 2, 1, 1]), Int32Array.from([2, 1, 2, 1, 2, 3]), Int32Array.from([2, 1, 2, 3, 2, 1]), Int32Array.from([2, 3, 2, 1, 2, 1]), Int32Array.from([1, 1, 1, 3, 2, 3]), Int32Array.from([1, 3, 1, 1, 2, 3]), Int32Array.from([1, 3, 1, 3, 2, 1]), Int32Array.from([1, 1, 2, 3, 1, 3]), Int32Array.from([1, 3, 2, 1, 1, 3]), Int32Array.from([1, 3, 2, 3, 1, 1]), Int32Array.from([2, 1, 1, 3, 1, 3]), Int32Array.from([2, 3, 1, 1, 1, 3]), Int32Array.from([2, 3, 1, 3, 1, 1]), Int32Array.from([1, 1, 2, 1, 3, 3]), Int32Array.from([1, 1, 2, 3, 3, 1]), Int32Array.from([1, 3, 2, 1, 3, 1]), Int32Array.from([1, 1, 3, 1, 2, 3]), Int32Array.from([1, 1, 3, 3, 2, 1]), Int32Array.from([1, 3, 3, 1, 2, 1]), Int32Array.from([3, 1, 3, 1, 2, 1]), Int32Array.from([2, 1, 1, 3, 3, 1]), Int32Array.from([2, 3, 1, 1, 3, 1]), Int32Array.from([2, 1, 3, 1, 1, 3]), Int32Array.from([2, 1, 3, 3, 1, 1]), Int32Array.from([2, 1, 3, 1, 3, 1]), Int32Array.from([3, 1, 1, 1, 2, 3]), Int32Array.from([3, 1, 1, 3, 2, 1]), Int32Array.from([3, 3, 1, 1, 2, 1]), Int32Array.from([3, 1, 2, 1, 1, 3]), Int32Array.from([3, 1, 2, 3, 1, 1]), Int32Array.from([3, 3, 2, 1, 1, 1]), Int32Array.from([3, 1, 4, 1, 1, 1]), Int32Array.from([2, 2, 1, 4, 1, 1]), Int32Array.from([4, 3, 1, 1, 1, 1]), Int32Array.from([1, 1, 1, 2, 2, 4]), Int32Array.from([1, 1, 1, 4, 2, 2]), Int32Array.from([1, 2, 1, 1, 2, 4]), Int32Array.from([1, 2, 1, 4, 2, 1]), Int32Array.from([1, 4, 1, 1, 2, 2]), Int32Array.from([1, 4, 1, 2, 2, 1]), Int32Array.from([1, 1, 2, 2, 1, 4]), Int32Array.from([1, 1, 2, 4, 1, 2]), Int32Array.from([1, 2, 2, 1, 1, 4]), Int32Array.from([1, 2, 2, 4, 1, 1]), Int32Array.from([1, 4, 2, 1, 1, 2]), Int32Array.from([1, 4, 2, 2, 1, 1]), Int32Array.from([2, 4, 1, 2, 1, 1]), Int32Array.from([2, 2, 1, 1, 1, 4]), Int32Array.from([4, 1, 3, 1, 1, 1]), Int32Array.from([2, 4, 1, 1, 1, 2]), Int32Array.from([1, 3, 4, 1, 1, 1]), Int32Array.from([1, 1, 1, 2, 4, 2]), Int32Array.from([1, 2, 1, 1, 4, 2]), Int32Array.from([1, 2, 1, 2, 4, 1]), Int32Array.from([1, 1, 4, 2, 1, 2]), Int32Array.from([1, 2, 4, 1, 1, 2]), Int32Array.from([1, 2, 4, 2, 1, 1]), Int32Array.from([4, 1, 1, 2, 1, 2]), Int32Array.from([4, 2, 1, 1, 1, 2]), Int32Array.from([4, 2, 1, 2, 1, 1]), Int32Array.from([2, 1, 2, 1, 4, 1]), Int32Array.from([2, 1, 4, 1, 2, 1]), Int32Array.from([4, 1, 2, 1, 2, 1]), Int32Array.from([1, 1, 1, 1, 4, 3]), Int32Array.from([1, 1, 1, 3, 4, 1]), Int32Array.from([1, 3, 1, 1, 4, 1]), Int32Array.from([1, 1, 4, 1, 1, 3]), Int32Array.from([1, 1, 4, 3, 1, 1]), Int32Array.from([4, 1, 1, 1, 1, 3]), Int32Array.from([4, 1, 1, 3, 1, 1]), Int32Array.from([1, 1, 3, 1, 4, 1]), Int32Array.from([1, 1, 4, 1, 3, 1]), Int32Array.from([3, 1, 1, 1, 4, 1]), Int32Array.from([4, 1, 1, 1, 3, 1]), Int32Array.from([2, 1, 1, 4, 1, 2]), Int32Array.from([2, 1, 1, 2, 1, 4]), Int32Array.from([2, 1, 1, 2, 3, 2]), Int32Array.from([2, 3, 3, 1, 1, 1, 2])], e3.MAX_AVG_VARIANCE = 0.25, e3.MAX_INDIVIDUAL_VARIANCE = 0.7, e3.CODE_SHIFT = 98, e3.CODE_CODE_C = 99, e3.CODE_CODE_B = 100, e3.CODE_CODE_A = 101, e3.CODE_FNC_1 = 102, e3.CODE_FNC_2 = 97, e3.CODE_FNC_3 = 96, e3.CODE_FNC_4_A = 101, e3.CODE_FNC_4_B = 100, e3.CODE_START_A = 103, e3.CODE_START_B = 104, e3.CODE_START_C = 105, e3.CODE_STOP = 106, e3;
}(Lt), xt = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Vt = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Ut = function(t3) {
  function e3(e4, r2) {
    void 0 === e4 && (e4 = false), void 0 === r2 && (r2 = false);
    var n2 = t3.call(this) || this;
    return n2.usingCheckDigit = e4, n2.extendedMode = r2, n2.decodeRowResult = "", n2.counters = new Int32Array(9), n2;
  }
  return xt(e3, t3), e3.prototype.decodeRow = function(t4, r2, n2) {
    var o2, i3, a4, u3, s4 = this.counters;
    s4.fill(0), this.decodeRowResult = "";
    var c7, f2, h4 = e3.findAsteriskPattern(r2, s4), l2 = r2.getNextSet(h4[1]), d4 = r2.getSize();
    do {
      e3.recordPattern(r2, l2, s4);
      var p2 = e3.toNarrowWidePattern(s4);
      if (p2 < 0)
        throw new U();
      c7 = e3.patternToChar(p2), this.decodeRowResult += c7, f2 = l2;
      try {
        for (var y4 = (o2 = void 0, Vt(s4)), w3 = y4.next(); !w3.done; w3 = y4.next()) {
          l2 += w3.value;
        }
      } catch (t5) {
        o2 = { error: t5 };
      } finally {
        try {
          w3 && !w3.done && (i3 = y4.return) && i3.call(y4);
        } finally {
          if (o2)
            throw o2.error;
        }
      }
      l2 = r2.getNextSet(l2);
    } while ("*" !== c7);
    this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1);
    var _2, v2 = 0;
    try {
      for (var m4 = Vt(s4), A2 = m4.next(); !A2.done; A2 = m4.next()) {
        v2 += A2.value;
      }
    } catch (t5) {
      a4 = { error: t5 };
    } finally {
      try {
        A2 && !A2.done && (u3 = m4.return) && u3.call(m4);
      } finally {
        if (a4)
          throw a4.error;
      }
    }
    if (l2 !== d4 && 2 * (l2 - f2 - v2) < v2)
      throw new U();
    if (this.usingCheckDigit) {
      for (var E3 = this.decodeRowResult.length - 1, C2 = 0, I3 = 0; I3 < E3; I3++)
        C2 += e3.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(I3));
      if (this.decodeRowResult.charAt(E3) !== e3.ALPHABET_STRING.charAt(C2 % 43))
        throw new g();
      this.decodeRowResult = this.decodeRowResult.substring(0, E3);
    }
    if (0 === this.decodeRowResult.length)
      throw new U();
    _2 = this.extendedMode ? e3.decodeExtended(this.decodeRowResult) : this.decodeRowResult;
    var S4 = (h4[1] + h4[0]) / 2, O3 = f2 + v2 / 2;
    return new et(_2, null, 0, [new At(S4, t4), new At(O3, t4)], nt.CODE_39, (/* @__PURE__ */ new Date()).getTime());
  }, e3.findAsteriskPattern = function(t4, r2) {
    for (var n2 = t4.getSize(), o2 = t4.getNextSet(0), i3 = 0, a4 = o2, u3 = false, s4 = r2.length, c7 = o2; c7 < n2; c7++)
      if (t4.get(c7) !== u3)
        r2[i3]++;
      else {
        if (i3 === s4 - 1) {
          if (this.toNarrowWidePattern(r2) === e3.ASTERISK_ENCODING && t4.isRange(Math.max(0, a4 - Math.floor((c7 - a4) / 2)), a4, false))
            return [a4, c7];
          a4 += r2[0] + r2[1], r2.copyWithin(0, 2, 2 + i3 - 1), r2[i3 - 1] = 0, r2[i3] = 0, i3--;
        } else
          i3++;
        r2[i3] = 1, u3 = !u3;
      }
    throw new U();
  }, e3.toNarrowWidePattern = function(t4) {
    var e4, r2, n2, o2 = t4.length, i3 = 0;
    do {
      var a4 = 2147483647;
      try {
        for (var u3 = (e4 = void 0, Vt(t4)), s4 = u3.next(); !s4.done; s4 = u3.next()) {
          (l2 = s4.value) < a4 && l2 > i3 && (a4 = l2);
        }
      } catch (t5) {
        e4 = { error: t5 };
      } finally {
        try {
          s4 && !s4.done && (r2 = u3.return) && r2.call(u3);
        } finally {
          if (e4)
            throw e4.error;
        }
      }
      i3 = a4, n2 = 0;
      for (var c7 = 0, f2 = 0, h4 = 0; h4 < o2; h4++) {
        (l2 = t4[h4]) > i3 && (f2 |= 1 << o2 - 1 - h4, n2++, c7 += l2);
      }
      if (3 === n2) {
        for (h4 = 0; h4 < o2 && n2 > 0; h4++) {
          var l2;
          if ((l2 = t4[h4]) > i3 && (n2--, 2 * l2 >= c7))
            return -1;
        }
        return f2;
      }
    } while (n2 > 3);
    return -1;
  }, e3.patternToChar = function(t4) {
    for (var r2 = 0; r2 < e3.CHARACTER_ENCODINGS.length; r2++)
      if (e3.CHARACTER_ENCODINGS[r2] === t4)
        return e3.ALPHABET_STRING.charAt(r2);
    if (t4 === e3.ASTERISK_ENCODING)
      return "*";
    throw new U();
  }, e3.decodeExtended = function(t4) {
    for (var e4 = t4.length, r2 = "", n2 = 0; n2 < e4; n2++) {
      var o2 = t4.charAt(n2);
      if ("+" === o2 || "$" === o2 || "%" === o2 || "/" === o2) {
        var i3 = t4.charAt(n2 + 1), a4 = "\0";
        switch (o2) {
          case "+":
            if (!(i3 >= "A" && i3 <= "Z"))
              throw new R();
            a4 = String.fromCharCode(i3.charCodeAt(0) + 32);
            break;
          case "$":
            if (!(i3 >= "A" && i3 <= "Z"))
              throw new R();
            a4 = String.fromCharCode(i3.charCodeAt(0) - 64);
            break;
          case "%":
            if (i3 >= "A" && i3 <= "E")
              a4 = String.fromCharCode(i3.charCodeAt(0) - 38);
            else if (i3 >= "F" && i3 <= "J")
              a4 = String.fromCharCode(i3.charCodeAt(0) - 11);
            else if (i3 >= "K" && i3 <= "O")
              a4 = String.fromCharCode(i3.charCodeAt(0) + 16);
            else if (i3 >= "P" && i3 <= "T")
              a4 = String.fromCharCode(i3.charCodeAt(0) + 43);
            else if ("U" === i3)
              a4 = "\0";
            else if ("V" === i3)
              a4 = "@";
            else if ("W" === i3)
              a4 = "`";
            else {
              if ("X" !== i3 && "Y" !== i3 && "Z" !== i3)
                throw new R();
              a4 = "";
            }
            break;
          case "/":
            if (i3 >= "A" && i3 <= "O")
              a4 = String.fromCharCode(i3.charCodeAt(0) - 32);
            else {
              if ("Z" !== i3)
                throw new R();
              a4 = ":";
            }
        }
        r2 += a4, n2++;
      } else
        r2 += o2;
    }
    return r2;
  }, e3.ALPHABET_STRING = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%", e3.CHARACTER_ENCODINGS = [52, 289, 97, 352, 49, 304, 112, 37, 292, 100, 265, 73, 328, 25, 280, 88, 13, 268, 76, 28, 259, 67, 322, 19, 274, 82, 7, 262, 70, 22, 385, 193, 448, 145, 400, 208, 133, 388, 196, 168, 162, 138, 42], e3.ASTERISK_ENCODING = 148, e3;
}(Lt), Ht = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Gt = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Xt = function(t3) {
  function e3() {
    var e4 = null !== t3 && t3.apply(this, arguments) || this;
    return e4.narrowLineWidth = -1, e4;
  }
  return Ht(e3, t3), e3.prototype.decodeRow = function(t4, r2, n2) {
    var o2, i3, a4 = this.decodeStart(r2), u3 = this.decodeEnd(r2), s4 = new k();
    e3.decodeMiddle(r2, a4[1], u3[0], s4);
    var c7 = s4.toString(), f2 = null;
    null != n2 && (f2 = n2.get(T.ALLOWED_LENGTHS)), null == f2 && (f2 = e3.DEFAULT_ALLOWED_LENGTHS);
    var h4 = c7.length, l2 = false, d4 = 0;
    try {
      for (var p2 = Gt(f2), g2 = p2.next(); !g2.done; g2 = p2.next()) {
        var y4 = g2.value;
        if (h4 === y4) {
          l2 = true;
          break;
        }
        y4 > d4 && (d4 = y4);
      }
    } catch (t5) {
      o2 = { error: t5 };
    } finally {
      try {
        g2 && !g2.done && (i3 = p2.return) && i3.call(p2);
      } finally {
        if (o2)
          throw o2.error;
      }
    }
    if (!l2 && h4 > d4 && (l2 = true), !l2)
      throw new R();
    var w3 = [new At(a4[1], t4), new At(u3[0], t4)];
    return new et(c7, null, 0, w3, nt.ITF, (/* @__PURE__ */ new Date()).getTime());
  }, e3.decodeMiddle = function(t4, r2, n2, o2) {
    var i3 = new Int32Array(10), a4 = new Int32Array(5), u3 = new Int32Array(5);
    for (i3.fill(0), a4.fill(0), u3.fill(0); r2 < n2; ) {
      Lt.recordPattern(t4, r2, i3);
      for (var s4 = 0; s4 < 5; s4++) {
        var c7 = 2 * s4;
        a4[s4] = i3[c7], u3[s4] = i3[c7 + 1];
      }
      var f2 = e3.decodeDigit(a4);
      o2.append(f2.toString()), f2 = this.decodeDigit(u3), o2.append(f2.toString()), i3.forEach(function(t5) {
        r2 += t5;
      });
    }
  }, e3.prototype.decodeStart = function(t4) {
    var r2 = e3.skipWhiteSpace(t4), n2 = e3.findGuardPattern(t4, r2, e3.START_PATTERN);
    return this.narrowLineWidth = (n2[1] - n2[0]) / 4, this.validateQuietZone(t4, n2[0]), n2;
  }, e3.prototype.validateQuietZone = function(t4, e4) {
    var r2 = 10 * this.narrowLineWidth;
    r2 = r2 < e4 ? r2 : e4;
    for (var n2 = e4 - 1; r2 > 0 && n2 >= 0 && !t4.get(n2); n2--)
      r2--;
    if (0 !== r2)
      throw new U();
  }, e3.skipWhiteSpace = function(t4) {
    var e4 = t4.getSize(), r2 = t4.getNextSet(0);
    if (r2 === e4)
      throw new U();
    return r2;
  }, e3.prototype.decodeEnd = function(t4) {
    t4.reverse();
    try {
      var r2 = e3.skipWhiteSpace(t4), n2 = void 0;
      try {
        n2 = e3.findGuardPattern(t4, r2, e3.END_PATTERN_REVERSED[0]);
      } catch (o3) {
        o3 instanceof U && (n2 = e3.findGuardPattern(t4, r2, e3.END_PATTERN_REVERSED[1]));
      }
      this.validateQuietZone(t4, n2[0]);
      var o2 = n2[0];
      return n2[0] = t4.getSize() - n2[1], n2[1] = t4.getSize() - o2, n2;
    } finally {
      t4.reverse();
    }
  }, e3.findGuardPattern = function(t4, r2, n2) {
    var o2 = n2.length, i3 = new Int32Array(o2), a4 = t4.getSize(), u3 = false, s4 = 0, c7 = r2;
    i3.fill(0);
    for (var f2 = r2; f2 < a4; f2++)
      if (t4.get(f2) !== u3)
        i3[s4]++;
      else {
        if (s4 === o2 - 1) {
          if (Lt.patternMatchVariance(i3, n2, e3.MAX_INDIVIDUAL_VARIANCE) < e3.MAX_AVG_VARIANCE)
            return [c7, f2];
          c7 += i3[0] + i3[1], w$2.arraycopy(i3, 2, i3, 0, s4 - 1), i3[s4 - 1] = 0, i3[s4] = 0, s4--;
        } else
          s4++;
        i3[s4] = 1, u3 = !u3;
      }
    throw new U();
  }, e3.decodeDigit = function(t4) {
    for (var r2 = e3.MAX_AVG_VARIANCE, n2 = -1, o2 = e3.PATTERNS.length, i3 = 0; i3 < o2; i3++) {
      var a4 = e3.PATTERNS[i3], u3 = Lt.patternMatchVariance(t4, a4, e3.MAX_INDIVIDUAL_VARIANCE);
      u3 < r2 ? (r2 = u3, n2 = i3) : u3 === r2 && (n2 = -1);
    }
    if (n2 >= 0)
      return n2 % 10;
    throw new U();
  }, e3.PATTERNS = [Int32Array.from([1, 1, 2, 2, 1]), Int32Array.from([2, 1, 1, 1, 2]), Int32Array.from([1, 2, 1, 1, 2]), Int32Array.from([2, 2, 1, 1, 1]), Int32Array.from([1, 1, 2, 1, 2]), Int32Array.from([2, 1, 2, 1, 1]), Int32Array.from([1, 2, 2, 1, 1]), Int32Array.from([1, 1, 1, 2, 2]), Int32Array.from([2, 1, 1, 2, 1]), Int32Array.from([1, 2, 1, 2, 1]), Int32Array.from([1, 1, 3, 3, 1]), Int32Array.from([3, 1, 1, 1, 3]), Int32Array.from([1, 3, 1, 1, 3]), Int32Array.from([3, 3, 1, 1, 1]), Int32Array.from([1, 1, 3, 1, 3]), Int32Array.from([3, 1, 3, 1, 1]), Int32Array.from([1, 3, 3, 1, 1]), Int32Array.from([1, 1, 1, 3, 3]), Int32Array.from([3, 1, 1, 3, 1]), Int32Array.from([1, 3, 1, 3, 1])], e3.MAX_AVG_VARIANCE = 0.38, e3.MAX_INDIVIDUAL_VARIANCE = 0.5, e3.DEFAULT_ALLOWED_LENGTHS = [6, 8, 10, 12, 14], e3.START_PATTERN = Int32Array.from([1, 1, 1, 1]), e3.END_PATTERN_REVERSED = [Int32Array.from([1, 1, 2]), Int32Array.from([1, 1, 3])], e3;
}(Lt), Wt = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), jt = function(t3) {
  function e3() {
    var e4 = null !== t3 && t3.apply(this, arguments) || this;
    return e4.decodeRowStringBuffer = "", e4;
  }
  return Wt(e3, t3), e3.findStartGuardPattern = function(t4) {
    for (var r2, n2 = false, o2 = 0, i3 = Int32Array.from([0, 0, 0]); !n2; ) {
      i3 = Int32Array.from([0, 0, 0]);
      var a4 = (r2 = e3.findGuardPattern(t4, o2, false, this.START_END_PATTERN, i3))[0], u3 = a4 - ((o2 = r2[1]) - a4);
      u3 >= 0 && (n2 = t4.isRange(u3, a4, false));
    }
    return r2;
  }, e3.checkChecksum = function(t4) {
    return e3.checkStandardUPCEANChecksum(t4);
  }, e3.checkStandardUPCEANChecksum = function(t4) {
    var r2 = t4.length;
    if (0 === r2)
      return false;
    var n2 = parseInt(t4.charAt(r2 - 1), 10);
    return e3.getStandardUPCEANChecksum(t4.substring(0, r2 - 1)) === n2;
  }, e3.getStandardUPCEANChecksum = function(t4) {
    for (var e4 = t4.length, r2 = 0, n2 = e4 - 1; n2 >= 0; n2 -= 2) {
      if ((o2 = t4.charAt(n2).charCodeAt(0) - "0".charCodeAt(0)) < 0 || o2 > 9)
        throw new R();
      r2 += o2;
    }
    r2 *= 3;
    for (n2 = e4 - 2; n2 >= 0; n2 -= 2) {
      var o2;
      if ((o2 = t4.charAt(n2).charCodeAt(0) - "0".charCodeAt(0)) < 0 || o2 > 9)
        throw new R();
      r2 += o2;
    }
    return (1e3 - r2) % 10;
  }, e3.decodeEnd = function(t4, r2) {
    return e3.findGuardPattern(t4, r2, false, e3.START_END_PATTERN, new Int32Array(e3.START_END_PATTERN.length).fill(0));
  }, e3.findGuardPatternWithoutCounters = function(t4, e4, r2, n2) {
    return this.findGuardPattern(t4, e4, r2, n2, new Int32Array(n2.length));
  }, e3.findGuardPattern = function(t4, r2, n2, o2, i3) {
    for (var a4 = t4.getSize(), u3 = 0, s4 = r2 = n2 ? t4.getNextUnset(r2) : t4.getNextSet(r2), c7 = o2.length, f2 = n2, h4 = r2; h4 < a4; h4++)
      if (t4.get(h4) !== f2)
        i3[u3]++;
      else {
        if (u3 === c7 - 1) {
          if (Lt.patternMatchVariance(i3, o2, e3.MAX_INDIVIDUAL_VARIANCE) < e3.MAX_AVG_VARIANCE)
            return Int32Array.from([s4, h4]);
          s4 += i3[0] + i3[1];
          for (var l2 = i3.slice(2, i3.length - 1), d4 = 0; d4 < u3 - 1; d4++)
            i3[d4] = l2[d4];
          i3[u3 - 1] = 0, i3[u3] = 0, u3--;
        } else
          u3++;
        i3[u3] = 1, f2 = !f2;
      }
    throw new U();
  }, e3.decodeDigit = function(t4, r2, n2, o2) {
    this.recordPattern(t4, n2, r2);
    for (var i3 = this.MAX_AVG_VARIANCE, a4 = -1, u3 = o2.length, s4 = 0; s4 < u3; s4++) {
      var c7 = o2[s4], f2 = Lt.patternMatchVariance(r2, c7, e3.MAX_INDIVIDUAL_VARIANCE);
      f2 < i3 && (i3 = f2, a4 = s4);
    }
    if (a4 >= 0)
      return a4;
    throw new U();
  }, e3.MAX_AVG_VARIANCE = 0.48, e3.MAX_INDIVIDUAL_VARIANCE = 0.7, e3.START_END_PATTERN = Int32Array.from([1, 1, 1]), e3.MIDDLE_PATTERN = Int32Array.from([1, 1, 1, 1, 1]), e3.END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]), e3.L_PATTERNS = [Int32Array.from([3, 2, 1, 1]), Int32Array.from([2, 2, 2, 1]), Int32Array.from([2, 1, 2, 2]), Int32Array.from([1, 4, 1, 1]), Int32Array.from([1, 1, 3, 2]), Int32Array.from([1, 2, 3, 1]), Int32Array.from([1, 1, 1, 4]), Int32Array.from([1, 3, 1, 2]), Int32Array.from([1, 2, 1, 3]), Int32Array.from([3, 1, 1, 2])], e3;
}(Lt), zt = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Yt = function() {
  function t3() {
    this.CHECK_DIGIT_ENCODINGS = [24, 20, 18, 17, 12, 6, 3, 10, 9, 5], this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]), this.decodeRowStringBuffer = "";
  }
  return t3.prototype.decodeRow = function(e3, r2, n2) {
    var o2 = this.decodeRowStringBuffer, i3 = this.decodeMiddle(r2, n2, o2), a4 = o2.toString(), u3 = t3.parseExtensionString(a4), s4 = [new At((n2[0] + n2[1]) / 2, e3), new At(i3, e3)], c7 = new et(a4, null, 0, s4, nt.UPC_EAN_EXTENSION, (/* @__PURE__ */ new Date()).getTime());
    return null != u3 && c7.putAllMetadata(u3), c7;
  }, t3.prototype.decodeMiddle = function(e3, r2, n2) {
    var o2, i3, a4 = this.decodeMiddleCounters;
    a4[0] = 0, a4[1] = 0, a4[2] = 0, a4[3] = 0;
    for (var u3 = e3.getSize(), s4 = r2[1], c7 = 0, f2 = 0; f2 < 5 && s4 < u3; f2++) {
      var h4 = jt.decodeDigit(e3, a4, s4, jt.L_AND_G_PATTERNS);
      n2 += String.fromCharCode("0".charCodeAt(0) + h4 % 10);
      try {
        for (var l2 = (o2 = void 0, zt(a4)), d4 = l2.next(); !d4.done; d4 = l2.next()) {
          s4 += d4.value;
        }
      } catch (t4) {
        o2 = { error: t4 };
      } finally {
        try {
          d4 && !d4.done && (i3 = l2.return) && i3.call(l2);
        } finally {
          if (o2)
            throw o2.error;
        }
      }
      h4 >= 10 && (c7 |= 1 << 4 - f2), 4 !== f2 && (s4 = e3.getNextSet(s4), s4 = e3.getNextUnset(s4));
    }
    if (5 !== n2.length)
      throw new U();
    var p2 = this.determineCheckDigit(c7);
    if (t3.extensionChecksum(n2.toString()) !== p2)
      throw new U();
    return s4;
  }, t3.extensionChecksum = function(t4) {
    for (var e3 = t4.length, r2 = 0, n2 = e3 - 2; n2 >= 0; n2 -= 2)
      r2 += t4.charAt(n2).charCodeAt(0) - "0".charCodeAt(0);
    r2 *= 3;
    for (n2 = e3 - 1; n2 >= 0; n2 -= 2)
      r2 += t4.charAt(n2).charCodeAt(0) - "0".charCodeAt(0);
    return (r2 *= 3) % 10;
  }, t3.prototype.determineCheckDigit = function(t4) {
    for (var e3 = 0; e3 < 10; e3++)
      if (t4 === this.CHECK_DIGIT_ENCODINGS[e3])
        return e3;
    throw new U();
  }, t3.parseExtensionString = function(e3) {
    if (5 !== e3.length)
      return null;
    var r2 = t3.parseExtension5String(e3);
    return null == r2 ? null : /* @__PURE__ */ new Map([[it.SUGGESTED_PRICE, r2]]);
  }, t3.parseExtension5String = function(t4) {
    var e3;
    switch (t4.charAt(0)) {
      case "0":
        e3 = "£";
        break;
      case "5":
        e3 = "$";
        break;
      case "9":
        switch (t4) {
          case "90000":
            return null;
          case "99991":
            return "0.00";
          case "99990":
            return "Used";
        }
        e3 = "";
        break;
      default:
        e3 = "";
    }
    var r2 = parseInt(t4.substring(1)), n2 = r2 % 100;
    return e3 + (r2 / 100).toString() + "." + (n2 < 10 ? "0" + n2 : n2.toString());
  }, t3;
}(), Zt = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Kt = function() {
  function t3() {
    this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]), this.decodeRowStringBuffer = "";
  }
  return t3.prototype.decodeRow = function(e3, r2, n2) {
    var o2 = this.decodeRowStringBuffer, i3 = this.decodeMiddle(r2, n2, o2), a4 = o2.toString(), u3 = t3.parseExtensionString(a4), s4 = [new At((n2[0] + n2[1]) / 2, e3), new At(i3, e3)], c7 = new et(a4, null, 0, s4, nt.UPC_EAN_EXTENSION, (/* @__PURE__ */ new Date()).getTime());
    return null != u3 && c7.putAllMetadata(u3), c7;
  }, t3.prototype.decodeMiddle = function(t4, e3, r2) {
    var n2, o2, i3 = this.decodeMiddleCounters;
    i3[0] = 0, i3[1] = 0, i3[2] = 0, i3[3] = 0;
    for (var a4 = t4.getSize(), u3 = e3[1], s4 = 0, c7 = 0; c7 < 2 && u3 < a4; c7++) {
      var f2 = jt.decodeDigit(t4, i3, u3, jt.L_AND_G_PATTERNS);
      r2 += String.fromCharCode("0".charCodeAt(0) + f2 % 10);
      try {
        for (var h4 = (n2 = void 0, Zt(i3)), l2 = h4.next(); !l2.done; l2 = h4.next()) {
          u3 += l2.value;
        }
      } catch (t5) {
        n2 = { error: t5 };
      } finally {
        try {
          l2 && !l2.done && (o2 = h4.return) && o2.call(h4);
        } finally {
          if (n2)
            throw n2.error;
        }
      }
      f2 >= 10 && (s4 |= 1 << 1 - c7), 1 !== c7 && (u3 = t4.getNextSet(u3), u3 = t4.getNextUnset(u3));
    }
    if (2 !== r2.length)
      throw new U();
    if (parseInt(r2.toString()) % 4 !== s4)
      throw new U();
    return u3;
  }, t3.parseExtensionString = function(t4) {
    return 2 !== t4.length ? null : /* @__PURE__ */ new Map([[it.ISSUE_NUMBER, parseInt(t4)]]);
  }, t3;
}(), qt = function() {
  function t3() {
  }
  return t3.decodeRow = function(t4, e3, r2) {
    var n2 = jt.findGuardPattern(e3, r2, false, this.EXTENSION_START_PATTERN, new Int32Array(this.EXTENSION_START_PATTERN.length).fill(0));
    try {
      return new Yt().decodeRow(t4, e3, n2);
    } catch (r3) {
      return new Kt().decodeRow(t4, e3, n2);
    }
  }, t3.EXTENSION_START_PATTERN = Int32Array.from([1, 1, 2]), t3;
}(), Qt = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Jt = function(t3) {
  function e3() {
    var r2 = t3.call(this) || this;
    r2.decodeRowStringBuffer = "", e3.L_AND_G_PATTERNS = e3.L_PATTERNS.map(function(t4) {
      return Int32Array.from(t4);
    });
    for (var n2 = 10; n2 < 20; n2++) {
      for (var o2 = e3.L_PATTERNS[n2 - 10], i3 = new Int32Array(o2.length), a4 = 0; a4 < o2.length; a4++)
        i3[a4] = o2[o2.length - a4 - 1];
      e3.L_AND_G_PATTERNS[n2] = i3;
    }
    return r2;
  }
  return Qt(e3, t3), e3.prototype.decodeRow = function(t4, r2, n2) {
    var o2 = e3.findStartGuardPattern(r2), i3 = null == n2 ? null : n2.get(T.NEED_RESULT_POINT_CALLBACK);
    if (null != i3) {
      var a4 = new At((o2[0] + o2[1]) / 2, t4);
      i3.foundPossibleResultPoint(a4);
    }
    var u3 = this.decodeMiddle(r2, o2, this.decodeRowStringBuffer), s4 = u3.rowOffset, c7 = u3.resultString;
    if (null != i3) {
      var f2 = new At(s4, t4);
      i3.foundPossibleResultPoint(f2);
    }
    var h4 = e3.decodeEnd(r2, s4);
    if (null != i3) {
      var l2 = new At((h4[0] + h4[1]) / 2, t4);
      i3.foundPossibleResultPoint(l2);
    }
    var d4 = h4[1], p2 = d4 + (d4 - h4[0]);
    if (p2 >= r2.getSize() || !r2.isRange(d4, p2, false))
      throw new U();
    var y4 = c7.toString();
    if (y4.length < 8)
      throw new R();
    if (!e3.checkChecksum(y4))
      throw new g();
    var w3 = (o2[1] + o2[0]) / 2, _2 = (h4[1] + h4[0]) / 2, v2 = this.getBarcodeFormat(), m4 = [new At(w3, t4), new At(_2, t4)], A2 = new et(y4, null, 0, m4, v2, (/* @__PURE__ */ new Date()).getTime()), E3 = 0;
    try {
      var C2 = qt.decodeRow(t4, r2, h4[1]);
      A2.putMetadata(it.UPC_EAN_EXTENSION, C2.getText()), A2.putAllMetadata(C2.getResultMetadata()), A2.addResultPoints(C2.getResultPoints()), E3 = C2.getText().length;
    } catch (t5) {
    }
    var I3 = null == n2 ? null : n2.get(T.ALLOWED_EAN_EXTENSIONS);
    if (null != I3) {
      var S4 = false;
      for (var O3 in I3)
        if (E3.toString() === O3) {
          S4 = true;
          break;
        }
      if (!S4)
        throw new U();
    }
    return v2 === nt.EAN_13 || nt.UPC_A, A2;
  }, e3.checkChecksum = function(t4) {
    return e3.checkStandardUPCEANChecksum(t4);
  }, e3.checkStandardUPCEANChecksum = function(t4) {
    var r2 = t4.length;
    if (0 === r2)
      return false;
    var n2 = parseInt(t4.charAt(r2 - 1), 10);
    return e3.getStandardUPCEANChecksum(t4.substring(0, r2 - 1)) === n2;
  }, e3.getStandardUPCEANChecksum = function(t4) {
    for (var e4 = t4.length, r2 = 0, n2 = e4 - 1; n2 >= 0; n2 -= 2) {
      if ((o2 = t4.charAt(n2).charCodeAt(0) - "0".charCodeAt(0)) < 0 || o2 > 9)
        throw new R();
      r2 += o2;
    }
    r2 *= 3;
    for (n2 = e4 - 2; n2 >= 0; n2 -= 2) {
      var o2;
      if ((o2 = t4.charAt(n2).charCodeAt(0) - "0".charCodeAt(0)) < 0 || o2 > 9)
        throw new R();
      r2 += o2;
    }
    return (1e3 - r2) % 10;
  }, e3.decodeEnd = function(t4, r2) {
    return e3.findGuardPattern(t4, r2, false, e3.START_END_PATTERN, new Int32Array(e3.START_END_PATTERN.length).fill(0));
  }, e3;
}(jt), $t = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), te = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, ee = function(t3) {
  function e3() {
    var e4 = t3.call(this) || this;
    return e4.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]), e4;
  }
  return $t(e3, t3), e3.prototype.decodeMiddle = function(t4, r2, n2) {
    var o2, i3, a4, u3, s4 = this.decodeMiddleCounters;
    s4[0] = 0, s4[1] = 0, s4[2] = 0, s4[3] = 0;
    for (var c7 = t4.getSize(), f2 = r2[1], h4 = 0, l2 = 0; l2 < 6 && f2 < c7; l2++) {
      var d4 = Jt.decodeDigit(t4, s4, f2, Jt.L_AND_G_PATTERNS);
      n2 += String.fromCharCode("0".charCodeAt(0) + d4 % 10);
      try {
        for (var p2 = (o2 = void 0, te(s4)), g2 = p2.next(); !g2.done; g2 = p2.next()) {
          f2 += g2.value;
        }
      } catch (t5) {
        o2 = { error: t5 };
      } finally {
        try {
          g2 && !g2.done && (i3 = p2.return) && i3.call(p2);
        } finally {
          if (o2)
            throw o2.error;
        }
      }
      d4 >= 10 && (h4 |= 1 << 5 - l2);
    }
    n2 = e3.determineFirstDigit(n2, h4), f2 = Jt.findGuardPattern(t4, f2, true, Jt.MIDDLE_PATTERN, new Int32Array(Jt.MIDDLE_PATTERN.length).fill(0))[1];
    for (l2 = 0; l2 < 6 && f2 < c7; l2++) {
      d4 = Jt.decodeDigit(t4, s4, f2, Jt.L_PATTERNS);
      n2 += String.fromCharCode("0".charCodeAt(0) + d4);
      try {
        for (var y4 = (a4 = void 0, te(s4)), w3 = y4.next(); !w3.done; w3 = y4.next()) {
          f2 += w3.value;
        }
      } catch (t5) {
        a4 = { error: t5 };
      } finally {
        try {
          w3 && !w3.done && (u3 = y4.return) && u3.call(y4);
        } finally {
          if (a4)
            throw a4.error;
        }
      }
    }
    return { rowOffset: f2, resultString: n2 };
  }, e3.prototype.getBarcodeFormat = function() {
    return nt.EAN_13;
  }, e3.determineFirstDigit = function(t4, e4) {
    for (var r2 = 0; r2 < 10; r2++)
      if (e4 === this.FIRST_DIGIT_ENCODINGS[r2])
        return t4 = String.fromCharCode("0".charCodeAt(0) + r2) + t4;
    throw new U();
  }, e3.FIRST_DIGIT_ENCODINGS = [0, 11, 13, 14, 19, 25, 28, 21, 22, 26], e3;
}(Jt), re = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), ne = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, oe = function(t3) {
  function e3() {
    var e4 = t3.call(this) || this;
    return e4.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]), e4;
  }
  return re(e3, t3), e3.prototype.decodeMiddle = function(t4, e4, r2) {
    var n2, o2, i3, a4, u3 = this.decodeMiddleCounters;
    u3[0] = 0, u3[1] = 0, u3[2] = 0, u3[3] = 0;
    for (var s4 = t4.getSize(), c7 = e4[1], f2 = 0; f2 < 4 && c7 < s4; f2++) {
      var h4 = Jt.decodeDigit(t4, u3, c7, Jt.L_PATTERNS);
      r2 += String.fromCharCode("0".charCodeAt(0) + h4);
      try {
        for (var l2 = (n2 = void 0, ne(u3)), d4 = l2.next(); !d4.done; d4 = l2.next()) {
          c7 += d4.value;
        }
      } catch (t5) {
        n2 = { error: t5 };
      } finally {
        try {
          d4 && !d4.done && (o2 = l2.return) && o2.call(l2);
        } finally {
          if (n2)
            throw n2.error;
        }
      }
    }
    c7 = Jt.findGuardPattern(t4, c7, true, Jt.MIDDLE_PATTERN, new Int32Array(Jt.MIDDLE_PATTERN.length).fill(0))[1];
    for (f2 = 0; f2 < 4 && c7 < s4; f2++) {
      h4 = Jt.decodeDigit(t4, u3, c7, Jt.L_PATTERNS);
      r2 += String.fromCharCode("0".charCodeAt(0) + h4);
      try {
        for (var p2 = (i3 = void 0, ne(u3)), g2 = p2.next(); !g2.done; g2 = p2.next()) {
          c7 += g2.value;
        }
      } catch (t5) {
        i3 = { error: t5 };
      } finally {
        try {
          g2 && !g2.done && (a4 = p2.return) && a4.call(p2);
        } finally {
          if (i3)
            throw i3.error;
        }
      }
    }
    return { rowOffset: c7, resultString: r2 };
  }, e3.prototype.getBarcodeFormat = function() {
    return nt.EAN_8;
  }, e3;
}(Jt), ie = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), ae = function(t3) {
  function e3() {
    var e4 = null !== t3 && t3.apply(this, arguments) || this;
    return e4.ean13Reader = new ee(), e4;
  }
  return ie(e3, t3), e3.prototype.getBarcodeFormat = function() {
    return nt.UPC_A;
  }, e3.prototype.decode = function(t4, e4) {
    return this.maybeReturnResult(this.ean13Reader.decode(t4));
  }, e3.prototype.decodeRow = function(t4, e4, r2) {
    return this.maybeReturnResult(this.ean13Reader.decodeRow(t4, e4, r2));
  }, e3.prototype.decodeMiddle = function(t4, e4, r2) {
    return this.ean13Reader.decodeMiddle(t4, e4, r2);
  }, e3.prototype.maybeReturnResult = function(t4) {
    var e4 = t4.getText();
    if ("0" === e4.charAt(0)) {
      var r2 = new et(e4.substring(1), null, null, t4.getResultPoints(), nt.UPC_A);
      return null != t4.getResultMetadata() && r2.putAllMetadata(t4.getResultMetadata()), r2;
    }
    throw new U();
  }, e3.prototype.reset = function() {
    this.ean13Reader.reset();
  }, e3;
}(Jt), ue = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), se = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, ce = function(t3) {
  function e3() {
    var e4 = t3.call(this) || this;
    return e4.decodeMiddleCounters = new Int32Array(4), e4;
  }
  return ue(e3, t3), e3.prototype.decodeMiddle = function(t4, r2, n2) {
    var o2, i3, a4 = this.decodeMiddleCounters.map(function(t5) {
      return t5;
    });
    a4[0] = 0, a4[1] = 0, a4[2] = 0, a4[3] = 0;
    for (var u3 = t4.getSize(), s4 = r2[1], c7 = 0, f2 = 0; f2 < 6 && s4 < u3; f2++) {
      var h4 = e3.decodeDigit(t4, a4, s4, e3.L_AND_G_PATTERNS);
      n2 += String.fromCharCode("0".charCodeAt(0) + h4 % 10);
      try {
        for (var l2 = (o2 = void 0, se(a4)), d4 = l2.next(); !d4.done; d4 = l2.next()) {
          s4 += d4.value;
        }
      } catch (t5) {
        o2 = { error: t5 };
      } finally {
        try {
          d4 && !d4.done && (i3 = l2.return) && i3.call(l2);
        } finally {
          if (o2)
            throw o2.error;
        }
      }
      h4 >= 10 && (c7 |= 1 << 5 - f2);
    }
    return e3.determineNumSysAndCheckDigit(new k(n2), c7), s4;
  }, e3.prototype.decodeEnd = function(t4, r2) {
    return e3.findGuardPatternWithoutCounters(t4, r2, true, e3.MIDDLE_END_PATTERN);
  }, e3.prototype.checkChecksum = function(t4) {
    return Jt.checkChecksum(e3.convertUPCEtoUPCA(t4));
  }, e3.determineNumSysAndCheckDigit = function(t4, e4) {
    for (var r2 = 0; r2 <= 1; r2++)
      for (var n2 = 0; n2 < 10; n2++)
        if (e4 === this.NUMSYS_AND_CHECK_DIGIT_PATTERNS[r2][n2])
          return t4.insert(0, "0" + r2), void t4.append("0" + n2);
    throw U.getNotFoundInstance();
  }, e3.prototype.getBarcodeFormat = function() {
    return nt.UPC_E;
  }, e3.convertUPCEtoUPCA = function(t4) {
    var e4 = t4.slice(1, 7).split("").map(function(t5) {
      return t5.charCodeAt(0);
    }), r2 = new k();
    r2.append(t4.charAt(0));
    var n2 = e4[5];
    switch (n2) {
      case 0:
      case 1:
      case 2:
        r2.appendChars(e4, 0, 2), r2.append(n2), r2.append("0000"), r2.appendChars(e4, 2, 3);
        break;
      case 3:
        r2.appendChars(e4, 0, 3), r2.append("00000"), r2.appendChars(e4, 3, 2);
        break;
      case 4:
        r2.appendChars(e4, 0, 4), r2.append("00000"), r2.append(e4[4]);
        break;
      default:
        r2.appendChars(e4, 0, 5), r2.append("0000"), r2.append(n2);
    }
    return t4.length >= 8 && r2.append(t4.charAt(7)), r2.toString();
  }, e3.MIDDLE_END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]), e3.NUMSYS_AND_CHECK_DIGIT_PATTERNS = [Int32Array.from([56, 52, 50, 49, 44, 38, 35, 42, 41, 37]), Int32Array.from([7, 11, 13, 14, 19, 25, 28, 21, 22, 1])], e3;
}(Jt), fe = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), he = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, le = function(t3) {
  function e3(e4) {
    var r2 = t3.call(this) || this, n2 = null == e4 ? null : e4.get(T.POSSIBLE_FORMATS), o2 = [];
    return null != n2 && (n2.indexOf(nt.EAN_13) > -1 ? o2.push(new ee()) : n2.indexOf(nt.UPC_A) > -1 && o2.push(new ae()), n2.indexOf(nt.EAN_8) > -1 && o2.push(new oe()), n2.indexOf(nt.UPC_E) > -1 && o2.push(new ce())), 0 === o2.length && (o2.push(new ee()), o2.push(new oe()), o2.push(new ce())), r2.readers = o2, r2;
  }
  return fe(e3, t3), e3.prototype.decodeRow = function(t4, e4, r2) {
    var n2, o2;
    try {
      for (var i3 = he(this.readers), a4 = i3.next(); !a4.done; a4 = i3.next()) {
        var u3 = a4.value;
        try {
          var s4 = u3.decodeRow(t4, e4, r2), c7 = s4.getBarcodeFormat() === nt.EAN_13 && "0" === s4.getText().charAt(0), f2 = null == r2 ? null : r2.get(T.POSSIBLE_FORMATS), h4 = null == f2 || f2.includes(nt.UPC_A);
          if (c7 && h4) {
            var l2 = s4.getRawBytes(), d4 = new et(s4.getText().substring(1), l2, l2.length, s4.getResultPoints(), nt.UPC_A);
            return d4.putAllMetadata(s4.getResultMetadata()), d4;
          }
          return s4;
        } catch (t5) {
        }
      }
    } catch (t5) {
      n2 = { error: t5 };
    } finally {
      try {
        a4 && !a4.done && (o2 = i3.return) && o2.call(i3);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
    throw new U();
  }, e3.prototype.reset = function() {
    var t4, e4;
    try {
      for (var r2 = he(this.readers), n2 = r2.next(); !n2.done; n2 = r2.next()) {
        n2.value.reset();
      }
    } catch (e5) {
      t4 = { error: e5 };
    } finally {
      try {
        n2 && !n2.done && (e4 = r2.return) && e4.call(r2);
      } finally {
        if (t4)
          throw t4.error;
      }
    }
  }, e3;
}(Lt), de = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), pe = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, ge = function(t3) {
  function e3() {
    var e4 = t3.call(this) || this;
    return e4.decodeFinderCounters = new Int32Array(4), e4.dataCharacterCounters = new Int32Array(8), e4.oddRoundingErrors = new Array(4), e4.evenRoundingErrors = new Array(4), e4.oddCounts = new Array(e4.dataCharacterCounters.length / 2), e4.evenCounts = new Array(e4.dataCharacterCounters.length / 2), e4;
  }
  return de(e3, t3), e3.prototype.getDecodeFinderCounters = function() {
    return this.decodeFinderCounters;
  }, e3.prototype.getDataCharacterCounters = function() {
    return this.dataCharacterCounters;
  }, e3.prototype.getOddRoundingErrors = function() {
    return this.oddRoundingErrors;
  }, e3.prototype.getEvenRoundingErrors = function() {
    return this.evenRoundingErrors;
  }, e3.prototype.getOddCounts = function() {
    return this.oddCounts;
  }, e3.prototype.getEvenCounts = function() {
    return this.evenCounts;
  }, e3.prototype.parseFinderValue = function(t4, r2) {
    for (var n2 = 0; n2 < r2.length; n2++)
      if (Lt.patternMatchVariance(t4, r2[n2], e3.MAX_INDIVIDUAL_VARIANCE) < e3.MAX_AVG_VARIANCE)
        return n2;
    throw new U();
  }, e3.count = function(t4) {
    return vt.sum(new Int32Array(t4));
  }, e3.increment = function(t4, e4) {
    for (var r2 = 0, n2 = e4[0], o2 = 1; o2 < t4.length; o2++)
      e4[o2] > n2 && (n2 = e4[o2], r2 = o2);
    t4[r2]++;
  }, e3.decrement = function(t4, e4) {
    for (var r2 = 0, n2 = e4[0], o2 = 1; o2 < t4.length; o2++)
      e4[o2] < n2 && (n2 = e4[o2], r2 = o2);
    t4[r2]--;
  }, e3.isFinderPattern = function(t4) {
    var r2, n2, o2 = t4[0] + t4[1], i3 = o2 / (o2 + t4[2] + t4[3]);
    if (i3 >= e3.MIN_FINDER_PATTERN_RATIO && i3 <= e3.MAX_FINDER_PATTERN_RATIO) {
      var a4 = Number.MAX_SAFE_INTEGER, u3 = Number.MIN_SAFE_INTEGER;
      try {
        for (var s4 = pe(t4), c7 = s4.next(); !c7.done; c7 = s4.next()) {
          var f2 = c7.value;
          f2 > u3 && (u3 = f2), f2 < a4 && (a4 = f2);
        }
      } catch (t5) {
        r2 = { error: t5 };
      } finally {
        try {
          c7 && !c7.done && (n2 = s4.return) && n2.call(s4);
        } finally {
          if (r2)
            throw r2.error;
        }
      }
      return u3 < 10 * a4;
    }
    return false;
  }, e3.MAX_AVG_VARIANCE = 0.2, e3.MAX_INDIVIDUAL_VARIANCE = 0.45, e3.MIN_FINDER_PATTERN_RATIO = 9.5 / 12, e3.MAX_FINDER_PATTERN_RATIO = 12.5 / 14, e3;
}(Lt), ye = function() {
  function t3(t4, e3) {
    this.value = t4, this.checksumPortion = e3;
  }
  return t3.prototype.getValue = function() {
    return this.value;
  }, t3.prototype.getChecksumPortion = function() {
    return this.checksumPortion;
  }, t3.prototype.toString = function() {
    return this.value + "(" + this.checksumPortion + ")";
  }, t3.prototype.equals = function(e3) {
    if (!(e3 instanceof t3))
      return false;
    var r2 = e3;
    return this.value === r2.value && this.checksumPortion === r2.checksumPortion;
  }, t3.prototype.hashCode = function() {
    return this.value ^ this.checksumPortion;
  }, t3;
}(), we = function() {
  function t3(t4, e3, r2, n2, o2) {
    this.value = t4, this.startEnd = e3, this.value = t4, this.startEnd = e3, this.resultPoints = new Array(), this.resultPoints.push(new At(r2, o2)), this.resultPoints.push(new At(n2, o2));
  }
  return t3.prototype.getValue = function() {
    return this.value;
  }, t3.prototype.getStartEnd = function() {
    return this.startEnd;
  }, t3.prototype.getResultPoints = function() {
    return this.resultPoints;
  }, t3.prototype.equals = function(e3) {
    if (!(e3 instanceof t3))
      return false;
    var r2 = e3;
    return this.value === r2.value;
  }, t3.prototype.hashCode = function() {
    return this.value;
  }, t3;
}(), _e = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, ve = function() {
  function t3() {
  }
  return t3.getRSSvalue = function(e3, r2, n2) {
    var o2, i3, a4 = 0;
    try {
      for (var u3 = _e(e3), s4 = u3.next(); !s4.done; s4 = u3.next()) {
        a4 += s4.value;
      }
    } catch (t4) {
      o2 = { error: t4 };
    } finally {
      try {
        s4 && !s4.done && (i3 = u3.return) && i3.call(u3);
      } finally {
        if (o2)
          throw o2.error;
      }
    }
    for (var c7 = 0, f2 = 0, h4 = e3.length, l2 = 0; l2 < h4 - 1; l2++) {
      var d4 = void 0;
      for (d4 = 1, f2 |= 1 << l2; d4 < e3[l2]; d4++, f2 &= ~(1 << l2)) {
        var p2 = t3.combins(a4 - d4 - 1, h4 - l2 - 2);
        if (n2 && 0 === f2 && a4 - d4 - (h4 - l2 - 1) >= h4 - l2 - 1 && (p2 -= t3.combins(a4 - d4 - (h4 - l2), h4 - l2 - 2)), h4 - l2 - 1 > 1) {
          for (var g2 = 0, y4 = a4 - d4 - (h4 - l2 - 2); y4 > r2; y4--)
            g2 += t3.combins(a4 - d4 - y4 - 1, h4 - l2 - 3);
          p2 -= g2 * (h4 - 1 - l2);
        } else
          a4 - d4 > r2 && p2--;
        c7 += p2;
      }
      a4 -= d4;
    }
    return c7;
  }, t3.combins = function(t4, e3) {
    var r2, n2;
    t4 - e3 > e3 ? (n2 = e3, r2 = t4 - e3) : (n2 = t4 - e3, r2 = e3);
    for (var o2 = 1, i3 = 1, a4 = t4; a4 > r2; a4--)
      o2 *= a4, i3 <= n2 && (o2 /= i3, i3++);
    for (; i3 <= n2; )
      o2 /= i3, i3++;
    return o2;
  }, t3;
}(), me = function() {
  function t3() {
  }
  return t3.buildBitArray = function(t4) {
    var e3 = 2 * t4.length - 1;
    null == t4[t4.length - 1].getRightChar() && (e3 -= 1);
    for (var r2 = new S(12 * e3), n2 = 0, o2 = t4[0].getRightChar().getValue(), i3 = 11; i3 >= 0; --i3)
      0 != (o2 & 1 << i3) && r2.set(n2), n2++;
    for (i3 = 1; i3 < t4.length; ++i3) {
      for (var a4 = t4[i3], u3 = a4.getLeftChar().getValue(), s4 = 11; s4 >= 0; --s4)
        0 != (u3 & 1 << s4) && r2.set(n2), n2++;
      if (null != a4.getRightChar()) {
        var c7 = a4.getRightChar().getValue();
        for (s4 = 11; s4 >= 0; --s4)
          0 != (c7 & 1 << s4) && r2.set(n2), n2++;
      }
    }
    return r2;
  }, t3;
}(), Ae = function() {
  function t3(t4, e3) {
    e3 ? this.decodedInformation = null : (this.finished = t4, this.decodedInformation = e3);
  }
  return t3.prototype.getDecodedInformation = function() {
    return this.decodedInformation;
  }, t3.prototype.isFinished = function() {
    return this.finished;
  }, t3;
}(), Ee = function() {
  function t3(t4) {
    this.newPosition = t4;
  }
  return t3.prototype.getNewPosition = function() {
    return this.newPosition;
  }, t3;
}(), Ce = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Ie = function(t3) {
  function e3(e4, r2) {
    var n2 = t3.call(this, e4) || this;
    return n2.value = r2, n2;
  }
  return Ce(e3, t3), e3.prototype.getValue = function() {
    return this.value;
  }, e3.prototype.isFNC1 = function() {
    return this.value === e3.FNC1;
  }, e3.FNC1 = "$", e3;
}(Ee), Se = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Oe = function(t3) {
  function e3(e4, r2, n2) {
    var o2 = t3.call(this, e4) || this;
    return n2 ? (o2.remaining = true, o2.remainingValue = o2.remainingValue) : (o2.remaining = false, o2.remainingValue = 0), o2.newString = r2, o2;
  }
  return Se(e3, t3), e3.prototype.getNewString = function() {
    return this.newString;
  }, e3.prototype.isRemaining = function() {
    return this.remaining;
  }, e3.prototype.getRemainingValue = function() {
    return this.remainingValue;
  }, e3;
}(Ee), Te = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), be = function(t3) {
  function e3(e4, r2, n2) {
    var o2 = t3.call(this, e4) || this;
    if (r2 < 0 || r2 > 10 || n2 < 0 || n2 > 10)
      throw new R();
    return o2.firstDigit = r2, o2.secondDigit = n2, o2;
  }
  return Te(e3, t3), e3.prototype.getFirstDigit = function() {
    return this.firstDigit;
  }, e3.prototype.getSecondDigit = function() {
    return this.secondDigit;
  }, e3.prototype.getValue = function() {
    return 10 * this.firstDigit + this.secondDigit;
  }, e3.prototype.isFirstDigitFNC1 = function() {
    return this.firstDigit === e3.FNC1;
  }, e3.prototype.isSecondDigitFNC1 = function() {
    return this.secondDigit === e3.FNC1;
  }, e3.prototype.isAnyFNC1 = function() {
    return this.firstDigit === e3.FNC1 || this.secondDigit === e3.FNC1;
  }, e3.FNC1 = 10, e3;
}(Ee), Re = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Ne = function() {
  function t3() {
  }
  return t3.parseFieldsInGeneralPurpose = function(e3) {
    var r2, n2, o2, i3, a4, u3, s4, c7;
    if (!e3)
      return null;
    if (e3.length < 2)
      throw new U();
    var f2 = e3.substring(0, 2);
    try {
      for (var h4 = Re(t3.TWO_DIGIT_DATA_LENGTH), l2 = h4.next(); !l2.done; l2 = h4.next()) {
        if ((A2 = l2.value)[0] === f2)
          return A2[1] === t3.VARIABLE_LENGTH ? t3.processVariableAI(2, A2[2], e3) : t3.processFixedAI(2, A2[1], e3);
      }
    } catch (t4) {
      r2 = { error: t4 };
    } finally {
      try {
        l2 && !l2.done && (n2 = h4.return) && n2.call(h4);
      } finally {
        if (r2)
          throw r2.error;
      }
    }
    if (e3.length < 3)
      throw new U();
    var d4 = e3.substring(0, 3);
    try {
      for (var p2 = Re(t3.THREE_DIGIT_DATA_LENGTH), g2 = p2.next(); !g2.done; g2 = p2.next()) {
        if ((A2 = g2.value)[0] === d4)
          return A2[1] === t3.VARIABLE_LENGTH ? t3.processVariableAI(3, A2[2], e3) : t3.processFixedAI(3, A2[1], e3);
      }
    } catch (t4) {
      o2 = { error: t4 };
    } finally {
      try {
        g2 && !g2.done && (i3 = p2.return) && i3.call(p2);
      } finally {
        if (o2)
          throw o2.error;
      }
    }
    try {
      for (var y4 = Re(t3.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH), w3 = y4.next(); !w3.done; w3 = y4.next()) {
        if ((A2 = w3.value)[0] === d4)
          return A2[1] === t3.VARIABLE_LENGTH ? t3.processVariableAI(4, A2[2], e3) : t3.processFixedAI(4, A2[1], e3);
      }
    } catch (t4) {
      a4 = { error: t4 };
    } finally {
      try {
        w3 && !w3.done && (u3 = y4.return) && u3.call(y4);
      } finally {
        if (a4)
          throw a4.error;
      }
    }
    if (e3.length < 4)
      throw new U();
    var _2 = e3.substring(0, 4);
    try {
      for (var v2 = Re(t3.FOUR_DIGIT_DATA_LENGTH), m4 = v2.next(); !m4.done; m4 = v2.next()) {
        var A2;
        if ((A2 = m4.value)[0] === _2)
          return A2[1] === t3.VARIABLE_LENGTH ? t3.processVariableAI(4, A2[2], e3) : t3.processFixedAI(4, A2[1], e3);
      }
    } catch (t4) {
      s4 = { error: t4 };
    } finally {
      try {
        m4 && !m4.done && (c7 = v2.return) && c7.call(v2);
      } finally {
        if (s4)
          throw s4.error;
      }
    }
    throw new U();
  }, t3.processFixedAI = function(e3, r2, n2) {
    if (n2.length < e3)
      throw new U();
    var o2 = n2.substring(0, e3);
    if (n2.length < e3 + r2)
      throw new U();
    var i3 = n2.substring(e3, e3 + r2), a4 = n2.substring(e3 + r2), u3 = "(" + o2 + ")" + i3, s4 = t3.parseFieldsInGeneralPurpose(a4);
    return null == s4 ? u3 : u3 + s4;
  }, t3.processVariableAI = function(e3, r2, n2) {
    var o2, i3 = n2.substring(0, e3);
    o2 = n2.length < e3 + r2 ? n2.length : e3 + r2;
    var a4 = n2.substring(e3, o2), u3 = n2.substring(o2), s4 = "(" + i3 + ")" + a4, c7 = t3.parseFieldsInGeneralPurpose(u3);
    return null == c7 ? s4 : s4 + c7;
  }, t3.VARIABLE_LENGTH = [], t3.TWO_DIGIT_DATA_LENGTH = [["00", 18], ["01", 14], ["02", 14], ["10", t3.VARIABLE_LENGTH, 20], ["11", 6], ["12", 6], ["13", 6], ["15", 6], ["17", 6], ["20", 2], ["21", t3.VARIABLE_LENGTH, 20], ["22", t3.VARIABLE_LENGTH, 29], ["30", t3.VARIABLE_LENGTH, 8], ["37", t3.VARIABLE_LENGTH, 8], ["90", t3.VARIABLE_LENGTH, 30], ["91", t3.VARIABLE_LENGTH, 30], ["92", t3.VARIABLE_LENGTH, 30], ["93", t3.VARIABLE_LENGTH, 30], ["94", t3.VARIABLE_LENGTH, 30], ["95", t3.VARIABLE_LENGTH, 30], ["96", t3.VARIABLE_LENGTH, 30], ["97", t3.VARIABLE_LENGTH, 3], ["98", t3.VARIABLE_LENGTH, 30], ["99", t3.VARIABLE_LENGTH, 30]], t3.THREE_DIGIT_DATA_LENGTH = [["240", t3.VARIABLE_LENGTH, 30], ["241", t3.VARIABLE_LENGTH, 30], ["242", t3.VARIABLE_LENGTH, 6], ["250", t3.VARIABLE_LENGTH, 30], ["251", t3.VARIABLE_LENGTH, 30], ["253", t3.VARIABLE_LENGTH, 17], ["254", t3.VARIABLE_LENGTH, 20], ["400", t3.VARIABLE_LENGTH, 30], ["401", t3.VARIABLE_LENGTH, 30], ["402", 17], ["403", t3.VARIABLE_LENGTH, 30], ["410", 13], ["411", 13], ["412", 13], ["413", 13], ["414", 13], ["420", t3.VARIABLE_LENGTH, 20], ["421", t3.VARIABLE_LENGTH, 15], ["422", 3], ["423", t3.VARIABLE_LENGTH, 15], ["424", 3], ["425", 3], ["426", 3]], t3.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH = [["310", 6], ["311", 6], ["312", 6], ["313", 6], ["314", 6], ["315", 6], ["316", 6], ["320", 6], ["321", 6], ["322", 6], ["323", 6], ["324", 6], ["325", 6], ["326", 6], ["327", 6], ["328", 6], ["329", 6], ["330", 6], ["331", 6], ["332", 6], ["333", 6], ["334", 6], ["335", 6], ["336", 6], ["340", 6], ["341", 6], ["342", 6], ["343", 6], ["344", 6], ["345", 6], ["346", 6], ["347", 6], ["348", 6], ["349", 6], ["350", 6], ["351", 6], ["352", 6], ["353", 6], ["354", 6], ["355", 6], ["356", 6], ["357", 6], ["360", 6], ["361", 6], ["362", 6], ["363", 6], ["364", 6], ["365", 6], ["366", 6], ["367", 6], ["368", 6], ["369", 6], ["390", t3.VARIABLE_LENGTH, 15], ["391", t3.VARIABLE_LENGTH, 18], ["392", t3.VARIABLE_LENGTH, 15], ["393", t3.VARIABLE_LENGTH, 18], ["703", t3.VARIABLE_LENGTH, 30]], t3.FOUR_DIGIT_DATA_LENGTH = [["7001", 13], ["7002", t3.VARIABLE_LENGTH, 30], ["7003", 10], ["8001", 14], ["8002", t3.VARIABLE_LENGTH, 20], ["8003", t3.VARIABLE_LENGTH, 30], ["8004", t3.VARIABLE_LENGTH, 30], ["8005", 6], ["8006", 18], ["8007", t3.VARIABLE_LENGTH, 30], ["8008", t3.VARIABLE_LENGTH, 12], ["8018", 18], ["8020", t3.VARIABLE_LENGTH, 25], ["8100", 6], ["8101", 10], ["8102", 2], ["8110", t3.VARIABLE_LENGTH, 70], ["8200", t3.VARIABLE_LENGTH, 70]], t3;
}(), De = function() {
  function t3(t4) {
    this.buffer = new k(), this.information = t4;
  }
  return t3.prototype.decodeAllCodes = function(t4, e3) {
    for (var r2 = e3, n2 = null; ; ) {
      var o2 = this.decodeGeneralPurposeField(r2, n2), i3 = Ne.parseFieldsInGeneralPurpose(o2.getNewString());
      if (null != i3 && t4.append(i3), n2 = o2.isRemaining() ? "" + o2.getRemainingValue() : null, r2 === o2.getNewPosition())
        break;
      r2 = o2.getNewPosition();
    }
    return t4.toString();
  }, t3.prototype.isStillNumeric = function(t4) {
    if (t4 + 7 > this.information.getSize())
      return t4 + 4 <= this.information.getSize();
    for (var e3 = t4; e3 < t4 + 3; ++e3)
      if (this.information.get(e3))
        return true;
    return this.information.get(t4 + 3);
  }, t3.prototype.decodeNumeric = function(t4) {
    if (t4 + 7 > this.information.getSize()) {
      var e3 = this.extractNumericValueFromBitArray(t4, 4);
      return new be(this.information.getSize(), 0 === e3 ? be.FNC1 : e3 - 1, be.FNC1);
    }
    var r2 = this.extractNumericValueFromBitArray(t4, 7);
    return new be(t4 + 7, (r2 - 8) / 11, (r2 - 8) % 11);
  }, t3.prototype.extractNumericValueFromBitArray = function(e3, r2) {
    return t3.extractNumericValueFromBitArray(this.information, e3, r2);
  }, t3.extractNumericValueFromBitArray = function(t4, e3, r2) {
    for (var n2 = 0, o2 = 0; o2 < r2; ++o2)
      t4.get(e3 + o2) && (n2 |= 1 << r2 - o2 - 1);
    return n2;
  }, t3.prototype.decodeGeneralPurposeField = function(t4, e3) {
    this.buffer.setLengthToZero(), null != e3 && this.buffer.append(e3), this.current.setPosition(t4);
    var r2 = this.parseBlocks();
    return null != r2 && r2.isRemaining() ? new Oe(this.current.getPosition(), this.buffer.toString(), r2.getRemainingValue()) : new Oe(this.current.getPosition(), this.buffer.toString());
  }, t3.prototype.parseBlocks = function() {
    var t4, e3;
    do {
      var r2 = this.current.getPosition();
      if (t4 = this.current.isAlpha() ? (e3 = this.parseAlphaBlock()).isFinished() : this.current.isIsoIec646() ? (e3 = this.parseIsoIec646Block()).isFinished() : (e3 = this.parseNumericBlock()).isFinished(), !(r2 !== this.current.getPosition()) && !t4)
        break;
    } while (!t4);
    return e3.getDecodedInformation();
  }, t3.prototype.parseNumericBlock = function() {
    for (; this.isStillNumeric(this.current.getPosition()); ) {
      var t4 = this.decodeNumeric(this.current.getPosition());
      if (this.current.setPosition(t4.getNewPosition()), t4.isFirstDigitFNC1()) {
        var e3 = void 0;
        return e3 = t4.isSecondDigitFNC1() ? new Oe(this.current.getPosition(), this.buffer.toString()) : new Oe(this.current.getPosition(), this.buffer.toString(), t4.getSecondDigit()), new Ae(true, e3);
      }
      if (this.buffer.append(t4.getFirstDigit()), t4.isSecondDigitFNC1()) {
        e3 = new Oe(this.current.getPosition(), this.buffer.toString());
        return new Ae(true, e3);
      }
      this.buffer.append(t4.getSecondDigit());
    }
    return this.isNumericToAlphaNumericLatch(this.current.getPosition()) && (this.current.setAlpha(), this.current.incrementPosition(4)), new Ae(false);
  }, t3.prototype.parseIsoIec646Block = function() {
    for (; this.isStillIsoIec646(this.current.getPosition()); ) {
      var t4 = this.decodeIsoIec646(this.current.getPosition());
      if (this.current.setPosition(t4.getNewPosition()), t4.isFNC1()) {
        var e3 = new Oe(this.current.getPosition(), this.buffer.toString());
        return new Ae(true, e3);
      }
      this.buffer.append(t4.getValue());
    }
    return this.isAlphaOr646ToNumericLatch(this.current.getPosition()) ? (this.current.incrementPosition(3), this.current.setNumeric()) : this.isAlphaTo646ToAlphaLatch(this.current.getPosition()) && (this.current.getPosition() + 5 < this.information.getSize() ? this.current.incrementPosition(5) : this.current.setPosition(this.information.getSize()), this.current.setAlpha()), new Ae(false);
  }, t3.prototype.parseAlphaBlock = function() {
    for (; this.isStillAlpha(this.current.getPosition()); ) {
      var t4 = this.decodeAlphanumeric(this.current.getPosition());
      if (this.current.setPosition(t4.getNewPosition()), t4.isFNC1()) {
        var e3 = new Oe(this.current.getPosition(), this.buffer.toString());
        return new Ae(true, e3);
      }
      this.buffer.append(t4.getValue());
    }
    return this.isAlphaOr646ToNumericLatch(this.current.getPosition()) ? (this.current.incrementPosition(3), this.current.setNumeric()) : this.isAlphaTo646ToAlphaLatch(this.current.getPosition()) && (this.current.getPosition() + 5 < this.information.getSize() ? this.current.incrementPosition(5) : this.current.setPosition(this.information.getSize()), this.current.setIsoIec646()), new Ae(false);
  }, t3.prototype.isStillIsoIec646 = function(t4) {
    if (t4 + 5 > this.information.getSize())
      return false;
    var e3 = this.extractNumericValueFromBitArray(t4, 5);
    if (e3 >= 5 && e3 < 16)
      return true;
    if (t4 + 7 > this.information.getSize())
      return false;
    var r2 = this.extractNumericValueFromBitArray(t4, 7);
    if (r2 >= 64 && r2 < 116)
      return true;
    if (t4 + 8 > this.information.getSize())
      return false;
    var n2 = this.extractNumericValueFromBitArray(t4, 8);
    return n2 >= 232 && n2 < 253;
  }, t3.prototype.decodeIsoIec646 = function(t4) {
    var e3 = this.extractNumericValueFromBitArray(t4, 5);
    if (15 === e3)
      return new Ie(t4 + 5, Ie.FNC1);
    if (e3 >= 5 && e3 < 15)
      return new Ie(t4 + 5, "0" + (e3 - 5));
    var r2, n2 = this.extractNumericValueFromBitArray(t4, 7);
    if (n2 >= 64 && n2 < 90)
      return new Ie(t4 + 7, "" + (n2 + 1));
    if (n2 >= 90 && n2 < 116)
      return new Ie(t4 + 7, "" + (n2 + 7));
    switch (this.extractNumericValueFromBitArray(t4, 8)) {
      case 232:
        r2 = "!";
        break;
      case 233:
        r2 = '"';
        break;
      case 234:
        r2 = "%";
        break;
      case 235:
        r2 = "&";
        break;
      case 236:
        r2 = "'";
        break;
      case 237:
        r2 = "(";
        break;
      case 238:
        r2 = ")";
        break;
      case 239:
        r2 = "*";
        break;
      case 240:
        r2 = "+";
        break;
      case 241:
        r2 = ",";
        break;
      case 242:
        r2 = "-";
        break;
      case 243:
        r2 = ".";
        break;
      case 244:
        r2 = "/";
        break;
      case 245:
        r2 = ":";
        break;
      case 246:
        r2 = ";";
        break;
      case 247:
        r2 = "<";
        break;
      case 248:
        r2 = "=";
        break;
      case 249:
        r2 = ">";
        break;
      case 250:
        r2 = "?";
        break;
      case 251:
        r2 = "_";
        break;
      case 252:
        r2 = " ";
        break;
      default:
        throw new R();
    }
    return new Ie(t4 + 8, r2);
  }, t3.prototype.isStillAlpha = function(t4) {
    if (t4 + 5 > this.information.getSize())
      return false;
    var e3 = this.extractNumericValueFromBitArray(t4, 5);
    if (e3 >= 5 && e3 < 16)
      return true;
    if (t4 + 6 > this.information.getSize())
      return false;
    var r2 = this.extractNumericValueFromBitArray(t4, 6);
    return r2 >= 16 && r2 < 63;
  }, t3.prototype.decodeAlphanumeric = function(t4) {
    var e3 = this.extractNumericValueFromBitArray(t4, 5);
    if (15 === e3)
      return new Ie(t4 + 5, Ie.FNC1);
    if (e3 >= 5 && e3 < 15)
      return new Ie(t4 + 5, "0" + (e3 - 5));
    var r2, n2 = this.extractNumericValueFromBitArray(t4, 6);
    if (n2 >= 32 && n2 < 58)
      return new Ie(t4 + 6, "" + (n2 + 33));
    switch (n2) {
      case 58:
        r2 = "*";
        break;
      case 59:
        r2 = ",";
        break;
      case 60:
        r2 = "-";
        break;
      case 61:
        r2 = ".";
        break;
      case 62:
        r2 = "/";
        break;
      default:
        throw new yt("Decoding invalid alphanumeric value: " + n2);
    }
    return new Ie(t4 + 6, r2);
  }, t3.prototype.isAlphaTo646ToAlphaLatch = function(t4) {
    if (t4 + 1 > this.information.getSize())
      return false;
    for (var e3 = 0; e3 < 5 && e3 + t4 < this.information.getSize(); ++e3)
      if (2 === e3) {
        if (!this.information.get(t4 + 2))
          return false;
      } else if (this.information.get(t4 + e3))
        return false;
    return true;
  }, t3.prototype.isAlphaOr646ToNumericLatch = function(t4) {
    if (t4 + 3 > this.information.getSize())
      return false;
    for (var e3 = t4; e3 < t4 + 3; ++e3)
      if (this.information.get(e3))
        return false;
    return true;
  }, t3.prototype.isNumericToAlphaNumericLatch = function(t4) {
    if (t4 + 1 > this.information.getSize())
      return false;
    for (var e3 = 0; e3 < 4 && e3 + t4 < this.information.getSize(); ++e3)
      if (this.information.get(t4 + e3))
        return false;
    return true;
  }, t3;
}(), Pe = function() {
  function t3(t4) {
    this.information = t4, this.generalDecoder = new De(t4);
  }
  return t3.prototype.getInformation = function() {
    return this.information;
  }, t3.prototype.getGeneralDecoder = function() {
    return this.generalDecoder;
  }, t3;
}(), Me = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Be = function(t3) {
  function e3(e4) {
    return t3.call(this, e4) || this;
  }
  return Me(e3, t3), e3.prototype.encodeCompressedGtin = function(t4, e4) {
    t4.append("(01)");
    var r2 = t4.length();
    t4.append("9"), this.encodeCompressedGtinWithoutAI(t4, e4, r2);
  }, e3.prototype.encodeCompressedGtinWithoutAI = function(t4, r2, n2) {
    for (var o2 = 0; o2 < 4; ++o2) {
      var i3 = this.getGeneralDecoder().extractNumericValueFromBitArray(r2 + 10 * o2, 10);
      i3 / 100 == 0 && t4.append("0"), i3 / 10 == 0 && t4.append("0"), t4.append(i3);
    }
    e3.appendCheckDigit(t4, n2);
  }, e3.appendCheckDigit = function(t4, e4) {
    for (var r2 = 0, n2 = 0; n2 < 13; n2++) {
      var o2 = t4.charAt(n2 + e4).charCodeAt(0) - "0".charCodeAt(0);
      r2 += 0 == (1 & n2) ? 3 * o2 : o2;
    }
    10 === (r2 = 10 - r2 % 10) && (r2 = 0), t4.append(r2);
  }, e3.GTIN_SIZE = 40, e3;
}(Pe), Le = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Fe = function(t3) {
  function e3(e4) {
    return t3.call(this, e4) || this;
  }
  return Le(e3, t3), e3.prototype.parseInformation = function() {
    var t4 = new k();
    t4.append("(01)");
    var r2 = t4.length(), n2 = this.getGeneralDecoder().extractNumericValueFromBitArray(e3.HEADER_SIZE, 4);
    return t4.append(n2), this.encodeCompressedGtinWithoutAI(t4, e3.HEADER_SIZE + 4, r2), this.getGeneralDecoder().decodeAllCodes(t4, e3.HEADER_SIZE + 44);
  }, e3.HEADER_SIZE = 4, e3;
}(Be), ke = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), xe = function(t3) {
  function e3(e4) {
    return t3.call(this, e4) || this;
  }
  return ke(e3, t3), e3.prototype.parseInformation = function() {
    var t4 = new k();
    return this.getGeneralDecoder().decodeAllCodes(t4, e3.HEADER_SIZE);
  }, e3.HEADER_SIZE = 5, e3;
}(Pe), Ve = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Ue = function(t3) {
  function e3(e4) {
    return t3.call(this, e4) || this;
  }
  return Ve(e3, t3), e3.prototype.encodeCompressedWeight = function(t4, e4, r2) {
    var n2 = this.getGeneralDecoder().extractNumericValueFromBitArray(e4, r2);
    this.addWeightCode(t4, n2);
    for (var o2 = this.checkWeight(n2), i3 = 1e5, a4 = 0; a4 < 5; ++a4)
      o2 / i3 == 0 && t4.append("0"), i3 /= 10;
    t4.append(o2);
  }, e3;
}(Be), He = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Ge = function(t3) {
  function e3(e4) {
    return t3.call(this, e4) || this;
  }
  return He(e3, t3), e3.prototype.parseInformation = function() {
    if (this.getInformation().getSize() != e3.HEADER_SIZE + Ue.GTIN_SIZE + e3.WEIGHT_SIZE)
      throw new U();
    var t4 = new k();
    return this.encodeCompressedGtin(t4, e3.HEADER_SIZE), this.encodeCompressedWeight(t4, e3.HEADER_SIZE + Ue.GTIN_SIZE, e3.WEIGHT_SIZE), t4.toString();
  }, e3.HEADER_SIZE = 5, e3.WEIGHT_SIZE = 15, e3;
}(Ue), Xe = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), We = function(t3) {
  function e3(e4) {
    return t3.call(this, e4) || this;
  }
  return Xe(e3, t3), e3.prototype.addWeightCode = function(t4, e4) {
    t4.append("(3103)");
  }, e3.prototype.checkWeight = function(t4) {
    return t4;
  }, e3;
}(Ge), je = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), ze = function(t3) {
  function e3(e4) {
    return t3.call(this, e4) || this;
  }
  return je(e3, t3), e3.prototype.addWeightCode = function(t4, e4) {
    e4 < 1e4 ? t4.append("(3202)") : t4.append("(3203)");
  }, e3.prototype.checkWeight = function(t4) {
    return t4 < 1e4 ? t4 : t4 - 1e4;
  }, e3;
}(Ge), Ye = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Ze = function(t3) {
  function e3(e4) {
    return t3.call(this, e4) || this;
  }
  return Ye(e3, t3), e3.prototype.parseInformation = function() {
    if (this.getInformation().getSize() < e3.HEADER_SIZE + Be.GTIN_SIZE)
      throw new U();
    var t4 = new k();
    this.encodeCompressedGtin(t4, e3.HEADER_SIZE);
    var r2 = this.getGeneralDecoder().extractNumericValueFromBitArray(e3.HEADER_SIZE + Be.GTIN_SIZE, e3.LAST_DIGIT_SIZE);
    t4.append("(392"), t4.append(r2), t4.append(")");
    var n2 = this.getGeneralDecoder().decodeGeneralPurposeField(e3.HEADER_SIZE + Be.GTIN_SIZE + e3.LAST_DIGIT_SIZE, null);
    return t4.append(n2.getNewString()), t4.toString();
  }, e3.HEADER_SIZE = 8, e3.LAST_DIGIT_SIZE = 2, e3;
}(Be), Ke = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), qe = function(t3) {
  function e3(e4) {
    return t3.call(this, e4) || this;
  }
  return Ke(e3, t3), e3.prototype.parseInformation = function() {
    if (this.getInformation().getSize() < e3.HEADER_SIZE + Be.GTIN_SIZE)
      throw new U();
    var t4 = new k();
    this.encodeCompressedGtin(t4, e3.HEADER_SIZE);
    var r2 = this.getGeneralDecoder().extractNumericValueFromBitArray(e3.HEADER_SIZE + Be.GTIN_SIZE, e3.LAST_DIGIT_SIZE);
    t4.append("(393"), t4.append(r2), t4.append(")");
    var n2 = this.getGeneralDecoder().extractNumericValueFromBitArray(e3.HEADER_SIZE + Be.GTIN_SIZE + e3.LAST_DIGIT_SIZE, e3.FIRST_THREE_DIGITS_SIZE);
    n2 / 100 == 0 && t4.append("0"), n2 / 10 == 0 && t4.append("0"), t4.append(n2);
    var o2 = this.getGeneralDecoder().decodeGeneralPurposeField(e3.HEADER_SIZE + Be.GTIN_SIZE + e3.LAST_DIGIT_SIZE + e3.FIRST_THREE_DIGITS_SIZE, null);
    return t4.append(o2.getNewString()), t4.toString();
  }, e3.HEADER_SIZE = 8, e3.LAST_DIGIT_SIZE = 2, e3.FIRST_THREE_DIGITS_SIZE = 10, e3;
}(Be), Qe = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Je = function(t3) {
  function e3(e4, r2, n2) {
    var o2 = t3.call(this, e4) || this;
    return o2.dateCode = n2, o2.firstAIdigits = r2, o2;
  }
  return Qe(e3, t3), e3.prototype.parseInformation = function() {
    if (this.getInformation().getSize() != e3.HEADER_SIZE + e3.GTIN_SIZE + e3.WEIGHT_SIZE + e3.DATE_SIZE)
      throw new U();
    var t4 = new k();
    return this.encodeCompressedGtin(t4, e3.HEADER_SIZE), this.encodeCompressedWeight(t4, e3.HEADER_SIZE + e3.GTIN_SIZE, e3.WEIGHT_SIZE), this.encodeCompressedDate(t4, e3.HEADER_SIZE + e3.GTIN_SIZE + e3.WEIGHT_SIZE), t4.toString();
  }, e3.prototype.encodeCompressedDate = function(t4, r2) {
    var n2 = this.getGeneralDecoder().extractNumericValueFromBitArray(r2, e3.DATE_SIZE);
    if (38400 != n2) {
      t4.append("("), t4.append(this.dateCode), t4.append(")");
      var o2 = n2 % 32, i3 = (n2 /= 32) % 12 + 1, a4 = n2 /= 12;
      a4 / 10 == 0 && t4.append("0"), t4.append(a4), i3 / 10 == 0 && t4.append("0"), t4.append(i3), o2 / 10 == 0 && t4.append("0"), t4.append(o2);
    }
  }, e3.prototype.addWeightCode = function(t4, e4) {
    t4.append("("), t4.append(this.firstAIdigits), t4.append(e4 / 1e5), t4.append(")");
  }, e3.prototype.checkWeight = function(t4) {
    return t4 % 1e5;
  }, e3.HEADER_SIZE = 8, e3.WEIGHT_SIZE = 20, e3.DATE_SIZE = 16, e3;
}(Ue);
var $e = function() {
  function t3(t4, e3, r2, n2) {
    this.leftchar = t4, this.rightchar = e3, this.finderpattern = r2, this.maybeLast = n2;
  }
  return t3.prototype.mayBeLast = function() {
    return this.maybeLast;
  }, t3.prototype.getLeftChar = function() {
    return this.leftchar;
  }, t3.prototype.getRightChar = function() {
    return this.rightchar;
  }, t3.prototype.getFinderPattern = function() {
    return this.finderpattern;
  }, t3.prototype.mustBeLast = function() {
    return null == this.rightchar;
  }, t3.prototype.toString = function() {
    return "[ " + this.leftchar + ", " + this.rightchar + " : " + (null == this.finderpattern ? "null" : this.finderpattern.getValue()) + " ]";
  }, t3.equals = function(e3, r2) {
    return e3 instanceof t3 && (t3.equalsOrNull(e3.leftchar, r2.leftchar) && t3.equalsOrNull(e3.rightchar, r2.rightchar) && t3.equalsOrNull(e3.finderpattern, r2.finderpattern));
  }, t3.equalsOrNull = function(e3, r2) {
    return null === e3 ? null === r2 : t3.equals(e3, r2);
  }, t3.prototype.hashCode = function() {
    return this.leftchar.getValue() ^ this.rightchar.getValue() ^ this.finderpattern.getValue();
  }, t3;
}(), tr = function() {
  function t3(t4, e3, r2) {
    this.pairs = t4, this.rowNumber = e3, this.wasReversed = r2;
  }
  return t3.prototype.getPairs = function() {
    return this.pairs;
  }, t3.prototype.getRowNumber = function() {
    return this.rowNumber;
  }, t3.prototype.isReversed = function() {
    return this.wasReversed;
  }, t3.prototype.isEquivalent = function(t4) {
    return this.checkEqualitity(this, t4);
  }, t3.prototype.toString = function() {
    return "{ " + this.pairs + " }";
  }, t3.prototype.equals = function(e3, r2) {
    return e3 instanceof t3 && (this.checkEqualitity(e3, r2) && e3.wasReversed === r2.wasReversed);
  }, t3.prototype.checkEqualitity = function(t4, e3) {
    var r2;
    if (t4 && e3)
      return t4.forEach(function(t5, n2) {
        e3.forEach(function(e4) {
          t5.getLeftChar().getValue() === e4.getLeftChar().getValue() && t5.getRightChar().getValue() === e4.getRightChar().getValue() && t5.getFinderPatter().getValue() === e4.getFinderPatter().getValue() && (r2 = true);
        });
      }), r2;
  }, t3;
}(), er = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), rr = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, nr = function(t3) {
  function e3() {
    var r2 = null !== t3 && t3.apply(this, arguments) || this;
    return r2.pairs = new Array(e3.MAX_PAIRS), r2.rows = new Array(), r2.startEnd = [2], r2;
  }
  return er(e3, t3), e3.prototype.decodeRow = function(t4, r2, n2) {
    this.pairs.length = 0, this.startFromEven = false;
    try {
      return e3.constructResult(this.decodeRow2pairs(t4, r2));
    } catch (t5) {
    }
    return this.pairs.length = 0, this.startFromEven = true, e3.constructResult(this.decodeRow2pairs(t4, r2));
  }, e3.prototype.reset = function() {
    this.pairs.length = 0, this.rows.length = 0;
  }, e3.prototype.decodeRow2pairs = function(t4, e4) {
    for (var r2, n2 = false; !n2; )
      try {
        this.pairs.push(this.retrieveNextPair(e4, this.pairs, t4));
      } catch (t5) {
        if (t5 instanceof U) {
          if (!this.pairs.length)
            throw new U();
          n2 = true;
        }
      }
    if (this.checkChecksum())
      return this.pairs;
    if (r2 = !!this.rows.length, this.storeRow(t4, false), r2) {
      var o2 = this.checkRowsBoolean(false);
      if (null != o2)
        return o2;
      if (null != (o2 = this.checkRowsBoolean(true)))
        return o2;
    }
    throw new U();
  }, e3.prototype.checkRowsBoolean = function(t4) {
    if (this.rows.length > 25)
      return this.rows.length = 0, null;
    this.pairs.length = 0, t4 && (this.rows = this.rows.reverse());
    var e4 = null;
    try {
      e4 = this.checkRows(new Array(), 0);
    } catch (t5) {
      console.log(t5);
    }
    return t4 && (this.rows = this.rows.reverse()), e4;
  }, e3.prototype.checkRows = function(t4, r2) {
    for (var n2, o2, i3 = r2; i3 < this.rows.length; i3++) {
      var a4 = this.rows[i3];
      this.pairs.length = 0;
      try {
        for (var u3 = (n2 = void 0, rr(t4)), s4 = u3.next(); !s4.done; s4 = u3.next()) {
          var c7 = s4.value;
          this.pairs.push(c7.getPairs());
        }
      } catch (t5) {
        n2 = { error: t5 };
      } finally {
        try {
          s4 && !s4.done && (o2 = u3.return) && o2.call(u3);
        } finally {
          if (n2)
            throw n2.error;
        }
      }
      if (this.pairs.push(a4.getPairs()), e3.isValidSequence(this.pairs)) {
        if (this.checkChecksum())
          return this.pairs;
        var f2 = new Array(t4);
        f2.push(a4);
        try {
          return this.checkRows(f2, i3 + 1);
        } catch (t5) {
          console.log(t5);
        }
      }
    }
    throw new U();
  }, e3.isValidSequence = function(t4) {
    var r2, n2;
    try {
      for (var o2 = rr(e3.FINDER_PATTERN_SEQUENCES), i3 = o2.next(); !i3.done; i3 = o2.next()) {
        var a4 = i3.value;
        if (!(t4.length > a4.length)) {
          for (var u3 = true, s4 = 0; s4 < t4.length; s4++)
            if (t4[s4].getFinderPattern().getValue() != a4[s4]) {
              u3 = false;
              break;
            }
          if (u3)
            return true;
        }
      }
    } catch (t5) {
      r2 = { error: t5 };
    } finally {
      try {
        i3 && !i3.done && (n2 = o2.return) && n2.call(o2);
      } finally {
        if (r2)
          throw r2.error;
      }
    }
    return false;
  }, e3.prototype.storeRow = function(t4, r2) {
    for (var n2 = 0, o2 = false, i3 = false; n2 < this.rows.length; ) {
      var a4 = this.rows[n2];
      if (a4.getRowNumber() > t4) {
        i3 = a4.isEquivalent(this.pairs);
        break;
      }
      o2 = a4.isEquivalent(this.pairs), n2++;
    }
    i3 || o2 || e3.isPartialRow(this.pairs, this.rows) || (this.rows.push(n2, new tr(this.pairs, t4, r2)), this.removePartialRows(this.pairs, this.rows));
  }, e3.prototype.removePartialRows = function(t4, e4) {
    var r2, n2, o2, i3, a4, u3;
    try {
      for (var s4 = rr(e4), c7 = s4.next(); !c7.done; c7 = s4.next()) {
        var f2 = c7.value;
        if (f2.getPairs().length !== t4.length) {
          try {
            for (var h4 = (o2 = void 0, rr(f2.getPairs())), l2 = h4.next(); !l2.done; l2 = h4.next()) {
              var d4 = l2.value, p2 = false;
              try {
                for (var g2 = (a4 = void 0, rr(t4)), y4 = g2.next(); !y4.done; y4 = g2.next()) {
                  var w3 = y4.value;
                  if ($e.equals(d4, w3)) {
                    p2 = true;
                    break;
                  }
                }
              } catch (t5) {
                a4 = { error: t5 };
              } finally {
                try {
                  y4 && !y4.done && (u3 = g2.return) && u3.call(g2);
                } finally {
                  if (a4)
                    throw a4.error;
                }
              }
              p2 || false;
            }
          } catch (t5) {
            o2 = { error: t5 };
          } finally {
            try {
              l2 && !l2.done && (i3 = h4.return) && i3.call(h4);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
        }
      }
    } catch (t5) {
      r2 = { error: t5 };
    } finally {
      try {
        c7 && !c7.done && (n2 = s4.return) && n2.call(s4);
      } finally {
        if (r2)
          throw r2.error;
      }
    }
  }, e3.isPartialRow = function(t4, e4) {
    var r2, n2, o2, i3, a4, u3;
    try {
      for (var s4 = rr(e4), c7 = s4.next(); !c7.done; c7 = s4.next()) {
        var f2 = c7.value, h4 = true;
        try {
          for (var l2 = (o2 = void 0, rr(t4)), d4 = l2.next(); !d4.done; d4 = l2.next()) {
            var p2 = d4.value, g2 = false;
            try {
              for (var y4 = (a4 = void 0, rr(f2.getPairs())), w3 = y4.next(); !w3.done; w3 = y4.next()) {
                var _2 = w3.value;
                if (p2.equals(_2)) {
                  g2 = true;
                  break;
                }
              }
            } catch (t5) {
              a4 = { error: t5 };
            } finally {
              try {
                w3 && !w3.done && (u3 = y4.return) && u3.call(y4);
              } finally {
                if (a4)
                  throw a4.error;
              }
            }
            if (!g2) {
              h4 = false;
              break;
            }
          }
        } catch (t5) {
          o2 = { error: t5 };
        } finally {
          try {
            d4 && !d4.done && (i3 = l2.return) && i3.call(l2);
          } finally {
            if (o2)
              throw o2.error;
          }
        }
        if (h4)
          return true;
      }
    } catch (t5) {
      r2 = { error: t5 };
    } finally {
      try {
        c7 && !c7.done && (n2 = s4.return) && n2.call(s4);
      } finally {
        if (r2)
          throw r2.error;
      }
    }
    return false;
  }, e3.prototype.getRows = function() {
    return this.rows;
  }, e3.constructResult = function(t4) {
    var e4 = function(t5) {
      try {
        if (t5.get(1))
          return new Fe(t5);
        if (!t5.get(2))
          return new xe(t5);
        switch (De.extractNumericValueFromBitArray(t5, 1, 4)) {
          case 4:
            return new We(t5);
          case 5:
            return new ze(t5);
        }
        switch (De.extractNumericValueFromBitArray(t5, 1, 5)) {
          case 12:
            return new Ze(t5);
          case 13:
            return new qe(t5);
        }
        switch (De.extractNumericValueFromBitArray(t5, 1, 7)) {
          case 56:
            return new Je(t5, "310", "11");
          case 57:
            return new Je(t5, "320", "11");
          case 58:
            return new Je(t5, "310", "13");
          case 59:
            return new Je(t5, "320", "13");
          case 60:
            return new Je(t5, "310", "15");
          case 61:
            return new Je(t5, "320", "15");
          case 62:
            return new Je(t5, "310", "17");
          case 63:
            return new Je(t5, "320", "17");
        }
      } catch (e5) {
        throw console.log(e5), new yt("unknown decoder: " + t5);
      }
    }(me.buildBitArray(t4)).parseInformation(), r2 = t4[0].getFinderPattern().getResultPoints(), n2 = t4[t4.length - 1].getFinderPattern().getResultPoints(), o2 = [r2[0], r2[1], n2[0], n2[1]];
    return new et(e4, null, null, o2, nt.RSS_EXPANDED, null);
  }, e3.prototype.checkChecksum = function() {
    var t4 = this.pairs.get(0), e4 = t4.getLeftChar(), r2 = t4.getRightChar();
    if (null == r2)
      return false;
    for (var n2 = r2.getChecksumPortion(), o2 = 2, i3 = 1; i3 < this.pairs.size(); ++i3) {
      var a4 = this.pairs.get(i3);
      n2 += a4.getLeftChar().getChecksumPortion(), o2++;
      var u3 = a4.getRightChar();
      null != u3 && (n2 += u3.getChecksumPortion(), o2++);
    }
    return 211 * (o2 - 4) + (n2 %= 211) == e4.getValue();
  }, e3.getNextSecondBar = function(t4, e4) {
    var r2;
    return t4.get(e4) ? (r2 = t4.getNextUnset(e4), r2 = t4.getNextSet(r2)) : (r2 = t4.getNextSet(e4), r2 = t4.getNextUnset(r2)), r2;
  }, e3.prototype.retrieveNextPair = function(t4, r2, n2) {
    var o2, i3 = r2.length % 2 == 0;
    this.startFromEven && (i3 = !i3);
    var a4 = true, u3 = -1;
    do {
      this.findNextPair(t4, r2, u3), null == (o2 = this.parseFoundFinderPattern(t4, n2, i3)) ? u3 = e3.getNextSecondBar(t4, this.startEnd[0]) : a4 = false;
    } while (a4);
    var s4, c7 = this.decodeDataCharacter(t4, o2, i3, true);
    if (!this.isEmptyPair(r2) && r2[r2.length - 1].mustBeLast())
      throw new U();
    try {
      s4 = this.decodeDataCharacter(t4, o2, i3, false);
    } catch (t5) {
      s4 = null, console.log(t5);
    }
    return new $e(c7, s4, o2, true);
  }, e3.prototype.isEmptyPair = function(t4) {
    return 0 === t4.length;
  }, e3.prototype.findNextPair = function(t4, r2, n2) {
    var o2 = this.getDecodeFinderCounters();
    o2[0] = 0, o2[1] = 0, o2[2] = 0, o2[3] = 0;
    var i3, a4 = t4.getSize();
    if (n2 >= 0)
      i3 = n2;
    else if (this.isEmptyPair(r2))
      i3 = 0;
    else {
      i3 = r2[r2.length - 1].getFinderPattern().getStartEnd()[1];
    }
    var u3 = r2.length % 2 != 0;
    this.startFromEven && (u3 = !u3);
    for (var s4 = false; i3 < a4 && (s4 = !t4.get(i3)); )
      i3++;
    for (var c7 = 0, f2 = i3, h4 = i3; h4 < a4; h4++)
      if (t4.get(h4) != s4)
        o2[c7]++;
      else {
        if (3 == c7) {
          if (u3 && e3.reverseCounters(o2), e3.isFinderPattern(o2))
            return this.startEnd[0] = f2, void (this.startEnd[1] = h4);
          u3 && e3.reverseCounters(o2), f2 += o2[0] + o2[1], o2[0] = o2[2], o2[1] = o2[3], o2[2] = 0, o2[3] = 0, c7--;
        } else
          c7++;
        o2[c7] = 1, s4 = !s4;
      }
    throw new U();
  }, e3.reverseCounters = function(t4) {
    for (var e4 = t4.length, r2 = 0; r2 < e4 / 2; ++r2) {
      var n2 = t4[r2];
      t4[r2] = t4[e4 - r2 - 1], t4[e4 - r2 - 1] = n2;
    }
  }, e3.prototype.parseFoundFinderPattern = function(t4, r2, n2) {
    var o2, i3, a4;
    if (n2) {
      for (var u3 = this.startEnd[0] - 1; u3 >= 0 && !t4.get(u3); )
        u3--;
      u3++, o2 = this.startEnd[0] - u3, i3 = u3, a4 = this.startEnd[1];
    } else
      i3 = this.startEnd[0], o2 = (a4 = t4.getNextUnset(this.startEnd[1] + 1)) - this.startEnd[1];
    var s4, c7 = this.getDecodeFinderCounters();
    w$2.arraycopy(c7, 0, c7, 1, c7.length - 1), c7[0] = o2;
    try {
      s4 = this.parseFinderValue(c7, e3.FINDER_PATTERNS);
    } catch (t5) {
      return null;
    }
    return new we(s4, [i3, a4], i3, a4, r2);
  }, e3.prototype.decodeDataCharacter = function(t4, r2, n2, o2) {
    for (var i3 = this.getDataCharacterCounters(), a4 = 0; a4 < i3.length; a4++)
      i3[a4] = 0;
    if (o2)
      e3.recordPatternInReverse(t4, r2.getStartEnd()[0], i3);
    else {
      e3.recordPattern(t4, r2.getStartEnd()[1], i3);
      for (var u3 = 0, s4 = i3.length - 1; u3 < s4; u3++, s4--) {
        var c7 = i3[u3];
        i3[u3] = i3[s4], i3[s4] = c7;
      }
    }
    var f2 = vt.sum(new Int32Array(i3)) / 17, h4 = (r2.getStartEnd()[1] - r2.getStartEnd()[0]) / 15;
    if (Math.abs(f2 - h4) / h4 > 0.3)
      throw new U();
    var l2 = this.getOddCounts(), d4 = this.getEvenCounts(), p2 = this.getOddRoundingErrors(), g2 = this.getEvenRoundingErrors();
    for (u3 = 0; u3 < i3.length; u3++) {
      var y4 = 1 * i3[u3] / f2, w3 = y4 + 0.5;
      if (w3 < 1) {
        if (y4 < 0.3)
          throw new U();
        w3 = 1;
      } else if (w3 > 8) {
        if (y4 > 8.7)
          throw new U();
        w3 = 8;
      }
      var _2 = u3 / 2;
      0 == (1 & u3) ? (l2[_2] = w3, p2[_2] = y4 - w3) : (d4[_2] = w3, g2[_2] = y4 - w3);
    }
    this.adjustOddEvenCounts(17);
    var v2 = 4 * r2.getValue() + (n2 ? 0 : 2) + (o2 ? 0 : 1) - 1, m4 = 0, A2 = 0;
    for (u3 = l2.length - 1; u3 >= 0; u3--) {
      if (e3.isNotA1left(r2, n2, o2)) {
        var E3 = e3.WEIGHTS[v2][2 * u3];
        A2 += l2[u3] * E3;
      }
      m4 += l2[u3];
    }
    var C2 = 0;
    for (u3 = d4.length - 1; u3 >= 0; u3--)
      if (e3.isNotA1left(r2, n2, o2)) {
        E3 = e3.WEIGHTS[v2][2 * u3 + 1];
        C2 += d4[u3] * E3;
      }
    var I3 = A2 + C2;
    if (0 != (1 & m4) || m4 > 13 || m4 < 4)
      throw new U();
    var S4 = (13 - m4) / 2, O3 = e3.SYMBOL_WIDEST[S4], T3 = 9 - O3, b3 = ve.getRSSvalue(l2, O3, true), R3 = ve.getRSSvalue(d4, T3, false), N2 = e3.EVEN_TOTAL_SUBSET[S4], D3 = e3.GSUM[S4];
    return new ye(b3 * N2 + R3 + D3, I3);
  }, e3.isNotA1left = function(t4, e4, r2) {
    return !(0 == t4.getValue() && e4 && r2);
  }, e3.prototype.adjustOddEvenCounts = function(t4) {
    var r2 = vt.sum(new Int32Array(this.getOddCounts())), n2 = vt.sum(new Int32Array(this.getEvenCounts())), o2 = false, i3 = false;
    r2 > 13 ? i3 = true : r2 < 4 && (o2 = true);
    var a4 = false, u3 = false;
    n2 > 13 ? u3 = true : n2 < 4 && (a4 = true);
    var s4 = r2 + n2 - t4, c7 = 1 == (1 & r2), f2 = 0 == (1 & n2);
    if (1 == s4)
      if (c7) {
        if (f2)
          throw new U();
        i3 = true;
      } else {
        if (!f2)
          throw new U();
        u3 = true;
      }
    else if (-1 == s4)
      if (c7) {
        if (f2)
          throw new U();
        o2 = true;
      } else {
        if (!f2)
          throw new U();
        a4 = true;
      }
    else {
      if (0 != s4)
        throw new U();
      if (c7) {
        if (!f2)
          throw new U();
        r2 < n2 ? (o2 = true, u3 = true) : (i3 = true, a4 = true);
      } else if (f2)
        throw new U();
    }
    if (o2) {
      if (i3)
        throw new U();
      e3.increment(this.getOddCounts(), this.getOddRoundingErrors());
    }
    if (i3 && e3.decrement(this.getOddCounts(), this.getOddRoundingErrors()), a4) {
      if (u3)
        throw new U();
      e3.increment(this.getEvenCounts(), this.getOddRoundingErrors());
    }
    u3 && e3.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());
  }, e3.SYMBOL_WIDEST = [7, 5, 4, 3, 1], e3.EVEN_TOTAL_SUBSET = [4, 20, 52, 104, 204], e3.GSUM = [0, 348, 1388, 2948, 3988], e3.FINDER_PATTERNS = [Int32Array.from([1, 8, 4, 1]), Int32Array.from([3, 6, 4, 1]), Int32Array.from([3, 4, 6, 1]), Int32Array.from([3, 2, 8, 1]), Int32Array.from([2, 6, 5, 1]), Int32Array.from([2, 2, 9, 1])], e3.WEIGHTS = [[1, 3, 9, 27, 81, 32, 96, 77], [20, 60, 180, 118, 143, 7, 21, 63], [189, 145, 13, 39, 117, 140, 209, 205], [193, 157, 49, 147, 19, 57, 171, 91], [62, 186, 136, 197, 169, 85, 44, 132], [185, 133, 188, 142, 4, 12, 36, 108], [113, 128, 173, 97, 80, 29, 87, 50], [150, 28, 84, 41, 123, 158, 52, 156], [46, 138, 203, 187, 139, 206, 196, 166], [76, 17, 51, 153, 37, 111, 122, 155], [43, 129, 176, 106, 107, 110, 119, 146], [16, 48, 144, 10, 30, 90, 59, 177], [109, 116, 137, 200, 178, 112, 125, 164], [70, 210, 208, 202, 184, 130, 179, 115], [134, 191, 151, 31, 93, 68, 204, 190], [148, 22, 66, 198, 172, 94, 71, 2], [6, 18, 54, 162, 64, 192, 154, 40], [120, 149, 25, 75, 14, 42, 126, 167], [79, 26, 78, 23, 69, 207, 199, 175], [103, 98, 83, 38, 114, 131, 182, 124], [161, 61, 183, 127, 170, 88, 53, 159], [55, 165, 73, 8, 24, 72, 5, 15], [45, 135, 194, 160, 58, 174, 100, 89]], e3.FINDER_PAT_A = 0, e3.FINDER_PAT_B = 1, e3.FINDER_PAT_C = 2, e3.FINDER_PAT_D = 3, e3.FINDER_PAT_E = 4, e3.FINDER_PAT_F = 5, e3.FINDER_PATTERN_SEQUENCES = [[e3.FINDER_PAT_A, e3.FINDER_PAT_A], [e3.FINDER_PAT_A, e3.FINDER_PAT_B, e3.FINDER_PAT_B], [e3.FINDER_PAT_A, e3.FINDER_PAT_C, e3.FINDER_PAT_B, e3.FINDER_PAT_D], [e3.FINDER_PAT_A, e3.FINDER_PAT_E, e3.FINDER_PAT_B, e3.FINDER_PAT_D, e3.FINDER_PAT_C], [e3.FINDER_PAT_A, e3.FINDER_PAT_E, e3.FINDER_PAT_B, e3.FINDER_PAT_D, e3.FINDER_PAT_D, e3.FINDER_PAT_F], [e3.FINDER_PAT_A, e3.FINDER_PAT_E, e3.FINDER_PAT_B, e3.FINDER_PAT_D, e3.FINDER_PAT_E, e3.FINDER_PAT_F, e3.FINDER_PAT_F], [e3.FINDER_PAT_A, e3.FINDER_PAT_A, e3.FINDER_PAT_B, e3.FINDER_PAT_B, e3.FINDER_PAT_C, e3.FINDER_PAT_C, e3.FINDER_PAT_D, e3.FINDER_PAT_D], [e3.FINDER_PAT_A, e3.FINDER_PAT_A, e3.FINDER_PAT_B, e3.FINDER_PAT_B, e3.FINDER_PAT_C, e3.FINDER_PAT_C, e3.FINDER_PAT_D, e3.FINDER_PAT_E, e3.FINDER_PAT_E], [e3.FINDER_PAT_A, e3.FINDER_PAT_A, e3.FINDER_PAT_B, e3.FINDER_PAT_B, e3.FINDER_PAT_C, e3.FINDER_PAT_C, e3.FINDER_PAT_D, e3.FINDER_PAT_E, e3.FINDER_PAT_F, e3.FINDER_PAT_F], [e3.FINDER_PAT_A, e3.FINDER_PAT_A, e3.FINDER_PAT_B, e3.FINDER_PAT_B, e3.FINDER_PAT_C, e3.FINDER_PAT_D, e3.FINDER_PAT_D, e3.FINDER_PAT_E, e3.FINDER_PAT_E, e3.FINDER_PAT_F, e3.FINDER_PAT_F]], e3.MAX_PAIRS = 11, e3;
}(ge), or = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), ir = function(t3) {
  function e3(e4, r2, n2) {
    var o2 = t3.call(this, e4, r2) || this;
    return o2.count = 0, o2.finderPattern = n2, o2;
  }
  return or(e3, t3), e3.prototype.getFinderPattern = function() {
    return this.finderPattern;
  }, e3.prototype.getCount = function() {
    return this.count;
  }, e3.prototype.incrementCount = function() {
    this.count++;
  }, e3;
}(ye), ar = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), ur = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, sr = function(t3) {
  function e3() {
    var e4 = null !== t3 && t3.apply(this, arguments) || this;
    return e4.possibleLeftPairs = [], e4.possibleRightPairs = [], e4;
  }
  return ar(e3, t3), e3.prototype.decodeRow = function(t4, r2, n2) {
    var o2, i3, a4, u3, s4 = this.decodePair(r2, false, t4, n2);
    e3.addOrTally(this.possibleLeftPairs, s4), r2.reverse();
    var c7 = this.decodePair(r2, true, t4, n2);
    e3.addOrTally(this.possibleRightPairs, c7), r2.reverse();
    try {
      for (var f2 = ur(this.possibleLeftPairs), h4 = f2.next(); !h4.done; h4 = f2.next()) {
        var l2 = h4.value;
        if (l2.getCount() > 1)
          try {
            for (var d4 = (a4 = void 0, ur(this.possibleRightPairs)), p2 = d4.next(); !p2.done; p2 = d4.next()) {
              var g2 = p2.value;
              if (g2.getCount() > 1 && e3.checkChecksum(l2, g2))
                return e3.constructResult(l2, g2);
            }
          } catch (t5) {
            a4 = { error: t5 };
          } finally {
            try {
              p2 && !p2.done && (u3 = d4.return) && u3.call(d4);
            } finally {
              if (a4)
                throw a4.error;
            }
          }
      }
    } catch (t5) {
      o2 = { error: t5 };
    } finally {
      try {
        h4 && !h4.done && (i3 = f2.return) && i3.call(f2);
      } finally {
        if (o2)
          throw o2.error;
      }
    }
    throw new U();
  }, e3.addOrTally = function(t4, e4) {
    var r2, n2;
    if (null != e4) {
      var o2 = false;
      try {
        for (var i3 = ur(t4), a4 = i3.next(); !a4.done; a4 = i3.next()) {
          var u3 = a4.value;
          if (u3.getValue() === e4.getValue()) {
            u3.incrementCount(), o2 = true;
            break;
          }
        }
      } catch (t5) {
        r2 = { error: t5 };
      } finally {
        try {
          a4 && !a4.done && (n2 = i3.return) && n2.call(i3);
        } finally {
          if (r2)
            throw r2.error;
        }
      }
      o2 || t4.push(e4);
    }
  }, e3.prototype.reset = function() {
    this.possibleLeftPairs.length = 0, this.possibleRightPairs.length = 0;
  }, e3.constructResult = function(t4, e4) {
    for (var r2 = 4537077 * t4.getValue() + e4.getValue(), n2 = new String(r2).toString(), o2 = new k(), i3 = 13 - n2.length; i3 > 0; i3--)
      o2.append("0");
    o2.append(n2);
    var a4 = 0;
    for (i3 = 0; i3 < 13; i3++) {
      var u3 = o2.charAt(i3).charCodeAt(0) - "0".charCodeAt(0);
      a4 += 0 == (1 & i3) ? 3 * u3 : u3;
    }
    10 === (a4 = 10 - a4 % 10) && (a4 = 0), o2.append(a4.toString());
    var s4 = t4.getFinderPattern().getResultPoints(), c7 = e4.getFinderPattern().getResultPoints();
    return new et(o2.toString(), null, 0, [s4[0], s4[1], c7[0], c7[1]], nt.RSS_14, (/* @__PURE__ */ new Date()).getTime());
  }, e3.checkChecksum = function(t4, e4) {
    var r2 = (t4.getChecksumPortion() + 16 * e4.getChecksumPortion()) % 79, n2 = 9 * t4.getFinderPattern().getValue() + e4.getFinderPattern().getValue();
    return n2 > 72 && n2--, n2 > 8 && n2--, r2 === n2;
  }, e3.prototype.decodePair = function(t4, e4, r2, n2) {
    try {
      var o2 = this.findFinderPattern(t4, e4), i3 = this.parseFoundFinderPattern(t4, r2, e4, o2), a4 = null == n2 ? null : n2.get(T.NEED_RESULT_POINT_CALLBACK);
      if (null != a4) {
        var u3 = (o2[0] + o2[1]) / 2;
        e4 && (u3 = t4.getSize() - 1 - u3), a4.foundPossibleResultPoint(new At(u3, r2));
      }
      var s4 = this.decodeDataCharacter(t4, i3, true), c7 = this.decodeDataCharacter(t4, i3, false);
      return new ir(1597 * s4.getValue() + c7.getValue(), s4.getChecksumPortion() + 4 * c7.getChecksumPortion(), i3);
    } catch (t5) {
      return null;
    }
  }, e3.prototype.decodeDataCharacter = function(t4, r2, n2) {
    for (var o2 = this.getDataCharacterCounters(), i3 = 0; i3 < o2.length; i3++)
      o2[i3] = 0;
    if (n2)
      Lt.recordPatternInReverse(t4, r2.getStartEnd()[0], o2);
    else {
      Lt.recordPattern(t4, r2.getStartEnd()[1] + 1, o2);
      for (var a4 = 0, u3 = o2.length - 1; a4 < u3; a4++, u3--) {
        var s4 = o2[a4];
        o2[a4] = o2[u3], o2[u3] = s4;
      }
    }
    var c7 = n2 ? 16 : 15, f2 = vt.sum(new Int32Array(o2)) / c7, h4 = this.getOddCounts(), l2 = this.getEvenCounts(), d4 = this.getOddRoundingErrors(), p2 = this.getEvenRoundingErrors();
    for (a4 = 0; a4 < o2.length; a4++) {
      var g2 = o2[a4] / f2, y4 = Math.floor(g2 + 0.5);
      y4 < 1 ? y4 = 1 : y4 > 8 && (y4 = 8);
      var w3 = Math.floor(a4 / 2);
      0 == (1 & a4) ? (h4[w3] = y4, d4[w3] = g2 - y4) : (l2[w3] = y4, p2[w3] = g2 - y4);
    }
    this.adjustOddEvenCounts(n2, c7);
    var _2 = 0, v2 = 0;
    for (a4 = h4.length - 1; a4 >= 0; a4--)
      v2 *= 9, v2 += h4[a4], _2 += h4[a4];
    var m4 = 0, A2 = 0;
    for (a4 = l2.length - 1; a4 >= 0; a4--)
      m4 *= 9, m4 += l2[a4], A2 += l2[a4];
    var E3 = v2 + 3 * m4;
    if (n2) {
      if (0 != (1 & _2) || _2 > 12 || _2 < 4)
        throw new U();
      var C2 = (12 - _2) / 2, I3 = 9 - (R3 = e3.OUTSIDE_ODD_WIDEST[C2]), S4 = ve.getRSSvalue(h4, R3, false), O3 = ve.getRSSvalue(l2, I3, true), T3 = e3.OUTSIDE_EVEN_TOTAL_SUBSET[C2], b3 = e3.OUTSIDE_GSUM[C2];
      return new ye(S4 * T3 + O3 + b3, E3);
    }
    if (0 != (1 & A2) || A2 > 10 || A2 < 4)
      throw new U();
    C2 = (10 - A2) / 2, I3 = 9 - (R3 = e3.INSIDE_ODD_WIDEST[C2]), S4 = ve.getRSSvalue(h4, R3, true), O3 = ve.getRSSvalue(l2, I3, false);
    var R3, N2 = e3.INSIDE_ODD_TOTAL_SUBSET[C2];
    b3 = e3.INSIDE_GSUM[C2];
    return new ye(O3 * N2 + S4 + b3, E3);
  }, e3.prototype.findFinderPattern = function(t4, e4) {
    var r2 = this.getDecodeFinderCounters();
    r2[0] = 0, r2[1] = 0, r2[2] = 0, r2[3] = 0;
    for (var n2 = t4.getSize(), o2 = false, i3 = 0; i3 < n2 && e4 !== (o2 = !t4.get(i3)); )
      i3++;
    for (var a4 = 0, u3 = i3, s4 = i3; s4 < n2; s4++)
      if (t4.get(s4) !== o2)
        r2[a4]++;
      else {
        if (3 === a4) {
          if (ge.isFinderPattern(r2))
            return [u3, s4];
          u3 += r2[0] + r2[1], r2[0] = r2[2], r2[1] = r2[3], r2[2] = 0, r2[3] = 0, a4--;
        } else
          a4++;
        r2[a4] = 1, o2 = !o2;
      }
    throw new U();
  }, e3.prototype.parseFoundFinderPattern = function(t4, r2, n2, o2) {
    for (var i3 = t4.get(o2[0]), a4 = o2[0] - 1; a4 >= 0 && i3 !== t4.get(a4); )
      a4--;
    a4++;
    var u3 = o2[0] - a4, s4 = this.getDecodeFinderCounters(), c7 = new Int32Array(s4.length);
    w$2.arraycopy(s4, 0, c7, 1, s4.length - 1), c7[0] = u3;
    var f2 = this.parseFinderValue(c7, e3.FINDER_PATTERNS), h4 = a4, l2 = o2[1];
    return n2 && (h4 = t4.getSize() - 1 - h4, l2 = t4.getSize() - 1 - l2), new we(f2, [a4, o2[1]], h4, l2, r2);
  }, e3.prototype.adjustOddEvenCounts = function(t4, e4) {
    var r2 = vt.sum(new Int32Array(this.getOddCounts())), n2 = vt.sum(new Int32Array(this.getEvenCounts())), o2 = false, i3 = false, a4 = false, u3 = false;
    t4 ? (r2 > 12 ? i3 = true : r2 < 4 && (o2 = true), n2 > 12 ? u3 = true : n2 < 4 && (a4 = true)) : (r2 > 11 ? i3 = true : r2 < 5 && (o2 = true), n2 > 10 ? u3 = true : n2 < 4 && (a4 = true));
    var s4 = r2 + n2 - e4, c7 = (1 & r2) == (t4 ? 1 : 0), f2 = 1 == (1 & n2);
    if (1 === s4)
      if (c7) {
        if (f2)
          throw new U();
        i3 = true;
      } else {
        if (!f2)
          throw new U();
        u3 = true;
      }
    else if (-1 === s4)
      if (c7) {
        if (f2)
          throw new U();
        o2 = true;
      } else {
        if (!f2)
          throw new U();
        a4 = true;
      }
    else {
      if (0 !== s4)
        throw new U();
      if (c7) {
        if (!f2)
          throw new U();
        r2 < n2 ? (o2 = true, u3 = true) : (i3 = true, a4 = true);
      } else if (f2)
        throw new U();
    }
    if (o2) {
      if (i3)
        throw new U();
      ge.increment(this.getOddCounts(), this.getOddRoundingErrors());
    }
    if (i3 && ge.decrement(this.getOddCounts(), this.getOddRoundingErrors()), a4) {
      if (u3)
        throw new U();
      ge.increment(this.getEvenCounts(), this.getOddRoundingErrors());
    }
    u3 && ge.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());
  }, e3.OUTSIDE_EVEN_TOTAL_SUBSET = [1, 10, 34, 70, 126], e3.INSIDE_ODD_TOTAL_SUBSET = [4, 20, 48, 81], e3.OUTSIDE_GSUM = [0, 161, 961, 2015, 2715], e3.INSIDE_GSUM = [0, 336, 1036, 1516], e3.OUTSIDE_ODD_WIDEST = [8, 6, 4, 3, 1], e3.INSIDE_ODD_WIDEST = [2, 4, 6, 8], e3.FINDER_PATTERNS = [Int32Array.from([3, 8, 2, 1]), Int32Array.from([3, 5, 5, 1]), Int32Array.from([3, 3, 7, 1]), Int32Array.from([3, 1, 9, 1]), Int32Array.from([2, 7, 4, 1]), Int32Array.from([2, 5, 6, 1]), Int32Array.from([2, 3, 8, 1]), Int32Array.from([1, 5, 7, 1]), Int32Array.from([1, 3, 9, 1])], e3;
}(ge), cr = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), fr$2 = function(t3) {
  function e3(e4) {
    var r2 = t3.call(this) || this;
    r2.readers = [];
    var n2 = e4 ? e4.get(T.POSSIBLE_FORMATS) : null, o2 = e4 && void 0 !== e4.get(T.ASSUME_CODE_39_CHECK_DIGIT);
    return n2 && ((n2.includes(nt.EAN_13) || n2.includes(nt.UPC_A) || n2.includes(nt.EAN_8) || n2.includes(nt.UPC_E)) && r2.readers.push(new le(e4)), n2.includes(nt.CODE_39) && r2.readers.push(new Ut(o2)), n2.includes(nt.CODE_128) && r2.readers.push(new kt()), n2.includes(nt.ITF) && r2.readers.push(new Xt()), n2.includes(nt.RSS_14) && r2.readers.push(new sr()), n2.includes(nt.RSS_EXPANDED) && (console.warn("RSS Expanded reader IS NOT ready for production yet! use at your own risk."), r2.readers.push(new nr()))), 0 === r2.readers.length && (r2.readers.push(new le(e4)), r2.readers.push(new Ut()), r2.readers.push(new le(e4)), r2.readers.push(new kt()), r2.readers.push(new Xt()), r2.readers.push(new sr())), r2;
  }
  return cr(e3, t3), e3.prototype.decodeRow = function(t4, e4, r2) {
    for (var n2 = 0; n2 < this.readers.length; n2++)
      try {
        return this.readers[n2].decodeRow(t4, e4, r2);
      } catch (t5) {
      }
    throw new U();
  }, e3.prototype.reset = function() {
    this.readers.forEach(function(t4) {
      return t4.reset();
    });
  }, e3;
}(Lt), hr = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2) {
    return void 0 === e4 && (e4 = 500), t3.call(this, new fr$2(r2), e4, r2) || this;
  }
  hr(e3, t3);
}(tt);
var lr, dr = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, pr = function() {
  function t3(t4, e3, r2) {
    this.ecCodewords = t4, this.ecBlocks = [e3], r2 && this.ecBlocks.push(r2);
  }
  return t3.prototype.getECCodewords = function() {
    return this.ecCodewords;
  }, t3.prototype.getECBlocks = function() {
    return this.ecBlocks;
  }, t3;
}(), gr = function() {
  function t3(t4, e3) {
    this.count = t4, this.dataCodewords = e3;
  }
  return t3.prototype.getCount = function() {
    return this.count;
  }, t3.prototype.getDataCodewords = function() {
    return this.dataCodewords;
  }, t3;
}(), yr = function() {
  function t3(t4, e3, r2, n2, o2, i3) {
    var a4, u3;
    this.versionNumber = t4, this.symbolSizeRows = e3, this.symbolSizeColumns = r2, this.dataRegionSizeRows = n2, this.dataRegionSizeColumns = o2, this.ecBlocks = i3;
    var s4 = 0, c7 = i3.getECCodewords(), f2 = i3.getECBlocks();
    try {
      for (var h4 = dr(f2), l2 = h4.next(); !l2.done; l2 = h4.next()) {
        var d4 = l2.value;
        s4 += d4.getCount() * (d4.getDataCodewords() + c7);
      }
    } catch (t5) {
      a4 = { error: t5 };
    } finally {
      try {
        l2 && !l2.done && (u3 = h4.return) && u3.call(h4);
      } finally {
        if (a4)
          throw a4.error;
      }
    }
    this.totalCodewords = s4;
  }
  return t3.prototype.getVersionNumber = function() {
    return this.versionNumber;
  }, t3.prototype.getSymbolSizeRows = function() {
    return this.symbolSizeRows;
  }, t3.prototype.getSymbolSizeColumns = function() {
    return this.symbolSizeColumns;
  }, t3.prototype.getDataRegionSizeRows = function() {
    return this.dataRegionSizeRows;
  }, t3.prototype.getDataRegionSizeColumns = function() {
    return this.dataRegionSizeColumns;
  }, t3.prototype.getTotalCodewords = function() {
    return this.totalCodewords;
  }, t3.prototype.getECBlocks = function() {
    return this.ecBlocks;
  }, t3.getVersionForDimensions = function(e3, r2) {
    var n2, o2;
    if (0 != (1 & e3) || 0 != (1 & r2))
      throw new R();
    try {
      for (var i3 = dr(t3.VERSIONS), a4 = i3.next(); !a4.done; a4 = i3.next()) {
        var u3 = a4.value;
        if (u3.symbolSizeRows === e3 && u3.symbolSizeColumns === r2)
          return u3;
      }
    } catch (t4) {
      n2 = { error: t4 };
    } finally {
      try {
        a4 && !a4.done && (o2 = i3.return) && o2.call(i3);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
    throw new R();
  }, t3.prototype.toString = function() {
    return "" + this.versionNumber;
  }, t3.buildVersions = function() {
    return [new t3(1, 10, 10, 8, 8, new pr(5, new gr(1, 3))), new t3(2, 12, 12, 10, 10, new pr(7, new gr(1, 5))), new t3(3, 14, 14, 12, 12, new pr(10, new gr(1, 8))), new t3(4, 16, 16, 14, 14, new pr(12, new gr(1, 12))), new t3(5, 18, 18, 16, 16, new pr(14, new gr(1, 18))), new t3(6, 20, 20, 18, 18, new pr(18, new gr(1, 22))), new t3(7, 22, 22, 20, 20, new pr(20, new gr(1, 30))), new t3(8, 24, 24, 22, 22, new pr(24, new gr(1, 36))), new t3(9, 26, 26, 24, 24, new pr(28, new gr(1, 44))), new t3(10, 32, 32, 14, 14, new pr(36, new gr(1, 62))), new t3(11, 36, 36, 16, 16, new pr(42, new gr(1, 86))), new t3(12, 40, 40, 18, 18, new pr(48, new gr(1, 114))), new t3(13, 44, 44, 20, 20, new pr(56, new gr(1, 144))), new t3(14, 48, 48, 22, 22, new pr(68, new gr(1, 174))), new t3(15, 52, 52, 24, 24, new pr(42, new gr(2, 102))), new t3(16, 64, 64, 14, 14, new pr(56, new gr(2, 140))), new t3(17, 72, 72, 16, 16, new pr(36, new gr(4, 92))), new t3(18, 80, 80, 18, 18, new pr(48, new gr(4, 114))), new t3(19, 88, 88, 20, 20, new pr(56, new gr(4, 144))), new t3(20, 96, 96, 22, 22, new pr(68, new gr(4, 174))), new t3(21, 104, 104, 24, 24, new pr(56, new gr(6, 136))), new t3(22, 120, 120, 18, 18, new pr(68, new gr(6, 175))), new t3(23, 132, 132, 20, 20, new pr(62, new gr(8, 163))), new t3(24, 144, 144, 22, 22, new pr(62, new gr(8, 156), new gr(2, 155))), new t3(25, 8, 18, 6, 16, new pr(7, new gr(1, 5))), new t3(26, 8, 32, 6, 14, new pr(11, new gr(1, 10))), new t3(27, 12, 26, 10, 24, new pr(14, new gr(1, 16))), new t3(28, 12, 36, 10, 16, new pr(18, new gr(1, 22))), new t3(29, 16, 36, 14, 16, new pr(24, new gr(1, 32))), new t3(30, 16, 48, 14, 22, new pr(28, new gr(1, 49)))];
  }, t3.VERSIONS = t3.buildVersions(), t3;
}(), wr = function() {
  function t3(e3) {
    var r2 = e3.getHeight();
    if (r2 < 8 || r2 > 144 || 0 != (1 & r2))
      throw new R();
    this.version = t3.readVersion(e3), this.mappingBitMatrix = this.extractDataRegion(e3), this.readMappingMatrix = new x(this.mappingBitMatrix.getWidth(), this.mappingBitMatrix.getHeight());
  }
  return t3.prototype.getVersion = function() {
    return this.version;
  }, t3.readVersion = function(t4) {
    var e3 = t4.getHeight(), r2 = t4.getWidth();
    return yr.getVersionForDimensions(e3, r2);
  }, t3.prototype.readCodewords = function() {
    var t4 = new Int8Array(this.version.getTotalCodewords()), e3 = 0, r2 = 4, n2 = 0, o2 = this.mappingBitMatrix.getHeight(), i3 = this.mappingBitMatrix.getWidth(), a4 = false, u3 = false, s4 = false, c7 = false;
    do {
      if (r2 !== o2 || 0 !== n2 || a4)
        if (r2 !== o2 - 2 || 0 !== n2 || 0 == (3 & i3) || u3)
          if (r2 !== o2 + 4 || 2 !== n2 || 0 != (7 & i3) || s4)
            if (r2 !== o2 - 2 || 0 !== n2 || 4 != (7 & i3) || c7) {
              do {
                r2 < o2 && n2 >= 0 && !this.readMappingMatrix.get(n2, r2) && (t4[e3++] = 255 & this.readUtah(r2, n2, o2, i3)), r2 -= 2, n2 += 2;
              } while (r2 >= 0 && n2 < i3);
              r2 += 1, n2 += 3;
              do {
                r2 >= 0 && n2 < i3 && !this.readMappingMatrix.get(n2, r2) && (t4[e3++] = 255 & this.readUtah(r2, n2, o2, i3)), r2 += 2, n2 -= 2;
              } while (r2 < o2 && n2 >= 0);
              r2 += 3, n2 += 1;
            } else
              t4[e3++] = 255 & this.readCorner4(o2, i3), r2 -= 2, n2 += 2, c7 = true;
          else
            t4[e3++] = 255 & this.readCorner3(o2, i3), r2 -= 2, n2 += 2, s4 = true;
        else
          t4[e3++] = 255 & this.readCorner2(o2, i3), r2 -= 2, n2 += 2, u3 = true;
      else
        t4[e3++] = 255 & this.readCorner1(o2, i3), r2 -= 2, n2 += 2, a4 = true;
    } while (r2 < o2 || n2 < i3);
    if (e3 !== this.version.getTotalCodewords())
      throw new R();
    return t4;
  }, t3.prototype.readModule = function(t4, e3, r2, n2) {
    return t4 < 0 && (t4 += r2, e3 += 4 - (r2 + 4 & 7)), e3 < 0 && (e3 += n2, t4 += 4 - (n2 + 4 & 7)), this.readMappingMatrix.set(e3, t4), this.mappingBitMatrix.get(e3, t4);
  }, t3.prototype.readUtah = function(t4, e3, r2, n2) {
    var o2 = 0;
    return this.readModule(t4 - 2, e3 - 2, r2, n2) && (o2 |= 1), o2 <<= 1, this.readModule(t4 - 2, e3 - 1, r2, n2) && (o2 |= 1), o2 <<= 1, this.readModule(t4 - 1, e3 - 2, r2, n2) && (o2 |= 1), o2 <<= 1, this.readModule(t4 - 1, e3 - 1, r2, n2) && (o2 |= 1), o2 <<= 1, this.readModule(t4 - 1, e3, r2, n2) && (o2 |= 1), o2 <<= 1, this.readModule(t4, e3 - 2, r2, n2) && (o2 |= 1), o2 <<= 1, this.readModule(t4, e3 - 1, r2, n2) && (o2 |= 1), o2 <<= 1, this.readModule(t4, e3, r2, n2) && (o2 |= 1), o2;
  }, t3.prototype.readCorner1 = function(t4, e3) {
    var r2 = 0;
    return this.readModule(t4 - 1, 0, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(t4 - 1, 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(t4 - 1, 2, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 2, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(1, e3 - 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(2, e3 - 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(3, e3 - 1, t4, e3) && (r2 |= 1), r2;
  }, t3.prototype.readCorner2 = function(t4, e3) {
    var r2 = 0;
    return this.readModule(t4 - 3, 0, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(t4 - 2, 0, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(t4 - 1, 0, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 4, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 3, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 2, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(1, e3 - 1, t4, e3) && (r2 |= 1), r2;
  }, t3.prototype.readCorner3 = function(t4, e3) {
    var r2 = 0;
    return this.readModule(t4 - 1, 0, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(t4 - 1, e3 - 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 3, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 2, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(1, e3 - 3, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(1, e3 - 2, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(1, e3 - 1, t4, e3) && (r2 |= 1), r2;
  }, t3.prototype.readCorner4 = function(t4, e3) {
    var r2 = 0;
    return this.readModule(t4 - 3, 0, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(t4 - 2, 0, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(t4 - 1, 0, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 2, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(0, e3 - 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(1, e3 - 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(2, e3 - 1, t4, e3) && (r2 |= 1), r2 <<= 1, this.readModule(3, e3 - 1, t4, e3) && (r2 |= 1), r2;
  }, t3.prototype.extractDataRegion = function(t4) {
    var e3 = this.version.getSymbolSizeRows(), r2 = this.version.getSymbolSizeColumns();
    if (t4.getHeight() !== e3)
      throw new l("Dimension of bitMatrix must match the version size");
    for (var n2 = this.version.getDataRegionSizeRows(), o2 = this.version.getDataRegionSizeColumns(), i3 = e3 / n2 | 0, a4 = r2 / o2 | 0, u3 = new x(a4 * o2, i3 * n2), s4 = 0; s4 < i3; ++s4)
      for (var c7 = s4 * n2, f2 = 0; f2 < a4; ++f2)
        for (var h4 = f2 * o2, d4 = 0; d4 < n2; ++d4)
          for (var p2 = s4 * (n2 + 2) + 1 + d4, g2 = c7 + d4, y4 = 0; y4 < o2; ++y4) {
            var w3 = f2 * (o2 + 2) + 1 + y4;
            if (t4.get(w3, p2)) {
              var _2 = h4 + y4;
              u3.set(_2, g2);
            }
          }
    return u3;
  }, t3;
}(), _r = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, vr = function() {
  function t3(t4, e3) {
    this.numDataCodewords = t4, this.codewords = e3;
  }
  return t3.getDataBlocks = function(e3, r2) {
    var n2, o2, i3, a4, u3 = r2.getECBlocks(), s4 = 0, c7 = u3.getECBlocks();
    try {
      for (var f2 = _r(c7), h4 = f2.next(); !h4.done; h4 = f2.next()) {
        s4 += (w3 = h4.value).getCount();
      }
    } catch (t4) {
      n2 = { error: t4 };
    } finally {
      try {
        h4 && !h4.done && (o2 = f2.return) && o2.call(f2);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
    var d4 = new Array(s4), p2 = 0;
    try {
      for (var g2 = _r(c7), y4 = g2.next(); !y4.done; y4 = g2.next())
        for (var w3 = y4.value, _2 = 0; _2 < w3.getCount(); _2++) {
          var v2 = w3.getDataCodewords(), m4 = u3.getECCodewords() + v2;
          d4[p2++] = new t3(v2, new Uint8Array(m4));
        }
    } catch (t4) {
      i3 = { error: t4 };
    } finally {
      try {
        y4 && !y4.done && (a4 = g2.return) && a4.call(g2);
      } finally {
        if (i3)
          throw i3.error;
      }
    }
    var A2 = d4[0].codewords.length - u3.getECCodewords(), E3 = A2 - 1, C2 = 0;
    for (_2 = 0; _2 < E3; _2++)
      for (var I3 = 0; I3 < p2; I3++)
        d4[I3].codewords[_2] = e3[C2++];
    var S4 = 24 === r2.getVersionNumber(), O3 = S4 ? 8 : p2;
    for (I3 = 0; I3 < O3; I3++)
      d4[I3].codewords[A2 - 1] = e3[C2++];
    var T3 = d4[0].codewords.length;
    for (_2 = A2; _2 < T3; _2++)
      for (I3 = 0; I3 < p2; I3++) {
        var b3 = S4 ? (I3 + 8) % p2 : I3, R3 = S4 && b3 > 7 ? _2 - 1 : _2;
        d4[b3].codewords[R3] = e3[C2++];
      }
    if (C2 !== e3.length)
      throw new l();
    return d4;
  }, t3.prototype.getNumDataCodewords = function() {
    return this.numDataCodewords;
  }, t3.prototype.getCodewords = function() {
    return this.codewords;
  }, t3;
}(), mr = function() {
  function t3(t4) {
    this.bytes = t4, this.byteOffset = 0, this.bitOffset = 0;
  }
  return t3.prototype.getBitOffset = function() {
    return this.bitOffset;
  }, t3.prototype.getByteOffset = function() {
    return this.byteOffset;
  }, t3.prototype.readBits = function(t4) {
    if (t4 < 1 || t4 > 32 || t4 > this.available())
      throw new l("" + t4);
    var e3 = 0, r2 = this.bitOffset, n2 = this.byteOffset, o2 = this.bytes;
    if (r2 > 0) {
      var i3 = 8 - r2, a4 = t4 < i3 ? t4 : i3, u3 = 255 >> 8 - a4 << (s4 = i3 - a4);
      e3 = (o2[n2] & u3) >> s4, t4 -= a4, 8 === (r2 += a4) && (r2 = 0, n2++);
    }
    if (t4 > 0) {
      for (; t4 >= 8; )
        e3 = e3 << 8 | 255 & o2[n2], n2++, t4 -= 8;
      if (t4 > 0) {
        var s4;
        u3 = 255 >> (s4 = 8 - t4) << s4;
        e3 = e3 << t4 | (o2[n2] & u3) >> s4, r2 += t4;
      }
    }
    return this.bitOffset = r2, this.byteOffset = n2, e3;
  }, t3.prototype.available = function() {
    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
  }, t3;
}();
!function(t3) {
  t3[t3.PAD_ENCODE = 0] = "PAD_ENCODE", t3[t3.ASCII_ENCODE = 1] = "ASCII_ENCODE", t3[t3.C40_ENCODE = 2] = "C40_ENCODE", t3[t3.TEXT_ENCODE = 3] = "TEXT_ENCODE", t3[t3.ANSIX12_ENCODE = 4] = "ANSIX12_ENCODE", t3[t3.EDIFACT_ENCODE = 5] = "EDIFACT_ENCODE", t3[t3.BASE256_ENCODE = 6] = "BASE256_ENCODE";
}(lr || (lr = {}));
var Ar, Er = function() {
  function t3() {
  }
  return t3.decode = function(t4) {
    var e3 = new mr(t4), r2 = new k(), n2 = new k(), o2 = new Array(), i3 = lr.ASCII_ENCODE;
    do {
      if (i3 === lr.ASCII_ENCODE)
        i3 = this.decodeAsciiSegment(e3, r2, n2);
      else {
        switch (i3) {
          case lr.C40_ENCODE:
            this.decodeC40Segment(e3, r2);
            break;
          case lr.TEXT_ENCODE:
            this.decodeTextSegment(e3, r2);
            break;
          case lr.ANSIX12_ENCODE:
            this.decodeAnsiX12Segment(e3, r2);
            break;
          case lr.EDIFACT_ENCODE:
            this.decodeEdifactSegment(e3, r2);
            break;
          case lr.BASE256_ENCODE:
            this.decodeBase256Segment(e3, r2, o2);
            break;
          default:
            throw new R();
        }
        i3 = lr.ASCII_ENCODE;
      }
    } while (i3 !== lr.PAD_ENCODE && e3.available() > 0);
    return n2.length() > 0 && r2.append(n2.toString()), new at(t4, r2.toString(), 0 === o2.length ? null : o2, null);
  }, t3.decodeAsciiSegment = function(t4, e3, r2) {
    var n2 = false;
    do {
      var o2 = t4.readBits(8);
      if (0 === o2)
        throw new R();
      if (o2 <= 128)
        return n2 && (o2 += 128), e3.append(String.fromCharCode(o2 - 1)), lr.ASCII_ENCODE;
      if (129 === o2)
        return lr.PAD_ENCODE;
      if (o2 <= 229) {
        var i3 = o2 - 130;
        i3 < 10 && e3.append("0"), e3.append("" + i3);
      } else
        switch (o2) {
          case 230:
            return lr.C40_ENCODE;
          case 231:
            return lr.BASE256_ENCODE;
          case 232:
            e3.append(String.fromCharCode(29));
            break;
          case 233:
          case 234:
          case 241:
            break;
          case 235:
            n2 = true;
            break;
          case 236:
            e3.append("[)>05"), r2.insert(0, "");
            break;
          case 237:
            e3.append("[)>06"), r2.insert(0, "");
            break;
          case 238:
            return lr.ANSIX12_ENCODE;
          case 239:
            return lr.TEXT_ENCODE;
          case 240:
            return lr.EDIFACT_ENCODE;
          default:
            if (254 !== o2 || 0 !== t4.available())
              throw new R();
        }
    } while (t4.available() > 0);
    return lr.ASCII_ENCODE;
  }, t3.decodeC40Segment = function(t4, e3) {
    var r2 = false, n2 = [], o2 = 0;
    do {
      if (8 === t4.available())
        return;
      var i3 = t4.readBits(8);
      if (254 === i3)
        return;
      this.parseTwoBytes(i3, t4.readBits(8), n2);
      for (var a4 = 0; a4 < 3; a4++) {
        var u3 = n2[a4];
        switch (o2) {
          case 0:
            if (u3 < 3)
              o2 = u3 + 1;
            else {
              if (!(u3 < this.C40_BASIC_SET_CHARS.length))
                throw new R();
              var s4 = this.C40_BASIC_SET_CHARS[u3];
              r2 ? (e3.append(String.fromCharCode(s4.charCodeAt(0) + 128)), r2 = false) : e3.append(s4);
            }
            break;
          case 1:
            r2 ? (e3.append(String.fromCharCode(u3 + 128)), r2 = false) : e3.append(String.fromCharCode(u3)), o2 = 0;
            break;
          case 2:
            if (u3 < this.C40_SHIFT2_SET_CHARS.length) {
              s4 = this.C40_SHIFT2_SET_CHARS[u3];
              r2 ? (e3.append(String.fromCharCode(s4.charCodeAt(0) + 128)), r2 = false) : e3.append(s4);
            } else
              switch (u3) {
                case 27:
                  e3.append(String.fromCharCode(29));
                  break;
                case 30:
                  r2 = true;
                  break;
                default:
                  throw new R();
              }
            o2 = 0;
            break;
          case 3:
            r2 ? (e3.append(String.fromCharCode(u3 + 224)), r2 = false) : e3.append(String.fromCharCode(u3 + 96)), o2 = 0;
            break;
          default:
            throw new R();
        }
      }
    } while (t4.available() > 0);
  }, t3.decodeTextSegment = function(t4, e3) {
    var r2 = false, n2 = [], o2 = 0;
    do {
      if (8 === t4.available())
        return;
      var i3 = t4.readBits(8);
      if (254 === i3)
        return;
      this.parseTwoBytes(i3, t4.readBits(8), n2);
      for (var a4 = 0; a4 < 3; a4++) {
        var u3 = n2[a4];
        switch (o2) {
          case 0:
            if (u3 < 3)
              o2 = u3 + 1;
            else {
              if (!(u3 < this.TEXT_BASIC_SET_CHARS.length))
                throw new R();
              var s4 = this.TEXT_BASIC_SET_CHARS[u3];
              r2 ? (e3.append(String.fromCharCode(s4.charCodeAt(0) + 128)), r2 = false) : e3.append(s4);
            }
            break;
          case 1:
            r2 ? (e3.append(String.fromCharCode(u3 + 128)), r2 = false) : e3.append(String.fromCharCode(u3)), o2 = 0;
            break;
          case 2:
            if (u3 < this.TEXT_SHIFT2_SET_CHARS.length) {
              s4 = this.TEXT_SHIFT2_SET_CHARS[u3];
              r2 ? (e3.append(String.fromCharCode(s4.charCodeAt(0) + 128)), r2 = false) : e3.append(s4);
            } else
              switch (u3) {
                case 27:
                  e3.append(String.fromCharCode(29));
                  break;
                case 30:
                  r2 = true;
                  break;
                default:
                  throw new R();
              }
            o2 = 0;
            break;
          case 3:
            if (!(u3 < this.TEXT_SHIFT3_SET_CHARS.length))
              throw new R();
            s4 = this.TEXT_SHIFT3_SET_CHARS[u3];
            r2 ? (e3.append(String.fromCharCode(s4.charCodeAt(0) + 128)), r2 = false) : e3.append(s4), o2 = 0;
            break;
          default:
            throw new R();
        }
      }
    } while (t4.available() > 0);
  }, t3.decodeAnsiX12Segment = function(t4, e3) {
    var r2 = [];
    do {
      if (8 === t4.available())
        return;
      var n2 = t4.readBits(8);
      if (254 === n2)
        return;
      this.parseTwoBytes(n2, t4.readBits(8), r2);
      for (var o2 = 0; o2 < 3; o2++) {
        var i3 = r2[o2];
        switch (i3) {
          case 0:
            e3.append("\r");
            break;
          case 1:
            e3.append("*");
            break;
          case 2:
            e3.append(">");
            break;
          case 3:
            e3.append(" ");
            break;
          default:
            if (i3 < 14)
              e3.append(String.fromCharCode(i3 + 44));
            else {
              if (!(i3 < 40))
                throw new R();
              e3.append(String.fromCharCode(i3 + 51));
            }
        }
      }
    } while (t4.available() > 0);
  }, t3.parseTwoBytes = function(t4, e3, r2) {
    var n2 = (t4 << 8) + e3 - 1, o2 = Math.floor(n2 / 1600);
    r2[0] = o2, n2 -= 1600 * o2, o2 = Math.floor(n2 / 40), r2[1] = o2, r2[2] = n2 - 40 * o2;
  }, t3.decodeEdifactSegment = function(t4, e3) {
    do {
      if (t4.available() <= 16)
        return;
      for (var r2 = 0; r2 < 4; r2++) {
        var n2 = t4.readBits(6);
        if (31 === n2) {
          var o2 = 8 - t4.getBitOffset();
          return void (8 !== o2 && t4.readBits(o2));
        }
        0 == (32 & n2) && (n2 |= 64), e3.append(String.fromCharCode(n2));
      }
    } while (t4.available() > 0);
  }, t3.decodeBase256Segment = function(t4, e3, r2) {
    var n2, o2 = 1 + t4.getByteOffset(), i3 = this.unrandomize255State(t4.readBits(8), o2++);
    if ((n2 = 0 === i3 ? t4.available() / 8 | 0 : i3 < 250 ? i3 : 250 * (i3 - 249) + this.unrandomize255State(t4.readBits(8), o2++)) < 0)
      throw new R();
    for (var a4 = new Uint8Array(n2), u3 = 0; u3 < n2; u3++) {
      if (t4.available() < 8)
        throw new R();
      a4[u3] = this.unrandomize255State(t4.readBits(8), o2++);
    }
    r2.push(a4);
    try {
      e3.append(L.decode(a4, F.ISO88591));
    } catch (t5) {
      throw new yt("Platform does not support required encoding: " + t5.message);
    }
  }, t3.unrandomize255State = function(t4, e3) {
    var r2 = t4 - (149 * e3 % 255 + 1);
    return r2 >= 0 ? r2 : r2 + 256;
  }, t3.C40_BASIC_SET_CHARS = ["*", "*", "*", " ", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"], t3.C40_SHIFT2_SET_CHARS = ["!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_"], t3.TEXT_BASIC_SET_CHARS = ["*", "*", "*", " ", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], t3.TEXT_SHIFT2_SET_CHARS = t3.C40_SHIFT2_SET_CHARS, t3.TEXT_SHIFT3_SET_CHARS = ["`", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "{", "|", "}", "~", String.fromCharCode(127)], t3;
}(), Cr = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Ir = function() {
  function t3() {
    this.rsDecoder = new wt(lt.DATA_MATRIX_FIELD_256);
  }
  return t3.prototype.decode = function(t4) {
    var e3, r2, n2 = new wr(t4), o2 = n2.getVersion(), i3 = n2.readCodewords(), a4 = vr.getDataBlocks(i3, o2), u3 = 0;
    try {
      for (var s4 = Cr(a4), c7 = s4.next(); !c7.done; c7 = s4.next()) {
        u3 += c7.value.getNumDataCodewords();
      }
    } catch (t5) {
      e3 = { error: t5 };
    } finally {
      try {
        c7 && !c7.done && (r2 = s4.return) && r2.call(s4);
      } finally {
        if (e3)
          throw e3.error;
      }
    }
    for (var f2 = new Uint8Array(u3), h4 = a4.length, l2 = 0; l2 < h4; l2++) {
      var d4 = a4[l2], p2 = d4.getCodewords(), g2 = d4.getNumDataCodewords();
      this.correctErrors(p2, g2);
      for (var y4 = 0; y4 < g2; y4++)
        f2[y4 * h4 + l2] = p2[y4];
    }
    return Er.decode(f2);
  }, t3.prototype.correctErrors = function(t4, e3) {
    var r2 = new Int32Array(t4);
    try {
      this.rsDecoder.decode(r2, t4.length - e3);
    } catch (t5) {
      throw new g();
    }
    for (var n2 = 0; n2 < e3; n2++)
      t4[n2] = r2[n2];
  }, t3;
}(), Sr = function() {
  function t3(t4) {
    this.image = t4, this.rectangleDetector = new St(this.image);
  }
  return t3.prototype.detect = function() {
    var e3 = this.rectangleDetector.detect(), r2 = this.detectSolid1(e3);
    if ((r2 = this.detectSolid2(r2))[3] = this.correctTopRight(r2), !r2[3])
      throw new U();
    var n2 = (r2 = this.shiftToModuleCenter(r2))[0], o2 = r2[1], i3 = r2[2], a4 = r2[3], u3 = this.transitionsBetween(n2, a4) + 1, s4 = this.transitionsBetween(i3, a4) + 1;
    1 == (1 & u3) && (u3 += 1), 1 == (1 & s4) && (s4 += 1), 4 * u3 < 7 * s4 && 4 * s4 < 7 * u3 && (u3 = s4 = Math.max(u3, s4));
    var c7 = t3.sampleGrid(this.image, n2, o2, i3, a4, u3, s4);
    return new Et(c7, [n2, o2, i3, a4]);
  }, t3.shiftPoint = function(t4, e3, r2) {
    var n2 = (e3.getX() - t4.getX()) / (r2 + 1), o2 = (e3.getY() - t4.getY()) / (r2 + 1);
    return new At(t4.getX() + n2, t4.getY() + o2);
  }, t3.moveAway = function(t4, e3, r2) {
    var n2 = t4.getX(), o2 = t4.getY();
    return n2 < e3 ? n2 -= 1 : n2 += 1, o2 < r2 ? o2 -= 1 : o2 += 1, new At(n2, o2);
  }, t3.prototype.detectSolid1 = function(t4) {
    var e3 = t4[0], r2 = t4[1], n2 = t4[3], o2 = t4[2], i3 = this.transitionsBetween(e3, r2), a4 = this.transitionsBetween(r2, n2), u3 = this.transitionsBetween(n2, o2), s4 = this.transitionsBetween(o2, e3), c7 = i3, f2 = [o2, e3, r2, n2];
    return c7 > a4 && (c7 = a4, f2[0] = e3, f2[1] = r2, f2[2] = n2, f2[3] = o2), c7 > u3 && (c7 = u3, f2[0] = r2, f2[1] = n2, f2[2] = o2, f2[3] = e3), c7 > s4 && (f2[0] = n2, f2[1] = o2, f2[2] = e3, f2[3] = r2), f2;
  }, t3.prototype.detectSolid2 = function(e3) {
    var r2 = e3[0], n2 = e3[1], o2 = e3[2], i3 = e3[3], a4 = this.transitionsBetween(r2, i3), u3 = t3.shiftPoint(n2, o2, 4 * (a4 + 1)), s4 = t3.shiftPoint(o2, n2, 4 * (a4 + 1));
    return this.transitionsBetween(u3, r2) < this.transitionsBetween(s4, i3) ? (e3[0] = r2, e3[1] = n2, e3[2] = o2, e3[3] = i3) : (e3[0] = n2, e3[1] = o2, e3[2] = i3, e3[3] = r2), e3;
  }, t3.prototype.correctTopRight = function(e3) {
    var r2 = e3[0], n2 = e3[1], o2 = e3[2], i3 = e3[3], a4 = this.transitionsBetween(r2, i3), u3 = this.transitionsBetween(n2, i3), s4 = t3.shiftPoint(r2, n2, 4 * (u3 + 1)), c7 = t3.shiftPoint(o2, n2, 4 * (a4 + 1));
    a4 = this.transitionsBetween(s4, i3), u3 = this.transitionsBetween(c7, i3);
    var f2 = new At(i3.getX() + (o2.getX() - n2.getX()) / (a4 + 1), i3.getY() + (o2.getY() - n2.getY()) / (a4 + 1)), h4 = new At(i3.getX() + (r2.getX() - n2.getX()) / (u3 + 1), i3.getY() + (r2.getY() - n2.getY()) / (u3 + 1));
    return this.isValid(f2) ? this.isValid(h4) ? this.transitionsBetween(s4, f2) + this.transitionsBetween(c7, f2) > this.transitionsBetween(s4, h4) + this.transitionsBetween(c7, h4) ? f2 : h4 : f2 : this.isValid(h4) ? h4 : null;
  }, t3.prototype.shiftToModuleCenter = function(e3) {
    var r2 = e3[0], n2 = e3[1], o2 = e3[2], i3 = e3[3], a4 = this.transitionsBetween(r2, i3) + 1, u3 = this.transitionsBetween(o2, i3) + 1, s4 = t3.shiftPoint(r2, n2, 4 * u3), c7 = t3.shiftPoint(o2, n2, 4 * a4);
    1 == (1 & (a4 = this.transitionsBetween(s4, i3) + 1)) && (a4 += 1), 1 == (1 & (u3 = this.transitionsBetween(c7, i3) + 1)) && (u3 += 1);
    var f2, h4, l2 = (r2.getX() + n2.getX() + o2.getX() + i3.getX()) / 4, d4 = (r2.getY() + n2.getY() + o2.getY() + i3.getY()) / 4;
    return r2 = t3.moveAway(r2, l2, d4), n2 = t3.moveAway(n2, l2, d4), o2 = t3.moveAway(o2, l2, d4), i3 = t3.moveAway(i3, l2, d4), s4 = t3.shiftPoint(r2, n2, 4 * u3), s4 = t3.shiftPoint(s4, i3, 4 * a4), f2 = t3.shiftPoint(n2, r2, 4 * u3), f2 = t3.shiftPoint(f2, o2, 4 * a4), c7 = t3.shiftPoint(o2, i3, 4 * u3), c7 = t3.shiftPoint(c7, n2, 4 * a4), h4 = t3.shiftPoint(i3, o2, 4 * u3), [s4, f2, c7, h4 = t3.shiftPoint(h4, r2, 4 * a4)];
  }, t3.prototype.isValid = function(t4) {
    return t4.getX() >= 0 && t4.getX() < this.image.getWidth() && t4.getY() > 0 && t4.getY() < this.image.getHeight();
  }, t3.sampleGrid = function(t4, e3, r2, n2, o2, i3, a4) {
    return Nt.getInstance().sampleGrid(t4, i3, a4, 0.5, 0.5, i3 - 0.5, 0.5, i3 - 0.5, a4 - 0.5, 0.5, a4 - 0.5, e3.getX(), e3.getY(), o2.getX(), o2.getY(), n2.getX(), n2.getY(), r2.getX(), r2.getY());
  }, t3.prototype.transitionsBetween = function(t4, e3) {
    var r2 = Math.trunc(t4.getX()), n2 = Math.trunc(t4.getY()), o2 = Math.trunc(e3.getX()), i3 = Math.trunc(e3.getY()), a4 = Math.abs(i3 - n2) > Math.abs(o2 - r2);
    if (a4) {
      var u3 = r2;
      r2 = n2, n2 = u3, u3 = o2, o2 = i3, i3 = u3;
    }
    for (var s4 = Math.abs(o2 - r2), c7 = Math.abs(i3 - n2), f2 = -s4 / 2, h4 = n2 < i3 ? 1 : -1, l2 = r2 < o2 ? 1 : -1, d4 = 0, p2 = this.image.get(a4 ? n2 : r2, a4 ? r2 : n2), g2 = r2, y4 = n2; g2 !== o2; g2 += l2) {
      var w3 = this.image.get(a4 ? y4 : g2, a4 ? g2 : y4);
      if (w3 !== p2 && (d4++, p2 = w3), (f2 += c7) > 0) {
        if (y4 === i3)
          break;
        y4 += h4, f2 -= s4;
      }
    }
    return d4;
  }, t3;
}(), Or = function() {
  function t3() {
    this.decoder = new Ir();
  }
  return t3.prototype.decode = function(e3, r2) {
    var n2, o2;
    if (void 0 === r2 && (r2 = null), null != r2 && r2.has(T.PURE_BARCODE)) {
      var i3 = t3.extractPureBits(e3.getBlackMatrix());
      n2 = this.decoder.decode(i3), o2 = t3.NO_POINTS;
    } else {
      var a4 = new Sr(e3.getBlackMatrix()).detect();
      n2 = this.decoder.decode(a4.getBits()), o2 = a4.getPoints();
    }
    var u3 = n2.getRawBytes(), s4 = new et(n2.getText(), u3, 8 * u3.length, o2, nt.DATA_MATRIX, w$2.currentTimeMillis()), c7 = n2.getByteSegments();
    null != c7 && s4.putMetadata(it.BYTE_SEGMENTS, c7);
    var f2 = n2.getECLevel();
    return null != f2 && s4.putMetadata(it.ERROR_CORRECTION_LEVEL, f2), s4;
  }, t3.prototype.reset = function() {
  }, t3.extractPureBits = function(t4) {
    var e3 = t4.getTopLeftOnBit(), r2 = t4.getBottomRightOnBit();
    if (null == e3 || null == r2)
      throw new U();
    var n2 = this.moduleSize(e3, t4), o2 = e3[1], i3 = r2[1], a4 = e3[0], u3 = (r2[0] - a4 + 1) / n2, s4 = (i3 - o2 + 1) / n2;
    if (u3 <= 0 || s4 <= 0)
      throw new U();
    var c7 = n2 / 2;
    o2 += c7, a4 += c7;
    for (var f2 = new x(u3, s4), h4 = 0; h4 < s4; h4++)
      for (var l2 = o2 + h4 * n2, d4 = 0; d4 < u3; d4++)
        t4.get(a4 + d4 * n2, l2) && f2.set(d4, h4);
    return f2;
  }, t3.moduleSize = function(t4, e3) {
    for (var r2 = e3.getWidth(), n2 = t4[0], o2 = t4[1]; n2 < r2 && e3.get(n2, o2); )
      n2++;
    if (n2 === r2)
      throw new U();
    var i3 = n2 - t4[0];
    if (0 === i3)
      throw new U();
    return i3;
  }, t3.NO_POINTS = [], t3;
}(), Tr = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4) {
    return void 0 === e4 && (e4 = 500), t3.call(this, new Or(), e4) || this;
  }
  Tr(e3, t3);
}(tt), function(t3) {
  t3[t3.L = 0] = "L", t3[t3.M = 1] = "M", t3[t3.Q = 2] = "Q", t3[t3.H = 3] = "H";
}(Ar || (Ar = {}));
var br, Rr = function() {
  function t3(e3, r2, n2) {
    this.value = e3, this.stringValue = r2, this.bits = n2, t3.FOR_BITS.set(n2, this), t3.FOR_VALUE.set(e3, this);
  }
  return t3.prototype.getValue = function() {
    return this.value;
  }, t3.prototype.getBits = function() {
    return this.bits;
  }, t3.fromString = function(e3) {
    switch (e3) {
      case "L":
        return t3.L;
      case "M":
        return t3.M;
      case "Q":
        return t3.Q;
      case "H":
        return t3.H;
      default:
        throw new f(e3 + "not available");
    }
  }, t3.prototype.toString = function() {
    return this.stringValue;
  }, t3.prototype.equals = function(e3) {
    if (!(e3 instanceof t3))
      return false;
    var r2 = e3;
    return this.value === r2.value;
  }, t3.forBits = function(e3) {
    if (e3 < 0 || e3 >= t3.FOR_BITS.size)
      throw new l();
    return t3.FOR_BITS.get(e3);
  }, t3.FOR_BITS = /* @__PURE__ */ new Map(), t3.FOR_VALUE = /* @__PURE__ */ new Map(), t3.L = new t3(Ar.L, "L", 1), t3.M = new t3(Ar.M, "M", 0), t3.Q = new t3(Ar.Q, "Q", 3), t3.H = new t3(Ar.H, "H", 2), t3;
}(), Nr = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Dr = function() {
  function t3(t4) {
    this.errorCorrectionLevel = Rr.forBits(t4 >> 3 & 3), this.dataMask = 7 & t4;
  }
  return t3.numBitsDiffering = function(t4, e3) {
    return I.bitCount(t4 ^ e3);
  }, t3.decodeFormatInformation = function(e3, r2) {
    var n2 = t3.doDecodeFormatInformation(e3, r2);
    return null !== n2 ? n2 : t3.doDecodeFormatInformation(e3 ^ t3.FORMAT_INFO_MASK_QR, r2 ^ t3.FORMAT_INFO_MASK_QR);
  }, t3.doDecodeFormatInformation = function(e3, r2) {
    var n2, o2, i3 = Number.MAX_SAFE_INTEGER, a4 = 0;
    try {
      for (var u3 = Nr(t3.FORMAT_INFO_DECODE_LOOKUP), s4 = u3.next(); !s4.done; s4 = u3.next()) {
        var c7 = s4.value, f2 = c7[0];
        if (f2 === e3 || f2 === r2)
          return new t3(c7[1]);
        var h4 = t3.numBitsDiffering(e3, f2);
        h4 < i3 && (a4 = c7[1], i3 = h4), e3 !== r2 && (h4 = t3.numBitsDiffering(r2, f2)) < i3 && (a4 = c7[1], i3 = h4);
      }
    } catch (t4) {
      n2 = { error: t4 };
    } finally {
      try {
        s4 && !s4.done && (o2 = u3.return) && o2.call(u3);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
    return i3 <= 3 ? new t3(a4) : null;
  }, t3.prototype.getErrorCorrectionLevel = function() {
    return this.errorCorrectionLevel;
  }, t3.prototype.getDataMask = function() {
    return this.dataMask;
  }, t3.prototype.hashCode = function() {
    return this.errorCorrectionLevel.getBits() << 3 | this.dataMask;
  }, t3.prototype.equals = function(e3) {
    if (!(e3 instanceof t3))
      return false;
    var r2 = e3;
    return this.errorCorrectionLevel === r2.errorCorrectionLevel && this.dataMask === r2.dataMask;
  }, t3.FORMAT_INFO_MASK_QR = 21522, t3.FORMAT_INFO_DECODE_LOOKUP = [Int32Array.from([21522, 0]), Int32Array.from([20773, 1]), Int32Array.from([24188, 2]), Int32Array.from([23371, 3]), Int32Array.from([17913, 4]), Int32Array.from([16590, 5]), Int32Array.from([20375, 6]), Int32Array.from([19104, 7]), Int32Array.from([30660, 8]), Int32Array.from([29427, 9]), Int32Array.from([32170, 10]), Int32Array.from([30877, 11]), Int32Array.from([26159, 12]), Int32Array.from([25368, 13]), Int32Array.from([27713, 14]), Int32Array.from([26998, 15]), Int32Array.from([5769, 16]), Int32Array.from([5054, 17]), Int32Array.from([7399, 18]), Int32Array.from([6608, 19]), Int32Array.from([1890, 20]), Int32Array.from([597, 21]), Int32Array.from([3340, 22]), Int32Array.from([2107, 23]), Int32Array.from([13663, 24]), Int32Array.from([12392, 25]), Int32Array.from([16177, 26]), Int32Array.from([14854, 27]), Int32Array.from([9396, 28]), Int32Array.from([8579, 29]), Int32Array.from([11994, 30]), Int32Array.from([11245, 31])], t3;
}(), Pr = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Mr = function() {
  function t3(t4) {
    for (var e3 = [], r2 = 1; r2 < arguments.length; r2++)
      e3[r2 - 1] = arguments[r2];
    this.ecCodewordsPerBlock = t4, this.ecBlocks = e3;
  }
  return t3.prototype.getECCodewordsPerBlock = function() {
    return this.ecCodewordsPerBlock;
  }, t3.prototype.getNumBlocks = function() {
    var t4, e3, r2 = 0, n2 = this.ecBlocks;
    try {
      for (var o2 = Pr(n2), i3 = o2.next(); !i3.done; i3 = o2.next()) {
        r2 += i3.value.getCount();
      }
    } catch (e4) {
      t4 = { error: e4 };
    } finally {
      try {
        i3 && !i3.done && (e3 = o2.return) && e3.call(o2);
      } finally {
        if (t4)
          throw t4.error;
      }
    }
    return r2;
  }, t3.prototype.getTotalECCodewords = function() {
    return this.ecCodewordsPerBlock * this.getNumBlocks();
  }, t3.prototype.getECBlocks = function() {
    return this.ecBlocks;
  }, t3;
}(), Br = function() {
  function t3(t4, e3) {
    this.count = t4, this.dataCodewords = e3;
  }
  return t3.prototype.getCount = function() {
    return this.count;
  }, t3.prototype.getDataCodewords = function() {
    return this.dataCodewords;
  }, t3;
}(), Lr = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Fr = function() {
  function t3(t4, e3) {
    for (var r2, n2, o2 = [], i3 = 2; i3 < arguments.length; i3++)
      o2[i3 - 2] = arguments[i3];
    this.versionNumber = t4, this.alignmentPatternCenters = e3, this.ecBlocks = o2;
    var a4 = 0, u3 = o2[0].getECCodewordsPerBlock(), s4 = o2[0].getECBlocks();
    try {
      for (var c7 = Lr(s4), f2 = c7.next(); !f2.done; f2 = c7.next()) {
        var h4 = f2.value;
        a4 += h4.getCount() * (h4.getDataCodewords() + u3);
      }
    } catch (t5) {
      r2 = { error: t5 };
    } finally {
      try {
        f2 && !f2.done && (n2 = c7.return) && n2.call(c7);
      } finally {
        if (r2)
          throw r2.error;
      }
    }
    this.totalCodewords = a4;
  }
  return t3.prototype.getVersionNumber = function() {
    return this.versionNumber;
  }, t3.prototype.getAlignmentPatternCenters = function() {
    return this.alignmentPatternCenters;
  }, t3.prototype.getTotalCodewords = function() {
    return this.totalCodewords;
  }, t3.prototype.getDimensionForVersion = function() {
    return 17 + 4 * this.versionNumber;
  }, t3.prototype.getECBlocksForLevel = function(t4) {
    return this.ecBlocks[t4.getValue()];
  }, t3.getProvisionalVersionForDimension = function(t4) {
    if (t4 % 4 != 1)
      throw new R();
    try {
      return this.getVersionForNumber((t4 - 17) / 4);
    } catch (t5) {
      throw new R();
    }
  }, t3.getVersionForNumber = function(e3) {
    if (e3 < 1 || e3 > 40)
      throw new l();
    return t3.VERSIONS[e3 - 1];
  }, t3.decodeVersionInformation = function(e3) {
    for (var r2 = Number.MAX_SAFE_INTEGER, n2 = 0, o2 = 0; o2 < t3.VERSION_DECODE_INFO.length; o2++) {
      var i3 = t3.VERSION_DECODE_INFO[o2];
      if (i3 === e3)
        return t3.getVersionForNumber(o2 + 7);
      var a4 = Dr.numBitsDiffering(e3, i3);
      a4 < r2 && (n2 = o2 + 7, r2 = a4);
    }
    return r2 <= 3 ? t3.getVersionForNumber(n2) : null;
  }, t3.prototype.buildFunctionPattern = function() {
    var t4 = this.getDimensionForVersion(), e3 = new x(t4);
    e3.setRegion(0, 0, 9, 9), e3.setRegion(t4 - 8, 0, 8, 9), e3.setRegion(0, t4 - 8, 9, 8);
    for (var r2 = this.alignmentPatternCenters.length, n2 = 0; n2 < r2; n2++)
      for (var o2 = this.alignmentPatternCenters[n2] - 2, i3 = 0; i3 < r2; i3++)
        0 === n2 && (0 === i3 || i3 === r2 - 1) || n2 === r2 - 1 && 0 === i3 || e3.setRegion(this.alignmentPatternCenters[i3] - 2, o2, 5, 5);
    return e3.setRegion(6, 9, 1, t4 - 17), e3.setRegion(9, 6, t4 - 17, 1), this.versionNumber > 6 && (e3.setRegion(t4 - 11, 0, 3, 6), e3.setRegion(0, t4 - 11, 6, 3)), e3;
  }, t3.prototype.toString = function() {
    return "" + this.versionNumber;
  }, t3.VERSION_DECODE_INFO = Int32Array.from([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136944, 141498, 145311, 150283, 152622, 158308, 161089, 167017]), t3.VERSIONS = [new t3(1, new Int32Array(0), new Mr(7, new Br(1, 19)), new Mr(10, new Br(1, 16)), new Mr(13, new Br(1, 13)), new Mr(17, new Br(1, 9))), new t3(2, Int32Array.from([6, 18]), new Mr(10, new Br(1, 34)), new Mr(16, new Br(1, 28)), new Mr(22, new Br(1, 22)), new Mr(28, new Br(1, 16))), new t3(3, Int32Array.from([6, 22]), new Mr(15, new Br(1, 55)), new Mr(26, new Br(1, 44)), new Mr(18, new Br(2, 17)), new Mr(22, new Br(2, 13))), new t3(4, Int32Array.from([6, 26]), new Mr(20, new Br(1, 80)), new Mr(18, new Br(2, 32)), new Mr(26, new Br(2, 24)), new Mr(16, new Br(4, 9))), new t3(5, Int32Array.from([6, 30]), new Mr(26, new Br(1, 108)), new Mr(24, new Br(2, 43)), new Mr(18, new Br(2, 15), new Br(2, 16)), new Mr(22, new Br(2, 11), new Br(2, 12))), new t3(6, Int32Array.from([6, 34]), new Mr(18, new Br(2, 68)), new Mr(16, new Br(4, 27)), new Mr(24, new Br(4, 19)), new Mr(28, new Br(4, 15))), new t3(7, Int32Array.from([6, 22, 38]), new Mr(20, new Br(2, 78)), new Mr(18, new Br(4, 31)), new Mr(18, new Br(2, 14), new Br(4, 15)), new Mr(26, new Br(4, 13), new Br(1, 14))), new t3(8, Int32Array.from([6, 24, 42]), new Mr(24, new Br(2, 97)), new Mr(22, new Br(2, 38), new Br(2, 39)), new Mr(22, new Br(4, 18), new Br(2, 19)), new Mr(26, new Br(4, 14), new Br(2, 15))), new t3(9, Int32Array.from([6, 26, 46]), new Mr(30, new Br(2, 116)), new Mr(22, new Br(3, 36), new Br(2, 37)), new Mr(20, new Br(4, 16), new Br(4, 17)), new Mr(24, new Br(4, 12), new Br(4, 13))), new t3(10, Int32Array.from([6, 28, 50]), new Mr(18, new Br(2, 68), new Br(2, 69)), new Mr(26, new Br(4, 43), new Br(1, 44)), new Mr(24, new Br(6, 19), new Br(2, 20)), new Mr(28, new Br(6, 15), new Br(2, 16))), new t3(11, Int32Array.from([6, 30, 54]), new Mr(20, new Br(4, 81)), new Mr(30, new Br(1, 50), new Br(4, 51)), new Mr(28, new Br(4, 22), new Br(4, 23)), new Mr(24, new Br(3, 12), new Br(8, 13))), new t3(12, Int32Array.from([6, 32, 58]), new Mr(24, new Br(2, 92), new Br(2, 93)), new Mr(22, new Br(6, 36), new Br(2, 37)), new Mr(26, new Br(4, 20), new Br(6, 21)), new Mr(28, new Br(7, 14), new Br(4, 15))), new t3(13, Int32Array.from([6, 34, 62]), new Mr(26, new Br(4, 107)), new Mr(22, new Br(8, 37), new Br(1, 38)), new Mr(24, new Br(8, 20), new Br(4, 21)), new Mr(22, new Br(12, 11), new Br(4, 12))), new t3(14, Int32Array.from([6, 26, 46, 66]), new Mr(30, new Br(3, 115), new Br(1, 116)), new Mr(24, new Br(4, 40), new Br(5, 41)), new Mr(20, new Br(11, 16), new Br(5, 17)), new Mr(24, new Br(11, 12), new Br(5, 13))), new t3(15, Int32Array.from([6, 26, 48, 70]), new Mr(22, new Br(5, 87), new Br(1, 88)), new Mr(24, new Br(5, 41), new Br(5, 42)), new Mr(30, new Br(5, 24), new Br(7, 25)), new Mr(24, new Br(11, 12), new Br(7, 13))), new t3(16, Int32Array.from([6, 26, 50, 74]), new Mr(24, new Br(5, 98), new Br(1, 99)), new Mr(28, new Br(7, 45), new Br(3, 46)), new Mr(24, new Br(15, 19), new Br(2, 20)), new Mr(30, new Br(3, 15), new Br(13, 16))), new t3(17, Int32Array.from([6, 30, 54, 78]), new Mr(28, new Br(1, 107), new Br(5, 108)), new Mr(28, new Br(10, 46), new Br(1, 47)), new Mr(28, new Br(1, 22), new Br(15, 23)), new Mr(28, new Br(2, 14), new Br(17, 15))), new t3(18, Int32Array.from([6, 30, 56, 82]), new Mr(30, new Br(5, 120), new Br(1, 121)), new Mr(26, new Br(9, 43), new Br(4, 44)), new Mr(28, new Br(17, 22), new Br(1, 23)), new Mr(28, new Br(2, 14), new Br(19, 15))), new t3(19, Int32Array.from([6, 30, 58, 86]), new Mr(28, new Br(3, 113), new Br(4, 114)), new Mr(26, new Br(3, 44), new Br(11, 45)), new Mr(26, new Br(17, 21), new Br(4, 22)), new Mr(26, new Br(9, 13), new Br(16, 14))), new t3(20, Int32Array.from([6, 34, 62, 90]), new Mr(28, new Br(3, 107), new Br(5, 108)), new Mr(26, new Br(3, 41), new Br(13, 42)), new Mr(30, new Br(15, 24), new Br(5, 25)), new Mr(28, new Br(15, 15), new Br(10, 16))), new t3(21, Int32Array.from([6, 28, 50, 72, 94]), new Mr(28, new Br(4, 116), new Br(4, 117)), new Mr(26, new Br(17, 42)), new Mr(28, new Br(17, 22), new Br(6, 23)), new Mr(30, new Br(19, 16), new Br(6, 17))), new t3(22, Int32Array.from([6, 26, 50, 74, 98]), new Mr(28, new Br(2, 111), new Br(7, 112)), new Mr(28, new Br(17, 46)), new Mr(30, new Br(7, 24), new Br(16, 25)), new Mr(24, new Br(34, 13))), new t3(23, Int32Array.from([6, 30, 54, 78, 102]), new Mr(30, new Br(4, 121), new Br(5, 122)), new Mr(28, new Br(4, 47), new Br(14, 48)), new Mr(30, new Br(11, 24), new Br(14, 25)), new Mr(30, new Br(16, 15), new Br(14, 16))), new t3(24, Int32Array.from([6, 28, 54, 80, 106]), new Mr(30, new Br(6, 117), new Br(4, 118)), new Mr(28, new Br(6, 45), new Br(14, 46)), new Mr(30, new Br(11, 24), new Br(16, 25)), new Mr(30, new Br(30, 16), new Br(2, 17))), new t3(25, Int32Array.from([6, 32, 58, 84, 110]), new Mr(26, new Br(8, 106), new Br(4, 107)), new Mr(28, new Br(8, 47), new Br(13, 48)), new Mr(30, new Br(7, 24), new Br(22, 25)), new Mr(30, new Br(22, 15), new Br(13, 16))), new t3(26, Int32Array.from([6, 30, 58, 86, 114]), new Mr(28, new Br(10, 114), new Br(2, 115)), new Mr(28, new Br(19, 46), new Br(4, 47)), new Mr(28, new Br(28, 22), new Br(6, 23)), new Mr(30, new Br(33, 16), new Br(4, 17))), new t3(27, Int32Array.from([6, 34, 62, 90, 118]), new Mr(30, new Br(8, 122), new Br(4, 123)), new Mr(28, new Br(22, 45), new Br(3, 46)), new Mr(30, new Br(8, 23), new Br(26, 24)), new Mr(30, new Br(12, 15), new Br(28, 16))), new t3(28, Int32Array.from([6, 26, 50, 74, 98, 122]), new Mr(30, new Br(3, 117), new Br(10, 118)), new Mr(28, new Br(3, 45), new Br(23, 46)), new Mr(30, new Br(4, 24), new Br(31, 25)), new Mr(30, new Br(11, 15), new Br(31, 16))), new t3(29, Int32Array.from([6, 30, 54, 78, 102, 126]), new Mr(30, new Br(7, 116), new Br(7, 117)), new Mr(28, new Br(21, 45), new Br(7, 46)), new Mr(30, new Br(1, 23), new Br(37, 24)), new Mr(30, new Br(19, 15), new Br(26, 16))), new t3(30, Int32Array.from([6, 26, 52, 78, 104, 130]), new Mr(30, new Br(5, 115), new Br(10, 116)), new Mr(28, new Br(19, 47), new Br(10, 48)), new Mr(30, new Br(15, 24), new Br(25, 25)), new Mr(30, new Br(23, 15), new Br(25, 16))), new t3(31, Int32Array.from([6, 30, 56, 82, 108, 134]), new Mr(30, new Br(13, 115), new Br(3, 116)), new Mr(28, new Br(2, 46), new Br(29, 47)), new Mr(30, new Br(42, 24), new Br(1, 25)), new Mr(30, new Br(23, 15), new Br(28, 16))), new t3(32, Int32Array.from([6, 34, 60, 86, 112, 138]), new Mr(30, new Br(17, 115)), new Mr(28, new Br(10, 46), new Br(23, 47)), new Mr(30, new Br(10, 24), new Br(35, 25)), new Mr(30, new Br(19, 15), new Br(35, 16))), new t3(33, Int32Array.from([6, 30, 58, 86, 114, 142]), new Mr(30, new Br(17, 115), new Br(1, 116)), new Mr(28, new Br(14, 46), new Br(21, 47)), new Mr(30, new Br(29, 24), new Br(19, 25)), new Mr(30, new Br(11, 15), new Br(46, 16))), new t3(34, Int32Array.from([6, 34, 62, 90, 118, 146]), new Mr(30, new Br(13, 115), new Br(6, 116)), new Mr(28, new Br(14, 46), new Br(23, 47)), new Mr(30, new Br(44, 24), new Br(7, 25)), new Mr(30, new Br(59, 16), new Br(1, 17))), new t3(35, Int32Array.from([6, 30, 54, 78, 102, 126, 150]), new Mr(30, new Br(12, 121), new Br(7, 122)), new Mr(28, new Br(12, 47), new Br(26, 48)), new Mr(30, new Br(39, 24), new Br(14, 25)), new Mr(30, new Br(22, 15), new Br(41, 16))), new t3(36, Int32Array.from([6, 24, 50, 76, 102, 128, 154]), new Mr(30, new Br(6, 121), new Br(14, 122)), new Mr(28, new Br(6, 47), new Br(34, 48)), new Mr(30, new Br(46, 24), new Br(10, 25)), new Mr(30, new Br(2, 15), new Br(64, 16))), new t3(37, Int32Array.from([6, 28, 54, 80, 106, 132, 158]), new Mr(30, new Br(17, 122), new Br(4, 123)), new Mr(28, new Br(29, 46), new Br(14, 47)), new Mr(30, new Br(49, 24), new Br(10, 25)), new Mr(30, new Br(24, 15), new Br(46, 16))), new t3(38, Int32Array.from([6, 32, 58, 84, 110, 136, 162]), new Mr(30, new Br(4, 122), new Br(18, 123)), new Mr(28, new Br(13, 46), new Br(32, 47)), new Mr(30, new Br(48, 24), new Br(14, 25)), new Mr(30, new Br(42, 15), new Br(32, 16))), new t3(39, Int32Array.from([6, 26, 54, 82, 110, 138, 166]), new Mr(30, new Br(20, 117), new Br(4, 118)), new Mr(28, new Br(40, 47), new Br(7, 48)), new Mr(30, new Br(43, 24), new Br(22, 25)), new Mr(30, new Br(10, 15), new Br(67, 16))), new t3(40, Int32Array.from([6, 30, 58, 86, 114, 142, 170]), new Mr(30, new Br(19, 118), new Br(6, 119)), new Mr(28, new Br(18, 47), new Br(31, 48)), new Mr(30, new Br(34, 24), new Br(34, 25)), new Mr(30, new Br(20, 15), new Br(61, 16)))], t3;
}();
!function(t3) {
  t3[t3.DATA_MASK_000 = 0] = "DATA_MASK_000", t3[t3.DATA_MASK_001 = 1] = "DATA_MASK_001", t3[t3.DATA_MASK_010 = 2] = "DATA_MASK_010", t3[t3.DATA_MASK_011 = 3] = "DATA_MASK_011", t3[t3.DATA_MASK_100 = 4] = "DATA_MASK_100", t3[t3.DATA_MASK_101 = 5] = "DATA_MASK_101", t3[t3.DATA_MASK_110 = 6] = "DATA_MASK_110", t3[t3.DATA_MASK_111 = 7] = "DATA_MASK_111";
}(br || (br = {}));
var kr, xr = function() {
  function t3(t4, e3) {
    this.value = t4, this.isMasked = e3;
  }
  return t3.prototype.unmaskBitMatrix = function(t4, e3) {
    for (var r2 = 0; r2 < e3; r2++)
      for (var n2 = 0; n2 < e3; n2++)
        this.isMasked(r2, n2) && t4.flip(n2, r2);
  }, t3.values = /* @__PURE__ */ new Map([[br.DATA_MASK_000, new t3(br.DATA_MASK_000, function(t4, e3) {
    return 0 == (t4 + e3 & 1);
  })], [br.DATA_MASK_001, new t3(br.DATA_MASK_001, function(t4, e3) {
    return 0 == (1 & t4);
  })], [br.DATA_MASK_010, new t3(br.DATA_MASK_010, function(t4, e3) {
    return e3 % 3 == 0;
  })], [br.DATA_MASK_011, new t3(br.DATA_MASK_011, function(t4, e3) {
    return (t4 + e3) % 3 == 0;
  })], [br.DATA_MASK_100, new t3(br.DATA_MASK_100, function(t4, e3) {
    return 0 == (Math.floor(t4 / 2) + Math.floor(e3 / 3) & 1);
  })], [br.DATA_MASK_101, new t3(br.DATA_MASK_101, function(t4, e3) {
    return t4 * e3 % 6 == 0;
  })], [br.DATA_MASK_110, new t3(br.DATA_MASK_110, function(t4, e3) {
    return t4 * e3 % 6 < 3;
  })], [br.DATA_MASK_111, new t3(br.DATA_MASK_111, function(t4, e3) {
    return 0 == (t4 + e3 + t4 * e3 % 3 & 1);
  })]]), t3;
}(), Vr = function() {
  function t3(t4) {
    var e3 = t4.getHeight();
    if (e3 < 21 || 1 != (3 & e3))
      throw new R();
    this.bitMatrix = t4;
  }
  return t3.prototype.readFormatInformation = function() {
    if (null !== this.parsedFormatInfo && void 0 !== this.parsedFormatInfo)
      return this.parsedFormatInfo;
    for (var t4 = 0, e3 = 0; e3 < 6; e3++)
      t4 = this.copyBit(e3, 8, t4);
    t4 = this.copyBit(7, 8, t4), t4 = this.copyBit(8, 8, t4), t4 = this.copyBit(8, 7, t4);
    for (var r2 = 5; r2 >= 0; r2--)
      t4 = this.copyBit(8, r2, t4);
    var n2 = this.bitMatrix.getHeight(), o2 = 0, i3 = n2 - 7;
    for (r2 = n2 - 1; r2 >= i3; r2--)
      o2 = this.copyBit(8, r2, o2);
    for (e3 = n2 - 8; e3 < n2; e3++)
      o2 = this.copyBit(e3, 8, o2);
    if (this.parsedFormatInfo = Dr.decodeFormatInformation(t4, o2), null !== this.parsedFormatInfo)
      return this.parsedFormatInfo;
    throw new R();
  }, t3.prototype.readVersion = function() {
    if (null !== this.parsedVersion && void 0 !== this.parsedVersion)
      return this.parsedVersion;
    var t4 = this.bitMatrix.getHeight(), e3 = Math.floor((t4 - 17) / 4);
    if (e3 <= 6)
      return Fr.getVersionForNumber(e3);
    for (var r2 = 0, n2 = t4 - 11, o2 = 5; o2 >= 0; o2--)
      for (var i3 = t4 - 9; i3 >= n2; i3--)
        r2 = this.copyBit(i3, o2, r2);
    var a4 = Fr.decodeVersionInformation(r2);
    if (null !== a4 && a4.getDimensionForVersion() === t4)
      return this.parsedVersion = a4, a4;
    r2 = 0;
    for (i3 = 5; i3 >= 0; i3--)
      for (o2 = t4 - 9; o2 >= n2; o2--)
        r2 = this.copyBit(i3, o2, r2);
    if (null !== (a4 = Fr.decodeVersionInformation(r2)) && a4.getDimensionForVersion() === t4)
      return this.parsedVersion = a4, a4;
    throw new R();
  }, t3.prototype.copyBit = function(t4, e3, r2) {
    return (this.isMirror ? this.bitMatrix.get(e3, t4) : this.bitMatrix.get(t4, e3)) ? r2 << 1 | 1 : r2 << 1;
  }, t3.prototype.readCodewords = function() {
    var t4 = this.readFormatInformation(), e3 = this.readVersion(), r2 = xr.values.get(t4.getDataMask()), n2 = this.bitMatrix.getHeight();
    r2.unmaskBitMatrix(this.bitMatrix, n2);
    for (var o2 = e3.buildFunctionPattern(), i3 = true, a4 = new Uint8Array(e3.getTotalCodewords()), u3 = 0, s4 = 0, c7 = 0, f2 = n2 - 1; f2 > 0; f2 -= 2) {
      6 === f2 && f2--;
      for (var h4 = 0; h4 < n2; h4++)
        for (var l2 = i3 ? n2 - 1 - h4 : h4, d4 = 0; d4 < 2; d4++)
          o2.get(f2 - d4, l2) || (c7++, s4 <<= 1, this.bitMatrix.get(f2 - d4, l2) && (s4 |= 1), 8 === c7 && (a4[u3++] = s4, c7 = 0, s4 = 0));
      i3 = !i3;
    }
    if (u3 !== e3.getTotalCodewords())
      throw new R();
    return a4;
  }, t3.prototype.remask = function() {
    if (null !== this.parsedFormatInfo) {
      var t4 = xr.values[this.parsedFormatInfo.getDataMask()], e3 = this.bitMatrix.getHeight();
      t4.unmaskBitMatrix(this.bitMatrix, e3);
    }
  }, t3.prototype.setMirror = function(t4) {
    this.parsedVersion = null, this.parsedFormatInfo = null, this.isMirror = t4;
  }, t3.prototype.mirror = function() {
    for (var t4 = this.bitMatrix, e3 = 0, r2 = t4.getWidth(); e3 < r2; e3++)
      for (var n2 = e3 + 1, o2 = t4.getHeight(); n2 < o2; n2++)
        t4.get(e3, n2) !== t4.get(n2, e3) && (t4.flip(n2, e3), t4.flip(e3, n2));
  }, t3;
}(), Ur = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Hr = function() {
  function t3(t4, e3) {
    this.numDataCodewords = t4, this.codewords = e3;
  }
  return t3.getDataBlocks = function(e3, r2, n2) {
    var o2, i3, a4, u3;
    if (e3.length !== r2.getTotalCodewords())
      throw new l();
    var s4 = r2.getECBlocksForLevel(n2), c7 = 0, f2 = s4.getECBlocks();
    try {
      for (var h4 = Ur(f2), d4 = h4.next(); !d4.done; d4 = h4.next()) {
        c7 += (_2 = d4.value).getCount();
      }
    } catch (t4) {
      o2 = { error: t4 };
    } finally {
      try {
        d4 && !d4.done && (i3 = h4.return) && i3.call(h4);
      } finally {
        if (o2)
          throw o2.error;
      }
    }
    var p2 = new Array(c7), g2 = 0;
    try {
      for (var y4 = Ur(f2), w3 = y4.next(); !w3.done; w3 = y4.next())
        for (var _2 = w3.value, v2 = 0; v2 < _2.getCount(); v2++) {
          var m4 = _2.getDataCodewords(), A2 = s4.getECCodewordsPerBlock() + m4;
          p2[g2++] = new t3(m4, new Uint8Array(A2));
        }
    } catch (t4) {
      a4 = { error: t4 };
    } finally {
      try {
        w3 && !w3.done && (u3 = y4.return) && u3.call(y4);
      } finally {
        if (a4)
          throw a4.error;
      }
    }
    for (var E3 = p2[0].codewords.length, C2 = p2.length - 1; C2 >= 0; ) {
      if (p2[C2].codewords.length === E3)
        break;
      C2--;
    }
    C2++;
    var I3 = E3 - s4.getECCodewordsPerBlock(), S4 = 0;
    for (v2 = 0; v2 < I3; v2++)
      for (var O3 = 0; O3 < g2; O3++)
        p2[O3].codewords[v2] = e3[S4++];
    for (O3 = C2; O3 < g2; O3++)
      p2[O3].codewords[I3] = e3[S4++];
    var T3 = p2[0].codewords.length;
    for (v2 = I3; v2 < T3; v2++)
      for (O3 = 0; O3 < g2; O3++) {
        var b3 = O3 < C2 ? v2 : v2 + 1;
        p2[O3].codewords[b3] = e3[S4++];
      }
    return p2;
  }, t3.prototype.getNumDataCodewords = function() {
    return this.numDataCodewords;
  }, t3.prototype.getCodewords = function() {
    return this.codewords;
  }, t3;
}();
!function(t3) {
  t3[t3.TERMINATOR = 0] = "TERMINATOR", t3[t3.NUMERIC = 1] = "NUMERIC", t3[t3.ALPHANUMERIC = 2] = "ALPHANUMERIC", t3[t3.STRUCTURED_APPEND = 3] = "STRUCTURED_APPEND", t3[t3.BYTE = 4] = "BYTE", t3[t3.ECI = 5] = "ECI", t3[t3.KANJI = 6] = "KANJI", t3[t3.FNC1_FIRST_POSITION = 7] = "FNC1_FIRST_POSITION", t3[t3.FNC1_SECOND_POSITION = 8] = "FNC1_SECOND_POSITION", t3[t3.HANZI = 9] = "HANZI";
}(kr || (kr = {}));
var Gr, Xr, Wr = function() {
  function t3(e3, r2, n2, o2) {
    this.value = e3, this.stringValue = r2, this.characterCountBitsForVersions = n2, this.bits = o2, t3.FOR_BITS.set(o2, this), t3.FOR_VALUE.set(e3, this);
  }
  return t3.forBits = function(e3) {
    var r2 = t3.FOR_BITS.get(e3);
    if (void 0 === r2)
      throw new l();
    return r2;
  }, t3.prototype.getCharacterCountBits = function(t4) {
    var e3, r2 = t4.getVersionNumber();
    return e3 = r2 <= 9 ? 0 : r2 <= 26 ? 1 : 2, this.characterCountBitsForVersions[e3];
  }, t3.prototype.getValue = function() {
    return this.value;
  }, t3.prototype.getBits = function() {
    return this.bits;
  }, t3.prototype.equals = function(e3) {
    if (!(e3 instanceof t3))
      return false;
    var r2 = e3;
    return this.value === r2.value;
  }, t3.prototype.toString = function() {
    return this.stringValue;
  }, t3.FOR_BITS = /* @__PURE__ */ new Map(), t3.FOR_VALUE = /* @__PURE__ */ new Map(), t3.TERMINATOR = new t3(kr.TERMINATOR, "TERMINATOR", Int32Array.from([0, 0, 0]), 0), t3.NUMERIC = new t3(kr.NUMERIC, "NUMERIC", Int32Array.from([10, 12, 14]), 1), t3.ALPHANUMERIC = new t3(kr.ALPHANUMERIC, "ALPHANUMERIC", Int32Array.from([9, 11, 13]), 2), t3.STRUCTURED_APPEND = new t3(kr.STRUCTURED_APPEND, "STRUCTURED_APPEND", Int32Array.from([0, 0, 0]), 3), t3.BYTE = new t3(kr.BYTE, "BYTE", Int32Array.from([8, 16, 16]), 4), t3.ECI = new t3(kr.ECI, "ECI", Int32Array.from([0, 0, 0]), 7), t3.KANJI = new t3(kr.KANJI, "KANJI", Int32Array.from([8, 10, 12]), 8), t3.FNC1_FIRST_POSITION = new t3(kr.FNC1_FIRST_POSITION, "FNC1_FIRST_POSITION", Int32Array.from([0, 0, 0]), 5), t3.FNC1_SECOND_POSITION = new t3(kr.FNC1_SECOND_POSITION, "FNC1_SECOND_POSITION", Int32Array.from([0, 0, 0]), 9), t3.HANZI = new t3(kr.HANZI, "HANZI", Int32Array.from([8, 10, 12]), 13), t3;
}(), jr = function() {
  function t3() {
  }
  return t3.decode = function(e3, r2, n2, o2) {
    var i3 = new mr(e3), a4 = new k(), u3 = new Array(), s4 = -1, c7 = -1;
    try {
      var f2 = null, h4 = false, l2 = void 0;
      do {
        if (i3.available() < 4)
          l2 = Wr.TERMINATOR;
        else {
          var d4 = i3.readBits(4);
          l2 = Wr.forBits(d4);
        }
        switch (l2) {
          case Wr.TERMINATOR:
            break;
          case Wr.FNC1_FIRST_POSITION:
          case Wr.FNC1_SECOND_POSITION:
            h4 = true;
            break;
          case Wr.STRUCTURED_APPEND:
            if (i3.available() < 16)
              throw new R();
            s4 = i3.readBits(8), c7 = i3.readBits(8);
            break;
          case Wr.ECI:
            var p2 = t3.parseECIValue(i3);
            if (null === (f2 = P.getCharacterSetECIByValue(p2)))
              throw new R();
            break;
          case Wr.HANZI:
            var g2 = i3.readBits(4), y4 = i3.readBits(l2.getCharacterCountBits(r2));
            g2 === t3.GB2312_SUBSET && t3.decodeHanziSegment(i3, a4, y4);
            break;
          default:
            var w3 = i3.readBits(l2.getCharacterCountBits(r2));
            switch (l2) {
              case Wr.NUMERIC:
                t3.decodeNumericSegment(i3, a4, w3);
                break;
              case Wr.ALPHANUMERIC:
                t3.decodeAlphanumericSegment(i3, a4, w3, h4);
                break;
              case Wr.BYTE:
                t3.decodeByteSegment(i3, a4, w3, f2, u3, o2);
                break;
              case Wr.KANJI:
                t3.decodeKanjiSegment(i3, a4, w3);
                break;
              default:
                throw new R();
            }
        }
      } while (l2 !== Wr.TERMINATOR);
    } catch (t4) {
      throw new R();
    }
    return new at(e3, a4.toString(), 0 === u3.length ? null : u3, null === n2 ? null : n2.toString(), s4, c7);
  }, t3.decodeHanziSegment = function(t4, e3, r2) {
    if (13 * r2 > t4.available())
      throw new R();
    for (var n2 = new Uint8Array(2 * r2), o2 = 0; r2 > 0; ) {
      var i3 = t4.readBits(13), a4 = i3 / 96 << 8 & 4294967295 | i3 % 96;
      a4 += a4 < 959 ? 41377 : 42657, n2[o2] = a4 >> 8 & 255, n2[o2 + 1] = 255 & a4, o2 += 2, r2--;
    }
    try {
      e3.append(L.decode(n2, F.GB2312));
    } catch (t5) {
      throw new R(t5);
    }
  }, t3.decodeKanjiSegment = function(t4, e3, r2) {
    if (13 * r2 > t4.available())
      throw new R();
    for (var n2 = new Uint8Array(2 * r2), o2 = 0; r2 > 0; ) {
      var i3 = t4.readBits(13), a4 = i3 / 192 << 8 & 4294967295 | i3 % 192;
      a4 += a4 < 7936 ? 33088 : 49472, n2[o2] = a4 >> 8, n2[o2 + 1] = a4, o2 += 2, r2--;
    }
    try {
      e3.append(L.decode(n2, F.SHIFT_JIS));
    } catch (t5) {
      throw new R(t5);
    }
  }, t3.decodeByteSegment = function(t4, e3, r2, n2, o2, i3) {
    if (8 * r2 > t4.available())
      throw new R();
    for (var a4, u3 = new Uint8Array(r2), s4 = 0; s4 < r2; s4++)
      u3[s4] = t4.readBits(8);
    a4 = null === n2 ? F.guessEncoding(u3, i3) : n2.getName();
    try {
      e3.append(L.decode(u3, a4));
    } catch (t5) {
      throw new R(t5);
    }
    o2.push(u3);
  }, t3.toAlphaNumericChar = function(e3) {
    if (e3 >= t3.ALPHANUMERIC_CHARS.length)
      throw new R();
    return t3.ALPHANUMERIC_CHARS[e3];
  }, t3.decodeAlphanumericSegment = function(e3, r2, n2, o2) {
    for (var i3 = r2.length(); n2 > 1; ) {
      if (e3.available() < 11)
        throw new R();
      var a4 = e3.readBits(11);
      r2.append(t3.toAlphaNumericChar(Math.floor(a4 / 45))), r2.append(t3.toAlphaNumericChar(a4 % 45)), n2 -= 2;
    }
    if (1 === n2) {
      if (e3.available() < 6)
        throw new R();
      r2.append(t3.toAlphaNumericChar(e3.readBits(6)));
    }
    if (o2)
      for (var u3 = i3; u3 < r2.length(); u3++)
        "%" === r2.charAt(u3) && (u3 < r2.length() - 1 && "%" === r2.charAt(u3 + 1) ? r2.deleteCharAt(u3 + 1) : r2.setCharAt(u3, String.fromCharCode(29)));
  }, t3.decodeNumericSegment = function(e3, r2, n2) {
    for (; n2 >= 3; ) {
      if (e3.available() < 10)
        throw new R();
      var o2 = e3.readBits(10);
      if (o2 >= 1e3)
        throw new R();
      r2.append(t3.toAlphaNumericChar(Math.floor(o2 / 100))), r2.append(t3.toAlphaNumericChar(Math.floor(o2 / 10) % 10)), r2.append(t3.toAlphaNumericChar(o2 % 10)), n2 -= 3;
    }
    if (2 === n2) {
      if (e3.available() < 7)
        throw new R();
      var i3 = e3.readBits(7);
      if (i3 >= 100)
        throw new R();
      r2.append(t3.toAlphaNumericChar(Math.floor(i3 / 10))), r2.append(t3.toAlphaNumericChar(i3 % 10));
    } else if (1 === n2) {
      if (e3.available() < 4)
        throw new R();
      var a4 = e3.readBits(4);
      if (a4 >= 10)
        throw new R();
      r2.append(t3.toAlphaNumericChar(a4));
    }
  }, t3.parseECIValue = function(t4) {
    var e3 = t4.readBits(8);
    if (0 == (128 & e3))
      return 127 & e3;
    if (128 == (192 & e3))
      return (63 & e3) << 8 & 4294967295 | t4.readBits(8);
    if (192 == (224 & e3))
      return (31 & e3) << 16 & 4294967295 | t4.readBits(16);
    throw new R();
  }, t3.ALPHANUMERIC_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:", t3.GB2312_SUBSET = 1, t3;
}(), zr = function() {
  function t3(t4) {
    this.mirrored = t4;
  }
  return t3.prototype.isMirrored = function() {
    return this.mirrored;
  }, t3.prototype.applyMirroredCorrection = function(t4) {
    if (this.mirrored && null !== t4 && !(t4.length < 3)) {
      var e3 = t4[0];
      t4[0] = t4[2], t4[2] = e3;
    }
  }, t3;
}(), Yr = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Zr = function() {
  function t3() {
    this.rsDecoder = new wt(lt.QR_CODE_FIELD_256);
  }
  return t3.prototype.decodeBooleanArray = function(t4, e3) {
    return this.decodeBitMatrix(x.parseFromBooleanArray(t4), e3);
  }, t3.prototype.decodeBitMatrix = function(t4, e3) {
    var r2 = new Vr(t4), n2 = null;
    try {
      return this.decodeBitMatrixParser(r2, e3);
    } catch (t5) {
      n2 = t5;
    }
    try {
      r2.remask(), r2.setMirror(true), r2.readVersion(), r2.readFormatInformation(), r2.mirror();
      var o2 = this.decodeBitMatrixParser(r2, e3);
      return o2.setOther(new zr(true)), o2;
    } catch (t5) {
      if (null !== n2)
        throw n2;
      throw t5;
    }
  }, t3.prototype.decodeBitMatrixParser = function(t4, e3) {
    var r2, n2, o2, i3, a4 = t4.readVersion(), u3 = t4.readFormatInformation().getErrorCorrectionLevel(), s4 = t4.readCodewords(), c7 = Hr.getDataBlocks(s4, a4, u3), f2 = 0;
    try {
      for (var h4 = Yr(c7), l2 = h4.next(); !l2.done; l2 = h4.next()) {
        f2 += (w3 = l2.value).getNumDataCodewords();
      }
    } catch (t5) {
      r2 = { error: t5 };
    } finally {
      try {
        l2 && !l2.done && (n2 = h4.return) && n2.call(h4);
      } finally {
        if (r2)
          throw r2.error;
      }
    }
    var d4 = new Uint8Array(f2), p2 = 0;
    try {
      for (var g2 = Yr(c7), y4 = g2.next(); !y4.done; y4 = g2.next()) {
        var w3, _2 = (w3 = y4.value).getCodewords(), v2 = w3.getNumDataCodewords();
        this.correctErrors(_2, v2);
        for (var m4 = 0; m4 < v2; m4++)
          d4[p2++] = _2[m4];
      }
    } catch (t5) {
      o2 = { error: t5 };
    } finally {
      try {
        y4 && !y4.done && (i3 = g2.return) && i3.call(g2);
      } finally {
        if (o2)
          throw o2.error;
      }
    }
    return jr.decode(d4, a4, u3, e3);
  }, t3.prototype.correctErrors = function(t4, e3) {
    var r2 = new Int32Array(t4);
    try {
      this.rsDecoder.decode(r2, t4.length - e3);
    } catch (t5) {
      throw new g();
    }
    for (var n2 = 0; n2 < e3; n2++)
      t4[n2] = r2[n2];
  }, t3;
}(), Kr = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), qr = function(t3) {
  function e3(e4, r2, n2) {
    var o2 = t3.call(this, e4, r2) || this;
    return o2.estimatedModuleSize = n2, o2;
  }
  return Kr(e3, t3), e3.prototype.aboutEquals = function(t4, e4, r2) {
    if (Math.abs(e4 - this.getY()) <= t4 && Math.abs(r2 - this.getX()) <= t4) {
      var n2 = Math.abs(t4 - this.estimatedModuleSize);
      return n2 <= 1 || n2 <= this.estimatedModuleSize;
    }
    return false;
  }, e3.prototype.combineEstimate = function(t4, r2, n2) {
    return new e3((this.getX() + r2) / 2, (this.getY() + t4) / 2, (this.estimatedModuleSize + n2) / 2);
  }, e3;
}(At), Qr = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Jr = function() {
  function t3(t4, e3, r2, n2, o2, i3, a4) {
    this.image = t4, this.startX = e3, this.startY = r2, this.width = n2, this.height = o2, this.moduleSize = i3, this.resultPointCallback = a4, this.possibleCenters = [], this.crossCheckStateCount = new Int32Array(3);
  }
  return t3.prototype.find = function() {
    for (var t4 = this.startX, e3 = this.height, r2 = t4 + this.width, n2 = this.startY + e3 / 2, o2 = new Int32Array(3), i3 = this.image, a4 = 0; a4 < e3; a4++) {
      var u3 = n2 + (0 == (1 & a4) ? Math.floor((a4 + 1) / 2) : -Math.floor((a4 + 1) / 2));
      o2[0] = 0, o2[1] = 0, o2[2] = 0;
      for (var s4 = t4; s4 < r2 && !i3.get(s4, u3); )
        s4++;
      for (var c7 = 0; s4 < r2; ) {
        if (i3.get(s4, u3))
          if (1 === c7)
            o2[1]++;
          else if (2 === c7) {
            var f2;
            if (this.foundPatternCross(o2)) {
              if (null !== (f2 = this.handlePossibleCenter(o2, u3, s4)))
                return f2;
            }
            o2[0] = o2[2], o2[1] = 1, o2[2] = 0, c7 = 1;
          } else
            o2[++c7]++;
        else
          1 === c7 && c7++, o2[c7]++;
        s4++;
      }
      if (this.foundPatternCross(o2)) {
        if (null !== (f2 = this.handlePossibleCenter(o2, u3, r2)))
          return f2;
      }
    }
    if (0 !== this.possibleCenters.length)
      return this.possibleCenters[0];
    throw new U();
  }, t3.centerFromEnd = function(t4, e3) {
    return e3 - t4[2] - t4[1] / 2;
  }, t3.prototype.foundPatternCross = function(t4) {
    for (var e3 = this.moduleSize, r2 = e3 / 2, n2 = 0; n2 < 3; n2++)
      if (Math.abs(e3 - t4[n2]) >= r2)
        return false;
    return true;
  }, t3.prototype.crossCheckVertical = function(e3, r2, n2, o2) {
    var i3 = this.image, a4 = i3.getHeight(), u3 = this.crossCheckStateCount;
    u3[0] = 0, u3[1] = 0, u3[2] = 0;
    for (var s4 = e3; s4 >= 0 && i3.get(r2, s4) && u3[1] <= n2; )
      u3[1]++, s4--;
    if (s4 < 0 || u3[1] > n2)
      return NaN;
    for (; s4 >= 0 && !i3.get(r2, s4) && u3[0] <= n2; )
      u3[0]++, s4--;
    if (u3[0] > n2)
      return NaN;
    for (s4 = e3 + 1; s4 < a4 && i3.get(r2, s4) && u3[1] <= n2; )
      u3[1]++, s4++;
    if (s4 === a4 || u3[1] > n2)
      return NaN;
    for (; s4 < a4 && !i3.get(r2, s4) && u3[2] <= n2; )
      u3[2]++, s4++;
    if (u3[2] > n2)
      return NaN;
    var c7 = u3[0] + u3[1] + u3[2];
    return 5 * Math.abs(c7 - o2) >= 2 * o2 ? NaN : this.foundPatternCross(u3) ? t3.centerFromEnd(u3, s4) : NaN;
  }, t3.prototype.handlePossibleCenter = function(e3, r2, n2) {
    var o2, i3, a4 = e3[0] + e3[1] + e3[2], u3 = t3.centerFromEnd(e3, n2), s4 = this.crossCheckVertical(r2, u3, 2 * e3[1], a4);
    if (!isNaN(s4)) {
      var c7 = (e3[0] + e3[1] + e3[2]) / 3;
      try {
        for (var f2 = Qr(this.possibleCenters), h4 = f2.next(); !h4.done; h4 = f2.next()) {
          var l2 = h4.value;
          if (l2.aboutEquals(c7, s4, u3))
            return l2.combineEstimate(s4, u3, c7);
        }
      } catch (t4) {
        o2 = { error: t4 };
      } finally {
        try {
          h4 && !h4.done && (i3 = f2.return) && i3.call(f2);
        } finally {
          if (o2)
            throw o2.error;
        }
      }
      var d4 = new qr(u3, s4, c7);
      this.possibleCenters.push(d4), null !== this.resultPointCallback && void 0 !== this.resultPointCallback && this.resultPointCallback.foundPossibleResultPoint(d4);
    }
    return null;
  }, t3;
}(), $r = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), tn = function(t3) {
  function e3(e4, r2, n2, o2) {
    var i3 = t3.call(this, e4, r2) || this;
    return i3.estimatedModuleSize = n2, i3.count = o2, void 0 === o2 && (i3.count = 1), i3;
  }
  return $r(e3, t3), e3.prototype.getEstimatedModuleSize = function() {
    return this.estimatedModuleSize;
  }, e3.prototype.getCount = function() {
    return this.count;
  }, e3.prototype.aboutEquals = function(t4, e4, r2) {
    if (Math.abs(e4 - this.getY()) <= t4 && Math.abs(r2 - this.getX()) <= t4) {
      var n2 = Math.abs(t4 - this.estimatedModuleSize);
      return n2 <= 1 || n2 <= this.estimatedModuleSize;
    }
    return false;
  }, e3.prototype.combineEstimate = function(t4, r2, n2) {
    var o2 = this.count + 1;
    return new e3((this.count * this.getX() + r2) / o2, (this.count * this.getY() + t4) / o2, (this.count * this.estimatedModuleSize + n2) / o2, o2);
  }, e3;
}(At), en = function() {
  function t3(t4) {
    this.bottomLeft = t4[0], this.topLeft = t4[1], this.topRight = t4[2];
  }
  return t3.prototype.getBottomLeft = function() {
    return this.bottomLeft;
  }, t3.prototype.getTopLeft = function() {
    return this.topLeft;
  }, t3.prototype.getTopRight = function() {
    return this.topRight;
  }, t3;
}(), rn = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, nn = function() {
  function t3(t4, e3) {
    this.image = t4, this.resultPointCallback = e3, this.possibleCenters = [], this.crossCheckStateCount = new Int32Array(5), this.resultPointCallback = e3;
  }
  return t3.prototype.getImage = function() {
    return this.image;
  }, t3.prototype.getPossibleCenters = function() {
    return this.possibleCenters;
  }, t3.prototype.find = function(e3) {
    var r2 = null != e3 && void 0 !== e3.get(T.TRY_HARDER), n2 = null != e3 && void 0 !== e3.get(T.PURE_BARCODE), o2 = this.image, i3 = o2.getHeight(), a4 = o2.getWidth(), u3 = Math.floor(3 * i3 / (4 * t3.MAX_MODULES));
    (u3 < t3.MIN_SKIP || r2) && (u3 = t3.MIN_SKIP);
    for (var s4 = false, c7 = new Int32Array(5), f2 = u3 - 1; f2 < i3 && !s4; f2 += u3) {
      c7[0] = 0, c7[1] = 0, c7[2] = 0, c7[3] = 0, c7[4] = 0;
      for (var h4 = 0, l2 = 0; l2 < a4; l2++)
        if (o2.get(l2, f2))
          1 == (1 & h4) && h4++, c7[h4]++;
        else if (0 == (1 & h4))
          if (4 === h4)
            if (t3.foundPatternCross(c7)) {
              if (true !== this.handlePossibleCenter(c7, f2, l2, n2)) {
                c7[0] = c7[2], c7[1] = c7[3], c7[2] = c7[4], c7[3] = 1, c7[4] = 0, h4 = 3;
                continue;
              }
              if (u3 = 2, true === this.hasSkipped)
                s4 = this.haveMultiplyConfirmedCenters();
              else {
                var d4 = this.findRowSkip();
                d4 > c7[2] && (f2 += d4 - c7[2] - u3, l2 = a4 - 1);
              }
              h4 = 0, c7[0] = 0, c7[1] = 0, c7[2] = 0, c7[3] = 0, c7[4] = 0;
            } else
              c7[0] = c7[2], c7[1] = c7[3], c7[2] = c7[4], c7[3] = 1, c7[4] = 0, h4 = 3;
          else
            c7[++h4]++;
        else
          c7[h4]++;
      if (t3.foundPatternCross(c7))
        true === this.handlePossibleCenter(c7, f2, a4, n2) && (u3 = c7[0], this.hasSkipped && (s4 = this.haveMultiplyConfirmedCenters()));
    }
    var p2 = this.selectBestPatterns();
    return At.orderBestPatterns(p2), new en(p2);
  }, t3.centerFromEnd = function(t4, e3) {
    return e3 - t4[4] - t4[3] - t4[2] / 2;
  }, t3.foundPatternCross = function(t4) {
    for (var e3 = 0, r2 = 0; r2 < 5; r2++) {
      var n2 = t4[r2];
      if (0 === n2)
        return false;
      e3 += n2;
    }
    if (e3 < 7)
      return false;
    var o2 = e3 / 7, i3 = o2 / 2;
    return Math.abs(o2 - t4[0]) < i3 && Math.abs(o2 - t4[1]) < i3 && Math.abs(3 * o2 - t4[2]) < 3 * i3 && Math.abs(o2 - t4[3]) < i3 && Math.abs(o2 - t4[4]) < i3;
  }, t3.prototype.getCrossCheckStateCount = function() {
    var t4 = this.crossCheckStateCount;
    return t4[0] = 0, t4[1] = 0, t4[2] = 0, t4[3] = 0, t4[4] = 0, t4;
  }, t3.prototype.crossCheckDiagonal = function(e3, r2, n2, o2) {
    for (var i3 = this.getCrossCheckStateCount(), a4 = 0, u3 = this.image; e3 >= a4 && r2 >= a4 && u3.get(r2 - a4, e3 - a4); )
      i3[2]++, a4++;
    if (e3 < a4 || r2 < a4)
      return false;
    for (; e3 >= a4 && r2 >= a4 && !u3.get(r2 - a4, e3 - a4) && i3[1] <= n2; )
      i3[1]++, a4++;
    if (e3 < a4 || r2 < a4 || i3[1] > n2)
      return false;
    for (; e3 >= a4 && r2 >= a4 && u3.get(r2 - a4, e3 - a4) && i3[0] <= n2; )
      i3[0]++, a4++;
    if (i3[0] > n2)
      return false;
    var s4 = u3.getHeight(), c7 = u3.getWidth();
    for (a4 = 1; e3 + a4 < s4 && r2 + a4 < c7 && u3.get(r2 + a4, e3 + a4); )
      i3[2]++, a4++;
    if (e3 + a4 >= s4 || r2 + a4 >= c7)
      return false;
    for (; e3 + a4 < s4 && r2 + a4 < c7 && !u3.get(r2 + a4, e3 + a4) && i3[3] < n2; )
      i3[3]++, a4++;
    if (e3 + a4 >= s4 || r2 + a4 >= c7 || i3[3] >= n2)
      return false;
    for (; e3 + a4 < s4 && r2 + a4 < c7 && u3.get(r2 + a4, e3 + a4) && i3[4] < n2; )
      i3[4]++, a4++;
    if (i3[4] >= n2)
      return false;
    var f2 = i3[0] + i3[1] + i3[2] + i3[3] + i3[4];
    return Math.abs(f2 - o2) < 2 * o2 && t3.foundPatternCross(i3);
  }, t3.prototype.crossCheckVertical = function(e3, r2, n2, o2) {
    for (var i3 = this.image, a4 = i3.getHeight(), u3 = this.getCrossCheckStateCount(), s4 = e3; s4 >= 0 && i3.get(r2, s4); )
      u3[2]++, s4--;
    if (s4 < 0)
      return NaN;
    for (; s4 >= 0 && !i3.get(r2, s4) && u3[1] <= n2; )
      u3[1]++, s4--;
    if (s4 < 0 || u3[1] > n2)
      return NaN;
    for (; s4 >= 0 && i3.get(r2, s4) && u3[0] <= n2; )
      u3[0]++, s4--;
    if (u3[0] > n2)
      return NaN;
    for (s4 = e3 + 1; s4 < a4 && i3.get(r2, s4); )
      u3[2]++, s4++;
    if (s4 === a4)
      return NaN;
    for (; s4 < a4 && !i3.get(r2, s4) && u3[3] < n2; )
      u3[3]++, s4++;
    if (s4 === a4 || u3[3] >= n2)
      return NaN;
    for (; s4 < a4 && i3.get(r2, s4) && u3[4] < n2; )
      u3[4]++, s4++;
    if (u3[4] >= n2)
      return NaN;
    var c7 = u3[0] + u3[1] + u3[2] + u3[3] + u3[4];
    return 5 * Math.abs(c7 - o2) >= 2 * o2 ? NaN : t3.foundPatternCross(u3) ? t3.centerFromEnd(u3, s4) : NaN;
  }, t3.prototype.crossCheckHorizontal = function(e3, r2, n2, o2) {
    for (var i3 = this.image, a4 = i3.getWidth(), u3 = this.getCrossCheckStateCount(), s4 = e3; s4 >= 0 && i3.get(s4, r2); )
      u3[2]++, s4--;
    if (s4 < 0)
      return NaN;
    for (; s4 >= 0 && !i3.get(s4, r2) && u3[1] <= n2; )
      u3[1]++, s4--;
    if (s4 < 0 || u3[1] > n2)
      return NaN;
    for (; s4 >= 0 && i3.get(s4, r2) && u3[0] <= n2; )
      u3[0]++, s4--;
    if (u3[0] > n2)
      return NaN;
    for (s4 = e3 + 1; s4 < a4 && i3.get(s4, r2); )
      u3[2]++, s4++;
    if (s4 === a4)
      return NaN;
    for (; s4 < a4 && !i3.get(s4, r2) && u3[3] < n2; )
      u3[3]++, s4++;
    if (s4 === a4 || u3[3] >= n2)
      return NaN;
    for (; s4 < a4 && i3.get(s4, r2) && u3[4] < n2; )
      u3[4]++, s4++;
    if (u3[4] >= n2)
      return NaN;
    var c7 = u3[0] + u3[1] + u3[2] + u3[3] + u3[4];
    return 5 * Math.abs(c7 - o2) >= o2 ? NaN : t3.foundPatternCross(u3) ? t3.centerFromEnd(u3, s4) : NaN;
  }, t3.prototype.handlePossibleCenter = function(e3, r2, n2, o2) {
    var i3 = e3[0] + e3[1] + e3[2] + e3[3] + e3[4], a4 = t3.centerFromEnd(e3, n2), u3 = this.crossCheckVertical(r2, Math.floor(a4), e3[2], i3);
    if (!isNaN(u3) && (a4 = this.crossCheckHorizontal(Math.floor(a4), Math.floor(u3), e3[2], i3), !isNaN(a4) && (!o2 || this.crossCheckDiagonal(Math.floor(u3), Math.floor(a4), e3[2], i3)))) {
      for (var s4 = i3 / 7, c7 = false, f2 = this.possibleCenters, h4 = 0, l2 = f2.length; h4 < l2; h4++) {
        var d4 = f2[h4];
        if (d4.aboutEquals(s4, u3, a4)) {
          f2[h4] = d4.combineEstimate(u3, a4, s4), c7 = true;
          break;
        }
      }
      if (!c7) {
        var p2 = new tn(a4, u3, s4);
        f2.push(p2), null !== this.resultPointCallback && void 0 !== this.resultPointCallback && this.resultPointCallback.foundPossibleResultPoint(p2);
      }
      return true;
    }
    return false;
  }, t3.prototype.findRowSkip = function() {
    var e3, r2;
    if (this.possibleCenters.length <= 1)
      return 0;
    var n2 = null;
    try {
      for (var o2 = rn(this.possibleCenters), i3 = o2.next(); !i3.done; i3 = o2.next()) {
        var a4 = i3.value;
        if (a4.getCount() >= t3.CENTER_QUORUM) {
          if (null != n2)
            return this.hasSkipped = true, Math.floor((Math.abs(n2.getX() - a4.getX()) - Math.abs(n2.getY() - a4.getY())) / 2);
          n2 = a4;
        }
      }
    } catch (t4) {
      e3 = { error: t4 };
    } finally {
      try {
        i3 && !i3.done && (r2 = o2.return) && r2.call(o2);
      } finally {
        if (e3)
          throw e3.error;
      }
    }
    return 0;
  }, t3.prototype.haveMultiplyConfirmedCenters = function() {
    var e3, r2, n2, o2, i3 = 0, a4 = 0, u3 = this.possibleCenters.length;
    try {
      for (var s4 = rn(this.possibleCenters), c7 = s4.next(); !c7.done; c7 = s4.next()) {
        (p2 = c7.value).getCount() >= t3.CENTER_QUORUM && (i3++, a4 += p2.getEstimatedModuleSize());
      }
    } catch (t4) {
      e3 = { error: t4 };
    } finally {
      try {
        c7 && !c7.done && (r2 = s4.return) && r2.call(s4);
      } finally {
        if (e3)
          throw e3.error;
      }
    }
    if (i3 < 3)
      return false;
    var f2 = a4 / u3, h4 = 0;
    try {
      for (var l2 = rn(this.possibleCenters), d4 = l2.next(); !d4.done; d4 = l2.next()) {
        var p2 = d4.value;
        h4 += Math.abs(p2.getEstimatedModuleSize() - f2);
      }
    } catch (t4) {
      n2 = { error: t4 };
    } finally {
      try {
        d4 && !d4.done && (o2 = l2.return) && o2.call(l2);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
    return h4 <= 0.05 * a4;
  }, t3.prototype.selectBestPatterns = function() {
    var t4, e3, r2, n2, o2 = this.possibleCenters.length;
    if (o2 < 3)
      throw new U();
    var i3, a4 = this.possibleCenters;
    if (o2 > 3) {
      var u3 = 0, s4 = 0;
      try {
        for (var c7 = rn(this.possibleCenters), f2 = c7.next(); !f2.done; f2 = c7.next()) {
          var h4 = f2.value.getEstimatedModuleSize();
          u3 += h4, s4 += h4 * h4;
        }
      } catch (e4) {
        t4 = { error: e4 };
      } finally {
        try {
          f2 && !f2.done && (e3 = c7.return) && e3.call(c7);
        } finally {
          if (t4)
            throw t4.error;
        }
      }
      i3 = u3 / o2;
      var l2 = Math.sqrt(s4 / o2 - i3 * i3);
      a4.sort(function(t5, e4) {
        var r3 = Math.abs(e4.getEstimatedModuleSize() - i3), n3 = Math.abs(t5.getEstimatedModuleSize() - i3);
        return r3 < n3 ? -1 : r3 > n3 ? 1 : 0;
      });
      for (var d4 = Math.max(0.2 * i3, l2), p2 = 0; p2 < a4.length && a4.length > 3; p2++) {
        var g2 = a4[p2];
        Math.abs(g2.getEstimatedModuleSize() - i3) > d4 && (a4.splice(p2, 1), p2--);
      }
    }
    if (a4.length > 3) {
      u3 = 0;
      try {
        for (var y4 = rn(a4), w3 = y4.next(); !w3.done; w3 = y4.next()) {
          u3 += w3.value.getEstimatedModuleSize();
        }
      } catch (t5) {
        r2 = { error: t5 };
      } finally {
        try {
          w3 && !w3.done && (n2 = y4.return) && n2.call(y4);
        } finally {
          if (r2)
            throw r2.error;
        }
      }
      i3 = u3 / a4.length, a4.sort(function(t5, e4) {
        if (e4.getCount() === t5.getCount()) {
          var r3 = Math.abs(e4.getEstimatedModuleSize() - i3), n3 = Math.abs(t5.getEstimatedModuleSize() - i3);
          return r3 < n3 ? 1 : r3 > n3 ? -1 : 0;
        }
        return e4.getCount() - t5.getCount();
      }), a4.splice(3);
    }
    return [a4[0], a4[1], a4[2]];
  }, t3.CENTER_QUORUM = 2, t3.MIN_SKIP = 3, t3.MAX_MODULES = 57, t3;
}(), on = function() {
  function t3(t4) {
    this.image = t4;
  }
  return t3.prototype.getImage = function() {
    return this.image;
  }, t3.prototype.getResultPointCallback = function() {
    return this.resultPointCallback;
  }, t3.prototype.detect = function(t4) {
    this.resultPointCallback = null == t4 ? null : t4.get(T.NEED_RESULT_POINT_CALLBACK);
    var e3 = new nn(this.image, this.resultPointCallback).find(t4);
    return this.processFinderPatternInfo(e3);
  }, t3.prototype.processFinderPatternInfo = function(e3) {
    var r2 = e3.getTopLeft(), n2 = e3.getTopRight(), o2 = e3.getBottomLeft(), i3 = this.calculateModuleSize(r2, n2, o2);
    if (i3 < 1)
      throw new U("No pattern found in proccess finder.");
    var a4 = t3.computeDimension(r2, n2, o2, i3), u3 = Fr.getProvisionalVersionForDimension(a4), s4 = u3.getDimensionForVersion() - 7, c7 = null;
    if (u3.getAlignmentPatternCenters().length > 0)
      for (var f2 = n2.getX() - r2.getX() + o2.getX(), h4 = n2.getY() - r2.getY() + o2.getY(), l2 = 1 - 3 / s4, d4 = Math.floor(r2.getX() + l2 * (f2 - r2.getX())), p2 = Math.floor(r2.getY() + l2 * (h4 - r2.getY())), g2 = 4; g2 <= 16; g2 <<= 1)
        try {
          c7 = this.findAlignmentInRegion(i3, d4, p2, g2);
          break;
        } catch (t4) {
          if (!(t4 instanceof U))
            throw t4;
        }
    var y4 = t3.createTransform(r2, n2, o2, c7, a4), w3 = t3.sampleGrid(this.image, y4, a4);
    return new Et(w3, null === c7 ? [o2, r2, n2] : [o2, r2, n2, c7]);
  }, t3.createTransform = function(t4, e3, r2, n2, o2) {
    var i3, a4, u3, s4, c7 = o2 - 3.5;
    return null !== n2 ? (i3 = n2.getX(), a4 = n2.getY(), s4 = u3 = c7 - 3) : (i3 = e3.getX() - t4.getX() + r2.getX(), a4 = e3.getY() - t4.getY() + r2.getY(), u3 = c7, s4 = c7), Tt.quadrilateralToQuadrilateral(3.5, 3.5, c7, 3.5, u3, s4, 3.5, c7, t4.getX(), t4.getY(), e3.getX(), e3.getY(), i3, a4, r2.getX(), r2.getY());
  }, t3.sampleGrid = function(t4, e3, r2) {
    return Nt.getInstance().sampleGridWithTransform(t4, r2, r2, e3);
  }, t3.computeDimension = function(t4, e3, r2, n2) {
    var o2 = vt.round(At.distance(t4, e3) / n2), i3 = vt.round(At.distance(t4, r2) / n2), a4 = Math.floor((o2 + i3) / 2) + 7;
    switch (3 & a4) {
      case 0:
        a4++;
        break;
      case 2:
        a4--;
        break;
      case 3:
        throw new U("Dimensions could be not found.");
    }
    return a4;
  }, t3.prototype.calculateModuleSize = function(t4, e3, r2) {
    return (this.calculateModuleSizeOneWay(t4, e3) + this.calculateModuleSizeOneWay(t4, r2)) / 2;
  }, t3.prototype.calculateModuleSizeOneWay = function(t4, e3) {
    var r2 = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(t4.getX()), Math.floor(t4.getY()), Math.floor(e3.getX()), Math.floor(e3.getY())), n2 = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(e3.getX()), Math.floor(e3.getY()), Math.floor(t4.getX()), Math.floor(t4.getY()));
    return isNaN(r2) ? n2 / 7 : isNaN(n2) ? r2 / 7 : (r2 + n2) / 14;
  }, t3.prototype.sizeOfBlackWhiteBlackRunBothWays = function(t4, e3, r2, n2) {
    var o2 = this.sizeOfBlackWhiteBlackRun(t4, e3, r2, n2), i3 = 1, a4 = t4 - (r2 - t4);
    a4 < 0 ? (i3 = t4 / (t4 - a4), a4 = 0) : a4 >= this.image.getWidth() && (i3 = (this.image.getWidth() - 1 - t4) / (a4 - t4), a4 = this.image.getWidth() - 1);
    var u3 = Math.floor(e3 - (n2 - e3) * i3);
    return i3 = 1, u3 < 0 ? (i3 = e3 / (e3 - u3), u3 = 0) : u3 >= this.image.getHeight() && (i3 = (this.image.getHeight() - 1 - e3) / (u3 - e3), u3 = this.image.getHeight() - 1), a4 = Math.floor(t4 + (a4 - t4) * i3), (o2 += this.sizeOfBlackWhiteBlackRun(t4, e3, a4, u3)) - 1;
  }, t3.prototype.sizeOfBlackWhiteBlackRun = function(t4, e3, r2, n2) {
    var o2 = Math.abs(n2 - e3) > Math.abs(r2 - t4);
    if (o2) {
      var i3 = t4;
      t4 = e3, e3 = i3, i3 = r2, r2 = n2, n2 = i3;
    }
    for (var a4 = Math.abs(r2 - t4), u3 = Math.abs(n2 - e3), s4 = -a4 / 2, c7 = t4 < r2 ? 1 : -1, f2 = e3 < n2 ? 1 : -1, h4 = 0, l2 = r2 + c7, d4 = t4, p2 = e3; d4 !== l2; d4 += c7) {
      var g2 = o2 ? p2 : d4, y4 = o2 ? d4 : p2;
      if (1 === h4 === this.image.get(g2, y4)) {
        if (2 === h4)
          return vt.distance(d4, p2, t4, e3);
        h4++;
      }
      if ((s4 += u3) > 0) {
        if (p2 === n2)
          break;
        p2 += f2, s4 -= a4;
      }
    }
    return 2 === h4 ? vt.distance(r2 + c7, n2, t4, e3) : NaN;
  }, t3.prototype.findAlignmentInRegion = function(t4, e3, r2, n2) {
    var o2 = Math.floor(n2 * t4), i3 = Math.max(0, e3 - o2), a4 = Math.min(this.image.getWidth() - 1, e3 + o2);
    if (a4 - i3 < 3 * t4)
      throw new U("Alignment top exceeds estimated module size.");
    var u3 = Math.max(0, r2 - o2), s4 = Math.min(this.image.getHeight() - 1, r2 + o2);
    if (s4 - u3 < 3 * t4)
      throw new U("Alignment bottom exceeds estimated module size.");
    return new Jr(this.image, i3, u3, a4 - i3, s4 - u3, t4, this.resultPointCallback).find();
  }, t3;
}(), an = function() {
  function t3() {
    this.decoder = new Zr();
  }
  return t3.prototype.getDecoder = function() {
    return this.decoder;
  }, t3.prototype.decode = function(e3, r2) {
    var n2, o2;
    if (null != r2 && void 0 !== r2.get(T.PURE_BARCODE)) {
      var i3 = t3.extractPureBits(e3.getBlackMatrix());
      n2 = this.decoder.decodeBitMatrix(i3, r2), o2 = t3.NO_POINTS;
    } else {
      var a4 = new on(e3.getBlackMatrix()).detect(r2);
      n2 = this.decoder.decodeBitMatrix(a4.getBits(), r2), o2 = a4.getPoints();
    }
    n2.getOther() instanceof zr && n2.getOther().applyMirroredCorrection(o2);
    var u3 = new et(n2.getText(), n2.getRawBytes(), void 0, o2, nt.QR_CODE, void 0), s4 = n2.getByteSegments();
    null !== s4 && u3.putMetadata(it.BYTE_SEGMENTS, s4);
    var c7 = n2.getECLevel();
    return null !== c7 && u3.putMetadata(it.ERROR_CORRECTION_LEVEL, c7), n2.hasStructuredAppend() && (u3.putMetadata(it.STRUCTURED_APPEND_SEQUENCE, n2.getStructuredAppendSequenceNumber()), u3.putMetadata(it.STRUCTURED_APPEND_PARITY, n2.getStructuredAppendParity())), u3;
  }, t3.prototype.reset = function() {
  }, t3.extractPureBits = function(t4) {
    var e3 = t4.getTopLeftOnBit(), r2 = t4.getBottomRightOnBit();
    if (null === e3 || null === r2)
      throw new U();
    var n2 = this.moduleSize(e3, t4), o2 = e3[1], i3 = r2[1], a4 = e3[0], u3 = r2[0];
    if (a4 >= u3 || o2 >= i3)
      throw new U();
    if (i3 - o2 != u3 - a4 && (u3 = a4 + (i3 - o2)) >= t4.getWidth())
      throw new U();
    var s4 = Math.round((u3 - a4 + 1) / n2), c7 = Math.round((i3 - o2 + 1) / n2);
    if (s4 <= 0 || c7 <= 0)
      throw new U();
    if (c7 !== s4)
      throw new U();
    var f2 = Math.floor(n2 / 2);
    o2 += f2;
    var h4 = (a4 += f2) + Math.floor((s4 - 1) * n2) - u3;
    if (h4 > 0) {
      if (h4 > f2)
        throw new U();
      a4 -= h4;
    }
    var l2 = o2 + Math.floor((c7 - 1) * n2) - i3;
    if (l2 > 0) {
      if (l2 > f2)
        throw new U();
      o2 -= l2;
    }
    for (var d4 = new x(s4, c7), p2 = 0; p2 < c7; p2++)
      for (var g2 = o2 + Math.floor(p2 * n2), y4 = 0; y4 < s4; y4++)
        t4.get(a4 + Math.floor(y4 * n2), g2) && d4.set(y4, p2);
    return d4;
  }, t3.moduleSize = function(t4, e3) {
    for (var r2 = e3.getHeight(), n2 = e3.getWidth(), o2 = t4[0], i3 = t4[1], a4 = true, u3 = 0; o2 < n2 && i3 < r2; ) {
      if (a4 !== e3.get(o2, i3)) {
        if (5 == ++u3)
          break;
        a4 = !a4;
      }
      o2++, i3++;
    }
    if (o2 === n2 || i3 === r2)
      throw new U();
    return (o2 - t4[0]) / 7;
  }, t3.NO_POINTS = new Array(), t3;
}(), un = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, sn = function() {
  function t3() {
  }
  return t3.prototype.PDF417Common = function() {
  }, t3.getBitCountSum = function(t4) {
    return vt.sum(t4);
  }, t3.toIntArray = function(e3) {
    var r2, n2;
    if (null == e3 || !e3.length)
      return t3.EMPTY_INT_ARRAY;
    var o2 = new Int32Array(e3.length), i3 = 0;
    try {
      for (var a4 = un(e3), u3 = a4.next(); !u3.done; u3 = a4.next()) {
        var s4 = u3.value;
        o2[i3++] = s4;
      }
    } catch (t4) {
      r2 = { error: t4 };
    } finally {
      try {
        u3 && !u3.done && (n2 = a4.return) && n2.call(a4);
      } finally {
        if (r2)
          throw r2.error;
      }
    }
    return o2;
  }, t3.getCodeword = function(e3) {
    var r2 = C.binarySearch(t3.SYMBOL_TABLE, 262143 & e3);
    return r2 < 0 ? -1 : (t3.CODEWORD_TABLE[r2] - 1) % t3.NUMBER_OF_CODEWORDS;
  }, t3.NUMBER_OF_CODEWORDS = 929, t3.MAX_CODEWORDS_IN_BARCODE = t3.NUMBER_OF_CODEWORDS - 1, t3.MIN_ROWS_IN_BARCODE = 3, t3.MAX_ROWS_IN_BARCODE = 90, t3.MODULES_IN_CODEWORD = 17, t3.MODULES_IN_STOP_PATTERN = 18, t3.BARS_IN_MODULE = 8, t3.EMPTY_INT_ARRAY = new Int32Array([]), t3.SYMBOL_TABLE = Int32Array.from([66142, 66170, 66206, 66236, 66290, 66292, 66350, 66382, 66396, 66454, 66470, 66476, 66594, 66600, 66614, 66626, 66628, 66632, 66640, 66654, 66662, 66668, 66682, 66690, 66718, 66720, 66748, 66758, 66776, 66798, 66802, 66804, 66820, 66824, 66832, 66846, 66848, 66876, 66880, 66936, 66950, 66956, 66968, 66992, 67006, 67022, 67036, 67042, 67044, 67048, 67062, 67118, 67150, 67164, 67214, 67228, 67256, 67294, 67322, 67350, 67366, 67372, 67398, 67404, 67416, 67438, 67474, 67476, 67490, 67492, 67496, 67510, 67618, 67624, 67650, 67656, 67664, 67678, 67686, 67692, 67706, 67714, 67716, 67728, 67742, 67744, 67772, 67782, 67788, 67800, 67822, 67826, 67828, 67842, 67848, 67870, 67872, 67900, 67904, 67960, 67974, 67992, 68016, 68030, 68046, 68060, 68066, 68068, 68072, 68086, 68104, 68112, 68126, 68128, 68156, 68160, 68216, 68336, 68358, 68364, 68376, 68400, 68414, 68448, 68476, 68494, 68508, 68536, 68546, 68548, 68552, 68560, 68574, 68582, 68588, 68654, 68686, 68700, 68706, 68708, 68712, 68726, 68750, 68764, 68792, 68802, 68804, 68808, 68816, 68830, 68838, 68844, 68858, 68878, 68892, 68920, 68976, 68990, 68994, 68996, 69e3, 69008, 69022, 69024, 69052, 69062, 69068, 69080, 69102, 69106, 69108, 69142, 69158, 69164, 69190, 69208, 69230, 69254, 69260, 69272, 69296, 69310, 69326, 69340, 69386, 69394, 69396, 69410, 69416, 69430, 69442, 69444, 69448, 69456, 69470, 69478, 69484, 69554, 69556, 69666, 69672, 69698, 69704, 69712, 69726, 69754, 69762, 69764, 69776, 69790, 69792, 69820, 69830, 69836, 69848, 69870, 69874, 69876, 69890, 69918, 69920, 69948, 69952, 70008, 70022, 70040, 70064, 70078, 70094, 70108, 70114, 70116, 70120, 70134, 70152, 70174, 70176, 70264, 70384, 70412, 70448, 70462, 70496, 70524, 70542, 70556, 70584, 70594, 70600, 70608, 70622, 70630, 70636, 70664, 70672, 70686, 70688, 70716, 70720, 70776, 70896, 71136, 71180, 71192, 71216, 71230, 71264, 71292, 71360, 71416, 71452, 71480, 71536, 71550, 71554, 71556, 71560, 71568, 71582, 71584, 71612, 71622, 71628, 71640, 71662, 71726, 71732, 71758, 71772, 71778, 71780, 71784, 71798, 71822, 71836, 71864, 71874, 71880, 71888, 71902, 71910, 71916, 71930, 71950, 71964, 71992, 72048, 72062, 72066, 72068, 72080, 72094, 72096, 72124, 72134, 72140, 72152, 72174, 72178, 72180, 72206, 72220, 72248, 72304, 72318, 72416, 72444, 72456, 72464, 72478, 72480, 72508, 72512, 72568, 72588, 72600, 72624, 72638, 72654, 72668, 72674, 72676, 72680, 72694, 72726, 72742, 72748, 72774, 72780, 72792, 72814, 72838, 72856, 72880, 72894, 72910, 72924, 72930, 72932, 72936, 72950, 72966, 72972, 72984, 73008, 73022, 73056, 73084, 73102, 73116, 73144, 73156, 73160, 73168, 73182, 73190, 73196, 73210, 73226, 73234, 73236, 73250, 73252, 73256, 73270, 73282, 73284, 73296, 73310, 73318, 73324, 73346, 73348, 73352, 73360, 73374, 73376, 73404, 73414, 73420, 73432, 73454, 73498, 73518, 73522, 73524, 73550, 73564, 73570, 73572, 73576, 73590, 73800, 73822, 73858, 73860, 73872, 73886, 73888, 73916, 73944, 73970, 73972, 73992, 74014, 74016, 74044, 74048, 74104, 74118, 74136, 74160, 74174, 74210, 74212, 74216, 74230, 74244, 74256, 74270, 74272, 74360, 74480, 74502, 74508, 74544, 74558, 74592, 74620, 74638, 74652, 74680, 74690, 74696, 74704, 74726, 74732, 74782, 74784, 74812, 74992, 75232, 75288, 75326, 75360, 75388, 75456, 75512, 75576, 75632, 75646, 75650, 75652, 75664, 75678, 75680, 75708, 75718, 75724, 75736, 75758, 75808, 75836, 75840, 75896, 76016, 76256, 76736, 76824, 76848, 76862, 76896, 76924, 76992, 77048, 77296, 77340, 77368, 77424, 77438, 77536, 77564, 77572, 77576, 77584, 77600, 77628, 77632, 77688, 77702, 77708, 77720, 77744, 77758, 77774, 77788, 77870, 77902, 77916, 77922, 77928, 77966, 77980, 78008, 78018, 78024, 78032, 78046, 78060, 78074, 78094, 78136, 78192, 78206, 78210, 78212, 78224, 78238, 78240, 78268, 78278, 78284, 78296, 78322, 78324, 78350, 78364, 78448, 78462, 78560, 78588, 78600, 78622, 78624, 78652, 78656, 78712, 78726, 78744, 78768, 78782, 78798, 78812, 78818, 78820, 78824, 78838, 78862, 78876, 78904, 78960, 78974, 79072, 79100, 79296, 79352, 79368, 79376, 79390, 79392, 79420, 79424, 79480, 79600, 79628, 79640, 79664, 79678, 79712, 79740, 79772, 79800, 79810, 79812, 79816, 79824, 79838, 79846, 79852, 79894, 79910, 79916, 79942, 79948, 79960, 79982, 79988, 80006, 80024, 80048, 80062, 80078, 80092, 80098, 80100, 80104, 80134, 80140, 80176, 80190, 80224, 80252, 80270, 80284, 80312, 80328, 80336, 80350, 80358, 80364, 80378, 80390, 80396, 80408, 80432, 80446, 80480, 80508, 80576, 80632, 80654, 80668, 80696, 80752, 80766, 80776, 80784, 80798, 80800, 80828, 80844, 80856, 80878, 80882, 80884, 80914, 80916, 80930, 80932, 80936, 80950, 80962, 80968, 80976, 80990, 80998, 81004, 81026, 81028, 81040, 81054, 81056, 81084, 81094, 81100, 81112, 81134, 81154, 81156, 81160, 81168, 81182, 81184, 81212, 81216, 81272, 81286, 81292, 81304, 81328, 81342, 81358, 81372, 81380, 81384, 81398, 81434, 81454, 81458, 81460, 81486, 81500, 81506, 81508, 81512, 81526, 81550, 81564, 81592, 81602, 81604, 81608, 81616, 81630, 81638, 81644, 81702, 81708, 81722, 81734, 81740, 81752, 81774, 81778, 81780, 82050, 82078, 82080, 82108, 82180, 82184, 82192, 82206, 82208, 82236, 82240, 82296, 82316, 82328, 82352, 82366, 82402, 82404, 82408, 82440, 82448, 82462, 82464, 82492, 82496, 82552, 82672, 82694, 82700, 82712, 82736, 82750, 82784, 82812, 82830, 82882, 82884, 82888, 82896, 82918, 82924, 82952, 82960, 82974, 82976, 83004, 83008, 83064, 83184, 83424, 83468, 83480, 83504, 83518, 83552, 83580, 83648, 83704, 83740, 83768, 83824, 83838, 83842, 83844, 83848, 83856, 83872, 83900, 83910, 83916, 83928, 83950, 83984, 84e3, 84028, 84032, 84088, 84208, 84448, 84928, 85040, 85054, 85088, 85116, 85184, 85240, 85488, 85560, 85616, 85630, 85728, 85756, 85764, 85768, 85776, 85790, 85792, 85820, 85824, 85880, 85894, 85900, 85912, 85936, 85966, 85980, 86048, 86080, 86136, 86256, 86496, 86976, 88160, 88188, 88256, 88312, 88560, 89056, 89200, 89214, 89312, 89340, 89536, 89592, 89608, 89616, 89632, 89664, 89720, 89840, 89868, 89880, 89904, 89952, 89980, 89998, 90012, 90040, 90190, 90204, 90254, 90268, 90296, 90306, 90308, 90312, 90334, 90382, 90396, 90424, 90480, 90494, 90500, 90504, 90512, 90526, 90528, 90556, 90566, 90572, 90584, 90610, 90612, 90638, 90652, 90680, 90736, 90750, 90848, 90876, 90884, 90888, 90896, 90910, 90912, 90940, 90944, 91e3, 91014, 91020, 91032, 91056, 91070, 91086, 91100, 91106, 91108, 91112, 91126, 91150, 91164, 91192, 91248, 91262, 91360, 91388, 91584, 91640, 91664, 91678, 91680, 91708, 91712, 91768, 91888, 91928, 91952, 91966, 92e3, 92028, 92046, 92060, 92088, 92098, 92100, 92104, 92112, 92126, 92134, 92140, 92188, 92216, 92272, 92384, 92412, 92608, 92664, 93168, 93200, 93214, 93216, 93244, 93248, 93304, 93424, 93664, 93720, 93744, 93758, 93792, 93820, 93888, 93944, 93980, 94008, 94064, 94078, 94084, 94088, 94096, 94110, 94112, 94140, 94150, 94156, 94168, 94246, 94252, 94278, 94284, 94296, 94318, 94342, 94348, 94360, 94384, 94398, 94414, 94428, 94440, 94470, 94476, 94488, 94512, 94526, 94560, 94588, 94606, 94620, 94648, 94658, 94660, 94664, 94672, 94686, 94694, 94700, 94714, 94726, 94732, 94744, 94768, 94782, 94816, 94844, 94912, 94968, 94990, 95004, 95032, 95088, 95102, 95112, 95120, 95134, 95136, 95164, 95180, 95192, 95214, 95218, 95220, 95244, 95256, 95280, 95294, 95328, 95356, 95424, 95480, 95728, 95758, 95772, 95800, 95856, 95870, 95968, 95996, 96008, 96016, 96030, 96032, 96060, 96064, 96120, 96152, 96176, 96190, 96220, 96226, 96228, 96232, 96290, 96292, 96296, 96310, 96322, 96324, 96328, 96336, 96350, 96358, 96364, 96386, 96388, 96392, 96400, 96414, 96416, 96444, 96454, 96460, 96472, 96494, 96498, 96500, 96514, 96516, 96520, 96528, 96542, 96544, 96572, 96576, 96632, 96646, 96652, 96664, 96688, 96702, 96718, 96732, 96738, 96740, 96744, 96758, 96772, 96776, 96784, 96798, 96800, 96828, 96832, 96888, 97008, 97030, 97036, 97048, 97072, 97086, 97120, 97148, 97166, 97180, 97208, 97220, 97224, 97232, 97246, 97254, 97260, 97326, 97330, 97332, 97358, 97372, 97378, 97380, 97384, 97398, 97422, 97436, 97464, 97474, 97476, 97480, 97488, 97502, 97510, 97516, 97550, 97564, 97592, 97648, 97666, 97668, 97672, 97680, 97694, 97696, 97724, 97734, 97740, 97752, 97774, 97830, 97836, 97850, 97862, 97868, 97880, 97902, 97906, 97908, 97926, 97932, 97944, 97968, 97998, 98012, 98018, 98020, 98024, 98038, 98618, 98674, 98676, 98838, 98854, 98874, 98892, 98904, 98926, 98930, 98932, 98968, 99006, 99042, 99044, 99048, 99062, 99166, 99194, 99246, 99286, 99350, 99366, 99372, 99386, 99398, 99416, 99438, 99442, 99444, 99462, 99504, 99518, 99534, 99548, 99554, 99556, 99560, 99574, 99590, 99596, 99608, 99632, 99646, 99680, 99708, 99726, 99740, 99768, 99778, 99780, 99784, 99792, 99806, 99814, 99820, 99834, 99858, 99860, 99874, 99880, 99894, 99906, 99920, 99934, 99962, 99970, 99972, 99976, 99984, 99998, 1e5, 100028, 100038, 100044, 100056, 100078, 100082, 100084, 100142, 100174, 100188, 100246, 100262, 100268, 100306, 100308, 100390, 100396, 100410, 100422, 100428, 100440, 100462, 100466, 100468, 100486, 100504, 100528, 100542, 100558, 100572, 100578, 100580, 100584, 100598, 100620, 100656, 100670, 100704, 100732, 100750, 100792, 100802, 100808, 100816, 100830, 100838, 100844, 100858, 100888, 100912, 100926, 100960, 100988, 101056, 101112, 101148, 101176, 101232, 101246, 101250, 101252, 101256, 101264, 101278, 101280, 101308, 101318, 101324, 101336, 101358, 101362, 101364, 101410, 101412, 101416, 101430, 101442, 101448, 101456, 101470, 101478, 101498, 101506, 101508, 101520, 101534, 101536, 101564, 101580, 101618, 101620, 101636, 101640, 101648, 101662, 101664, 101692, 101696, 101752, 101766, 101784, 101838, 101858, 101860, 101864, 101934, 101938, 101940, 101966, 101980, 101986, 101988, 101992, 102030, 102044, 102072, 102082, 102084, 102088, 102096, 102138, 102166, 102182, 102188, 102214, 102220, 102232, 102254, 102282, 102290, 102292, 102306, 102308, 102312, 102326, 102444, 102458, 102470, 102476, 102488, 102514, 102516, 102534, 102552, 102576, 102590, 102606, 102620, 102626, 102632, 102646, 102662, 102668, 102704, 102718, 102752, 102780, 102798, 102812, 102840, 102850, 102856, 102864, 102878, 102886, 102892, 102906, 102936, 102974, 103008, 103036, 103104, 103160, 103224, 103280, 103294, 103298, 103300, 103312, 103326, 103328, 103356, 103366, 103372, 103384, 103406, 103410, 103412, 103472, 103486, 103520, 103548, 103616, 103672, 103920, 103992, 104048, 104062, 104160, 104188, 104194, 104196, 104200, 104208, 104224, 104252, 104256, 104312, 104326, 104332, 104344, 104368, 104382, 104398, 104412, 104418, 104420, 104424, 104482, 104484, 104514, 104520, 104528, 104542, 104550, 104570, 104578, 104580, 104592, 104606, 104608, 104636, 104652, 104690, 104692, 104706, 104712, 104734, 104736, 104764, 104768, 104824, 104838, 104856, 104910, 104930, 104932, 104936, 104968, 104976, 104990, 104992, 105020, 105024, 105080, 105200, 105240, 105278, 105312, 105372, 105410, 105412, 105416, 105424, 105446, 105518, 105524, 105550, 105564, 105570, 105572, 105576, 105614, 105628, 105656, 105666, 105672, 105680, 105702, 105722, 105742, 105756, 105784, 105840, 105854, 105858, 105860, 105864, 105872, 105888, 105932, 105970, 105972, 106006, 106022, 106028, 106054, 106060, 106072, 106100, 106118, 106124, 106136, 106160, 106174, 106190, 106210, 106212, 106216, 106250, 106258, 106260, 106274, 106276, 106280, 106306, 106308, 106312, 106320, 106334, 106348, 106394, 106414, 106418, 106420, 106566, 106572, 106610, 106612, 106630, 106636, 106648, 106672, 106686, 106722, 106724, 106728, 106742, 106758, 106764, 106776, 106800, 106814, 106848, 106876, 106894, 106908, 106936, 106946, 106948, 106952, 106960, 106974, 106982, 106988, 107032, 107056, 107070, 107104, 107132, 107200, 107256, 107292, 107320, 107376, 107390, 107394, 107396, 107400, 107408, 107422, 107424, 107452, 107462, 107468, 107480, 107502, 107506, 107508, 107544, 107568, 107582, 107616, 107644, 107712, 107768, 108016, 108060, 108088, 108144, 108158, 108256, 108284, 108290, 108292, 108296, 108304, 108318, 108320, 108348, 108352, 108408, 108422, 108428, 108440, 108464, 108478, 108494, 108508, 108514, 108516, 108520, 108592, 108640, 108668, 108736, 108792, 109040, 109536, 109680, 109694, 109792, 109820, 110016, 110072, 110084, 110088, 110096, 110112, 110140, 110144, 110200, 110320, 110342, 110348, 110360, 110384, 110398, 110432, 110460, 110478, 110492, 110520, 110532, 110536, 110544, 110558, 110658, 110686, 110714, 110722, 110724, 110728, 110736, 110750, 110752, 110780, 110796, 110834, 110836, 110850, 110852, 110856, 110864, 110878, 110880, 110908, 110912, 110968, 110982, 111e3, 111054, 111074, 111076, 111080, 111108, 111112, 111120, 111134, 111136, 111164, 111168, 111224, 111344, 111372, 111422, 111456, 111516, 111554, 111556, 111560, 111568, 111590, 111632, 111646, 111648, 111676, 111680, 111736, 111856, 112096, 112152, 112224, 112252, 112320, 112440, 112514, 112516, 112520, 112528, 112542, 112544, 112588, 112686, 112718, 112732, 112782, 112796, 112824, 112834, 112836, 112840, 112848, 112870, 112890, 112910, 112924, 112952, 113008, 113022, 113026, 113028, 113032, 113040, 113054, 113056, 113100, 113138, 113140, 113166, 113180, 113208, 113264, 113278, 113376, 113404, 113416, 113424, 113440, 113468, 113472, 113560, 113614, 113634, 113636, 113640, 113686, 113702, 113708, 113734, 113740, 113752, 113778, 113780, 113798, 113804, 113816, 113840, 113854, 113870, 113890, 113892, 113896, 113926, 113932, 113944, 113968, 113982, 114016, 114044, 114076, 114114, 114116, 114120, 114128, 114150, 114170, 114194, 114196, 114210, 114212, 114216, 114242, 114244, 114248, 114256, 114270, 114278, 114306, 114308, 114312, 114320, 114334, 114336, 114364, 114380, 114420, 114458, 114478, 114482, 114484, 114510, 114524, 114530, 114532, 114536, 114842, 114866, 114868, 114970, 114994, 114996, 115042, 115044, 115048, 115062, 115130, 115226, 115250, 115252, 115278, 115292, 115298, 115300, 115304, 115318, 115342, 115394, 115396, 115400, 115408, 115422, 115430, 115436, 115450, 115478, 115494, 115514, 115526, 115532, 115570, 115572, 115738, 115758, 115762, 115764, 115790, 115804, 115810, 115812, 115816, 115830, 115854, 115868, 115896, 115906, 115912, 115920, 115934, 115942, 115948, 115962, 115996, 116024, 116080, 116094, 116098, 116100, 116104, 116112, 116126, 116128, 116156, 116166, 116172, 116184, 116206, 116210, 116212, 116246, 116262, 116268, 116282, 116294, 116300, 116312, 116334, 116338, 116340, 116358, 116364, 116376, 116400, 116414, 116430, 116444, 116450, 116452, 116456, 116498, 116500, 116514, 116520, 116534, 116546, 116548, 116552, 116560, 116574, 116582, 116588, 116602, 116654, 116694, 116714, 116762, 116782, 116786, 116788, 116814, 116828, 116834, 116836, 116840, 116854, 116878, 116892, 116920, 116930, 116936, 116944, 116958, 116966, 116972, 116986, 117006, 117048, 117104, 117118, 117122, 117124, 117136, 117150, 117152, 117180, 117190, 117196, 117208, 117230, 117234, 117236, 117304, 117360, 117374, 117472, 117500, 117506, 117508, 117512, 117520, 117536, 117564, 117568, 117624, 117638, 117644, 117656, 117680, 117694, 117710, 117724, 117730, 117732, 117736, 117750, 117782, 117798, 117804, 117818, 117830, 117848, 117874, 117876, 117894, 117936, 117950, 117966, 117986, 117988, 117992, 118022, 118028, 118040, 118064, 118078, 118112, 118140, 118172, 118210, 118212, 118216, 118224, 118238, 118246, 118266, 118306, 118312, 118338, 118352, 118366, 118374, 118394, 118402, 118404, 118408, 118416, 118430, 118432, 118460, 118476, 118514, 118516, 118574, 118578, 118580, 118606, 118620, 118626, 118628, 118632, 118678, 118694, 118700, 118730, 118738, 118740, 118830, 118834, 118836, 118862, 118876, 118882, 118884, 118888, 118902, 118926, 118940, 118968, 118978, 118980, 118984, 118992, 119006, 119014, 119020, 119034, 119068, 119096, 119152, 119166, 119170, 119172, 119176, 119184, 119198, 119200, 119228, 119238, 119244, 119256, 119278, 119282, 119284, 119324, 119352, 119408, 119422, 119520, 119548, 119554, 119556, 119560, 119568, 119582, 119584, 119612, 119616, 119672, 119686, 119692, 119704, 119728, 119742, 119758, 119772, 119778, 119780, 119784, 119798, 119920, 119934, 120032, 120060, 120256, 120312, 120324, 120328, 120336, 120352, 120384, 120440, 120560, 120582, 120588, 120600, 120624, 120638, 120672, 120700, 120718, 120732, 120760, 120770, 120772, 120776, 120784, 120798, 120806, 120812, 120870, 120876, 120890, 120902, 120908, 120920, 120946, 120948, 120966, 120972, 120984, 121008, 121022, 121038, 121058, 121060, 121064, 121078, 121100, 121112, 121136, 121150, 121184, 121212, 121244, 121282, 121284, 121288, 121296, 121318, 121338, 121356, 121368, 121392, 121406, 121440, 121468, 121536, 121592, 121656, 121730, 121732, 121736, 121744, 121758, 121760, 121804, 121842, 121844, 121890, 121922, 121924, 121928, 121936, 121950, 121958, 121978, 121986, 121988, 121992, 122e3, 122014, 122016, 122044, 122060, 122098, 122100, 122116, 122120, 122128, 122142, 122144, 122172, 122176, 122232, 122246, 122264, 122318, 122338, 122340, 122344, 122414, 122418, 122420, 122446, 122460, 122466, 122468, 122472, 122510, 122524, 122552, 122562, 122564, 122568, 122576, 122598, 122618, 122646, 122662, 122668, 122694, 122700, 122712, 122738, 122740, 122762, 122770, 122772, 122786, 122788, 122792, 123018, 123026, 123028, 123042, 123044, 123048, 123062, 123098, 123146, 123154, 123156, 123170, 123172, 123176, 123190, 123202, 123204, 123208, 123216, 123238, 123244, 123258, 123290, 123314, 123316, 123402, 123410, 123412, 123426, 123428, 123432, 123446, 123458, 123464, 123472, 123486, 123494, 123500, 123514, 123522, 123524, 123528, 123536, 123552, 123580, 123590, 123596, 123608, 123630, 123634, 123636, 123674, 123698, 123700, 123740, 123746, 123748, 123752, 123834, 123914, 123922, 123924, 123938, 123944, 123958, 123970, 123976, 123984, 123998, 124006, 124012, 124026, 124034, 124036, 124048, 124062, 124064, 124092, 124102, 124108, 124120, 124142, 124146, 124148, 124162, 124164, 124168, 124176, 124190, 124192, 124220, 124224, 124280, 124294, 124300, 124312, 124336, 124350, 124366, 124380, 124386, 124388, 124392, 124406, 124442, 124462, 124466, 124468, 124494, 124508, 124514, 124520, 124558, 124572, 124600, 124610, 124612, 124616, 124624, 124646, 124666, 124694, 124710, 124716, 124730, 124742, 124748, 124760, 124786, 124788, 124818, 124820, 124834, 124836, 124840, 124854, 124946, 124948, 124962, 124964, 124968, 124982, 124994, 124996, 125e3, 125008, 125022, 125030, 125036, 125050, 125058, 125060, 125064, 125072, 125086, 125088, 125116, 125126, 125132, 125144, 125166, 125170, 125172, 125186, 125188, 125192, 125200, 125216, 125244, 125248, 125304, 125318, 125324, 125336, 125360, 125374, 125390, 125404, 125410, 125412, 125416, 125430, 125444, 125448, 125456, 125472, 125504, 125560, 125680, 125702, 125708, 125720, 125744, 125758, 125792, 125820, 125838, 125852, 125880, 125890, 125892, 125896, 125904, 125918, 125926, 125932, 125978, 125998, 126002, 126004, 126030, 126044, 126050, 126052, 126056, 126094, 126108, 126136, 126146, 126148, 126152, 126160, 126182, 126202, 126222, 126236, 126264, 126320, 126334, 126338, 126340, 126344, 126352, 126366, 126368, 126412, 126450, 126452, 126486, 126502, 126508, 126522, 126534, 126540, 126552, 126574, 126578, 126580, 126598, 126604, 126616, 126640, 126654, 126670, 126684, 126690, 126692, 126696, 126738, 126754, 126756, 126760, 126774, 126786, 126788, 126792, 126800, 126814, 126822, 126828, 126842, 126894, 126898, 126900, 126934, 127126, 127142, 127148, 127162, 127178, 127186, 127188, 127254, 127270, 127276, 127290, 127302, 127308, 127320, 127342, 127346, 127348, 127370, 127378, 127380, 127394, 127396, 127400, 127450, 127510, 127526, 127532, 127546, 127558, 127576, 127598, 127602, 127604, 127622, 127628, 127640, 127664, 127678, 127694, 127708, 127714, 127716, 127720, 127734, 127754, 127762, 127764, 127778, 127784, 127810, 127812, 127816, 127824, 127838, 127846, 127866, 127898, 127918, 127922, 127924, 128022, 128038, 128044, 128058, 128070, 128076, 128088, 128110, 128114, 128116, 128134, 128140, 128152, 128176, 128190, 128206, 128220, 128226, 128228, 128232, 128246, 128262, 128268, 128280, 128304, 128318, 128352, 128380, 128398, 128412, 128440, 128450, 128452, 128456, 128464, 128478, 128486, 128492, 128506, 128522, 128530, 128532, 128546, 128548, 128552, 128566, 128578, 128580, 128584, 128592, 128606, 128614, 128634, 128642, 128644, 128648, 128656, 128670, 128672, 128700, 128716, 128754, 128756, 128794, 128814, 128818, 128820, 128846, 128860, 128866, 128868, 128872, 128886, 128918, 128934, 128940, 128954, 128978, 128980, 129178, 129198, 129202, 129204, 129238, 129258, 129306, 129326, 129330, 129332, 129358, 129372, 129378, 129380, 129384, 129398, 129430, 129446, 129452, 129466, 129482, 129490, 129492, 129562, 129582, 129586, 129588, 129614, 129628, 129634, 129636, 129640, 129654, 129678, 129692, 129720, 129730, 129732, 129736, 129744, 129758, 129766, 129772, 129814, 129830, 129836, 129850, 129862, 129868, 129880, 129902, 129906, 129908, 129930, 129938, 129940, 129954, 129956, 129960, 129974, 130010]), t3.CODEWORD_TABLE = Int32Array.from([2627, 1819, 2622, 2621, 1813, 1812, 2729, 2724, 2723, 2779, 2774, 2773, 902, 896, 908, 868, 865, 861, 859, 2511, 873, 871, 1780, 835, 2493, 825, 2491, 842, 837, 844, 1764, 1762, 811, 810, 809, 2483, 807, 2482, 806, 2480, 815, 814, 813, 812, 2484, 817, 816, 1745, 1744, 1742, 1746, 2655, 2637, 2635, 2626, 2625, 2623, 2628, 1820, 2752, 2739, 2737, 2728, 2727, 2725, 2730, 2785, 2783, 2778, 2777, 2775, 2780, 787, 781, 747, 739, 736, 2413, 754, 752, 1719, 692, 689, 681, 2371, 678, 2369, 700, 697, 694, 703, 1688, 1686, 642, 638, 2343, 631, 2341, 627, 2338, 651, 646, 643, 2345, 654, 652, 1652, 1650, 1647, 1654, 601, 599, 2322, 596, 2321, 594, 2319, 2317, 611, 610, 608, 606, 2324, 603, 2323, 615, 614, 612, 1617, 1616, 1614, 1612, 616, 1619, 1618, 2575, 2538, 2536, 905, 901, 898, 909, 2509, 2507, 2504, 870, 867, 864, 860, 2512, 875, 872, 1781, 2490, 2489, 2487, 2485, 1748, 836, 834, 832, 830, 2494, 827, 2492, 843, 841, 839, 845, 1765, 1763, 2701, 2676, 2674, 2653, 2648, 2656, 2634, 2633, 2631, 2629, 1821, 2638, 2636, 2770, 2763, 2761, 2750, 2745, 2753, 2736, 2735, 2733, 2731, 1848, 2740, 2738, 2786, 2784, 591, 588, 576, 569, 566, 2296, 1590, 537, 534, 526, 2276, 522, 2274, 545, 542, 539, 548, 1572, 1570, 481, 2245, 466, 2242, 462, 2239, 492, 485, 482, 2249, 496, 494, 1534, 1531, 1528, 1538, 413, 2196, 406, 2191, 2188, 425, 419, 2202, 415, 2199, 432, 430, 427, 1472, 1467, 1464, 433, 1476, 1474, 368, 367, 2160, 365, 2159, 362, 2157, 2155, 2152, 378, 377, 375, 2166, 372, 2165, 369, 2162, 383, 381, 379, 2168, 1419, 1418, 1416, 1414, 385, 1411, 384, 1423, 1422, 1420, 1424, 2461, 802, 2441, 2439, 790, 786, 783, 794, 2409, 2406, 2403, 750, 742, 738, 2414, 756, 753, 1720, 2367, 2365, 2362, 2359, 1663, 693, 691, 684, 2373, 680, 2370, 702, 699, 696, 704, 1690, 1687, 2337, 2336, 2334, 2332, 1624, 2329, 1622, 640, 637, 2344, 634, 2342, 630, 2340, 650, 648, 645, 2346, 655, 653, 1653, 1651, 1649, 1655, 2612, 2597, 2595, 2571, 2568, 2565, 2576, 2534, 2529, 2526, 1787, 2540, 2537, 907, 904, 900, 910, 2503, 2502, 2500, 2498, 1768, 2495, 1767, 2510, 2508, 2506, 869, 866, 863, 2513, 876, 874, 1782, 2720, 2713, 2711, 2697, 2694, 2691, 2702, 2672, 2670, 2664, 1828, 2678, 2675, 2647, 2646, 2644, 2642, 1823, 2639, 1822, 2654, 2652, 2650, 2657, 2771, 1855, 2765, 2762, 1850, 1849, 2751, 2749, 2747, 2754, 353, 2148, 344, 342, 336, 2142, 332, 2140, 345, 1375, 1373, 306, 2130, 299, 2128, 295, 2125, 319, 314, 311, 2132, 1354, 1352, 1349, 1356, 262, 257, 2101, 253, 2096, 2093, 274, 273, 267, 2107, 263, 2104, 280, 278, 275, 1316, 1311, 1308, 1320, 1318, 2052, 202, 2050, 2044, 2040, 219, 2063, 212, 2060, 208, 2055, 224, 221, 2066, 1260, 1258, 1252, 231, 1248, 229, 1266, 1264, 1261, 1268, 155, 1998, 153, 1996, 1994, 1991, 1988, 165, 164, 2007, 162, 2006, 159, 2003, 2ee3, 997, 38, 1013, 1010, 1932, 1930, 1927, 1934, 941, 939, 936, 933, 6, 930, 3, 951, 948, 944, 1889, 1887, 1884, 1881, 959, 1893, 1891, 35, 1377, 1360, 1358, 1327, 1325, 1322, 1331, 1277, 1275, 1272, 1269, 235, 1284, 2110, 1205, 1204, 1201, 1198, 182, 1195, 179, 1213, 2070, 2067, 1580, 501, 1551, 1548, 440, 437, 1497, 1494, 1490, 1503, 761, 709, 707, 1706, 913, 912, 2198, 1386, 2164, 2161, 1621, 1766, 2103, 1208, 2058, 2054, 1145, 1142, 2005, 2002, 1999, 2009, 1488, 1429, 1426, 2200, 1698, 1659, 1656, 1975, 1053, 1957, 1954, 1001, 998, 1924, 1921, 1918, 1928, 937, 934, 931, 1879, 1876, 1873, 1870, 945, 1885, 1882, 1323, 1273, 1270, 2105, 1202, 1199, 1196, 1211, 2061, 2057, 1576, 1543, 1540, 1484, 1481, 1478, 1491, 1700]), t3;
}(), cn = function() {
  function t3(t4, e3) {
    this.bits = t4, this.points = e3;
  }
  return t3.prototype.getBits = function() {
    return this.bits;
  }, t3.prototype.getPoints = function() {
    return this.points;
  }, t3;
}(), fn = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, hn = function() {
  function t3() {
  }
  return t3.detectMultiple = function(e3, r2, n2) {
    var o2 = e3.getBlackMatrix(), i3 = t3.detect(n2, o2);
    return i3.length || ((o2 = o2.clone()).rotate180(), i3 = t3.detect(n2, o2)), new cn(o2, i3);
  }, t3.detect = function(e3, r2) {
    for (var n2, o2, i3 = new Array(), a4 = 0, u3 = 0, s4 = false; a4 < r2.getHeight(); ) {
      var c7 = t3.findVertices(r2, a4, u3);
      if (null != c7[0] || null != c7[3]) {
        if (s4 = true, i3.push(c7), !e3)
          break;
        null != c7[2] ? (u3 = Math.trunc(c7[2].getX()), a4 = Math.trunc(c7[2].getY())) : (u3 = Math.trunc(c7[4].getX()), a4 = Math.trunc(c7[4].getY()));
      } else {
        if (!s4)
          break;
        s4 = false, u3 = 0;
        try {
          for (var f2 = (n2 = void 0, fn(i3)), h4 = f2.next(); !h4.done; h4 = f2.next()) {
            var l2 = h4.value;
            null != l2[1] && (a4 = Math.trunc(Math.max(a4, l2[1].getY()))), null != l2[3] && (a4 = Math.max(a4, Math.trunc(l2[3].getY())));
          }
        } catch (t4) {
          n2 = { error: t4 };
        } finally {
          try {
            h4 && !h4.done && (o2 = f2.return) && o2.call(f2);
          } finally {
            if (n2)
              throw n2.error;
          }
        }
        a4 += t3.ROW_STEP;
      }
    }
    return i3;
  }, t3.findVertices = function(e3, r2, n2) {
    var o2 = e3.getHeight(), i3 = e3.getWidth(), a4 = new Array(8);
    return t3.copyToResult(a4, t3.findRowsWithPattern(e3, o2, i3, r2, n2, t3.START_PATTERN), t3.INDEXES_START_PATTERN), null != a4[4] && (n2 = Math.trunc(a4[4].getX()), r2 = Math.trunc(a4[4].getY())), t3.copyToResult(a4, t3.findRowsWithPattern(e3, o2, i3, r2, n2, t3.STOP_PATTERN), t3.INDEXES_STOP_PATTERN), a4;
  }, t3.copyToResult = function(t4, e3, r2) {
    for (var n2 = 0; n2 < r2.length; n2++)
      t4[r2[n2]] = e3[n2];
  }, t3.findRowsWithPattern = function(e3, r2, n2, o2, i3, a4) {
    for (var u3 = new Array(4), s4 = false, c7 = new Int32Array(a4.length); o2 < r2; o2 += t3.ROW_STEP) {
      if (null != (d4 = t3.findGuardPattern(e3, i3, o2, n2, false, a4, c7))) {
        for (; o2 > 0; ) {
          if (null == (l2 = t3.findGuardPattern(e3, i3, --o2, n2, false, a4, c7))) {
            o2++;
            break;
          }
          d4 = l2;
        }
        u3[0] = new At(d4[0], o2), u3[1] = new At(d4[1], o2), s4 = true;
        break;
      }
    }
    var f2 = o2 + 1;
    if (s4) {
      for (var h4 = 0, l2 = Int32Array.from([Math.trunc(u3[0].getX()), Math.trunc(u3[1].getX())]); f2 < r2; f2++) {
        var d4;
        if (null != (d4 = t3.findGuardPattern(e3, l2[0], f2, n2, false, a4, c7)) && Math.abs(l2[0] - d4[0]) < t3.MAX_PATTERN_DRIFT && Math.abs(l2[1] - d4[1]) < t3.MAX_PATTERN_DRIFT)
          l2 = d4, h4 = 0;
        else {
          if (h4 > t3.SKIPPED_ROW_COUNT_MAX)
            break;
          h4++;
        }
      }
      f2 -= h4 + 1, u3[2] = new At(l2[0], f2), u3[3] = new At(l2[1], f2);
    }
    return f2 - o2 < t3.BARCODE_MIN_HEIGHT && C.fill(u3, null), u3;
  }, t3.findGuardPattern = function(e3, r2, n2, o2, i3, a4, u3) {
    C.fillWithin(u3, 0, u3.length, 0);
    for (var s4 = r2, c7 = 0; e3.get(s4, n2) && s4 > 0 && c7++ < t3.MAX_PIXEL_DRIFT; )
      s4--;
    for (var f2 = s4, h4 = 0, l2 = a4.length, d4 = i3; f2 < o2; f2++) {
      if (e3.get(f2, n2) !== d4)
        u3[h4]++;
      else {
        if (h4 === l2 - 1) {
          if (t3.patternMatchVariance(u3, a4, t3.MAX_INDIVIDUAL_VARIANCE) < t3.MAX_AVG_VARIANCE)
            return new Int32Array([s4, f2]);
          s4 += u3[0] + u3[1], w$2.arraycopy(u3, 2, u3, 0, h4 - 1), u3[h4 - 1] = 0, u3[h4] = 0, h4--;
        } else
          h4++;
        u3[h4] = 1, d4 = !d4;
      }
    }
    return h4 === l2 - 1 && t3.patternMatchVariance(u3, a4, t3.MAX_INDIVIDUAL_VARIANCE) < t3.MAX_AVG_VARIANCE ? new Int32Array([s4, f2 - 1]) : null;
  }, t3.patternMatchVariance = function(t4, e3, r2) {
    for (var n2 = t4.length, o2 = 0, i3 = 0, a4 = 0; a4 < n2; a4++)
      o2 += t4[a4], i3 += e3[a4];
    if (o2 < i3)
      return 1 / 0;
    var u3 = o2 / i3;
    r2 *= u3;
    for (var s4 = 0, c7 = 0; c7 < n2; c7++) {
      var f2 = t4[c7], h4 = e3[c7] * u3, l2 = f2 > h4 ? f2 - h4 : h4 - f2;
      if (l2 > r2)
        return 1 / 0;
      s4 += l2;
    }
    return s4 / o2;
  }, t3.INDEXES_START_PATTERN = Int32Array.from([0, 4, 1, 5]), t3.INDEXES_STOP_PATTERN = Int32Array.from([6, 2, 7, 3]), t3.MAX_AVG_VARIANCE = 0.42, t3.MAX_INDIVIDUAL_VARIANCE = 0.8, t3.START_PATTERN = Int32Array.from([8, 1, 1, 1, 1, 1, 1, 3]), t3.STOP_PATTERN = Int32Array.from([7, 1, 1, 3, 1, 1, 1, 2, 1]), t3.MAX_PIXEL_DRIFT = 3, t3.MAX_PATTERN_DRIFT = 5, t3.SKIPPED_ROW_COUNT_MAX = 25, t3.ROW_STEP = 5, t3.BARCODE_MIN_HEIGHT = 10, t3;
}(), ln = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, dn = function() {
  function t3(t4, e3) {
    if (0 === e3.length)
      throw new l();
    this.field = t4;
    var r2 = e3.length;
    if (r2 > 1 && 0 === e3[0]) {
      for (var n2 = 1; n2 < r2 && 0 === e3[n2]; )
        n2++;
      n2 === r2 ? this.coefficients = new Int32Array([0]) : (this.coefficients = new Int32Array(r2 - n2), w$2.arraycopy(e3, n2, this.coefficients, 0, this.coefficients.length));
    } else
      this.coefficients = e3;
  }
  return t3.prototype.getCoefficients = function() {
    return this.coefficients;
  }, t3.prototype.getDegree = function() {
    return this.coefficients.length - 1;
  }, t3.prototype.isZero = function() {
    return 0 === this.coefficients[0];
  }, t3.prototype.getCoefficient = function(t4) {
    return this.coefficients[this.coefficients.length - 1 - t4];
  }, t3.prototype.evaluateAt = function(t4) {
    var e3, r2;
    if (0 === t4)
      return this.getCoefficient(0);
    if (1 === t4) {
      var n2 = 0;
      try {
        for (var o2 = ln(this.coefficients), i3 = o2.next(); !i3.done; i3 = o2.next()) {
          var a4 = i3.value;
          n2 = this.field.add(n2, a4);
        }
      } catch (t5) {
        e3 = { error: t5 };
      } finally {
        try {
          i3 && !i3.done && (r2 = o2.return) && r2.call(o2);
        } finally {
          if (e3)
            throw e3.error;
        }
      }
      return n2;
    }
    for (var u3 = this.coefficients[0], s4 = this.coefficients.length, c7 = 1; c7 < s4; c7++)
      u3 = this.field.add(this.field.multiply(t4, u3), this.coefficients[c7]);
    return u3;
  }, t3.prototype.add = function(e3) {
    if (!this.field.equals(e3.field))
      throw new l("ModulusPolys do not have same ModulusGF field");
    if (this.isZero())
      return e3;
    if (e3.isZero())
      return this;
    var r2 = this.coefficients, n2 = e3.coefficients;
    if (r2.length > n2.length) {
      var o2 = r2;
      r2 = n2, n2 = o2;
    }
    var i3 = new Int32Array(n2.length), a4 = n2.length - r2.length;
    w$2.arraycopy(n2, 0, i3, 0, a4);
    for (var u3 = a4; u3 < n2.length; u3++)
      i3[u3] = this.field.add(r2[u3 - a4], n2[u3]);
    return new t3(this.field, i3);
  }, t3.prototype.subtract = function(t4) {
    if (!this.field.equals(t4.field))
      throw new l("ModulusPolys do not have same ModulusGF field");
    return t4.isZero() ? this : this.add(t4.negative());
  }, t3.prototype.multiply = function(e3) {
    return e3 instanceof t3 ? this.multiplyOther(e3) : this.multiplyScalar(e3);
  }, t3.prototype.multiplyOther = function(e3) {
    if (!this.field.equals(e3.field))
      throw new l("ModulusPolys do not have same ModulusGF field");
    if (this.isZero() || e3.isZero())
      return new t3(this.field, new Int32Array([0]));
    for (var r2 = this.coefficients, n2 = r2.length, o2 = e3.coefficients, i3 = o2.length, a4 = new Int32Array(n2 + i3 - 1), u3 = 0; u3 < n2; u3++)
      for (var s4 = r2[u3], c7 = 0; c7 < i3; c7++)
        a4[u3 + c7] = this.field.add(a4[u3 + c7], this.field.multiply(s4, o2[c7]));
    return new t3(this.field, a4);
  }, t3.prototype.negative = function() {
    for (var e3 = this.coefficients.length, r2 = new Int32Array(e3), n2 = 0; n2 < e3; n2++)
      r2[n2] = this.field.subtract(0, this.coefficients[n2]);
    return new t3(this.field, r2);
  }, t3.prototype.multiplyScalar = function(e3) {
    if (0 === e3)
      return new t3(this.field, new Int32Array([0]));
    if (1 === e3)
      return this;
    for (var r2 = this.coefficients.length, n2 = new Int32Array(r2), o2 = 0; o2 < r2; o2++)
      n2[o2] = this.field.multiply(this.coefficients[o2], e3);
    return new t3(this.field, n2);
  }, t3.prototype.multiplyByMonomial = function(e3, r2) {
    if (e3 < 0)
      throw new l();
    if (0 === r2)
      return new t3(this.field, new Int32Array([0]));
    for (var n2 = this.coefficients.length, o2 = new Int32Array(n2 + e3), i3 = 0; i3 < n2; i3++)
      o2[i3] = this.field.multiply(this.coefficients[i3], r2);
    return new t3(this.field, o2);
  }, t3.prototype.toString = function() {
    for (var t4 = new k(), e3 = this.getDegree(); e3 >= 0; e3--) {
      var r2 = this.getCoefficient(e3);
      0 !== r2 && (r2 < 0 ? (t4.append(" - "), r2 = -r2) : t4.length() > 0 && t4.append(" + "), 0 !== e3 && 1 === r2 || t4.append(r2), 0 !== e3 && (1 === e3 ? t4.append("x") : (t4.append("x^"), t4.append(e3))));
    }
    return t4.toString();
  }, t3;
}(), pn = function() {
  function t3() {
  }
  return t3.prototype.add = function(t4, e3) {
    return (t4 + e3) % this.modulus;
  }, t3.prototype.subtract = function(t4, e3) {
    return (this.modulus + t4 - e3) % this.modulus;
  }, t3.prototype.exp = function(t4) {
    return this.expTable[t4];
  }, t3.prototype.log = function(t4) {
    if (0 === t4)
      throw new l();
    return this.logTable[t4];
  }, t3.prototype.inverse = function(t4) {
    if (0 === t4)
      throw new ft();
    return this.expTable[this.modulus - this.logTable[t4] - 1];
  }, t3.prototype.multiply = function(t4, e3) {
    return 0 === t4 || 0 === e3 ? 0 : this.expTable[(this.logTable[t4] + this.logTable[e3]) % (this.modulus - 1)];
  }, t3.prototype.getSize = function() {
    return this.modulus;
  }, t3.prototype.equals = function(t4) {
    return t4 === this;
  }, t3;
}(), gn = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), yn = function(t3) {
  function e3(e4, r2) {
    var n2 = t3.call(this) || this;
    n2.modulus = e4, n2.expTable = new Int32Array(e4), n2.logTable = new Int32Array(e4);
    for (var o2 = 1, i3 = 0; i3 < e4; i3++)
      n2.expTable[i3] = o2, o2 = o2 * r2 % e4;
    for (i3 = 0; i3 < e4 - 1; i3++)
      n2.logTable[n2.expTable[i3]] = i3;
    return n2.zero = new dn(n2, new Int32Array([0])), n2.one = new dn(n2, new Int32Array([1])), n2;
  }
  return gn(e3, t3), e3.prototype.getZero = function() {
    return this.zero;
  }, e3.prototype.getOne = function() {
    return this.one;
  }, e3.prototype.buildMonomial = function(t4, e4) {
    if (t4 < 0)
      throw new l();
    if (0 === e4)
      return this.zero;
    var r2 = new Int32Array(t4 + 1);
    return r2[0] = e4, new dn(this, r2);
  }, e3.PDF417_GF = new e3(sn.NUMBER_OF_CODEWORDS, 3), e3;
}(pn), wn = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, _n = function() {
  function t3() {
    this.field = yn.PDF417_GF;
  }
  return t3.prototype.decode = function(t4, e3, r2) {
    for (var n2, o2, i3 = new dn(this.field, t4), a4 = new Int32Array(e3), u3 = false, s4 = e3; s4 > 0; s4--) {
      var c7 = i3.evaluateAt(this.field.exp(s4));
      a4[e3 - s4] = c7, 0 !== c7 && (u3 = true);
    }
    if (!u3)
      return 0;
    var f2 = this.field.getOne();
    if (null != r2)
      try {
        for (var h4 = wn(r2), l2 = h4.next(); !l2.done; l2 = h4.next()) {
          var d4 = l2.value, p2 = this.field.exp(t4.length - 1 - d4), y4 = new dn(this.field, new Int32Array([this.field.subtract(0, p2), 1]));
          f2 = f2.multiply(y4);
        }
      } catch (t5) {
        n2 = { error: t5 };
      } finally {
        try {
          l2 && !l2.done && (o2 = h4.return) && o2.call(h4);
        } finally {
          if (n2)
            throw n2.error;
        }
      }
    var w3 = new dn(this.field, a4), _2 = this.runEuclideanAlgorithm(this.field.buildMonomial(e3, 1), w3, e3), v2 = _2[0], m4 = _2[1], A2 = this.findErrorLocations(v2), E3 = this.findErrorMagnitudes(m4, v2, A2);
    for (s4 = 0; s4 < A2.length; s4++) {
      var C2 = t4.length - 1 - this.field.log(A2[s4]);
      if (C2 < 0)
        throw g.getChecksumInstance();
      t4[C2] = this.field.subtract(t4[C2], E3[s4]);
    }
    return A2.length;
  }, t3.prototype.runEuclideanAlgorithm = function(t4, e3, r2) {
    if (t4.getDegree() < e3.getDegree()) {
      var n2 = t4;
      t4 = e3, e3 = n2;
    }
    for (var o2 = t4, i3 = e3, a4 = this.field.getZero(), u3 = this.field.getOne(); i3.getDegree() >= Math.round(r2 / 2); ) {
      var s4 = o2, c7 = a4;
      if (a4 = u3, (o2 = i3).isZero())
        throw g.getChecksumInstance();
      i3 = s4;
      for (var f2 = this.field.getZero(), h4 = o2.getCoefficient(o2.getDegree()), l2 = this.field.inverse(h4); i3.getDegree() >= o2.getDegree() && !i3.isZero(); ) {
        var d4 = i3.getDegree() - o2.getDegree(), p2 = this.field.multiply(i3.getCoefficient(i3.getDegree()), l2);
        f2 = f2.add(this.field.buildMonomial(d4, p2)), i3 = i3.subtract(o2.multiplyByMonomial(d4, p2));
      }
      u3 = f2.multiply(a4).subtract(c7).negative();
    }
    var y4 = u3.getCoefficient(0);
    if (0 === y4)
      throw g.getChecksumInstance();
    var w3 = this.field.inverse(y4);
    return [u3.multiply(w3), i3.multiply(w3)];
  }, t3.prototype.findErrorLocations = function(t4) {
    for (var e3 = t4.getDegree(), r2 = new Int32Array(e3), n2 = 0, o2 = 1; o2 < this.field.getSize() && n2 < e3; o2++)
      0 === t4.evaluateAt(o2) && (r2[n2] = this.field.inverse(o2), n2++);
    if (n2 !== e3)
      throw g.getChecksumInstance();
    return r2;
  }, t3.prototype.findErrorMagnitudes = function(t4, e3, r2) {
    for (var n2 = e3.getDegree(), o2 = new Int32Array(n2), i3 = 1; i3 <= n2; i3++)
      o2[n2 - i3] = this.field.multiply(i3, e3.getCoefficient(i3));
    var a4 = new dn(this.field, o2), u3 = r2.length, s4 = new Int32Array(u3);
    for (i3 = 0; i3 < u3; i3++) {
      var c7 = this.field.inverse(r2[i3]), f2 = this.field.subtract(0, t4.evaluateAt(c7)), h4 = this.field.inverse(a4.evaluateAt(c7));
      s4[i3] = this.field.multiply(f2, h4);
    }
    return s4;
  }, t3;
}(), vn = function() {
  function t3(e3, r2, n2, o2, i3) {
    e3 instanceof t3 ? this.constructor_2(e3) : this.constructor_1(e3, r2, n2, o2, i3);
  }
  return t3.prototype.constructor_1 = function(t4, e3, r2, n2, o2) {
    var i3 = null == e3 || null == r2, a4 = null == n2 || null == o2;
    if (i3 && a4)
      throw new U();
    i3 ? (e3 = new At(0, n2.getY()), r2 = new At(0, o2.getY())) : a4 && (n2 = new At(t4.getWidth() - 1, e3.getY()), o2 = new At(t4.getWidth() - 1, r2.getY())), this.image = t4, this.topLeft = e3, this.bottomLeft = r2, this.topRight = n2, this.bottomRight = o2, this.minX = Math.trunc(Math.min(e3.getX(), r2.getX())), this.maxX = Math.trunc(Math.max(n2.getX(), o2.getX())), this.minY = Math.trunc(Math.min(e3.getY(), n2.getY())), this.maxY = Math.trunc(Math.max(r2.getY(), o2.getY()));
  }, t3.prototype.constructor_2 = function(t4) {
    this.image = t4.image, this.topLeft = t4.getTopLeft(), this.bottomLeft = t4.getBottomLeft(), this.topRight = t4.getTopRight(), this.bottomRight = t4.getBottomRight(), this.minX = t4.getMinX(), this.maxX = t4.getMaxX(), this.minY = t4.getMinY(), this.maxY = t4.getMaxY();
  }, t3.merge = function(e3, r2) {
    return null == e3 ? r2 : null == r2 ? e3 : new t3(e3.image, e3.topLeft, e3.bottomLeft, r2.topRight, r2.bottomRight);
  }, t3.prototype.addMissingRows = function(e3, r2, n2) {
    var o2 = this.topLeft, i3 = this.bottomLeft, a4 = this.topRight, u3 = this.bottomRight;
    if (e3 > 0) {
      var s4 = n2 ? this.topLeft : this.topRight, c7 = Math.trunc(s4.getY() - e3);
      c7 < 0 && (c7 = 0);
      var f2 = new At(s4.getX(), c7);
      n2 ? o2 = f2 : a4 = f2;
    }
    if (r2 > 0) {
      var h4 = n2 ? this.bottomLeft : this.bottomRight, l2 = Math.trunc(h4.getY() + r2);
      l2 >= this.image.getHeight() && (l2 = this.image.getHeight() - 1);
      var d4 = new At(h4.getX(), l2);
      n2 ? i3 = d4 : u3 = d4;
    }
    return new t3(this.image, o2, i3, a4, u3);
  }, t3.prototype.getMinX = function() {
    return this.minX;
  }, t3.prototype.getMaxX = function() {
    return this.maxX;
  }, t3.prototype.getMinY = function() {
    return this.minY;
  }, t3.prototype.getMaxY = function() {
    return this.maxY;
  }, t3.prototype.getTopLeft = function() {
    return this.topLeft;
  }, t3.prototype.getTopRight = function() {
    return this.topRight;
  }, t3.prototype.getBottomLeft = function() {
    return this.bottomLeft;
  }, t3.prototype.getBottomRight = function() {
    return this.bottomRight;
  }, t3;
}(), mn = function() {
  function t3(t4, e3, r2, n2) {
    this.columnCount = t4, this.errorCorrectionLevel = n2, this.rowCountUpperPart = e3, this.rowCountLowerPart = r2, this.rowCount = e3 + r2;
  }
  return t3.prototype.getColumnCount = function() {
    return this.columnCount;
  }, t3.prototype.getErrorCorrectionLevel = function() {
    return this.errorCorrectionLevel;
  }, t3.prototype.getRowCount = function() {
    return this.rowCount;
  }, t3.prototype.getRowCountUpperPart = function() {
    return this.rowCountUpperPart;
  }, t3.prototype.getRowCountLowerPart = function() {
    return this.rowCountLowerPart;
  }, t3;
}(), An = function() {
  function t3() {
    this.buffer = "";
  }
  return t3.form = function(t4, e3) {
    var r2 = -1;
    return t4.replace(/%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g, function(t5, n2, o2, i3, a4, u3) {
      if ("%%" === t5)
        return "%";
      if (void 0 !== e3[++r2]) {
        t5 = i3 ? parseInt(i3.substr(1)) : void 0;
        var s4, c7 = a4 ? parseInt(a4.substr(1)) : void 0;
        switch (u3) {
          case "s":
            s4 = e3[r2];
            break;
          case "c":
            s4 = e3[r2][0];
            break;
          case "f":
            s4 = parseFloat(e3[r2]).toFixed(t5);
            break;
          case "p":
            s4 = parseFloat(e3[r2]).toPrecision(t5);
            break;
          case "e":
            s4 = parseFloat(e3[r2]).toExponential(t5);
            break;
          case "x":
            s4 = parseInt(e3[r2]).toString(c7 || 16);
            break;
          case "d":
            s4 = parseFloat(parseInt(e3[r2], c7 || 10).toPrecision(t5)).toFixed(0);
        }
        s4 = "object" == typeof s4 ? JSON.stringify(s4) : (+s4).toString(c7);
        for (var f2 = parseInt(o2), h4 = o2 && o2[0] + "" == "0" ? "0" : " "; s4.length < f2; )
          s4 = void 0 !== n2 ? s4 + h4 : h4 + s4;
        return s4;
      }
    });
  }, t3.prototype.format = function(e3) {
    for (var r2 = [], n2 = 1; n2 < arguments.length; n2++)
      r2[n2 - 1] = arguments[n2];
    this.buffer += t3.form(e3, r2);
  }, t3.prototype.toString = function() {
    return this.buffer;
  }, t3;
}(), En = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Cn = function() {
  function t3(t4) {
    this.boundingBox = new vn(t4), this.codewords = new Array(t4.getMaxY() - t4.getMinY() + 1);
  }
  return t3.prototype.getCodewordNearby = function(e3) {
    var r2 = this.getCodeword(e3);
    if (null != r2)
      return r2;
    for (var n2 = 1; n2 < t3.MAX_NEARBY_DISTANCE; n2++) {
      var o2 = this.imageRowToCodewordIndex(e3) - n2;
      if (o2 >= 0 && null != (r2 = this.codewords[o2]))
        return r2;
      if ((o2 = this.imageRowToCodewordIndex(e3) + n2) < this.codewords.length && null != (r2 = this.codewords[o2]))
        return r2;
    }
    return null;
  }, t3.prototype.imageRowToCodewordIndex = function(t4) {
    return t4 - this.boundingBox.getMinY();
  }, t3.prototype.setCodeword = function(t4, e3) {
    this.codewords[this.imageRowToCodewordIndex(t4)] = e3;
  }, t3.prototype.getCodeword = function(t4) {
    return this.codewords[this.imageRowToCodewordIndex(t4)];
  }, t3.prototype.getBoundingBox = function() {
    return this.boundingBox;
  }, t3.prototype.getCodewords = function() {
    return this.codewords;
  }, t3.prototype.toString = function() {
    var t4, e3, r2 = new An(), n2 = 0;
    try {
      for (var o2 = En(this.codewords), i3 = o2.next(); !i3.done; i3 = o2.next()) {
        var a4 = i3.value;
        null != a4 ? r2.format("%3d: %3d|%3d%n", n2++, a4.getRowNumber(), a4.getValue()) : r2.format("%3d:    |   %n", n2++);
      }
    } catch (e4) {
      t4 = { error: e4 };
    } finally {
      try {
        i3 && !i3.done && (e3 = o2.return) && e3.call(o2);
      } finally {
        if (t4)
          throw t4.error;
      }
    }
    return r2.toString();
  }, t3.MAX_NEARBY_DISTANCE = 5, t3;
}(), In = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Sn = function(t3, e3) {
  var r2 = "function" == typeof Symbol && t3[Symbol.iterator];
  if (!r2)
    return t3;
  var n2, o2, i3 = r2.call(t3), a4 = [];
  try {
    for (; (void 0 === e3 || e3-- > 0) && !(n2 = i3.next()).done; )
      a4.push(n2.value);
  } catch (t4) {
    o2 = { error: t4 };
  } finally {
    try {
      n2 && !n2.done && (r2 = i3.return) && r2.call(i3);
    } finally {
      if (o2)
        throw o2.error;
    }
  }
  return a4;
}, On = function() {
  function t3() {
    this.values = /* @__PURE__ */ new Map();
  }
  return t3.prototype.setValue = function(t4) {
    t4 = Math.trunc(t4);
    var e3 = this.values.get(t4);
    null == e3 && (e3 = 0), e3++, this.values.set(t4, e3);
  }, t3.prototype.getValue = function() {
    var t4, e3, r2 = -1, n2 = new Array(), o2 = function(t5, e4) {
      var o3 = function() {
        return t5;
      }, i4 = function() {
        return e4;
      };
      i4() > r2 ? (r2 = i4(), (n2 = []).push(o3())) : i4() === r2 && n2.push(o3());
    };
    try {
      for (var i3 = In(this.values.entries()), a4 = i3.next(); !a4.done; a4 = i3.next()) {
        var u3 = Sn(a4.value, 2);
        o2(u3[0], u3[1]);
      }
    } catch (e4) {
      t4 = { error: e4 };
    } finally {
      try {
        a4 && !a4.done && (e3 = i3.return) && e3.call(i3);
      } finally {
        if (t4)
          throw t4.error;
      }
    }
    return sn.toIntArray(n2);
  }, t3.prototype.getConfidence = function(t4) {
    return this.values.get(t4);
  }, t3;
}(), Tn = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), bn = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Rn = function(t3) {
  function e3(e4, r2) {
    var n2 = t3.call(this, e4) || this;
    return n2._isLeft = r2, n2;
  }
  return Tn(e3, t3), e3.prototype.setRowNumbers = function() {
    var t4, e4;
    try {
      for (var r2 = bn(this.getCodewords()), n2 = r2.next(); !n2.done; n2 = r2.next()) {
        var o2 = n2.value;
        null != o2 && o2.setRowNumberAsRowIndicatorColumn();
      }
    } catch (e5) {
      t4 = { error: e5 };
    } finally {
      try {
        n2 && !n2.done && (e4 = r2.return) && e4.call(r2);
      } finally {
        if (t4)
          throw t4.error;
      }
    }
  }, e3.prototype.adjustCompleteIndicatorColumnRowNumbers = function(t4) {
    var e4 = this.getCodewords();
    this.setRowNumbers(), this.removeIncorrectCodewords(e4, t4);
    for (var r2 = this.getBoundingBox(), n2 = this._isLeft ? r2.getTopLeft() : r2.getTopRight(), o2 = this._isLeft ? r2.getBottomLeft() : r2.getBottomRight(), i3 = this.imageRowToCodewordIndex(Math.trunc(n2.getY())), a4 = this.imageRowToCodewordIndex(Math.trunc(o2.getY())), u3 = -1, s4 = 1, c7 = 0, f2 = i3; f2 < a4; f2++)
      if (null != e4[f2]) {
        var h4 = e4[f2], l2 = h4.getRowNumber() - u3;
        if (0 === l2)
          c7++;
        else if (1 === l2)
          s4 = Math.max(s4, c7), c7 = 1, u3 = h4.getRowNumber();
        else if (l2 < 0 || h4.getRowNumber() >= t4.getRowCount() || l2 > f2)
          e4[f2] = null;
        else {
          for (var d4 = void 0, p2 = (d4 = s4 > 2 ? (s4 - 2) * l2 : l2) >= f2, g2 = 1; g2 <= d4 && !p2; g2++)
            p2 = null != e4[f2 - g2];
          p2 ? e4[f2] = null : (u3 = h4.getRowNumber(), c7 = 1);
        }
      }
  }, e3.prototype.getRowHeights = function() {
    var t4, e4, r2 = this.getBarcodeMetadata();
    if (null == r2)
      return null;
    this.adjustIncompleteIndicatorColumnRowNumbers(r2);
    var n2 = new Int32Array(r2.getRowCount());
    try {
      for (var o2 = bn(this.getCodewords()), i3 = o2.next(); !i3.done; i3 = o2.next()) {
        var a4 = i3.value;
        if (null != a4) {
          var u3 = a4.getRowNumber();
          if (u3 >= n2.length)
            continue;
          n2[u3]++;
        }
      }
    } catch (e5) {
      t4 = { error: e5 };
    } finally {
      try {
        i3 && !i3.done && (e4 = o2.return) && e4.call(o2);
      } finally {
        if (t4)
          throw t4.error;
      }
    }
    return n2;
  }, e3.prototype.adjustIncompleteIndicatorColumnRowNumbers = function(t4) {
    for (var e4 = this.getBoundingBox(), r2 = this._isLeft ? e4.getTopLeft() : e4.getTopRight(), n2 = this._isLeft ? e4.getBottomLeft() : e4.getBottomRight(), o2 = this.imageRowToCodewordIndex(Math.trunc(r2.getY())), i3 = this.imageRowToCodewordIndex(Math.trunc(n2.getY())), a4 = this.getCodewords(), u3 = -1, s4 = o2; s4 < i3; s4++)
      if (null != a4[s4]) {
        var c7 = a4[s4];
        c7.setRowNumberAsRowIndicatorColumn();
        var f2 = c7.getRowNumber() - u3;
        0 === f2 || (1 === f2 ? u3 = c7.getRowNumber() : c7.getRowNumber() >= t4.getRowCount() ? a4[s4] = null : u3 = c7.getRowNumber());
      }
  }, e3.prototype.getBarcodeMetadata = function() {
    var t4, e4, r2 = this.getCodewords(), n2 = new On(), o2 = new On(), i3 = new On(), a4 = new On();
    try {
      for (var u3 = bn(r2), s4 = u3.next(); !s4.done; s4 = u3.next()) {
        var c7 = s4.value;
        if (null != c7) {
          c7.setRowNumberAsRowIndicatorColumn();
          var f2 = c7.getValue() % 30, h4 = c7.getRowNumber();
          switch (this._isLeft || (h4 += 2), h4 % 3) {
            case 0:
              o2.setValue(3 * f2 + 1);
              break;
            case 1:
              a4.setValue(f2 / 3), i3.setValue(f2 % 3);
              break;
            case 2:
              n2.setValue(f2 + 1);
          }
        }
      }
    } catch (e5) {
      t4 = { error: e5 };
    } finally {
      try {
        s4 && !s4.done && (e4 = u3.return) && e4.call(u3);
      } finally {
        if (t4)
          throw t4.error;
      }
    }
    if (0 === n2.getValue().length || 0 === o2.getValue().length || 0 === i3.getValue().length || 0 === a4.getValue().length || n2.getValue()[0] < 1 || o2.getValue()[0] + i3.getValue()[0] < sn.MIN_ROWS_IN_BARCODE || o2.getValue()[0] + i3.getValue()[0] > sn.MAX_ROWS_IN_BARCODE)
      return null;
    var l2 = new mn(n2.getValue()[0], o2.getValue()[0], i3.getValue()[0], a4.getValue()[0]);
    return this.removeIncorrectCodewords(r2, l2), l2;
  }, e3.prototype.removeIncorrectCodewords = function(t4, e4) {
    for (var r2 = 0; r2 < t4.length; r2++) {
      var n2 = t4[r2];
      if (null != t4[r2]) {
        var o2 = n2.getValue() % 30, i3 = n2.getRowNumber();
        if (i3 > e4.getRowCount())
          t4[r2] = null;
        else
          switch (this._isLeft || (i3 += 2), i3 % 3) {
            case 0:
              3 * o2 + 1 !== e4.getRowCountUpperPart() && (t4[r2] = null);
              break;
            case 1:
              Math.trunc(o2 / 3) === e4.getErrorCorrectionLevel() && o2 % 3 === e4.getRowCountLowerPart() || (t4[r2] = null);
              break;
            case 2:
              o2 + 1 !== e4.getColumnCount() && (t4[r2] = null);
          }
      }
    }
  }, e3.prototype.isLeft = function() {
    return this._isLeft;
  }, e3.prototype.toString = function() {
    return "IsLeft: " + this._isLeft + "\n" + t3.prototype.toString.call(this);
  }, e3;
}(Cn), Nn = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Dn = function() {
  function t3(t4, e3) {
    this.ADJUST_ROW_NUMBER_SKIP = 2, this.barcodeMetadata = t4, this.barcodeColumnCount = t4.getColumnCount(), this.boundingBox = e3, this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);
  }
  return t3.prototype.getDetectionResultColumns = function() {
    this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]), this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);
    var t4, e3 = sn.MAX_CODEWORDS_IN_BARCODE;
    do {
      t4 = e3, e3 = this.adjustRowNumbersAndGetCount();
    } while (e3 > 0 && e3 < t4);
    return this.detectionResultColumns;
  }, t3.prototype.adjustIndicatorColumnRowNumbers = function(t4) {
    null != t4 && t4.adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);
  }, t3.prototype.adjustRowNumbersAndGetCount = function() {
    var t4 = this.adjustRowNumbersByRow();
    if (0 === t4)
      return 0;
    for (var e3 = 1; e3 < this.barcodeColumnCount + 1; e3++)
      for (var r2 = this.detectionResultColumns[e3].getCodewords(), n2 = 0; n2 < r2.length; n2++)
        null != r2[n2] && (r2[n2].hasValidRowNumber() || this.adjustRowNumbers(e3, n2, r2));
    return t4;
  }, t3.prototype.adjustRowNumbersByRow = function() {
    return this.adjustRowNumbersFromBothRI(), this.adjustRowNumbersFromLRI() + this.adjustRowNumbersFromRRI();
  }, t3.prototype.adjustRowNumbersFromBothRI = function() {
    if (null != this.detectionResultColumns[0] && null != this.detectionResultColumns[this.barcodeColumnCount + 1]) {
      for (var t4 = this.detectionResultColumns[0].getCodewords(), e3 = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords(), r2 = 0; r2 < t4.length; r2++)
        if (null != t4[r2] && null != e3[r2] && t4[r2].getRowNumber() === e3[r2].getRowNumber())
          for (var n2 = 1; n2 <= this.barcodeColumnCount; n2++) {
            var o2 = this.detectionResultColumns[n2].getCodewords()[r2];
            null != o2 && (o2.setRowNumber(t4[r2].getRowNumber()), o2.hasValidRowNumber() || (this.detectionResultColumns[n2].getCodewords()[r2] = null));
          }
    }
  }, t3.prototype.adjustRowNumbersFromRRI = function() {
    if (null == this.detectionResultColumns[this.barcodeColumnCount + 1])
      return 0;
    for (var e3 = 0, r2 = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords(), n2 = 0; n2 < r2.length; n2++)
      if (null != r2[n2])
        for (var o2 = r2[n2].getRowNumber(), i3 = 0, a4 = this.barcodeColumnCount + 1; a4 > 0 && i3 < this.ADJUST_ROW_NUMBER_SKIP; a4--) {
          var u3 = this.detectionResultColumns[a4].getCodewords()[n2];
          null != u3 && (i3 = t3.adjustRowNumberIfValid(o2, i3, u3), u3.hasValidRowNumber() || e3++);
        }
    return e3;
  }, t3.prototype.adjustRowNumbersFromLRI = function() {
    if (null == this.detectionResultColumns[0])
      return 0;
    for (var e3 = 0, r2 = this.detectionResultColumns[0].getCodewords(), n2 = 0; n2 < r2.length; n2++)
      if (null != r2[n2])
        for (var o2 = r2[n2].getRowNumber(), i3 = 0, a4 = 1; a4 < this.barcodeColumnCount + 1 && i3 < this.ADJUST_ROW_NUMBER_SKIP; a4++) {
          var u3 = this.detectionResultColumns[a4].getCodewords()[n2];
          null != u3 && (i3 = t3.adjustRowNumberIfValid(o2, i3, u3), u3.hasValidRowNumber() || e3++);
        }
    return e3;
  }, t3.adjustRowNumberIfValid = function(t4, e3, r2) {
    return null == r2 || r2.hasValidRowNumber() || (r2.isValidRowNumber(t4) ? (r2.setRowNumber(t4), e3 = 0) : ++e3), e3;
  }, t3.prototype.adjustRowNumbers = function(e3, r2, n2) {
    var o2, i3, a4 = n2[r2], u3 = this.detectionResultColumns[e3 - 1].getCodewords(), s4 = u3;
    null != this.detectionResultColumns[e3 + 1] && (s4 = this.detectionResultColumns[e3 + 1].getCodewords());
    var c7 = new Array(14);
    c7[2] = u3[r2], c7[3] = s4[r2], r2 > 0 && (c7[0] = n2[r2 - 1], c7[4] = u3[r2 - 1], c7[5] = s4[r2 - 1]), r2 > 1 && (c7[8] = n2[r2 - 2], c7[10] = u3[r2 - 2], c7[11] = s4[r2 - 2]), r2 < n2.length - 1 && (c7[1] = n2[r2 + 1], c7[6] = u3[r2 + 1], c7[7] = s4[r2 + 1]), r2 < n2.length - 2 && (c7[9] = n2[r2 + 2], c7[12] = u3[r2 + 2], c7[13] = s4[r2 + 2]);
    try {
      for (var f2 = Nn(c7), h4 = f2.next(); !h4.done; h4 = f2.next()) {
        var l2 = h4.value;
        if (t3.adjustRowNumber(a4, l2))
          return;
      }
    } catch (t4) {
      o2 = { error: t4 };
    } finally {
      try {
        h4 && !h4.done && (i3 = f2.return) && i3.call(f2);
      } finally {
        if (o2)
          throw o2.error;
      }
    }
  }, t3.adjustRowNumber = function(t4, e3) {
    return null != e3 && (!(!e3.hasValidRowNumber() || e3.getBucket() !== t4.getBucket()) && (t4.setRowNumber(e3.getRowNumber()), true));
  }, t3.prototype.getBarcodeColumnCount = function() {
    return this.barcodeColumnCount;
  }, t3.prototype.getBarcodeRowCount = function() {
    return this.barcodeMetadata.getRowCount();
  }, t3.prototype.getBarcodeECLevel = function() {
    return this.barcodeMetadata.getErrorCorrectionLevel();
  }, t3.prototype.setBoundingBox = function(t4) {
    this.boundingBox = t4;
  }, t3.prototype.getBoundingBox = function() {
    return this.boundingBox;
  }, t3.prototype.setDetectionResultColumn = function(t4, e3) {
    this.detectionResultColumns[t4] = e3;
  }, t3.prototype.getDetectionResultColumn = function(t4) {
    return this.detectionResultColumns[t4];
  }, t3.prototype.toString = function() {
    var t4 = this.detectionResultColumns[0];
    null == t4 && (t4 = this.detectionResultColumns[this.barcodeColumnCount + 1]);
    for (var e3 = new An(), r2 = 0; r2 < t4.getCodewords().length; r2++) {
      e3.format("CW %3d:", r2);
      for (var n2 = 0; n2 < this.barcodeColumnCount + 2; n2++)
        if (null != this.detectionResultColumns[n2]) {
          var o2 = this.detectionResultColumns[n2].getCodewords()[r2];
          null != o2 ? e3.format(" %3d|%3d", o2.getRowNumber(), o2.getValue()) : e3.format("    |   ");
        } else
          e3.format("    |   ");
      e3.format("%n");
    }
    return e3.toString();
  }, t3;
}(), Pn = function() {
  function t3(e3, r2, n2, o2) {
    this.rowNumber = t3.BARCODE_ROW_UNKNOWN, this.startX = Math.trunc(e3), this.endX = Math.trunc(r2), this.bucket = Math.trunc(n2), this.value = Math.trunc(o2);
  }
  return t3.prototype.hasValidRowNumber = function() {
    return this.isValidRowNumber(this.rowNumber);
  }, t3.prototype.isValidRowNumber = function(e3) {
    return e3 !== t3.BARCODE_ROW_UNKNOWN && this.bucket === e3 % 3 * 3;
  }, t3.prototype.setRowNumberAsRowIndicatorColumn = function() {
    this.rowNumber = Math.trunc(3 * Math.trunc(this.value / 30) + Math.trunc(this.bucket / 3));
  }, t3.prototype.getWidth = function() {
    return this.endX - this.startX;
  }, t3.prototype.getStartX = function() {
    return this.startX;
  }, t3.prototype.getEndX = function() {
    return this.endX;
  }, t3.prototype.getBucket = function() {
    return this.bucket;
  }, t3.prototype.getValue = function() {
    return this.value;
  }, t3.prototype.getRowNumber = function() {
    return this.rowNumber;
  }, t3.prototype.setRowNumber = function(t4) {
    this.rowNumber = t4;
  }, t3.prototype.toString = function() {
    return this.rowNumber + "|" + this.value;
  }, t3.BARCODE_ROW_UNKNOWN = -1, t3;
}(), Mn = function() {
  function t3() {
  }
  return t3.initialize = function() {
    for (var e3 = 0; e3 < sn.SYMBOL_TABLE.length; e3++)
      for (var r2 = sn.SYMBOL_TABLE[e3], n2 = 1 & r2, o2 = 0; o2 < sn.BARS_IN_MODULE; o2++) {
        for (var i3 = 0; (1 & r2) === n2; )
          i3 += 1, r2 >>= 1;
        n2 = 1 & r2, t3.RATIOS_TABLE[e3] || (t3.RATIOS_TABLE[e3] = new Array(sn.BARS_IN_MODULE)), t3.RATIOS_TABLE[e3][sn.BARS_IN_MODULE - o2 - 1] = Math.fround(i3 / sn.MODULES_IN_CODEWORD);
      }
    this.bSymbolTableReady = true;
  }, t3.getDecodedValue = function(e3) {
    var r2 = t3.getDecodedCodewordValue(t3.sampleBitCounts(e3));
    return -1 !== r2 ? r2 : t3.getClosestDecodedValue(e3);
  }, t3.sampleBitCounts = function(t4) {
    for (var e3 = vt.sum(t4), r2 = new Int32Array(sn.BARS_IN_MODULE), n2 = 0, o2 = 0, i3 = 0; i3 < sn.MODULES_IN_CODEWORD; i3++) {
      var a4 = e3 / (2 * sn.MODULES_IN_CODEWORD) + i3 * e3 / sn.MODULES_IN_CODEWORD;
      o2 + t4[n2] <= a4 && (o2 += t4[n2], n2++), r2[n2]++;
    }
    return r2;
  }, t3.getDecodedCodewordValue = function(e3) {
    var r2 = t3.getBitValue(e3);
    return -1 === sn.getCodeword(r2) ? -1 : r2;
  }, t3.getBitValue = function(t4) {
    for (var e3 = 0, r2 = 0; r2 < t4.length; r2++)
      for (var n2 = 0; n2 < t4[r2]; n2++)
        e3 = e3 << 1 | (r2 % 2 == 0 ? 1 : 0);
    return Math.trunc(e3);
  }, t3.getClosestDecodedValue = function(e3) {
    var r2 = vt.sum(e3), n2 = new Array(sn.BARS_IN_MODULE);
    if (r2 > 1)
      for (var o2 = 0; o2 < n2.length; o2++)
        n2[o2] = Math.fround(e3[o2] / r2);
    var i3 = mt.MAX_VALUE, a4 = -1;
    this.bSymbolTableReady || t3.initialize();
    for (var u3 = 0; u3 < t3.RATIOS_TABLE.length; u3++) {
      for (var s4 = 0, c7 = t3.RATIOS_TABLE[u3], f2 = 0; f2 < sn.BARS_IN_MODULE; f2++) {
        var h4 = Math.fround(c7[f2] - n2[f2]);
        if ((s4 += Math.fround(h4 * h4)) >= i3)
          break;
      }
      s4 < i3 && (i3 = s4, a4 = sn.SYMBOL_TABLE[u3]);
    }
    return a4;
  }, t3.bSymbolTableReady = false, t3.RATIOS_TABLE = new Array(sn.SYMBOL_TABLE.length).map(function(t4) {
    return new Array(sn.BARS_IN_MODULE);
  }), t3;
}(), Bn = function() {
  function t3() {
    this.segmentCount = -1, this.fileSize = -1, this.timestamp = -1, this.checksum = -1;
  }
  return t3.prototype.getSegmentIndex = function() {
    return this.segmentIndex;
  }, t3.prototype.setSegmentIndex = function(t4) {
    this.segmentIndex = t4;
  }, t3.prototype.getFileId = function() {
    return this.fileId;
  }, t3.prototype.setFileId = function(t4) {
    this.fileId = t4;
  }, t3.prototype.getOptionalData = function() {
    return this.optionalData;
  }, t3.prototype.setOptionalData = function(t4) {
    this.optionalData = t4;
  }, t3.prototype.isLastSegment = function() {
    return this.lastSegment;
  }, t3.prototype.setLastSegment = function(t4) {
    this.lastSegment = t4;
  }, t3.prototype.getSegmentCount = function() {
    return this.segmentCount;
  }, t3.prototype.setSegmentCount = function(t4) {
    this.segmentCount = t4;
  }, t3.prototype.getSender = function() {
    return this.sender || null;
  }, t3.prototype.setSender = function(t4) {
    this.sender = t4;
  }, t3.prototype.getAddressee = function() {
    return this.addressee || null;
  }, t3.prototype.setAddressee = function(t4) {
    this.addressee = t4;
  }, t3.prototype.getFileName = function() {
    return this.fileName;
  }, t3.prototype.setFileName = function(t4) {
    this.fileName = t4;
  }, t3.prototype.getFileSize = function() {
    return this.fileSize;
  }, t3.prototype.setFileSize = function(t4) {
    this.fileSize = t4;
  }, t3.prototype.getChecksum = function() {
    return this.checksum;
  }, t3.prototype.setChecksum = function(t4) {
    this.checksum = t4;
  }, t3.prototype.getTimestamp = function() {
    return this.timestamp;
  }, t3.prototype.setTimestamp = function(t4) {
    this.timestamp = t4;
  }, t3;
}(), Ln = function() {
  function t3() {
  }
  return t3.parseLong = function(t4, e3) {
    return void 0 === e3 && (e3 = void 0), parseInt(t4, e3);
  }, t3;
}(), Fn = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), kn = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return Fn(e3, t3), e3.kind = "NullPointerException", e3;
}(s), xn = function() {
  function t3() {
  }
  return t3.prototype.writeBytes = function(t4) {
    this.writeBytesOffset(t4, 0, t4.length);
  }, t3.prototype.writeBytesOffset = function(t4, e3, r2) {
    if (null == t4)
      throw new kn();
    if (e3 < 0 || e3 > t4.length || r2 < 0 || e3 + r2 > t4.length || e3 + r2 < 0)
      throw new v$2();
    if (0 !== r2)
      for (var n2 = 0; n2 < r2; n2++)
        this.write(t4[e3 + n2]);
  }, t3.prototype.flush = function() {
  }, t3.prototype.close = function() {
  }, t3;
}(), Vn = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Un = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return Vn(e3, t3), e3;
}(s), Hn = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Gn = function(t3) {
  function e3(e4) {
    void 0 === e4 && (e4 = 32);
    var r2 = t3.call(this) || this;
    if (r2.count = 0, e4 < 0)
      throw new l("Negative initial size: " + e4);
    return r2.buf = new Uint8Array(e4), r2;
  }
  return Hn(e3, t3), e3.prototype.ensureCapacity = function(t4) {
    t4 - this.buf.length > 0 && this.grow(t4);
  }, e3.prototype.grow = function(t4) {
    var e4 = this.buf.length << 1;
    if (e4 - t4 < 0 && (e4 = t4), e4 < 0) {
      if (t4 < 0)
        throw new Un();
      e4 = I.MAX_VALUE;
    }
    this.buf = C.copyOfUint8Array(this.buf, e4);
  }, e3.prototype.write = function(t4) {
    this.ensureCapacity(this.count + 1), this.buf[this.count] = t4, this.count += 1;
  }, e3.prototype.writeBytesOffset = function(t4, e4, r2) {
    if (e4 < 0 || e4 > t4.length || r2 < 0 || e4 + r2 - t4.length > 0)
      throw new v$2();
    this.ensureCapacity(this.count + r2), w$2.arraycopy(t4, e4, this.buf, this.count, r2), this.count += r2;
  }, e3.prototype.writeTo = function(t4) {
    t4.writeBytesOffset(this.buf, 0, this.count);
  }, e3.prototype.reset = function() {
    this.count = 0;
  }, e3.prototype.toByteArray = function() {
    return C.copyOfUint8Array(this.buf, this.count);
  }, e3.prototype.size = function() {
    return this.count;
  }, e3.prototype.toString = function(t4) {
    return t4 ? "string" == typeof t4 ? this.toString_string(t4) : this.toString_number(t4) : this.toString_void();
  }, e3.prototype.toString_void = function() {
    return new String(this.buf).toString();
  }, e3.prototype.toString_string = function(t4) {
    return new String(this.buf).toString();
  }, e3.prototype.toString_number = function(t4) {
    return new String(this.buf).toString();
  }, e3.prototype.close = function() {
  }, e3;
}(xn);
function Xn() {
  if ("undefined" != typeof window)
    return window.BigInt || null;
  if ("undefined" != typeof global)
    return global.BigInt || null;
  if ("undefined" != typeof self)
    return self.BigInt || null;
  throw new Error("Can't search globals for BigInt!");
}
function Wn(t3) {
  if (void 0 === Xr && (Xr = Xn()), null === Xr)
    throw new Error("BigInt is not supported!");
  return Xr(t3);
}
!function(t3) {
  t3[t3.ALPHA = 0] = "ALPHA", t3[t3.LOWER = 1] = "LOWER", t3[t3.MIXED = 2] = "MIXED", t3[t3.PUNCT = 3] = "PUNCT", t3[t3.ALPHA_SHIFT = 4] = "ALPHA_SHIFT", t3[t3.PUNCT_SHIFT = 5] = "PUNCT_SHIFT";
}(Gr || (Gr = {}));
var jn = function() {
  function t3() {
  }
  return t3.decode = function(e3, r2) {
    var n2 = new k(""), o2 = P.ISO8859_1;
    n2.enableDecoding(o2);
    for (var i3 = 1, a4 = e3[i3++], u3 = new Bn(); i3 < e3[0]; ) {
      switch (a4) {
        case t3.TEXT_COMPACTION_MODE_LATCH:
          i3 = t3.textCompaction(e3, i3, n2);
          break;
        case t3.BYTE_COMPACTION_MODE_LATCH:
        case t3.BYTE_COMPACTION_MODE_LATCH_6:
          i3 = t3.byteCompaction(a4, e3, o2, i3, n2);
          break;
        case t3.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
          n2.append(e3[i3++]);
          break;
        case t3.NUMERIC_COMPACTION_MODE_LATCH:
          i3 = t3.numericCompaction(e3, i3, n2);
          break;
        case t3.ECI_CHARSET:
          P.getCharacterSetECIByValue(e3[i3++]);
          break;
        case t3.ECI_GENERAL_PURPOSE:
          i3 += 2;
          break;
        case t3.ECI_USER_DEFINED:
          i3++;
          break;
        case t3.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
          i3 = t3.decodeMacroBlock(e3, i3, u3);
          break;
        case t3.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
        case t3.MACRO_PDF417_TERMINATOR:
          throw new R();
        default:
          i3--, i3 = t3.textCompaction(e3, i3, n2);
      }
      if (!(i3 < e3.length))
        throw R.getFormatInstance();
      a4 = e3[i3++];
    }
    if (0 === n2.length())
      throw R.getFormatInstance();
    var s4 = new at(null, n2.toString(), null, r2);
    return s4.setOther(u3), s4;
  }, t3.decodeMacroBlock = function(e3, r2, n2) {
    if (r2 + t3.NUMBER_OF_SEQUENCE_CODEWORDS > e3[0])
      throw R.getFormatInstance();
    for (var o2 = new Int32Array(t3.NUMBER_OF_SEQUENCE_CODEWORDS), i3 = 0; i3 < t3.NUMBER_OF_SEQUENCE_CODEWORDS; i3++, r2++)
      o2[i3] = e3[r2];
    n2.setSegmentIndex(I.parseInt(t3.decodeBase900toBase10(o2, t3.NUMBER_OF_SEQUENCE_CODEWORDS)));
    var a4 = new k();
    r2 = t3.textCompaction(e3, r2, a4), n2.setFileId(a4.toString());
    var u3 = -1;
    for (e3[r2] === t3.BEGIN_MACRO_PDF417_OPTIONAL_FIELD && (u3 = r2 + 1); r2 < e3[0]; )
      switch (e3[r2]) {
        case t3.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
          switch (e3[++r2]) {
            case t3.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:
              var s4 = new k();
              r2 = t3.textCompaction(e3, r2 + 1, s4), n2.setFileName(s4.toString());
              break;
            case t3.MACRO_PDF417_OPTIONAL_FIELD_SENDER:
              var c7 = new k();
              r2 = t3.textCompaction(e3, r2 + 1, c7), n2.setSender(c7.toString());
              break;
            case t3.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:
              var f2 = new k();
              r2 = t3.textCompaction(e3, r2 + 1, f2), n2.setAddressee(f2.toString());
              break;
            case t3.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:
              var h4 = new k();
              r2 = t3.numericCompaction(e3, r2 + 1, h4), n2.setSegmentCount(I.parseInt(h4.toString()));
              break;
            case t3.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:
              var l2 = new k();
              r2 = t3.numericCompaction(e3, r2 + 1, l2), n2.setTimestamp(Ln.parseLong(l2.toString()));
              break;
            case t3.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:
              var d4 = new k();
              r2 = t3.numericCompaction(e3, r2 + 1, d4), n2.setChecksum(I.parseInt(d4.toString()));
              break;
            case t3.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:
              var p2 = new k();
              r2 = t3.numericCompaction(e3, r2 + 1, p2), n2.setFileSize(Ln.parseLong(p2.toString()));
              break;
            default:
              throw R.getFormatInstance();
          }
          break;
        case t3.MACRO_PDF417_TERMINATOR:
          r2++, n2.setLastSegment(true);
          break;
        default:
          throw R.getFormatInstance();
      }
    if (-1 !== u3) {
      var g2 = r2 - u3;
      n2.isLastSegment() && g2--, n2.setOptionalData(C.copyOfRange(e3, u3, u3 + g2));
    }
    return r2;
  }, t3.textCompaction = function(e3, r2, n2) {
    for (var o2 = new Int32Array(2 * (e3[0] - r2)), i3 = new Int32Array(2 * (e3[0] - r2)), a4 = 0, u3 = false; r2 < e3[0] && !u3; ) {
      var s4 = e3[r2++];
      if (s4 < t3.TEXT_COMPACTION_MODE_LATCH)
        o2[a4] = s4 / 30, o2[a4 + 1] = s4 % 30, a4 += 2;
      else
        switch (s4) {
          case t3.TEXT_COMPACTION_MODE_LATCH:
            o2[a4++] = t3.TEXT_COMPACTION_MODE_LATCH;
            break;
          case t3.BYTE_COMPACTION_MODE_LATCH:
          case t3.BYTE_COMPACTION_MODE_LATCH_6:
          case t3.NUMERIC_COMPACTION_MODE_LATCH:
          case t3.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
          case t3.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
          case t3.MACRO_PDF417_TERMINATOR:
            r2--, u3 = true;
            break;
          case t3.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
            o2[a4] = t3.MODE_SHIFT_TO_BYTE_COMPACTION_MODE, s4 = e3[r2++], i3[a4] = s4, a4++;
        }
    }
    return t3.decodeTextCompaction(o2, i3, a4, n2), r2;
  }, t3.decodeTextCompaction = function(e3, r2, n2, o2) {
    for (var i3 = Gr.ALPHA, a4 = Gr.ALPHA, u3 = 0; u3 < n2; ) {
      var s4 = e3[u3], c7 = "";
      switch (i3) {
        case Gr.ALPHA:
          if (s4 < 26)
            c7 = String.fromCharCode(65 + s4);
          else
            switch (s4) {
              case 26:
                c7 = " ";
                break;
              case t3.LL:
                i3 = Gr.LOWER;
                break;
              case t3.ML:
                i3 = Gr.MIXED;
                break;
              case t3.PS:
                a4 = i3, i3 = Gr.PUNCT_SHIFT;
                break;
              case t3.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                o2.append(r2[u3]);
                break;
              case t3.TEXT_COMPACTION_MODE_LATCH:
                i3 = Gr.ALPHA;
            }
          break;
        case Gr.LOWER:
          if (s4 < 26)
            c7 = String.fromCharCode(97 + s4);
          else
            switch (s4) {
              case 26:
                c7 = " ";
                break;
              case t3.AS:
                a4 = i3, i3 = Gr.ALPHA_SHIFT;
                break;
              case t3.ML:
                i3 = Gr.MIXED;
                break;
              case t3.PS:
                a4 = i3, i3 = Gr.PUNCT_SHIFT;
                break;
              case t3.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                o2.append(r2[u3]);
                break;
              case t3.TEXT_COMPACTION_MODE_LATCH:
                i3 = Gr.ALPHA;
            }
          break;
        case Gr.MIXED:
          if (s4 < t3.PL)
            c7 = t3.MIXED_CHARS[s4];
          else
            switch (s4) {
              case t3.PL:
                i3 = Gr.PUNCT;
                break;
              case 26:
                c7 = " ";
                break;
              case t3.LL:
                i3 = Gr.LOWER;
                break;
              case t3.AL:
                i3 = Gr.ALPHA;
                break;
              case t3.PS:
                a4 = i3, i3 = Gr.PUNCT_SHIFT;
                break;
              case t3.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                o2.append(r2[u3]);
                break;
              case t3.TEXT_COMPACTION_MODE_LATCH:
                i3 = Gr.ALPHA;
            }
          break;
        case Gr.PUNCT:
          if (s4 < t3.PAL)
            c7 = t3.PUNCT_CHARS[s4];
          else
            switch (s4) {
              case t3.PAL:
                i3 = Gr.ALPHA;
                break;
              case t3.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                o2.append(r2[u3]);
                break;
              case t3.TEXT_COMPACTION_MODE_LATCH:
                i3 = Gr.ALPHA;
            }
          break;
        case Gr.ALPHA_SHIFT:
          if (i3 = a4, s4 < 26)
            c7 = String.fromCharCode(65 + s4);
          else
            switch (s4) {
              case 26:
                c7 = " ";
                break;
              case t3.TEXT_COMPACTION_MODE_LATCH:
                i3 = Gr.ALPHA;
            }
          break;
        case Gr.PUNCT_SHIFT:
          if (i3 = a4, s4 < t3.PAL)
            c7 = t3.PUNCT_CHARS[s4];
          else
            switch (s4) {
              case t3.PAL:
                i3 = Gr.ALPHA;
                break;
              case t3.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                o2.append(r2[u3]);
                break;
              case t3.TEXT_COMPACTION_MODE_LATCH:
                i3 = Gr.ALPHA;
            }
      }
      "" !== c7 && o2.append(c7), u3++;
    }
  }, t3.byteCompaction = function(e3, r2, n2, o2, i3) {
    var a4 = new Gn(), u3 = 0, s4 = 0, c7 = false;
    switch (e3) {
      case t3.BYTE_COMPACTION_MODE_LATCH:
        for (var f2 = new Int32Array(6), h4 = r2[o2++]; o2 < r2[0] && !c7; )
          switch (f2[u3++] = h4, s4 = 900 * s4 + h4, h4 = r2[o2++]) {
            case t3.TEXT_COMPACTION_MODE_LATCH:
            case t3.BYTE_COMPACTION_MODE_LATCH:
            case t3.NUMERIC_COMPACTION_MODE_LATCH:
            case t3.BYTE_COMPACTION_MODE_LATCH_6:
            case t3.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
            case t3.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
            case t3.MACRO_PDF417_TERMINATOR:
              o2--, c7 = true;
              break;
            default:
              if (u3 % 5 == 0 && u3 > 0) {
                for (var l2 = 0; l2 < 6; ++l2)
                  a4.write(Number(Wn(s4) >> Wn(8 * (5 - l2))));
                s4 = 0, u3 = 0;
              }
          }
        o2 === r2[0] && h4 < t3.TEXT_COMPACTION_MODE_LATCH && (f2[u3++] = h4);
        for (var d4 = 0; d4 < u3; d4++)
          a4.write(f2[d4]);
        break;
      case t3.BYTE_COMPACTION_MODE_LATCH_6:
        for (; o2 < r2[0] && !c7; ) {
          var p2 = r2[o2++];
          if (p2 < t3.TEXT_COMPACTION_MODE_LATCH)
            u3++, s4 = 900 * s4 + p2;
          else
            switch (p2) {
              case t3.TEXT_COMPACTION_MODE_LATCH:
              case t3.BYTE_COMPACTION_MODE_LATCH:
              case t3.NUMERIC_COMPACTION_MODE_LATCH:
              case t3.BYTE_COMPACTION_MODE_LATCH_6:
              case t3.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
              case t3.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
              case t3.MACRO_PDF417_TERMINATOR:
                o2--, c7 = true;
            }
          if (u3 % 5 == 0 && u3 > 0) {
            for (l2 = 0; l2 < 6; ++l2)
              a4.write(Number(Wn(s4) >> Wn(8 * (5 - l2))));
            s4 = 0, u3 = 0;
          }
        }
    }
    return i3.append(L.decode(a4.toByteArray(), n2)), o2;
  }, t3.numericCompaction = function(e3, r2, n2) {
    for (var o2 = 0, i3 = false, a4 = new Int32Array(t3.MAX_NUMERIC_CODEWORDS); r2 < e3[0] && !i3; ) {
      var u3 = e3[r2++];
      if (r2 === e3[0] && (i3 = true), u3 < t3.TEXT_COMPACTION_MODE_LATCH)
        a4[o2] = u3, o2++;
      else
        switch (u3) {
          case t3.TEXT_COMPACTION_MODE_LATCH:
          case t3.BYTE_COMPACTION_MODE_LATCH:
          case t3.BYTE_COMPACTION_MODE_LATCH_6:
          case t3.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
          case t3.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
          case t3.MACRO_PDF417_TERMINATOR:
            r2--, i3 = true;
        }
      (o2 % t3.MAX_NUMERIC_CODEWORDS == 0 || u3 === t3.NUMERIC_COMPACTION_MODE_LATCH || i3) && o2 > 0 && (n2.append(t3.decodeBase900toBase10(a4, o2)), o2 = 0);
    }
    return r2;
  }, t3.decodeBase900toBase10 = function(e3, r2) {
    for (var n2 = Wn(0), o2 = 0; o2 < r2; o2++)
      n2 += t3.EXP900[r2 - o2 - 1] * Wn(e3[o2]);
    var i3 = n2.toString();
    if ("1" !== i3.charAt(0))
      throw new R();
    return i3.substring(1);
  }, t3.TEXT_COMPACTION_MODE_LATCH = 900, t3.BYTE_COMPACTION_MODE_LATCH = 901, t3.NUMERIC_COMPACTION_MODE_LATCH = 902, t3.BYTE_COMPACTION_MODE_LATCH_6 = 924, t3.ECI_USER_DEFINED = 925, t3.ECI_GENERAL_PURPOSE = 926, t3.ECI_CHARSET = 927, t3.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928, t3.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923, t3.MACRO_PDF417_TERMINATOR = 922, t3.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913, t3.MAX_NUMERIC_CODEWORDS = 15, t3.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0, t3.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1, t3.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2, t3.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3, t3.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4, t3.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5, t3.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6, t3.PL = 25, t3.LL = 27, t3.AS = 27, t3.ML = 28, t3.AL = 28, t3.PS = 29, t3.PAL = 29, t3.PUNCT_CHARS = ";<>@[\\]_`~!\r	,:\n-.$/\"|*()?{}'", t3.MIXED_CHARS = "0123456789&\r	,:#-.$/+%*=^", t3.EXP900 = Xn() ? function() {
    var t4 = [];
    t4[0] = Wn(1);
    var e3 = Wn(900);
    t4[1] = e3;
    for (var r2 = 2; r2 < 16; r2++)
      t4[r2] = t4[r2 - 1] * e3;
    return t4;
  }() : [], t3.NUMBER_OF_SEQUENCE_CODEWORDS = 2, t3;
}(), zn = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Yn = function() {
  function t3() {
  }
  return t3.decode = function(e3, r2, n2, o2, i3, a4, u3) {
    for (var s4, c7 = new vn(e3, r2, n2, o2, i3), f2 = null, h4 = null, l2 = true; ; l2 = false) {
      if (null != r2 && (f2 = t3.getRowIndicatorColumn(e3, c7, r2, true, a4, u3)), null != o2 && (h4 = t3.getRowIndicatorColumn(e3, c7, o2, false, a4, u3)), null == (s4 = t3.merge(f2, h4)))
        throw U.getNotFoundInstance();
      var d4 = s4.getBoundingBox();
      if (!l2 || null == d4 || !(d4.getMinY() < c7.getMinY() || d4.getMaxY() > c7.getMaxY()))
        break;
      c7 = d4;
    }
    s4.setBoundingBox(c7);
    var p2 = s4.getBarcodeColumnCount() + 1;
    s4.setDetectionResultColumn(0, f2), s4.setDetectionResultColumn(p2, h4);
    for (var g2 = null != f2, y4 = 1; y4 <= p2; y4++) {
      var w3 = g2 ? y4 : p2 - y4;
      if (void 0 === s4.getDetectionResultColumn(w3)) {
        var _2 = void 0;
        _2 = 0 === w3 || w3 === p2 ? new Rn(c7, 0 === w3) : new Cn(c7), s4.setDetectionResultColumn(w3, _2);
        for (var v2 = -1, m4 = v2, A2 = c7.getMinY(); A2 <= c7.getMaxY(); A2++) {
          if ((v2 = t3.getStartColumn(s4, w3, A2, g2)) < 0 || v2 > c7.getMaxX()) {
            if (-1 === m4)
              continue;
            v2 = m4;
          }
          var E3 = t3.detectCodeword(e3, c7.getMinX(), c7.getMaxX(), g2, v2, A2, a4, u3);
          null != E3 && (_2.setCodeword(A2, E3), m4 = v2, a4 = Math.min(a4, E3.getWidth()), u3 = Math.max(u3, E3.getWidth()));
        }
      }
    }
    return t3.createDecoderResult(s4);
  }, t3.merge = function(e3, r2) {
    if (null == e3 && null == r2)
      return null;
    var n2 = t3.getBarcodeMetadata(e3, r2);
    if (null == n2)
      return null;
    var o2 = vn.merge(t3.adjustBoundingBox(e3), t3.adjustBoundingBox(r2));
    return new Dn(n2, o2);
  }, t3.adjustBoundingBox = function(e3) {
    var r2, n2;
    if (null == e3)
      return null;
    var o2 = e3.getRowHeights();
    if (null == o2)
      return null;
    var i3 = t3.getMax(o2), a4 = 0;
    try {
      for (var u3 = zn(o2), s4 = u3.next(); !s4.done; s4 = u3.next()) {
        var c7 = s4.value;
        if (a4 += i3 - c7, c7 > 0)
          break;
      }
    } catch (t4) {
      r2 = { error: t4 };
    } finally {
      try {
        s4 && !s4.done && (n2 = u3.return) && n2.call(u3);
      } finally {
        if (r2)
          throw r2.error;
      }
    }
    for (var f2 = e3.getCodewords(), h4 = 0; a4 > 0 && null == f2[h4]; h4++)
      a4--;
    var l2 = 0;
    for (h4 = o2.length - 1; h4 >= 0 && (l2 += i3 - o2[h4], !(o2[h4] > 0)); h4--)
      ;
    for (h4 = f2.length - 1; l2 > 0 && null == f2[h4]; h4--)
      l2--;
    return e3.getBoundingBox().addMissingRows(a4, l2, e3.isLeft());
  }, t3.getMax = function(t4) {
    var e3, r2, n2 = -1;
    try {
      for (var o2 = zn(t4), i3 = o2.next(); !i3.done; i3 = o2.next()) {
        var a4 = i3.value;
        n2 = Math.max(n2, a4);
      }
    } catch (t5) {
      e3 = { error: t5 };
    } finally {
      try {
        i3 && !i3.done && (r2 = o2.return) && r2.call(o2);
      } finally {
        if (e3)
          throw e3.error;
      }
    }
    return n2;
  }, t3.getBarcodeMetadata = function(t4, e3) {
    var r2, n2;
    return null == t4 || null == (r2 = t4.getBarcodeMetadata()) ? null == e3 ? null : e3.getBarcodeMetadata() : null == e3 || null == (n2 = e3.getBarcodeMetadata()) ? r2 : r2.getColumnCount() !== n2.getColumnCount() && r2.getErrorCorrectionLevel() !== n2.getErrorCorrectionLevel() && r2.getRowCount() !== n2.getRowCount() ? null : r2;
  }, t3.getRowIndicatorColumn = function(e3, r2, n2, o2, i3, a4) {
    for (var u3 = new Rn(r2, o2), s4 = 0; s4 < 2; s4++)
      for (var c7 = 0 === s4 ? 1 : -1, f2 = Math.trunc(Math.trunc(n2.getX())), h4 = Math.trunc(Math.trunc(n2.getY())); h4 <= r2.getMaxY() && h4 >= r2.getMinY(); h4 += c7) {
        var l2 = t3.detectCodeword(e3, 0, e3.getWidth(), o2, f2, h4, i3, a4);
        null != l2 && (u3.setCodeword(h4, l2), f2 = o2 ? l2.getStartX() : l2.getEndX());
      }
    return u3;
  }, t3.adjustCodewordCount = function(e3, r2) {
    var n2 = r2[0][1], o2 = n2.getValue(), i3 = e3.getBarcodeColumnCount() * e3.getBarcodeRowCount() - t3.getNumberOfECCodeWords(e3.getBarcodeECLevel());
    if (0 === o2.length) {
      if (i3 < 1 || i3 > sn.MAX_CODEWORDS_IN_BARCODE)
        throw U.getNotFoundInstance();
      n2.setValue(i3);
    } else
      o2[0] !== i3 && n2.setValue(i3);
  }, t3.createDecoderResult = function(e3) {
    var r2 = t3.createBarcodeMatrix(e3);
    t3.adjustCodewordCount(e3, r2);
    for (var n2 = new Array(), o2 = new Int32Array(e3.getBarcodeRowCount() * e3.getBarcodeColumnCount()), i3 = [], a4 = new Array(), u3 = 0; u3 < e3.getBarcodeRowCount(); u3++)
      for (var s4 = 0; s4 < e3.getBarcodeColumnCount(); s4++) {
        var c7 = r2[u3][s4 + 1].getValue(), f2 = u3 * e3.getBarcodeColumnCount() + s4;
        0 === c7.length ? n2.push(f2) : 1 === c7.length ? o2[f2] = c7[0] : (a4.push(f2), i3.push(c7));
      }
    for (var h4 = new Array(i3.length), l2 = 0; l2 < h4.length; l2++)
      h4[l2] = i3[l2];
    return t3.createDecoderResultFromAmbiguousValues(e3.getBarcodeECLevel(), o2, sn.toIntArray(n2), sn.toIntArray(a4), h4);
  }, t3.createDecoderResultFromAmbiguousValues = function(e3, r2, n2, o2, i3) {
    for (var a4 = new Int32Array(o2.length), u3 = 100; u3-- > 0; ) {
      for (var s4 = 0; s4 < a4.length; s4++)
        r2[o2[s4]] = i3[s4][a4[s4]];
      try {
        return t3.decodeCodewords(r2, e3, n2);
      } catch (t4) {
        if (!(t4 instanceof g))
          throw t4;
      }
      if (0 === a4.length)
        throw g.getChecksumInstance();
      for (s4 = 0; s4 < a4.length; s4++) {
        if (a4[s4] < i3[s4].length - 1) {
          a4[s4]++;
          break;
        }
        if (a4[s4] = 0, s4 === a4.length - 1)
          throw g.getChecksumInstance();
      }
    }
    throw g.getChecksumInstance();
  }, t3.createBarcodeMatrix = function(t4) {
    for (var e3, r2, n2, o2, i3 = Array.from({ length: t4.getBarcodeRowCount() }, function() {
      return new Array(t4.getBarcodeColumnCount() + 2);
    }), a4 = 0; a4 < i3.length; a4++)
      for (var u3 = 0; u3 < i3[a4].length; u3++)
        i3[a4][u3] = new On();
    var s4 = 0;
    try {
      for (var c7 = zn(t4.getDetectionResultColumns()), f2 = c7.next(); !f2.done; f2 = c7.next()) {
        var h4 = f2.value;
        if (null != h4)
          try {
            for (var l2 = (n2 = void 0, zn(h4.getCodewords())), d4 = l2.next(); !d4.done; d4 = l2.next()) {
              var p2 = d4.value;
              if (null != p2) {
                var g2 = p2.getRowNumber();
                if (g2 >= 0) {
                  if (g2 >= i3.length)
                    continue;
                  i3[g2][s4].setValue(p2.getValue());
                }
              }
            }
          } catch (t5) {
            n2 = { error: t5 };
          } finally {
            try {
              d4 && !d4.done && (o2 = l2.return) && o2.call(l2);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
        s4++;
      }
    } catch (t5) {
      e3 = { error: t5 };
    } finally {
      try {
        f2 && !f2.done && (r2 = c7.return) && r2.call(c7);
      } finally {
        if (e3)
          throw e3.error;
      }
    }
    return i3;
  }, t3.isValidBarcodeColumn = function(t4, e3) {
    return e3 >= 0 && e3 <= t4.getBarcodeColumnCount() + 1;
  }, t3.getStartColumn = function(e3, r2, n2, o2) {
    var i3, a4, u3 = o2 ? 1 : -1, s4 = null;
    if (t3.isValidBarcodeColumn(e3, r2 - u3) && (s4 = e3.getDetectionResultColumn(r2 - u3).getCodeword(n2)), null != s4)
      return o2 ? s4.getEndX() : s4.getStartX();
    if (null != (s4 = e3.getDetectionResultColumn(r2).getCodewordNearby(n2)))
      return o2 ? s4.getStartX() : s4.getEndX();
    if (t3.isValidBarcodeColumn(e3, r2 - u3) && (s4 = e3.getDetectionResultColumn(r2 - u3).getCodewordNearby(n2)), null != s4)
      return o2 ? s4.getEndX() : s4.getStartX();
    for (var c7 = 0; t3.isValidBarcodeColumn(e3, r2 - u3); ) {
      r2 -= u3;
      try {
        for (var f2 = (i3 = void 0, zn(e3.getDetectionResultColumn(r2).getCodewords())), h4 = f2.next(); !h4.done; h4 = f2.next()) {
          var l2 = h4.value;
          if (null != l2)
            return (o2 ? l2.getEndX() : l2.getStartX()) + u3 * c7 * (l2.getEndX() - l2.getStartX());
        }
      } catch (t4) {
        i3 = { error: t4 };
      } finally {
        try {
          h4 && !h4.done && (a4 = f2.return) && a4.call(f2);
        } finally {
          if (i3)
            throw i3.error;
        }
      }
      c7++;
    }
    return o2 ? e3.getBoundingBox().getMinX() : e3.getBoundingBox().getMaxX();
  }, t3.detectCodeword = function(e3, r2, n2, o2, i3, a4, u3, s4) {
    i3 = t3.adjustCodewordStartColumn(e3, r2, n2, o2, i3, a4);
    var c7, f2 = t3.getModuleBitCount(e3, r2, n2, o2, i3, a4);
    if (null == f2)
      return null;
    var h4 = vt.sum(f2);
    if (o2)
      c7 = i3 + h4;
    else {
      for (var l2 = 0; l2 < f2.length / 2; l2++) {
        var d4 = f2[l2];
        f2[l2] = f2[f2.length - 1 - l2], f2[f2.length - 1 - l2] = d4;
      }
      i3 = (c7 = i3) - h4;
    }
    if (!t3.checkCodewordSkew(h4, u3, s4))
      return null;
    var p2 = Mn.getDecodedValue(f2), g2 = sn.getCodeword(p2);
    return -1 === g2 ? null : new Pn(i3, c7, t3.getCodewordBucketNumber(p2), g2);
  }, t3.getModuleBitCount = function(t4, e3, r2, n2, o2, i3) {
    for (var a4 = o2, u3 = new Int32Array(8), s4 = 0, c7 = n2 ? 1 : -1, f2 = n2; (n2 ? a4 < r2 : a4 >= e3) && s4 < u3.length; )
      t4.get(a4, i3) === f2 ? (u3[s4]++, a4 += c7) : (s4++, f2 = !f2);
    return s4 === u3.length || a4 === (n2 ? r2 : e3) && s4 === u3.length - 1 ? u3 : null;
  }, t3.getNumberOfECCodeWords = function(t4) {
    return 2 << t4;
  }, t3.adjustCodewordStartColumn = function(e3, r2, n2, o2, i3, a4) {
    for (var u3 = i3, s4 = o2 ? -1 : 1, c7 = 0; c7 < 2; c7++) {
      for (; (o2 ? u3 >= r2 : u3 < n2) && o2 === e3.get(u3, a4); ) {
        if (Math.abs(i3 - u3) > t3.CODEWORD_SKEW_SIZE)
          return i3;
        u3 += s4;
      }
      s4 = -s4, o2 = !o2;
    }
    return u3;
  }, t3.checkCodewordSkew = function(e3, r2, n2) {
    return r2 - t3.CODEWORD_SKEW_SIZE <= e3 && e3 <= n2 + t3.CODEWORD_SKEW_SIZE;
  }, t3.decodeCodewords = function(e3, r2, n2) {
    if (0 === e3.length)
      throw R.getFormatInstance();
    var o2 = 1 << r2 + 1, i3 = t3.correctErrors(e3, n2, o2);
    t3.verifyCodewordCount(e3, o2);
    var a4 = jn.decode(e3, "" + r2);
    return a4.setErrorsCorrected(i3), a4.setErasures(n2.length), a4;
  }, t3.correctErrors = function(e3, r2, n2) {
    if (null != r2 && r2.length > n2 / 2 + t3.MAX_ERRORS || n2 < 0 || n2 > t3.MAX_EC_CODEWORDS)
      throw g.getChecksumInstance();
    return t3.errorCorrection.decode(e3, n2, r2);
  }, t3.verifyCodewordCount = function(t4, e3) {
    if (t4.length < 4)
      throw R.getFormatInstance();
    var r2 = t4[0];
    if (r2 > t4.length)
      throw R.getFormatInstance();
    if (0 === r2) {
      if (!(e3 < t4.length))
        throw R.getFormatInstance();
      t4[0] = t4.length - e3;
    }
  }, t3.getBitCountForCodeword = function(t4) {
    for (var e3 = new Int32Array(8), r2 = 0, n2 = e3.length - 1; !((1 & t4) !== r2 && (r2 = 1 & t4, --n2 < 0)); )
      e3[n2]++, t4 >>= 1;
    return e3;
  }, t3.getCodewordBucketNumber = function(t4) {
    return t4 instanceof Int32Array ? this.getCodewordBucketNumber_Int32Array(t4) : this.getCodewordBucketNumber_number(t4);
  }, t3.getCodewordBucketNumber_number = function(e3) {
    return t3.getCodewordBucketNumber(t3.getBitCountForCodeword(e3));
  }, t3.getCodewordBucketNumber_Int32Array = function(t4) {
    return (t4[0] - t4[2] + t4[4] - t4[6] + 9) % 9;
  }, t3.toString = function(t4) {
    for (var e3 = new An(), r2 = 0; r2 < t4.length; r2++) {
      e3.format("Row %2d: ", r2);
      for (var n2 = 0; n2 < t4[r2].length; n2++) {
        var o2 = t4[r2][n2];
        0 === o2.getValue().length ? e3.format("        ", null) : e3.format("%4d(%2d)", o2.getValue()[0], o2.getConfidence(o2.getValue()[0]));
      }
      e3.format("%n");
    }
    return e3.toString();
  }, t3.CODEWORD_SKEW_SIZE = 2, t3.MAX_ERRORS = 3, t3.MAX_EC_CODEWORDS = 512, t3.errorCorrection = new _n(), t3;
}(), Zn = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Kn = function() {
  function t3() {
  }
  return t3.prototype.decode = function(e3, r2) {
    void 0 === r2 && (r2 = null);
    var n2 = t3.decode(e3, r2, false);
    if (null == n2 || 0 === n2.length || null == n2[0])
      throw U.getNotFoundInstance();
    return n2[0];
  }, t3.prototype.decodeMultiple = function(e3, r2) {
    void 0 === r2 && (r2 = null);
    try {
      return t3.decode(e3, r2, true);
    } catch (t4) {
      if (t4 instanceof R || t4 instanceof g)
        throw U.getNotFoundInstance();
      throw t4;
    }
  }, t3.decode = function(e3, r2, n2) {
    var o2, i3, a4 = new Array(), u3 = hn.detectMultiple(e3, r2, n2);
    try {
      for (var s4 = Zn(u3.getPoints()), c7 = s4.next(); !c7.done; c7 = s4.next()) {
        var f2 = c7.value, h4 = Yn.decode(u3.getBits(), f2[4], f2[5], f2[6], f2[7], t3.getMinCodewordWidth(f2), t3.getMaxCodewordWidth(f2)), l2 = new et(h4.getText(), h4.getRawBytes(), void 0, f2, nt.PDF_417);
        l2.putMetadata(it.ERROR_CORRECTION_LEVEL, h4.getECLevel());
        var d4 = h4.getOther();
        null != d4 && l2.putMetadata(it.PDF417_EXTRA_METADATA, d4), a4.push(l2);
      }
    } catch (t4) {
      o2 = { error: t4 };
    } finally {
      try {
        c7 && !c7.done && (i3 = s4.return) && i3.call(s4);
      } finally {
        if (o2)
          throw o2.error;
      }
    }
    return a4.map(function(t4) {
      return t4;
    });
  }, t3.getMaxWidth = function(t4, e3) {
    return null == t4 || null == e3 ? 0 : Math.trunc(Math.abs(t4.getX() - e3.getX()));
  }, t3.getMinWidth = function(t4, e3) {
    return null == t4 || null == e3 ? I.MAX_VALUE : Math.trunc(Math.abs(t4.getX() - e3.getX()));
  }, t3.getMaxCodewordWidth = function(e3) {
    return Math.floor(Math.max(Math.max(t3.getMaxWidth(e3[0], e3[4]), t3.getMaxWidth(e3[6], e3[2]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN), Math.max(t3.getMaxWidth(e3[1], e3[5]), t3.getMaxWidth(e3[7], e3[3]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN)));
  }, t3.getMinCodewordWidth = function(e3) {
    return Math.floor(Math.min(Math.min(t3.getMinWidth(e3[0], e3[4]), t3.getMinWidth(e3[6], e3[2]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN), Math.min(t3.getMinWidth(e3[1], e3[5]), t3.getMinWidth(e3[7], e3[3]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN)));
  }, t3.prototype.reset = function() {
  }, t3;
}(), qn = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Qn = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return qn(e3, t3), e3.kind = "ReaderException", e3;
}(s), Jn = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, $n = function() {
  function t3() {
  }
  return t3.prototype.decode = function(t4, e3) {
    return this.setHints(e3), this.decodeInternal(t4);
  }, t3.prototype.decodeWithState = function(t4) {
    return null !== this.readers && void 0 !== this.readers || this.setHints(null), this.decodeInternal(t4);
  }, t3.prototype.setHints = function(t4) {
    this.hints = t4;
    var e3 = null != t4 && void 0 !== t4.get(T.TRY_HARDER), r2 = null == t4 ? null : t4.get(T.POSSIBLE_FORMATS), n2 = new Array();
    if (null != r2) {
      var o2 = r2.some(function(t5) {
        return t5 === nt.UPC_A || t5 === nt.UPC_E || t5 === nt.EAN_13 || t5 === nt.EAN_8 || t5 === nt.CODABAR || t5 === nt.CODE_39 || t5 === nt.CODE_93 || t5 === nt.CODE_128 || t5 === nt.ITF || t5 === nt.RSS_14 || t5 === nt.RSS_EXPANDED;
      });
      o2 && !e3 && n2.push(new fr$2(t4)), r2.includes(nt.QR_CODE) && n2.push(new an()), r2.includes(nt.DATA_MATRIX) && n2.push(new Or()), r2.includes(nt.AZTEC) && n2.push(new Mt()), r2.includes(nt.PDF_417) && n2.push(new Kn()), o2 && e3 && n2.push(new fr$2(t4));
    }
    0 === n2.length && (e3 || n2.push(new fr$2(t4)), n2.push(new an()), n2.push(new Or()), n2.push(new Mt()), n2.push(new Kn()), e3 && n2.push(new fr$2(t4))), this.readers = n2;
  }, t3.prototype.reset = function() {
    var t4, e3;
    if (null !== this.readers)
      try {
        for (var r2 = Jn(this.readers), n2 = r2.next(); !n2.done; n2 = r2.next()) {
          n2.value.reset();
        }
      } catch (e4) {
        t4 = { error: e4 };
      } finally {
        try {
          n2 && !n2.done && (e3 = r2.return) && e3.call(r2);
        } finally {
          if (t4)
            throw t4.error;
        }
      }
  }, t3.prototype.decodeInternal = function(t4) {
    var e3, r2;
    if (null === this.readers)
      throw new Qn("No readers where selected, nothing can be read.");
    try {
      for (var n2 = Jn(this.readers), o2 = n2.next(); !o2.done; o2 = n2.next()) {
        var i3 = o2.value;
        try {
          return i3.decode(t4, this.hints);
        } catch (t5) {
          if (t5 instanceof Qn)
            continue;
        }
      }
    } catch (t5) {
      e3 = { error: t5 };
    } finally {
      try {
        o2 && !o2.done && (r2 = n2.return) && r2.call(n2);
      } finally {
        if (e3)
          throw e3.error;
      }
    }
    throw new U("No MultiFormat Readers were able to detect the code.");
  }, t3;
}(), to = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2) {
    void 0 === e4 && (e4 = null), void 0 === r2 && (r2 = 500);
    var n2 = new $n();
    return n2.setHints(e4), t3.call(this, n2, r2) || this;
  }
  to(e3, t3), e3.prototype.decodeBitmap = function(t4) {
    return this.reader.decodeWithState(t4);
  };
}(tt);
var eo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4) {
    return void 0 === e4 && (e4 = 500), t3.call(this, new Kn(), e4) || this;
  }
  eo(e3, t3);
}(tt);
var ro, no = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4) {
    return void 0 === e4 && (e4 = 500), t3.call(this, new an(), e4) || this;
  }
  no(e3, t3);
}(tt), function(t3) {
  t3[t3.ERROR_CORRECTION = 0] = "ERROR_CORRECTION", t3[t3.CHARACTER_SET = 1] = "CHARACTER_SET", t3[t3.DATA_MATRIX_SHAPE = 2] = "DATA_MATRIX_SHAPE", t3[t3.MIN_SIZE = 3] = "MIN_SIZE", t3[t3.MAX_SIZE = 4] = "MAX_SIZE", t3[t3.MARGIN = 5] = "MARGIN", t3[t3.PDF417_COMPACT = 6] = "PDF417_COMPACT", t3[t3.PDF417_COMPACTION = 7] = "PDF417_COMPACTION", t3[t3.PDF417_DIMENSIONS = 8] = "PDF417_DIMENSIONS", t3[t3.AZTEC_LAYERS = 9] = "AZTEC_LAYERS", t3[t3.QR_VERSION = 10] = "QR_VERSION";
}(ro || (ro = {}));
var ao = function() {
  function t3() {
  }
  return t3.applyMaskPenaltyRule1 = function(e3) {
    return t3.applyMaskPenaltyRule1Internal(e3, true) + t3.applyMaskPenaltyRule1Internal(e3, false);
  }, t3.applyMaskPenaltyRule2 = function(e3) {
    for (var r2 = 0, n2 = e3.getArray(), o2 = e3.getWidth(), i3 = e3.getHeight(), a4 = 0; a4 < i3 - 1; a4++)
      for (var u3 = n2[a4], s4 = 0; s4 < o2 - 1; s4++) {
        var c7 = u3[s4];
        c7 === u3[s4 + 1] && c7 === n2[a4 + 1][s4] && c7 === n2[a4 + 1][s4 + 1] && r2++;
      }
    return t3.N2 * r2;
  }, t3.applyMaskPenaltyRule3 = function(e3) {
    for (var r2 = 0, n2 = e3.getArray(), o2 = e3.getWidth(), i3 = e3.getHeight(), a4 = 0; a4 < i3; a4++)
      for (var u3 = 0; u3 < o2; u3++) {
        var s4 = n2[a4];
        u3 + 6 < o2 && 1 === s4[u3] && 0 === s4[u3 + 1] && 1 === s4[u3 + 2] && 1 === s4[u3 + 3] && 1 === s4[u3 + 4] && 0 === s4[u3 + 5] && 1 === s4[u3 + 6] && (t3.isWhiteHorizontal(s4, u3 - 4, u3) || t3.isWhiteHorizontal(s4, u3 + 7, u3 + 11)) && r2++, a4 + 6 < i3 && 1 === n2[a4][u3] && 0 === n2[a4 + 1][u3] && 1 === n2[a4 + 2][u3] && 1 === n2[a4 + 3][u3] && 1 === n2[a4 + 4][u3] && 0 === n2[a4 + 5][u3] && 1 === n2[a4 + 6][u3] && (t3.isWhiteVertical(n2, u3, a4 - 4, a4) || t3.isWhiteVertical(n2, u3, a4 + 7, a4 + 11)) && r2++;
      }
    return r2 * t3.N3;
  }, t3.isWhiteHorizontal = function(t4, e3, r2) {
    e3 = Math.max(e3, 0), r2 = Math.min(r2, t4.length);
    for (var n2 = e3; n2 < r2; n2++)
      if (1 === t4[n2])
        return false;
    return true;
  }, t3.isWhiteVertical = function(t4, e3, r2, n2) {
    r2 = Math.max(r2, 0), n2 = Math.min(n2, t4.length);
    for (var o2 = r2; o2 < n2; o2++)
      if (1 === t4[o2][e3])
        return false;
    return true;
  }, t3.applyMaskPenaltyRule4 = function(e3) {
    for (var r2 = 0, n2 = e3.getArray(), o2 = e3.getWidth(), i3 = e3.getHeight(), a4 = 0; a4 < i3; a4++)
      for (var u3 = n2[a4], s4 = 0; s4 < o2; s4++)
        1 === u3[s4] && r2++;
    var c7 = e3.getHeight() * e3.getWidth();
    return Math.floor(10 * Math.abs(2 * r2 - c7) / c7) * t3.N4;
  }, t3.getDataMaskBit = function(t4, e3, r2) {
    var n2, o2;
    switch (t4) {
      case 0:
        n2 = r2 + e3 & 1;
        break;
      case 1:
        n2 = 1 & r2;
        break;
      case 2:
        n2 = e3 % 3;
        break;
      case 3:
        n2 = (r2 + e3) % 3;
        break;
      case 4:
        n2 = Math.floor(r2 / 2) + Math.floor(e3 / 3) & 1;
        break;
      case 5:
        n2 = (1 & (o2 = r2 * e3)) + o2 % 3;
        break;
      case 6:
        n2 = (1 & (o2 = r2 * e3)) + o2 % 3 & 1;
        break;
      case 7:
        n2 = (o2 = r2 * e3) % 3 + (r2 + e3 & 1) & 1;
        break;
      default:
        throw new l("Invalid mask pattern: " + t4);
    }
    return 0 === n2;
  }, t3.applyMaskPenaltyRule1Internal = function(e3, r2) {
    for (var n2 = 0, o2 = r2 ? e3.getHeight() : e3.getWidth(), i3 = r2 ? e3.getWidth() : e3.getHeight(), a4 = e3.getArray(), u3 = 0; u3 < o2; u3++) {
      for (var s4 = 0, c7 = -1, f2 = 0; f2 < i3; f2++) {
        var h4 = r2 ? a4[u3][f2] : a4[f2][u3];
        h4 === c7 ? s4++ : (s4 >= 5 && (n2 += t3.N1 + (s4 - 5)), s4 = 1, c7 = h4);
      }
      s4 >= 5 && (n2 += t3.N1 + (s4 - 5));
    }
    return n2;
  }, t3.N1 = 3, t3.N2 = 3, t3.N3 = 40, t3.N4 = 10, t3;
}(), co = function() {
  function t3() {
    this.maskPattern = -1;
  }
  return t3.prototype.getMode = function() {
    return this.mode;
  }, t3.prototype.getECLevel = function() {
    return this.ecLevel;
  }, t3.prototype.getVersion = function() {
    return this.version;
  }, t3.prototype.getMaskPattern = function() {
    return this.maskPattern;
  }, t3.prototype.getMatrix = function() {
    return this.matrix;
  }, t3.prototype.toString = function() {
    var t4 = new k();
    return t4.append("<<\n"), t4.append(" mode: "), t4.append(this.mode ? this.mode.toString() : "null"), t4.append("\n ecLevel: "), t4.append(this.ecLevel ? this.ecLevel.toString() : "null"), t4.append("\n version: "), t4.append(this.version ? this.version.toString() : "null"), t4.append("\n maskPattern: "), t4.append(this.maskPattern.toString()), this.matrix ? (t4.append("\n matrix:\n"), t4.append(this.matrix.toString())) : t4.append("\n matrix: null\n"), t4.append(">>\n"), t4.toString();
  }, t3.prototype.setMode = function(t4) {
    this.mode = t4;
  }, t3.prototype.setECLevel = function(t4) {
    this.ecLevel = t4;
  }, t3.prototype.setVersion = function(t4) {
    this.version = t4;
  }, t3.prototype.setMaskPattern = function(t4) {
    this.maskPattern = t4;
  }, t3.prototype.setMatrix = function(t4) {
    this.matrix = t4;
  }, t3.isValidMaskPattern = function(e3) {
    return e3 >= 0 && e3 < t3.NUM_MASK_PATTERNS;
  }, t3.NUM_MASK_PATTERNS = 8, t3;
}(), fo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), ho = function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  return fo(e3, t3), e3.kind = "WriterException", e3;
}(s);
(function() {
  function t3() {
  }
  return t3.clearMatrix = function(t4) {
    t4.clear(255);
  }, t3.buildMatrix = function(e3, r2, n2, o2, i3) {
    t3.clearMatrix(i3), t3.embedBasicPatterns(n2, i3), t3.embedTypeInfo(r2, o2, i3), t3.maybeEmbedVersionInfo(n2, i3), t3.embedDataBits(e3, o2, i3);
  }, t3.embedBasicPatterns = function(e3, r2) {
    t3.embedPositionDetectionPatternsAndSeparators(r2), t3.embedDarkDotAtLeftBottomCorner(r2), t3.maybeEmbedPositionAdjustmentPatterns(e3, r2), t3.embedTimingPatterns(r2);
  }, t3.embedTypeInfo = function(e3, r2, n2) {
    var o2 = new S();
    t3.makeTypeInfoBits(e3, r2, o2);
    for (var i3 = 0, a4 = o2.getSize(); i3 < a4; ++i3) {
      var u3 = o2.get(o2.getSize() - 1 - i3), s4 = t3.TYPE_INFO_COORDINATES[i3], c7 = s4[0], f2 = s4[1];
      if (n2.setBoolean(c7, f2, u3), i3 < 8) {
        var h4 = n2.getWidth() - i3 - 1, l2 = 8;
        n2.setBoolean(h4, l2, u3);
      } else {
        h4 = 8, l2 = n2.getHeight() - 7 + (i3 - 8);
        n2.setBoolean(h4, l2, u3);
      }
    }
  }, t3.maybeEmbedVersionInfo = function(e3, r2) {
    if (!(e3.getVersionNumber() < 7)) {
      var n2 = new S();
      t3.makeVersionInfoBits(e3, n2);
      for (var o2 = 17, i3 = 0; i3 < 6; ++i3)
        for (var a4 = 0; a4 < 3; ++a4) {
          var u3 = n2.get(o2);
          o2--, r2.setBoolean(i3, r2.getHeight() - 11 + a4, u3), r2.setBoolean(r2.getHeight() - 11 + a4, i3, u3);
        }
    }
  }, t3.embedDataBits = function(e3, r2, n2) {
    for (var o2 = 0, i3 = -1, a4 = n2.getWidth() - 1, u3 = n2.getHeight() - 1; a4 > 0; ) {
      for (6 === a4 && (a4 -= 1); u3 >= 0 && u3 < n2.getHeight(); ) {
        for (var s4 = 0; s4 < 2; ++s4) {
          var c7 = a4 - s4;
          if (t3.isEmpty(n2.get(c7, u3))) {
            var f2 = void 0;
            o2 < e3.getSize() ? (f2 = e3.get(o2), ++o2) : f2 = false, 255 !== r2 && ao.getDataMaskBit(r2, c7, u3) && (f2 = !f2), n2.setBoolean(c7, u3, f2);
          }
        }
        u3 += i3;
      }
      u3 += i3 = -i3, a4 -= 2;
    }
    if (o2 !== e3.getSize())
      throw new ho("Not all bits consumed: " + o2 + "/" + e3.getSize());
  }, t3.findMSBSet = function(t4) {
    return 32 - I.numberOfLeadingZeros(t4);
  }, t3.calculateBCHCode = function(e3, r2) {
    if (0 === r2)
      throw new l("0 polynomial");
    var n2 = t3.findMSBSet(r2);
    for (e3 <<= n2 - 1; t3.findMSBSet(e3) >= n2; )
      e3 ^= r2 << t3.findMSBSet(e3) - n2;
    return e3;
  }, t3.makeTypeInfoBits = function(e3, r2, n2) {
    if (!co.isValidMaskPattern(r2))
      throw new ho("Invalid mask pattern");
    var o2 = e3.getBits() << 3 | r2;
    n2.appendBits(o2, 5);
    var i3 = t3.calculateBCHCode(o2, t3.TYPE_INFO_POLY);
    n2.appendBits(i3, 10);
    var a4 = new S();
    if (a4.appendBits(t3.TYPE_INFO_MASK_PATTERN, 15), n2.xor(a4), 15 !== n2.getSize())
      throw new ho("should not happen but we got: " + n2.getSize());
  }, t3.makeVersionInfoBits = function(e3, r2) {
    r2.appendBits(e3.getVersionNumber(), 6);
    var n2 = t3.calculateBCHCode(e3.getVersionNumber(), t3.VERSION_INFO_POLY);
    if (r2.appendBits(n2, 12), 18 !== r2.getSize())
      throw new ho("should not happen but we got: " + r2.getSize());
  }, t3.isEmpty = function(t4) {
    return 255 === t4;
  }, t3.embedTimingPatterns = function(e3) {
    for (var r2 = 8; r2 < e3.getWidth() - 8; ++r2) {
      var n2 = (r2 + 1) % 2;
      t3.isEmpty(e3.get(r2, 6)) && e3.setNumber(r2, 6, n2), t3.isEmpty(e3.get(6, r2)) && e3.setNumber(6, r2, n2);
    }
  }, t3.embedDarkDotAtLeftBottomCorner = function(t4) {
    if (0 === t4.get(8, t4.getHeight() - 8))
      throw new ho();
    t4.setNumber(8, t4.getHeight() - 8, 1);
  }, t3.embedHorizontalSeparationPattern = function(e3, r2, n2) {
    for (var o2 = 0; o2 < 8; ++o2) {
      if (!t3.isEmpty(n2.get(e3 + o2, r2)))
        throw new ho();
      n2.setNumber(e3 + o2, r2, 0);
    }
  }, t3.embedVerticalSeparationPattern = function(e3, r2, n2) {
    for (var o2 = 0; o2 < 7; ++o2) {
      if (!t3.isEmpty(n2.get(e3, r2 + o2)))
        throw new ho();
      n2.setNumber(e3, r2 + o2, 0);
    }
  }, t3.embedPositionAdjustmentPattern = function(e3, r2, n2) {
    for (var o2 = 0; o2 < 5; ++o2)
      for (var i3 = t3.POSITION_ADJUSTMENT_PATTERN[o2], a4 = 0; a4 < 5; ++a4)
        n2.setNumber(e3 + a4, r2 + o2, i3[a4]);
  }, t3.embedPositionDetectionPattern = function(e3, r2, n2) {
    for (var o2 = 0; o2 < 7; ++o2)
      for (var i3 = t3.POSITION_DETECTION_PATTERN[o2], a4 = 0; a4 < 7; ++a4)
        n2.setNumber(e3 + a4, r2 + o2, i3[a4]);
  }, t3.embedPositionDetectionPatternsAndSeparators = function(e3) {
    var r2 = t3.POSITION_DETECTION_PATTERN[0].length;
    t3.embedPositionDetectionPattern(0, 0, e3), t3.embedPositionDetectionPattern(e3.getWidth() - r2, 0, e3), t3.embedPositionDetectionPattern(0, e3.getWidth() - r2, e3);
    t3.embedHorizontalSeparationPattern(0, 7, e3), t3.embedHorizontalSeparationPattern(e3.getWidth() - 8, 7, e3), t3.embedHorizontalSeparationPattern(0, e3.getWidth() - 8, e3);
    t3.embedVerticalSeparationPattern(7, 0, e3), t3.embedVerticalSeparationPattern(e3.getHeight() - 7 - 1, 0, e3), t3.embedVerticalSeparationPattern(7, e3.getHeight() - 7, e3);
  }, t3.maybeEmbedPositionAdjustmentPatterns = function(e3, r2) {
    if (!(e3.getVersionNumber() < 2))
      for (var n2 = e3.getVersionNumber() - 1, o2 = t3.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[n2], i3 = 0, a4 = o2.length; i3 !== a4; i3++) {
        var u3 = o2[i3];
        if (u3 >= 0)
          for (var s4 = 0; s4 !== a4; s4++) {
            var c7 = o2[s4];
            c7 >= 0 && t3.isEmpty(r2.get(c7, u3)) && t3.embedPositionAdjustmentPattern(c7 - 2, u3 - 2, r2);
          }
      }
  }, t3.POSITION_DETECTION_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 1, 1, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1, 1, 1])]), t3.POSITION_ADJUSTMENT_PATTERN = Array.from([Int32Array.from([1, 1, 1, 1, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 0, 1, 0, 1]), Int32Array.from([1, 0, 0, 0, 1]), Int32Array.from([1, 1, 1, 1, 1])]), t3.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([Int32Array.from([-1, -1, -1, -1, -1, -1, -1]), Int32Array.from([6, 18, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, -1, -1, -1, -1, -1]), Int32Array.from([6, 26, -1, -1, -1, -1, -1]), Int32Array.from([6, 30, -1, -1, -1, -1, -1]), Int32Array.from([6, 34, -1, -1, -1, -1, -1]), Int32Array.from([6, 22, 38, -1, -1, -1, -1]), Int32Array.from([6, 24, 42, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, -1, -1, -1, -1]), Int32Array.from([6, 28, 50, -1, -1, -1, -1]), Int32Array.from([6, 30, 54, -1, -1, -1, -1]), Int32Array.from([6, 32, 58, -1, -1, -1, -1]), Int32Array.from([6, 34, 62, -1, -1, -1, -1]), Int32Array.from([6, 26, 46, 66, -1, -1, -1]), Int32Array.from([6, 26, 48, 70, -1, -1, -1]), Int32Array.from([6, 26, 50, 74, -1, -1, -1]), Int32Array.from([6, 30, 54, 78, -1, -1, -1]), Int32Array.from([6, 30, 56, 82, -1, -1, -1]), Int32Array.from([6, 30, 58, 86, -1, -1, -1]), Int32Array.from([6, 34, 62, 90, -1, -1, -1]), Int32Array.from([6, 28, 50, 72, 94, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, -1, -1]), Int32Array.from([6, 30, 54, 78, 102, -1, -1]), Int32Array.from([6, 28, 54, 80, 106, -1, -1]), Int32Array.from([6, 32, 58, 84, 110, -1, -1]), Int32Array.from([6, 30, 58, 86, 114, -1, -1]), Int32Array.from([6, 34, 62, 90, 118, -1, -1]), Int32Array.from([6, 26, 50, 74, 98, 122, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, -1]), Int32Array.from([6, 26, 52, 78, 104, 130, -1]), Int32Array.from([6, 30, 56, 82, 108, 134, -1]), Int32Array.from([6, 34, 60, 86, 112, 138, -1]), Int32Array.from([6, 30, 58, 86, 114, 142, -1]), Int32Array.from([6, 34, 62, 90, 118, 146, -1]), Int32Array.from([6, 30, 54, 78, 102, 126, 150]), Int32Array.from([6, 24, 50, 76, 102, 128, 154]), Int32Array.from([6, 28, 54, 80, 106, 132, 158]), Int32Array.from([6, 32, 58, 84, 110, 136, 162]), Int32Array.from([6, 26, 54, 82, 110, 138, 166]), Int32Array.from([6, 30, 58, 86, 114, 142, 170])]), t3.TYPE_INFO_COORDINATES = Array.from([Int32Array.from([8, 0]), Int32Array.from([8, 1]), Int32Array.from([8, 2]), Int32Array.from([8, 3]), Int32Array.from([8, 4]), Int32Array.from([8, 5]), Int32Array.from([8, 7]), Int32Array.from([8, 8]), Int32Array.from([7, 8]), Int32Array.from([5, 8]), Int32Array.from([4, 8]), Int32Array.from([3, 8]), Int32Array.from([2, 8]), Int32Array.from([1, 8]), Int32Array.from([0, 8])]), t3.VERSION_INFO_POLY = 7973, t3.TYPE_INFO_POLY = 1335, t3.TYPE_INFO_MASK_PATTERN = 21522, t3;
})();
!function() {
  Int32Array.from([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1]), P.UTF8.getName();
}();
var yo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2, n2, o2, i3, a4, u3, s4) {
    var c7 = t3.call(this, a4, u3) || this;
    if (c7.yuvData = e4, c7.dataWidth = r2, c7.dataHeight = n2, c7.left = o2, c7.top = i3, o2 + a4 > r2 || i3 + u3 > n2)
      throw new l("Crop rectangle does not fit within image data.");
    return s4 && c7.reverseHorizontal(a4, u3), c7;
  }
  yo(e3, t3), e3.prototype.getRow = function(t4, e4) {
    if (t4 < 0 || t4 >= this.getHeight())
      throw new l("Requested row is outside the image: " + t4);
    var r2 = this.getWidth();
    (null == e4 || e4.length < r2) && (e4 = new Uint8ClampedArray(r2));
    var n2 = (t4 + this.top) * this.dataWidth + this.left;
    return w$2.arraycopy(this.yuvData, n2, e4, 0, r2), e4;
  }, e3.prototype.getMatrix = function() {
    var t4 = this.getWidth(), e4 = this.getHeight();
    if (t4 === this.dataWidth && e4 === this.dataHeight)
      return this.yuvData;
    var r2 = t4 * e4, n2 = new Uint8ClampedArray(r2), o2 = this.top * this.dataWidth + this.left;
    if (t4 === this.dataWidth)
      return w$2.arraycopy(this.yuvData, o2, n2, 0, r2), n2;
    for (var i3 = 0; i3 < e4; i3++) {
      var a4 = i3 * t4;
      w$2.arraycopy(this.yuvData, o2, n2, a4, t4), o2 += this.dataWidth;
    }
    return n2;
  }, e3.prototype.isCropSupported = function() {
    return true;
  }, e3.prototype.crop = function(t4, r2, n2, o2) {
    return new e3(this.yuvData, this.dataWidth, this.dataHeight, this.left + t4, this.top + r2, n2, o2, false);
  }, e3.prototype.renderThumbnail = function() {
    for (var t4 = this.getWidth() / e3.THUMBNAIL_SCALE_FACTOR, r2 = this.getHeight() / e3.THUMBNAIL_SCALE_FACTOR, n2 = new Int32Array(t4 * r2), o2 = this.yuvData, i3 = this.top * this.dataWidth + this.left, a4 = 0; a4 < r2; a4++) {
      for (var u3 = a4 * t4, s4 = 0; s4 < t4; s4++) {
        var c7 = 255 & o2[i3 + s4 * e3.THUMBNAIL_SCALE_FACTOR];
        n2[u3 + s4] = 4278190080 | 65793 * c7;
      }
      i3 += this.dataWidth * e3.THUMBNAIL_SCALE_FACTOR;
    }
    return n2;
  }, e3.prototype.getThumbnailWidth = function() {
    return this.getWidth() / e3.THUMBNAIL_SCALE_FACTOR;
  }, e3.prototype.getThumbnailHeight = function() {
    return this.getHeight() / e3.THUMBNAIL_SCALE_FACTOR;
  }, e3.prototype.reverseHorizontal = function(t4, e4) {
    for (var r2 = this.yuvData, n2 = 0, o2 = this.top * this.dataWidth + this.left; n2 < e4; n2++, o2 += this.dataWidth)
      for (var i3 = o2 + t4 / 2, a4 = o2, u3 = o2 + t4 - 1; a4 < i3; a4++, u3--) {
        var s4 = r2[a4];
        r2[a4] = r2[u3], r2[u3] = s4;
      }
  }, e3.prototype.invert = function() {
    return new Y(this);
  }, e3.THUMBNAIL_SCALE_FACTOR = 2;
}(j);
var wo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2, n2, o2, i3, a4, u3) {
    var s4 = t3.call(this, r2, n2) || this;
    if (s4.dataWidth = o2, s4.dataHeight = i3, s4.left = a4, s4.top = u3, 4 === e4.BYTES_PER_ELEMENT) {
      for (var c7 = r2 * n2, f2 = new Uint8ClampedArray(c7), h4 = 0; h4 < c7; h4++) {
        var d4 = e4[h4], p2 = d4 >> 16 & 255, g2 = d4 >> 7 & 510, y4 = 255 & d4;
        f2[h4] = (p2 + g2 + y4) / 4 & 255;
      }
      s4.luminances = f2;
    } else
      s4.luminances = e4;
    if (void 0 === o2 && (s4.dataWidth = r2), void 0 === i3 && (s4.dataHeight = n2), void 0 === a4 && (s4.left = 0), void 0 === u3 && (s4.top = 0), s4.left + r2 > s4.dataWidth || s4.top + n2 > s4.dataHeight)
      throw new l("Crop rectangle does not fit within image data.");
    return s4;
  }
  wo(e3, t3), e3.prototype.getRow = function(t4, e4) {
    if (t4 < 0 || t4 >= this.getHeight())
      throw new l("Requested row is outside the image: " + t4);
    var r2 = this.getWidth();
    (null == e4 || e4.length < r2) && (e4 = new Uint8ClampedArray(r2));
    var n2 = (t4 + this.top) * this.dataWidth + this.left;
    return w$2.arraycopy(this.luminances, n2, e4, 0, r2), e4;
  }, e3.prototype.getMatrix = function() {
    var t4 = this.getWidth(), e4 = this.getHeight();
    if (t4 === this.dataWidth && e4 === this.dataHeight)
      return this.luminances;
    var r2 = t4 * e4, n2 = new Uint8ClampedArray(r2), o2 = this.top * this.dataWidth + this.left;
    if (t4 === this.dataWidth)
      return w$2.arraycopy(this.luminances, o2, n2, 0, r2), n2;
    for (var i3 = 0; i3 < e4; i3++) {
      var a4 = i3 * t4;
      w$2.arraycopy(this.luminances, o2, n2, a4, t4), o2 += this.dataWidth;
    }
    return n2;
  }, e3.prototype.isCropSupported = function() {
    return true;
  }, e3.prototype.crop = function(t4, r2, n2, o2) {
    return new e3(this.luminances, n2, o2, this.dataWidth, this.dataHeight, this.left + t4, this.top + r2);
  }, e3.prototype.invert = function() {
    return new Y(this);
  };
}(j);
var _o = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  _o(e3, t3), e3.forName = function(t4) {
    return this.getCharacterSetECIByName(t4);
  };
}(P);
var vo = function() {
  function t3(t4) {
    this.previous = t4;
  }
  return t3.prototype.getPrevious = function() {
    return this.previous;
  }, t3;
}(), mo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Ao = function(t3) {
  function e3(e4, r2, n2) {
    var o2 = t3.call(this, e4) || this;
    return o2.value = r2, o2.bitCount = n2, o2;
  }
  return mo(e3, t3), e3.prototype.appendTo = function(t4, e4) {
    t4.appendBits(this.value, this.bitCount);
  }, e3.prototype.add = function(t4, r2) {
    return new e3(this, t4, r2);
  }, e3.prototype.addBinaryShift = function(t4, r2) {
    return console.warn("addBinaryShift on SimpleToken, this simply returns a copy of this token"), new e3(this, t4, r2);
  }, e3.prototype.toString = function() {
    var t4 = this.value & (1 << this.bitCount) - 1;
    return t4 |= 1 << this.bitCount, "<" + I.toBinaryString(t4 | 1 << this.bitCount).substring(1) + ">";
  }, e3;
}(vo), Eo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2, n2) {
    var o2 = t3.call(this, e4, 0, 0) || this;
    return o2.binaryShiftStart = r2, o2.binaryShiftByteCount = n2, o2;
  }
  Eo(e3, t3), e3.prototype.appendTo = function(t4, e4) {
    for (var r2 = 0; r2 < this.binaryShiftByteCount; r2++)
      (0 === r2 || 31 === r2 && this.binaryShiftByteCount <= 62) && (t4.appendBits(31, 5), this.binaryShiftByteCount > 62 ? t4.appendBits(this.binaryShiftByteCount - 31, 16) : 0 === r2 ? t4.appendBits(Math.min(this.binaryShiftByteCount, 31), 5) : t4.appendBits(this.binaryShiftByteCount - 31, 5)), t4.appendBits(e4[this.binaryShiftStart + r2], 8);
  }, e3.prototype.addBinaryShift = function(t4, r2) {
    return new e3(this, t4, r2);
  }, e3.prototype.toString = function() {
    return "<" + this.binaryShiftStart + "::" + (this.binaryShiftStart + this.binaryShiftByteCount - 1) + ">";
  };
}(Ao);
new Ao(null, 0, 0);
var Co = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
!function(t3) {
  var e3, r2;
  try {
    for (var n2 = Co(t3), o2 = n2.next(); !o2.done; o2 = n2.next()) {
      var i3 = o2.value;
      C.fill(i3, -1);
    }
  } catch (t4) {
    e3 = { error: t4 };
  } finally {
    try {
      o2 && !o2.done && (r2 = n2.return) && r2.call(n2);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  t3[0][4] = 0, t3[1][4] = 0, t3[1][0] = 28, t3[3][4] = 0, t3[2][4] = 0, t3[2][0] = 15;
}(C.createInt32Array(6, 6)), function(t3) {
  var e3 = F.getCharCode(" "), r2 = F.getCharCode("."), n2 = F.getCharCode(",");
  t3[0][e3] = 1;
  for (var o2 = F.getCharCode("Z"), i3 = F.getCharCode("A"), a4 = i3; a4 <= o2; a4++)
    t3[0][a4] = a4 - i3 + 2;
  t3[1][e3] = 1;
  var u3 = F.getCharCode("z"), s4 = F.getCharCode("a");
  for (a4 = s4; a4 <= u3; a4++)
    t3[1][a4] = a4 - s4 + 2;
  t3[2][e3] = 1;
  var c7 = F.getCharCode("9"), f2 = F.getCharCode("0");
  for (a4 = f2; a4 <= c7; a4++)
    t3[2][a4] = a4 - f2 + 2;
  t3[2][n2] = 12, t3[2][r2] = 13;
  for (var h4 = ["\0", " ", "", "", "", "", "", "", "\x07", "\b", "	", "\n", "\v", "\f", "\r", "\x1B", "", "", "", "", "@", "\\", "^", "_", "`", "|", "~", ""], l2 = 0; l2 < h4.length; l2++)
    t3[3][F.getCharCode(h4[l2])] = l2;
  var d4 = ["\0", "\r", "\0", "\0", "\0", "\0", "!", "'", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "[", "]", "{", "}"];
  for (l2 = 0; l2 < d4.length; l2++)
    F.getCharCode(d4[l2]) > 0 && (t3[4][F.getCharCode(d4[l2])] = l2);
}(C.createInt32Array(5, 256));
var Io = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), So = function(t3) {
  function e3(r2) {
    var n2 = t3.call(this, r2.width, r2.height) || this;
    return n2.canvas = r2, n2.buffer = e3.makeBufferFromCanvasImageData(r2), n2;
  }
  return Io(e3, t3), e3.makeBufferFromCanvasImageData = function(t4) {
    var r2 = t4.getContext("2d");
    if (!r2)
      throw new Error("Couldn't get canvas context.");
    var n2 = r2.getImageData(0, 0, t4.width, t4.height);
    return e3.toGrayscaleBuffer(n2.data, t4.width, t4.height);
  }, e3.toGrayscaleBuffer = function(t4, e4, r2) {
    for (var n2 = new Uint8ClampedArray(e4 * r2), o2 = 0, i3 = 0, a4 = t4.length; o2 < a4; o2 += 4, i3++) {
      var u3 = void 0;
      if (0 === t4[o2 + 3])
        u3 = 255;
      else
        u3 = 306 * t4[o2] + 601 * t4[o2 + 1] + 117 * t4[o2 + 2] + 512 >> 10;
      n2[i3] = u3;
    }
    return n2;
  }, e3.prototype.getRow = function(t4, e4) {
    if (t4 < 0 || t4 >= this.getHeight())
      throw new l("Requested row is outside the image: " + t4);
    var r2 = this.getWidth(), n2 = t4 * r2;
    return null === e4 ? e4 = this.buffer.slice(n2, n2 + r2) : (e4.length < r2 && (e4 = new Uint8ClampedArray(r2)), e4.set(this.buffer.slice(n2, n2 + r2))), e4;
  }, e3.prototype.getMatrix = function() {
    return this.buffer;
  }, e3.prototype.isCropSupported = function() {
    return true;
  }, e3.prototype.crop = function(e4, r2, n2, o2) {
    return t3.prototype.crop.call(this, e4, r2, n2, o2), this;
  }, e3.prototype.isRotateSupported = function() {
    return true;
  }, e3.prototype.rotateCounterClockwise = function() {
    return this.rotate(-90), this;
  }, e3.prototype.rotateCounterClockwise45 = function() {
    return this.rotate(-45), this;
  }, e3.prototype.invert = function() {
    return new Y(this);
  }, e3.prototype.getTempCanvasElement = function() {
    if (null === this.tempCanvasElement) {
      var t4 = this.canvas.ownerDocument.createElement("canvas");
      t4.width = this.canvas.width, t4.height = this.canvas.height, this.tempCanvasElement = t4;
    }
    return this.tempCanvasElement;
  }, e3.prototype.rotate = function(t4) {
    var r2 = this.getTempCanvasElement();
    if (!r2)
      throw new Error("Could not create a Canvas element.");
    var n2 = t4 * e3.DEGREE_TO_RADIANS, o2 = this.canvas.width, i3 = this.canvas.height, a4 = Math.ceil(Math.abs(Math.cos(n2)) * o2 + Math.abs(Math.sin(n2)) * i3), u3 = Math.ceil(Math.abs(Math.sin(n2)) * o2 + Math.abs(Math.cos(n2)) * i3);
    r2.width = a4, r2.height = u3;
    var s4 = r2.getContext("2d");
    if (!s4)
      throw new Error("Could not create a Convas Context element.");
    return s4.translate(a4 / 2, u3 / 2), s4.rotate(n2), s4.drawImage(this.canvas, o2 / -2, i3 / -2), this.buffer = e3.makeBufferFromCanvasImageData(r2), this;
  }, e3.DEGREE_TO_RADIANS = Math.PI / 180, e3;
}(j);
function Oo() {
  return "undefined" != typeof navigator;
}
function To() {
  return !!(Oo() && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices);
}
var bo = function() {
  return bo = Object.assign || function(t3) {
    for (var e3, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
      for (var o2 in e3 = arguments[r2])
        Object.prototype.hasOwnProperty.call(e3, o2) && (t3[o2] = e3[o2]);
    return t3;
  }, bo.apply(this, arguments);
}, Ro = function(t3, e3, r2, n2) {
  return new (r2 || (r2 = Promise))(function(o2, i3) {
    function a4(t4) {
      try {
        s4(n2.next(t4));
      } catch (t5) {
        i3(t5);
      }
    }
    function u3(t4) {
      try {
        s4(n2.throw(t4));
      } catch (t5) {
        i3(t5);
      }
    }
    function s4(t4) {
      var e4;
      t4.done ? o2(t4.value) : (e4 = t4.value, e4 instanceof r2 ? e4 : new r2(function(t5) {
        t5(e4);
      })).then(a4, u3);
    }
    s4((n2 = n2.apply(t3, e3 || [])).next());
  });
}, No = function(t3, e3) {
  var r2, n2, o2, i3, a4 = { label: 0, sent: function() {
    if (1 & o2[0])
      throw o2[1];
    return o2[1];
  }, trys: [], ops: [] };
  return i3 = { next: u3(0), throw: u3(1), return: u3(2) }, "function" == typeof Symbol && (i3[Symbol.iterator] = function() {
    return this;
  }), i3;
  function u3(i4) {
    return function(u4) {
      return function(i5) {
        if (r2)
          throw new TypeError("Generator is already executing.");
        for (; a4; )
          try {
            if (r2 = 1, n2 && (o2 = 2 & i5[0] ? n2.return : i5[0] ? n2.throw || ((o2 = n2.return) && o2.call(n2), 0) : n2.next) && !(o2 = o2.call(n2, i5[1])).done)
              return o2;
            switch (n2 = 0, o2 && (i5 = [2 & i5[0], o2.value]), i5[0]) {
              case 0:
              case 1:
                o2 = i5;
                break;
              case 4:
                return a4.label++, { value: i5[1], done: false };
              case 5:
                a4.label++, n2 = i5[1], i5 = [0];
                continue;
              case 7:
                i5 = a4.ops.pop(), a4.trys.pop();
                continue;
              default:
                if (!(o2 = a4.trys, (o2 = o2.length > 0 && o2[o2.length - 1]) || 6 !== i5[0] && 2 !== i5[0])) {
                  a4 = 0;
                  continue;
                }
                if (3 === i5[0] && (!o2 || i5[1] > o2[0] && i5[1] < o2[3])) {
                  a4.label = i5[1];
                  break;
                }
                if (6 === i5[0] && a4.label < o2[1]) {
                  a4.label = o2[1], o2 = i5;
                  break;
                }
                if (o2 && a4.label < o2[2]) {
                  a4.label = o2[2], a4.ops.push(i5);
                  break;
                }
                o2[2] && a4.ops.pop(), a4.trys.pop();
                continue;
            }
            i5 = e3.call(t3, a4);
          } catch (t4) {
            i5 = [6, t4], n2 = 0;
          } finally {
            r2 = o2 = 0;
          }
        if (5 & i5[0])
          throw i5[1];
        return { value: i5[0] ? i5[1] : void 0, done: true };
      }([i4, u4]);
    };
  }
}, Do = function(t3) {
  var e3 = "function" == typeof Symbol && Symbol.iterator, r2 = e3 && t3[e3], n2 = 0;
  if (r2)
    return r2.call(t3);
  if (t3 && "number" == typeof t3.length)
    return { next: function() {
      return t3 && n2 >= t3.length && (t3 = void 0), { value: t3 && t3[n2++], done: !t3 };
    } };
  throw new TypeError(e3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Po = { delayBetweenScanAttempts: 500, delayBetweenScanSuccess: 500, tryPlayVideoTimeout: 5e3 }, Mo = function() {
  function t3(t4, e3, r2) {
    void 0 === e3 && (e3 = /* @__PURE__ */ new Map()), void 0 === r2 && (r2 = {}), this.reader = t4, this.hints = e3, this.options = bo(bo({}, Po), r2);
  }
  return Object.defineProperty(t3.prototype, "possibleFormats", { set: function(t4) {
    this.hints.set(T.POSSIBLE_FORMATS, t4);
  }, enumerable: false, configurable: true }), t3.addVideoSource = function(t4, e3) {
    try {
      t4.srcObject = e3;
    } catch (r2) {
      t4.src = URL.createObjectURL(e3);
    }
  }, t3.mediaStreamSetTorch = function(t4, e3) {
    return Ro(this, void 0, void 0, function() {
      return No(this, function(r2) {
        switch (r2.label) {
          case 0:
            return [4, t4.applyConstraints({ advanced: [{ fillLightMode: e3 ? "flash" : "off", torch: !!e3 }] })];
          case 1:
            return r2.sent(), [2];
        }
      });
    });
  }, t3.mediaStreamIsTorchCompatible = function(e3) {
    var r2, n2, o2 = e3.getVideoTracks();
    try {
      for (var i3 = Do(o2), a4 = i3.next(); !a4.done; a4 = i3.next()) {
        var u3 = a4.value;
        if (t3.mediaStreamIsTorchCompatibleTrack(u3))
          return true;
      }
    } catch (t4) {
      r2 = { error: t4 };
    } finally {
      try {
        a4 && !a4.done && (n2 = i3.return) && n2.call(i3);
      } finally {
        if (r2)
          throw r2.error;
      }
    }
    return false;
  }, t3.mediaStreamIsTorchCompatibleTrack = function(t4) {
    try {
      return "torch" in t4.getCapabilities();
    } catch (t5) {
      return console.error(t5), console.warn("Your browser may be not fully compatible with WebRTC and/or ImageCapture specs. Torch will not be available."), false;
    }
  }, t3.isVideoPlaying = function(t4) {
    return t4.currentTime > 0 && !t4.paused && t4.readyState > 2;
  }, t3.getMediaElement = function(t4, e3) {
    var r2 = document.getElementById(t4);
    if (!r2)
      throw new f("element with id '" + t4 + "' not found");
    if (r2.nodeName.toLowerCase() !== e3.toLowerCase())
      throw new f("element with id '" + t4 + "' must be an " + e3 + " element");
    return r2;
  }, t3.createVideoElement = function(e3) {
    if (e3 instanceof HTMLVideoElement)
      return e3;
    if ("string" == typeof e3)
      return t3.getMediaElement(e3, "video");
    if (!e3 && "undefined" != typeof document) {
      var r2 = document.createElement("video");
      return r2.width = 200, r2.height = 200, r2;
    }
    throw new Error("Couldn't get videoElement from videoSource!");
  }, t3.prepareImageElement = function(e3) {
    if (e3 instanceof HTMLImageElement)
      return e3;
    if ("string" == typeof e3)
      return t3.getMediaElement(e3, "img");
    if (void 0 === e3) {
      var r2 = document.createElement("img");
      return r2.width = 200, r2.height = 200, r2;
    }
    throw new Error("Couldn't get imageElement from imageSource!");
  }, t3.prepareVideoElement = function(e3) {
    var r2 = t3.createVideoElement(e3);
    return r2.setAttribute("autoplay", "true"), r2.setAttribute("muted", "true"), r2.setAttribute("playsinline", "true"), r2;
  }, t3.isImageLoaded = function(t4) {
    return !!t4.complete && 0 !== t4.naturalWidth;
  }, t3.createBinaryBitmapFromCanvas = function(t4) {
    var e3 = new So(t4), r2 = new W(e3);
    return new d(r2);
  }, t3.drawImageOnCanvas = function(t4, e3) {
    t4.drawImage(e3, 0, 0);
  }, t3.getMediaElementDimensions = function(t4) {
    if (t4 instanceof HTMLVideoElement)
      return { height: t4.videoHeight, width: t4.videoWidth };
    if (t4 instanceof HTMLImageElement)
      return { height: t4.naturalHeight || t4.height, width: t4.naturalWidth || t4.width };
    throw new Error("Couldn't find the Source's dimentions!");
  }, t3.createCaptureCanvas = function(e3) {
    if (!e3)
      throw new f("Cannot create a capture canvas without a media element.");
    if ("undefined" == typeof document)
      throw new Error('The page "Document" is undefined, make sure you\'re running in a browser.');
    var r2 = document.createElement("canvas"), n2 = t3.getMediaElementDimensions(e3), o2 = n2.width, i3 = n2.height;
    return r2.style.width = o2 + "px", r2.style.height = i3 + "px", r2.width = o2, r2.height = i3, r2;
  }, t3.tryPlayVideo = function(e3) {
    return Ro(this, void 0, void 0, function() {
      var r2;
      return No(this, function(n2) {
        switch (n2.label) {
          case 0:
            if (null == e3 ? void 0 : e3.ended)
              return console.error("Trying to play video that has ended."), [2, false];
            if (t3.isVideoPlaying(e3))
              return console.warn("Trying to play video that is already playing."), [2, true];
            n2.label = 1;
          case 1:
            return n2.trys.push([1, 3, , 4]), [4, e3.play()];
          case 2:
            return n2.sent(), [2, true];
          case 3:
            return r2 = n2.sent(), console.warn("It was not possible to play the video.", r2), [2, false];
          case 4:
            return [2];
        }
      });
    });
  }, t3.createCanvasFromMediaElement = function(e3) {
    var r2 = t3.createCaptureCanvas(e3), n2 = r2.getContext("2d");
    if (!n2)
      throw new Error("Couldn't find Canvas 2D Context.");
    return t3.drawImageOnCanvas(n2, e3), r2;
  }, t3.createBinaryBitmapFromMediaElem = function(e3) {
    var r2 = t3.createCanvasFromMediaElement(e3);
    return t3.createBinaryBitmapFromCanvas(r2);
  }, t3.destroyImageElement = function(t4) {
    t4.src = "", t4.removeAttribute("src"), t4 = void 0;
  }, t3.listVideoInputDevices = function() {
    return Ro(this, void 0, void 0, function() {
      var t4, e3, r2, n2, o2, i3, a4, u3, s4, c7, f2, h4;
      return No(this, function(l2) {
        switch (l2.label) {
          case 0:
            if (!Oo())
              throw new Error("Can't enumerate devices, navigator is not present.");
            if (!To())
              throw new Error("Can't enumerate devices, method not supported.");
            return [4, navigator.mediaDevices.enumerateDevices()];
          case 1:
            t4 = l2.sent(), e3 = [];
            try {
              for (r2 = Do(t4), n2 = r2.next(); !n2.done; n2 = r2.next())
                o2 = n2.value, "videoinput" === (i3 = "video" === o2.kind ? "videoinput" : o2.kind) && (a4 = o2.deviceId || o2.id, u3 = o2.label || "Video device " + (e3.length + 1), s4 = o2.groupId, c7 = { deviceId: a4, label: u3, kind: i3, groupId: s4 }, e3.push(c7));
            } catch (t5) {
              f2 = { error: t5 };
            } finally {
              try {
                n2 && !n2.done && (h4 = r2.return) && h4.call(r2);
              } finally {
                if (f2)
                  throw f2.error;
              }
            }
            return [2, e3];
        }
      });
    });
  }, t3.findDeviceById = function(e3) {
    return Ro(this, void 0, void 0, function() {
      var r2;
      return No(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, t3.listVideoInputDevices()];
          case 1:
            return (r2 = n2.sent()) ? [2, r2.find(function(t4) {
              return t4.deviceId === e3;
            })] : [2];
        }
      });
    });
  }, t3.cleanVideoSource = function(t4) {
    if (t4) {
      try {
        t4.srcObject = null;
      } catch (e3) {
        t4.src = "";
      }
      t4 && t4.removeAttribute("src");
    }
  }, t3.playVideoOnLoadAsync = function(e3, r2) {
    return Ro(this, void 0, void 0, function() {
      return No(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, t3.tryPlayVideo(e3)];
          case 1:
            return n2.sent() ? [2, true] : [2, new Promise(function(n3, o2) {
              var i3 = setTimeout(function() {
                t3.isVideoPlaying(e3) || (o2(false), e3.removeEventListener("canplay", a4));
              }, r2), a4 = function() {
                t3.tryPlayVideo(e3).then(function(t4) {
                  clearTimeout(i3), e3.removeEventListener("canplay", a4), n3(t4);
                });
              };
              e3.addEventListener("canplay", a4);
            })];
        }
      });
    });
  }, t3.attachStreamToVideo = function(e3, r2, n2) {
    return void 0 === n2 && (n2 = 5e3), Ro(this, void 0, void 0, function() {
      var o2;
      return No(this, function(i3) {
        switch (i3.label) {
          case 0:
            return o2 = t3.prepareVideoElement(r2), t3.addVideoSource(o2, e3), [4, t3.playVideoOnLoadAsync(o2, n2)];
          case 1:
            return i3.sent(), [2, o2];
        }
      });
    });
  }, t3._waitImageLoad = function(e3) {
    return new Promise(function(r2, n2) {
      var o2 = setTimeout(function() {
        t3.isImageLoaded(e3) || (e3.removeEventListener("load", i3), n2());
      }, 1e4), i3 = function() {
        clearTimeout(o2), e3.removeEventListener("load", i3), r2();
      };
      e3.addEventListener("load", i3);
    });
  }, t3.checkCallbackFnOrThrow = function(t4) {
    if (!t4)
      throw new f("`callbackFn` is a required parameter, you cannot capture results without it.");
  }, t3.disposeMediaStream = function(t4) {
    t4.getVideoTracks().forEach(function(t5) {
      return t5.stop();
    }), t4 = void 0;
  }, t3.prototype.decode = function(e3) {
    var r2 = t3.createCanvasFromMediaElement(e3);
    return this.decodeFromCanvas(r2);
  }, t3.prototype.decodeBitmap = function(t4) {
    return this.reader.decode(t4, this.hints);
  }, t3.prototype.decodeFromCanvas = function(e3) {
    var r2 = t3.createBinaryBitmapFromCanvas(e3);
    return this.decodeBitmap(r2);
  }, t3.prototype.decodeFromImageElement = function(e3) {
    return Ro(this, void 0, void 0, function() {
      var r2;
      return No(this, function(n2) {
        switch (n2.label) {
          case 0:
            if (!e3)
              throw new f("An image element must be provided.");
            return r2 = t3.prepareImageElement(e3), [4, this._decodeOnLoadImage(r2)];
          case 1:
            return [2, n2.sent()];
        }
      });
    });
  }, t3.prototype.decodeFromImageUrl = function(e3) {
    return Ro(this, void 0, void 0, function() {
      var r2;
      return No(this, function(n2) {
        switch (n2.label) {
          case 0:
            if (!e3)
              throw new f("An URL must be provided.");
            (r2 = t3.prepareImageElement()).src = e3, n2.label = 1;
          case 1:
            return n2.trys.push([1, , 3, 4]), [4, this.decodeFromImageElement(r2)];
          case 2:
            return [2, n2.sent()];
          case 3:
            return t3.destroyImageElement(r2), [7];
          case 4:
            return [2];
        }
      });
    });
  }, t3.prototype.decodeFromConstraints = function(e3, r2, n2) {
    return Ro(this, void 0, void 0, function() {
      var o2, i3;
      return No(this, function(a4) {
        switch (a4.label) {
          case 0:
            return t3.checkCallbackFnOrThrow(n2), [4, navigator.mediaDevices.getUserMedia(e3)];
          case 1:
            o2 = a4.sent(), a4.label = 2;
          case 2:
            return a4.trys.push([2, 4, , 5]), [4, this.decodeFromStream(o2, r2, n2)];
          case 3:
            return [2, a4.sent()];
          case 4:
            throw i3 = a4.sent(), t3.disposeMediaStream(o2), i3;
          case 5:
            return [2];
        }
      });
    });
  }, t3.prototype.decodeFromStream = function(e3, r2, n2) {
    return Ro(this, void 0, void 0, function() {
      var o2, i3, a4, u3, s4, c7, f2, h4, l2, d4, p2 = this;
      return No(this, function(g2) {
        switch (g2.label) {
          case 0:
            return t3.checkCallbackFnOrThrow(n2), o2 = this.options.tryPlayVideoTimeout, [4, t3.attachStreamToVideo(e3, r2, o2)];
          case 1:
            return i3 = g2.sent(), a4 = function() {
              var t4, r3;
              try {
                for (var n3 = Do(e3.getVideoTracks()), o3 = n3.next(); !o3.done; o3 = n3.next()) {
                  o3.value.stop();
                }
              } catch (e4) {
                t4 = { error: e4 };
              } finally {
                try {
                  o3 && !o3.done && (r3 = n3.return) && r3.call(n3);
                } finally {
                  if (t4)
                    throw t4.error;
                }
              }
              e3 = void 0;
            }, u3 = function() {
              a4(), t3.cleanVideoSource(i3);
            }, s4 = this.scan(i3, n2, u3), c7 = e3.getVideoTracks(), f2 = bo(bo({}, s4), { stop: function() {
              s4.stop();
            }, streamVideoConstraintsApply: function(t4, e4) {
              return Ro(this, void 0, void 0, function() {
                var r3, n3, o3, i4, a5, u4;
                return No(this, function(s5) {
                  switch (s5.label) {
                    case 0:
                      r3 = e4 ? c7.filter(e4) : c7, s5.label = 1;
                    case 1:
                      s5.trys.push([1, 6, 7, 8]), n3 = Do(r3), o3 = n3.next(), s5.label = 2;
                    case 2:
                      return o3.done ? [3, 5] : [4, o3.value.applyConstraints(t4)];
                    case 3:
                      s5.sent(), s5.label = 4;
                    case 4:
                      return o3 = n3.next(), [3, 2];
                    case 5:
                      return [3, 8];
                    case 6:
                      return i4 = s5.sent(), a5 = { error: i4 }, [3, 8];
                    case 7:
                      try {
                        o3 && !o3.done && (u4 = n3.return) && u4.call(n3);
                      } finally {
                        if (a5)
                          throw a5.error;
                      }
                      return [7];
                    case 8:
                      return [2];
                  }
                });
              });
            }, streamVideoConstraintsGet: function(t4) {
              return c7.find(t4).getConstraints();
            }, streamVideoSettingsGet: function(t4) {
              return c7.find(t4).getSettings();
            }, streamVideoCapabilitiesGet: function(t4) {
              return c7.find(t4).getCapabilities();
            } }), t3.mediaStreamIsTorchCompatible(e3) && (h4 = null == c7 ? void 0 : c7.find(function(e4) {
              return t3.mediaStreamIsTorchCompatibleTrack(e4);
            }), l2 = function(e4) {
              return Ro(p2, void 0, void 0, function() {
                return No(this, function(r3) {
                  switch (r3.label) {
                    case 0:
                      return [4, t3.mediaStreamSetTorch(h4, e4)];
                    case 1:
                      return r3.sent(), [2];
                  }
                });
              });
            }, f2.switchTorch = l2, d4 = function() {
              s4.stop(), l2(false);
            }, f2.stop = d4), [2, f2];
        }
      });
    });
  }, t3.prototype.decodeFromVideoDevice = function(e3, r2, n2) {
    return Ro(this, void 0, void 0, function() {
      var o2;
      return No(this, function(i3) {
        switch (i3.label) {
          case 0:
            return t3.checkCallbackFnOrThrow(n2), o2 = { video: e3 ? { deviceId: { exact: e3 } } : { facingMode: "environment" } }, [4, this.decodeFromConstraints(o2, r2, n2)];
          case 1:
            return [2, i3.sent()];
        }
      });
    });
  }, t3.prototype.decodeFromVideoElement = function(e3, r2) {
    return Ro(this, void 0, void 0, function() {
      var n2, o2;
      return No(this, function(i3) {
        switch (i3.label) {
          case 0:
            if (t3.checkCallbackFnOrThrow(r2), !e3)
              throw new f("A video element must be provided.");
            return n2 = t3.prepareVideoElement(e3), o2 = this.options.tryPlayVideoTimeout, [4, t3.playVideoOnLoadAsync(n2, o2)];
          case 1:
            return i3.sent(), [2, this.scan(n2, r2)];
        }
      });
    });
  }, t3.prototype.decodeFromVideoUrl = function(e3, r2) {
    return Ro(this, void 0, void 0, function() {
      var n2, o2, i3;
      return No(this, function(a4) {
        switch (a4.label) {
          case 0:
            if (t3.checkCallbackFnOrThrow(r2), !e3)
              throw new f("An URL must be provided.");
            return (n2 = t3.prepareVideoElement()).src = e3, o2 = function() {
              t3.cleanVideoSource(n2);
            }, i3 = this.options.tryPlayVideoTimeout, [4, t3.playVideoOnLoadAsync(n2, i3)];
          case 1:
            return a4.sent(), [2, this.scan(n2, r2, o2)];
        }
      });
    });
  }, t3.prototype.decodeOnceFromConstraints = function(t4, e3) {
    return Ro(this, void 0, void 0, function() {
      var r2;
      return No(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, navigator.mediaDevices.getUserMedia(t4)];
          case 1:
            return r2 = n2.sent(), [4, this.decodeOnceFromStream(r2, e3)];
          case 2:
            return [2, n2.sent()];
        }
      });
    });
  }, t3.prototype.decodeOnceFromStream = function(e3, r2) {
    return Ro(this, void 0, void 0, function() {
      var n2, o2;
      return No(this, function(i3) {
        switch (i3.label) {
          case 0:
            return n2 = Boolean(r2), [4, t3.attachStreamToVideo(e3, r2)];
          case 1:
            o2 = i3.sent(), i3.label = 2;
          case 2:
            return i3.trys.push([2, , 4, 5]), [4, this.scanOneResult(o2)];
          case 3:
            return [2, i3.sent()];
          case 4:
            return n2 || t3.cleanVideoSource(o2), [7];
          case 5:
            return [2];
        }
      });
    });
  }, t3.prototype.decodeOnceFromVideoDevice = function(t4, e3) {
    return Ro(this, void 0, void 0, function() {
      var r2;
      return No(this, function(n2) {
        switch (n2.label) {
          case 0:
            return r2 = { video: t4 ? { deviceId: { exact: t4 } } : { facingMode: "environment" } }, [4, this.decodeOnceFromConstraints(r2, e3)];
          case 1:
            return [2, n2.sent()];
        }
      });
    });
  }, t3.prototype.decodeOnceFromVideoElement = function(e3) {
    return Ro(this, void 0, void 0, function() {
      var r2, n2;
      return No(this, function(o2) {
        switch (o2.label) {
          case 0:
            if (!e3)
              throw new f("A video element must be provided.");
            return r2 = t3.prepareVideoElement(e3), n2 = this.options.tryPlayVideoTimeout, [4, t3.playVideoOnLoadAsync(r2, n2)];
          case 1:
            return o2.sent(), [4, this.scanOneResult(r2)];
          case 2:
            return [2, o2.sent()];
        }
      });
    });
  }, t3.prototype.decodeOnceFromVideoUrl = function(e3) {
    return Ro(this, void 0, void 0, function() {
      var r2, n2;
      return No(this, function(o2) {
        switch (o2.label) {
          case 0:
            if (!e3)
              throw new f("An URL must be provided.");
            (r2 = t3.prepareVideoElement()).src = e3, n2 = this.decodeOnceFromVideoElement(r2), o2.label = 1;
          case 1:
            return o2.trys.push([1, , 3, 4]), [4, n2];
          case 2:
            return [2, o2.sent()];
          case 3:
            return t3.cleanVideoSource(r2), [7];
          case 4:
            return [2];
        }
      });
    });
  }, t3.prototype.scanOneResult = function(t4, e3, r2, n2) {
    var o2 = this;
    return void 0 === e3 && (e3 = true), void 0 === r2 && (r2 = true), void 0 === n2 && (n2 = true), new Promise(function(i3, a4) {
      o2.scan(t4, function(t5, o3, u3) {
        if (t5)
          return i3(t5), void u3.stop();
        if (o3) {
          if (o3 instanceof U && e3)
            return;
          if (o3 instanceof g && r2)
            return;
          if (o3 instanceof R && n2)
            return;
          u3.stop(), a4(o3);
        }
      });
    });
  }, t3.prototype.scan = function(e3, r2, n2) {
    var o2 = this;
    t3.checkCallbackFnOrThrow(r2);
    var i3 = t3.createCaptureCanvas(e3), a4 = i3.getContext("2d");
    if (!a4)
      throw new Error("Couldn't create canvas for visual element scan.");
    var u3, s4 = function() {
      a4 = void 0, i3 = void 0;
    }, c7 = false, f2 = { stop: function() {
      c7 = true, clearTimeout(u3), s4(), n2 && n2();
    } }, h4 = function() {
      if (!c7)
        try {
          t3.drawImageOnCanvas(a4, e3);
          var l2 = o2.decodeFromCanvas(i3);
          r2(l2, void 0, f2), u3 = setTimeout(h4, o2.options.delayBetweenScanSuccess);
        } catch (t4) {
          if (r2(void 0, t4, f2), t4 instanceof g || t4 instanceof R || t4 instanceof U)
            return void (u3 = setTimeout(h4, o2.options.delayBetweenScanAttempts));
          s4(), n2 && n2(t4);
        }
    };
    return h4(), f2;
  }, t3.prototype._decodeOnLoadImage = function(e3) {
    return Ro(this, void 0, void 0, function() {
      return No(this, function(r2) {
        switch (r2.label) {
          case 0:
            return t3.isImageLoaded(e3) ? [3, 2] : [4, t3._waitImageLoad(e3)];
          case 1:
            r2.sent(), r2.label = 2;
          case 2:
            return [2, this.decode(e3)];
        }
      });
    });
  }, t3;
}(), Bo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2) {
    return t3.call(this, new Mt(), e4, r2) || this;
  }
  Bo(e3, t3);
}(Mo);
var Lo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2) {
    return t3.call(this, new fr$2(e4), e4, r2) || this;
  }
  Lo(e3, t3);
}(Mo);
var Fo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2) {
    return t3.call(this, new Or(), e4, r2) || this;
  }
  Fo(e3, t3);
}(Mo);
var ko = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2) {
    var n2 = this, o2 = new $n();
    return o2.setHints(e4), (n2 = t3.call(this, o2, e4, r2) || this).reader = o2, n2;
  }
  ko(e3, t3), Object.defineProperty(e3.prototype, "possibleFormats", { set: function(t4) {
    this.hints.set(T.POSSIBLE_FORMATS, t4), this.reader.setHints(this.hints);
  }, enumerable: false, configurable: true }), e3.prototype.decodeBitmap = function(t4) {
    return this.reader.decodeWithState(t4);
  }, e3.prototype.setHints = function(t4) {
    this.hints = t4, this.reader.setHints(this.hints);
  };
}(Mo);
var xo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}();
!function(t3) {
  function e3(e4, r2) {
    return t3.call(this, new Kn(), e4, r2) || this;
  }
  xo(e3, t3);
}(Mo);
var Vo = function() {
  var t3 = function(e3, r2) {
    return t3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
      t4.__proto__ = e4;
    } || function(t4, e4) {
      for (var r3 in e4)
        e4.hasOwnProperty(r3) && (t4[r3] = e4[r3]);
    }, t3(e3, r2);
  };
  return function(e3, r2) {
    function n2() {
      this.constructor = e3;
    }
    t3(e3, r2), e3.prototype = null === r2 ? Object.create(r2) : (n2.prototype = r2.prototype, new n2());
  };
}(), Uo = function(t3) {
  function e3(e4, r2) {
    return t3.call(this, new an(), e4, r2) || this;
  }
  return Vo(e3, t3), e3;
}(Mo), Ho = function(t3, e3, r2) {
  var n2 = typeof t3 === r2;
  return n2 || console.warn('[ReactQrReader]: Expected "'.concat(e3, '" to be a of type "').concat(r2, '".')), n2;
}, Go = function(t3) {
  var n2 = t3.scanDelay, o2 = t3.constraints, i3 = t3.onResult, a4 = t3.videoId, u3 = reactExports.useRef(null);
  reactExports.useEffect(function() {
    var t4 = new Uo(null, { delayBetweenScanAttempts: n2 });
    if (!function() {
      var t5 = "undefined" != typeof navigator && !!navigator.mediaDevices;
      return t5 || console.warn('[ReactQrReader]: MediaDevices API has no support for your browser. You can fix this by running "npm i webrtc-adapter"'), t5;
    }() && Ho(i3, "onResult", "function")) {
      i3(null, new Error('MediaDevices API has no support for your browser. You can fix this by running "npm i webrtc-adapter"'), t4);
    }
    return Ho(o2, "constraints", "object") && t4.decodeFromConstraints({ video: o2 }, a4, function(e3, r2) {
      Ho(i3, "onResult", "function") && i3(e3, r2, t4);
    }).then(function(t5) {
      return u3.current = t5;
    }).catch(function(e3) {
      Ho(i3, "onResult", "function") && i3(null, e3, t4);
    }), function() {
      var t5;
      null === (t5 = u3.current) || void 0 === t5 || t5.stop();
    };
  }, []);
}, Xo = function() {
  return Xo = Object.assign || function(t3) {
    for (var e3, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
      for (var o2 in e3 = arguments[r2])
        Object.prototype.hasOwnProperty.call(e3, o2) && (t3[o2] = e3[o2]);
    return t3;
  }, Xo.apply(this, arguments);
}, Wo = { container: { width: "100%", paddingTop: "100%", overflow: "hidden", position: "relative" }, video: { top: 0, left: 0, width: "100%", height: "100%", display: "block", overflow: "hidden", position: "absolute", transform: void 0 } }, jo = function(e3) {
  var r2 = e3.videoContainerStyle, n2 = e3.containerStyle, o2 = e3.videoStyle, i3 = e3.constraints, a4 = e3.ViewFinder, u3 = e3.scanDelay, s4 = e3.className, c7 = e3.onResult, f2 = e3.videoId;
  return Go({ constraints: i3, scanDelay: u3, onResult: c7, videoId: f2 }), reactExports.createElement("section", { className: s4, style: n2 }, reactExports.createElement("div", { style: Xo(Xo({}, Wo.container), r2) }, !!a4 && reactExports.createElement(a4, null), reactExports.createElement("video", { muted: true, id: f2, style: Xo(Xo(Xo({}, Wo.video), o2), { transform: "user" === (null == i3 ? void 0 : i3.facingMode) && "scaleX(-1)" }) })));
};
jo.displayName = "QrReader", jo.defaultProps = { constraints: { facingMode: "user" }, videoId: "video", scanDelay: 500 };
const QrScanner = ({ open, closeModal }) => {
  const [cameraStatus, setCameraStatus] = reactExports.useState(null);
  const formik = useFormikContext();
  const [error, setError] = reactExports.useState(false);
  const setAddressFieldValue = async (scannedMinimaAddress) => {
    setError(false);
    try {
      await validateMinimaAddress(scannedMinimaAddress);
      formik.setFieldValue("address", scannedMinimaAddress);
      closeModal();
    } catch (error2) {
      console.error(error2);
      setError(error2.message);
    }
  };
  const requestCamera = () => {
    navigator.permissions.query({ name: "camera" }).then((v2) => {
      if (v2.state === "prompt") {
        setCameraStatus("prompt");
        navigator.mediaDevices.getUserMedia({ audio: false, video: true }).then((r2) => {
          if (r2.active) {
            setCameraStatus("granted");
          }
          if (!r2.active) {
            setCameraStatus("denied");
          }
        }).catch((err) => {
          console.error("Camera unavailable", err);
          return setCameraStatus("denied");
        });
      }
      if (v2.state === "denied") {
        setCameraStatus("denied");
      }
      if (v2.state === "granted") {
        setCameraStatus("granted");
      }
    });
  };
  reactExports.useEffect(() => {
    if (open) {
      if (navigator && "permissions" in navigator) {
        requestCamera();
      }
    }
  }, [open]);
  return open && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "z-20 absolute left-0 md:left-[240px] right-0 bottom-0 top-0 bg-black bg-opacity-80 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "lg", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative rounded bg-white mx-6 h-max", children: [
    cameraStatus === "granted" && open && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        jo,
        {
          videoContainerStyle: {
            paddingTop: "75%",
            borderBottomLeftRadius: "0",
            borderBottomRightRadius: "0",
            borderTopLeftRadius: "4px",
            borderTopRightRadius: "4px"
          },
          videoStyle: {
            objectFit: "content",
            height: "100%",
            width: "100%"
          },
          scanDelay: 500,
          onResult: (data2) => {
            if (data2) {
              setAddressFieldValue(data2.text);
            }
          },
          constraints: { facingMode: "environment" }
        }
      ),
      error && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { children: "Invalid Minima Address" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: error })
      ] })
    ] }),
    cameraStatus === "denied" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center text-center p-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-xl font-semibold mb-4", children: "Camera is unavailable!" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black mb-4", children: "You have denied camera permissions, please enable it and refresh this page." })
    ] }),
    cameraStatus === "prompt" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center text-center p-8", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-xl font-semibold mb-4", children: "Wallet is requesting camea" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black mb-4", children: "Please accept the camera permissions prompt first." })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: closeModal, extraClass: "text-white bg-[#0D0E10] rounded-t-none !p-6", children: "Cancel" }) })
  ] }) }) }) });
};
const useIsVaultLocked = () => {
  const { loaded } = reactExports.useContext(appContext);
  const [isVaultLocked2, setVaultLocked] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (loaded.current === true) {
      getStatus().then((res) => {
        if (res.locked)
          setVaultLocked(true);
      });
    }
  }, [loaded.current]);
  return isVaultLocked2;
};
const select = "_select_xwwmq_1";
const active = "_active_xwwmq_21";
const backdrop = "_backdrop_xwwmq_31";
const dd = "_dd_xwwmq_41";
const ddMenuEnter = "_ddMenuEnter_xwwmq_146";
const ddMenuEnterActive = "_ddMenuEnterActive_xwwmq_150";
const ddMenuExit = "_ddMenuExit_xwwmq_156";
const ddMenuExitActive = "_ddMenuExitActive_xwwmq_160";
const backdropEnter = "_backdropEnter_xwwmq_166";
const backdropEnterActive = "_backdropEnterActive_xwwmq_169";
const backdropExit = "_backdropExit_xwwmq_174";
const backdropExitActive = "_backdropExitActive_xwwmq_177";
const styles$1 = {
  select,
  active,
  backdrop,
  dd,
  "no-contracts": "_no-contracts_xwwmq_129",
  ddMenuEnter,
  ddMenuEnterActive,
  ddMenuExit,
  ddMenuExitActive,
  backdropEnter,
  backdropEnterActive,
  backdropExit,
  backdropExitActive
};
const WalletSelect = () => {
  var _a2, _b2, _c2, _d2;
  const { balance, _currencyFormat } = reactExports.useContext(appContext);
  const [filterText, setFilterText] = reactExports.useState("");
  const [active2, setActive] = reactExports.useState(false);
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const [tokenInformation, setTokenInformation] = reactExports.useState(false);
  const formik = useFormikContext();
  const [searchParams] = useSearchParams();
  reactExports.useEffect(() => {
    if (balance.length && formik.values.token) {
      const currentToken = balance.find((t3) => t3.tokenid === formik.values.token.tokenid);
      if (currentToken) {
        formik.setFieldValue("token", currentToken);
      }
    }
  }, [balance, formik.values]);
  reactExports.useEffect(() => {
    const requestingAddress = searchParams.get("address");
    const requestingTokenID = searchParams.get("tokenid");
    const requestingAmount = searchParams.get("amount");
    const requestingBurn = searchParams.get("burn");
    if (balance.length) {
      if (requestingTokenID !== null) {
        const fetchToken = balance.find((t3) => t3.tokenid === requestingTokenID);
        if (fetchToken) {
          formik.setFieldValue("token", fetchToken);
        }
      }
    }
    if (requestingAddress !== null) {
      formik.setFieldValue("address", requestingAddress);
    }
    if (requestingAmount !== null) {
      formik.setFieldValue("amount", requestingAmount);
    }
    if (requestingBurn !== null) {
      formik.setFieldValue("burn", requestingBurn);
    }
  }, [balance, searchParams.get("tokenid"), searchParams.get("amount"), searchParams.get("burn")]);
  const handleSelection = (token2) => {
    formik.setFieldValue("token", token2);
    setActive(false);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    tokenInformation && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          onClick: () => setTokenInformation(false),
          className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Grid,
            {
              variant: "lg",
              title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "svg",
                  {
                    onClick: () => setTokenInformation(false),
                    className: "fill-white hover:cursor-pointer",
                    xmlns: "http://www.w3.org/2000/svg",
                    height: "24",
                    viewBox: "0 -960 960 960",
                    width: "24",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
                  }
                ),
                "Token Info"
              ] }),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "div",
                {
                  onClick: (e3) => e3.stopPropagation(),
                  className: "flex flex-col gap-4 mx-4 rounded bg-white bg-opacity-90 p-4 mb-4 shadow-sm h-max",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "my-2 mb-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-semibold mb-6", children: "There are three possible states for a token:" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-y-2.5", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white rounded-lg px-4 py-2 flex-col", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 justify-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "svg",
                            {
                              xmlns: "http://www.w3.org/2000/svg",
                              width: "24",
                              height: "24",
                              className: "min-h-[24px] min-w-[24px]",
                              viewBox: "0 0 24 24",
                              strokeWidth: "2",
                              stroke: "#22c55e",
                              fill: "none",
                              strokeLinecap: "round",
                              strokeLinejoin: "round",
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M7 9m0 2a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v6a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2z" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M14 14m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17 9v-2a2 2 0 0 0 -2 -2h-10a2 2 0 0 0 -2 2v6a2 2 0 0 0 2 2h2" })
                              ]
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-semibold", children: "Sendable" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t m-2" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center font-mono text-slate-500 bg-white truncate rounded-lg p-2", children: makeMinimaNumber(tokenInformation.sendable, 2e3) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-center mt-8", children: "Funds are available to be spent immediately." })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white rounded-lg px-4 py-2 flex-col", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 justify-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "svg",
                            {
                              xmlns: "http://www.w3.org/2000/svg",
                              width: "24",
                              height: "24",
                              className: "min-h-[24px] min-w-[24px]",
                              viewBox: "0 0 24 24",
                              strokeWidth: "2",
                              stroke: "currentColor",
                              fill: "none",
                              strokeLinecap: "round",
                              strokeLinejoin: "round",
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "path",
                                  {
                                    d: "M12 2c-.218 0 -.432 .002 -.642 .005l-.616 .017l-.299 .013l-.579 .034l-.553 .046c-4.785 .464 -6.732 2.411 -7.196 7.196l-.046 .553l-.034 .579c-.005 .098 -.01 .198 -.013 .299l-.017 .616l-.004 .318l-.001 .324c0 .218 .002 .432 .005 .642l.017 .616l.013 .299l.034 .579l.046 .553c.464 4.785 2.411 6.732 7.196 7.196l.553 .046l.579 .034c.098 .005 .198 .01 .299 .013l.616 .017l.642 .005l.642 -.005l.616 -.017l.299 -.013l.579 -.034l.553 -.046c4.785 -.464 6.732 -2.411 7.196 -7.196l.046 -.553l.034 -.579c.005 -.098 .01 -.198 .013 -.299l.017 -.616l.005 -.642l-.005 -.642l-.017 -.616l-.013 -.299l-.034 -.579l-.046 -.553c-.464 -4.785 -2.411 -6.732 -7.196 -7.196l-.553 -.046l-.579 -.034a28.058 28.058 0 0 0 -.299 -.013l-.616 -.017l-.318 -.004l-.324 -.001zm0 4a3 3 0 0 1 2.995 2.824l.005 .176v1a2 2 0 0 1 1.995 1.85l.005 .15v3a2 2 0 0 1 -1.85 1.995l-.15 .005h-6a2 2 0 0 1 -1.995 -1.85l-.005 -.15v-3a2 2 0 0 1 1.85 -1.995l.15 -.005v-1a3 3 0 0 1 3 -3zm3 6h-6v3h6v-3zm-3 -4a1 1 0 0 0 -.993 .883l-.007 .117v1h2v-1a1 1 0 0 0 -1 -1z",
                                    fill: "currentColor",
                                    strokeWidth: "0"
                                  }
                                )
                              ]
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-semibold", children: "Locked" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t m-2" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center font-mono text-slate-500 bg-white rounded-lg p-2 whitespace-normal overflow-x-auto", children: [
                          "The difference of Confirmed(",
                          makeMinimaNumber(tokenInformation.confirmed, 3),
                          ") & Sendable(",
                          makeMinimaNumber(tokenInformation.sendable, 3),
                          ") returns TotalLockedCoins(",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-bold", children: makeMinimaNumber(
                            new Decimal(tokenInformation.sendable).minus(tokenInformation.confirmed).abs().toString(),
                            3
                          ) }),
                          ")"
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-center mt-8", children: "Locked will show coins that were locked in a smart contract." })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white rounded-lg px-4 py-2 flex-col", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 justify-center", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "svg",
                            {
                              xmlns: "http://www.w3.org/2000/svg",
                              className: "min-h-[24px] min-w-[24px] animate-pulse",
                              width: "24",
                              height: "24",
                              viewBox: "0 0 24 24",
                              strokeWidth: "2",
                              stroke: "#eab308",
                              fill: "none",
                              strokeLinecap: "round",
                              strokeLinejoin: "round",
                              children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6.5 7h11" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 20v-2a6 6 0 1 1 12 0v2a1 1 0 0 1 -1 1h-10a1 1 0 0 1 -1 -1z" }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 4v2a6 6 0 1 0 12 0v-2a1 1 0 0 0 -1 -1h-10a1 1 0 0 0 -1 1z" })
                              ]
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-semibold", children: "Unconfirmed" })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "border-t m-2" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center font-mono text-slate-500 bg-white rounded-lg p-2", children: makeMinimaNumber(tokenInformation.unconfirmed, 3) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-center mt-8", children: "Unconfirmed are funds awaiting minimum block time confirmation in the mempool." })
                      ] })
                    ] })
                  ] })
                }
              )
            }
          )
        }
      ),
      document.body
    ),
    active2 && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          onClick: () => setActive(false),
          className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Grid,
            {
              variant: "lg",
              title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "svg",
                  {
                    className: "fill-white hover:cursor-pointer",
                    onClick: () => setActive(false),
                    xmlns: "http://www.w3.org/2000/svg",
                    height: "24",
                    viewBox: "0 -960 960 960",
                    width: "24",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
                  }
                ),
                "Select Token"
              ] }),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                CardContent,
                {
                  onClick: (e3) => e3.stopPropagation(),
                  className: "bg-white bg-opacity-80",
                  header: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      value: filterText,
                      onChange: (e3) => setFilterText(e3.target.value),
                      type: "search",
                      className: "appearance-none border-none w-full bg-violet-500 bg-opacity-10 py-3 rounded text-sm placeholder:text-black placeholder:text-opacity-30",
                      placeholder: "Search by token name or id"
                    }
                  ) }),
                  content: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { children: balance.filter(
                      (t3) => containsText(
                        t3.tokenid === "0x00" ? t3.token : "name" in t3.token ? t3.token.name : "",
                        filterText
                      ) || containsText(t3.tokenid, filterText)
                    ).map((t3) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "li",
                      {
                        onClick: () => handleSelection(t3),
                        className: "hover:bg-slate-200 hover:cursor-pointer bg-white rounded-lg mb-4 whitespace-nowrap grid grid-cols-[auto_1fr] items-center",
                        children: [
                          t3.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-max inline-block mr-2", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "svg",
                              {
                                className: "absolute right-1 bottom-2",
                                xmlns: "http://www.w3.org/2000/svg",
                                height: "16",
                                viewBox: "0 -960 960 960",
                                width: "16",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "path",
                                  {
                                    fill: "#3DA2FF",
                                    d: "m344-60-76-128-144-32 14-148-98-112 98-112-14-148 144-32 76-128 136 58 136-58 76 128 144 32-14 148 98 112-98 112 14 148-144 32-76 128-136-58-136 58Zm94-278 226-226-56-58-170 170-86-84-56 56 142 142Z"
                                  }
                                )
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "svg",
                              {
                                className: "rounded-l-lg min-h-[80px] min-w-[80px]",
                                width: "80",
                                height: "80",
                                viewBox: "0 0 80 81",
                                fill: "none",
                                xmlns: "http://www.w3.org/2000/svg",
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "rect",
                                    {
                                      width: "80",
                                      height: "80",
                                      transform: "translate(0 0.550781)",
                                      fill: "#08090B"
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "path",
                                    {
                                      d: "M52.3627 30.187L50.5506 37.9909L48.2331 28.5753L40.1133 25.3689L37.9178 34.8015L35.9836 23.7402L27.8638 20.5508L19.5 56.5508H28.3691L30.9305 45.4895L32.8646 56.5508H41.7512L43.9292 47.1182L46.2467 56.5508H55.1158L60.5 33.3764L52.3627 30.187Z",
                                      fill: "white"
                                    }
                                  )
                                ]
                              }
                            )
                          ] }),
                          t3.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-max inline-block mr-2", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "img",
                              {
                                className: "rounded-l-lg w-[80px] h-[80px]",
                                alt: "token-icon",
                                src: "url" in t3.token && t3.token.url.length ? t3.token.url : "https://robohash.org/".concat(t3.tokenid)
                              }
                            ),
                            t3.tokenid !== "0x00" && t3.token.webvalidate && !!t3.token.webvalidate.length && /* @__PURE__ */ jsxRuntimeExports.jsx(NFTAuthenticity, { tokenid: t3.tokenid })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[auto_1fr] gap-2", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "overflow-hidden", children: [
                              t3.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold truncate text-black", children: "Minima" }),
                              t3.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold text-black truncate", children: t3.token && "name" in (t3 == null ? void 0 : t3.token) ? t3 == null ? void 0 : t3.token.name : "Name not available" }),
                              t3.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-bold truncate text-black text-opacity-50", children: "MINIMA" }),
                              t3.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-bold text-black text-opacity-50", children: t3.token && "ticker" in (t3 == null ? void 0 : t3.token) ? t3 == null ? void 0 : t3.token.ticker : "" })
                            ] }),
                            !!formik.values.coinSplit && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-end w-full justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] grid-rows-1 justify-center items-center mr-4 gap-1", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "p",
                                {
                                  className: "bg-yellow-200 text-yellow-500 w-max justify-self-end text-[12px] rounded-full px-2 max-w-max  font-bold",
                                  children: t3.coins
                                }
                              ),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                "svg",
                                {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  className: "min-h-[24px] min-w-[24px]",
                                  width: "24",
                                  height: "24",
                                  viewBox: "0 0 24 24",
                                  strokeWidth: "2",
                                  stroke: "#eab308",
                                  fill: "none",
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round",
                                  children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      "path",
                                      {
                                        stroke: "none",
                                        d: "M0 0h24v24H0z",
                                        fill: "none"
                                      }
                                    ),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 14c0 1.657 2.686 3 6 3s6 -1.343 6 -3s-2.686 -3 -6 -3s-6 1.343 -6 3z" }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 14v4c0 1.656 2.686 3 6 3s6 -1.344 6 -3v-4" }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 6c0 1.072 1.144 2.062 3 2.598s4.144 .536 6 0c1.856 -.536 3 -1.526 3 -2.598c0 -1.072 -1.144 -2.062 -3 -2.598s-4.144 -.536 -6 0c-1.856 .536 -3 1.526 -3 2.598z" }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 6v10c0 .888 .772 1.45 2 2" }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 11c0 .888 .772 1.45 2 2" })
                                  ]
                                }
                              )
                            ] }) }) }),
                            !formik.values.coinSplit && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-end w-full justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "div",
                              {
                                onClick: (e3) => {
                                  e3.stopPropagation();
                                  setTokenInformation({
                                    confirmed: t3.confirmed,
                                    sendable: t3.sendable,
                                    unconfirmed: t3.unconfirmed
                                  });
                                },
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] items-center mr-4", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      "p",
                                      {
                                        className: "".concat(t3.unconfirmed !== "0" ? "bg-yellow-500 text-yellow-200 animate-pulse" : "bg-green-200 text-green-600", " w-max justify-self-end text-green-600 text-[12px] rounded-full px-2 max-w-max  font-bold"),
                                        children: _currencyFormat !== null && formatNumberPreference(
                                          new Decimal(
                                            t3.sendable
                                          ).toNumber(),
                                          3,
                                          getCharacterCountAfterChar(
                                            t3.sendable,
                                            "."
                                          ) > 3 ? "..." : "",
                                          _currencyFormat
                                        )
                                      }
                                    ),
                                    t3.unconfirmed === "0" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                      "svg",
                                      {
                                        xmlns: "http://www.w3.org/2000/svg",
                                        width: "24",
                                        height: "24",
                                        className: "min-h-[24px] min-w-[24px]",
                                        viewBox: "0 0 24 24",
                                        strokeWidth: "2",
                                        stroke: "#22c55e",
                                        fill: "none",
                                        strokeLinecap: "round",
                                        strokeLinejoin: "round",
                                        children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "path",
                                            {
                                              stroke: "none",
                                              d: "M0 0h24v24H0z",
                                              fill: "none"
                                            }
                                          ),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M7 9m0 2a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v6a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2z" }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M14 14m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17 9v-2a2 2 0 0 0 -2 -2h-10a2 2 0 0 0 -2 2v6a2 2 0 0 0 2 2h2" })
                                        ]
                                      }
                                    ),
                                    t3.unconfirmed !== "0" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                      "svg",
                                      {
                                        xmlns: "http://www.w3.org/2000/svg",
                                        className: "min-h-[24px] min-w-[24px] animate-pulse",
                                        width: "24",
                                        height: "24",
                                        viewBox: "0 0 24 24",
                                        strokeWidth: "2",
                                        stroke: "#eab308",
                                        fill: "none",
                                        strokeLinecap: "round",
                                        strokeLinejoin: "round",
                                        children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "path",
                                            {
                                              stroke: "none",
                                              d: "M0 0h24v24H0z",
                                              fill: "none"
                                            }
                                          ),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6.5 7h11" }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 20v-2a6 6 0 1 1 12 0v2a1 1 0 0 1 -1 1h-10a1 1 0 0 1 -1 -1z" }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 4v2a6 6 0 1 0 12 0v-2a1 1 0 0 0 -1 -1h-10a1 1 0 0 0 -1 1z" })
                                        ]
                                      }
                                    )
                                  ] }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] items-center mr-4", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "w-max justify-self-end text-white text-[12px] rounded-full px-2 max-w-max bg-black", children: _currencyFormat !== null && formatNumberPreference(
                                      new Decimal(t3.confirmed).minus(t3.sendable).toNumber(),
                                      3,
                                      getCharacterCountAfterChar(
                                        new Decimal(t3.confirmed).minus(t3.sendable).toString(),
                                        "."
                                      ) > 3 ? "..." : "",
                                      _currencyFormat
                                    ) }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                      "svg",
                                      {
                                        xmlns: "http://www.w3.org/2000/svg",
                                        width: "24",
                                        height: "24",
                                        className: "min-h-[24px] min-w-[24px]",
                                        viewBox: "0 0 24 24",
                                        strokeWidth: "2",
                                        stroke: "currentColor",
                                        fill: "none",
                                        strokeLinecap: "round",
                                        strokeLinejoin: "round",
                                        children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "path",
                                            {
                                              stroke: "none",
                                              d: "M0 0h24v24H0z",
                                              fill: "none"
                                            }
                                          ),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            "path",
                                            {
                                              d: "M12 2c-.218 0 -.432 .002 -.642 .005l-.616 .017l-.299 .013l-.579 .034l-.553 .046c-4.785 .464 -6.732 2.411 -7.196 7.196l-.046 .553l-.034 .579c-.005 .098 -.01 .198 -.013 .299l-.017 .616l-.004 .318l-.001 .324c0 .218 .002 .432 .005 .642l.017 .616l.013 .299l.034 .579l.046 .553c.464 4.785 2.411 6.732 7.196 7.196l.553 .046l.579 .034c.098 .005 .198 .01 .299 .013l.616 .017l.642 .005l.642 -.005l.616 -.017l.299 -.013l.579 -.034l.553 -.046c4.785 -.464 6.732 -2.411 7.196 -7.196l.046 -.553l.034 -.579c.005 -.098 .01 -.198 .013 -.299l.017 -.616l.005 -.642l-.005 -.642l-.017 -.616l-.013 -.299l-.034 -.579l-.046 -.553c-.464 -4.785 -2.411 -6.732 -7.196 -7.196l-.553 -.046l-.579 -.034a28.058 28.058 0 0 0 -.299 -.013l-.616 -.017l-.318 -.004l-.324 -.001zm0 4a3 3 0 0 1 2.995 2.824l.005 .176v1a2 2 0 0 1 1.995 1.85l.005 .15v3a2 2 0 0 1 -1.85 1.995l-.15 .005h-6a2 2 0 0 1 -1.995 -1.85l-.005 -.15v-3a2 2 0 0 1 1.85 -1.995l.15 -.005v-1a3 3 0 0 1 3 -3zm3 6h-6v3h6v-3zm-3 -4a1 1 0 0 0 -.993 .883l-.007 .117v1h2v-1a1 1 0 0 0 -1 -1z",
                                              fill: "currentColor",
                                              strokeWidth: "0"
                                            }
                                          )
                                        ]
                                      }
                                    )
                                  ] })
                                ]
                              }
                            ) })
                          ] })
                        ]
                      },
                      t3.tokenid
                    )) }),
                    !!balance.length && !balance.filter(
                      (t3) => containsText(
                        t3.tokenid === "0x00" ? t3.token : "name" in t3.token ? t3.token.name : "",
                        filterText
                      ) || containsText(t3.tokenid, filterText)
                    ).length && /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-center text-black", children: "No results found" })
                  ] })
                }
              )
            }
          )
        }
      ),
      document.body
    ),
    formik.values.token && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        onClick: () => formik.isSubmitting ? null : setActive(true),
        className: "".concat(styles$1.select, " hover:bg-slate-200 hover:cursor-pointer ").concat(formik.isSubmitting ? "bg-slate-50" : ""),
        children: [
          formik.values.token.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-max inline-block mr-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                className: "absolute right-1 bottom-2",
                xmlns: "http://www.w3.org/2000/svg",
                height: "16",
                viewBox: "0 -960 960 960",
                width: "16",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    fill: "#3DA2FF",
                    d: "m344-60-76-128-144-32 14-148-98-112 98-112-14-148 144-32 76-128 136 58 136-58 76 128 144 32-14 148 98 112-98 112 14 148-144 32-76 128-136-58-136 58Zm94-278 226-226-56-58-170 170-86-84-56 56 142 142Z"
                  }
                )
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "rounded-l-lg min-h-[80px] min-w-[80px]",
                width: "80",
                height: "80",
                viewBox: "0 0 80 81",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "80", height: "80", transform: "translate(0 0.550781)", fill: "#08090B" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M52.3627 30.187L50.5506 37.9909L48.2331 28.5753L40.1133 25.3689L37.9178 34.8015L35.9836 23.7402L27.8638 20.5508L19.5 56.5508H28.3691L30.9305 45.4895L32.8646 56.5508H41.7512L43.9292 47.1182L46.2467 56.5508H55.1158L60.5 33.3764L52.3627 30.187Z",
                      fill: "white"
                    }
                  )
                ]
              }
            )
          ] }),
          formik.values.token.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-max inline-block mr-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "img",
              {
                className: "rounded-l-lg w-[80px] h-[80px]",
                alt: "token-icon",
                src: "url" in formik.values.token.token && formik.values.token.token.url.length ? formik.values.token.token.url : "https://robohash.org/".concat(formik.values.token.tokenid)
              }
            ),
            formik.values.token.tokenid !== "0x00" && formik.values.token.token.webvalidate && !!formik.values.token.token.webvalidate.length && /* @__PURE__ */ jsxRuntimeExports.jsx(NFTAuthenticity, { tokenid: formik.values.token.tokenid })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "overflow-hidden", children: [
              formik.values.token.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold truncate text-black", children: "Minima" }),
              formik.values.token.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold text-black truncate", children: formik.values.token.token && "name" in ((_a2 = formik.values.token) == null ? void 0 : _a2.token) ? (_b2 = formik.values.token) == null ? void 0 : _b2.token.name : "Name not available" }),
              formik.values.token.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-bold truncate text-black text-opacity-50", children: "MINIMA" }),
              formik.values.token.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-bold text-black text-opacity-50", children: formik.values.token.token && "ticker" in ((_c2 = formik.values.token) == null ? void 0 : _c2.token) ? (_d2 = formik.values.token) == null ? void 0 : _d2.token.ticker : "" })
            ] }),
            !!formik.values.coinSplit && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-end w-full justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] grid-rows-1 justify-center items-center mr-4 gap-1", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "p",
                {
                  className: "bg-yellow-200 text-yellow-400 w-max justify-self-end text-[12px] rounded-full px-2 max-w-max  font-bold",
                  children: formik.values.token.coins
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "min-h-[24px] min-w-[24px]",
                  width: "24",
                  height: "24",
                  viewBox: "0 0 24 24",
                  strokeWidth: "2",
                  stroke: "#eab308",
                  fill: "none",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 14c0 1.657 2.686 3 6 3s6 -1.343 6 -3s-2.686 -3 -6 -3s-6 1.343 -6 3z" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 14v4c0 1.656 2.686 3 6 3s6 -1.344 6 -3v-4" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 6c0 1.072 1.144 2.062 3 2.598s4.144 .536 6 0c1.856 -.536 3 -1.526 3 -2.598c0 -1.072 -1.144 -2.062 -3 -2.598s-4.144 -.536 -6 0c-1.856 .536 -3 1.526 -3 2.598z" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 6v10c0 .888 .772 1.45 2 2" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 11c0 .888 .772 1.45 2 2" })
                  ]
                }
              )
            ] }) }) }),
            !formik.values.coinSplit && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-end w-full justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                onClick: (e3) => {
                  e3.stopPropagation();
                  setTokenInformation({
                    confirmed: formik.values.token.confirmed,
                    sendable: formik.values.token.sendable,
                    unconfirmed: formik.values.token.unconfirmed
                  });
                },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] items-center mr-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "p",
                      {
                        className: "".concat(formik.values.token.unconfirmed !== "0" ? "bg-yellow-500 text-yellow-200 animate-pulse " : "bg-green-200 text-green-600 ", " w-max justify-self-end text-green-600 rounded-full px-2 text-[12px] max-w-max font-bold"),
                        children: _currencyFormat !== null && formatNumberPreference(
                          new Decimal(formik.values.token.sendable).toNumber(),
                          3,
                          getCharacterCountAfterChar(
                            formik.values.token.sendable,
                            "."
                          ) > 3 ? "..." : "",
                          _currencyFormat
                        )
                      }
                    ),
                    formik.values.token.unconfirmed === "0" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        width: "24",
                        height: "24",
                        className: "min-h-[24px] min-w-[24px]",
                        viewBox: "0 0 24 24",
                        strokeWidth: "2",
                        stroke: "#22c55e",
                        fill: "none",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M7 9m0 2a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v6a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2z" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M14 14m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17 9v-2a2 2 0 0 0 -2 -2h-10a2 2 0 0 0 -2 2v6a2 2 0 0 0 2 2h2" })
                        ]
                      }
                    ),
                    formik.values.token.unconfirmed !== "0" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "min-h-[24px] min-w-[24px] animate-pulse",
                        width: "24",
                        height: "24",
                        viewBox: "0 0 24 24",
                        strokeWidth: "2",
                        stroke: "#eab308",
                        fill: "none",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6.5 7h11" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 20v-2a6 6 0 1 1 12 0v2a1 1 0 0 1 -1 1h-10a1 1 0 0 1 -1 -1z" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 4v2a6 6 0 1 0 12 0v-2a1 1 0 0 0 -1 -1h-10a1 1 0 0 0 -1 1z" })
                        ]
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] items-center mr-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "w-max justify-self-end text-white text-[12px] rounded-full px-2 max-w-max bg-black", children: _currencyFormat !== null && formatNumberPreference(
                      new Decimal(formik.values.token.confirmed).minus(formik.values.token.sendable).toNumber(),
                      3,
                      getCharacterCountAfterChar(
                        new Decimal(formik.values.token.confirmed).minus(formik.values.token.sendable).toString(),
                        "."
                      ) > 3 ? "..." : "",
                      _currencyFormat
                    ) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        width: "24",
                        height: "24",
                        className: "min-h-[24px] min-w-[24px]",
                        viewBox: "0 0 24 24",
                        strokeWidth: "2",
                        stroke: "currentColor",
                        fill: "none",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "path",
                            {
                              d: "M12 2c-.218 0 -.432 .002 -.642 .005l-.616 .017l-.299 .013l-.579 .034l-.553 .046c-4.785 .464 -6.732 2.411 -7.196 7.196l-.046 .553l-.034 .579c-.005 .098 -.01 .198 -.013 .299l-.017 .616l-.004 .318l-.001 .324c0 .218 .002 .432 .005 .642l.017 .616l.013 .299l.034 .579l.046 .553c.464 4.785 2.411 6.732 7.196 7.196l.553 .046l.579 .034c.098 .005 .198 .01 .299 .013l.616 .017l.642 .005l.642 -.005l.616 -.017l.299 -.013l.579 -.034l.553 -.046c4.785 -.464 6.732 -2.411 7.196 -7.196l.046 -.553l.034 -.579c.005 -.098 .01 -.198 .013 -.299l.017 -.616l.005 -.642l-.005 -.642l-.017 -.616l-.013 -.299l-.034 -.579l-.046 -.553c-.464 -4.785 -2.411 -6.732 -7.196 -7.196l-.553 -.046l-.579 -.034a28.058 28.058 0 0 0 -.299 -.013l-.616 -.017l-.318 -.004l-.324 -.001zm0 4a3 3 0 0 1 2.995 2.824l.005 .176v1a2 2 0 0 1 1.995 1.85l.005 .15v3a2 2 0 0 1 -1.85 1.995l-.15 .005h-6a2 2 0 0 1 -1.995 -1.85l-.005 -.15v-3a2 2 0 0 1 1.85 -1.995l.15 -.005v-1a3 3 0 0 1 3 -3zm3 6h-6v3h6v-3zm-3 -4a1 1 0 0 0 -.993 .883l-.007 .117v1h2v-1a1 1 0 0 0 -1 -1z",
                              fill: "currentColor",
                              strokeWidth: "0"
                            }
                          )
                        ]
                      }
                    )
                  ] })
                ]
              }
            ) })
          ] })
        ]
      }
    ) })
  ] });
};
const Input = ({
  accept,
  onChange,
  onBlur,
  placeholder,
  autoComplete,
  type,
  name: name2,
  id: id2,
  extraClass,
  value: value2,
  endIcon,
  error,
  handleEndIconClick,
  onKeyUp,
  formikProps,
  disabled,
  ref,
  max: max2,
  help
}) => {
  const [showHelp, setShowHelp] = reactExports.useState(false);
  let base = "w-full p-4  bg-white text-base text-black rounded disabled:bg-opacity-40 disabled:cursor-not-allowed focus:shadow-gray-100 focus:shadow-lg focus:border-none! focus:outline-none!";
  if (extraClass) {
    base += " ".concat(extraClass);
  }
  if (error) {
    base += " border-2 border-red-500";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-full", children: [
      help && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-1 mb-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " flex", children: [
          !showHelp && /* @__PURE__ */ jsxRuntimeExports.jsx(
            "svg",
            {
              onClick: () => setShowHelp(true),
              xmlns: "http://www.w3.org/2000/svg",
              className: "fill-gray-400 hover:cursor-pointer hover:scale-110",
              height: "20",
              viewBox: "0 -960 960 960",
              width: "20",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M440-280h80v-240h-80v240Zm40-320q17 0 28.5-11.5T520-640q0-17-11.5-28.5T480-680q-17 0-28.5 11.5T440-640q0 17 11.5 28.5T480-600Zm0 520q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
            }
          ),
          showHelp && /* @__PURE__ */ jsxRuntimeExports.jsx(
            "svg",
            {
              className: "fill-gray-400 hover:cursor-pointer hover:scale-110",
              onClick: () => setShowHelp(false),
              xmlns: "http://www.w3.org/2000/svg",
              height: "20",
              viewBox: "0 -960 960 960",
              width: "20",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m336-280 144-144 144 144 56-56-144-144 144-144-56-56-144 144-144-144-56 56 144 144-144 144 56 56ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
            }
          )
        ] }),
        showHelp && help
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          max: max2,
          ref,
          disabled,
          autoComplete: autoComplete ? autoComplete : "",
          name: name2,
          id: id2,
          value: value2,
          type,
          placeholder,
          className: base,
          onChange,
          accept,
          onKeyUp,
          onBlur,
          ...formikProps
        }
      ),
      !!endIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          onClick: handleEndIconClick,
          className: "pr-4 absolute right-[1px] top-4 bottom-0 color-core-black-2",
          children: endIcon
        }
      )
    ] }),
    error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left mt-3 bg-red-500 text-red-100 rounded px-2 py-1 text-[12px]", children: error })
  ] });
};
var lottie$1 = { exports: {} };
(function(module, exports) {
  typeof navigator !== "undefined" && function(global2, factory) {
    module.exports = factory();
  }(commonjsGlobal, function() {
    var svgNS = "http://www.w3.org/2000/svg";
    var locationHref = "";
    var _useWebWorker = false;
    var initialDefaultFrame = -999999;
    var setWebWorker = function setWebWorker2(flag) {
      _useWebWorker = !!flag;
    };
    var getWebWorker = function getWebWorker2() {
      return _useWebWorker;
    };
    var setLocationHref = function setLocationHref2(value2) {
      locationHref = value2;
    };
    var getLocationHref = function getLocationHref2() {
      return locationHref;
    };
    function createTag(type) {
      return document.createElement(type);
    }
    function extendPrototype(sources, destination) {
      var i3;
      var len = sources.length;
      var sourcePrototype;
      for (i3 = 0; i3 < len; i3 += 1) {
        sourcePrototype = sources[i3].prototype;
        for (var attr in sourcePrototype) {
          if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr))
            destination.prototype[attr] = sourcePrototype[attr];
        }
      }
    }
    function getDescriptor(object2, prop) {
      return Object.getOwnPropertyDescriptor(object2, prop);
    }
    function createProxyFunction(prototype) {
      function ProxyFunction() {
      }
      ProxyFunction.prototype = prototype;
      return ProxyFunction;
    }
    var audioControllerFactory = function() {
      function AudioController(audioFactory) {
        this.audios = [];
        this.audioFactory = audioFactory;
        this._volume = 1;
        this._isMuted = false;
      }
      AudioController.prototype = {
        addAudio: function addAudio(audio) {
          this.audios.push(audio);
        },
        pause: function pause() {
          var i3;
          var len = this.audios.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            this.audios[i3].pause();
          }
        },
        resume: function resume() {
          var i3;
          var len = this.audios.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            this.audios[i3].resume();
          }
        },
        setRate: function setRate(rateValue) {
          var i3;
          var len = this.audios.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            this.audios[i3].setRate(rateValue);
          }
        },
        createAudio: function createAudio(assetPath) {
          if (this.audioFactory) {
            return this.audioFactory(assetPath);
          }
          if (window.Howl) {
            return new window.Howl({
              src: [assetPath]
            });
          }
          return {
            isPlaying: false,
            play: function play() {
              this.isPlaying = true;
            },
            seek: function seek() {
              this.isPlaying = false;
            },
            playing: function playing() {
            },
            rate: function rate() {
            },
            setVolume: function setVolume() {
            }
          };
        },
        setAudioFactory: function setAudioFactory(audioFactory) {
          this.audioFactory = audioFactory;
        },
        setVolume: function setVolume(value2) {
          this._volume = value2;
          this._updateVolume();
        },
        mute: function mute() {
          this._isMuted = true;
          this._updateVolume();
        },
        unmute: function unmute() {
          this._isMuted = false;
          this._updateVolume();
        },
        getVolume: function getVolume() {
          return this._volume;
        },
        _updateVolume: function _updateVolume() {
          var i3;
          var len = this.audios.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            this.audios[i3].volume(this._volume * (this._isMuted ? 0 : 1));
          }
        }
      };
      return function() {
        return new AudioController();
      };
    }();
    var createTypedArray = function() {
      function createRegularArray(type, len) {
        var i3 = 0;
        var arr = [];
        var value2;
        switch (type) {
          case "int16":
          case "uint8c":
            value2 = 1;
            break;
          default:
            value2 = 1.1;
            break;
        }
        for (i3 = 0; i3 < len; i3 += 1) {
          arr.push(value2);
        }
        return arr;
      }
      function createTypedArrayFactory(type, len) {
        if (type === "float32") {
          return new Float32Array(len);
        }
        if (type === "int16") {
          return new Int16Array(len);
        }
        if (type === "uint8c") {
          return new Uint8ClampedArray(len);
        }
        return createRegularArray(type, len);
      }
      if (typeof Uint8ClampedArray === "function" && typeof Float32Array === "function") {
        return createTypedArrayFactory;
      }
      return createRegularArray;
    }();
    function createSizedArray(len) {
      return Array.apply(null, {
        length: len
      });
    }
    function _typeof$6(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$6 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$6 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$6(obj);
    }
    var subframeEnabled = true;
    var expressionsPlugin = null;
    var expressionsInterfaces = null;
    var idPrefix$1 = "";
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    var bmPow = Math.pow;
    var bmSqrt = Math.sqrt;
    var bmFloor = Math.floor;
    var bmMax = Math.max;
    var bmMin = Math.min;
    var BMMath = {};
    (function() {
      var propertyNames = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"];
      var i3;
      var len = propertyNames.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        BMMath[propertyNames[i3]] = Math[propertyNames[i3]];
      }
    })();
    BMMath.random = Math.random;
    BMMath.abs = function(val2) {
      var tOfVal = _typeof$6(val2);
      if (tOfVal === "object" && val2.length) {
        var absArr = createSizedArray(val2.length);
        var i3;
        var len = val2.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          absArr[i3] = Math.abs(val2[i3]);
        }
        return absArr;
      }
      return Math.abs(val2);
    };
    var defaultCurveSegments = 150;
    var degToRads = Math.PI / 180;
    var roundCorner = 0.5519;
    function styleDiv(element) {
      element.style.position = "absolute";
      element.style.top = 0;
      element.style.left = 0;
      element.style.display = "block";
      element.style.transformOrigin = "0 0";
      element.style.webkitTransformOrigin = "0 0";
      element.style.backfaceVisibility = "visible";
      element.style.webkitBackfaceVisibility = "visible";
      element.style.transformStyle = "preserve-3d";
      element.style.webkitTransformStyle = "preserve-3d";
      element.style.mozTransformStyle = "preserve-3d";
    }
    function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {
      this.type = type;
      this.currentTime = currentTime;
      this.totalTime = totalTime;
      this.direction = frameMultiplier < 0 ? -1 : 1;
    }
    function BMCompleteEvent(type, frameMultiplier) {
      this.type = type;
      this.direction = frameMultiplier < 0 ? -1 : 1;
    }
    function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier) {
      this.type = type;
      this.currentLoop = currentLoop;
      this.totalLoops = totalLoops;
      this.direction = frameMultiplier < 0 ? -1 : 1;
    }
    function BMSegmentStartEvent(type, firstFrame, totalFrames) {
      this.type = type;
      this.firstFrame = firstFrame;
      this.totalFrames = totalFrames;
    }
    function BMDestroyEvent(type, target) {
      this.type = type;
      this.target = target;
    }
    function BMRenderFrameErrorEvent(nativeError, currentTime) {
      this.type = "renderFrameError";
      this.nativeError = nativeError;
      this.currentTime = currentTime;
    }
    function BMConfigErrorEvent(nativeError) {
      this.type = "configError";
      this.nativeError = nativeError;
    }
    var createElementID = function() {
      var _count = 0;
      return function createID() {
        _count += 1;
        return idPrefix$1 + "__lottie_element_" + _count;
      };
    }();
    function HSVtoRGB(h4, s4, v2) {
      var r2;
      var g2;
      var b3;
      var i3;
      var f2;
      var p2;
      var q3;
      var t3;
      i3 = Math.floor(h4 * 6);
      f2 = h4 * 6 - i3;
      p2 = v2 * (1 - s4);
      q3 = v2 * (1 - f2 * s4);
      t3 = v2 * (1 - (1 - f2) * s4);
      switch (i3 % 6) {
        case 0:
          r2 = v2;
          g2 = t3;
          b3 = p2;
          break;
        case 1:
          r2 = q3;
          g2 = v2;
          b3 = p2;
          break;
        case 2:
          r2 = p2;
          g2 = v2;
          b3 = t3;
          break;
        case 3:
          r2 = p2;
          g2 = q3;
          b3 = v2;
          break;
        case 4:
          r2 = t3;
          g2 = p2;
          b3 = v2;
          break;
        case 5:
          r2 = v2;
          g2 = p2;
          b3 = q3;
          break;
      }
      return [r2, g2, b3];
    }
    function RGBtoHSV(r2, g2, b3) {
      var max2 = Math.max(r2, g2, b3);
      var min2 = Math.min(r2, g2, b3);
      var d4 = max2 - min2;
      var h4;
      var s4 = max2 === 0 ? 0 : d4 / max2;
      var v2 = max2 / 255;
      switch (max2) {
        case min2:
          h4 = 0;
          break;
        case r2:
          h4 = g2 - b3 + d4 * (g2 < b3 ? 6 : 0);
          h4 /= 6 * d4;
          break;
        case g2:
          h4 = b3 - r2 + d4 * 2;
          h4 /= 6 * d4;
          break;
        case b3:
          h4 = r2 - g2 + d4 * 4;
          h4 /= 6 * d4;
          break;
      }
      return [h4, s4, v2];
    }
    function addSaturationToRGB(color2, offset) {
      var hsv = RGBtoHSV(color2[0] * 255, color2[1] * 255, color2[2] * 255);
      hsv[1] += offset;
      if (hsv[1] > 1) {
        hsv[1] = 1;
      } else if (hsv[1] <= 0) {
        hsv[1] = 0;
      }
      return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }
    function addBrightnessToRGB(color2, offset) {
      var hsv = RGBtoHSV(color2[0] * 255, color2[1] * 255, color2[2] * 255);
      hsv[2] += offset;
      if (hsv[2] > 1) {
        hsv[2] = 1;
      } else if (hsv[2] < 0) {
        hsv[2] = 0;
      }
      return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }
    function addHueToRGB(color2, offset) {
      var hsv = RGBtoHSV(color2[0] * 255, color2[1] * 255, color2[2] * 255);
      hsv[0] += offset / 360;
      if (hsv[0] > 1) {
        hsv[0] -= 1;
      } else if (hsv[0] < 0) {
        hsv[0] += 1;
      }
      return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }
    var rgbToHex = function() {
      var colorMap = [];
      var i3;
      var hex;
      for (i3 = 0; i3 < 256; i3 += 1) {
        hex = i3.toString(16);
        colorMap[i3] = hex.length === 1 ? "0" + hex : hex;
      }
      return function(r2, g2, b3) {
        if (r2 < 0) {
          r2 = 0;
        }
        if (g2 < 0) {
          g2 = 0;
        }
        if (b3 < 0) {
          b3 = 0;
        }
        return "#" + colorMap[r2] + colorMap[g2] + colorMap[b3];
      };
    }();
    var setSubframeEnabled = function setSubframeEnabled2(flag) {
      subframeEnabled = !!flag;
    };
    var getSubframeEnabled = function getSubframeEnabled2() {
      return subframeEnabled;
    };
    var setExpressionsPlugin = function setExpressionsPlugin2(value2) {
      expressionsPlugin = value2;
    };
    var getExpressionsPlugin = function getExpressionsPlugin2() {
      return expressionsPlugin;
    };
    var setExpressionInterfaces = function setExpressionInterfaces2(value2) {
      expressionsInterfaces = value2;
    };
    var getExpressionInterfaces = function getExpressionInterfaces2() {
      return expressionsInterfaces;
    };
    var setDefaultCurveSegments = function setDefaultCurveSegments2(value2) {
      defaultCurveSegments = value2;
    };
    var getDefaultCurveSegments = function getDefaultCurveSegments2() {
      return defaultCurveSegments;
    };
    var setIdPrefix = function setIdPrefix2(value2) {
      idPrefix$1 = value2;
    };
    function createNS(type) {
      return document.createElementNS(svgNS, type);
    }
    function _typeof$5(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$5 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$5 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$5(obj);
    }
    var dataManager = function() {
      var _counterId = 1;
      var processes = [];
      var workerFn;
      var workerInstance;
      var workerProxy = {
        onmessage: function onmessage() {
        },
        postMessage: function postMessage(path) {
          workerFn({
            data: path
          });
        }
      };
      var _workerSelf = {
        postMessage: function postMessage(data2) {
          workerProxy.onmessage({
            data: data2
          });
        }
      };
      function createWorker(fn2) {
        if (window.Worker && window.Blob && getWebWorker()) {
          var blob = new Blob(["var _workerSelf = self; self.onmessage = ", fn2.toString()], {
            type: "text/javascript"
          });
          var url = URL.createObjectURL(blob);
          return new Worker(url);
        }
        workerFn = fn2;
        return workerProxy;
      }
      function setupWorker() {
        if (!workerInstance) {
          workerInstance = createWorker(function workerStart(e3) {
            function dataFunctionManager() {
              function completeLayers(layers2, comps) {
                var layerData;
                var i3;
                var len = layers2.length;
                var j2;
                var jLen;
                var k3;
                var kLen;
                for (i3 = 0; i3 < len; i3 += 1) {
                  layerData = layers2[i3];
                  if ("ks" in layerData && !layerData.completed) {
                    layerData.completed = true;
                    if (layerData.hasMask) {
                      var maskProps = layerData.masksProperties;
                      jLen = maskProps.length;
                      for (j2 = 0; j2 < jLen; j2 += 1) {
                        if (maskProps[j2].pt.k.i) {
                          convertPathsToAbsoluteValues(maskProps[j2].pt.k);
                        } else {
                          kLen = maskProps[j2].pt.k.length;
                          for (k3 = 0; k3 < kLen; k3 += 1) {
                            if (maskProps[j2].pt.k[k3].s) {
                              convertPathsToAbsoluteValues(maskProps[j2].pt.k[k3].s[0]);
                            }
                            if (maskProps[j2].pt.k[k3].e) {
                              convertPathsToAbsoluteValues(maskProps[j2].pt.k[k3].e[0]);
                            }
                          }
                        }
                      }
                    }
                    if (layerData.ty === 0) {
                      layerData.layers = findCompLayers(layerData.refId, comps);
                      completeLayers(layerData.layers, comps);
                    } else if (layerData.ty === 4) {
                      completeShapes(layerData.shapes);
                    } else if (layerData.ty === 5) {
                      completeText(layerData);
                    }
                  }
                }
              }
              function completeChars(chars, assets2) {
                if (chars) {
                  var i3 = 0;
                  var len = chars.length;
                  for (i3 = 0; i3 < len; i3 += 1) {
                    if (chars[i3].t === 1) {
                      chars[i3].data.layers = findCompLayers(chars[i3].data.refId, assets2);
                      completeLayers(chars[i3].data.layers, assets2);
                    }
                  }
                }
              }
              function findComp(id2, comps) {
                var i3 = 0;
                var len = comps.length;
                while (i3 < len) {
                  if (comps[i3].id === id2) {
                    return comps[i3];
                  }
                  i3 += 1;
                }
                return null;
              }
              function findCompLayers(id2, comps) {
                var comp2 = findComp(id2, comps);
                if (comp2) {
                  if (!comp2.layers.__used) {
                    comp2.layers.__used = true;
                    return comp2.layers;
                  }
                  return JSON.parse(JSON.stringify(comp2.layers));
                }
                return null;
              }
              function completeShapes(arr) {
                var i3;
                var len = arr.length;
                var j2;
                var jLen;
                for (i3 = len - 1; i3 >= 0; i3 -= 1) {
                  if (arr[i3].ty === "sh") {
                    if (arr[i3].ks.k.i) {
                      convertPathsToAbsoluteValues(arr[i3].ks.k);
                    } else {
                      jLen = arr[i3].ks.k.length;
                      for (j2 = 0; j2 < jLen; j2 += 1) {
                        if (arr[i3].ks.k[j2].s) {
                          convertPathsToAbsoluteValues(arr[i3].ks.k[j2].s[0]);
                        }
                        if (arr[i3].ks.k[j2].e) {
                          convertPathsToAbsoluteValues(arr[i3].ks.k[j2].e[0]);
                        }
                      }
                    }
                  } else if (arr[i3].ty === "gr") {
                    completeShapes(arr[i3].it);
                  }
                }
              }
              function convertPathsToAbsoluteValues(path) {
                var i3;
                var len = path.i.length;
                for (i3 = 0; i3 < len; i3 += 1) {
                  path.i[i3][0] += path.v[i3][0];
                  path.i[i3][1] += path.v[i3][1];
                  path.o[i3][0] += path.v[i3][0];
                  path.o[i3][1] += path.v[i3][1];
                }
              }
              function checkVersion(minimum, animVersionString) {
                var animVersion = animVersionString ? animVersionString.split(".") : [100, 100, 100];
                if (minimum[0] > animVersion[0]) {
                  return true;
                }
                if (animVersion[0] > minimum[0]) {
                  return false;
                }
                if (minimum[1] > animVersion[1]) {
                  return true;
                }
                if (animVersion[1] > minimum[1]) {
                  return false;
                }
                if (minimum[2] > animVersion[2]) {
                  return true;
                }
                if (animVersion[2] > minimum[2]) {
                  return false;
                }
                return null;
              }
              var checkText = function() {
                var minimumVersion = [4, 4, 14];
                function updateTextLayer(textLayer) {
                  var documentData = textLayer.t.d;
                  textLayer.t.d = {
                    k: [{
                      s: documentData,
                      t: 0
                    }]
                  };
                }
                function iterateLayers(layers2) {
                  var i3;
                  var len = layers2.length;
                  for (i3 = 0; i3 < len; i3 += 1) {
                    if (layers2[i3].ty === 5) {
                      updateTextLayer(layers2[i3]);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i3;
                      var len = animationData.assets.length;
                      for (i3 = 0; i3 < len; i3 += 1) {
                        if (animationData.assets[i3].layers) {
                          iterateLayers(animationData.assets[i3].layers);
                        }
                      }
                    }
                  }
                };
              }();
              var checkChars = function() {
                var minimumVersion = [4, 7, 99];
                return function(animationData) {
                  if (animationData.chars && !checkVersion(minimumVersion, animationData.v)) {
                    var i3;
                    var len = animationData.chars.length;
                    for (i3 = 0; i3 < len; i3 += 1) {
                      var charData = animationData.chars[i3];
                      if (charData.data && charData.data.shapes) {
                        completeShapes(charData.data.shapes);
                        charData.data.ip = 0;
                        charData.data.op = 99999;
                        charData.data.st = 0;
                        charData.data.sr = 1;
                        charData.data.ks = {
                          p: {
                            k: [0, 0],
                            a: 0
                          },
                          s: {
                            k: [100, 100],
                            a: 0
                          },
                          a: {
                            k: [0, 0],
                            a: 0
                          },
                          r: {
                            k: 0,
                            a: 0
                          },
                          o: {
                            k: 100,
                            a: 0
                          }
                        };
                        if (!animationData.chars[i3].t) {
                          charData.data.shapes.push({
                            ty: "no"
                          });
                          charData.data.shapes[0].it.push({
                            p: {
                              k: [0, 0],
                              a: 0
                            },
                            s: {
                              k: [100, 100],
                              a: 0
                            },
                            a: {
                              k: [0, 0],
                              a: 0
                            },
                            r: {
                              k: 0,
                              a: 0
                            },
                            o: {
                              k: 100,
                              a: 0
                            },
                            sk: {
                              k: 0,
                              a: 0
                            },
                            sa: {
                              k: 0,
                              a: 0
                            },
                            ty: "tr"
                          });
                        }
                      }
                    }
                  }
                };
              }();
              var checkPathProperties = function() {
                var minimumVersion = [5, 7, 15];
                function updateTextLayer(textLayer) {
                  var pathData = textLayer.t.p;
                  if (typeof pathData.a === "number") {
                    pathData.a = {
                      a: 0,
                      k: pathData.a
                    };
                  }
                  if (typeof pathData.p === "number") {
                    pathData.p = {
                      a: 0,
                      k: pathData.p
                    };
                  }
                  if (typeof pathData.r === "number") {
                    pathData.r = {
                      a: 0,
                      k: pathData.r
                    };
                  }
                }
                function iterateLayers(layers2) {
                  var i3;
                  var len = layers2.length;
                  for (i3 = 0; i3 < len; i3 += 1) {
                    if (layers2[i3].ty === 5) {
                      updateTextLayer(layers2[i3]);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i3;
                      var len = animationData.assets.length;
                      for (i3 = 0; i3 < len; i3 += 1) {
                        if (animationData.assets[i3].layers) {
                          iterateLayers(animationData.assets[i3].layers);
                        }
                      }
                    }
                  }
                };
              }();
              var checkColors = function() {
                var minimumVersion = [4, 1, 9];
                function iterateShapes(shapes) {
                  var i3;
                  var len = shapes.length;
                  var j2;
                  var jLen;
                  for (i3 = 0; i3 < len; i3 += 1) {
                    if (shapes[i3].ty === "gr") {
                      iterateShapes(shapes[i3].it);
                    } else if (shapes[i3].ty === "fl" || shapes[i3].ty === "st") {
                      if (shapes[i3].c.k && shapes[i3].c.k[0].i) {
                        jLen = shapes[i3].c.k.length;
                        for (j2 = 0; j2 < jLen; j2 += 1) {
                          if (shapes[i3].c.k[j2].s) {
                            shapes[i3].c.k[j2].s[0] /= 255;
                            shapes[i3].c.k[j2].s[1] /= 255;
                            shapes[i3].c.k[j2].s[2] /= 255;
                            shapes[i3].c.k[j2].s[3] /= 255;
                          }
                          if (shapes[i3].c.k[j2].e) {
                            shapes[i3].c.k[j2].e[0] /= 255;
                            shapes[i3].c.k[j2].e[1] /= 255;
                            shapes[i3].c.k[j2].e[2] /= 255;
                            shapes[i3].c.k[j2].e[3] /= 255;
                          }
                        }
                      } else {
                        shapes[i3].c.k[0] /= 255;
                        shapes[i3].c.k[1] /= 255;
                        shapes[i3].c.k[2] /= 255;
                        shapes[i3].c.k[3] /= 255;
                      }
                    }
                  }
                }
                function iterateLayers(layers2) {
                  var i3;
                  var len = layers2.length;
                  for (i3 = 0; i3 < len; i3 += 1) {
                    if (layers2[i3].ty === 4) {
                      iterateShapes(layers2[i3].shapes);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i3;
                      var len = animationData.assets.length;
                      for (i3 = 0; i3 < len; i3 += 1) {
                        if (animationData.assets[i3].layers) {
                          iterateLayers(animationData.assets[i3].layers);
                        }
                      }
                    }
                  }
                };
              }();
              var checkShapes = function() {
                var minimumVersion = [4, 4, 18];
                function completeClosingShapes(arr) {
                  var i3;
                  var len = arr.length;
                  var j2;
                  var jLen;
                  for (i3 = len - 1; i3 >= 0; i3 -= 1) {
                    if (arr[i3].ty === "sh") {
                      if (arr[i3].ks.k.i) {
                        arr[i3].ks.k.c = arr[i3].closed;
                      } else {
                        jLen = arr[i3].ks.k.length;
                        for (j2 = 0; j2 < jLen; j2 += 1) {
                          if (arr[i3].ks.k[j2].s) {
                            arr[i3].ks.k[j2].s[0].c = arr[i3].closed;
                          }
                          if (arr[i3].ks.k[j2].e) {
                            arr[i3].ks.k[j2].e[0].c = arr[i3].closed;
                          }
                        }
                      }
                    } else if (arr[i3].ty === "gr") {
                      completeClosingShapes(arr[i3].it);
                    }
                  }
                }
                function iterateLayers(layers2) {
                  var layerData;
                  var i3;
                  var len = layers2.length;
                  var j2;
                  var jLen;
                  var k3;
                  var kLen;
                  for (i3 = 0; i3 < len; i3 += 1) {
                    layerData = layers2[i3];
                    if (layerData.hasMask) {
                      var maskProps = layerData.masksProperties;
                      jLen = maskProps.length;
                      for (j2 = 0; j2 < jLen; j2 += 1) {
                        if (maskProps[j2].pt.k.i) {
                          maskProps[j2].pt.k.c = maskProps[j2].cl;
                        } else {
                          kLen = maskProps[j2].pt.k.length;
                          for (k3 = 0; k3 < kLen; k3 += 1) {
                            if (maskProps[j2].pt.k[k3].s) {
                              maskProps[j2].pt.k[k3].s[0].c = maskProps[j2].cl;
                            }
                            if (maskProps[j2].pt.k[k3].e) {
                              maskProps[j2].pt.k[k3].e[0].c = maskProps[j2].cl;
                            }
                          }
                        }
                      }
                    }
                    if (layerData.ty === 4) {
                      completeClosingShapes(layerData.shapes);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i3;
                      var len = animationData.assets.length;
                      for (i3 = 0; i3 < len; i3 += 1) {
                        if (animationData.assets[i3].layers) {
                          iterateLayers(animationData.assets[i3].layers);
                        }
                      }
                    }
                  }
                };
              }();
              function completeData(animationData) {
                if (animationData.__complete) {
                  return;
                }
                checkColors(animationData);
                checkText(animationData);
                checkChars(animationData);
                checkPathProperties(animationData);
                checkShapes(animationData);
                completeLayers(animationData.layers, animationData.assets);
                completeChars(animationData.chars, animationData.assets);
                animationData.__complete = true;
              }
              function completeText(data2) {
                if (data2.t.a.length === 0 && !("m" in data2.t.p))
                  ;
              }
              var moduleOb = {};
              moduleOb.completeData = completeData;
              moduleOb.checkColors = checkColors;
              moduleOb.checkChars = checkChars;
              moduleOb.checkPathProperties = checkPathProperties;
              moduleOb.checkShapes = checkShapes;
              moduleOb.completeLayers = completeLayers;
              return moduleOb;
            }
            if (!_workerSelf.dataManager) {
              _workerSelf.dataManager = dataFunctionManager();
            }
            if (!_workerSelf.assetLoader) {
              _workerSelf.assetLoader = function() {
                function formatResponse(xhr) {
                  var contentTypeHeader = xhr.getResponseHeader("content-type");
                  if (contentTypeHeader && xhr.responseType === "json" && contentTypeHeader.indexOf("json") !== -1) {
                    return xhr.response;
                  }
                  if (xhr.response && _typeof$5(xhr.response) === "object") {
                    return xhr.response;
                  }
                  if (xhr.response && typeof xhr.response === "string") {
                    return JSON.parse(xhr.response);
                  }
                  if (xhr.responseText) {
                    return JSON.parse(xhr.responseText);
                  }
                  return null;
                }
                function loadAsset(path, fullPath, callback, errorCallback) {
                  var response;
                  var xhr = new XMLHttpRequest();
                  try {
                    xhr.responseType = "json";
                  } catch (err) {
                  }
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      if (xhr.status === 200) {
                        response = formatResponse(xhr);
                        callback(response);
                      } else {
                        try {
                          response = formatResponse(xhr);
                          callback(response);
                        } catch (err) {
                          if (errorCallback) {
                            errorCallback(err);
                          }
                        }
                      }
                    }
                  };
                  try {
                    xhr.open(["G", "E", "T"].join(""), path, true);
                  } catch (error) {
                    xhr.open(["G", "E", "T"].join(""), fullPath + "/" + path, true);
                  }
                  xhr.send();
                }
                return {
                  load: loadAsset
                };
              }();
            }
            if (e3.data.type === "loadAnimation") {
              _workerSelf.assetLoader.load(e3.data.path, e3.data.fullPath, function(data2) {
                _workerSelf.dataManager.completeData(data2);
                _workerSelf.postMessage({
                  id: e3.data.id,
                  payload: data2,
                  status: "success"
                });
              }, function() {
                _workerSelf.postMessage({
                  id: e3.data.id,
                  status: "error"
                });
              });
            } else if (e3.data.type === "complete") {
              var animation = e3.data.animation;
              _workerSelf.dataManager.completeData(animation);
              _workerSelf.postMessage({
                id: e3.data.id,
                payload: animation,
                status: "success"
              });
            } else if (e3.data.type === "loadData") {
              _workerSelf.assetLoader.load(e3.data.path, e3.data.fullPath, function(data2) {
                _workerSelf.postMessage({
                  id: e3.data.id,
                  payload: data2,
                  status: "success"
                });
              }, function() {
                _workerSelf.postMessage({
                  id: e3.data.id,
                  status: "error"
                });
              });
            }
          });
          workerInstance.onmessage = function(event) {
            var data2 = event.data;
            var id2 = data2.id;
            var process = processes[id2];
            processes[id2] = null;
            if (data2.status === "success") {
              process.onComplete(data2.payload);
            } else if (process.onError) {
              process.onError();
            }
          };
        }
      }
      function createProcess(onComplete, onError) {
        _counterId += 1;
        var id2 = "processId_" + _counterId;
        processes[id2] = {
          onComplete,
          onError
        };
        return id2;
      }
      function loadAnimation2(path, onComplete, onError) {
        setupWorker();
        var processId = createProcess(onComplete, onError);
        workerInstance.postMessage({
          type: "loadAnimation",
          path,
          fullPath: window.location.origin + window.location.pathname,
          id: processId
        });
      }
      function loadData(path, onComplete, onError) {
        setupWorker();
        var processId = createProcess(onComplete, onError);
        workerInstance.postMessage({
          type: "loadData",
          path,
          fullPath: window.location.origin + window.location.pathname,
          id: processId
        });
      }
      function completeAnimation(anim, onComplete, onError) {
        setupWorker();
        var processId = createProcess(onComplete, onError);
        workerInstance.postMessage({
          type: "complete",
          animation: anim,
          id: processId
        });
      }
      return {
        loadAnimation: loadAnimation2,
        loadData,
        completeAnimation
      };
    }();
    var ImagePreloader = function() {
      var proxyImage = function() {
        var canvas = createTag("canvas");
        canvas.width = 1;
        canvas.height = 1;
        var ctx2 = canvas.getContext("2d");
        ctx2.fillStyle = "rgba(0,0,0,0)";
        ctx2.fillRect(0, 0, 1, 1);
        return canvas;
      }();
      function imageLoaded() {
        this.loadedAssets += 1;
        if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
          if (this.imagesLoadedCb) {
            this.imagesLoadedCb(null);
          }
        }
      }
      function footageLoaded() {
        this.loadedFootagesCount += 1;
        if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
          if (this.imagesLoadedCb) {
            this.imagesLoadedCb(null);
          }
        }
      }
      function getAssetsPath(assetData, assetsPath, originalPath) {
        var path = "";
        if (assetData.e) {
          path = assetData.p;
        } else if (assetsPath) {
          var imagePath = assetData.p;
          if (imagePath.indexOf("images/") !== -1) {
            imagePath = imagePath.split("/")[1];
          }
          path = assetsPath + imagePath;
        } else {
          path = originalPath;
          path += assetData.u ? assetData.u : "";
          path += assetData.p;
        }
        return path;
      }
      function testImageLoaded(img) {
        var _count = 0;
        var intervalId = setInterval((function() {
          var box = img.getBBox();
          if (box.width || _count > 500) {
            this._imageLoaded();
            clearInterval(intervalId);
          }
          _count += 1;
        }).bind(this), 50);
      }
      function createImageData(assetData) {
        var path = getAssetsPath(assetData, this.assetsPath, this.path);
        var img = createNS("image");
        if (isSafari) {
          this.testImageLoaded(img);
        } else {
          img.addEventListener("load", this._imageLoaded, false);
        }
        img.addEventListener("error", (function() {
          ob2.img = proxyImage;
          this._imageLoaded();
        }).bind(this), false);
        img.setAttributeNS("http://www.w3.org/1999/xlink", "href", path);
        if (this._elementHelper.append) {
          this._elementHelper.append(img);
        } else {
          this._elementHelper.appendChild(img);
        }
        var ob2 = {
          img,
          assetData
        };
        return ob2;
      }
      function createImgData(assetData) {
        var path = getAssetsPath(assetData, this.assetsPath, this.path);
        var img = createTag("img");
        img.crossOrigin = "anonymous";
        img.addEventListener("load", this._imageLoaded, false);
        img.addEventListener("error", (function() {
          ob2.img = proxyImage;
          this._imageLoaded();
        }).bind(this), false);
        img.src = path;
        var ob2 = {
          img,
          assetData
        };
        return ob2;
      }
      function createFootageData(data2) {
        var ob2 = {
          assetData: data2
        };
        var path = getAssetsPath(data2, this.assetsPath, this.path);
        dataManager.loadData(path, (function(footageData) {
          ob2.img = footageData;
          this._footageLoaded();
        }).bind(this), (function() {
          ob2.img = {};
          this._footageLoaded();
        }).bind(this));
        return ob2;
      }
      function loadAssets(assets2, cb2) {
        this.imagesLoadedCb = cb2;
        var i3;
        var len = assets2.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (!assets2[i3].layers) {
            if (!assets2[i3].t || assets2[i3].t === "seq") {
              this.totalImages += 1;
              this.images.push(this._createImageData(assets2[i3]));
            } else if (assets2[i3].t === 3) {
              this.totalFootages += 1;
              this.images.push(this.createFootageData(assets2[i3]));
            }
          }
        }
      }
      function setPath(path) {
        this.path = path || "";
      }
      function setAssetsPath(path) {
        this.assetsPath = path || "";
      }
      function getAsset(assetData) {
        var i3 = 0;
        var len = this.images.length;
        while (i3 < len) {
          if (this.images[i3].assetData === assetData) {
            return this.images[i3].img;
          }
          i3 += 1;
        }
        return null;
      }
      function destroy() {
        this.imagesLoadedCb = null;
        this.images.length = 0;
      }
      function loadedImages() {
        return this.totalImages === this.loadedAssets;
      }
      function loadedFootages() {
        return this.totalFootages === this.loadedFootagesCount;
      }
      function setCacheType(type, elementHelper) {
        if (type === "svg") {
          this._elementHelper = elementHelper;
          this._createImageData = this.createImageData.bind(this);
        } else {
          this._createImageData = this.createImgData.bind(this);
        }
      }
      function ImagePreloaderFactory() {
        this._imageLoaded = imageLoaded.bind(this);
        this._footageLoaded = footageLoaded.bind(this);
        this.testImageLoaded = testImageLoaded.bind(this);
        this.createFootageData = createFootageData.bind(this);
        this.assetsPath = "";
        this.path = "";
        this.totalImages = 0;
        this.totalFootages = 0;
        this.loadedAssets = 0;
        this.loadedFootagesCount = 0;
        this.imagesLoadedCb = null;
        this.images = [];
      }
      ImagePreloaderFactory.prototype = {
        loadAssets,
        setAssetsPath,
        setPath,
        loadedImages,
        loadedFootages,
        destroy,
        getAsset,
        createImgData,
        createImageData,
        imageLoaded,
        footageLoaded,
        setCacheType
      };
      return ImagePreloaderFactory;
    }();
    function BaseEvent() {
    }
    BaseEvent.prototype = {
      triggerEvent: function triggerEvent(eventName, args) {
        if (this._cbs[eventName]) {
          var callbacks = this._cbs[eventName];
          for (var i3 = 0; i3 < callbacks.length; i3 += 1) {
            callbacks[i3](args);
          }
        }
      },
      addEventListener: function addEventListener(eventName, callback) {
        if (!this._cbs[eventName]) {
          this._cbs[eventName] = [];
        }
        this._cbs[eventName].push(callback);
        return (function() {
          this.removeEventListener(eventName, callback);
        }).bind(this);
      },
      removeEventListener: function removeEventListener(eventName, callback) {
        if (!callback) {
          this._cbs[eventName] = null;
        } else if (this._cbs[eventName]) {
          var i3 = 0;
          var len = this._cbs[eventName].length;
          while (i3 < len) {
            if (this._cbs[eventName][i3] === callback) {
              this._cbs[eventName].splice(i3, 1);
              i3 -= 1;
              len -= 1;
            }
            i3 += 1;
          }
          if (!this._cbs[eventName].length) {
            this._cbs[eventName] = null;
          }
        }
      }
    };
    var markerParser = function() {
      function parsePayloadLines(payload) {
        var lines = payload.split("\r\n");
        var keys2 = {};
        var line2;
        var keysCount = 0;
        for (var i3 = 0; i3 < lines.length; i3 += 1) {
          line2 = lines[i3].split(":");
          if (line2.length === 2) {
            keys2[line2[0]] = line2[1].trim();
            keysCount += 1;
          }
        }
        if (keysCount === 0) {
          throw new Error();
        }
        return keys2;
      }
      return function(_markers) {
        var markers = [];
        for (var i3 = 0; i3 < _markers.length; i3 += 1) {
          var _marker = _markers[i3];
          var markerData = {
            time: _marker.tm,
            duration: _marker.dr
          };
          try {
            markerData.payload = JSON.parse(_markers[i3].cm);
          } catch (_2) {
            try {
              markerData.payload = parsePayloadLines(_markers[i3].cm);
            } catch (__) {
              markerData.payload = {
                name: _markers[i3].cm
              };
            }
          }
          markers.push(markerData);
        }
        return markers;
      };
    }();
    var ProjectInterface = function() {
      function registerComposition(comp2) {
        this.compositions.push(comp2);
      }
      return function() {
        function _thisProjectFunction(name2) {
          var i3 = 0;
          var len = this.compositions.length;
          while (i3 < len) {
            if (this.compositions[i3].data && this.compositions[i3].data.nm === name2) {
              if (this.compositions[i3].prepareFrame && this.compositions[i3].data.xt) {
                this.compositions[i3].prepareFrame(this.currentFrame);
              }
              return this.compositions[i3].compInterface;
            }
            i3 += 1;
          }
          return null;
        }
        _thisProjectFunction.compositions = [];
        _thisProjectFunction.currentFrame = 0;
        _thisProjectFunction.registerComposition = registerComposition;
        return _thisProjectFunction;
      };
    }();
    var renderers = {};
    var registerRenderer = function registerRenderer2(key2, value2) {
      renderers[key2] = value2;
    };
    function getRenderer(key2) {
      return renderers[key2];
    }
    function getRegisteredRenderer() {
      if (renderers.canvas) {
        return "canvas";
      }
      for (var key2 in renderers) {
        if (renderers[key2]) {
          return key2;
        }
      }
      return "";
    }
    function _typeof$4(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$4 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$4 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$4(obj);
    }
    var AnimationItem = function AnimationItem2() {
      this._cbs = [];
      this.name = "";
      this.path = "";
      this.isLoaded = false;
      this.currentFrame = 0;
      this.currentRawFrame = 0;
      this.firstFrame = 0;
      this.totalFrames = 0;
      this.frameRate = 0;
      this.frameMult = 0;
      this.playSpeed = 1;
      this.playDirection = 1;
      this.playCount = 0;
      this.animationData = {};
      this.assets = [];
      this.isPaused = true;
      this.autoplay = false;
      this.loop = true;
      this.renderer = null;
      this.animationID = createElementID();
      this.assetsPath = "";
      this.timeCompleted = 0;
      this.segmentPos = 0;
      this.isSubframeEnabled = getSubframeEnabled();
      this.segments = [];
      this._idle = true;
      this._completedLoop = false;
      this.projectInterface = ProjectInterface();
      this.imagePreloader = new ImagePreloader();
      this.audioController = audioControllerFactory();
      this.markers = [];
      this.configAnimation = this.configAnimation.bind(this);
      this.onSetupError = this.onSetupError.bind(this);
      this.onSegmentComplete = this.onSegmentComplete.bind(this);
      this.drawnFrameEvent = new BMEnterFrameEvent("drawnFrame", 0, 0, 0);
      this.expressionsPlugin = getExpressionsPlugin();
    };
    extendPrototype([BaseEvent], AnimationItem);
    AnimationItem.prototype.setParams = function(params) {
      if (params.wrapper || params.container) {
        this.wrapper = params.wrapper || params.container;
      }
      var animType = "svg";
      if (params.animType) {
        animType = params.animType;
      } else if (params.renderer) {
        animType = params.renderer;
      }
      var RendererClass = getRenderer(animType);
      this.renderer = new RendererClass(this, params.rendererSettings);
      this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);
      this.renderer.setProjectInterface(this.projectInterface);
      this.animType = animType;
      if (params.loop === "" || params.loop === null || params.loop === void 0 || params.loop === true) {
        this.loop = true;
      } else if (params.loop === false) {
        this.loop = false;
      } else {
        this.loop = parseInt(params.loop, 10);
      }
      this.autoplay = "autoplay" in params ? params.autoplay : true;
      this.name = params.name ? params.name : "";
      this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, "autoloadSegments") ? params.autoloadSegments : true;
      this.assetsPath = params.assetsPath;
      this.initialSegment = params.initialSegment;
      if (params.audioFactory) {
        this.audioController.setAudioFactory(params.audioFactory);
      }
      if (params.animationData) {
        this.setupAnimation(params.animationData);
      } else if (params.path) {
        if (params.path.lastIndexOf("\\") !== -1) {
          this.path = params.path.substr(0, params.path.lastIndexOf("\\") + 1);
        } else {
          this.path = params.path.substr(0, params.path.lastIndexOf("/") + 1);
        }
        this.fileName = params.path.substr(params.path.lastIndexOf("/") + 1);
        this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(".json"));
        dataManager.loadAnimation(params.path, this.configAnimation, this.onSetupError);
      }
    };
    AnimationItem.prototype.onSetupError = function() {
      this.trigger("data_failed");
    };
    AnimationItem.prototype.setupAnimation = function(data2) {
      dataManager.completeAnimation(data2, this.configAnimation);
    };
    AnimationItem.prototype.setData = function(wrapper, animationData) {
      if (animationData) {
        if (_typeof$4(animationData) !== "object") {
          animationData = JSON.parse(animationData);
        }
      }
      var params = {
        wrapper,
        animationData
      };
      var wrapperAttributes = wrapper.attributes;
      params.path = wrapperAttributes.getNamedItem("data-animation-path") ? wrapperAttributes.getNamedItem("data-animation-path").value : wrapperAttributes.getNamedItem("data-bm-path") ? wrapperAttributes.getNamedItem("data-bm-path").value : wrapperAttributes.getNamedItem("bm-path") ? wrapperAttributes.getNamedItem("bm-path").value : "";
      params.animType = wrapperAttributes.getNamedItem("data-anim-type") ? wrapperAttributes.getNamedItem("data-anim-type").value : wrapperAttributes.getNamedItem("data-bm-type") ? wrapperAttributes.getNamedItem("data-bm-type").value : wrapperAttributes.getNamedItem("bm-type") ? wrapperAttributes.getNamedItem("bm-type").value : wrapperAttributes.getNamedItem("data-bm-renderer") ? wrapperAttributes.getNamedItem("data-bm-renderer").value : wrapperAttributes.getNamedItem("bm-renderer") ? wrapperAttributes.getNamedItem("bm-renderer").value : getRegisteredRenderer() || "canvas";
      var loop2 = wrapperAttributes.getNamedItem("data-anim-loop") ? wrapperAttributes.getNamedItem("data-anim-loop").value : wrapperAttributes.getNamedItem("data-bm-loop") ? wrapperAttributes.getNamedItem("data-bm-loop").value : wrapperAttributes.getNamedItem("bm-loop") ? wrapperAttributes.getNamedItem("bm-loop").value : "";
      if (loop2 === "false") {
        params.loop = false;
      } else if (loop2 === "true") {
        params.loop = true;
      } else if (loop2 !== "") {
        params.loop = parseInt(loop2, 10);
      }
      var autoplay = wrapperAttributes.getNamedItem("data-anim-autoplay") ? wrapperAttributes.getNamedItem("data-anim-autoplay").value : wrapperAttributes.getNamedItem("data-bm-autoplay") ? wrapperAttributes.getNamedItem("data-bm-autoplay").value : wrapperAttributes.getNamedItem("bm-autoplay") ? wrapperAttributes.getNamedItem("bm-autoplay").value : true;
      params.autoplay = autoplay !== "false";
      params.name = wrapperAttributes.getNamedItem("data-name") ? wrapperAttributes.getNamedItem("data-name").value : wrapperAttributes.getNamedItem("data-bm-name") ? wrapperAttributes.getNamedItem("data-bm-name").value : wrapperAttributes.getNamedItem("bm-name") ? wrapperAttributes.getNamedItem("bm-name").value : "";
      var prerender = wrapperAttributes.getNamedItem("data-anim-prerender") ? wrapperAttributes.getNamedItem("data-anim-prerender").value : wrapperAttributes.getNamedItem("data-bm-prerender") ? wrapperAttributes.getNamedItem("data-bm-prerender").value : wrapperAttributes.getNamedItem("bm-prerender") ? wrapperAttributes.getNamedItem("bm-prerender").value : "";
      if (prerender === "false") {
        params.prerender = false;
      }
      if (!params.path) {
        this.trigger("destroy");
      } else {
        this.setParams(params);
      }
    };
    AnimationItem.prototype.includeLayers = function(data2) {
      if (data2.op > this.animationData.op) {
        this.animationData.op = data2.op;
        this.totalFrames = Math.floor(data2.op - this.animationData.ip);
      }
      var layers2 = this.animationData.layers;
      var i3;
      var len = layers2.length;
      var newLayers = data2.layers;
      var j2;
      var jLen = newLayers.length;
      for (j2 = 0; j2 < jLen; j2 += 1) {
        i3 = 0;
        while (i3 < len) {
          if (layers2[i3].id === newLayers[j2].id) {
            layers2[i3] = newLayers[j2];
            break;
          }
          i3 += 1;
        }
      }
      if (data2.chars || data2.fonts) {
        this.renderer.globalData.fontManager.addChars(data2.chars);
        this.renderer.globalData.fontManager.addFonts(data2.fonts, this.renderer.globalData.defs);
      }
      if (data2.assets) {
        len = data2.assets.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          this.animationData.assets.push(data2.assets[i3]);
        }
      }
      this.animationData.__complete = false;
      dataManager.completeAnimation(this.animationData, this.onSegmentComplete);
    };
    AnimationItem.prototype.onSegmentComplete = function(data2) {
      this.animationData = data2;
      var expressionsPlugin2 = getExpressionsPlugin();
      if (expressionsPlugin2) {
        expressionsPlugin2.initExpressions(this);
      }
      this.loadNextSegment();
    };
    AnimationItem.prototype.loadNextSegment = function() {
      var segments = this.animationData.segments;
      if (!segments || segments.length === 0 || !this.autoloadSegments) {
        this.trigger("data_ready");
        this.timeCompleted = this.totalFrames;
        return;
      }
      var segment = segments.shift();
      this.timeCompleted = segment.time * this.frameRate;
      var segmentPath = this.path + this.fileName + "_" + this.segmentPos + ".json";
      this.segmentPos += 1;
      dataManager.loadData(segmentPath, this.includeLayers.bind(this), (function() {
        this.trigger("data_failed");
      }).bind(this));
    };
    AnimationItem.prototype.loadSegments = function() {
      var segments = this.animationData.segments;
      if (!segments) {
        this.timeCompleted = this.totalFrames;
      }
      this.loadNextSegment();
    };
    AnimationItem.prototype.imagesLoaded = function() {
      this.trigger("loaded_images");
      this.checkLoaded();
    };
    AnimationItem.prototype.preloadImages = function() {
      this.imagePreloader.setAssetsPath(this.assetsPath);
      this.imagePreloader.setPath(this.path);
      this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
    };
    AnimationItem.prototype.configAnimation = function(animData) {
      if (!this.renderer) {
        return;
      }
      try {
        this.animationData = animData;
        if (this.initialSegment) {
          this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
          this.firstFrame = Math.round(this.initialSegment[0]);
        } else {
          this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
          this.firstFrame = Math.round(this.animationData.ip);
        }
        this.renderer.configAnimation(animData);
        if (!animData.assets) {
          animData.assets = [];
        }
        this.assets = this.animationData.assets;
        this.frameRate = this.animationData.fr;
        this.frameMult = this.animationData.fr / 1e3;
        this.renderer.searchExtraCompositions(animData.assets);
        this.markers = markerParser(animData.markers || []);
        this.trigger("config_ready");
        this.preloadImages();
        this.loadSegments();
        this.updaFrameModifier();
        this.waitForFontsLoaded();
        if (this.isPaused) {
          this.audioController.pause();
        }
      } catch (error) {
        this.triggerConfigError(error);
      }
    };
    AnimationItem.prototype.waitForFontsLoaded = function() {
      if (!this.renderer) {
        return;
      }
      if (this.renderer.globalData.fontManager.isLoaded) {
        this.checkLoaded();
      } else {
        setTimeout(this.waitForFontsLoaded.bind(this), 20);
      }
    };
    AnimationItem.prototype.checkLoaded = function() {
      if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== "canvas") && this.imagePreloader.loadedFootages()) {
        this.isLoaded = true;
        var expressionsPlugin2 = getExpressionsPlugin();
        if (expressionsPlugin2) {
          expressionsPlugin2.initExpressions(this);
        }
        this.renderer.initItems();
        setTimeout((function() {
          this.trigger("DOMLoaded");
        }).bind(this), 0);
        this.gotoFrame();
        if (this.autoplay) {
          this.play();
        }
      }
    };
    AnimationItem.prototype.resize = function(width2, height2) {
      var _width = typeof width2 === "number" ? width2 : void 0;
      var _height = typeof height2 === "number" ? height2 : void 0;
      this.renderer.updateContainerSize(_width, _height);
    };
    AnimationItem.prototype.setSubframe = function(flag) {
      this.isSubframeEnabled = !!flag;
    };
    AnimationItem.prototype.gotoFrame = function() {
      this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;
      if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
        this.currentFrame = this.timeCompleted;
      }
      this.trigger("enterFrame");
      this.renderFrame();
      this.trigger("drawnFrame");
    };
    AnimationItem.prototype.renderFrame = function() {
      if (this.isLoaded === false || !this.renderer) {
        return;
      }
      try {
        if (this.expressionsPlugin) {
          this.expressionsPlugin.resetFrame();
        }
        this.renderer.renderFrame(this.currentFrame + this.firstFrame);
      } catch (error) {
        this.triggerRenderFrameError(error);
      }
    };
    AnimationItem.prototype.play = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      if (this.isPaused === true) {
        this.isPaused = false;
        this.trigger("_play");
        this.audioController.resume();
        if (this._idle) {
          this._idle = false;
          this.trigger("_active");
        }
      }
    };
    AnimationItem.prototype.pause = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      if (this.isPaused === false) {
        this.isPaused = true;
        this.trigger("_pause");
        this._idle = true;
        this.trigger("_idle");
        this.audioController.pause();
      }
    };
    AnimationItem.prototype.togglePause = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      if (this.isPaused === true) {
        this.play();
      } else {
        this.pause();
      }
    };
    AnimationItem.prototype.stop = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.pause();
      this.playCount = 0;
      this._completedLoop = false;
      this.setCurrentRawFrameValue(0);
    };
    AnimationItem.prototype.getMarkerData = function(markerName) {
      var marker;
      for (var i3 = 0; i3 < this.markers.length; i3 += 1) {
        marker = this.markers[i3];
        if (marker.payload && marker.payload.name === markerName) {
          return marker;
        }
      }
      return null;
    };
    AnimationItem.prototype.goToAndStop = function(value2, isFrame, name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      var numValue = Number(value2);
      if (isNaN(numValue)) {
        var marker = this.getMarkerData(value2);
        if (marker) {
          this.goToAndStop(marker.time, true);
        }
      } else if (isFrame) {
        this.setCurrentRawFrameValue(value2);
      } else {
        this.setCurrentRawFrameValue(value2 * this.frameModifier);
      }
      this.pause();
    };
    AnimationItem.prototype.goToAndPlay = function(value2, isFrame, name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      var numValue = Number(value2);
      if (isNaN(numValue)) {
        var marker = this.getMarkerData(value2);
        if (marker) {
          if (!marker.duration) {
            this.goToAndStop(marker.time, true);
          } else {
            this.playSegments([marker.time, marker.time + marker.duration], true);
          }
        }
      } else {
        this.goToAndStop(numValue, isFrame, name2);
      }
      this.play();
    };
    AnimationItem.prototype.advanceTime = function(value2) {
      if (this.isPaused === true || this.isLoaded === false) {
        return;
      }
      var nextValue = this.currentRawFrame + value2 * this.frameModifier;
      var _isComplete = false;
      if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
        if (!this.loop || this.playCount === this.loop) {
          if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
            _isComplete = true;
            nextValue = this.totalFrames - 1;
          }
        } else if (nextValue >= this.totalFrames) {
          this.playCount += 1;
          if (!this.checkSegments(nextValue % this.totalFrames)) {
            this.setCurrentRawFrameValue(nextValue % this.totalFrames);
            this._completedLoop = true;
            this.trigger("loopComplete");
          }
        } else {
          this.setCurrentRawFrameValue(nextValue);
        }
      } else if (nextValue < 0) {
        if (!this.checkSegments(nextValue % this.totalFrames)) {
          if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
            this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);
            if (!this._completedLoop) {
              this._completedLoop = true;
            } else {
              this.trigger("loopComplete");
            }
          } else {
            _isComplete = true;
            nextValue = 0;
          }
        }
      } else {
        this.setCurrentRawFrameValue(nextValue);
      }
      if (_isComplete) {
        this.setCurrentRawFrameValue(nextValue);
        this.pause();
        this.trigger("complete");
      }
    };
    AnimationItem.prototype.adjustSegment = function(arr, offset) {
      this.playCount = 0;
      if (arr[1] < arr[0]) {
        if (this.frameModifier > 0) {
          if (this.playSpeed < 0) {
            this.setSpeed(-this.playSpeed);
          } else {
            this.setDirection(-1);
          }
        }
        this.totalFrames = arr[0] - arr[1];
        this.timeCompleted = this.totalFrames;
        this.firstFrame = arr[1];
        this.setCurrentRawFrameValue(this.totalFrames - 1e-3 - offset);
      } else if (arr[1] > arr[0]) {
        if (this.frameModifier < 0) {
          if (this.playSpeed < 0) {
            this.setSpeed(-this.playSpeed);
          } else {
            this.setDirection(1);
          }
        }
        this.totalFrames = arr[1] - arr[0];
        this.timeCompleted = this.totalFrames;
        this.firstFrame = arr[0];
        this.setCurrentRawFrameValue(1e-3 + offset);
      }
      this.trigger("segmentStart");
    };
    AnimationItem.prototype.setSegment = function(init, end) {
      var pendingFrame = -1;
      if (this.isPaused) {
        if (this.currentRawFrame + this.firstFrame < init) {
          pendingFrame = init;
        } else if (this.currentRawFrame + this.firstFrame > end) {
          pendingFrame = end - init;
        }
      }
      this.firstFrame = init;
      this.totalFrames = end - init;
      this.timeCompleted = this.totalFrames;
      if (pendingFrame !== -1) {
        this.goToAndStop(pendingFrame, true);
      }
    };
    AnimationItem.prototype.playSegments = function(arr, forceFlag) {
      if (forceFlag) {
        this.segments.length = 0;
      }
      if (_typeof$4(arr[0]) === "object") {
        var i3;
        var len = arr.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          this.segments.push(arr[i3]);
        }
      } else {
        this.segments.push(arr);
      }
      if (this.segments.length && forceFlag) {
        this.adjustSegment(this.segments.shift(), 0);
      }
      if (this.isPaused) {
        this.play();
      }
    };
    AnimationItem.prototype.resetSegments = function(forceFlag) {
      this.segments.length = 0;
      this.segments.push([this.animationData.ip, this.animationData.op]);
      if (forceFlag) {
        this.checkSegments(0);
      }
    };
    AnimationItem.prototype.checkSegments = function(offset) {
      if (this.segments.length) {
        this.adjustSegment(this.segments.shift(), offset);
        return true;
      }
      return false;
    };
    AnimationItem.prototype.destroy = function(name2) {
      if (name2 && this.name !== name2 || !this.renderer) {
        return;
      }
      this.renderer.destroy();
      this.imagePreloader.destroy();
      this.trigger("destroy");
      this._cbs = null;
      this.onEnterFrame = null;
      this.onLoopComplete = null;
      this.onComplete = null;
      this.onSegmentStart = null;
      this.onDestroy = null;
      this.renderer = null;
      this.expressionsPlugin = null;
      this.imagePreloader = null;
      this.projectInterface = null;
    };
    AnimationItem.prototype.setCurrentRawFrameValue = function(value2) {
      this.currentRawFrame = value2;
      this.gotoFrame();
    };
    AnimationItem.prototype.setSpeed = function(val2) {
      this.playSpeed = val2;
      this.updaFrameModifier();
    };
    AnimationItem.prototype.setDirection = function(val2) {
      this.playDirection = val2 < 0 ? -1 : 1;
      this.updaFrameModifier();
    };
    AnimationItem.prototype.setLoop = function(isLooping) {
      this.loop = isLooping;
    };
    AnimationItem.prototype.setVolume = function(val2, name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.audioController.setVolume(val2);
    };
    AnimationItem.prototype.getVolume = function() {
      return this.audioController.getVolume();
    };
    AnimationItem.prototype.mute = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.audioController.mute();
    };
    AnimationItem.prototype.unmute = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.audioController.unmute();
    };
    AnimationItem.prototype.updaFrameModifier = function() {
      this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
      this.audioController.setRate(this.playSpeed * this.playDirection);
    };
    AnimationItem.prototype.getPath = function() {
      return this.path;
    };
    AnimationItem.prototype.getAssetsPath = function(assetData) {
      var path = "";
      if (assetData.e) {
        path = assetData.p;
      } else if (this.assetsPath) {
        var imagePath = assetData.p;
        if (imagePath.indexOf("images/") !== -1) {
          imagePath = imagePath.split("/")[1];
        }
        path = this.assetsPath + imagePath;
      } else {
        path = this.path;
        path += assetData.u ? assetData.u : "";
        path += assetData.p;
      }
      return path;
    };
    AnimationItem.prototype.getAssetData = function(id2) {
      var i3 = 0;
      var len = this.assets.length;
      while (i3 < len) {
        if (id2 === this.assets[i3].id) {
          return this.assets[i3];
        }
        i3 += 1;
      }
      return null;
    };
    AnimationItem.prototype.hide = function() {
      this.renderer.hide();
    };
    AnimationItem.prototype.show = function() {
      this.renderer.show();
    };
    AnimationItem.prototype.getDuration = function(isFrame) {
      return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
    };
    AnimationItem.prototype.updateDocumentData = function(path, documentData, index2) {
      try {
        var element = this.renderer.getElementByPath(path);
        element.updateDocumentData(documentData, index2);
      } catch (error) {
      }
    };
    AnimationItem.prototype.trigger = function(name2) {
      if (this._cbs && this._cbs[name2]) {
        switch (name2) {
          case "enterFrame":
            this.triggerEvent(name2, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameModifier));
            break;
          case "drawnFrame":
            this.drawnFrameEvent.currentTime = this.currentFrame;
            this.drawnFrameEvent.totalTime = this.totalFrames;
            this.drawnFrameEvent.direction = this.frameModifier;
            this.triggerEvent(name2, this.drawnFrameEvent);
            break;
          case "loopComplete":
            this.triggerEvent(name2, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
            break;
          case "complete":
            this.triggerEvent(name2, new BMCompleteEvent(name2, this.frameMult));
            break;
          case "segmentStart":
            this.triggerEvent(name2, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
            break;
          case "destroy":
            this.triggerEvent(name2, new BMDestroyEvent(name2, this));
            break;
          default:
            this.triggerEvent(name2);
        }
      }
      if (name2 === "enterFrame" && this.onEnterFrame) {
        this.onEnterFrame.call(this, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameMult));
      }
      if (name2 === "loopComplete" && this.onLoopComplete) {
        this.onLoopComplete.call(this, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
      }
      if (name2 === "complete" && this.onComplete) {
        this.onComplete.call(this, new BMCompleteEvent(name2, this.frameMult));
      }
      if (name2 === "segmentStart" && this.onSegmentStart) {
        this.onSegmentStart.call(this, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
      }
      if (name2 === "destroy" && this.onDestroy) {
        this.onDestroy.call(this, new BMDestroyEvent(name2, this));
      }
    };
    AnimationItem.prototype.triggerRenderFrameError = function(nativeError) {
      var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
      this.triggerEvent("error", error);
      if (this.onError) {
        this.onError.call(this, error);
      }
    };
    AnimationItem.prototype.triggerConfigError = function(nativeError) {
      var error = new BMConfigErrorEvent(nativeError, this.currentFrame);
      this.triggerEvent("error", error);
      if (this.onError) {
        this.onError.call(this, error);
      }
    };
    var animationManager = function() {
      var moduleOb = {};
      var registeredAnimations = [];
      var initTime = 0;
      var len = 0;
      var playingAnimationsNum = 0;
      var _stopped = true;
      var _isFrozen = false;
      function removeElement2(ev) {
        var i3 = 0;
        var animItem = ev.target;
        while (i3 < len) {
          if (registeredAnimations[i3].animation === animItem) {
            registeredAnimations.splice(i3, 1);
            i3 -= 1;
            len -= 1;
            if (!animItem.isPaused) {
              subtractPlayingCount();
            }
          }
          i3 += 1;
        }
      }
      function registerAnimation(element, animationData) {
        if (!element) {
          return null;
        }
        var i3 = 0;
        while (i3 < len) {
          if (registeredAnimations[i3].elem === element && registeredAnimations[i3].elem !== null) {
            return registeredAnimations[i3].animation;
          }
          i3 += 1;
        }
        var animItem = new AnimationItem();
        setupAnimation(animItem, element);
        animItem.setData(element, animationData);
        return animItem;
      }
      function getRegisteredAnimations() {
        var i3;
        var lenAnims = registeredAnimations.length;
        var animations = [];
        for (i3 = 0; i3 < lenAnims; i3 += 1) {
          animations.push(registeredAnimations[i3].animation);
        }
        return animations;
      }
      function addPlayingCount() {
        playingAnimationsNum += 1;
        activate();
      }
      function subtractPlayingCount() {
        playingAnimationsNum -= 1;
      }
      function setupAnimation(animItem, element) {
        animItem.addEventListener("destroy", removeElement2);
        animItem.addEventListener("_active", addPlayingCount);
        animItem.addEventListener("_idle", subtractPlayingCount);
        registeredAnimations.push({
          elem: element,
          animation: animItem
        });
        len += 1;
      }
      function loadAnimation2(params) {
        var animItem = new AnimationItem();
        setupAnimation(animItem, null);
        animItem.setParams(params);
        return animItem;
      }
      function setSpeed(val2, animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.setSpeed(val2, animation);
        }
      }
      function setDirection(val2, animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.setDirection(val2, animation);
        }
      }
      function play(animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.play(animation);
        }
      }
      function resume(nowTime) {
        var elapsedTime = nowTime - initTime;
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.advanceTime(elapsedTime);
        }
        initTime = nowTime;
        if (playingAnimationsNum && !_isFrozen) {
          window.requestAnimationFrame(resume);
        } else {
          _stopped = true;
        }
      }
      function first(nowTime) {
        initTime = nowTime;
        window.requestAnimationFrame(resume);
      }
      function pause(animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.pause(animation);
        }
      }
      function goToAndStop(value2, isFrame, animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.goToAndStop(value2, isFrame, animation);
        }
      }
      function stop2(animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.stop(animation);
        }
      }
      function togglePause(animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.togglePause(animation);
        }
      }
      function destroy(animation) {
        var i3;
        for (i3 = len - 1; i3 >= 0; i3 -= 1) {
          registeredAnimations[i3].animation.destroy(animation);
        }
      }
      function searchAnimations2(animationData, standalone, renderer) {
        var animElements = [].concat([].slice.call(document.getElementsByClassName("lottie")), [].slice.call(document.getElementsByClassName("bodymovin")));
        var i3;
        var lenAnims = animElements.length;
        for (i3 = 0; i3 < lenAnims; i3 += 1) {
          if (renderer) {
            animElements[i3].setAttribute("data-bm-type", renderer);
          }
          registerAnimation(animElements[i3], animationData);
        }
        if (standalone && lenAnims === 0) {
          if (!renderer) {
            renderer = "svg";
          }
          var body = document.getElementsByTagName("body")[0];
          body.innerText = "";
          var div2 = createTag("div");
          div2.style.width = "100%";
          div2.style.height = "100%";
          div2.setAttribute("data-bm-type", renderer);
          body.appendChild(div2);
          registerAnimation(div2, animationData);
        }
      }
      function resize() {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.resize();
        }
      }
      function activate() {
        if (!_isFrozen && playingAnimationsNum) {
          if (_stopped) {
            window.requestAnimationFrame(first);
            _stopped = false;
          }
        }
      }
      function freeze() {
        _isFrozen = true;
      }
      function unfreeze() {
        _isFrozen = false;
        activate();
      }
      function setVolume(val2, animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.setVolume(val2, animation);
        }
      }
      function mute(animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.mute(animation);
        }
      }
      function unmute(animation) {
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          registeredAnimations[i3].animation.unmute(animation);
        }
      }
      moduleOb.registerAnimation = registerAnimation;
      moduleOb.loadAnimation = loadAnimation2;
      moduleOb.setSpeed = setSpeed;
      moduleOb.setDirection = setDirection;
      moduleOb.play = play;
      moduleOb.pause = pause;
      moduleOb.stop = stop2;
      moduleOb.togglePause = togglePause;
      moduleOb.searchAnimations = searchAnimations2;
      moduleOb.resize = resize;
      moduleOb.goToAndStop = goToAndStop;
      moduleOb.destroy = destroy;
      moduleOb.freeze = freeze;
      moduleOb.unfreeze = unfreeze;
      moduleOb.setVolume = setVolume;
      moduleOb.mute = mute;
      moduleOb.unmute = unmute;
      moduleOb.getRegisteredAnimations = getRegisteredAnimations;
      return moduleOb;
    }();
    var BezierFactory = function() {
      var ob2 = {};
      ob2.getBezierEasing = getBezierEasing;
      var beziers = {};
      function getBezierEasing(a4, b3, c7, d4, nm2) {
        var str = nm2 || ("bez_" + a4 + "_" + b3 + "_" + c7 + "_" + d4).replace(/\./g, "p");
        if (beziers[str]) {
          return beziers[str];
        }
        var bezEasing = new BezierEasing([a4, b3, c7, d4]);
        beziers[str] = bezEasing;
        return bezEasing;
      }
      var NEWTON_ITERATIONS = 4;
      var NEWTON_MIN_SLOPE = 1e-3;
      var SUBDIVISION_PRECISION = 1e-7;
      var SUBDIVISION_MAX_ITERATIONS = 10;
      var kSplineTableSize = 11;
      var kSampleStepSize = 1 / (kSplineTableSize - 1);
      var float32ArraySupported = typeof Float32Array === "function";
      function A2(aA1, aA2) {
        return 1 - 3 * aA2 + 3 * aA1;
      }
      function B3(aA1, aA2) {
        return 3 * aA2 - 6 * aA1;
      }
      function C2(aA1) {
        return 3 * aA1;
      }
      function calcBezier(aT, aA1, aA2) {
        return ((A2(aA1, aA2) * aT + B3(aA1, aA2)) * aT + C2(aA1)) * aT;
      }
      function getSlope(aT, aA1, aA2) {
        return 3 * A2(aA1, aA2) * aT * aT + 2 * B3(aA1, aA2) * aT + C2(aA1);
      }
      function binarySubdivide(aX, aA, aB, mX1, mX2) {
        var currentX, currentT, i3 = 0;
        do {
          currentT = aA + (aB - aA) / 2;
          currentX = calcBezier(currentT, mX1, mX2) - aX;
          if (currentX > 0) {
            aB = currentT;
          } else {
            aA = currentT;
          }
        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i3 < SUBDIVISION_MAX_ITERATIONS);
        return currentT;
      }
      function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
        for (var i3 = 0; i3 < NEWTON_ITERATIONS; ++i3) {
          var currentSlope = getSlope(aGuessT, mX1, mX2);
          if (currentSlope === 0)
            return aGuessT;
          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
          aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
      }
      function BezierEasing(points) {
        this._p = points;
        this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
        this._precomputed = false;
        this.get = this.get.bind(this);
      }
      BezierEasing.prototype = {
        get: function get2(x3) {
          var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
          if (!this._precomputed)
            this._precompute();
          if (mX1 === mY1 && mX2 === mY2)
            return x3;
          if (x3 === 0)
            return 0;
          if (x3 === 1)
            return 1;
          return calcBezier(this._getTForX(x3), mY1, mY2);
        },
        // Private part
        _precompute: function _precompute() {
          var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
          this._precomputed = true;
          if (mX1 !== mY1 || mX2 !== mY2) {
            this._calcSampleValues();
          }
        },
        _calcSampleValues: function _calcSampleValues() {
          var mX1 = this._p[0], mX2 = this._p[2];
          for (var i3 = 0; i3 < kSplineTableSize; ++i3) {
            this._mSampleValues[i3] = calcBezier(i3 * kSampleStepSize, mX1, mX2);
          }
        },
        /**
             * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
             */
        _getTForX: function _getTForX(aX) {
          var mX1 = this._p[0], mX2 = this._p[2], mSampleValues = this._mSampleValues;
          var intervalStart = 0;
          var currentSample = 1;
          var lastSample = kSplineTableSize - 1;
          for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
            intervalStart += kSampleStepSize;
          }
          --currentSample;
          var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
          var guessForT = intervalStart + dist * kSampleStepSize;
          var initialSlope = getSlope(guessForT, mX1, mX2);
          if (initialSlope >= NEWTON_MIN_SLOPE) {
            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
          }
          if (initialSlope === 0) {
            return guessForT;
          }
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
      };
      return ob2;
    }();
    var pooling = function() {
      function _double(arr) {
        return arr.concat(createSizedArray(arr.length));
      }
      return {
        "double": _double
      };
    }();
    var poolFactory = function() {
      return function(initialLength, _create, _release) {
        var _length = 0;
        var _maxLength = initialLength;
        var pool = createSizedArray(_maxLength);
        var ob2 = {
          newElement,
          release
        };
        function newElement() {
          var element;
          if (_length) {
            _length -= 1;
            element = pool[_length];
          } else {
            element = _create();
          }
          return element;
        }
        function release(element) {
          if (_length === _maxLength) {
            pool = pooling["double"](pool);
            _maxLength *= 2;
          }
          if (_release) {
            _release(element);
          }
          pool[_length] = element;
          _length += 1;
        }
        return ob2;
      };
    }();
    var bezierLengthPool = function() {
      function create2() {
        return {
          addedLength: 0,
          percents: createTypedArray("float32", getDefaultCurveSegments()),
          lengths: createTypedArray("float32", getDefaultCurveSegments())
        };
      }
      return poolFactory(8, create2);
    }();
    var segmentsLengthPool = function() {
      function create2() {
        return {
          lengths: [],
          totalLength: 0
        };
      }
      function release(element) {
        var i3;
        var len = element.lengths.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          bezierLengthPool.release(element.lengths[i3]);
        }
        element.lengths.length = 0;
      }
      return poolFactory(8, create2, release);
    }();
    function bezFunction() {
      var math2 = Math;
      function pointOnLine2D(x1, y1, x22, y22, x3, y32) {
        var det1 = x1 * y22 + y1 * x3 + x22 * y32 - x3 * y22 - y32 * x1 - x22 * y1;
        return det1 > -1e-3 && det1 < 1e-3;
      }
      function pointOnLine3D(x1, y1, z1, x22, y22, z22, x3, y32, z3) {
        if (z1 === 0 && z22 === 0 && z3 === 0) {
          return pointOnLine2D(x1, y1, x22, y22, x3, y32);
        }
        var dist1 = math2.sqrt(math2.pow(x22 - x1, 2) + math2.pow(y22 - y1, 2) + math2.pow(z22 - z1, 2));
        var dist2 = math2.sqrt(math2.pow(x3 - x1, 2) + math2.pow(y32 - y1, 2) + math2.pow(z3 - z1, 2));
        var dist3 = math2.sqrt(math2.pow(x3 - x22, 2) + math2.pow(y32 - y22, 2) + math2.pow(z3 - z22, 2));
        var diffDist;
        if (dist1 > dist2) {
          if (dist1 > dist3) {
            diffDist = dist1 - dist2 - dist3;
          } else {
            diffDist = dist3 - dist2 - dist1;
          }
        } else if (dist3 > dist2) {
          diffDist = dist3 - dist2 - dist1;
        } else {
          diffDist = dist2 - dist1 - dist3;
        }
        return diffDist > -1e-4 && diffDist < 1e-4;
      }
      var getBezierLength = function() {
        return function(pt1, pt2, pt3, pt4) {
          var curveSegments = getDefaultCurveSegments();
          var k3;
          var i3;
          var len;
          var ptCoord;
          var perc;
          var addedLength = 0;
          var ptDistance;
          var point = [];
          var lastPoint = [];
          var lengthData = bezierLengthPool.newElement();
          len = pt3.length;
          for (k3 = 0; k3 < curveSegments; k3 += 1) {
            perc = k3 / (curveSegments - 1);
            ptDistance = 0;
            for (i3 = 0; i3 < len; i3 += 1) {
              ptCoord = bmPow(1 - perc, 3) * pt1[i3] + 3 * bmPow(1 - perc, 2) * perc * pt3[i3] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i3] + bmPow(perc, 3) * pt2[i3];
              point[i3] = ptCoord;
              if (lastPoint[i3] !== null) {
                ptDistance += bmPow(point[i3] - lastPoint[i3], 2);
              }
              lastPoint[i3] = point[i3];
            }
            if (ptDistance) {
              ptDistance = bmSqrt(ptDistance);
              addedLength += ptDistance;
            }
            lengthData.percents[k3] = perc;
            lengthData.lengths[k3] = addedLength;
          }
          lengthData.addedLength = addedLength;
          return lengthData;
        };
      }();
      function getSegmentsLength(shapeData) {
        var segmentsLength = segmentsLengthPool.newElement();
        var closed = shapeData.c;
        var pathV = shapeData.v;
        var pathO = shapeData.o;
        var pathI = shapeData.i;
        var i3;
        var len = shapeData._length;
        var lengths = segmentsLength.lengths;
        var totalLength = 0;
        for (i3 = 0; i3 < len - 1; i3 += 1) {
          lengths[i3] = getBezierLength(pathV[i3], pathV[i3 + 1], pathO[i3], pathI[i3 + 1]);
          totalLength += lengths[i3].addedLength;
        }
        if (closed && len) {
          lengths[i3] = getBezierLength(pathV[i3], pathV[0], pathO[i3], pathI[0]);
          totalLength += lengths[i3].addedLength;
        }
        segmentsLength.totalLength = totalLength;
        return segmentsLength;
      }
      function BezierData(length2) {
        this.segmentLength = 0;
        this.points = new Array(length2);
      }
      function PointData(partial, point) {
        this.partialLength = partial;
        this.point = point;
      }
      var buildBezierData = function() {
        var storedData = {};
        return function(pt1, pt2, pt3, pt4) {
          var bezierName = (pt1[0] + "_" + pt1[1] + "_" + pt2[0] + "_" + pt2[1] + "_" + pt3[0] + "_" + pt3[1] + "_" + pt4[0] + "_" + pt4[1]).replace(/\./g, "p");
          if (!storedData[bezierName]) {
            var curveSegments = getDefaultCurveSegments();
            var k3;
            var i3;
            var len;
            var ptCoord;
            var perc;
            var addedLength = 0;
            var ptDistance;
            var point;
            var lastPoint = null;
            if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
              curveSegments = 2;
            }
            var bezierData = new BezierData(curveSegments);
            len = pt3.length;
            for (k3 = 0; k3 < curveSegments; k3 += 1) {
              point = createSizedArray(len);
              perc = k3 / (curveSegments - 1);
              ptDistance = 0;
              for (i3 = 0; i3 < len; i3 += 1) {
                ptCoord = bmPow(1 - perc, 3) * pt1[i3] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i3] + pt3[i3]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i3] + pt4[i3]) + bmPow(perc, 3) * pt2[i3];
                point[i3] = ptCoord;
                if (lastPoint !== null) {
                  ptDistance += bmPow(point[i3] - lastPoint[i3], 2);
                }
              }
              ptDistance = bmSqrt(ptDistance);
              addedLength += ptDistance;
              bezierData.points[k3] = new PointData(ptDistance, point);
              lastPoint = point;
            }
            bezierData.segmentLength = addedLength;
            storedData[bezierName] = bezierData;
          }
          return storedData[bezierName];
        };
      }();
      function getDistancePerc(perc, bezierData) {
        var percents = bezierData.percents;
        var lengths = bezierData.lengths;
        var len = percents.length;
        var initPos = bmFloor((len - 1) * perc);
        var lengthPos = perc * bezierData.addedLength;
        var lPerc = 0;
        if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
          return percents[initPos];
        }
        var dir = lengths[initPos] > lengthPos ? -1 : 1;
        var flag = true;
        while (flag) {
          if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
            lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
            flag = false;
          } else {
            initPos += dir;
          }
          if (initPos < 0 || initPos >= len - 1) {
            if (initPos === len - 1) {
              return percents[initPos];
            }
            flag = false;
          }
        }
        return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
      }
      function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
        var t1 = getDistancePerc(percent, bezierData);
        var u1 = 1 - t1;
        var ptX = math2.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1e3) / 1e3;
        var ptY = math2.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1e3) / 1e3;
        return [ptX, ptY];
      }
      var bezierSegmentPoints = createTypedArray("float32", 8);
      function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {
        if (startPerc < 0) {
          startPerc = 0;
        } else if (startPerc > 1) {
          startPerc = 1;
        }
        var t0 = getDistancePerc(startPerc, bezierData);
        endPerc = endPerc > 1 ? 1 : endPerc;
        var t1 = getDistancePerc(endPerc, bezierData);
        var i3;
        var len = pt1.length;
        var u0 = 1 - t0;
        var u1 = 1 - t1;
        var u0u0u0 = u0 * u0 * u0;
        var t0u0u0_3 = t0 * u0 * u0 * 3;
        var t0t0u0_3 = t0 * t0 * u0 * 3;
        var t0t0t0 = t0 * t0 * t0;
        var u0u0u1 = u0 * u0 * u1;
        var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1;
        var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1;
        var t0t0t1 = t0 * t0 * t1;
        var u0u1u1 = u0 * u1 * u1;
        var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1;
        var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1;
        var t0t1t1 = t0 * t1 * t1;
        var u1u1u1 = u1 * u1 * u1;
        var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1;
        var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1;
        var t1t1t1 = t1 * t1 * t1;
        for (i3 = 0; i3 < len; i3 += 1) {
          bezierSegmentPoints[i3 * 4] = math2.round((u0u0u0 * pt1[i3] + t0u0u0_3 * pt3[i3] + t0t0u0_3 * pt4[i3] + t0t0t0 * pt2[i3]) * 1e3) / 1e3;
          bezierSegmentPoints[i3 * 4 + 1] = math2.round((u0u0u1 * pt1[i3] + t0u0u1_3 * pt3[i3] + t0t0u1_3 * pt4[i3] + t0t0t1 * pt2[i3]) * 1e3) / 1e3;
          bezierSegmentPoints[i3 * 4 + 2] = math2.round((u0u1u1 * pt1[i3] + t0u1u1_3 * pt3[i3] + t0t1u1_3 * pt4[i3] + t0t1t1 * pt2[i3]) * 1e3) / 1e3;
          bezierSegmentPoints[i3 * 4 + 3] = math2.round((u1u1u1 * pt1[i3] + t1u1u1_3 * pt3[i3] + t1t1u1_3 * pt4[i3] + t1t1t1 * pt2[i3]) * 1e3) / 1e3;
        }
        return bezierSegmentPoints;
      }
      return {
        getSegmentsLength,
        getNewSegment,
        getPointInSegment,
        buildBezierData,
        pointOnLine2D,
        pointOnLine3D
      };
    }
    var bez = bezFunction();
    var initFrame = initialDefaultFrame;
    var mathAbs = Math.abs;
    function interpolateValue(frameNum, caching) {
      var offsetTime = this.offsetTime;
      var newValue;
      if (this.propType === "multidimensional") {
        newValue = createTypedArray("float32", this.pv.length);
      }
      var iterationIndex = caching.lastIndex;
      var i3 = iterationIndex;
      var len = this.keyframes.length - 1;
      var flag = true;
      var keyData;
      var nextKeyData;
      var keyframeMetadata;
      while (flag) {
        keyData = this.keyframes[i3];
        nextKeyData = this.keyframes[i3 + 1];
        if (i3 === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
          if (keyData.h) {
            keyData = nextKeyData;
          }
          iterationIndex = 0;
          break;
        }
        if (nextKeyData.t - offsetTime > frameNum) {
          iterationIndex = i3;
          break;
        }
        if (i3 < len - 1) {
          i3 += 1;
        } else {
          iterationIndex = 0;
          flag = false;
        }
      }
      keyframeMetadata = this.keyframesMetadata[i3] || {};
      var k3;
      var kLen;
      var perc;
      var jLen;
      var j2;
      var fnc;
      var nextKeyTime = nextKeyData.t - offsetTime;
      var keyTime = keyData.t - offsetTime;
      var endValue;
      if (keyData.to) {
        if (!keyframeMetadata.bezierData) {
          keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
        }
        var bezierData = keyframeMetadata.bezierData;
        if (frameNum >= nextKeyTime || frameNum < keyTime) {
          var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
          kLen = bezierData.points[ind].point.length;
          for (k3 = 0; k3 < kLen; k3 += 1) {
            newValue[k3] = bezierData.points[ind].point[k3];
          }
        } else {
          if (keyframeMetadata.__fnct) {
            fnc = keyframeMetadata.__fnct;
          } else {
            fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
            keyframeMetadata.__fnct = fnc;
          }
          perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
          var distanceInLine = bezierData.segmentLength * perc;
          var segmentPerc;
          var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i3 ? caching._lastAddedLength : 0;
          j2 = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i3 ? caching._lastPoint : 0;
          flag = true;
          jLen = bezierData.points.length;
          while (flag) {
            addedLength += bezierData.points[j2].partialLength;
            if (distanceInLine === 0 || perc === 0 || j2 === bezierData.points.length - 1) {
              kLen = bezierData.points[j2].point.length;
              for (k3 = 0; k3 < kLen; k3 += 1) {
                newValue[k3] = bezierData.points[j2].point[k3];
              }
              break;
            } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j2 + 1].partialLength) {
              segmentPerc = (distanceInLine - addedLength) / bezierData.points[j2 + 1].partialLength;
              kLen = bezierData.points[j2].point.length;
              for (k3 = 0; k3 < kLen; k3 += 1) {
                newValue[k3] = bezierData.points[j2].point[k3] + (bezierData.points[j2 + 1].point[k3] - bezierData.points[j2].point[k3]) * segmentPerc;
              }
              break;
            }
            if (j2 < jLen - 1) {
              j2 += 1;
            } else {
              flag = false;
            }
          }
          caching._lastPoint = j2;
          caching._lastAddedLength = addedLength - bezierData.points[j2].partialLength;
          caching._lastKeyframeIndex = i3;
        }
      } else {
        var outX;
        var outY;
        var inX;
        var inY;
        var keyValue;
        len = keyData.s.length;
        endValue = nextKeyData.s || keyData.e;
        if (this.sh && keyData.h !== 1) {
          if (frameNum >= nextKeyTime) {
            newValue[0] = endValue[0];
            newValue[1] = endValue[1];
            newValue[2] = endValue[2];
          } else if (frameNum <= keyTime) {
            newValue[0] = keyData.s[0];
            newValue[1] = keyData.s[1];
            newValue[2] = keyData.s[2];
          } else {
            var quatStart = createQuaternion(keyData.s);
            var quatEnd = createQuaternion(endValue);
            var time2 = (frameNum - keyTime) / (nextKeyTime - keyTime);
            quaternionToEuler(newValue, slerp(quatStart, quatEnd, time2));
          }
        } else {
          for (i3 = 0; i3 < len; i3 += 1) {
            if (keyData.h !== 1) {
              if (frameNum >= nextKeyTime) {
                perc = 1;
              } else if (frameNum < keyTime) {
                perc = 0;
              } else {
                if (keyData.o.x.constructor === Array) {
                  if (!keyframeMetadata.__fnct) {
                    keyframeMetadata.__fnct = [];
                  }
                  if (!keyframeMetadata.__fnct[i3]) {
                    outX = keyData.o.x[i3] === void 0 ? keyData.o.x[0] : keyData.o.x[i3];
                    outY = keyData.o.y[i3] === void 0 ? keyData.o.y[0] : keyData.o.y[i3];
                    inX = keyData.i.x[i3] === void 0 ? keyData.i.x[0] : keyData.i.x[i3];
                    inY = keyData.i.y[i3] === void 0 ? keyData.i.y[0] : keyData.i.y[i3];
                    fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                    keyframeMetadata.__fnct[i3] = fnc;
                  } else {
                    fnc = keyframeMetadata.__fnct[i3];
                  }
                } else if (!keyframeMetadata.__fnct) {
                  outX = keyData.o.x;
                  outY = keyData.o.y;
                  inX = keyData.i.x;
                  inY = keyData.i.y;
                  fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                  keyData.keyframeMetadata = fnc;
                } else {
                  fnc = keyframeMetadata.__fnct;
                }
                perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
              }
            }
            endValue = nextKeyData.s || keyData.e;
            keyValue = keyData.h === 1 ? keyData.s[i3] : keyData.s[i3] + (endValue[i3] - keyData.s[i3]) * perc;
            if (this.propType === "multidimensional") {
              newValue[i3] = keyValue;
            } else {
              newValue = keyValue;
            }
          }
        }
      }
      caching.lastIndex = iterationIndex;
      return newValue;
    }
    function slerp(a4, b3, t3) {
      var out = [];
      var ax = a4[0];
      var ay = a4[1];
      var az = a4[2];
      var aw = a4[3];
      var bx = b3[0];
      var by = b3[1];
      var bz = b3[2];
      var bw = b3[3];
      var omega;
      var cosom;
      var sinom;
      var scale0;
      var scale1;
      cosom = ax * bx + ay * by + az * bz + aw * bw;
      if (cosom < 0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
      }
      if (1 - cosom > 1e-6) {
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1 - t3) * omega) / sinom;
        scale1 = Math.sin(t3 * omega) / sinom;
      } else {
        scale0 = 1 - t3;
        scale1 = t3;
      }
      out[0] = scale0 * ax + scale1 * bx;
      out[1] = scale0 * ay + scale1 * by;
      out[2] = scale0 * az + scale1 * bz;
      out[3] = scale0 * aw + scale1 * bw;
      return out;
    }
    function quaternionToEuler(out, quat) {
      var qx = quat[0];
      var qy = quat[1];
      var qz = quat[2];
      var qw = quat[3];
      var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
      var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
      var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
      out[0] = heading / degToRads;
      out[1] = attitude / degToRads;
      out[2] = bank / degToRads;
    }
    function createQuaternion(values2) {
      var heading = values2[0] * degToRads;
      var attitude = values2[1] * degToRads;
      var bank = values2[2] * degToRads;
      var c12 = Math.cos(heading / 2);
      var c22 = Math.cos(attitude / 2);
      var c32 = Math.cos(bank / 2);
      var s1 = Math.sin(heading / 2);
      var s22 = Math.sin(attitude / 2);
      var s32 = Math.sin(bank / 2);
      var w3 = c12 * c22 * c32 - s1 * s22 * s32;
      var x3 = s1 * s22 * c32 + c12 * c22 * s32;
      var y4 = s1 * c22 * c32 + c12 * s22 * s32;
      var z3 = c12 * s22 * c32 - s1 * c22 * s32;
      return [x3, y4, z3, w3];
    }
    function getValueAtCurrentTime() {
      var frameNum = this.comp.renderedFrame - this.offsetTime;
      var initTime = this.keyframes[0].t - this.offsetTime;
      var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
      if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
        if (this._caching.lastFrame >= frameNum) {
          this._caching._lastKeyframeIndex = -1;
          this._caching.lastIndex = 0;
        }
        var renderResult = this.interpolateValue(frameNum, this._caching);
        this.pv = renderResult;
      }
      this._caching.lastFrame = frameNum;
      return this.pv;
    }
    function setVValue(val2) {
      var multipliedValue;
      if (this.propType === "unidimensional") {
        multipliedValue = val2 * this.mult;
        if (mathAbs(this.v - multipliedValue) > 1e-5) {
          this.v = multipliedValue;
          this._mdf = true;
        }
      } else {
        var i3 = 0;
        var len = this.v.length;
        while (i3 < len) {
          multipliedValue = val2[i3] * this.mult;
          if (mathAbs(this.v[i3] - multipliedValue) > 1e-5) {
            this.v[i3] = multipliedValue;
            this._mdf = true;
          }
          i3 += 1;
        }
      }
    }
    function processEffectsSequence() {
      if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
        return;
      }
      if (this.lock) {
        this.setVValue(this.pv);
        return;
      }
      this.lock = true;
      this._mdf = this._isFirstFrame;
      var i3;
      var len = this.effectsSequence.length;
      var finalValue = this.kf ? this.pv : this.data.k;
      for (i3 = 0; i3 < len; i3 += 1) {
        finalValue = this.effectsSequence[i3](finalValue);
      }
      this.setVValue(finalValue);
      this._isFirstFrame = false;
      this.lock = false;
      this.frameId = this.elem.globalData.frameId;
    }
    function addEffect(effectFunction) {
      this.effectsSequence.push(effectFunction);
      this.container.addDynamicProperty(this);
    }
    function ValueProperty(elem2, data2, mult, container2) {
      this.propType = "unidimensional";
      this.mult = mult || 1;
      this.data = data2;
      this.v = mult ? data2.k * mult : data2.k;
      this.pv = data2.k;
      this._mdf = false;
      this.elem = elem2;
      this.container = container2;
      this.comp = elem2.comp;
      this.k = false;
      this.kf = false;
      this.vel = 0;
      this.effectsSequence = [];
      this._isFirstFrame = true;
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.addEffect = addEffect;
    }
    function MultiDimensionalProperty(elem2, data2, mult, container2) {
      this.propType = "multidimensional";
      this.mult = mult || 1;
      this.data = data2;
      this._mdf = false;
      this.elem = elem2;
      this.container = container2;
      this.comp = elem2.comp;
      this.k = false;
      this.kf = false;
      this.frameId = -1;
      var i3;
      var len = data2.k.length;
      this.v = createTypedArray("float32", len);
      this.pv = createTypedArray("float32", len);
      this.vel = createTypedArray("float32", len);
      for (i3 = 0; i3 < len; i3 += 1) {
        this.v[i3] = data2.k[i3] * this.mult;
        this.pv[i3] = data2.k[i3];
      }
      this._isFirstFrame = true;
      this.effectsSequence = [];
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.addEffect = addEffect;
    }
    function KeyframedValueProperty(elem2, data2, mult, container2) {
      this.propType = "unidimensional";
      this.keyframes = data2.k;
      this.keyframesMetadata = [];
      this.offsetTime = elem2.data.st;
      this.frameId = -1;
      this._caching = {
        lastFrame: initFrame,
        lastIndex: 0,
        value: 0,
        _lastKeyframeIndex: -1
      };
      this.k = true;
      this.kf = true;
      this.data = data2;
      this.mult = mult || 1;
      this.elem = elem2;
      this.container = container2;
      this.comp = elem2.comp;
      this.v = initFrame;
      this.pv = initFrame;
      this._isFirstFrame = true;
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.interpolateValue = interpolateValue;
      this.effectsSequence = [getValueAtCurrentTime.bind(this)];
      this.addEffect = addEffect;
    }
    function KeyframedMultidimensionalProperty(elem2, data2, mult, container2) {
      this.propType = "multidimensional";
      var i3;
      var len = data2.k.length;
      var s4;
      var e3;
      var to2;
      var ti2;
      for (i3 = 0; i3 < len - 1; i3 += 1) {
        if (data2.k[i3].to && data2.k[i3].s && data2.k[i3 + 1] && data2.k[i3 + 1].s) {
          s4 = data2.k[i3].s;
          e3 = data2.k[i3 + 1].s;
          to2 = data2.k[i3].to;
          ti2 = data2.k[i3].ti;
          if (s4.length === 2 && !(s4[0] === e3[0] && s4[1] === e3[1]) && bez.pointOnLine2D(s4[0], s4[1], e3[0], e3[1], s4[0] + to2[0], s4[1] + to2[1]) && bez.pointOnLine2D(s4[0], s4[1], e3[0], e3[1], e3[0] + ti2[0], e3[1] + ti2[1]) || s4.length === 3 && !(s4[0] === e3[0] && s4[1] === e3[1] && s4[2] === e3[2]) && bez.pointOnLine3D(s4[0], s4[1], s4[2], e3[0], e3[1], e3[2], s4[0] + to2[0], s4[1] + to2[1], s4[2] + to2[2]) && bez.pointOnLine3D(s4[0], s4[1], s4[2], e3[0], e3[1], e3[2], e3[0] + ti2[0], e3[1] + ti2[1], e3[2] + ti2[2])) {
            data2.k[i3].to = null;
            data2.k[i3].ti = null;
          }
          if (s4[0] === e3[0] && s4[1] === e3[1] && to2[0] === 0 && to2[1] === 0 && ti2[0] === 0 && ti2[1] === 0) {
            if (s4.length === 2 || s4[2] === e3[2] && to2[2] === 0 && ti2[2] === 0) {
              data2.k[i3].to = null;
              data2.k[i3].ti = null;
            }
          }
        }
      }
      this.effectsSequence = [getValueAtCurrentTime.bind(this)];
      this.data = data2;
      this.keyframes = data2.k;
      this.keyframesMetadata = [];
      this.offsetTime = elem2.data.st;
      this.k = true;
      this.kf = true;
      this._isFirstFrame = true;
      this.mult = mult || 1;
      this.elem = elem2;
      this.container = container2;
      this.comp = elem2.comp;
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.interpolateValue = interpolateValue;
      this.frameId = -1;
      var arrLen = data2.k[0].s.length;
      this.v = createTypedArray("float32", arrLen);
      this.pv = createTypedArray("float32", arrLen);
      for (i3 = 0; i3 < arrLen; i3 += 1) {
        this.v[i3] = initFrame;
        this.pv[i3] = initFrame;
      }
      this._caching = {
        lastFrame: initFrame,
        lastIndex: 0,
        value: createTypedArray("float32", arrLen)
      };
      this.addEffect = addEffect;
    }
    var PropertyFactory = function() {
      function getProp(elem2, data2, type, mult, container2) {
        if (data2.sid) {
          data2 = elem2.globalData.slotManager.getProp(data2);
        }
        var p2;
        if (!data2.k.length) {
          p2 = new ValueProperty(elem2, data2, mult, container2);
        } else if (typeof data2.k[0] === "number") {
          p2 = new MultiDimensionalProperty(elem2, data2, mult, container2);
        } else {
          switch (type) {
            case 0:
              p2 = new KeyframedValueProperty(elem2, data2, mult, container2);
              break;
            case 1:
              p2 = new KeyframedMultidimensionalProperty(elem2, data2, mult, container2);
              break;
          }
        }
        if (p2.effectsSequence.length) {
          container2.addDynamicProperty(p2);
        }
        return p2;
      }
      var ob2 = {
        getProp
      };
      return ob2;
    }();
    function DynamicPropertyContainer() {
    }
    DynamicPropertyContainer.prototype = {
      addDynamicProperty: function addDynamicProperty(prop) {
        if (this.dynamicProperties.indexOf(prop) === -1) {
          this.dynamicProperties.push(prop);
          this.container.addDynamicProperty(this);
          this._isAnimated = true;
        }
      },
      iterateDynamicProperties: function iterateDynamicProperties() {
        this._mdf = false;
        var i3;
        var len = this.dynamicProperties.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          this.dynamicProperties[i3].getValue();
          if (this.dynamicProperties[i3]._mdf) {
            this._mdf = true;
          }
        }
      },
      initDynamicPropertyContainer: function initDynamicPropertyContainer(container2) {
        this.container = container2;
        this.dynamicProperties = [];
        this._mdf = false;
        this._isAnimated = false;
      }
    };
    var pointPool = function() {
      function create2() {
        return createTypedArray("float32", 2);
      }
      return poolFactory(8, create2);
    }();
    function ShapePath() {
      this.c = false;
      this._length = 0;
      this._maxLength = 8;
      this.v = createSizedArray(this._maxLength);
      this.o = createSizedArray(this._maxLength);
      this.i = createSizedArray(this._maxLength);
    }
    ShapePath.prototype.setPathData = function(closed, len) {
      this.c = closed;
      this.setLength(len);
      var i3 = 0;
      while (i3 < len) {
        this.v[i3] = pointPool.newElement();
        this.o[i3] = pointPool.newElement();
        this.i[i3] = pointPool.newElement();
        i3 += 1;
      }
    };
    ShapePath.prototype.setLength = function(len) {
      while (this._maxLength < len) {
        this.doubleArrayLength();
      }
      this._length = len;
    };
    ShapePath.prototype.doubleArrayLength = function() {
      this.v = this.v.concat(createSizedArray(this._maxLength));
      this.i = this.i.concat(createSizedArray(this._maxLength));
      this.o = this.o.concat(createSizedArray(this._maxLength));
      this._maxLength *= 2;
    };
    ShapePath.prototype.setXYAt = function(x3, y4, type, pos, replace2) {
      var arr;
      this._length = Math.max(this._length, pos + 1);
      if (this._length >= this._maxLength) {
        this.doubleArrayLength();
      }
      switch (type) {
        case "v":
          arr = this.v;
          break;
        case "i":
          arr = this.i;
          break;
        case "o":
          arr = this.o;
          break;
        default:
          arr = [];
          break;
      }
      if (!arr[pos] || arr[pos] && !replace2) {
        arr[pos] = pointPool.newElement();
      }
      arr[pos][0] = x3;
      arr[pos][1] = y4;
    };
    ShapePath.prototype.setTripleAt = function(vX, vY, oX, oY, iX, iY, pos, replace2) {
      this.setXYAt(vX, vY, "v", pos, replace2);
      this.setXYAt(oX, oY, "o", pos, replace2);
      this.setXYAt(iX, iY, "i", pos, replace2);
    };
    ShapePath.prototype.reverse = function() {
      var newPath = new ShapePath();
      newPath.setPathData(this.c, this._length);
      var vertices = this.v;
      var outPoints = this.o;
      var inPoints = this.i;
      var init = 0;
      if (this.c) {
        newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
        init = 1;
      }
      var cnt = this._length - 1;
      var len = this._length;
      var i3;
      for (i3 = init; i3 < len; i3 += 1) {
        newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i3, false);
        cnt -= 1;
      }
      return newPath;
    };
    ShapePath.prototype.length = function() {
      return this._length;
    };
    var shapePool = function() {
      function create2() {
        return new ShapePath();
      }
      function release(shapePath) {
        var len = shapePath._length;
        var i3;
        for (i3 = 0; i3 < len; i3 += 1) {
          pointPool.release(shapePath.v[i3]);
          pointPool.release(shapePath.i[i3]);
          pointPool.release(shapePath.o[i3]);
          shapePath.v[i3] = null;
          shapePath.i[i3] = null;
          shapePath.o[i3] = null;
        }
        shapePath._length = 0;
        shapePath.c = false;
      }
      function clone2(shape2) {
        var cloned = factory.newElement();
        var i3;
        var len = shape2._length === void 0 ? shape2.v.length : shape2._length;
        cloned.setLength(len);
        cloned.c = shape2.c;
        for (i3 = 0; i3 < len; i3 += 1) {
          cloned.setTripleAt(shape2.v[i3][0], shape2.v[i3][1], shape2.o[i3][0], shape2.o[i3][1], shape2.i[i3][0], shape2.i[i3][1], i3);
        }
        return cloned;
      }
      var factory = poolFactory(4, create2, release);
      factory.clone = clone2;
      return factory;
    }();
    function ShapeCollection() {
      this._length = 0;
      this._maxLength = 4;
      this.shapes = createSizedArray(this._maxLength);
    }
    ShapeCollection.prototype.addShape = function(shapeData) {
      if (this._length === this._maxLength) {
        this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
        this._maxLength *= 2;
      }
      this.shapes[this._length] = shapeData;
      this._length += 1;
    };
    ShapeCollection.prototype.releaseShapes = function() {
      var i3;
      for (i3 = 0; i3 < this._length; i3 += 1) {
        shapePool.release(this.shapes[i3]);
      }
      this._length = 0;
    };
    var shapeCollectionPool = function() {
      var ob2 = {
        newShapeCollection,
        release
      };
      var _length = 0;
      var _maxLength = 4;
      var pool = createSizedArray(_maxLength);
      function newShapeCollection() {
        var shapeCollection;
        if (_length) {
          _length -= 1;
          shapeCollection = pool[_length];
        } else {
          shapeCollection = new ShapeCollection();
        }
        return shapeCollection;
      }
      function release(shapeCollection) {
        var i3;
        var len = shapeCollection._length;
        for (i3 = 0; i3 < len; i3 += 1) {
          shapePool.release(shapeCollection.shapes[i3]);
        }
        shapeCollection._length = 0;
        if (_length === _maxLength) {
          pool = pooling["double"](pool);
          _maxLength *= 2;
        }
        pool[_length] = shapeCollection;
        _length += 1;
      }
      return ob2;
    }();
    var ShapePropertyFactory = function() {
      var initFrame2 = -999999;
      function interpolateShape(frameNum, previousValue, caching) {
        var iterationIndex = caching.lastIndex;
        var keyPropS;
        var keyPropE;
        var isHold;
        var j2;
        var k3;
        var jLen;
        var kLen;
        var perc;
        var vertexValue;
        var kf2 = this.keyframes;
        if (frameNum < kf2[0].t - this.offsetTime) {
          keyPropS = kf2[0].s[0];
          isHold = true;
          iterationIndex = 0;
        } else if (frameNum >= kf2[kf2.length - 1].t - this.offsetTime) {
          keyPropS = kf2[kf2.length - 1].s ? kf2[kf2.length - 1].s[0] : kf2[kf2.length - 2].e[0];
          isHold = true;
        } else {
          var i3 = iterationIndex;
          var len = kf2.length - 1;
          var flag = true;
          var keyData;
          var nextKeyData;
          var keyframeMetadata;
          while (flag) {
            keyData = kf2[i3];
            nextKeyData = kf2[i3 + 1];
            if (nextKeyData.t - this.offsetTime > frameNum) {
              break;
            }
            if (i3 < len - 1) {
              i3 += 1;
            } else {
              flag = false;
            }
          }
          keyframeMetadata = this.keyframesMetadata[i3] || {};
          isHold = keyData.h === 1;
          iterationIndex = i3;
          if (!isHold) {
            if (frameNum >= nextKeyData.t - this.offsetTime) {
              perc = 1;
            } else if (frameNum < keyData.t - this.offsetTime) {
              perc = 0;
            } else {
              var fnc;
              if (keyframeMetadata.__fnct) {
                fnc = keyframeMetadata.__fnct;
              } else {
                fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                keyframeMetadata.__fnct = fnc;
              }
              perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
            }
            keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
          }
          keyPropS = keyData.s[0];
        }
        jLen = previousValue._length;
        kLen = keyPropS.i[0].length;
        caching.lastIndex = iterationIndex;
        for (j2 = 0; j2 < jLen; j2 += 1) {
          for (k3 = 0; k3 < kLen; k3 += 1) {
            vertexValue = isHold ? keyPropS.i[j2][k3] : keyPropS.i[j2][k3] + (keyPropE.i[j2][k3] - keyPropS.i[j2][k3]) * perc;
            previousValue.i[j2][k3] = vertexValue;
            vertexValue = isHold ? keyPropS.o[j2][k3] : keyPropS.o[j2][k3] + (keyPropE.o[j2][k3] - keyPropS.o[j2][k3]) * perc;
            previousValue.o[j2][k3] = vertexValue;
            vertexValue = isHold ? keyPropS.v[j2][k3] : keyPropS.v[j2][k3] + (keyPropE.v[j2][k3] - keyPropS.v[j2][k3]) * perc;
            previousValue.v[j2][k3] = vertexValue;
          }
        }
      }
      function interpolateShapeCurrentTime() {
        var frameNum = this.comp.renderedFrame - this.offsetTime;
        var initTime = this.keyframes[0].t - this.offsetTime;
        var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
        var lastFrame = this._caching.lastFrame;
        if (!(lastFrame !== initFrame2 && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
          this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
          this.interpolateShape(frameNum, this.pv, this._caching);
        }
        this._caching.lastFrame = frameNum;
        return this.pv;
      }
      function resetShape() {
        this.paths = this.localShapeCollection;
      }
      function shapesEqual(shape1, shape2) {
        if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
          return false;
        }
        var i3;
        var len = shape1._length;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (shape1.v[i3][0] !== shape2.v[i3][0] || shape1.v[i3][1] !== shape2.v[i3][1] || shape1.o[i3][0] !== shape2.o[i3][0] || shape1.o[i3][1] !== shape2.o[i3][1] || shape1.i[i3][0] !== shape2.i[i3][0] || shape1.i[i3][1] !== shape2.i[i3][1]) {
            return false;
          }
        }
        return true;
      }
      function setVValue2(newPath) {
        if (!shapesEqual(this.v, newPath)) {
          this.v = shapePool.clone(newPath);
          this.localShapeCollection.releaseShapes();
          this.localShapeCollection.addShape(this.v);
          this._mdf = true;
          this.paths = this.localShapeCollection;
        }
      }
      function processEffectsSequence2() {
        if (this.elem.globalData.frameId === this.frameId) {
          return;
        }
        if (!this.effectsSequence.length) {
          this._mdf = false;
          return;
        }
        if (this.lock) {
          this.setVValue(this.pv);
          return;
        }
        this.lock = true;
        this._mdf = false;
        var finalValue;
        if (this.kf) {
          finalValue = this.pv;
        } else if (this.data.ks) {
          finalValue = this.data.ks.k;
        } else {
          finalValue = this.data.pt.k;
        }
        var i3;
        var len = this.effectsSequence.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          finalValue = this.effectsSequence[i3](finalValue);
        }
        this.setVValue(finalValue);
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
      }
      function ShapeProperty(elem2, data2, type) {
        this.propType = "shape";
        this.comp = elem2.comp;
        this.container = elem2;
        this.elem = elem2;
        this.data = data2;
        this.k = false;
        this.kf = false;
        this._mdf = false;
        var pathData = type === 3 ? data2.pt.k : data2.ks.k;
        this.v = shapePool.clone(pathData);
        this.pv = shapePool.clone(this.v);
        this.localShapeCollection = shapeCollectionPool.newShapeCollection();
        this.paths = this.localShapeCollection;
        this.paths.addShape(this.v);
        this.reset = resetShape;
        this.effectsSequence = [];
      }
      function addEffect2(effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.container.addDynamicProperty(this);
      }
      ShapeProperty.prototype.interpolateShape = interpolateShape;
      ShapeProperty.prototype.getValue = processEffectsSequence2;
      ShapeProperty.prototype.setVValue = setVValue2;
      ShapeProperty.prototype.addEffect = addEffect2;
      function KeyframedShapeProperty(elem2, data2, type) {
        this.propType = "shape";
        this.comp = elem2.comp;
        this.elem = elem2;
        this.container = elem2;
        this.offsetTime = elem2.data.st;
        this.keyframes = type === 3 ? data2.pt.k : data2.ks.k;
        this.keyframesMetadata = [];
        this.k = true;
        this.kf = true;
        var len = this.keyframes[0].s[0].i.length;
        this.v = shapePool.newElement();
        this.v.setPathData(this.keyframes[0].s[0].c, len);
        this.pv = shapePool.clone(this.v);
        this.localShapeCollection = shapeCollectionPool.newShapeCollection();
        this.paths = this.localShapeCollection;
        this.paths.addShape(this.v);
        this.lastFrame = initFrame2;
        this.reset = resetShape;
        this._caching = {
          lastFrame: initFrame2,
          lastIndex: 0
        };
        this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
      }
      KeyframedShapeProperty.prototype.getValue = processEffectsSequence2;
      KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
      KeyframedShapeProperty.prototype.setVValue = setVValue2;
      KeyframedShapeProperty.prototype.addEffect = addEffect2;
      var EllShapeProperty = function() {
        var cPoint = roundCorner;
        function EllShapePropertyFactory(elem2, data2) {
          this.v = shapePool.newElement();
          this.v.setPathData(true, 4);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.paths = this.localShapeCollection;
          this.localShapeCollection.addShape(this.v);
          this.d = data2.d;
          this.elem = elem2;
          this.comp = elem2.comp;
          this.frameId = -1;
          this.initDynamicPropertyContainer(elem2);
          this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
          this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.k = false;
            this.convertEllToPath();
          }
        }
        EllShapePropertyFactory.prototype = {
          reset: resetShape,
          getValue: function getValue2() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            this.frameId = this.elem.globalData.frameId;
            this.iterateDynamicProperties();
            if (this._mdf) {
              this.convertEllToPath();
            }
          },
          convertEllToPath: function convertEllToPath() {
            var p0 = this.p.v[0];
            var p1 = this.p.v[1];
            var s0 = this.s.v[0] / 2;
            var s1 = this.s.v[1] / 2;
            var _cw = this.d !== 3;
            var _v = this.v;
            _v.v[0][0] = p0;
            _v.v[0][1] = p1 - s1;
            _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
            _v.v[1][1] = p1;
            _v.v[2][0] = p0;
            _v.v[2][1] = p1 + s1;
            _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
            _v.v[3][1] = p1;
            _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
            _v.i[0][1] = p1 - s1;
            _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
            _v.i[1][1] = p1 - s1 * cPoint;
            _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
            _v.i[2][1] = p1 + s1;
            _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
            _v.i[3][1] = p1 + s1 * cPoint;
            _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
            _v.o[0][1] = p1 - s1;
            _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
            _v.o[1][1] = p1 + s1 * cPoint;
            _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
            _v.o[2][1] = p1 + s1;
            _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
            _v.o[3][1] = p1 - s1 * cPoint;
          }
        };
        extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
        return EllShapePropertyFactory;
      }();
      var StarShapeProperty = function() {
        function StarShapePropertyFactory(elem2, data2) {
          this.v = shapePool.newElement();
          this.v.setPathData(true, 0);
          this.elem = elem2;
          this.comp = elem2.comp;
          this.data = data2;
          this.frameId = -1;
          this.d = data2.d;
          this.initDynamicPropertyContainer(elem2);
          if (data2.sy === 1) {
            this.ir = PropertyFactory.getProp(elem2, data2.ir, 0, 0, this);
            this.is = PropertyFactory.getProp(elem2, data2.is, 0, 0.01, this);
            this.convertToPath = this.convertStarToPath;
          } else {
            this.convertToPath = this.convertPolygonToPath;
          }
          this.pt = PropertyFactory.getProp(elem2, data2.pt, 0, 0, this);
          this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
          this.r = PropertyFactory.getProp(elem2, data2.r, 0, degToRads, this);
          this.or = PropertyFactory.getProp(elem2, data2.or, 0, 0, this);
          this.os = PropertyFactory.getProp(elem2, data2.os, 0, 0.01, this);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.localShapeCollection.addShape(this.v);
          this.paths = this.localShapeCollection;
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.k = false;
            this.convertToPath();
          }
        }
        StarShapePropertyFactory.prototype = {
          reset: resetShape,
          getValue: function getValue2() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            this.frameId = this.elem.globalData.frameId;
            this.iterateDynamicProperties();
            if (this._mdf) {
              this.convertToPath();
            }
          },
          convertStarToPath: function convertStarToPath() {
            var numPts = Math.floor(this.pt.v) * 2;
            var angle = Math.PI * 2 / numPts;
            var longFlag = true;
            var longRad = this.or.v;
            var shortRad = this.ir.v;
            var longRound = this.os.v;
            var shortRound = this.is.v;
            var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
            var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
            var i3;
            var rad;
            var roundness;
            var perimSegment;
            var currentAng = -Math.PI / 2;
            currentAng += this.r.v;
            var dir = this.data.d === 3 ? -1 : 1;
            this.v._length = 0;
            for (i3 = 0; i3 < numPts; i3 += 1) {
              rad = longFlag ? longRad : shortRad;
              roundness = longFlag ? longRound : shortRound;
              perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
              var x3 = rad * Math.cos(currentAng);
              var y4 = rad * Math.sin(currentAng);
              var ox = x3 === 0 && y4 === 0 ? 0 : y4 / Math.sqrt(x3 * x3 + y4 * y4);
              var oy = x3 === 0 && y4 === 0 ? 0 : -x3 / Math.sqrt(x3 * x3 + y4 * y4);
              x3 += +this.p.v[0];
              y4 += +this.p.v[1];
              this.v.setTripleAt(x3, y4, x3 - ox * perimSegment * roundness * dir, y4 - oy * perimSegment * roundness * dir, x3 + ox * perimSegment * roundness * dir, y4 + oy * perimSegment * roundness * dir, i3, true);
              longFlag = !longFlag;
              currentAng += angle * dir;
            }
          },
          convertPolygonToPath: function convertPolygonToPath() {
            var numPts = Math.floor(this.pt.v);
            var angle = Math.PI * 2 / numPts;
            var rad = this.or.v;
            var roundness = this.os.v;
            var perimSegment = 2 * Math.PI * rad / (numPts * 4);
            var i3;
            var currentAng = -Math.PI * 0.5;
            var dir = this.data.d === 3 ? -1 : 1;
            currentAng += this.r.v;
            this.v._length = 0;
            for (i3 = 0; i3 < numPts; i3 += 1) {
              var x3 = rad * Math.cos(currentAng);
              var y4 = rad * Math.sin(currentAng);
              var ox = x3 === 0 && y4 === 0 ? 0 : y4 / Math.sqrt(x3 * x3 + y4 * y4);
              var oy = x3 === 0 && y4 === 0 ? 0 : -x3 / Math.sqrt(x3 * x3 + y4 * y4);
              x3 += +this.p.v[0];
              y4 += +this.p.v[1];
              this.v.setTripleAt(x3, y4, x3 - ox * perimSegment * roundness * dir, y4 - oy * perimSegment * roundness * dir, x3 + ox * perimSegment * roundness * dir, y4 + oy * perimSegment * roundness * dir, i3, true);
              currentAng += angle * dir;
            }
            this.paths.length = 0;
            this.paths[0] = this.v;
          }
        };
        extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
        return StarShapePropertyFactory;
      }();
      var RectShapeProperty = function() {
        function RectShapePropertyFactory(elem2, data2) {
          this.v = shapePool.newElement();
          this.v.c = true;
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.localShapeCollection.addShape(this.v);
          this.paths = this.localShapeCollection;
          this.elem = elem2;
          this.comp = elem2.comp;
          this.frameId = -1;
          this.d = data2.d;
          this.initDynamicPropertyContainer(elem2);
          this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
          this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
          this.r = PropertyFactory.getProp(elem2, data2.r, 0, 0, this);
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.k = false;
            this.convertRectToPath();
          }
        }
        RectShapePropertyFactory.prototype = {
          convertRectToPath: function convertRectToPath() {
            var p0 = this.p.v[0];
            var p1 = this.p.v[1];
            var v0 = this.s.v[0] / 2;
            var v1 = this.s.v[1] / 2;
            var round2 = bmMin(v0, v1, this.r.v);
            var cPoint = round2 * (1 - roundCorner);
            this.v._length = 0;
            if (this.d === 2 || this.d === 1) {
              this.v.setTripleAt(p0 + v0, p1 - v1 + round2, p0 + v0, p1 - v1 + round2, p0 + v0, p1 - v1 + cPoint, 0, true);
              this.v.setTripleAt(p0 + v0, p1 + v1 - round2, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round2, 1, true);
              if (round2 !== 0) {
                this.v.setTripleAt(p0 + v0 - round2, p1 + v1, p0 + v0 - round2, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round2, p1 + v1, 3, true);
                this.v.setTripleAt(p0 - v0, p1 + v1 - round2, p0 - v0, p1 + v1 - round2, p0 - v0, p1 + v1 - cPoint, 4, true);
                this.v.setTripleAt(p0 - v0, p1 - v1 + round2, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round2, 5, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 - v1, p0 - v0 + round2, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                this.v.setTripleAt(p0 + v0 - round2, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round2, p1 - v1, 7, true);
              } else {
                this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
              }
            } else {
              this.v.setTripleAt(p0 + v0, p1 - v1 + round2, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round2, 0, true);
              if (round2 !== 0) {
                this.v.setTripleAt(p0 + v0 - round2, p1 - v1, p0 + v0 - round2, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round2, p1 - v1, 2, true);
                this.v.setTripleAt(p0 - v0, p1 - v1 + round2, p0 - v0, p1 - v1 + round2, p0 - v0, p1 - v1 + cPoint, 3, true);
                this.v.setTripleAt(p0 - v0, p1 + v1 - round2, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round2, 4, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 + v1, p0 - v0 + round2, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                this.v.setTripleAt(p0 + v0 - round2, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round2, p1 + v1, 6, true);
                this.v.setTripleAt(p0 + v0, p1 + v1 - round2, p0 + v0, p1 + v1 - round2, p0 + v0, p1 + v1 - cPoint, 7, true);
              } else {
                this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
              }
            }
          },
          getValue: function getValue2() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            this.frameId = this.elem.globalData.frameId;
            this.iterateDynamicProperties();
            if (this._mdf) {
              this.convertRectToPath();
            }
          },
          reset: resetShape
        };
        extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
        return RectShapePropertyFactory;
      }();
      function getShapeProp(elem2, data2, type) {
        var prop;
        if (type === 3 || type === 4) {
          var dataProp = type === 3 ? data2.pt : data2.ks;
          var keys2 = dataProp.k;
          if (keys2.length) {
            prop = new KeyframedShapeProperty(elem2, data2, type);
          } else {
            prop = new ShapeProperty(elem2, data2, type);
          }
        } else if (type === 5) {
          prop = new RectShapeProperty(elem2, data2);
        } else if (type === 6) {
          prop = new EllShapeProperty(elem2, data2);
        } else if (type === 7) {
          prop = new StarShapeProperty(elem2, data2);
        }
        if (prop.k) {
          elem2.addDynamicProperty(prop);
        }
        return prop;
      }
      function getConstructorFunction() {
        return ShapeProperty;
      }
      function getKeyframedConstructorFunction() {
        return KeyframedShapeProperty;
      }
      var ob2 = {};
      ob2.getShapeProp = getShapeProp;
      ob2.getConstructorFunction = getConstructorFunction;
      ob2.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
      return ob2;
    }();
    /*!
     Transformation Matrix v2.0
     (c) Epistemex 2014-2015
     www.epistemex.com
     By Ken Fyrstenberg
     Contributions by leeoniya.
     License: MIT, header required.
     */
    var Matrix = function() {
      var _cos = Math.cos;
      var _sin = Math.sin;
      var _tan = Math.tan;
      var _rnd = Math.round;
      function reset() {
        this.props[0] = 1;
        this.props[1] = 0;
        this.props[2] = 0;
        this.props[3] = 0;
        this.props[4] = 0;
        this.props[5] = 1;
        this.props[6] = 0;
        this.props[7] = 0;
        this.props[8] = 0;
        this.props[9] = 0;
        this.props[10] = 1;
        this.props[11] = 0;
        this.props[12] = 0;
        this.props[13] = 0;
        this.props[14] = 0;
        this.props[15] = 1;
        return this;
      }
      function rotate(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function rotateX(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
      }
      function rotateY(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
      }
      function rotateZ(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function shear(sx, sy) {
        return this._t(1, sy, sx, 1, 0, 0);
      }
      function skew(ax, ay) {
        return this.shear(_tan(ax), _tan(ay));
      }
      function skewFromAxis(ax, angle) {
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function scale2(sx, sy, sz) {
        if (!sz && sz !== 0) {
          sz = 1;
        }
        if (sx === 1 && sy === 1 && sz === 1) {
          return this;
        }
        return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
      }
      function setTransform(a4, b3, c7, d4, e3, f2, g2, h4, i3, j2, k3, l2, m4, n2, o2, p2) {
        this.props[0] = a4;
        this.props[1] = b3;
        this.props[2] = c7;
        this.props[3] = d4;
        this.props[4] = e3;
        this.props[5] = f2;
        this.props[6] = g2;
        this.props[7] = h4;
        this.props[8] = i3;
        this.props[9] = j2;
        this.props[10] = k3;
        this.props[11] = l2;
        this.props[12] = m4;
        this.props[13] = n2;
        this.props[14] = o2;
        this.props[15] = p2;
        return this;
      }
      function translate(tx, ty, tz) {
        tz = tz || 0;
        if (tx !== 0 || ty !== 0 || tz !== 0) {
          return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
        }
        return this;
      }
      function transform2(a22, b22, c22, d22, e22, f2, g2, h22, i22, j2, k22, l2, m22, n2, o2, p2) {
        var _p = this.props;
        if (a22 === 1 && b22 === 0 && c22 === 0 && d22 === 0 && e22 === 0 && f2 === 1 && g2 === 0 && h22 === 0 && i22 === 0 && j2 === 0 && k22 === 1 && l2 === 0) {
          _p[12] = _p[12] * a22 + _p[15] * m22;
          _p[13] = _p[13] * f2 + _p[15] * n2;
          _p[14] = _p[14] * k22 + _p[15] * o2;
          _p[15] *= p2;
          this._identityCalculated = false;
          return this;
        }
        var a1 = _p[0];
        var b1 = _p[1];
        var c12 = _p[2];
        var d1 = _p[3];
        var e1 = _p[4];
        var f1 = _p[5];
        var g1 = _p[6];
        var h1 = _p[7];
        var i1 = _p[8];
        var j1 = _p[9];
        var k1 = _p[10];
        var l1 = _p[11];
        var m1 = _p[12];
        var n1 = _p[13];
        var o1 = _p[14];
        var p1 = _p[15];
        _p[0] = a1 * a22 + b1 * e22 + c12 * i22 + d1 * m22;
        _p[1] = a1 * b22 + b1 * f2 + c12 * j2 + d1 * n2;
        _p[2] = a1 * c22 + b1 * g2 + c12 * k22 + d1 * o2;
        _p[3] = a1 * d22 + b1 * h22 + c12 * l2 + d1 * p2;
        _p[4] = e1 * a22 + f1 * e22 + g1 * i22 + h1 * m22;
        _p[5] = e1 * b22 + f1 * f2 + g1 * j2 + h1 * n2;
        _p[6] = e1 * c22 + f1 * g2 + g1 * k22 + h1 * o2;
        _p[7] = e1 * d22 + f1 * h22 + g1 * l2 + h1 * p2;
        _p[8] = i1 * a22 + j1 * e22 + k1 * i22 + l1 * m22;
        _p[9] = i1 * b22 + j1 * f2 + k1 * j2 + l1 * n2;
        _p[10] = i1 * c22 + j1 * g2 + k1 * k22 + l1 * o2;
        _p[11] = i1 * d22 + j1 * h22 + k1 * l2 + l1 * p2;
        _p[12] = m1 * a22 + n1 * e22 + o1 * i22 + p1 * m22;
        _p[13] = m1 * b22 + n1 * f2 + o1 * j2 + p1 * n2;
        _p[14] = m1 * c22 + n1 * g2 + o1 * k22 + p1 * o2;
        _p[15] = m1 * d22 + n1 * h22 + o1 * l2 + p1 * p2;
        this._identityCalculated = false;
        return this;
      }
      function multiply(matrix) {
        var matrixProps = matrix.props;
        return this.transform(matrixProps[0], matrixProps[1], matrixProps[2], matrixProps[3], matrixProps[4], matrixProps[5], matrixProps[6], matrixProps[7], matrixProps[8], matrixProps[9], matrixProps[10], matrixProps[11], matrixProps[12], matrixProps[13], matrixProps[14], matrixProps[15]);
      }
      function isIdentity() {
        if (!this._identityCalculated) {
          this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
          this._identityCalculated = true;
        }
        return this._identity;
      }
      function equals(matr) {
        var i3 = 0;
        while (i3 < 16) {
          if (matr.props[i3] !== this.props[i3]) {
            return false;
          }
          i3 += 1;
        }
        return true;
      }
      function clone2(matr) {
        var i3;
        for (i3 = 0; i3 < 16; i3 += 1) {
          matr.props[i3] = this.props[i3];
        }
        return matr;
      }
      function cloneFromProps(props) {
        var i3;
        for (i3 = 0; i3 < 16; i3 += 1) {
          this.props[i3] = props[i3];
        }
      }
      function applyToPoint(x3, y4, z3) {
        return {
          x: x3 * this.props[0] + y4 * this.props[4] + z3 * this.props[8] + this.props[12],
          y: x3 * this.props[1] + y4 * this.props[5] + z3 * this.props[9] + this.props[13],
          z: x3 * this.props[2] + y4 * this.props[6] + z3 * this.props[10] + this.props[14]
        };
      }
      function applyToX(x3, y4, z3) {
        return x3 * this.props[0] + y4 * this.props[4] + z3 * this.props[8] + this.props[12];
      }
      function applyToY(x3, y4, z3) {
        return x3 * this.props[1] + y4 * this.props[5] + z3 * this.props[9] + this.props[13];
      }
      function applyToZ(x3, y4, z3) {
        return x3 * this.props[2] + y4 * this.props[6] + z3 * this.props[10] + this.props[14];
      }
      function getInverseMatrix() {
        var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
        var a4 = this.props[5] / determinant;
        var b3 = -this.props[1] / determinant;
        var c7 = -this.props[4] / determinant;
        var d4 = this.props[0] / determinant;
        var e3 = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
        var f2 = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
        var inverseMatrix = new Matrix();
        inverseMatrix.props[0] = a4;
        inverseMatrix.props[1] = b3;
        inverseMatrix.props[4] = c7;
        inverseMatrix.props[5] = d4;
        inverseMatrix.props[12] = e3;
        inverseMatrix.props[13] = f2;
        return inverseMatrix;
      }
      function inversePoint(pt2) {
        var inverseMatrix = this.getInverseMatrix();
        return inverseMatrix.applyToPointArray(pt2[0], pt2[1], pt2[2] || 0);
      }
      function inversePoints(pts) {
        var i3;
        var len = pts.length;
        var retPts = [];
        for (i3 = 0; i3 < len; i3 += 1) {
          retPts[i3] = inversePoint(pts[i3]);
        }
        return retPts;
      }
      function applyToTriplePoints(pt1, pt2, pt3) {
        var arr = createTypedArray("float32", 6);
        if (this.isIdentity()) {
          arr[0] = pt1[0];
          arr[1] = pt1[1];
          arr[2] = pt2[0];
          arr[3] = pt2[1];
          arr[4] = pt3[0];
          arr[5] = pt3[1];
        } else {
          var p0 = this.props[0];
          var p1 = this.props[1];
          var p4 = this.props[4];
          var p5 = this.props[5];
          var p12 = this.props[12];
          var p13 = this.props[13];
          arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
          arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
          arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
          arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
          arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
          arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
        }
        return arr;
      }
      function applyToPointArray(x3, y4, z3) {
        var arr;
        if (this.isIdentity()) {
          arr = [x3, y4, z3];
        } else {
          arr = [x3 * this.props[0] + y4 * this.props[4] + z3 * this.props[8] + this.props[12], x3 * this.props[1] + y4 * this.props[5] + z3 * this.props[9] + this.props[13], x3 * this.props[2] + y4 * this.props[6] + z3 * this.props[10] + this.props[14]];
        }
        return arr;
      }
      function applyToPointStringified(x3, y4) {
        if (this.isIdentity()) {
          return x3 + "," + y4;
        }
        var _p = this.props;
        return Math.round((x3 * _p[0] + y4 * _p[4] + _p[12]) * 100) / 100 + "," + Math.round((x3 * _p[1] + y4 * _p[5] + _p[13]) * 100) / 100;
      }
      function toCSS() {
        var i3 = 0;
        var props = this.props;
        var cssValue = "matrix3d(";
        var v2 = 1e4;
        while (i3 < 16) {
          cssValue += _rnd(props[i3] * v2) / v2;
          cssValue += i3 === 15 ? ")" : ",";
          i3 += 1;
        }
        return cssValue;
      }
      function roundMatrixProperty(val2) {
        var v2 = 1e4;
        if (val2 < 1e-6 && val2 > 0 || val2 > -1e-6 && val2 < 0) {
          return _rnd(val2 * v2) / v2;
        }
        return val2;
      }
      function to2dCSS() {
        var props = this.props;
        var _a2 = roundMatrixProperty(props[0]);
        var _b2 = roundMatrixProperty(props[1]);
        var _c2 = roundMatrixProperty(props[4]);
        var _d2 = roundMatrixProperty(props[5]);
        var _e3 = roundMatrixProperty(props[12]);
        var _f = roundMatrixProperty(props[13]);
        return "matrix(" + _a2 + "," + _b2 + "," + _c2 + "," + _d2 + "," + _e3 + "," + _f + ")";
      }
      return function() {
        this.reset = reset;
        this.rotate = rotate;
        this.rotateX = rotateX;
        this.rotateY = rotateY;
        this.rotateZ = rotateZ;
        this.skew = skew;
        this.skewFromAxis = skewFromAxis;
        this.shear = shear;
        this.scale = scale2;
        this.setTransform = setTransform;
        this.translate = translate;
        this.transform = transform2;
        this.multiply = multiply;
        this.applyToPoint = applyToPoint;
        this.applyToX = applyToX;
        this.applyToY = applyToY;
        this.applyToZ = applyToZ;
        this.applyToPointArray = applyToPointArray;
        this.applyToTriplePoints = applyToTriplePoints;
        this.applyToPointStringified = applyToPointStringified;
        this.toCSS = toCSS;
        this.to2dCSS = to2dCSS;
        this.clone = clone2;
        this.cloneFromProps = cloneFromProps;
        this.equals = equals;
        this.inversePoints = inversePoints;
        this.inversePoint = inversePoint;
        this.getInverseMatrix = getInverseMatrix;
        this._t = this.transform;
        this.isIdentity = isIdentity;
        this._identity = true;
        this._identityCalculated = false;
        this.props = createTypedArray("float32", 16);
        this.reset();
      };
    }();
    function _typeof$3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$3 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$3 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$3(obj);
    }
    var lottie = {};
    function setLocation(href) {
      setLocationHref(href);
    }
    function searchAnimations() {
      {
        animationManager.searchAnimations();
      }
    }
    function setSubframeRendering(flag) {
      setSubframeEnabled(flag);
    }
    function setPrefix(prefix2) {
      setIdPrefix(prefix2);
    }
    function loadAnimation(params) {
      return animationManager.loadAnimation(params);
    }
    function setQuality(value2) {
      if (typeof value2 === "string") {
        switch (value2) {
          case "high":
            setDefaultCurveSegments(200);
            break;
          default:
          case "medium":
            setDefaultCurveSegments(50);
            break;
          case "low":
            setDefaultCurveSegments(10);
            break;
        }
      } else if (!isNaN(value2) && value2 > 1) {
        setDefaultCurveSegments(value2);
      }
    }
    function inBrowser() {
      return typeof navigator !== "undefined";
    }
    function installPlugin(type, plugin2) {
      if (type === "expressions") {
        setExpressionsPlugin(plugin2);
      }
    }
    function getFactory(name2) {
      switch (name2) {
        case "propertyFactory":
          return PropertyFactory;
        case "shapePropertyFactory":
          return ShapePropertyFactory;
        case "matrix":
          return Matrix;
        default:
          return null;
      }
    }
    lottie.play = animationManager.play;
    lottie.pause = animationManager.pause;
    lottie.setLocationHref = setLocation;
    lottie.togglePause = animationManager.togglePause;
    lottie.setSpeed = animationManager.setSpeed;
    lottie.setDirection = animationManager.setDirection;
    lottie.stop = animationManager.stop;
    lottie.searchAnimations = searchAnimations;
    lottie.registerAnimation = animationManager.registerAnimation;
    lottie.loadAnimation = loadAnimation;
    lottie.setSubframeRendering = setSubframeRendering;
    lottie.resize = animationManager.resize;
    lottie.goToAndStop = animationManager.goToAndStop;
    lottie.destroy = animationManager.destroy;
    lottie.setQuality = setQuality;
    lottie.inBrowser = inBrowser;
    lottie.installPlugin = installPlugin;
    lottie.freeze = animationManager.freeze;
    lottie.unfreeze = animationManager.unfreeze;
    lottie.setVolume = animationManager.setVolume;
    lottie.mute = animationManager.mute;
    lottie.unmute = animationManager.unmute;
    lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
    lottie.useWebWorker = setWebWorker;
    lottie.setIDPrefix = setPrefix;
    lottie.__getFactory = getFactory;
    lottie.version = "5.12.2";
    function checkReady() {
      if (document.readyState === "complete") {
        clearInterval(readyStateCheckInterval);
        searchAnimations();
      }
    }
    function getQueryVariable(variable) {
      var vars = queryString.split("&");
      for (var i3 = 0; i3 < vars.length; i3 += 1) {
        var pair = vars[i3].split("=");
        if (decodeURIComponent(pair[0]) == variable) {
          return decodeURIComponent(pair[1]);
        }
      }
      return null;
    }
    var queryString = "";
    {
      var scripts = document.getElementsByTagName("script");
      var index = scripts.length - 1;
      var myScript = scripts[index] || {
        src: ""
      };
      queryString = myScript.src ? myScript.src.replace(/^[^\?]+\??/, "") : "";
      getQueryVariable("renderer");
    }
    var readyStateCheckInterval = setInterval(checkReady, 100);
    try {
      if (!((false ? "undefined" : _typeof$3(exports)) === "object" && true) && true) {
        window.bodymovin = lottie;
      }
    } catch (err) {
    }
    var ShapeModifiers = function() {
      var ob2 = {};
      var modifiers = {};
      ob2.registerModifier = registerModifier;
      ob2.getModifier = getModifier;
      function registerModifier(nm2, factory) {
        if (!modifiers[nm2]) {
          modifiers[nm2] = factory;
        }
      }
      function getModifier(nm2, elem2, data2) {
        return new modifiers[nm2](elem2, data2);
      }
      return ob2;
    }();
    function ShapeModifier() {
    }
    ShapeModifier.prototype.initModifierProperties = function() {
    };
    ShapeModifier.prototype.addShapeToModifier = function() {
    };
    ShapeModifier.prototype.addShape = function(data2) {
      if (!this.closed) {
        data2.sh.container.addDynamicProperty(data2.sh);
        var shapeData = {
          shape: data2.sh,
          data: data2,
          localShapeCollection: shapeCollectionPool.newShapeCollection()
        };
        this.shapes.push(shapeData);
        this.addShapeToModifier(shapeData);
        if (this._isAnimated) {
          data2.setAsAnimated();
        }
      }
    };
    ShapeModifier.prototype.init = function(elem2, data2) {
      this.shapes = [];
      this.elem = elem2;
      this.initDynamicPropertyContainer(elem2);
      this.initModifierProperties(elem2, data2);
      this.frameId = initialDefaultFrame;
      this.closed = false;
      this.k = false;
      if (this.dynamicProperties.length) {
        this.k = true;
      } else {
        this.getValue(true);
      }
    };
    ShapeModifier.prototype.processKeys = function() {
      if (this.elem.globalData.frameId === this.frameId) {
        return;
      }
      this.frameId = this.elem.globalData.frameId;
      this.iterateDynamicProperties();
    };
    extendPrototype([DynamicPropertyContainer], ShapeModifier);
    function TrimModifier() {
    }
    extendPrototype([ShapeModifier], TrimModifier);
    TrimModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.s = PropertyFactory.getProp(elem2, data2.s, 0, 0.01, this);
      this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0.01, this);
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0, this);
      this.sValue = 0;
      this.eValue = 0;
      this.getValue = this.processKeys;
      this.m = data2.m;
      this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
    };
    TrimModifier.prototype.addShapeToModifier = function(shapeData) {
      shapeData.pathsData = [];
    };
    TrimModifier.prototype.calculateShapeEdges = function(s4, e3, shapeLength, addedLength, totalModifierLength) {
      var segments = [];
      if (e3 <= 1) {
        segments.push({
          s: s4,
          e: e3
        });
      } else if (s4 >= 1) {
        segments.push({
          s: s4 - 1,
          e: e3 - 1
        });
      } else {
        segments.push({
          s: s4,
          e: 1
        });
        segments.push({
          s: 0,
          e: e3 - 1
        });
      }
      var shapeSegments = [];
      var i3;
      var len = segments.length;
      var segmentOb;
      for (i3 = 0; i3 < len; i3 += 1) {
        segmentOb = segments[i3];
        if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {
          var shapeS;
          var shapeE;
          if (segmentOb.s * totalModifierLength <= addedLength) {
            shapeS = 0;
          } else {
            shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
          }
          if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
            shapeE = 1;
          } else {
            shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
          }
          shapeSegments.push([shapeS, shapeE]);
        }
      }
      if (!shapeSegments.length) {
        shapeSegments.push([0, 0]);
      }
      return shapeSegments;
    };
    TrimModifier.prototype.releasePathsData = function(pathsData) {
      var i3;
      var len = pathsData.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        segmentsLengthPool.release(pathsData[i3]);
      }
      pathsData.length = 0;
      return pathsData;
    };
    TrimModifier.prototype.processShapes = function(_isFirstFrame) {
      var s4;
      var e3;
      if (this._mdf || _isFirstFrame) {
        var o2 = this.o.v % 360 / 360;
        if (o2 < 0) {
          o2 += 1;
        }
        if (this.s.v > 1) {
          s4 = 1 + o2;
        } else if (this.s.v < 0) {
          s4 = 0 + o2;
        } else {
          s4 = this.s.v + o2;
        }
        if (this.e.v > 1) {
          e3 = 1 + o2;
        } else if (this.e.v < 0) {
          e3 = 0 + o2;
        } else {
          e3 = this.e.v + o2;
        }
        if (s4 > e3) {
          var _s = s4;
          s4 = e3;
          e3 = _s;
        }
        s4 = Math.round(s4 * 1e4) * 1e-4;
        e3 = Math.round(e3 * 1e4) * 1e-4;
        this.sValue = s4;
        this.eValue = e3;
      } else {
        s4 = this.sValue;
        e3 = this.eValue;
      }
      var shapePaths;
      var i3;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var pathsData;
      var pathData;
      var totalShapeLength;
      var totalModifierLength = 0;
      if (e3 === s4) {
        for (i3 = 0; i3 < len; i3 += 1) {
          this.shapes[i3].localShapeCollection.releaseShapes();
          this.shapes[i3].shape._mdf = true;
          this.shapes[i3].shape.paths = this.shapes[i3].localShapeCollection;
          if (this._mdf) {
            this.shapes[i3].pathsData.length = 0;
          }
        }
      } else if (!(e3 === 1 && s4 === 0 || e3 === 0 && s4 === 1)) {
        var segments = [];
        var shapeData;
        var localShapeCollection;
        for (i3 = 0; i3 < len; i3 += 1) {
          shapeData = this.shapes[i3];
          if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
            shapeData.shape.paths = shapeData.localShapeCollection;
          } else {
            shapePaths = shapeData.shape.paths;
            jLen = shapePaths._length;
            totalShapeLength = 0;
            if (!shapeData.shape._mdf && shapeData.pathsData.length) {
              totalShapeLength = shapeData.totalShapeLength;
            } else {
              pathsData = this.releasePathsData(shapeData.pathsData);
              for (j2 = 0; j2 < jLen; j2 += 1) {
                pathData = bez.getSegmentsLength(shapePaths.shapes[j2]);
                pathsData.push(pathData);
                totalShapeLength += pathData.totalLength;
              }
              shapeData.totalShapeLength = totalShapeLength;
              shapeData.pathsData = pathsData;
            }
            totalModifierLength += totalShapeLength;
            shapeData.shape._mdf = true;
          }
        }
        var shapeS = s4;
        var shapeE = e3;
        var addedLength = 0;
        var edges;
        for (i3 = len - 1; i3 >= 0; i3 -= 1) {
          shapeData = this.shapes[i3];
          if (shapeData.shape._mdf) {
            localShapeCollection = shapeData.localShapeCollection;
            localShapeCollection.releaseShapes();
            if (this.m === 2 && len > 1) {
              edges = this.calculateShapeEdges(s4, e3, shapeData.totalShapeLength, addedLength, totalModifierLength);
              addedLength += shapeData.totalShapeLength;
            } else {
              edges = [[shapeS, shapeE]];
            }
            jLen = edges.length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              shapeS = edges[j2][0];
              shapeE = edges[j2][1];
              segments.length = 0;
              if (shapeE <= 1) {
                segments.push({
                  s: shapeData.totalShapeLength * shapeS,
                  e: shapeData.totalShapeLength * shapeE
                });
              } else if (shapeS >= 1) {
                segments.push({
                  s: shapeData.totalShapeLength * (shapeS - 1),
                  e: shapeData.totalShapeLength * (shapeE - 1)
                });
              } else {
                segments.push({
                  s: shapeData.totalShapeLength * shapeS,
                  e: shapeData.totalShapeLength
                });
                segments.push({
                  s: 0,
                  e: shapeData.totalShapeLength * (shapeE - 1)
                });
              }
              var newShapesData = this.addShapes(shapeData, segments[0]);
              if (segments[0].s !== segments[0].e) {
                if (segments.length > 1) {
                  var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
                  if (lastShapeInCollection.c) {
                    var lastShape = newShapesData.pop();
                    this.addPaths(newShapesData, localShapeCollection);
                    newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                  } else {
                    this.addPaths(newShapesData, localShapeCollection);
                    newShapesData = this.addShapes(shapeData, segments[1]);
                  }
                }
                this.addPaths(newShapesData, localShapeCollection);
              }
            }
            shapeData.shape.paths = localShapeCollection;
          }
        }
      } else if (this._mdf) {
        for (i3 = 0; i3 < len; i3 += 1) {
          this.shapes[i3].pathsData.length = 0;
          this.shapes[i3].shape._mdf = true;
        }
      }
    };
    TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
      var i3;
      var len = newPaths.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        localShapeCollection.addShape(newPaths[i3]);
      }
    };
    TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
      shapePath.setXYAt(pt2[0], pt2[1], "o", pos);
      shapePath.setXYAt(pt3[0], pt3[1], "i", pos + 1);
      if (newShape) {
        shapePath.setXYAt(pt1[0], pt1[1], "v", pos);
      }
      shapePath.setXYAt(pt4[0], pt4[1], "v", pos + 1);
    };
    TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
      shapePath.setXYAt(points[1], points[5], "o", pos);
      shapePath.setXYAt(points[2], points[6], "i", pos + 1);
      if (newShape) {
        shapePath.setXYAt(points[0], points[4], "v", pos);
      }
      shapePath.setXYAt(points[3], points[7], "v", pos + 1);
    };
    TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
      var pathsData = shapeData.pathsData;
      var shapePaths = shapeData.shape.paths.shapes;
      var i3;
      var len = shapeData.shape.paths._length;
      var j2;
      var jLen;
      var addedLength = 0;
      var currentLengthData;
      var segmentCount;
      var lengths;
      var segment;
      var shapes = [];
      var initPos;
      var newShape = true;
      if (!shapePath) {
        shapePath = shapePool.newElement();
        segmentCount = 0;
        initPos = 0;
      } else {
        segmentCount = shapePath._length;
        initPos = shapePath._length;
      }
      shapes.push(shapePath);
      for (i3 = 0; i3 < len; i3 += 1) {
        lengths = pathsData[i3].lengths;
        shapePath.c = shapePaths[i3].c;
        jLen = shapePaths[i3].c ? lengths.length : lengths.length + 1;
        for (j2 = 1; j2 < jLen; j2 += 1) {
          currentLengthData = lengths[j2 - 1];
          if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
            addedLength += currentLengthData.addedLength;
            shapePath.c = false;
          } else if (addedLength > shapeSegment.e) {
            shapePath.c = false;
            break;
          } else {
            if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
              this.addSegment(shapePaths[i3].v[j2 - 1], shapePaths[i3].o[j2 - 1], shapePaths[i3].i[j2], shapePaths[i3].v[j2], shapePath, segmentCount, newShape);
              newShape = false;
            } else {
              segment = bez.getNewSegment(shapePaths[i3].v[j2 - 1], shapePaths[i3].v[j2], shapePaths[i3].o[j2 - 1], shapePaths[i3].i[j2], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j2 - 1]);
              this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
              newShape = false;
              shapePath.c = false;
            }
            addedLength += currentLengthData.addedLength;
            segmentCount += 1;
          }
        }
        if (shapePaths[i3].c && lengths.length) {
          currentLengthData = lengths[j2 - 1];
          if (addedLength <= shapeSegment.e) {
            var segmentLength = lengths[j2 - 1].addedLength;
            if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
              this.addSegment(shapePaths[i3].v[j2 - 1], shapePaths[i3].o[j2 - 1], shapePaths[i3].i[0], shapePaths[i3].v[0], shapePath, segmentCount, newShape);
              newShape = false;
            } else {
              segment = bez.getNewSegment(shapePaths[i3].v[j2 - 1], shapePaths[i3].v[0], shapePaths[i3].o[j2 - 1], shapePaths[i3].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j2 - 1]);
              this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
              newShape = false;
              shapePath.c = false;
            }
          } else {
            shapePath.c = false;
          }
          addedLength += currentLengthData.addedLength;
          segmentCount += 1;
        }
        if (shapePath._length) {
          shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], "i", initPos);
          shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], "o", shapePath._length - 1);
        }
        if (addedLength > shapeSegment.e) {
          break;
        }
        if (i3 < len - 1) {
          shapePath = shapePool.newElement();
          newShape = true;
          shapes.push(shapePath);
          segmentCount = 0;
        }
      }
      return shapes;
    };
    function PuckerAndBloatModifier() {
    }
    extendPrototype([ShapeModifier], PuckerAndBloatModifier);
    PuckerAndBloatModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
      this._isAnimated = !!this.amount.effectsSequence.length;
    };
    PuckerAndBloatModifier.prototype.processPath = function(path, amount) {
      var percent = amount / 100;
      var centerPoint = [0, 0];
      var pathLength = path._length;
      var i3 = 0;
      for (i3 = 0; i3 < pathLength; i3 += 1) {
        centerPoint[0] += path.v[i3][0];
        centerPoint[1] += path.v[i3][1];
      }
      centerPoint[0] /= pathLength;
      centerPoint[1] /= pathLength;
      var clonedPath = shapePool.newElement();
      clonedPath.c = path.c;
      var vX;
      var vY;
      var oX;
      var oY;
      var iX;
      var iY;
      for (i3 = 0; i3 < pathLength; i3 += 1) {
        vX = path.v[i3][0] + (centerPoint[0] - path.v[i3][0]) * percent;
        vY = path.v[i3][1] + (centerPoint[1] - path.v[i3][1]) * percent;
        oX = path.o[i3][0] + (centerPoint[0] - path.o[i3][0]) * -percent;
        oY = path.o[i3][1] + (centerPoint[1] - path.o[i3][1]) * -percent;
        iX = path.i[i3][0] + (centerPoint[0] - path.i[i3][0]) * -percent;
        iY = path.i[i3][1] + (centerPoint[1] - path.i[i3][1]) * -percent;
        clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i3);
      }
      return clonedPath;
    };
    PuckerAndBloatModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i3;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var amount = this.amount.v;
      if (amount !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i3 = 0; i3 < len; i3 += 1) {
          shapeData = this.shapes[i3];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j2], amount));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    var TransformPropertyFactory = function() {
      var defaultVector = [0, 0];
      function applyToMatrix(mat) {
        var _mdf = this._mdf;
        this.iterateDynamicProperties();
        this._mdf = this._mdf || _mdf;
        if (this.a) {
          mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
        }
        if (this.s) {
          mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
        }
        if (this.sk) {
          mat.skewFromAxis(-this.sk.v, this.sa.v);
        }
        if (this.r) {
          mat.rotate(-this.r.v);
        } else {
          mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
        }
        if (this.data.p.s) {
          if (this.data.p.z) {
            mat.translate(this.px.v, this.py.v, -this.pz.v);
          } else {
            mat.translate(this.px.v, this.py.v, 0);
          }
        } else {
          mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
        }
      }
      function processKeys(forceRender) {
        if (this.elem.globalData.frameId === this.frameId) {
          return;
        }
        if (this._isDirty) {
          this.precalculateMatrix();
          this._isDirty = false;
        }
        this.iterateDynamicProperties();
        if (this._mdf || forceRender) {
          var frameRate;
          this.v.cloneFromProps(this.pre.props);
          if (this.appliedTransformations < 1) {
            this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
          }
          if (this.appliedTransformations < 2) {
            this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
          }
          if (this.sk && this.appliedTransformations < 3) {
            this.v.skewFromAxis(-this.sk.v, this.sa.v);
          }
          if (this.r && this.appliedTransformations < 4) {
            this.v.rotate(-this.r.v);
          } else if (!this.r && this.appliedTransformations < 4) {
            this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
          }
          if (this.autoOriented) {
            var v1;
            var v2;
            frameRate = this.elem.globalData.frameRate;
            if (this.p && this.p.keyframes && this.p.getValueAtTime) {
              if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
              } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
                v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
              } else {
                v1 = this.p.pv;
                v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
              }
            } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
              v1 = [];
              v2 = [];
              var px = this.px;
              var py = this.py;
              if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
                v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
                v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                v2[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
                v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
              } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);
                v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
                v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
                v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
              } else {
                v1 = [px.pv, py.pv];
                v2[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
                v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
              }
            } else {
              v2 = defaultVector;
              v1 = v2;
            }
            this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
          }
          if (this.data.p && this.data.p.s) {
            if (this.data.p.z) {
              this.v.translate(this.px.v, this.py.v, -this.pz.v);
            } else {
              this.v.translate(this.px.v, this.py.v, 0);
            }
          } else {
            this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
          }
        }
        this.frameId = this.elem.globalData.frameId;
      }
      function precalculateMatrix() {
        this.appliedTransformations = 0;
        this.pre.reset();
        if (!this.a.effectsSequence.length) {
          this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
          this.appliedTransformations = 1;
        } else {
          return;
        }
        if (!this.s.effectsSequence.length) {
          this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
          this.appliedTransformations = 2;
        } else {
          return;
        }
        if (this.sk) {
          if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
            this.pre.skewFromAxis(-this.sk.v, this.sa.v);
            this.appliedTransformations = 3;
          } else {
            return;
          }
        }
        if (this.r) {
          if (!this.r.effectsSequence.length) {
            this.pre.rotate(-this.r.v);
            this.appliedTransformations = 4;
          }
        } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
          this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
          this.appliedTransformations = 4;
        }
      }
      function autoOrient() {
      }
      function addDynamicProperty(prop) {
        this._addDynamicProperty(prop);
        this.elem.addDynamicProperty(prop);
        this._isDirty = true;
      }
      function TransformProperty(elem2, data2, container2) {
        this.elem = elem2;
        this.frameId = -1;
        this.propType = "transform";
        this.data = data2;
        this.v = new Matrix();
        this.pre = new Matrix();
        this.appliedTransformations = 0;
        this.initDynamicPropertyContainer(container2 || elem2);
        if (data2.p && data2.p.s) {
          this.px = PropertyFactory.getProp(elem2, data2.p.x, 0, 0, this);
          this.py = PropertyFactory.getProp(elem2, data2.p.y, 0, 0, this);
          if (data2.p.z) {
            this.pz = PropertyFactory.getProp(elem2, data2.p.z, 0, 0, this);
          }
        } else {
          this.p = PropertyFactory.getProp(elem2, data2.p || {
            k: [0, 0, 0]
          }, 1, 0, this);
        }
        if (data2.rx) {
          this.rx = PropertyFactory.getProp(elem2, data2.rx, 0, degToRads, this);
          this.ry = PropertyFactory.getProp(elem2, data2.ry, 0, degToRads, this);
          this.rz = PropertyFactory.getProp(elem2, data2.rz, 0, degToRads, this);
          if (data2.or.k[0].ti) {
            var i3;
            var len = data2.or.k.length;
            for (i3 = 0; i3 < len; i3 += 1) {
              data2.or.k[i3].to = null;
              data2.or.k[i3].ti = null;
            }
          }
          this.or = PropertyFactory.getProp(elem2, data2.or, 1, degToRads, this);
          this.or.sh = true;
        } else {
          this.r = PropertyFactory.getProp(elem2, data2.r || {
            k: 0
          }, 0, degToRads, this);
        }
        if (data2.sk) {
          this.sk = PropertyFactory.getProp(elem2, data2.sk, 0, degToRads, this);
          this.sa = PropertyFactory.getProp(elem2, data2.sa, 0, degToRads, this);
        }
        this.a = PropertyFactory.getProp(elem2, data2.a || {
          k: [0, 0, 0]
        }, 1, 0, this);
        this.s = PropertyFactory.getProp(elem2, data2.s || {
          k: [100, 100, 100]
        }, 1, 0.01, this);
        if (data2.o) {
          this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, elem2);
        } else {
          this.o = {
            _mdf: false,
            v: 1
          };
        }
        this._isDirty = true;
        if (!this.dynamicProperties.length) {
          this.getValue(true);
        }
      }
      TransformProperty.prototype = {
        applyToMatrix,
        getValue: processKeys,
        precalculateMatrix,
        autoOrient
      };
      extendPrototype([DynamicPropertyContainer], TransformProperty);
      TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
      TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;
      function getTransformProperty(elem2, data2, container2) {
        return new TransformProperty(elem2, data2, container2);
      }
      return {
        getTransformProperty
      };
    }();
    function RepeaterModifier() {
    }
    extendPrototype([ShapeModifier], RepeaterModifier);
    RepeaterModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.c = PropertyFactory.getProp(elem2, data2.c, 0, null, this);
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, null, this);
      this.tr = TransformPropertyFactory.getTransformProperty(elem2, data2.tr, this);
      this.so = PropertyFactory.getProp(elem2, data2.tr.so, 0, 0.01, this);
      this.eo = PropertyFactory.getProp(elem2, data2.tr.eo, 0, 0.01, this);
      this.data = data2;
      if (!this.dynamicProperties.length) {
        this.getValue(true);
      }
      this._isAnimated = !!this.dynamicProperties.length;
      this.pMatrix = new Matrix();
      this.rMatrix = new Matrix();
      this.sMatrix = new Matrix();
      this.tMatrix = new Matrix();
      this.matrix = new Matrix();
    };
    RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform2, perc, inv) {
      var dir = inv ? -1 : 1;
      var scaleX = transform2.s.v[0] + (1 - transform2.s.v[0]) * (1 - perc);
      var scaleY = transform2.s.v[1] + (1 - transform2.s.v[1]) * (1 - perc);
      pMatrix.translate(transform2.p.v[0] * dir * perc, transform2.p.v[1] * dir * perc, transform2.p.v[2]);
      rMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
      rMatrix.rotate(-transform2.r.v * dir * perc);
      rMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
      sMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
      sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
      sMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
    };
    RepeaterModifier.prototype.init = function(elem2, arr, pos, elemsData) {
      this.elem = elem2;
      this.arr = arr;
      this.pos = pos;
      this.elemsData = elemsData;
      this._currentCopies = 0;
      this._elements = [];
      this._groups = [];
      this.frameId = -1;
      this.initDynamicPropertyContainer(elem2);
      this.initModifierProperties(elem2, arr[pos]);
      while (pos > 0) {
        pos -= 1;
        this._elements.unshift(arr[pos]);
      }
      if (this.dynamicProperties.length) {
        this.k = true;
      } else {
        this.getValue(true);
      }
    };
    RepeaterModifier.prototype.resetElements = function(elements) {
      var i3;
      var len = elements.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        elements[i3]._processed = false;
        if (elements[i3].ty === "gr") {
          this.resetElements(elements[i3].it);
        }
      }
    };
    RepeaterModifier.prototype.cloneElements = function(elements) {
      var newElements = JSON.parse(JSON.stringify(elements));
      this.resetElements(newElements);
      return newElements;
    };
    RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
      var i3;
      var len = elements.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        elements[i3]._render = renderFlag;
        if (elements[i3].ty === "gr") {
          this.changeGroupRender(elements[i3].it, renderFlag);
        }
      }
    };
    RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
      var items;
      var itemsTransform;
      var i3;
      var dir;
      var cont;
      var hasReloaded = false;
      if (this._mdf || _isFirstFrame) {
        var copies = Math.ceil(this.c.v);
        if (this._groups.length < copies) {
          while (this._groups.length < copies) {
            var group = {
              it: this.cloneElements(this._elements),
              ty: "gr"
            };
            group.it.push({
              a: {
                a: 0,
                ix: 1,
                k: [0, 0]
              },
              nm: "Transform",
              o: {
                a: 0,
                ix: 7,
                k: 100
              },
              p: {
                a: 0,
                ix: 2,
                k: [0, 0]
              },
              r: {
                a: 1,
                ix: 6,
                k: [{
                  s: 0,
                  e: 0,
                  t: 0
                }, {
                  s: 0,
                  e: 0,
                  t: 1
                }]
              },
              s: {
                a: 0,
                ix: 3,
                k: [100, 100]
              },
              sa: {
                a: 0,
                ix: 5,
                k: 0
              },
              sk: {
                a: 0,
                ix: 4,
                k: 0
              },
              ty: "tr"
            });
            this.arr.splice(0, 0, group);
            this._groups.splice(0, 0, group);
            this._currentCopies += 1;
          }
          this.elem.reloadShapes();
          hasReloaded = true;
        }
        cont = 0;
        var renderFlag;
        for (i3 = 0; i3 <= this._groups.length - 1; i3 += 1) {
          renderFlag = cont < copies;
          this._groups[i3]._render = renderFlag;
          this.changeGroupRender(this._groups[i3].it, renderFlag);
          if (!renderFlag) {
            var elems = this.elemsData[i3].it;
            var transformData = elems[elems.length - 1];
            if (transformData.transform.op.v !== 0) {
              transformData.transform.op._mdf = true;
              transformData.transform.op.v = 0;
            } else {
              transformData.transform.op._mdf = false;
            }
          }
          cont += 1;
        }
        this._currentCopies = copies;
        var offset = this.o.v;
        var offsetModulo = offset % 1;
        var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
        var pProps = this.pMatrix.props;
        var rProps = this.rMatrix.props;
        var sProps = this.sMatrix.props;
        this.pMatrix.reset();
        this.rMatrix.reset();
        this.sMatrix.reset();
        this.tMatrix.reset();
        this.matrix.reset();
        var iteration = 0;
        if (offset > 0) {
          while (iteration < roundOffset) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
            iteration += 1;
          }
          if (offsetModulo) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
            iteration += offsetModulo;
          }
        } else if (offset < 0) {
          while (iteration > roundOffset) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
            iteration -= 1;
          }
          if (offsetModulo) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
            iteration -= offsetModulo;
          }
        }
        i3 = this.data.m === 1 ? 0 : this._currentCopies - 1;
        dir = this.data.m === 1 ? 1 : -1;
        cont = this._currentCopies;
        var j2;
        var jLen;
        while (cont) {
          items = this.elemsData[i3].it;
          itemsTransform = items[items.length - 1].transform.mProps.v.props;
          jLen = itemsTransform.length;
          items[items.length - 1].transform.mProps._mdf = true;
          items[items.length - 1].transform.op._mdf = true;
          items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i3 / (this._currentCopies - 1));
          if (iteration !== 0) {
            if (i3 !== 0 && dir === 1 || i3 !== this._currentCopies - 1 && dir === -1) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
            }
            this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
            this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
            this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);
            for (j2 = 0; j2 < jLen; j2 += 1) {
              itemsTransform[j2] = this.matrix.props[j2];
            }
            this.matrix.reset();
          } else {
            this.matrix.reset();
            for (j2 = 0; j2 < jLen; j2 += 1) {
              itemsTransform[j2] = this.matrix.props[j2];
            }
          }
          iteration += 1;
          cont -= 1;
          i3 += dir;
        }
      } else {
        cont = this._currentCopies;
        i3 = 0;
        dir = 1;
        while (cont) {
          items = this.elemsData[i3].it;
          itemsTransform = items[items.length - 1].transform.mProps.v.props;
          items[items.length - 1].transform.mProps._mdf = false;
          items[items.length - 1].transform.op._mdf = false;
          cont -= 1;
          i3 += dir;
        }
      }
      return hasReloaded;
    };
    RepeaterModifier.prototype.addShape = function() {
    };
    function RoundCornersModifier() {
    }
    extendPrototype([ShapeModifier], RoundCornersModifier);
    RoundCornersModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.rd = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
      this._isAnimated = !!this.rd.effectsSequence.length;
    };
    RoundCornersModifier.prototype.processPath = function(path, round2) {
      var clonedPath = shapePool.newElement();
      clonedPath.c = path.c;
      var i3;
      var len = path._length;
      var currentV;
      var currentI;
      var currentO;
      var closerV;
      var distance;
      var newPosPerc;
      var index2 = 0;
      var vX;
      var vY;
      var oX;
      var oY;
      var iX;
      var iY;
      for (i3 = 0; i3 < len; i3 += 1) {
        currentV = path.v[i3];
        currentO = path.o[i3];
        currentI = path.i[i3];
        if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
          if ((i3 === 0 || i3 === len - 1) && !path.c) {
            clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index2);
            index2 += 1;
          } else {
            if (i3 === 0) {
              closerV = path.v[len - 1];
            } else {
              closerV = path.v[i3 - 1];
            }
            distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
            newPosPerc = distance ? Math.min(distance / 2, round2) / distance : 0;
            iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
            vX = iX;
            iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
            vY = iY;
            oX = vX - (vX - currentV[0]) * roundCorner;
            oY = vY - (vY - currentV[1]) * roundCorner;
            clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
            index2 += 1;
            if (i3 === len - 1) {
              closerV = path.v[0];
            } else {
              closerV = path.v[i3 + 1];
            }
            distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
            newPosPerc = distance ? Math.min(distance / 2, round2) / distance : 0;
            oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
            vX = oX;
            oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
            vY = oY;
            iX = vX - (vX - currentV[0]) * roundCorner;
            iY = vY - (vY - currentV[1]) * roundCorner;
            clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
            index2 += 1;
          }
        } else {
          clonedPath.setTripleAt(path.v[i3][0], path.v[i3][1], path.o[i3][0], path.o[i3][1], path.i[i3][0], path.i[i3][1], index2);
          index2 += 1;
        }
      }
      return clonedPath;
    };
    RoundCornersModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i3;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var rd2 = this.rd.v;
      if (rd2 !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i3 = 0; i3 < len; i3 += 1) {
          shapeData = this.shapes[i3];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j2], rd2));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    function floatEqual(a4, b3) {
      return Math.abs(a4 - b3) * 1e5 <= Math.min(Math.abs(a4), Math.abs(b3));
    }
    function floatZero(f2) {
      return Math.abs(f2) <= 1e-5;
    }
    function lerp(p0, p1, amount) {
      return p0 * (1 - amount) + p1 * amount;
    }
    function lerpPoint(p0, p1, amount) {
      return [lerp(p0[0], p1[0], amount), lerp(p0[1], p1[1], amount)];
    }
    function quadRoots(a4, b3, c7) {
      if (a4 === 0)
        return [];
      var s4 = b3 * b3 - 4 * a4 * c7;
      if (s4 < 0)
        return [];
      var singleRoot = -b3 / (2 * a4);
      if (s4 === 0)
        return [singleRoot];
      var delta = Math.sqrt(s4) / (2 * a4);
      return [singleRoot - delta, singleRoot + delta];
    }
    function polynomialCoefficients(p0, p1, p2, p3) {
      return [-p0 + 3 * p1 - 3 * p2 + p3, 3 * p0 - 6 * p1 + 3 * p2, -3 * p0 + 3 * p1, p0];
    }
    function singlePoint(p2) {
      return new PolynomialBezier(p2, p2, p2, p2, false);
    }
    function PolynomialBezier(p0, p1, p2, p3, linearize) {
      if (linearize && pointEqual(p0, p1)) {
        p1 = lerpPoint(p0, p3, 1 / 3);
      }
      if (linearize && pointEqual(p2, p3)) {
        p2 = lerpPoint(p0, p3, 2 / 3);
      }
      var coeffx = polynomialCoefficients(p0[0], p1[0], p2[0], p3[0]);
      var coeffy = polynomialCoefficients(p0[1], p1[1], p2[1], p3[1]);
      this.a = [coeffx[0], coeffy[0]];
      this.b = [coeffx[1], coeffy[1]];
      this.c = [coeffx[2], coeffy[2]];
      this.d = [coeffx[3], coeffy[3]];
      this.points = [p0, p1, p2, p3];
    }
    PolynomialBezier.prototype.point = function(t3) {
      return [((this.a[0] * t3 + this.b[0]) * t3 + this.c[0]) * t3 + this.d[0], ((this.a[1] * t3 + this.b[1]) * t3 + this.c[1]) * t3 + this.d[1]];
    };
    PolynomialBezier.prototype.derivative = function(t3) {
      return [(3 * t3 * this.a[0] + 2 * this.b[0]) * t3 + this.c[0], (3 * t3 * this.a[1] + 2 * this.b[1]) * t3 + this.c[1]];
    };
    PolynomialBezier.prototype.tangentAngle = function(t3) {
      var p2 = this.derivative(t3);
      return Math.atan2(p2[1], p2[0]);
    };
    PolynomialBezier.prototype.normalAngle = function(t3) {
      var p2 = this.derivative(t3);
      return Math.atan2(p2[0], p2[1]);
    };
    PolynomialBezier.prototype.inflectionPoints = function() {
      var denom = this.a[1] * this.b[0] - this.a[0] * this.b[1];
      if (floatZero(denom))
        return [];
      var tcusp = -0.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / denom;
      var square = tcusp * tcusp - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / denom;
      if (square < 0)
        return [];
      var root2 = Math.sqrt(square);
      if (floatZero(root2)) {
        if (root2 > 0 && root2 < 1)
          return [tcusp];
        return [];
      }
      return [tcusp - root2, tcusp + root2].filter(function(r2) {
        return r2 > 0 && r2 < 1;
      });
    };
    PolynomialBezier.prototype.split = function(t3) {
      if (t3 <= 0)
        return [singlePoint(this.points[0]), this];
      if (t3 >= 1)
        return [this, singlePoint(this.points[this.points.length - 1])];
      var p10 = lerpPoint(this.points[0], this.points[1], t3);
      var p11 = lerpPoint(this.points[1], this.points[2], t3);
      var p12 = lerpPoint(this.points[2], this.points[3], t3);
      var p20 = lerpPoint(p10, p11, t3);
      var p21 = lerpPoint(p11, p12, t3);
      var p3 = lerpPoint(p20, p21, t3);
      return [new PolynomialBezier(this.points[0], p10, p20, p3, true), new PolynomialBezier(p3, p21, p12, this.points[3], true)];
    };
    function extrema(bez2, comp2) {
      var min2 = bez2.points[0][comp2];
      var max2 = bez2.points[bez2.points.length - 1][comp2];
      if (min2 > max2) {
        var e3 = max2;
        max2 = min2;
        min2 = e3;
      }
      var f2 = quadRoots(3 * bez2.a[comp2], 2 * bez2.b[comp2], bez2.c[comp2]);
      for (var i3 = 0; i3 < f2.length; i3 += 1) {
        if (f2[i3] > 0 && f2[i3] < 1) {
          var val2 = bez2.point(f2[i3])[comp2];
          if (val2 < min2)
            min2 = val2;
          else if (val2 > max2)
            max2 = val2;
        }
      }
      return {
        min: min2,
        max: max2
      };
    }
    PolynomialBezier.prototype.bounds = function() {
      return {
        x: extrema(this, 0),
        y: extrema(this, 1)
      };
    };
    PolynomialBezier.prototype.boundingBox = function() {
      var bounds = this.bounds();
      return {
        left: bounds.x.min,
        right: bounds.x.max,
        top: bounds.y.min,
        bottom: bounds.y.max,
        width: bounds.x.max - bounds.x.min,
        height: bounds.y.max - bounds.y.min,
        cx: (bounds.x.max + bounds.x.min) / 2,
        cy: (bounds.y.max + bounds.y.min) / 2
      };
    };
    function intersectData(bez2, t1, t22) {
      var box = bez2.boundingBox();
      return {
        cx: box.cx,
        cy: box.cy,
        width: box.width,
        height: box.height,
        bez: bez2,
        t: (t1 + t22) / 2,
        t1,
        t2: t22
      };
    }
    function splitData(data2) {
      var split2 = data2.bez.split(0.5);
      return [intersectData(split2[0], data2.t1, data2.t), intersectData(split2[1], data2.t, data2.t2)];
    }
    function boxIntersect(b1, b22) {
      return Math.abs(b1.cx - b22.cx) * 2 < b1.width + b22.width && Math.abs(b1.cy - b22.cy) * 2 < b1.height + b22.height;
    }
    function intersectsImpl(d1, d22, depth, tolerance, intersections, maxRecursion) {
      if (!boxIntersect(d1, d22))
        return;
      if (depth >= maxRecursion || d1.width <= tolerance && d1.height <= tolerance && d22.width <= tolerance && d22.height <= tolerance) {
        intersections.push([d1.t, d22.t]);
        return;
      }
      var d1s = splitData(d1);
      var d2s = splitData(d22);
      intersectsImpl(d1s[0], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
      intersectsImpl(d1s[0], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
      intersectsImpl(d1s[1], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
      intersectsImpl(d1s[1], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
    }
    PolynomialBezier.prototype.intersections = function(other, tolerance, maxRecursion) {
      if (tolerance === void 0)
        tolerance = 2;
      if (maxRecursion === void 0)
        maxRecursion = 7;
      var intersections = [];
      intersectsImpl(intersectData(this, 0, 1), intersectData(other, 0, 1), 0, tolerance, intersections, maxRecursion);
      return intersections;
    };
    PolynomialBezier.shapeSegment = function(shapePath, index2) {
      var nextIndex = (index2 + 1) % shapePath.length();
      return new PolynomialBezier(shapePath.v[index2], shapePath.o[index2], shapePath.i[nextIndex], shapePath.v[nextIndex], true);
    };
    PolynomialBezier.shapeSegmentInverted = function(shapePath, index2) {
      var nextIndex = (index2 + 1) % shapePath.length();
      return new PolynomialBezier(shapePath.v[nextIndex], shapePath.i[nextIndex], shapePath.o[index2], shapePath.v[index2], true);
    };
    function crossProduct(a4, b3) {
      return [a4[1] * b3[2] - a4[2] * b3[1], a4[2] * b3[0] - a4[0] * b3[2], a4[0] * b3[1] - a4[1] * b3[0]];
    }
    function lineIntersection(start1, end1, start2, end2) {
      var v1 = [start1[0], start1[1], 1];
      var v2 = [end1[0], end1[1], 1];
      var v3 = [start2[0], start2[1], 1];
      var v4 = [end2[0], end2[1], 1];
      var r2 = crossProduct(crossProduct(v1, v2), crossProduct(v3, v4));
      if (floatZero(r2[2]))
        return null;
      return [r2[0] / r2[2], r2[1] / r2[2]];
    }
    function polarOffset(p2, angle, length2) {
      return [p2[0] + Math.cos(angle) * length2, p2[1] - Math.sin(angle) * length2];
    }
    function pointDistance(p1, p2) {
      return Math.hypot(p1[0] - p2[0], p1[1] - p2[1]);
    }
    function pointEqual(p1, p2) {
      return floatEqual(p1[0], p2[0]) && floatEqual(p1[1], p2[1]);
    }
    function ZigZagModifier() {
    }
    extendPrototype([ShapeModifier], ZigZagModifier);
    ZigZagModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.amplitude = PropertyFactory.getProp(elem2, data2.s, 0, null, this);
      this.frequency = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
      this.pointsType = PropertyFactory.getProp(elem2, data2.pt, 0, null, this);
      this._isAnimated = this.amplitude.effectsSequence.length !== 0 || this.frequency.effectsSequence.length !== 0 || this.pointsType.effectsSequence.length !== 0;
    };
    function setPoint(outputBezier, point, angle, direction, amplitude, outAmplitude, inAmplitude) {
      var angO = angle - Math.PI / 2;
      var angI = angle + Math.PI / 2;
      var px = point[0] + Math.cos(angle) * direction * amplitude;
      var py = point[1] - Math.sin(angle) * direction * amplitude;
      outputBezier.setTripleAt(px, py, px + Math.cos(angO) * outAmplitude, py - Math.sin(angO) * outAmplitude, px + Math.cos(angI) * inAmplitude, py - Math.sin(angI) * inAmplitude, outputBezier.length());
    }
    function getPerpendicularVector(pt1, pt2) {
      var vector = [pt2[0] - pt1[0], pt2[1] - pt1[1]];
      var rot = -Math.PI * 0.5;
      var rotatedVector = [Math.cos(rot) * vector[0] - Math.sin(rot) * vector[1], Math.sin(rot) * vector[0] + Math.cos(rot) * vector[1]];
      return rotatedVector;
    }
    function getProjectingAngle(path, cur) {
      var prevIndex = cur === 0 ? path.length() - 1 : cur - 1;
      var nextIndex = (cur + 1) % path.length();
      var prevPoint = path.v[prevIndex];
      var nextPoint = path.v[nextIndex];
      var pVector = getPerpendicularVector(prevPoint, nextPoint);
      return Math.atan2(0, 1) - Math.atan2(pVector[1], pVector[0]);
    }
    function zigZagCorner(outputBezier, path, cur, amplitude, frequency, pointType, direction) {
      var angle = getProjectingAngle(path, cur);
      var point = path.v[cur % path._length];
      var prevPoint = path.v[cur === 0 ? path._length - 1 : cur - 1];
      var nextPoint = path.v[(cur + 1) % path._length];
      var prevDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - prevPoint[0], 2) + Math.pow(point[1] - prevPoint[1], 2)) : 0;
      var nextDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - nextPoint[0], 2) + Math.pow(point[1] - nextPoint[1], 2)) : 0;
      setPoint(outputBezier, path.v[cur % path._length], angle, direction, amplitude, nextDist / ((frequency + 1) * 2), prevDist / ((frequency + 1) * 2));
    }
    function zigZagSegment(outputBezier, segment, amplitude, frequency, pointType, direction) {
      for (var i3 = 0; i3 < frequency; i3 += 1) {
        var t3 = (i3 + 1) / (frequency + 1);
        var dist = pointType === 2 ? Math.sqrt(Math.pow(segment.points[3][0] - segment.points[0][0], 2) + Math.pow(segment.points[3][1] - segment.points[0][1], 2)) : 0;
        var angle = segment.normalAngle(t3);
        var point = segment.point(t3);
        setPoint(outputBezier, point, angle, direction, amplitude, dist / ((frequency + 1) * 2), dist / ((frequency + 1) * 2));
        direction = -direction;
      }
      return direction;
    }
    ZigZagModifier.prototype.processPath = function(path, amplitude, frequency, pointType) {
      var count = path._length;
      var clonedPath = shapePool.newElement();
      clonedPath.c = path.c;
      if (!path.c) {
        count -= 1;
      }
      if (count === 0)
        return clonedPath;
      var direction = -1;
      var segment = PolynomialBezier.shapeSegment(path, 0);
      zigZagCorner(clonedPath, path, 0, amplitude, frequency, pointType, direction);
      for (var i3 = 0; i3 < count; i3 += 1) {
        direction = zigZagSegment(clonedPath, segment, amplitude, frequency, pointType, -direction);
        if (i3 === count - 1 && !path.c) {
          segment = null;
        } else {
          segment = PolynomialBezier.shapeSegment(path, (i3 + 1) % count);
        }
        zigZagCorner(clonedPath, path, i3 + 1, amplitude, frequency, pointType, direction);
      }
      return clonedPath;
    };
    ZigZagModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i3;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var amplitude = this.amplitude.v;
      var frequency = Math.max(0, Math.round(this.frequency.v));
      var pointType = this.pointsType.v;
      if (amplitude !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i3 = 0; i3 < len; i3 += 1) {
          shapeData = this.shapes[i3];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j2], amplitude, frequency, pointType));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    function linearOffset(p1, p2, amount) {
      var angle = Math.atan2(p2[0] - p1[0], p2[1] - p1[1]);
      return [polarOffset(p1, angle, amount), polarOffset(p2, angle, amount)];
    }
    function offsetSegment(segment, amount) {
      var p0;
      var p1a;
      var p1b;
      var p2b;
      var p2a;
      var p3;
      var e3;
      e3 = linearOffset(segment.points[0], segment.points[1], amount);
      p0 = e3[0];
      p1a = e3[1];
      e3 = linearOffset(segment.points[1], segment.points[2], amount);
      p1b = e3[0];
      p2b = e3[1];
      e3 = linearOffset(segment.points[2], segment.points[3], amount);
      p2a = e3[0];
      p3 = e3[1];
      var p1 = lineIntersection(p0, p1a, p1b, p2b);
      if (p1 === null)
        p1 = p1a;
      var p2 = lineIntersection(p2a, p3, p1b, p2b);
      if (p2 === null)
        p2 = p2a;
      return new PolynomialBezier(p0, p1, p2, p3);
    }
    function joinLines(outputBezier, seg1, seg2, lineJoin, miterLimit) {
      var p0 = seg1.points[3];
      var p1 = seg2.points[0];
      if (lineJoin === 3)
        return p0;
      if (pointEqual(p0, p1))
        return p0;
      if (lineJoin === 2) {
        var angleOut = -seg1.tangentAngle(1);
        var angleIn = -seg2.tangentAngle(0) + Math.PI;
        var center = lineIntersection(p0, polarOffset(p0, angleOut + Math.PI / 2, 100), p1, polarOffset(p1, angleOut + Math.PI / 2, 100));
        var radius = center ? pointDistance(center, p0) : pointDistance(p0, p1) / 2;
        var tan2 = polarOffset(p0, angleOut, 2 * radius * roundCorner);
        outputBezier.setXYAt(tan2[0], tan2[1], "o", outputBezier.length() - 1);
        tan2 = polarOffset(p1, angleIn, 2 * radius * roundCorner);
        outputBezier.setTripleAt(p1[0], p1[1], p1[0], p1[1], tan2[0], tan2[1], outputBezier.length());
        return p1;
      }
      var t0 = pointEqual(p0, seg1.points[2]) ? seg1.points[0] : seg1.points[2];
      var t1 = pointEqual(p1, seg2.points[1]) ? seg2.points[3] : seg2.points[1];
      var intersection = lineIntersection(t0, p0, p1, t1);
      if (intersection && pointDistance(intersection, p0) < miterLimit) {
        outputBezier.setTripleAt(intersection[0], intersection[1], intersection[0], intersection[1], intersection[0], intersection[1], outputBezier.length());
        return intersection;
      }
      return p0;
    }
    function getIntersection(a4, b3) {
      var intersect = a4.intersections(b3);
      if (intersect.length && floatEqual(intersect[0][0], 1))
        intersect.shift();
      if (intersect.length)
        return intersect[0];
      return null;
    }
    function pruneSegmentIntersection(a4, b3) {
      var outa = a4.slice();
      var outb = b3.slice();
      var intersect = getIntersection(a4[a4.length - 1], b3[0]);
      if (intersect) {
        outa[a4.length - 1] = a4[a4.length - 1].split(intersect[0])[0];
        outb[0] = b3[0].split(intersect[1])[1];
      }
      if (a4.length > 1 && b3.length > 1) {
        intersect = getIntersection(a4[0], b3[b3.length - 1]);
        if (intersect) {
          return [[a4[0].split(intersect[0])[0]], [b3[b3.length - 1].split(intersect[1])[1]]];
        }
      }
      return [outa, outb];
    }
    function pruneIntersections(segments) {
      var e3;
      for (var i3 = 1; i3 < segments.length; i3 += 1) {
        e3 = pruneSegmentIntersection(segments[i3 - 1], segments[i3]);
        segments[i3 - 1] = e3[0];
        segments[i3] = e3[1];
      }
      if (segments.length > 1) {
        e3 = pruneSegmentIntersection(segments[segments.length - 1], segments[0]);
        segments[segments.length - 1] = e3[0];
        segments[0] = e3[1];
      }
      return segments;
    }
    function offsetSegmentSplit(segment, amount) {
      var flex = segment.inflectionPoints();
      var left;
      var right;
      var split2;
      var mid;
      if (flex.length === 0) {
        return [offsetSegment(segment, amount)];
      }
      if (flex.length === 1 || floatEqual(flex[1], 1)) {
        split2 = segment.split(flex[0]);
        left = split2[0];
        right = split2[1];
        return [offsetSegment(left, amount), offsetSegment(right, amount)];
      }
      split2 = segment.split(flex[0]);
      left = split2[0];
      var t3 = (flex[1] - flex[0]) / (1 - flex[0]);
      split2 = split2[1].split(t3);
      mid = split2[0];
      right = split2[1];
      return [offsetSegment(left, amount), offsetSegment(mid, amount), offsetSegment(right, amount)];
    }
    function OffsetPathModifier() {
    }
    extendPrototype([ShapeModifier], OffsetPathModifier);
    OffsetPathModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
      this.miterLimit = PropertyFactory.getProp(elem2, data2.ml, 0, null, this);
      this.lineJoin = data2.lj;
      this._isAnimated = this.amount.effectsSequence.length !== 0;
    };
    OffsetPathModifier.prototype.processPath = function(inputBezier, amount, lineJoin, miterLimit) {
      var outputBezier = shapePool.newElement();
      outputBezier.c = inputBezier.c;
      var count = inputBezier.length();
      if (!inputBezier.c) {
        count -= 1;
      }
      var i3;
      var j2;
      var segment;
      var multiSegments = [];
      for (i3 = 0; i3 < count; i3 += 1) {
        segment = PolynomialBezier.shapeSegment(inputBezier, i3);
        multiSegments.push(offsetSegmentSplit(segment, amount));
      }
      if (!inputBezier.c) {
        for (i3 = count - 1; i3 >= 0; i3 -= 1) {
          segment = PolynomialBezier.shapeSegmentInverted(inputBezier, i3);
          multiSegments.push(offsetSegmentSplit(segment, amount));
        }
      }
      multiSegments = pruneIntersections(multiSegments);
      var lastPoint = null;
      var lastSeg = null;
      for (i3 = 0; i3 < multiSegments.length; i3 += 1) {
        var multiSegment = multiSegments[i3];
        if (lastSeg)
          lastPoint = joinLines(outputBezier, lastSeg, multiSegment[0], lineJoin, miterLimit);
        lastSeg = multiSegment[multiSegment.length - 1];
        for (j2 = 0; j2 < multiSegment.length; j2 += 1) {
          segment = multiSegment[j2];
          if (lastPoint && pointEqual(segment.points[0], lastPoint)) {
            outputBezier.setXYAt(segment.points[1][0], segment.points[1][1], "o", outputBezier.length() - 1);
          } else {
            outputBezier.setTripleAt(segment.points[0][0], segment.points[0][1], segment.points[1][0], segment.points[1][1], segment.points[0][0], segment.points[0][1], outputBezier.length());
          }
          outputBezier.setTripleAt(segment.points[3][0], segment.points[3][1], segment.points[3][0], segment.points[3][1], segment.points[2][0], segment.points[2][1], outputBezier.length());
          lastPoint = segment.points[3];
        }
      }
      if (multiSegments.length)
        joinLines(outputBezier, lastSeg, multiSegments[0][0], lineJoin, miterLimit);
      return outputBezier;
    };
    OffsetPathModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i3;
      var len = this.shapes.length;
      var j2;
      var jLen;
      var amount = this.amount.v;
      var miterLimit = this.miterLimit.v;
      var lineJoin = this.lineJoin;
      if (amount !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i3 = 0; i3 < len; i3 += 1) {
          shapeData = this.shapes[i3];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j2], amount, lineJoin, miterLimit));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    function getFontProperties(fontData) {
      var styles2 = fontData.fStyle ? fontData.fStyle.split(" ") : [];
      var fWeight = "normal";
      var fStyle = "normal";
      var len = styles2.length;
      var styleName;
      for (var i3 = 0; i3 < len; i3 += 1) {
        styleName = styles2[i3].toLowerCase();
        switch (styleName) {
          case "italic":
            fStyle = "italic";
            break;
          case "bold":
            fWeight = "700";
            break;
          case "black":
            fWeight = "900";
            break;
          case "medium":
            fWeight = "500";
            break;
          case "regular":
          case "normal":
            fWeight = "400";
            break;
          case "light":
          case "thin":
            fWeight = "200";
            break;
        }
      }
      return {
        style: fStyle,
        weight: fontData.fWeight || fWeight
      };
    }
    var FontManager = function() {
      var maxWaitingTime = 5e3;
      var emptyChar = {
        w: 0,
        size: 0,
        shapes: [],
        data: {
          shapes: []
        }
      };
      var combinedCharacters = [];
      combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
      var BLACK_FLAG_CODE_POINT = 127988;
      var CANCEL_TAG_CODE_POINT = 917631;
      var A_TAG_CODE_POINT = 917601;
      var Z_TAG_CODE_POINT = 917626;
      var VARIATION_SELECTOR_16_CODE_POINT = 65039;
      var ZERO_WIDTH_JOINER_CODE_POINT = 8205;
      var REGIONAL_CHARACTER_A_CODE_POINT = 127462;
      var REGIONAL_CHARACTER_Z_CODE_POINT = 127487;
      var surrogateModifiers = ["d83cdffb", "d83cdffc", "d83cdffd", "d83cdffe", "d83cdfff"];
      function trimFontOptions(font) {
        var familyArray = font.split(",");
        var i3;
        var len = familyArray.length;
        var enabledFamilies = [];
        for (i3 = 0; i3 < len; i3 += 1) {
          if (familyArray[i3] !== "sans-serif" && familyArray[i3] !== "monospace") {
            enabledFamilies.push(familyArray[i3]);
          }
        }
        return enabledFamilies.join(",");
      }
      function setUpNode(font, family) {
        var parentNode = createTag("span");
        parentNode.setAttribute("aria-hidden", true);
        parentNode.style.fontFamily = family;
        var node2 = createTag("span");
        node2.innerText = "giItT1WQy@!-/#";
        parentNode.style.position = "absolute";
        parentNode.style.left = "-10000px";
        parentNode.style.top = "-10000px";
        parentNode.style.fontSize = "300px";
        parentNode.style.fontVariant = "normal";
        parentNode.style.fontStyle = "normal";
        parentNode.style.fontWeight = "normal";
        parentNode.style.letterSpacing = "0";
        parentNode.appendChild(node2);
        document.body.appendChild(parentNode);
        var width2 = node2.offsetWidth;
        node2.style.fontFamily = trimFontOptions(font) + ", " + family;
        return {
          node: node2,
          w: width2,
          parent: parentNode
        };
      }
      function checkLoadedFonts() {
        var i3;
        var len = this.fonts.length;
        var node2;
        var w3;
        var loadedCount = len;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (this.fonts[i3].loaded) {
            loadedCount -= 1;
          } else if (this.fonts[i3].fOrigin === "n" || this.fonts[i3].origin === 0) {
            this.fonts[i3].loaded = true;
          } else {
            node2 = this.fonts[i3].monoCase.node;
            w3 = this.fonts[i3].monoCase.w;
            if (node2.offsetWidth !== w3) {
              loadedCount -= 1;
              this.fonts[i3].loaded = true;
            } else {
              node2 = this.fonts[i3].sansCase.node;
              w3 = this.fonts[i3].sansCase.w;
              if (node2.offsetWidth !== w3) {
                loadedCount -= 1;
                this.fonts[i3].loaded = true;
              }
            }
            if (this.fonts[i3].loaded) {
              this.fonts[i3].sansCase.parent.parentNode.removeChild(this.fonts[i3].sansCase.parent);
              this.fonts[i3].monoCase.parent.parentNode.removeChild(this.fonts[i3].monoCase.parent);
            }
          }
        }
        if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
          setTimeout(this.checkLoadedFontsBinded, 20);
        } else {
          setTimeout(this.setIsLoadedBinded, 10);
        }
      }
      function createHelper(fontData, def) {
        var engine = document.body && def ? "svg" : "canvas";
        var helper;
        var fontProps = getFontProperties(fontData);
        if (engine === "svg") {
          var tHelper = createNS("text");
          tHelper.style.fontSize = "100px";
          tHelper.setAttribute("font-family", fontData.fFamily);
          tHelper.setAttribute("font-style", fontProps.style);
          tHelper.setAttribute("font-weight", fontProps.weight);
          tHelper.textContent = "1";
          if (fontData.fClass) {
            tHelper.style.fontFamily = "inherit";
            tHelper.setAttribute("class", fontData.fClass);
          } else {
            tHelper.style.fontFamily = fontData.fFamily;
          }
          def.appendChild(tHelper);
          helper = tHelper;
        } else {
          var tCanvasHelper = new OffscreenCanvas(500, 500).getContext("2d");
          tCanvasHelper.font = fontProps.style + " " + fontProps.weight + " 100px " + fontData.fFamily;
          helper = tCanvasHelper;
        }
        function measure(text2) {
          if (engine === "svg") {
            helper.textContent = text2;
            return helper.getComputedTextLength();
          }
          return helper.measureText(text2).width;
        }
        return {
          measureText: measure
        };
      }
      function addFonts(fontData, defs) {
        if (!fontData) {
          this.isLoaded = true;
          return;
        }
        if (this.chars) {
          this.isLoaded = true;
          this.fonts = fontData.list;
          return;
        }
        if (!document.body) {
          this.isLoaded = true;
          fontData.list.forEach(function(data2) {
            data2.helper = createHelper(data2);
            data2.cache = {};
          });
          this.fonts = fontData.list;
          return;
        }
        var fontArr = fontData.list;
        var i3;
        var len = fontArr.length;
        var _pendingFonts = len;
        for (i3 = 0; i3 < len; i3 += 1) {
          var shouldLoadFont = true;
          var loadedSelector;
          var j2;
          fontArr[i3].loaded = false;
          fontArr[i3].monoCase = setUpNode(fontArr[i3].fFamily, "monospace");
          fontArr[i3].sansCase = setUpNode(fontArr[i3].fFamily, "sans-serif");
          if (!fontArr[i3].fPath) {
            fontArr[i3].loaded = true;
            _pendingFonts -= 1;
          } else if (fontArr[i3].fOrigin === "p" || fontArr[i3].origin === 3) {
            loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i3].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i3].fFamily + '"]');
            if (loadedSelector.length > 0) {
              shouldLoadFont = false;
            }
            if (shouldLoadFont) {
              var s4 = createTag("style");
              s4.setAttribute("f-forigin", fontArr[i3].fOrigin);
              s4.setAttribute("f-origin", fontArr[i3].origin);
              s4.setAttribute("f-family", fontArr[i3].fFamily);
              s4.type = "text/css";
              s4.innerText = "@font-face {font-family: " + fontArr[i3].fFamily + "; font-style: normal; src: url('" + fontArr[i3].fPath + "');}";
              defs.appendChild(s4);
            }
          } else if (fontArr[i3].fOrigin === "g" || fontArr[i3].origin === 1) {
            loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');
            for (j2 = 0; j2 < loadedSelector.length; j2 += 1) {
              if (loadedSelector[j2].href.indexOf(fontArr[i3].fPath) !== -1) {
                shouldLoadFont = false;
              }
            }
            if (shouldLoadFont) {
              var l2 = createTag("link");
              l2.setAttribute("f-forigin", fontArr[i3].fOrigin);
              l2.setAttribute("f-origin", fontArr[i3].origin);
              l2.type = "text/css";
              l2.rel = "stylesheet";
              l2.href = fontArr[i3].fPath;
              document.body.appendChild(l2);
            }
          } else if (fontArr[i3].fOrigin === "t" || fontArr[i3].origin === 2) {
            loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');
            for (j2 = 0; j2 < loadedSelector.length; j2 += 1) {
              if (fontArr[i3].fPath === loadedSelector[j2].src) {
                shouldLoadFont = false;
              }
            }
            if (shouldLoadFont) {
              var sc2 = createTag("link");
              sc2.setAttribute("f-forigin", fontArr[i3].fOrigin);
              sc2.setAttribute("f-origin", fontArr[i3].origin);
              sc2.setAttribute("rel", "stylesheet");
              sc2.setAttribute("href", fontArr[i3].fPath);
              defs.appendChild(sc2);
            }
          }
          fontArr[i3].helper = createHelper(fontArr[i3], defs);
          fontArr[i3].cache = {};
          this.fonts.push(fontArr[i3]);
        }
        if (_pendingFonts === 0) {
          this.isLoaded = true;
        } else {
          setTimeout(this.checkLoadedFonts.bind(this), 100);
        }
      }
      function addChars(chars) {
        if (!chars) {
          return;
        }
        if (!this.chars) {
          this.chars = [];
        }
        var i3;
        var len = chars.length;
        var j2;
        var jLen = this.chars.length;
        var found;
        for (i3 = 0; i3 < len; i3 += 1) {
          j2 = 0;
          found = false;
          while (j2 < jLen) {
            if (this.chars[j2].style === chars[i3].style && this.chars[j2].fFamily === chars[i3].fFamily && this.chars[j2].ch === chars[i3].ch) {
              found = true;
            }
            j2 += 1;
          }
          if (!found) {
            this.chars.push(chars[i3]);
            jLen += 1;
          }
        }
      }
      function getCharData(_char, style2, font) {
        var i3 = 0;
        var len = this.chars.length;
        while (i3 < len) {
          if (this.chars[i3].ch === _char && this.chars[i3].style === style2 && this.chars[i3].fFamily === font) {
            return this.chars[i3];
          }
          i3 += 1;
        }
        if ((typeof _char === "string" && _char.charCodeAt(0) !== 13 || !_char) && console && console.warn && !this._warned) {
          this._warned = true;
          console.warn("Missing character from exported characters list: ", _char, style2, font);
        }
        return emptyChar;
      }
      function measureText(_char2, fontName, size) {
        var fontData = this.getFontByName(fontName);
        var index2 = _char2;
        if (!fontData.cache[index2]) {
          var tHelper = fontData.helper;
          if (_char2 === " ") {
            var doubleSize = tHelper.measureText("|" + _char2 + "|");
            var singleSize = tHelper.measureText("||");
            fontData.cache[index2] = (doubleSize - singleSize) / 100;
          } else {
            fontData.cache[index2] = tHelper.measureText(_char2) / 100;
          }
        }
        return fontData.cache[index2] * size;
      }
      function getFontByName(name2) {
        var i3 = 0;
        var len = this.fonts.length;
        while (i3 < len) {
          if (this.fonts[i3].fName === name2) {
            return this.fonts[i3];
          }
          i3 += 1;
        }
        return this.fonts[0];
      }
      function getCodePoint(string2) {
        var codePoint = 0;
        var first = string2.charCodeAt(0);
        if (first >= 55296 && first <= 56319) {
          var second = string2.charCodeAt(1);
          if (second >= 56320 && second <= 57343) {
            codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
          }
        }
        return codePoint;
      }
      function isModifier(firstCharCode, secondCharCode) {
        var sum2 = firstCharCode.toString(16) + secondCharCode.toString(16);
        return surrogateModifiers.indexOf(sum2) !== -1;
      }
      function isZeroWidthJoiner(charCode) {
        return charCode === ZERO_WIDTH_JOINER_CODE_POINT;
      }
      function isVariationSelector(charCode) {
        return charCode === VARIATION_SELECTOR_16_CODE_POINT;
      }
      function isRegionalCode(string2) {
        var codePoint = getCodePoint(string2);
        if (codePoint >= REGIONAL_CHARACTER_A_CODE_POINT && codePoint <= REGIONAL_CHARACTER_Z_CODE_POINT) {
          return true;
        }
        return false;
      }
      function isFlagEmoji(string2) {
        return isRegionalCode(string2.substr(0, 2)) && isRegionalCode(string2.substr(2, 2));
      }
      function isCombinedCharacter(_char3) {
        return combinedCharacters.indexOf(_char3) !== -1;
      }
      function isRegionalFlag(text2, index2) {
        var codePoint = getCodePoint(text2.substr(index2, 2));
        if (codePoint !== BLACK_FLAG_CODE_POINT) {
          return false;
        }
        var count = 0;
        index2 += 2;
        while (count < 5) {
          codePoint = getCodePoint(text2.substr(index2, 2));
          if (codePoint < A_TAG_CODE_POINT || codePoint > Z_TAG_CODE_POINT) {
            return false;
          }
          count += 1;
          index2 += 2;
        }
        return getCodePoint(text2.substr(index2, 2)) === CANCEL_TAG_CODE_POINT;
      }
      function setIsLoaded() {
        this.isLoaded = true;
      }
      var Font = function Font2() {
        this.fonts = [];
        this.chars = null;
        this.typekitLoaded = 0;
        this.isLoaded = false;
        this._warned = false;
        this.initTime = Date.now();
        this.setIsLoadedBinded = this.setIsLoaded.bind(this);
        this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
      };
      Font.isModifier = isModifier;
      Font.isZeroWidthJoiner = isZeroWidthJoiner;
      Font.isFlagEmoji = isFlagEmoji;
      Font.isRegionalCode = isRegionalCode;
      Font.isCombinedCharacter = isCombinedCharacter;
      Font.isRegionalFlag = isRegionalFlag;
      Font.isVariationSelector = isVariationSelector;
      Font.BLACK_FLAG_CODE_POINT = BLACK_FLAG_CODE_POINT;
      var fontPrototype = {
        addChars,
        addFonts,
        getCharData,
        getFontByName,
        measureText,
        checkLoadedFonts,
        setIsLoaded
      };
      Font.prototype = fontPrototype;
      return Font;
    }();
    function SlotManager(animationData) {
      this.animationData = animationData;
    }
    SlotManager.prototype.getProp = function(data2) {
      if (this.animationData.slots && this.animationData.slots[data2.sid]) {
        return Object.assign(data2, this.animationData.slots[data2.sid].p);
      }
      return data2;
    };
    function slotFactory(animationData) {
      return new SlotManager(animationData);
    }
    function RenderableElement() {
    }
    RenderableElement.prototype = {
      initRenderable: function initRenderable() {
        this.isInRange = false;
        this.hidden = false;
        this.isTransparent = false;
        this.renderableComponents = [];
      },
      addRenderableComponent: function addRenderableComponent(component) {
        if (this.renderableComponents.indexOf(component) === -1) {
          this.renderableComponents.push(component);
        }
      },
      removeRenderableComponent: function removeRenderableComponent(component) {
        if (this.renderableComponents.indexOf(component) !== -1) {
          this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
        }
      },
      prepareRenderableFrame: function prepareRenderableFrame(num) {
        this.checkLayerLimits(num);
      },
      checkTransparency: function checkTransparency() {
        if (this.finalTransform.mProp.o.v <= 0) {
          if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
            this.isTransparent = true;
            this.hide();
          }
        } else if (this.isTransparent) {
          this.isTransparent = false;
          this.show();
        }
      },
      /**
         * @function
         * Initializes frame related properties.
         *
         * @param {number} num
         * current frame number in Layer's time
         *
         */
      checkLayerLimits: function checkLayerLimits(num) {
        if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
          if (this.isInRange !== true) {
            this.globalData._mdf = true;
            this._mdf = true;
            this.isInRange = true;
            this.show();
          }
        } else if (this.isInRange !== false) {
          this.globalData._mdf = true;
          this.isInRange = false;
          this.hide();
        }
      },
      renderRenderable: function renderRenderable() {
        var i3;
        var len = this.renderableComponents.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          this.renderableComponents[i3].renderFrame(this._isFirstFrame);
        }
      },
      sourceRectAtTime: function sourceRectAtTime2() {
        return {
          top: 0,
          left: 0,
          width: 100,
          height: 100
        };
      },
      getLayerSize: function getLayerSize() {
        if (this.data.ty === 5) {
          return {
            w: this.data.textData.width,
            h: this.data.textData.height
          };
        }
        return {
          w: this.data.width,
          h: this.data.height
        };
      }
    };
    var getBlendMode = function() {
      var blendModeEnums = {
        0: "source-over",
        1: "multiply",
        2: "screen",
        3: "overlay",
        4: "darken",
        5: "lighten",
        6: "color-dodge",
        7: "color-burn",
        8: "hard-light",
        9: "soft-light",
        10: "difference",
        11: "exclusion",
        12: "hue",
        13: "saturation",
        14: "color",
        15: "luminosity"
      };
      return function(mode2) {
        return blendModeEnums[mode2] || "";
      };
    }();
    function SliderEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function AngleEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function ColorEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container2);
    }
    function PointEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container2);
    }
    function LayerIndexEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function MaskIndexEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function CheckboxEffect(data2, elem2, container2) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container2);
    }
    function NoValueEffect() {
      this.p = {};
    }
    function EffectsManager(data2, element) {
      var effects = data2.ef || [];
      this.effectElements = [];
      var i3;
      var len = effects.length;
      var effectItem;
      for (i3 = 0; i3 < len; i3 += 1) {
        effectItem = new GroupEffect(effects[i3], element);
        this.effectElements.push(effectItem);
      }
    }
    function GroupEffect(data2, element) {
      this.init(data2, element);
    }
    extendPrototype([DynamicPropertyContainer], GroupEffect);
    GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;
    GroupEffect.prototype.init = function(data2, element) {
      this.data = data2;
      this.effectElements = [];
      this.initDynamicPropertyContainer(element);
      var i3;
      var len = this.data.ef.length;
      var eff;
      var effects = this.data.ef;
      for (i3 = 0; i3 < len; i3 += 1) {
        eff = null;
        switch (effects[i3].ty) {
          case 0:
            eff = new SliderEffect(effects[i3], element, this);
            break;
          case 1:
            eff = new AngleEffect(effects[i3], element, this);
            break;
          case 2:
            eff = new ColorEffect(effects[i3], element, this);
            break;
          case 3:
            eff = new PointEffect(effects[i3], element, this);
            break;
          case 4:
          case 7:
            eff = new CheckboxEffect(effects[i3], element, this);
            break;
          case 10:
            eff = new LayerIndexEffect(effects[i3], element, this);
            break;
          case 11:
            eff = new MaskIndexEffect(effects[i3], element, this);
            break;
          case 5:
            eff = new EffectsManager(effects[i3], element);
            break;
          default:
            eff = new NoValueEffect(effects[i3]);
            break;
        }
        if (eff) {
          this.effectElements.push(eff);
        }
      }
    };
    function BaseElement() {
    }
    BaseElement.prototype = {
      checkMasks: function checkMasks() {
        if (!this.data.hasMask) {
          return false;
        }
        var i3 = 0;
        var len = this.data.masksProperties.length;
        while (i3 < len) {
          if (this.data.masksProperties[i3].mode !== "n" && this.data.masksProperties[i3].cl !== false) {
            return true;
          }
          i3 += 1;
        }
        return false;
      },
      initExpressions: function initExpressions() {
        var expressionsInterfaces2 = getExpressionInterfaces();
        if (!expressionsInterfaces2) {
          return;
        }
        var LayerExpressionInterface2 = expressionsInterfaces2("layer");
        var EffectsExpressionInterface2 = expressionsInterfaces2("effects");
        var ShapeExpressionInterface2 = expressionsInterfaces2("shape");
        var TextExpressionInterface2 = expressionsInterfaces2("text");
        var CompExpressionInterface2 = expressionsInterfaces2("comp");
        this.layerInterface = LayerExpressionInterface2(this);
        if (this.data.hasMask && this.maskManager) {
          this.layerInterface.registerMaskInterface(this.maskManager);
        }
        var effectsInterface = EffectsExpressionInterface2.createEffectsInterface(this, this.layerInterface);
        this.layerInterface.registerEffectsInterface(effectsInterface);
        if (this.data.ty === 0 || this.data.xt) {
          this.compInterface = CompExpressionInterface2(this);
        } else if (this.data.ty === 4) {
          this.layerInterface.shapeInterface = ShapeExpressionInterface2(this.shapesData, this.itemsData, this.layerInterface);
          this.layerInterface.content = this.layerInterface.shapeInterface;
        } else if (this.data.ty === 5) {
          this.layerInterface.textInterface = TextExpressionInterface2(this);
          this.layerInterface.text = this.layerInterface.textInterface;
        }
      },
      setBlendMode: function setBlendMode() {
        var blendModeValue = getBlendMode(this.data.bm);
        var elem2 = this.baseElement || this.layerElement;
        elem2.style["mix-blend-mode"] = blendModeValue;
      },
      initBaseData: function initBaseData(data2, globalData2, comp2) {
        this.globalData = globalData2;
        this.comp = comp2;
        this.data = data2;
        this.layerId = createElementID();
        if (!this.data.sr) {
          this.data.sr = 1;
        }
        this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
      },
      getType: function getType() {
        return this.type;
      },
      sourceRectAtTime: function sourceRectAtTime2() {
      }
    };
    function FrameElement() {
    }
    FrameElement.prototype = {
      /**
         * @function
         * Initializes frame related properties.
         *
         */
      initFrame: function initFrame2() {
        this._isFirstFrame = false;
        this.dynamicProperties = [];
        this._mdf = false;
      },
      /**
         * @function
         * Calculates all dynamic values
         *
         * @param {number} num
         * current frame number in Layer's time
         * @param {boolean} isVisible
         * if layers is currently in range
         *
         */
      prepareProperties: function prepareProperties(num, isVisible) {
        var i3;
        var len = this.dynamicProperties.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (isVisible || this._isParent && this.dynamicProperties[i3].propType === "transform") {
            this.dynamicProperties[i3].getValue();
            if (this.dynamicProperties[i3]._mdf) {
              this.globalData._mdf = true;
              this._mdf = true;
            }
          }
        }
      },
      addDynamicProperty: function addDynamicProperty(prop) {
        if (this.dynamicProperties.indexOf(prop) === -1) {
          this.dynamicProperties.push(prop);
        }
      }
    };
    function FootageElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initRenderable();
      this.assetData = globalData2.getAssetData(data2.refId);
      this.footageData = globalData2.imageLoader.getAsset(this.assetData);
      this.initBaseData(data2, globalData2, comp2);
    }
    FootageElement.prototype.prepareFrame = function() {
    };
    extendPrototype([RenderableElement, BaseElement, FrameElement], FootageElement);
    FootageElement.prototype.getBaseElement = function() {
      return null;
    };
    FootageElement.prototype.renderFrame = function() {
    };
    FootageElement.prototype.destroy = function() {
    };
    FootageElement.prototype.initExpressions = function() {
      var expressionsInterfaces2 = getExpressionInterfaces();
      if (!expressionsInterfaces2) {
        return;
      }
      var FootageInterface2 = expressionsInterfaces2("footage");
      this.layerInterface = FootageInterface2(this);
    };
    FootageElement.prototype.getFootageData = function() {
      return this.footageData;
    };
    function AudioElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initRenderable();
      this.assetData = globalData2.getAssetData(data2.refId);
      this.initBaseData(data2, globalData2, comp2);
      this._isPlaying = false;
      this._canPlay = false;
      var assetPath = this.globalData.getAssetsPath(this.assetData);
      this.audio = this.globalData.audioController.createAudio(assetPath);
      this._currentTime = 0;
      this.globalData.audioController.addAudio(this);
      this._volumeMultiplier = 1;
      this._volume = 1;
      this._previousVolume = null;
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
      this.lv = PropertyFactory.getProp(this, data2.au && data2.au.lv ? data2.au.lv : {
        k: [100]
      }, 1, 0.01, this);
    }
    AudioElement.prototype.prepareFrame = function(num) {
      this.prepareRenderableFrame(num, true);
      this.prepareProperties(num, true);
      if (!this.tm._placeholder) {
        var timeRemapped = this.tm.v;
        this._currentTime = timeRemapped;
      } else {
        this._currentTime = num / this.data.sr;
      }
      this._volume = this.lv.v[0];
      var totalVolume = this._volume * this._volumeMultiplier;
      if (this._previousVolume !== totalVolume) {
        this._previousVolume = totalVolume;
        this.audio.volume(totalVolume);
      }
    };
    extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);
    AudioElement.prototype.renderFrame = function() {
      if (this.isInRange && this._canPlay) {
        if (!this._isPlaying) {
          this.audio.play();
          this.audio.seek(this._currentTime / this.globalData.frameRate);
          this._isPlaying = true;
        } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {
          this.audio.seek(this._currentTime / this.globalData.frameRate);
        }
      }
    };
    AudioElement.prototype.show = function() {
    };
    AudioElement.prototype.hide = function() {
      this.audio.pause();
      this._isPlaying = false;
    };
    AudioElement.prototype.pause = function() {
      this.audio.pause();
      this._isPlaying = false;
      this._canPlay = false;
    };
    AudioElement.prototype.resume = function() {
      this._canPlay = true;
    };
    AudioElement.prototype.setRate = function(rateValue) {
      this.audio.rate(rateValue);
    };
    AudioElement.prototype.volume = function(volumeValue) {
      this._volumeMultiplier = volumeValue;
      this._previousVolume = volumeValue * this._volume;
      this.audio.volume(this._previousVolume);
    };
    AudioElement.prototype.getBaseElement = function() {
      return null;
    };
    AudioElement.prototype.destroy = function() {
    };
    AudioElement.prototype.sourceRectAtTime = function() {
    };
    AudioElement.prototype.initExpressions = function() {
    };
    function BaseRenderer() {
    }
    BaseRenderer.prototype.checkLayers = function(num) {
      var i3;
      var len = this.layers.length;
      var data2;
      this.completeLayers = true;
      for (i3 = len - 1; i3 >= 0; i3 -= 1) {
        if (!this.elements[i3]) {
          data2 = this.layers[i3];
          if (data2.ip - data2.st <= num - this.layers[i3].st && data2.op - data2.st > num - this.layers[i3].st) {
            this.buildItem(i3);
          }
        }
        this.completeLayers = this.elements[i3] ? this.completeLayers : false;
      }
      this.checkPendingElements();
    };
    BaseRenderer.prototype.createItem = function(layer) {
      switch (layer.ty) {
        case 2:
          return this.createImage(layer);
        case 0:
          return this.createComp(layer);
        case 1:
          return this.createSolid(layer);
        case 3:
          return this.createNull(layer);
        case 4:
          return this.createShape(layer);
        case 5:
          return this.createText(layer);
        case 6:
          return this.createAudio(layer);
        case 13:
          return this.createCamera(layer);
        case 15:
          return this.createFootage(layer);
        default:
          return this.createNull(layer);
      }
    };
    BaseRenderer.prototype.createCamera = function() {
      throw new Error("You're using a 3d camera. Try the html renderer.");
    };
    BaseRenderer.prototype.createAudio = function(data2) {
      return new AudioElement(data2, this.globalData, this);
    };
    BaseRenderer.prototype.createFootage = function(data2) {
      return new FootageElement(data2, this.globalData, this);
    };
    BaseRenderer.prototype.buildAllItems = function() {
      var i3;
      var len = this.layers.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        this.buildItem(i3);
      }
      this.checkPendingElements();
    };
    BaseRenderer.prototype.includeLayers = function(newLayers) {
      this.completeLayers = false;
      var i3;
      var len = newLayers.length;
      var j2;
      var jLen = this.layers.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        j2 = 0;
        while (j2 < jLen) {
          if (this.layers[j2].id === newLayers[i3].id) {
            this.layers[j2] = newLayers[i3];
            break;
          }
          j2 += 1;
        }
      }
    };
    BaseRenderer.prototype.setProjectInterface = function(pInterface) {
      this.globalData.projectInterface = pInterface;
    };
    BaseRenderer.prototype.initItems = function() {
      if (!this.globalData.progressiveLoad) {
        this.buildAllItems();
      }
    };
    BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
      var elements = this.elements;
      var layers2 = this.layers;
      var i3 = 0;
      var len = layers2.length;
      while (i3 < len) {
        if (layers2[i3].ind == parentName) {
          if (!elements[i3] || elements[i3] === true) {
            this.buildItem(i3);
            this.addPendingElement(element);
          } else {
            hierarchy.push(elements[i3]);
            elements[i3].setAsParent();
            if (layers2[i3].parent !== void 0) {
              this.buildElementParenting(element, layers2[i3].parent, hierarchy);
            } else {
              element.setHierarchy(hierarchy);
            }
          }
        }
        i3 += 1;
      }
    };
    BaseRenderer.prototype.addPendingElement = function(element) {
      this.pendingElements.push(element);
    };
    BaseRenderer.prototype.searchExtraCompositions = function(assets2) {
      var i3;
      var len = assets2.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (assets2[i3].xt) {
          var comp2 = this.createComp(assets2[i3]);
          comp2.initExpressions();
          this.globalData.projectInterface.registerComposition(comp2);
        }
      }
    };
    BaseRenderer.prototype.getElementById = function(ind) {
      var i3;
      var len = this.elements.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.elements[i3].data.ind === ind) {
          return this.elements[i3];
        }
      }
      return null;
    };
    BaseRenderer.prototype.getElementByPath = function(path) {
      var pathValue = path.shift();
      var element;
      if (typeof pathValue === "number") {
        element = this.elements[pathValue];
      } else {
        var i3;
        var len = this.elements.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (this.elements[i3].data.nm === pathValue) {
            element = this.elements[i3];
            break;
          }
        }
      }
      if (path.length === 0) {
        return element;
      }
      return element.getElementByPath(path);
    };
    BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {
      this.globalData.fontManager = new FontManager();
      this.globalData.slotManager = slotFactory(animData);
      this.globalData.fontManager.addChars(animData.chars);
      this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
      this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
      this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
      this.globalData.imageLoader = this.animationItem.imagePreloader;
      this.globalData.audioController = this.animationItem.audioController;
      this.globalData.frameId = 0;
      this.globalData.frameRate = animData.fr;
      this.globalData.nm = animData.nm;
      this.globalData.compSize = {
        w: animData.w,
        h: animData.h
      };
    };
    var effectTypes = {
      TRANSFORM_EFFECT: "transformEFfect"
    };
    function TransformElement() {
    }
    TransformElement.prototype = {
      initTransform: function initTransform() {
        var mat = new Matrix();
        this.finalTransform = {
          mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
            o: 0
          },
          _matMdf: false,
          _localMatMdf: false,
          _opMdf: false,
          mat,
          localMat: mat,
          localOpacity: 1
        };
        if (this.data.ao) {
          this.finalTransform.mProp.autoOriented = true;
        }
        if (this.data.ty !== 11)
          ;
      },
      renderTransform: function renderTransform() {
        this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
        this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;
        if (this.hierarchy) {
          var mat;
          var finalMat = this.finalTransform.mat;
          var i3 = 0;
          var len = this.hierarchy.length;
          if (!this.finalTransform._matMdf) {
            while (i3 < len) {
              if (this.hierarchy[i3].finalTransform.mProp._mdf) {
                this.finalTransform._matMdf = true;
                break;
              }
              i3 += 1;
            }
          }
          if (this.finalTransform._matMdf) {
            mat = this.finalTransform.mProp.v.props;
            finalMat.cloneFromProps(mat);
            for (i3 = 0; i3 < len; i3 += 1) {
              finalMat.multiply(this.hierarchy[i3].finalTransform.mProp.v);
            }
          }
        }
        if (this.finalTransform._matMdf) {
          this.finalTransform._localMatMdf = this.finalTransform._matMdf;
        }
        if (this.finalTransform._opMdf) {
          this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
        }
      },
      renderLocalTransform: function renderLocalTransform() {
        if (this.localTransforms) {
          var i3 = 0;
          var len = this.localTransforms.length;
          this.finalTransform._localMatMdf = this.finalTransform._matMdf;
          if (!this.finalTransform._localMatMdf || !this.finalTransform._opMdf) {
            while (i3 < len) {
              if (this.localTransforms[i3]._mdf) {
                this.finalTransform._localMatMdf = true;
              }
              if (this.localTransforms[i3]._opMdf && !this.finalTransform._opMdf) {
                this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
                this.finalTransform._opMdf = true;
              }
              i3 += 1;
            }
          }
          if (this.finalTransform._localMatMdf) {
            var localMat = this.finalTransform.localMat;
            this.localTransforms[0].matrix.clone(localMat);
            for (i3 = 1; i3 < len; i3 += 1) {
              var lmat = this.localTransforms[i3].matrix;
              localMat.multiply(lmat);
            }
            localMat.multiply(this.finalTransform.mat);
          }
          if (this.finalTransform._opMdf) {
            var localOp = this.finalTransform.localOpacity;
            for (i3 = 0; i3 < len; i3 += 1) {
              localOp *= this.localTransforms[i3].opacity * 0.01;
            }
            this.finalTransform.localOpacity = localOp;
          }
        }
      },
      searchEffectTransforms: function searchEffectTransforms() {
        if (this.renderableEffectsManager) {
          var transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
          if (transformEffects.length) {
            this.localTransforms = [];
            this.finalTransform.localMat = new Matrix();
            var i3 = 0;
            var len = transformEffects.length;
            for (i3 = 0; i3 < len; i3 += 1) {
              this.localTransforms.push(transformEffects[i3]);
            }
          }
        }
      },
      globalToLocal: function globalToLocal(pt2) {
        var transforms = [];
        transforms.push(this.finalTransform);
        var flag = true;
        var comp2 = this.comp;
        while (flag) {
          if (comp2.finalTransform) {
            if (comp2.data.hasMask) {
              transforms.splice(0, 0, comp2.finalTransform);
            }
            comp2 = comp2.comp;
          } else {
            flag = false;
          }
        }
        var i3;
        var len = transforms.length;
        var ptNew;
        for (i3 = 0; i3 < len; i3 += 1) {
          ptNew = transforms[i3].mat.applyToPointArray(0, 0, 0);
          pt2 = [pt2[0] - ptNew[0], pt2[1] - ptNew[1], 0];
        }
        return pt2;
      },
      mHelper: new Matrix()
    };
    function MaskElement(data2, element, globalData2) {
      this.data = data2;
      this.element = element;
      this.globalData = globalData2;
      this.storedData = [];
      this.masksProperties = this.data.masksProperties || [];
      this.maskElement = null;
      var defs = this.globalData.defs;
      var i3;
      var len = this.masksProperties ? this.masksProperties.length : 0;
      this.viewData = createSizedArray(len);
      this.solidPath = "";
      var path;
      var properties2 = this.masksProperties;
      var count = 0;
      var currentMasks = [];
      var j2;
      var jLen;
      var layerId = createElementID();
      var rect;
      var expansor;
      var feMorph;
      var x3;
      var maskType = "clipPath";
      var maskRef = "clip-path";
      for (i3 = 0; i3 < len; i3 += 1) {
        if (properties2[i3].mode !== "a" && properties2[i3].mode !== "n" || properties2[i3].inv || properties2[i3].o.k !== 100 || properties2[i3].o.x) {
          maskType = "mask";
          maskRef = "mask";
        }
        if ((properties2[i3].mode === "s" || properties2[i3].mode === "i") && count === 0) {
          rect = createNS("rect");
          rect.setAttribute("fill", "#ffffff");
          rect.setAttribute("width", this.element.comp.data.w || 0);
          rect.setAttribute("height", this.element.comp.data.h || 0);
          currentMasks.push(rect);
        } else {
          rect = null;
        }
        path = createNS("path");
        if (properties2[i3].mode === "n") {
          this.viewData[i3] = {
            op: PropertyFactory.getProp(this.element, properties2[i3].o, 0, 0.01, this.element),
            prop: ShapePropertyFactory.getShapeProp(this.element, properties2[i3], 3),
            elem: path,
            lastPath: ""
          };
          defs.appendChild(path);
        } else {
          count += 1;
          path.setAttribute("fill", properties2[i3].mode === "s" ? "#000000" : "#ffffff");
          path.setAttribute("clip-rule", "nonzero");
          var filterID;
          if (properties2[i3].x.k !== 0) {
            maskType = "mask";
            maskRef = "mask";
            x3 = PropertyFactory.getProp(this.element, properties2[i3].x, 0, null, this.element);
            filterID = createElementID();
            expansor = createNS("filter");
            expansor.setAttribute("id", filterID);
            feMorph = createNS("feMorphology");
            feMorph.setAttribute("operator", "erode");
            feMorph.setAttribute("in", "SourceGraphic");
            feMorph.setAttribute("radius", "0");
            expansor.appendChild(feMorph);
            defs.appendChild(expansor);
            path.setAttribute("stroke", properties2[i3].mode === "s" ? "#000000" : "#ffffff");
          } else {
            feMorph = null;
            x3 = null;
          }
          this.storedData[i3] = {
            elem: path,
            x: x3,
            expan: feMorph,
            lastPath: "",
            lastOperator: "",
            filterId: filterID,
            lastRadius: 0
          };
          if (properties2[i3].mode === "i") {
            jLen = currentMasks.length;
            var g2 = createNS("g");
            for (j2 = 0; j2 < jLen; j2 += 1) {
              g2.appendChild(currentMasks[j2]);
            }
            var mask2 = createNS("mask");
            mask2.setAttribute("mask-type", "alpha");
            mask2.setAttribute("id", layerId + "_" + count);
            mask2.appendChild(path);
            defs.appendChild(mask2);
            g2.setAttribute("mask", "url(" + getLocationHref() + "#" + layerId + "_" + count + ")");
            currentMasks.length = 0;
            currentMasks.push(g2);
          } else {
            currentMasks.push(path);
          }
          if (properties2[i3].inv && !this.solidPath) {
            this.solidPath = this.createLayerSolidPath();
          }
          this.viewData[i3] = {
            elem: path,
            lastPath: "",
            op: PropertyFactory.getProp(this.element, properties2[i3].o, 0, 0.01, this.element),
            prop: ShapePropertyFactory.getShapeProp(this.element, properties2[i3], 3),
            invRect: rect
          };
          if (!this.viewData[i3].prop.k) {
            this.drawPath(properties2[i3], this.viewData[i3].prop.v, this.viewData[i3]);
          }
        }
      }
      this.maskElement = createNS(maskType);
      len = currentMasks.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        this.maskElement.appendChild(currentMasks[i3]);
      }
      if (count > 0) {
        this.maskElement.setAttribute("id", layerId);
        this.element.maskedElement.setAttribute(maskRef, "url(" + getLocationHref() + "#" + layerId + ")");
        defs.appendChild(this.maskElement);
      }
      if (this.viewData.length) {
        this.element.addRenderableComponent(this);
      }
    }
    MaskElement.prototype.getMaskProperty = function(pos) {
      return this.viewData[pos].prop;
    };
    MaskElement.prototype.renderFrame = function(isFirstFrame) {
      var finalMat = this.element.finalTransform.mat;
      var i3;
      var len = this.masksProperties.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.viewData[i3].prop._mdf || isFirstFrame) {
          this.drawPath(this.masksProperties[i3], this.viewData[i3].prop.v, this.viewData[i3]);
        }
        if (this.viewData[i3].op._mdf || isFirstFrame) {
          this.viewData[i3].elem.setAttribute("fill-opacity", this.viewData[i3].op.v);
        }
        if (this.masksProperties[i3].mode !== "n") {
          if (this.viewData[i3].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
            this.viewData[i3].invRect.setAttribute("transform", finalMat.getInverseMatrix().to2dCSS());
          }
          if (this.storedData[i3].x && (this.storedData[i3].x._mdf || isFirstFrame)) {
            var feMorph = this.storedData[i3].expan;
            if (this.storedData[i3].x.v < 0) {
              if (this.storedData[i3].lastOperator !== "erode") {
                this.storedData[i3].lastOperator = "erode";
                this.storedData[i3].elem.setAttribute("filter", "url(" + getLocationHref() + "#" + this.storedData[i3].filterId + ")");
              }
              feMorph.setAttribute("radius", -this.storedData[i3].x.v);
            } else {
              if (this.storedData[i3].lastOperator !== "dilate") {
                this.storedData[i3].lastOperator = "dilate";
                this.storedData[i3].elem.setAttribute("filter", null);
              }
              this.storedData[i3].elem.setAttribute("stroke-width", this.storedData[i3].x.v * 2);
            }
          }
        }
      }
    };
    MaskElement.prototype.getMaskelement = function() {
      return this.maskElement;
    };
    MaskElement.prototype.createLayerSolidPath = function() {
      var path = "M0,0 ";
      path += " h" + this.globalData.compSize.w;
      path += " v" + this.globalData.compSize.h;
      path += " h-" + this.globalData.compSize.w;
      path += " v-" + this.globalData.compSize.h + " ";
      return path;
    };
    MaskElement.prototype.drawPath = function(pathData, pathNodes, viewData) {
      var pathString = " M" + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
      var i3;
      var len;
      len = pathNodes._length;
      for (i3 = 1; i3 < len; i3 += 1) {
        pathString += " C" + pathNodes.o[i3 - 1][0] + "," + pathNodes.o[i3 - 1][1] + " " + pathNodes.i[i3][0] + "," + pathNodes.i[i3][1] + " " + pathNodes.v[i3][0] + "," + pathNodes.v[i3][1];
      }
      if (pathNodes.c && len > 1) {
        pathString += " C" + pathNodes.o[i3 - 1][0] + "," + pathNodes.o[i3 - 1][1] + " " + pathNodes.i[0][0] + "," + pathNodes.i[0][1] + " " + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
      }
      if (viewData.lastPath !== pathString) {
        var pathShapeValue = "";
        if (viewData.elem) {
          if (pathNodes.c) {
            pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
          }
          viewData.elem.setAttribute("d", pathShapeValue);
        }
        viewData.lastPath = pathString;
      }
    };
    MaskElement.prototype.destroy = function() {
      this.element = null;
      this.globalData = null;
      this.maskElement = null;
      this.data = null;
      this.masksProperties = null;
    };
    var filtersFactory = function() {
      var ob2 = {};
      ob2.createFilter = createFilter;
      ob2.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;
      function createFilter(filId, skipCoordinates) {
        var fil = createNS("filter");
        fil.setAttribute("id", filId);
        if (skipCoordinates !== true) {
          fil.setAttribute("filterUnits", "objectBoundingBox");
          fil.setAttribute("x", "0%");
          fil.setAttribute("y", "0%");
          fil.setAttribute("width", "100%");
          fil.setAttribute("height", "100%");
        }
        return fil;
      }
      function createAlphaToLuminanceFilter() {
        var feColorMatrix = createNS("feColorMatrix");
        feColorMatrix.setAttribute("type", "matrix");
        feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
        feColorMatrix.setAttribute("values", "0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1");
        return feColorMatrix;
      }
      return ob2;
    }();
    var featureSupport = function() {
      var ob2 = {
        maskType: true,
        svgLumaHidden: true,
        offscreenCanvas: typeof OffscreenCanvas !== "undefined"
      };
      if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
        ob2.maskType = false;
      }
      if (/firefox/i.test(navigator.userAgent)) {
        ob2.svgLumaHidden = false;
      }
      return ob2;
    }();
    var registeredEffects$1 = {};
    var idPrefix = "filter_result_";
    function SVGEffects(elem2) {
      var i3;
      var source = "SourceGraphic";
      var len = elem2.data.ef ? elem2.data.ef.length : 0;
      var filId = createElementID();
      var fil = filtersFactory.createFilter(filId, true);
      var count = 0;
      this.filters = [];
      var filterManager;
      for (i3 = 0; i3 < len; i3 += 1) {
        filterManager = null;
        var type = elem2.data.ef[i3].ty;
        if (registeredEffects$1[type]) {
          var Effect = registeredEffects$1[type].effect;
          filterManager = new Effect(fil, elem2.effectsManager.effectElements[i3], elem2, idPrefix + count, source);
          source = idPrefix + count;
          if (registeredEffects$1[type].countsAsEffect) {
            count += 1;
          }
        }
        if (filterManager) {
          this.filters.push(filterManager);
        }
      }
      if (count) {
        elem2.globalData.defs.appendChild(fil);
        elem2.layerElement.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
      }
      if (this.filters.length) {
        elem2.addRenderableComponent(this);
      }
    }
    SVGEffects.prototype.renderFrame = function(_isFirstFrame) {
      var i3;
      var len = this.filters.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        this.filters[i3].renderFrame(_isFirstFrame);
      }
    };
    SVGEffects.prototype.getEffects = function(type) {
      var i3;
      var len = this.filters.length;
      var effects = [];
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.filters[i3].type === type) {
          effects.push(this.filters[i3]);
        }
      }
      return effects;
    };
    function registerEffect$1(id2, effect2, countsAsEffect) {
      registeredEffects$1[id2] = {
        effect: effect2,
        countsAsEffect
      };
    }
    function SVGBaseElement() {
    }
    SVGBaseElement.prototype = {
      initRendererElement: function initRendererElement() {
        this.layerElement = createNS("g");
      },
      createContainerElements: function createContainerElements() {
        this.matteElement = createNS("g");
        this.transformedElement = this.layerElement;
        this.maskedElement = this.layerElement;
        this._sizeChanged = false;
        var layerElementParent = null;
        if (this.data.td) {
          this.matteMasks = {};
          var gg2 = createNS("g");
          gg2.setAttribute("id", this.layerId);
          gg2.appendChild(this.layerElement);
          layerElementParent = gg2;
          this.globalData.defs.appendChild(gg2);
        } else if (this.data.tt) {
          this.matteElement.appendChild(this.layerElement);
          layerElementParent = this.matteElement;
          this.baseElement = this.matteElement;
        } else {
          this.baseElement = this.layerElement;
        }
        if (this.data.ln) {
          this.layerElement.setAttribute("id", this.data.ln);
        }
        if (this.data.cl) {
          this.layerElement.setAttribute("class", this.data.cl);
        }
        if (this.data.ty === 0 && !this.data.hd) {
          var cp = createNS("clipPath");
          var pt2 = createNS("path");
          pt2.setAttribute("d", "M0,0 L" + this.data.w + ",0 L" + this.data.w + "," + this.data.h + " L0," + this.data.h + "z");
          var clipId = createElementID();
          cp.setAttribute("id", clipId);
          cp.appendChild(pt2);
          this.globalData.defs.appendChild(cp);
          if (this.checkMasks()) {
            var cpGroup = createNS("g");
            cpGroup.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
            cpGroup.appendChild(this.layerElement);
            this.transformedElement = cpGroup;
            if (layerElementParent) {
              layerElementParent.appendChild(this.transformedElement);
            } else {
              this.baseElement = this.transformedElement;
            }
          } else {
            this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
          }
        }
        if (this.data.bm !== 0) {
          this.setBlendMode();
        }
      },
      renderElement: function renderElement() {
        if (this.finalTransform._localMatMdf) {
          this.transformedElement.setAttribute("transform", this.finalTransform.localMat.to2dCSS());
        }
        if (this.finalTransform._opMdf) {
          this.transformedElement.setAttribute("opacity", this.finalTransform.localOpacity);
        }
      },
      destroyBaseElement: function destroyBaseElement() {
        this.layerElement = null;
        this.matteElement = null;
        this.maskManager.destroy();
      },
      getBaseElement: function getBaseElement() {
        if (this.data.hd) {
          return null;
        }
        return this.baseElement;
      },
      createRenderableComponents: function createRenderableComponents() {
        this.maskManager = new MaskElement(this.data, this, this.globalData);
        this.renderableEffectsManager = new SVGEffects(this);
        this.searchEffectTransforms();
      },
      getMatte: function getMatte(matteType) {
        if (!this.matteMasks) {
          this.matteMasks = {};
        }
        if (!this.matteMasks[matteType]) {
          var id2 = this.layerId + "_" + matteType;
          var filId;
          var fil;
          var useElement;
          var gg2;
          if (matteType === 1 || matteType === 3) {
            var masker = createNS("mask");
            masker.setAttribute("id", id2);
            masker.setAttribute("mask-type", matteType === 3 ? "luminance" : "alpha");
            useElement = createNS("use");
            useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
            masker.appendChild(useElement);
            this.globalData.defs.appendChild(masker);
            if (!featureSupport.maskType && matteType === 1) {
              masker.setAttribute("mask-type", "luminance");
              filId = createElementID();
              fil = filtersFactory.createFilter(filId);
              this.globalData.defs.appendChild(fil);
              fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
              gg2 = createNS("g");
              gg2.appendChild(useElement);
              masker.appendChild(gg2);
              gg2.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
            }
          } else if (matteType === 2) {
            var maskGroup = createNS("mask");
            maskGroup.setAttribute("id", id2);
            maskGroup.setAttribute("mask-type", "alpha");
            var maskGrouper = createNS("g");
            maskGroup.appendChild(maskGrouper);
            filId = createElementID();
            fil = filtersFactory.createFilter(filId);
            var feCTr = createNS("feComponentTransfer");
            feCTr.setAttribute("in", "SourceGraphic");
            fil.appendChild(feCTr);
            var feFunc = createNS("feFuncA");
            feFunc.setAttribute("type", "table");
            feFunc.setAttribute("tableValues", "1.0 0.0");
            feCTr.appendChild(feFunc);
            this.globalData.defs.appendChild(fil);
            var alphaRect = createNS("rect");
            alphaRect.setAttribute("width", this.comp.data.w);
            alphaRect.setAttribute("height", this.comp.data.h);
            alphaRect.setAttribute("x", "0");
            alphaRect.setAttribute("y", "0");
            alphaRect.setAttribute("fill", "#ffffff");
            alphaRect.setAttribute("opacity", "0");
            maskGrouper.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
            maskGrouper.appendChild(alphaRect);
            useElement = createNS("use");
            useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
            maskGrouper.appendChild(useElement);
            if (!featureSupport.maskType) {
              maskGroup.setAttribute("mask-type", "luminance");
              fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
              gg2 = createNS("g");
              maskGrouper.appendChild(alphaRect);
              gg2.appendChild(this.layerElement);
              maskGrouper.appendChild(gg2);
            }
            this.globalData.defs.appendChild(maskGroup);
          }
          this.matteMasks[matteType] = id2;
        }
        return this.matteMasks[matteType];
      },
      setMatte: function setMatte(id2) {
        if (!this.matteElement) {
          return;
        }
        this.matteElement.setAttribute("mask", "url(" + getLocationHref() + "#" + id2 + ")");
      }
    };
    function HierarchyElement() {
    }
    HierarchyElement.prototype = {
      /**
         * @function
         * Initializes hierarchy properties
         *
         */
      initHierarchy: function initHierarchy() {
        this.hierarchy = [];
        this._isParent = false;
        this.checkParenting();
      },
      /**
         * @function
         * Sets layer's hierarchy.
         * @param {array} hierarch
         * layer's parent list
         *
         */
      setHierarchy: function setHierarchy(hierarchy) {
        this.hierarchy = hierarchy;
      },
      /**
         * @function
         * Sets layer as parent.
         *
         */
      setAsParent: function setAsParent() {
        this._isParent = true;
      },
      /**
         * @function
         * Searches layer's parenting chain
         *
         */
      checkParenting: function checkParenting() {
        if (this.data.parent !== void 0) {
          this.comp.buildElementParenting(this, this.data.parent, []);
        }
      }
    };
    function RenderableDOMElement() {
    }
    (function() {
      var _prototype = {
        initElement: function initElement(data2, globalData2, comp2) {
          this.initFrame();
          this.initBaseData(data2, globalData2, comp2);
          this.initTransform(data2, globalData2, comp2);
          this.initHierarchy();
          this.initRenderable();
          this.initRendererElement();
          this.createContainerElements();
          this.createRenderableComponents();
          this.createContent();
          this.hide();
        },
        hide: function hide() {
          if (!this.hidden && (!this.isInRange || this.isTransparent)) {
            var elem2 = this.baseElement || this.layerElement;
            elem2.style.display = "none";
            this.hidden = true;
          }
        },
        show: function show() {
          if (this.isInRange && !this.isTransparent) {
            if (!this.data.hd) {
              var elem2 = this.baseElement || this.layerElement;
              elem2.style.display = "block";
            }
            this.hidden = false;
            this._isFirstFrame = true;
          }
        },
        renderFrame: function renderFrame() {
          if (this.data.hd || this.hidden) {
            return;
          }
          this.renderTransform();
          this.renderRenderable();
          this.renderLocalTransform();
          this.renderElement();
          this.renderInnerContent();
          if (this._isFirstFrame) {
            this._isFirstFrame = false;
          }
        },
        renderInnerContent: function renderInnerContent() {
        },
        prepareFrame: function prepareFrame(num) {
          this._mdf = false;
          this.prepareRenderableFrame(num);
          this.prepareProperties(num, this.isInRange);
          this.checkTransparency();
        },
        destroy: function destroy() {
          this.innerElem = null;
          this.destroyBaseElement();
        }
      };
      extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
    })();
    function IImageElement(data2, globalData2, comp2) {
      this.assetData = globalData2.getAssetData(data2.refId);
      if (this.assetData && this.assetData.sid) {
        this.assetData = globalData2.slotManager.getProp(this.assetData);
      }
      this.initElement(data2, globalData2, comp2);
      this.sourceRect = {
        top: 0,
        left: 0,
        width: this.assetData.w,
        height: this.assetData.h
      };
    }
    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);
    IImageElement.prototype.createContent = function() {
      var assetPath = this.globalData.getAssetsPath(this.assetData);
      this.innerElem = createNS("image");
      this.innerElem.setAttribute("width", this.assetData.w + "px");
      this.innerElem.setAttribute("height", this.assetData.h + "px");
      this.innerElem.setAttribute("preserveAspectRatio", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
      this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
      this.layerElement.appendChild(this.innerElem);
    };
    IImageElement.prototype.sourceRectAtTime = function() {
      return this.sourceRect;
    };
    function ProcessedElement(element, position2) {
      this.elem = element;
      this.pos = position2;
    }
    function IShapeElement() {
    }
    IShapeElement.prototype = {
      addShapeToModifiers: function addShapeToModifiers(data2) {
        var i3;
        var len = this.shapeModifiers.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          this.shapeModifiers[i3].addShape(data2);
        }
      },
      isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data2) {
        var i3 = 0;
        var len = this.shapeModifiers.length;
        while (i3 < len) {
          if (this.shapeModifiers[i3].isAnimatedWithShape(data2)) {
            return true;
          }
        }
        return false;
      },
      renderModifiers: function renderModifiers() {
        if (!this.shapeModifiers.length) {
          return;
        }
        var i3;
        var len = this.shapes.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          this.shapes[i3].sh.reset();
        }
        len = this.shapeModifiers.length;
        var shouldBreakProcess;
        for (i3 = len - 1; i3 >= 0; i3 -= 1) {
          shouldBreakProcess = this.shapeModifiers[i3].processShapes(this._isFirstFrame);
          if (shouldBreakProcess) {
            break;
          }
        }
      },
      searchProcessedElement: function searchProcessedElement(elem2) {
        var elements = this.processedElements;
        var i3 = 0;
        var len = elements.length;
        while (i3 < len) {
          if (elements[i3].elem === elem2) {
            return elements[i3].pos;
          }
          i3 += 1;
        }
        return 0;
      },
      addProcessedElement: function addProcessedElement(elem2, pos) {
        var elements = this.processedElements;
        var i3 = elements.length;
        while (i3) {
          i3 -= 1;
          if (elements[i3].elem === elem2) {
            elements[i3].pos = pos;
            return;
          }
        }
        elements.push(new ProcessedElement(elem2, pos));
      },
      prepareFrame: function prepareFrame(num) {
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
      }
    };
    var lineCapEnum = {
      1: "butt",
      2: "round",
      3: "square"
    };
    var lineJoinEnum = {
      1: "miter",
      2: "round",
      3: "bevel"
    };
    function SVGShapeData(transformers, level, shape2) {
      this.caches = [];
      this.styles = [];
      this.transformers = transformers;
      this.lStr = "";
      this.sh = shape2;
      this.lvl = level;
      this._isAnimated = !!shape2.k;
      var i3 = 0;
      var len = transformers.length;
      while (i3 < len) {
        if (transformers[i3].mProps.dynamicProperties.length) {
          this._isAnimated = true;
          break;
        }
        i3 += 1;
      }
    }
    SVGShapeData.prototype.setAsAnimated = function() {
      this._isAnimated = true;
    };
    function SVGStyleData(data2, level) {
      this.data = data2;
      this.type = data2.ty;
      this.d = "";
      this.lvl = level;
      this._mdf = false;
      this.closed = data2.hd === true;
      this.pElem = createNS("path");
      this.msElem = null;
    }
    SVGStyleData.prototype.reset = function() {
      this.d = "";
      this._mdf = false;
    };
    function DashProperty(elem2, data2, renderer, container2) {
      this.elem = elem2;
      this.frameId = -1;
      this.dataProps = createSizedArray(data2.length);
      this.renderer = renderer;
      this.k = false;
      this.dashStr = "";
      this.dashArray = createTypedArray("float32", data2.length ? data2.length - 1 : 0);
      this.dashoffset = createTypedArray("float32", 1);
      this.initDynamicPropertyContainer(container2);
      var i3;
      var len = data2.length || 0;
      var prop;
      for (i3 = 0; i3 < len; i3 += 1) {
        prop = PropertyFactory.getProp(elem2, data2[i3].v, 0, 0, this);
        this.k = prop.k || this.k;
        this.dataProps[i3] = {
          n: data2[i3].n,
          p: prop
        };
      }
      if (!this.k) {
        this.getValue(true);
      }
      this._isAnimated = this.k;
    }
    DashProperty.prototype.getValue = function(forceRender) {
      if (this.elem.globalData.frameId === this.frameId && !forceRender) {
        return;
      }
      this.frameId = this.elem.globalData.frameId;
      this.iterateDynamicProperties();
      this._mdf = this._mdf || forceRender;
      if (this._mdf) {
        var i3 = 0;
        var len = this.dataProps.length;
        if (this.renderer === "svg") {
          this.dashStr = "";
        }
        for (i3 = 0; i3 < len; i3 += 1) {
          if (this.dataProps[i3].n !== "o") {
            if (this.renderer === "svg") {
              this.dashStr += " " + this.dataProps[i3].p.v;
            } else {
              this.dashArray[i3] = this.dataProps[i3].p.v;
            }
          } else {
            this.dashoffset[0] = this.dataProps[i3].p.v;
          }
        }
      }
    };
    extendPrototype([DynamicPropertyContainer], DashProperty);
    function SVGStrokeStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
      this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
      this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
      this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
      this.style = styleOb;
      this._isAnimated = !!this._isAnimated;
    }
    extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
    function SVGFillStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
      this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
      this.style = styleOb;
    }
    extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
    function SVGNoStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.style = styleOb;
    }
    extendPrototype([DynamicPropertyContainer], SVGNoStyleData);
    function GradientProperty(elem2, data2, container2) {
      this.data = data2;
      this.c = createTypedArray("uint8c", data2.p * 4);
      var cLength = data2.k.k[0].s ? data2.k.k[0].s.length - data2.p * 4 : data2.k.k.length - data2.p * 4;
      this.o = createTypedArray("float32", cLength);
      this._cmdf = false;
      this._omdf = false;
      this._collapsable = this.checkCollapsable();
      this._hasOpacity = cLength;
      this.initDynamicPropertyContainer(container2);
      this.prop = PropertyFactory.getProp(elem2, data2.k, 1, null, this);
      this.k = this.prop.k;
      this.getValue(true);
    }
    GradientProperty.prototype.comparePoints = function(values2, points) {
      var i3 = 0;
      var len = this.o.length / 2;
      var diff;
      while (i3 < len) {
        diff = Math.abs(values2[i3 * 4] - values2[points * 4 + i3 * 2]);
        if (diff > 0.01) {
          return false;
        }
        i3 += 1;
      }
      return true;
    };
    GradientProperty.prototype.checkCollapsable = function() {
      if (this.o.length / 2 !== this.c.length / 4) {
        return false;
      }
      if (this.data.k.k[0].s) {
        var i3 = 0;
        var len = this.data.k.k.length;
        while (i3 < len) {
          if (!this.comparePoints(this.data.k.k[i3].s, this.data.p)) {
            return false;
          }
          i3 += 1;
        }
      } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
        return false;
      }
      return true;
    };
    GradientProperty.prototype.getValue = function(forceRender) {
      this.prop.getValue();
      this._mdf = false;
      this._cmdf = false;
      this._omdf = false;
      if (this.prop._mdf || forceRender) {
        var i3;
        var len = this.data.p * 4;
        var mult;
        var val2;
        for (i3 = 0; i3 < len; i3 += 1) {
          mult = i3 % 4 === 0 ? 100 : 255;
          val2 = Math.round(this.prop.v[i3] * mult);
          if (this.c[i3] !== val2) {
            this.c[i3] = val2;
            this._cmdf = !forceRender;
          }
        }
        if (this.o.length) {
          len = this.prop.v.length;
          for (i3 = this.data.p * 4; i3 < len; i3 += 1) {
            mult = i3 % 2 === 0 ? 100 : 1;
            val2 = i3 % 2 === 0 ? Math.round(this.prop.v[i3] * 100) : this.prop.v[i3];
            if (this.o[i3 - this.data.p * 4] !== val2) {
              this.o[i3 - this.data.p * 4] = val2;
              this._omdf = !forceRender;
            }
          }
        }
        this._mdf = !forceRender;
      }
    };
    extendPrototype([DynamicPropertyContainer], GradientProperty);
    function SVGGradientFillStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.initGradientData(elem2, data2, styleOb);
    }
    SVGGradientFillStyleData.prototype.initGradientData = function(elem2, data2, styleOb) {
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
      this.s = PropertyFactory.getProp(elem2, data2.s, 1, null, this);
      this.e = PropertyFactory.getProp(elem2, data2.e, 1, null, this);
      this.h = PropertyFactory.getProp(elem2, data2.h || {
        k: 0
      }, 0, 0.01, this);
      this.a = PropertyFactory.getProp(elem2, data2.a || {
        k: 0
      }, 0, degToRads, this);
      this.g = new GradientProperty(elem2, data2.g, this);
      this.style = styleOb;
      this.stops = [];
      this.setGradientData(styleOb.pElem, data2);
      this.setGradientOpacity(data2, styleOb);
      this._isAnimated = !!this._isAnimated;
    };
    SVGGradientFillStyleData.prototype.setGradientData = function(pathElement, data2) {
      var gradientId = createElementID();
      var gfill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
      gfill.setAttribute("id", gradientId);
      gfill.setAttribute("spreadMethod", "pad");
      gfill.setAttribute("gradientUnits", "userSpaceOnUse");
      var stops = [];
      var stop2;
      var j2;
      var jLen;
      jLen = data2.g.p * 4;
      for (j2 = 0; j2 < jLen; j2 += 4) {
        stop2 = createNS("stop");
        gfill.appendChild(stop2);
        stops.push(stop2);
      }
      pathElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + gradientId + ")");
      this.gf = gfill;
      this.cst = stops;
    };
    SVGGradientFillStyleData.prototype.setGradientOpacity = function(data2, styleOb) {
      if (this.g._hasOpacity && !this.g._collapsable) {
        var stop2;
        var j2;
        var jLen;
        var mask2 = createNS("mask");
        var maskElement = createNS("path");
        mask2.appendChild(maskElement);
        var opacityId = createElementID();
        var maskId = createElementID();
        mask2.setAttribute("id", maskId);
        var opFill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
        opFill.setAttribute("id", opacityId);
        opFill.setAttribute("spreadMethod", "pad");
        opFill.setAttribute("gradientUnits", "userSpaceOnUse");
        jLen = data2.g.k.k[0].s ? data2.g.k.k[0].s.length : data2.g.k.k.length;
        var stops = this.stops;
        for (j2 = data2.g.p * 4; j2 < jLen; j2 += 2) {
          stop2 = createNS("stop");
          stop2.setAttribute("stop-color", "rgb(255,255,255)");
          opFill.appendChild(stop2);
          stops.push(stop2);
        }
        maskElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + opacityId + ")");
        if (data2.ty === "gs") {
          maskElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
          maskElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
          if (data2.lj === 1) {
            maskElement.setAttribute("stroke-miterlimit", data2.ml);
          }
        }
        this.of = opFill;
        this.ms = mask2;
        this.ost = stops;
        this.maskId = maskId;
        styleOb.msElem = maskElement;
      }
    };
    extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
    function SVGGradientStrokeStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
      this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
      this.initGradientData(elem2, data2, styleOb);
      this._isAnimated = !!this._isAnimated;
    }
    extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
    function ShapeGroupData() {
      this.it = [];
      this.prevViewData = [];
      this.gr = createNS("g");
    }
    function SVGTransformData(mProps, op2, container2) {
      this.transform = {
        mProps,
        op: op2,
        container: container2
      };
      this.elements = [];
      this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
    }
    var buildShapeString = function buildShapeString2(pathNodes, length2, closed, mat) {
      if (length2 === 0) {
        return "";
      }
      var _o2 = pathNodes.o;
      var _i = pathNodes.i;
      var _v = pathNodes.v;
      var i3;
      var shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
      for (i3 = 1; i3 < length2; i3 += 1) {
        shapeString += " C" + mat.applyToPointStringified(_o2[i3 - 1][0], _o2[i3 - 1][1]) + " " + mat.applyToPointStringified(_i[i3][0], _i[i3][1]) + " " + mat.applyToPointStringified(_v[i3][0], _v[i3][1]);
      }
      if (closed && length2) {
        shapeString += " C" + mat.applyToPointStringified(_o2[i3 - 1][0], _o2[i3 - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
        shapeString += "z";
      }
      return shapeString;
    };
    var SVGElementsRenderer = function() {
      var _identityMatrix = new Matrix();
      var _matrixHelper = new Matrix();
      var ob2 = {
        createRenderFunction
      };
      function createRenderFunction(data2) {
        switch (data2.ty) {
          case "fl":
            return renderFill;
          case "gf":
            return renderGradient;
          case "gs":
            return renderGradientStroke;
          case "st":
            return renderStroke;
          case "sh":
          case "el":
          case "rc":
          case "sr":
            return renderPath;
          case "tr":
            return renderContentTransform;
          case "no":
            return renderNoop;
          default:
            return null;
        }
      }
      function renderContentTransform(styleData, itemData, isFirstFrame) {
        if (isFirstFrame || itemData.transform.op._mdf) {
          itemData.transform.container.setAttribute("opacity", itemData.transform.op.v);
        }
        if (isFirstFrame || itemData.transform.mProps._mdf) {
          itemData.transform.container.setAttribute("transform", itemData.transform.mProps.v.to2dCSS());
        }
      }
      function renderNoop() {
      }
      function renderPath(styleData, itemData, isFirstFrame) {
        var j2;
        var jLen;
        var pathStringTransformed;
        var redraw;
        var pathNodes;
        var l2;
        var lLen = itemData.styles.length;
        var lvl = itemData.lvl;
        var paths;
        var mat;
        var iterations;
        var k3;
        for (l2 = 0; l2 < lLen; l2 += 1) {
          redraw = itemData.sh._mdf || isFirstFrame;
          if (itemData.styles[l2].lvl < lvl) {
            mat = _matrixHelper.reset();
            iterations = lvl - itemData.styles[l2].lvl;
            k3 = itemData.transformers.length - 1;
            while (!redraw && iterations > 0) {
              redraw = itemData.transformers[k3].mProps._mdf || redraw;
              iterations -= 1;
              k3 -= 1;
            }
            if (redraw) {
              iterations = lvl - itemData.styles[l2].lvl;
              k3 = itemData.transformers.length - 1;
              while (iterations > 0) {
                mat.multiply(itemData.transformers[k3].mProps.v);
                iterations -= 1;
                k3 -= 1;
              }
            }
          } else {
            mat = _identityMatrix;
          }
          paths = itemData.sh.paths;
          jLen = paths._length;
          if (redraw) {
            pathStringTransformed = "";
            for (j2 = 0; j2 < jLen; j2 += 1) {
              pathNodes = paths.shapes[j2];
              if (pathNodes && pathNodes._length) {
                pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
              }
            }
            itemData.caches[l2] = pathStringTransformed;
          } else {
            pathStringTransformed = itemData.caches[l2];
          }
          itemData.styles[l2].d += styleData.hd === true ? "" : pathStringTransformed;
          itemData.styles[l2]._mdf = redraw || itemData.styles[l2]._mdf;
        }
      }
      function renderFill(styleData, itemData, isFirstFrame) {
        var styleElem = itemData.style;
        if (itemData.c._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("fill", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
        }
        if (itemData.o._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("fill-opacity", itemData.o.v);
        }
      }
      function renderGradientStroke(styleData, itemData, isFirstFrame) {
        renderGradient(styleData, itemData, isFirstFrame);
        renderStroke(styleData, itemData, isFirstFrame);
      }
      function renderGradient(styleData, itemData, isFirstFrame) {
        var gfill = itemData.gf;
        var hasOpacity = itemData.g._hasOpacity;
        var pt1 = itemData.s.v;
        var pt2 = itemData.e.v;
        if (itemData.o._mdf || isFirstFrame) {
          var attr = styleData.ty === "gf" ? "fill-opacity" : "stroke-opacity";
          itemData.style.pElem.setAttribute(attr, itemData.o.v);
        }
        if (itemData.s._mdf || isFirstFrame) {
          var attr1 = styleData.t === 1 ? "x1" : "cx";
          var attr2 = attr1 === "x1" ? "y1" : "cy";
          gfill.setAttribute(attr1, pt1[0]);
          gfill.setAttribute(attr2, pt1[1]);
          if (hasOpacity && !itemData.g._collapsable) {
            itemData.of.setAttribute(attr1, pt1[0]);
            itemData.of.setAttribute(attr2, pt1[1]);
          }
        }
        var stops;
        var i3;
        var len;
        var stop2;
        if (itemData.g._cmdf || isFirstFrame) {
          stops = itemData.cst;
          var cValues = itemData.g.c;
          len = stops.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            stop2 = stops[i3];
            stop2.setAttribute("offset", cValues[i3 * 4] + "%");
            stop2.setAttribute("stop-color", "rgb(" + cValues[i3 * 4 + 1] + "," + cValues[i3 * 4 + 2] + "," + cValues[i3 * 4 + 3] + ")");
          }
        }
        if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
          var oValues = itemData.g.o;
          if (itemData.g._collapsable) {
            stops = itemData.cst;
          } else {
            stops = itemData.ost;
          }
          len = stops.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            stop2 = stops[i3];
            if (!itemData.g._collapsable) {
              stop2.setAttribute("offset", oValues[i3 * 2] + "%");
            }
            stop2.setAttribute("stop-opacity", oValues[i3 * 2 + 1]);
          }
        }
        if (styleData.t === 1) {
          if (itemData.e._mdf || isFirstFrame) {
            gfill.setAttribute("x2", pt2[0]);
            gfill.setAttribute("y2", pt2[1]);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute("x2", pt2[0]);
              itemData.of.setAttribute("y2", pt2[1]);
            }
          }
        } else {
          var rad;
          if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
            rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
            gfill.setAttribute("r", rad);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute("r", rad);
            }
          }
          if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
            if (!rad) {
              rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
            }
            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
            var percent = itemData.h.v;
            if (percent >= 1) {
              percent = 0.99;
            } else if (percent <= -1) {
              percent = -0.99;
            }
            var dist = rad * percent;
            var x3 = Math.cos(ang + itemData.a.v) * dist + pt1[0];
            var y4 = Math.sin(ang + itemData.a.v) * dist + pt1[1];
            gfill.setAttribute("fx", x3);
            gfill.setAttribute("fy", y4);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute("fx", x3);
              itemData.of.setAttribute("fy", y4);
            }
          }
        }
      }
      function renderStroke(styleData, itemData, isFirstFrame) {
        var styleElem = itemData.style;
        var d4 = itemData.d;
        if (d4 && (d4._mdf || isFirstFrame) && d4.dashStr) {
          styleElem.pElem.setAttribute("stroke-dasharray", d4.dashStr);
          styleElem.pElem.setAttribute("stroke-dashoffset", d4.dashoffset[0]);
        }
        if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
          styleElem.pElem.setAttribute("stroke", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
        }
        if (itemData.o._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("stroke-opacity", itemData.o.v);
        }
        if (itemData.w._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("stroke-width", itemData.w.v);
          if (styleElem.msElem) {
            styleElem.msElem.setAttribute("stroke-width", itemData.w.v);
          }
        }
      }
      return ob2;
    }();
    function SVGShapeElement(data2, globalData2, comp2) {
      this.shapes = [];
      this.shapesData = data2.shapes;
      this.stylesList = [];
      this.shapeModifiers = [];
      this.itemsData = [];
      this.processedElements = [];
      this.animatedContents = [];
      this.initElement(data2, globalData2, comp2);
      this.prevViewData = [];
    }
    extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);
    SVGShapeElement.prototype.initSecondaryElement = function() {
    };
    SVGShapeElement.prototype.identityMatrix = new Matrix();
    SVGShapeElement.prototype.buildExpressionInterface = function() {
    };
    SVGShapeElement.prototype.createContent = function() {
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
      this.filterUniqueShapes();
    };
    SVGShapeElement.prototype.filterUniqueShapes = function() {
      var i3;
      var len = this.shapes.length;
      var shape2;
      var j2;
      var jLen = this.stylesList.length;
      var style2;
      var tempShapes = [];
      var areAnimated = false;
      for (j2 = 0; j2 < jLen; j2 += 1) {
        style2 = this.stylesList[j2];
        areAnimated = false;
        tempShapes.length = 0;
        for (i3 = 0; i3 < len; i3 += 1) {
          shape2 = this.shapes[i3];
          if (shape2.styles.indexOf(style2) !== -1) {
            tempShapes.push(shape2);
            areAnimated = shape2._isAnimated || areAnimated;
          }
        }
        if (tempShapes.length > 1 && areAnimated) {
          this.setShapesAsAnimated(tempShapes);
        }
      }
    };
    SVGShapeElement.prototype.setShapesAsAnimated = function(shapes) {
      var i3;
      var len = shapes.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        shapes[i3].setAsAnimated();
      }
    };
    SVGShapeElement.prototype.createStyleElement = function(data2, level) {
      var elementData;
      var styleOb = new SVGStyleData(data2, level);
      var pathElement = styleOb.pElem;
      if (data2.ty === "st") {
        elementData = new SVGStrokeStyleData(this, data2, styleOb);
      } else if (data2.ty === "fl") {
        elementData = new SVGFillStyleData(this, data2, styleOb);
      } else if (data2.ty === "gf" || data2.ty === "gs") {
        var GradientConstructor = data2.ty === "gf" ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
        elementData = new GradientConstructor(this, data2, styleOb);
        this.globalData.defs.appendChild(elementData.gf);
        if (elementData.maskId) {
          this.globalData.defs.appendChild(elementData.ms);
          this.globalData.defs.appendChild(elementData.of);
          pathElement.setAttribute("mask", "url(" + getLocationHref() + "#" + elementData.maskId + ")");
        }
      } else if (data2.ty === "no") {
        elementData = new SVGNoStyleData(this, data2, styleOb);
      }
      if (data2.ty === "st" || data2.ty === "gs") {
        pathElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
        pathElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
        pathElement.setAttribute("fill-opacity", "0");
        if (data2.lj === 1) {
          pathElement.setAttribute("stroke-miterlimit", data2.ml);
        }
      }
      if (data2.r === 2) {
        pathElement.setAttribute("fill-rule", "evenodd");
      }
      if (data2.ln) {
        pathElement.setAttribute("id", data2.ln);
      }
      if (data2.cl) {
        pathElement.setAttribute("class", data2.cl);
      }
      if (data2.bm) {
        pathElement.style["mix-blend-mode"] = getBlendMode(data2.bm);
      }
      this.stylesList.push(styleOb);
      this.addToAnimatedContents(data2, elementData);
      return elementData;
    };
    SVGShapeElement.prototype.createGroupElement = function(data2) {
      var elementData = new ShapeGroupData();
      if (data2.ln) {
        elementData.gr.setAttribute("id", data2.ln);
      }
      if (data2.cl) {
        elementData.gr.setAttribute("class", data2.cl);
      }
      if (data2.bm) {
        elementData.gr.style["mix-blend-mode"] = getBlendMode(data2.bm);
      }
      return elementData;
    };
    SVGShapeElement.prototype.createTransformElement = function(data2, container2) {
      var transformProperty = TransformPropertyFactory.getTransformProperty(this, data2, this);
      var elementData = new SVGTransformData(transformProperty, transformProperty.o, container2);
      this.addToAnimatedContents(data2, elementData);
      return elementData;
    };
    SVGShapeElement.prototype.createShapeElement = function(data2, ownTransformers, level) {
      var ty = 4;
      if (data2.ty === "rc") {
        ty = 5;
      } else if (data2.ty === "el") {
        ty = 6;
      } else if (data2.ty === "sr") {
        ty = 7;
      }
      var shapeProperty = ShapePropertyFactory.getShapeProp(this, data2, ty, this);
      var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
      this.shapes.push(elementData);
      this.addShapeToModifiers(elementData);
      this.addToAnimatedContents(data2, elementData);
      return elementData;
    };
    SVGShapeElement.prototype.addToAnimatedContents = function(data2, element) {
      var i3 = 0;
      var len = this.animatedContents.length;
      while (i3 < len) {
        if (this.animatedContents[i3].element === element) {
          return;
        }
        i3 += 1;
      }
      this.animatedContents.push({
        fn: SVGElementsRenderer.createRenderFunction(data2),
        element,
        data: data2
      });
    };
    SVGShapeElement.prototype.setElementStyles = function(elementData) {
      var arr = elementData.styles;
      var j2;
      var jLen = this.stylesList.length;
      for (j2 = 0; j2 < jLen; j2 += 1) {
        if (!this.stylesList[j2].closed) {
          arr.push(this.stylesList[j2]);
        }
      }
    };
    SVGShapeElement.prototype.reloadShapes = function() {
      this._isFirstFrame = true;
      var i3;
      var len = this.itemsData.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        this.prevViewData[i3] = this.itemsData[i3];
      }
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
      this.filterUniqueShapes();
      len = this.dynamicProperties.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        this.dynamicProperties[i3].getValue();
      }
      this.renderModifiers();
    };
    SVGShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, container2, level, transformers, render2) {
      var ownTransformers = [].concat(transformers);
      var i3;
      var len = arr.length - 1;
      var j2;
      var jLen;
      var ownStyles = [];
      var ownModifiers = [];
      var currentTransform;
      var modifier;
      var processedPos;
      for (i3 = len; i3 >= 0; i3 -= 1) {
        processedPos = this.searchProcessedElement(arr[i3]);
        if (!processedPos) {
          arr[i3]._render = render2;
        } else {
          itemsData[i3] = prevViewData[processedPos - 1];
        }
        if (arr[i3].ty === "fl" || arr[i3].ty === "st" || arr[i3].ty === "gf" || arr[i3].ty === "gs" || arr[i3].ty === "no") {
          if (!processedPos) {
            itemsData[i3] = this.createStyleElement(arr[i3], level);
          } else {
            itemsData[i3].style.closed = false;
          }
          if (arr[i3]._render) {
            if (itemsData[i3].style.pElem.parentNode !== container2) {
              container2.appendChild(itemsData[i3].style.pElem);
            }
          }
          ownStyles.push(itemsData[i3].style);
        } else if (arr[i3].ty === "gr") {
          if (!processedPos) {
            itemsData[i3] = this.createGroupElement(arr[i3]);
          } else {
            jLen = itemsData[i3].it.length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              itemsData[i3].prevViewData[j2] = itemsData[i3].it[j2];
            }
          }
          this.searchShapes(arr[i3].it, itemsData[i3].it, itemsData[i3].prevViewData, itemsData[i3].gr, level + 1, ownTransformers, render2);
          if (arr[i3]._render) {
            if (itemsData[i3].gr.parentNode !== container2) {
              container2.appendChild(itemsData[i3].gr);
            }
          }
        } else if (arr[i3].ty === "tr") {
          if (!processedPos) {
            itemsData[i3] = this.createTransformElement(arr[i3], container2);
          }
          currentTransform = itemsData[i3].transform;
          ownTransformers.push(currentTransform);
        } else if (arr[i3].ty === "sh" || arr[i3].ty === "rc" || arr[i3].ty === "el" || arr[i3].ty === "sr") {
          if (!processedPos) {
            itemsData[i3] = this.createShapeElement(arr[i3], ownTransformers, level);
          }
          this.setElementStyles(itemsData[i3]);
        } else if (arr[i3].ty === "tm" || arr[i3].ty === "rd" || arr[i3].ty === "ms" || arr[i3].ty === "pb" || arr[i3].ty === "zz" || arr[i3].ty === "op") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i3].ty);
            modifier.init(this, arr[i3]);
            itemsData[i3] = modifier;
            this.shapeModifiers.push(modifier);
          } else {
            modifier = itemsData[i3];
            modifier.closed = false;
          }
          ownModifiers.push(modifier);
        } else if (arr[i3].ty === "rp") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i3].ty);
            itemsData[i3] = modifier;
            modifier.init(this, arr, i3, itemsData);
            this.shapeModifiers.push(modifier);
            render2 = false;
          } else {
            modifier = itemsData[i3];
            modifier.closed = true;
          }
          ownModifiers.push(modifier);
        }
        this.addProcessedElement(arr[i3], i3 + 1);
      }
      len = ownStyles.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        ownStyles[i3].closed = true;
      }
      len = ownModifiers.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        ownModifiers[i3].closed = true;
      }
    };
    SVGShapeElement.prototype.renderInnerContent = function() {
      this.renderModifiers();
      var i3;
      var len = this.stylesList.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        this.stylesList[i3].reset();
      }
      this.renderShape();
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.stylesList[i3]._mdf || this._isFirstFrame) {
          if (this.stylesList[i3].msElem) {
            this.stylesList[i3].msElem.setAttribute("d", this.stylesList[i3].d);
            this.stylesList[i3].d = "M0 0" + this.stylesList[i3].d;
          }
          this.stylesList[i3].pElem.setAttribute("d", this.stylesList[i3].d || "M0 0");
        }
      }
    };
    SVGShapeElement.prototype.renderShape = function() {
      var i3;
      var len = this.animatedContents.length;
      var animatedContent;
      for (i3 = 0; i3 < len; i3 += 1) {
        animatedContent = this.animatedContents[i3];
        if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
          animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
        }
      }
    };
    SVGShapeElement.prototype.destroy = function() {
      this.destroyBaseElement();
      this.shapesData = null;
      this.itemsData = null;
    };
    function LetterProps(o2, sw, sc2, fc2, m4, p2) {
      this.o = o2;
      this.sw = sw;
      this.sc = sc2;
      this.fc = fc2;
      this.m = m4;
      this.p = p2;
      this._mdf = {
        o: true,
        sw: !!sw,
        sc: !!sc2,
        fc: !!fc2,
        m: true,
        p: true
      };
    }
    LetterProps.prototype.update = function(o2, sw, sc2, fc2, m4, p2) {
      this._mdf.o = false;
      this._mdf.sw = false;
      this._mdf.sc = false;
      this._mdf.fc = false;
      this._mdf.m = false;
      this._mdf.p = false;
      var updated = false;
      if (this.o !== o2) {
        this.o = o2;
        this._mdf.o = true;
        updated = true;
      }
      if (this.sw !== sw) {
        this.sw = sw;
        this._mdf.sw = true;
        updated = true;
      }
      if (this.sc !== sc2) {
        this.sc = sc2;
        this._mdf.sc = true;
        updated = true;
      }
      if (this.fc !== fc2) {
        this.fc = fc2;
        this._mdf.fc = true;
        updated = true;
      }
      if (this.m !== m4) {
        this.m = m4;
        this._mdf.m = true;
        updated = true;
      }
      if (p2.length && (this.p[0] !== p2[0] || this.p[1] !== p2[1] || this.p[4] !== p2[4] || this.p[5] !== p2[5] || this.p[12] !== p2[12] || this.p[13] !== p2[13])) {
        this.p = p2;
        this._mdf.p = true;
        updated = true;
      }
      return updated;
    };
    function TextProperty(elem2, data2) {
      this._frameId = initialDefaultFrame;
      this.pv = "";
      this.v = "";
      this.kf = false;
      this._isFirstFrame = true;
      this._mdf = false;
      if (data2.d && data2.d.sid) {
        data2.d = elem2.globalData.slotManager.getProp(data2.d);
      }
      this.data = data2;
      this.elem = elem2;
      this.comp = this.elem.comp;
      this.keysIndex = 0;
      this.canResize = false;
      this.minimumFontSize = 1;
      this.effectsSequence = [];
      this.currentData = {
        ascent: 0,
        boxWidth: this.defaultBoxWidth,
        f: "",
        fStyle: "",
        fWeight: "",
        fc: "",
        j: "",
        justifyOffset: "",
        l: [],
        lh: 0,
        lineWidths: [],
        ls: "",
        of: "",
        s: "",
        sc: "",
        sw: 0,
        t: 0,
        tr: 0,
        sz: 0,
        ps: null,
        fillColorAnim: false,
        strokeColorAnim: false,
        strokeWidthAnim: false,
        yOffset: 0,
        finalSize: 0,
        finalText: [],
        finalLineHeight: 0,
        __complete: false
      };
      this.copyData(this.currentData, this.data.d.k[0].s);
      if (!this.searchProperty()) {
        this.completeTextData(this.currentData);
      }
    }
    TextProperty.prototype.defaultBoxWidth = [0, 0];
    TextProperty.prototype.copyData = function(obj, data2) {
      for (var s4 in data2) {
        if (Object.prototype.hasOwnProperty.call(data2, s4)) {
          obj[s4] = data2[s4];
        }
      }
      return obj;
    };
    TextProperty.prototype.setCurrentData = function(data2) {
      if (!data2.__complete) {
        this.completeTextData(data2);
      }
      this.currentData = data2;
      this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
      this._mdf = true;
    };
    TextProperty.prototype.searchProperty = function() {
      return this.searchKeyframes();
    };
    TextProperty.prototype.searchKeyframes = function() {
      this.kf = this.data.d.k.length > 1;
      if (this.kf) {
        this.addEffect(this.getKeyframeValue.bind(this));
      }
      return this.kf;
    };
    TextProperty.prototype.addEffect = function(effectFunction) {
      this.effectsSequence.push(effectFunction);
      this.elem.addDynamicProperty(this);
    };
    TextProperty.prototype.getValue = function(_finalValue) {
      if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
        return;
      }
      this.currentData.t = this.data.d.k[this.keysIndex].s.t;
      var currentValue = this.currentData;
      var currentIndex = this.keysIndex;
      if (this.lock) {
        this.setCurrentData(this.currentData);
        return;
      }
      this.lock = true;
      this._mdf = false;
      var i3;
      var len = this.effectsSequence.length;
      var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (currentIndex !== this.keysIndex) {
          finalValue = this.effectsSequence[i3](finalValue, finalValue.t);
        } else {
          finalValue = this.effectsSequence[i3](this.currentData, finalValue.t);
        }
      }
      if (currentValue !== finalValue) {
        this.setCurrentData(finalValue);
      }
      this.v = this.currentData;
      this.pv = this.v;
      this.lock = false;
      this.frameId = this.elem.globalData.frameId;
    };
    TextProperty.prototype.getKeyframeValue = function() {
      var textKeys = this.data.d.k;
      var frameNum = this.elem.comp.renderedFrame;
      var i3 = 0;
      var len = textKeys.length;
      while (i3 <= len - 1) {
        if (i3 === len - 1 || textKeys[i3 + 1].t > frameNum) {
          break;
        }
        i3 += 1;
      }
      if (this.keysIndex !== i3) {
        this.keysIndex = i3;
      }
      return this.data.d.k[this.keysIndex].s;
    };
    TextProperty.prototype.buildFinalText = function(text2) {
      var charactersArray = [];
      var i3 = 0;
      var len = text2.length;
      var charCode;
      var secondCharCode;
      var shouldCombine = false;
      var shouldCombineNext = false;
      var currentChars = "";
      while (i3 < len) {
        shouldCombine = shouldCombineNext;
        shouldCombineNext = false;
        charCode = text2.charCodeAt(i3);
        currentChars = text2.charAt(i3);
        if (FontManager.isCombinedCharacter(charCode)) {
          shouldCombine = true;
        } else if (charCode >= 55296 && charCode <= 56319) {
          if (FontManager.isRegionalFlag(text2, i3)) {
            currentChars = text2.substr(i3, 14);
          } else {
            secondCharCode = text2.charCodeAt(i3 + 1);
            if (secondCharCode >= 56320 && secondCharCode <= 57343) {
              if (FontManager.isModifier(charCode, secondCharCode)) {
                currentChars = text2.substr(i3, 2);
                shouldCombine = true;
              } else if (FontManager.isFlagEmoji(text2.substr(i3, 4))) {
                currentChars = text2.substr(i3, 4);
              } else {
                currentChars = text2.substr(i3, 2);
              }
            }
          }
        } else if (charCode > 56319) {
          secondCharCode = text2.charCodeAt(i3 + 1);
          if (FontManager.isVariationSelector(charCode)) {
            shouldCombine = true;
          }
        } else if (FontManager.isZeroWidthJoiner(charCode)) {
          shouldCombine = true;
          shouldCombineNext = true;
        }
        if (shouldCombine) {
          charactersArray[charactersArray.length - 1] += currentChars;
          shouldCombine = false;
        } else {
          charactersArray.push(currentChars);
        }
        i3 += currentChars.length;
      }
      return charactersArray;
    };
    TextProperty.prototype.completeTextData = function(documentData) {
      documentData.__complete = true;
      var fontManager = this.elem.globalData.fontManager;
      var data2 = this.data;
      var letters = [];
      var i3;
      var len;
      var newLineFlag;
      var index2 = 0;
      var val2;
      var anchorGrouping = data2.m.g;
      var currentSize = 0;
      var currentPos = 0;
      var currentLine = 0;
      var lineWidths = [];
      var lineWidth = 0;
      var maxLineWidth = 0;
      var j2;
      var jLen;
      var fontData = fontManager.getFontByName(documentData.f);
      var charData;
      var cLength = 0;
      var fontProps = getFontProperties(fontData);
      documentData.fWeight = fontProps.weight;
      documentData.fStyle = fontProps.style;
      documentData.finalSize = documentData.s;
      documentData.finalText = this.buildFinalText(documentData.t);
      len = documentData.finalText.length;
      documentData.finalLineHeight = documentData.lh;
      var trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
      var charCode;
      if (documentData.sz) {
        var flag = true;
        var boxWidth = documentData.sz[0];
        var boxHeight = documentData.sz[1];
        var currentHeight;
        var finalText;
        while (flag) {
          finalText = this.buildFinalText(documentData.t);
          currentHeight = 0;
          lineWidth = 0;
          len = finalText.length;
          trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
          var lastSpaceIndex = -1;
          for (i3 = 0; i3 < len; i3 += 1) {
            charCode = finalText[i3].charCodeAt(0);
            newLineFlag = false;
            if (finalText[i3] === " ") {
              lastSpaceIndex = i3;
            } else if (charCode === 13 || charCode === 3) {
              lineWidth = 0;
              newLineFlag = true;
              currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
            }
            if (fontManager.chars) {
              charData = fontManager.getCharData(finalText[i3], fontData.fStyle, fontData.fFamily);
              cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
            } else {
              cLength = fontManager.measureText(finalText[i3], documentData.f, documentData.finalSize);
            }
            if (lineWidth + cLength > boxWidth && finalText[i3] !== " ") {
              if (lastSpaceIndex === -1) {
                len += 1;
              } else {
                i3 = lastSpaceIndex;
              }
              currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
              finalText.splice(i3, lastSpaceIndex === i3 ? 1 : 0, "\r");
              lastSpaceIndex = -1;
              lineWidth = 0;
            } else {
              lineWidth += cLength;
              lineWidth += trackingOffset;
            }
          }
          currentHeight += fontData.ascent * documentData.finalSize / 100;
          if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
            documentData.finalSize -= 1;
            documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
          } else {
            documentData.finalText = finalText;
            len = documentData.finalText.length;
            flag = false;
          }
        }
      }
      lineWidth = -trackingOffset;
      cLength = 0;
      var uncollapsedSpaces = 0;
      var currentChar;
      for (i3 = 0; i3 < len; i3 += 1) {
        newLineFlag = false;
        currentChar = documentData.finalText[i3];
        charCode = currentChar.charCodeAt(0);
        if (charCode === 13 || charCode === 3) {
          uncollapsedSpaces = 0;
          lineWidths.push(lineWidth);
          maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
          lineWidth = -2 * trackingOffset;
          val2 = "";
          newLineFlag = true;
          currentLine += 1;
        } else {
          val2 = currentChar;
        }
        if (fontManager.chars) {
          charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
          cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
        } else {
          cLength = fontManager.measureText(val2, documentData.f, documentData.finalSize);
        }
        if (currentChar === " ") {
          uncollapsedSpaces += cLength + trackingOffset;
        } else {
          lineWidth += cLength + trackingOffset + uncollapsedSpaces;
          uncollapsedSpaces = 0;
        }
        letters.push({
          l: cLength,
          an: cLength,
          add: currentSize,
          n: newLineFlag,
          anIndexes: [],
          val: val2,
          line: currentLine,
          animatorJustifyOffset: 0
        });
        if (anchorGrouping == 2) {
          currentSize += cLength;
          if (val2 === "" || val2 === " " || i3 === len - 1) {
            if (val2 === "" || val2 === " ") {
              currentSize -= cLength;
            }
            while (currentPos <= i3) {
              letters[currentPos].an = currentSize;
              letters[currentPos].ind = index2;
              letters[currentPos].extra = cLength;
              currentPos += 1;
            }
            index2 += 1;
            currentSize = 0;
          }
        } else if (anchorGrouping == 3) {
          currentSize += cLength;
          if (val2 === "" || i3 === len - 1) {
            if (val2 === "") {
              currentSize -= cLength;
            }
            while (currentPos <= i3) {
              letters[currentPos].an = currentSize;
              letters[currentPos].ind = index2;
              letters[currentPos].extra = cLength;
              currentPos += 1;
            }
            currentSize = 0;
            index2 += 1;
          }
        } else {
          letters[index2].ind = index2;
          letters[index2].extra = 0;
          index2 += 1;
        }
      }
      documentData.l = letters;
      maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
      lineWidths.push(lineWidth);
      if (documentData.sz) {
        documentData.boxWidth = documentData.sz[0];
        documentData.justifyOffset = 0;
      } else {
        documentData.boxWidth = maxLineWidth;
        switch (documentData.j) {
          case 1:
            documentData.justifyOffset = -documentData.boxWidth;
            break;
          case 2:
            documentData.justifyOffset = -documentData.boxWidth / 2;
            break;
          default:
            documentData.justifyOffset = 0;
        }
      }
      documentData.lineWidths = lineWidths;
      var animators = data2.a;
      var animatorData;
      var letterData;
      jLen = animators.length;
      var based;
      var ind;
      var indexes = [];
      for (j2 = 0; j2 < jLen; j2 += 1) {
        animatorData = animators[j2];
        if (animatorData.a.sc) {
          documentData.strokeColorAnim = true;
        }
        if (animatorData.a.sw) {
          documentData.strokeWidthAnim = true;
        }
        if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
          documentData.fillColorAnim = true;
        }
        ind = 0;
        based = animatorData.s.b;
        for (i3 = 0; i3 < len; i3 += 1) {
          letterData = letters[i3];
          letterData.anIndexes[j2] = ind;
          if (based == 1 && letterData.val !== "" || based == 2 && letterData.val !== "" && letterData.val !== " " || based == 3 && (letterData.n || letterData.val == " " || i3 == len - 1) || based == 4 && (letterData.n || i3 == len - 1)) {
            if (animatorData.s.rn === 1) {
              indexes.push(ind);
            }
            ind += 1;
          }
        }
        data2.a[j2].s.totalChars = ind;
        var currentInd = -1;
        var newInd;
        if (animatorData.s.rn === 1) {
          for (i3 = 0; i3 < len; i3 += 1) {
            letterData = letters[i3];
            if (currentInd != letterData.anIndexes[j2]) {
              currentInd = letterData.anIndexes[j2];
              newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
            }
            letterData.anIndexes[j2] = newInd;
          }
        }
      }
      documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
      documentData.ls = documentData.ls || 0;
      documentData.ascent = fontData.ascent * documentData.finalSize / 100;
    };
    TextProperty.prototype.updateDocumentData = function(newData, index2) {
      index2 = index2 === void 0 ? this.keysIndex : index2;
      var dData = this.copyData({}, this.data.d.k[index2].s);
      dData = this.copyData(dData, newData);
      this.data.d.k[index2].s = dData;
      this.recalculate(index2);
      this.setCurrentData(dData);
      this.elem.addDynamicProperty(this);
    };
    TextProperty.prototype.recalculate = function(index2) {
      var dData = this.data.d.k[index2].s;
      dData.__complete = false;
      this.keysIndex = 0;
      this._isFirstFrame = true;
      this.getValue(dData);
    };
    TextProperty.prototype.canResizeFont = function(_canResize) {
      this.canResize = _canResize;
      this.recalculate(this.keysIndex);
      this.elem.addDynamicProperty(this);
    };
    TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
      this.minimumFontSize = Math.floor(_fontValue) || 1;
      this.recalculate(this.keysIndex);
      this.elem.addDynamicProperty(this);
    };
    var TextSelectorProp = function() {
      var max2 = Math.max;
      var min2 = Math.min;
      var floor2 = Math.floor;
      function TextSelectorPropFactory(elem2, data2) {
        this._currentTextLength = -1;
        this.k = false;
        this.data = data2;
        this.elem = elem2;
        this.comp = elem2.comp;
        this.finalS = 0;
        this.finalE = 0;
        this.initDynamicPropertyContainer(elem2);
        this.s = PropertyFactory.getProp(elem2, data2.s || {
          k: 0
        }, 0, 0, this);
        if ("e" in data2) {
          this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0, this);
        } else {
          this.e = {
            v: 100
          };
        }
        this.o = PropertyFactory.getProp(elem2, data2.o || {
          k: 0
        }, 0, 0, this);
        this.xe = PropertyFactory.getProp(elem2, data2.xe || {
          k: 0
        }, 0, 0, this);
        this.ne = PropertyFactory.getProp(elem2, data2.ne || {
          k: 0
        }, 0, 0, this);
        this.sm = PropertyFactory.getProp(elem2, data2.sm || {
          k: 100
        }, 0, 0, this);
        this.a = PropertyFactory.getProp(elem2, data2.a, 0, 0.01, this);
        if (!this.dynamicProperties.length) {
          this.getValue();
        }
      }
      TextSelectorPropFactory.prototype = {
        getMult: function getMult(ind) {
          if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
            this.getValue();
          }
          var x1 = 0;
          var y1 = 0;
          var x22 = 1;
          var y22 = 1;
          if (this.ne.v > 0) {
            x1 = this.ne.v / 100;
          } else {
            y1 = -this.ne.v / 100;
          }
          if (this.xe.v > 0) {
            x22 = 1 - this.xe.v / 100;
          } else {
            y22 = 1 + this.xe.v / 100;
          }
          var easer = BezierFactory.getBezierEasing(x1, y1, x22, y22).get;
          var mult = 0;
          var s4 = this.finalS;
          var e3 = this.finalE;
          var type = this.data.sh;
          if (type === 2) {
            if (e3 === s4) {
              mult = ind >= e3 ? 1 : 0;
            } else {
              mult = max2(0, min2(0.5 / (e3 - s4) + (ind - s4) / (e3 - s4), 1));
            }
            mult = easer(mult);
          } else if (type === 3) {
            if (e3 === s4) {
              mult = ind >= e3 ? 0 : 1;
            } else {
              mult = 1 - max2(0, min2(0.5 / (e3 - s4) + (ind - s4) / (e3 - s4), 1));
            }
            mult = easer(mult);
          } else if (type === 4) {
            if (e3 === s4) {
              mult = 0;
            } else {
              mult = max2(0, min2(0.5 / (e3 - s4) + (ind - s4) / (e3 - s4), 1));
              if (mult < 0.5) {
                mult *= 2;
              } else {
                mult = 1 - 2 * (mult - 0.5);
              }
            }
            mult = easer(mult);
          } else if (type === 5) {
            if (e3 === s4) {
              mult = 0;
            } else {
              var tot = e3 - s4;
              ind = min2(max2(0, ind + 0.5 - s4), e3 - s4);
              var x3 = -tot / 2 + ind;
              var a4 = tot / 2;
              mult = Math.sqrt(1 - x3 * x3 / (a4 * a4));
            }
            mult = easer(mult);
          } else if (type === 6) {
            if (e3 === s4) {
              mult = 0;
            } else {
              ind = min2(max2(0, ind + 0.5 - s4), e3 - s4);
              mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e3 - s4))) / 2;
            }
            mult = easer(mult);
          } else {
            if (ind >= floor2(s4)) {
              if (ind - s4 < 0) {
                mult = max2(0, min2(min2(e3, 1) - (s4 - ind), 1));
              } else {
                mult = max2(0, min2(e3 - ind, 1));
              }
            }
            mult = easer(mult);
          }
          if (this.sm.v !== 100) {
            var smoothness = this.sm.v * 0.01;
            if (smoothness === 0) {
              smoothness = 1e-8;
            }
            var threshold = 0.5 - smoothness * 0.5;
            if (mult < threshold) {
              mult = 0;
            } else {
              mult = (mult - threshold) / smoothness;
              if (mult > 1) {
                mult = 1;
              }
            }
          }
          return mult * this.a.v;
        },
        getValue: function getValue2(newCharsFlag) {
          this.iterateDynamicProperties();
          this._mdf = newCharsFlag || this._mdf;
          this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
          if (newCharsFlag && this.data.r === 2) {
            this.e.v = this._currentTextLength;
          }
          var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
          var o2 = this.o.v / divisor;
          var s4 = this.s.v / divisor + o2;
          var e3 = this.e.v / divisor + o2;
          if (s4 > e3) {
            var _s = s4;
            s4 = e3;
            e3 = _s;
          }
          this.finalS = s4;
          this.finalE = e3;
        }
      };
      extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);
      function getTextSelectorProp(elem2, data2, arr) {
        return new TextSelectorPropFactory(elem2, data2);
      }
      return {
        getTextSelectorProp
      };
    }();
    function TextAnimatorDataProperty(elem2, animatorProps, container2) {
      var defaultData = {
        propType: false
      };
      var getProp = PropertyFactory.getProp;
      var textAnimatorAnimatables = animatorProps.a;
      this.a = {
        r: textAnimatorAnimatables.r ? getProp(elem2, textAnimatorAnimatables.r, 0, degToRads, container2) : defaultData,
        rx: textAnimatorAnimatables.rx ? getProp(elem2, textAnimatorAnimatables.rx, 0, degToRads, container2) : defaultData,
        ry: textAnimatorAnimatables.ry ? getProp(elem2, textAnimatorAnimatables.ry, 0, degToRads, container2) : defaultData,
        sk: textAnimatorAnimatables.sk ? getProp(elem2, textAnimatorAnimatables.sk, 0, degToRads, container2) : defaultData,
        sa: textAnimatorAnimatables.sa ? getProp(elem2, textAnimatorAnimatables.sa, 0, degToRads, container2) : defaultData,
        s: textAnimatorAnimatables.s ? getProp(elem2, textAnimatorAnimatables.s, 1, 0.01, container2) : defaultData,
        a: textAnimatorAnimatables.a ? getProp(elem2, textAnimatorAnimatables.a, 1, 0, container2) : defaultData,
        o: textAnimatorAnimatables.o ? getProp(elem2, textAnimatorAnimatables.o, 0, 0.01, container2) : defaultData,
        p: textAnimatorAnimatables.p ? getProp(elem2, textAnimatorAnimatables.p, 1, 0, container2) : defaultData,
        sw: textAnimatorAnimatables.sw ? getProp(elem2, textAnimatorAnimatables.sw, 0, 0, container2) : defaultData,
        sc: textAnimatorAnimatables.sc ? getProp(elem2, textAnimatorAnimatables.sc, 1, 0, container2) : defaultData,
        fc: textAnimatorAnimatables.fc ? getProp(elem2, textAnimatorAnimatables.fc, 1, 0, container2) : defaultData,
        fh: textAnimatorAnimatables.fh ? getProp(elem2, textAnimatorAnimatables.fh, 0, 0, container2) : defaultData,
        fs: textAnimatorAnimatables.fs ? getProp(elem2, textAnimatorAnimatables.fs, 0, 0.01, container2) : defaultData,
        fb: textAnimatorAnimatables.fb ? getProp(elem2, textAnimatorAnimatables.fb, 0, 0.01, container2) : defaultData,
        t: textAnimatorAnimatables.t ? getProp(elem2, textAnimatorAnimatables.t, 0, 0, container2) : defaultData
      };
      this.s = TextSelectorProp.getTextSelectorProp(elem2, animatorProps.s, container2);
      this.s.t = animatorProps.s.t;
    }
    function TextAnimatorProperty(textData, renderType, elem2) {
      this._isFirstFrame = true;
      this._hasMaskedPath = false;
      this._frameId = -1;
      this._textData = textData;
      this._renderType = renderType;
      this._elem = elem2;
      this._animatorsData = createSizedArray(this._textData.a.length);
      this._pathData = {};
      this._moreOptions = {
        alignment: {}
      };
      this.renderedLetters = [];
      this.lettersChangedFlag = false;
      this.initDynamicPropertyContainer(elem2);
    }
    TextAnimatorProperty.prototype.searchProperties = function() {
      var i3;
      var len = this._textData.a.length;
      var animatorProps;
      var getProp = PropertyFactory.getProp;
      for (i3 = 0; i3 < len; i3 += 1) {
        animatorProps = this._textData.a[i3];
        this._animatorsData[i3] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
      }
      if (this._textData.p && "m" in this._textData.p) {
        this._pathData = {
          a: getProp(this._elem, this._textData.p.a, 0, 0, this),
          f: getProp(this._elem, this._textData.p.f, 0, 0, this),
          l: getProp(this._elem, this._textData.p.l, 0, 0, this),
          r: getProp(this._elem, this._textData.p.r, 0, 0, this),
          p: getProp(this._elem, this._textData.p.p, 0, 0, this),
          m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
        };
        this._hasMaskedPath = true;
      } else {
        this._hasMaskedPath = false;
      }
      this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
    };
    TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag) {
      this.lettersChangedFlag = lettersChangedFlag;
      if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
        return;
      }
      this._isFirstFrame = false;
      var alignment = this._moreOptions.alignment.v;
      var animators = this._animatorsData;
      var textData = this._textData;
      var matrixHelper = this.mHelper;
      var renderType = this._renderType;
      var renderedLettersCount = this.renderedLetters.length;
      var xPos;
      var yPos;
      var i3;
      var len;
      var letters = documentData.l;
      var pathInfo;
      var currentLength;
      var currentPoint;
      var segmentLength;
      var flag;
      var pointInd;
      var segmentInd;
      var prevPoint;
      var points;
      var segments;
      var partialLength;
      var totalLength;
      var perc;
      var tanAngle;
      var mask2;
      if (this._hasMaskedPath) {
        mask2 = this._pathData.m;
        if (!this._pathData.n || this._pathData._mdf) {
          var paths = mask2.v;
          if (this._pathData.r.v) {
            paths = paths.reverse();
          }
          pathInfo = {
            tLength: 0,
            segments: []
          };
          len = paths._length - 1;
          var bezierData;
          totalLength = 0;
          for (i3 = 0; i3 < len; i3 += 1) {
            bezierData = bez.buildBezierData(paths.v[i3], paths.v[i3 + 1], [paths.o[i3][0] - paths.v[i3][0], paths.o[i3][1] - paths.v[i3][1]], [paths.i[i3 + 1][0] - paths.v[i3 + 1][0], paths.i[i3 + 1][1] - paths.v[i3 + 1][1]]);
            pathInfo.tLength += bezierData.segmentLength;
            pathInfo.segments.push(bezierData);
            totalLength += bezierData.segmentLength;
          }
          i3 = len;
          if (mask2.v.c) {
            bezierData = bez.buildBezierData(paths.v[i3], paths.v[0], [paths.o[i3][0] - paths.v[i3][0], paths.o[i3][1] - paths.v[i3][1]], [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
            pathInfo.tLength += bezierData.segmentLength;
            pathInfo.segments.push(bezierData);
            totalLength += bezierData.segmentLength;
          }
          this._pathData.pi = pathInfo;
        }
        pathInfo = this._pathData.pi;
        currentLength = this._pathData.f.v;
        segmentInd = 0;
        pointInd = 1;
        segmentLength = 0;
        flag = true;
        segments = pathInfo.segments;
        if (currentLength < 0 && mask2.v.c) {
          if (pathInfo.tLength < Math.abs(currentLength)) {
            currentLength = -Math.abs(currentLength) % pathInfo.tLength;
          }
          segmentInd = segments.length - 1;
          points = segments[segmentInd].points;
          pointInd = points.length - 1;
          while (currentLength < 0) {
            currentLength += points[pointInd].partialLength;
            pointInd -= 1;
            if (pointInd < 0) {
              segmentInd -= 1;
              points = segments[segmentInd].points;
              pointInd = points.length - 1;
            }
          }
        }
        points = segments[segmentInd].points;
        prevPoint = points[pointInd - 1];
        currentPoint = points[pointInd];
        partialLength = currentPoint.partialLength;
      }
      len = letters.length;
      xPos = 0;
      yPos = 0;
      var yOff = documentData.finalSize * 1.2 * 0.714;
      var firstLine = true;
      var animatorProps;
      var animatorSelector;
      var j2;
      var jLen;
      var letterValue;
      jLen = animators.length;
      var mult;
      var ind = -1;
      var offf;
      var xPathPos;
      var yPathPos;
      var initPathPos = currentLength;
      var initSegmentInd = segmentInd;
      var initPointInd = pointInd;
      var currentLine = -1;
      var elemOpacity;
      var sc2;
      var sw;
      var fc2;
      var k3;
      var letterSw;
      var letterSc;
      var letterFc;
      var letterM = "";
      var letterP = this.defaultPropsArray;
      var letterO;
      if (documentData.j === 2 || documentData.j === 1) {
        var animatorJustifyOffset = 0;
        var animatorFirstCharOffset = 0;
        var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
        var lastIndex = 0;
        var isNewLine = true;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (letters[i3].n) {
            if (animatorJustifyOffset) {
              animatorJustifyOffset += animatorFirstCharOffset;
            }
            while (lastIndex < i3) {
              letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
              lastIndex += 1;
            }
            animatorJustifyOffset = 0;
            isNewLine = true;
          } else {
            for (j2 = 0; j2 < jLen; j2 += 1) {
              animatorProps = animators[j2].a;
              if (animatorProps.t.propType) {
                if (isNewLine && documentData.j === 2) {
                  animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                }
                animatorSelector = animators[j2].s;
                mult = animatorSelector.getMult(letters[i3].anIndexes[j2], textData.a[j2].s.totalChars);
                if (mult.length) {
                  animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                } else {
                  animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                }
              }
            }
            isNewLine = false;
          }
        }
        if (animatorJustifyOffset) {
          animatorJustifyOffset += animatorFirstCharOffset;
        }
        while (lastIndex < i3) {
          letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
          lastIndex += 1;
        }
      }
      for (i3 = 0; i3 < len; i3 += 1) {
        matrixHelper.reset();
        elemOpacity = 1;
        if (letters[i3].n) {
          xPos = 0;
          yPos += documentData.yOffset;
          yPos += firstLine ? 1 : 0;
          currentLength = initPathPos;
          firstLine = false;
          if (this._hasMaskedPath) {
            segmentInd = initSegmentInd;
            pointInd = initPointInd;
            points = segments[segmentInd].points;
            prevPoint = points[pointInd - 1];
            currentPoint = points[pointInd];
            partialLength = currentPoint.partialLength;
            segmentLength = 0;
          }
          letterM = "";
          letterFc = "";
          letterSw = "";
          letterO = "";
          letterP = this.defaultPropsArray;
        } else {
          if (this._hasMaskedPath) {
            if (currentLine !== letters[i3].line) {
              switch (documentData.j) {
                case 1:
                  currentLength += totalLength - documentData.lineWidths[letters[i3].line];
                  break;
                case 2:
                  currentLength += (totalLength - documentData.lineWidths[letters[i3].line]) / 2;
                  break;
              }
              currentLine = letters[i3].line;
            }
            if (ind !== letters[i3].ind) {
              if (letters[ind]) {
                currentLength += letters[ind].extra;
              }
              currentLength += letters[i3].an / 2;
              ind = letters[i3].ind;
            }
            currentLength += alignment[0] * letters[i3].an * 5e-3;
            var animatorOffset = 0;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              animatorProps = animators[j2].a;
              if (animatorProps.p.propType) {
                animatorSelector = animators[j2].s;
                mult = animatorSelector.getMult(letters[i3].anIndexes[j2], textData.a[j2].s.totalChars);
                if (mult.length) {
                  animatorOffset += animatorProps.p.v[0] * mult[0];
                } else {
                  animatorOffset += animatorProps.p.v[0] * mult;
                }
              }
              if (animatorProps.a.propType) {
                animatorSelector = animators[j2].s;
                mult = animatorSelector.getMult(letters[i3].anIndexes[j2], textData.a[j2].s.totalChars);
                if (mult.length) {
                  animatorOffset += animatorProps.a.v[0] * mult[0];
                } else {
                  animatorOffset += animatorProps.a.v[0] * mult;
                }
              }
            }
            flag = true;
            if (this._pathData.a.v) {
              currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);
              currentLength += this._pathData.f.v;
            }
            while (flag) {
              if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                matrixHelper.translate(-alignment[0] * letters[i3].an * 5e-3, -(alignment[1] * yOff) * 0.01);
                flag = false;
              } else if (points) {
                segmentLength += currentPoint.partialLength;
                pointInd += 1;
                if (pointInd >= points.length) {
                  pointInd = 0;
                  segmentInd += 1;
                  if (!segments[segmentInd]) {
                    if (mask2.v.c) {
                      pointInd = 0;
                      segmentInd = 0;
                      points = segments[segmentInd].points;
                    } else {
                      segmentLength -= currentPoint.partialLength;
                      points = null;
                    }
                  } else {
                    points = segments[segmentInd].points;
                  }
                }
                if (points) {
                  prevPoint = currentPoint;
                  currentPoint = points[pointInd];
                  partialLength = currentPoint.partialLength;
                }
              }
            }
            offf = letters[i3].an / 2 - letters[i3].add;
            matrixHelper.translate(-offf, 0, 0);
          } else {
            offf = letters[i3].an / 2 - letters[i3].add;
            matrixHelper.translate(-offf, 0, 0);
            matrixHelper.translate(-alignment[0] * letters[i3].an * 5e-3, -alignment[1] * yOff * 0.01, 0);
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            if (animatorProps.t.propType) {
              animatorSelector = animators[j2].s;
              mult = animatorSelector.getMult(letters[i3].anIndexes[j2], textData.a[j2].s.totalChars);
              if (xPos !== 0 || documentData.j !== 0) {
                if (this._hasMaskedPath) {
                  if (mult.length) {
                    currentLength += animatorProps.t.v * mult[0];
                  } else {
                    currentLength += animatorProps.t.v * mult;
                  }
                } else if (mult.length) {
                  xPos += animatorProps.t.v * mult[0];
                } else {
                  xPos += animatorProps.t.v * mult;
                }
              }
            }
          }
          if (documentData.strokeWidthAnim) {
            sw = documentData.sw || 0;
          }
          if (documentData.strokeColorAnim) {
            if (documentData.sc) {
              sc2 = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
            } else {
              sc2 = [0, 0, 0];
            }
          }
          if (documentData.fillColorAnim && documentData.fc) {
            fc2 = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            if (animatorProps.a.propType) {
              animatorSelector = animators[j2].s;
              mult = animatorSelector.getMult(letters[i3].anIndexes[j2], textData.a[j2].s.totalChars);
              if (mult.length) {
                matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
              } else {
                matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
              }
            }
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            if (animatorProps.s.propType) {
              animatorSelector = animators[j2].s;
              mult = animatorSelector.getMult(letters[i3].anIndexes[j2], textData.a[j2].s.totalChars);
              if (mult.length) {
                matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
              } else {
                matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
              }
            }
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            animatorSelector = animators[j2].s;
            mult = animatorSelector.getMult(letters[i3].anIndexes[j2], textData.a[j2].s.totalChars);
            if (animatorProps.sk.propType) {
              if (mult.length) {
                matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
              } else {
                matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
              }
            }
            if (animatorProps.r.propType) {
              if (mult.length) {
                matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
              } else {
                matrixHelper.rotateZ(-animatorProps.r.v * mult);
              }
            }
            if (animatorProps.ry.propType) {
              if (mult.length) {
                matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
              } else {
                matrixHelper.rotateY(animatorProps.ry.v * mult);
              }
            }
            if (animatorProps.rx.propType) {
              if (mult.length) {
                matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
              } else {
                matrixHelper.rotateX(animatorProps.rx.v * mult);
              }
            }
            if (animatorProps.o.propType) {
              if (mult.length) {
                elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
              } else {
                elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
              }
            }
            if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
              if (mult.length) {
                sw += animatorProps.sw.v * mult[0];
              } else {
                sw += animatorProps.sw.v * mult;
              }
            }
            if (documentData.strokeColorAnim && animatorProps.sc.propType) {
              for (k3 = 0; k3 < 3; k3 += 1) {
                if (mult.length) {
                  sc2[k3] += (animatorProps.sc.v[k3] - sc2[k3]) * mult[0];
                } else {
                  sc2[k3] += (animatorProps.sc.v[k3] - sc2[k3]) * mult;
                }
              }
            }
            if (documentData.fillColorAnim && documentData.fc) {
              if (animatorProps.fc.propType) {
                for (k3 = 0; k3 < 3; k3 += 1) {
                  if (mult.length) {
                    fc2[k3] += (animatorProps.fc.v[k3] - fc2[k3]) * mult[0];
                  } else {
                    fc2[k3] += (animatorProps.fc.v[k3] - fc2[k3]) * mult;
                  }
                }
              }
              if (animatorProps.fh.propType) {
                if (mult.length) {
                  fc2 = addHueToRGB(fc2, animatorProps.fh.v * mult[0]);
                } else {
                  fc2 = addHueToRGB(fc2, animatorProps.fh.v * mult);
                }
              }
              if (animatorProps.fs.propType) {
                if (mult.length) {
                  fc2 = addSaturationToRGB(fc2, animatorProps.fs.v * mult[0]);
                } else {
                  fc2 = addSaturationToRGB(fc2, animatorProps.fs.v * mult);
                }
              }
              if (animatorProps.fb.propType) {
                if (mult.length) {
                  fc2 = addBrightnessToRGB(fc2, animatorProps.fb.v * mult[0]);
                } else {
                  fc2 = addBrightnessToRGB(fc2, animatorProps.fb.v * mult);
                }
              }
            }
          }
          for (j2 = 0; j2 < jLen; j2 += 1) {
            animatorProps = animators[j2].a;
            if (animatorProps.p.propType) {
              animatorSelector = animators[j2].s;
              mult = animatorSelector.getMult(letters[i3].anIndexes[j2], textData.a[j2].s.totalChars);
              if (this._hasMaskedPath) {
                if (mult.length) {
                  matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                } else {
                  matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                }
              } else if (mult.length) {
                matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
              } else {
                matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
              }
            }
          }
          if (documentData.strokeWidthAnim) {
            letterSw = sw < 0 ? 0 : sw;
          }
          if (documentData.strokeColorAnim) {
            letterSc = "rgb(" + Math.round(sc2[0] * 255) + "," + Math.round(sc2[1] * 255) + "," + Math.round(sc2[2] * 255) + ")";
          }
          if (documentData.fillColorAnim && documentData.fc) {
            letterFc = "rgb(" + Math.round(fc2[0] * 255) + "," + Math.round(fc2[1] * 255) + "," + Math.round(fc2[2] * 255) + ")";
          }
          if (this._hasMaskedPath) {
            matrixHelper.translate(0, -documentData.ls);
            matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);
            if (this._pathData.p.v) {
              tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
              var rot = Math.atan(tanAngle) * 180 / Math.PI;
              if (currentPoint.point[0] < prevPoint.point[0]) {
                rot += 180;
              }
              matrixHelper.rotate(-rot * Math.PI / 180);
            }
            matrixHelper.translate(xPathPos, yPathPos, 0);
            currentLength -= alignment[0] * letters[i3].an * 5e-3;
            if (letters[i3 + 1] && ind !== letters[i3 + 1].ind) {
              currentLength += letters[i3].an / 2;
              currentLength += documentData.tr * 1e-3 * documentData.finalSize;
            }
          } else {
            matrixHelper.translate(xPos, yPos, 0);
            if (documentData.ps) {
              matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
            }
            switch (documentData.j) {
              case 1:
                matrixHelper.translate(letters[i3].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i3].line]), 0, 0);
                break;
              case 2:
                matrixHelper.translate(letters[i3].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i3].line]) / 2, 0, 0);
                break;
            }
            matrixHelper.translate(0, -documentData.ls);
            matrixHelper.translate(offf, 0, 0);
            matrixHelper.translate(alignment[0] * letters[i3].an * 5e-3, alignment[1] * yOff * 0.01, 0);
            xPos += letters[i3].l + documentData.tr * 1e-3 * documentData.finalSize;
          }
          if (renderType === "html") {
            letterM = matrixHelper.toCSS();
          } else if (renderType === "svg") {
            letterM = matrixHelper.to2dCSS();
          } else {
            letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
          }
          letterO = elemOpacity;
        }
        if (renderedLettersCount <= i3) {
          letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
          this.renderedLetters.push(letterValue);
          renderedLettersCount += 1;
          this.lettersChangedFlag = true;
        } else {
          letterValue = this.renderedLetters[i3];
          this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
        }
      }
    };
    TextAnimatorProperty.prototype.getValue = function() {
      if (this._elem.globalData.frameId === this._frameId) {
        return;
      }
      this._frameId = this._elem.globalData.frameId;
      this.iterateDynamicProperties();
    };
    TextAnimatorProperty.prototype.mHelper = new Matrix();
    TextAnimatorProperty.prototype.defaultPropsArray = [];
    extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
    function ITextElement() {
    }
    ITextElement.prototype.initElement = function(data2, globalData2, comp2) {
      this.lettersChangedFlag = true;
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.textProperty = new TextProperty(this, data2.t, this.dynamicProperties);
      this.textAnimator = new TextAnimatorProperty(data2.t, this.renderType, this);
      this.initTransform(data2, globalData2, comp2);
      this.initHierarchy();
      this.initRenderable();
      this.initRendererElement();
      this.createContainerElements();
      this.createRenderableComponents();
      this.createContent();
      this.hide();
      this.textAnimator.searchProperties(this.dynamicProperties);
    };
    ITextElement.prototype.prepareFrame = function(num) {
      this._mdf = false;
      this.prepareRenderableFrame(num);
      this.prepareProperties(num, this.isInRange);
    };
    ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
      var j2;
      var jLen = shapes.length;
      var pathNodes;
      var shapeStr = "";
      for (j2 = 0; j2 < jLen; j2 += 1) {
        if (shapes[j2].ty === "sh") {
          pathNodes = shapes[j2].ks.k;
          shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
        }
      }
      return shapeStr;
    };
    ITextElement.prototype.updateDocumentData = function(newData, index2) {
      this.textProperty.updateDocumentData(newData, index2);
    };
    ITextElement.prototype.canResizeFont = function(_canResize) {
      this.textProperty.canResizeFont(_canResize);
    };
    ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
      this.textProperty.setMinimumFontSize(_fontSize);
    };
    ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
      if (documentData.ps) {
        matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
      }
      matrixHelper.translate(0, -documentData.ls, 0);
      switch (documentData.j) {
        case 1:
          matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
          break;
        case 2:
          matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
          break;
      }
      matrixHelper.translate(xPos, yPos, 0);
    };
    ITextElement.prototype.buildColor = function(colorData) {
      return "rgb(" + Math.round(colorData[0] * 255) + "," + Math.round(colorData[1] * 255) + "," + Math.round(colorData[2] * 255) + ")";
    };
    ITextElement.prototype.emptyProp = new LetterProps();
    ITextElement.prototype.destroy = function() {
    };
    ITextElement.prototype.validateText = function() {
      if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
        this.buildNewText();
        this.textProperty._isFirstFrame = false;
        this.textProperty._mdf = false;
      }
    };
    var emptyShapeData = {
      shapes: []
    };
    function SVGTextLottieElement(data2, globalData2, comp2) {
      this.textSpans = [];
      this.renderType = "svg";
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextLottieElement);
    SVGTextLottieElement.prototype.createContent = function() {
      if (this.data.singleShape && !this.globalData.fontManager.chars) {
        this.textContainer = createNS("text");
      }
    };
    SVGTextLottieElement.prototype.buildTextContents = function(textArray) {
      var i3 = 0;
      var len = textArray.length;
      var textContents = [];
      var currentTextContent = "";
      while (i3 < len) {
        if (textArray[i3] === String.fromCharCode(13) || textArray[i3] === String.fromCharCode(3)) {
          textContents.push(currentTextContent);
          currentTextContent = "";
        } else {
          currentTextContent += textArray[i3];
        }
        i3 += 1;
      }
      textContents.push(currentTextContent);
      return textContents;
    };
    SVGTextLottieElement.prototype.buildShapeData = function(data2, scale2) {
      if (data2.shapes && data2.shapes.length) {
        var shape2 = data2.shapes[0];
        if (shape2.it) {
          var shapeItem = shape2.it[shape2.it.length - 1];
          if (shapeItem.s) {
            shapeItem.s.k[0] = scale2;
            shapeItem.s.k[1] = scale2;
          }
        }
      }
      return data2;
    };
    SVGTextLottieElement.prototype.buildNewText = function() {
      this.addDynamicProperty(this);
      var i3;
      var len;
      var documentData = this.textProperty.currentData;
      this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
      if (documentData.fc) {
        this.layerElement.setAttribute("fill", this.buildColor(documentData.fc));
      } else {
        this.layerElement.setAttribute("fill", "rgba(0,0,0,0)");
      }
      if (documentData.sc) {
        this.layerElement.setAttribute("stroke", this.buildColor(documentData.sc));
        this.layerElement.setAttribute("stroke-width", documentData.sw);
      }
      this.layerElement.setAttribute("font-size", documentData.finalSize);
      var fontData = this.globalData.fontManager.getFontByName(documentData.f);
      if (fontData.fClass) {
        this.layerElement.setAttribute("class", fontData.fClass);
      } else {
        this.layerElement.setAttribute("font-family", fontData.fFamily);
        var fWeight = documentData.fWeight;
        var fStyle = documentData.fStyle;
        this.layerElement.setAttribute("font-style", fStyle);
        this.layerElement.setAttribute("font-weight", fWeight);
      }
      this.layerElement.setAttribute("aria-label", documentData.t);
      var letters = documentData.l || [];
      var usesGlyphs = !!this.globalData.fontManager.chars;
      len = letters.length;
      var tSpan;
      var matrixHelper = this.mHelper;
      var shapeStr = "";
      var singleShape = this.data.singleShape;
      var xPos = 0;
      var yPos = 0;
      var firstLine = true;
      var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
      if (singleShape && !usesGlyphs && !documentData.sz) {
        var tElement = this.textContainer;
        var justify = "start";
        switch (documentData.j) {
          case 1:
            justify = "end";
            break;
          case 2:
            justify = "middle";
            break;
          default:
            justify = "start";
            break;
        }
        tElement.setAttribute("text-anchor", justify);
        tElement.setAttribute("letter-spacing", trackingOffset);
        var textContent2 = this.buildTextContents(documentData.finalText);
        len = textContent2.length;
        yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
        for (i3 = 0; i3 < len; i3 += 1) {
          tSpan = this.textSpans[i3].span || createNS("tspan");
          tSpan.textContent = textContent2[i3];
          tSpan.setAttribute("x", 0);
          tSpan.setAttribute("y", yPos);
          tSpan.style.display = "inherit";
          tElement.appendChild(tSpan);
          if (!this.textSpans[i3]) {
            this.textSpans[i3] = {
              span: null,
              glyph: null
            };
          }
          this.textSpans[i3].span = tSpan;
          yPos += documentData.finalLineHeight;
        }
        this.layerElement.appendChild(tElement);
      } else {
        var cachedSpansLength = this.textSpans.length;
        var charData;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (!this.textSpans[i3]) {
            this.textSpans[i3] = {
              span: null,
              childSpan: null,
              glyph: null
            };
          }
          if (!usesGlyphs || !singleShape || i3 === 0) {
            tSpan = cachedSpansLength > i3 ? this.textSpans[i3].span : createNS(usesGlyphs ? "g" : "text");
            if (cachedSpansLength <= i3) {
              tSpan.setAttribute("stroke-linecap", "butt");
              tSpan.setAttribute("stroke-linejoin", "round");
              tSpan.setAttribute("stroke-miterlimit", "4");
              this.textSpans[i3].span = tSpan;
              if (usesGlyphs) {
                var childSpan = createNS("g");
                tSpan.appendChild(childSpan);
                this.textSpans[i3].childSpan = childSpan;
              }
              this.textSpans[i3].span = tSpan;
              this.layerElement.appendChild(tSpan);
            }
            tSpan.style.display = "inherit";
          }
          matrixHelper.reset();
          if (singleShape) {
            if (letters[i3].n) {
              xPos = -trackingOffset;
              yPos += documentData.yOffset;
              yPos += firstLine ? 1 : 0;
              firstLine = false;
            }
            this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i3].line, xPos, yPos);
            xPos += letters[i3].l || 0;
            xPos += trackingOffset;
          }
          if (usesGlyphs) {
            charData = this.globalData.fontManager.getCharData(documentData.finalText[i3], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
            var glyphElement;
            if (charData.t === 1) {
              glyphElement = new SVGCompElement(charData.data, this.globalData, this);
            } else {
              var data2 = emptyShapeData;
              if (charData.data && charData.data.shapes) {
                data2 = this.buildShapeData(charData.data, documentData.finalSize);
              }
              glyphElement = new SVGShapeElement(data2, this.globalData, this);
            }
            if (this.textSpans[i3].glyph) {
              var glyph = this.textSpans[i3].glyph;
              this.textSpans[i3].childSpan.removeChild(glyph.layerElement);
              glyph.destroy();
            }
            this.textSpans[i3].glyph = glyphElement;
            glyphElement._debug = true;
            glyphElement.prepareFrame(0);
            glyphElement.renderFrame();
            this.textSpans[i3].childSpan.appendChild(glyphElement.layerElement);
            if (charData.t === 1) {
              this.textSpans[i3].childSpan.setAttribute("transform", "scale(" + documentData.finalSize / 100 + "," + documentData.finalSize / 100 + ")");
            }
          } else {
            if (singleShape) {
              tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
            }
            tSpan.textContent = letters[i3].val;
            tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
          }
        }
        if (singleShape && tSpan) {
          tSpan.setAttribute("d", shapeStr);
        }
      }
      while (i3 < this.textSpans.length) {
        this.textSpans[i3].span.style.display = "none";
        i3 += 1;
      }
      this._sizeChanged = true;
    };
    SVGTextLottieElement.prototype.sourceRectAtTime = function() {
      this.prepareFrame(this.comp.renderedFrame - this.data.st);
      this.renderInnerContent();
      if (this._sizeChanged) {
        this._sizeChanged = false;
        var textBox = this.layerElement.getBBox();
        this.bbox = {
          top: textBox.y,
          left: textBox.x,
          width: textBox.width,
          height: textBox.height
        };
      }
      return this.bbox;
    };
    SVGTextLottieElement.prototype.getValue = function() {
      var i3;
      var len = this.textSpans.length;
      var glyphElement;
      this.renderedFrame = this.comp.renderedFrame;
      for (i3 = 0; i3 < len; i3 += 1) {
        glyphElement = this.textSpans[i3].glyph;
        if (glyphElement) {
          glyphElement.prepareFrame(this.comp.renderedFrame - this.data.st);
          if (glyphElement._mdf) {
            this._mdf = true;
          }
        }
      }
    };
    SVGTextLottieElement.prototype.renderInnerContent = function() {
      this.validateText();
      if (!this.data.singleShape || this._mdf) {
        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
          this._sizeChanged = true;
          var i3;
          var len;
          var renderedLetters = this.textAnimator.renderedLetters;
          var letters = this.textProperty.currentData.l;
          len = letters.length;
          var renderedLetter;
          var textSpan;
          var glyphElement;
          for (i3 = 0; i3 < len; i3 += 1) {
            if (!letters[i3].n) {
              renderedLetter = renderedLetters[i3];
              textSpan = this.textSpans[i3].span;
              glyphElement = this.textSpans[i3].glyph;
              if (glyphElement) {
                glyphElement.renderFrame();
              }
              if (renderedLetter._mdf.m) {
                textSpan.setAttribute("transform", renderedLetter.m);
              }
              if (renderedLetter._mdf.o) {
                textSpan.setAttribute("opacity", renderedLetter.o);
              }
              if (renderedLetter._mdf.sw) {
                textSpan.setAttribute("stroke-width", renderedLetter.sw);
              }
              if (renderedLetter._mdf.sc) {
                textSpan.setAttribute("stroke", renderedLetter.sc);
              }
              if (renderedLetter._mdf.fc) {
                textSpan.setAttribute("fill", renderedLetter.fc);
              }
            }
          }
        }
      }
    };
    function ISolidElement(data2, globalData2, comp2) {
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([IImageElement], ISolidElement);
    ISolidElement.prototype.createContent = function() {
      var rect = createNS("rect");
      rect.setAttribute("width", this.data.sw);
      rect.setAttribute("height", this.data.sh);
      rect.setAttribute("fill", this.data.sc);
      this.layerElement.appendChild(rect);
    };
    function NullElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.initFrame();
      this.initTransform(data2, globalData2, comp2);
      this.initHierarchy();
    }
    NullElement.prototype.prepareFrame = function(num) {
      this.prepareProperties(num, true);
    };
    NullElement.prototype.renderFrame = function() {
    };
    NullElement.prototype.getBaseElement = function() {
      return null;
    };
    NullElement.prototype.destroy = function() {
    };
    NullElement.prototype.sourceRectAtTime = function() {
    };
    NullElement.prototype.hide = function() {
    };
    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);
    function SVGRendererBase() {
    }
    extendPrototype([BaseRenderer], SVGRendererBase);
    SVGRendererBase.prototype.createNull = function(data2) {
      return new NullElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createShape = function(data2) {
      return new SVGShapeElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createText = function(data2) {
      return new SVGTextLottieElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createImage = function(data2) {
      return new IImageElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createSolid = function(data2) {
      return new ISolidElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.configAnimation = function(animData) {
      this.svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      this.svgElement.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
      if (this.renderConfig.viewBoxSize) {
        this.svgElement.setAttribute("viewBox", this.renderConfig.viewBoxSize);
      } else {
        this.svgElement.setAttribute("viewBox", "0 0 " + animData.w + " " + animData.h);
      }
      if (!this.renderConfig.viewBoxOnly) {
        this.svgElement.setAttribute("width", animData.w);
        this.svgElement.setAttribute("height", animData.h);
        this.svgElement.style.width = "100%";
        this.svgElement.style.height = "100%";
        this.svgElement.style.transform = "translate3d(0,0,0)";
        this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;
      }
      if (this.renderConfig.width) {
        this.svgElement.setAttribute("width", this.renderConfig.width);
      }
      if (this.renderConfig.height) {
        this.svgElement.setAttribute("height", this.renderConfig.height);
      }
      if (this.renderConfig.className) {
        this.svgElement.setAttribute("class", this.renderConfig.className);
      }
      if (this.renderConfig.id) {
        this.svgElement.setAttribute("id", this.renderConfig.id);
      }
      if (this.renderConfig.focusable !== void 0) {
        this.svgElement.setAttribute("focusable", this.renderConfig.focusable);
      }
      this.svgElement.setAttribute("preserveAspectRatio", this.renderConfig.preserveAspectRatio);
      this.animationItem.wrapper.appendChild(this.svgElement);
      var defs = this.globalData.defs;
      this.setupGlobalData(animData, defs);
      this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
      this.data = animData;
      var maskElement = createNS("clipPath");
      var rect = createNS("rect");
      rect.setAttribute("width", animData.w);
      rect.setAttribute("height", animData.h);
      rect.setAttribute("x", 0);
      rect.setAttribute("y", 0);
      var maskId = createElementID();
      maskElement.setAttribute("id", maskId);
      maskElement.appendChild(rect);
      this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + maskId + ")");
      defs.appendChild(maskElement);
      this.layers = animData.layers;
      this.elements = createSizedArray(animData.layers.length);
    };
    SVGRendererBase.prototype.destroy = function() {
      if (this.animationItem.wrapper) {
        this.animationItem.wrapper.innerText = "";
      }
      this.layerElement = null;
      this.globalData.defs = null;
      var i3;
      var len = this.layers ? this.layers.length : 0;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.elements[i3] && this.elements[i3].destroy) {
          this.elements[i3].destroy();
        }
      }
      this.elements.length = 0;
      this.destroyed = true;
      this.animationItem = null;
    };
    SVGRendererBase.prototype.updateContainerSize = function() {
    };
    SVGRendererBase.prototype.findIndexByInd = function(ind) {
      var i3 = 0;
      var len = this.layers.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.layers[i3].ind === ind) {
          return i3;
        }
      }
      return -1;
    };
    SVGRendererBase.prototype.buildItem = function(pos) {
      var elements = this.elements;
      if (elements[pos] || this.layers[pos].ty === 99) {
        return;
      }
      elements[pos] = true;
      var element = this.createItem(this.layers[pos]);
      elements[pos] = element;
      if (getExpressionsPlugin()) {
        if (this.layers[pos].ty === 0) {
          this.globalData.projectInterface.registerComposition(element);
        }
        element.initExpressions();
      }
      this.appendElementInPos(element, pos);
      if (this.layers[pos].tt) {
        var elementIndex = "tp" in this.layers[pos] ? this.findIndexByInd(this.layers[pos].tp) : pos - 1;
        if (elementIndex === -1) {
          return;
        }
        if (!this.elements[elementIndex] || this.elements[elementIndex] === true) {
          this.buildItem(elementIndex);
          this.addPendingElement(element);
        } else {
          var matteElement = elements[elementIndex];
          var matteMask = matteElement.getMatte(this.layers[pos].tt);
          element.setMatte(matteMask);
        }
      }
    };
    SVGRendererBase.prototype.checkPendingElements = function() {
      while (this.pendingElements.length) {
        var element = this.pendingElements.pop();
        element.checkParenting();
        if (element.data.tt) {
          var i3 = 0;
          var len = this.elements.length;
          while (i3 < len) {
            if (this.elements[i3] === element) {
              var elementIndex = "tp" in element.data ? this.findIndexByInd(element.data.tp) : i3 - 1;
              var matteElement = this.elements[elementIndex];
              var matteMask = matteElement.getMatte(this.layers[i3].tt);
              element.setMatte(matteMask);
              break;
            }
            i3 += 1;
          }
        }
      }
    };
    SVGRendererBase.prototype.renderFrame = function(num) {
      if (this.renderedFrame === num || this.destroyed) {
        return;
      }
      if (num === null) {
        num = this.renderedFrame;
      } else {
        this.renderedFrame = num;
      }
      this.globalData.frameNum = num;
      this.globalData.frameId += 1;
      this.globalData.projectInterface.currentFrame = num;
      this.globalData._mdf = false;
      var i3;
      var len = this.layers.length;
      if (!this.completeLayers) {
        this.checkLayers(num);
      }
      for (i3 = len - 1; i3 >= 0; i3 -= 1) {
        if (this.completeLayers || this.elements[i3]) {
          this.elements[i3].prepareFrame(num - this.layers[i3].st);
        }
      }
      if (this.globalData._mdf) {
        for (i3 = 0; i3 < len; i3 += 1) {
          if (this.completeLayers || this.elements[i3]) {
            this.elements[i3].renderFrame();
          }
        }
      }
    };
    SVGRendererBase.prototype.appendElementInPos = function(element, pos) {
      var newElement = element.getBaseElement();
      if (!newElement) {
        return;
      }
      var i3 = 0;
      var nextElement;
      while (i3 < pos) {
        if (this.elements[i3] && this.elements[i3] !== true && this.elements[i3].getBaseElement()) {
          nextElement = this.elements[i3].getBaseElement();
        }
        i3 += 1;
      }
      if (nextElement) {
        this.layerElement.insertBefore(newElement, nextElement);
      } else {
        this.layerElement.appendChild(newElement);
      }
    };
    SVGRendererBase.prototype.hide = function() {
      this.layerElement.style.display = "none";
    };
    SVGRendererBase.prototype.show = function() {
      this.layerElement.style.display = "block";
    };
    function ICompElement() {
    }
    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);
    ICompElement.prototype.initElement = function(data2, globalData2, comp2) {
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.initTransform(data2, globalData2, comp2);
      this.initRenderable();
      this.initHierarchy();
      this.initRendererElement();
      this.createContainerElements();
      this.createRenderableComponents();
      if (this.data.xt || !globalData2.progressiveLoad) {
        this.buildAllItems();
      }
      this.hide();
    };
    ICompElement.prototype.prepareFrame = function(num) {
      this._mdf = false;
      this.prepareRenderableFrame(num);
      this.prepareProperties(num, this.isInRange);
      if (!this.isInRange && !this.data.xt) {
        return;
      }
      if (!this.tm._placeholder) {
        var timeRemapped = this.tm.v;
        if (timeRemapped === this.data.op) {
          timeRemapped = this.data.op - 1;
        }
        this.renderedFrame = timeRemapped;
      } else {
        this.renderedFrame = num / this.data.sr;
      }
      var i3;
      var len = this.elements.length;
      if (!this.completeLayers) {
        this.checkLayers(this.renderedFrame);
      }
      for (i3 = len - 1; i3 >= 0; i3 -= 1) {
        if (this.completeLayers || this.elements[i3]) {
          this.elements[i3].prepareFrame(this.renderedFrame - this.layers[i3].st);
          if (this.elements[i3]._mdf) {
            this._mdf = true;
          }
        }
      }
    };
    ICompElement.prototype.renderInnerContent = function() {
      var i3;
      var len = this.layers.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.completeLayers || this.elements[i3]) {
          this.elements[i3].renderFrame();
        }
      }
    };
    ICompElement.prototype.setElements = function(elems) {
      this.elements = elems;
    };
    ICompElement.prototype.getElements = function() {
      return this.elements;
    };
    ICompElement.prototype.destroyElements = function() {
      var i3;
      var len = this.layers.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.elements[i3]) {
          this.elements[i3].destroy();
        }
      }
    };
    ICompElement.prototype.destroy = function() {
      this.destroyElements();
      this.destroyBaseElement();
    };
    function SVGCompElement(data2, globalData2, comp2) {
      this.layers = data2.layers;
      this.supports3d = true;
      this.completeLayers = false;
      this.pendingElements = [];
      this.elements = this.layers ? createSizedArray(this.layers.length) : [];
      this.initElement(data2, globalData2, comp2);
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
    }
    extendPrototype([SVGRendererBase, ICompElement, SVGBaseElement], SVGCompElement);
    SVGCompElement.prototype.createComp = function(data2) {
      return new SVGCompElement(data2, this.globalData, this);
    };
    function SVGRenderer(animationItem, config2) {
      this.animationItem = animationItem;
      this.layers = null;
      this.renderedFrame = -1;
      this.svgElement = createNS("svg");
      var ariaLabel = "";
      if (config2 && config2.title) {
        var titleElement = createNS("title");
        var titleId = createElementID();
        titleElement.setAttribute("id", titleId);
        titleElement.textContent = config2.title;
        this.svgElement.appendChild(titleElement);
        ariaLabel += titleId;
      }
      if (config2 && config2.description) {
        var descElement = createNS("desc");
        var descId = createElementID();
        descElement.setAttribute("id", descId);
        descElement.textContent = config2.description;
        this.svgElement.appendChild(descElement);
        ariaLabel += " " + descId;
      }
      if (ariaLabel) {
        this.svgElement.setAttribute("aria-labelledby", ariaLabel);
      }
      var defs = createNS("defs");
      this.svgElement.appendChild(defs);
      var maskElement = createNS("g");
      this.svgElement.appendChild(maskElement);
      this.layerElement = maskElement;
      this.renderConfig = {
        preserveAspectRatio: config2 && config2.preserveAspectRatio || "xMidYMid meet",
        imagePreserveAspectRatio: config2 && config2.imagePreserveAspectRatio || "xMidYMid slice",
        contentVisibility: config2 && config2.contentVisibility || "visible",
        progressiveLoad: config2 && config2.progressiveLoad || false,
        hideOnTransparent: !(config2 && config2.hideOnTransparent === false),
        viewBoxOnly: config2 && config2.viewBoxOnly || false,
        viewBoxSize: config2 && config2.viewBoxSize || false,
        className: config2 && config2.className || "",
        id: config2 && config2.id || "",
        focusable: config2 && config2.focusable,
        filterSize: {
          width: config2 && config2.filterSize && config2.filterSize.width || "100%",
          height: config2 && config2.filterSize && config2.filterSize.height || "100%",
          x: config2 && config2.filterSize && config2.filterSize.x || "0%",
          y: config2 && config2.filterSize && config2.filterSize.y || "0%"
        },
        width: config2 && config2.width,
        height: config2 && config2.height,
        runExpressions: !config2 || config2.runExpressions === void 0 || config2.runExpressions
      };
      this.globalData = {
        _mdf: false,
        frameNum: -1,
        defs,
        renderConfig: this.renderConfig
      };
      this.elements = [];
      this.pendingElements = [];
      this.destroyed = false;
      this.rendererType = "svg";
    }
    extendPrototype([SVGRendererBase], SVGRenderer);
    SVGRenderer.prototype.createComp = function(data2) {
      return new SVGCompElement(data2, this.globalData, this);
    };
    function ShapeTransformManager() {
      this.sequences = {};
      this.sequenceList = [];
      this.transform_key_count = 0;
    }
    ShapeTransformManager.prototype = {
      addTransformSequence: function addTransformSequence(transforms) {
        var i3;
        var len = transforms.length;
        var key2 = "_";
        for (i3 = 0; i3 < len; i3 += 1) {
          key2 += transforms[i3].transform.key + "_";
        }
        var sequence = this.sequences[key2];
        if (!sequence) {
          sequence = {
            transforms: [].concat(transforms),
            finalTransform: new Matrix(),
            _mdf: false
          };
          this.sequences[key2] = sequence;
          this.sequenceList.push(sequence);
        }
        return sequence;
      },
      processSequence: function processSequence(sequence, isFirstFrame) {
        var i3 = 0;
        var len = sequence.transforms.length;
        var _mdf = isFirstFrame;
        while (i3 < len && !isFirstFrame) {
          if (sequence.transforms[i3].transform.mProps._mdf) {
            _mdf = true;
            break;
          }
          i3 += 1;
        }
        if (_mdf) {
          sequence.finalTransform.reset();
          for (i3 = len - 1; i3 >= 0; i3 -= 1) {
            sequence.finalTransform.multiply(sequence.transforms[i3].transform.mProps.v);
          }
        }
        sequence._mdf = _mdf;
      },
      processSequences: function processSequences(isFirstFrame) {
        var i3;
        var len = this.sequenceList.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          this.processSequence(this.sequenceList[i3], isFirstFrame);
        }
      },
      getNewKey: function getNewKey() {
        this.transform_key_count += 1;
        return "_" + this.transform_key_count;
      }
    };
    var lumaLoader = function lumaLoader2() {
      var id2 = "__lottie_element_luma_buffer";
      var lumaBuffer = null;
      var lumaBufferCtx = null;
      var svg = null;
      function createLumaSvgFilter() {
        var _svg = createNS("svg");
        var fil = createNS("filter");
        var matrix = createNS("feColorMatrix");
        fil.setAttribute("id", id2);
        matrix.setAttribute("type", "matrix");
        matrix.setAttribute("color-interpolation-filters", "sRGB");
        matrix.setAttribute("values", "0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0");
        fil.appendChild(matrix);
        _svg.appendChild(fil);
        _svg.setAttribute("id", id2 + "_svg");
        if (featureSupport.svgLumaHidden) {
          _svg.style.display = "none";
        }
        return _svg;
      }
      function loadLuma() {
        if (!lumaBuffer) {
          svg = createLumaSvgFilter();
          document.body.appendChild(svg);
          lumaBuffer = createTag("canvas");
          lumaBufferCtx = lumaBuffer.getContext("2d");
          lumaBufferCtx.filter = "url(#" + id2 + ")";
          lumaBufferCtx.fillStyle = "rgba(0,0,0,0)";
          lumaBufferCtx.fillRect(0, 0, 1, 1);
        }
      }
      function getLuma(canvas) {
        if (!lumaBuffer) {
          loadLuma();
        }
        lumaBuffer.width = canvas.width;
        lumaBuffer.height = canvas.height;
        lumaBufferCtx.filter = "url(#" + id2 + ")";
        return lumaBuffer;
      }
      return {
        load: loadLuma,
        get: getLuma
      };
    };
    function createCanvas(width2, height2) {
      if (featureSupport.offscreenCanvas) {
        return new OffscreenCanvas(width2, height2);
      }
      var canvas = createTag("canvas");
      canvas.width = width2;
      canvas.height = height2;
      return canvas;
    }
    var assetLoader = function() {
      return {
        loadLumaCanvas: lumaLoader.load,
        getLumaCanvas: lumaLoader.get,
        createCanvas
      };
    }();
    var registeredEffects = {};
    function CVEffects(elem2) {
      var i3;
      var len = elem2.data.ef ? elem2.data.ef.length : 0;
      this.filters = [];
      var filterManager;
      for (i3 = 0; i3 < len; i3 += 1) {
        filterManager = null;
        var type = elem2.data.ef[i3].ty;
        if (registeredEffects[type]) {
          var Effect = registeredEffects[type].effect;
          filterManager = new Effect(elem2.effectsManager.effectElements[i3], elem2);
        }
        if (filterManager) {
          this.filters.push(filterManager);
        }
      }
      if (this.filters.length) {
        elem2.addRenderableComponent(this);
      }
    }
    CVEffects.prototype.renderFrame = function(_isFirstFrame) {
      var i3;
      var len = this.filters.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        this.filters[i3].renderFrame(_isFirstFrame);
      }
    };
    CVEffects.prototype.getEffects = function(type) {
      var i3;
      var len = this.filters.length;
      var effects = [];
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.filters[i3].type === type) {
          effects.push(this.filters[i3]);
        }
      }
      return effects;
    };
    function registerEffect(id2, effect2) {
      registeredEffects[id2] = {
        effect: effect2
      };
    }
    function CVMaskElement(data2, element) {
      this.data = data2;
      this.element = element;
      this.masksProperties = this.data.masksProperties || [];
      this.viewData = createSizedArray(this.masksProperties.length);
      var i3;
      var len = this.masksProperties.length;
      var hasMasks = false;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.masksProperties[i3].mode !== "n") {
          hasMasks = true;
        }
        this.viewData[i3] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i3], 3);
      }
      this.hasMasks = hasMasks;
      if (hasMasks) {
        this.element.addRenderableComponent(this);
      }
    }
    CVMaskElement.prototype.renderFrame = function() {
      if (!this.hasMasks) {
        return;
      }
      var transform2 = this.element.finalTransform.mat;
      var ctx2 = this.element.canvasContext;
      var i3;
      var len = this.masksProperties.length;
      var pt2;
      var pts;
      var data2;
      ctx2.beginPath();
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.masksProperties[i3].mode !== "n") {
          if (this.masksProperties[i3].inv) {
            ctx2.moveTo(0, 0);
            ctx2.lineTo(this.element.globalData.compSize.w, 0);
            ctx2.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
            ctx2.lineTo(0, this.element.globalData.compSize.h);
            ctx2.lineTo(0, 0);
          }
          data2 = this.viewData[i3].v;
          pt2 = transform2.applyToPointArray(data2.v[0][0], data2.v[0][1], 0);
          ctx2.moveTo(pt2[0], pt2[1]);
          var j2;
          var jLen = data2._length;
          for (j2 = 1; j2 < jLen; j2 += 1) {
            pts = transform2.applyToTriplePoints(data2.o[j2 - 1], data2.i[j2], data2.v[j2]);
            ctx2.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
          }
          pts = transform2.applyToTriplePoints(data2.o[j2 - 1], data2.i[0], data2.v[0]);
          ctx2.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
        }
      }
      this.element.globalData.renderer.save(true);
      ctx2.clip();
    };
    CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;
    CVMaskElement.prototype.destroy = function() {
      this.element = null;
    };
    function CVBaseElement() {
    }
    var operationsMap = {
      1: "source-in",
      2: "source-out",
      3: "source-in",
      4: "source-out"
    };
    CVBaseElement.prototype = {
      createElements: function createElements() {
      },
      initRendererElement: function initRendererElement() {
      },
      createContainerElements: function createContainerElements() {
        if (this.data.tt >= 1) {
          this.buffers = [];
          var canvasContext = this.globalData.canvasContext;
          var bufferCanvas = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
          this.buffers.push(bufferCanvas);
          var bufferCanvas2 = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
          this.buffers.push(bufferCanvas2);
          if (this.data.tt >= 3 && !document._isProxy) {
            assetLoader.loadLumaCanvas();
          }
        }
        this.canvasContext = this.globalData.canvasContext;
        this.transformCanvas = this.globalData.transformCanvas;
        this.renderableEffectsManager = new CVEffects(this);
        this.searchEffectTransforms();
      },
      createContent: function createContent() {
      },
      setBlendMode: function setBlendMode() {
        var globalData2 = this.globalData;
        if (globalData2.blendMode !== this.data.bm) {
          globalData2.blendMode = this.data.bm;
          var blendModeValue = getBlendMode(this.data.bm);
          globalData2.canvasContext.globalCompositeOperation = blendModeValue;
        }
      },
      createRenderableComponents: function createRenderableComponents() {
        this.maskManager = new CVMaskElement(this.data, this);
        this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
      },
      hideElement: function hideElement() {
        if (!this.hidden && (!this.isInRange || this.isTransparent)) {
          this.hidden = true;
        }
      },
      showElement: function showElement() {
        if (this.isInRange && !this.isTransparent) {
          this.hidden = false;
          this._isFirstFrame = true;
          this.maskManager._isFirstFrame = true;
        }
      },
      clearCanvas: function clearCanvas(canvasContext) {
        canvasContext.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);
      },
      prepareLayer: function prepareLayer() {
        if (this.data.tt >= 1) {
          var buffer = this.buffers[0];
          var bufferCtx = buffer.getContext("2d");
          this.clearCanvas(bufferCtx);
          bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
          this.currentTransform = this.canvasContext.getTransform();
          this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
          this.clearCanvas(this.canvasContext);
          this.canvasContext.setTransform(this.currentTransform);
        }
      },
      exitLayer: function exitLayer() {
        if (this.data.tt >= 1) {
          var buffer = this.buffers[1];
          var bufferCtx = buffer.getContext("2d");
          this.clearCanvas(bufferCtx);
          bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
          this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
          this.clearCanvas(this.canvasContext);
          this.canvasContext.setTransform(this.currentTransform);
          var mask2 = this.comp.getElementById("tp" in this.data ? this.data.tp : this.data.ind - 1);
          mask2.renderFrame(true);
          this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
          if (this.data.tt >= 3 && !document._isProxy) {
            var lumaBuffer = assetLoader.getLumaCanvas(this.canvasContext.canvas);
            var lumaBufferCtx = lumaBuffer.getContext("2d");
            lumaBufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
            this.clearCanvas(this.canvasContext);
            this.canvasContext.drawImage(lumaBuffer, 0, 0);
          }
          this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt];
          this.canvasContext.drawImage(buffer, 0, 0);
          this.canvasContext.globalCompositeOperation = "destination-over";
          this.canvasContext.drawImage(this.buffers[0], 0, 0);
          this.canvasContext.setTransform(this.currentTransform);
          this.canvasContext.globalCompositeOperation = "source-over";
        }
      },
      renderFrame: function renderFrame(forceRender) {
        if (this.hidden || this.data.hd) {
          return;
        }
        if (this.data.td === 1 && !forceRender) {
          return;
        }
        this.renderTransform();
        this.renderRenderable();
        this.renderLocalTransform();
        this.setBlendMode();
        var forceRealStack = this.data.ty === 0;
        this.prepareLayer();
        this.globalData.renderer.save(forceRealStack);
        this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);
        this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);
        this.renderInnerContent();
        this.globalData.renderer.restore(forceRealStack);
        this.exitLayer();
        if (this.maskManager.hasMasks) {
          this.globalData.renderer.restore(true);
        }
        if (this._isFirstFrame) {
          this._isFirstFrame = false;
        }
      },
      destroy: function destroy() {
        this.canvasContext = null;
        this.data = null;
        this.globalData = null;
        this.maskManager.destroy();
      },
      mHelper: new Matrix()
    };
    CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
    CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;
    function CVShapeData(element, data2, styles2, transformsManager) {
      this.styledShapes = [];
      this.tr = [0, 0, 0, 0, 0, 0];
      var ty = 4;
      if (data2.ty === "rc") {
        ty = 5;
      } else if (data2.ty === "el") {
        ty = 6;
      } else if (data2.ty === "sr") {
        ty = 7;
      }
      this.sh = ShapePropertyFactory.getShapeProp(element, data2, ty, element);
      var i3;
      var len = styles2.length;
      var styledShape;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (!styles2[i3].closed) {
          styledShape = {
            transforms: transformsManager.addTransformSequence(styles2[i3].transforms),
            trNodes: []
          };
          this.styledShapes.push(styledShape);
          styles2[i3].elements.push(styledShape);
        }
      }
    }
    CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;
    function CVShapeElement(data2, globalData2, comp2) {
      this.shapes = [];
      this.shapesData = data2.shapes;
      this.stylesList = [];
      this.itemsData = [];
      this.prevViewData = [];
      this.shapeModifiers = [];
      this.processedElements = [];
      this.transformsManager = new ShapeTransformManager();
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement);
    CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;
    CVShapeElement.prototype.transformHelper = {
      opacity: 1,
      _opMdf: false
    };
    CVShapeElement.prototype.dashResetter = [];
    CVShapeElement.prototype.createContent = function() {
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
    };
    CVShapeElement.prototype.createStyleElement = function(data2, transforms) {
      var styleElem = {
        data: data2,
        type: data2.ty,
        preTransforms: this.transformsManager.addTransformSequence(transforms),
        transforms: [],
        elements: [],
        closed: data2.hd === true
      };
      var elementData = {};
      if (data2.ty === "fl" || data2.ty === "st") {
        elementData.c = PropertyFactory.getProp(this, data2.c, 1, 255, this);
        if (!elementData.c.k) {
          styleElem.co = "rgb(" + bmFloor(elementData.c.v[0]) + "," + bmFloor(elementData.c.v[1]) + "," + bmFloor(elementData.c.v[2]) + ")";
        }
      } else if (data2.ty === "gf" || data2.ty === "gs") {
        elementData.s = PropertyFactory.getProp(this, data2.s, 1, null, this);
        elementData.e = PropertyFactory.getProp(this, data2.e, 1, null, this);
        elementData.h = PropertyFactory.getProp(this, data2.h || {
          k: 0
        }, 0, 0.01, this);
        elementData.a = PropertyFactory.getProp(this, data2.a || {
          k: 0
        }, 0, degToRads, this);
        elementData.g = new GradientProperty(this, data2.g, this);
      }
      elementData.o = PropertyFactory.getProp(this, data2.o, 0, 0.01, this);
      if (data2.ty === "st" || data2.ty === "gs") {
        styleElem.lc = lineCapEnum[data2.lc || 2];
        styleElem.lj = lineJoinEnum[data2.lj || 2];
        if (data2.lj == 1) {
          styleElem.ml = data2.ml;
        }
        elementData.w = PropertyFactory.getProp(this, data2.w, 0, null, this);
        if (!elementData.w.k) {
          styleElem.wi = elementData.w.v;
        }
        if (data2.d) {
          var d4 = new DashProperty(this, data2.d, "canvas", this);
          elementData.d = d4;
          if (!elementData.d.k) {
            styleElem.da = elementData.d.dashArray;
            styleElem["do"] = elementData.d.dashoffset[0];
          }
        }
      } else {
        styleElem.r = data2.r === 2 ? "evenodd" : "nonzero";
      }
      this.stylesList.push(styleElem);
      elementData.style = styleElem;
      return elementData;
    };
    CVShapeElement.prototype.createGroupElement = function() {
      var elementData = {
        it: [],
        prevViewData: []
      };
      return elementData;
    };
    CVShapeElement.prototype.createTransformElement = function(data2) {
      var elementData = {
        transform: {
          opacity: 1,
          _opMdf: false,
          key: this.transformsManager.getNewKey(),
          op: PropertyFactory.getProp(this, data2.o, 0, 0.01, this),
          mProps: TransformPropertyFactory.getTransformProperty(this, data2, this)
        }
      };
      return elementData;
    };
    CVShapeElement.prototype.createShapeElement = function(data2) {
      var elementData = new CVShapeData(this, data2, this.stylesList, this.transformsManager);
      this.shapes.push(elementData);
      this.addShapeToModifiers(elementData);
      return elementData;
    };
    CVShapeElement.prototype.reloadShapes = function() {
      this._isFirstFrame = true;
      var i3;
      var len = this.itemsData.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        this.prevViewData[i3] = this.itemsData[i3];
      }
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
      len = this.dynamicProperties.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        this.dynamicProperties[i3].getValue();
      }
      this.renderModifiers();
      this.transformsManager.processSequences(this._isFirstFrame);
    };
    CVShapeElement.prototype.addTransformToStyleList = function(transform2) {
      var i3;
      var len = this.stylesList.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (!this.stylesList[i3].closed) {
          this.stylesList[i3].transforms.push(transform2);
        }
      }
    };
    CVShapeElement.prototype.removeTransformFromStyleList = function() {
      var i3;
      var len = this.stylesList.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (!this.stylesList[i3].closed) {
          this.stylesList[i3].transforms.pop();
        }
      }
    };
    CVShapeElement.prototype.closeStyles = function(styles2) {
      var i3;
      var len = styles2.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        styles2[i3].closed = true;
      }
    };
    CVShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, shouldRender, transforms) {
      var i3;
      var len = arr.length - 1;
      var j2;
      var jLen;
      var ownStyles = [];
      var ownModifiers = [];
      var processedPos;
      var modifier;
      var currentTransform;
      var ownTransforms = [].concat(transforms);
      for (i3 = len; i3 >= 0; i3 -= 1) {
        processedPos = this.searchProcessedElement(arr[i3]);
        if (!processedPos) {
          arr[i3]._shouldRender = shouldRender;
        } else {
          itemsData[i3] = prevViewData[processedPos - 1];
        }
        if (arr[i3].ty === "fl" || arr[i3].ty === "st" || arr[i3].ty === "gf" || arr[i3].ty === "gs") {
          if (!processedPos) {
            itemsData[i3] = this.createStyleElement(arr[i3], ownTransforms);
          } else {
            itemsData[i3].style.closed = false;
          }
          ownStyles.push(itemsData[i3].style);
        } else if (arr[i3].ty === "gr") {
          if (!processedPos) {
            itemsData[i3] = this.createGroupElement(arr[i3]);
          } else {
            jLen = itemsData[i3].it.length;
            for (j2 = 0; j2 < jLen; j2 += 1) {
              itemsData[i3].prevViewData[j2] = itemsData[i3].it[j2];
            }
          }
          this.searchShapes(arr[i3].it, itemsData[i3].it, itemsData[i3].prevViewData, shouldRender, ownTransforms);
        } else if (arr[i3].ty === "tr") {
          if (!processedPos) {
            currentTransform = this.createTransformElement(arr[i3]);
            itemsData[i3] = currentTransform;
          }
          ownTransforms.push(itemsData[i3]);
          this.addTransformToStyleList(itemsData[i3]);
        } else if (arr[i3].ty === "sh" || arr[i3].ty === "rc" || arr[i3].ty === "el" || arr[i3].ty === "sr") {
          if (!processedPos) {
            itemsData[i3] = this.createShapeElement(arr[i3]);
          }
        } else if (arr[i3].ty === "tm" || arr[i3].ty === "rd" || arr[i3].ty === "pb" || arr[i3].ty === "zz" || arr[i3].ty === "op") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i3].ty);
            modifier.init(this, arr[i3]);
            itemsData[i3] = modifier;
            this.shapeModifiers.push(modifier);
          } else {
            modifier = itemsData[i3];
            modifier.closed = false;
          }
          ownModifiers.push(modifier);
        } else if (arr[i3].ty === "rp") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i3].ty);
            itemsData[i3] = modifier;
            modifier.init(this, arr, i3, itemsData);
            this.shapeModifiers.push(modifier);
            shouldRender = false;
          } else {
            modifier = itemsData[i3];
            modifier.closed = true;
          }
          ownModifiers.push(modifier);
        }
        this.addProcessedElement(arr[i3], i3 + 1);
      }
      this.removeTransformFromStyleList();
      this.closeStyles(ownStyles);
      len = ownModifiers.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        ownModifiers[i3].closed = true;
      }
    };
    CVShapeElement.prototype.renderInnerContent = function() {
      this.transformHelper.opacity = 1;
      this.transformHelper._opMdf = false;
      this.renderModifiers();
      this.transformsManager.processSequences(this._isFirstFrame);
      this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);
    };
    CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {
      if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
        groupTransform.opacity = parentTransform.opacity;
        groupTransform.opacity *= groupTransform.op.v;
        groupTransform._opMdf = true;
      }
    };
    CVShapeElement.prototype.drawLayer = function() {
      var i3;
      var len = this.stylesList.length;
      var j2;
      var jLen;
      var k3;
      var kLen;
      var elems;
      var nodes;
      var renderer = this.globalData.renderer;
      var ctx2 = this.globalData.canvasContext;
      var type;
      var currentStyle;
      for (i3 = 0; i3 < len; i3 += 1) {
        currentStyle = this.stylesList[i3];
        type = currentStyle.type;
        if (!((type === "st" || type === "gs") && currentStyle.wi === 0 || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {
          renderer.save();
          elems = currentStyle.elements;
          if (type === "st" || type === "gs") {
            renderer.ctxStrokeStyle(type === "st" ? currentStyle.co : currentStyle.grd);
            renderer.ctxLineWidth(currentStyle.wi);
            renderer.ctxLineCap(currentStyle.lc);
            renderer.ctxLineJoin(currentStyle.lj);
            renderer.ctxMiterLimit(currentStyle.ml || 0);
          } else {
            renderer.ctxFillStyle(type === "fl" ? currentStyle.co : currentStyle.grd);
          }
          renderer.ctxOpacity(currentStyle.coOp);
          if (type !== "st" && type !== "gs") {
            ctx2.beginPath();
          }
          renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);
          jLen = elems.length;
          for (j2 = 0; j2 < jLen; j2 += 1) {
            if (type === "st" || type === "gs") {
              ctx2.beginPath();
              if (currentStyle.da) {
                ctx2.setLineDash(currentStyle.da);
                ctx2.lineDashOffset = currentStyle["do"];
              }
            }
            nodes = elems[j2].trNodes;
            kLen = nodes.length;
            for (k3 = 0; k3 < kLen; k3 += 1) {
              if (nodes[k3].t === "m") {
                ctx2.moveTo(nodes[k3].p[0], nodes[k3].p[1]);
              } else if (nodes[k3].t === "c") {
                ctx2.bezierCurveTo(nodes[k3].pts[0], nodes[k3].pts[1], nodes[k3].pts[2], nodes[k3].pts[3], nodes[k3].pts[4], nodes[k3].pts[5]);
              } else {
                ctx2.closePath();
              }
            }
            if (type === "st" || type === "gs") {
              renderer.ctxStroke();
              if (currentStyle.da) {
                ctx2.setLineDash(this.dashResetter);
              }
            }
          }
          if (type !== "st" && type !== "gs") {
            this.globalData.renderer.ctxFill(currentStyle.r);
          }
          renderer.restore();
        }
      }
    };
    CVShapeElement.prototype.renderShape = function(parentTransform, items, data2, isMain) {
      var i3;
      var len = items.length - 1;
      var groupTransform;
      groupTransform = parentTransform;
      for (i3 = len; i3 >= 0; i3 -= 1) {
        if (items[i3].ty === "tr") {
          groupTransform = data2[i3].transform;
          this.renderShapeTransform(parentTransform, groupTransform);
        } else if (items[i3].ty === "sh" || items[i3].ty === "el" || items[i3].ty === "rc" || items[i3].ty === "sr") {
          this.renderPath(items[i3], data2[i3]);
        } else if (items[i3].ty === "fl") {
          this.renderFill(items[i3], data2[i3], groupTransform);
        } else if (items[i3].ty === "st") {
          this.renderStroke(items[i3], data2[i3], groupTransform);
        } else if (items[i3].ty === "gf" || items[i3].ty === "gs") {
          this.renderGradientFill(items[i3], data2[i3], groupTransform);
        } else if (items[i3].ty === "gr") {
          this.renderShape(groupTransform, items[i3].it, data2[i3].it);
        } else if (items[i3].ty === "tm")
          ;
      }
      if (isMain) {
        this.drawLayer();
      }
    };
    CVShapeElement.prototype.renderStyledShape = function(styledShape, shape2) {
      if (this._isFirstFrame || shape2._mdf || styledShape.transforms._mdf) {
        var shapeNodes = styledShape.trNodes;
        var paths = shape2.paths;
        var i3;
        var len;
        var j2;
        var jLen = paths._length;
        shapeNodes.length = 0;
        var groupTransformMat = styledShape.transforms.finalTransform;
        for (j2 = 0; j2 < jLen; j2 += 1) {
          var pathNodes = paths.shapes[j2];
          if (pathNodes && pathNodes.v) {
            len = pathNodes._length;
            for (i3 = 1; i3 < len; i3 += 1) {
              if (i3 === 1) {
                shapeNodes.push({
                  t: "m",
                  p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                });
              }
              shapeNodes.push({
                t: "c",
                pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i3 - 1], pathNodes.i[i3], pathNodes.v[i3])
              });
            }
            if (len === 1) {
              shapeNodes.push({
                t: "m",
                p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
              });
            }
            if (pathNodes.c && len) {
              shapeNodes.push({
                t: "c",
                pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i3 - 1], pathNodes.i[0], pathNodes.v[0])
              });
              shapeNodes.push({
                t: "z"
              });
            }
          }
        }
        styledShape.trNodes = shapeNodes;
      }
    };
    CVShapeElement.prototype.renderPath = function(pathData, itemData) {
      if (pathData.hd !== true && pathData._shouldRender) {
        var i3;
        var len = itemData.styledShapes.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          this.renderStyledShape(itemData.styledShapes[i3], itemData.sh);
        }
      }
    };
    CVShapeElement.prototype.renderFill = function(styleData, itemData, groupTransform) {
      var styleElem = itemData.style;
      if (itemData.c._mdf || this._isFirstFrame) {
        styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
      }
      if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
        styleElem.coOp = itemData.o.v * groupTransform.opacity;
      }
    };
    CVShapeElement.prototype.renderGradientFill = function(styleData, itemData, groupTransform) {
      var styleElem = itemData.style;
      var grd;
      if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf)) {
        var ctx2 = this.globalData.canvasContext;
        var pt1 = itemData.s.v;
        var pt2 = itemData.e.v;
        if (styleData.t === 1) {
          grd = ctx2.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
        } else {
          var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
          var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
          var percent = itemData.h.v;
          if (percent >= 1) {
            percent = 0.99;
          } else if (percent <= -1) {
            percent = -0.99;
          }
          var dist = rad * percent;
          var x3 = Math.cos(ang + itemData.a.v) * dist + pt1[0];
          var y4 = Math.sin(ang + itemData.a.v) * dist + pt1[1];
          grd = ctx2.createRadialGradient(x3, y4, 0, pt1[0], pt1[1], rad);
        }
        var i3;
        var len = styleData.g.p;
        var cValues = itemData.g.c;
        var opacity = 1;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (itemData.g._hasOpacity && itemData.g._collapsable) {
            opacity = itemData.g.o[i3 * 2 + 1];
          }
          grd.addColorStop(cValues[i3 * 4] / 100, "rgba(" + cValues[i3 * 4 + 1] + "," + cValues[i3 * 4 + 2] + "," + cValues[i3 * 4 + 3] + "," + opacity + ")");
        }
        styleElem.grd = grd;
      }
      styleElem.coOp = itemData.o.v * groupTransform.opacity;
    };
    CVShapeElement.prototype.renderStroke = function(styleData, itemData, groupTransform) {
      var styleElem = itemData.style;
      var d4 = itemData.d;
      if (d4 && (d4._mdf || this._isFirstFrame)) {
        styleElem.da = d4.dashArray;
        styleElem["do"] = d4.dashoffset[0];
      }
      if (itemData.c._mdf || this._isFirstFrame) {
        styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
      }
      if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
        styleElem.coOp = itemData.o.v * groupTransform.opacity;
      }
      if (itemData.w._mdf || this._isFirstFrame) {
        styleElem.wi = itemData.w.v;
      }
    };
    CVShapeElement.prototype.destroy = function() {
      this.shapesData = null;
      this.globalData = null;
      this.canvasContext = null;
      this.stylesList.length = 0;
      this.itemsData.length = 0;
    };
    function CVTextElement(data2, globalData2, comp2) {
      this.textSpans = [];
      this.yOffset = 0;
      this.fillColorAnim = false;
      this.strokeColorAnim = false;
      this.strokeWidthAnim = false;
      this.stroke = false;
      this.fill = false;
      this.justifyOffset = 0;
      this.currentRender = null;
      this.renderType = "canvas";
      this.values = {
        fill: "rgba(0,0,0,0)",
        stroke: "rgba(0,0,0,0)",
        sWidth: 0,
        fValue: ""
      };
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement);
    CVTextElement.prototype.tHelper = createTag("canvas").getContext("2d");
    CVTextElement.prototype.buildNewText = function() {
      var documentData = this.textProperty.currentData;
      this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
      var hasFill = false;
      if (documentData.fc) {
        hasFill = true;
        this.values.fill = this.buildColor(documentData.fc);
      } else {
        this.values.fill = "rgba(0,0,0,0)";
      }
      this.fill = hasFill;
      var hasStroke = false;
      if (documentData.sc) {
        hasStroke = true;
        this.values.stroke = this.buildColor(documentData.sc);
        this.values.sWidth = documentData.sw;
      }
      var fontData = this.globalData.fontManager.getFontByName(documentData.f);
      var i3;
      var len;
      var letters = documentData.l;
      var matrixHelper = this.mHelper;
      this.stroke = hasStroke;
      this.values.fValue = documentData.finalSize + "px " + this.globalData.fontManager.getFontByName(documentData.f).fFamily;
      len = documentData.finalText.length;
      var charData;
      var shapeData;
      var k3;
      var kLen;
      var shapes;
      var j2;
      var jLen;
      var pathNodes;
      var commands;
      var pathArr;
      var singleShape = this.data.singleShape;
      var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
      var xPos = 0;
      var yPos = 0;
      var firstLine = true;
      var cnt = 0;
      for (i3 = 0; i3 < len; i3 += 1) {
        charData = this.globalData.fontManager.getCharData(documentData.finalText[i3], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
        shapeData = charData && charData.data || {};
        matrixHelper.reset();
        if (singleShape && letters[i3].n) {
          xPos = -trackingOffset;
          yPos += documentData.yOffset;
          yPos += firstLine ? 1 : 0;
          firstLine = false;
        }
        shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
        jLen = shapes.length;
        matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
        if (singleShape) {
          this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i3].line, xPos, yPos);
        }
        commands = createSizedArray(jLen - 1);
        var commandsCounter = 0;
        for (j2 = 0; j2 < jLen; j2 += 1) {
          if (shapes[j2].ty === "sh") {
            kLen = shapes[j2].ks.k.i.length;
            pathNodes = shapes[j2].ks.k;
            pathArr = [];
            for (k3 = 1; k3 < kLen; k3 += 1) {
              if (k3 === 1) {
                pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
              }
              pathArr.push(matrixHelper.applyToX(pathNodes.o[k3 - 1][0], pathNodes.o[k3 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k3 - 1][0], pathNodes.o[k3 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k3][0], pathNodes.i[k3][1], 0), matrixHelper.applyToY(pathNodes.i[k3][0], pathNodes.i[k3][1], 0), matrixHelper.applyToX(pathNodes.v[k3][0], pathNodes.v[k3][1], 0), matrixHelper.applyToY(pathNodes.v[k3][0], pathNodes.v[k3][1], 0));
            }
            pathArr.push(matrixHelper.applyToX(pathNodes.o[k3 - 1][0], pathNodes.o[k3 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k3 - 1][0], pathNodes.o[k3 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
            commands[commandsCounter] = pathArr;
            commandsCounter += 1;
          }
        }
        if (singleShape) {
          xPos += letters[i3].l;
          xPos += trackingOffset;
        }
        if (this.textSpans[cnt]) {
          this.textSpans[cnt].elem = commands;
        } else {
          this.textSpans[cnt] = {
            elem: commands
          };
        }
        cnt += 1;
      }
    };
    CVTextElement.prototype.renderInnerContent = function() {
      this.validateText();
      var ctx2 = this.canvasContext;
      ctx2.font = this.values.fValue;
      this.globalData.renderer.ctxLineCap("butt");
      this.globalData.renderer.ctxLineJoin("miter");
      this.globalData.renderer.ctxMiterLimit(4);
      if (!this.data.singleShape) {
        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
      }
      var i3;
      var len;
      var j2;
      var jLen;
      var k3;
      var kLen;
      var renderedLetters = this.textAnimator.renderedLetters;
      var letters = this.textProperty.currentData.l;
      len = letters.length;
      var renderedLetter;
      var lastFill = null;
      var lastStroke = null;
      var lastStrokeW = null;
      var commands;
      var pathArr;
      var renderer = this.globalData.renderer;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (!letters[i3].n) {
          renderedLetter = renderedLetters[i3];
          if (renderedLetter) {
            renderer.save();
            renderer.ctxTransform(renderedLetter.p);
            renderer.ctxOpacity(renderedLetter.o);
          }
          if (this.fill) {
            if (renderedLetter && renderedLetter.fc) {
              if (lastFill !== renderedLetter.fc) {
                renderer.ctxFillStyle(renderedLetter.fc);
                lastFill = renderedLetter.fc;
              }
            } else if (lastFill !== this.values.fill) {
              lastFill = this.values.fill;
              renderer.ctxFillStyle(this.values.fill);
            }
            commands = this.textSpans[i3].elem;
            jLen = commands.length;
            this.globalData.canvasContext.beginPath();
            for (j2 = 0; j2 < jLen; j2 += 1) {
              pathArr = commands[j2];
              kLen = pathArr.length;
              this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
              for (k3 = 2; k3 < kLen; k3 += 6) {
                this.globalData.canvasContext.bezierCurveTo(pathArr[k3], pathArr[k3 + 1], pathArr[k3 + 2], pathArr[k3 + 3], pathArr[k3 + 4], pathArr[k3 + 5]);
              }
            }
            this.globalData.canvasContext.closePath();
            renderer.ctxFill();
          }
          if (this.stroke) {
            if (renderedLetter && renderedLetter.sw) {
              if (lastStrokeW !== renderedLetter.sw) {
                lastStrokeW = renderedLetter.sw;
                renderer.ctxLineWidth(renderedLetter.sw);
              }
            } else if (lastStrokeW !== this.values.sWidth) {
              lastStrokeW = this.values.sWidth;
              renderer.ctxLineWidth(this.values.sWidth);
            }
            if (renderedLetter && renderedLetter.sc) {
              if (lastStroke !== renderedLetter.sc) {
                lastStroke = renderedLetter.sc;
                renderer.ctxStrokeStyle(renderedLetter.sc);
              }
            } else if (lastStroke !== this.values.stroke) {
              lastStroke = this.values.stroke;
              renderer.ctxStrokeStyle(this.values.stroke);
            }
            commands = this.textSpans[i3].elem;
            jLen = commands.length;
            this.globalData.canvasContext.beginPath();
            for (j2 = 0; j2 < jLen; j2 += 1) {
              pathArr = commands[j2];
              kLen = pathArr.length;
              this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
              for (k3 = 2; k3 < kLen; k3 += 6) {
                this.globalData.canvasContext.bezierCurveTo(pathArr[k3], pathArr[k3 + 1], pathArr[k3 + 2], pathArr[k3 + 3], pathArr[k3 + 4], pathArr[k3 + 5]);
              }
            }
            this.globalData.canvasContext.closePath();
            renderer.ctxStroke();
          }
          if (renderedLetter) {
            this.globalData.renderer.restore();
          }
        }
      }
    };
    function CVImageElement(data2, globalData2, comp2) {
      this.assetData = globalData2.getAssetData(data2.refId);
      this.img = globalData2.imageLoader.getAsset(this.assetData);
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);
    CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
    CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
    CVImageElement.prototype.createContent = function() {
      if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
        var canvas = createTag("canvas");
        canvas.width = this.assetData.w;
        canvas.height = this.assetData.h;
        var ctx2 = canvas.getContext("2d");
        var imgW = this.img.width;
        var imgH = this.img.height;
        var imgRel = imgW / imgH;
        var canvasRel = this.assetData.w / this.assetData.h;
        var widthCrop;
        var heightCrop;
        var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
        if (imgRel > canvasRel && par === "xMidYMid slice" || imgRel < canvasRel && par !== "xMidYMid slice") {
          heightCrop = imgH;
          widthCrop = heightCrop * canvasRel;
        } else {
          widthCrop = imgW;
          heightCrop = widthCrop / canvasRel;
        }
        ctx2.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);
        this.img = canvas;
      }
    };
    CVImageElement.prototype.renderInnerContent = function() {
      this.canvasContext.drawImage(this.img, 0, 0);
    };
    CVImageElement.prototype.destroy = function() {
      this.img = null;
    };
    function CVSolidElement(data2, globalData2, comp2) {
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);
    CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
    CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
    CVSolidElement.prototype.renderInnerContent = function() {
      this.globalData.renderer.ctxFillStyle(this.data.sc);
      this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh);
    };
    function CanvasRendererBase() {
    }
    extendPrototype([BaseRenderer], CanvasRendererBase);
    CanvasRendererBase.prototype.createShape = function(data2) {
      return new CVShapeElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createText = function(data2) {
      return new CVTextElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createImage = function(data2) {
      return new CVImageElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createSolid = function(data2) {
      return new CVSolidElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
    CanvasRendererBase.prototype.ctxTransform = function(props) {
      if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {
        return;
      }
      this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);
    };
    CanvasRendererBase.prototype.ctxOpacity = function(op2) {
      this.canvasContext.globalAlpha *= op2 < 0 ? 0 : op2;
    };
    CanvasRendererBase.prototype.ctxFillStyle = function(value2) {
      this.canvasContext.fillStyle = value2;
    };
    CanvasRendererBase.prototype.ctxStrokeStyle = function(value2) {
      this.canvasContext.strokeStyle = value2;
    };
    CanvasRendererBase.prototype.ctxLineWidth = function(value2) {
      this.canvasContext.lineWidth = value2;
    };
    CanvasRendererBase.prototype.ctxLineCap = function(value2) {
      this.canvasContext.lineCap = value2;
    };
    CanvasRendererBase.prototype.ctxLineJoin = function(value2) {
      this.canvasContext.lineJoin = value2;
    };
    CanvasRendererBase.prototype.ctxMiterLimit = function(value2) {
      this.canvasContext.miterLimit = value2;
    };
    CanvasRendererBase.prototype.ctxFill = function(rule2) {
      this.canvasContext.fill(rule2);
    };
    CanvasRendererBase.prototype.ctxFillRect = function(x3, y4, w3, h4) {
      this.canvasContext.fillRect(x3, y4, w3, h4);
    };
    CanvasRendererBase.prototype.ctxStroke = function() {
      this.canvasContext.stroke();
    };
    CanvasRendererBase.prototype.reset = function() {
      if (!this.renderConfig.clearCanvas) {
        this.canvasContext.restore();
        return;
      }
      this.contextData.reset();
    };
    CanvasRendererBase.prototype.save = function() {
      this.canvasContext.save();
    };
    CanvasRendererBase.prototype.restore = function(actionFlag) {
      if (!this.renderConfig.clearCanvas) {
        this.canvasContext.restore();
        return;
      }
      if (actionFlag) {
        this.globalData.blendMode = "source-over";
      }
      this.contextData.restore(actionFlag);
    };
    CanvasRendererBase.prototype.configAnimation = function(animData) {
      if (this.animationItem.wrapper) {
        this.animationItem.container = createTag("canvas");
        var containerStyle = this.animationItem.container.style;
        containerStyle.width = "100%";
        containerStyle.height = "100%";
        var origin = "0px 0px 0px";
        containerStyle.transformOrigin = origin;
        containerStyle.mozTransformOrigin = origin;
        containerStyle.webkitTransformOrigin = origin;
        containerStyle["-webkit-transform"] = origin;
        containerStyle.contentVisibility = this.renderConfig.contentVisibility;
        this.animationItem.wrapper.appendChild(this.animationItem.container);
        this.canvasContext = this.animationItem.container.getContext("2d");
        if (this.renderConfig.className) {
          this.animationItem.container.setAttribute("class", this.renderConfig.className);
        }
        if (this.renderConfig.id) {
          this.animationItem.container.setAttribute("id", this.renderConfig.id);
        }
      } else {
        this.canvasContext = this.renderConfig.context;
      }
      this.contextData.setContext(this.canvasContext);
      this.data = animData;
      this.layers = animData.layers;
      this.transformCanvas = {
        w: animData.w,
        h: animData.h,
        sx: 0,
        sy: 0,
        tx: 0,
        ty: 0
      };
      this.setupGlobalData(animData, document.body);
      this.globalData.canvasContext = this.canvasContext;
      this.globalData.renderer = this;
      this.globalData.isDashed = false;
      this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
      this.globalData.transformCanvas = this.transformCanvas;
      this.elements = createSizedArray(animData.layers.length);
      this.updateContainerSize();
    };
    CanvasRendererBase.prototype.updateContainerSize = function(width2, height2) {
      this.reset();
      var elementWidth;
      var elementHeight;
      if (width2) {
        elementWidth = width2;
        elementHeight = height2;
        this.canvasContext.canvas.width = elementWidth;
        this.canvasContext.canvas.height = elementHeight;
      } else {
        if (this.animationItem.wrapper && this.animationItem.container) {
          elementWidth = this.animationItem.wrapper.offsetWidth;
          elementHeight = this.animationItem.wrapper.offsetHeight;
        } else {
          elementWidth = this.canvasContext.canvas.width;
          elementHeight = this.canvasContext.canvas.height;
        }
        this.canvasContext.canvas.width = elementWidth * this.renderConfig.dpr;
        this.canvasContext.canvas.height = elementHeight * this.renderConfig.dpr;
      }
      var elementRel;
      var animationRel;
      if (this.renderConfig.preserveAspectRatio.indexOf("meet") !== -1 || this.renderConfig.preserveAspectRatio.indexOf("slice") !== -1) {
        var par = this.renderConfig.preserveAspectRatio.split(" ");
        var fillType = par[1] || "meet";
        var pos = par[0] || "xMidYMid";
        var xPos = pos.substr(0, 4);
        var yPos = pos.substr(4);
        elementRel = elementWidth / elementHeight;
        animationRel = this.transformCanvas.w / this.transformCanvas.h;
        if (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice") {
          this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
          this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
        } else {
          this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
          this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
        }
        if (xPos === "xMid" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
          this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;
        } else if (xPos === "xMax" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
          this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;
        } else {
          this.transformCanvas.tx = 0;
        }
        if (yPos === "YMid" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
          this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;
        } else if (yPos === "YMax" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
          this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) * this.renderConfig.dpr;
        } else {
          this.transformCanvas.ty = 0;
        }
      } else if (this.renderConfig.preserveAspectRatio === "none") {
        this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
        this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
        this.transformCanvas.tx = 0;
        this.transformCanvas.ty = 0;
      } else {
        this.transformCanvas.sx = this.renderConfig.dpr;
        this.transformCanvas.sy = this.renderConfig.dpr;
        this.transformCanvas.tx = 0;
        this.transformCanvas.ty = 0;
      }
      this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1];
      this.ctxTransform(this.transformCanvas.props);
      this.canvasContext.beginPath();
      this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
      this.canvasContext.closePath();
      this.canvasContext.clip();
      this.renderFrame(this.renderedFrame, true);
    };
    CanvasRendererBase.prototype.destroy = function() {
      if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {
        this.animationItem.wrapper.innerText = "";
      }
      var i3;
      var len = this.layers ? this.layers.length : 0;
      for (i3 = len - 1; i3 >= 0; i3 -= 1) {
        if (this.elements[i3] && this.elements[i3].destroy) {
          this.elements[i3].destroy();
        }
      }
      this.elements.length = 0;
      this.globalData.canvasContext = null;
      this.animationItem.container = null;
      this.destroyed = true;
    };
    CanvasRendererBase.prototype.renderFrame = function(num, forceRender) {
      if (this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender || this.destroyed || num === -1) {
        return;
      }
      this.renderedFrame = num;
      this.globalData.frameNum = num - this.animationItem._isFirstFrame;
      this.globalData.frameId += 1;
      this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
      this.globalData.projectInterface.currentFrame = num;
      var i3;
      var len = this.layers.length;
      if (!this.completeLayers) {
        this.checkLayers(num);
      }
      for (i3 = len - 1; i3 >= 0; i3 -= 1) {
        if (this.completeLayers || this.elements[i3]) {
          this.elements[i3].prepareFrame(num - this.layers[i3].st);
        }
      }
      if (this.globalData._mdf) {
        if (this.renderConfig.clearCanvas === true) {
          this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
        } else {
          this.save();
        }
        for (i3 = len - 1; i3 >= 0; i3 -= 1) {
          if (this.completeLayers || this.elements[i3]) {
            this.elements[i3].renderFrame();
          }
        }
        if (this.renderConfig.clearCanvas !== true) {
          this.restore();
        }
      }
    };
    CanvasRendererBase.prototype.buildItem = function(pos) {
      var elements = this.elements;
      if (elements[pos] || this.layers[pos].ty === 99) {
        return;
      }
      var element = this.createItem(this.layers[pos], this, this.globalData);
      elements[pos] = element;
      element.initExpressions();
    };
    CanvasRendererBase.prototype.checkPendingElements = function() {
      while (this.pendingElements.length) {
        var element = this.pendingElements.pop();
        element.checkParenting();
      }
    };
    CanvasRendererBase.prototype.hide = function() {
      this.animationItem.container.style.display = "none";
    };
    CanvasRendererBase.prototype.show = function() {
      this.animationItem.container.style.display = "block";
    };
    function CanvasContext() {
      this.opacity = -1;
      this.transform = createTypedArray("float32", 16);
      this.fillStyle = "";
      this.strokeStyle = "";
      this.lineWidth = "";
      this.lineCap = "";
      this.lineJoin = "";
      this.miterLimit = "";
      this.id = Math.random();
    }
    function CVContextData() {
      this.stack = [];
      this.cArrPos = 0;
      this.cTr = new Matrix();
      var i3;
      var len = 15;
      for (i3 = 0; i3 < len; i3 += 1) {
        var canvasContext = new CanvasContext();
        this.stack[i3] = canvasContext;
      }
      this._length = len;
      this.nativeContext = null;
      this.transformMat = new Matrix();
      this.currentOpacity = 1;
      this.currentFillStyle = "";
      this.appliedFillStyle = "";
      this.currentStrokeStyle = "";
      this.appliedStrokeStyle = "";
      this.currentLineWidth = "";
      this.appliedLineWidth = "";
      this.currentLineCap = "";
      this.appliedLineCap = "";
      this.currentLineJoin = "";
      this.appliedLineJoin = "";
      this.appliedMiterLimit = "";
      this.currentMiterLimit = "";
    }
    CVContextData.prototype.duplicate = function() {
      var newLength = this._length * 2;
      var i3 = 0;
      for (i3 = this._length; i3 < newLength; i3 += 1) {
        this.stack[i3] = new CanvasContext();
      }
      this._length = newLength;
    };
    CVContextData.prototype.reset = function() {
      this.cArrPos = 0;
      this.cTr.reset();
      this.stack[this.cArrPos].opacity = 1;
    };
    CVContextData.prototype.restore = function(forceRestore) {
      this.cArrPos -= 1;
      var currentContext = this.stack[this.cArrPos];
      var transform2 = currentContext.transform;
      var i3;
      var arr = this.cTr.props;
      for (i3 = 0; i3 < 16; i3 += 1) {
        arr[i3] = transform2[i3];
      }
      if (forceRestore) {
        this.nativeContext.restore();
        var prevStack = this.stack[this.cArrPos + 1];
        this.appliedFillStyle = prevStack.fillStyle;
        this.appliedStrokeStyle = prevStack.strokeStyle;
        this.appliedLineWidth = prevStack.lineWidth;
        this.appliedLineCap = prevStack.lineCap;
        this.appliedLineJoin = prevStack.lineJoin;
        this.appliedMiterLimit = prevStack.miterLimit;
      }
      this.nativeContext.setTransform(transform2[0], transform2[1], transform2[4], transform2[5], transform2[12], transform2[13]);
      if (forceRestore || currentContext.opacity !== -1 && this.currentOpacity !== currentContext.opacity) {
        this.nativeContext.globalAlpha = currentContext.opacity;
        this.currentOpacity = currentContext.opacity;
      }
      this.currentFillStyle = currentContext.fillStyle;
      this.currentStrokeStyle = currentContext.strokeStyle;
      this.currentLineWidth = currentContext.lineWidth;
      this.currentLineCap = currentContext.lineCap;
      this.currentLineJoin = currentContext.lineJoin;
      this.currentMiterLimit = currentContext.miterLimit;
    };
    CVContextData.prototype.save = function(saveOnNativeFlag) {
      if (saveOnNativeFlag) {
        this.nativeContext.save();
      }
      var props = this.cTr.props;
      if (this._length <= this.cArrPos) {
        this.duplicate();
      }
      var currentStack = this.stack[this.cArrPos];
      var i3;
      for (i3 = 0; i3 < 16; i3 += 1) {
        currentStack.transform[i3] = props[i3];
      }
      this.cArrPos += 1;
      var newStack = this.stack[this.cArrPos];
      newStack.opacity = currentStack.opacity;
      newStack.fillStyle = currentStack.fillStyle;
      newStack.strokeStyle = currentStack.strokeStyle;
      newStack.lineWidth = currentStack.lineWidth;
      newStack.lineCap = currentStack.lineCap;
      newStack.lineJoin = currentStack.lineJoin;
      newStack.miterLimit = currentStack.miterLimit;
    };
    CVContextData.prototype.setOpacity = function(value2) {
      this.stack[this.cArrPos].opacity = value2;
    };
    CVContextData.prototype.setContext = function(value2) {
      this.nativeContext = value2;
    };
    CVContextData.prototype.fillStyle = function(value2) {
      if (this.stack[this.cArrPos].fillStyle !== value2) {
        this.currentFillStyle = value2;
        this.stack[this.cArrPos].fillStyle = value2;
      }
    };
    CVContextData.prototype.strokeStyle = function(value2) {
      if (this.stack[this.cArrPos].strokeStyle !== value2) {
        this.currentStrokeStyle = value2;
        this.stack[this.cArrPos].strokeStyle = value2;
      }
    };
    CVContextData.prototype.lineWidth = function(value2) {
      if (this.stack[this.cArrPos].lineWidth !== value2) {
        this.currentLineWidth = value2;
        this.stack[this.cArrPos].lineWidth = value2;
      }
    };
    CVContextData.prototype.lineCap = function(value2) {
      if (this.stack[this.cArrPos].lineCap !== value2) {
        this.currentLineCap = value2;
        this.stack[this.cArrPos].lineCap = value2;
      }
    };
    CVContextData.prototype.lineJoin = function(value2) {
      if (this.stack[this.cArrPos].lineJoin !== value2) {
        this.currentLineJoin = value2;
        this.stack[this.cArrPos].lineJoin = value2;
      }
    };
    CVContextData.prototype.miterLimit = function(value2) {
      if (this.stack[this.cArrPos].miterLimit !== value2) {
        this.currentMiterLimit = value2;
        this.stack[this.cArrPos].miterLimit = value2;
      }
    };
    CVContextData.prototype.transform = function(props) {
      this.transformMat.cloneFromProps(props);
      var currentTransform = this.cTr;
      this.transformMat.multiply(currentTransform);
      currentTransform.cloneFromProps(this.transformMat.props);
      var trProps = currentTransform.props;
      this.nativeContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);
    };
    CVContextData.prototype.opacity = function(op2) {
      var currentOpacity = this.stack[this.cArrPos].opacity;
      currentOpacity *= op2 < 0 ? 0 : op2;
      if (this.stack[this.cArrPos].opacity !== currentOpacity) {
        if (this.currentOpacity !== op2) {
          this.nativeContext.globalAlpha = op2;
          this.currentOpacity = op2;
        }
        this.stack[this.cArrPos].opacity = currentOpacity;
      }
    };
    CVContextData.prototype.fill = function(rule2) {
      if (this.appliedFillStyle !== this.currentFillStyle) {
        this.appliedFillStyle = this.currentFillStyle;
        this.nativeContext.fillStyle = this.appliedFillStyle;
      }
      this.nativeContext.fill(rule2);
    };
    CVContextData.prototype.fillRect = function(x3, y4, w3, h4) {
      if (this.appliedFillStyle !== this.currentFillStyle) {
        this.appliedFillStyle = this.currentFillStyle;
        this.nativeContext.fillStyle = this.appliedFillStyle;
      }
      this.nativeContext.fillRect(x3, y4, w3, h4);
    };
    CVContextData.prototype.stroke = function() {
      if (this.appliedStrokeStyle !== this.currentStrokeStyle) {
        this.appliedStrokeStyle = this.currentStrokeStyle;
        this.nativeContext.strokeStyle = this.appliedStrokeStyle;
      }
      if (this.appliedLineWidth !== this.currentLineWidth) {
        this.appliedLineWidth = this.currentLineWidth;
        this.nativeContext.lineWidth = this.appliedLineWidth;
      }
      if (this.appliedLineCap !== this.currentLineCap) {
        this.appliedLineCap = this.currentLineCap;
        this.nativeContext.lineCap = this.appliedLineCap;
      }
      if (this.appliedLineJoin !== this.currentLineJoin) {
        this.appliedLineJoin = this.currentLineJoin;
        this.nativeContext.lineJoin = this.appliedLineJoin;
      }
      if (this.appliedMiterLimit !== this.currentMiterLimit) {
        this.appliedMiterLimit = this.currentMiterLimit;
        this.nativeContext.miterLimit = this.appliedMiterLimit;
      }
      this.nativeContext.stroke();
    };
    function CVCompElement(data2, globalData2, comp2) {
      this.completeLayers = false;
      this.layers = data2.layers;
      this.pendingElements = [];
      this.elements = createSizedArray(this.layers.length);
      this.initElement(data2, globalData2, comp2);
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
    }
    extendPrototype([CanvasRendererBase, ICompElement, CVBaseElement], CVCompElement);
    CVCompElement.prototype.renderInnerContent = function() {
      var ctx2 = this.canvasContext;
      ctx2.beginPath();
      ctx2.moveTo(0, 0);
      ctx2.lineTo(this.data.w, 0);
      ctx2.lineTo(this.data.w, this.data.h);
      ctx2.lineTo(0, this.data.h);
      ctx2.lineTo(0, 0);
      ctx2.clip();
      var i3;
      var len = this.layers.length;
      for (i3 = len - 1; i3 >= 0; i3 -= 1) {
        if (this.completeLayers || this.elements[i3]) {
          this.elements[i3].renderFrame();
        }
      }
    };
    CVCompElement.prototype.destroy = function() {
      var i3;
      var len = this.layers.length;
      for (i3 = len - 1; i3 >= 0; i3 -= 1) {
        if (this.elements[i3]) {
          this.elements[i3].destroy();
        }
      }
      this.layers = null;
      this.elements = null;
    };
    CVCompElement.prototype.createComp = function(data2) {
      return new CVCompElement(data2, this.globalData, this);
    };
    function CanvasRenderer(animationItem, config2) {
      this.animationItem = animationItem;
      this.renderConfig = {
        clearCanvas: config2 && config2.clearCanvas !== void 0 ? config2.clearCanvas : true,
        context: config2 && config2.context || null,
        progressiveLoad: config2 && config2.progressiveLoad || false,
        preserveAspectRatio: config2 && config2.preserveAspectRatio || "xMidYMid meet",
        imagePreserveAspectRatio: config2 && config2.imagePreserveAspectRatio || "xMidYMid slice",
        contentVisibility: config2 && config2.contentVisibility || "visible",
        className: config2 && config2.className || "",
        id: config2 && config2.id || "",
        runExpressions: !config2 || config2.runExpressions === void 0 || config2.runExpressions
      };
      this.renderConfig.dpr = config2 && config2.dpr || 1;
      if (this.animationItem.wrapper) {
        this.renderConfig.dpr = config2 && config2.dpr || window.devicePixelRatio || 1;
      }
      this.renderedFrame = -1;
      this.globalData = {
        frameNum: -1,
        _mdf: false,
        renderConfig: this.renderConfig,
        currentGlobalAlpha: -1
      };
      this.contextData = new CVContextData();
      this.elements = [];
      this.pendingElements = [];
      this.transformMat = new Matrix();
      this.completeLayers = false;
      this.rendererType = "canvas";
      if (this.renderConfig.clearCanvas) {
        this.ctxTransform = this.contextData.transform.bind(this.contextData);
        this.ctxOpacity = this.contextData.opacity.bind(this.contextData);
        this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData);
        this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData);
        this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData);
        this.ctxLineCap = this.contextData.lineCap.bind(this.contextData);
        this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData);
        this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData);
        this.ctxFill = this.contextData.fill.bind(this.contextData);
        this.ctxFillRect = this.contextData.fillRect.bind(this.contextData);
        this.ctxStroke = this.contextData.stroke.bind(this.contextData);
        this.save = this.contextData.save.bind(this.contextData);
      }
    }
    extendPrototype([CanvasRendererBase], CanvasRenderer);
    CanvasRenderer.prototype.createComp = function(data2) {
      return new CVCompElement(data2, this.globalData, this);
    };
    function HBaseElement() {
    }
    HBaseElement.prototype = {
      checkBlendMode: function checkBlendMode() {
      },
      initRendererElement: function initRendererElement() {
        this.baseElement = createTag(this.data.tg || "div");
        if (this.data.hasMask) {
          this.svgElement = createNS("svg");
          this.layerElement = createNS("g");
          this.maskedElement = this.layerElement;
          this.svgElement.appendChild(this.layerElement);
          this.baseElement.appendChild(this.svgElement);
        } else {
          this.layerElement = this.baseElement;
        }
        styleDiv(this.baseElement);
      },
      createContainerElements: function createContainerElements() {
        this.renderableEffectsManager = new CVEffects(this);
        this.transformedElement = this.baseElement;
        this.maskedElement = this.layerElement;
        if (this.data.ln) {
          this.layerElement.setAttribute("id", this.data.ln);
        }
        if (this.data.cl) {
          this.layerElement.setAttribute("class", this.data.cl);
        }
        if (this.data.bm !== 0) {
          this.setBlendMode();
        }
      },
      renderElement: function renderElement() {
        var transformedElementStyle = this.transformedElement ? this.transformedElement.style : {};
        if (this.finalTransform._matMdf) {
          var matrixValue = this.finalTransform.mat.toCSS();
          transformedElementStyle.transform = matrixValue;
          transformedElementStyle.webkitTransform = matrixValue;
        }
        if (this.finalTransform._opMdf) {
          transformedElementStyle.opacity = this.finalTransform.mProp.o.v;
        }
      },
      renderFrame: function renderFrame() {
        if (this.data.hd || this.hidden) {
          return;
        }
        this.renderTransform();
        this.renderRenderable();
        this.renderElement();
        this.renderInnerContent();
        if (this._isFirstFrame) {
          this._isFirstFrame = false;
        }
      },
      destroy: function destroy() {
        this.layerElement = null;
        this.transformedElement = null;
        if (this.matteElement) {
          this.matteElement = null;
        }
        if (this.maskManager) {
          this.maskManager.destroy();
          this.maskManager = null;
        }
      },
      createRenderableComponents: function createRenderableComponents() {
        this.maskManager = new MaskElement(this.data, this, this.globalData);
      },
      addEffects: function addEffects() {
      },
      setMatte: function setMatte() {
      }
    };
    HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
    HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
    HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;
    function HSolidElement(data2, globalData2, comp2) {
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);
    HSolidElement.prototype.createContent = function() {
      var rect;
      if (this.data.hasMask) {
        rect = createNS("rect");
        rect.setAttribute("width", this.data.sw);
        rect.setAttribute("height", this.data.sh);
        rect.setAttribute("fill", this.data.sc);
        this.svgElement.setAttribute("width", this.data.sw);
        this.svgElement.setAttribute("height", this.data.sh);
      } else {
        rect = createTag("div");
        rect.style.width = this.data.sw + "px";
        rect.style.height = this.data.sh + "px";
        rect.style.backgroundColor = this.data.sc;
      }
      this.layerElement.appendChild(rect);
    };
    function HShapeElement(data2, globalData2, comp2) {
      this.shapes = [];
      this.shapesData = data2.shapes;
      this.stylesList = [];
      this.shapeModifiers = [];
      this.itemsData = [];
      this.processedElements = [];
      this.animatedContents = [];
      this.shapesContainer = createNS("g");
      this.initElement(data2, globalData2, comp2);
      this.prevViewData = [];
      this.currentBBox = {
        x: 999999,
        y: -999999,
        h: 0,
        w: 0
      };
    }
    extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
    HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;
    HShapeElement.prototype.createContent = function() {
      var cont;
      this.baseElement.style.fontSize = 0;
      if (this.data.hasMask) {
        this.layerElement.appendChild(this.shapesContainer);
        cont = this.svgElement;
      } else {
        cont = createNS("svg");
        var size = this.comp.data ? this.comp.data : this.globalData.compSize;
        cont.setAttribute("width", size.w);
        cont.setAttribute("height", size.h);
        cont.appendChild(this.shapesContainer);
        this.layerElement.appendChild(cont);
      }
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
      this.filterUniqueShapes();
      this.shapeCont = cont;
    };
    HShapeElement.prototype.getTransformedPoint = function(transformers, point) {
      var i3;
      var len = transformers.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        point = transformers[i3].mProps.v.applyToPointArray(point[0], point[1], 0);
      }
      return point;
    };
    HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {
      var shape2 = item.sh.v;
      var transformers = item.transformers;
      var i3;
      var len = shape2._length;
      var vPoint;
      var oPoint;
      var nextIPoint;
      var nextVPoint;
      if (len <= 1) {
        return;
      }
      for (i3 = 0; i3 < len - 1; i3 += 1) {
        vPoint = this.getTransformedPoint(transformers, shape2.v[i3]);
        oPoint = this.getTransformedPoint(transformers, shape2.o[i3]);
        nextIPoint = this.getTransformedPoint(transformers, shape2.i[i3 + 1]);
        nextVPoint = this.getTransformedPoint(transformers, shape2.v[i3 + 1]);
        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
      }
      if (shape2.c) {
        vPoint = this.getTransformedPoint(transformers, shape2.v[i3]);
        oPoint = this.getTransformedPoint(transformers, shape2.o[i3]);
        nextIPoint = this.getTransformedPoint(transformers, shape2.i[0]);
        nextVPoint = this.getTransformedPoint(transformers, shape2.v[0]);
        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
      }
    };
    HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
      this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
      var bounds = this.shapeBoundingBox;
      boundingBox.x = bmMin(bounds.left, boundingBox.x);
      boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);
      boundingBox.y = bmMin(bounds.top, boundingBox.y);
      boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);
    };
    HShapeElement.prototype.shapeBoundingBox = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    HShapeElement.prototype.tempBoundingBox = {
      x: 0,
      xMax: 0,
      y: 0,
      yMax: 0,
      width: 0,
      height: 0
    };
    HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p2, p3) {
      var bounds = [[p0[0], p3[0]], [p0[1], p3[1]]];
      for (var a4, b3, c7, t3, b2ac, t1, t22, i3 = 0; i3 < 2; ++i3) {
        b3 = 6 * p0[i3] - 12 * p1[i3] + 6 * p2[i3];
        a4 = -3 * p0[i3] + 9 * p1[i3] - 9 * p2[i3] + 3 * p3[i3];
        c7 = 3 * p1[i3] - 3 * p0[i3];
        b3 |= 0;
        a4 |= 0;
        c7 |= 0;
        if (a4 === 0 && b3 === 0)
          ;
        else if (a4 === 0) {
          t3 = -c7 / b3;
          if (t3 > 0 && t3 < 1) {
            bounds[i3].push(this.calculateF(t3, p0, p1, p2, p3, i3));
          }
        } else {
          b2ac = b3 * b3 - 4 * c7 * a4;
          if (b2ac >= 0) {
            t1 = (-b3 + bmSqrt(b2ac)) / (2 * a4);
            if (t1 > 0 && t1 < 1)
              bounds[i3].push(this.calculateF(t1, p0, p1, p2, p3, i3));
            t22 = (-b3 - bmSqrt(b2ac)) / (2 * a4);
            if (t22 > 0 && t22 < 1)
              bounds[i3].push(this.calculateF(t22, p0, p1, p2, p3, i3));
          }
        }
      }
      this.shapeBoundingBox.left = bmMin.apply(null, bounds[0]);
      this.shapeBoundingBox.top = bmMin.apply(null, bounds[1]);
      this.shapeBoundingBox.right = bmMax.apply(null, bounds[0]);
      this.shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);
    };
    HShapeElement.prototype.calculateF = function(t3, p0, p1, p2, p3, i3) {
      return bmPow(1 - t3, 3) * p0[i3] + 3 * bmPow(1 - t3, 2) * t3 * p1[i3] + 3 * (1 - t3) * bmPow(t3, 2) * p2[i3] + bmPow(t3, 3) * p3[i3];
    };
    HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {
      var i3;
      var len = itemsData.length;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (itemsData[i3] && itemsData[i3].sh) {
          this.calculateShapeBoundingBox(itemsData[i3], boundingBox);
        } else if (itemsData[i3] && itemsData[i3].it) {
          this.calculateBoundingBox(itemsData[i3].it, boundingBox);
        } else if (itemsData[i3] && itemsData[i3].style && itemsData[i3].w) {
          this.expandStrokeBoundingBox(itemsData[i3].w, boundingBox);
        }
      }
    };
    HShapeElement.prototype.expandStrokeBoundingBox = function(widthProperty, boundingBox) {
      var width2 = 0;
      if (widthProperty.keyframes) {
        for (var i3 = 0; i3 < widthProperty.keyframes.length; i3 += 1) {
          var kfw = widthProperty.keyframes[i3].s;
          if (kfw > width2) {
            width2 = kfw;
          }
        }
        width2 *= widthProperty.mult;
      } else {
        width2 = widthProperty.v * widthProperty.mult;
      }
      boundingBox.x -= width2;
      boundingBox.xMax += width2;
      boundingBox.y -= width2;
      boundingBox.yMax += width2;
    };
    HShapeElement.prototype.currentBoxContains = function(box) {
      return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;
    };
    HShapeElement.prototype.renderInnerContent = function() {
      this._renderShapeFrame();
      if (!this.hidden && (this._isFirstFrame || this._mdf)) {
        var tempBoundingBox = this.tempBoundingBox;
        var max2 = 999999;
        tempBoundingBox.x = max2;
        tempBoundingBox.xMax = -max2;
        tempBoundingBox.y = max2;
        tempBoundingBox.yMax = -max2;
        this.calculateBoundingBox(this.itemsData, tempBoundingBox);
        tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
        tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
        if (this.currentBoxContains(tempBoundingBox)) {
          return;
        }
        var changed = false;
        if (this.currentBBox.w !== tempBoundingBox.width) {
          this.currentBBox.w = tempBoundingBox.width;
          this.shapeCont.setAttribute("width", tempBoundingBox.width);
          changed = true;
        }
        if (this.currentBBox.h !== tempBoundingBox.height) {
          this.currentBBox.h = tempBoundingBox.height;
          this.shapeCont.setAttribute("height", tempBoundingBox.height);
          changed = true;
        }
        if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
          this.currentBBox.w = tempBoundingBox.width;
          this.currentBBox.h = tempBoundingBox.height;
          this.currentBBox.x = tempBoundingBox.x;
          this.currentBBox.y = tempBoundingBox.y;
          this.shapeCont.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
          var shapeStyle = this.shapeCont.style;
          var shapeTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
          shapeStyle.transform = shapeTransform;
          shapeStyle.webkitTransform = shapeTransform;
        }
      }
    };
    function HTextElement(data2, globalData2, comp2) {
      this.textSpans = [];
      this.textPaths = [];
      this.currentBBox = {
        x: 999999,
        y: -999999,
        h: 0,
        w: 0
      };
      this.renderType = "svg";
      this.isMasked = false;
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);
    HTextElement.prototype.createContent = function() {
      this.isMasked = this.checkMasks();
      if (this.isMasked) {
        this.renderType = "svg";
        this.compW = this.comp.data.w;
        this.compH = this.comp.data.h;
        this.svgElement.setAttribute("width", this.compW);
        this.svgElement.setAttribute("height", this.compH);
        var g2 = createNS("g");
        this.maskedElement.appendChild(g2);
        this.innerElem = g2;
      } else {
        this.renderType = "html";
        this.innerElem = this.layerElement;
      }
      this.checkParenting();
    };
    HTextElement.prototype.buildNewText = function() {
      var documentData = this.textProperty.currentData;
      this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
      var innerElemStyle = this.innerElem.style;
      var textColor = documentData.fc ? this.buildColor(documentData.fc) : "rgba(0,0,0,0)";
      innerElemStyle.fill = textColor;
      innerElemStyle.color = textColor;
      if (documentData.sc) {
        innerElemStyle.stroke = this.buildColor(documentData.sc);
        innerElemStyle.strokeWidth = documentData.sw + "px";
      }
      var fontData = this.globalData.fontManager.getFontByName(documentData.f);
      if (!this.globalData.fontManager.chars) {
        innerElemStyle.fontSize = documentData.finalSize + "px";
        innerElemStyle.lineHeight = documentData.finalSize + "px";
        if (fontData.fClass) {
          this.innerElem.className = fontData.fClass;
        } else {
          innerElemStyle.fontFamily = fontData.fFamily;
          var fWeight = documentData.fWeight;
          var fStyle = documentData.fStyle;
          innerElemStyle.fontStyle = fStyle;
          innerElemStyle.fontWeight = fWeight;
        }
      }
      var i3;
      var len;
      var letters = documentData.l;
      len = letters.length;
      var tSpan;
      var tParent;
      var tCont;
      var matrixHelper = this.mHelper;
      var shapes;
      var shapeStr = "";
      var cnt = 0;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.globalData.fontManager.chars) {
          if (!this.textPaths[cnt]) {
            tSpan = createNS("path");
            tSpan.setAttribute("stroke-linecap", lineCapEnum[1]);
            tSpan.setAttribute("stroke-linejoin", lineJoinEnum[2]);
            tSpan.setAttribute("stroke-miterlimit", "4");
          } else {
            tSpan = this.textPaths[cnt];
          }
          if (!this.isMasked) {
            if (this.textSpans[cnt]) {
              tParent = this.textSpans[cnt];
              tCont = tParent.children[0];
            } else {
              tParent = createTag("div");
              tParent.style.lineHeight = 0;
              tCont = createNS("svg");
              tCont.appendChild(tSpan);
              styleDiv(tParent);
            }
          }
        } else if (!this.isMasked) {
          if (this.textSpans[cnt]) {
            tParent = this.textSpans[cnt];
            tSpan = this.textPaths[cnt];
          } else {
            tParent = createTag("span");
            styleDiv(tParent);
            tSpan = createTag("span");
            styleDiv(tSpan);
            tParent.appendChild(tSpan);
          }
        } else {
          tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS("text");
        }
        if (this.globalData.fontManager.chars) {
          var charData = this.globalData.fontManager.getCharData(documentData.finalText[i3], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
          var shapeData;
          if (charData) {
            shapeData = charData.data;
          } else {
            shapeData = null;
          }
          matrixHelper.reset();
          if (shapeData && shapeData.shapes && shapeData.shapes.length) {
            shapes = shapeData.shapes[0].it;
            matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
            shapeStr = this.createPathShape(matrixHelper, shapes);
            tSpan.setAttribute("d", shapeStr);
          }
          if (!this.isMasked) {
            this.innerElem.appendChild(tParent);
            if (shapeData && shapeData.shapes) {
              document.body.appendChild(tCont);
              var boundingBox = tCont.getBBox();
              tCont.setAttribute("width", boundingBox.width + 2);
              tCont.setAttribute("height", boundingBox.height + 2);
              tCont.setAttribute("viewBox", boundingBox.x - 1 + " " + (boundingBox.y - 1) + " " + (boundingBox.width + 2) + " " + (boundingBox.height + 2));
              var tContStyle = tCont.style;
              var tContTranslation = "translate(" + (boundingBox.x - 1) + "px," + (boundingBox.y - 1) + "px)";
              tContStyle.transform = tContTranslation;
              tContStyle.webkitTransform = tContTranslation;
              letters[i3].yOffset = boundingBox.y - 1;
            } else {
              tCont.setAttribute("width", 1);
              tCont.setAttribute("height", 1);
            }
            tParent.appendChild(tCont);
          } else {
            this.innerElem.appendChild(tSpan);
          }
        } else {
          tSpan.textContent = letters[i3].val;
          tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
          if (!this.isMasked) {
            this.innerElem.appendChild(tParent);
            var tStyle = tSpan.style;
            var tSpanTranslation = "translate3d(0," + -documentData.finalSize / 1.2 + "px,0)";
            tStyle.transform = tSpanTranslation;
            tStyle.webkitTransform = tSpanTranslation;
          } else {
            this.innerElem.appendChild(tSpan);
          }
        }
        if (!this.isMasked) {
          this.textSpans[cnt] = tParent;
        } else {
          this.textSpans[cnt] = tSpan;
        }
        this.textSpans[cnt].style.display = "block";
        this.textPaths[cnt] = tSpan;
        cnt += 1;
      }
      while (cnt < this.textSpans.length) {
        this.textSpans[cnt].style.display = "none";
        cnt += 1;
      }
    };
    HTextElement.prototype.renderInnerContent = function() {
      this.validateText();
      var svgStyle;
      if (this.data.singleShape) {
        if (!this._isFirstFrame && !this.lettersChangedFlag) {
          return;
        }
        if (this.isMasked && this.finalTransform._matMdf) {
          this.svgElement.setAttribute("viewBox", -this.finalTransform.mProp.p.v[0] + " " + -this.finalTransform.mProp.p.v[1] + " " + this.compW + " " + this.compH);
          svgStyle = this.svgElement.style;
          var translation = "translate(" + -this.finalTransform.mProp.p.v[0] + "px," + -this.finalTransform.mProp.p.v[1] + "px)";
          svgStyle.transform = translation;
          svgStyle.webkitTransform = translation;
        }
      }
      this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
      if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
        return;
      }
      var i3;
      var len;
      var count = 0;
      var renderedLetters = this.textAnimator.renderedLetters;
      var letters = this.textProperty.currentData.l;
      len = letters.length;
      var renderedLetter;
      var textSpan;
      var textPath;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (letters[i3].n) {
          count += 1;
        } else {
          textSpan = this.textSpans[i3];
          textPath = this.textPaths[i3];
          renderedLetter = renderedLetters[count];
          count += 1;
          if (renderedLetter._mdf.m) {
            if (!this.isMasked) {
              textSpan.style.webkitTransform = renderedLetter.m;
              textSpan.style.transform = renderedLetter.m;
            } else {
              textSpan.setAttribute("transform", renderedLetter.m);
            }
          }
          textSpan.style.opacity = renderedLetter.o;
          if (renderedLetter.sw && renderedLetter._mdf.sw) {
            textPath.setAttribute("stroke-width", renderedLetter.sw);
          }
          if (renderedLetter.sc && renderedLetter._mdf.sc) {
            textPath.setAttribute("stroke", renderedLetter.sc);
          }
          if (renderedLetter.fc && renderedLetter._mdf.fc) {
            textPath.setAttribute("fill", renderedLetter.fc);
            textPath.style.color = renderedLetter.fc;
          }
        }
      }
      if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
        var boundingBox = this.innerElem.getBBox();
        if (this.currentBBox.w !== boundingBox.width) {
          this.currentBBox.w = boundingBox.width;
          this.svgElement.setAttribute("width", boundingBox.width);
        }
        if (this.currentBBox.h !== boundingBox.height) {
          this.currentBBox.h = boundingBox.height;
          this.svgElement.setAttribute("height", boundingBox.height);
        }
        var margin2 = 1;
        if (this.currentBBox.w !== boundingBox.width + margin2 * 2 || this.currentBBox.h !== boundingBox.height + margin2 * 2 || this.currentBBox.x !== boundingBox.x - margin2 || this.currentBBox.y !== boundingBox.y - margin2) {
          this.currentBBox.w = boundingBox.width + margin2 * 2;
          this.currentBBox.h = boundingBox.height + margin2 * 2;
          this.currentBBox.x = boundingBox.x - margin2;
          this.currentBBox.y = boundingBox.y - margin2;
          this.svgElement.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
          svgStyle = this.svgElement.style;
          var svgTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
          svgStyle.transform = svgTransform;
          svgStyle.webkitTransform = svgTransform;
        }
      }
    };
    function HCameraElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.initHierarchy();
      var getProp = PropertyFactory.getProp;
      this.pe = getProp(this, data2.pe, 0, 0, this);
      if (data2.ks.p.s) {
        this.px = getProp(this, data2.ks.p.x, 1, 0, this);
        this.py = getProp(this, data2.ks.p.y, 1, 0, this);
        this.pz = getProp(this, data2.ks.p.z, 1, 0, this);
      } else {
        this.p = getProp(this, data2.ks.p, 1, 0, this);
      }
      if (data2.ks.a) {
        this.a = getProp(this, data2.ks.a, 1, 0, this);
      }
      if (data2.ks.or.k.length && data2.ks.or.k[0].to) {
        var i3;
        var len = data2.ks.or.k.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          data2.ks.or.k[i3].to = null;
          data2.ks.or.k[i3].ti = null;
        }
      }
      this.or = getProp(this, data2.ks.or, 1, degToRads, this);
      this.or.sh = true;
      this.rx = getProp(this, data2.ks.rx, 0, degToRads, this);
      this.ry = getProp(this, data2.ks.ry, 0, degToRads, this);
      this.rz = getProp(this, data2.ks.rz, 0, degToRads, this);
      this.mat = new Matrix();
      this._prevMat = new Matrix();
      this._isFirstFrame = true;
      this.finalTransform = {
        mProp: this
      };
    }
    extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);
    HCameraElement.prototype.setup = function() {
      var i3;
      var len = this.comp.threeDElements.length;
      var comp2;
      var perspectiveStyle;
      var containerStyle;
      for (i3 = 0; i3 < len; i3 += 1) {
        comp2 = this.comp.threeDElements[i3];
        if (comp2.type === "3d") {
          perspectiveStyle = comp2.perspectiveElem.style;
          containerStyle = comp2.container.style;
          var perspective = this.pe.v + "px";
          var origin = "0px 0px 0px";
          var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
          perspectiveStyle.perspective = perspective;
          perspectiveStyle.webkitPerspective = perspective;
          containerStyle.transformOrigin = origin;
          containerStyle.mozTransformOrigin = origin;
          containerStyle.webkitTransformOrigin = origin;
          perspectiveStyle.transform = matrix;
          perspectiveStyle.webkitTransform = matrix;
        }
      }
    };
    HCameraElement.prototype.createElements = function() {
    };
    HCameraElement.prototype.hide = function() {
    };
    HCameraElement.prototype.renderFrame = function() {
      var _mdf = this._isFirstFrame;
      var i3;
      var len;
      if (this.hierarchy) {
        len = this.hierarchy.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          _mdf = this.hierarchy[i3].finalTransform.mProp._mdf || _mdf;
        }
      }
      if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
        this.mat.reset();
        if (this.hierarchy) {
          len = this.hierarchy.length - 1;
          for (i3 = len; i3 >= 0; i3 -= 1) {
            var mTransf = this.hierarchy[i3].finalTransform.mProp;
            this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
            this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
            this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
            this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
            this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
          }
        }
        if (this.p) {
          this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
        } else {
          this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
        }
        if (this.a) {
          var diffVector;
          if (this.p) {
            diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
          } else {
            diffVector = [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
          }
          var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2));
          var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
          var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
          var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
          var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);
          this.mat.rotateY(mRotationY).rotateX(-mRotationX);
        }
        this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
        this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
        this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
        this.mat.translate(0, 0, this.pe.v);
        var hasMatrixChanged = !this._prevMat.equals(this.mat);
        if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
          len = this.comp.threeDElements.length;
          var comp2;
          var perspectiveStyle;
          var containerStyle;
          for (i3 = 0; i3 < len; i3 += 1) {
            comp2 = this.comp.threeDElements[i3];
            if (comp2.type === "3d") {
              if (hasMatrixChanged) {
                var matValue = this.mat.toCSS();
                containerStyle = comp2.container.style;
                containerStyle.transform = matValue;
                containerStyle.webkitTransform = matValue;
              }
              if (this.pe._mdf) {
                perspectiveStyle = comp2.perspectiveElem.style;
                perspectiveStyle.perspective = this.pe.v + "px";
                perspectiveStyle.webkitPerspective = this.pe.v + "px";
              }
            }
          }
          this.mat.clone(this._prevMat);
        }
      }
      this._isFirstFrame = false;
    };
    HCameraElement.prototype.prepareFrame = function(num) {
      this.prepareProperties(num, true);
    };
    HCameraElement.prototype.destroy = function() {
    };
    HCameraElement.prototype.getBaseElement = function() {
      return null;
    };
    function HImageElement(data2, globalData2, comp2) {
      this.assetData = globalData2.getAssetData(data2.refId);
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);
    HImageElement.prototype.createContent = function() {
      var assetPath = this.globalData.getAssetsPath(this.assetData);
      var img = new Image();
      if (this.data.hasMask) {
        this.imageElem = createNS("image");
        this.imageElem.setAttribute("width", this.assetData.w + "px");
        this.imageElem.setAttribute("height", this.assetData.h + "px");
        this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
        this.layerElement.appendChild(this.imageElem);
        this.baseElement.setAttribute("width", this.assetData.w);
        this.baseElement.setAttribute("height", this.assetData.h);
      } else {
        this.layerElement.appendChild(img);
      }
      img.crossOrigin = "anonymous";
      img.src = assetPath;
      if (this.data.ln) {
        this.baseElement.setAttribute("id", this.data.ln);
      }
    };
    function HybridRendererBase(animationItem, config2) {
      this.animationItem = animationItem;
      this.layers = null;
      this.renderedFrame = -1;
      this.renderConfig = {
        className: config2 && config2.className || "",
        imagePreserveAspectRatio: config2 && config2.imagePreserveAspectRatio || "xMidYMid slice",
        hideOnTransparent: !(config2 && config2.hideOnTransparent === false),
        filterSize: {
          width: config2 && config2.filterSize && config2.filterSize.width || "400%",
          height: config2 && config2.filterSize && config2.filterSize.height || "400%",
          x: config2 && config2.filterSize && config2.filterSize.x || "-100%",
          y: config2 && config2.filterSize && config2.filterSize.y || "-100%"
        }
      };
      this.globalData = {
        _mdf: false,
        frameNum: -1,
        renderConfig: this.renderConfig
      };
      this.pendingElements = [];
      this.elements = [];
      this.threeDElements = [];
      this.destroyed = false;
      this.camera = null;
      this.supports3d = true;
      this.rendererType = "html";
    }
    extendPrototype([BaseRenderer], HybridRendererBase);
    HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;
    HybridRendererBase.prototype.checkPendingElements = function() {
      while (this.pendingElements.length) {
        var element = this.pendingElements.pop();
        element.checkParenting();
      }
    };
    HybridRendererBase.prototype.appendElementInPos = function(element, pos) {
      var newDOMElement = element.getBaseElement();
      if (!newDOMElement) {
        return;
      }
      var layer = this.layers[pos];
      if (!layer.ddd || !this.supports3d) {
        if (this.threeDElements) {
          this.addTo3dContainer(newDOMElement, pos);
        } else {
          var i3 = 0;
          var nextDOMElement;
          var nextLayer;
          var tmpDOMElement;
          while (i3 < pos) {
            if (this.elements[i3] && this.elements[i3] !== true && this.elements[i3].getBaseElement) {
              nextLayer = this.elements[i3];
              tmpDOMElement = this.layers[i3].ddd ? this.getThreeDContainerByPos(i3) : nextLayer.getBaseElement();
              nextDOMElement = tmpDOMElement || nextDOMElement;
            }
            i3 += 1;
          }
          if (nextDOMElement) {
            if (!layer.ddd || !this.supports3d) {
              this.layerElement.insertBefore(newDOMElement, nextDOMElement);
            }
          } else if (!layer.ddd || !this.supports3d) {
            this.layerElement.appendChild(newDOMElement);
          }
        }
      } else {
        this.addTo3dContainer(newDOMElement, pos);
      }
    };
    HybridRendererBase.prototype.createShape = function(data2) {
      if (!this.supports3d) {
        return new SVGShapeElement(data2, this.globalData, this);
      }
      return new HShapeElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createText = function(data2) {
      if (!this.supports3d) {
        return new SVGTextLottieElement(data2, this.globalData, this);
      }
      return new HTextElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createCamera = function(data2) {
      this.camera = new HCameraElement(data2, this.globalData, this);
      return this.camera;
    };
    HybridRendererBase.prototype.createImage = function(data2) {
      if (!this.supports3d) {
        return new IImageElement(data2, this.globalData, this);
      }
      return new HImageElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createSolid = function(data2) {
      if (!this.supports3d) {
        return new ISolidElement(data2, this.globalData, this);
      }
      return new HSolidElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
    HybridRendererBase.prototype.getThreeDContainerByPos = function(pos) {
      var i3 = 0;
      var len = this.threeDElements.length;
      while (i3 < len) {
        if (this.threeDElements[i3].startPos <= pos && this.threeDElements[i3].endPos >= pos) {
          return this.threeDElements[i3].perspectiveElem;
        }
        i3 += 1;
      }
      return null;
    };
    HybridRendererBase.prototype.createThreeDContainer = function(pos, type) {
      var perspectiveElem = createTag("div");
      var style2;
      var containerStyle;
      styleDiv(perspectiveElem);
      var container2 = createTag("div");
      styleDiv(container2);
      if (type === "3d") {
        style2 = perspectiveElem.style;
        style2.width = this.globalData.compSize.w + "px";
        style2.height = this.globalData.compSize.h + "px";
        var center = "50% 50%";
        style2.webkitTransformOrigin = center;
        style2.mozTransformOrigin = center;
        style2.transformOrigin = center;
        containerStyle = container2.style;
        var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
        containerStyle.transform = matrix;
        containerStyle.webkitTransform = matrix;
      }
      perspectiveElem.appendChild(container2);
      var threeDContainerData = {
        container: container2,
        perspectiveElem,
        startPos: pos,
        endPos: pos,
        type
      };
      this.threeDElements.push(threeDContainerData);
      return threeDContainerData;
    };
    HybridRendererBase.prototype.build3dContainers = function() {
      var i3;
      var len = this.layers.length;
      var lastThreeDContainerData;
      var currentContainer = "";
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.layers[i3].ddd && this.layers[i3].ty !== 3) {
          if (currentContainer !== "3d") {
            currentContainer = "3d";
            lastThreeDContainerData = this.createThreeDContainer(i3, "3d");
          }
          lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i3);
        } else {
          if (currentContainer !== "2d") {
            currentContainer = "2d";
            lastThreeDContainerData = this.createThreeDContainer(i3, "2d");
          }
          lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i3);
        }
      }
      len = this.threeDElements.length;
      for (i3 = len - 1; i3 >= 0; i3 -= 1) {
        this.resizerElem.appendChild(this.threeDElements[i3].perspectiveElem);
      }
    };
    HybridRendererBase.prototype.addTo3dContainer = function(elem2, pos) {
      var i3 = 0;
      var len = this.threeDElements.length;
      while (i3 < len) {
        if (pos <= this.threeDElements[i3].endPos) {
          var j2 = this.threeDElements[i3].startPos;
          var nextElement;
          while (j2 < pos) {
            if (this.elements[j2] && this.elements[j2].getBaseElement) {
              nextElement = this.elements[j2].getBaseElement();
            }
            j2 += 1;
          }
          if (nextElement) {
            this.threeDElements[i3].container.insertBefore(elem2, nextElement);
          } else {
            this.threeDElements[i3].container.appendChild(elem2);
          }
          break;
        }
        i3 += 1;
      }
    };
    HybridRendererBase.prototype.configAnimation = function(animData) {
      var resizerElem = createTag("div");
      var wrapper = this.animationItem.wrapper;
      var style2 = resizerElem.style;
      style2.width = animData.w + "px";
      style2.height = animData.h + "px";
      this.resizerElem = resizerElem;
      styleDiv(resizerElem);
      style2.transformStyle = "flat";
      style2.mozTransformStyle = "flat";
      style2.webkitTransformStyle = "flat";
      if (this.renderConfig.className) {
        resizerElem.setAttribute("class", this.renderConfig.className);
      }
      wrapper.appendChild(resizerElem);
      style2.overflow = "hidden";
      var svg = createNS("svg");
      svg.setAttribute("width", "1");
      svg.setAttribute("height", "1");
      styleDiv(svg);
      this.resizerElem.appendChild(svg);
      var defs = createNS("defs");
      svg.appendChild(defs);
      this.data = animData;
      this.setupGlobalData(animData, svg);
      this.globalData.defs = defs;
      this.layers = animData.layers;
      this.layerElement = this.resizerElem;
      this.build3dContainers();
      this.updateContainerSize();
    };
    HybridRendererBase.prototype.destroy = function() {
      if (this.animationItem.wrapper) {
        this.animationItem.wrapper.innerText = "";
      }
      this.animationItem.container = null;
      this.globalData.defs = null;
      var i3;
      var len = this.layers ? this.layers.length : 0;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.elements[i3] && this.elements[i3].destroy) {
          this.elements[i3].destroy();
        }
      }
      this.elements.length = 0;
      this.destroyed = true;
      this.animationItem = null;
    };
    HybridRendererBase.prototype.updateContainerSize = function() {
      var elementWidth = this.animationItem.wrapper.offsetWidth;
      var elementHeight = this.animationItem.wrapper.offsetHeight;
      var elementRel = elementWidth / elementHeight;
      var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
      var sx;
      var sy;
      var tx;
      var ty;
      if (animationRel > elementRel) {
        sx = elementWidth / this.globalData.compSize.w;
        sy = elementWidth / this.globalData.compSize.w;
        tx = 0;
        ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;
      } else {
        sx = elementHeight / this.globalData.compSize.h;
        sy = elementHeight / this.globalData.compSize.h;
        tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
        ty = 0;
      }
      var style2 = this.resizerElem.style;
      style2.webkitTransform = "matrix3d(" + sx + ",0,0,0,0," + sy + ",0,0,0,0,1,0," + tx + "," + ty + ",0,1)";
      style2.transform = style2.webkitTransform;
    };
    HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;
    HybridRendererBase.prototype.hide = function() {
      this.resizerElem.style.display = "none";
    };
    HybridRendererBase.prototype.show = function() {
      this.resizerElem.style.display = "block";
    };
    HybridRendererBase.prototype.initItems = function() {
      this.buildAllItems();
      if (this.camera) {
        this.camera.setup();
      } else {
        var cWidth = this.globalData.compSize.w;
        var cHeight = this.globalData.compSize.h;
        var i3;
        var len = this.threeDElements.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          var style2 = this.threeDElements[i3].perspectiveElem.style;
          style2.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + "px";
          style2.perspective = style2.webkitPerspective;
        }
      }
    };
    HybridRendererBase.prototype.searchExtraCompositions = function(assets2) {
      var i3;
      var len = assets2.length;
      var floatingContainer = createTag("div");
      for (i3 = 0; i3 < len; i3 += 1) {
        if (assets2[i3].xt) {
          var comp2 = this.createComp(assets2[i3], floatingContainer, this.globalData.comp, null);
          comp2.initExpressions();
          this.globalData.projectInterface.registerComposition(comp2);
        }
      }
    };
    function HCompElement(data2, globalData2, comp2) {
      this.layers = data2.layers;
      this.supports3d = !data2.hasMask;
      this.completeLayers = false;
      this.pendingElements = [];
      this.elements = this.layers ? createSizedArray(this.layers.length) : [];
      this.initElement(data2, globalData2, comp2);
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
    }
    extendPrototype([HybridRendererBase, ICompElement, HBaseElement], HCompElement);
    HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;
    HCompElement.prototype.createContainerElements = function() {
      this._createBaseContainerElements();
      if (this.data.hasMask) {
        this.svgElement.setAttribute("width", this.data.w);
        this.svgElement.setAttribute("height", this.data.h);
        this.transformedElement = this.baseElement;
      } else {
        this.transformedElement = this.layerElement;
      }
    };
    HCompElement.prototype.addTo3dContainer = function(elem2, pos) {
      var j2 = 0;
      var nextElement;
      while (j2 < pos) {
        if (this.elements[j2] && this.elements[j2].getBaseElement) {
          nextElement = this.elements[j2].getBaseElement();
        }
        j2 += 1;
      }
      if (nextElement) {
        this.layerElement.insertBefore(elem2, nextElement);
      } else {
        this.layerElement.appendChild(elem2);
      }
    };
    HCompElement.prototype.createComp = function(data2) {
      if (!this.supports3d) {
        return new SVGCompElement(data2, this.globalData, this);
      }
      return new HCompElement(data2, this.globalData, this);
    };
    function HybridRenderer(animationItem, config2) {
      this.animationItem = animationItem;
      this.layers = null;
      this.renderedFrame = -1;
      this.renderConfig = {
        className: config2 && config2.className || "",
        imagePreserveAspectRatio: config2 && config2.imagePreserveAspectRatio || "xMidYMid slice",
        hideOnTransparent: !(config2 && config2.hideOnTransparent === false),
        filterSize: {
          width: config2 && config2.filterSize && config2.filterSize.width || "400%",
          height: config2 && config2.filterSize && config2.filterSize.height || "400%",
          x: config2 && config2.filterSize && config2.filterSize.x || "-100%",
          y: config2 && config2.filterSize && config2.filterSize.y || "-100%"
        },
        runExpressions: !config2 || config2.runExpressions === void 0 || config2.runExpressions
      };
      this.globalData = {
        _mdf: false,
        frameNum: -1,
        renderConfig: this.renderConfig
      };
      this.pendingElements = [];
      this.elements = [];
      this.threeDElements = [];
      this.destroyed = false;
      this.camera = null;
      this.supports3d = true;
      this.rendererType = "html";
    }
    extendPrototype([HybridRendererBase], HybridRenderer);
    HybridRenderer.prototype.createComp = function(data2) {
      if (!this.supports3d) {
        return new SVGCompElement(data2, this.globalData, this);
      }
      return new HCompElement(data2, this.globalData, this);
    };
    var CompExpressionInterface = function() {
      return function(comp2) {
        function _thisLayerFunction(name2) {
          var i3 = 0;
          var len = comp2.layers.length;
          while (i3 < len) {
            if (comp2.layers[i3].nm === name2 || comp2.layers[i3].ind === name2) {
              return comp2.elements[i3].layerInterface;
            }
            i3 += 1;
          }
          return null;
        }
        Object.defineProperty(_thisLayerFunction, "_name", {
          value: comp2.data.nm
        });
        _thisLayerFunction.layer = _thisLayerFunction;
        _thisLayerFunction.pixelAspect = 1;
        _thisLayerFunction.height = comp2.data.h || comp2.globalData.compSize.h;
        _thisLayerFunction.width = comp2.data.w || comp2.globalData.compSize.w;
        _thisLayerFunction.pixelAspect = 1;
        _thisLayerFunction.frameDuration = 1 / comp2.globalData.frameRate;
        _thisLayerFunction.displayStartTime = 0;
        _thisLayerFunction.numLayers = comp2.layers.length;
        return _thisLayerFunction;
      };
    }();
    function _typeof$2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$2 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$2 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$2(obj);
    }
    function seedRandom(pool, math2) {
      var global2 = this, width2 = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math2.pow(width2, chunks), significance = math2.pow(2, digits), overflow = significance * 2, mask2 = width2 - 1, nodecrypto;
      function seedrandom(seed, options, callback) {
        var key2 = [];
        options = options === true ? {
          entropy: true
        } : options || {};
        var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed, 3), key2);
        var arc4 = new ARC4(key2);
        var prng = function prng2() {
          var n2 = arc4.g(chunks), d4 = startdenom, x3 = 0;
          while (n2 < significance) {
            n2 = (n2 + x3) * width2;
            d4 *= width2;
            x3 = arc4.g(1);
          }
          while (n2 >= overflow) {
            n2 /= 2;
            d4 /= 2;
            x3 >>>= 1;
          }
          return (n2 + x3) / d4;
        };
        prng.int32 = function() {
          return arc4.g(4) | 0;
        };
        prng.quick = function() {
          return arc4.g(4) / 4294967296;
        };
        prng["double"] = prng;
        mixkey(tostring(arc4.S), pool);
        return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
          if (state) {
            if (state.S) {
              copy2(state, arc4);
            }
            prng2.state = function() {
              return copy2(arc4, {});
            };
          }
          if (is_math_call) {
            math2[rngname] = prng2;
            return seed2;
          } else
            return prng2;
        })(prng, shortseed, "global" in options ? options.global : this == math2, options.state);
      }
      math2["seed" + rngname] = seedrandom;
      function ARC4(key2) {
        var t3, keylen = key2.length, me2 = this, i3 = 0, j2 = me2.i = me2.j = 0, s4 = me2.S = [];
        if (!keylen) {
          key2 = [keylen++];
        }
        while (i3 < width2) {
          s4[i3] = i3++;
        }
        for (i3 = 0; i3 < width2; i3++) {
          s4[i3] = s4[j2 = mask2 & j2 + key2[i3 % keylen] + (t3 = s4[i3])];
          s4[j2] = t3;
        }
        me2.g = function(count) {
          var t4, r2 = 0, i4 = me2.i, j3 = me2.j, s5 = me2.S;
          while (count--) {
            t4 = s5[i4 = mask2 & i4 + 1];
            r2 = r2 * width2 + s5[mask2 & (s5[i4] = s5[j3 = mask2 & j3 + t4]) + (s5[j3] = t4)];
          }
          me2.i = i4;
          me2.j = j3;
          return r2;
        };
      }
      function copy2(f2, t3) {
        t3.i = f2.i;
        t3.j = f2.j;
        t3.S = f2.S.slice();
        return t3;
      }
      function flatten(obj, depth) {
        var result2 = [], typ = _typeof$2(obj), prop;
        if (depth && typ == "object") {
          for (prop in obj) {
            try {
              result2.push(flatten(obj[prop], depth - 1));
            } catch (e3) {
            }
          }
        }
        return result2.length ? result2 : typ == "string" ? obj : obj + "\0";
      }
      function mixkey(seed, key2) {
        var stringseed = seed + "", smear, j2 = 0;
        while (j2 < stringseed.length) {
          key2[mask2 & j2] = mask2 & (smear ^= key2[mask2 & j2] * 19) + stringseed.charCodeAt(j2++);
        }
        return tostring(key2);
      }
      function autoseed() {
        try {
          if (nodecrypto)
            ;
          var out = new Uint8Array(width2);
          (global2.crypto || global2.msCrypto).getRandomValues(out);
          return tostring(out);
        } catch (e3) {
          var browser = global2.navigator, plugins = browser && browser.plugins;
          return [+/* @__PURE__ */ new Date(), global2, plugins, global2.screen, tostring(pool)];
        }
      }
      function tostring(a4) {
        return String.fromCharCode.apply(0, a4);
      }
      mixkey(math2.random(), pool);
    }
    function initialize$2(BMMath2) {
      seedRandom([], BMMath2);
    }
    var propTypes = {
      SHAPE: "shape"
    };
    function _typeof$1(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$1 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$1 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$1(obj);
    }
    var ExpressionManager = function() {
      var ob = {};
      var Math = BMMath;
      var window = null;
      var document = null;
      var XMLHttpRequest = null;
      var fetch = null;
      var frames = null;
      var _lottieGlobal = {};
      initialize$2(BMMath);
      function resetFrame() {
        _lottieGlobal = {};
      }
      function $bm_isInstanceOfArray(arr) {
        return arr.constructor === Array || arr.constructor === Float32Array;
      }
      function isNumerable(tOfV, v2) {
        return tOfV === "number" || v2 instanceof Number || tOfV === "boolean" || tOfV === "string";
      }
      function $bm_neg(a4) {
        var tOfA = _typeof$1(a4);
        if (tOfA === "number" || a4 instanceof Number || tOfA === "boolean") {
          return -a4;
        }
        if ($bm_isInstanceOfArray(a4)) {
          var i3;
          var lenA = a4.length;
          var retArr = [];
          for (i3 = 0; i3 < lenA; i3 += 1) {
            retArr[i3] = -a4[i3];
          }
          return retArr;
        }
        if (a4.propType) {
          return a4.v;
        }
        return -a4;
      }
      var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, "easeIn").get;
      var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, "easeOut").get;
      var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, "easeInOut").get;
      function sum(a4, b3) {
        var tOfA = _typeof$1(a4);
        var tOfB = _typeof$1(b3);
        if (isNumerable(tOfA, a4) && isNumerable(tOfB, b3) || tOfA === "string" || tOfB === "string") {
          return a4 + b3;
        }
        if ($bm_isInstanceOfArray(a4) && isNumerable(tOfB, b3)) {
          a4 = a4.slice(0);
          a4[0] += b3;
          return a4;
        }
        if (isNumerable(tOfA, a4) && $bm_isInstanceOfArray(b3)) {
          b3 = b3.slice(0);
          b3[0] = a4 + b3[0];
          return b3;
        }
        if ($bm_isInstanceOfArray(a4) && $bm_isInstanceOfArray(b3)) {
          var i3 = 0;
          var lenA = a4.length;
          var lenB = b3.length;
          var retArr = [];
          while (i3 < lenA || i3 < lenB) {
            if ((typeof a4[i3] === "number" || a4[i3] instanceof Number) && (typeof b3[i3] === "number" || b3[i3] instanceof Number)) {
              retArr[i3] = a4[i3] + b3[i3];
            } else {
              retArr[i3] = b3[i3] === void 0 ? a4[i3] : a4[i3] || b3[i3];
            }
            i3 += 1;
          }
          return retArr;
        }
        return 0;
      }
      var add = sum;
      function sub(a4, b3) {
        var tOfA = _typeof$1(a4);
        var tOfB = _typeof$1(b3);
        if (isNumerable(tOfA, a4) && isNumerable(tOfB, b3)) {
          if (tOfA === "string") {
            a4 = parseInt(a4, 10);
          }
          if (tOfB === "string") {
            b3 = parseInt(b3, 10);
          }
          return a4 - b3;
        }
        if ($bm_isInstanceOfArray(a4) && isNumerable(tOfB, b3)) {
          a4 = a4.slice(0);
          a4[0] -= b3;
          return a4;
        }
        if (isNumerable(tOfA, a4) && $bm_isInstanceOfArray(b3)) {
          b3 = b3.slice(0);
          b3[0] = a4 - b3[0];
          return b3;
        }
        if ($bm_isInstanceOfArray(a4) && $bm_isInstanceOfArray(b3)) {
          var i3 = 0;
          var lenA = a4.length;
          var lenB = b3.length;
          var retArr = [];
          while (i3 < lenA || i3 < lenB) {
            if ((typeof a4[i3] === "number" || a4[i3] instanceof Number) && (typeof b3[i3] === "number" || b3[i3] instanceof Number)) {
              retArr[i3] = a4[i3] - b3[i3];
            } else {
              retArr[i3] = b3[i3] === void 0 ? a4[i3] : a4[i3] || b3[i3];
            }
            i3 += 1;
          }
          return retArr;
        }
        return 0;
      }
      function mul(a4, b3) {
        var tOfA = _typeof$1(a4);
        var tOfB = _typeof$1(b3);
        var arr;
        if (isNumerable(tOfA, a4) && isNumerable(tOfB, b3)) {
          return a4 * b3;
        }
        var i3;
        var len;
        if ($bm_isInstanceOfArray(a4) && isNumerable(tOfB, b3)) {
          len = a4.length;
          arr = createTypedArray("float32", len);
          for (i3 = 0; i3 < len; i3 += 1) {
            arr[i3] = a4[i3] * b3;
          }
          return arr;
        }
        if (isNumerable(tOfA, a4) && $bm_isInstanceOfArray(b3)) {
          len = b3.length;
          arr = createTypedArray("float32", len);
          for (i3 = 0; i3 < len; i3 += 1) {
            arr[i3] = a4 * b3[i3];
          }
          return arr;
        }
        return 0;
      }
      function div(a4, b3) {
        var tOfA = _typeof$1(a4);
        var tOfB = _typeof$1(b3);
        var arr;
        if (isNumerable(tOfA, a4) && isNumerable(tOfB, b3)) {
          return a4 / b3;
        }
        var i3;
        var len;
        if ($bm_isInstanceOfArray(a4) && isNumerable(tOfB, b3)) {
          len = a4.length;
          arr = createTypedArray("float32", len);
          for (i3 = 0; i3 < len; i3 += 1) {
            arr[i3] = a4[i3] / b3;
          }
          return arr;
        }
        if (isNumerable(tOfA, a4) && $bm_isInstanceOfArray(b3)) {
          len = b3.length;
          arr = createTypedArray("float32", len);
          for (i3 = 0; i3 < len; i3 += 1) {
            arr[i3] = a4 / b3[i3];
          }
          return arr;
        }
        return 0;
      }
      function mod(a4, b3) {
        if (typeof a4 === "string") {
          a4 = parseInt(a4, 10);
        }
        if (typeof b3 === "string") {
          b3 = parseInt(b3, 10);
        }
        return a4 % b3;
      }
      var $bm_sum = sum;
      var $bm_sub = sub;
      var $bm_mul = mul;
      var $bm_div = div;
      var $bm_mod = mod;
      function clamp(num, min2, max2) {
        if (min2 > max2) {
          var mm = max2;
          max2 = min2;
          min2 = mm;
        }
        return Math.min(Math.max(num, min2), max2);
      }
      function radiansToDegrees(val2) {
        return val2 / degToRads;
      }
      var radians_to_degrees = radiansToDegrees;
      function degreesToRadians(val2) {
        return val2 * degToRads;
      }
      var degrees_to_radians = radiansToDegrees;
      var helperLengthArray = [0, 0, 0, 0, 0, 0];
      function length(arr1, arr2) {
        if (typeof arr1 === "number" || arr1 instanceof Number) {
          arr2 = arr2 || 0;
          return Math.abs(arr1 - arr2);
        }
        if (!arr2) {
          arr2 = helperLengthArray;
        }
        var i3;
        var len = Math.min(arr1.length, arr2.length);
        var addedLength = 0;
        for (i3 = 0; i3 < len; i3 += 1) {
          addedLength += Math.pow(arr2[i3] - arr1[i3], 2);
        }
        return Math.sqrt(addedLength);
      }
      function normalize(vec) {
        return div(vec, length(vec));
      }
      function rgbToHsl(val2) {
        var r2 = val2[0];
        var g2 = val2[1];
        var b3 = val2[2];
        var max2 = Math.max(r2, g2, b3);
        var min2 = Math.min(r2, g2, b3);
        var h4;
        var s4;
        var l2 = (max2 + min2) / 2;
        if (max2 === min2) {
          h4 = 0;
          s4 = 0;
        } else {
          var d4 = max2 - min2;
          s4 = l2 > 0.5 ? d4 / (2 - max2 - min2) : d4 / (max2 + min2);
          switch (max2) {
            case r2:
              h4 = (g2 - b3) / d4 + (g2 < b3 ? 6 : 0);
              break;
            case g2:
              h4 = (b3 - r2) / d4 + 2;
              break;
            case b3:
              h4 = (r2 - g2) / d4 + 4;
              break;
          }
          h4 /= 6;
        }
        return [h4, s4, l2, val2[3]];
      }
      function hue2rgb(p2, q3, t3) {
        if (t3 < 0)
          t3 += 1;
        if (t3 > 1)
          t3 -= 1;
        if (t3 < 1 / 6)
          return p2 + (q3 - p2) * 6 * t3;
        if (t3 < 1 / 2)
          return q3;
        if (t3 < 2 / 3)
          return p2 + (q3 - p2) * (2 / 3 - t3) * 6;
        return p2;
      }
      function hslToRgb(val2) {
        var h4 = val2[0];
        var s4 = val2[1];
        var l2 = val2[2];
        var r2;
        var g2;
        var b3;
        if (s4 === 0) {
          r2 = l2;
          b3 = l2;
          g2 = l2;
        } else {
          var q3 = l2 < 0.5 ? l2 * (1 + s4) : l2 + s4 - l2 * s4;
          var p2 = 2 * l2 - q3;
          r2 = hue2rgb(p2, q3, h4 + 1 / 3);
          g2 = hue2rgb(p2, q3, h4);
          b3 = hue2rgb(p2, q3, h4 - 1 / 3);
        }
        return [r2, g2, b3, val2[3]];
      }
      function linear(t3, tMin, tMax, value1, value2) {
        if (value1 === void 0 || value2 === void 0) {
          value1 = tMin;
          value2 = tMax;
          tMin = 0;
          tMax = 1;
        }
        if (tMax < tMin) {
          var _tMin = tMax;
          tMax = tMin;
          tMin = _tMin;
        }
        if (t3 <= tMin) {
          return value1;
        }
        if (t3 >= tMax) {
          return value2;
        }
        var perc = tMax === tMin ? 0 : (t3 - tMin) / (tMax - tMin);
        if (!value1.length) {
          return value1 + (value2 - value1) * perc;
        }
        var i3;
        var len = value1.length;
        var arr = createTypedArray("float32", len);
        for (i3 = 0; i3 < len; i3 += 1) {
          arr[i3] = value1[i3] + (value2[i3] - value1[i3]) * perc;
        }
        return arr;
      }
      function random(min2, max2) {
        if (max2 === void 0) {
          if (min2 === void 0) {
            min2 = 0;
            max2 = 1;
          } else {
            max2 = min2;
            min2 = void 0;
          }
        }
        if (max2.length) {
          var i3;
          var len = max2.length;
          if (!min2) {
            min2 = createTypedArray("float32", len);
          }
          var arr = createTypedArray("float32", len);
          var rnd = BMMath.random();
          for (i3 = 0; i3 < len; i3 += 1) {
            arr[i3] = min2[i3] + rnd * (max2[i3] - min2[i3]);
          }
          return arr;
        }
        if (min2 === void 0) {
          min2 = 0;
        }
        var rndm = BMMath.random();
        return min2 + rndm * (max2 - min2);
      }
      function createPath(points, inTangents, outTangents, closed) {
        var i3;
        var len = points.length;
        var path = shapePool.newElement();
        path.setPathData(!!closed, len);
        var arrPlaceholder = [0, 0];
        var inVertexPoint;
        var outVertexPoint;
        for (i3 = 0; i3 < len; i3 += 1) {
          inVertexPoint = inTangents && inTangents[i3] ? inTangents[i3] : arrPlaceholder;
          outVertexPoint = outTangents && outTangents[i3] ? outTangents[i3] : arrPlaceholder;
          path.setTripleAt(points[i3][0], points[i3][1], outVertexPoint[0] + points[i3][0], outVertexPoint[1] + points[i3][1], inVertexPoint[0] + points[i3][0], inVertexPoint[1] + points[i3][1], i3, true);
        }
        return path;
      }
      function initiateExpression(elem, data, property) {
        function noOp(_value) {
          return _value;
        }
        if (!elem.globalData.renderConfig.runExpressions) {
          return noOp;
        }
        var val = data.x;
        var needsVelocity = /velocity(?![\w\d])/.test(val);
        var _needsRandom = val.indexOf("random") !== -1;
        var elemType = elem.data.ty;
        var transform;
        var $bm_transform;
        var content;
        var effect;
        var thisProperty = property;
        thisProperty.valueAtTime = thisProperty.getValueAtTime;
        Object.defineProperty(thisProperty, "value", {
          get: function get2() {
            return thisProperty.v;
          }
        });
        elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
        elem.comp.displayStartTime = 0;
        var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
        var outPoint = elem.data.op / elem.comp.globalData.frameRate;
        var width = elem.data.sw ? elem.data.sw : 0;
        var height = elem.data.sh ? elem.data.sh : 0;
        var name = elem.data.nm;
        var loopIn;
        var loop_in;
        var loopOut;
        var loop_out;
        var smooth;
        var toWorld;
        var fromWorld;
        var fromComp;
        var toComp;
        var fromCompToSurface;
        var position;
        var rotation;
        var anchorPoint;
        var scale;
        var thisLayer;
        var thisComp;
        var mask;
        var valueAtTime;
        var velocityAtTime;
        var scoped_bm_rt;
        var expression_function = eval("[function _expression_function(){" + val + ";scoped_bm_rt=$bm_rt}]")[0];
        var numKeys = property.kf ? data.k.length : 0;
        var active = !this.data || this.data.hd !== true;
        var wiggle = (function wiggle2(freq, amp) {
          var iWiggle;
          var j2;
          var lenWiggle = this.pv.length ? this.pv.length : 1;
          var addedAmps = createTypedArray("float32", lenWiggle);
          freq = 5;
          var iterations = Math.floor(time * freq);
          iWiggle = 0;
          j2 = 0;
          while (iWiggle < iterations) {
            for (j2 = 0; j2 < lenWiggle; j2 += 1) {
              addedAmps[j2] += -amp + amp * 2 * BMMath.random();
            }
            iWiggle += 1;
          }
          var periods = time * freq;
          var perc = periods - Math.floor(periods);
          var arr = createTypedArray("float32", lenWiggle);
          if (lenWiggle > 1) {
            for (j2 = 0; j2 < lenWiggle; j2 += 1) {
              arr[j2] = this.pv[j2] + addedAmps[j2] + (-amp + amp * 2 * BMMath.random()) * perc;
            }
            return arr;
          }
          return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;
        }).bind(this);
        if (thisProperty.loopIn) {
          loopIn = thisProperty.loopIn.bind(thisProperty);
          loop_in = loopIn;
        }
        if (thisProperty.loopOut) {
          loopOut = thisProperty.loopOut.bind(thisProperty);
          loop_out = loopOut;
        }
        if (thisProperty.smooth) {
          smooth = thisProperty.smooth.bind(thisProperty);
        }
        function loopInDuration(type, duration2) {
          return loopIn(type, duration2, true);
        }
        function loopOutDuration(type, duration2) {
          return loopOut(type, duration2, true);
        }
        if (this.getValueAtTime) {
          valueAtTime = this.getValueAtTime.bind(this);
        }
        if (this.getVelocityAtTime) {
          velocityAtTime = this.getVelocityAtTime.bind(this);
        }
        var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);
        function lookAt(elem1, elem2) {
          var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
          var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
          var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
          return [yaw, pitch, 0];
        }
        function easeOut(t3, tMin, tMax, val1, val2) {
          return applyEase(easeOutBez, t3, tMin, tMax, val1, val2);
        }
        function easeIn(t3, tMin, tMax, val1, val2) {
          return applyEase(easeInBez, t3, tMin, tMax, val1, val2);
        }
        function ease(t3, tMin, tMax, val1, val2) {
          return applyEase(easeInOutBez, t3, tMin, tMax, val1, val2);
        }
        function applyEase(fn2, t3, tMin, tMax, val1, val2) {
          if (val1 === void 0) {
            val1 = tMin;
            val2 = tMax;
          } else {
            t3 = (t3 - tMin) / (tMax - tMin);
          }
          if (t3 > 1) {
            t3 = 1;
          } else if (t3 < 0) {
            t3 = 0;
          }
          var mult = fn2(t3);
          if ($bm_isInstanceOfArray(val1)) {
            var iKey;
            var lenKey = val1.length;
            var arr = createTypedArray("float32", lenKey);
            for (iKey = 0; iKey < lenKey; iKey += 1) {
              arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
            }
            return arr;
          }
          return (val2 - val1) * mult + val1;
        }
        function nearestKey(time2) {
          var iKey;
          var lenKey = data.k.length;
          var index2;
          var keyTime;
          if (!data.k.length || typeof data.k[0] === "number") {
            index2 = 0;
            keyTime = 0;
          } else {
            index2 = -1;
            time2 *= elem.comp.globalData.frameRate;
            if (time2 < data.k[0].t) {
              index2 = 1;
              keyTime = data.k[0].t;
            } else {
              for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
                if (time2 === data.k[iKey].t) {
                  index2 = iKey + 1;
                  keyTime = data.k[iKey].t;
                  break;
                } else if (time2 > data.k[iKey].t && time2 < data.k[iKey + 1].t) {
                  if (time2 - data.k[iKey].t > data.k[iKey + 1].t - time2) {
                    index2 = iKey + 2;
                    keyTime = data.k[iKey + 1].t;
                  } else {
                    index2 = iKey + 1;
                    keyTime = data.k[iKey].t;
                  }
                  break;
                }
              }
              if (index2 === -1) {
                index2 = iKey + 1;
                keyTime = data.k[iKey].t;
              }
            }
          }
          var obKey = {};
          obKey.index = index2;
          obKey.time = keyTime / elem.comp.globalData.frameRate;
          return obKey;
        }
        function key(ind) {
          var obKey;
          var iKey;
          var lenKey;
          if (!data.k.length || typeof data.k[0] === "number") {
            throw new Error("The property has no keyframe at index " + ind);
          }
          ind -= 1;
          obKey = {
            time: data.k[ind].t / elem.comp.globalData.frameRate,
            value: []
          };
          var arr = Object.prototype.hasOwnProperty.call(data.k[ind], "s") ? data.k[ind].s : data.k[ind - 1].e;
          lenKey = arr.length;
          for (iKey = 0; iKey < lenKey; iKey += 1) {
            obKey[iKey] = arr[iKey];
            obKey.value[iKey] = arr[iKey];
          }
          return obKey;
        }
        function framesToTime(fr2, fps) {
          if (!fps) {
            fps = elem.comp.globalData.frameRate;
          }
          return fr2 / fps;
        }
        function timeToFrames(t3, fps) {
          if (!t3 && t3 !== 0) {
            t3 = time;
          }
          if (!fps) {
            fps = elem.comp.globalData.frameRate;
          }
          return t3 * fps;
        }
        function seedRandom(seed) {
          BMMath.seedrandom(randSeed + seed);
        }
        function sourceRectAtTime() {
          return elem.sourceRectAtTime();
        }
        function substring(init, end) {
          if (typeof value === "string") {
            if (end === void 0) {
              return value.substring(init);
            }
            return value.substring(init, end);
          }
          return "";
        }
        function substr(init, end) {
          if (typeof value === "string") {
            if (end === void 0) {
              return value.substr(init);
            }
            return value.substr(init, end);
          }
          return "";
        }
        function posterizeTime(framesPerSecond) {
          time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;
          value = valueAtTime(time);
        }
        var time;
        var velocity;
        var value;
        var text;
        var textIndex;
        var textTotal;
        var selectorValue;
        var index = elem.data.ind;
        var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
        var parent;
        var randSeed = Math.floor(Math.random() * 1e6);
        var globalData = elem.globalData;
        function executeExpression(_value) {
          value = _value;
          if (this.frameExpressionId === elem.globalData.frameId && this.propType !== "textSelector") {
            return value;
          }
          if (this.propType === "textSelector") {
            textIndex = this.textIndex;
            textTotal = this.textTotal;
            selectorValue = this.selectorValue;
          }
          if (!thisLayer) {
            text = elem.layerInterface.text;
            thisLayer = elem.layerInterface;
            thisComp = elem.comp.compInterface;
            toWorld = thisLayer.toWorld.bind(thisLayer);
            fromWorld = thisLayer.fromWorld.bind(thisLayer);
            fromComp = thisLayer.fromComp.bind(thisLayer);
            toComp = thisLayer.toComp.bind(thisLayer);
            mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
            fromCompToSurface = fromComp;
          }
          if (!transform) {
            transform = elem.layerInterface("ADBE Transform Group");
            $bm_transform = transform;
            if (transform) {
              anchorPoint = transform.anchorPoint;
            }
          }
          if (elemType === 4 && !content) {
            content = thisLayer("ADBE Root Vectors Group");
          }
          if (!effect) {
            effect = thisLayer(4);
          }
          hasParent = !!(elem.hierarchy && elem.hierarchy.length);
          if (hasParent && !parent) {
            parent = elem.hierarchy[0].layerInterface;
          }
          time = this.comp.renderedFrame / this.comp.globalData.frameRate;
          if (_needsRandom) {
            seedRandom(randSeed + time);
          }
          if (needsVelocity) {
            velocity = velocityAtTime(time);
          }
          expression_function();
          this.frameExpressionId = elem.globalData.frameId;
          scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;
          return scoped_bm_rt;
        }
        executeExpression.__preventDeadCodeRemoval = [$bm_transform, anchorPoint, time, velocity, inPoint, outPoint, width, height, name, loop_in, loop_out, smooth, toComp, fromCompToSurface, toWorld, fromWorld, mask, position, rotation, scale, thisComp, numKeys, active, wiggle, loopInDuration, loopOutDuration, comp, lookAt, easeOut, easeIn, ease, nearestKey, key, text, textIndex, textTotal, selectorValue, framesToTime, timeToFrames, sourceRectAtTime, substring, substr, posterizeTime, index, globalData];
        return executeExpression;
      }
      ob.initiateExpression = initiateExpression;
      ob.__preventDeadCodeRemoval = [window, document, XMLHttpRequest, fetch, frames, $bm_neg, add, $bm_sum, $bm_sub, $bm_mul, $bm_div, $bm_mod, clamp, radians_to_degrees, degreesToRadians, degrees_to_radians, normalize, rgbToHsl, hslToRgb, linear, random, createPath, _lottieGlobal];
      ob.resetFrame = resetFrame;
      return ob;
    }();
    var Expressions = function() {
      var ob2 = {};
      ob2.initExpressions = initExpressions;
      ob2.resetFrame = ExpressionManager.resetFrame;
      function initExpressions(animation) {
        var stackCount = 0;
        var registers = [];
        function pushExpression() {
          stackCount += 1;
        }
        function popExpression() {
          stackCount -= 1;
          if (stackCount === 0) {
            releaseInstances();
          }
        }
        function registerExpressionProperty(expression) {
          if (registers.indexOf(expression) === -1) {
            registers.push(expression);
          }
        }
        function releaseInstances() {
          var i3;
          var len = registers.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            registers[i3].release();
          }
          registers.length = 0;
        }
        animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
        animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
        animation.renderer.globalData.pushExpression = pushExpression;
        animation.renderer.globalData.popExpression = popExpression;
        animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
      }
      return ob2;
    }();
    var MaskManagerInterface = function() {
      function MaskInterface(mask2, data2) {
        this._mask = mask2;
        this._data = data2;
      }
      Object.defineProperty(MaskInterface.prototype, "maskPath", {
        get: function get2() {
          if (this._mask.prop.k) {
            this._mask.prop.getValue();
          }
          return this._mask.prop;
        }
      });
      Object.defineProperty(MaskInterface.prototype, "maskOpacity", {
        get: function get2() {
          if (this._mask.op.k) {
            this._mask.op.getValue();
          }
          return this._mask.op.v * 100;
        }
      });
      var MaskManager = function MaskManager2(maskManager) {
        var _masksInterfaces = createSizedArray(maskManager.viewData.length);
        var i3;
        var len = maskManager.viewData.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          _masksInterfaces[i3] = new MaskInterface(maskManager.viewData[i3], maskManager.masksProperties[i3]);
        }
        var maskFunction = function maskFunction2(name2) {
          i3 = 0;
          while (i3 < len) {
            if (maskManager.masksProperties[i3].nm === name2) {
              return _masksInterfaces[i3];
            }
            i3 += 1;
          }
          return null;
        };
        return maskFunction;
      };
      return MaskManager;
    }();
    var ExpressionPropertyInterface = function() {
      var defaultUnidimensionalValue = {
        pv: 0,
        v: 0,
        mult: 1
      };
      var defaultMultidimensionalValue = {
        pv: [0, 0, 0],
        v: [0, 0, 0],
        mult: 1
      };
      function completeProperty(expressionValue, property2, type) {
        Object.defineProperty(expressionValue, "velocity", {
          get: function get2() {
            return property2.getVelocityAtTime(property2.comp.currentFrame);
          }
        });
        expressionValue.numKeys = property2.keyframes ? property2.keyframes.length : 0;
        expressionValue.key = function(pos) {
          if (!expressionValue.numKeys) {
            return 0;
          }
          var value2 = "";
          if ("s" in property2.keyframes[pos - 1]) {
            value2 = property2.keyframes[pos - 1].s;
          } else if ("e" in property2.keyframes[pos - 2]) {
            value2 = property2.keyframes[pos - 2].e;
          } else {
            value2 = property2.keyframes[pos - 2].s;
          }
          var valueProp = type === "unidimensional" ? new Number(value2) : Object.assign({}, value2);
          valueProp.time = property2.keyframes[pos - 1].t / property2.elem.comp.globalData.frameRate;
          valueProp.value = type === "unidimensional" ? value2[0] : value2;
          return valueProp;
        };
        expressionValue.valueAtTime = property2.getValueAtTime;
        expressionValue.speedAtTime = property2.getSpeedAtTime;
        expressionValue.velocityAtTime = property2.getVelocityAtTime;
        expressionValue.propertyGroup = property2.propertyGroup;
      }
      function UnidimensionalPropertyInterface(property2) {
        if (!property2 || !("pv" in property2)) {
          property2 = defaultUnidimensionalValue;
        }
        var mult = 1 / property2.mult;
        var val2 = property2.pv * mult;
        var expressionValue = new Number(val2);
        expressionValue.value = val2;
        completeProperty(expressionValue, property2, "unidimensional");
        return function() {
          if (property2.k) {
            property2.getValue();
          }
          val2 = property2.v * mult;
          if (expressionValue.value !== val2) {
            expressionValue = new Number(val2);
            expressionValue.value = val2;
            completeProperty(expressionValue, property2, "unidimensional");
          }
          return expressionValue;
        };
      }
      function MultidimensionalPropertyInterface(property2) {
        if (!property2 || !("pv" in property2)) {
          property2 = defaultMultidimensionalValue;
        }
        var mult = 1 / property2.mult;
        var len = property2.data && property2.data.l || property2.pv.length;
        var expressionValue = createTypedArray("float32", len);
        var arrValue = createTypedArray("float32", len);
        expressionValue.value = arrValue;
        completeProperty(expressionValue, property2, "multidimensional");
        return function() {
          if (property2.k) {
            property2.getValue();
          }
          for (var i3 = 0; i3 < len; i3 += 1) {
            arrValue[i3] = property2.v[i3] * mult;
            expressionValue[i3] = arrValue[i3];
          }
          return expressionValue;
        };
      }
      function defaultGetter() {
        return defaultUnidimensionalValue;
      }
      return function(property2) {
        if (!property2) {
          return defaultGetter;
        }
        if (property2.propType === "unidimensional") {
          return UnidimensionalPropertyInterface(property2);
        }
        return MultidimensionalPropertyInterface(property2);
      };
    }();
    var TransformExpressionInterface = function() {
      return function(transform2) {
        function _thisFunction(name2) {
          switch (name2) {
            case "scale":
            case "Scale":
            case "ADBE Scale":
            case 6:
              return _thisFunction.scale;
            case "rotation":
            case "Rotation":
            case "ADBE Rotation":
            case "ADBE Rotate Z":
            case 10:
              return _thisFunction.rotation;
            case "ADBE Rotate X":
              return _thisFunction.xRotation;
            case "ADBE Rotate Y":
              return _thisFunction.yRotation;
            case "position":
            case "Position":
            case "ADBE Position":
            case 2:
              return _thisFunction.position;
            case "ADBE Position_0":
              return _thisFunction.xPosition;
            case "ADBE Position_1":
              return _thisFunction.yPosition;
            case "ADBE Position_2":
              return _thisFunction.zPosition;
            case "anchorPoint":
            case "AnchorPoint":
            case "Anchor Point":
            case "ADBE AnchorPoint":
            case 1:
              return _thisFunction.anchorPoint;
            case "opacity":
            case "Opacity":
            case 11:
              return _thisFunction.opacity;
            default:
              return null;
          }
        }
        Object.defineProperty(_thisFunction, "rotation", {
          get: ExpressionPropertyInterface(transform2.r || transform2.rz)
        });
        Object.defineProperty(_thisFunction, "zRotation", {
          get: ExpressionPropertyInterface(transform2.rz || transform2.r)
        });
        Object.defineProperty(_thisFunction, "xRotation", {
          get: ExpressionPropertyInterface(transform2.rx)
        });
        Object.defineProperty(_thisFunction, "yRotation", {
          get: ExpressionPropertyInterface(transform2.ry)
        });
        Object.defineProperty(_thisFunction, "scale", {
          get: ExpressionPropertyInterface(transform2.s)
        });
        var _px;
        var _py;
        var _pz;
        var _transformFactory;
        if (transform2.p) {
          _transformFactory = ExpressionPropertyInterface(transform2.p);
        } else {
          _px = ExpressionPropertyInterface(transform2.px);
          _py = ExpressionPropertyInterface(transform2.py);
          if (transform2.pz) {
            _pz = ExpressionPropertyInterface(transform2.pz);
          }
        }
        Object.defineProperty(_thisFunction, "position", {
          get: function get2() {
            if (transform2.p) {
              return _transformFactory();
            }
            return [_px(), _py(), _pz ? _pz() : 0];
          }
        });
        Object.defineProperty(_thisFunction, "xPosition", {
          get: ExpressionPropertyInterface(transform2.px)
        });
        Object.defineProperty(_thisFunction, "yPosition", {
          get: ExpressionPropertyInterface(transform2.py)
        });
        Object.defineProperty(_thisFunction, "zPosition", {
          get: ExpressionPropertyInterface(transform2.pz)
        });
        Object.defineProperty(_thisFunction, "anchorPoint", {
          get: ExpressionPropertyInterface(transform2.a)
        });
        Object.defineProperty(_thisFunction, "opacity", {
          get: ExpressionPropertyInterface(transform2.o)
        });
        Object.defineProperty(_thisFunction, "skew", {
          get: ExpressionPropertyInterface(transform2.sk)
        });
        Object.defineProperty(_thisFunction, "skewAxis", {
          get: ExpressionPropertyInterface(transform2.sa)
        });
        Object.defineProperty(_thisFunction, "orientation", {
          get: ExpressionPropertyInterface(transform2.or)
        });
        return _thisFunction;
      };
    }();
    var LayerExpressionInterface = function() {
      function getMatrix(time2) {
        var toWorldMat = new Matrix();
        if (time2 !== void 0) {
          var propMatrix = this._elem.finalTransform.mProp.getValueAtTime(time2);
          propMatrix.clone(toWorldMat);
        } else {
          var transformMat = this._elem.finalTransform.mProp;
          transformMat.applyToMatrix(toWorldMat);
        }
        return toWorldMat;
      }
      function toWorldVec(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        toWorldMat.props[12] = 0;
        toWorldMat.props[13] = 0;
        toWorldMat.props[14] = 0;
        return this.applyPoint(toWorldMat, arr);
      }
      function toWorld2(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        return this.applyPoint(toWorldMat, arr);
      }
      function fromWorldVec(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        toWorldMat.props[12] = 0;
        toWorldMat.props[13] = 0;
        toWorldMat.props[14] = 0;
        return this.invertPoint(toWorldMat, arr);
      }
      function fromWorld2(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        return this.invertPoint(toWorldMat, arr);
      }
      function applyPoint(matrix, arr) {
        if (this._elem.hierarchy && this._elem.hierarchy.length) {
          var i3;
          var len = this._elem.hierarchy.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            this._elem.hierarchy[i3].finalTransform.mProp.applyToMatrix(matrix);
          }
        }
        return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);
      }
      function invertPoint(matrix, arr) {
        if (this._elem.hierarchy && this._elem.hierarchy.length) {
          var i3;
          var len = this._elem.hierarchy.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            this._elem.hierarchy[i3].finalTransform.mProp.applyToMatrix(matrix);
          }
        }
        return matrix.inversePoint(arr);
      }
      function fromComp2(arr) {
        var toWorldMat = new Matrix();
        toWorldMat.reset();
        this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
        if (this._elem.hierarchy && this._elem.hierarchy.length) {
          var i3;
          var len = this._elem.hierarchy.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            this._elem.hierarchy[i3].finalTransform.mProp.applyToMatrix(toWorldMat);
          }
          return toWorldMat.inversePoint(arr);
        }
        return toWorldMat.inversePoint(arr);
      }
      function sampleImage() {
        return [1, 1, 1, 1];
      }
      return function(elem2) {
        var transformInterface;
        function _registerMaskInterface(maskManager) {
          _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem2);
        }
        function _registerEffectsInterface(effects) {
          _thisLayerFunction.effect = effects;
        }
        function _thisLayerFunction(name2) {
          switch (name2) {
            case "ADBE Root Vectors Group":
            case "Contents":
            case 2:
              return _thisLayerFunction.shapeInterface;
            case 1:
            case 6:
            case "Transform":
            case "transform":
            case "ADBE Transform Group":
              return transformInterface;
            case 4:
            case "ADBE Effect Parade":
            case "effects":
            case "Effects":
              return _thisLayerFunction.effect;
            case "ADBE Text Properties":
              return _thisLayerFunction.textInterface;
            default:
              return null;
          }
        }
        _thisLayerFunction.getMatrix = getMatrix;
        _thisLayerFunction.invertPoint = invertPoint;
        _thisLayerFunction.applyPoint = applyPoint;
        _thisLayerFunction.toWorld = toWorld2;
        _thisLayerFunction.toWorldVec = toWorldVec;
        _thisLayerFunction.fromWorld = fromWorld2;
        _thisLayerFunction.fromWorldVec = fromWorldVec;
        _thisLayerFunction.toComp = toWorld2;
        _thisLayerFunction.fromComp = fromComp2;
        _thisLayerFunction.sampleImage = sampleImage;
        _thisLayerFunction.sourceRectAtTime = elem2.sourceRectAtTime.bind(elem2);
        _thisLayerFunction._elem = elem2;
        transformInterface = TransformExpressionInterface(elem2.finalTransform.mProp);
        var anchorPointDescriptor = getDescriptor(transformInterface, "anchorPoint");
        Object.defineProperties(_thisLayerFunction, {
          hasParent: {
            get: function get2() {
              return elem2.hierarchy.length;
            }
          },
          parent: {
            get: function get2() {
              return elem2.hierarchy[0].layerInterface;
            }
          },
          rotation: getDescriptor(transformInterface, "rotation"),
          scale: getDescriptor(transformInterface, "scale"),
          position: getDescriptor(transformInterface, "position"),
          opacity: getDescriptor(transformInterface, "opacity"),
          anchorPoint: anchorPointDescriptor,
          anchor_point: anchorPointDescriptor,
          transform: {
            get: function get2() {
              return transformInterface;
            }
          },
          active: {
            get: function get2() {
              return elem2.isInRange;
            }
          }
        });
        _thisLayerFunction.startTime = elem2.data.st;
        _thisLayerFunction.index = elem2.data.ind;
        _thisLayerFunction.source = elem2.data.refId;
        _thisLayerFunction.height = elem2.data.ty === 0 ? elem2.data.h : 100;
        _thisLayerFunction.width = elem2.data.ty === 0 ? elem2.data.w : 100;
        _thisLayerFunction.inPoint = elem2.data.ip / elem2.comp.globalData.frameRate;
        _thisLayerFunction.outPoint = elem2.data.op / elem2.comp.globalData.frameRate;
        _thisLayerFunction._name = elem2.data.nm;
        _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
        _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
        return _thisLayerFunction;
      };
    }();
    var propertyGroupFactory = function() {
      return function(interfaceFunction, parentPropertyGroup) {
        return function(val2) {
          val2 = val2 === void 0 ? 1 : val2;
          if (val2 <= 0) {
            return interfaceFunction;
          }
          return parentPropertyGroup(val2 - 1);
        };
      };
    }();
    var PropertyInterface = function() {
      return function(propertyName, propertyGroup) {
        var interfaceFunction = {
          _name: propertyName
        };
        function _propertyGroup(val2) {
          val2 = val2 === void 0 ? 1 : val2;
          if (val2 <= 0) {
            return interfaceFunction;
          }
          return propertyGroup(val2 - 1);
        }
        return _propertyGroup;
      };
    }();
    var EffectsExpressionInterface = function() {
      var ob2 = {
        createEffectsInterface
      };
      function createEffectsInterface(elem2, propertyGroup) {
        if (elem2.effectsManager) {
          var effectElements = [];
          var effectsData = elem2.data.ef;
          var i3;
          var len = elem2.effectsManager.effectElements.length;
          for (i3 = 0; i3 < len; i3 += 1) {
            effectElements.push(createGroupInterface(effectsData[i3], elem2.effectsManager.effectElements[i3], propertyGroup, elem2));
          }
          var effects = elem2.data.ef || [];
          var groupInterface = function groupInterface2(name2) {
            i3 = 0;
            len = effects.length;
            while (i3 < len) {
              if (name2 === effects[i3].nm || name2 === effects[i3].mn || name2 === effects[i3].ix) {
                return effectElements[i3];
              }
              i3 += 1;
            }
            return null;
          };
          Object.defineProperty(groupInterface, "numProperties", {
            get: function get2() {
              return effects.length;
            }
          });
          return groupInterface;
        }
        return null;
      }
      function createGroupInterface(data2, elements, propertyGroup, elem2) {
        function groupInterface(name2) {
          var effects = data2.ef;
          var i4 = 0;
          var len2 = effects.length;
          while (i4 < len2) {
            if (name2 === effects[i4].nm || name2 === effects[i4].mn || name2 === effects[i4].ix) {
              if (effects[i4].ty === 5) {
                return effectElements[i4];
              }
              return effectElements[i4]();
            }
            i4 += 1;
          }
          throw new Error();
        }
        var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);
        var effectElements = [];
        var i3;
        var len = data2.ef.length;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (data2.ef[i3].ty === 5) {
            effectElements.push(createGroupInterface(data2.ef[i3], elements.effectElements[i3], elements.effectElements[i3].propertyGroup, elem2));
          } else {
            effectElements.push(createValueInterface(elements.effectElements[i3], data2.ef[i3].ty, elem2, _propertyGroup));
          }
        }
        if (data2.mn === "ADBE Color Control") {
          Object.defineProperty(groupInterface, "color", {
            get: function get2() {
              return effectElements[0]();
            }
          });
        }
        Object.defineProperties(groupInterface, {
          numProperties: {
            get: function get2() {
              return data2.np;
            }
          },
          _name: {
            value: data2.nm
          },
          propertyGroup: {
            value: _propertyGroup
          }
        });
        groupInterface.enabled = data2.en !== 0;
        groupInterface.active = groupInterface.enabled;
        return groupInterface;
      }
      function createValueInterface(element, type, elem2, propertyGroup) {
        var expressionProperty = ExpressionPropertyInterface(element.p);
        function interfaceFunction() {
          if (type === 10) {
            return elem2.comp.compInterface(element.p.v);
          }
          return expressionProperty();
        }
        if (element.p.setGroupProperty) {
          element.p.setGroupProperty(PropertyInterface("", propertyGroup));
        }
        return interfaceFunction;
      }
      return ob2;
    }();
    var ShapePathInterface = function() {
      return function pathInterfaceFactory(shape2, view, propertyGroup) {
        var prop = view.sh;
        function interfaceFunction(val2) {
          if (val2 === "Shape" || val2 === "shape" || val2 === "Path" || val2 === "path" || val2 === "ADBE Vector Shape" || val2 === 2) {
            return interfaceFunction.path;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        prop.setGroupProperty(PropertyInterface("Path", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          path: {
            get: function get2() {
              if (prop.k) {
                prop.getValue();
              }
              return prop;
            }
          },
          shape: {
            get: function get2() {
              if (prop.k) {
                prop.getValue();
              }
              return prop;
            }
          },
          _name: {
            value: shape2.nm
          },
          ix: {
            value: shape2.ix
          },
          propertyIndex: {
            value: shape2.ix
          },
          mn: {
            value: shape2.mn
          },
          propertyGroup: {
            value: propertyGroup
          }
        });
        return interfaceFunction;
      };
    }();
    var ShapeExpressionInterface = function() {
      function iterateElements(shapes, view, propertyGroup) {
        var arr = [];
        var i3;
        var len = shapes ? shapes.length : 0;
        for (i3 = 0; i3 < len; i3 += 1) {
          if (shapes[i3].ty === "gr") {
            arr.push(groupInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "fl") {
            arr.push(fillInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "st") {
            arr.push(strokeInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "tm") {
            arr.push(trimInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "tr")
            ;
          else if (shapes[i3].ty === "el") {
            arr.push(ellipseInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "sr") {
            arr.push(starInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "sh") {
            arr.push(ShapePathInterface(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "rc") {
            arr.push(rectInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "rd") {
            arr.push(roundedInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "rp") {
            arr.push(repeaterInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else if (shapes[i3].ty === "gf") {
            arr.push(gradientFillInterfaceFactory(shapes[i3], view[i3], propertyGroup));
          } else {
            arr.push(defaultInterfaceFactory(shapes[i3], view[i3]));
          }
        }
        return arr;
      }
      function contentsInterfaceFactory(shape2, view, propertyGroup) {
        var interfaces2;
        var interfaceFunction = function _interfaceFunction(value2) {
          var i3 = 0;
          var len = interfaces2.length;
          while (i3 < len) {
            if (interfaces2[i3]._name === value2 || interfaces2[i3].mn === value2 || interfaces2[i3].propertyIndex === value2 || interfaces2[i3].ix === value2 || interfaces2[i3].ind === value2) {
              return interfaces2[i3];
            }
            i3 += 1;
          }
          if (typeof value2 === "number") {
            return interfaces2[value2 - 1];
          }
          return null;
        };
        interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        interfaces2 = iterateElements(shape2.it, view.it, interfaceFunction.propertyGroup);
        interfaceFunction.numProperties = interfaces2.length;
        var transformInterface = transformInterfaceFactory(shape2.it[shape2.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
        interfaceFunction.transform = transformInterface;
        interfaceFunction.propertyIndex = shape2.cix;
        interfaceFunction._name = shape2.nm;
        return interfaceFunction;
      }
      function groupInterfaceFactory(shape2, view, propertyGroup) {
        var interfaceFunction = function _interfaceFunction(value2) {
          switch (value2) {
            case "ADBE Vectors Group":
            case "Contents":
            case 2:
              return interfaceFunction.content;
            default:
              return interfaceFunction.transform;
          }
        };
        interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var content2 = contentsInterfaceFactory(shape2, view, interfaceFunction.propertyGroup);
        var transformInterface = transformInterfaceFactory(shape2.it[shape2.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
        interfaceFunction.content = content2;
        interfaceFunction.transform = transformInterface;
        Object.defineProperty(interfaceFunction, "_name", {
          get: function get2() {
            return shape2.nm;
          }
        });
        interfaceFunction.numProperties = shape2.np;
        interfaceFunction.propertyIndex = shape2.ix;
        interfaceFunction.nm = shape2.nm;
        interfaceFunction.mn = shape2.mn;
        return interfaceFunction;
      }
      function fillInterfaceFactory(shape2, view, propertyGroup) {
        function interfaceFunction(val2) {
          if (val2 === "Color" || val2 === "color") {
            return interfaceFunction.color;
          }
          if (val2 === "Opacity" || val2 === "opacity") {
            return interfaceFunction.opacity;
          }
          return null;
        }
        Object.defineProperties(interfaceFunction, {
          color: {
            get: ExpressionPropertyInterface(view.c)
          },
          opacity: {
            get: ExpressionPropertyInterface(view.o)
          },
          _name: {
            value: shape2.nm
          },
          mn: {
            value: shape2.mn
          }
        });
        view.c.setGroupProperty(PropertyInterface("Color", propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
        return interfaceFunction;
      }
      function gradientFillInterfaceFactory(shape2, view, propertyGroup) {
        function interfaceFunction(val2) {
          if (val2 === "Start Point" || val2 === "start point") {
            return interfaceFunction.startPoint;
          }
          if (val2 === "End Point" || val2 === "end point") {
            return interfaceFunction.endPoint;
          }
          if (val2 === "Opacity" || val2 === "opacity") {
            return interfaceFunction.opacity;
          }
          return null;
        }
        Object.defineProperties(interfaceFunction, {
          startPoint: {
            get: ExpressionPropertyInterface(view.s)
          },
          endPoint: {
            get: ExpressionPropertyInterface(view.e)
          },
          opacity: {
            get: ExpressionPropertyInterface(view.o)
          },
          type: {
            get: function get2() {
              return "a";
            }
          },
          _name: {
            value: shape2.nm
          },
          mn: {
            value: shape2.mn
          }
        });
        view.s.setGroupProperty(PropertyInterface("Start Point", propertyGroup));
        view.e.setGroupProperty(PropertyInterface("End Point", propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
        return interfaceFunction;
      }
      function defaultInterfaceFactory() {
        function interfaceFunction() {
          return null;
        }
        return interfaceFunction;
      }
      function strokeInterfaceFactory(shape2, view, propertyGroup) {
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);
        function addPropertyToDashOb(i4) {
          Object.defineProperty(dashOb, shape2.d[i4].nm, {
            get: ExpressionPropertyInterface(view.d.dataProps[i4].p)
          });
        }
        var i3;
        var len = shape2.d ? shape2.d.length : 0;
        var dashOb = {};
        for (i3 = 0; i3 < len; i3 += 1) {
          addPropertyToDashOb(i3);
          view.d.dataProps[i3].p.setGroupProperty(_dashPropertyGroup);
        }
        function interfaceFunction(val2) {
          if (val2 === "Color" || val2 === "color") {
            return interfaceFunction.color;
          }
          if (val2 === "Opacity" || val2 === "opacity") {
            return interfaceFunction.opacity;
          }
          if (val2 === "Stroke Width" || val2 === "stroke width") {
            return interfaceFunction.strokeWidth;
          }
          return null;
        }
        Object.defineProperties(interfaceFunction, {
          color: {
            get: ExpressionPropertyInterface(view.c)
          },
          opacity: {
            get: ExpressionPropertyInterface(view.o)
          },
          strokeWidth: {
            get: ExpressionPropertyInterface(view.w)
          },
          dash: {
            get: function get2() {
              return dashOb;
            }
          },
          _name: {
            value: shape2.nm
          },
          mn: {
            value: shape2.mn
          }
        });
        view.c.setGroupProperty(PropertyInterface("Color", _propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
        view.w.setGroupProperty(PropertyInterface("Stroke Width", _propertyGroup));
        return interfaceFunction;
      }
      function trimInterfaceFactory(shape2, view, propertyGroup) {
        function interfaceFunction(val2) {
          if (val2 === shape2.e.ix || val2 === "End" || val2 === "end") {
            return interfaceFunction.end;
          }
          if (val2 === shape2.s.ix) {
            return interfaceFunction.start;
          }
          if (val2 === shape2.o.ix) {
            return interfaceFunction.offset;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        interfaceFunction.propertyIndex = shape2.ix;
        view.s.setGroupProperty(PropertyInterface("Start", _propertyGroup));
        view.e.setGroupProperty(PropertyInterface("End", _propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
        interfaceFunction.propertyIndex = shape2.ix;
        interfaceFunction.propertyGroup = propertyGroup;
        Object.defineProperties(interfaceFunction, {
          start: {
            get: ExpressionPropertyInterface(view.s)
          },
          end: {
            get: ExpressionPropertyInterface(view.e)
          },
          offset: {
            get: ExpressionPropertyInterface(view.o)
          },
          _name: {
            value: shape2.nm
          }
        });
        interfaceFunction.mn = shape2.mn;
        return interfaceFunction;
      }
      function transformInterfaceFactory(shape2, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape2.a.ix === value2 || value2 === "Anchor Point") {
            return interfaceFunction.anchorPoint;
          }
          if (shape2.o.ix === value2 || value2 === "Opacity") {
            return interfaceFunction.opacity;
          }
          if (shape2.p.ix === value2 || value2 === "Position") {
            return interfaceFunction.position;
          }
          if (shape2.r.ix === value2 || value2 === "Rotation" || value2 === "ADBE Vector Rotation") {
            return interfaceFunction.rotation;
          }
          if (shape2.s.ix === value2 || value2 === "Scale") {
            return interfaceFunction.scale;
          }
          if (shape2.sk && shape2.sk.ix === value2 || value2 === "Skew") {
            return interfaceFunction.skew;
          }
          if (shape2.sa && shape2.sa.ix === value2 || value2 === "Skew Axis") {
            return interfaceFunction.skewAxis;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        view.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
        view.transform.mProps.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        view.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point", _propertyGroup));
        view.transform.mProps.s.setGroupProperty(PropertyInterface("Scale", _propertyGroup));
        view.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
        if (view.transform.mProps.sk) {
          view.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew", _propertyGroup));
          view.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle", _propertyGroup));
        }
        view.transform.op.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          opacity: {
            get: ExpressionPropertyInterface(view.transform.mProps.o)
          },
          position: {
            get: ExpressionPropertyInterface(view.transform.mProps.p)
          },
          anchorPoint: {
            get: ExpressionPropertyInterface(view.transform.mProps.a)
          },
          scale: {
            get: ExpressionPropertyInterface(view.transform.mProps.s)
          },
          rotation: {
            get: ExpressionPropertyInterface(view.transform.mProps.r)
          },
          skew: {
            get: ExpressionPropertyInterface(view.transform.mProps.sk)
          },
          skewAxis: {
            get: ExpressionPropertyInterface(view.transform.mProps.sa)
          },
          _name: {
            value: shape2.nm
          }
        });
        interfaceFunction.ty = "tr";
        interfaceFunction.mn = shape2.mn;
        interfaceFunction.propertyGroup = propertyGroup;
        return interfaceFunction;
      }
      function ellipseInterfaceFactory(shape2, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape2.p.ix === value2) {
            return interfaceFunction.position;
          }
          if (shape2.s.ix === value2) {
            return interfaceFunction.size;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        interfaceFunction.propertyIndex = shape2.ix;
        var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
        prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
        prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          size: {
            get: ExpressionPropertyInterface(prop.s)
          },
          position: {
            get: ExpressionPropertyInterface(prop.p)
          },
          _name: {
            value: shape2.nm
          }
        });
        interfaceFunction.mn = shape2.mn;
        return interfaceFunction;
      }
      function starInterfaceFactory(shape2, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape2.p.ix === value2) {
            return interfaceFunction.position;
          }
          if (shape2.r.ix === value2) {
            return interfaceFunction.rotation;
          }
          if (shape2.pt.ix === value2) {
            return interfaceFunction.points;
          }
          if (shape2.or.ix === value2 || value2 === "ADBE Vector Star Outer Radius") {
            return interfaceFunction.outerRadius;
          }
          if (shape2.os.ix === value2) {
            return interfaceFunction.outerRoundness;
          }
          if (shape2.ir && (shape2.ir.ix === value2 || value2 === "ADBE Vector Star Inner Radius")) {
            return interfaceFunction.innerRadius;
          }
          if (shape2.is && shape2.is.ix === value2) {
            return interfaceFunction.innerRoundness;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
        interfaceFunction.propertyIndex = shape2.ix;
        prop.or.setGroupProperty(PropertyInterface("Outer Radius", _propertyGroup));
        prop.os.setGroupProperty(PropertyInterface("Outer Roundness", _propertyGroup));
        prop.pt.setGroupProperty(PropertyInterface("Points", _propertyGroup));
        prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
        if (shape2.ir) {
          prop.ir.setGroupProperty(PropertyInterface("Inner Radius", _propertyGroup));
          prop.is.setGroupProperty(PropertyInterface("Inner Roundness", _propertyGroup));
        }
        Object.defineProperties(interfaceFunction, {
          position: {
            get: ExpressionPropertyInterface(prop.p)
          },
          rotation: {
            get: ExpressionPropertyInterface(prop.r)
          },
          points: {
            get: ExpressionPropertyInterface(prop.pt)
          },
          outerRadius: {
            get: ExpressionPropertyInterface(prop.or)
          },
          outerRoundness: {
            get: ExpressionPropertyInterface(prop.os)
          },
          innerRadius: {
            get: ExpressionPropertyInterface(prop.ir)
          },
          innerRoundness: {
            get: ExpressionPropertyInterface(prop.is)
          },
          _name: {
            value: shape2.nm
          }
        });
        interfaceFunction.mn = shape2.mn;
        return interfaceFunction;
      }
      function rectInterfaceFactory(shape2, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape2.p.ix === value2) {
            return interfaceFunction.position;
          }
          if (shape2.r.ix === value2) {
            return interfaceFunction.roundness;
          }
          if (shape2.s.ix === value2 || value2 === "Size" || value2 === "ADBE Vector Rect Size") {
            return interfaceFunction.size;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
        interfaceFunction.propertyIndex = shape2.ix;
        prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
        prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          position: {
            get: ExpressionPropertyInterface(prop.p)
          },
          roundness: {
            get: ExpressionPropertyInterface(prop.r)
          },
          size: {
            get: ExpressionPropertyInterface(prop.s)
          },
          _name: {
            value: shape2.nm
          }
        });
        interfaceFunction.mn = shape2.mn;
        return interfaceFunction;
      }
      function roundedInterfaceFactory(shape2, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape2.r.ix === value2 || value2 === "Round Corners 1") {
            return interfaceFunction.radius;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view;
        interfaceFunction.propertyIndex = shape2.ix;
        prop.rd.setGroupProperty(PropertyInterface("Radius", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          radius: {
            get: ExpressionPropertyInterface(prop.rd)
          },
          _name: {
            value: shape2.nm
          }
        });
        interfaceFunction.mn = shape2.mn;
        return interfaceFunction;
      }
      function repeaterInterfaceFactory(shape2, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape2.c.ix === value2 || value2 === "Copies") {
            return interfaceFunction.copies;
          }
          if (shape2.o.ix === value2 || value2 === "Offset") {
            return interfaceFunction.offset;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view;
        interfaceFunction.propertyIndex = shape2.ix;
        prop.c.setGroupProperty(PropertyInterface("Copies", _propertyGroup));
        prop.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          copies: {
            get: ExpressionPropertyInterface(prop.c)
          },
          offset: {
            get: ExpressionPropertyInterface(prop.o)
          },
          _name: {
            value: shape2.nm
          }
        });
        interfaceFunction.mn = shape2.mn;
        return interfaceFunction;
      }
      return function(shapes, view, propertyGroup) {
        var interfaces2;
        function _interfaceFunction(value2) {
          if (typeof value2 === "number") {
            value2 = value2 === void 0 ? 1 : value2;
            if (value2 === 0) {
              return propertyGroup;
            }
            return interfaces2[value2 - 1];
          }
          var i3 = 0;
          var len = interfaces2.length;
          while (i3 < len) {
            if (interfaces2[i3]._name === value2) {
              return interfaces2[i3];
            }
            i3 += 1;
          }
          return null;
        }
        function parentGroupWrapper() {
          return propertyGroup;
        }
        _interfaceFunction.propertyGroup = propertyGroupFactory(_interfaceFunction, parentGroupWrapper);
        interfaces2 = iterateElements(shapes, view, _interfaceFunction.propertyGroup);
        _interfaceFunction.numProperties = interfaces2.length;
        _interfaceFunction._name = "Contents";
        return _interfaceFunction;
      };
    }();
    var TextExpressionInterface = function() {
      return function(elem2) {
        var _sourceText;
        function _thisLayerFunction(name2) {
          switch (name2) {
            case "ADBE Text Document":
              return _thisLayerFunction.sourceText;
            default:
              return null;
          }
        }
        Object.defineProperty(_thisLayerFunction, "sourceText", {
          get: function get2() {
            elem2.textProperty.getValue();
            var stringValue = elem2.textProperty.currentData.t;
            if (!_sourceText || stringValue !== _sourceText.value) {
              _sourceText = new String(stringValue);
              _sourceText.value = stringValue || new String(stringValue);
              Object.defineProperty(_sourceText, "style", {
                get: function get3() {
                  return {
                    fillColor: elem2.textProperty.currentData.fc
                  };
                }
              });
            }
            return _sourceText;
          }
        });
        return _thisLayerFunction;
      };
    }();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var FootageInterface = function() {
      var outlineInterfaceFactory = function outlineInterfaceFactory2(elem2) {
        var currentPropertyName = "";
        var currentProperty = elem2.getFootageData();
        function init() {
          currentPropertyName = "";
          currentProperty = elem2.getFootageData();
          return searchProperty;
        }
        function searchProperty(value2) {
          if (currentProperty[value2]) {
            currentPropertyName = value2;
            currentProperty = currentProperty[value2];
            if (_typeof(currentProperty) === "object") {
              return searchProperty;
            }
            return currentProperty;
          }
          var propertyNameIndex = value2.indexOf(currentPropertyName);
          if (propertyNameIndex !== -1) {
            var index2 = parseInt(value2.substr(propertyNameIndex + currentPropertyName.length), 10);
            currentProperty = currentProperty[index2];
            if (_typeof(currentProperty) === "object") {
              return searchProperty;
            }
            return currentProperty;
          }
          return "";
        }
        return init;
      };
      var dataInterfaceFactory = function dataInterfaceFactory2(elem2) {
        function interfaceFunction(value2) {
          if (value2 === "Outline") {
            return interfaceFunction.outlineInterface();
          }
          return null;
        }
        interfaceFunction._name = "Outline";
        interfaceFunction.outlineInterface = outlineInterfaceFactory(elem2);
        return interfaceFunction;
      };
      return function(elem2) {
        function _interfaceFunction(value2) {
          if (value2 === "Data") {
            return _interfaceFunction.dataInterface;
          }
          return null;
        }
        _interfaceFunction._name = "Data";
        _interfaceFunction.dataInterface = dataInterfaceFactory(elem2);
        return _interfaceFunction;
      };
    }();
    var interfaces = {
      layer: LayerExpressionInterface,
      effects: EffectsExpressionInterface,
      comp: CompExpressionInterface,
      shape: ShapeExpressionInterface,
      text: TextExpressionInterface,
      footage: FootageInterface
    };
    function getInterface(type) {
      return interfaces[type] || null;
    }
    var expressionHelpers = function() {
      function searchExpressions(elem2, data2, prop) {
        if (data2.x) {
          prop.k = true;
          prop.x = true;
          prop.initiateExpression = ExpressionManager.initiateExpression;
          prop.effectsSequence.push(prop.initiateExpression(elem2, data2, prop).bind(prop));
        }
      }
      function getValueAtTime(frameNum) {
        frameNum *= this.elem.globalData.frameRate;
        frameNum -= this.offsetTime;
        if (frameNum !== this._cachingAtTime.lastFrame) {
          this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
          this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
          this._cachingAtTime.lastFrame = frameNum;
        }
        return this._cachingAtTime.value;
      }
      function getSpeedAtTime(frameNum) {
        var delta = -0.01;
        var v1 = this.getValueAtTime(frameNum);
        var v2 = this.getValueAtTime(frameNum + delta);
        var speed = 0;
        if (v1.length) {
          var i3;
          for (i3 = 0; i3 < v1.length; i3 += 1) {
            speed += Math.pow(v2[i3] - v1[i3], 2);
          }
          speed = Math.sqrt(speed) * 100;
        } else {
          speed = 0;
        }
        return speed;
      }
      function getVelocityAtTime(frameNum) {
        if (this.vel !== void 0) {
          return this.vel;
        }
        var delta = -1e-3;
        var v1 = this.getValueAtTime(frameNum);
        var v2 = this.getValueAtTime(frameNum + delta);
        var velocity2;
        if (v1.length) {
          velocity2 = createTypedArray("float32", v1.length);
          var i3;
          for (i3 = 0; i3 < v1.length; i3 += 1) {
            velocity2[i3] = (v2[i3] - v1[i3]) / delta;
          }
        } else {
          velocity2 = (v2 - v1) / delta;
        }
        return velocity2;
      }
      function getStaticValueAtTime() {
        return this.pv;
      }
      function setGroupProperty(propertyGroup) {
        this.propertyGroup = propertyGroup;
      }
      return {
        searchExpressions,
        getSpeedAtTime,
        getVelocityAtTime,
        getValueAtTime,
        getStaticValueAtTime,
        setGroupProperty
      };
    }();
    function addPropertyDecorator() {
      function loopOut2(type, duration2, durationFlag) {
        if (!this.k || !this.keyframes) {
          return this.pv;
        }
        type = type ? type.toLowerCase() : "";
        var currentFrame2 = this.comp.renderedFrame;
        var keyframes3 = this.keyframes;
        var lastKeyFrame = keyframes3[keyframes3.length - 1].t;
        if (currentFrame2 <= lastKeyFrame) {
          return this.pv;
        }
        var cycleDuration;
        var firstKeyFrame;
        if (!durationFlag) {
          if (!duration2 || duration2 > keyframes3.length - 1) {
            duration2 = keyframes3.length - 1;
          }
          firstKeyFrame = keyframes3[keyframes3.length - 1 - duration2].t;
          cycleDuration = lastKeyFrame - firstKeyFrame;
        } else {
          if (!duration2) {
            cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);
          } else {
            cycleDuration = Math.abs(lastKeyFrame - this.elem.comp.globalData.frameRate * duration2);
          }
          firstKeyFrame = lastKeyFrame - cycleDuration;
        }
        var i3;
        var len;
        var ret;
        if (type === "pingpong") {
          var iterations = Math.floor((currentFrame2 - firstKeyFrame) / cycleDuration);
          if (iterations % 2 !== 0) {
            return this.getValueAtTime((cycleDuration - (currentFrame2 - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          }
        } else if (type === "offset") {
          var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
          var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
          var current = this.getValueAtTime(((currentFrame2 - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          var repeats = Math.floor((currentFrame2 - firstKeyFrame) / cycleDuration);
          if (this.pv.length) {
            ret = new Array(initV.length);
            len = ret.length;
            for (i3 = 0; i3 < len; i3 += 1) {
              ret[i3] = (endV[i3] - initV[i3]) * repeats + current[i3];
            }
            return ret;
          }
          return (endV - initV) * repeats + current;
        } else if (type === "continue") {
          var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
          var nextLastValue = this.getValueAtTime((lastKeyFrame - 1e-3) / this.comp.globalData.frameRate, 0);
          if (this.pv.length) {
            ret = new Array(lastValue.length);
            len = ret.length;
            for (i3 = 0; i3 < len; i3 += 1) {
              ret[i3] = lastValue[i3] + (lastValue[i3] - nextLastValue[i3]) * ((currentFrame2 - lastKeyFrame) / this.comp.globalData.frameRate) / 5e-4;
            }
            return ret;
          }
          return lastValue + (lastValue - nextLastValue) * ((currentFrame2 - lastKeyFrame) / 1e-3);
        }
        return this.getValueAtTime(((currentFrame2 - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
      }
      function loopIn2(type, duration2, durationFlag) {
        if (!this.k) {
          return this.pv;
        }
        type = type ? type.toLowerCase() : "";
        var currentFrame2 = this.comp.renderedFrame;
        var keyframes3 = this.keyframes;
        var firstKeyFrame = keyframes3[0].t;
        if (currentFrame2 >= firstKeyFrame) {
          return this.pv;
        }
        var cycleDuration;
        var lastKeyFrame;
        if (!durationFlag) {
          if (!duration2 || duration2 > keyframes3.length - 1) {
            duration2 = keyframes3.length - 1;
          }
          lastKeyFrame = keyframes3[duration2].t;
          cycleDuration = lastKeyFrame - firstKeyFrame;
        } else {
          if (!duration2) {
            cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);
          } else {
            cycleDuration = Math.abs(this.elem.comp.globalData.frameRate * duration2);
          }
          lastKeyFrame = firstKeyFrame + cycleDuration;
        }
        var i3;
        var len;
        var ret;
        if (type === "pingpong") {
          var iterations = Math.floor((firstKeyFrame - currentFrame2) / cycleDuration);
          if (iterations % 2 === 0) {
            return this.getValueAtTime(((firstKeyFrame - currentFrame2) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          }
        } else if (type === "offset") {
          var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
          var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
          var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame2) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          var repeats = Math.floor((firstKeyFrame - currentFrame2) / cycleDuration) + 1;
          if (this.pv.length) {
            ret = new Array(initV.length);
            len = ret.length;
            for (i3 = 0; i3 < len; i3 += 1) {
              ret[i3] = current[i3] - (endV[i3] - initV[i3]) * repeats;
            }
            return ret;
          }
          return current - (endV - initV) * repeats;
        } else if (type === "continue") {
          var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
          var nextFirstValue = this.getValueAtTime((firstKeyFrame + 1e-3) / this.comp.globalData.frameRate, 0);
          if (this.pv.length) {
            ret = new Array(firstValue.length);
            len = ret.length;
            for (i3 = 0; i3 < len; i3 += 1) {
              ret[i3] = firstValue[i3] + (firstValue[i3] - nextFirstValue[i3]) * (firstKeyFrame - currentFrame2) / 1e-3;
            }
            return ret;
          }
          return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame2) / 1e-3;
        }
        return this.getValueAtTime((cycleDuration - ((firstKeyFrame - currentFrame2) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0);
      }
      function smooth2(width2, samples) {
        if (!this.k) {
          return this.pv;
        }
        width2 = (width2 || 0.4) * 0.5;
        samples = Math.floor(samples || 5);
        if (samples <= 1) {
          return this.pv;
        }
        var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
        var initFrame2 = currentTime - width2;
        var endFrame = currentTime + width2;
        var sampleFrequency = samples > 1 ? (endFrame - initFrame2) / (samples - 1) : 1;
        var i3 = 0;
        var j2 = 0;
        var value2;
        if (this.pv.length) {
          value2 = createTypedArray("float32", this.pv.length);
        } else {
          value2 = 0;
        }
        var sampleValue;
        while (i3 < samples) {
          sampleValue = this.getValueAtTime(initFrame2 + i3 * sampleFrequency);
          if (this.pv.length) {
            for (j2 = 0; j2 < this.pv.length; j2 += 1) {
              value2[j2] += sampleValue[j2];
            }
          } else {
            value2 += sampleValue;
          }
          i3 += 1;
        }
        if (this.pv.length) {
          for (j2 = 0; j2 < this.pv.length; j2 += 1) {
            value2[j2] /= samples;
          }
        } else {
          value2 /= samples;
        }
        return value2;
      }
      function getTransformValueAtTime(time2) {
        if (!this._transformCachingAtTime) {
          this._transformCachingAtTime = {
            v: new Matrix()
          };
        }
        var matrix = this._transformCachingAtTime.v;
        matrix.cloneFromProps(this.pre.props);
        if (this.appliedTransformations < 1) {
          var anchor = this.a.getValueAtTime(time2);
          matrix.translate(-anchor[0] * this.a.mult, -anchor[1] * this.a.mult, anchor[2] * this.a.mult);
        }
        if (this.appliedTransformations < 2) {
          var scale2 = this.s.getValueAtTime(time2);
          matrix.scale(scale2[0] * this.s.mult, scale2[1] * this.s.mult, scale2[2] * this.s.mult);
        }
        if (this.sk && this.appliedTransformations < 3) {
          var skew = this.sk.getValueAtTime(time2);
          var skewAxis = this.sa.getValueAtTime(time2);
          matrix.skewFromAxis(-skew * this.sk.mult, skewAxis * this.sa.mult);
        }
        if (this.r && this.appliedTransformations < 4) {
          var rotation2 = this.r.getValueAtTime(time2);
          matrix.rotate(-rotation2 * this.r.mult);
        } else if (!this.r && this.appliedTransformations < 4) {
          var rotationZ = this.rz.getValueAtTime(time2);
          var rotationY = this.ry.getValueAtTime(time2);
          var rotationX = this.rx.getValueAtTime(time2);
          var orientation = this.or.getValueAtTime(time2);
          matrix.rotateZ(-rotationZ * this.rz.mult).rotateY(rotationY * this.ry.mult).rotateX(rotationX * this.rx.mult).rotateZ(-orientation[2] * this.or.mult).rotateY(orientation[1] * this.or.mult).rotateX(orientation[0] * this.or.mult);
        }
        if (this.data.p && this.data.p.s) {
          var positionX = this.px.getValueAtTime(time2);
          var positionY = this.py.getValueAtTime(time2);
          if (this.data.p.z) {
            var positionZ = this.pz.getValueAtTime(time2);
            matrix.translate(positionX * this.px.mult, positionY * this.py.mult, -positionZ * this.pz.mult);
          } else {
            matrix.translate(positionX * this.px.mult, positionY * this.py.mult, 0);
          }
        } else {
          var position2 = this.p.getValueAtTime(time2);
          matrix.translate(position2[0] * this.p.mult, position2[1] * this.p.mult, -position2[2] * this.p.mult);
        }
        return matrix;
      }
      function getTransformStaticValueAtTime() {
        return this.v.clone(new Matrix());
      }
      var getTransformProperty = TransformPropertyFactory.getTransformProperty;
      TransformPropertyFactory.getTransformProperty = function(elem2, data2, container2) {
        var prop = getTransformProperty(elem2, data2, container2);
        if (prop.dynamicProperties.length) {
          prop.getValueAtTime = getTransformValueAtTime.bind(prop);
        } else {
          prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
        }
        prop.setGroupProperty = expressionHelpers.setGroupProperty;
        return prop;
      };
      var propertyGetProp = PropertyFactory.getProp;
      PropertyFactory.getProp = function(elem2, data2, type, mult, container2) {
        var prop = propertyGetProp(elem2, data2, type, mult, container2);
        if (prop.kf) {
          prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
        } else {
          prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
        }
        prop.setGroupProperty = expressionHelpers.setGroupProperty;
        prop.loopOut = loopOut2;
        prop.loopIn = loopIn2;
        prop.smooth = smooth2;
        prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
        prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
        prop.numKeys = data2.a === 1 ? data2.k.length : 0;
        prop.propertyIndex = data2.ix;
        var value2 = 0;
        if (type !== 0) {
          value2 = createTypedArray("float32", data2.a === 1 ? data2.k[0].s.length : data2.k.length);
        }
        prop._cachingAtTime = {
          lastFrame: initialDefaultFrame,
          lastIndex: 0,
          value: value2
        };
        expressionHelpers.searchExpressions(elem2, data2, prop);
        if (prop.k) {
          container2.addDynamicProperty(prop);
        }
        return prop;
      };
      function getShapeValueAtTime(frameNum) {
        if (!this._cachingAtTime) {
          this._cachingAtTime = {
            shapeValue: shapePool.clone(this.pv),
            lastIndex: 0,
            lastTime: initialDefaultFrame
          };
        }
        frameNum *= this.elem.globalData.frameRate;
        frameNum -= this.offsetTime;
        if (frameNum !== this._cachingAtTime.lastTime) {
          this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
          this._cachingAtTime.lastTime = frameNum;
          this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
        }
        return this._cachingAtTime.shapeValue;
      }
      var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
      var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();
      function ShapeExpressions() {
      }
      ShapeExpressions.prototype = {
        vertices: function vertices(prop, time2) {
          if (this.k) {
            this.getValue();
          }
          var shapePath = this.v;
          if (time2 !== void 0) {
            shapePath = this.getValueAtTime(time2, 0);
          }
          var i3;
          var len = shapePath._length;
          var vertices2 = shapePath[prop];
          var points = shapePath.v;
          var arr = createSizedArray(len);
          for (i3 = 0; i3 < len; i3 += 1) {
            if (prop === "i" || prop === "o") {
              arr[i3] = [vertices2[i3][0] - points[i3][0], vertices2[i3][1] - points[i3][1]];
            } else {
              arr[i3] = [vertices2[i3][0], vertices2[i3][1]];
            }
          }
          return arr;
        },
        points: function points(time2) {
          return this.vertices("v", time2);
        },
        inTangents: function inTangents(time2) {
          return this.vertices("i", time2);
        },
        outTangents: function outTangents(time2) {
          return this.vertices("o", time2);
        },
        isClosed: function isClosed() {
          return this.v.c;
        },
        pointOnPath: function pointOnPath(perc, time2) {
          var shapePath = this.v;
          if (time2 !== void 0) {
            shapePath = this.getValueAtTime(time2, 0);
          }
          if (!this._segmentsLength) {
            this._segmentsLength = bez.getSegmentsLength(shapePath);
          }
          var segmentsLength = this._segmentsLength;
          var lengths = segmentsLength.lengths;
          var lengthPos = segmentsLength.totalLength * perc;
          var i3 = 0;
          var len = lengths.length;
          var accumulatedLength = 0;
          var pt2;
          while (i3 < len) {
            if (accumulatedLength + lengths[i3].addedLength > lengthPos) {
              var initIndex = i3;
              var endIndex = shapePath.c && i3 === len - 1 ? 0 : i3 + 1;
              var segmentPerc = (lengthPos - accumulatedLength) / lengths[i3].addedLength;
              pt2 = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i3]);
              break;
            } else {
              accumulatedLength += lengths[i3].addedLength;
            }
            i3 += 1;
          }
          if (!pt2) {
            pt2 = shapePath.c ? [shapePath.v[0][0], shapePath.v[0][1]] : [shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1]];
          }
          return pt2;
        },
        vectorOnPath: function vectorOnPath(perc, time2, vectorType) {
          if (perc == 1) {
            perc = this.v.c;
          } else if (perc == 0) {
            perc = 0.999;
          }
          var pt1 = this.pointOnPath(perc, time2);
          var pt2 = this.pointOnPath(perc + 1e-3, time2);
          var xLength = pt2[0] - pt1[0];
          var yLength = pt2[1] - pt1[1];
          var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));
          if (magnitude === 0) {
            return [0, 0];
          }
          var unitVector = vectorType === "tangent" ? [xLength / magnitude, yLength / magnitude] : [-yLength / magnitude, xLength / magnitude];
          return unitVector;
        },
        tangentOnPath: function tangentOnPath(perc, time2) {
          return this.vectorOnPath(perc, time2, "tangent");
        },
        normalOnPath: function normalOnPath(perc, time2) {
          return this.vectorOnPath(perc, time2, "normal");
        },
        setGroupProperty: expressionHelpers.setGroupProperty,
        getValueAtTime: expressionHelpers.getStaticValueAtTime
      };
      extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
      extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
      KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
      KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;
      var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
      ShapePropertyFactory.getShapeProp = function(elem2, data2, type, arr, trims) {
        var prop = propertyGetShapeProp(elem2, data2, type, arr, trims);
        prop.propertyIndex = data2.ix;
        prop.lock = false;
        if (type === 3) {
          expressionHelpers.searchExpressions(elem2, data2.pt, prop);
        } else if (type === 4) {
          expressionHelpers.searchExpressions(elem2, data2.ks, prop);
        }
        if (prop.k) {
          elem2.addDynamicProperty(prop);
        }
        return prop;
      };
    }
    function initialize$1() {
      addPropertyDecorator();
    }
    function addDecorator() {
      function searchExpressions() {
        if (this.data.d.x) {
          this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);
          this.addEffect(this.getExpressionValue.bind(this));
          return true;
        }
        return null;
      }
      TextProperty.prototype.getExpressionValue = function(currentValue, text2) {
        var newValue = this.calculateExpression(text2);
        if (currentValue.t !== newValue) {
          var newData = {};
          this.copyData(newData, currentValue);
          newData.t = newValue.toString();
          newData.__complete = false;
          return newData;
        }
        return currentValue;
      };
      TextProperty.prototype.searchProperty = function() {
        var isKeyframed = this.searchKeyframes();
        var hasExpressions = this.searchExpressions();
        this.kf = isKeyframed || hasExpressions;
        return this.kf;
      };
      TextProperty.prototype.searchExpressions = searchExpressions;
    }
    function initialize() {
      addDecorator();
    }
    function SVGComposableEffect() {
    }
    SVGComposableEffect.prototype = {
      createMergeNode: function createMergeNode(resultId, ins) {
        var feMerge = createNS("feMerge");
        feMerge.setAttribute("result", resultId);
        var feMergeNode;
        var i3;
        for (i3 = 0; i3 < ins.length; i3 += 1) {
          feMergeNode = createNS("feMergeNode");
          feMergeNode.setAttribute("in", ins[i3]);
          feMerge.appendChild(feMergeNode);
          feMerge.appendChild(feMergeNode);
        }
        return feMerge;
      }
    };
    var linearFilterValue = "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";
    function SVGTintFilter(filter2, filterManager, elem2, id2, source) {
      this.filterManager = filterManager;
      var feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
      feColorMatrix.setAttribute("values", linearFilterValue + " 1 0");
      this.linearFilter = feColorMatrix;
      feColorMatrix.setAttribute("result", id2 + "_tint_1");
      filter2.appendChild(feColorMatrix);
      feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
      feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
      feColorMatrix.setAttribute("result", id2 + "_tint_2");
      filter2.appendChild(feColorMatrix);
      this.matrixFilter = feColorMatrix;
      var feMerge = this.createMergeNode(id2, [source, id2 + "_tint_1", id2 + "_tint_2"]);
      filter2.appendChild(feMerge);
    }
    extendPrototype([SVGComposableEffect], SVGTintFilter);
    SVGTintFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var colorBlack = this.filterManager.effectElements[0].p.v;
        var colorWhite = this.filterManager.effectElements[1].p.v;
        var opacity = this.filterManager.effectElements[2].p.v / 100;
        this.linearFilter.setAttribute("values", linearFilterValue + " " + opacity + " 0");
        this.matrixFilter.setAttribute("values", colorWhite[0] - colorBlack[0] + " 0 0 0 " + colorBlack[0] + " " + (colorWhite[1] - colorBlack[1]) + " 0 0 0 " + colorBlack[1] + " " + (colorWhite[2] - colorBlack[2]) + " 0 0 0 " + colorBlack[2] + " 0 0 0 1 0");
      }
    };
    function SVGFillFilter(filter2, filterManager, elem2, id2) {
      this.filterManager = filterManager;
      var feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
      feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
      feColorMatrix.setAttribute("result", id2);
      filter2.appendChild(feColorMatrix);
      this.matrixFilter = feColorMatrix;
    }
    SVGFillFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var color2 = this.filterManager.effectElements[2].p.v;
        var opacity = this.filterManager.effectElements[6].p.v;
        this.matrixFilter.setAttribute("values", "0 0 0 0 " + color2[0] + " 0 0 0 0 " + color2[1] + " 0 0 0 0 " + color2[2] + " 0 0 0 " + opacity + " 0");
      }
    };
    function SVGStrokeEffect(fil, filterManager, elem2) {
      this.initialized = false;
      this.filterManager = filterManager;
      this.elem = elem2;
      this.paths = [];
    }
    SVGStrokeEffect.prototype.initialize = function() {
      var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
      var path;
      var groupPath;
      var i3;
      var len;
      if (this.filterManager.effectElements[1].p.v === 1) {
        len = this.elem.maskManager.masksProperties.length;
        i3 = 0;
      } else {
        i3 = this.filterManager.effectElements[0].p.v - 1;
        len = i3 + 1;
      }
      groupPath = createNS("g");
      groupPath.setAttribute("fill", "none");
      groupPath.setAttribute("stroke-linecap", "round");
      groupPath.setAttribute("stroke-dashoffset", 1);
      for (i3; i3 < len; i3 += 1) {
        path = createNS("path");
        groupPath.appendChild(path);
        this.paths.push({
          p: path,
          m: i3
        });
      }
      if (this.filterManager.effectElements[10].p.v === 3) {
        var mask2 = createNS("mask");
        var id2 = createElementID();
        mask2.setAttribute("id", id2);
        mask2.setAttribute("mask-type", "alpha");
        mask2.appendChild(groupPath);
        this.elem.globalData.defs.appendChild(mask2);
        var g2 = createNS("g");
        g2.setAttribute("mask", "url(" + getLocationHref() + "#" + id2 + ")");
        while (elemChildren[0]) {
          g2.appendChild(elemChildren[0]);
        }
        this.elem.layerElement.appendChild(g2);
        this.masker = mask2;
        groupPath.setAttribute("stroke", "#fff");
      } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
        if (this.filterManager.effectElements[10].p.v === 2) {
          elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
          while (elemChildren.length) {
            this.elem.layerElement.removeChild(elemChildren[0]);
          }
        }
        this.elem.layerElement.appendChild(groupPath);
        this.elem.layerElement.removeAttribute("mask");
        groupPath.setAttribute("stroke", "#fff");
      }
      this.initialized = true;
      this.pathMasker = groupPath;
    };
    SVGStrokeEffect.prototype.renderFrame = function(forceRender) {
      if (!this.initialized) {
        this.initialize();
      }
      var i3;
      var len = this.paths.length;
      var mask2;
      var path;
      for (i3 = 0; i3 < len; i3 += 1) {
        if (this.paths[i3].m !== -1) {
          mask2 = this.elem.maskManager.viewData[this.paths[i3].m];
          path = this.paths[i3].p;
          if (forceRender || this.filterManager._mdf || mask2.prop._mdf) {
            path.setAttribute("d", mask2.lastPath);
          }
          if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask2.prop._mdf) {
            var dasharrayValue;
            if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
              var s4 = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
              var e3 = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
              var l2 = path.getTotalLength();
              dasharrayValue = "0 0 0 " + l2 * s4 + " ";
              var lineLength = l2 * (e3 - s4);
              var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
              var units = Math.floor(lineLength / segment);
              var j2;
              for (j2 = 0; j2 < units; j2 += 1) {
                dasharrayValue += "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + " ";
              }
              dasharrayValue += "0 " + l2 * 10 + " 0 0";
            } else {
              dasharrayValue = "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
            }
            path.setAttribute("stroke-dasharray", dasharrayValue);
          }
        }
      }
      if (forceRender || this.filterManager.effectElements[4].p._mdf) {
        this.pathMasker.setAttribute("stroke-width", this.filterManager.effectElements[4].p.v * 2);
      }
      if (forceRender || this.filterManager.effectElements[6].p._mdf) {
        this.pathMasker.setAttribute("opacity", this.filterManager.effectElements[6].p.v);
      }
      if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
        if (forceRender || this.filterManager.effectElements[3].p._mdf) {
          var color2 = this.filterManager.effectElements[3].p.v;
          this.pathMasker.setAttribute("stroke", "rgb(" + bmFloor(color2[0] * 255) + "," + bmFloor(color2[1] * 255) + "," + bmFloor(color2[2] * 255) + ")");
        }
      }
    };
    function SVGTritoneFilter(filter2, filterManager, elem2, id2) {
      this.filterManager = filterManager;
      var feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
      feColorMatrix.setAttribute("values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0");
      filter2.appendChild(feColorMatrix);
      var feComponentTransfer = createNS("feComponentTransfer");
      feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
      feComponentTransfer.setAttribute("result", id2);
      this.matrixFilter = feComponentTransfer;
      var feFuncR = createNS("feFuncR");
      feFuncR.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFuncR);
      this.feFuncR = feFuncR;
      var feFuncG = createNS("feFuncG");
      feFuncG.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFuncG);
      this.feFuncG = feFuncG;
      var feFuncB = createNS("feFuncB");
      feFuncB.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFuncB);
      this.feFuncB = feFuncB;
      filter2.appendChild(feComponentTransfer);
    }
    SVGTritoneFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var color1 = this.filterManager.effectElements[0].p.v;
        var color2 = this.filterManager.effectElements[1].p.v;
        var color3 = this.filterManager.effectElements[2].p.v;
        var tableR = color3[0] + " " + color2[0] + " " + color1[0];
        var tableG = color3[1] + " " + color2[1] + " " + color1[1];
        var tableB = color3[2] + " " + color2[2] + " " + color1[2];
        this.feFuncR.setAttribute("tableValues", tableR);
        this.feFuncG.setAttribute("tableValues", tableG);
        this.feFuncB.setAttribute("tableValues", tableB);
      }
    };
    function SVGProLevelsFilter(filter2, filterManager, elem2, id2) {
      this.filterManager = filterManager;
      var effectElements = this.filterManager.effectElements;
      var feComponentTransfer = createNS("feComponentTransfer");
      if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
        this.feFuncR = this.createFeFunc("feFuncR", feComponentTransfer);
      }
      if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
        this.feFuncG = this.createFeFunc("feFuncG", feComponentTransfer);
      }
      if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
        this.feFuncB = this.createFeFunc("feFuncB", feComponentTransfer);
      }
      if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
        this.feFuncA = this.createFeFunc("feFuncA", feComponentTransfer);
      }
      if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
        feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
        filter2.appendChild(feComponentTransfer);
      }
      if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {
        feComponentTransfer = createNS("feComponentTransfer");
        feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
        feComponentTransfer.setAttribute("result", id2);
        filter2.appendChild(feComponentTransfer);
        this.feFuncRComposed = this.createFeFunc("feFuncR", feComponentTransfer);
        this.feFuncGComposed = this.createFeFunc("feFuncG", feComponentTransfer);
        this.feFuncBComposed = this.createFeFunc("feFuncB", feComponentTransfer);
      }
    }
    SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {
      var feFunc = createNS(type);
      feFunc.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFunc);
      return feFunc;
    };
    SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
      var cnt = 0;
      var segments = 256;
      var perc;
      var min2 = Math.min(inputBlack, inputWhite);
      var max2 = Math.max(inputBlack, inputWhite);
      var table = Array.call(null, {
        length: segments
      });
      var colorValue;
      var pos = 0;
      var outputDelta = outputWhite - outputBlack;
      var inputDelta = inputWhite - inputBlack;
      while (cnt <= 256) {
        perc = cnt / 256;
        if (perc <= min2) {
          colorValue = inputDelta < 0 ? outputWhite : outputBlack;
        } else if (perc >= max2) {
          colorValue = inputDelta < 0 ? outputBlack : outputWhite;
        } else {
          colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
        }
        table[pos] = colorValue;
        pos += 1;
        cnt += 256 / (segments - 1);
      }
      return table.join(" ");
    };
    SVGProLevelsFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var val2;
        var effectElements = this.filterManager.effectElements;
        if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
          val2 = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
          this.feFuncRComposed.setAttribute("tableValues", val2);
          this.feFuncGComposed.setAttribute("tableValues", val2);
          this.feFuncBComposed.setAttribute("tableValues", val2);
        }
        if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
          val2 = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
          this.feFuncR.setAttribute("tableValues", val2);
        }
        if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
          val2 = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
          this.feFuncG.setAttribute("tableValues", val2);
        }
        if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
          val2 = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
          this.feFuncB.setAttribute("tableValues", val2);
        }
        if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
          val2 = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
          this.feFuncA.setAttribute("tableValues", val2);
        }
      }
    };
    function SVGDropShadowEffect(filter2, filterManager, elem2, id2, source) {
      var globalFilterSize = filterManager.container.globalData.renderConfig.filterSize;
      var filterSize = filterManager.data.fs || globalFilterSize;
      filter2.setAttribute("x", filterSize.x || globalFilterSize.x);
      filter2.setAttribute("y", filterSize.y || globalFilterSize.y);
      filter2.setAttribute("width", filterSize.width || globalFilterSize.width);
      filter2.setAttribute("height", filterSize.height || globalFilterSize.height);
      this.filterManager = filterManager;
      var feGaussianBlur = createNS("feGaussianBlur");
      feGaussianBlur.setAttribute("in", "SourceAlpha");
      feGaussianBlur.setAttribute("result", id2 + "_drop_shadow_1");
      feGaussianBlur.setAttribute("stdDeviation", "0");
      this.feGaussianBlur = feGaussianBlur;
      filter2.appendChild(feGaussianBlur);
      var feOffset = createNS("feOffset");
      feOffset.setAttribute("dx", "25");
      feOffset.setAttribute("dy", "0");
      feOffset.setAttribute("in", id2 + "_drop_shadow_1");
      feOffset.setAttribute("result", id2 + "_drop_shadow_2");
      this.feOffset = feOffset;
      filter2.appendChild(feOffset);
      var feFlood = createNS("feFlood");
      feFlood.setAttribute("flood-color", "#00ff00");
      feFlood.setAttribute("flood-opacity", "1");
      feFlood.setAttribute("result", id2 + "_drop_shadow_3");
      this.feFlood = feFlood;
      filter2.appendChild(feFlood);
      var feComposite = createNS("feComposite");
      feComposite.setAttribute("in", id2 + "_drop_shadow_3");
      feComposite.setAttribute("in2", id2 + "_drop_shadow_2");
      feComposite.setAttribute("operator", "in");
      feComposite.setAttribute("result", id2 + "_drop_shadow_4");
      filter2.appendChild(feComposite);
      var feMerge = this.createMergeNode(id2, [id2 + "_drop_shadow_4", source]);
      filter2.appendChild(feMerge);
    }
    extendPrototype([SVGComposableEffect], SVGDropShadowEffect);
    SVGDropShadowEffect.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        if (forceRender || this.filterManager.effectElements[4].p._mdf) {
          this.feGaussianBlur.setAttribute("stdDeviation", this.filterManager.effectElements[4].p.v / 4);
        }
        if (forceRender || this.filterManager.effectElements[0].p._mdf) {
          var col = this.filterManager.effectElements[0].p.v;
          this.feFlood.setAttribute("flood-color", rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
        }
        if (forceRender || this.filterManager.effectElements[1].p._mdf) {
          this.feFlood.setAttribute("flood-opacity", this.filterManager.effectElements[1].p.v / 255);
        }
        if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
          var distance = this.filterManager.effectElements[3].p.v;
          var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
          var x3 = distance * Math.cos(angle);
          var y4 = distance * Math.sin(angle);
          this.feOffset.setAttribute("dx", x3);
          this.feOffset.setAttribute("dy", y4);
        }
      }
    };
    var _svgMatteSymbols = [];
    function SVGMatte3Effect(filterElem, filterManager, elem2) {
      this.initialized = false;
      this.filterManager = filterManager;
      this.filterElem = filterElem;
      this.elem = elem2;
      elem2.matteElement = createNS("g");
      elem2.matteElement.appendChild(elem2.layerElement);
      elem2.matteElement.appendChild(elem2.transformedElement);
      elem2.baseElement = elem2.matteElement;
    }
    SVGMatte3Effect.prototype.findSymbol = function(mask2) {
      var i3 = 0;
      var len = _svgMatteSymbols.length;
      while (i3 < len) {
        if (_svgMatteSymbols[i3] === mask2) {
          return _svgMatteSymbols[i3];
        }
        i3 += 1;
      }
      return null;
    };
    SVGMatte3Effect.prototype.replaceInParent = function(mask2, symbolId) {
      var parentNode = mask2.layerElement.parentNode;
      if (!parentNode) {
        return;
      }
      var children = parentNode.children;
      var i3 = 0;
      var len = children.length;
      while (i3 < len) {
        if (children[i3] === mask2.layerElement) {
          break;
        }
        i3 += 1;
      }
      var nextChild;
      if (i3 <= len - 2) {
        nextChild = children[i3 + 1];
      }
      var useElem = createNS("use");
      useElem.setAttribute("href", "#" + symbolId);
      if (nextChild) {
        parentNode.insertBefore(useElem, nextChild);
      } else {
        parentNode.appendChild(useElem);
      }
    };
    SVGMatte3Effect.prototype.setElementAsMask = function(elem2, mask2) {
      if (!this.findSymbol(mask2)) {
        var symbolId = createElementID();
        var masker = createNS("mask");
        masker.setAttribute("id", mask2.layerId);
        masker.setAttribute("mask-type", "alpha");
        _svgMatteSymbols.push(mask2);
        var defs = elem2.globalData.defs;
        defs.appendChild(masker);
        var symbol = createNS("symbol");
        symbol.setAttribute("id", symbolId);
        this.replaceInParent(mask2, symbolId);
        symbol.appendChild(mask2.layerElement);
        defs.appendChild(symbol);
        var useElem = createNS("use");
        useElem.setAttribute("href", "#" + symbolId);
        masker.appendChild(useElem);
        mask2.data.hd = false;
        mask2.show();
      }
      elem2.setMatte(mask2.layerId);
    };
    SVGMatte3Effect.prototype.initialize = function() {
      var ind = this.filterManager.effectElements[0].p.v;
      var elements = this.elem.comp.elements;
      var i3 = 0;
      var len = elements.length;
      while (i3 < len) {
        if (elements[i3] && elements[i3].data.ind === ind) {
          this.setElementAsMask(this.elem, elements[i3]);
        }
        i3 += 1;
      }
      this.initialized = true;
    };
    SVGMatte3Effect.prototype.renderFrame = function() {
      if (!this.initialized) {
        this.initialize();
      }
    };
    function SVGGaussianBlurEffect(filter2, filterManager, elem2, id2) {
      filter2.setAttribute("x", "-100%");
      filter2.setAttribute("y", "-100%");
      filter2.setAttribute("width", "300%");
      filter2.setAttribute("height", "300%");
      this.filterManager = filterManager;
      var feGaussianBlur = createNS("feGaussianBlur");
      feGaussianBlur.setAttribute("result", id2);
      filter2.appendChild(feGaussianBlur);
      this.feGaussianBlur = feGaussianBlur;
    }
    SVGGaussianBlurEffect.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var kBlurrinessToSigma = 0.3;
        var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma;
        var dimensions = this.filterManager.effectElements[1].p.v;
        var sigmaX = dimensions == 3 ? 0 : sigma;
        var sigmaY = dimensions == 2 ? 0 : sigma;
        this.feGaussianBlur.setAttribute("stdDeviation", sigmaX + " " + sigmaY);
        var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? "wrap" : "duplicate";
        this.feGaussianBlur.setAttribute("edgeMode", edgeMode);
      }
    };
    function TransformEffect() {
    }
    TransformEffect.prototype.init = function(effectsManager) {
      this.effectsManager = effectsManager;
      this.type = effectTypes.TRANSFORM_EFFECT;
      this.matrix = new Matrix();
      this.opacity = -1;
      this._mdf = false;
      this._opMdf = false;
    };
    TransformEffect.prototype.renderFrame = function(forceFrame) {
      this._opMdf = false;
      this._mdf = false;
      if (forceFrame || this.effectsManager._mdf) {
        var effectElements = this.effectsManager.effectElements;
        var anchor = effectElements[0].p.v;
        var position2 = effectElements[1].p.v;
        var isUniformScale = effectElements[2].p.v === 1;
        var scaleHeight = effectElements[3].p.v;
        var scaleWidth = isUniformScale ? scaleHeight : effectElements[4].p.v;
        var skew = effectElements[5].p.v;
        var skewAxis = effectElements[6].p.v;
        var rotation2 = effectElements[7].p.v;
        this.matrix.reset();
        this.matrix.translate(-anchor[0], -anchor[1], anchor[2]);
        this.matrix.scale(scaleWidth * 0.01, scaleHeight * 0.01, 1);
        this.matrix.rotate(-rotation2 * degToRads);
        this.matrix.skewFromAxis(-skew * degToRads, (skewAxis + 90) * degToRads);
        this.matrix.translate(position2[0], position2[1], 0);
        this._mdf = true;
        if (this.opacity !== effectElements[8].p.v) {
          this.opacity = effectElements[8].p.v;
          this._opMdf = true;
        }
      }
    };
    function SVGTransformEffect(_2, filterManager) {
      this.init(filterManager);
    }
    extendPrototype([TransformEffect], SVGTransformEffect);
    function CVTransformEffect(effectsManager) {
      this.init(effectsManager);
    }
    extendPrototype([TransformEffect], CVTransformEffect);
    registerRenderer("canvas", CanvasRenderer);
    registerRenderer("html", HybridRenderer);
    registerRenderer("svg", SVGRenderer);
    ShapeModifiers.registerModifier("tm", TrimModifier);
    ShapeModifiers.registerModifier("pb", PuckerAndBloatModifier);
    ShapeModifiers.registerModifier("rp", RepeaterModifier);
    ShapeModifiers.registerModifier("rd", RoundCornersModifier);
    ShapeModifiers.registerModifier("zz", ZigZagModifier);
    ShapeModifiers.registerModifier("op", OffsetPathModifier);
    setExpressionsPlugin(Expressions);
    setExpressionInterfaces(getInterface);
    initialize$1();
    initialize();
    registerEffect$1(20, SVGTintFilter, true);
    registerEffect$1(21, SVGFillFilter, true);
    registerEffect$1(22, SVGStrokeEffect, false);
    registerEffect$1(23, SVGTritoneFilter, true);
    registerEffect$1(24, SVGProLevelsFilter, true);
    registerEffect$1(25, SVGDropShadowEffect, true);
    registerEffect$1(28, SVGMatte3Effect, false);
    registerEffect$1(29, SVGGaussianBlurEffect, true);
    registerEffect$1(35, SVGTransformEffect, false);
    registerEffect(35, CVTransformEffect);
    return lottie;
  });
})(lottie$1, lottie$1.exports);
var lottieExports = lottie$1.exports;
const lottie = /* @__PURE__ */ getDefaultExportFromCjs(lottieExports);
function _iterableToArrayLimit(arr, i3) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e3, _x, _r2, _arr = [], _n2 = true, _d2 = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i3) {
        if (Object(_i) !== _i)
          return;
        _n2 = false;
      } else
        for (; !(_n2 = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i3); _n2 = true)
          ;
    } catch (err) {
      _d2 = true, _e3 = err;
    } finally {
      try {
        if (!_n2 && null != _i.return && (_r2 = _i.return(), Object(_r2) !== _r2))
          return;
      } finally {
        if (_d2)
          throw _e3;
      }
    }
    return _arr;
  }
}
function ownKeys$1(object2, enumerableOnly) {
  var keys2 = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object2);
    enumerableOnly && (symbols2 = symbols2.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    })), keys2.push.apply(keys2, symbols2);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i3 = 1; i3 < arguments.length; i3++) {
    var source = null != arguments[i3] ? arguments[i3] : {};
    i3 % 2 ? ownKeys$1(Object(source), true).forEach(function(key2) {
      _defineProperty$1(target, key2, source[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target;
}
function _defineProperty$1(obj, key2, value2) {
  key2 = _toPropertyKey(key2);
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value2;
  }
  return obj;
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key2 = sourceKeys[i3];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
function _objectWithoutProperties$3(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose$1(source, excluded);
  var key2, i3;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
      key2 = sourceSymbolKeys[i3];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key2))
        continue;
      target[key2] = source[key2];
    }
  }
  return target;
}
function _slicedToArray(arr, i3) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++)
    arr2[i3] = arr[i3];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input2, hint) {
  if (typeof input2 !== "object" || input2 === null)
    return input2;
  var prim = input2[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input2, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input2);
}
function _toPropertyKey(arg) {
  var key2 = _toPrimitive(arg, "string");
  return typeof key2 === "symbol" ? key2 : String(key2);
}
var _excluded$1 = ["animationData", "loop", "autoplay", "initialSegment", "onComplete", "onLoopComplete", "onEnterFrame", "onSegmentStart", "onConfigReady", "onDataReady", "onDataFailed", "onLoadedImages", "onDOMLoaded", "onDestroy", "lottieRef", "renderer", "name", "assetsPath", "rendererSettings"];
var useLottie = function useLottie2(props, style2) {
  var animationData = props.animationData, loop2 = props.loop, autoplay = props.autoplay, initialSegment = props.initialSegment, onComplete = props.onComplete, onLoopComplete = props.onLoopComplete, onEnterFrame = props.onEnterFrame, onSegmentStart = props.onSegmentStart, onConfigReady = props.onConfigReady, onDataReady = props.onDataReady, onDataFailed = props.onDataFailed, onLoadedImages = props.onLoadedImages, onDOMLoaded = props.onDOMLoaded, onDestroy = props.onDestroy;
  props.lottieRef;
  props.renderer;
  props.name;
  props.assetsPath;
  props.rendererSettings;
  var rest = _objectWithoutProperties$3(props, _excluded$1);
  var _useState = reactExports.useState(false), _useState2 = _slicedToArray(_useState, 2), animationLoaded = _useState2[0], setAnimationLoaded = _useState2[1];
  var animationInstanceRef = reactExports.useRef();
  var animationContainer = reactExports.useRef(null);
  var play = function play2() {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.play();
  };
  var stop2 = function stop3() {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.stop();
  };
  var pause = function pause2() {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.pause();
  };
  var setSpeed = function setSpeed2(speed) {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.setSpeed(speed);
  };
  var goToAndPlay = function goToAndPlay2(value2, isFrame) {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.goToAndPlay(value2, isFrame);
  };
  var goToAndStop = function goToAndStop2(value2, isFrame) {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.goToAndStop(value2, isFrame);
  };
  var setDirection = function setDirection2(direction) {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.setDirection(direction);
  };
  var playSegments = function playSegments2(segments, forceFlag) {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.playSegments(segments, forceFlag);
  };
  var setSubframe = function setSubframe2(useSubFrames) {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.setSubframe(useSubFrames);
  };
  var getDuration = function getDuration2(inFrames) {
    var _a2;
    return (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.getDuration(inFrames);
  };
  var destroy = function destroy2() {
    var _a2;
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.destroy();
    animationInstanceRef.current = void 0;
  };
  var loadAnimation2 = function loadAnimation3() {
    var forcedConfigs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _a2;
    if (!animationContainer.current) {
      return;
    }
    (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.destroy();
    var config2 = _objectSpread2(_objectSpread2(_objectSpread2({}, props), forcedConfigs), {}, {
      container: animationContainer.current
    });
    animationInstanceRef.current = lottie.loadAnimation(config2);
    setAnimationLoaded(!!animationInstanceRef.current);
    return function() {
      var _a3;
      (_a3 = animationInstanceRef.current) === null || _a3 === void 0 ? void 0 : _a3.destroy();
      animationInstanceRef.current = void 0;
    };
  };
  reactExports.useEffect(function() {
    var onUnmount = loadAnimation2();
    return function() {
      return onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount();
    };
  }, [animationData, loop2]);
  reactExports.useEffect(function() {
    if (!animationInstanceRef.current) {
      return;
    }
    animationInstanceRef.current.autoplay = !!autoplay;
  }, [autoplay]);
  reactExports.useEffect(function() {
    if (!animationInstanceRef.current) {
      return;
    }
    if (!initialSegment) {
      animationInstanceRef.current.resetSegments(true);
      return;
    }
    if (!Array.isArray(initialSegment) || !initialSegment.length) {
      return;
    }
    if (animationInstanceRef.current.currentRawFrame < initialSegment[0] || animationInstanceRef.current.currentRawFrame > initialSegment[1]) {
      animationInstanceRef.current.currentRawFrame = initialSegment[0];
    }
    animationInstanceRef.current.setSegment(initialSegment[0], initialSegment[1]);
  }, [initialSegment]);
  reactExports.useEffect(function() {
    var partialListeners = [{
      name: "complete",
      handler: onComplete
    }, {
      name: "loopComplete",
      handler: onLoopComplete
    }, {
      name: "enterFrame",
      handler: onEnterFrame
    }, {
      name: "segmentStart",
      handler: onSegmentStart
    }, {
      name: "config_ready",
      handler: onConfigReady
    }, {
      name: "data_ready",
      handler: onDataReady
    }, {
      name: "data_failed",
      handler: onDataFailed
    }, {
      name: "loaded_images",
      handler: onLoadedImages
    }, {
      name: "DOMLoaded",
      handler: onDOMLoaded
    }, {
      name: "destroy",
      handler: onDestroy
    }];
    var listeners = partialListeners.filter(function(listener) {
      return listener.handler != null;
    });
    if (!listeners.length) {
      return;
    }
    var deregisterList = listeners.map(
      /**
       * Handle the process of adding an event listener
       * @param {Listener} listener
       * @return {Function} Function that deregister the listener
       */
      function(listener) {
        var _a2;
        (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.addEventListener(listener.name, listener.handler);
        return function() {
          var _a3;
          (_a3 = animationInstanceRef.current) === null || _a3 === void 0 ? void 0 : _a3.removeEventListener(listener.name, listener.handler);
        };
      }
    );
    return function() {
      deregisterList.forEach(function(deregister) {
        return deregister();
      });
    };
  }, [onComplete, onLoopComplete, onEnterFrame, onSegmentStart, onConfigReady, onDataReady, onDataFailed, onLoadedImages, onDOMLoaded, onDestroy]);
  var View = /* @__PURE__ */ React.createElement("div", _objectSpread2({
    style: style2,
    ref: animationContainer
  }, rest));
  return {
    View,
    play,
    stop: stop2,
    pause,
    setSpeed,
    goToAndStop,
    goToAndPlay,
    setDirection,
    playSegments,
    setSubframe,
    getDuration,
    destroy,
    animationContainerRef: animationContainer,
    animationLoaded,
    animationItem: animationInstanceRef.current
  };
};
function getContainerVisibility(container2) {
  var _container$getBoundin = container2.getBoundingClientRect(), top = _container$getBoundin.top, height2 = _container$getBoundin.height;
  var current = window.innerHeight - top;
  var max2 = window.innerHeight + height2;
  return current / max2;
}
function getContainerCursorPosition(container2, cursorX, cursorY) {
  var _container$getBoundin2 = container2.getBoundingClientRect(), top = _container$getBoundin2.top, left = _container$getBoundin2.left, width2 = _container$getBoundin2.width, height2 = _container$getBoundin2.height;
  var x3 = (cursorX - left) / width2;
  var y4 = (cursorY - top) / height2;
  return {
    x: x3,
    y: y4
  };
}
var useInitInteractivity = function useInitInteractivity2(_ref) {
  var wrapperRef = _ref.wrapperRef, animationItem = _ref.animationItem, mode2 = _ref.mode, actions = _ref.actions;
  reactExports.useEffect(function() {
    var wrapper = wrapperRef.current;
    if (!wrapper || !animationItem || !actions.length) {
      return;
    }
    animationItem.stop();
    var scrollModeHandler = function scrollModeHandler2() {
      var assignedSegment = null;
      var scrollHandler = function scrollHandler2() {
        var currentPercent = getContainerVisibility(wrapper);
        var action = actions.find(function(_ref2) {
          var visibility = _ref2.visibility;
          return visibility && currentPercent >= visibility[0] && currentPercent <= visibility[1];
        });
        if (!action) {
          return;
        }
        if (action.type === "seek" && action.visibility && action.frames.length === 2) {
          var frameToGo = action.frames[0] + Math.ceil((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0]) * action.frames[1]);
          //! goToAndStop must be relative to the start of the current segment
          animationItem.goToAndStop(frameToGo - animationItem.firstFrame - 1, true);
        }
        if (action.type === "loop") {
          if (assignedSegment === null) {
            animationItem.playSegments(action.frames, true);
            assignedSegment = action.frames;
          } else {
            if (assignedSegment !== action.frames) {
              animationItem.playSegments(action.frames, true);
              assignedSegment = action.frames;
            } else if (animationItem.isPaused) {
              animationItem.playSegments(action.frames, true);
              assignedSegment = action.frames;
            }
          }
        }
        if (action.type === "play" && animationItem.isPaused) {
          animationItem.resetSegments(true);
          animationItem.play();
        }
        if (action.type === "stop") {
          animationItem.goToAndStop(action.frames[0] - animationItem.firstFrame - 1, true);
        }
      };
      document.addEventListener("scroll", scrollHandler);
      return function() {
        document.removeEventListener("scroll", scrollHandler);
      };
    };
    var cursorModeHandler = function cursorModeHandler2() {
      var handleCursor = function handleCursor2(_x, _y) {
        var x3 = _x;
        var y4 = _y;
        if (x3 !== -1 && y4 !== -1) {
          var pos = getContainerCursorPosition(wrapper, x3, y4);
          x3 = pos.x;
          y4 = pos.y;
        }
        var action = actions.find(function(_ref3) {
          var position2 = _ref3.position;
          if (position2 && Array.isArray(position2.x) && Array.isArray(position2.y)) {
            return x3 >= position2.x[0] && x3 <= position2.x[1] && y4 >= position2.y[0] && y4 <= position2.y[1];
          }
          if (position2 && !Number.isNaN(position2.x) && !Number.isNaN(position2.y)) {
            return x3 === position2.x && y4 === position2.y;
          }
          return false;
        });
        if (!action) {
          return;
        }
        if (action.type === "seek" && action.position && Array.isArray(action.position.x) && Array.isArray(action.position.y) && action.frames.length === 2) {
          var xPercent = (x3 - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);
          var yPercent = (y4 - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);
          animationItem.playSegments(action.frames, true);
          animationItem.goToAndStop(Math.ceil((xPercent + yPercent) / 2 * (action.frames[1] - action.frames[0])), true);
        }
        if (action.type === "loop") {
          animationItem.playSegments(action.frames, true);
        }
        if (action.type === "play") {
          if (animationItem.isPaused) {
            animationItem.resetSegments(false);
          }
          animationItem.playSegments(action.frames);
        }
        if (action.type === "stop") {
          animationItem.goToAndStop(action.frames[0], true);
        }
      };
      var mouseMoveHandler = function mouseMoveHandler2(ev) {
        handleCursor(ev.clientX, ev.clientY);
      };
      var mouseOutHandler = function mouseOutHandler2() {
        handleCursor(-1, -1);
      };
      wrapper.addEventListener("mousemove", mouseMoveHandler);
      wrapper.addEventListener("mouseout", mouseOutHandler);
      return function() {
        wrapper.removeEventListener("mousemove", mouseMoveHandler);
        wrapper.removeEventListener("mouseout", mouseOutHandler);
      };
    };
    switch (mode2) {
      case "scroll":
        return scrollModeHandler();
      case "cursor":
        return cursorModeHandler();
    }
  }, [mode2, animationItem]);
};
var useLottieInteractivity = function useLottieInteractivity2(_ref4) {
  var actions = _ref4.actions, mode2 = _ref4.mode, lottieObj = _ref4.lottieObj;
  var animationItem = lottieObj.animationItem, View = lottieObj.View, animationContainerRef = lottieObj.animationContainerRef;
  useInitInteractivity({
    actions,
    animationItem,
    mode: mode2,
    wrapperRef: animationContainerRef
  });
  return View;
};
var _excluded = ["style", "interactivity"];
var Lottie = function Lottie2(props) {
  var _a2, _b2, _c2;
  var style2 = props.style, interactivity = props.interactivity, lottieProps = _objectWithoutProperties$3(props, _excluded);
  var _useLottie = useLottie(lottieProps, style2), View = _useLottie.View, play = _useLottie.play, stop2 = _useLottie.stop, pause = _useLottie.pause, setSpeed = _useLottie.setSpeed, goToAndStop = _useLottie.goToAndStop, goToAndPlay = _useLottie.goToAndPlay, setDirection = _useLottie.setDirection, playSegments = _useLottie.playSegments, setSubframe = _useLottie.setSubframe, getDuration = _useLottie.getDuration, destroy = _useLottie.destroy, animationContainerRef = _useLottie.animationContainerRef, animationLoaded = _useLottie.animationLoaded, animationItem = _useLottie.animationItem;
  reactExports.useEffect(function() {
    if (props.lottieRef) {
      props.lottieRef.current = {
        play,
        stop: stop2,
        pause,
        setSpeed,
        goToAndPlay,
        goToAndStop,
        setDirection,
        playSegments,
        setSubframe,
        getDuration,
        destroy,
        animationContainerRef,
        animationLoaded,
        animationItem
      };
    }
  }, [(_a2 = props.lottieRef) === null || _a2 === void 0 ? void 0 : _a2.current]);
  return useLottieInteractivity({
    lottieObj: {
      View,
      play,
      stop: stop2,
      pause,
      setSpeed,
      goToAndStop,
      goToAndPlay,
      setDirection,
      playSegments,
      setSubframe,
      getDuration,
      destroy,
      animationContainerRef,
      animationLoaded,
      animationItem
    },
    actions: (_b2 = interactivity === null || interactivity === void 0 ? void 0 : interactivity.actions) !== null && _b2 !== void 0 ? _b2 : [],
    mode: (_c2 = interactivity === null || interactivity === void 0 ? void 0 : interactivity.mode) !== null && _c2 !== void 0 ? _c2 : "scroll"
  });
};
const nm$1 = "Comp 1";
const ddd$1 = 0;
const h$1 = 200;
const w$1 = 200;
const meta$1 = {
  g: "@lottiefiles/toolkit-js 0.26.1"
};
const layers$1 = [
  {
    ty: 4,
    nm: "tick",
    sr: 1,
    st: 0,
    op: 136,
    ip: 0,
    hd: false,
    ddd: 0,
    bm: 0,
    hasMask: false,
    ao: 0,
    ks: {
      a: {
        a: 0,
        k: [
          0,
          0,
          0
        ],
        ix: 1
      },
      s: {
        a: 1,
        k: [
          {
            o: {
              x: 0.735,
              y: 0
            },
            i: {
              x: 0.91,
              y: 1
            },
            s: [
              0,
              0,
              100
            ],
            t: 0
          },
          {
            o: {
              x: 0.166,
              y: 0
            },
            i: {
              x: 0.057,
              y: 1
            },
            s: [
              85,
              85,
              100
            ],
            t: 30
          },
          {
            o: {
              x: 0.563,
              y: 0
            },
            i: {
              x: 0.773,
              y: 1
            },
            s: [
              90,
              90,
              100
            ],
            t: 38
          },
          {
            o: {
              x: 0.167,
              y: 0
            },
            i: {
              x: 0.354,
              y: 1
            },
            s: [
              83,
              83,
              100
            ],
            t: 46.125
          },
          {
            o: {
              x: 0.167,
              y: 0
            },
            i: {
              x: 0.833,
              y: 1
            },
            s: [
              85,
              85,
              100
            ],
            t: 51
          },
          {
            s: [
              85,
              85,
              100
            ],
            t: 65
          }
        ],
        ix: 6
      },
      sk: {
        a: 0,
        k: 0
      },
      p: {
        a: 0,
        k: [
          99.917,
          100.5,
          0
        ],
        ix: 2
      },
      r: {
        a: 0,
        k: 0,
        ix: 10
      },
      sa: {
        a: 0,
        k: 0
      },
      o: {
        a: 0,
        k: 100,
        ix: 11
      }
    },
    ef: [],
    shapes: [
      {
        ty: "gr",
        bm: 0,
        hd: false,
        mn: "ADBE Vector Group",
        nm: "Group 1",
        ix: 1,
        cix: 2,
        np: 2,
        it: [
          {
            ty: "sh",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Shape - Group",
            nm: "Path 1",
            ix: 1,
            d: 1,
            ks: {
              a: 0,
              k: {
                c: false,
                i: [
                  [
                    0,
                    0
                  ],
                  [
                    0,
                    0
                  ],
                  [
                    0,
                    0
                  ]
                ],
                o: [
                  [
                    0,
                    0
                  ],
                  [
                    0,
                    0
                  ],
                  [
                    0,
                    0
                  ]
                ],
                v: [
                  [
                    29.333,
                    -20.167
                  ],
                  [
                    -11,
                    20.167
                  ],
                  [
                    -29.333,
                    1.833
                  ]
                ]
              },
              ix: 2
            }
          },
          {
            ty: "st",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Graphic - Stroke",
            nm: "Stroke 1",
            lc: 2,
            lj: 2,
            ml: 1,
            o: {
              a: 0,
              k: 100,
              ix: 4
            },
            w: {
              a: 0,
              k: 11,
              ix: 5
            },
            c: {
              a: 0,
              k: [
                0.0902,
                0.098,
                0.1098
              ],
              ix: 3
            }
          },
          {
            ty: "tr",
            a: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 1
            },
            s: {
              a: 0,
              k: [
                100,
                100
              ],
              ix: 3
            },
            sk: {
              a: 0,
              k: 0,
              ix: 4
            },
            p: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 2
            },
            r: {
              a: 0,
              k: 0,
              ix: 6
            },
            sa: {
              a: 0,
              k: 0,
              ix: 5
            },
            o: {
              a: 0,
              k: 100,
              ix: 7
            }
          }
        ]
      },
      {
        ty: "tm",
        bm: 0,
        hd: false,
        mn: "ADBE Vector Filter - Trim",
        nm: "Trim Paths 1",
        ix: 2,
        e: {
          a: 0,
          k: 100,
          ix: 2
        },
        o: {
          a: 0,
          k: 0,
          ix: 3
        },
        s: {
          a: 1,
          k: [
            {
              o: {
                x: 0.235,
                y: 0
              },
              i: {
                x: 0.033,
                y: 1
              },
              s: [
                100
              ],
              t: 27
            },
            {
              s: [
                0
              ],
              t: 40
            }
          ],
          ix: 1
        },
        m: 1
      }
    ],
    ind: 1
  },
  {
    ty: 4,
    nm: "circle main",
    sr: 1,
    st: 0,
    op: 136,
    ip: 0,
    hd: false,
    ddd: 0,
    bm: 0,
    hasMask: false,
    ao: 0,
    ks: {
      a: {
        a: 0,
        k: [
          0,
          0,
          0
        ],
        ix: 1
      },
      s: {
        a: 1,
        k: [
          {
            o: {
              x: 0.735,
              y: 0
            },
            i: {
              x: 0.91,
              y: 1
            },
            s: [
              0,
              0,
              100
            ],
            t: 0
          },
          {
            o: {
              x: 0.166,
              y: 0
            },
            i: {
              x: 0.057,
              y: 1
            },
            s: [
              85,
              85,
              100
            ],
            t: 30
          },
          {
            o: {
              x: 0.563,
              y: 0
            },
            i: {
              x: 0.773,
              y: 1
            },
            s: [
              90,
              90,
              100
            ],
            t: 38
          },
          {
            o: {
              x: 0.167,
              y: 0
            },
            i: {
              x: 0.354,
              y: 1
            },
            s: [
              83,
              83,
              100
            ],
            t: 46.125
          },
          {
            o: {
              x: 0.167,
              y: 0
            },
            i: {
              x: 0.833,
              y: 1
            },
            s: [
              85,
              85,
              100
            ],
            t: 51
          },
          {
            s: [
              85,
              85,
              100
            ],
            t: 66
          }
        ],
        ix: 6
      },
      sk: {
        a: 0,
        k: 0
      },
      p: {
        a: 0,
        k: [
          99.917,
          100.5,
          0
        ],
        ix: 2
      },
      r: {
        a: 0,
        k: 0,
        ix: 10
      },
      sa: {
        a: 0,
        k: 0
      },
      o: {
        a: 0,
        k: 100,
        ix: 11
      }
    },
    ef: [],
    shapes: [
      {
        ty: "gr",
        bm: 0,
        hd: false,
        mn: "ADBE Vector Group",
        nm: "Group 1",
        ix: 1,
        cix: 2,
        np: 2,
        it: [
          {
            ty: "sh",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Shape - Group",
            nm: "Path 1",
            ix: 1,
            d: 1,
            ks: {
              a: 0,
              k: {
                c: true,
                i: [
                  [
                    0,
                    -36.819
                  ],
                  [
                    36.819,
                    0
                  ],
                  [
                    0,
                    36.819
                  ],
                  [
                    -36.819,
                    0
                  ]
                ],
                o: [
                  [
                    0,
                    36.819
                  ],
                  [
                    -36.819,
                    0
                  ],
                  [
                    0,
                    -36.819
                  ],
                  [
                    36.819,
                    0
                  ]
                ],
                v: [
                  [
                    66.667,
                    0
                  ],
                  [
                    0,
                    66.667
                  ],
                  [
                    -66.667,
                    0
                  ],
                  [
                    0,
                    -66.667
                  ]
                ]
              },
              ix: 2
            }
          },
          {
            ty: "fl",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Graphic - Fill",
            nm: "Fill 1",
            c: {
              a: 0,
              k: [
                0.3098,
                0.8902,
                0.7569
              ],
              ix: 4
            },
            r: 1,
            o: {
              a: 0,
              k: 100,
              ix: 5
            }
          },
          {
            ty: "tr",
            a: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 1
            },
            s: {
              a: 0,
              k: [
                100,
                100
              ],
              ix: 3
            },
            sk: {
              a: 0,
              k: 0,
              ix: 4
            },
            p: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 2
            },
            r: {
              a: 0,
              k: 0,
              ix: 6
            },
            sa: {
              a: 0,
              k: 0,
              ix: 5
            },
            o: {
              a: 0,
              k: 100,
              ix: 7
            }
          }
        ]
      }
    ],
    ind: 2
  },
  {
    ty: 0,
    nm: "Balls",
    sr: 1,
    st: 0,
    op: 136,
    ip: 0,
    hd: false,
    ddd: 0,
    bm: 0,
    hasMask: false,
    ao: 0,
    ks: {
      a: {
        a: 0,
        k: [
          100,
          100,
          0
        ],
        ix: 1
      },
      s: {
        a: 0,
        k: [
          100,
          100,
          100
        ],
        ix: 6
      },
      sk: {
        a: 0,
        k: 0
      },
      p: {
        a: 0,
        k: [
          100,
          100,
          0
        ],
        ix: 2
      },
      r: {
        a: 0,
        k: 0,
        ix: 10
      },
      sa: {
        a: 0,
        k: 0
      },
      o: {
        a: 0,
        k: 100,
        ix: 11
      }
    },
    ef: [],
    w: 200,
    h: 200,
    refId: "comp_0",
    ind: 3
  }
];
const v$1 = "5.8.0";
const fr$1 = 60;
const op$1 = 136;
const ip$1 = 0;
const assets$1 = [
  {
    nm: "Balls",
    id: "comp_0",
    fr: 60,
    layers: [
      {
        ty: 4,
        nm: "b1",
        sr: 1,
        st: 1,
        op: 172,
        ip: 1,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 31
              },
              {
                o: {
                  x: 0.709,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 66
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 83.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 31,
                ti: [
                  10.603,
                  -6.769,
                  0
                ],
                to: [
                  -10.603,
                  6.769,
                  0
                ]
              },
              {
                s: [
                  25.5,
                  140.5,
                  0
                ],
                t: 97
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -3.314
                      ],
                      [
                        3.314,
                        0
                      ],
                      [
                        0,
                        3.314
                      ],
                      [
                        -3.314,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        3.314
                      ],
                      [
                        -3.314,
                        0
                      ],
                      [
                        0,
                        -3.314
                      ],
                      [
                        3.314,
                        0
                      ]
                    ],
                    v: [
                      [
                        6,
                        0
                      ],
                      [
                        0,
                        6
                      ],
                      [
                        -6,
                        0
                      ],
                      [
                        0,
                        -6
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1137,
                    0.3961,
                    0.3294
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 1
      },
      {
        ty: 4,
        nm: "b2",
        sr: 1,
        st: 2,
        op: 173,
        ip: 2,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 32
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 67
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 84.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 32,
                ti: [
                  4.603,
                  -12.769,
                  0
                ],
                to: [
                  -4.603,
                  12.769,
                  0
                ]
              },
              {
                s: [
                  61.5,
                  176.5,
                  0
                ],
                t: 98
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -4.971
                      ],
                      [
                        4.971,
                        0
                      ],
                      [
                        0,
                        4.971
                      ],
                      [
                        -4.971,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        4.971
                      ],
                      [
                        -4.971,
                        0
                      ],
                      [
                        0,
                        -4.971
                      ],
                      [
                        4.971,
                        0
                      ]
                    ],
                    v: [
                      [
                        9,
                        0
                      ],
                      [
                        0,
                        9
                      ],
                      [
                        -9,
                        0
                      ],
                      [
                        0,
                        -9
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1137,
                    0.3961,
                    0.3294
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 2
      },
      {
        ty: 4,
        nm: "b3",
        sr: 1,
        st: 3,
        op: 174,
        ip: 3,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 33
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 68
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 85.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 33,
                ti: [
                  -9.231,
                  -11.269,
                  0
                ],
                to: [
                  9.231,
                  11.269,
                  0
                ]
              },
              {
                s: [
                  144.5,
                  167.5,
                  0
                ],
                t: 99
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -3.314
                      ],
                      [
                        3.314,
                        0
                      ],
                      [
                        0,
                        3.314
                      ],
                      [
                        -3.314,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        3.314
                      ],
                      [
                        -3.314,
                        0
                      ],
                      [
                        0,
                        -3.314
                      ],
                      [
                        3.314,
                        0
                      ]
                    ],
                    v: [
                      [
                        6,
                        0
                      ],
                      [
                        0,
                        6
                      ],
                      [
                        -6,
                        0
                      ],
                      [
                        0,
                        -6
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1137,
                    0.3961,
                    0.3294
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 3
      },
      {
        ty: 4,
        nm: "b4",
        sr: 1,
        st: 4,
        op: 175,
        ip: 4,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 34
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 69
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 86.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 34,
                ti: [
                  9.603,
                  7.564,
                  0
                ],
                to: [
                  -9.603,
                  -7.564,
                  0
                ]
              },
              {
                s: [
                  31.5,
                  54.5,
                  0
                ],
                t: 100
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -4.418
                      ],
                      [
                        4.418,
                        0
                      ],
                      [
                        0,
                        4.418
                      ],
                      [
                        -4.418,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        4.418
                      ],
                      [
                        -4.418,
                        0
                      ],
                      [
                        0,
                        -4.418
                      ],
                      [
                        4.418,
                        0
                      ]
                    ],
                    v: [
                      [
                        8,
                        0
                      ],
                      [
                        0,
                        8
                      ],
                      [
                        -8,
                        0
                      ],
                      [
                        0,
                        -8
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1137,
                    0.3961,
                    0.3294
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 4
      },
      {
        ty: 4,
        nm: "b5",
        sr: 1,
        st: 5,
        op: 176,
        ip: 5,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 35
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 70
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 87.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 35,
                ti: [
                  -15.064,
                  4.397,
                  0
                ],
                to: [
                  15.064,
                  -4.397,
                  0
                ]
              },
              {
                s: [
                  179.5,
                  73.5,
                  0
                ],
                t: 101
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -2.209
                      ],
                      [
                        2.209,
                        0
                      ],
                      [
                        0,
                        2.209
                      ],
                      [
                        -2.209,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        2.209
                      ],
                      [
                        -2.209,
                        0
                      ],
                      [
                        0,
                        -2.209
                      ],
                      [
                        2.209,
                        0
                      ]
                    ],
                    v: [
                      [
                        4,
                        0
                      ],
                      [
                        0,
                        4
                      ],
                      [
                        -4,
                        0
                      ],
                      [
                        0,
                        -4
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1137,
                    0.3961,
                    0.3294
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 5
      },
      {
        ty: 4,
        nm: "b6",
        sr: 1,
        st: 6,
        op: 177,
        ip: 6,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 36
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 71
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 88.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 36,
                ti: [
                  -5.564,
                  13.397,
                  0
                ],
                to: [
                  5.564,
                  -13.397,
                  0
                ]
              },
              {
                s: [
                  122.5,
                  19.5,
                  0
                ],
                t: 102
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -2.761
                      ],
                      [
                        2.761,
                        0
                      ],
                      [
                        0,
                        2.761
                      ],
                      [
                        -2.761,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        2.761
                      ],
                      [
                        -2.761,
                        0
                      ],
                      [
                        0,
                        -2.761
                      ],
                      [
                        2.761,
                        0
                      ]
                    ],
                    v: [
                      [
                        5,
                        0
                      ],
                      [
                        0,
                        5
                      ],
                      [
                        -5,
                        0
                      ],
                      [
                        0,
                        -5
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1137,
                    0.3961,
                    0.3294
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 6
      },
      {
        ty: 4,
        nm: "b7",
        sr: 1,
        st: 7,
        op: 178,
        ip: 7,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 37
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 72
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 89.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 37,
                ti: [
                  10.769,
                  12.897,
                  0
                ],
                to: [
                  -10.769,
                  -12.897,
                  0
                ]
              },
              {
                s: [
                  24.5,
                  22.5,
                  0
                ],
                t: 103
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -1.657
                      ],
                      [
                        1.657,
                        0
                      ],
                      [
                        0,
                        1.657
                      ],
                      [
                        -1.657,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        1.657
                      ],
                      [
                        -1.657,
                        0
                      ],
                      [
                        0,
                        -1.657
                      ],
                      [
                        1.657,
                        0
                      ]
                    ],
                    v: [
                      [
                        3,
                        0
                      ],
                      [
                        0,
                        3
                      ],
                      [
                        -3,
                        0
                      ],
                      [
                        0,
                        -3
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1294,
                    0.2902,
                    0.251
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 7
      },
      {
        ty: 4,
        nm: "b8",
        sr: 1,
        st: 8,
        op: 179,
        ip: 8,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 38
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 73
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 90.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 38,
                ti: [
                  11.103,
                  -13.436,
                  0
                ],
                to: [
                  -11.103,
                  13.436,
                  0
                ]
              },
              {
                s: [
                  22.5,
                  180.5,
                  0
                ],
                t: 104
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -2.209
                      ],
                      [
                        2.209,
                        0
                      ],
                      [
                        0,
                        2.209
                      ],
                      [
                        -2.209,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        2.209
                      ],
                      [
                        -2.209,
                        0
                      ],
                      [
                        0,
                        -2.209
                      ],
                      [
                        2.209,
                        0
                      ]
                    ],
                    v: [
                      [
                        4,
                        0
                      ],
                      [
                        0,
                        4
                      ],
                      [
                        -4,
                        0
                      ],
                      [
                        0,
                        -4
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1294,
                    0.2902,
                    0.251
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 8
      },
      {
        ty: 4,
        nm: "b9",
        sr: 1,
        st: 9,
        op: 180,
        ip: 9,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 39
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 74
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 91.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 39,
                ti: [
                  -3.064,
                  -14.603,
                  0
                ],
                to: [
                  3.064,
                  14.603,
                  0
                ]
              },
              {
                s: [
                  107.5,
                  187.5,
                  0
                ],
                t: 105
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -4.418
                      ],
                      [
                        4.418,
                        0
                      ],
                      [
                        0,
                        4.418
                      ],
                      [
                        -4.418,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        4.418
                      ],
                      [
                        -4.418,
                        0
                      ],
                      [
                        0,
                        -4.418
                      ],
                      [
                        4.418,
                        0
                      ]
                    ],
                    v: [
                      [
                        8,
                        0
                      ],
                      [
                        0,
                        8
                      ],
                      [
                        -8,
                        0
                      ],
                      [
                        0,
                        -8
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1294,
                    0.2902,
                    0.251
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 9
      },
      {
        ty: 4,
        nm: "b10",
        sr: 1,
        st: 10,
        op: 181,
        ip: 10,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 40
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 75
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 92.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 40,
                ti: [
                  12.603,
                  1.397,
                  0
                ],
                to: [
                  -12.603,
                  -1.397,
                  0
                ]
              },
              {
                s: [
                  13.5,
                  91.5,
                  0
                ],
                t: 106
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -4.418
                      ],
                      [
                        4.418,
                        0
                      ],
                      [
                        0,
                        4.418
                      ],
                      [
                        -4.418,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        4.418
                      ],
                      [
                        -4.418,
                        0
                      ],
                      [
                        0,
                        -4.418
                      ],
                      [
                        4.418,
                        0
                      ]
                    ],
                    v: [
                      [
                        8,
                        0
                      ],
                      [
                        0,
                        8
                      ],
                      [
                        -8,
                        0
                      ],
                      [
                        0,
                        -8
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1294,
                    0.2902,
                    0.251
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 10
      },
      {
        ty: 4,
        nm: "b11",
        sr: 1,
        st: 11,
        op: 182,
        ip: 11,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 41
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 76
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 93.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 41,
                ti: [
                  -15.064,
                  -7.436,
                  0
                ],
                to: [
                  15.064,
                  7.436,
                  0
                ]
              },
              {
                s: [
                  179.5,
                  144.5,
                  0
                ],
                t: 107
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -5.523
                      ],
                      [
                        5.523,
                        0
                      ],
                      [
                        0,
                        5.523
                      ],
                      [
                        -5.523,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        5.523
                      ],
                      [
                        -5.523,
                        0
                      ],
                      [
                        0,
                        -5.523
                      ],
                      [
                        5.523,
                        0
                      ]
                    ],
                    v: [
                      [
                        10,
                        0
                      ],
                      [
                        0,
                        10
                      ],
                      [
                        -10,
                        0
                      ],
                      [
                        0,
                        -10
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1294,
                    0.2902,
                    0.251
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 11
      },
      {
        ty: 4,
        nm: "b12",
        sr: 1,
        st: 12,
        op: 183,
        ip: 12,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 42
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 77
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 94.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 42,
                ti: [
                  1.603,
                  14.064,
                  0
                ],
                to: [
                  -1.603,
                  -14.064,
                  0
                ]
              },
              {
                s: [
                  79.5,
                  15.5,
                  0
                ],
                t: 108
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -4.971
                      ],
                      [
                        4.971,
                        0
                      ],
                      [
                        0,
                        4.971
                      ],
                      [
                        -4.971,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        4.971
                      ],
                      [
                        -4.971,
                        0
                      ],
                      [
                        0,
                        -4.971
                      ],
                      [
                        4.971,
                        0
                      ]
                    ],
                    v: [
                      [
                        9,
                        0
                      ],
                      [
                        0,
                        9
                      ],
                      [
                        -9,
                        0
                      ],
                      [
                        0,
                        -9
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1294,
                    0.2902,
                    0.251
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 12
      },
      {
        ty: 4,
        nm: "b13",
        sr: 1,
        st: 13,
        op: 184,
        ip: 13,
        hd: false,
        ddd: 0,
        bm: 0,
        hasMask: false,
        ao: 0,
        ks: {
          a: {
            a: 0,
            k: [
              0,
              0,
              0
            ],
            ix: 1
          },
          s: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.131,
                  y: 0
                },
                i: {
                  x: 0.138,
                  y: 1
                },
                s: [
                  0,
                  0,
                  100
                ],
                t: 43
              },
              {
                o: {
                  x: 0.333,
                  y: 0
                },
                i: {
                  x: 0.833,
                  y: 1
                },
                s: [
                  100,
                  100,
                  100
                ],
                t: 78
              },
              {
                s: [
                  0,
                  0,
                  100
                ],
                t: 95.5
              }
            ],
            ix: 6
          },
          sk: {
            a: 0,
            k: 0
          },
          p: {
            a: 1,
            k: [
              {
                o: {
                  x: 0.201,
                  y: 0
                },
                i: {
                  x: 0.087,
                  y: 1
                },
                s: [
                  89.115,
                  99.885,
                  0
                ],
                t: 43,
                ti: [
                  -12.897,
                  12.564,
                  0
                ],
                to: [
                  12.897,
                  -12.564,
                  0
                ]
              },
              {
                s: [
                  166.5,
                  24.5,
                  0
                ],
                t: 109
              }
            ],
            ix: 2
          },
          r: {
            a: 0,
            k: 0,
            ix: 10
          },
          sa: {
            a: 0,
            k: 0
          },
          o: {
            a: 0,
            k: 100,
            ix: 11
          }
        },
        ef: [],
        shapes: [
          {
            ty: "gr",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Group",
            nm: "Group 1",
            ix: 1,
            cix: 2,
            np: 2,
            it: [
              {
                ty: "sh",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Shape - Group",
                nm: "Path 1",
                ix: 1,
                d: 1,
                ks: {
                  a: 0,
                  k: {
                    c: true,
                    i: [
                      [
                        0,
                        -4.971
                      ],
                      [
                        4.971,
                        0
                      ],
                      [
                        0,
                        4.971
                      ],
                      [
                        -4.971,
                        0
                      ]
                    ],
                    o: [
                      [
                        0,
                        4.971
                      ],
                      [
                        -4.971,
                        0
                      ],
                      [
                        0,
                        -4.971
                      ],
                      [
                        4.971,
                        0
                      ]
                    ],
                    v: [
                      [
                        9,
                        0
                      ],
                      [
                        0,
                        9
                      ],
                      [
                        -9,
                        0
                      ],
                      [
                        0,
                        -9
                      ]
                    ]
                  },
                  ix: 2
                }
              },
              {
                ty: "fl",
                bm: 0,
                hd: false,
                mn: "ADBE Vector Graphic - Fill",
                nm: "Fill 1",
                c: {
                  a: 0,
                  k: [
                    0.1294,
                    0.2902,
                    0.251
                  ],
                  ix: 4
                },
                r: 1,
                o: {
                  a: 0,
                  k: 100,
                  ix: 5
                }
              },
              {
                ty: "tr",
                a: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 1
                },
                s: {
                  a: 0,
                  k: [
                    100,
                    100
                  ],
                  ix: 3
                },
                sk: {
                  a: 0,
                  k: 0,
                  ix: 4
                },
                p: {
                  a: 0,
                  k: [
                    0,
                    0
                  ],
                  ix: 2
                },
                r: {
                  a: 0,
                  k: 0,
                  ix: 6
                },
                sa: {
                  a: 0,
                  k: 0,
                  ix: 5
                },
                o: {
                  a: 0,
                  k: 100,
                  ix: 7
                }
              }
            ]
          }
        ],
        ind: 13
      }
    ]
  }
];
const Success = {
  nm: nm$1,
  ddd: ddd$1,
  h: h$1,
  w: w$1,
  meta: meta$1,
  layers: layers$1,
  v: v$1,
  fr: fr$1,
  op: op$1,
  ip: ip$1,
  assets: assets$1
};
const nm = "Loading-2";
const ddd = 0;
const h = 150;
const w = 300;
const meta = {
  g: "@lottiefiles/toolkit-js 0.26.1"
};
const layers = [
  {
    ty: 4,
    nm: "icon 2",
    sr: 1,
    st: 39,
    op: 79,
    ip: 39,
    hd: false,
    ddd: 0,
    bm: 0,
    hasMask: false,
    ao: 0,
    ks: {
      a: {
        a: 0,
        k: [
          53,
          53,
          0
        ],
        ix: 1
      },
      s: {
        a: 0,
        k: [
          100,
          100,
          100
        ],
        ix: 6
      },
      sk: {
        a: 0,
        k: 0
      },
      p: {
        a: 0,
        k: [
          150,
          75,
          0
        ],
        ix: 2
      },
      r: {
        a: 1,
        k: [
          {
            o: {
              x: 0.333,
              y: 0
            },
            i: {
              x: 0.667,
              y: 1
            },
            s: [
              -90
            ],
            t: 39
          },
          {
            s: [
              270
            ],
            t: 79
          }
        ],
        ix: 10
      },
      sa: {
        a: 0,
        k: 0
      },
      o: {
        a: 0,
        k: 100,
        ix: 11
      }
    },
    ef: [],
    shapes: [
      {
        ty: "gr",
        bm: 0,
        hd: false,
        mn: "ADBE Vector Group",
        nm: "Group 1",
        ix: 1,
        cix: 2,
        np: 2,
        it: [
          {
            ty: "sh",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Shape - Group",
            nm: "Path 1",
            ix: 1,
            d: 1,
            ks: {
              a: 0,
              k: {
                c: true,
                i: [
                  [
                    0,
                    -15.464
                  ],
                  [
                    15.464,
                    0
                  ],
                  [
                    0,
                    15.464
                  ],
                  [
                    -15.464,
                    0
                  ]
                ],
                o: [
                  [
                    0,
                    15.464
                  ],
                  [
                    -15.464,
                    0
                  ],
                  [
                    0,
                    -15.464
                  ],
                  [
                    15.464,
                    0
                  ]
                ],
                v: [
                  [
                    28,
                    0
                  ],
                  [
                    0,
                    28
                  ],
                  [
                    -28,
                    0
                  ],
                  [
                    0,
                    -28
                  ]
                ]
              },
              ix: 2
            }
          },
          {
            ty: "st",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Graphic - Stroke",
            nm: "Stroke 1",
            lc: 2,
            lj: 1,
            ml: 10,
            o: {
              a: 0,
              k: 100,
              ix: 4
            },
            w: {
              a: 0,
              k: 10,
              ix: 5
            },
            c: {
              a: 0,
              k: [
                0.3098,
                0.8902,
                0.7569
              ],
              ix: 3
            }
          },
          {
            ty: "tr",
            a: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 1
            },
            s: {
              a: 0,
              k: [
                100,
                100
              ],
              ix: 3
            },
            sk: {
              a: 0,
              k: 0,
              ix: 4
            },
            p: {
              a: 0,
              k: [
                53,
                53
              ],
              ix: 2
            },
            r: {
              a: 0,
              k: 0,
              ix: 6
            },
            sa: {
              a: 0,
              k: 0,
              ix: 5
            },
            o: {
              a: 0,
              k: 100,
              ix: 7
            }
          }
        ]
      },
      {
        ty: "tm",
        bm: 0,
        hd: false,
        mn: "ADBE Vector Filter - Trim",
        nm: "Trim Paths 1",
        ix: 2,
        e: {
          a: 1,
          k: [
            {
              o: {
                x: 0.333,
                y: 0
              },
              i: {
                x: 0.667,
                y: 1
              },
              s: [
                0
              ],
              t: 39
            },
            {
              s: [
                100
              ],
              t: 64
            }
          ],
          ix: 2
        },
        o: {
          a: 0,
          k: 0,
          ix: 3
        },
        s: {
          a: 1,
          k: [
            {
              o: {
                x: 0.333,
                y: 0
              },
              i: {
                x: 0.667,
                y: 1
              },
              s: [
                0
              ],
              t: 51
            },
            {
              s: [
                100
              ],
              t: 79
            }
          ],
          ix: 1
        },
        m: 1
      }
    ],
    ind: 1
  },
  {
    ty: 4,
    nm: "icon",
    sr: 1,
    st: 0,
    op: 40,
    ip: 0,
    hd: false,
    ddd: 0,
    bm: 0,
    hasMask: false,
    ao: 0,
    ks: {
      a: {
        a: 0,
        k: [
          53,
          53,
          0
        ],
        ix: 1
      },
      s: {
        a: 0,
        k: [
          100,
          100,
          100
        ],
        ix: 6
      },
      sk: {
        a: 0,
        k: 0
      },
      p: {
        a: 0,
        k: [
          150,
          75,
          0
        ],
        ix: 2
      },
      r: {
        a: 1,
        k: [
          {
            o: {
              x: 0.333,
              y: 0
            },
            i: {
              x: 0.667,
              y: 1
            },
            s: [
              -90
            ],
            t: 0
          },
          {
            s: [
              270
            ],
            t: 40
          }
        ],
        ix: 10
      },
      sa: {
        a: 0,
        k: 0
      },
      o: {
        a: 0,
        k: 100,
        ix: 11
      }
    },
    ef: [],
    shapes: [
      {
        ty: "gr",
        bm: 0,
        hd: false,
        mn: "ADBE Vector Group",
        nm: "Group 1",
        ix: 1,
        cix: 2,
        np: 2,
        it: [
          {
            ty: "sh",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Shape - Group",
            nm: "Path 1",
            ix: 1,
            d: 1,
            ks: {
              a: 0,
              k: {
                c: true,
                i: [
                  [
                    0,
                    -15.464
                  ],
                  [
                    15.464,
                    0
                  ],
                  [
                    0,
                    15.464
                  ],
                  [
                    -15.464,
                    0
                  ]
                ],
                o: [
                  [
                    0,
                    15.464
                  ],
                  [
                    -15.464,
                    0
                  ],
                  [
                    0,
                    -15.464
                  ],
                  [
                    15.464,
                    0
                  ]
                ],
                v: [
                  [
                    28,
                    0
                  ],
                  [
                    0,
                    28
                  ],
                  [
                    -28,
                    0
                  ],
                  [
                    0,
                    -28
                  ]
                ]
              },
              ix: 2
            }
          },
          {
            ty: "st",
            bm: 0,
            hd: false,
            mn: "ADBE Vector Graphic - Stroke",
            nm: "Stroke 1",
            lc: 2,
            lj: 1,
            ml: 10,
            o: {
              a: 0,
              k: 100,
              ix: 4
            },
            w: {
              a: 0,
              k: 10,
              ix: 5
            },
            c: {
              a: 0,
              k: [
                0.3098,
                0.8902,
                0.7569
              ],
              ix: 3
            }
          },
          {
            ty: "tr",
            a: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 1
            },
            s: {
              a: 0,
              k: [
                100,
                100
              ],
              ix: 3
            },
            sk: {
              a: 0,
              k: 0,
              ix: 4
            },
            p: {
              a: 0,
              k: [
                53,
                53
              ],
              ix: 2
            },
            r: {
              a: 0,
              k: 0,
              ix: 6
            },
            sa: {
              a: 0,
              k: 0,
              ix: 5
            },
            o: {
              a: 0,
              k: 100,
              ix: 7
            }
          }
        ]
      },
      {
        ty: "tm",
        bm: 0,
        hd: false,
        mn: "ADBE Vector Filter - Trim",
        nm: "Trim Paths 1",
        ix: 2,
        e: {
          a: 1,
          k: [
            {
              o: {
                x: 0.333,
                y: 0
              },
              i: {
                x: 0.667,
                y: 1
              },
              s: [
                0
              ],
              t: 0
            },
            {
              s: [
                100
              ],
              t: 25
            }
          ],
          ix: 2
        },
        o: {
          a: 0,
          k: 0,
          ix: 3
        },
        s: {
          a: 1,
          k: [
            {
              o: {
                x: 0.333,
                y: 0
              },
              i: {
                x: 0.667,
                y: 1
              },
              s: [
                0
              ],
              t: 12
            },
            {
              s: [
                100
              ],
              t: 40
            }
          ],
          ix: 1
        },
        m: 1
      }
    ],
    ind: 2
  }
];
const v = "5.5.5";
const fr = 30;
const op = 90;
const ip = 0;
const assets = [];
const Loading = {
  nm,
  ddd,
  h,
  w,
  meta,
  layers,
  v,
  fr,
  op,
  ip,
  assets
};
const TogglePasswordIcon = ({ toggle: toggle2 }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    toggle2 && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        className: "fill-black",
        width: "20",
        height: "20",
        viewBox: "0 0 20 20",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("mask", { id: "mask0_604_3898", maskUnits: "userSpaceOnUse", x: "0", y: "0", width: "20", height: "20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "20", height: "20", fill: "#D9D9D9" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_604_3898)", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M13.271 11.146L11.979 9.85399C12.0343 9.32599 11.8747 8.87133 11.5 8.48999C11.1253 8.10799 10.674 7.94466 10.146 7.99999L8.854 6.70799C9.03467 6.63866 9.22233 6.58666 9.417 6.55199C9.611 6.51733 9.80533 6.49999 10 6.49999C10.972 6.49999 11.7983 6.84033 12.479 7.52099C13.1597 8.20166 13.5 9.02799 13.5 9.99999C13.5 10.1947 13.4827 10.389 13.448 10.583C13.4133 10.7777 13.3543 10.9653 13.271 11.146ZM16.042 13.917L14.958 12.833C15.458 12.4443 15.913 12.0173 16.323 11.552C16.733 11.0867 17.0767 10.5693 17.354 9.99999C16.6733 8.59733 15.67 7.49666 14.344 6.69799C13.0173 5.89933 11.5693 5.49999 10 5.49999C9.63867 5.49999 9.28467 5.52066 8.938 5.56199C8.59067 5.60399 8.25033 5.67366 7.917 5.77099L6.708 4.56199C7.236 4.35399 7.77433 4.20833 8.323 4.12499C8.87167 4.04166 9.43067 3.99999 10 3.99999C11.986 3.99999 13.802 4.53833 15.448 5.61499C17.094 6.69099 18.278 8.15266 19 9.99999C18.6947 10.792 18.2883 11.5107 17.781 12.156C17.2743 12.802 16.6947 13.389 16.042 13.917ZM16 18.125L13.292 15.417C12.764 15.611 12.2257 15.7567 11.677 15.854C11.1283 15.9513 10.5693 16 10 16C8.014 16 6.198 15.4617 4.552 14.385C2.906 13.309 1.722 11.8473 1 9.99999C1.30533 9.20799 1.708 8.48566 2.208 7.83299C2.708 7.18033 3.29133 6.58999 3.958 6.06199L1.875 3.97899L2.938 2.91699L17.062 17.062L16 18.125ZM5.021 7.14599C4.535 7.53466 4.08367 7.96166 3.667 8.42699C3.25033 8.89233 2.91 9.41666 2.646 9.99999C3.32667 11.4027 4.33 12.5033 5.656 13.302C6.98267 14.1007 8.43067 14.5 10 14.5C10.3613 14.5 10.7153 14.4757 11.062 14.427C11.4093 14.3783 11.7567 14.3123 12.104 14.229L11.167 13.292C10.9723 13.3613 10.7777 13.4133 10.583 13.448C10.389 13.4827 10.1947 13.5 10 13.5C9.028 13.5 8.20167 13.1597 7.521 12.479C6.84033 11.7983 6.5 10.972 6.5 9.99999C6.5 9.80533 6.52433 9.61099 6.573 9.41699C6.62167 9.22233 6.66667 9.02766 6.708 8.83299L5.021 7.14599Z" }) })
        ]
      }
    ),
    !toggle2 && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        className: "fill-black",
        width: "21",
        height: "20",
        viewBox: "0 0 21 20",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("mask", { id: "mask0_1102_25545", maskUnits: "userSpaceOnUse", x: "0", y: "0", width: "21", height: "20", children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { x: "0.5", width: "20", height: "20", fill: "#D9D9D9" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1102_25545)", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10.5 13.5C11.472 13.5 12.2983 13.1597 12.979 12.479C13.6597 11.7983 14 10.972 14 10C14 9.028 13.6597 8.20167 12.979 7.521C12.2983 6.84033 11.472 6.5 10.5 6.5C9.528 6.5 8.70167 6.84033 8.021 7.521C7.34033 8.20167 7 9.028 7 10C7 10.972 7.34033 11.7983 8.021 12.479C8.70167 13.1597 9.528 13.5 10.5 13.5ZM10.5 12C9.94467 12 9.47233 11.8057 9.083 11.417C8.69433 11.0277 8.5 10.5553 8.5 10C8.5 9.44467 8.69433 8.97233 9.083 8.583C9.47233 8.19433 9.94467 8 10.5 8C11.0553 8 11.5277 8.19433 11.917 8.583C12.3057 8.97233 12.5 9.44467 12.5 10C12.5 10.5553 12.3057 11.0277 11.917 11.417C11.5277 11.8057 11.0553 12 10.5 12ZM10.5 16C8.514 16 6.70833 15.455 5.083 14.365C3.45833 13.2743 2.264 11.8193 1.5 10C2.264 8.18067 3.45833 6.72567 5.083 5.635C6.70833 4.545 8.514 4 10.5 4C12.486 4 14.2917 4.545 15.917 5.635C17.5417 6.72567 18.736 8.18067 19.5 10C18.736 11.8193 17.5417 13.2743 15.917 14.365C14.2917 15.455 12.486 16 10.5 16ZM10.5 14.5C12.0553 14.5 13.4927 14.0973 14.812 13.292C16.132 12.486 17.146 11.3887 17.854 10C17.146 8.61133 16.132 7.514 14.812 6.708C13.4927 5.90267 12.0553 5.5 10.5 5.5C8.94467 5.5 7.50733 5.90267 6.188 6.708C4.868 7.514 3.854 8.61133 3.146 10C3.854 11.3887 4.868 12.486 6.188 13.292C7.50733 14.0973 8.94467 14.5 10.5 14.5Z" }) })
        ]
      }
    )
  ] });
};
const modal = "_modal_hfuo8_2";
const styles = {
  modal,
  "modal-wrapper": "_modal-wrapper_hfuo8_8"
};
const FeatureUnavailable = ({ children, open, closeModal }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Modal$1, { open, onClose: closeModal, className: styles["modal"], children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box$1, { className: styles["modal-wrapper"], children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { children: "This feature is unavailable on the internal browser." }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: 'You can access this feature by choosing "Open in Browser" from the menu in the top right.' })
    ] }),
    children && children
  ] }) });
};
const Burn = () => {
  const formik = useFormikContext();
  const [burnData, setBurnData] = reactExports.useState(null);
  const [viewInput, setViewInput] = reactExports.useState(false);
  const [viewInfo, setViewInfo] = reactExports.useState(false);
  const handleViewBurnInfo = () => {
    setViewInfo(true);
    window.MDS.cmd("burn", (resp) => {
      if (resp.status) {
        setBurnData(resp.response);
      }
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    viewInfo && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Grid,
        {
          variant: "lg",
          title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                className: "fill-white hover:cursor-pointer",
                onClick: () => setViewInfo(false),
                xmlns: "http://www.w3.org/2000/svg",
                height: "24",
                viewBox: "0 -960 960 960",
                width: "24",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
              }
            ),
            "Burn Info"
          ] }),
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-4 mx-4 rounded bg-white bg-opacity-90 p-4 mb-4 shadow-sm h-max", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "overflow-scroll my-2 mb-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-semibold mb-6", children: "Burning Minima increases the chance that your transaction will be put into the next block. It is optional and only required when the network is busy and blocks are full. The table below shows the burn currently being set by users." }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[50px_1fr_1fr] grid-rows-1 divide-x mt-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-black w-[50px]" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-black text-white text-center truncate px-2", children: "Last 10 blocks" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-black text-white text-center truncate px-2", children: "Last 50 blocks" }) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[50px_1fr_1fr] grid-rows-1 divide-x", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "pl-2 h-[24px] text-slate-500 bg-gray-300 text-sm font-semibold", children: "Txns" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "pl-2 h-[24px] text-slate-500 bg-gray-300 text-sm font-semibold", children: "Avg" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "pl-2 h-[24px] text-slate-500 bg-gray-300 text-sm font-semibold", children: "Min" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "pl-2 h-[24px] text-slate-500 bg-gray-300 text-sm font-semibold", children: "Max" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-white text-black text-center grid grid-cols-1 grid-rows-1", children: burnData && burnData["10block"].txns }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-white text-black text-center grid grid-cols-1 grid-rows-1", children: burnData && burnData["10block"].avg }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-white text-black text-center grid grid-cols-1 grid-rows-1", children: burnData && burnData["10block"].min }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-white text-black text-center grid grid-cols-1 grid-rows-1", children: burnData && burnData["10block"].max })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-white text-black text-center", children: burnData && burnData["50block"].txns }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-white text-black text-center", children: burnData && burnData["50block"].avg }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-white text-black text-center", children: burnData && burnData["50block"].min }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "bg-white text-black text-center", children: burnData && burnData["50block"].max })
              ] })
            ] })
          ] }) })
        }
      ) }),
      document.body
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-end gap-1 mr-1", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "label",
          {
            htmlFor: "checked-checkbox",
            className: "text-sm font-semibold text-gray-900 dark:text-gray-300 flex justify-end",
            children: [
              "Add burn",
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "fill-orange-600",
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "16.5",
                  viewBox: "0 -960 960 960",
                  width: "16.5",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M240-400q0 52 21 98.5t60 81.5q-1-5-1-9v-9q0-32 12-60t35-51l113-111 113 111q23 23 35 51t12 60v9q0 4-1 9 39-35 60-81.5t21-98.5q0-50-18.5-94.5T648-574q-20 13-42 19.5t-45 6.5q-62 0-107.5-41T401-690q-39 33-69 68.5t-50.5 72Q261-513 250.5-475T240-400Zm240 52-57 56q-11 11-17 25t-6 29q0 32 23.5 55t56.5 23q33 0 56.5-23t23.5-55q0-16-6-29.5T537-292l-57-56Zm0-492v132q0 34 23.5 57t57.5 23q18 0 33.5-7.5T622-658l18-22q74 42 117 117t43 163q0 134-93 227T480-80q-134 0-227-93t-93-227q0-129 86.5-245T480-840Z" })
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            id: "checked-checkbox",
            type: "checkbox",
            onChange: (e3) => {
              setViewInput(e3.currentTarget.checked);
            },
            className: "w-4 h-4 text-blue-600 bg-white border-gray-300 rounded"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            onClick: handleViewBurnInfo,
            xmlns: "http://www.w3.org/2000/svg",
            className: "fill-black hover:cursor-pointer hover:scale-110",
            height: "20",
            viewBox: "0 -960 960 960",
            width: "20",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M440-280h80v-240h-80v240Zm40-320q17 0 28.5-11.5T520-640q0-17-11.5-28.5T480-680q-17 0-28.5 11.5T440-640q0 17 11.5 28.5T480-600Zm0 520q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
          }
        )
      ] }),
      viewInput && /* @__PURE__ */ jsxRuntimeExports.jsx(
        Input,
        {
          id: "burn",
          type: "text",
          disabled: formik.isSubmitting,
          placeholder: "Burn",
          ...formik.getFieldProps("burn"),
          error: formik.touched.burn && formik.errors.burn ? formik.errors.burn : false
        }
      )
    ] })
  ] });
};
const ValueTransfer = () => {
  const { balance: wallet, loaded } = reactExports.useContext(appContext);
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const mySchema = useFormSchema$2();
  const [openQrScanner, setOpenQrScanner] = React.useState(false);
  const userLockedVault = useIsVaultLocked();
  const [internalBrowserWarningModal, setInternalBrowserWarningModal] = reactExports.useState(false);
  const [canUseWebcam, setCanUseWebcam] = reactExports.useState(true);
  const [hidePassword, togglePasswordVisibility] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(0);
  const handleCloseQrScanner = () => {
    setOpenQrScanner(false);
  };
  const handleOpenQrScanner = () => {
    setOpenQrScanner(true);
  };
  reactExports.useEffect(() => {
    if (window.navigator.userAgent.includes("Minima Browser")) {
      setCanUseWebcam(false);
    }
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Formik,
    {
      initialValues: { token: wallet[0], amount: "", address: "", burn: "", password: "", message: "" },
      onSubmit: async (formInputs) => {
        setStep(0);
        setLoading(true);
        if (!formInputs.password.length && userLockedVault) {
          setLoading(false);
          return setStep(5);
        }
        try {
          const resp = await callSend(
            formInputs.token,
            formInputs.amount,
            formInputs.address,
            encode(formInputs.message),
            formInputs.burn,
            formInputs.password
          );
          setLoading(false);
          setStep(resp);
        } catch (error2) {
          setLoading(false);
          setError(error2);
        }
      },
      validationSchema: mySchema,
      enableReinitialize: !!loaded.current,
      children: ({
        handleSubmit,
        getFieldProps,
        errors,
        isValid: isValid2,
        isSubmitting,
        submitForm,
        values: values2,
        resetForm,
        touched,
        setFieldValue
      }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          FeatureUnavailable,
          {
            open: internalBrowserWarningModal,
            closeModal: () => setInternalBrowserWarningModal(false)
          }
        ),
        step === 1 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "lg", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 h-max max-h-[calc(100%_-_16px)] overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold mb-8", children: "Transaction review" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "divide-y-2 mb-8", children: [
              values2.token.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyValue,
                {
                  title: "Token",
                  value: values2.token.token.name ? values2.token.token.name : "N/A"
                }
              ),
              values2.token.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Token", value: "Minima" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Recipient address", value: values2.address }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyValue,
                {
                  title: "Amount",
                  value: makeMinimaNumber(values2.amount, 2e3)
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyValue,
                {
                  title: "Burn",
                  value: parseInt(values2.burn) > 0 ? makeMinimaNumber(values2.burn, 2e3) : "0"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyValue,
                {
                  title: "Public message",
                  value: values2.message.length > 0 ? values2.message : "N/A"
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mt-8 md:mt-16", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  disabled: isSubmitting,
                  onClick: () => submitForm(),
                  variant: "primary",
                  children: "Submit"
                }
              ),
              !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(0), variant: "secondary", children: "Cancel" })
            ] })
          ] }) }) }),
          document.body
        ),
        loading && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Lottie,
                {
                  className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                  animationData: Loading,
                  loop: true
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Posting transaction..." })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
          ] }) }) }),
          document.body
        ),
        step === 2 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Lottie,
                {
                  className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                  animationData: Success,
                  loop: false
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Success" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "The transaction has been posted and should arrive shortly." })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setStep(0);
                  resetForm();
                },
                variant: "secondary",
                children: "Close"
              }
            ) })
          ] }) }) }),
          document.body
        ),
        step === 3 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "animate-pulse temporary-pulse fill-[rgb(78,227,193)] mb-4 mx-auto mt-8",
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "64",
                  viewBox: "0 -960 960 960",
                  width: "64",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M160-200v-80h80v-280q0-83 50-147.5T420-792v-28q0-25 17.5-42.5T480-880q25 0 42.5 17.5T540-820v28q80 20 130 84.5T720-560v280h80v80H160Zm320-300Zm0 420q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-280h320v-280q0-66-47-113t-113-47q-66 0-113 47t-47 113v280Z" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Transaction pending" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "The transaction is awaiting confirmation. You have to accept this pending action in the Pending minidapp." })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setStep(0);
                  resetForm();
                },
                variant: "secondary",
                children: "Close"
              }
            ) })
          ] }) }) }),
          document.body
        ),
        step === 5 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 h-max overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold mb-8", children: "Enter vault password" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "divide-y-2 mb-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Input,
              {
                id: "password",
                autoComplete: "new-password",
                disabled: isSubmitting,
                ...getFieldProps("password"),
                type: !hidePassword ? "password" : "text",
                placeholder: "Enter password",
                error: touched.password && errors.password ? errors.password : false,
                endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hidePassword }),
                handleEndIconClick: () => togglePasswordVisibility((prevState) => !prevState),
                extraClass: "pr-16 truncate"
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mt-8 md:mt-16", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  disabled: isSubmitting,
                  onClick: () => {
                    submitForm();
                  },
                  variant: "primary",
                  children: "Submit"
                }
              ),
              !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(0), variant: "secondary", children: "Cancel" })
            ] })
          ] }) }) }),
          document.body
        ),
        error && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "animate-pulse temporary-pulse fill-[var(--status-red)] mb-4\n                                                mx-auto mt-8",
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "64",
                  viewBox: "0 -960 960 960",
                  width: "64",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M480-280q17 0 28.5-11.5T520-320q0-17-11.5-28.5T480-360q-17 0-28.5 11.5T440-320q0 17 11.5 28.5T480-280Zm-40-160h80v-240h-80v240Zm40 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Hmm... something went wrong!" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center break-all", children: error })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setError(false);
                  if (values2.password.length) {
                    setFieldValue("password", "");
                  }
                },
                variant: "secondary",
                children: "Cancel"
              }
            ) })
          ] }) }) }),
          document.body
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(QrScanner, { closeModal: handleCloseQrScanner, open: openQrScanner }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("form", { onSubmit: handleSubmit, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(WalletSelect, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-4 mt-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Input,
              {
                id: "address",
                type: "text",
                disabled: isSubmitting,
                placeholder: "Recipient Mx Address",
                ...getFieldProps("address"),
                error: touched.address && errors.address ? errors.address : false,
                extraClass: "pr-12 truncate",
                endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: canUseWebcam && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "svg",
                  {
                    className: "fill-gray-500 hover:cursor-pointer hover:animate-pulse",
                    onClick: handleOpenQrScanner,
                    xmlns: "http://www.w3.org/2000/svg",
                    height: "24",
                    viewBox: "0 -960 960 960",
                    width: "24",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M40-120v-200h80v120h120v80H40Zm680 0v-80h120v-120h80v200H720ZM160-240v-480h80v480h-80Zm120 0v-480h40v480h-40Zm120 0v-480h80v480h-80Zm120 0v-480h120v480H520Zm160 0v-480h40v480h-40Zm80 0v-480h40v480h-40ZM40-640v-200h200v80H120v120H40Zm800 0v-120H720v-80h200v200h-80Z" })
                  }
                ) })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Input,
              {
                id: "amount",
                type: "text",
                disabled: isSubmitting,
                placeholder: "Amount",
                ...getFieldProps("amount"),
                error: touched.amount && errors.amount ? errors.amount : false
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Input,
              {
                id: "message",
                type: "text",
                disabled: isSubmitting,
                placeholder: "Message",
                ...getFieldProps("message"),
                error: touched.message && errors.message ? errors.message : false
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Burn, {})
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              extraClass: "mt-8 md:mt-16",
              onClick: () => setStep(1),
              variant: "primary",
              disabled: !isValid2,
              children: "Review"
            }
          )
        ] }) })
      ] })
    }
  ) });
};
const useFormSchema$2 = () => {
  const { balance: wallet } = reactExports.useContext(appContext);
  return create().shape({
    token: create().required("Field Required").test("check-my-tokensendable", "Invalid token sendable", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return false;
      }
      if (new Decimal(val2.sendable).equals(new Decimal(0))) {
        return createError({
          path,
          message: "Insufficient funds, not enough funds available to send"
        });
      }
      return true;
    }),
    address: create$1().matches(/0|M[xX][0-9a-zA-Z]+/, "Invalid Address.").min(59, "Invalid Address, too short.").max(66, "Invalid Address, too long.").required("Field Required"),
    amount: create$1().required("Field Required").matches(
      /^[^a-zA-Z\\;'",]+$/,
      'Invalid number.  Make sure to use only digits, "." for decimals and nothing for thousands. (e.g 1000.234)'
    ).test("check-my-amount", "Invalid amount", function(val2) {
      const { path, createError, parent: parent2 } = this;
      if (val2 === void 0) {
        return false;
      }
      if (!Number(val2)) {
        return createError({
          path,
          message: 'Invalid number.  Make sure to only use "." for decimals and nothing for thousands.'
        });
      }
      if (parent2.token && "sendable" in parent2.token && new Decimal(val2).greaterThan(new Decimal(parent2.token.sendable))) {
        const desiredAmountToSend = new Decimal(val2);
        const available = new Decimal(parent2.token.sendable);
        const requiredAnother = desiredAmountToSend.minus(available);
        return createError({
          path,
          message: "Oops, insufficient funds, you require another ".concat(requiredAnother.toNumber(), " ").concat(parent2.tokenid === "0x00" ? parent2.token : parent2.token.token.name ? parent2.token.token.name : "Unavailable")
        });
      }
      if (new Decimal(val2).lessThanOrEqualTo(new Decimal(0))) {
        return createError({
          path,
          message: "Oops, you haven't entered a valid amount to send"
        });
      }
      return true;
    }),
    burn: create$1().matches(
      /^[^a-zA-Z\\;'",]+$/,
      'Invalid number.  Make sure to use only digits, "." for decimals and nothing for thousands. (e.g 1000.234)'
    ).test("check-my-burnamount", "Invalid burn amount", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return true;
      }
      if (!Number(val2)) {
        return createError({
          path,
          message: 'Invalid number.  Make sure to only use "." for decimals and nothing for thousands.'
        });
      }
      const burn = new Decimal(val2);
      if (burn.greaterThan(wallet[0].sendable)) {
        return createError({
          path,
          message: "Oops, not enough funds available to burn.  You require another ".concat(burn.minus(wallet[0].sendable).toNumber(), " Minima")
        });
      }
      return true;
    })
  });
};
const splitCoin = (tokenid, sendable, burn, password) => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("getaddress", (resp) => {
      if (resp.status) {
        const mxAddress = resp.response.miniaddress;
        const hasBurn = burn && burn.length ? burn : false;
        const hasPassword = password && password.length ? password : false;
        const amountMinusBurn = hasBurn && tokenid === "0x00" ? new Decimal(sendable).minus(burn).toString() : sendable;
        window.MDS.cmd(
          "send address:".concat(mxAddress, " tokenid:").concat(tokenid, " amount:").concat(amountMinusBurn, " split:").concat(10, " ").concat(hasBurn ? "burn:" + burn : "", " ").concat(hasPassword ? "password:" + hasPassword : ""),
          (resp2) => {
            if (!resp2.status && !resp2.pending)
              reject(
                resp2.error ? resp2.error : resp2.message ? resp2.message : "Sending failed, please try again later"
              );
            if (!resp2.status && resp2.pending)
              resolve2(3);
            if (resp2.status)
              resolve2(2);
          }
        );
      }
    });
  });
};
const CoinSplit = () => {
  const mySchema = useFormSchema$1();
  const { balance: wallet } = reactExports.useContext(appContext);
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const userLockedVault = useIsVaultLocked();
  const [hidePassword, togglePasswordVisibility] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(0);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Formik,
    {
      initialValues: { token: wallet[0], burn: "", password: "", coinSplit: true },
      onSubmit: async (formInputs) => {
        setStep(0);
        setLoading(true);
        if (!formInputs.password.length && userLockedVault) {
          setLoading(false);
          return setStep(5);
        }
        try {
          const resp = await splitCoin(
            formInputs.token.tokenid,
            formInputs.token.sendable,
            formInputs.burn,
            formInputs.password
          );
          setLoading(false);
          setStep(resp);
        } catch (error2) {
          setLoading(false);
          setError(error2);
        }
      },
      validationSchema: mySchema,
      children: ({
        handleSubmit,
        getFieldProps,
        errors,
        isValid: isValid2,
        isSubmitting,
        submitForm,
        setFieldValue,
        values: values2,
        resetForm,
        touched,
        dirty
      }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        step === 1 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "lg", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 h-max max-h-[calc(100%_-_16px)] overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold mb-8", children: "Transaction review" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "divide-y-2 mb-8", children: [
              values2.token.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyValue,
                {
                  title: "Token",
                  value: values2.token.token.name ? values2.token.token.name : "N/A"
                }
              ),
              values2.token.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Token", value: "Minima" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Total coins", value: values2.token.coins }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Split amount", value: "10" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyValue,
                {
                  title: "Total coins after split",
                  value: parseInt(values2.token.coins) + 10 + ""
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyValue,
                {
                  title: "Burn",
                  value: parseInt(values2.burn) > 0 ? makeMinimaNumber(values2.burn, 2e3) : "0"
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  disabled: isSubmitting,
                  onClick: () => submitForm(),
                  variant: "primary",
                  children: "Submit"
                }
              ),
              !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(0), variant: "secondary", children: "Cancel" })
            ] })
          ] }) }) }),
          document.body
        ),
        loading && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Lottie,
                {
                  className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                  animationData: Loading,
                  loop: true
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Posting transaction..." })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
          ] }) }) }),
          document.body
        ),
        step === 2 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max  overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Lottie,
                {
                  className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                  animationData: Success,
                  loop: false
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Success" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-black text-center mb-2", children: [
                "The transaction has been posted and should arrive shortly. Check",
                " ",
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-bold", children: "coins" }),
                " property of your token."
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Logs, {})
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setStep(0);
                  resetForm();
                },
                variant: "secondary",
                children: "Close"
              }
            ) })
          ] }) }) }),
          document.body
        ),
        step === 3 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "animate-pulse temporary-pulse fill-[rgb(78,227,193)] mb-4 mx-auto mt-8",
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "64",
                  viewBox: "0 -960 960 960",
                  width: "64",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M160-200v-80h80v-280q0-83 50-147.5T420-792v-28q0-25 17.5-42.5T480-880q25 0 42.5 17.5T540-820v28q80 20 130 84.5T720-560v280h80v80H160Zm320-300Zm0 420q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-280h320v-280q0-66-47-113t-113-47q-66 0-113 47t-47 113v280Z" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Transaction pending" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "The transaction is awaiting confirmation. You have to accept this pending action in the Pending minidapp." })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setStep(0);
                  resetForm();
                },
                variant: "secondary",
                children: "Close"
              }
            ) })
          ] }) }) }),
          document.body
        ),
        step === 5 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 h-max overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold mb-8", children: "Enter vault password" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "divide-y-2 mb-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Input,
              {
                id: "password",
                autoComplete: "new-password",
                disabled: isSubmitting,
                ...getFieldProps("password"),
                type: !hidePassword ? "password" : "text",
                placeholder: "Enter password",
                error: touched.password && errors.password ? errors.password : false,
                endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hidePassword }),
                handleEndIconClick: () => togglePasswordVisibility((prevState) => !prevState),
                extraClass: "pr-16 truncate"
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mt-8 md:mt-16", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  disabled: isSubmitting,
                  onClick: () => {
                    submitForm();
                  },
                  variant: "primary",
                  children: "Submit"
                }
              ),
              !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(0), variant: "secondary", children: "Cancel" })
            ] })
          ] }) }) }),
          document.body
        ),
        error && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center grid grid-cols-1 grid-rows-[1fr_1fr] h-max", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "animate-pulse temporary-pulse fill-[var(--status-red)] mb-4\n                                                mx-auto mt-8",
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "64",
                  viewBox: "0 -960 960 960",
                  width: "64",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M480-280q17 0 28.5-11.5T520-320q0-17-11.5-28.5T480-360q-17 0-28.5 11.5T440-320q0 17 11.5 28.5T480-280Zm-40-160h80v-240h-80v240Zm40 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Hmm... something went wrong!" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center break-all", children: error }),
              error.includes("size too large") && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-black text-center mt-4", children: [
                "Why don't you try to ",
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-bold", children: "consolidate" }),
                " ",
                "some coins to squash them back together and then try to split more."
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-4 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setError(false);
                  if (values2.password.length) {
                    setFieldValue("password", "");
                  }
                },
                variant: "secondary",
                children: "Cancel"
              }
            ) })
          ] }) }) }),
          document.body
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("form", { onSubmit: handleSubmit, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-black text-sm mb-1", children: [
            "Splitting your coins allows you to have more UTXOs which means less waiting time in between transactions. Learn more about transactions on Minima on our",
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                className: "font-semibold",
                href: "https://docs.minima.global/docs/learn/minima/coreconcepts#utxo-model",
                target: "_blank",
                children: "docs."
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(WalletSelect, {}),
          errors.token && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "red-bad text-sm", children: errors.token }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Burn, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              extraClass: "mt-8 md:mt-16",
              onClick: () => setStep(1),
              variant: "primary",
              disabled: !isValid2,
              children: "Review"
            }
          )
        ] }) })
      ] })
    }
  );
};
const useFormSchema$1 = () => {
  const { balance: wallet } = reactExports.useContext(appContext);
  return create().shape({
    token: create().required("Field Required").test("check-my-tokensendable", "Invalid token sendable", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return false;
      }
      if (new Decimal(val2.sendable).lessThanOrEqualTo(new Decimal(0))) {
        return createError({
          path,
          message: "Oops, not enough funds available to perform a split"
        });
      }
      return true;
    }),
    burn: create$1().matches(/^[^a-zA-Z\\;'"]+$/, "Invalid characters").test("check-my-burnamount", "Invalid burn amount", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return true;
      }
      try {
        const burn = new Decimal(val2);
        if (burn.greaterThan(wallet[0].sendable)) {
          return createError({
            path,
            message: "Oops, not enough funds available to burn.  You require another ".concat(burn.minus(wallet[0].sendable).toNumber(), " Minima")
          });
        }
      } catch (err) {
        console.error(err);
        return createError({
          path,
          message: "Invalid characters"
        });
      }
      return true;
    })
  });
};
const Consolidate = () => {
  const mySchema = useFormSchema();
  const { balance: wallet } = reactExports.useContext(appContext);
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const userLockedVault = useIsVaultLocked();
  const [hidePassword, togglePasswordVisibility] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(0);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Formik,
    {
      initialValues: { token: wallet[0], burn: "", password: "", coinSplit: true },
      onSubmit: async (formInputs) => {
        setStep(0);
        setLoading(true);
        if (!formInputs.password.length && userLockedVault) {
          setLoading(false);
          return setStep(5);
        }
        try {
          const resp = await consolidate(formInputs.token.tokenid, formInputs.burn, formInputs.password);
          setLoading(false);
          setStep(resp);
        } catch (error2) {
          setLoading(false);
          setError(error2);
        }
      },
      validationSchema: mySchema,
      children: ({
        handleSubmit,
        getFieldProps,
        errors,
        isValid: isValid2,
        isSubmitting,
        submitForm,
        setFieldValue,
        values: values2,
        resetForm,
        touched,
        dirty
      }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        step === 1 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "lg", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 h-max max-h-[calc(100%_-_16px)] overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold mb-8", children: "Transaction review" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "divide-y-2 mb-8", children: [
              values2.token.tokenid !== "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyValue,
                {
                  title: "Token",
                  value: values2.token.token.name ? values2.token.token.name : "N/A"
                }
              ),
              values2.token.tokenid === "0x00" && /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Token", value: "Minima" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Total coins", value: values2.token.coins }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                KeyValue,
                {
                  title: "Burn",
                  value: parseInt(values2.burn) > 0 ? makeMinimaNumber(values2.burn, 2e3) : "0"
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  disabled: isSubmitting,
                  onClick: () => submitForm(),
                  variant: "primary",
                  children: "Submit"
                }
              ),
              !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(0), variant: "secondary", children: "Cancel" })
            ] })
          ] }) }) }),
          document.body
        ),
        loading && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max  overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Lottie,
                {
                  className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                  animationData: Loading,
                  loop: true
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Posting transaction..." })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
          ] }) }) }),
          document.body
        ),
        step === 2 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max  overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Lottie,
                {
                  className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                  animationData: Success,
                  loop: false
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Success" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center mb-2", children: "The transaction has been posted and should arrive shortly." }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Logs, {})
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setStep(0);
                  resetForm();
                },
                variant: "secondary",
                children: "Cancel"
              }
            ) })
          ] }) }) }),
          document.body
        ),
        step === 3 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max  overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "animate-pulse temporary-pulse fill-[rgb(78,227,193)] mb-4 mx-auto mt-8",
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "64",
                  viewBox: "0 -960 960 960",
                  width: "64",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M160-200v-80h80v-280q0-83 50-147.5T420-792v-28q0-25 17.5-42.5T480-880q25 0 42.5 17.5T540-820v28q80 20 130 84.5T720-560v280h80v80H160Zm320-300Zm0 420q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-280h320v-280q0-66-47-113t-113-47q-66 0-113 47t-47 113v280Z" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Transaction pending" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "The transaction is awaiting confirmation. You have to accept this pending action in the Pending minidapp." })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setStep(0);
                  resetForm();
                },
                variant: "secondary",
                children: "Close"
              }
            ) })
          ] }) }) }),
          document.body
        ),
        step === 5 && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 h-max overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold mb-8", children: "Enter vault password" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "divide-y-2 mb-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Input,
              {
                id: "password",
                autoComplete: "new-password",
                disabled: isSubmitting,
                ...getFieldProps("password"),
                type: !hidePassword ? "password" : "text",
                placeholder: "Enter password",
                error: touched.password && errors.password ? errors.password : false,
                endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hidePassword }),
                handleEndIconClick: () => togglePasswordVisibility((prevState) => !prevState),
                extraClass: "pr-16 truncate"
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mt-8 md:mt-16", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  disabled: isSubmitting,
                  onClick: () => {
                    submitForm();
                  },
                  variant: "primary",
                  children: "Submit"
                }
              ),
              !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(0), variant: "secondary", children: "Cancel" })
            ] })
          ] }) }) }),
          document.body
        ),
        error && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center grid grid-cols-1 grid-rows-[1fr_1fr] h-max", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "animate-pulse temporary-pulse fill-[var(--status-red)] mb-4\n                                                mx-auto mt-8",
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "64",
                  viewBox: "0 -960 960 960",
                  width: "64",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M480-280q17 0 28.5-11.5T520-320q0-17-11.5-28.5T480-360q-17 0-28.5 11.5T440-320q0 17 11.5 28.5T480-280Zm-40-160h80v-240h-80v240Zm40 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Hmm... something went wrong!" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center break-all", children: error })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-4 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setError(false);
                  if (values2.password.length) {
                    setFieldValue("password", "");
                  }
                },
                variant: "secondary",
                children: "Cancel"
              }
            ) })
          ] }) }) }),
          document.body
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("form", { onSubmit: handleSubmit, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-black text-sm mb-1", children: [
            "Consolidating your coins allows you to squash coins together to have less coins lying around. Learn more on our",
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                className: "font-semibold",
                href: "https://docs.minima.global/docs/learn/minima/coreconcepts#utxo-model",
                target: "_blank",
                children: "docs."
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(WalletSelect, {}),
          errors.token && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "red-bad text-sm", children: errors.token }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Burn, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              extraClass: "mt-8 md:mt-16",
              onClick: () => setStep(1),
              variant: "primary",
              disabled: !isValid2,
              children: "Review"
            }
          )
        ] }) })
      ] })
    }
  );
};
const useFormSchema = () => {
  const { balance: wallet } = reactExports.useContext(appContext);
  return create().shape({
    token: create().required("Field Required").test("check-my-tokensendable", "Invalid token sendable", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return false;
      }
      if (new Decimal(val2.sendable).lessThanOrEqualTo(new Decimal(0))) {
        return createError({
          path,
          message: "Oops, not enough funds available to perform a consolidate"
        });
      }
      return true;
    }),
    burn: create$1().matches(/^[^a-zA-Z\\;'"]+$/, "Invalid characters").test("check-my-burnamount", "Invalid burn amount", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return true;
      }
      try {
        const burn = new Decimal(val2);
        if (burn.greaterThan(wallet[0].sendable)) {
          return createError({
            path,
            message: "Oops, not enough funds available to burn.  You require another ".concat(burn.minus(wallet[0].sendable).toNumber(), " Minima")
          });
        }
      } catch (err) {
        console.error(err);
        return createError({
          path,
          message: "Invalid characters"
        });
      }
      return true;
    })
  });
};
const Select = ({ current, setCurrent, def, options }) => {
  const [toggle2, setToggle] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (def) {
      setCurrent(def);
    }
  }, [def]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: "bg-white p-4 text-black font-light rounded flex justify-between items-center",
        onClick: () => setToggle((prevState) => !prevState),
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { children: current !== null ? current : "Select option" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "svg",
            {
              className: "my-auto fill-gray-500 ".concat(toggle2 ? "arrow-active" : ""),
              width: "32",
              height: "33",
              viewBox: "0 0 32 33",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("mask", { id: "mask0_2226_53255", maskUnits: "userSpaceOnUse", x: "0", y: "0", width: "32", height: "33", children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { y: "0.550781", width: "32", height: "32", fill: "#D9D9D9" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_2226_53255)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M16.0004 20.6172L8.4668 13.0508L9.6668 11.8844L16.0004 18.2172L22.334 11.8844L23.534 13.0844L16.0004 20.6172Z",
                    fill: "#08090B"
                  }
                ) })
              ]
            }
          )
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { "aria-expanded": !toggle2, className: "accordion-content bg-white", children: options && options.map((o2) => /* @__PURE__ */ jsxRuntimeExports.jsx(
      "li",
      {
        className: "hover:bg-slate-100 p-4 ".concat(o2 === current ? "bg-slate-100" : ""),
        onClick: () => {
          setCurrent(o2);
          setToggle(false);
        },
        children: o2
      },
      Math.random()
    )) })
  ] });
};
const Send = () => {
  const { setOpenDrawer, getBalance, loaded } = reactExports.useContext(appContext);
  const [current, setCurrent] = reactExports.useState("Value transfer");
  reactExports.useEffect(() => {
    if (loaded.current === true) {
      getBalance();
    }
  }, [loaded, loaded.current]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Grid,
    {
      variant: "lg",
      title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            onClick: (e3) => {
              e3.stopPropagation();
              setOpenDrawer(true);
            },
            className: "block md:hidden fill-white",
            xmlns: "http://www.w3.org/2000/svg",
            height: "24",
            viewBox: "0 -960 960 960",
            width: "24",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" })
          }
        ),
        "Send"
      ] }),
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        CardContent,
        {
          header: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Select,
            {
              def: "Value transfer",
              options: ["Value transfer", "Split coins", "Consolidate"],
              setCurrent,
              current
            }
          ),
          content: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            current === "Value transfer" && /* @__PURE__ */ jsxRuntimeExports.jsx(ValueTransfer, {}),
            current === "Split coins" && /* @__PURE__ */ jsxRuntimeExports.jsx(CoinSplit, {}),
            current === "Consolidate" && /* @__PURE__ */ jsxRuntimeExports.jsx(Consolidate, {})
          ] })
        }
      )
    }
  );
};
var lib = {};
var mode$1 = {
  MODE_NUMBER: 1 << 0,
  MODE_ALPHA_NUM: 1 << 1,
  MODE_8BIT_BYTE: 1 << 2,
  MODE_KANJI: 1 << 3
};
var mode = mode$1;
function QR8bitByte(data2) {
  this.mode = mode.MODE_8BIT_BYTE;
  this.data = data2;
}
QR8bitByte.prototype = {
  getLength: function(buffer) {
    return this.data.length;
  },
  write: function(buffer) {
    for (var i3 = 0; i3 < this.data.length; i3++) {
      buffer.put(this.data.charCodeAt(i3), 8);
    }
  }
};
var _8BitByte = QR8bitByte;
var ErrorCorrectLevel = {
  L: 1,
  M: 0,
  Q: 3,
  H: 2
};
var ECL = ErrorCorrectLevel;
function QRRSBlock(totalCount, dataCount) {
  this.totalCount = totalCount;
  this.dataCount = dataCount;
}
QRRSBlock.RS_BLOCK_TABLE = [
  // L
  // M
  // Q
  // H
  // 1
  [1, 26, 19],
  [1, 26, 16],
  [1, 26, 13],
  [1, 26, 9],
  // 2
  [1, 44, 34],
  [1, 44, 28],
  [1, 44, 22],
  [1, 44, 16],
  // 3
  [1, 70, 55],
  [1, 70, 44],
  [2, 35, 17],
  [2, 35, 13],
  // 4		
  [1, 100, 80],
  [2, 50, 32],
  [2, 50, 24],
  [4, 25, 9],
  // 5
  [1, 134, 108],
  [2, 67, 43],
  [2, 33, 15, 2, 34, 16],
  [2, 33, 11, 2, 34, 12],
  // 6
  [2, 86, 68],
  [4, 43, 27],
  [4, 43, 19],
  [4, 43, 15],
  // 7		
  [2, 98, 78],
  [4, 49, 31],
  [2, 32, 14, 4, 33, 15],
  [4, 39, 13, 1, 40, 14],
  // 8
  [2, 121, 97],
  [2, 60, 38, 2, 61, 39],
  [4, 40, 18, 2, 41, 19],
  [4, 40, 14, 2, 41, 15],
  // 9
  [2, 146, 116],
  [3, 58, 36, 2, 59, 37],
  [4, 36, 16, 4, 37, 17],
  [4, 36, 12, 4, 37, 13],
  // 10		
  [2, 86, 68, 2, 87, 69],
  [4, 69, 43, 1, 70, 44],
  [6, 43, 19, 2, 44, 20],
  [6, 43, 15, 2, 44, 16],
  // 11
  [4, 101, 81],
  [1, 80, 50, 4, 81, 51],
  [4, 50, 22, 4, 51, 23],
  [3, 36, 12, 8, 37, 13],
  // 12
  [2, 116, 92, 2, 117, 93],
  [6, 58, 36, 2, 59, 37],
  [4, 46, 20, 6, 47, 21],
  [7, 42, 14, 4, 43, 15],
  // 13
  [4, 133, 107],
  [8, 59, 37, 1, 60, 38],
  [8, 44, 20, 4, 45, 21],
  [12, 33, 11, 4, 34, 12],
  // 14
  [3, 145, 115, 1, 146, 116],
  [4, 64, 40, 5, 65, 41],
  [11, 36, 16, 5, 37, 17],
  [11, 36, 12, 5, 37, 13],
  // 15
  [5, 109, 87, 1, 110, 88],
  [5, 65, 41, 5, 66, 42],
  [5, 54, 24, 7, 55, 25],
  [11, 36, 12],
  // 16
  [5, 122, 98, 1, 123, 99],
  [7, 73, 45, 3, 74, 46],
  [15, 43, 19, 2, 44, 20],
  [3, 45, 15, 13, 46, 16],
  // 17
  [1, 135, 107, 5, 136, 108],
  [10, 74, 46, 1, 75, 47],
  [1, 50, 22, 15, 51, 23],
  [2, 42, 14, 17, 43, 15],
  // 18
  [5, 150, 120, 1, 151, 121],
  [9, 69, 43, 4, 70, 44],
  [17, 50, 22, 1, 51, 23],
  [2, 42, 14, 19, 43, 15],
  // 19
  [3, 141, 113, 4, 142, 114],
  [3, 70, 44, 11, 71, 45],
  [17, 47, 21, 4, 48, 22],
  [9, 39, 13, 16, 40, 14],
  // 20
  [3, 135, 107, 5, 136, 108],
  [3, 67, 41, 13, 68, 42],
  [15, 54, 24, 5, 55, 25],
  [15, 43, 15, 10, 44, 16],
  // 21
  [4, 144, 116, 4, 145, 117],
  [17, 68, 42],
  [17, 50, 22, 6, 51, 23],
  [19, 46, 16, 6, 47, 17],
  // 22
  [2, 139, 111, 7, 140, 112],
  [17, 74, 46],
  [7, 54, 24, 16, 55, 25],
  [34, 37, 13],
  // 23
  [4, 151, 121, 5, 152, 122],
  [4, 75, 47, 14, 76, 48],
  [11, 54, 24, 14, 55, 25],
  [16, 45, 15, 14, 46, 16],
  // 24
  [6, 147, 117, 4, 148, 118],
  [6, 73, 45, 14, 74, 46],
  [11, 54, 24, 16, 55, 25],
  [30, 46, 16, 2, 47, 17],
  // 25
  [8, 132, 106, 4, 133, 107],
  [8, 75, 47, 13, 76, 48],
  [7, 54, 24, 22, 55, 25],
  [22, 45, 15, 13, 46, 16],
  // 26
  [10, 142, 114, 2, 143, 115],
  [19, 74, 46, 4, 75, 47],
  [28, 50, 22, 6, 51, 23],
  [33, 46, 16, 4, 47, 17],
  // 27
  [8, 152, 122, 4, 153, 123],
  [22, 73, 45, 3, 74, 46],
  [8, 53, 23, 26, 54, 24],
  [12, 45, 15, 28, 46, 16],
  // 28
  [3, 147, 117, 10, 148, 118],
  [3, 73, 45, 23, 74, 46],
  [4, 54, 24, 31, 55, 25],
  [11, 45, 15, 31, 46, 16],
  // 29
  [7, 146, 116, 7, 147, 117],
  [21, 73, 45, 7, 74, 46],
  [1, 53, 23, 37, 54, 24],
  [19, 45, 15, 26, 46, 16],
  // 30
  [5, 145, 115, 10, 146, 116],
  [19, 75, 47, 10, 76, 48],
  [15, 54, 24, 25, 55, 25],
  [23, 45, 15, 25, 46, 16],
  // 31
  [13, 145, 115, 3, 146, 116],
  [2, 74, 46, 29, 75, 47],
  [42, 54, 24, 1, 55, 25],
  [23, 45, 15, 28, 46, 16],
  // 32
  [17, 145, 115],
  [10, 74, 46, 23, 75, 47],
  [10, 54, 24, 35, 55, 25],
  [19, 45, 15, 35, 46, 16],
  // 33
  [17, 145, 115, 1, 146, 116],
  [14, 74, 46, 21, 75, 47],
  [29, 54, 24, 19, 55, 25],
  [11, 45, 15, 46, 46, 16],
  // 34
  [13, 145, 115, 6, 146, 116],
  [14, 74, 46, 23, 75, 47],
  [44, 54, 24, 7, 55, 25],
  [59, 46, 16, 1, 47, 17],
  // 35
  [12, 151, 121, 7, 152, 122],
  [12, 75, 47, 26, 76, 48],
  [39, 54, 24, 14, 55, 25],
  [22, 45, 15, 41, 46, 16],
  // 36
  [6, 151, 121, 14, 152, 122],
  [6, 75, 47, 34, 76, 48],
  [46, 54, 24, 10, 55, 25],
  [2, 45, 15, 64, 46, 16],
  // 37
  [17, 152, 122, 4, 153, 123],
  [29, 74, 46, 14, 75, 47],
  [49, 54, 24, 10, 55, 25],
  [24, 45, 15, 46, 46, 16],
  // 38
  [4, 152, 122, 18, 153, 123],
  [13, 74, 46, 32, 75, 47],
  [48, 54, 24, 14, 55, 25],
  [42, 45, 15, 32, 46, 16],
  // 39
  [20, 147, 117, 4, 148, 118],
  [40, 75, 47, 7, 76, 48],
  [43, 54, 24, 22, 55, 25],
  [10, 45, 15, 67, 46, 16],
  // 40
  [19, 148, 118, 6, 149, 119],
  [18, 75, 47, 31, 76, 48],
  [34, 54, 24, 34, 55, 25],
  [20, 45, 15, 61, 46, 16]
];
QRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {
  var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
  if (rsBlock == void 0) {
    throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
  }
  var length2 = rsBlock.length / 3;
  var list2 = new Array();
  for (var i3 = 0; i3 < length2; i3++) {
    var count = rsBlock[i3 * 3 + 0];
    var totalCount = rsBlock[i3 * 3 + 1];
    var dataCount = rsBlock[i3 * 3 + 2];
    for (var j2 = 0; j2 < count; j2++) {
      list2.push(new QRRSBlock(totalCount, dataCount));
    }
  }
  return list2;
};
QRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {
  switch (errorCorrectLevel) {
    case ECL.L:
      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
    case ECL.M:
      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
    case ECL.Q:
      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
    case ECL.H:
      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
    default:
      return void 0;
  }
};
var RSBlock$1 = QRRSBlock;
function QRBitBuffer() {
  this.buffer = new Array();
  this.length = 0;
}
QRBitBuffer.prototype = {
  get: function(index2) {
    var bufIndex = Math.floor(index2 / 8);
    return (this.buffer[bufIndex] >>> 7 - index2 % 8 & 1) == 1;
  },
  put: function(num, length2) {
    for (var i3 = 0; i3 < length2; i3++) {
      this.putBit((num >>> length2 - i3 - 1 & 1) == 1);
    }
  },
  getLengthInBits: function() {
    return this.length;
  },
  putBit: function(bit) {
    var bufIndex = Math.floor(this.length / 8);
    if (this.buffer.length <= bufIndex) {
      this.buffer.push(0);
    }
    if (bit) {
      this.buffer[bufIndex] |= 128 >>> this.length % 8;
    }
    this.length++;
  }
};
var BitBuffer$1 = QRBitBuffer;
var QRMath = {
  glog: function(n2) {
    if (n2 < 1) {
      throw new Error("glog(" + n2 + ")");
    }
    return QRMath.LOG_TABLE[n2];
  },
  gexp: function(n2) {
    while (n2 < 0) {
      n2 += 255;
    }
    while (n2 >= 256) {
      n2 -= 255;
    }
    return QRMath.EXP_TABLE[n2];
  },
  EXP_TABLE: new Array(256),
  LOG_TABLE: new Array(256)
};
for (var i = 0; i < 8; i++) {
  QRMath.EXP_TABLE[i] = 1 << i;
}
for (var i = 8; i < 256; i++) {
  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];
}
for (var i = 0; i < 255; i++) {
  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;
}
var math$2 = QRMath;
var math$1 = math$2;
function QRPolynomial(num, shift) {
  if (num.length == void 0) {
    throw new Error(num.length + "/" + shift);
  }
  var offset = 0;
  while (offset < num.length && num[offset] == 0) {
    offset++;
  }
  this.num = new Array(num.length - offset + shift);
  for (var i3 = 0; i3 < num.length - offset; i3++) {
    this.num[i3] = num[i3 + offset];
  }
}
QRPolynomial.prototype = {
  get: function(index2) {
    return this.num[index2];
  },
  getLength: function() {
    return this.num.length;
  },
  multiply: function(e3) {
    var num = new Array(this.getLength() + e3.getLength() - 1);
    for (var i3 = 0; i3 < this.getLength(); i3++) {
      for (var j2 = 0; j2 < e3.getLength(); j2++) {
        num[i3 + j2] ^= math$1.gexp(math$1.glog(this.get(i3)) + math$1.glog(e3.get(j2)));
      }
    }
    return new QRPolynomial(num, 0);
  },
  mod: function(e3) {
    if (this.getLength() - e3.getLength() < 0) {
      return this;
    }
    var ratio = math$1.glog(this.get(0)) - math$1.glog(e3.get(0));
    var num = new Array(this.getLength());
    for (var i3 = 0; i3 < this.getLength(); i3++) {
      num[i3] = this.get(i3);
    }
    for (var i3 = 0; i3 < e3.getLength(); i3++) {
      num[i3] ^= math$1.gexp(math$1.glog(e3.get(i3)) + ratio);
    }
    return new QRPolynomial(num, 0).mod(e3);
  }
};
var Polynomial$2 = QRPolynomial;
var Mode = mode$1;
var Polynomial$1 = Polynomial$2;
var math = math$2;
var QRMaskPattern = {
  PATTERN000: 0,
  PATTERN001: 1,
  PATTERN010: 2,
  PATTERN011: 3,
  PATTERN100: 4,
  PATTERN101: 5,
  PATTERN110: 6,
  PATTERN111: 7
};
var QRUtil = {
  PATTERN_POSITION_TABLE: [
    [],
    [6, 18],
    [6, 22],
    [6, 26],
    [6, 30],
    [6, 34],
    [6, 22, 38],
    [6, 24, 42],
    [6, 26, 46],
    [6, 28, 50],
    [6, 30, 54],
    [6, 32, 58],
    [6, 34, 62],
    [6, 26, 46, 66],
    [6, 26, 48, 70],
    [6, 26, 50, 74],
    [6, 30, 54, 78],
    [6, 30, 56, 82],
    [6, 30, 58, 86],
    [6, 34, 62, 90],
    [6, 28, 50, 72, 94],
    [6, 26, 50, 74, 98],
    [6, 30, 54, 78, 102],
    [6, 28, 54, 80, 106],
    [6, 32, 58, 84, 110],
    [6, 30, 58, 86, 114],
    [6, 34, 62, 90, 118],
    [6, 26, 50, 74, 98, 122],
    [6, 30, 54, 78, 102, 126],
    [6, 26, 52, 78, 104, 130],
    [6, 30, 56, 82, 108, 134],
    [6, 34, 60, 86, 112, 138],
    [6, 30, 58, 86, 114, 142],
    [6, 34, 62, 90, 118, 146],
    [6, 30, 54, 78, 102, 126, 150],
    [6, 24, 50, 76, 102, 128, 154],
    [6, 28, 54, 80, 106, 132, 158],
    [6, 32, 58, 84, 110, 136, 162],
    [6, 26, 54, 82, 110, 138, 166],
    [6, 30, 58, 86, 114, 142, 170]
  ],
  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,
  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,
  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,
  getBCHTypeInfo: function(data2) {
    var d4 = data2 << 10;
    while (QRUtil.getBCHDigit(d4) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
      d4 ^= QRUtil.G15 << QRUtil.getBCHDigit(d4) - QRUtil.getBCHDigit(QRUtil.G15);
    }
    return (data2 << 10 | d4) ^ QRUtil.G15_MASK;
  },
  getBCHTypeNumber: function(data2) {
    var d4 = data2 << 12;
    while (QRUtil.getBCHDigit(d4) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
      d4 ^= QRUtil.G18 << QRUtil.getBCHDigit(d4) - QRUtil.getBCHDigit(QRUtil.G18);
    }
    return data2 << 12 | d4;
  },
  getBCHDigit: function(data2) {
    var digit = 0;
    while (data2 != 0) {
      digit++;
      data2 >>>= 1;
    }
    return digit;
  },
  getPatternPosition: function(typeNumber) {
    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
  },
  getMask: function(maskPattern, i3, j2) {
    switch (maskPattern) {
      case QRMaskPattern.PATTERN000:
        return (i3 + j2) % 2 == 0;
      case QRMaskPattern.PATTERN001:
        return i3 % 2 == 0;
      case QRMaskPattern.PATTERN010:
        return j2 % 3 == 0;
      case QRMaskPattern.PATTERN011:
        return (i3 + j2) % 3 == 0;
      case QRMaskPattern.PATTERN100:
        return (Math.floor(i3 / 2) + Math.floor(j2 / 3)) % 2 == 0;
      case QRMaskPattern.PATTERN101:
        return i3 * j2 % 2 + i3 * j2 % 3 == 0;
      case QRMaskPattern.PATTERN110:
        return (i3 * j2 % 2 + i3 * j2 % 3) % 2 == 0;
      case QRMaskPattern.PATTERN111:
        return (i3 * j2 % 3 + (i3 + j2) % 2) % 2 == 0;
      default:
        throw new Error("bad maskPattern:" + maskPattern);
    }
  },
  getErrorCorrectPolynomial: function(errorCorrectLength) {
    var a4 = new Polynomial$1([1], 0);
    for (var i3 = 0; i3 < errorCorrectLength; i3++) {
      a4 = a4.multiply(new Polynomial$1([1, math.gexp(i3)], 0));
    }
    return a4;
  },
  getLengthInBits: function(mode2, type) {
    if (1 <= type && type < 10) {
      switch (mode2) {
        case Mode.MODE_NUMBER:
          return 10;
        case Mode.MODE_ALPHA_NUM:
          return 9;
        case Mode.MODE_8BIT_BYTE:
          return 8;
        case Mode.MODE_KANJI:
          return 8;
        default:
          throw new Error("mode:" + mode2);
      }
    } else if (type < 27) {
      switch (mode2) {
        case Mode.MODE_NUMBER:
          return 12;
        case Mode.MODE_ALPHA_NUM:
          return 11;
        case Mode.MODE_8BIT_BYTE:
          return 16;
        case Mode.MODE_KANJI:
          return 10;
        default:
          throw new Error("mode:" + mode2);
      }
    } else if (type < 41) {
      switch (mode2) {
        case Mode.MODE_NUMBER:
          return 14;
        case Mode.MODE_ALPHA_NUM:
          return 13;
        case Mode.MODE_8BIT_BYTE:
          return 16;
        case Mode.MODE_KANJI:
          return 12;
        default:
          throw new Error("mode:" + mode2);
      }
    } else {
      throw new Error("type:" + type);
    }
  },
  getLostPoint: function(qrCode) {
    var moduleCount = qrCode.getModuleCount();
    var lostPoint = 0;
    for (var row = 0; row < moduleCount; row++) {
      for (var col = 0; col < moduleCount; col++) {
        var sameCount = 0;
        var dark2 = qrCode.isDark(row, col);
        for (var r2 = -1; r2 <= 1; r2++) {
          if (row + r2 < 0 || moduleCount <= row + r2) {
            continue;
          }
          for (var c7 = -1; c7 <= 1; c7++) {
            if (col + c7 < 0 || moduleCount <= col + c7) {
              continue;
            }
            if (r2 == 0 && c7 == 0) {
              continue;
            }
            if (dark2 == qrCode.isDark(row + r2, col + c7)) {
              sameCount++;
            }
          }
        }
        if (sameCount > 5) {
          lostPoint += 3 + sameCount - 5;
        }
      }
    }
    for (var row = 0; row < moduleCount - 1; row++) {
      for (var col = 0; col < moduleCount - 1; col++) {
        var count = 0;
        if (qrCode.isDark(row, col))
          count++;
        if (qrCode.isDark(row + 1, col))
          count++;
        if (qrCode.isDark(row, col + 1))
          count++;
        if (qrCode.isDark(row + 1, col + 1))
          count++;
        if (count == 0 || count == 4) {
          lostPoint += 3;
        }
      }
    }
    for (var row = 0; row < moduleCount; row++) {
      for (var col = 0; col < moduleCount - 6; col++) {
        if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {
          lostPoint += 40;
        }
      }
    }
    for (var col = 0; col < moduleCount; col++) {
      for (var row = 0; row < moduleCount - 6; row++) {
        if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {
          lostPoint += 40;
        }
      }
    }
    var darkCount = 0;
    for (var col = 0; col < moduleCount; col++) {
      for (var row = 0; row < moduleCount; row++) {
        if (qrCode.isDark(row, col)) {
          darkCount++;
        }
      }
    }
    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
    lostPoint += ratio * 10;
    return lostPoint;
  }
};
var util$1 = QRUtil;
var BitByte = _8BitByte;
var RSBlock = RSBlock$1;
var BitBuffer = BitBuffer$1;
var util = util$1;
var Polynomial = Polynomial$2;
function QRCode$1(typeNumber, errorCorrectLevel) {
  this.typeNumber = typeNumber;
  this.errorCorrectLevel = errorCorrectLevel;
  this.modules = null;
  this.moduleCount = 0;
  this.dataCache = null;
  this.dataList = [];
}
var proto = QRCode$1.prototype;
proto.addData = function(data2) {
  var newData = new BitByte(data2);
  this.dataList.push(newData);
  this.dataCache = null;
};
proto.isDark = function(row, col) {
  if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
    throw new Error(row + "," + col);
  }
  return this.modules[row][col];
};
proto.getModuleCount = function() {
  return this.moduleCount;
};
proto.make = function() {
  if (this.typeNumber < 1) {
    var typeNumber = 1;
    for (typeNumber = 1; typeNumber < 40; typeNumber++) {
      var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
      var buffer = new BitBuffer();
      var totalDataCount = 0;
      for (var i3 = 0; i3 < rsBlocks.length; i3++) {
        totalDataCount += rsBlocks[i3].dataCount;
      }
      for (var i3 = 0; i3 < this.dataList.length; i3++) {
        var data2 = this.dataList[i3];
        buffer.put(data2.mode, 4);
        buffer.put(data2.getLength(), util.getLengthInBits(data2.mode, typeNumber));
        data2.write(buffer);
      }
      if (buffer.getLengthInBits() <= totalDataCount * 8)
        break;
    }
    this.typeNumber = typeNumber;
  }
  this.makeImpl(false, this.getBestMaskPattern());
};
proto.makeImpl = function(test, maskPattern) {
  this.moduleCount = this.typeNumber * 4 + 17;
  this.modules = new Array(this.moduleCount);
  for (var row = 0; row < this.moduleCount; row++) {
    this.modules[row] = new Array(this.moduleCount);
    for (var col = 0; col < this.moduleCount; col++) {
      this.modules[row][col] = null;
    }
  }
  this.setupPositionProbePattern(0, 0);
  this.setupPositionProbePattern(this.moduleCount - 7, 0);
  this.setupPositionProbePattern(0, this.moduleCount - 7);
  this.setupPositionAdjustPattern();
  this.setupTimingPattern();
  this.setupTypeInfo(test, maskPattern);
  if (this.typeNumber >= 7) {
    this.setupTypeNumber(test);
  }
  if (this.dataCache == null) {
    this.dataCache = QRCode$1.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
  }
  this.mapData(this.dataCache, maskPattern);
};
proto.setupPositionProbePattern = function(row, col) {
  for (var r2 = -1; r2 <= 7; r2++) {
    if (row + r2 <= -1 || this.moduleCount <= row + r2)
      continue;
    for (var c7 = -1; c7 <= 7; c7++) {
      if (col + c7 <= -1 || this.moduleCount <= col + c7)
        continue;
      if (0 <= r2 && r2 <= 6 && (c7 == 0 || c7 == 6) || 0 <= c7 && c7 <= 6 && (r2 == 0 || r2 == 6) || 2 <= r2 && r2 <= 4 && 2 <= c7 && c7 <= 4) {
        this.modules[row + r2][col + c7] = true;
      } else {
        this.modules[row + r2][col + c7] = false;
      }
    }
  }
};
proto.getBestMaskPattern = function() {
  var minLostPoint = 0;
  var pattern = 0;
  for (var i3 = 0; i3 < 8; i3++) {
    this.makeImpl(true, i3);
    var lostPoint = util.getLostPoint(this);
    if (i3 == 0 || minLostPoint > lostPoint) {
      minLostPoint = lostPoint;
      pattern = i3;
    }
  }
  return pattern;
};
proto.createMovieClip = function(target_mc, instance_name, depth) {
  var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
  var cs = 1;
  this.make();
  for (var row = 0; row < this.modules.length; row++) {
    var y4 = row * cs;
    for (var col = 0; col < this.modules[row].length; col++) {
      var x3 = col * cs;
      var dark2 = this.modules[row][col];
      if (dark2) {
        qr_mc.beginFill(0, 100);
        qr_mc.moveTo(x3, y4);
        qr_mc.lineTo(x3 + cs, y4);
        qr_mc.lineTo(x3 + cs, y4 + cs);
        qr_mc.lineTo(x3, y4 + cs);
        qr_mc.endFill();
      }
    }
  }
  return qr_mc;
};
proto.setupTimingPattern = function() {
  for (var r2 = 8; r2 < this.moduleCount - 8; r2++) {
    if (this.modules[r2][6] != null) {
      continue;
    }
    this.modules[r2][6] = r2 % 2 == 0;
  }
  for (var c7 = 8; c7 < this.moduleCount - 8; c7++) {
    if (this.modules[6][c7] != null) {
      continue;
    }
    this.modules[6][c7] = c7 % 2 == 0;
  }
};
proto.setupPositionAdjustPattern = function() {
  var pos = util.getPatternPosition(this.typeNumber);
  for (var i3 = 0; i3 < pos.length; i3++) {
    for (var j2 = 0; j2 < pos.length; j2++) {
      var row = pos[i3];
      var col = pos[j2];
      if (this.modules[row][col] != null) {
        continue;
      }
      for (var r2 = -2; r2 <= 2; r2++) {
        for (var c7 = -2; c7 <= 2; c7++) {
          if (r2 == -2 || r2 == 2 || c7 == -2 || c7 == 2 || r2 == 0 && c7 == 0) {
            this.modules[row + r2][col + c7] = true;
          } else {
            this.modules[row + r2][col + c7] = false;
          }
        }
      }
    }
  }
};
proto.setupTypeNumber = function(test) {
  var bits = util.getBCHTypeNumber(this.typeNumber);
  for (var i3 = 0; i3 < 18; i3++) {
    var mod2 = !test && (bits >> i3 & 1) == 1;
    this.modules[Math.floor(i3 / 3)][i3 % 3 + this.moduleCount - 8 - 3] = mod2;
  }
  for (var i3 = 0; i3 < 18; i3++) {
    var mod2 = !test && (bits >> i3 & 1) == 1;
    this.modules[i3 % 3 + this.moduleCount - 8 - 3][Math.floor(i3 / 3)] = mod2;
  }
};
proto.setupTypeInfo = function(test, maskPattern) {
  var data2 = this.errorCorrectLevel << 3 | maskPattern;
  var bits = util.getBCHTypeInfo(data2);
  for (var i3 = 0; i3 < 15; i3++) {
    var mod2 = !test && (bits >> i3 & 1) == 1;
    if (i3 < 6) {
      this.modules[i3][8] = mod2;
    } else if (i3 < 8) {
      this.modules[i3 + 1][8] = mod2;
    } else {
      this.modules[this.moduleCount - 15 + i3][8] = mod2;
    }
  }
  for (var i3 = 0; i3 < 15; i3++) {
    var mod2 = !test && (bits >> i3 & 1) == 1;
    if (i3 < 8) {
      this.modules[8][this.moduleCount - i3 - 1] = mod2;
    } else if (i3 < 9) {
      this.modules[8][15 - i3 - 1 + 1] = mod2;
    } else {
      this.modules[8][15 - i3 - 1] = mod2;
    }
  }
  this.modules[this.moduleCount - 8][8] = !test;
};
proto.mapData = function(data2, maskPattern) {
  var inc = -1;
  var row = this.moduleCount - 1;
  var bitIndex = 7;
  var byteIndex = 0;
  for (var col = this.moduleCount - 1; col > 0; col -= 2) {
    if (col == 6)
      col--;
    while (true) {
      for (var c7 = 0; c7 < 2; c7++) {
        if (this.modules[row][col - c7] == null) {
          var dark2 = false;
          if (byteIndex < data2.length) {
            dark2 = (data2[byteIndex] >>> bitIndex & 1) == 1;
          }
          var mask2 = util.getMask(maskPattern, row, col - c7);
          if (mask2) {
            dark2 = !dark2;
          }
          this.modules[row][col - c7] = dark2;
          bitIndex--;
          if (bitIndex == -1) {
            byteIndex++;
            bitIndex = 7;
          }
        }
      }
      row += inc;
      if (row < 0 || this.moduleCount <= row) {
        row -= inc;
        inc = -inc;
        break;
      }
    }
  }
};
QRCode$1.PAD0 = 236;
QRCode$1.PAD1 = 17;
QRCode$1.createData = function(typeNumber, errorCorrectLevel, dataList) {
  var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
  var buffer = new BitBuffer();
  for (var i3 = 0; i3 < dataList.length; i3++) {
    var data2 = dataList[i3];
    buffer.put(data2.mode, 4);
    buffer.put(data2.getLength(), util.getLengthInBits(data2.mode, typeNumber));
    data2.write(buffer);
  }
  var totalDataCount = 0;
  for (var i3 = 0; i3 < rsBlocks.length; i3++) {
    totalDataCount += rsBlocks[i3].dataCount;
  }
  if (buffer.getLengthInBits() > totalDataCount * 8) {
    throw new Error("code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")");
  }
  if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
    buffer.put(0, 4);
  }
  while (buffer.getLengthInBits() % 8 != 0) {
    buffer.putBit(false);
  }
  while (true) {
    if (buffer.getLengthInBits() >= totalDataCount * 8) {
      break;
    }
    buffer.put(QRCode$1.PAD0, 8);
    if (buffer.getLengthInBits() >= totalDataCount * 8) {
      break;
    }
    buffer.put(QRCode$1.PAD1, 8);
  }
  return QRCode$1.createBytes(buffer, rsBlocks);
};
QRCode$1.createBytes = function(buffer, rsBlocks) {
  var offset = 0;
  var maxDcCount = 0;
  var maxEcCount = 0;
  var dcdata = new Array(rsBlocks.length);
  var ecdata = new Array(rsBlocks.length);
  for (var r2 = 0; r2 < rsBlocks.length; r2++) {
    var dcCount = rsBlocks[r2].dataCount;
    var ecCount = rsBlocks[r2].totalCount - dcCount;
    maxDcCount = Math.max(maxDcCount, dcCount);
    maxEcCount = Math.max(maxEcCount, ecCount);
    dcdata[r2] = new Array(dcCount);
    for (var i3 = 0; i3 < dcdata[r2].length; i3++) {
      dcdata[r2][i3] = 255 & buffer.buffer[i3 + offset];
    }
    offset += dcCount;
    var rsPoly = util.getErrorCorrectPolynomial(ecCount);
    var rawPoly = new Polynomial(dcdata[r2], rsPoly.getLength() - 1);
    var modPoly = rawPoly.mod(rsPoly);
    ecdata[r2] = new Array(rsPoly.getLength() - 1);
    for (var i3 = 0; i3 < ecdata[r2].length; i3++) {
      var modIndex = i3 + modPoly.getLength() - ecdata[r2].length;
      ecdata[r2][i3] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
    }
  }
  var totalCodeCount = 0;
  for (var i3 = 0; i3 < rsBlocks.length; i3++) {
    totalCodeCount += rsBlocks[i3].totalCount;
  }
  var data2 = new Array(totalCodeCount);
  var index2 = 0;
  for (var i3 = 0; i3 < maxDcCount; i3++) {
    for (var r2 = 0; r2 < rsBlocks.length; r2++) {
      if (i3 < dcdata[r2].length) {
        data2[index2++] = dcdata[r2][i3];
      }
    }
  }
  for (var i3 = 0; i3 < maxEcCount; i3++) {
    for (var r2 = 0; r2 < rsBlocks.length; r2++) {
      if (i3 < ecdata[r2].length) {
        data2[index2++] = ecdata[r2][i3];
      }
    }
  }
  return data2;
};
var QRCode_1 = QRCode$1;
var QRCodeSvg$1 = {};
Object.defineProperty(QRCodeSvg$1, "__esModule", {
  value: true
});
var _extends$2 = Object.assign || function(target) {
  for (var i3 = 1; i3 < arguments.length; i3++) {
    var source = arguments[i3];
    for (var key2 in source) {
      if (Object.prototype.hasOwnProperty.call(source, key2)) {
        target[key2] = source[key2];
      }
    }
  }
  return target;
};
var _propTypes$1 = propTypesExports;
var _propTypes2$1 = _interopRequireDefault$1(_propTypes$1);
var _react$1 = reactExports;
var _react2$1 = _interopRequireDefault$1(_react$1);
function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _objectWithoutProperties$2(obj, keys2) {
  var target = {};
  for (var i3 in obj) {
    if (keys2.indexOf(i3) >= 0)
      continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i3))
      continue;
    target[i3] = obj[i3];
  }
  return target;
}
var propTypes$1 = {
  bgColor: _propTypes2$1.default.oneOfType([_propTypes2$1.default.object, _propTypes2$1.default.string]).isRequired,
  bgD: _propTypes2$1.default.string.isRequired,
  fgColor: _propTypes2$1.default.oneOfType([_propTypes2$1.default.object, _propTypes2$1.default.string]).isRequired,
  fgD: _propTypes2$1.default.string.isRequired,
  size: _propTypes2$1.default.number.isRequired,
  title: _propTypes2$1.default.string,
  viewBoxSize: _propTypes2$1.default.number.isRequired,
  xmlns: _propTypes2$1.default.string
};
var defaultProps$2 = {
  title: void 0,
  xmlns: "http://www.w3.org/2000/svg"
};
var QRCodeSvg = (0, _react$1.forwardRef)(function(_ref, ref) {
  var bgColor = _ref.bgColor, bgD = _ref.bgD, fgD = _ref.fgD, fgColor = _ref.fgColor, size = _ref.size, title = _ref.title, viewBoxSize = _ref.viewBoxSize, props = _objectWithoutProperties$2(_ref, ["bgColor", "bgD", "fgD", "fgColor", "size", "title", "viewBoxSize"]);
  return _react2$1.default.createElement(
    "svg",
    _extends$2({}, props, { height: size, ref, viewBox: "0 0 " + viewBoxSize + " " + viewBoxSize, width: size }),
    title ? _react2$1.default.createElement(
      "title",
      null,
      title
    ) : null,
    _react2$1.default.createElement("path", { d: bgD, fill: bgColor }),
    _react2$1.default.createElement("path", { d: fgD, fill: fgColor })
  );
});
QRCodeSvg.displayName = "QRCodeSvg";
QRCodeSvg.propTypes = propTypes$1;
QRCodeSvg.defaultProps = defaultProps$2;
QRCodeSvg$1.default = QRCodeSvg;
Object.defineProperty(lib, "__esModule", {
  value: true
});
var _extends$1 = Object.assign || function(target) {
  for (var i3 = 1; i3 < arguments.length; i3++) {
    var source = arguments[i3];
    for (var key2 in source) {
      if (Object.prototype.hasOwnProperty.call(source, key2)) {
        target[key2] = source[key2];
      }
    }
  }
  return target;
};
var _QRCode = QRCode_1;
var _QRCode2 = _interopRequireDefault(_QRCode);
var _ErrorCorrectLevel = ErrorCorrectLevel;
var _ErrorCorrectLevel2 = _interopRequireDefault(_ErrorCorrectLevel);
var _propTypes = propTypesExports;
var _propTypes2 = _interopRequireDefault(_propTypes);
var _react = reactExports;
var _react2 = _interopRequireDefault(_react);
var _QRCodeSvg = QRCodeSvg$1;
var _QRCodeSvg2 = _interopRequireDefault(_QRCodeSvg);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _objectWithoutProperties$1(obj, keys2) {
  var target = {};
  for (var i3 in obj) {
    if (keys2.indexOf(i3) >= 0)
      continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i3))
      continue;
    target[i3] = obj[i3];
  }
  return target;
}
var propTypes = {
  bgColor: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
  fgColor: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
  level: _propTypes2.default.string,
  size: _propTypes2.default.number,
  value: _propTypes2.default.string.isRequired
};
var defaultProps$1 = {
  bgColor: "#FFFFFF",
  fgColor: "#000000",
  level: "L",
  size: 256
};
var QRCode = (0, _react.forwardRef)(function(_ref, ref) {
  var bgColor = _ref.bgColor, fgColor = _ref.fgColor, level = _ref.level, size = _ref.size, value2 = _ref.value, props = _objectWithoutProperties$1(_ref, ["bgColor", "fgColor", "level", "size", "value"]);
  var qrcode = new _QRCode2.default(-1, _ErrorCorrectLevel2.default[level]);
  qrcode.addData(value2);
  qrcode.make();
  var cells = qrcode.modules;
  return _react2.default.createElement(_QRCodeSvg2.default, _extends$1({}, props, {
    bgColor,
    bgD: cells.map(function(row, rowIndex) {
      return row.map(function(cell, cellIndex) {
        return !cell ? "M " + cellIndex + " " + rowIndex + " l 1 0 0 1 -1 0 Z" : "";
      }).join(" ");
    }).join(" "),
    fgColor,
    fgD: cells.map(function(row, rowIndex) {
      return row.map(function(cell, cellIndex) {
        return cell ? "M " + cellIndex + " " + rowIndex + " l 1 0 0 1 -1 0 Z" : "";
      }).join(" ");
    }).join(" "),
    ref,
    size,
    viewBoxSize: cells.length
  }));
});
QRCode.displayName = "QRCode";
QRCode.propTypes = propTypes;
QRCode.defaultProps = defaultProps$1;
var _default = lib.default = QRCode;
const getTxPOWDetailsType = (detail) => {
  try {
    const sizeOfJavascriptObject = Object.keys(detail.difference);
    if (sizeOfJavascriptObject.length === 1) {
      return "normal";
    }
    if (sizeOfJavascriptObject.length > 1) {
      const isTokenCreate = Object.keys(detail.difference)[1] === "0xFF";
      if (isTokenCreate) {
        return "tokencreate";
      }
    }
    return "custom";
  } catch (error) {
    return "";
  }
};
function truncateString(str, firstCharCount = str.length, endCharCount = 0, dotCount = 3) {
  if (str.length <= firstCharCount + endCharCount) {
    return str;
  }
  const firstPortion = str.slice(0, firstCharCount);
  const endPortion = str.slice(-endCharCount);
  const dots = ".".repeat(dotCount);
  return "".concat(firstPortion).concat(dots).concat(endPortion);
}
const getCurrentNodeVersion = () => {
  return new Promise((resolve2, reject) => {
    window.MDS.cmd("status", (res) => {
      if (!res.status)
        reject(res.error ? res.error : "RPC Failed");
      resolve2(res.response.version);
    });
  });
};
const Receive = () => {
  const {
    loaded,
    simpleAddresses,
    setOpenDrawer,
    _nicknameAddress,
    editNickname,
    showEditNickname,
    setShowEditNickname
  } = reactExports.useContext(appContext);
  const [address, setAddress] = reactExports.useState(null);
  const [showFullList, setShowFullList] = reactExports.useState(false);
  const [copyState, setCopy] = reactExports.useState(false);
  const [filterText, setFilterText] = reactExports.useState("");
  const [error, setError] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(0);
  const [validateAddress, setValidateAddress] = reactExports.useState(false);
  const [validationData, setValidationData] = reactExports.useState(false);
  const [validBuild, setValidBuild] = reactExports.useState(null);
  reactExports.useEffect(() => {
    if (loaded.current === true) {
      getCurrentNodeVersion().then((v2) => {
        const versionCheckAddressWasIntroduced = "1.0.21";
        const comparison = v2.localeCompare(versionCheckAddressWasIntroduced);
        const isRunningSufficientVersion = comparison === 0 || comparison === 1;
        if (isRunningSufficientVersion) {
          setValidBuild(true);
        }
        if (!isRunningSufficientVersion) {
          setValidBuild(false);
        }
      });
    }
  }, [loaded.current]);
  reactExports.useEffect(() => {
    if (simpleAddresses.length) {
      setAddress(simpleAddresses[Math.floor(Math.random() * simpleAddresses.length)]);
    }
  }, [simpleAddresses]);
  const validateCurrentAddress = () => {
    setLoading(true);
    if (address) {
      checkAddress(address == null ? void 0 : address.miniaddress).then((result2) => {
        setValidationData({ address: address.miniaddress, ...result2 });
      }).catch((err) => {
        console.error(err);
        setError(err);
      }).finally(() => {
        setLoading(false);
      });
    }
  };
  const handleCopyClick = () => {
    copy(address ? address.miniaddress : "");
    setCopy(true);
    setTimeout(() => {
      setCopy(false);
    }, 2500);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Grid,
    {
      variant: "lg",
      title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            onClick: (e3) => {
              e3.stopPropagation();
              setOpenDrawer(true);
            },
            className: "block md:hidden fill-white",
            xmlns: "http://www.w3.org/2000/svg",
            height: "24",
            viewBox: "0 -960 960 960",
            width: "24",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" })
          }
        ),
        "Receive"
      ] }),
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        showEditNickname && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-[50px] bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white p-4 h-max", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold mb-8", children: "Enter a nickname" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "divide-y-2 mb-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Formik,
              {
                initialValues: { nickname: "" },
                onSubmit: (data2) => {
                  const { nickname } = data2;
                  editNickname(address == null ? void 0 : address.miniaddress, nickname.replaceAll("'", " "));
                },
                validationSchema: create().shape({
                  nickname: create$1().required("Field is required").max(255, "A nickname can't be longer than 255 characters")
                }),
                children: ({
                  getFieldProps,
                  errors,
                  isSubmitting,
                  values: values2,
                  touched,
                  isValid: isValid2,
                  handleSubmit
                }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      id: "nickname",
                      type: "text",
                      disabled: isSubmitting,
                      placeholder: "Enter a nickname",
                      ...getFieldProps("nickname"),
                      error: errors.nickname && touched.nickname ? errors.nickname : false,
                      extraClass: "".concat(errors.nickname ? "pr-20 truncate" : "", " bg-blue-100"),
                      endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: values2.nickname.length >= 255 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "m-auto text-sm flex items-center justify-center red-bad font-semibold", children: values2.nickname.length + "/255" }) })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mt-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        extraClass: "mt-8 md:mt-16",
                        disabled: isSubmitting || !isValid2,
                        type: "submit",
                        variant: "primary",
                        children: "Update"
                      }
                    ),
                    !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        onClick: () => setShowEditNickname(false),
                        variant: "secondary",
                        children: "Cancel"
                      }
                    )
                  ] })
                ] })
              }
            ) })
          ] }) }) }),
          document.body
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          CardContent,
          {
            className: "!p-0",
            header: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              error && reactDomExports.createPortal(
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "div",
                  {
                    onClick: () => setError(false),
                    className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        onClick: (e3) => e3.stopPropagation(),
                        className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max max-h-[calc(100%_-_16px)] overflow-y-scroll",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "svg",
                              {
                                className: "animate-pulse temporary-pulse fill-[var(--status-red)] mb-4\n                                                mx-auto mt-8",
                                xmlns: "http://www.w3.org/2000/svg",
                                height: "64",
                                viewBox: "0 -960 960 960",
                                width: "64",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M480-280q17 0 28.5-11.5T520-320q0-17-11.5-28.5T480-360q-17 0-28.5 11.5T440-320q0 17 11.5 28.5T480-280Zm-40-160h80v-240h-80v240Zm40 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Hmm... something went wrong!" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center break-all", children: typeof error.includes !== "undefined" && error.includes("java.lang.IllegalArgumentException:") ? error.split("java.lang.IllegalArgumentException:")[1] : error })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            Button,
                            {
                              onClick: () => {
                                setError(false);
                              },
                              variant: "secondary",
                              children: "Cancel"
                            }
                          ) })
                        ]
                      }
                    ) })
                  }
                ),
                document.body
              ),
              validateAddress && reactDomExports.createPortal(
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "div",
                  {
                    onClick: () => setValidateAddress(false),
                    className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Grid,
                      {
                        variant: "lg",
                        title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "svg",
                            {
                              className: "fill-white hover:cursor-pointer",
                              onClick: (e3) => {
                                e3.stopPropagation();
                                setValidateAddress(false);
                              },
                              xmlns: "http://www.w3.org/2000/svg",
                              height: "24",
                              viewBox: "0 -960 960 960",
                              width: "24",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
                            }
                          ),
                          "Enter address"
                        ] }),
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          CardContent,
                          {
                            onClick: (e3) => e3.stopPropagation(),
                            header: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
                            content: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              Formik,
                              {
                                initialValues: { address: "" },
                                onSubmit: async (formInputs) => {
                                  setStep(0);
                                  setLoading(true);
                                  const { address: address2 } = formInputs;
                                  try {
                                    const resp = await checkAddress(
                                      formInputs.address
                                    );
                                    setLoading(false);
                                    setStep(1);
                                    setValidationData({ address: address2, ...resp });
                                  } catch (error2) {
                                    setLoading(false);
                                    setError(error2);
                                  }
                                },
                                validationSchema,
                                children: ({
                                  handleSubmit,
                                  getFieldProps,
                                  isValid: isValid2,
                                  isSubmitting,
                                  touched,
                                  errors
                                }) => /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("form", { onSubmit: handleSubmit, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    Input,
                                    {
                                      extraClass: "bg-blue-100!",
                                      disabled: isSubmitting,
                                      type: "text",
                                      id: "address",
                                      ...getFieldProps("address"),
                                      placeholder: "0x or Mx address",
                                      error: errors.address && touched.address ? errors.address : false
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                    Button,
                                    {
                                      extraClass: "mt-8 md:mt-16",
                                      type: "submit",
                                      variant: "primary",
                                      disabled: !isValid2 || loading,
                                      children: [
                                        !loading && "Validate",
                                        !!loading && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          "svg",
                                          {
                                            xmlns: "http://www.w3.org/2000/svg",
                                            className: "animate-spin",
                                            width: "24",
                                            height: "24",
                                            viewBox: "0 0 24 24",
                                            strokeWidth: "2",
                                            stroke: "currentColor",
                                            fill: "none",
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round",
                                            children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "path",
                                                {
                                                  stroke: "none",
                                                  d: "M0 0h24v24H0z",
                                                  fill: "none"
                                                }
                                              ),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 20.777a8.942 8.942 0 0 1 -2.48 -.969" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M14 3.223a9.003 9.003 0 0 1 0 17.554" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M4.579 17.093a8.961 8.961 0 0 1 -1.227 -2.592" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3.124 10.5c.16 -.95 .468 -1.85 .9 -2.675l.169 -.305" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6.907 4.579a8.954 8.954 0 0 1 3.093 -1.356" })
                                            ]
                                          }
                                        ) })
                                      ]
                                    }
                                  )
                                ] }) }) })
                              }
                            ) })
                          }
                        )
                      }
                    )
                  }
                ),
                document.body
              ),
              validationData && reactDomExports.createPortal(
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "div",
                  {
                    onClick: () => setValidationData(false),
                    className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Grid,
                      {
                        variant: "lg",
                        title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "svg",
                            {
                              className: "fill-white hover:cursor-pointer",
                              onClick: (e3) => {
                                e3.stopPropagation();
                                setValidationData(false);
                                if (validateAddress) {
                                  setValidateAddress(false);
                                }
                              },
                              xmlns: "http://www.w3.org/2000/svg",
                              height: "24",
                              viewBox: "0 -960 960 960",
                              width: "24",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
                            }
                          ),
                          "Validation Report"
                        ] }),
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          CardContent,
                          {
                            onClick: (e3) => e3.stopPropagation(),
                            header: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
                            content: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "div",
                              {
                                onClick: (e3) => e3.stopPropagation(),
                                className: "mb-8 flex flex-col gap-2",
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    KeyValue,
                                    {
                                      truncate: false,
                                      title: "Validating",
                                      value: validationData.address
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-2", children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-blue-100 rounded-lg text-black font-bold  p-4 grid grid-cols-1 grid-rows-[1fr_auto]", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "pb-8 text-center text-sm", children: "Address belongs to this node?" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center flex justify-center", children: [
                                        validationData.relevant && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          "svg",
                                          {
                                            xmlns: "http://www.w3.org/2000/svg",
                                            width: "32",
                                            height: "32",
                                            viewBox: "0 0 24 24",
                                            strokeWidth: "2",
                                            stroke: "currentColor",
                                            fill: "none",
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round",
                                            children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "path",
                                                {
                                                  stroke: "none",
                                                  d: "M0 0h24v24H0z",
                                                  fill: "none"
                                                }
                                              ),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "path",
                                                {
                                                  d: "M12 2c-.218 0 -.432 .002 -.642 .005l-.616 .017l-.299 .013l-.579 .034l-.553 .046c-4.785 .464 -6.732 2.411 -7.196 7.196l-.046 .553l-.034 .579c-.005 .098 -.01 .198 -.013 .299l-.017 .616l-.004 .318l-.001 .324c0 .218 .002 .432 .005 .642l.017 .616l.013 .299l.034 .579l.046 .553c.464 4.785 2.411 6.732 7.196 7.196l.553 .046l.579 .034c.098 .005 .198 .01 .299 .013l.616 .017l.642 .005l.642 -.005l.616 -.017l.299 -.013l.579 -.034l.553 -.046c4.785 -.464 6.732 -2.411 7.196 -7.196l.046 -.553l.034 -.579c.005 -.098 .01 -.198 .013 -.299l.017 -.616l.005 -.642l-.005 -.642l-.017 -.616l-.013 -.299l-.034 -.579l-.046 -.553c-.464 -4.785 -2.411 -6.732 -7.196 -7.196l-.553 -.046l-.579 -.034a28.058 28.058 0 0 0 -.299 -.013l-.616 -.017l-.318 -.004l-.324 -.001zm2.293 7.293a1 1 0 0 1 1.497 1.32l-.083 .094l-4 4a1 1 0 0 1 -1.32 .083l-.094 -.083l-2 -2a1 1 0 0 1 1.32 -1.497l.094 .083l1.293 1.292l3.293 -3.292z",
                                                  fill: "#00B894",
                                                  strokeWidth: "0"
                                                }
                                              )
                                            ]
                                          }
                                        ),
                                        !validationData.relevant && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          "svg",
                                          {
                                            xmlns: "http://www.w3.org/2000/svg",
                                            width: "32",
                                            height: "32",
                                            viewBox: "0 0 24 24",
                                            strokeWidth: "2",
                                            stroke: "#FF5252",
                                            fill: "none",
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round",
                                            children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "path",
                                                {
                                                  stroke: "none",
                                                  d: "M0 0h24v24H0z",
                                                  fill: "none"
                                                }
                                              ),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 8l4 8" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 16l4 -8" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z" })
                                            ]
                                          }
                                        )
                                      ] })
                                    ] }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-blue-100 rounded-lg text-black font-bold p-4 grid grid-cols-1 grid-rows-[1fr_auto]", children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "pb-8 text-center text-sm", children: "Simple address?" }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center flex justify-center", children: [
                                        validationData.simple && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          "svg",
                                          {
                                            xmlns: "http://www.w3.org/2000/svg",
                                            width: "32",
                                            height: "32",
                                            viewBox: "0 0 24 24",
                                            strokeWidth: "2",
                                            stroke: "currentColor",
                                            fill: "none",
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round",
                                            children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "path",
                                                {
                                                  stroke: "none",
                                                  d: "M0 0h24v24H0z",
                                                  fill: "none"
                                                }
                                              ),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "path",
                                                {
                                                  d: "M12 2c-.218 0 -.432 .002 -.642 .005l-.616 .017l-.299 .013l-.579 .034l-.553 .046c-4.785 .464 -6.732 2.411 -7.196 7.196l-.046 .553l-.034 .579c-.005 .098 -.01 .198 -.013 .299l-.017 .616l-.004 .318l-.001 .324c0 .218 .002 .432 .005 .642l.017 .616l.013 .299l.034 .579l.046 .553c.464 4.785 2.411 6.732 7.196 7.196l.553 .046l.579 .034c.098 .005 .198 .01 .299 .013l.616 .017l.642 .005l.642 -.005l.616 -.017l.299 -.013l.579 -.034l.553 -.046c4.785 -.464 6.732 -2.411 7.196 -7.196l.046 -.553l.034 -.579c.005 -.098 .01 -.198 .013 -.299l.017 -.616l.005 -.642l-.005 -.642l-.017 -.616l-.013 -.299l-.034 -.579l-.046 -.553c-.464 -4.785 -2.411 -6.732 -7.196 -7.196l-.553 -.046l-.579 -.034a28.058 28.058 0 0 0 -.299 -.013l-.616 -.017l-.318 -.004l-.324 -.001zm2.293 7.293a1 1 0 0 1 1.497 1.32l-.083 .094l-4 4a1 1 0 0 1 -1.32 .083l-.094 -.083l-2 -2a1 1 0 0 1 1.32 -1.497l.094 .083l1.293 1.292l3.293 -3.292z",
                                                  fill: "#00B894",
                                                  strokeWidth: "0"
                                                }
                                              )
                                            ]
                                          }
                                        ),
                                        !validationData.simple && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          "svg",
                                          {
                                            xmlns: "http://www.w3.org/2000/svg",
                                            width: "32",
                                            height: "32",
                                            viewBox: "0 0 24 24",
                                            strokeWidth: "2",
                                            stroke: "#FF5252",
                                            fill: "none",
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round",
                                            children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                "path",
                                                {
                                                  stroke: "none",
                                                  d: "M0 0h24v24H0z",
                                                  fill: "none"
                                                }
                                              ),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 8l4 8" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 16l4 -8" }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z" })
                                            ]
                                          }
                                        )
                                      ] })
                                    ] })
                                  ] }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    KeyValue,
                                    {
                                      truncate: false,
                                      title: "0x",
                                      value: validationData["0x"],
                                      clipboard: true
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    KeyValue,
                                    {
                                      truncate: false,
                                      title: "Mx",
                                      value: validationData["Mx"],
                                      clipboard: true
                                    }
                                  ),
                                  validateAddress && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "button",
                                    {
                                      onClick: () => setValidationData(false),
                                      className: "hover:opacity-90 bg-black text-white font-bold p-4 rounded mt-8",
                                      children: "Back"
                                    }
                                  )
                                ]
                              }
                            ) })
                          }
                        )
                      }
                    )
                  }
                ),
                document.body
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-center flex-col items-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-end justify-end w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-1 py-2 flex items-center gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "button",
                    {
                      disabled: !validBuild || loading || !address,
                      onClick: validateCurrentAddress,
                      className: "disabled:bg-opacity-30 disabled:text-red hover:opacity-90 bg-black text-white px-4 py-2 md:px-2 md:py-1 rounded",
                      children: [
                        !loading && "Validate",
                        !!loading && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                          "svg",
                          {
                            xmlns: "http://www.w3.org/2000/svg",
                            className: "animate-spin",
                            width: "24",
                            height: "24",
                            viewBox: "0 0 24 24",
                            strokeWidth: "2",
                            stroke: "currentColor",
                            fill: "none",
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 20.777a8.942 8.942 0 0 1 -2.48 -.969" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M14 3.223a9.003 9.003 0 0 1 0 17.554" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M4.579 17.093a8.961 8.961 0 0 1 -1.227 -2.592" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3.124 10.5c.16 -.95 .468 -1.85 .9 -2.675l.169 -.305" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6.907 4.579a8.954 8.954 0 0 1 3.093 -1.356" })
                            ]
                          }
                        )
                      ]
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "button",
                    {
                      disabled: !validBuild,
                      onClick: () => setValidateAddress(true),
                      className: "bg-slate-700 text-white h-full px-2 rounded",
                      children: [
                        validBuild && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                          "svg",
                          {
                            xmlns: "http://www.w3.org/2000/svg",
                            width: "24",
                            height: "24",
                            viewBox: "0 0 24 24",
                            strokeWidth: "2",
                            stroke: "currentColor",
                            fill: "none",
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 7m-4 0a4 4 0 1 0 8 0a4 4 0 1 0 -8 0" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16 3.13a4 4 0 0 1 0 7.75" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M21 21v-2a4 4 0 0 0 -3 -3.85" })
                            ]
                          }
                        ),
                        !validBuild && "v1.0.21+"
                      ]
                    }
                  )
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  _default,
                  {
                    onClick: handleCopyClick,
                    className: "rounded h-[210px] w-[210px] md:h-[240px] md:w-[240px] mt-8 animate-fadeIn",
                    value: address ? address == null ? void 0 : address.miniaddress : "",
                    type: "M"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "svg",
                    {
                      className: "w-5 h-5 animate-bounce temporary-pulse",
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "24",
                      viewBox: "0 -960 960 960",
                      width: "24",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M419-80q-28 0-52.5-12T325-126L107-403l19-20q20-21 48-25t52 11l74 45v-328q0-17 11.5-28.5T340-760q17 0 29 11.5t12 28.5v472l-97-60 104 133q6 7 14 11t17 4h221q33 0 56.5-23.5T720-240v-160q0-17-11.5-28.5T680-440H461v-80h219q50 0 85 35t35 85v160q0 66-47 113T640-80H419ZM167-620q-13-22-20-47.5t-7-52.5q0-83 58.5-141.5T340-920q83 0 141.5 58.5T540-720q0 27-7 52.5T513-620l-69-40q8-14 12-28.5t4-31.5q0-50-35-85t-85-35q-50 0-85 35t-35 85q0 17 4 31.5t12 28.5l-69 40Zm335 280Z" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-[12px] mt-1", children: "Tap the QR Code to copy address" })
                ] })
              ] })
            ] }),
            content: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "p-4 ".concat(copyState ? "bg-green-good" : "bg-white hover:bg-slate-100 hover:cursor-pointer"),
                  children: [
                    !copyState && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "div",
                        {
                          onClick: (e3) => e3.stopPropagation(),
                          className: "flex justify-center md:grid md:grid-cols-[auto_1fr] md:grid-rows-1 gap-2 w-full",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "h1",
                              {
                                className: "text-black font-semibold truncate",
                                onClick: (e3) => e3.stopPropagation(),
                                children: address && _nicknameAddress && _nicknameAddress[address.miniaddress] ? _nicknameAddress[address.miniaddress] : "Untitled address"
                              }
                            ),
                            address && /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "svg",
                              {
                                onClick: (e3) => {
                                  e3.stopPropagation();
                                  setShowEditNickname(address.miniaddress);
                                },
                                className: "hover:cursor-pointer hover:scale-105 fill-purple-400",
                                xmlns: "http://www.w3.org/2000/svg",
                                height: "20",
                                viewBox: "0 -960 960 960",
                                width: "20",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M200-200h56l345-345-56-56-345 345v56Zm572-403L602-771l56-56q23-23 56.5-23t56.5 23l56 56q23 23 24 55.5T829-660l-57 57Zm-58 59L290-120H120v-170l424-424 170 170Zm-141-29-28-28 56 56-28-28Z" })
                              }
                            )
                          ]
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "div",
                        {
                          className: "flex justify-center md:grid md:grid-cols-[auto_1fr] md:grid-rows-1 gap-1 items-center",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "p",
                              {
                                onClick: (e3) => e3.stopPropagation(),
                                className: "text-black text-sm overflow-x-auto",
                                children: address ? address.miniaddress : ""
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("button", { className: "hidden md:block", onClick: handleCopyClick, children: [
                              !copyState && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "svg",
                                {
                                  className: "fill-black",
                                  xmlns: "http://www.w3.org/2000/svg",
                                  height: "20",
                                  viewBox: "0 -960 960 960",
                                  width: "20",
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z" })
                                }
                              ),
                              copyState && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "svg",
                                {
                                  className: "fill-[#FFA010]",
                                  xmlns: "http://www.w3.org/2000/svg",
                                  height: "20",
                                  viewBox: "0 -960 960 960",
                                  width: "20",
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m438-240 226-226-58-58-169 169-84-84-57 57 142 142ZM240-80q-33 0-56.5-23.5T160-160v-640q0-33 23.5-56.5T240-880h320l240 240v480q0 33-23.5 56.5T720-80H240Zm280-520v-200H240v640h480v-440H520ZM240-800v200-200 640-640Z" })
                                }
                              )
                            ] })
                          ]
                        }
                      )
                    ] }),
                    copyState && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-center gap-1 items-center animate-fadeIn", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black truncate gap-1", children: "Copied" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "svg",
                        {
                          className: "",
                          xmlns: "http://www.w3.org/2000/svg",
                          height: "24",
                          viewBox: "0 -960 960 960",
                          width: "24",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z" })
                        }
                      )
                    ] })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  className: "bg-black text-white w-full px-4 py-2 flex items-center justify-center",
                  onClick: () => setShowFullList((prevState) => !prevState),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "svg",
                    {
                      className: "fill-white ".concat(showFullList ? "arrow-active" : "arrow-passive"),
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "24",
                      viewBox: "0 -960 960 960",
                      width: "24",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m296-345-56-56 240-240 240 240-56 56-184-184-184 184Z" })
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "ul",
                {
                  id: "address-selector",
                  "aria-expanded": !showFullList,
                  className: "accordion-content rounded bg-white h-[250px] divide-y-1",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "mx-4 my-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        extraClass: "text-center md:text-left",
                        id: "search",
                        name: "search",
                        disabled: false,
                        value: filterText,
                        onChange: (e3) => setFilterText(e3.target.value),
                        type: "search",
                        placeholder: "Search nickname/address"
                      }
                    ) }),
                    !simpleAddresses.filter(
                      (a4) => a4.miniaddress.includes(filterText) || _nicknameAddress && _nicknameAddress[a4.miniaddress] && _nicknameAddress[a4.miniaddress].includes(filterText)
                    ).length && /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "truncate mb-2 px-4 p-4 first:mt-2 text-black hover:bg-slate-50 hover:cursor-pointer", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-center font-medium", children: "No results found" }) }),
                    simpleAddresses.filter(
                      (a4) => a4.miniaddress.includes(filterText) || _nicknameAddress && _nicknameAddress[a4.miniaddress] && _nicknameAddress[a4.miniaddress].includes(filterText)
                    ).map((a4) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "li",
                      {
                        onClick: () => {
                          setAddress(a4);
                          if (filterText.length) {
                            setFilterText("");
                          }
                          setShowFullList(false);
                        },
                        className: "truncate mb-2 px-4 p-4 first:mt-2 text-black hover:bg-slate-50 hover:cursor-pointer",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold truncate text-center md:text-left", children: _nicknameAddress && _nicknameAddress[a4.miniaddress] ? _nicknameAddress[a4.miniaddress] : "Untitled address" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-sm hidden md:block truncate text-center md:text-left", children: a4.miniaddress }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-sm  md:hidden text-center md:text-left", children: truncateString(a4.miniaddress, 12, 12) })
                        ]
                      },
                      a4.address
                    ))
                  ]
                }
              )
            ] })
          }
        )
      ] })
    }
  ) });
};
const validationSchema = () => {
  return create().shape({
    address: create$1().matches(/0|M[xX][0-9a-zA-Z]+/, "Invalid Address.").min(59, "Invalid Address, too short.").max(66, "Invalid Address, too long.").required("Field Required")
  });
};
const Status = () => {
  const { setOpenDrawer, loaded } = reactExports.useContext(appContext);
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const [status, setStatus] = reactExports.useState(void 0);
  const [showFullStatus, setShowFullStatus] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (loaded.current === true) {
      callStatus().then((status2) => {
        setStatus(status2);
      });
    }
  }, [loaded.current]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    showFullStatus && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          onClick: () => setShowFullStatus(false),
          className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Grid,
            {
              variant: "lg",
              title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "svg",
                  {
                    className: "fill-white hover:cursor-pointer",
                    onClick: (e3) => {
                      e3.stopPropagation();
                      setShowFullStatus(false);
                    },
                    xmlns: "http://www.w3.org/2000/svg",
                    height: "24",
                    viewBox: "0 -960 960 960",
                    width: "24",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
                  }
                ),
                "Full Status"
              ] }),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "div",
                {
                  onClick: (e3) => e3.stopPropagation(),
                  className: "flex flex-col gap-4 mx-4 rounded bg-white bg-opacity-90 p-4 mb-4 shadow-sm",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-scroll", children: /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { className: "text-black text-sm break-all max-h-[calc(100vh_-_56px)]", children: JSON.stringify(status, null, 2) }) })
                }
              )
            }
          )
        }
      ),
      document.body
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Grid,
      {
        title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "svg",
            {
              onClick: () => setOpenDrawer(true),
              className: "block md:hidden fill-white",
              xmlns: "http://www.w3.org/2000/svg",
              height: "24",
              viewBox: "0 -960 960 960",
              width: "24",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" })
            }
          ),
          "Status"
        ] }),
        variant: "lg",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          CardContent,
          {
            header: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold", children: "Overview" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "button",
                {
                  disabled: !status,
                  className: "flex text-sm text-black font-semibold hover:cursor-pointer hover:opacity-90 border-2 border-black rounded-lg py-2 px-4 hover:bg-black hover:text-white hover:fill-[#363AFF] group",
                  onClick: () => setShowFullStatus(true),
                  children: [
                    "View Full Status",
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        height: "14",
                        viewBox: "0 -960 960 960",
                        width: "14",
                        className: "group-hover:animate-pulse",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m136-240-56-56 296-298 160 160 208-206H640v-80h240v240h-80v-104L536-320 376-480 136-240Z" })
                      }
                    )
                  ]
                }
              )
            ] }),
            content: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "divide-y-2 mb-4", children: [
              !status && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "animate-spin ",
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "24",
                  viewBox: "0 -960 960 960",
                  width: "24",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M480-80q-82 0-155-31.5t-127.5-86Q143-252 111.5-325T80-480q0-83 31.5-155.5t86-127Q252-817 325-848.5T480-880q17 0 28.5 11.5T520-840q0 17-11.5 28.5T480-800q-133 0-226.5 93.5T160-480q0 133 93.5 226.5T480-160q133 0 226.5-93.5T800-480q0-17 11.5-28.5T840-520q17 0 28.5 11.5T880-480q0 82-31.5 155t-86 127.5q-54.5 54.5-127 86T480-80Z" })
                }
              ) }),
              !!status && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { truncate: false, title: "Node Version", value: status == null ? void 0 : status.version }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { truncate: false, title: "Uptime", value: status == null ? void 0 : status.uptime }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Vault Locked", value: (status == null ? void 0 : status.locked) ? "True" : "False" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    title: "Length",
                    value: makeMinimaNumber(status.length.toString(), 2e3)
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Chain Weight", value: status == null ? void 0 : status.weight.toString() }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    truncate: false,
                    title: "Total Minima (global)",
                    value: makeMinimaNumber(status.minima.toString(), 2e3)
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    truncate: false,
                    title: "Total Coins (global)",
                    value: makeMinimaNumber(status.coins.toString(), 2e3)
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  KeyValue,
                  {
                    truncate: false,
                    clipboard: true,
                    title: "Your Data Path",
                    value: status == null ? void 0 : status.data
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "RAM Usage", value: status == null ? void 0 : status.memory.ram }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(KeyValue, { title: "Disk Usage", value: status == null ? void 0 : status.memory.disk })
              ] })
            ] }) })
          }
        )
      }
    )
  ] });
};
function isString(myString) {
  return myString.length !== void 0;
}
function isBlob(blob) {
  return blob !== void 0;
}
const AddImage = ({ onImageChange = () => {
}, formik }) => {
  const [selectedFile, setSelectedFile] = React.useState(null);
  const handleCapture = ({ target }) => {
    setSelectedFile(target.files[0]);
    getDataUrlFromBlob(target.files[0]).then((imageDataUrl) => {
      onImageChange(imageDataUrl, target.files[0]);
      formik.setFieldValue("url", imageDataUrl);
    }, console.error);
  };
  const getDataUrlFromBlob = (blob) => {
    const _isBlob = isBlob(blob);
    if (!_isBlob) {
      return Promise.reject("Image is not a Blob");
    }
    return new Promise((resolve2, reject) => {
      var reader = new FileReader();
      reader.readAsDataURL(blob);
      reader.onload = function() {
        if (isString(reader.result)) {
          resolve2(reader.result);
        } else {
          reject("Error: could not get data url from image");
        }
      };
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    formik.values.url && selectedFile ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("img", { alt: "", src: formik.values.url }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-sm", children: selectedFile.name }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "svg",
        {
          onClick: () => formik.setFieldValue("url", ""),
          className: "absolute right-0 top-0",
          xmlns: "http://www.w3.org/2000/svg",
          height: "24",
          viewBox: "0 -960 960 960",
          width: "24",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z" })
        }
      )
    ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-slate-200 bg-opacity-80 rounded max-w-max flex flex-col justify-center items-center py-12 px-12 hover:bg-opacity-50 hover:cursor-pointer", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "svg",
        {
          className: "fill-black",
          xmlns: "http://www.w3.org/2000/svg",
          height: "24",
          viewBox: "0 -960 960 960",
          width: "24",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M440-320v-326L336-542l-56-58 200-200 200 200-56 58-104-104v326h-80ZM240-160q-33 0-56.5-23.5T160-240v-120h80v120h480v-120h80v120q0 33-23.5 56.5T720-160H240Z" })
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-sm", children: "Click here to upload" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "input",
      {
        disabled: formik.isSubmitting,
        id: "url",
        name: "url",
        type: "file",
        hidden: true,
        accept: "image/*",
        onChange: handleCapture,
        onBlur: formik.handleBlur
      },
      formik.values.url
    )
  ] });
};
const FieldWrapper = newStyled("div")(_e2 || (_e2 = __template(["\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    > svg {\n        float: right !important;\n    }\n    > div {\n        margin-bottom: 8px;\n    }\n"])));
const FormFieldWrapper = ({ children, help, required = false }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(FieldWrapper, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Stack$5, { alignItems: "flex-start", justifyContent: "center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography$1, { variant: "caption", children: [
      help,
      " ",
      required && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "*" })
    ] }) }),
    children
  ] });
};
const FormImageUrlSelect = () => {
  const [imageSelection, setMyImageSelection] = React.useState("Upload image");
  const formik = useFormikContext();
  const handleChange = (option) => {
    setMyImageSelection(option);
    formik.setFieldValue("url", "");
  };
  const [, setFile] = React.useState(null);
  const [, setImageDataUrl] = React.useState("");
  const onImageChange = (imageDataUrl, file) => {
    setImageDataUrl(imageDataUrl);
    setFile(file);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Select,
      {
        current: imageSelection,
        setCurrent: handleChange,
        def: "Upload image",
        options: ["Upload image", "Url"]
      }
    ),
    imageSelection === "Upload image" ? /* @__PURE__ */ jsxRuntimeExports.jsx(
      FormFieldWrapper,
      {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Box$1,
          {
            component: "label",
            sx: {
              borderColor: formik.touched.url && Boolean(formik.errors.url) ? "#FCBEBD!important" : "none",
              marginBottom: formik.touched.url && Boolean(formik.errors.url) ? "30px!important" : "8px",
              "::after": {
                display: formik.touched.url && Boolean(formik.errors.url) ? "flex" : "none",
                content: formik.touched.url && Boolean(formik.errors.url) ? '"'.concat(formik.errors.url, '"') : '" "',
                color: "rgb(211, 47, 47)",
                backgroundColor: "#FCBEBD",
                width: "100%",
                textAlign: "center",
                fontSize: "0.8rem",
                fontFamily: "Manrope-semibold",
                padding: "5px",
                borderBottomLeftRadius: "8px",
                borderBottomRightRadius: "8px",
                marginTop: "0.5px"
              }
            },
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(AddImage, { formik, onImageChange })
          }
        ),
        help: ""
      }
    ) : /* @__PURE__ */ jsxRuntimeExports.jsx(
      Input,
      {
        id: "url",
        type: "text",
        placeholder: "Icon URL",
        disabled: formik.isSubmitting,
        ...formik.getFieldProps("url"),
        error: formik.touched.url && formik.errors.url ? formik.errors.url : false
      }
    )
  ] });
};
const TokenCreation = () => {
  const mySchema = useMySchema$1();
  const { balance: wallet, setOpenDrawer } = reactExports.useContext(appContext);
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const userLockedVault = useIsVaultLocked();
  const [error, setError] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(0);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Grid,
    {
      variant: "lg",
      title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        " ",
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            onClick: (e3) => {
              e3.stopPropagation();
              setOpenDrawer(true);
            },
            className: "block md:hidden fill-white",
            xmlns: "http://www.w3.org/2000/svg",
            height: "24",
            viewBox: "0 -960 960 960",
            width: "24",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" })
          }
        ),
        "Token Creation"
      ] }),
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Formik,
        {
          initialValues: {
            funds: wallet[0],
            name: "",
            amount: "",
            url: "",
            description: "",
            burn: "",
            webvalidate: "",
            ticker: ""
          },
          onSubmit: async (formData) => {
            setStep(0);
            setLoading(true);
            const token2 = {
              name: formData.name,
              url: formData.url,
              description: formData.description,
              ticker: formData.ticker,
              webvalidate: formData.webvalidate
            };
            try {
              const resp = await createToken(token2, formData.amount, 8);
              setLoading(false);
              setStep(resp);
            } catch (error2) {
              setError(error2);
            }
          },
          validationSchema: mySchema,
          children: ({
            handleSubmit,
            getFieldProps,
            errors,
            isValid: isValid2,
            isSubmitting,
            values: values2,
            touched,
            resetForm,
            submitForm,
            dirty
          }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            userLockedVault && reactDomExports.createPortal(
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max max-h-[calc(100%_-_16px)] overflow-y-scroll", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 grid-rows-1 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "svg",
                    {
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "80",
                      viewBox: "0 -960 960 960",
                      width: "80",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M240-80q-33 0-56.5-23.5T160-160v-400q0-33 23.5-56.5T240-640h40v-80q0-83 58.5-141.5T480-920q83 0 141.5 58.5T680-720v80h40q33 0 56.5 23.5T800-560v400q0 33-23.5 56.5T720-80H240Zm0-80h480v-400H240v400Zm240-120q33 0 56.5-23.5T560-360q0-33-23.5-56.5T480-440q-33 0-56.5 23.5T400-360q0 33 23.5 56.5T480-280ZM360-640h240v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85v80ZM240-160v-400 400Z" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-xl font-semibold mt-4", children: "Your node is locked" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "Please unlock your node and refresh this page to access token creation." })
                ] }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
              ] }) }) }),
              document.body
            ),
            step === 1 && reactDomExports.createPortal(
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "lg", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 h-max max-h-[calc(100%_-_16px)] overflow-y-scroll", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold mb-8 rounded-l", children: "Token creation review" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "divide-y-2 mb-8", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " bg-white flex gap-4 truncate", children: [
                    !!values2.url.length && /* @__PURE__ */ jsxRuntimeExports.jsx("img", { className: "w-[80px] h-[80px]", src: values2.url, alt: "" }),
                    !values2.url.length && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-[80px] h-[80px] flex items-center justify-center bg-slate-200", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        height: "48",
                        viewBox: "0 -960 960 960",
                        width: "48",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M360-390q-21 0-35.5-14.5T310-440q0-21 14.5-35.5T360-490q21 0 35.5 14.5T410-440q0 21-14.5 35.5T360-390Zm240 0q-21 0-35.5-14.5T550-440q0-21 14.5-35.5T600-490q21 0 35.5 14.5T650-440q0 21-14.5 35.5T600-390ZM480-160q134 0 227-93t93-227q0-24-3-46.5T786-570q-21 5-42 7.5t-44 2.5q-91 0-172-39T390-708q-32 78-91.5 135.5T160-486v6q0 134 93 227t227 93Zm0 80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm-54-715q42 70 114 112.5T700-640q14 0 27-1.5t27-3.5q-42-70-114-112.5T480-800q-14 0-27 1.5t-27 3.5ZM177-581q51-29 89-75t57-103q-51 29-89 75t-57 103Zm249-214Zm-103 36Z" })
                      }
                    ) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "my-auto truncate max-w-[360px]", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold text-black", children: values2.name }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-normal truncate text-black", children: makeMinimaNumber(values2.amount, 2e3) })
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    KeyValue,
                    {
                      title: "Description",
                      value: values2.description.length ? values2.description : "N/A"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    KeyValue,
                    {
                      title: "Web validation",
                      value: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        !!values2.webvalidate.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "a",
                          {
                            className: "hover:cursor-pointer text-blue-400 hover:underline",
                            href: values2.webvalidate,
                            target: "_blank",
                            children: values2.webvalidate
                          }
                        ),
                        !values2.webvalidate.length && "N/A"
                      ] })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    KeyValue,
                    {
                      title: "Burn",
                      value: parseInt(values2.burn) > 0 ? makeMinimaNumber(values2.burn, 2e3) : "0"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      disabled: isSubmitting,
                      onClick: () => submitForm(),
                      variant: "primary",
                      children: "Submit"
                    }
                  ),
                  !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(0), variant: "secondary", children: "Cancel" })
                ] })
              ] }) }) }),
              document.body
            ),
            loading && reactDomExports.createPortal(
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Lottie,
                    {
                      className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                      animationData: Loading,
                      loop: true
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Posting transaction..." })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
              ] }) }) }),
              document.body
            ),
            step === 2 && reactDomExports.createPortal(
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Lottie,
                    {
                      className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                      animationData: Success,
                      loop: false
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Success" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "The transaction has been posted and should arrive shortly." })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    onClick: () => {
                      setStep(0);
                      resetForm();
                    },
                    variant: "secondary",
                    children: "Close"
                  }
                ) })
              ] }) }) }),
              document.body
            ),
            step === 3 && reactDomExports.createPortal(
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max max-h-[calc(100%_-_16px)] overflow-y-scroll", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "svg",
                    {
                      className: "animate-pulse temporary-pulse fill-[rgb(78,227,193)] mb-4 mx-auto mt-8",
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "64",
                      viewBox: "0 -960 960 960",
                      width: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M160-200v-80h80v-280q0-83 50-147.5T420-792v-28q0-25 17.5-42.5T480-880q25 0 42.5 17.5T540-820v28q80 20 130 84.5T720-560v280h80v80H160Zm320-300Zm0 420q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-280h320v-280q0-66-47-113t-113-47q-66 0-113 47t-47 113v280Z" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Transaction pending" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "The transaction is awaiting confirmation. You have to accept this pending action in the Pending minidapp." })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    onClick: () => {
                      setStep(0);
                      resetForm();
                    },
                    variant: "secondary",
                    children: "Close"
                  }
                ) })
              ] }) }) }),
              document.body
            ),
            error && reactDomExports.createPortal(
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "svg",
                    {
                      className: "animate-pulse temporary-pulse fill-[var(--status-red)] mb-4\n                                                mx-auto mt-8",
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "64",
                      viewBox: "0 -960 960 960",
                      width: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M480-280q17 0 28.5-11.5T520-320q0-17-11.5-28.5T480-360q-17 0-28.5 11.5T440-320q0 17 11.5 28.5T480-280Zm-40-160h80v-240h-80v240Zm40 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Hmm... something went wrong!" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center break-all", children: error })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    onClick: () => {
                      setLoading(false);
                      setError(false);
                    },
                    variant: "secondary",
                    children: "Close"
                  }
                ) })
              ] }) }) }),
              document.body
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              CardContent,
              {
                header: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
                content: /* @__PURE__ */ jsxRuntimeExports.jsx("form", { onSubmit: handleSubmit, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FormImageUrlSelect, {}),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      id: "name",
                      type: "text",
                      disabled: isSubmitting,
                      placeholder: "Name",
                      ...getFieldProps("name"),
                      error: touched.name && errors.name ? errors.name : false
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-slate-500 text-sm mb-4", children: [
                    "Enter a name for your token ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "red-bad", children: "*" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      id: "amount",
                      type: "text",
                      disabled: isSubmitting,
                      placeholder: "Amount",
                      ...getFieldProps("amount"),
                      error: touched.amount && errors.amount ? errors.amount : false
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-slate-500 text-sm mb-4", children: [
                    "Enter a total supply for your token ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "red-bad", children: "*" })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      id: "description",
                      type: "text",
                      disabled: isSubmitting,
                      placeholder: "Description",
                      ...getFieldProps("description"),
                      max: 255,
                      extraClass: "pr-20 truncate",
                      error: touched.description && errors.description ? errors.description : false,
                      endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: values2.description.length >= 255 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "m-auto text-sm flex items-center justify-center text-black font-semibold", children: values2.description.length + "/255" }) })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-slate-500 text-sm mb-4", children: "Enter a description about your token" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      id: "ticker",
                      type: "text",
                      disabled: isSubmitting,
                      placeholder: "Ticker symbol",
                      ...getFieldProps("ticker"),
                      error: touched.ticker && errors.ticker ? errors.ticker : false
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-slate-500 text-sm mb-4", children: "Enter a ticker symbol (eg. MINIMA, BTC, ETH)" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      id: "webvalidate",
                      type: "text",
                      disabled: isSubmitting,
                      placeholder: "Web validation URL",
                      ...getFieldProps("webvalidate"),
                      error: touched.webvalidate && errors.webvalidate ? errors.webvalidate : false
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-slate-500 text-sm mb-4", children: "Validate your token by hosting a public .txt file containing the tokenid on your own server or website. Create the link to the .txt file in advance and add the tokenid after creating the token." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Burn, {}),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      extraClass: "mt-8 md:mt-16",
                      onClick: () => setStep(1),
                      variant: "primary",
                      disabled: !touched.amount || !touched.name || !isValid2,
                      children: "Review"
                    }
                  )
                ] }) })
              }
            )
          ] })
        }
      )
    }
  );
};
const useMySchema$1 = () => {
  const { balance: wallet } = reactExports.useContext(appContext);
  return create().shape({
    name: create$1().required("This field is required").matches(/^[^\\;]+$/, "Invalid characters."),
    amount: create$1().required("This field is required").matches(
      /^[^a-zA-Z\\;'",]+$/,
      'Invalid number.  Make sure to use only digits, "." for decimals and nothing for thousands. (e.g 1000.234)'
    ).test("check-my-amount", "Invalid amount", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return false;
      }
      if (!Number(val2)) {
        return createError({
          path,
          message: 'Invalid number.  Make sure to only use "." for decimals and nothing for thousands.'
        });
      }
      if (new Decimal(val2).greaterThan(new Decimal(1e12))) {
        return createError({
          path,
          message: "Invalid amount, cannot create more than 1 trillion tokens"
        });
      }
      if (new Decimal(val2).lessThan(new Decimal(1))) {
        return createError({
          path,
          message: "Invalid amount, must be 1 or greater"
        });
      }
      return true;
    }),
    description: create$1().min(0).max(255, "Maximum 255 characters allowed.").matches(/^[^\\;]+$/, "Invalid characters."),
    ticker: create$1().min(0).max(5, "Maximum 5 characters allowed.").matches(/^[^\\;]+$/, "Invalid characters."),
    burn: create$1().matches(
      /^[^a-zA-Z\\;'",]+$/,
      'Invalid number.  Make sure to use only digits, "." for decimals and nothing for thousands. (e.g 1000.234)'
    ).test("check-my-burnamount", "Invalid burn amount", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return true;
      }
      if (!Number(val2)) {
        return createError({
          path,
          message: 'Invalid number.  Make sure to only use "." for decimals and nothing for thousands.'
        });
      }
      const burn = new Decimal(val2);
      if (burn.greaterThan(wallet[0].sendable)) {
        return createError({
          path,
          message: "Oops, not enough funds available to burn.  You require another ".concat(burn.minus(wallet[0].sendable).toNumber(), " Minima")
        });
      }
      return true;
    }),
    url: create$1().trim().test("check-my-url", "Invalid Url.", function(val2) {
      const { path, createError, parent: parent2 } = this;
      if (val2 === void 0) {
        return true;
      }
      if (parent2.url.substring(0, "data:image".length) === "data:image") {
        return true;
      }
      if (!isValidURLAll(parent2.url)) {
        return createError({
          path,
          message: "Invalid URL"
        });
      }
      return true;
    }),
    webvalidate: create$1().test("check-my-webvalidator", "Invalid Url, must be https", function(val2) {
      const { path, createError, parent: parent2 } = this;
      if (val2 === void 0) {
        return true;
      }
      if (!isValidURLSecureOnly(parent2.webvalidate)) {
        return createError({
          path,
          message: "Invalid URL, must be https"
        });
      }
      return true;
    })
  });
};
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key2, i3;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
      key2 = sourceSymbolKeys[i3];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key2))
        continue;
      target[key2] = source[key2];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key2 = sourceKeys[i3];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function ownKeys(object2, enumerableOnly) {
  var keys2 = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object2);
    if (enumerableOnly)
      symbols2 = symbols2.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols2);
  }
  return keys2;
}
function _objectSpread(target) {
  for (var i3 = 1; i3 < arguments.length; i3++) {
    var source = arguments[i3] != null ? arguments[i3] : {};
    if (i3 % 2) {
      ownKeys(Object(source), true).forEach(function(key2) {
        _defineProperty(target, key2, source[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key2, value2) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value2;
  }
  return obj;
}
const defaultProps = {
  breakpointCols: void 0,
  // optional, number or object { default: number, [key: number]: number }
  className: void 0,
  // required, string
  columnClassName: void 0,
  // optional, string
  // Any React children. Typically an array of JSX items
  children: void 0,
  // Custom attributes, however it is advised against
  // using these to prevent unintended issues and future conflicts
  // ...any other attribute, will be added to the container
  columnAttrs: void 0,
  // object, added to the columns
  // Deprecated props
  // The column property is deprecated.
  // It is an alias of the `columnAttrs` property
  column: void 0
};
const DEFAULT_COLUMNS = 2;
class Masonry extends React.Component {
  constructor(props) {
    super(props);
    this.reCalculateColumnCount = this.reCalculateColumnCount.bind(this);
    this.reCalculateColumnCountDebounce = this.reCalculateColumnCountDebounce.bind(this);
    let columnCount;
    if (this.props.breakpointCols && this.props.breakpointCols.default) {
      columnCount = this.props.breakpointCols.default;
    } else {
      columnCount = parseInt(this.props.breakpointCols) || DEFAULT_COLUMNS;
    }
    this.state = {
      columnCount
    };
  }
  componentDidMount() {
    this.reCalculateColumnCount();
    if (window) {
      window.addEventListener("resize", this.reCalculateColumnCountDebounce);
    }
  }
  componentDidUpdate() {
    this.reCalculateColumnCount();
  }
  componentWillUnmount() {
    if (window) {
      window.removeEventListener("resize", this.reCalculateColumnCountDebounce);
    }
  }
  reCalculateColumnCountDebounce() {
    if (!window || !window.requestAnimationFrame) {
      this.reCalculateColumnCount();
      return;
    }
    if (window.cancelAnimationFrame) {
      window.cancelAnimationFrame(this._lastRecalculateAnimationFrame);
    }
    this._lastRecalculateAnimationFrame = window.requestAnimationFrame(() => {
      this.reCalculateColumnCount();
    });
  }
  reCalculateColumnCount() {
    const windowWidth = window && window.innerWidth || Infinity;
    let breakpointColsObject = this.props.breakpointCols;
    if (typeof breakpointColsObject !== "object") {
      breakpointColsObject = {
        default: parseInt(breakpointColsObject) || DEFAULT_COLUMNS
      };
    }
    let matchedBreakpoint = Infinity;
    let columns = breakpointColsObject.default || DEFAULT_COLUMNS;
    for (let breakpoint in breakpointColsObject) {
      const optBreakpoint = parseInt(breakpoint);
      const isCurrentBreakpoint = optBreakpoint > 0 && windowWidth <= optBreakpoint;
      if (isCurrentBreakpoint && optBreakpoint < matchedBreakpoint) {
        matchedBreakpoint = optBreakpoint;
        columns = breakpointColsObject[breakpoint];
      }
    }
    columns = Math.max(1, parseInt(columns) || 1);
    if (this.state.columnCount !== columns) {
      this.setState({
        columnCount: columns
      });
    }
  }
  itemsInColumns() {
    const currentColumnCount = this.state.columnCount;
    const itemsInColumns = new Array(currentColumnCount);
    const items = React.Children.toArray(this.props.children);
    for (let i3 = 0; i3 < items.length; i3++) {
      const columnIndex = i3 % currentColumnCount;
      if (!itemsInColumns[columnIndex]) {
        itemsInColumns[columnIndex] = [];
      }
      itemsInColumns[columnIndex].push(items[i3]);
    }
    return itemsInColumns;
  }
  renderColumns() {
    const {
      column: column2,
      columnAttrs = {},
      columnClassName
    } = this.props;
    const childrenInColumns = this.itemsInColumns();
    const columnWidth = "".concat(100 / childrenInColumns.length, "%");
    let className = columnClassName;
    if (className && typeof className !== "string") {
      this.logDeprecated('The property "columnClassName" requires a string');
      if (typeof className === "undefined") {
        className = "my-masonry-grid_column";
      }
    }
    const columnAttributes = _objectSpread(_objectSpread(_objectSpread({}, column2), columnAttrs), {}, {
      style: _objectSpread(_objectSpread({}, columnAttrs.style), {}, {
        width: columnWidth
      }),
      className
    });
    return childrenInColumns.map((items, i3) => {
      return /* @__PURE__ */ React.createElement("div", _extends({}, columnAttributes, {
        key: i3
      }), items);
    });
  }
  logDeprecated(message) {
    console.error("[Masonry]", message);
  }
  render() {
    const _this$props = this.props, {
      // ignored
      children,
      breakpointCols,
      columnClassName,
      columnAttrs,
      column: column2,
      // used
      className
    } = _this$props, rest = _objectWithoutProperties(_this$props, ["children", "breakpointCols", "columnClassName", "columnAttrs", "column", "className"]);
    let classNameOutput = className;
    if (typeof className !== "string") {
      this.logDeprecated('The property "className" requires a string');
      if (typeof className === "undefined") {
        classNameOutput = "my-masonry-grid";
      }
    }
    return /* @__PURE__ */ React.createElement("div", _extends({}, rest, {
      className: classNameOutput
    }), this.renderColumns());
  }
}
Masonry.defaultProps = defaultProps;
const breakpointColumnsObj = {
  default: 3,
  1100: 3,
  700: 2,
  500: 1
};
const NFTs = () => {
  const navigate = useNavigate();
  const [selectedTab, setSelectedTab] = reactExports.useState(0);
  const [showDetail, setShowDetail] = reactExports.useState(false);
  const { NFTs: NFTs2, setOpenDrawer, toggleFavourite, _favoriteTokens } = reactExports.useContext(appContext);
  const handleTabClick = (index2) => {
    setSelectedTab(index2);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Grid,
    {
      variant: "lg",
      title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            onClick: (e3) => {
              e3.stopPropagation();
              setOpenDrawer(true);
            },
            className: "block md:hidden fill-white",
            xmlns: "http://www.w3.org/2000/svg",
            height: "24",
            viewBox: "0 -960 960 960",
            width: "24",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" })
          }
        ),
        "Non-fungible Tokens"
      ] }),
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-1", children: [
        showDetail && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              onClick: () => setShowDetail(false),
              className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Grid,
                {
                  variant: "lg",
                  title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "svg",
                      {
                        className: "fill-white hover:cursor-pointer",
                        onClick: (e3) => {
                          e3.stopPropagation();
                          setShowDetail(false);
                        },
                        xmlns: "http://www.w3.org/2000/svg",
                        height: "24",
                        viewBox: "0 -960 960 960",
                        width: "24",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
                      }
                    ),
                    "NFT Details"
                  ] }),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "div",
                    {
                      onClick: (e3) => e3.stopPropagation(),
                      className: "grid grid-cols-1 md:grid-cols-[1fr_1fr] bg-white rounded mx-8 my-4 h-max py-4 px-4 md:px-0 md:py-0 gap-2",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-center items-start md:items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "rounded border", children: [
                          "url" in showDetail.name && !!showDetail.name.url.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "h-[378px] w-[378px] object-cover",
                              src: showDetail.name.url,
                              alt: "my_NFT_".concat(showDetail.tokenid)
                            }
                          ),
                          (!showDetail.name.url || "url" in showDetail.name && showDetail.name.url.length === 0) && /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "h-[378px] w-[378px] flex items-center justify-center text-slate-400", children: "No image set" })
                        ] }) }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 md:px-0 py-4 overflow-auto grid grid-rows-[2fr_1fr]", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-rows-[1fr_1fr]", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "animate-fadeIn text-inherit font-bold truncate w-full grid grid-cols-[auto_1fr] gap-1", children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "font-bold truncate text-left text-black text-xl", children: [
                                  "name" in showDetail.name && showDetail.name.name,
                                  !("name" in showDetail.name) && "N/A"
                                ] }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative", children: showDetail.name.webvalidate && showDetail.name.webvalidate.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  NFTAuthenticity,
                                  {
                                    relative: true,
                                    tokenid: showDetail.tokenid
                                  }
                                ) })
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "p-0 m-0 lowercase text-slate-500", children: [
                                "@",
                                "owner" in showDetail.name && showDetail.name.owner.length ? showDetail.name.owner : "anon"
                              ] }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "whitespace-normal break-word", children: "description" in showDetail.name && showDetail.name.description.length ? showDetail.name.description : "No description" })
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                              ("external_url" in showDetail.name || "webvalidate" in showDetail.name) && /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-extrabold text-lg", children: "Extra data" }),
                              "external_url" in showDetail.name && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { children: "External Url" }),
                                showDetail.name.external_url.length ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "a",
                                  {
                                    className: "text-blue-500",
                                    target: "_blank",
                                    href: showDetail.name.external_url,
                                    children: showDetail.name.external_url
                                  }
                                ) : /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-slate-500", children: "None set" })
                              ] }),
                              "webvalidate" in showDetail.name && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { children: "Webvalidate" }),
                                showDetail.name.webvalidate.length ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "a",
                                  {
                                    className: "text-blue-500",
                                    target: "_blank",
                                    href: showDetail.name.webvalidate,
                                    children: showDetail.name.webvalidate
                                  }
                                ) : /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-slate-500", children: "None set" })
                              ] })
                            ] })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-end mr-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              onClick: () => navigate("/send?tokenid=" + showDetail.tokenid),
                              className: "bg-black hover:bg-opacity-90 w-full rounded-lg p-4 text-white h-max",
                              children: "Transfer"
                            }
                          ) })
                        ] })
                      ]
                    }
                  )
                }
              )
            }
          ),
          document.body
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          CardContent,
          {
            header: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-opacity-50 bg-white px-4 py-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "text-black opacity-60 text-sm", children: "Total Collected" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black", children: NFTs2.length })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-opacity-50 bg-white px-4 py-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "text-black opacity-60 text-sm", children: "Total Favorited" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black", children: _favoriteTokens.length })
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => navigate("createnft"),
                    className: "flex text-sm text-black font-semibold hover:cursor-pointer hover:opacity-90 border-2 border-black rounded-lg py-2 px-4 hover:bg-black hover:text-white hover:fill-[#363AFF] transition-all delay-50 ",
                    children: "Create"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => handleTabClick(0),
                    className: "flex text-sm text-black font-semibold hover:cursor-pointer hover:opacity-90 border-2 border-black rounded-lg py-2 px-4 hover:bg-black hover:text-white hover:fill-[#363AFF] transition-all delay-50 ".concat(selectedTab === 0 ? "bg-black text-white" : ""),
                    children: "Collection"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => handleTabClick(1),
                    className: "flex text-sm text-black font-semibold hover:cursor-pointer hover:opacity-90 border-2 border-black rounded-lg py-2 px-4 hover:bg-black hover:text-white hover:fill-[#363AFF] transition-all delay-50 ".concat(selectedTab === 1 ? "bg-black text-white" : ""),
                    children: "Favorites"
                  }
                )
              ] })
            ] }),
            content: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              selectedTab === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                Masonry,
                {
                  breakpointCols: breakpointColumnsObj,
                  className: "my-masonry-grid",
                  columnClassName: "my-masonry-grid_column",
                  children: NFTs2 && !!NFTs2.length && NFTs2.map((w3) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "div",
                    {
                      onClick: () => setShowDetail(w3),
                      className: "rounded bg-white hover:scale-95 delay-90 transition duration-300 ease-in-out",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative group", children: [
                          "url" in w3.name && !!w3.name.url.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-[-webkit-fill-available]",
                              src: w3.name.url,
                              alt: ""
                            }
                          ),
                          ("url" in w3.name && !w3.name.url.length || !w3.name.url) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-[-webkit-fill-available]",
                              alt: "token-icon",
                              src: "https://robohash.org/".concat(w3.tokenid)
                            }
                          ) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute group-hover:grid hidden animate-fadeIn bottom-0 text-inherit font-bold truncate w-full grid-cols-[1fr_auto]", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "pl-2", children: "name" in w3.name ? w3.name.name : "N/A" }),
                            w3.name.webvalidate && w3.name.webvalidate.length && /* @__PURE__ */ jsxRuntimeExports.jsx(NFTAuthenticity, { tokenid: w3.tokenid })
                          ] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-white p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "lowercase font-semibold truncate", children: [
                            "@",
                            "owner" in w3.name && w3.name.owner.length ? w3.name.owner : "anon"
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            _favoriteTokens.includes(w3.tokenid) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "svg",
                              {
                                onClick: (e3) => {
                                  e3.stopPropagation();
                                  toggleFavourite(w3.tokenid);
                                },
                                className: "fill-blue-400",
                                xmlns: "http://www.w3.org/2000/svg",
                                height: "24",
                                viewBox: "0 -960 960 960",
                                width: "24",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m479.761-109-63.5-57.022q-101.957-91.717-168.555-158.434-66.597-66.718-105.717-119.816-39.12-53.098-54.74-97.815Q71.63-586.804 71.63-634q0-97.587 65.272-162.978 65.272-65.392 162.859-65.392 51.761 0 98.522 21.044 46.76 21.043 81.478 59.847 34.717-38.804 81.478-59.847Q608-862.37 659.761-862.37q97.587 0 163.098 65.392Q888.37-731.587 888.37-634q0 46.957-15.5 91.674-15.5 44.717-54.739 97.696-39.24 52.978-105.957 119.815-66.717 66.837-168.913 158.793L479.761-109Z" })
                              }
                            ),
                            !_favoriteTokens.includes(w3.tokenid) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "svg",
                              {
                                onClick: (e3) => {
                                  e3.stopPropagation();
                                  toggleFavourite(w3.tokenid);
                                },
                                className: "hover:cursor-pointer hover:animate-pulse hover:fill-red-600",
                                xmlns: "http://www.w3.org/2000/svg",
                                height: "24",
                                viewBox: "0 -960 960 960",
                                width: "24",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M440-501Zm0 381L313-234q-72-65-123.5-116t-85-96q-33.5-45-49-87T40-621q0-94 63-156.5T260-840q52 0 99 22t81 62q34-40 81-62t99-22q81 0 136 45.5T831-680h-85q-18-40-53-60t-73-20q-51 0-88 27.5T463-660h-46q-31-45-70.5-72.5T260-760q-57 0-98.5 39.5T120-621q0 33 14 67t50 78.5q36 44.5 98 104T440-228q26-23 61-53t56-50l9 9 19.5 19.5L605-283l9 9q-22 20-56 49.5T498-172l-58 52Zm280-160v-120H600v-80h120v-120h80v120h120v80H800v120h-80Z" })
                              }
                            )
                          ] })
                        ] }) })
                      ]
                    },
                    "my_NFT_".concat(w3.tokenid)
                  ))
                }
              ),
              selectedTab === 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                Masonry,
                {
                  breakpointCols: breakpointColumnsObj,
                  className: "my-masonry-grid",
                  columnClassName: "my-masonry-grid_column",
                  children: _favoriteTokens && !!_favoriteTokens.length && NFTs2.filter((t3) => _favoriteTokens.includes(t3.tokenid)).map((w3) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "div",
                    {
                      onClick: () => setShowDetail(w3),
                      className: "rounded bg-white hover:scale-95 delay-90 transition duration-300 ease-in-out",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative group", children: [
                          "url" in w3.name && !!w3.name.url.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-[-webkit-fill-available]",
                              src: w3.name.url,
                              alt: ""
                            }
                          ),
                          ("url" in w3.name && !w3.name.url.length || !w3.name.url) && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-[-webkit-fill-available]",
                              alt: "token-icon",
                              src: "https://robohash.org/".concat(w3.tokenid)
                            }
                          ) }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute group-hover:grid hidden animate-fadeIn bottom-0 text-inherit font-bold truncate w-full grid-cols-[1fr_auto]", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "pl-2", children: "name" in w3.name ? w3.name.name : "N/A" }),
                            w3.name.webvalidate && w3.name.webvalidate.length && /* @__PURE__ */ jsxRuntimeExports.jsx(NFTAuthenticity, { tokenid: w3.tokenid })
                          ] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-white p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] gap-1", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "lowercase font-semibold truncate", children: [
                            "@",
                            "owner" in w3.name && w3.name.owner.length ? w3.name.owner : "anon"
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                            _favoriteTokens.includes(w3.tokenid) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "svg",
                              {
                                onClick: (e3) => {
                                  e3.stopPropagation();
                                  toggleFavourite(w3.tokenid);
                                },
                                className: "fill-blue-400",
                                xmlns: "http://www.w3.org/2000/svg",
                                height: "24",
                                viewBox: "0 -960 960 960",
                                width: "24",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m479.761-109-63.5-57.022q-101.957-91.717-168.555-158.434-66.597-66.718-105.717-119.816-39.12-53.098-54.74-97.815Q71.63-586.804 71.63-634q0-97.587 65.272-162.978 65.272-65.392 162.859-65.392 51.761 0 98.522 21.044 46.76 21.043 81.478 59.847 34.717-38.804 81.478-59.847Q608-862.37 659.761-862.37q97.587 0 163.098 65.392Q888.37-731.587 888.37-634q0 46.957-15.5 91.674-15.5 44.717-54.739 97.696-39.24 52.978-105.957 119.815-66.717 66.837-168.913 158.793L479.761-109Z" })
                              }
                            ),
                            !_favoriteTokens.includes(w3.tokenid) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "svg",
                              {
                                onClick: (e3) => {
                                  e3.stopPropagation();
                                  toggleFavourite(w3.tokenid);
                                },
                                className: "hover:cursor-pointer hover:animate-pulse hover:fill-red-600",
                                xmlns: "http://www.w3.org/2000/svg",
                                height: "24",
                                viewBox: "0 -960 960 960",
                                width: "24",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M440-501Zm0 381L313-234q-72-65-123.5-116t-85-96q-33.5-45-49-87T40-621q0-94 63-156.5T260-840q52 0 99 22t81 62q34-40 81-62t99-22q81 0 136 45.5T831-680h-85q-18-40-53-60t-73-20q-51 0-88 27.5T463-660h-46q-31-45-70.5-72.5T260-760q-57 0-98.5 39.5T120-621q0 33 14 67t50 78.5q36 44.5 98 104T440-228q26-23 61-53t56-50l9 9 19.5 19.5L605-283l9 9q-22 20-56 49.5T498-172l-58 52Zm280-160v-120H600v-80h120v-120h80v120h120v80H800v120h-80Z" })
                              }
                            )
                          ] })
                        ] }) })
                      ]
                    },
                    "my_NFT_".concat(w3.tokenid)
                  ))
                }
              ),
              selectedTab === 0 && NFTs2.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "No NFTs yet" }) }),
              selectedTab === 1 && _favoriteTokens.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "No favorites yet" }) })
            ] })
          }
        )
      ] })
    }
  );
};
const CreateNFTForm = () => {
  const mySchema = useMySchema();
  const navigate = useNavigate();
  const { balance: wallet, maximaName } = reactExports.useContext(appContext);
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const userLockedVault = useIsVaultLocked();
  const [error, setError] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(0);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Grid,
    {
      variant: "lg",
      title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            onClick: (e3) => {
              e3.stopPropagation();
              navigate(-1);
            },
            className: "fill-white hover:cursor-pointer",
            xmlns: "http://www.w3.org/2000/svg",
            height: "24",
            viewBox: "0 -960 960 960",
            width: "24",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m313-440 224 224-57 56-320-320 320-320 57 56-224 224h487v80H313Z" })
          }
        ),
        "Back"
      ] }),
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        userLockedVault && reactDomExports.createPortal(
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 grid-rows-1 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "80",
                  viewBox: "0 -960 960 960",
                  width: "80",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M240-80q-33 0-56.5-23.5T160-160v-400q0-33 23.5-56.5T240-640h40v-80q0-83 58.5-141.5T480-920q83 0 141.5 58.5T680-720v80h40q33 0 56.5 23.5T800-560v400q0 33-23.5 56.5T720-80H240Zm0-80h480v-400H240v400Zm240-120q33 0 56.5-23.5T560-360q0-33-23.5-56.5T480-440q-33 0-56.5 23.5T400-360q0 33 23.5 56.5T480-280ZM360-640h240v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85v80ZM240-160v-400 400Z" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-xl font-semibold mt-4", children: "Your node is locked" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "Please unlock your node and refresh this page to access token creation." })
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
          ] }) }) }),
          document.body
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Formik,
          {
            initialValues: {
              funds: wallet[0],
              url: "",
              amount: "",
              name: "",
              description: "",
              external_url: "",
              owner: maximaName && typeof maximaName === "string" ? maximaName : "",
              creation_date: "",
              webvalidate: "",
              burn: ""
            },
            onSubmit: async (formData) => {
              setStep(0);
              setLoading(true);
              const token2 = {
                name: formData.name,
                url: formData.url,
                description: formData.description,
                webvalidate: formData.webvalidate,
                owner: formData.owner,
                external_url: formData.external_url
              };
              try {
                const resp = await createToken(token2, formData.amount, 0);
                setLoading(false);
                setStep(resp);
              } catch (error2) {
                setError(error2);
              }
            },
            validationSchema: mySchema,
            children: ({
              handleSubmit,
              getFieldProps,
              errors,
              isValid: isValid2,
              isSubmitting,
              submitForm,
              values: values2,
              resetForm,
              touched
            }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              step === 1 && reactDomExports.createPortal(
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "lg", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 h-max max-h-[calc(100%_-_16px)] overflow-y-scroll", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black font-semibold mb-8 rounded-l", children: "Token creation review" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "divide-y-2 mb-8", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " bg-white flex gap-4 truncate", children: [
                      !!values2.url.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "img",
                        {
                          className: "w-[80px] h-[80px]",
                          src: values2.url,
                          alt: ""
                        }
                      ),
                      !values2.url.length && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-[80px] h-[80px] flex items-center justify-center bg-slate-200", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "svg",
                        {
                          xmlns: "http://www.w3.org/2000/svg",
                          height: "48",
                          viewBox: "0 -960 960 960",
                          width: "48",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M360-390q-21 0-35.5-14.5T310-440q0-21 14.5-35.5T360-490q21 0 35.5 14.5T410-440q0 21-14.5 35.5T360-390Zm240 0q-21 0-35.5-14.5T550-440q0-21 14.5-35.5T600-490q21 0 35.5 14.5T650-440q0 21-14.5 35.5T600-390ZM480-160q134 0 227-93t93-227q0-24-3-46.5T786-570q-21 5-42 7.5t-44 2.5q-91 0-172-39T390-708q-32 78-91.5 135.5T160-486v6q0 134 93 227t227 93Zm0 80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm-54-715q42 70 114 112.5T700-640q14 0 27-1.5t27-3.5q-42-70-114-112.5T480-800q-14 0-27 1.5t-27 3.5ZM177-581q51-29 89-75t57-103q-51 29-89 75t-57 103Zm249-214Zm-103 36Z" })
                        }
                      ) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "my-auto truncate max-w-[360px]", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold text-black", children: values2.name }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-normal truncate text-black", children: makeMinimaNumber(values2.amount, 2e3) })
                      ] })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      KeyValue,
                      {
                        title: "Creator",
                        value: values2.owner.length ? values2.owner : "Anonymous"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      KeyValue,
                      {
                        title: "Description",
                        value: values2.description.length ? values2.description : "N/A"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      KeyValue,
                      {
                        title: "Web validation",
                        value: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                          !!values2.webvalidate.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "a",
                            {
                              className: "hover:cursor-pointer text-blue-400 hover:underline",
                              href: values2.webvalidate,
                              target: "_blank",
                              children: values2.webvalidate
                            }
                          ),
                          !values2.webvalidate.length && "N/A"
                        ] })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      KeyValue,
                      {
                        title: "External URL",
                        value: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                          !!values2.external_url.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "a",
                            {
                              className: "hover:cursor-pointer text-blue-400 hover:underline",
                              href: values2.external_url,
                              target: "_blank",
                              children: values2.external_url
                            }
                          ),
                          !values2.external_url.length && "N/A"
                        ] })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      KeyValue,
                      {
                        title: "Burn",
                        value: parseInt(values2.burn) > 0 ? makeMinimaNumber(values2.burn, 2e3) : "0"
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-2 mt-8 md:mt-16", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        disabled: isSubmitting,
                        onClick: () => submitForm(),
                        variant: "primary",
                        children: "Submit"
                      }
                    ),
                    !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(0), variant: "secondary", children: "Cancel" })
                  ] })
                ] }) }) }),
                document.body
              ),
              loading && reactDomExports.createPortal(
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Lottie,
                      {
                        className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                        animationData: Loading,
                        loop: true
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Posting transaction..." })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
                ] }) }) }),
                document.body
              ),
              step === 2 && reactDomExports.createPortal(
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Lottie,
                      {
                        className: "w-[128px] h-[128px] self-center place-self-center justify-self-center",
                        animationData: Success,
                        loop: false
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Success" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "The transaction has been posted and should arrive shortly." })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      onClick: () => {
                        setStep(0);
                        resetForm();
                      },
                      variant: "secondary",
                      children: "Close"
                    }
                  ) })
                ] }) }) }),
                document.body
              ),
              step === 3 && reactDomExports.createPortal(
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "svg",
                      {
                        className: "animate-pulse temporary-pulse fill-[rgb(78,227,193)] mb-4 mx-auto mt-8",
                        xmlns: "http://www.w3.org/2000/svg",
                        height: "64",
                        viewBox: "0 -960 960 960",
                        width: "64",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M160-200v-80h80v-280q0-83 50-147.5T420-792v-28q0-25 17.5-42.5T480-880q25 0 42.5 17.5T540-820v28q80 20 130 84.5T720-560v280h80v80H160Zm320-300Zm0 420q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-280h320v-280q0-66-47-113t-113-47q-66 0-113 47t-47 113v280Z" })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Transaction pending" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center", children: "The transaction is awaiting confirmation. You have to accept this pending action in the Pending minidapp." })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      onClick: () => {
                        setStep(0);
                        resetForm();
                      },
                      variant: "secondary",
                      children: "Close"
                    }
                  ) })
                ] }) }) }),
                document.body
              ),
              error && reactDomExports.createPortal(
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Grid, { variant: "sm", title: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4 rounded bg-white bg-opacity-90 p-4 items-center h-max overflow-y-scroll", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "svg",
                      {
                        className: "animate-pulse temporary-pulse fill-[var(--status-red)] mb-4\n                                                mx-auto mt-8",
                        xmlns: "http://www.w3.org/2000/svg",
                        height: "64",
                        viewBox: "0 -960 960 960",
                        width: "64",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M480-280q17 0 28.5-11.5T520-320q0-17-11.5-28.5T480-360q-17 0-28.5 11.5T440-320q0 17 11.5 28.5T480-280Zm-40-160h80v-240h-80v240Zm40 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z" })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-black text-center font-semibold text-xl mb-2", children: "Hmm... something went wrong!" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-center break-all", children: error })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-2 w-full mt-8 md:mt-16 self-end", children: !isSubmitting && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      onClick: () => {
                        setLoading(false);
                        setError(false);
                      },
                      variant: "secondary",
                      children: "Close"
                    }
                  ) })
                ] }) }) }),
                document.body
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                CardContent,
                {
                  header: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
                  content: /* @__PURE__ */ jsxRuntimeExports.jsx("form", { onSubmit: handleSubmit, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Stack$5, { spacing: 2, children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        id: "url",
                        type: "text",
                        disabled: isSubmitting,
                        placeholder: "Image URL",
                        ...getFieldProps("url"),
                        error: touched.url && errors.url ? errors.url : false
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-slate-500 text-sm mb-4", children: "Enter an image URL for your token" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        id: "name",
                        type: "text",
                        disabled: isSubmitting,
                        placeholder: "Name",
                        ...getFieldProps("name"),
                        error: touched.name && errors.name ? errors.name : false
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-slate-500 text-sm mb-4", children: [
                      "Enter a name for your token ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "red-bad", children: "*" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        id: "amount",
                        type: "text",
                        disabled: isSubmitting,
                        placeholder: "Amount",
                        ...getFieldProps("amount"),
                        error: touched.amount && errors.amount ? errors.amount : false
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-slate-500 text-sm mb-4", children: [
                      "Non-fungible tokens can only be sent as whole numbers and not fractions.",
                      " ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "red-bad", children: "*" })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        id: "owner",
                        type: "text",
                        disabled: isSubmitting,
                        placeholder: "Creator's name",
                        ...getFieldProps("owner"),
                        error: touched.owner && errors.owner ? errors.owner : false
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-slate-500 text-sm mb-4", children: "A creator name can optionally be added (Maxima name set by default)" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        id: "external_url",
                        type: "text",
                        disabled: isSubmitting,
                        placeholder: "External URL",
                        ...getFieldProps("external_url"),
                        error: touched.external_url && errors.external_url ? errors.external_url : false
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-slate-500 text-sm mb-4", children: "An external link can optionally be provided so users can learn more about your NFT." }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        id: "description",
                        type: "text",
                        disabled: isSubmitting,
                        placeholder: "Description",
                        ...getFieldProps("description"),
                        max: 255,
                        extraClass: "pr-20 truncate",
                        error: touched.description && errors.description ? errors.description : false,
                        endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: values2.description.length >= 255 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "m-auto text-sm flex items-center justify-center text-black font-semibold", children: values2.description.length + "/255" }) })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-slate-500 text-sm mb-4", children: "Enter a description about your Non-fungible token" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        id: "webvalidate",
                        type: "text",
                        disabled: isSubmitting,
                        placeholder: "Web validation URL",
                        ...getFieldProps("webvalidate"),
                        error: touched.webvalidate && errors.webvalidate ? errors.webvalidate : false
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-slate-500 text-sm mb-4", children: "Validate your token by hosting a public .txt file containing the tokenid on your own server or website. Create the link to the .txt file in advance and add the tokenid after creating the token." }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Burn, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        onClick: () => setStep(1),
                        variant: "primary",
                        disabled: !touched.amount || !touched.name || !isValid2,
                        children: "Review"
                      }
                    )
                  ] }) })
                }
              )
            ] })
          }
        )
      ] })
    }
  );
};
const useMySchema = () => {
  const { balance: wallet } = reactExports.useContext(appContext);
  return create().shape({
    name: create$1().required("This field is required.").matches(/^[^\\;]+$/, "Invalid characters."),
    url: create$1().trim().test("check-my-url", "Invalid Url.", function(val2) {
      const { path, createError, parent: parent2 } = this;
      if (val2 === void 0) {
        return true;
      }
      if (parent2.url.substring(0, "data:image".length) === "data:image") {
        return true;
      }
      if (!isValidURLAll(parent2.url)) {
        return createError({
          path,
          message: "Invalid URL"
        });
      }
      return true;
    }),
    amount: create$1().required("This field is required").matches(
      /^[^a-zA-Z\\;'",]+$/,
      'Invalid number.  Make sure to use only digits, "." for decimals and nothing for thousands. (e.g 1000.234)'
    ).test("check-my-amount", "Invalid amount, NFTs cannot be divisible", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return false;
      }
      if (!Number(val2)) {
        return createError({
          path,
          message: 'Invalid number.  Make sure to only use "." for decimals and nothing for thousands.'
        });
      }
      if (new Decimal(val2).greaterThan(new Decimal(1e12))) {
        return createError({
          path,
          message: "Invalid amount, cannot create more than 1 trillion of an NFT"
        });
      }
      if (new Decimal(val2).lessThan(new Decimal(1))) {
        return createError({
          path,
          message: "Invalid amount, must be 1 or greater"
        });
      }
      if (new Decimal(val2).mod(1).greaterThan(0)) {
        return createError({
          path,
          message: "Invalid amount, NFTs cannot have decimals"
        });
      }
      return true;
    }),
    description: create$1().min(0).max(255, "Maximum 255 characters allowed.").matches(/^[^\\;]+$/, "Invalid characters."),
    burn: create$1().matches(
      /^[^a-zA-Z\\;'",]+$/,
      'Invalid number.  Make sure to use only digits, "." for decimals and nothing for thousands. (e.g 1000.234)'
    ).test("check-my-burnamount", "Invalid burn amount", function(val2) {
      const { path, createError } = this;
      if (val2 === void 0) {
        return true;
      }
      if (!Number(val2)) {
        return createError({
          path,
          message: 'Invalid number.  Make sure to only use "." for decimals and nothing for thousands.'
        });
      }
      const burn = new Decimal(val2);
      if (burn.greaterThan(wallet[0].sendable)) {
        return createError({
          path,
          message: "Oops, not enough funds available to burn.  You require another ".concat(burn.minus(wallet[0].sendable).toNumber(), " Minima")
        });
      }
      return true;
    }),
    ticker: create$1().min(0).max(5, "Maximum 5 characters allowed.").matches(/^[^\\;]+$/, "Invalid characters."),
    webvalidate: create$1().test("check-my-webvalidator", "Invalid Url, must be https", function(val2) {
      const { path, createError, parent: parent2 } = this;
      if (val2 === void 0) {
        return true;
      }
      if (!isValidURLSecureOnly(parent2.webvalidate)) {
        return createError({
          path,
          message: "Invalid URL, must be https"
        });
      }
      return true;
    }),
    external_url: create$1().test("check-my-external-url", "Invalid Url.", function(val2) {
      const { path, createError, parent: parent2 } = this;
      if (val2 === void 0) {
        return true;
      }
      if (!isValidURLAll(parent2.external_url)) {
        return createError({
          path,
          message: "Invalid URL"
        });
      }
      return true;
    })
  });
};
const CreateNFT = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CreateNFTForm, {});
};
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number2 = Number(dirtyNumber);
  if (isNaN(number2)) {
    return number2;
  }
  return number2 < 0 ? Math.ceil(number2) : Math.floor(number2);
}
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$1 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$1(obj);
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof$1(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date2;
  }
  date2.setDate(date2.getDate() + amount);
  return date2;
}
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function getTimezoneOffsetInMilliseconds(date2) {
  var utcDate = new Date(Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds()));
  utcDate.setUTCFullYear(date2.getFullYear());
  return date2.getTime() - utcDate.getTime();
}
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setHours(0, 0, 0, 0);
  return date2;
}
function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function isDate(value2) {
  requiredArgs(1, arguments);
  return value2 instanceof Date || _typeof(value2) === "object" && Object.prototype.toString.call(value2) === "[object Date]";
}
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date2 = toDate(dirtyDate);
  return !isNaN(Number(date2));
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var timestamp = date2.getTime();
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date2.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCISOWeek(fourthOfJanuary);
  return date2;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date2).getTime() - startOfUTCISOWeekYear(date2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCWeek(firstWeek, options);
  return date2;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCWeek(date2, options).getTime() - startOfUTCWeekYear(date2, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function addLeadingZeros(number2, targetLength) {
  var sign2 = number2 < 0 ? "-" : "";
  var output = Math.abs(number2).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign2 + output;
}
var formatters$2 = {
  // Year
  y: function y2(date2, token2) {
    var signedYear = date2.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token2 === "yy" ? year % 100 : year, token2.length);
  },
  // Month
  M: function M2(date2, token2) {
    var month = date2.getUTCMonth();
    return token2 === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d2(date2, token2) {
    return addLeadingZeros(date2.getUTCDate(), token2.length);
  },
  // AM or PM
  a: function a2(date2, token2) {
    var dayPeriodEnumValue = date2.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token2) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h2(date2, token2) {
    return addLeadingZeros(date2.getUTCHours() % 12 || 12, token2.length);
  },
  // Hour [0-23]
  H: function H2(date2, token2) {
    return addLeadingZeros(date2.getUTCHours(), token2.length);
  },
  // Minute
  m: function m2(date2, token2) {
    return addLeadingZeros(date2.getUTCMinutes(), token2.length);
  },
  // Second
  s: function s2(date2, token2) {
    return addLeadingZeros(date2.getUTCSeconds(), token2.length);
  },
  // Fraction of second
  S: function S2(date2, token2) {
    var numberOfDigits = token2.length;
    var milliseconds = date2.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token2.length);
  }
};
const formatters$3 = formatters$2;
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  // Era
  G: function G2(date2, token2, localize2) {
    var era = date2.getUTCFullYear() > 0 ? 1 : 0;
    switch (token2) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y3(date2, token2, localize2) {
    if (token2 === "yo") {
      var signedYear = date2.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return formatters$3.y(date2, token2);
  },
  // Local week-numbering year
  Y: function Y2(date2, token2, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date2, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token2 === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token2 === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token2.length);
  },
  // ISO week-numbering year
  R: function R2(date2, token2) {
    var isoWeekYear = getUTCISOWeekYear(date2);
    return addLeadingZeros(isoWeekYear, token2.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u2(date2, token2) {
    var year = date2.getUTCFullYear();
    return addLeadingZeros(year, token2.length);
  },
  // Quarter
  Q: function Q2(date2, token2, localize2) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token2) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q2(date2, token2, localize2) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token2) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M3(date2, token2, localize2) {
    var month = date2.getUTCMonth();
    switch (token2) {
      case "M":
      case "MM":
        return formatters$3.M(date2, token2);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L2(date2, token2, localize2) {
    var month = date2.getUTCMonth();
    switch (token2) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w2(date2, token2, localize2, options) {
    var week = getUTCWeek(date2, options);
    if (token2 === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token2.length);
  },
  // ISO week of year
  I: function I2(date2, token2, localize2) {
    var isoWeek = getUTCISOWeek(date2);
    if (token2 === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token2.length);
  },
  // Day of the month
  d: function d3(date2, token2, localize2) {
    if (token2 === "do") {
      return localize2.ordinalNumber(date2.getUTCDate(), {
        unit: "date"
      });
    }
    return formatters$3.d(date2, token2);
  },
  // Day of year
  D: function D2(date2, token2, localize2) {
    var dayOfYear = getUTCDayOfYear(date2);
    if (token2 === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token2.length);
  },
  // Day of week
  E: function E2(date2, token2, localize2) {
    var dayOfWeek = date2.getUTCDay();
    switch (token2) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e2(date2, token2, localize2, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token2) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c6(date2, token2, localize2, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token2) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token2.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i2(date2, token2, localize2) {
    var dayOfWeek = date2.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token2) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token2.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a3(date2, token2, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token2) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b2(date2, token2, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token2) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B2(date2, token2, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token2) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h3(date2, token2, localize2) {
    if (token2 === "ho") {
      var hours = date2.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return formatters$3.h(date2, token2);
  },
  // Hour [0-23]
  H: function H3(date2, token2, localize2) {
    if (token2 === "Ho") {
      return localize2.ordinalNumber(date2.getUTCHours(), {
        unit: "hour"
      });
    }
    return formatters$3.H(date2, token2);
  },
  // Hour [0-11]
  K: function K2(date2, token2, localize2) {
    var hours = date2.getUTCHours() % 12;
    if (token2 === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token2.length);
  },
  // Hour [1-24]
  k: function k2(date2, token2, localize2) {
    var hours = date2.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token2 === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token2.length);
  },
  // Minute
  m: function m3(date2, token2, localize2) {
    if (token2 === "mo") {
      return localize2.ordinalNumber(date2.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return formatters$3.m(date2, token2);
  },
  // Second
  s: function s3(date2, token2, localize2) {
    if (token2 === "so") {
      return localize2.ordinalNumber(date2.getUTCSeconds(), {
        unit: "second"
      });
    }
    return formatters$3.s(date2, token2);
  },
  // Fraction of second
  S: function S3(date2, token2) {
    return formatters$3.S(date2, token2);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X2(date2, token2, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token2) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x2(date2, token2, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token2) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O2(date2, token2, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token2) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z2(date2, token2, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token2) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t2(date2, token2, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token2.length);
  },
  // Milliseconds timestamp
  T: function T2(date2, token2, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token2.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign2 + String(hours);
  }
  var delimiter2 = dirtyDelimiter || "";
  return sign2 + String(hours) + delimiter2 + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign2 = offset > 0 ? "-" : "+";
    return sign2 + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter2 = dirtyDelimiter || "";
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign2 + hours + delimiter2 + minutes;
}
const formatters$1 = formatters;
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
const longFormatters$1 = longFormatters;
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token2) {
  return protectedDayOfYearTokens.indexOf(token2) !== -1;
}
function isProtectedWeekYearToken(token2) {
  return protectedWeekYearTokens.indexOf(token2) !== -1;
}
function throwProtectedError(token2, format2, input2) {
  if (token2 === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input2, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token2 === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input2, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token2 === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input2, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token2 === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input2, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token2, count, options) {
  var result2;
  var tokenValue = formatDistanceLocale[token2];
  if (typeof tokenValue === "string") {
    result2 = tokenValue;
  } else if (count === 1) {
    result2 = tokenValue.one;
  } else {
    result2 = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result2;
    } else {
      return result2 + " ago";
    }
  }
  return result2;
};
const formatDistance$1 = formatDistance;
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width2 = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width2] || args.formats[args.defaultWidth];
    return format2;
  };
}
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatLong$1 = formatLong;
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token2, _date, _baseDate, _options) {
  return formatRelativeLocale[token2];
};
const formatRelative$1 = formatRelative;
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width2 = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width2] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index2 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index2];
  };
}
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number2 = Number(dirtyNumber);
  var rem100 = number2 % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number2 + "st";
      case 2:
        return number2 + "nd";
      case 3:
        return number2 + "rd";
    }
  }
  return number2 + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
const localize$1 = localize;
function buildMatchFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width2 = options.width;
    var matchPattern = width2 && args.matchPatterns[width2] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string2.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width2 && args.parsePatterns[width2] || args.parsePatterns[args.defaultParseWidth];
    var key2 = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value2;
    value2 = args.valueCallback ? args.valueCallback(key2) : key2;
    value2 = options.valueCallback ? options.valueCallback(value2) : value2;
    var rest = string2.slice(matchedString.length);
    return {
      value: value2,
      rest
    };
  };
}
function findKey(object2, predicate) {
  for (var key2 in object2) {
    if (object2.hasOwnProperty(key2) && predicate(object2[key2])) {
      return key2;
    }
  }
  return void 0;
}
function findIndex(array2, predicate) {
  for (var key2 = 0; key2 < array2.length; key2++) {
    if (predicate(array2[key2])) {
      return key2;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string2.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string2.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value2 = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value2 = options.valueCallback ? options.valueCallback(value2) : value2;
    var rest = string2.slice(matchedString.length);
    return {
      value: value2,
      rest
    };
  };
}
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value2) {
      return parseInt(value2, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index2) {
      return index2 + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const match$1 = match;
var locale = {
  code: "en-US",
  formatDistance: formatDistance$1,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
const defaultLocale = locale;
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result2 = formatStr.match(longFormattingTokensRegExp).map(function(substring2) {
    var firstCharacter = substring2[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring2, locale2.formatLong);
    }
    return substring2;
  }).join("").match(formattingTokensRegExp).map(function(substring2) {
    if (substring2 === "''") {
      return "'";
    }
    var firstCharacter = substring2[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring2);
    }
    var formatter2 = formatters$1[firstCharacter];
    if (formatter2) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring2)) {
        throwProtectedError(substring2, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring2)) {
        throwProtectedError(substring2, dirtyFormatStr, String(dirtyDate));
      }
      return formatter2(utcDate, substring2, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring2;
  }).join("");
  return result2;
}
function cleanEscapedString(input2) {
  var matched = input2.match(escapedStringRegExp);
  if (!matched) {
    return input2;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}
function isToday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, Date.now());
}
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}
function isYesterday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, subDays(Date.now(), 1));
}
const downloadCsv = (transaction) => {
  const { headers, transactionCsv, fileName } = exportToCsv(transaction);
  downloadFile([...headers, transactionCsv].join("\n"), fileName);
};
const downloadAllAsCsv = (transaction) => {
  const { headers, transactionCsv, fileName } = exportToCsv(transaction);
  downloadFile([...headers, ...transactionCsv].join("\n"), fileName);
};
const exportToCsv = (transaction) => {
  let headers = ["Amount,Txpowid,SentToMx,SentTo0x,Date,Type,Block,Burn,Json"];
  let transactionCsv = "";
  if (!Array.isArray(transaction)) {
    transactionCsv = Object.values(transaction).toString();
  }
  if (Array.isArray(transaction)) {
    transactionCsv = transaction.reduce((acc, transaction2) => {
      const { amount, txpowid, sentToMx, sentTo0x, date: date2, type, blockPosted, burn, fullJson } = transaction2;
      acc.push([amount, txpowid, sentToMx, sentTo0x, date2, type, blockPosted, burn, fullJson].join(","));
      return acc;
    }, []);
  }
  const dateCreation = format(/* @__PURE__ */ new Date(), "_dMMMyyyy_Hmm");
  const fileName = "transaction_export_".concat(dateCreation, ".csv");
  return {
    headers,
    transactionCsv,
    fileName
  };
};
const downloadFile = async (data2, fileName) => {
  return new Promise(() => {
    window.MDS.file.save("/myTransactions/".concat(fileName), data2, function(resp) {
      if (resp.status) {
        if (window.navigator.userAgent.includes("Minima Browser")) {
          return Android.fileDownload(MDS.minidappuid, "/myTransactions/".concat(fileName));
        }
        const blob = new Blob([data2], { type: "text/csv" });
        const a4 = document.createElement("a");
        a4.download = fileName;
        a4.href = window.URL.createObjectURL(blob);
        const clickEvt = new MouseEvent("click", {
          view: window,
          bubbles: true,
          cancelable: true
        });
        a4.dispatchEvent(clickEvt);
        a4.remove();
      }
    });
  });
};
var lodash = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash.exports;
(function(module2, exports2) {
  (function() {
    var undefined$1;
    var VERSION = "4.17.21";
    var LARGE_ARRAY_SIZE2 = 200;
    var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT2 = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
    var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
    var MAX_MEMOIZE_SIZE2 = 500;
    var PLACEHOLDER = "__lodash_placeholder__";
    var CLONE_DEEP_FLAG2 = 1, CLONE_FLAT_FLAG2 = 2, CLONE_SYMBOLS_FLAG2 = 4;
    var COMPARE_PARTIAL_FLAG2 = 1, COMPARE_UNORDERED_FLAG2 = 2;
    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY2 = 1 / 0, MAX_SAFE_INTEGER2 = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [
      ["ary", WRAP_ARY_FLAG],
      ["bind", WRAP_BIND_FLAG],
      ["bindKey", WRAP_BIND_KEY_FLAG],
      ["curry", WRAP_CURRY_FLAG],
      ["curryRight", WRAP_CURRY_RIGHT_FLAG],
      ["flip", WRAP_FLIP_FLAG],
      ["partial", WRAP_PARTIAL_FLAG],
      ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
      ["rearg", WRAP_REARG_FLAG]
    ];
    var argsTag2 = "[object Arguments]", arrayTag2 = "[object Array]", asyncTag2 = "[object AsyncFunction]", boolTag2 = "[object Boolean]", dateTag2 = "[object Date]", domExcTag = "[object DOMException]", errorTag2 = "[object Error]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag2 = "[object Map]", numberTag2 = "[object Number]", nullTag2 = "[object Null]", objectTag2 = "[object Object]", promiseTag2 = "[object Promise]", proxyTag2 = "[object Proxy]", regexpTag2 = "[object RegExp]", setTag2 = "[object Set]", stringTag2 = "[object String]", symbolTag2 = "[object Symbol]", undefinedTag2 = "[object Undefined]", weakMapTag2 = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag2 = "[object ArrayBuffer]", dataViewTag2 = "[object DataView]", float32Tag2 = "[object Float32Array]", float64Tag2 = "[object Float64Array]", int8Tag2 = "[object Int8Array]", int16Tag2 = "[object Int16Array]", int32Tag2 = "[object Int32Array]", uint8Tag2 = "[object Uint8Array]", uint8ClampedTag2 = "[object Uint8ClampedArray]", uint16Tag2 = "[object Uint16Array]", uint32Tag2 = "[object Uint32Array]";
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp2 = /^\w*$/, rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar2.source);
    var reTrimStart = /^\s+/;
    var reWhitespace = /\s/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    var reAsciiWord2 = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    var reEscapeChar2 = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags2 = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint2 = /^(?:0|[1-9]\d*)$/;
    var reLatin2 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange2 = "\\ud800-\\udfff", rsComboMarksRange2 = "\\u0300-\\u036f", reComboHalfMarksRange2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange2 = "\\u20d0-\\u20ff", rsComboRange2 = rsComboMarksRange2 + reComboHalfMarksRange2 + rsComboSymbolsRange2, rsDingbatRange2 = "\\u2700-\\u27bf", rsLowerRange2 = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange2 = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange2 = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange2 = "\\u2000-\\u206f", rsSpaceRange2 = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange2 = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange2 = "\\ufe0e\\ufe0f", rsBreakRange2 = rsMathOpRange2 + rsNonCharRange2 + rsPunctuationRange2 + rsSpaceRange2;
    var rsApos2 = "['’]", rsAstral2 = "[" + rsAstralRange2 + "]", rsBreak2 = "[" + rsBreakRange2 + "]", rsCombo2 = "[" + rsComboRange2 + "]", rsDigits2 = "\\d+", rsDingbat2 = "[" + rsDingbatRange2 + "]", rsLower2 = "[" + rsLowerRange2 + "]", rsMisc2 = "[^" + rsAstralRange2 + rsBreakRange2 + rsDigits2 + rsDingbatRange2 + rsLowerRange2 + rsUpperRange2 + "]", rsFitz2 = "\\ud83c[\\udffb-\\udfff]", rsModifier2 = "(?:" + rsCombo2 + "|" + rsFitz2 + ")", rsNonAstral2 = "[^" + rsAstralRange2 + "]", rsRegional2 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair2 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper2 = "[" + rsUpperRange2 + "]", rsZWJ2 = "\\u200d";
    var rsMiscLower2 = "(?:" + rsLower2 + "|" + rsMisc2 + ")", rsMiscUpper2 = "(?:" + rsUpper2 + "|" + rsMisc2 + ")", rsOptContrLower2 = "(?:" + rsApos2 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper2 = "(?:" + rsApos2 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod2 = rsModifier2 + "?", rsOptVar2 = "[" + rsVarRange2 + "]?", rsOptJoin2 = "(?:" + rsZWJ2 + "(?:" + [rsNonAstral2, rsRegional2, rsSurrPair2].join("|") + ")" + rsOptVar2 + reOptMod2 + ")*", rsOrdLower2 = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper2 = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq2 = rsOptVar2 + reOptMod2 + rsOptJoin2, rsEmoji2 = "(?:" + [rsDingbat2, rsRegional2, rsSurrPair2].join("|") + ")" + rsSeq2, rsSymbol2 = "(?:" + [rsNonAstral2 + rsCombo2 + "?", rsCombo2, rsRegional2, rsSurrPair2, rsAstral2].join("|") + ")";
    var reApos2 = RegExp(rsApos2, "g");
    var reComboMark2 = RegExp(rsCombo2, "g");
    var reUnicode2 = RegExp(rsFitz2 + "(?=" + rsFitz2 + ")|" + rsSymbol2 + rsSeq2, "g");
    var reUnicodeWord2 = RegExp([
      rsUpper2 + "?" + rsLower2 + "+" + rsOptContrLower2 + "(?=" + [rsBreak2, rsUpper2, "$"].join("|") + ")",
      rsMiscUpper2 + "+" + rsOptContrUpper2 + "(?=" + [rsBreak2, rsUpper2 + rsMiscLower2, "$"].join("|") + ")",
      rsUpper2 + "?" + rsMiscLower2 + "+" + rsOptContrLower2,
      rsUpper2 + "+" + rsOptContrUpper2,
      rsOrdUpper2,
      rsOrdLower2,
      rsDigits2,
      rsEmoji2
    ].join("|"), "g");
    var reHasUnicode2 = RegExp("[" + rsZWJ2 + rsAstralRange2 + rsComboRange2 + rsVarRange2 + "]");
    var reHasUnicodeWord2 = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ];
    var templateCounter = -1;
    var typedArrayTags2 = {};
    typedArrayTags2[float32Tag2] = typedArrayTags2[float64Tag2] = typedArrayTags2[int8Tag2] = typedArrayTags2[int16Tag2] = typedArrayTags2[int32Tag2] = typedArrayTags2[uint8Tag2] = typedArrayTags2[uint8ClampedTag2] = typedArrayTags2[uint16Tag2] = typedArrayTags2[uint32Tag2] = true;
    typedArrayTags2[argsTag2] = typedArrayTags2[arrayTag2] = typedArrayTags2[arrayBufferTag2] = typedArrayTags2[boolTag2] = typedArrayTags2[dataViewTag2] = typedArrayTags2[dateTag2] = typedArrayTags2[errorTag2] = typedArrayTags2[funcTag2] = typedArrayTags2[mapTag2] = typedArrayTags2[numberTag2] = typedArrayTags2[objectTag2] = typedArrayTags2[regexpTag2] = typedArrayTags2[setTag2] = typedArrayTags2[stringTag2] = typedArrayTags2[weakMapTag2] = false;
    var cloneableTags2 = {};
    cloneableTags2[argsTag2] = cloneableTags2[arrayTag2] = cloneableTags2[arrayBufferTag2] = cloneableTags2[dataViewTag2] = cloneableTags2[boolTag2] = cloneableTags2[dateTag2] = cloneableTags2[float32Tag2] = cloneableTags2[float64Tag2] = cloneableTags2[int8Tag2] = cloneableTags2[int16Tag2] = cloneableTags2[int32Tag2] = cloneableTags2[mapTag2] = cloneableTags2[numberTag2] = cloneableTags2[objectTag2] = cloneableTags2[regexpTag2] = cloneableTags2[setTag2] = cloneableTags2[stringTag2] = cloneableTags2[symbolTag2] = cloneableTags2[uint8Tag2] = cloneableTags2[uint8ClampedTag2] = cloneableTags2[uint16Tag2] = cloneableTags2[uint32Tag2] = true;
    cloneableTags2[errorTag2] = cloneableTags2[funcTag2] = cloneableTags2[weakMapTag2] = false;
    var deburredLetters2 = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "s"
    };
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var htmlUnescapes = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    };
    var stringEscapes = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeGlobal2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
    var freeExports2 = exports2 && !exports2.nodeType && exports2;
    var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
    var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
    var freeProcess2 = moduleExports2 && freeGlobal2.process;
    var nodeUtil2 = function() {
      try {
        var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
      } catch (e3) {
      }
    }();
    var nodeIsArrayBuffer = nodeUtil2 && nodeUtil2.isArrayBuffer, nodeIsDate = nodeUtil2 && nodeUtil2.isDate, nodeIsMap2 = nodeUtil2 && nodeUtil2.isMap, nodeIsRegExp = nodeUtil2 && nodeUtil2.isRegExp, nodeIsSet2 = nodeUtil2 && nodeUtil2.isSet, nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayAggregator(array2, setter, iteratee, accumulator) {
      var index2 = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index2 < length2) {
        var value2 = array2[index2];
        setter(accumulator, value2, iteratee(value2), array2);
      }
      return accumulator;
    }
    function arrayEach2(array2, iteratee) {
      var index2 = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index2 < length2) {
        if (iteratee(array2[index2], index2, array2) === false) {
          break;
        }
      }
      return array2;
    }
    function arrayEachRight(array2, iteratee) {
      var length2 = array2 == null ? 0 : array2.length;
      while (length2--) {
        if (iteratee(array2[length2], length2, array2) === false) {
          break;
        }
      }
      return array2;
    }
    function arrayEvery(array2, predicate) {
      var index2 = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index2 < length2) {
        if (!predicate(array2[index2], index2, array2)) {
          return false;
        }
      }
      return true;
    }
    function arrayFilter2(array2, predicate) {
      var index2 = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result2 = [];
      while (++index2 < length2) {
        var value2 = array2[index2];
        if (predicate(value2, index2, array2)) {
          result2[resIndex++] = value2;
        }
      }
      return result2;
    }
    function arrayIncludes(array2, value2) {
      var length2 = array2 == null ? 0 : array2.length;
      return !!length2 && baseIndexOf(array2, value2, 0) > -1;
    }
    function arrayIncludesWith(array2, value2, comparator) {
      var index2 = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index2 < length2) {
        if (comparator(value2, array2[index2])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap2(array2, iteratee) {
      var index2 = -1, length2 = array2 == null ? 0 : array2.length, result2 = Array(length2);
      while (++index2 < length2) {
        result2[index2] = iteratee(array2[index2], index2, array2);
      }
      return result2;
    }
    function arrayPush2(array2, values2) {
      var index2 = -1, length2 = values2.length, offset = array2.length;
      while (++index2 < length2) {
        array2[offset + index2] = values2[index2];
      }
      return array2;
    }
    function arrayReduce2(array2, iteratee, accumulator, initAccum) {
      var index2 = -1, length2 = array2 == null ? 0 : array2.length;
      if (initAccum && length2) {
        accumulator = array2[++index2];
      }
      while (++index2 < length2) {
        accumulator = iteratee(accumulator, array2[index2], index2, array2);
      }
      return accumulator;
    }
    function arrayReduceRight(array2, iteratee, accumulator, initAccum) {
      var length2 = array2 == null ? 0 : array2.length;
      if (initAccum && length2) {
        accumulator = array2[--length2];
      }
      while (length2--) {
        accumulator = iteratee(accumulator, array2[length2], length2, array2);
      }
      return accumulator;
    }
    function arraySome2(array2, predicate) {
      var index2 = -1, length2 = array2 == null ? 0 : array2.length;
      while (++index2 < length2) {
        if (predicate(array2[index2], index2, array2)) {
          return true;
        }
      }
      return false;
    }
    var asciiSize = baseProperty2("length");
    function asciiToArray2(string2) {
      return string2.split("");
    }
    function asciiWords2(string2) {
      return string2.match(reAsciiWord2) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
      var result2;
      eachFunc(collection, function(value2, key2, collection2) {
        if (predicate(value2, key2, collection2)) {
          result2 = key2;
          return false;
        }
      });
      return result2;
    }
    function baseFindIndex(array2, predicate, fromIndex, fromRight) {
      var length2 = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index2-- : ++index2 < length2) {
        if (predicate(array2[index2], index2, array2)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIndexOf(array2, value2, fromIndex) {
      return value2 === value2 ? strictIndexOf(array2, value2, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array2, value2, fromIndex, comparator) {
      var index2 = fromIndex - 1, length2 = array2.length;
      while (++index2 < length2) {
        if (comparator(array2[index2], value2)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIsNaN(value2) {
      return value2 !== value2;
    }
    function baseMean(array2, iteratee) {
      var length2 = array2 == null ? 0 : array2.length;
      return length2 ? baseSum(array2, iteratee) / length2 : NAN;
    }
    function baseProperty2(key2) {
      return function(object2) {
        return object2 == null ? undefined$1 : object2[key2];
      };
    }
    function basePropertyOf2(object2) {
      return function(key2) {
        return object2 == null ? undefined$1 : object2[key2];
      };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value2, index2, collection2) {
        accumulator = initAccum ? (initAccum = false, value2) : iteratee(accumulator, value2, index2, collection2);
      });
      return accumulator;
    }
    function baseSortBy(array2, comparer) {
      var length2 = array2.length;
      array2.sort(comparer);
      while (length2--) {
        array2[length2] = array2[length2].value;
      }
      return array2;
    }
    function baseSum(array2, iteratee) {
      var result2, index2 = -1, length2 = array2.length;
      while (++index2 < length2) {
        var current = iteratee(array2[index2]);
        if (current !== undefined$1) {
          result2 = result2 === undefined$1 ? current : result2 + current;
        }
      }
      return result2;
    }
    function baseTimes2(n2, iteratee) {
      var index2 = -1, result2 = Array(n2);
      while (++index2 < n2) {
        result2[index2] = iteratee(index2);
      }
      return result2;
    }
    function baseToPairs(object2, props) {
      return arrayMap2(props, function(key2) {
        return [key2, object2[key2]];
      });
    }
    function baseTrim(string2) {
      return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
    }
    function baseUnary2(func) {
      return function(value2) {
        return func(value2);
      };
    }
    function baseValues(object2, props) {
      return arrayMap2(props, function(key2) {
        return object2[key2];
      });
    }
    function cacheHas2(cache, key2) {
      return cache.has(key2);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
      var index2 = -1, length2 = strSymbols.length;
      while (++index2 < length2 && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
      }
      return index2;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
      var index2 = strSymbols.length;
      while (index2-- && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
      }
      return index2;
    }
    function countHolders(array2, placeholder) {
      var length2 = array2.length, result2 = 0;
      while (length2--) {
        if (array2[length2] === placeholder) {
          ++result2;
        }
      }
      return result2;
    }
    var deburrLetter2 = basePropertyOf2(deburredLetters2);
    var escapeHtmlChar = basePropertyOf2(htmlEscapes);
    function escapeStringChar(chr) {
      return "\\" + stringEscapes[chr];
    }
    function getValue2(object2, key2) {
      return object2 == null ? undefined$1 : object2[key2];
    }
    function hasUnicode2(string2) {
      return reHasUnicode2.test(string2);
    }
    function hasUnicodeWord2(string2) {
      return reHasUnicodeWord2.test(string2);
    }
    function iteratorToArray(iterator) {
      var data2, result2 = [];
      while (!(data2 = iterator.next()).done) {
        result2.push(data2.value);
      }
      return result2;
    }
    function mapToArray2(map2) {
      var index2 = -1, result2 = Array(map2.size);
      map2.forEach(function(value2, key2) {
        result2[++index2] = [key2, value2];
      });
      return result2;
    }
    function overArg2(func, transform2) {
      return function(arg) {
        return func(transform2(arg));
      };
    }
    function replaceHolders(array2, placeholder) {
      var index2 = -1, length2 = array2.length, resIndex = 0, result2 = [];
      while (++index2 < length2) {
        var value2 = array2[index2];
        if (value2 === placeholder || value2 === PLACEHOLDER) {
          array2[index2] = PLACEHOLDER;
          result2[resIndex++] = index2;
        }
      }
      return result2;
    }
    function setToArray2(set2) {
      var index2 = -1, result2 = Array(set2.size);
      set2.forEach(function(value2) {
        result2[++index2] = value2;
      });
      return result2;
    }
    function setToPairs(set2) {
      var index2 = -1, result2 = Array(set2.size);
      set2.forEach(function(value2) {
        result2[++index2] = [value2, value2];
      });
      return result2;
    }
    function strictIndexOf(array2, value2, fromIndex) {
      var index2 = fromIndex - 1, length2 = array2.length;
      while (++index2 < length2) {
        if (array2[index2] === value2) {
          return index2;
        }
      }
      return -1;
    }
    function strictLastIndexOf(array2, value2, fromIndex) {
      var index2 = fromIndex + 1;
      while (index2--) {
        if (array2[index2] === value2) {
          return index2;
        }
      }
      return index2;
    }
    function stringSize(string2) {
      return hasUnicode2(string2) ? unicodeSize(string2) : asciiSize(string2);
    }
    function stringToArray2(string2) {
      return hasUnicode2(string2) ? unicodeToArray2(string2) : asciiToArray2(string2);
    }
    function trimmedEndIndex(string2) {
      var index2 = string2.length;
      while (index2-- && reWhitespace.test(string2.charAt(index2))) {
      }
      return index2;
    }
    var unescapeHtmlChar = basePropertyOf2(htmlUnescapes);
    function unicodeSize(string2) {
      var result2 = reUnicode2.lastIndex = 0;
      while (reUnicode2.test(string2)) {
        ++result2;
      }
      return result2;
    }
    function unicodeToArray2(string2) {
      return string2.match(reUnicode2) || [];
    }
    function unicodeWords2(string2) {
      return string2.match(reUnicodeWord2) || [];
    }
    var runInContext = function runInContext2(context) {
      context = context == null ? root2 : _2.defaults(root2.Object(), context, _2.pick(root2, contextProps));
      var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
      var arrayProto2 = Array2.prototype, funcProto2 = Function2.prototype, objectProto2 = Object2.prototype;
      var coreJsData2 = context["__core-js_shared__"];
      var funcToString2 = funcProto2.toString;
      var hasOwnProperty2 = objectProto2.hasOwnProperty;
      var idCounter = 0;
      var maskSrcKey2 = function() {
        var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString2 = objectProto2.toString;
      var objectCtorString2 = funcToString2.call(Object2);
      var oldDash = root2._;
      var reIsNative2 = RegExp2(
        "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Buffer2 = moduleExports2 ? context.Buffer : undefined$1, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe2 = Buffer2 ? Buffer2.allocUnsafe : undefined$1, getPrototype2 = overArg2(Object2.getPrototypeOf, Object2), objectCreate2 = Object2.create, propertyIsEnumerable2 = objectProto2.propertyIsEnumerable, splice2 = arrayProto2.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined$1, symIterator = Symbol2 ? Symbol2.iterator : undefined$1, symToStringTag2 = Symbol2 ? Symbol2.toStringTag : undefined$1;
      var defineProperty2 = function() {
        try {
          var func = getNative2(Object2, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e3) {
        }
      }();
      var ctxClearTimeout = context.clearTimeout !== root2.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root2.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root2.setTimeout && context.setTimeout;
      var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols2 = Object2.getOwnPropertySymbols, nativeIsBuffer2 = Buffer2 ? Buffer2.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto2.join, nativeKeys2 = overArg2(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto2.reverse;
      var DataView2 = getNative2(context, "DataView"), Map2 = getNative2(context, "Map"), Promise2 = getNative2(context, "Promise"), Set2 = getNative2(context, "Set"), WeakMap2 = getNative2(context, "WeakMap"), nativeCreate2 = getNative2(Object2, "create");
      var metaMap = WeakMap2 && new WeakMap2();
      var realNames = {};
      var dataViewCtorString2 = toSource2(DataView2), mapCtorString2 = toSource2(Map2), promiseCtorString2 = toSource2(Promise2), setCtorString2 = toSource2(Set2), weakMapCtorString2 = toSource2(WeakMap2);
      var symbolProto2 = Symbol2 ? Symbol2.prototype : undefined$1, symbolValueOf2 = symbolProto2 ? symbolProto2.valueOf : undefined$1, symbolToString2 = symbolProto2 ? symbolProto2.toString : undefined$1;
      function lodash2(value2) {
        if (isObjectLike2(value2) && !isArray2(value2) && !(value2 instanceof LazyWrapper)) {
          if (value2 instanceof LodashWrapper) {
            return value2;
          }
          if (hasOwnProperty2.call(value2, "__wrapped__")) {
            return wrapperClone(value2);
          }
        }
        return new LodashWrapper(value2);
      }
      var baseCreate2 = function() {
        function object2() {
        }
        return function(proto2) {
          if (!isObject3(proto2)) {
            return {};
          }
          if (objectCreate2) {
            return objectCreate2(proto2);
          }
          object2.prototype = proto2;
          var result3 = new object2();
          object2.prototype = undefined$1;
          return result3;
        };
      }();
      function baseLodash() {
      }
      function LodashWrapper(value2, chainAll) {
        this.__wrapped__ = value2;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined$1;
      }
      lodash2.templateSettings = {
        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        "escape": reEscape,
        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        "evaluate": reEvaluate,
        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        "interpolate": reInterpolate,
        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        "variable": "",
        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        "imports": {
          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          "_": lodash2
        }
      };
      lodash2.prototype = baseLodash.prototype;
      lodash2.prototype.constructor = lodash2;
      LodashWrapper.prototype = baseCreate2(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;
      function LazyWrapper(value2) {
        this.__wrapped__ = value2;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }
      function lazyClone() {
        var result3 = new LazyWrapper(this.__wrapped__);
        result3.__actions__ = copyArray2(this.__actions__);
        result3.__dir__ = this.__dir__;
        result3.__filtered__ = this.__filtered__;
        result3.__iteratees__ = copyArray2(this.__iteratees__);
        result3.__takeCount__ = this.__takeCount__;
        result3.__views__ = copyArray2(this.__views__);
        return result3;
      }
      function lazyReverse() {
        if (this.__filtered__) {
          var result3 = new LazyWrapper(this);
          result3.__dir__ = -1;
          result3.__filtered__ = true;
        } else {
          result3 = this.clone();
          result3.__dir__ *= -1;
        }
        return result3;
      }
      function lazyValue() {
        var array2 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array2), isRight = dir < 0, arrLength = isArr ? array2.length : 0, view = getView(0, arrLength, this.__views__), start2 = view.start, end = view.end, length2 = end - start2, index2 = isRight ? end : start2 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length2, this.__takeCount__);
        if (!isArr || !isRight && arrLength == length2 && takeCount == length2) {
          return baseWrapperValue(array2, this.__actions__);
        }
        var result3 = [];
        outer:
          while (length2-- && resIndex < takeCount) {
            index2 += dir;
            var iterIndex = -1, value2 = array2[index2];
            while (++iterIndex < iterLength) {
              var data2 = iteratees[iterIndex], iteratee2 = data2.iteratee, type = data2.type, computed = iteratee2(value2);
              if (type == LAZY_MAP_FLAG) {
                value2 = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result3[resIndex++] = value2;
          }
        return result3;
      }
      LazyWrapper.prototype = baseCreate2(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;
      function Hash2(entries) {
        var index2 = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length2) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear2() {
        this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
        this.size = 0;
      }
      function hashDelete2(key2) {
        var result3 = this.has(key2) && delete this.__data__[key2];
        this.size -= result3 ? 1 : 0;
        return result3;
      }
      function hashGet2(key2) {
        var data2 = this.__data__;
        if (nativeCreate2) {
          var result3 = data2[key2];
          return result3 === HASH_UNDEFINED2 ? undefined$1 : result3;
        }
        return hasOwnProperty2.call(data2, key2) ? data2[key2] : undefined$1;
      }
      function hashHas2(key2) {
        var data2 = this.__data__;
        return nativeCreate2 ? data2[key2] !== undefined$1 : hasOwnProperty2.call(data2, key2);
      }
      function hashSet2(key2, value2) {
        var data2 = this.__data__;
        this.size += this.has(key2) ? 0 : 1;
        data2[key2] = nativeCreate2 && value2 === undefined$1 ? HASH_UNDEFINED2 : value2;
        return this;
      }
      Hash2.prototype.clear = hashClear2;
      Hash2.prototype["delete"] = hashDelete2;
      Hash2.prototype.get = hashGet2;
      Hash2.prototype.has = hashHas2;
      Hash2.prototype.set = hashSet2;
      function ListCache2(entries) {
        var index2 = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length2) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear2() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete2(key2) {
        var data2 = this.__data__, index2 = assocIndexOf2(data2, key2);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data2.length - 1;
        if (index2 == lastIndex) {
          data2.pop();
        } else {
          splice2.call(data2, index2, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet2(key2) {
        var data2 = this.__data__, index2 = assocIndexOf2(data2, key2);
        return index2 < 0 ? undefined$1 : data2[index2][1];
      }
      function listCacheHas2(key2) {
        return assocIndexOf2(this.__data__, key2) > -1;
      }
      function listCacheSet2(key2, value2) {
        var data2 = this.__data__, index2 = assocIndexOf2(data2, key2);
        if (index2 < 0) {
          ++this.size;
          data2.push([key2, value2]);
        } else {
          data2[index2][1] = value2;
        }
        return this;
      }
      ListCache2.prototype.clear = listCacheClear2;
      ListCache2.prototype["delete"] = listCacheDelete2;
      ListCache2.prototype.get = listCacheGet2;
      ListCache2.prototype.has = listCacheHas2;
      ListCache2.prototype.set = listCacheSet2;
      function MapCache2(entries) {
        var index2 = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length2) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear2() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash2(),
          "map": new (Map2 || ListCache2)(),
          "string": new Hash2()
        };
      }
      function mapCacheDelete2(key2) {
        var result3 = getMapData2(this, key2)["delete"](key2);
        this.size -= result3 ? 1 : 0;
        return result3;
      }
      function mapCacheGet2(key2) {
        return getMapData2(this, key2).get(key2);
      }
      function mapCacheHas2(key2) {
        return getMapData2(this, key2).has(key2);
      }
      function mapCacheSet2(key2, value2) {
        var data2 = getMapData2(this, key2), size2 = data2.size;
        data2.set(key2, value2);
        this.size += data2.size == size2 ? 0 : 1;
        return this;
      }
      MapCache2.prototype.clear = mapCacheClear2;
      MapCache2.prototype["delete"] = mapCacheDelete2;
      MapCache2.prototype.get = mapCacheGet2;
      MapCache2.prototype.has = mapCacheHas2;
      MapCache2.prototype.set = mapCacheSet2;
      function SetCache2(values3) {
        var index2 = -1, length2 = values3 == null ? 0 : values3.length;
        this.__data__ = new MapCache2();
        while (++index2 < length2) {
          this.add(values3[index2]);
        }
      }
      function setCacheAdd2(value2) {
        this.__data__.set(value2, HASH_UNDEFINED2);
        return this;
      }
      function setCacheHas2(value2) {
        return this.__data__.has(value2);
      }
      SetCache2.prototype.add = SetCache2.prototype.push = setCacheAdd2;
      SetCache2.prototype.has = setCacheHas2;
      function Stack2(entries) {
        var data2 = this.__data__ = new ListCache2(entries);
        this.size = data2.size;
      }
      function stackClear2() {
        this.__data__ = new ListCache2();
        this.size = 0;
      }
      function stackDelete2(key2) {
        var data2 = this.__data__, result3 = data2["delete"](key2);
        this.size = data2.size;
        return result3;
      }
      function stackGet2(key2) {
        return this.__data__.get(key2);
      }
      function stackHas2(key2) {
        return this.__data__.has(key2);
      }
      function stackSet2(key2, value2) {
        var data2 = this.__data__;
        if (data2 instanceof ListCache2) {
          var pairs = data2.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE2 - 1) {
            pairs.push([key2, value2]);
            this.size = ++data2.size;
            return this;
          }
          data2 = this.__data__ = new MapCache2(pairs);
        }
        data2.set(key2, value2);
        this.size = data2.size;
        return this;
      }
      Stack2.prototype.clear = stackClear2;
      Stack2.prototype["delete"] = stackDelete2;
      Stack2.prototype.get = stackGet2;
      Stack2.prototype.has = stackHas2;
      Stack2.prototype.set = stackSet2;
      function arrayLikeKeys2(value2, inherited) {
        var isArr = isArray2(value2), isArg = !isArr && isArguments2(value2), isBuff = !isArr && !isArg && isBuffer2(value2), isType = !isArr && !isArg && !isBuff && isTypedArray2(value2), skipIndexes = isArr || isArg || isBuff || isType, result3 = skipIndexes ? baseTimes2(value2.length, String2) : [], length2 = result3.length;
        for (var key2 in value2) {
          if ((inherited || hasOwnProperty2.call(value2, key2)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
          isIndex2(key2, length2)))) {
            result3.push(key2);
          }
        }
        return result3;
      }
      function arraySample(array2) {
        var length2 = array2.length;
        return length2 ? array2[baseRandom(0, length2 - 1)] : undefined$1;
      }
      function arraySampleSize(array2, n2) {
        return shuffleSelf(copyArray2(array2), baseClamp(n2, 0, array2.length));
      }
      function arrayShuffle(array2) {
        return shuffleSelf(copyArray2(array2));
      }
      function assignMergeValue(object2, key2, value2) {
        if (value2 !== undefined$1 && !eq2(object2[key2], value2) || value2 === undefined$1 && !(key2 in object2)) {
          baseAssignValue2(object2, key2, value2);
        }
      }
      function assignValue2(object2, key2, value2) {
        var objValue = object2[key2];
        if (!(hasOwnProperty2.call(object2, key2) && eq2(objValue, value2)) || value2 === undefined$1 && !(key2 in object2)) {
          baseAssignValue2(object2, key2, value2);
        }
      }
      function assocIndexOf2(array2, key2) {
        var length2 = array2.length;
        while (length2--) {
          if (eq2(array2[length2][0], key2)) {
            return length2;
          }
        }
        return -1;
      }
      function baseAggregator(collection, setter, iteratee2, accumulator) {
        baseEach(collection, function(value2, key2, collection2) {
          setter(accumulator, value2, iteratee2(value2), collection2);
        });
        return accumulator;
      }
      function baseAssign2(object2, source) {
        return object2 && copyObject2(source, keys2(source), object2);
      }
      function baseAssignIn2(object2, source) {
        return object2 && copyObject2(source, keysIn2(source), object2);
      }
      function baseAssignValue2(object2, key2, value2) {
        if (key2 == "__proto__" && defineProperty2) {
          defineProperty2(object2, key2, {
            "configurable": true,
            "enumerable": true,
            "value": value2,
            "writable": true
          });
        } else {
          object2[key2] = value2;
        }
      }
      function baseAt(object2, paths) {
        var index2 = -1, length2 = paths.length, result3 = Array2(length2), skip = object2 == null;
        while (++index2 < length2) {
          result3[index2] = skip ? undefined$1 : get2(object2, paths[index2]);
        }
        return result3;
      }
      function baseClamp(number2, lower, upper) {
        if (number2 === number2) {
          if (upper !== undefined$1) {
            number2 = number2 <= upper ? number2 : upper;
          }
          if (lower !== undefined$1) {
            number2 = number2 >= lower ? number2 : lower;
          }
        }
        return number2;
      }
      function baseClone2(value2, bitmask, customizer, key2, object2, stack) {
        var result3, isDeep = bitmask & CLONE_DEEP_FLAG2, isFlat = bitmask & CLONE_FLAT_FLAG2, isFull = bitmask & CLONE_SYMBOLS_FLAG2;
        if (customizer) {
          result3 = object2 ? customizer(value2, key2, object2, stack) : customizer(value2);
        }
        if (result3 !== undefined$1) {
          return result3;
        }
        if (!isObject3(value2)) {
          return value2;
        }
        var isArr = isArray2(value2);
        if (isArr) {
          result3 = initCloneArray2(value2);
          if (!isDeep) {
            return copyArray2(value2, result3);
          }
        } else {
          var tag2 = getTag2(value2), isFunc = tag2 == funcTag2 || tag2 == genTag2;
          if (isBuffer2(value2)) {
            return cloneBuffer2(value2, isDeep);
          }
          if (tag2 == objectTag2 || tag2 == argsTag2 || isFunc && !object2) {
            result3 = isFlat || isFunc ? {} : initCloneObject2(value2);
            if (!isDeep) {
              return isFlat ? copySymbolsIn2(value2, baseAssignIn2(result3, value2)) : copySymbols2(value2, baseAssign2(result3, value2));
            }
          } else {
            if (!cloneableTags2[tag2]) {
              return object2 ? value2 : {};
            }
            result3 = initCloneByTag2(value2, tag2, isDeep);
          }
        }
        stack || (stack = new Stack2());
        var stacked = stack.get(value2);
        if (stacked) {
          return stacked;
        }
        stack.set(value2, result3);
        if (isSet2(value2)) {
          value2.forEach(function(subValue) {
            result3.add(baseClone2(subValue, bitmask, customizer, subValue, value2, stack));
          });
        } else if (isMap2(value2)) {
          value2.forEach(function(subValue, key3) {
            result3.set(key3, baseClone2(subValue, bitmask, customizer, key3, value2, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn2 : getAllKeys2 : isFlat ? keysIn2 : keys2;
        var props = isArr ? undefined$1 : keysFunc(value2);
        arrayEach2(props || value2, function(subValue, key3) {
          if (props) {
            key3 = subValue;
            subValue = value2[key3];
          }
          assignValue2(result3, key3, baseClone2(subValue, bitmask, customizer, key3, value2, stack));
        });
        return result3;
      }
      function baseConforms(source) {
        var props = keys2(source);
        return function(object2) {
          return baseConformsTo(object2, source, props);
        };
      }
      function baseConformsTo(object2, source, props) {
        var length2 = props.length;
        if (object2 == null) {
          return !length2;
        }
        object2 = Object2(object2);
        while (length2--) {
          var key2 = props[length2], predicate = source[key2], value2 = object2[key2];
          if (value2 === undefined$1 && !(key2 in object2) || !predicate(value2)) {
            return false;
          }
        }
        return true;
      }
      function baseDelay(func, wait, args) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        return setTimeout2(function() {
          func.apply(undefined$1, args);
        }, wait);
      }
      function baseDifference(array2, values3, iteratee2, comparator) {
        var index2 = -1, includes2 = arrayIncludes, isCommon = true, length2 = array2.length, result3 = [], valuesLength = values3.length;
        if (!length2) {
          return result3;
        }
        if (iteratee2) {
          values3 = arrayMap2(values3, baseUnary2(iteratee2));
        }
        if (comparator) {
          includes2 = arrayIncludesWith;
          isCommon = false;
        } else if (values3.length >= LARGE_ARRAY_SIZE2) {
          includes2 = cacheHas2;
          isCommon = false;
          values3 = new SetCache2(values3);
        }
        outer:
          while (++index2 < length2) {
            var value2 = array2[index2], computed = iteratee2 == null ? value2 : iteratee2(value2);
            value2 = comparator || value2 !== 0 ? value2 : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values3[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result3.push(value2);
            } else if (!includes2(values3, computed, comparator)) {
              result3.push(value2);
            }
          }
        return result3;
      }
      var baseEach = createBaseEach(baseForOwn2);
      var baseEachRight = createBaseEach(baseForOwnRight, true);
      function baseEvery(collection, predicate) {
        var result3 = true;
        baseEach(collection, function(value2, index2, collection2) {
          result3 = !!predicate(value2, index2, collection2);
          return result3;
        });
        return result3;
      }
      function baseExtremum(array2, iteratee2, comparator) {
        var index2 = -1, length2 = array2.length;
        while (++index2 < length2) {
          var value2 = array2[index2], current = iteratee2(value2);
          if (current != null && (computed === undefined$1 ? current === current && !isSymbol2(current) : comparator(current, computed))) {
            var computed = current, result3 = value2;
          }
        }
        return result3;
      }
      function baseFill(array2, value2, start2, end) {
        var length2 = array2.length;
        start2 = toInteger2(start2);
        if (start2 < 0) {
          start2 = -start2 > length2 ? 0 : length2 + start2;
        }
        end = end === undefined$1 || end > length2 ? length2 : toInteger2(end);
        if (end < 0) {
          end += length2;
        }
        end = start2 > end ? 0 : toLength(end);
        while (start2 < end) {
          array2[start2++] = value2;
        }
        return array2;
      }
      function baseFilter(collection, predicate) {
        var result3 = [];
        baseEach(collection, function(value2, index2, collection2) {
          if (predicate(value2, index2, collection2)) {
            result3.push(value2);
          }
        });
        return result3;
      }
      function baseFlatten(array2, depth, predicate, isStrict, result3) {
        var index2 = -1, length2 = array2.length;
        predicate || (predicate = isFlattenable);
        result3 || (result3 = []);
        while (++index2 < length2) {
          var value2 = array2[index2];
          if (depth > 0 && predicate(value2)) {
            if (depth > 1) {
              baseFlatten(value2, depth - 1, predicate, isStrict, result3);
            } else {
              arrayPush2(result3, value2);
            }
          } else if (!isStrict) {
            result3[result3.length] = value2;
          }
        }
        return result3;
      }
      var baseFor2 = createBaseFor2();
      var baseForRight = createBaseFor2(true);
      function baseForOwn2(object2, iteratee2) {
        return object2 && baseFor2(object2, iteratee2, keys2);
      }
      function baseForOwnRight(object2, iteratee2) {
        return object2 && baseForRight(object2, iteratee2, keys2);
      }
      function baseFunctions(object2, props) {
        return arrayFilter2(props, function(key2) {
          return isFunction3(object2[key2]);
        });
      }
      function baseGet2(object2, path) {
        path = castPath2(path, object2);
        var index2 = 0, length2 = path.length;
        while (object2 != null && index2 < length2) {
          object2 = object2[toKey2(path[index2++])];
        }
        return index2 && index2 == length2 ? object2 : undefined$1;
      }
      function baseGetAllKeys2(object2, keysFunc, symbolsFunc) {
        var result3 = keysFunc(object2);
        return isArray2(object2) ? result3 : arrayPush2(result3, symbolsFunc(object2));
      }
      function baseGetTag2(value2) {
        if (value2 == null) {
          return value2 === undefined$1 ? undefinedTag2 : nullTag2;
        }
        return symToStringTag2 && symToStringTag2 in Object2(value2) ? getRawTag2(value2) : objectToString2(value2);
      }
      function baseGt(value2, other) {
        return value2 > other;
      }
      function baseHas2(object2, key2) {
        return object2 != null && hasOwnProperty2.call(object2, key2);
      }
      function baseHasIn2(object2, key2) {
        return object2 != null && key2 in Object2(object2);
      }
      function baseInRange(number2, start2, end) {
        return number2 >= nativeMin(start2, end) && number2 < nativeMax(start2, end);
      }
      function baseIntersection(arrays, iteratee2, comparator) {
        var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length2 = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result3 = [];
        while (othIndex--) {
          var array2 = arrays[othIndex];
          if (othIndex && iteratee2) {
            array2 = arrayMap2(array2, baseUnary2(iteratee2));
          }
          maxLength = nativeMin(array2.length, maxLength);
          caches[othIndex] = !comparator && (iteratee2 || length2 >= 120 && array2.length >= 120) ? new SetCache2(othIndex && array2) : undefined$1;
        }
        array2 = arrays[0];
        var index2 = -1, seen = caches[0];
        outer:
          while (++index2 < length2 && result3.length < maxLength) {
            var value2 = array2[index2], computed = iteratee2 ? iteratee2(value2) : value2;
            value2 = comparator || value2 !== 0 ? value2 : 0;
            if (!(seen ? cacheHas2(seen, computed) : includes2(result3, computed, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache ? cacheHas2(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result3.push(value2);
            }
          }
        return result3;
      }
      function baseInverter(object2, setter, iteratee2, accumulator) {
        baseForOwn2(object2, function(value2, key2, object3) {
          setter(accumulator, iteratee2(value2), key2, object3);
        });
        return accumulator;
      }
      function baseInvoke(object2, path, args) {
        path = castPath2(path, object2);
        object2 = parent2(object2, path);
        var func = object2 == null ? object2 : object2[toKey2(last(path))];
        return func == null ? undefined$1 : apply(func, object2, args);
      }
      function baseIsArguments2(value2) {
        return isObjectLike2(value2) && baseGetTag2(value2) == argsTag2;
      }
      function baseIsArrayBuffer(value2) {
        return isObjectLike2(value2) && baseGetTag2(value2) == arrayBufferTag2;
      }
      function baseIsDate(value2) {
        return isObjectLike2(value2) && baseGetTag2(value2) == dateTag2;
      }
      function baseIsEqual2(value2, other, bitmask, customizer, stack) {
        if (value2 === other) {
          return true;
        }
        if (value2 == null || other == null || !isObjectLike2(value2) && !isObjectLike2(other)) {
          return value2 !== value2 && other !== other;
        }
        return baseIsEqualDeep2(value2, other, bitmask, customizer, baseIsEqual2, stack);
      }
      function baseIsEqualDeep2(object2, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object2), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag2 : getTag2(object2), othTag = othIsArr ? arrayTag2 : getTag2(other);
        objTag = objTag == argsTag2 ? objectTag2 : objTag;
        othTag = othTag == argsTag2 ? objectTag2 : othTag;
        var objIsObj = objTag == objectTag2, othIsObj = othTag == objectTag2, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer2(object2)) {
          if (!isBuffer2(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack2());
          return objIsArr || isTypedArray2(object2) ? equalArrays2(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag2(object2, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG2)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack2());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack2());
        return equalObjects2(object2, other, bitmask, customizer, equalFunc, stack);
      }
      function baseIsMap2(value2) {
        return isObjectLike2(value2) && getTag2(value2) == mapTag2;
      }
      function baseIsMatch2(object2, source, matchData, customizer) {
        var index2 = matchData.length, length2 = index2, noCustomizer = !customizer;
        if (object2 == null) {
          return !length2;
        }
        object2 = Object2(object2);
        while (index2--) {
          var data2 = matchData[index2];
          if (noCustomizer && data2[2] ? data2[1] !== object2[data2[0]] : !(data2[0] in object2)) {
            return false;
          }
        }
        while (++index2 < length2) {
          data2 = matchData[index2];
          var key2 = data2[0], objValue = object2[key2], srcValue = data2[1];
          if (noCustomizer && data2[2]) {
            if (objValue === undefined$1 && !(key2 in object2)) {
              return false;
            }
          } else {
            var stack = new Stack2();
            if (customizer) {
              var result3 = customizer(objValue, srcValue, key2, object2, source, stack);
            }
            if (!(result3 === undefined$1 ? baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG2 | COMPARE_UNORDERED_FLAG2, customizer, stack) : result3)) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIsNative2(value2) {
        if (!isObject3(value2) || isMasked2(value2)) {
          return false;
        }
        var pattern = isFunction3(value2) ? reIsNative2 : reIsHostCtor2;
        return pattern.test(toSource2(value2));
      }
      function baseIsRegExp(value2) {
        return isObjectLike2(value2) && baseGetTag2(value2) == regexpTag2;
      }
      function baseIsSet2(value2) {
        return isObjectLike2(value2) && getTag2(value2) == setTag2;
      }
      function baseIsTypedArray2(value2) {
        return isObjectLike2(value2) && isLength2(value2.length) && !!typedArrayTags2[baseGetTag2(value2)];
      }
      function baseIteratee2(value2) {
        if (typeof value2 == "function") {
          return value2;
        }
        if (value2 == null) {
          return identity2;
        }
        if (typeof value2 == "object") {
          return isArray2(value2) ? baseMatchesProperty2(value2[0], value2[1]) : baseMatches2(value2);
        }
        return property2(value2);
      }
      function baseKeys2(object2) {
        if (!isPrototype2(object2)) {
          return nativeKeys2(object2);
        }
        var result3 = [];
        for (var key2 in Object2(object2)) {
          if (hasOwnProperty2.call(object2, key2) && key2 != "constructor") {
            result3.push(key2);
          }
        }
        return result3;
      }
      function baseKeysIn2(object2) {
        if (!isObject3(object2)) {
          return nativeKeysIn2(object2);
        }
        var isProto = isPrototype2(object2), result3 = [];
        for (var key2 in object2) {
          if (!(key2 == "constructor" && (isProto || !hasOwnProperty2.call(object2, key2)))) {
            result3.push(key2);
          }
        }
        return result3;
      }
      function baseLt(value2, other) {
        return value2 < other;
      }
      function baseMap(collection, iteratee2) {
        var index2 = -1, result3 = isArrayLike2(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value2, key2, collection2) {
          result3[++index2] = iteratee2(value2, key2, collection2);
        });
        return result3;
      }
      function baseMatches2(source) {
        var matchData = getMatchData2(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable2(matchData[0][0], matchData[0][1]);
        }
        return function(object2) {
          return object2 === source || baseIsMatch2(object2, source, matchData);
        };
      }
      function baseMatchesProperty2(path, srcValue) {
        if (isKey2(path) && isStrictComparable2(srcValue)) {
          return matchesStrictComparable2(toKey2(path), srcValue);
        }
        return function(object2) {
          var objValue = get2(object2, path);
          return objValue === undefined$1 && objValue === srcValue ? hasIn2(object2, path) : baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG2 | COMPARE_UNORDERED_FLAG2);
        };
      }
      function baseMerge(object2, source, srcIndex, customizer, stack) {
        if (object2 === source) {
          return;
        }
        baseFor2(source, function(srcValue, key2) {
          stack || (stack = new Stack2());
          if (isObject3(srcValue)) {
            baseMergeDeep(object2, source, key2, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object2, key2), srcValue, key2 + "", object2, source, stack) : undefined$1;
            if (newValue === undefined$1) {
              newValue = srcValue;
            }
            assignMergeValue(object2, key2, newValue);
          }
        }, keysIn2);
      }
      function baseMergeDeep(object2, source, key2, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object2, key2), srcValue = safeGet(source, key2), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object2, key2, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key2 + "", object2, source, stack) : undefined$1;
        var isCommon = newValue === undefined$1;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray2(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer2(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray2(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject2(srcValue) || isArguments2(srcValue)) {
            newValue = objValue;
            if (isArguments2(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject3(objValue) || isFunction3(objValue)) {
              newValue = initCloneObject2(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object2, key2, newValue);
      }
      function baseNth(array2, n2) {
        var length2 = array2.length;
        if (!length2) {
          return;
        }
        n2 += n2 < 0 ? length2 : 0;
        return isIndex2(n2, length2) ? array2[n2] : undefined$1;
      }
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap2(iteratees, function(iteratee2) {
            if (isArray2(iteratee2)) {
              return function(value2) {
                return baseGet2(value2, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
              };
            }
            return iteratee2;
          });
        } else {
          iteratees = [identity2];
        }
        var index2 = -1;
        iteratees = arrayMap2(iteratees, baseUnary2(getIteratee()));
        var result3 = baseMap(collection, function(value2, key2, collection2) {
          var criteria = arrayMap2(iteratees, function(iteratee2) {
            return iteratee2(value2);
          });
          return { "criteria": criteria, "index": ++index2, "value": value2 };
        });
        return baseSortBy(result3, function(object2, other) {
          return compareMultiple(object2, other, orders);
        });
      }
      function basePick(object2, paths) {
        return basePickBy(object2, paths, function(value2, path) {
          return hasIn2(object2, path);
        });
      }
      function basePickBy(object2, paths, predicate) {
        var index2 = -1, length2 = paths.length, result3 = {};
        while (++index2 < length2) {
          var path = paths[index2], value2 = baseGet2(object2, path);
          if (predicate(value2, path)) {
            baseSet(result3, castPath2(path, object2), value2);
          }
        }
        return result3;
      }
      function basePropertyDeep2(path) {
        return function(object2) {
          return baseGet2(object2, path);
        };
      }
      function basePullAll(array2, values3, iteratee2, comparator) {
        var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index2 = -1, length2 = values3.length, seen = array2;
        if (array2 === values3) {
          values3 = copyArray2(values3);
        }
        if (iteratee2) {
          seen = arrayMap2(array2, baseUnary2(iteratee2));
        }
        while (++index2 < length2) {
          var fromIndex = 0, value2 = values3[index2], computed = iteratee2 ? iteratee2(value2) : value2;
          while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array2) {
              splice2.call(seen, fromIndex, 1);
            }
            splice2.call(array2, fromIndex, 1);
          }
        }
        return array2;
      }
      function basePullAt(array2, indexes) {
        var length2 = array2 ? indexes.length : 0, lastIndex = length2 - 1;
        while (length2--) {
          var index2 = indexes[length2];
          if (length2 == lastIndex || index2 !== previous) {
            var previous = index2;
            if (isIndex2(index2)) {
              splice2.call(array2, index2, 1);
            } else {
              baseUnset(array2, index2);
            }
          }
        }
        return array2;
      }
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }
      function baseRange(start2, end, step, fromRight) {
        var index2 = -1, length2 = nativeMax(nativeCeil((end - start2) / (step || 1)), 0), result3 = Array2(length2);
        while (length2--) {
          result3[fromRight ? length2 : ++index2] = start2;
          start2 += step;
        }
        return result3;
      }
      function baseRepeat(string2, n2) {
        var result3 = "";
        if (!string2 || n2 < 1 || n2 > MAX_SAFE_INTEGER2) {
          return result3;
        }
        do {
          if (n2 % 2) {
            result3 += string2;
          }
          n2 = nativeFloor(n2 / 2);
          if (n2) {
            string2 += string2;
          }
        } while (n2);
        return result3;
      }
      function baseRest(func, start2) {
        return setToString(overRest(func, start2, identity2), func + "");
      }
      function baseSample(collection) {
        return arraySample(values2(collection));
      }
      function baseSampleSize(collection, n2) {
        var array2 = values2(collection);
        return shuffleSelf(array2, baseClamp(n2, 0, array2.length));
      }
      function baseSet(object2, path, value2, customizer) {
        if (!isObject3(object2)) {
          return object2;
        }
        path = castPath2(path, object2);
        var index2 = -1, length2 = path.length, lastIndex = length2 - 1, nested = object2;
        while (nested != null && ++index2 < length2) {
          var key2 = toKey2(path[index2]), newValue = value2;
          if (key2 === "__proto__" || key2 === "constructor" || key2 === "prototype") {
            return object2;
          }
          if (index2 != lastIndex) {
            var objValue = nested[key2];
            newValue = customizer ? customizer(objValue, key2, nested) : undefined$1;
            if (newValue === undefined$1) {
              newValue = isObject3(objValue) ? objValue : isIndex2(path[index2 + 1]) ? [] : {};
            }
          }
          assignValue2(nested, key2, newValue);
          nested = nested[key2];
        }
        return object2;
      }
      var baseSetData = !metaMap ? identity2 : function(func, data2) {
        metaMap.set(func, data2);
        return func;
      };
      var baseSetToString = !defineProperty2 ? identity2 : function(func, string2) {
        return defineProperty2(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string2),
          "writable": true
        });
      };
      function baseShuffle(collection) {
        return shuffleSelf(values2(collection));
      }
      function baseSlice2(array2, start2, end) {
        var index2 = -1, length2 = array2.length;
        if (start2 < 0) {
          start2 = -start2 > length2 ? 0 : length2 + start2;
        }
        end = end > length2 ? length2 : end;
        if (end < 0) {
          end += length2;
        }
        length2 = start2 > end ? 0 : end - start2 >>> 0;
        start2 >>>= 0;
        var result3 = Array2(length2);
        while (++index2 < length2) {
          result3[index2] = array2[index2 + start2];
        }
        return result3;
      }
      function baseSome(collection, predicate) {
        var result3;
        baseEach(collection, function(value2, index2, collection2) {
          result3 = predicate(value2, index2, collection2);
          return !result3;
        });
        return !!result3;
      }
      function baseSortedIndex(array2, value2, retHighest) {
        var low = 0, high = array2 == null ? low : array2.length;
        if (typeof value2 == "number" && value2 === value2 && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1, computed = array2[mid];
            if (computed !== null && !isSymbol2(computed) && (retHighest ? computed <= value2 : computed < value2)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array2, value2, identity2, retHighest);
      }
      function baseSortedIndexBy(array2, value2, iteratee2, retHighest) {
        var low = 0, high = array2 == null ? 0 : array2.length;
        if (high === 0) {
          return 0;
        }
        value2 = iteratee2(value2);
        var valIsNaN = value2 !== value2, valIsNull = value2 === null, valIsSymbol = isSymbol2(value2), valIsUndefined = value2 === undefined$1;
        while (low < high) {
          var mid = nativeFloor((low + high) / 2), computed = iteratee2(array2[mid]), othIsDefined = computed !== undefined$1, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol2(computed);
          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value2 : computed < value2;
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }
      function baseSortedUniq(array2, iteratee2) {
        var index2 = -1, length2 = array2.length, resIndex = 0, result3 = [];
        while (++index2 < length2) {
          var value2 = array2[index2], computed = iteratee2 ? iteratee2(value2) : value2;
          if (!index2 || !eq2(computed, seen)) {
            var seen = computed;
            result3[resIndex++] = value2 === 0 ? 0 : value2;
          }
        }
        return result3;
      }
      function baseToNumber(value2) {
        if (typeof value2 == "number") {
          return value2;
        }
        if (isSymbol2(value2)) {
          return NAN;
        }
        return +value2;
      }
      function baseToString2(value2) {
        if (typeof value2 == "string") {
          return value2;
        }
        if (isArray2(value2)) {
          return arrayMap2(value2, baseToString2) + "";
        }
        if (isSymbol2(value2)) {
          return symbolToString2 ? symbolToString2.call(value2) : "";
        }
        var result3 = value2 + "";
        return result3 == "0" && 1 / value2 == -INFINITY2 ? "-0" : result3;
      }
      function baseUniq(array2, iteratee2, comparator) {
        var index2 = -1, includes2 = arrayIncludes, length2 = array2.length, isCommon = true, result3 = [], seen = result3;
        if (comparator) {
          isCommon = false;
          includes2 = arrayIncludesWith;
        } else if (length2 >= LARGE_ARRAY_SIZE2) {
          var set3 = iteratee2 ? null : createSet(array2);
          if (set3) {
            return setToArray2(set3);
          }
          isCommon = false;
          includes2 = cacheHas2;
          seen = new SetCache2();
        } else {
          seen = iteratee2 ? [] : result3;
        }
        outer:
          while (++index2 < length2) {
            var value2 = array2[index2], computed = iteratee2 ? iteratee2(value2) : value2;
            value2 = comparator || value2 !== 0 ? value2 : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed);
              }
              result3.push(value2);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result3) {
                seen.push(computed);
              }
              result3.push(value2);
            }
          }
        return result3;
      }
      function baseUnset(object2, path) {
        path = castPath2(path, object2);
        object2 = parent2(object2, path);
        return object2 == null || delete object2[toKey2(last(path))];
      }
      function baseUpdate(object2, path, updater, customizer) {
        return baseSet(object2, path, updater(baseGet2(object2, path)), customizer);
      }
      function baseWhile(array2, predicate, isDrop, fromRight) {
        var length2 = array2.length, index2 = fromRight ? length2 : -1;
        while ((fromRight ? index2-- : ++index2 < length2) && predicate(array2[index2], index2, array2)) {
        }
        return isDrop ? baseSlice2(array2, fromRight ? 0 : index2, fromRight ? index2 + 1 : length2) : baseSlice2(array2, fromRight ? index2 + 1 : 0, fromRight ? length2 : index2);
      }
      function baseWrapperValue(value2, actions) {
        var result3 = value2;
        if (result3 instanceof LazyWrapper) {
          result3 = result3.value();
        }
        return arrayReduce2(actions, function(result4, action) {
          return action.func.apply(action.thisArg, arrayPush2([result4], action.args));
        }, result3);
      }
      function baseXor(arrays, iteratee2, comparator) {
        var length2 = arrays.length;
        if (length2 < 2) {
          return length2 ? baseUniq(arrays[0]) : [];
        }
        var index2 = -1, result3 = Array2(length2);
        while (++index2 < length2) {
          var array2 = arrays[index2], othIndex = -1;
          while (++othIndex < length2) {
            if (othIndex != index2) {
              result3[index2] = baseDifference(result3[index2] || array2, arrays[othIndex], iteratee2, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result3, 1), iteratee2, comparator);
      }
      function baseZipObject(props, values3, assignFunc) {
        var index2 = -1, length2 = props.length, valsLength = values3.length, result3 = {};
        while (++index2 < length2) {
          var value2 = index2 < valsLength ? values3[index2] : undefined$1;
          assignFunc(result3, props[index2], value2);
        }
        return result3;
      }
      function castArrayLikeObject(value2) {
        return isArrayLikeObject(value2) ? value2 : [];
      }
      function castFunction(value2) {
        return typeof value2 == "function" ? value2 : identity2;
      }
      function castPath2(value2, object2) {
        if (isArray2(value2)) {
          return value2;
        }
        return isKey2(value2, object2) ? [value2] : stringToPath2(toString2(value2));
      }
      var castRest = baseRest;
      function castSlice2(array2, start2, end) {
        var length2 = array2.length;
        end = end === undefined$1 ? length2 : end;
        return !start2 && end >= length2 ? array2 : baseSlice2(array2, start2, end);
      }
      var clearTimeout2 = ctxClearTimeout || function(id2) {
        return root2.clearTimeout(id2);
      };
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length2 = buffer.length, result3 = allocUnsafe2 ? allocUnsafe2(length2) : new buffer.constructor(length2);
        buffer.copy(result3);
        return result3;
      }
      function cloneArrayBuffer2(arrayBuffer) {
        var result3 = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result3).set(new Uint8Array2(arrayBuffer));
        return result3;
      }
      function cloneDataView2(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      function cloneRegExp2(regexp) {
        var result3 = new regexp.constructor(regexp.source, reFlags2.exec(regexp));
        result3.lastIndex = regexp.lastIndex;
        return result3;
      }
      function cloneSymbol2(symbol) {
        return symbolValueOf2 ? Object2(symbolValueOf2.call(symbol)) : {};
      }
      function cloneTypedArray2(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function compareAscending(value2, other) {
        if (value2 !== other) {
          var valIsDefined = value2 !== undefined$1, valIsNull = value2 === null, valIsReflexive = value2 === value2, valIsSymbol = isSymbol2(value2);
          var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value2 > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value2 < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      function compareMultiple(object2, other, orders) {
        var index2 = -1, objCriteria = object2.criteria, othCriteria = other.criteria, length2 = objCriteria.length, ordersLength = orders.length;
        while (++index2 < length2) {
          var result3 = compareAscending(objCriteria[index2], othCriteria[index2]);
          if (result3) {
            if (index2 >= ordersLength) {
              return result3;
            }
            var order = orders[index2];
            return result3 * (order == "desc" ? -1 : 1);
          }
        }
        return object2.index - other.index;
      }
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result3 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
        while (++leftIndex < leftLength) {
          result3[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result3[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result3[leftIndex++] = args[argsIndex++];
        }
        return result3;
      }
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result3 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
        while (++argsIndex < rangeLength) {
          result3[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result3[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result3[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result3;
      }
      function copyArray2(source, array2) {
        var index2 = -1, length2 = source.length;
        array2 || (array2 = Array2(length2));
        while (++index2 < length2) {
          array2[index2] = source[index2];
        }
        return array2;
      }
      function copyObject2(source, props, object2, customizer) {
        var isNew = !object2;
        object2 || (object2 = {});
        var index2 = -1, length2 = props.length;
        while (++index2 < length2) {
          var key2 = props[index2];
          var newValue = customizer ? customizer(object2[key2], source[key2], key2, object2, source) : undefined$1;
          if (newValue === undefined$1) {
            newValue = source[key2];
          }
          if (isNew) {
            baseAssignValue2(object2, key2, newValue);
          } else {
            assignValue2(object2, key2, newValue);
          }
        }
        return object2;
      }
      function copySymbols2(source, object2) {
        return copyObject2(source, getSymbols2(source), object2);
      }
      function copySymbolsIn2(source, object2) {
        return copyObject2(source, getSymbolsIn2(source), object2);
      }
      function createAggregator(setter, initializer) {
        return function(collection, iteratee2) {
          var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
        };
      }
      function createAssigner(assigner) {
        return baseRest(function(object2, sources) {
          var index2 = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : undefined$1, guard = length2 > 2 ? sources[2] : undefined$1;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : undefined$1;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length2 < 3 ? undefined$1 : customizer;
            length2 = 1;
          }
          object2 = Object2(object2);
          while (++index2 < length2) {
            var source = sources[index2];
            if (source) {
              assigner(object2, source, index2, customizer);
            }
          }
          return object2;
        });
      }
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee2) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike2(collection)) {
            return eachFunc(collection, iteratee2);
          }
          var length2 = collection.length, index2 = fromRight ? length2 : -1, iterable = Object2(collection);
          while (fromRight ? index2-- : ++index2 < length2) {
            if (iteratee2(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      function createBaseFor2(fromRight) {
        return function(object2, iteratee2, keysFunc) {
          var index2 = -1, iterable = Object2(object2), props = keysFunc(object2), length2 = props.length;
          while (length2--) {
            var key2 = props[fromRight ? length2 : ++index2];
            if (iteratee2(iterable[key2], key2, iterable) === false) {
              break;
            }
          }
          return object2;
        };
      }
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var fn2 = this && this !== root2 && this instanceof wrapper ? Ctor : func;
          return fn2.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }
      function createCaseFirst2(methodName) {
        return function(string2) {
          string2 = toString2(string2);
          var strSymbols = hasUnicode2(string2) ? stringToArray2(string2) : undefined$1;
          var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
          var trailing = strSymbols ? castSlice2(strSymbols, 1).join("") : string2.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      function createCompounder2(callback) {
        return function(string2) {
          return arrayReduce2(words2(deburr2(string2).replace(reApos2, "")), callback, "");
        };
      }
      function createCtor(Ctor) {
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return new Ctor();
            case 1:
              return new Ctor(args[0]);
            case 2:
              return new Ctor(args[0], args[1]);
            case 3:
              return new Ctor(args[0], args[1], args[2]);
            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate2(Ctor.prototype), result3 = Ctor.apply(thisBinding, args);
          return isObject3(result3) ? result3 : thisBinding;
        };
      }
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);
        function wrapper() {
          var length2 = arguments.length, args = Array2(length2), index2 = length2, placeholder = getHolder(wrapper);
          while (index2--) {
            args[index2] = arguments[index2];
          }
          var holders = length2 < 3 && args[0] !== placeholder && args[length2 - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length2 -= holders.length;
          if (length2 < arity) {
            return createRecurry(
              func,
              bitmask,
              createHybrid,
              wrapper.placeholder,
              undefined$1,
              args,
              holders,
              undefined$1,
              undefined$1,
              arity - length2
            );
          }
          var fn2 = this && this !== root2 && this instanceof wrapper ? Ctor : func;
          return apply(fn2, this, args);
        }
        return wrapper;
      }
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object2(collection);
          if (!isArrayLike2(collection)) {
            var iteratee2 = getIteratee(predicate, 3);
            collection = keys2(collection);
            predicate = function(key2) {
              return iteratee2(iterable[key2], key2, iterable);
            };
          }
          var index2 = findIndexFunc(collection, predicate, fromIndex);
          return index2 > -1 ? iterable[iteratee2 ? collection[index2] : index2] : undefined$1;
        };
      }
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length2 = funcs.length, index2 = length2, prereq = LodashWrapper.prototype.thru;
          if (fromRight) {
            funcs.reverse();
          }
          while (index2--) {
            var func = funcs[index2];
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT2);
            }
            if (prereq && !wrapper && getFuncName(func) == "wrapper") {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index2 = wrapper ? index2 : length2;
          while (++index2 < length2) {
            func = funcs[index2];
            var funcName = getFuncName(func), data2 = funcName == "wrapper" ? getData(func) : undefined$1;
            if (data2 && isLaziable(data2[0]) && data2[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data2[4].length && data2[9] == 1) {
              wrapper = wrapper[getFuncName(data2[0])].apply(wrapper, data2[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments, value2 = args[0];
            if (wrapper && args.length == 1 && isArray2(value2)) {
              return wrapper.plant(value2).value();
            }
            var index3 = 0, result3 = length2 ? funcs[index3].apply(this, args) : value2;
            while (++index3 < length2) {
              result3 = funcs[index3].call(this, result3);
            }
            return result3;
          };
        });
      }
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);
        function wrapper() {
          var length2 = arguments.length, args = Array2(length2), index2 = length2;
          while (index2--) {
            args[index2] = arguments[index2];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length2 -= holdersCount;
          if (isCurried && length2 < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(
              func,
              bitmask,
              createHybrid,
              wrapper.placeholder,
              thisArg,
              args,
              newHolders,
              argPos,
              ary2,
              arity - length2
            );
          }
          var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
          length2 = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length2 > 1) {
            args.reverse();
          }
          if (isAry && ary2 < length2) {
            args.length = ary2;
          }
          if (this && this !== root2 && this instanceof wrapper) {
            fn2 = Ctor || createCtor(fn2);
          }
          return fn2.apply(thisBinding, args);
        }
        return wrapper;
      }
      function createInverter(setter, toIteratee) {
        return function(object2, iteratee2) {
          return baseInverter(object2, setter, toIteratee(iteratee2), {});
        };
      }
      function createMathOperation(operator, defaultValue) {
        return function(value2, other) {
          var result3;
          if (value2 === undefined$1 && other === undefined$1) {
            return defaultValue;
          }
          if (value2 !== undefined$1) {
            result3 = value2;
          }
          if (other !== undefined$1) {
            if (result3 === undefined$1) {
              return other;
            }
            if (typeof value2 == "string" || typeof other == "string") {
              value2 = baseToString2(value2);
              other = baseToString2(other);
            } else {
              value2 = baseToNumber(value2);
              other = baseToNumber(other);
            }
            result3 = operator(value2, other);
          }
          return result3;
        };
      }
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap2(iteratees, baseUnary2(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee2) {
              return apply(iteratee2, thisArg, args);
            });
          });
        });
      }
      function createPadding(length2, chars) {
        chars = chars === undefined$1 ? " " : baseToString2(chars);
        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length2) : chars;
        }
        var result3 = baseRepeat(chars, nativeCeil(length2 / stringSize(chars)));
        return hasUnicode2(chars) ? castSlice2(stringToArray2(result3), 0, length2).join("") : result3.slice(0, length2);
      }
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root2 && this instanceof wrapper ? Ctor : func;
          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn2, isBind ? thisArg : this, args);
        }
        return wrapper;
      }
      function createRange(fromRight) {
        return function(start2, end, step) {
          if (step && typeof step != "number" && isIterateeCall(start2, end, step)) {
            end = step = undefined$1;
          }
          start2 = toFinite(start2);
          if (end === undefined$1) {
            end = start2;
            start2 = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined$1 ? start2 < end ? 1 : -1 : toFinite(step);
          return baseRange(start2, end, step, fromRight);
        };
      }
      function createRelationalOperation(operator) {
        return function(value2, other) {
          if (!(typeof value2 == "string" && typeof other == "string")) {
            value2 = toNumber(value2);
            other = toNumber(other);
          }
          return operator(value2, other);
        };
      }
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func,
          bitmask,
          thisArg,
          newPartials,
          newHolders,
          newPartialsRight,
          newHoldersRight,
          argPos,
          ary2,
          arity
        ];
        var result3 = wrapFunc.apply(undefined$1, newData);
        if (isLaziable(func)) {
          setData(result3, newData);
        }
        result3.placeholder = placeholder;
        return setWrapToString(result3, func, bitmask);
      }
      function createRound(methodName) {
        var func = Math2[methodName];
        return function(number2, precision) {
          number2 = toNumber(number2);
          precision = precision == null ? 0 : nativeMin(toInteger2(precision), 292);
          if (precision && nativeIsFinite(number2)) {
            var pair = (toString2(number2) + "e").split("e"), value2 = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (toString2(value2) + "e").split("e");
            return +(pair[0] + "e" + (+pair[1] - precision));
          }
          return func(number2);
        };
      }
      var createSet = !(Set2 && 1 / setToArray2(new Set2([, -0]))[1] == INFINITY2) ? noop2 : function(values3) {
        return new Set2(values3);
      };
      function createToPairs(keysFunc) {
        return function(object2) {
          var tag2 = getTag2(object2);
          if (tag2 == mapTag2) {
            return mapToArray2(object2);
          }
          if (tag2 == setTag2) {
            return setToPairs(object2);
          }
          return baseToPairs(object2, keysFunc(object2));
        };
      }
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        var length2 = partials ? partials.length : 0;
        if (!length2) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined$1;
        }
        ary2 = ary2 === undefined$1 ? ary2 : nativeMax(toInteger2(ary2), 0);
        arity = arity === undefined$1 ? arity : toInteger2(arity);
        length2 -= holders ? holders.length : 0;
        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials, holdersRight = holders;
          partials = holders = undefined$1;
        }
        var data2 = isBindKey ? undefined$1 : getData(func);
        var newData = [
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ];
        if (data2) {
          mergeData(newData, data2);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length2, 0);
        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result3 = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result3 = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result3 = createPartial(func, bitmask, thisArg, partials);
        } else {
          result3 = createHybrid.apply(undefined$1, newData);
        }
        var setter = data2 ? baseSetData : setData;
        return setWrapToString(setter(result3, newData), func, bitmask);
      }
      function customDefaultsAssignIn(objValue, srcValue, key2, object2) {
        if (objValue === undefined$1 || eq2(objValue, objectProto2[key2]) && !hasOwnProperty2.call(object2, key2)) {
          return srcValue;
        }
        return objValue;
      }
      function customDefaultsMerge(objValue, srcValue, key2, object2, source, stack) {
        if (isObject3(objValue) && isObject3(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      function customOmitClone(value2) {
        return isPlainObject2(value2) ? undefined$1 : value2;
      }
      function equalArrays2(array2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG2, arrLength = array2.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array2);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array2;
        }
        var index2 = -1, result3 = true, seen = bitmask & COMPARE_UNORDERED_FLAG2 ? new SetCache2() : undefined$1;
        stack.set(array2, other);
        stack.set(other, array2);
        while (++index2 < arrLength) {
          var arrValue = array2[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack) : customizer(arrValue, othValue, index2, array2, other, stack);
          }
          if (compared !== undefined$1) {
            if (compared) {
              continue;
            }
            result3 = false;
            break;
          }
          if (seen) {
            if (!arraySome2(other, function(othValue2, othIndex) {
              if (!cacheHas2(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result3 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result3 = false;
            break;
          }
        }
        stack["delete"](array2);
        stack["delete"](other);
        return result3;
      }
      function equalByTag2(object2, other, tag2, bitmask, customizer, equalFunc, stack) {
        switch (tag2) {
          case dataViewTag2:
            if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
              return false;
            }
            object2 = object2.buffer;
            other = other.buffer;
          case arrayBufferTag2:
            if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag2:
          case dateTag2:
          case numberTag2:
            return eq2(+object2, +other);
          case errorTag2:
            return object2.name == other.name && object2.message == other.message;
          case regexpTag2:
          case stringTag2:
            return object2 == other + "";
          case mapTag2:
            var convert = mapToArray2;
          case setTag2:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
            convert || (convert = setToArray2);
            if (object2.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object2);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG2;
            stack.set(object2, other);
            var result3 = equalArrays2(convert(object2), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object2);
            return result3;
          case symbolTag2:
            if (symbolValueOf2) {
              return symbolValueOf2.call(object2) == symbolValueOf2.call(other);
            }
        }
        return false;
      }
      function equalObjects2(object2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG2, objProps = getAllKeys2(object2), objLength = objProps.length, othProps = getAllKeys2(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key2 = objProps[index2];
          if (!(isPartial ? key2 in other : hasOwnProperty2.call(other, key2))) {
            return false;
          }
        }
        var objStacked = stack.get(object2);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object2;
        }
        var result3 = true;
        stack.set(object2, other);
        stack.set(other, object2);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key2 = objProps[index2];
          var objValue = object2[key2], othValue = other[key2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key2, other, object2, stack) : customizer(objValue, othValue, key2, object2, other, stack);
          }
          if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result3 = false;
            break;
          }
          skipCtor || (skipCtor = key2 == "constructor");
        }
        if (result3 && !skipCtor) {
          var objCtor = object2.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result3 = false;
          }
        }
        stack["delete"](object2);
        stack["delete"](other);
        return result3;
      }
      function flatRest(func) {
        return setToString(overRest(func, undefined$1, flatten), func + "");
      }
      function getAllKeys2(object2) {
        return baseGetAllKeys2(object2, keys2, getSymbols2);
      }
      function getAllKeysIn2(object2) {
        return baseGetAllKeys2(object2, keysIn2, getSymbolsIn2);
      }
      var getData = !metaMap ? noop2 : function(func) {
        return metaMap.get(func);
      };
      function getFuncName(func) {
        var result3 = func.name + "", array2 = realNames[result3], length2 = hasOwnProperty2.call(realNames, result3) ? array2.length : 0;
        while (length2--) {
          var data2 = array2[length2], otherFunc = data2.func;
          if (otherFunc == null || otherFunc == func) {
            return data2.name;
          }
        }
        return result3;
      }
      function getHolder(func) {
        var object2 = hasOwnProperty2.call(lodash2, "placeholder") ? lodash2 : func;
        return object2.placeholder;
      }
      function getIteratee() {
        var result3 = lodash2.iteratee || iteratee;
        result3 = result3 === iteratee ? baseIteratee2 : result3;
        return arguments.length ? result3(arguments[0], arguments[1]) : result3;
      }
      function getMapData2(map3, key2) {
        var data2 = map3.__data__;
        return isKeyable2(key2) ? data2[typeof key2 == "string" ? "string" : "hash"] : data2.map;
      }
      function getMatchData2(object2) {
        var result3 = keys2(object2), length2 = result3.length;
        while (length2--) {
          var key2 = result3[length2], value2 = object2[key2];
          result3[length2] = [key2, value2, isStrictComparable2(value2)];
        }
        return result3;
      }
      function getNative2(object2, key2) {
        var value2 = getValue2(object2, key2);
        return baseIsNative2(value2) ? value2 : undefined$1;
      }
      function getRawTag2(value2) {
        var isOwn = hasOwnProperty2.call(value2, symToStringTag2), tag2 = value2[symToStringTag2];
        try {
          value2[symToStringTag2] = undefined$1;
          var unmasked = true;
        } catch (e3) {
        }
        var result3 = nativeObjectToString2.call(value2);
        if (unmasked) {
          if (isOwn) {
            value2[symToStringTag2] = tag2;
          } else {
            delete value2[symToStringTag2];
          }
        }
        return result3;
      }
      var getSymbols2 = !nativeGetSymbols2 ? stubArray2 : function(object2) {
        if (object2 == null) {
          return [];
        }
        object2 = Object2(object2);
        return arrayFilter2(nativeGetSymbols2(object2), function(symbol) {
          return propertyIsEnumerable2.call(object2, symbol);
        });
      };
      var getSymbolsIn2 = !nativeGetSymbols2 ? stubArray2 : function(object2) {
        var result3 = [];
        while (object2) {
          arrayPush2(result3, getSymbols2(object2));
          object2 = getPrototype2(object2);
        }
        return result3;
      };
      var getTag2 = baseGetTag2;
      if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag2 || Map2 && getTag2(new Map2()) != mapTag2 || Promise2 && getTag2(Promise2.resolve()) != promiseTag2 || Set2 && getTag2(new Set2()) != setTag2 || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag2) {
        getTag2 = function(value2) {
          var result3 = baseGetTag2(value2), Ctor = result3 == objectTag2 ? value2.constructor : undefined$1, ctorString = Ctor ? toSource2(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString2:
                return dataViewTag2;
              case mapCtorString2:
                return mapTag2;
              case promiseCtorString2:
                return promiseTag2;
              case setCtorString2:
                return setTag2;
              case weakMapCtorString2:
                return weakMapTag2;
            }
          }
          return result3;
        };
      }
      function getView(start2, end, transforms) {
        var index2 = -1, length2 = transforms.length;
        while (++index2 < length2) {
          var data2 = transforms[index2], size2 = data2.size;
          switch (data2.type) {
            case "drop":
              start2 += size2;
              break;
            case "dropRight":
              end -= size2;
              break;
            case "take":
              end = nativeMin(end, start2 + size2);
              break;
            case "takeRight":
              start2 = nativeMax(start2, end - size2);
              break;
          }
        }
        return { "start": start2, "end": end };
      }
      function getWrapDetails(source) {
        var match2 = source.match(reWrapDetails);
        return match2 ? match2[1].split(reSplitDetails) : [];
      }
      function hasPath2(object2, path, hasFunc) {
        path = castPath2(path, object2);
        var index2 = -1, length2 = path.length, result3 = false;
        while (++index2 < length2) {
          var key2 = toKey2(path[index2]);
          if (!(result3 = object2 != null && hasFunc(object2, key2))) {
            break;
          }
          object2 = object2[key2];
        }
        if (result3 || ++index2 != length2) {
          return result3;
        }
        length2 = object2 == null ? 0 : object2.length;
        return !!length2 && isLength2(length2) && isIndex2(key2, length2) && (isArray2(object2) || isArguments2(object2));
      }
      function initCloneArray2(array2) {
        var length2 = array2.length, result3 = new array2.constructor(length2);
        if (length2 && typeof array2[0] == "string" && hasOwnProperty2.call(array2, "index")) {
          result3.index = array2.index;
          result3.input = array2.input;
        }
        return result3;
      }
      function initCloneObject2(object2) {
        return typeof object2.constructor == "function" && !isPrototype2(object2) ? baseCreate2(getPrototype2(object2)) : {};
      }
      function initCloneByTag2(object2, tag2, isDeep) {
        var Ctor = object2.constructor;
        switch (tag2) {
          case arrayBufferTag2:
            return cloneArrayBuffer2(object2);
          case boolTag2:
          case dateTag2:
            return new Ctor(+object2);
          case dataViewTag2:
            return cloneDataView2(object2, isDeep);
          case float32Tag2:
          case float64Tag2:
          case int8Tag2:
          case int16Tag2:
          case int32Tag2:
          case uint8Tag2:
          case uint8ClampedTag2:
          case uint16Tag2:
          case uint32Tag2:
            return cloneTypedArray2(object2, isDeep);
          case mapTag2:
            return new Ctor();
          case numberTag2:
          case stringTag2:
            return new Ctor(object2);
          case regexpTag2:
            return cloneRegExp2(object2);
          case setTag2:
            return new Ctor();
          case symbolTag2:
            return cloneSymbol2(object2);
        }
      }
      function insertWrapDetails(source, details) {
        var length2 = details.length;
        if (!length2) {
          return source;
        }
        var lastIndex = length2 - 1;
        details[lastIndex] = (length2 > 1 ? "& " : "") + details[lastIndex];
        details = details.join(length2 > 2 ? ", " : " ");
        return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
      }
      function isFlattenable(value2) {
        return isArray2(value2) || isArguments2(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
      }
      function isIndex2(value2, length2) {
        var type = typeof value2;
        length2 = length2 == null ? MAX_SAFE_INTEGER2 : length2;
        return !!length2 && (type == "number" || type != "symbol" && reIsUint2.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
      }
      function isIterateeCall(value2, index2, object2) {
        if (!isObject3(object2)) {
          return false;
        }
        var type = typeof index2;
        if (type == "number" ? isArrayLike2(object2) && isIndex2(index2, object2.length) : type == "string" && index2 in object2) {
          return eq2(object2[index2], value2);
        }
        return false;
      }
      function isKey2(value2, object2) {
        if (isArray2(value2)) {
          return false;
        }
        var type = typeof value2;
        if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol2(value2)) {
          return true;
        }
        return reIsPlainProp2.test(value2) || !reIsDeepProp2.test(value2) || object2 != null && value2 in Object2(object2);
      }
      function isKeyable2(value2) {
        var type = typeof value2;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
      }
      function isLaziable(func) {
        var funcName = getFuncName(func), other = lodash2[funcName];
        if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data2 = getData(other);
        return !!data2 && func === data2[0];
      }
      function isMasked2(func) {
        return !!maskSrcKey2 && maskSrcKey2 in func;
      }
      var isMaskable = coreJsData2 ? isFunction3 : stubFalse2;
      function isPrototype2(value2) {
        var Ctor = value2 && value2.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto2;
        return value2 === proto2;
      }
      function isStrictComparable2(value2) {
        return value2 === value2 && !isObject3(value2);
      }
      function matchesStrictComparable2(key2, srcValue) {
        return function(object2) {
          if (object2 == null) {
            return false;
          }
          return object2[key2] === srcValue && (srcValue !== undefined$1 || key2 in Object2(object2));
        };
      }
      function memoizeCapped2(func) {
        var result3 = memoize2(func, function(key2) {
          if (cache.size === MAX_MEMOIZE_SIZE2) {
            cache.clear();
          }
          return key2;
        });
        var cache = result3.cache;
        return result3;
      }
      function mergeData(data2, source) {
        var bitmask = data2[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data2[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
        if (!(isCommon || isCombo)) {
          return data2;
        }
        if (srcBitmask & WRAP_BIND_FLAG) {
          data2[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        var value2 = source[3];
        if (value2) {
          var partials = data2[3];
          data2[3] = partials ? composeArgs(partials, value2, source[4]) : value2;
          data2[4] = partials ? replaceHolders(data2[3], PLACEHOLDER) : source[4];
        }
        value2 = source[5];
        if (value2) {
          partials = data2[5];
          data2[5] = partials ? composeArgsRight(partials, value2, source[6]) : value2;
          data2[6] = partials ? replaceHolders(data2[5], PLACEHOLDER) : source[6];
        }
        value2 = source[7];
        if (value2) {
          data2[7] = value2;
        }
        if (srcBitmask & WRAP_ARY_FLAG) {
          data2[8] = data2[8] == null ? source[8] : nativeMin(data2[8], source[8]);
        }
        if (data2[9] == null) {
          data2[9] = source[9];
        }
        data2[0] = source[0];
        data2[1] = newBitmask;
        return data2;
      }
      function nativeKeysIn2(object2) {
        var result3 = [];
        if (object2 != null) {
          for (var key2 in Object2(object2)) {
            result3.push(key2);
          }
        }
        return result3;
      }
      function objectToString2(value2) {
        return nativeObjectToString2.call(value2);
      }
      function overRest(func, start2, transform3) {
        start2 = nativeMax(start2 === undefined$1 ? func.length - 1 : start2, 0);
        return function() {
          var args = arguments, index2 = -1, length2 = nativeMax(args.length - start2, 0), array2 = Array2(length2);
          while (++index2 < length2) {
            array2[index2] = args[start2 + index2];
          }
          index2 = -1;
          var otherArgs = Array2(start2 + 1);
          while (++index2 < start2) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start2] = transform3(array2);
          return apply(func, this, otherArgs);
        };
      }
      function parent2(object2, path) {
        return path.length < 2 ? object2 : baseGet2(object2, baseSlice2(path, 0, -1));
      }
      function reorder(array2, indexes) {
        var arrLength = array2.length, length2 = nativeMin(indexes.length, arrLength), oldArray = copyArray2(array2);
        while (length2--) {
          var index2 = indexes[length2];
          array2[length2] = isIndex2(index2, arrLength) ? oldArray[index2] : undefined$1;
        }
        return array2;
      }
      function safeGet(object2, key2) {
        if (key2 === "constructor" && typeof object2[key2] === "function") {
          return;
        }
        if (key2 == "__proto__") {
          return;
        }
        return object2[key2];
      }
      var setData = shortOut(baseSetData);
      var setTimeout2 = ctxSetTimeout || function(func, wait) {
        return root2.setTimeout(func, wait);
      };
      var setToString = shortOut(baseSetToString);
      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + "";
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined$1, arguments);
        };
      }
      function shuffleSelf(array2, size2) {
        var index2 = -1, length2 = array2.length, lastIndex = length2 - 1;
        size2 = size2 === undefined$1 ? length2 : size2;
        while (++index2 < size2) {
          var rand = baseRandom(index2, lastIndex), value2 = array2[rand];
          array2[rand] = array2[index2];
          array2[index2] = value2;
        }
        array2.length = size2;
        return array2;
      }
      var stringToPath2 = memoizeCapped2(function(string2) {
        var result3 = [];
        if (string2.charCodeAt(0) === 46) {
          result3.push("");
        }
        string2.replace(rePropName2, function(match2, number2, quote, subString) {
          result3.push(quote ? subString.replace(reEscapeChar2, "$1") : number2 || match2);
        });
        return result3;
      });
      function toKey2(value2) {
        if (typeof value2 == "string" || isSymbol2(value2)) {
          return value2;
        }
        var result3 = value2 + "";
        return result3 == "0" && 1 / value2 == -INFINITY2 ? "-0" : result3;
      }
      function toSource2(func) {
        if (func != null) {
          try {
            return funcToString2.call(func);
          } catch (e3) {
          }
          try {
            return func + "";
          } catch (e3) {
          }
        }
        return "";
      }
      function updateWrapDetails(details, bitmask) {
        arrayEach2(wrapFlags, function(pair) {
          var value2 = "_." + pair[0];
          if (bitmask & pair[1] && !arrayIncludes(details, value2)) {
            details.push(value2);
          }
        });
        return details.sort();
      }
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result3 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result3.__actions__ = copyArray2(wrapper.__actions__);
        result3.__index__ = wrapper.__index__;
        result3.__values__ = wrapper.__values__;
        return result3;
      }
      function chunk(array2, size2, guard) {
        if (guard ? isIterateeCall(array2, size2, guard) : size2 === undefined$1) {
          size2 = 1;
        } else {
          size2 = nativeMax(toInteger2(size2), 0);
        }
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2 || size2 < 1) {
          return [];
        }
        var index2 = 0, resIndex = 0, result3 = Array2(nativeCeil(length2 / size2));
        while (index2 < length2) {
          result3[resIndex++] = baseSlice2(array2, index2, index2 += size2);
        }
        return result3;
      }
      function compact(array2) {
        var index2 = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result3 = [];
        while (++index2 < length2) {
          var value2 = array2[index2];
          if (value2) {
            result3[resIndex++] = value2;
          }
        }
        return result3;
      }
      function concat() {
        var length2 = arguments.length;
        if (!length2) {
          return [];
        }
        var args = Array2(length2 - 1), array2 = arguments[0], index2 = length2;
        while (index2--) {
          args[index2 - 1] = arguments[index2];
        }
        return arrayPush2(isArray2(array2) ? copyArray2(array2) : [array2], baseFlatten(args, 1));
      }
      var difference = baseRest(function(array2, values3) {
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values3, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function(array2, values3) {
        var iteratee2 = last(values3);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$1;
        }
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values3, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
      });
      var differenceWith = baseRest(function(array2, values3) {
        var comparator = last(values3);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined$1;
        }
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values3, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
      });
      function drop(array2, n2, guard) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        n2 = guard || n2 === undefined$1 ? 1 : toInteger2(n2);
        return baseSlice2(array2, n2 < 0 ? 0 : n2, length2);
      }
      function dropRight(array2, n2, guard) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        n2 = guard || n2 === undefined$1 ? 1 : toInteger2(n2);
        n2 = length2 - n2;
        return baseSlice2(array2, 0, n2 < 0 ? 0 : n2);
      }
      function dropRightWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true, true) : [];
      }
      function dropWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true) : [];
      }
      function fill(array2, value2, start2, end) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        if (start2 && typeof start2 != "number" && isIterateeCall(array2, value2, start2)) {
          start2 = 0;
          end = length2;
        }
        return baseFill(array2, value2, start2, end);
      }
      function findIndex2(array2, predicate, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return -1;
        }
        var index2 = fromIndex == null ? 0 : toInteger2(fromIndex);
        if (index2 < 0) {
          index2 = nativeMax(length2 + index2, 0);
        }
        return baseFindIndex(array2, getIteratee(predicate, 3), index2);
      }
      function findLastIndex(array2, predicate, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return -1;
        }
        var index2 = length2 - 1;
        if (fromIndex !== undefined$1) {
          index2 = toInteger2(fromIndex);
          index2 = fromIndex < 0 ? nativeMax(length2 + index2, 0) : nativeMin(index2, length2 - 1);
        }
        return baseFindIndex(array2, getIteratee(predicate, 3), index2, true);
      }
      function flatten(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? baseFlatten(array2, 1) : [];
      }
      function flattenDeep(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? baseFlatten(array2, INFINITY2) : [];
      }
      function flattenDepth(array2, depth) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        depth = depth === undefined$1 ? 1 : toInteger2(depth);
        return baseFlatten(array2, depth);
      }
      function fromPairs(pairs) {
        var index2 = -1, length2 = pairs == null ? 0 : pairs.length, result3 = {};
        while (++index2 < length2) {
          var pair = pairs[index2];
          result3[pair[0]] = pair[1];
        }
        return result3;
      }
      function head(array2) {
        return array2 && array2.length ? array2[0] : undefined$1;
      }
      function indexOf(array2, value2, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return -1;
        }
        var index2 = fromIndex == null ? 0 : toInteger2(fromIndex);
        if (index2 < 0) {
          index2 = nativeMax(length2 + index2, 0);
        }
        return baseIndexOf(array2, value2, index2);
      }
      function initial(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? baseSlice2(array2, 0, -1) : [];
      }
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap2(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
        if (iteratee2 === last(mapped)) {
          iteratee2 = undefined$1;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
      });
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
      });
      function join2(array2, separator) {
        return array2 == null ? "" : nativeJoin.call(array2, separator);
      }
      function last(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? array2[length2 - 1] : undefined$1;
      }
      function lastIndexOf(array2, value2, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return -1;
        }
        var index2 = length2;
        if (fromIndex !== undefined$1) {
          index2 = toInteger2(fromIndex);
          index2 = index2 < 0 ? nativeMax(length2 + index2, 0) : nativeMin(index2, length2 - 1);
        }
        return value2 === value2 ? strictLastIndexOf(array2, value2, index2) : baseFindIndex(array2, baseIsNaN, index2, true);
      }
      function nth(array2, n2) {
        return array2 && array2.length ? baseNth(array2, toInteger2(n2)) : undefined$1;
      }
      var pull = baseRest(pullAll);
      function pullAll(array2, values3) {
        return array2 && array2.length && values3 && values3.length ? basePullAll(array2, values3) : array2;
      }
      function pullAllBy(array2, values3, iteratee2) {
        return array2 && array2.length && values3 && values3.length ? basePullAll(array2, values3, getIteratee(iteratee2, 2)) : array2;
      }
      function pullAllWith(array2, values3, comparator) {
        return array2 && array2.length && values3 && values3.length ? basePullAll(array2, values3, undefined$1, comparator) : array2;
      }
      var pullAt = flatRest(function(array2, indexes) {
        var length2 = array2 == null ? 0 : array2.length, result3 = baseAt(array2, indexes);
        basePullAt(array2, arrayMap2(indexes, function(index2) {
          return isIndex2(index2, length2) ? +index2 : index2;
        }).sort(compareAscending));
        return result3;
      });
      function remove(array2, predicate) {
        var result3 = [];
        if (!(array2 && array2.length)) {
          return result3;
        }
        var index2 = -1, indexes = [], length2 = array2.length;
        predicate = getIteratee(predicate, 3);
        while (++index2 < length2) {
          var value2 = array2[index2];
          if (predicate(value2, index2, array2)) {
            result3.push(value2);
            indexes.push(index2);
          }
        }
        basePullAt(array2, indexes);
        return result3;
      }
      function reverse(array2) {
        return array2 == null ? array2 : nativeReverse.call(array2);
      }
      function slice2(array2, start2, end) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        if (end && typeof end != "number" && isIterateeCall(array2, start2, end)) {
          start2 = 0;
          end = length2;
        } else {
          start2 = start2 == null ? 0 : toInteger2(start2);
          end = end === undefined$1 ? length2 : toInteger2(end);
        }
        return baseSlice2(array2, start2, end);
      }
      function sortedIndex(array2, value2) {
        return baseSortedIndex(array2, value2);
      }
      function sortedIndexBy(array2, value2, iteratee2) {
        return baseSortedIndexBy(array2, value2, getIteratee(iteratee2, 2));
      }
      function sortedIndexOf(array2, value2) {
        var length2 = array2 == null ? 0 : array2.length;
        if (length2) {
          var index2 = baseSortedIndex(array2, value2);
          if (index2 < length2 && eq2(array2[index2], value2)) {
            return index2;
          }
        }
        return -1;
      }
      function sortedLastIndex(array2, value2) {
        return baseSortedIndex(array2, value2, true);
      }
      function sortedLastIndexBy(array2, value2, iteratee2) {
        return baseSortedIndexBy(array2, value2, getIteratee(iteratee2, 2), true);
      }
      function sortedLastIndexOf(array2, value2) {
        var length2 = array2 == null ? 0 : array2.length;
        if (length2) {
          var index2 = baseSortedIndex(array2, value2, true) - 1;
          if (eq2(array2[index2], value2)) {
            return index2;
          }
        }
        return -1;
      }
      function sortedUniq(array2) {
        return array2 && array2.length ? baseSortedUniq(array2) : [];
      }
      function sortedUniqBy(array2, iteratee2) {
        return array2 && array2.length ? baseSortedUniq(array2, getIteratee(iteratee2, 2)) : [];
      }
      function tail(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? baseSlice2(array2, 1, length2) : [];
      }
      function take(array2, n2, guard) {
        if (!(array2 && array2.length)) {
          return [];
        }
        n2 = guard || n2 === undefined$1 ? 1 : toInteger2(n2);
        return baseSlice2(array2, 0, n2 < 0 ? 0 : n2);
      }
      function takeRight(array2, n2, guard) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return [];
        }
        n2 = guard || n2 === undefined$1 ? 1 : toInteger2(n2);
        n2 = length2 - n2;
        return baseSlice2(array2, n2 < 0 ? 0 : n2, length2);
      }
      function takeRightWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), false, true) : [];
      }
      function takeWhile(array2, predicate) {
        return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3)) : [];
      }
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$1;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
      });
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
      });
      function uniq(array2) {
        return array2 && array2.length ? baseUniq(array2) : [];
      }
      function uniqBy(array2, iteratee2) {
        return array2 && array2.length ? baseUniq(array2, getIteratee(iteratee2, 2)) : [];
      }
      function uniqWith(array2, comparator) {
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        return array2 && array2.length ? baseUniq(array2, undefined$1, comparator) : [];
      }
      function unzip(array2) {
        if (!(array2 && array2.length)) {
          return [];
        }
        var length2 = 0;
        array2 = arrayFilter2(array2, function(group) {
          if (isArrayLikeObject(group)) {
            length2 = nativeMax(group.length, length2);
            return true;
          }
        });
        return baseTimes2(length2, function(index2) {
          return arrayMap2(array2, baseProperty2(index2));
        });
      }
      function unzipWith(array2, iteratee2) {
        if (!(array2 && array2.length)) {
          return [];
        }
        var result3 = unzip(array2);
        if (iteratee2 == null) {
          return result3;
        }
        return arrayMap2(result3, function(group) {
          return apply(iteratee2, undefined$1, group);
        });
      }
      var without = baseRest(function(array2, values3) {
        return isArrayLikeObject(array2) ? baseDifference(array2, values3) : [];
      });
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter2(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$1;
        }
        return baseXor(arrayFilter2(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
      });
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        return baseXor(arrayFilter2(arrays, isArrayLikeObject), undefined$1, comparator);
      });
      var zip = baseRest(unzip);
      function zipObject(props, values3) {
        return baseZipObject(props || [], values3 || [], assignValue2);
      }
      function zipObjectDeep(props, values3) {
        return baseZipObject(props || [], values3 || [], baseSet);
      }
      var zipWith = baseRest(function(arrays) {
        var length2 = arrays.length, iteratee2 = length2 > 1 ? arrays[length2 - 1] : undefined$1;
        iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$1;
        return unzipWith(arrays, iteratee2);
      });
      function chain(value2) {
        var result3 = lodash2(value2);
        result3.__chain__ = true;
        return result3;
      }
      function tap(value2, interceptor) {
        interceptor(value2);
        return value2;
      }
      function thru(value2, interceptor) {
        return interceptor(value2);
      }
      var wrapperAt = flatRest(function(paths) {
        var length2 = paths.length, start2 = length2 ? paths[0] : 0, value2 = this.__wrapped__, interceptor = function(object2) {
          return baseAt(object2, paths);
        };
        if (length2 > 1 || this.__actions__.length || !(value2 instanceof LazyWrapper) || !isIndex2(start2)) {
          return this.thru(interceptor);
        }
        value2 = value2.slice(start2, +start2 + (length2 ? 1 : 0));
        value2.__actions__.push({
          "func": thru,
          "args": [interceptor],
          "thisArg": undefined$1
        });
        return new LodashWrapper(value2, this.__chain__).thru(function(array2) {
          if (length2 && !array2.length) {
            array2.push(undefined$1);
          }
          return array2;
        });
      });
      function wrapperChain() {
        return chain(this);
      }
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }
      function wrapperNext() {
        if (this.__values__ === undefined$1) {
          this.__values__ = toArray2(this.value());
        }
        var done = this.__index__ >= this.__values__.length, value2 = done ? undefined$1 : this.__values__[this.__index__++];
        return { "done": done, "value": value2 };
      }
      function wrapperToIterator() {
        return this;
      }
      function wrapperPlant(value2) {
        var result3, parent3 = this;
        while (parent3 instanceof baseLodash) {
          var clone3 = wrapperClone(parent3);
          clone3.__index__ = 0;
          clone3.__values__ = undefined$1;
          if (result3) {
            previous.__wrapped__ = clone3;
          } else {
            result3 = clone3;
          }
          var previous = clone3;
          parent3 = parent3.__wrapped__;
        }
        previous.__wrapped__ = value2;
        return result3;
      }
      function wrapperReverse() {
        var value2 = this.__wrapped__;
        if (value2 instanceof LazyWrapper) {
          var wrapped = value2;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            "func": thru,
            "args": [reverse],
            "thisArg": undefined$1
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }
      var countBy = createAggregator(function(result3, value2, key2) {
        if (hasOwnProperty2.call(result3, key2)) {
          ++result3[key2];
        } else {
          baseAssignValue2(result3, key2, 1);
        }
      });
      function every(collection, predicate, guard) {
        var func = isArray2(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      function filter2(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter2 : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }
      var find2 = createFind(findIndex2);
      var findLast = createFind(findLastIndex);
      function flatMap(collection, iteratee2) {
        return baseFlatten(map2(collection, iteratee2), 1);
      }
      function flatMapDeep(collection, iteratee2) {
        return baseFlatten(map2(collection, iteratee2), INFINITY2);
      }
      function flatMapDepth(collection, iteratee2, depth) {
        depth = depth === undefined$1 ? 1 : toInteger2(depth);
        return baseFlatten(map2(collection, iteratee2), depth);
      }
      function forEach2(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEach2 : baseEach;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function forEachRight(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee2, 3));
      }
      var groupBy = createAggregator(function(result3, value2, key2) {
        if (hasOwnProperty2.call(result3, key2)) {
          result3[key2].push(value2);
        } else {
          baseAssignValue2(result3, key2, [value2]);
        }
      });
      function includes(collection, value2, fromIndex, guard) {
        collection = isArrayLike2(collection) ? collection : values2(collection);
        fromIndex = fromIndex && !guard ? toInteger2(fromIndex) : 0;
        var length2 = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length2 + fromIndex, 0);
        }
        return isString3(collection) ? fromIndex <= length2 && collection.indexOf(value2, fromIndex) > -1 : !!length2 && baseIndexOf(collection, value2, fromIndex) > -1;
      }
      var invokeMap = baseRest(function(collection, path, args) {
        var index2 = -1, isFunc = typeof path == "function", result3 = isArrayLike2(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value2) {
          result3[++index2] = isFunc ? apply(path, value2, args) : baseInvoke(value2, path, args);
        });
        return result3;
      });
      var keyBy = createAggregator(function(result3, value2, key2) {
        baseAssignValue2(result3, key2, value2);
      });
      function map2(collection, iteratee2) {
        var func = isArray2(collection) ? arrayMap2 : baseMap;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray2(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined$1 : orders;
        if (!isArray2(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }
      var partition = createAggregator(function(result3, value2, key2) {
        result3[key2 ? 0 : 1].push(value2);
      }, function() {
        return [[], []];
      });
      function reduce(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduce2 : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
      }
      function reduceRight(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
      }
      function reject(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter2 : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }
      function sample(collection) {
        var func = isArray2(collection) ? arraySample : baseSample;
        return func(collection);
      }
      function sampleSize(collection, n2, guard) {
        if (guard ? isIterateeCall(collection, n2, guard) : n2 === undefined$1) {
          n2 = 1;
        } else {
          n2 = toInteger2(n2);
        }
        var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n2);
      }
      function shuffle(collection) {
        var func = isArray2(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike2(collection)) {
          return isString3(collection) ? stringSize(collection) : collection.length;
        }
        var tag2 = getTag2(collection);
        if (tag2 == mapTag2 || tag2 == setTag2) {
          return collection.size;
        }
        return baseKeys2(collection).length;
      }
      function some(collection, predicate, guard) {
        var func = isArray2(collection) ? arraySome2 : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length2 = iteratees.length;
        if (length2 > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length2 > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
      var now = ctxNow || function() {
        return root2.Date.now();
      };
      function after(n2, func) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        n2 = toInteger2(n2);
        return function() {
          if (--n2 < 1) {
            return func.apply(this, arguments);
          }
        };
      }
      function ary(func, n2, guard) {
        n2 = guard ? undefined$1 : n2;
        n2 = func && n2 == null ? func.length : n2;
        return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n2);
      }
      function before(n2, func) {
        var result3;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        n2 = toInteger2(n2);
        return function() {
          if (--n2 > 0) {
            result3 = func.apply(this, arguments);
          }
          if (n2 <= 1) {
            func = undefined$1;
          }
          return result3;
        };
      }
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function(object2, key2, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key2, bitmask, object2, partials, holders);
      });
      function curry(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result3 = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result3.placeholder = curry.placeholder;
        return result3;
      }
      function curryRight(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result3 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result3.placeholder = curryRight.placeholder;
        return result3;
      }
      function debounce2(func, wait, options) {
        var lastArgs, lastThis, maxWait, result3, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        wait = toNumber(wait) || 0;
        if (isObject3(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time2) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined$1;
          lastInvokeTime = time2;
          result3 = func.apply(thisArg, args);
          return result3;
        }
        function leadingEdge(time2) {
          lastInvokeTime = time2;
          timerId = setTimeout2(timerExpired, wait);
          return leading ? invokeFunc(time2) : result3;
        }
        function remainingWait(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
          return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time2 = now();
          if (shouldInvoke(time2)) {
            return trailingEdge(time2);
          }
          timerId = setTimeout2(timerExpired, remainingWait(time2));
        }
        function trailingEdge(time2) {
          timerId = undefined$1;
          if (trailing && lastArgs) {
            return invokeFunc(time2);
          }
          lastArgs = lastThis = undefined$1;
          return result3;
        }
        function cancel() {
          if (timerId !== undefined$1) {
            clearTimeout2(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined$1;
        }
        function flush2() {
          return timerId === undefined$1 ? result3 : trailingEdge(now());
        }
        function debounced() {
          var time2 = now(), isInvoking = shouldInvoke(time2);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time2;
          if (isInvoking) {
            if (timerId === undefined$1) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout2(timerId);
              timerId = setTimeout2(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined$1) {
            timerId = setTimeout2(timerExpired, wait);
          }
          return result3;
        }
        debounced.cancel = cancel;
        debounced.flush = flush2;
        return debounced;
      }
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }
      function memoize2(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        var memoized = function() {
          var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key2)) {
            return cache.get(key2);
          }
          var result3 = func.apply(this, args);
          memoized.cache = cache.set(key2, result3) || cache;
          return result3;
        };
        memoized.cache = new (memoize2.Cache || MapCache2)();
        return memoized;
      }
      memoize2.Cache = MapCache2;
      function negate(predicate) {
        if (typeof predicate != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return !predicate.call(this);
            case 1:
              return !predicate.call(this, args[0]);
            case 2:
              return !predicate.call(this, args[0], args[1]);
            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }
      function once2(func) {
        return before(2, func);
      }
      var overArgs = castRest(function(func, transforms) {
        transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap2(transforms[0], baseUnary2(getIteratee())) : arrayMap2(baseFlatten(transforms, 1), baseUnary2(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index2 = -1, length2 = nativeMin(args.length, funcsLength);
          while (++index2 < length2) {
            args[index2] = transforms[index2].call(this, args[index2]);
          }
          return apply(func, this, args);
        });
      });
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
      });
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
      });
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
      });
      function rest(func, start2) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        start2 = start2 === undefined$1 ? start2 : toInteger2(start2);
        return baseRest(func, start2);
      }
      function spread(func, start2) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        start2 = start2 == null ? 0 : nativeMax(toInteger2(start2), 0);
        return baseRest(function(args) {
          var array2 = args[start2], otherArgs = castSlice2(args, 0, start2);
          if (array2) {
            arrayPush2(otherArgs, array2);
          }
          return apply(func, this, otherArgs);
        });
      }
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT2);
        }
        if (isObject3(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce2(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      function unary(func) {
        return ary(func, 1);
      }
      function wrap(value2, wrapper) {
        return partial(castFunction(wrapper), value2);
      }
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value2 = arguments[0];
        return isArray2(value2) ? value2 : [value2];
      }
      function clone2(value2) {
        return baseClone2(value2, CLONE_SYMBOLS_FLAG2);
      }
      function cloneWith(value2, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return baseClone2(value2, CLONE_SYMBOLS_FLAG2, customizer);
      }
      function cloneDeep(value2) {
        return baseClone2(value2, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2);
      }
      function cloneDeepWith(value2, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return baseClone2(value2, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2, customizer);
      }
      function conformsTo(object2, source) {
        return source == null || baseConformsTo(object2, source, keys2(source));
      }
      function eq2(value2, other) {
        return value2 === other || value2 !== value2 && other !== other;
      }
      var gt2 = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function(value2, other) {
        return value2 >= other;
      });
      var isArguments2 = baseIsArguments2(function() {
        return arguments;
      }()) ? baseIsArguments2 : function(value2) {
        return isObjectLike2(value2) && hasOwnProperty2.call(value2, "callee") && !propertyIsEnumerable2.call(value2, "callee");
      };
      var isArray2 = Array2.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary2(nodeIsArrayBuffer) : baseIsArrayBuffer;
      function isArrayLike2(value2) {
        return value2 != null && isLength2(value2.length) && !isFunction3(value2);
      }
      function isArrayLikeObject(value2) {
        return isObjectLike2(value2) && isArrayLike2(value2);
      }
      function isBoolean(value2) {
        return value2 === true || value2 === false || isObjectLike2(value2) && baseGetTag2(value2) == boolTag2;
      }
      var isBuffer2 = nativeIsBuffer2 || stubFalse2;
      var isDate2 = nodeIsDate ? baseUnary2(nodeIsDate) : baseIsDate;
      function isElement(value2) {
        return isObjectLike2(value2) && value2.nodeType === 1 && !isPlainObject2(value2);
      }
      function isEmpty2(value2) {
        if (value2 == null) {
          return true;
        }
        if (isArrayLike2(value2) && (isArray2(value2) || typeof value2 == "string" || typeof value2.splice == "function" || isBuffer2(value2) || isTypedArray2(value2) || isArguments2(value2))) {
          return !value2.length;
        }
        var tag2 = getTag2(value2);
        if (tag2 == mapTag2 || tag2 == setTag2) {
          return !value2.size;
        }
        if (isPrototype2(value2)) {
          return !baseKeys2(value2).length;
        }
        for (var key2 in value2) {
          if (hasOwnProperty2.call(value2, key2)) {
            return false;
          }
        }
        return true;
      }
      function isEqual2(value2, other) {
        return baseIsEqual2(value2, other);
      }
      function isEqualWith(value2, other, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        var result3 = customizer ? customizer(value2, other) : undefined$1;
        return result3 === undefined$1 ? baseIsEqual2(value2, other, undefined$1, customizer) : !!result3;
      }
      function isError(value2) {
        if (!isObjectLike2(value2)) {
          return false;
        }
        var tag2 = baseGetTag2(value2);
        return tag2 == errorTag2 || tag2 == domExcTag || typeof value2.message == "string" && typeof value2.name == "string" && !isPlainObject2(value2);
      }
      function isFinite2(value2) {
        return typeof value2 == "number" && nativeIsFinite(value2);
      }
      function isFunction3(value2) {
        if (!isObject3(value2)) {
          return false;
        }
        var tag2 = baseGetTag2(value2);
        return tag2 == funcTag2 || tag2 == genTag2 || tag2 == asyncTag2 || tag2 == proxyTag2;
      }
      function isInteger3(value2) {
        return typeof value2 == "number" && value2 == toInteger2(value2);
      }
      function isLength2(value2) {
        return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER2;
      }
      function isObject3(value2) {
        var type = typeof value2;
        return value2 != null && (type == "object" || type == "function");
      }
      function isObjectLike2(value2) {
        return value2 != null && typeof value2 == "object";
      }
      var isMap2 = nodeIsMap2 ? baseUnary2(nodeIsMap2) : baseIsMap2;
      function isMatch(object2, source) {
        return object2 === source || baseIsMatch2(object2, source, getMatchData2(source));
      }
      function isMatchWith(object2, source, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return baseIsMatch2(object2, source, getMatchData2(source), customizer);
      }
      function isNaN2(value2) {
        return isNumber(value2) && value2 != +value2;
      }
      function isNative(value2) {
        if (isMaskable(value2)) {
          throw new Error2(CORE_ERROR_TEXT);
        }
        return baseIsNative2(value2);
      }
      function isNull(value2) {
        return value2 === null;
      }
      function isNil(value2) {
        return value2 == null;
      }
      function isNumber(value2) {
        return typeof value2 == "number" || isObjectLike2(value2) && baseGetTag2(value2) == numberTag2;
      }
      function isPlainObject2(value2) {
        if (!isObjectLike2(value2) || baseGetTag2(value2) != objectTag2) {
          return false;
        }
        var proto2 = getPrototype2(value2);
        if (proto2 === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto2, "constructor") && proto2.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString2.call(Ctor) == objectCtorString2;
      }
      var isRegExp = nodeIsRegExp ? baseUnary2(nodeIsRegExp) : baseIsRegExp;
      function isSafeInteger(value2) {
        return isInteger3(value2) && value2 >= -MAX_SAFE_INTEGER2 && value2 <= MAX_SAFE_INTEGER2;
      }
      var isSet2 = nodeIsSet2 ? baseUnary2(nodeIsSet2) : baseIsSet2;
      function isString3(value2) {
        return typeof value2 == "string" || !isArray2(value2) && isObjectLike2(value2) && baseGetTag2(value2) == stringTag2;
      }
      function isSymbol2(value2) {
        return typeof value2 == "symbol" || isObjectLike2(value2) && baseGetTag2(value2) == symbolTag2;
      }
      var isTypedArray2 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
      function isUndefined(value2) {
        return value2 === undefined$1;
      }
      function isWeakMap(value2) {
        return isObjectLike2(value2) && getTag2(value2) == weakMapTag2;
      }
      function isWeakSet(value2) {
        return isObjectLike2(value2) && baseGetTag2(value2) == weakSetTag;
      }
      var lt2 = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function(value2, other) {
        return value2 <= other;
      });
      function toArray2(value2) {
        if (!value2) {
          return [];
        }
        if (isArrayLike2(value2)) {
          return isString3(value2) ? stringToArray2(value2) : copyArray2(value2);
        }
        if (symIterator && value2[symIterator]) {
          return iteratorToArray(value2[symIterator]());
        }
        var tag2 = getTag2(value2), func = tag2 == mapTag2 ? mapToArray2 : tag2 == setTag2 ? setToArray2 : values2;
        return func(value2);
      }
      function toFinite(value2) {
        if (!value2) {
          return value2 === 0 ? value2 : 0;
        }
        value2 = toNumber(value2);
        if (value2 === INFINITY2 || value2 === -INFINITY2) {
          var sign2 = value2 < 0 ? -1 : 1;
          return sign2 * MAX_INTEGER;
        }
        return value2 === value2 ? value2 : 0;
      }
      function toInteger2(value2) {
        var result3 = toFinite(value2), remainder = result3 % 1;
        return result3 === result3 ? remainder ? result3 - remainder : result3 : 0;
      }
      function toLength(value2) {
        return value2 ? baseClamp(toInteger2(value2), 0, MAX_ARRAY_LENGTH) : 0;
      }
      function toNumber(value2) {
        if (typeof value2 == "number") {
          return value2;
        }
        if (isSymbol2(value2)) {
          return NAN;
        }
        if (isObject3(value2)) {
          var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
          value2 = isObject3(other) ? other + "" : other;
        }
        if (typeof value2 != "string") {
          return value2 === 0 ? value2 : +value2;
        }
        value2 = baseTrim(value2);
        var isBinary2 = reIsBinary.test(value2);
        return isBinary2 || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary2 ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
      }
      function toPlainObject(value2) {
        return copyObject2(value2, keysIn2(value2));
      }
      function toSafeInteger(value2) {
        return value2 ? baseClamp(toInteger2(value2), -MAX_SAFE_INTEGER2, MAX_SAFE_INTEGER2) : value2 === 0 ? value2 : 0;
      }
      function toString2(value2) {
        return value2 == null ? "" : baseToString2(value2);
      }
      var assign2 = createAssigner(function(object2, source) {
        if (isPrototype2(source) || isArrayLike2(source)) {
          copyObject2(source, keys2(source), object2);
          return;
        }
        for (var key2 in source) {
          if (hasOwnProperty2.call(source, key2)) {
            assignValue2(object2, key2, source[key2]);
          }
        }
      });
      var assignIn = createAssigner(function(object2, source) {
        copyObject2(source, keysIn2(source), object2);
      });
      var assignInWith = createAssigner(function(object2, source, srcIndex, customizer) {
        copyObject2(source, keysIn2(source), object2, customizer);
      });
      var assignWith = createAssigner(function(object2, source, srcIndex, customizer) {
        copyObject2(source, keys2(source), object2, customizer);
      });
      var at2 = flatRest(baseAt);
      function create2(prototype, properties2) {
        var result3 = baseCreate2(prototype);
        return properties2 == null ? result3 : baseAssign2(result3, properties2);
      }
      var defaults2 = baseRest(function(object2, sources) {
        object2 = Object2(object2);
        var index2 = -1;
        var length2 = sources.length;
        var guard = length2 > 2 ? sources[2] : undefined$1;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length2 = 1;
        }
        while (++index2 < length2) {
          var source = sources[index2];
          var props = keysIn2(source);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key2 = props[propsIndex];
            var value2 = object2[key2];
            if (value2 === undefined$1 || eq2(value2, objectProto2[key2]) && !hasOwnProperty2.call(object2, key2)) {
              object2[key2] = source[key2];
            }
          }
        }
        return object2;
      });
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined$1, customDefaultsMerge);
        return apply(mergeWith, undefined$1, args);
      });
      function findKey2(object2, predicate) {
        return baseFindKey(object2, getIteratee(predicate, 3), baseForOwn2);
      }
      function findLastKey(object2, predicate) {
        return baseFindKey(object2, getIteratee(predicate, 3), baseForOwnRight);
      }
      function forIn(object2, iteratee2) {
        return object2 == null ? object2 : baseFor2(object2, getIteratee(iteratee2, 3), keysIn2);
      }
      function forInRight(object2, iteratee2) {
        return object2 == null ? object2 : baseForRight(object2, getIteratee(iteratee2, 3), keysIn2);
      }
      function forOwn(object2, iteratee2) {
        return object2 && baseForOwn2(object2, getIteratee(iteratee2, 3));
      }
      function forOwnRight(object2, iteratee2) {
        return object2 && baseForOwnRight(object2, getIteratee(iteratee2, 3));
      }
      function functions(object2) {
        return object2 == null ? [] : baseFunctions(object2, keys2(object2));
      }
      function functionsIn(object2) {
        return object2 == null ? [] : baseFunctions(object2, keysIn2(object2));
      }
      function get2(object2, path, defaultValue) {
        var result3 = object2 == null ? undefined$1 : baseGet2(object2, path);
        return result3 === undefined$1 ? defaultValue : result3;
      }
      function has2(object2, path) {
        return object2 != null && hasPath2(object2, path, baseHas2);
      }
      function hasIn2(object2, path) {
        return object2 != null && hasPath2(object2, path, baseHasIn2);
      }
      var invert = createInverter(function(result3, value2, key2) {
        if (value2 != null && typeof value2.toString != "function") {
          value2 = nativeObjectToString2.call(value2);
        }
        result3[value2] = key2;
      }, constant(identity2));
      var invertBy = createInverter(function(result3, value2, key2) {
        if (value2 != null && typeof value2.toString != "function") {
          value2 = nativeObjectToString2.call(value2);
        }
        if (hasOwnProperty2.call(result3, value2)) {
          result3[value2].push(key2);
        } else {
          result3[value2] = [key2];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);
      function keys2(object2) {
        return isArrayLike2(object2) ? arrayLikeKeys2(object2) : baseKeys2(object2);
      }
      function keysIn2(object2) {
        return isArrayLike2(object2) ? arrayLikeKeys2(object2, true) : baseKeysIn2(object2);
      }
      function mapKeys2(object2, iteratee2) {
        var result3 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn2(object2, function(value2, key2, object3) {
          baseAssignValue2(result3, iteratee2(value2, key2, object3), value2);
        });
        return result3;
      }
      function mapValues2(object2, iteratee2) {
        var result3 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn2(object2, function(value2, key2, object3) {
          baseAssignValue2(result3, key2, iteratee2(value2, key2, object3));
        });
        return result3;
      }
      var merge2 = createAssigner(function(object2, source, srcIndex) {
        baseMerge(object2, source, srcIndex);
      });
      var mergeWith = createAssigner(function(object2, source, srcIndex, customizer) {
        baseMerge(object2, source, srcIndex, customizer);
      });
      var omit = flatRest(function(object2, paths) {
        var result3 = {};
        if (object2 == null) {
          return result3;
        }
        var isDeep = false;
        paths = arrayMap2(paths, function(path) {
          path = castPath2(path, object2);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject2(object2, getAllKeysIn2(object2), result3);
        if (isDeep) {
          result3 = baseClone2(result3, CLONE_DEEP_FLAG2 | CLONE_FLAT_FLAG2 | CLONE_SYMBOLS_FLAG2, customOmitClone);
        }
        var length2 = paths.length;
        while (length2--) {
          baseUnset(result3, paths[length2]);
        }
        return result3;
      });
      function omitBy(object2, predicate) {
        return pickBy(object2, negate(getIteratee(predicate)));
      }
      var pick = flatRest(function(object2, paths) {
        return object2 == null ? {} : basePick(object2, paths);
      });
      function pickBy(object2, predicate) {
        if (object2 == null) {
          return {};
        }
        var props = arrayMap2(getAllKeysIn2(object2), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object2, props, function(value2, path) {
          return predicate(value2, path[0]);
        });
      }
      function result2(object2, path, defaultValue) {
        path = castPath2(path, object2);
        var index2 = -1, length2 = path.length;
        if (!length2) {
          length2 = 1;
          object2 = undefined$1;
        }
        while (++index2 < length2) {
          var value2 = object2 == null ? undefined$1 : object2[toKey2(path[index2])];
          if (value2 === undefined$1) {
            index2 = length2;
            value2 = defaultValue;
          }
          object2 = isFunction3(value2) ? value2.call(object2) : value2;
        }
        return object2;
      }
      function set2(object2, path, value2) {
        return object2 == null ? object2 : baseSet(object2, path, value2);
      }
      function setWith(object2, path, value2, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return object2 == null ? object2 : baseSet(object2, path, value2, customizer);
      }
      var toPairs = createToPairs(keys2);
      var toPairsIn = createToPairs(keysIn2);
      function transform2(object2, iteratee2, accumulator) {
        var isArr = isArray2(object2), isArrLike = isArr || isBuffer2(object2) || isTypedArray2(object2);
        iteratee2 = getIteratee(iteratee2, 4);
        if (accumulator == null) {
          var Ctor = object2 && object2.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject3(object2)) {
            accumulator = isFunction3(Ctor) ? baseCreate2(getPrototype2(object2)) : {};
          } else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach2 : baseForOwn2)(object2, function(value2, index2, object3) {
          return iteratee2(accumulator, value2, index2, object3);
        });
        return accumulator;
      }
      function unset(object2, path) {
        return object2 == null ? true : baseUnset(object2, path);
      }
      function update2(object2, path, updater) {
        return object2 == null ? object2 : baseUpdate(object2, path, castFunction(updater));
      }
      function updateWith(object2, path, updater, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return object2 == null ? object2 : baseUpdate(object2, path, castFunction(updater), customizer);
      }
      function values2(object2) {
        return object2 == null ? [] : baseValues(object2, keys2(object2));
      }
      function valuesIn(object2) {
        return object2 == null ? [] : baseValues(object2, keysIn2(object2));
      }
      function clamp2(number2, lower, upper) {
        if (upper === undefined$1) {
          upper = lower;
          lower = undefined$1;
        }
        if (upper !== undefined$1) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined$1) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number2), lower, upper);
      }
      function inRange(number2, start2, end) {
        start2 = toFinite(start2);
        if (end === undefined$1) {
          end = start2;
          start2 = 0;
        } else {
          end = toFinite(end);
        }
        number2 = toNumber(number2);
        return baseInRange(number2, start2, end);
      }
      function random2(lower, upper, floating) {
        if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined$1;
        }
        if (floating === undefined$1) {
          if (typeof upper == "boolean") {
            floating = upper;
            upper = undefined$1;
          } else if (typeof lower == "boolean") {
            floating = lower;
            lower = undefined$1;
          }
        }
        if (lower === undefined$1 && upper === undefined$1) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);
          if (upper === undefined$1) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
        }
        return baseRandom(lower, upper);
      }
      var camelCase2 = createCompounder2(function(result3, word, index2) {
        word = word.toLowerCase();
        return result3 + (index2 ? capitalize2(word) : word);
      });
      function capitalize2(string2) {
        return upperFirst2(toString2(string2).toLowerCase());
      }
      function deburr2(string2) {
        string2 = toString2(string2);
        return string2 && string2.replace(reLatin2, deburrLetter2).replace(reComboMark2, "");
      }
      function endsWith(string2, target, position2) {
        string2 = toString2(string2);
        target = baseToString2(target);
        var length2 = string2.length;
        position2 = position2 === undefined$1 ? length2 : baseClamp(toInteger2(position2), 0, length2);
        var end = position2;
        position2 -= target.length;
        return position2 >= 0 && string2.slice(position2, end) == target;
      }
      function escape2(string2) {
        string2 = toString2(string2);
        return string2 && reHasUnescapedHtml.test(string2) ? string2.replace(reUnescapedHtml, escapeHtmlChar) : string2;
      }
      function escapeRegExp(string2) {
        string2 = toString2(string2);
        return string2 && reHasRegExpChar.test(string2) ? string2.replace(reRegExpChar2, "\\$&") : string2;
      }
      var kebabCase = createCompounder2(function(result3, word, index2) {
        return result3 + (index2 ? "-" : "") + word.toLowerCase();
      });
      var lowerCase = createCompounder2(function(result3, word, index2) {
        return result3 + (index2 ? " " : "") + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst2("toLowerCase");
      function pad(string2, length2, chars) {
        string2 = toString2(string2);
        length2 = toInteger2(length2);
        var strLength = length2 ? stringSize(string2) : 0;
        if (!length2 || strLength >= length2) {
          return string2;
        }
        var mid = (length2 - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string2 + createPadding(nativeCeil(mid), chars);
      }
      function padEnd(string2, length2, chars) {
        string2 = toString2(string2);
        length2 = toInteger2(length2);
        var strLength = length2 ? stringSize(string2) : 0;
        return length2 && strLength < length2 ? string2 + createPadding(length2 - strLength, chars) : string2;
      }
      function padStart(string2, length2, chars) {
        string2 = toString2(string2);
        length2 = toInteger2(length2);
        var strLength = length2 ? stringSize(string2) : 0;
        return length2 && strLength < length2 ? createPadding(length2 - strLength, chars) + string2 : string2;
      }
      function parseInt2(string2, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString2(string2).replace(reTrimStart, ""), radix || 0);
      }
      function repeat(string2, n2, guard) {
        if (guard ? isIterateeCall(string2, n2, guard) : n2 === undefined$1) {
          n2 = 1;
        } else {
          n2 = toInteger2(n2);
        }
        return baseRepeat(toString2(string2), n2);
      }
      function replace2() {
        var args = arguments, string2 = toString2(args[0]);
        return args.length < 3 ? string2 : string2.replace(args[1], args[2]);
      }
      var snakeCase2 = createCompounder2(function(result3, word, index2) {
        return result3 + (index2 ? "_" : "") + word.toLowerCase();
      });
      function split2(string2, separator, limit) {
        if (limit && typeof limit != "number" && isIterateeCall(string2, separator, limit)) {
          separator = limit = undefined$1;
        }
        limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string2 = toString2(string2);
        if (string2 && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
          separator = baseToString2(separator);
          if (!separator && hasUnicode2(string2)) {
            return castSlice2(stringToArray2(string2), 0, limit);
          }
        }
        return string2.split(separator, limit);
      }
      var startCase = createCompounder2(function(result3, word, index2) {
        return result3 + (index2 ? " " : "") + upperFirst2(word);
      });
      function startsWith(string2, target, position2) {
        string2 = toString2(string2);
        position2 = position2 == null ? 0 : baseClamp(toInteger2(position2), 0, string2.length);
        target = baseToString2(target);
        return string2.slice(position2, position2 + target.length) == target;
      }
      function template(string2, options, guard) {
        var settings = lodash2.templateSettings;
        if (guard && isIterateeCall(string2, options, guard)) {
          options = undefined$1;
        }
        string2 = toString2(string2);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
        var isEscaping, isEvaluating, index2 = 0, interpolate2 = options.interpolate || reNoMatch, source = "__p += '";
        var reDelimiters = RegExp2(
          (options.escape || reNoMatch).source + "|" + interpolate2.source + "|" + (interpolate2 === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
          "g"
        );
        var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
        string2.replace(reDelimiters, function(match2, escapeValue, interpolateValue2, esTemplateValue, evaluateValue, offset) {
          interpolateValue2 || (interpolateValue2 = esTemplateValue);
          source += string2.slice(index2, offset).replace(reUnescapedString, escapeStringChar);
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue2) {
            source += "' +\n((__t = (" + interpolateValue2 + ")) == null ? '' : __t) +\n'";
          }
          index2 = offset + match2.length;
          return match2;
        });
        source += "';\n";
        var variable = hasOwnProperty2.call(options, "variable") && options.variable;
        if (!variable) {
          source = "with (obj) {\n" + source + "\n}\n";
        } else if (reForbiddenIdentifierChars.test(variable)) {
          throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
        }
        source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
        source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
        var result3 = attempt(function() {
          return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$1, importsValues);
        });
        result3.source = source;
        if (isError(result3)) {
          throw result3;
        }
        return result3;
      }
      function toLower(value2) {
        return toString2(value2).toLowerCase();
      }
      function toUpper(value2) {
        return toString2(value2).toUpperCase();
      }
      function trim2(string2, chars, guard) {
        string2 = toString2(string2);
        if (string2 && (guard || chars === undefined$1)) {
          return baseTrim(string2);
        }
        if (!string2 || !(chars = baseToString2(chars))) {
          return string2;
        }
        var strSymbols = stringToArray2(string2), chrSymbols = stringToArray2(chars), start2 = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice2(strSymbols, start2, end).join("");
      }
      function trimEnd(string2, chars, guard) {
        string2 = toString2(string2);
        if (string2 && (guard || chars === undefined$1)) {
          return string2.slice(0, trimmedEndIndex(string2) + 1);
        }
        if (!string2 || !(chars = baseToString2(chars))) {
          return string2;
        }
        var strSymbols = stringToArray2(string2), end = charsEndIndex(strSymbols, stringToArray2(chars)) + 1;
        return castSlice2(strSymbols, 0, end).join("");
      }
      function trimStart(string2, chars, guard) {
        string2 = toString2(string2);
        if (string2 && (guard || chars === undefined$1)) {
          return string2.replace(reTrimStart, "");
        }
        if (!string2 || !(chars = baseToString2(chars))) {
          return string2;
        }
        var strSymbols = stringToArray2(string2), start2 = charsStartIndex(strSymbols, stringToArray2(chars));
        return castSlice2(strSymbols, start2).join("");
      }
      function truncate2(string2, options) {
        var length2 = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
        if (isObject3(options)) {
          var separator = "separator" in options ? options.separator : separator;
          length2 = "length" in options ? toInteger2(options.length) : length2;
          omission = "omission" in options ? baseToString2(options.omission) : omission;
        }
        string2 = toString2(string2);
        var strLength = string2.length;
        if (hasUnicode2(string2)) {
          var strSymbols = stringToArray2(string2);
          strLength = strSymbols.length;
        }
        if (length2 >= strLength) {
          return string2;
        }
        var end = length2 - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result3 = strSymbols ? castSlice2(strSymbols, 0, end).join("") : string2.slice(0, end);
        if (separator === undefined$1) {
          return result3 + omission;
        }
        if (strSymbols) {
          end += result3.length - end;
        }
        if (isRegExp(separator)) {
          if (string2.slice(end).search(separator)) {
            var match2, substring2 = result3;
            if (!separator.global) {
              separator = RegExp2(separator.source, toString2(reFlags2.exec(separator)) + "g");
            }
            separator.lastIndex = 0;
            while (match2 = separator.exec(substring2)) {
              var newEnd = match2.index;
            }
            result3 = result3.slice(0, newEnd === undefined$1 ? end : newEnd);
          }
        } else if (string2.indexOf(baseToString2(separator), end) != end) {
          var index2 = result3.lastIndexOf(separator);
          if (index2 > -1) {
            result3 = result3.slice(0, index2);
          }
        }
        return result3 + omission;
      }
      function unescape2(string2) {
        string2 = toString2(string2);
        return string2 && reHasEscapedHtml.test(string2) ? string2.replace(reEscapedHtml, unescapeHtmlChar) : string2;
      }
      var upperCase = createCompounder2(function(result3, word, index2) {
        return result3 + (index2 ? " " : "") + word.toUpperCase();
      });
      var upperFirst2 = createCaseFirst2("toUpperCase");
      function words2(string2, pattern, guard) {
        string2 = toString2(string2);
        pattern = guard ? undefined$1 : pattern;
        if (pattern === undefined$1) {
          return hasUnicodeWord2(string2) ? unicodeWords2(string2) : asciiWords2(string2);
        }
        return string2.match(pattern) || [];
      }
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined$1, args);
        } catch (e3) {
          return isError(e3) ? e3 : new Error2(e3);
        }
      });
      var bindAll = flatRest(function(object2, methodNames) {
        arrayEach2(methodNames, function(key2) {
          key2 = toKey2(key2);
          baseAssignValue2(object2, key2, bind(object2[key2], object2));
        });
        return object2;
      });
      function cond(pairs) {
        var length2 = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
        pairs = !length2 ? [] : arrayMap2(pairs, function(pair) {
          if (typeof pair[1] != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function(args) {
          var index2 = -1;
          while (++index2 < length2) {
            var pair = pairs[index2];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }
      function conforms(source) {
        return baseConforms(baseClone2(source, CLONE_DEEP_FLAG2));
      }
      function constant(value2) {
        return function() {
          return value2;
        };
      }
      function defaultTo(value2, defaultValue) {
        return value2 == null || value2 !== value2 ? defaultValue : value2;
      }
      var flow = createFlow();
      var flowRight = createFlow(true);
      function identity2(value2) {
        return value2;
      }
      function iteratee(func) {
        return baseIteratee2(typeof func == "function" ? func : baseClone2(func, CLONE_DEEP_FLAG2));
      }
      function matches(source) {
        return baseMatches2(baseClone2(source, CLONE_DEEP_FLAG2));
      }
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty2(path, baseClone2(srcValue, CLONE_DEEP_FLAG2));
      }
      var method = baseRest(function(path, args) {
        return function(object2) {
          return baseInvoke(object2, path, args);
        };
      });
      var methodOf = baseRest(function(object2, args) {
        return function(path) {
          return baseInvoke(object2, path, args);
        };
      });
      function mixin(object2, source, options) {
        var props = keys2(source), methodNames = baseFunctions(source, props);
        if (options == null && !(isObject3(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object2;
          object2 = this;
          methodNames = baseFunctions(source, keys2(source));
        }
        var chain2 = !(isObject3(options) && "chain" in options) || !!options.chain, isFunc = isFunction3(object2);
        arrayEach2(methodNames, function(methodName) {
          var func = source[methodName];
          object2[methodName] = func;
          if (isFunc) {
            object2.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain2 || chainAll) {
                var result3 = object2(this.__wrapped__), actions = result3.__actions__ = copyArray2(this.__actions__);
                actions.push({ "func": func, "args": arguments, "thisArg": object2 });
                result3.__chain__ = chainAll;
                return result3;
              }
              return func.apply(object2, arrayPush2([this.value()], arguments));
            };
          }
        });
        return object2;
      }
      function noConflict() {
        if (root2._ === this) {
          root2._ = oldDash;
        }
        return this;
      }
      function noop2() {
      }
      function nthArg(n2) {
        n2 = toInteger2(n2);
        return baseRest(function(args) {
          return baseNth(args, n2);
        });
      }
      var over = createOver(arrayMap2);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome2);
      function property2(path) {
        return isKey2(path) ? baseProperty2(toKey2(path)) : basePropertyDeep2(path);
      }
      function propertyOf(object2) {
        return function(path) {
          return object2 == null ? undefined$1 : baseGet2(object2, path);
        };
      }
      var range = createRange();
      var rangeRight = createRange(true);
      function stubArray2() {
        return [];
      }
      function stubFalse2() {
        return false;
      }
      function stubObject() {
        return {};
      }
      function stubString() {
        return "";
      }
      function stubTrue() {
        return true;
      }
      function times(n2, iteratee2) {
        n2 = toInteger2(n2);
        if (n2 < 1 || n2 > MAX_SAFE_INTEGER2) {
          return [];
        }
        var index2 = MAX_ARRAY_LENGTH, length2 = nativeMin(n2, MAX_ARRAY_LENGTH);
        iteratee2 = getIteratee(iteratee2);
        n2 -= MAX_ARRAY_LENGTH;
        var result3 = baseTimes2(length2, iteratee2);
        while (++index2 < n2) {
          iteratee2(index2);
        }
        return result3;
      }
      function toPath2(value2) {
        if (isArray2(value2)) {
          return arrayMap2(value2, toKey2);
        }
        return isSymbol2(value2) ? [value2] : copyArray2(stringToPath2(toString2(value2)));
      }
      function uniqueId(prefix2) {
        var id2 = ++idCounter;
        return toString2(prefix2) + id2;
      }
      var add2 = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);
      var ceil2 = createRound("ceil");
      var divide2 = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor2 = createRound("floor");
      function max2(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity2, baseGt) : undefined$1;
      }
      function maxBy(array2, iteratee2) {
        return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseGt) : undefined$1;
      }
      function mean(array2) {
        return baseMean(array2, identity2);
      }
      function meanBy(array2, iteratee2) {
        return baseMean(array2, getIteratee(iteratee2, 2));
      }
      function min2(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity2, baseLt) : undefined$1;
      }
      function minBy(array2, iteratee2) {
        return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseLt) : undefined$1;
      }
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round2 = createRound("round");
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);
      function sum2(array2) {
        return array2 && array2.length ? baseSum(array2, identity2) : 0;
      }
      function sumBy(array2, iteratee2) {
        return array2 && array2.length ? baseSum(array2, getIteratee(iteratee2, 2)) : 0;
      }
      lodash2.after = after;
      lodash2.ary = ary;
      lodash2.assign = assign2;
      lodash2.assignIn = assignIn;
      lodash2.assignInWith = assignInWith;
      lodash2.assignWith = assignWith;
      lodash2.at = at2;
      lodash2.before = before;
      lodash2.bind = bind;
      lodash2.bindAll = bindAll;
      lodash2.bindKey = bindKey;
      lodash2.castArray = castArray;
      lodash2.chain = chain;
      lodash2.chunk = chunk;
      lodash2.compact = compact;
      lodash2.concat = concat;
      lodash2.cond = cond;
      lodash2.conforms = conforms;
      lodash2.constant = constant;
      lodash2.countBy = countBy;
      lodash2.create = create2;
      lodash2.curry = curry;
      lodash2.curryRight = curryRight;
      lodash2.debounce = debounce2;
      lodash2.defaults = defaults2;
      lodash2.defaultsDeep = defaultsDeep;
      lodash2.defer = defer;
      lodash2.delay = delay;
      lodash2.difference = difference;
      lodash2.differenceBy = differenceBy;
      lodash2.differenceWith = differenceWith;
      lodash2.drop = drop;
      lodash2.dropRight = dropRight;
      lodash2.dropRightWhile = dropRightWhile;
      lodash2.dropWhile = dropWhile;
      lodash2.fill = fill;
      lodash2.filter = filter2;
      lodash2.flatMap = flatMap;
      lodash2.flatMapDeep = flatMapDeep;
      lodash2.flatMapDepth = flatMapDepth;
      lodash2.flatten = flatten;
      lodash2.flattenDeep = flattenDeep;
      lodash2.flattenDepth = flattenDepth;
      lodash2.flip = flip;
      lodash2.flow = flow;
      lodash2.flowRight = flowRight;
      lodash2.fromPairs = fromPairs;
      lodash2.functions = functions;
      lodash2.functionsIn = functionsIn;
      lodash2.groupBy = groupBy;
      lodash2.initial = initial;
      lodash2.intersection = intersection;
      lodash2.intersectionBy = intersectionBy;
      lodash2.intersectionWith = intersectionWith;
      lodash2.invert = invert;
      lodash2.invertBy = invertBy;
      lodash2.invokeMap = invokeMap;
      lodash2.iteratee = iteratee;
      lodash2.keyBy = keyBy;
      lodash2.keys = keys2;
      lodash2.keysIn = keysIn2;
      lodash2.map = map2;
      lodash2.mapKeys = mapKeys2;
      lodash2.mapValues = mapValues2;
      lodash2.matches = matches;
      lodash2.matchesProperty = matchesProperty;
      lodash2.memoize = memoize2;
      lodash2.merge = merge2;
      lodash2.mergeWith = mergeWith;
      lodash2.method = method;
      lodash2.methodOf = methodOf;
      lodash2.mixin = mixin;
      lodash2.negate = negate;
      lodash2.nthArg = nthArg;
      lodash2.omit = omit;
      lodash2.omitBy = omitBy;
      lodash2.once = once2;
      lodash2.orderBy = orderBy;
      lodash2.over = over;
      lodash2.overArgs = overArgs;
      lodash2.overEvery = overEvery;
      lodash2.overSome = overSome;
      lodash2.partial = partial;
      lodash2.partialRight = partialRight;
      lodash2.partition = partition;
      lodash2.pick = pick;
      lodash2.pickBy = pickBy;
      lodash2.property = property2;
      lodash2.propertyOf = propertyOf;
      lodash2.pull = pull;
      lodash2.pullAll = pullAll;
      lodash2.pullAllBy = pullAllBy;
      lodash2.pullAllWith = pullAllWith;
      lodash2.pullAt = pullAt;
      lodash2.range = range;
      lodash2.rangeRight = rangeRight;
      lodash2.rearg = rearg;
      lodash2.reject = reject;
      lodash2.remove = remove;
      lodash2.rest = rest;
      lodash2.reverse = reverse;
      lodash2.sampleSize = sampleSize;
      lodash2.set = set2;
      lodash2.setWith = setWith;
      lodash2.shuffle = shuffle;
      lodash2.slice = slice2;
      lodash2.sortBy = sortBy;
      lodash2.sortedUniq = sortedUniq;
      lodash2.sortedUniqBy = sortedUniqBy;
      lodash2.split = split2;
      lodash2.spread = spread;
      lodash2.tail = tail;
      lodash2.take = take;
      lodash2.takeRight = takeRight;
      lodash2.takeRightWhile = takeRightWhile;
      lodash2.takeWhile = takeWhile;
      lodash2.tap = tap;
      lodash2.throttle = throttle;
      lodash2.thru = thru;
      lodash2.toArray = toArray2;
      lodash2.toPairs = toPairs;
      lodash2.toPairsIn = toPairsIn;
      lodash2.toPath = toPath2;
      lodash2.toPlainObject = toPlainObject;
      lodash2.transform = transform2;
      lodash2.unary = unary;
      lodash2.union = union;
      lodash2.unionBy = unionBy;
      lodash2.unionWith = unionWith;
      lodash2.uniq = uniq;
      lodash2.uniqBy = uniqBy;
      lodash2.uniqWith = uniqWith;
      lodash2.unset = unset;
      lodash2.unzip = unzip;
      lodash2.unzipWith = unzipWith;
      lodash2.update = update2;
      lodash2.updateWith = updateWith;
      lodash2.values = values2;
      lodash2.valuesIn = valuesIn;
      lodash2.without = without;
      lodash2.words = words2;
      lodash2.wrap = wrap;
      lodash2.xor = xor;
      lodash2.xorBy = xorBy;
      lodash2.xorWith = xorWith;
      lodash2.zip = zip;
      lodash2.zipObject = zipObject;
      lodash2.zipObjectDeep = zipObjectDeep;
      lodash2.zipWith = zipWith;
      lodash2.entries = toPairs;
      lodash2.entriesIn = toPairsIn;
      lodash2.extend = assignIn;
      lodash2.extendWith = assignInWith;
      mixin(lodash2, lodash2);
      lodash2.add = add2;
      lodash2.attempt = attempt;
      lodash2.camelCase = camelCase2;
      lodash2.capitalize = capitalize2;
      lodash2.ceil = ceil2;
      lodash2.clamp = clamp2;
      lodash2.clone = clone2;
      lodash2.cloneDeep = cloneDeep;
      lodash2.cloneDeepWith = cloneDeepWith;
      lodash2.cloneWith = cloneWith;
      lodash2.conformsTo = conformsTo;
      lodash2.deburr = deburr2;
      lodash2.defaultTo = defaultTo;
      lodash2.divide = divide2;
      lodash2.endsWith = endsWith;
      lodash2.eq = eq2;
      lodash2.escape = escape2;
      lodash2.escapeRegExp = escapeRegExp;
      lodash2.every = every;
      lodash2.find = find2;
      lodash2.findIndex = findIndex2;
      lodash2.findKey = findKey2;
      lodash2.findLast = findLast;
      lodash2.findLastIndex = findLastIndex;
      lodash2.findLastKey = findLastKey;
      lodash2.floor = floor2;
      lodash2.forEach = forEach2;
      lodash2.forEachRight = forEachRight;
      lodash2.forIn = forIn;
      lodash2.forInRight = forInRight;
      lodash2.forOwn = forOwn;
      lodash2.forOwnRight = forOwnRight;
      lodash2.get = get2;
      lodash2.gt = gt2;
      lodash2.gte = gte;
      lodash2.has = has2;
      lodash2.hasIn = hasIn2;
      lodash2.head = head;
      lodash2.identity = identity2;
      lodash2.includes = includes;
      lodash2.indexOf = indexOf;
      lodash2.inRange = inRange;
      lodash2.invoke = invoke;
      lodash2.isArguments = isArguments2;
      lodash2.isArray = isArray2;
      lodash2.isArrayBuffer = isArrayBuffer;
      lodash2.isArrayLike = isArrayLike2;
      lodash2.isArrayLikeObject = isArrayLikeObject;
      lodash2.isBoolean = isBoolean;
      lodash2.isBuffer = isBuffer2;
      lodash2.isDate = isDate2;
      lodash2.isElement = isElement;
      lodash2.isEmpty = isEmpty2;
      lodash2.isEqual = isEqual2;
      lodash2.isEqualWith = isEqualWith;
      lodash2.isError = isError;
      lodash2.isFinite = isFinite2;
      lodash2.isFunction = isFunction3;
      lodash2.isInteger = isInteger3;
      lodash2.isLength = isLength2;
      lodash2.isMap = isMap2;
      lodash2.isMatch = isMatch;
      lodash2.isMatchWith = isMatchWith;
      lodash2.isNaN = isNaN2;
      lodash2.isNative = isNative;
      lodash2.isNil = isNil;
      lodash2.isNull = isNull;
      lodash2.isNumber = isNumber;
      lodash2.isObject = isObject3;
      lodash2.isObjectLike = isObjectLike2;
      lodash2.isPlainObject = isPlainObject2;
      lodash2.isRegExp = isRegExp;
      lodash2.isSafeInteger = isSafeInteger;
      lodash2.isSet = isSet2;
      lodash2.isString = isString3;
      lodash2.isSymbol = isSymbol2;
      lodash2.isTypedArray = isTypedArray2;
      lodash2.isUndefined = isUndefined;
      lodash2.isWeakMap = isWeakMap;
      lodash2.isWeakSet = isWeakSet;
      lodash2.join = join2;
      lodash2.kebabCase = kebabCase;
      lodash2.last = last;
      lodash2.lastIndexOf = lastIndexOf;
      lodash2.lowerCase = lowerCase;
      lodash2.lowerFirst = lowerFirst;
      lodash2.lt = lt2;
      lodash2.lte = lte;
      lodash2.max = max2;
      lodash2.maxBy = maxBy;
      lodash2.mean = mean;
      lodash2.meanBy = meanBy;
      lodash2.min = min2;
      lodash2.minBy = minBy;
      lodash2.stubArray = stubArray2;
      lodash2.stubFalse = stubFalse2;
      lodash2.stubObject = stubObject;
      lodash2.stubString = stubString;
      lodash2.stubTrue = stubTrue;
      lodash2.multiply = multiply;
      lodash2.nth = nth;
      lodash2.noConflict = noConflict;
      lodash2.noop = noop2;
      lodash2.now = now;
      lodash2.pad = pad;
      lodash2.padEnd = padEnd;
      lodash2.padStart = padStart;
      lodash2.parseInt = parseInt2;
      lodash2.random = random2;
      lodash2.reduce = reduce;
      lodash2.reduceRight = reduceRight;
      lodash2.repeat = repeat;
      lodash2.replace = replace2;
      lodash2.result = result2;
      lodash2.round = round2;
      lodash2.runInContext = runInContext2;
      lodash2.sample = sample;
      lodash2.size = size;
      lodash2.snakeCase = snakeCase2;
      lodash2.some = some;
      lodash2.sortedIndex = sortedIndex;
      lodash2.sortedIndexBy = sortedIndexBy;
      lodash2.sortedIndexOf = sortedIndexOf;
      lodash2.sortedLastIndex = sortedLastIndex;
      lodash2.sortedLastIndexBy = sortedLastIndexBy;
      lodash2.sortedLastIndexOf = sortedLastIndexOf;
      lodash2.startCase = startCase;
      lodash2.startsWith = startsWith;
      lodash2.subtract = subtract;
      lodash2.sum = sum2;
      lodash2.sumBy = sumBy;
      lodash2.template = template;
      lodash2.times = times;
      lodash2.toFinite = toFinite;
      lodash2.toInteger = toInteger2;
      lodash2.toLength = toLength;
      lodash2.toLower = toLower;
      lodash2.toNumber = toNumber;
      lodash2.toSafeInteger = toSafeInteger;
      lodash2.toString = toString2;
      lodash2.toUpper = toUpper;
      lodash2.trim = trim2;
      lodash2.trimEnd = trimEnd;
      lodash2.trimStart = trimStart;
      lodash2.truncate = truncate2;
      lodash2.unescape = unescape2;
      lodash2.uniqueId = uniqueId;
      lodash2.upperCase = upperCase;
      lodash2.upperFirst = upperFirst2;
      lodash2.each = forEach2;
      lodash2.eachRight = forEachRight;
      lodash2.first = head;
      mixin(lodash2, function() {
        var source = {};
        baseForOwn2(lodash2, function(func, methodName) {
          if (!hasOwnProperty2.call(lodash2.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), { "chain": false });
      lodash2.VERSION = VERSION;
      arrayEach2(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
        lodash2[methodName].placeholder = lodash2;
      });
      arrayEach2(["drop", "take"], function(methodName, index2) {
        LazyWrapper.prototype[methodName] = function(n2) {
          n2 = n2 === undefined$1 ? 1 : nativeMax(toInteger2(n2), 0);
          var result3 = this.__filtered__ && !index2 ? new LazyWrapper(this) : this.clone();
          if (result3.__filtered__) {
            result3.__takeCount__ = nativeMin(n2, result3.__takeCount__);
          } else {
            result3.__views__.push({
              "size": nativeMin(n2, MAX_ARRAY_LENGTH),
              "type": methodName + (result3.__dir__ < 0 ? "Right" : "")
            });
          }
          return result3;
        };
        LazyWrapper.prototype[methodName + "Right"] = function(n2) {
          return this.reverse()[methodName](n2).reverse();
        };
      });
      arrayEach2(["filter", "map", "takeWhile"], function(methodName, index2) {
        var type = index2 + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
        LazyWrapper.prototype[methodName] = function(iteratee2) {
          var result3 = this.clone();
          result3.__iteratees__.push({
            "iteratee": getIteratee(iteratee2, 3),
            "type": type
          });
          result3.__filtered__ = result3.__filtered__ || isFilter;
          return result3;
        };
      });
      arrayEach2(["head", "last"], function(methodName, index2) {
        var takeName = "take" + (index2 ? "Right" : "");
        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach2(["initial", "tail"], function(methodName, index2) {
        var dropName = "drop" + (index2 ? "" : "Right");
        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });
      LazyWrapper.prototype.compact = function() {
        return this.filter(identity2);
      };
      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };
      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };
      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == "function") {
          return new LazyWrapper(this);
        }
        return this.map(function(value2) {
          return baseInvoke(value2, path, args);
        });
      });
      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };
      LazyWrapper.prototype.slice = function(start2, end) {
        start2 = toInteger2(start2);
        var result3 = this;
        if (result3.__filtered__ && (start2 > 0 || end < 0)) {
          return new LazyWrapper(result3);
        }
        if (start2 < 0) {
          result3 = result3.takeRight(-start2);
        } else if (start2) {
          result3 = result3.drop(start2);
        }
        if (end !== undefined$1) {
          end = toInteger2(end);
          result3 = end < 0 ? result3.dropRight(-end) : result3.take(end - start2);
        }
        return result3;
      };
      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };
      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };
      baseForOwn2(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
        if (!lodashFunc) {
          return;
        }
        lodash2.prototype[methodName] = function() {
          var value2 = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value2 instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value2);
          var interceptor = function(value3) {
            var result4 = lodashFunc.apply(lodash2, arrayPush2([value3], args));
            return isTaker && chainAll ? result4[0] : result4;
          };
          if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
          if (!retUnwrapped && useLazy) {
            value2 = onlyLazy ? value2 : new LazyWrapper(this);
            var result3 = func.apply(value2, args);
            result3.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$1 });
            return new LodashWrapper(result3, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result3 = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result3.value()[0] : result3.value() : result3;
        };
      });
      arrayEach2(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
        var func = arrayProto2[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
        lodash2.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value2 = this.value();
            return func.apply(isArray2(value2) ? value2 : [], args);
          }
          return this[chainName](function(value3) {
            return func.apply(isArray2(value3) ? value3 : [], args);
          });
        };
      });
      baseForOwn2(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash2[methodName];
        if (lodashFunc) {
          var key2 = lodashFunc.name + "";
          if (!hasOwnProperty2.call(realNames, key2)) {
            realNames[key2] = [];
          }
          realNames[key2].push({ "name": methodName, "func": lodashFunc });
        }
      });
      realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
        "name": "wrapper",
        "func": undefined$1
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash2.prototype.at = wrapperAt;
      lodash2.prototype.chain = wrapperChain;
      lodash2.prototype.commit = wrapperCommit;
      lodash2.prototype.next = wrapperNext;
      lodash2.prototype.plant = wrapperPlant;
      lodash2.prototype.reverse = wrapperReverse;
      lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
      lodash2.prototype.first = lodash2.prototype.head;
      if (symIterator) {
        lodash2.prototype[symIterator] = wrapperToIterator;
      }
      return lodash2;
    };
    var _2 = runInContext();
    if (freeModule2) {
      (freeModule2.exports = _2)._ = _2;
      freeExports2._ = _2;
    } else {
      root2._ = _2;
    }
  }).call(commonjsGlobal);
})(lodash, lodash.exports);
var lodashExports = lodash.exports;
const _ = /* @__PURE__ */ getDefaultExportFromCjs(lodashExports);
const identifyLeadingAmount = (txpowDetail) => {
  try {
    const transactionType = getTxPOWDetailsType(txpowDetail);
    const valueTransfer = transactionType === "normal";
    const custom = transactionType === "custom";
    return custom ? "" : valueTransfer ? txpowDetail.difference[Object.keys(txpowDetail.difference)[0]] : txpowDetail.difference["0xFF"];
  } catch (error) {
    return "";
  }
};
const HistoryTransactionDetailSimple = () => {
  const { makeMinimaNumber } = useFormatMinimaNumber();
  const { _promptTransactionDetails: _transaction, promptTransactionDetails } = reactExports.useContext(appContext);
  const [_viewFullJson, setViewJson] = reactExports.useState(false);
  const [_showInputs, setShowInputs] = reactExports.useState(false);
  const [_showStates, setShowStates] = reactExports.useState(false);
  const [showOutputs, setShowOutputs] = reactExports.useState(false);
  const dropdownAnimationOutputs = useSpring({
    height: showOutputs ? "auto" : 0,
    opacity: showOutputs ? 1 : 0
  });
  const dropdownAnimationInputs = useSpring({
    height: _showInputs ? "auto" : 0,
    opacity: _showInputs ? 1 : 0
  });
  const dropdownAnimationStates = useSpring({
    height: _showStates ? "auto" : 0,
    opacity: _showStates ? 1 : 0
  });
  if (!_transaction) {
    return null;
  }
  const hasPublicMessage = _transaction.transaction.body.txn.state.length && _transaction.transaction.body.txn.state.find((s4) => s4.port === 44) ? _transaction.transaction.body.txn.state.find((s4) => s4.port === 44) : false;
  const theMessage = hasPublicMessage ? decode(hasPublicMessage.data).substring(1, hasPublicMessage.data.length - 1) : "";
  const amount = identifyLeadingAmount(_transaction.details) === "0" ? "-" : makeMinimaNumber(
    identifyLeadingAmount(_transaction.details),
    2e3
  );
  const txpowid = _transaction.transaction.txpowid;
  const sentToMx = _transaction.transaction.body.txn.outputs[0].miniaddress;
  const sentTo0x = _transaction.transaction.body.txn.outputs[0].address;
  const date2 = format(
    parseInt(_transaction.transaction.header.timemilli),
    "MMMM do yyyy 'at' h:mm a"
  );
  const type = getTxPOWDetailsType(_transaction.details) === "normal" ? "Value Transfer" : getTxPOWDetailsType(_transaction.details) === "custom" ? "Custom" : "Token Creation";
  const blockPosted = _transaction.transaction.header.block;
  const burn = parseInt(_transaction.transaction.burn) > 0 ? makeMinimaNumber(_transaction.transaction.burn, 2e3) : "0";
  const fullJson = JSON.stringify(_transaction.transaction);
  const handleExportingToCSV = () => {
    downloadCsv({ amount, txpowid, sentToMx, sentTo0x, date: date2, type, blockPosted, burn, fullJson });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    _viewFullJson && _transaction && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          onClick: () => setViewJson(false),
          className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Grid,
            {
              variant: "lg",
              title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "svg",
                  {
                    className: "fill-white hover:cursor-pointer",
                    onClick: (e3) => {
                      e3.stopPropagation();
                      setViewJson(false);
                    },
                    xmlns: "http://www.w3.org/2000/svg",
                    height: "24",
                    viewBox: "0 -960 960 960",
                    width: "24",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
                  }
                ),
                "Full TxPOW Json"
              ] }),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "div",
                {
                  onClick: (e3) => e3.stopPropagation(),
                  className: "flex flex-col gap-4 mx-4 rounded bg-white bg-opacity-90 p-4 mb-4 shadow-sm",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "overflow-scroll", children: /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { className: "text-black text-sm break-all max-h-[calc(100vh_-_56px)]", children: JSON.stringify(
                    _transaction.transaction,
                    null,
                    2
                  ) }) })
                }
              )
            }
          )
        }
      ),
      document.body
    ),
    _transaction && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Grid,
        {
          variant: "lg",
          title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                className: "fill-white hover:cursor-pointer",
                onClick: (e3) => {
                  e3.stopPropagation();
                  promptTransactionDetails(false);
                },
                xmlns: "http://www.w3.org/2000/svg",
                height: "24",
                viewBox: "0 -960 960 960",
                width: "24",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
              }
            ),
            "Viewing transaction"
          ] }),
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            CardContent,
            {
              onClick: (e3) => e3.stopPropagation(),
              className: "bg-opacity-90",
              header: /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "flex justify-between", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "text-black text-xl", children: "Quick Summary" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "svg",
                    {
                      onClick: () => setViewJson(true),
                      className: "fill-black hover:cursor-pointer",
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "24",
                      viewBox: "0 -960 960 960",
                      width: "24",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M320-240 80-480l240-240 57 57-184 184 183 183-56 56Zm320 0-57-57 184-184-183-183 56-56 240 240-240 240Z" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "svg",
                    {
                      onClick: () => handleExportingToCSV(),
                      className: "fill-black hover:cursor-pointer",
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "24",
                      viewBox: "0 -960 960 960",
                      width: "24",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M480-320 280-520l56-58 104 104v-326h80v326l104-104 56 58-200 200ZM240-160q-33 0-56.5-23.5T160-240v-120h80v120h480v-120h80v120q0 33-23.5 56.5T720-160H240Z" })
                    }
                  )
                ] })
              ] }),
              content: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-8", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "divide-y-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Transaction ID" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate font-mono",
                        value: _transaction.transaction.txpowid,
                        readOnly: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Amount" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate font-mono",
                        value: amount,
                        readOnly: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Transaction Type" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate",
                        value: type,
                        readOnly: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Recipient (0x)" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate font-mono",
                        value: sentTo0x,
                        readOnly: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "(Mx Address)" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate font-mono",
                        value: sentToMx,
                        readOnly: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Token" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate",
                        value: _transaction.transaction.body.txn.outputs[0].tokenid === "0x00" ? "Minima" : _transaction.transaction.body.txn.outputs[0].token && _transaction.transaction.body.txn.outputs[0].token.name && typeof _transaction.transaction.body.txn.outputs[0].token.name.name === "string" ? _transaction.transaction.body.txn.outputs[0].token.name.name : "N/A",
                        readOnly: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Block Height" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate font-mono",
                        value: blockPosted,
                        readOnly: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Date" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate",
                        value: date2,
                        readOnly: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Burn" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate font-mono",
                        value: burn,
                        readOnly: true
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white p-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Public Message" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "input",
                      {
                        className: "w-full truncate font-mono",
                        value: theMessage ? theMessage : "-",
                        readOnly: true
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  !!_transaction.transaction.body.txn.inputs.length && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white shadow-md rounded-lg mb-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        onClick: () => setShowInputs((prevState) => !prevState),
                        className: "p-4 flex items-center justify-between rounded-t-lg cursor-pointer",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-semibold", children: "Inputs" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "svg",
                            {
                              className: "w-6 h-6 ".concat(showOutputs ? "transform rotate-180" : ""),
                              xmlns: "http://www.w3.org/2000/svg",
                              fill: "none",
                              viewBox: "0 0 24 24",
                              stroke: "currentColor",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "path",
                                {
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round",
                                  strokeWidth: "2",
                                  d: "M19 9l-7 7-7-7"
                                }
                              )
                            }
                          )
                        ]
                      }
                    ),
                    _showInputs && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      animated.ul,
                      {
                        style: dropdownAnimationInputs,
                        className: "bg-white divide-y divide-gray-200 overflow-hidden",
                        children: _transaction.transaction.body.txn.inputs.map(
                          (output, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "p-4", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-lg font-semibold mb-2", children: [
                              "# ",
                              index2
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Token" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.tokenid === "0x00" ? "Minima" : output.token ? output.token.name.name : "N/A",
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Amount" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: makeMinimaNumber(
                                    output.amount,
                                    2e3
                                  ),
                                  readOnly: true
                                }
                              )
                            ] }),
                            output.tokenamount && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Token Amount" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: makeMinimaNumber(
                                    output.tokenamount,
                                    2e3
                                  ),
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Coin ID" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.coinid,
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Token ID" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.tokenid,
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Spent" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.spent ? "Yes" : "No",
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Storing State" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.storestate ? "Yes" : "No",
                                  readOnly: true
                                }
                              )
                            ] })
                          ] }, index2)
                        )
                      }
                    )
                  ] }),
                  !!_transaction.transaction.body.txn.outputs.length && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white shadow-md rounded-lg mb-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        onClick: () => setShowOutputs((prevState) => !prevState),
                        className: "p-4 flex items-center justify-between rounded-t-lg cursor-pointer",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-semibold", children: "Outputs" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "svg",
                            {
                              className: "w-6 h-6 ".concat(showOutputs ? "transform rotate-180" : ""),
                              xmlns: "http://www.w3.org/2000/svg",
                              fill: "none",
                              viewBox: "0 0 24 24",
                              stroke: "currentColor",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "path",
                                {
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round",
                                  strokeWidth: "2",
                                  d: "M19 9l-7 7-7-7"
                                }
                              )
                            }
                          )
                        ]
                      }
                    ),
                    showOutputs && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      animated.ul,
                      {
                        style: dropdownAnimationOutputs,
                        className: "bg-white divide-y divide-gray-200 overflow-hidden",
                        children: _transaction.transaction.body.txn.outputs.map(
                          (output, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "p-4", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-lg font-semibold mb-2", children: [
                              "# ",
                              index2
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Token" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.tokenid === "0x00" ? "Minima" : output.token ? output.token.name.name : "N/A",
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Amount" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: makeMinimaNumber(
                                    output.amount,
                                    2e3
                                  ),
                                  readOnly: true
                                }
                              )
                            ] }),
                            output.tokenamount && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Token Amount" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: makeMinimaNumber(
                                    output.tokenamount,
                                    2e3
                                  ),
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Coin ID" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.coinid,
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Token ID" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.tokenid,
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Spent" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.spent ? "Yes" : "No",
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Storing State" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: output.storestate ? "Yes" : "No",
                                  readOnly: true
                                }
                              )
                            ] })
                          ] }, index2)
                        )
                      }
                    )
                  ] }),
                  !!_transaction.transaction.body.txn.state.length && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white shadow-md rounded-lg mb-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        onClick: () => setShowStates((prevState) => !prevState),
                        className: "p-4 flex items-center justify-between rounded-t-lg cursor-pointer ".concat(_showStates ? "" : "rounded-b-lg"),
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-semibold", children: "State Variables" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "svg",
                            {
                              className: "w-6 h-6 ".concat(_showStates ? "transform rotate-180" : ""),
                              xmlns: "http://www.w3.org/2000/svg",
                              fill: "none",
                              viewBox: "0 0 24 24",
                              stroke: "currentColor",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "path",
                                {
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round",
                                  strokeWidth: "2",
                                  d: "M19 9l-7 7-7-7"
                                }
                              )
                            }
                          )
                        ]
                      }
                    ),
                    _showStates && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      animated.ul,
                      {
                        style: dropdownAnimationStates,
                        className: "bg-white divide-y divide-gray-200 overflow-hidden",
                        children: _transaction.transaction.body.txn.state.map(
                          (stateVar, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "p-4", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Port" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: stateVar.port,
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Type" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: stateVar.type,
                                  readOnly: true
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white py-3 border-b border-gray-300", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "font-bold", children: "Data" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "input",
                                {
                                  className: "w-full truncate font-mono",
                                  value: stateVar.data,
                                  readOnly: true
                                }
                              )
                            ] })
                          ] }, index2)
                        )
                      }
                    )
                  ] })
                ] })
              ] })
            }
          )
        }
      ) }),
      document.body
    )
  ] });
};
const ComposableModal = ({ children, dismiss, extraClass }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute md:ml-[240px] left-0 right-0 bottom-0 top-0 grid grid-cols-[1fr_minmax(0,_560px)_1fr] ".concat(extraClass && extraClass), children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        onClick: dismiss,
        id: "backdrop",
        className: "backdrop-blur-sm absolute left-0 right-0 top-0 bottom-0"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative z-[21] h-full", children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
  ] });
};
const Cross = ({ dismiss }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { onClick: dismiss, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      strokeWidth: "1.5",
      stroke: "currentColor",
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M18 6l-12 12" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 6l12 12" })
      ]
    }
  ) });
};
const History = () => {
  const {
    _currentPage,
    setCurrentPage,
    setOpenDrawer,
    getHistory,
    loaded,
    _historyDetails,
    _historyTransactions,
    promptTransactionDetails,
    _promptTransactionDetails
  } = reactExports.useContext(appContext);
  const [_promptAllDialog, setPromptAllDialog] = reactExports.useState(false);
  const [working, setWorking] = reactExports.useState(false);
  const [historySize, setHistorySize] = reactExports.useState(0);
  const [dropDownMenu, setDropDownMenu] = reactExports.useState(false);
  const dropdownRef = reactExports.useRef(null);
  const toggleDropdown = () => {
    setDropDownMenu((prevState) => !prevState);
  };
  const promptAllDialog = () => {
    setPromptAllDialog((prevState) => !prevState);
  };
  const springProps = useSpring({
    opacity: _promptAllDialog ? 1 : 0,
    transform: _promptAllDialog ? "translateY(0%) scale(1)" : "translateY(-50%) scale(0.8)",
    config: config.stiff
  });
  reactExports.useEffect(() => {
    if (loaded.current === true) {
      window.MDS.cmd("history action:size", (resp) => {
        if (resp.status) {
          setHistorySize(resp.response.size);
        }
      });
      getHistory(20, _currentPage);
    }
  }, [loaded.current, _currentPage]);
  reactExports.useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setDropDownMenu(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdownRef]);
  const zippedArrays = _historyTransactions.map((transaction, index2) => ({
    transaction,
    details: _historyDetails[index2]
    // Assuming anotherArray has corresponding items
  }));
  const groupedTransactions = _.groupBy(zippedArrays, (transaction) => {
    const date2 = new Date(parseInt(transaction.transaction.header.timemilli, 10));
    const now = /* @__PURE__ */ new Date();
    if (isToday(date2)) {
      return "".concat(format(date2, "EEEE do"));
    }
    if (isYesterday(date2)) {
      return "Yesterday";
    }
    const yearDiff = now.getFullYear() - date2.getFullYear();
    if (yearDiff > 0) {
      return format(date2, "MMMM do yyyy");
    }
    return format(date2, "MMMM do");
  });
  const handleDownloadPage = () => {
    const transactions = _historyTransactions.map((_transaction, index2) => {
      const amount = identifyLeadingAmount(_historyDetails[index2]) === "0" ? "-" : identifyLeadingAmount(_historyDetails[index2]);
      const txpowid = _transaction.txpowid;
      const sentToMx = _transaction.body.txn.outputs[0].miniaddress;
      const sentTo0x = _transaction.body.txn.outputs[0].address;
      const date2 = format(parseInt(_transaction.header.timemilli), "MMMM do yyyy 'at' h:mm a");
      const type = getTxPOWDetailsType(_historyDetails[index2].details) === "normal" ? "Value Transfer" : getTxPOWDetailsType(_historyDetails[index2].details) === "custom" ? "Custom" : "Token Creation";
      const blockPosted = _transaction.header.block;
      const burn = parseInt(_transaction.burn) > 0 ? _transaction.burn : "0";
      const fullJson = JSON.stringify(_transaction);
      return {
        amount,
        txpowid,
        sentToMx,
        sentTo0x,
        date: date2,
        type,
        blockPosted,
        burn,
        fullJson
      };
    });
    downloadAllAsCsv(transactions);
  };
  const handleDownloadAll = async () => {
    setWorking(true);
    return new Promise((resolve2, reject) => {
      window.MDS.cmd("history max:1000", (resp) => {
        if (!resp.status)
          reject("Failed to fetch history");
        const { txpows, details, size } = resp.response;
        const transactions = txpows.map((_transaction, index2) => {
          const amount = identifyLeadingAmount(details[index2]) === "0" ? "-" : identifyLeadingAmount(details[index2]);
          const txpowid = _transaction.txpowid;
          const sentToMx = _transaction.body.txn.outputs[0].miniaddress;
          const sentTo0x = _transaction.body.txn.outputs[0].address;
          const date2 = format(parseInt(_transaction.header.timemilli), "MMMM do yyyy 'at' h:mm a");
          const type = getTxPOWDetailsType(details[index2].details) === "normal" ? "Value Transfer" : getTxPOWDetailsType(details[index2].details) === "custom" ? "Custom" : "Token Creation";
          const blockPosted = _transaction.header.block;
          const burn = parseInt(_transaction.burn) > 0 ? _transaction.burn : "0";
          const fullJson = JSON.stringify(_transaction);
          return {
            amount,
            txpowid,
            sentToMx,
            sentTo0x,
            date: date2,
            type,
            blockPosted,
            burn,
            fullJson
          };
        });
        downloadAllAsCsv(transactions);
        resolve2(size);
      });
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    _promptAllDialog && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(ComposableModal, { dismiss: promptAllDialog, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-rows-[80px_1fr] mx-4 md:mx-0", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx(animated.div, { style: springProps, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white shadow-md text-black pb-2 px-4 rounded grid grid-rows-[min-content_minmax(0,_260px)_auto]", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] py-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold text-black", children: "Download Transaction History" }),
            !working && /* @__PURE__ */ jsxRuntimeExports.jsx(Cross, { dismiss: promptAllDialog })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            "You have ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("b", { children: historySize }),
            " transactions in total.  You can download up to 1000 transactions."
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto]", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[minmax(0,_128px)_minmax(0,_128px)] gap-2 py-4", children: [
              working && /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
              !working && /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: promptAllDialog, className: "px-3 py-2 border rounded", children: "Cancel" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: async () => {
                    await handleDownloadAll();
                    setWorking(false);
                  },
                  className: "disabled:bg-opacity-10 px-3 py-2 font-bold bg-black text-white rounded",
                  children: working ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "svg",
                    {
                      xmlns: "http://www.w3.org/2000/svg",
                      className: "animate-spin",
                      width: "32",
                      height: "32",
                      viewBox: "0 0 24 24",
                      strokeWidth: "1.5",
                      stroke: "#FFA010",
                      fill: "none",
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M10 20.777a8.942 8.942 0 0 1 -2.48 -.969" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M14 3.223a9.003 9.003 0 0 1 0 17.554" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M4.579 17.093a8.961 8.961 0 0 1 -1.227 -2.592" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3.124 10.5c.16 -.95 .468 -1.85 .9 -2.675l.169 -.305" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6.907 4.579a8.954 8.954 0 0 1 3.093 -1.356" })
                      ]
                    }
                  ) }) : "Download"
                }
              )
            ] })
          ] })
        ] }) })
      ] }) }),
      document.body
    ),
    _promptTransactionDetails && /* @__PURE__ */ jsxRuntimeExports.jsx(HistoryTransactionDetailSimple, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Grid,
      {
        title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "svg",
            {
              onClick: (e3) => {
                e3.stopPropagation();
                setOpenDrawer(true);
              },
              className: "block md:hidden fill-white",
              xmlns: "http://www.w3.org/2000/svg",
              height: "24",
              viewBox: "0 -960 960 960",
              width: "24",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" })
            }
          ),
          "History"
        ] }),
        variant: "lg",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          !_historyTransactions.length && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center text-opacity-50", children: "No transactions were recorded yet" }) }),
          !!_historyTransactions.length && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white overflow-y-scroll p-4 pt-0 px-0 mx-4 rounded mb-4 md:mx-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 sticky top-0 bg-white py-4 shadow-sm flex items-center justify-between", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { onClick: toggleDropdown, className: "flex items-center justift-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "20",
                    height: "24",
                    viewBox: "0 0 24 24",
                    strokeWidth: "1.5",
                    stroke: "#000000",
                    fill: "none",
                    strokeLinecap: "round",
                    strokeLinejoin: "round",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" })
                    ]
                  }
                ),
                dropDownMenu && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "div",
                  {
                    ref: dropdownRef,
                    className: "absolute right-0 mt-2 top-[30px] w-auto max-w-[200px] bg-white z-[25] border border-gray-200 rounded-md shadow-md",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "a",
                        {
                          className: "cursor-pointer block p-2 py-4 text-sm text-center text-gray-800 w-[200px] hover:bg-violet-300 hover:bg-opacity-10",
                          onClick: (e3) => {
                            e3.stopPropagation();
                            handleDownloadPage();
                          },
                          children: "Download Page"
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "a",
                        {
                          className: "cursor-pointer block p-2 py-4 text-sm text-center text-gray-800 w-[200px] hover:bg-violet-300 hover:bg-opacity-10",
                          onClick: (e3) => {
                            e3.stopPropagation();
                            promptAllDialog();
                          },
                          children: "Download All"
                        }
                      )
                    ]
                  }
                )
              ] })
            ] }),
            Object.entries(groupedTransactions).map(([date2, transactions], index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "my-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "px-4 bg-violet-300 text-sm font-bold", children: date2 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                TransactionList,
                {
                  viewTransaction: promptTransactionDetails,
                  transactions
                }
              )
            ] }, index2)),
            historySize > 20 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-2 grid-cols-[1fr_minmax(0,_360px)_1fr] mx-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    disabled: _currentPage === 1,
                    className: "bg-purple-400 font-bold text-white px-4 py-2 rounded-lg disabled:bg-purple-100 disabled:text-violet-200",
                    onClick: () => setCurrentPage((prevState) => prevState - 1),
                    children: "Previous"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    disabled: _historyTransactions.length < 20,
                    className: "bg-purple-400 font-bold text-white px-4 py-2 rounded-lg disabled:font-bold disabled:bg-purple-100 disabled:text-violet-200",
                    onClick: () => setCurrentPage((prevState) => prevState + 1),
                    children: "Next"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
            ] })
          ] })
        ] })
      }
    )
  ] });
};
function TransactionList({ transactions, viewTransaction }) {
  const { makeMinimaNumber } = useFormatMinimaNumber();
  return /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { children: transactions.map((transaction, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "li",
    {
      onClick: () => viewTransaction(transaction),
      className: "flex border-b border-gray-200 py-4 px-6 transition duration-300 ease-in-out hover:bg-gray-50",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TransactionIcon, { transactionDetail: transaction.details }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "font-bold", children: transaction.transaction.body.txn.outputs[0].tokenid === "0x00" ? "Minima" : transaction.transaction.body.txn.outputs[0].token && transaction.transaction.body.txn.outputs[0].token.name && typeof transaction.transaction.body.txn.outputs[0].token.name.name === "string" ? transaction.transaction.body.txn.outputs[0].token.name.name : "N/A" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: identifyLeadingAmount(transaction.details) === "0" ? "-" : Number(identifyLeadingAmount(transaction.details)) && new Decimal(identifyLeadingAmount(transaction.details)).abs().greaterThan(0) ? makeMinimaNumber(identifyLeadingAmount(transaction.details), 2e3) : "" })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 text-right", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm font=bold", children: format(parseInt(transaction.transaction.header.timemilli), "hh:mm a") }) })
      ]
    },
    index2
  )) });
}
const TransactionIcon = ({ transactionDetail }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    getTxPOWDetailsType(transactionDetail) === "normal" && identifyLeadingAmount(transactionDetail).substring(0, 1) === "-" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        className: "fill-black",
        width: "45",
        height: "45",
        viewBox: "0 0 45 45",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "22.2568", cy: "22.6328", r: "21.5", stroke: "white" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "path",
            {
              d: "M12.7941 27.7531C11.8112 27.7531 10.9692 27.5392 10.2684 27.1115C9.56758 26.6791 9.0283 26.0784 8.65058 25.3093C8.27741 24.5402 8.09082 23.6482 8.09082 22.6334C8.09082 21.6186 8.27741 20.7266 8.65058 19.9575C9.0283 19.1884 9.56758 18.59 10.2684 18.1622C10.9692 17.7298 11.8112 17.5137 12.7941 17.5137C13.7771 17.5137 14.619 17.7298 15.3199 18.1622C16.0253 18.59 16.5645 19.1884 16.9377 19.9575C17.3154 20.7266 17.5043 21.6186 17.5043 22.6334C17.5043 23.6482 17.3154 24.5402 16.9377 25.3093C16.5645 26.0784 16.0253 26.6791 15.3199 27.1115C14.619 27.5392 13.7771 27.7531 12.7941 27.7531ZM12.7941 26.2036C13.454 26.2081 14.0024 26.0625 14.4393 25.7667C14.8807 25.4709 15.2107 25.0545 15.4291 24.5175C15.6521 23.9805 15.7636 23.3524 15.7636 22.6334C15.7636 21.9144 15.6521 21.2909 15.4291 20.763C15.2107 20.2305 14.8807 19.8164 14.4393 19.5206C14.0024 19.2248 13.454 19.0723 12.7941 19.0632C12.1343 19.0587 11.5859 19.2043 11.149 19.5001C10.7121 19.7959 10.3822 20.2123 10.1592 20.7493C9.94075 21.2863 9.83153 21.9144 9.83153 22.6334C9.83153 23.3524 9.94075 23.9782 10.1592 24.5106C10.3776 25.0385 10.7053 25.4504 11.1422 25.7462C11.5836 26.042 12.1343 26.1945 12.7941 26.2036Z",
              fill: "white"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "path",
            {
              d: "M23.0954 27.7531C22.3126 27.7531 21.6232 27.5939 21.027 27.2753C20.4354 26.9567 19.9712 26.5085 19.6344 25.9305C19.3022 25.3526 19.1361 24.6745 19.1361 23.8963V17.7321L20.8017 17.7185V23.8553C20.8017 24.2239 20.8632 24.5539 20.986 24.8451C21.1135 25.1364 21.2841 25.3844 21.498 25.5892C21.7119 25.7894 21.9577 25.9419 22.2353 26.0466C22.5129 26.1512 22.7996 26.2036 23.0954 26.2036C23.4003 26.2036 23.6893 26.1512 23.9623 26.0466C24.2399 25.9373 24.4857 25.7826 24.6996 25.5824C24.9134 25.3776 25.0818 25.1296 25.2047 24.8383C25.3276 24.547 25.389 24.2194 25.389 23.8553V17.7185H27.0546V23.8963C27.0546 24.6745 26.8862 25.3526 26.5495 25.9305C26.2173 26.5085 25.7531 26.9567 25.1569 27.2753C24.5653 27.5939 23.8781 27.7531 23.0954 27.7531Z",
              fill: "white"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "path",
            {
              d: "M31.5972 27.5483V19.2612H28.4162V17.7185H36.4234V19.2612H33.2424V27.5483H31.5972Z",
              fill: "white"
            }
          )
        ]
      }
    ),
    getTxPOWDetailsType(transactionDetail) === "normal" && identifyLeadingAmount(transactionDetail).substring(0, 1) !== "-" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        className: "fill-black",
        width: "45",
        height: "45",
        viewBox: "0 0 45 45",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "22.8809", cy: "22.6328", r: "21.5", stroke: "white" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16.9541 27.5486V17.7188H18.5992V27.5486H16.9541Z", fill: "white" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "path",
            {
              d: "M20.9171 27.5486V17.7188H22.5827L27.1427 24.6475V17.7188H28.8083V27.5486H27.1427L22.5827 20.6199V27.5486H20.9171Z",
              fill: "white"
            }
          )
        ]
      }
    ),
    getTxPOWDetailsType(transactionDetail) === "tokencreate" && /* @__PURE__ */ jsxRuntimeExports.jsx(
      "svg",
      {
        className: "fill-black my-auto",
        xmlns: "http://www.w3.org/2000/svg",
        height: "45",
        viewBox: "0 -960 960 960",
        width: "45",
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M560-120q-17 0-28.5-11.5T520-160q0-17 11.5-28.5T560-200q47 0 83.5-18.5T680-260q0-14-13-26t-36-22l59-59q32 19 51 45t19 62q0 66-63 103t-137 37ZM183-426q-29-17-46-39.5T120-520q0-42 31-70.5T262-654q63-29 80.5-40.5T360-720q0-16-19.5-28T280-760q-25 0-42 6t-31 20q-11 11-27 13t-29-9q-13-10-15-26t9-29q19-23 54.5-39t80.5-16q72 0 116 32.5t44 87.5q0 39-29 70t-117 69q-58 25-76 37t-18 24q0 9 11.5 17.5T243-486l-60 60Zm571-118L584-714l42-42q24-24 57.5-24t56.5 24l56 56q24 23 24 56.5T796-586l-42 42ZM240-200h56l288-288-56-56-288 288v56Zm-80 80v-170l368-368 170 170-368 368H160Zm368-424 56 56-56-56Z" })
      }
    ),
    getTxPOWDetailsType(transactionDetail) === "custom" && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        className: "fill-black",
        width: "45",
        height: "45",
        viewBox: "0 0 45 45",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "22.248", cy: "22.9297", r: "21.5", stroke: "white" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "path",
            {
              d: "M22.334 30.6233C21.2881 30.6233 20.3282 30.437 19.4543 30.0645C18.5804 29.6921 17.821 29.162 17.1763 28.4743C16.5316 27.7723 16.0302 26.9485 15.672 26.0029C15.3282 25.0573 15.1562 24.0186 15.1562 22.8868C15.1562 21.8123 15.3425 20.8166 15.715 19.8997C16.1018 18.9685 16.6319 18.1518 17.3053 17.4498C17.9786 16.7478 18.7594 16.2034 19.6477 15.8166C20.536 15.4297 21.4959 15.2363 22.5274 15.2363C23.258 15.2363 23.9672 15.3509 24.6549 15.5802C25.3569 15.7951 25.9873 16.1031 26.546 16.5042C27.1191 16.8911 27.5847 17.3352 27.9429 17.8366L26.3956 19.4484C25.9801 19.0329 25.5575 18.6891 25.1277 18.4169C24.7122 18.1303 24.2824 17.9154 23.8383 17.7722C23.4085 17.6289 22.9715 17.5573 22.5274 17.5573C21.8254 17.5573 21.1663 17.6934 20.5503 17.9656C19.9486 18.2235 19.4185 18.5888 18.96 19.0616C18.5159 19.5344 18.1649 20.1003 17.907 20.7593C17.6491 21.404 17.5202 22.1132 17.5202 22.8868C17.5202 23.7035 17.6419 24.4484 17.8855 25.1218C18.1434 25.7808 18.5016 26.3467 18.96 26.8195C19.4185 27.2923 19.9629 27.6576 20.5933 27.9155C21.238 28.1591 21.9471 28.2809 22.7208 28.2809C23.1936 28.2809 23.6592 28.2164 24.1177 28.0875C24.5761 27.9585 25.0059 27.7723 25.4071 27.5287C25.8082 27.2852 26.1735 26.9986 26.5031 26.6691L27.6635 28.5602C27.334 28.9471 26.8827 29.2981 26.3096 29.6133C25.7509 29.9284 25.1205 30.1792 24.4185 30.3654C23.7308 30.5373 23.036 30.6233 22.334 30.6233Z",
              fill: "white"
            }
          )
        ]
      }
    )
  ] });
};
const Settings = () => {
  const { setOpenDrawer, updateCurrencyFormat, _currencyFormat } = reactExports.useContext(appContext);
  const [showCurrencyFormatter, setShowCurrencyFormatter] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [updated, setUpdate] = reactExports.useState(false);
  reactExports.useEffect(() => {
    setDecimalSeparator(_currencyFormat.decimal);
    setThousandSeparator(_currencyFormat.thousands);
  }, []);
  const [decimalSeparator, setDecimalSeparator] = reactExports.useState(".");
  const [thousandSeparator, setThousandSeparator] = reactExports.useState("");
  const handleDecimalChange = (evt) => {
    const value2 = evt.target.value;
    if (value2 === "," && thousandSeparator === ",") {
      setThousandSeparator(".");
    }
    if (value2 === "." && thousandSeparator === ".") {
      setThousandSeparator(",");
    }
    setDecimalSeparator(value2);
  };
  const handleThousandChange = (evt) => {
    const value2 = evt.target.value;
    if (value2 === "," && decimalSeparator === ",") {
      setDecimalSeparator(".");
    }
    if (value2 === "." && thousandSeparator === ".") {
      setDecimalSeparator(",");
    }
    setThousandSeparator(value2);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Grid,
    {
      variant: "lg",
      title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            onClick: (e3) => {
              e3.stopPropagation();
              setOpenDrawer(true);
            },
            className: "block md:hidden fill-white",
            xmlns: "http://www.w3.org/2000/svg",
            height: "24",
            viewBox: "0 -960 960 960",
            width: "24",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" })
          }
        ),
        "Settings"
      ] }),
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        CardContent,
        {
          header: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
          content: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            showCurrencyFormatter && reactDomExports.createPortal(
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "div",
                {
                  onClick: () => setShowCurrencyFormatter(false),
                  className: "ml-0 md:ml-[240px] absolute top-0 right-0 left-0 bottom-0 bg-black bg-opacity-50 animate-fadeIn",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Grid,
                    {
                      variant: "lg",
                      title: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "svg",
                          {
                            className: "fill-white hover:cursor-pointer",
                            onClick: (e3) => {
                              e3.stopPropagation();
                              setShowCurrencyFormatter(false);
                            },
                            xmlns: "http://www.w3.org/2000/svg",
                            height: "24",
                            viewBox: "0 -960 960 960",
                            width: "24",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" })
                          }
                        ),
                        "Currency Formatter"
                      ] }),
                      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "div",
                        {
                          onClick: (e3) => e3.stopPropagation(),
                          className: "flex flex-col gap-4 mx-4 rounded bg-white bg-opacity-90 p-4 mb-4 shadow-sm",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-semibold", children: "Display as" }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "font-mono text-center bg-white rounded-lg py-6 px-4 text-yellow-500 font-bold", children: formatNumber({
                              prefix: "",
                              truncate: 3,
                              decimal: decimalSeparator,
                              integerSeparator: thousandSeparator,
                              suffix: getCharacterCountAfterChar(
                                new Decimal("1000000.956").toString(),
                                "."
                              ) > 3 ? "..." : ""
                            })(new Decimal("1000000.956").toNumber()) }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white px-4 py-2 rounded-lg flex justify-between items-center", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "thousands", children: "Thousands Separator" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                "select",
                                {
                                  disabled: loading,
                                  className: "min-w-[80px] font-bold rounded-lg",
                                  name: "thousands",
                                  value: thousandSeparator,
                                  onChange: handleThousandChange,
                                  children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { children: "." }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { children: "," }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { children: " " })
                                  ]
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white px-4 py-2 rounded-lg flex justify-between items-center", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "decimal", children: "Decimal Separator" }),
                              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                "select",
                                {
                                  disabled: loading,
                                  className: "min-w-[80px] font-bold rounded-lg",
                                  name: "decimal",
                                  value: decimalSeparator,
                                  onChange: handleDecimalChange,
                                  children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { children: "." }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("option", { children: "," })
                                  ]
                                }
                              )
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              Button,
                              {
                                disabled: loading,
                                onClick: () => {
                                  setLoading(true);
                                  updateCurrencyFormat(decimalSeparator, thousandSeparator);
                                  setTimeout(() => {
                                    setLoading(false);
                                    setUpdate(true);
                                  }, 2e3);
                                  setTimeout(() => setUpdate(false), 5e3);
                                },
                                children: [
                                  !loading && "Update",
                                  loading && /* @__PURE__ */ jsxRuntimeExports.jsx(CircularProgress$1, { size: 16 })
                                ]
                              }
                            ),
                            updated && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 justify-center", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                "svg",
                                {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  width: "24",
                                  height: "24",
                                  viewBox: "0 0 24 24",
                                  strokeWidth: "2",
                                  stroke: "green",
                                  fill: "none",
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round",
                                  children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M5 12l5 5l10 -10" })
                                  ]
                                }
                              ),
                              "Updated!"
                            ] })
                          ]
                        }
                      )
                    }
                  )
                }
              ),
              document.body
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "li",
              {
                onClick: () => setShowCurrencyFormatter(true),
                className: "flex items-center gap-2 bg-white rounded-lg px-2 py-3 hover:bg-opacity-50 hover:cursor-pointer",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-yellow-300 rounded-full p-1", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "svg",
                    {
                      xmlns: "http://www.w3.org/2000/svg",
                      width: "24",
                      height: "24",
                      viewBox: "0 0 24 24",
                      strokeWidth: "2",
                      stroke: "currentColor",
                      fill: "none",
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M16.007 7.54a5.965 5.965 0 0 0 -4.008 -1.54a6 6 0 0 0 -5.992 6c0 3.314 2.682 6 5.992 6a5.965 5.965 0 0 0 4 -1.536" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 20v-2" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 6v-2" })
                      ]
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] w-full", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "", children: "Format currency display" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "svg",
                      {
                        className: "w-[20px] h-[20px]",
                        xmlns: "http://www.w3.org/2000/svg",
                        viewBox: "0 0 24 24",
                        strokeWidth: "2",
                        stroke: "currentColor",
                        fill: "none",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 6l6 6l-6 6" })
                        ]
                      }
                    )
                  ] })
                ]
              }
            ) })
          ] })
        }
      ) })
    }
  );
};
const router = createHashRouter(
  createRoutesFromChildren(
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { path: "/", element: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}), children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { index: true, element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { replace: true, to: "balance" }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "balance", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Balance, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "balance/:tokenid", element: /* @__PURE__ */ jsxRuntimeExports.jsx(TokenDetail, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "send", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Send, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "receive", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Receive, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "status", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Status, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "tokencreate", element: /* @__PURE__ */ jsxRuntimeExports.jsx(TokenCreation, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "nfts", element: /* @__PURE__ */ jsxRuntimeExports.jsx(NFTs, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "nfts/createnft", element: /* @__PURE__ */ jsxRuntimeExports.jsx(CreateNFT, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "history", element: /* @__PURE__ */ jsxRuntimeExports.jsx(History, {}), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: ":transactionid", element: /* @__PURE__ */ jsxRuntimeExports.jsx(HistoryTransactionDetailSimple, {}) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "settings", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Settings, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "*", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { replace: true, to: "balance" }) })
    ] })
  )
);
const Main = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(React.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(AppProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(RouterProvider, { router }) }) });
};
ReactDOM.render(/* @__PURE__ */ jsxRuntimeExports.jsx(Main, {}), document.getElementById("root"));
export {
  __vite_legacy_guard
};
