function __vite_legacy_guard() {
  import.meta.url;
  import("_").catch(() => 1);
  async function* g2() {
  }
  ;
}
;
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x3) {
  return x3 && x3.__esModule && Object.prototype.hasOwnProperty.call(x3, "default") ? x3["default"] : x3;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
var react = { exports: {} };
var react_production_min = {};
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l$2 = Symbol.for("react.element"), n$2 = Symbol.for("react.portal"), p$3 = Symbol.for("react.fragment"), q$2 = Symbol.for("react.strict_mode"), r$1 = Symbol.for("react.profiler"), t$1 = Symbol.for("react.provider"), u = Symbol.for("react.context"), v$3 = Symbol.for("react.forward_ref"), w$2 = Symbol.for("react.suspense"), x$1 = Symbol.for("react.memo"), y$1 = Symbol.for("react.lazy"), z$2 = Symbol.iterator;
function A$2(a3) {
  if (null === a3 || "object" !== typeof a3)
    return null;
  a3 = z$2 && a3[z$2] || a3["@@iterator"];
  return "function" === typeof a3 ? a3 : null;
}
var B$1 = { isMounted: function() {
  return false;
}, enqueueForceUpdate: function() {
}, enqueueReplaceState: function() {
}, enqueueSetState: function() {
} }, C$1 = Object.assign, D$1 = {};
function E$1(a3, b3, e3) {
  this.props = a3;
  this.context = b3;
  this.refs = D$1;
  this.updater = e3 || B$1;
}
E$1.prototype.isReactComponent = {};
E$1.prototype.setState = function(a3, b3) {
  if ("object" !== typeof a3 && "function" !== typeof a3 && null != a3)
    throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
  this.updater.enqueueSetState(this, a3, b3, "setState");
};
E$1.prototype.forceUpdate = function(a3) {
  this.updater.enqueueForceUpdate(this, a3, "forceUpdate");
};
function F() {
}
F.prototype = E$1.prototype;
function G$1(a3, b3, e3) {
  this.props = a3;
  this.context = b3;
  this.refs = D$1;
  this.updater = e3 || B$1;
}
var H$1 = G$1.prototype = new F();
H$1.constructor = G$1;
C$1(H$1, E$1.prototype);
H$1.isPureReactComponent = true;
var I$1 = Array.isArray, J = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$1 = { key: true, ref: true, __self: true, __source: true };
function M$1(a3, b3, e3) {
  var d4, c7 = {}, k3 = null, h4 = null;
  if (null != b3)
    for (d4 in void 0 !== b3.ref && (h4 = b3.ref), void 0 !== b3.key && (k3 = "" + b3.key), b3)
      J.call(b3, d4) && !L$1.hasOwnProperty(d4) && (c7[d4] = b3[d4]);
  var g2 = arguments.length - 2;
  if (1 === g2)
    c7.children = e3;
  else if (1 < g2) {
    for (var f2 = Array(g2), m4 = 0; m4 < g2; m4++)
      f2[m4] = arguments[m4 + 2];
    c7.children = f2;
  }
  if (a3 && a3.defaultProps)
    for (d4 in g2 = a3.defaultProps, g2)
      void 0 === c7[d4] && (c7[d4] = g2[d4]);
  return { $$typeof: l$2, type: a3, key: k3, ref: h4, props: c7, _owner: K$1.current };
}
function N$1(a3, b3) {
  return { $$typeof: l$2, type: a3.type, key: b3, ref: a3.ref, props: a3.props, _owner: a3._owner };
}
function O$1(a3) {
  return "object" === typeof a3 && null !== a3 && a3.$$typeof === l$2;
}
function escape(a3) {
  var b3 = { "=": "=0", ":": "=2" };
  return "$" + a3.replace(/[=:]/g, function(a4) {
    return b3[a4];
  });
}
var P$1 = /\/+/g;
function Q$1(a3, b3) {
  return "object" === typeof a3 && null !== a3 && null != a3.key ? escape("" + a3.key) : b3.toString(36);
}
function R$1(a3, b3, e3, d4, c7) {
  var k3 = typeof a3;
  if ("undefined" === k3 || "boolean" === k3)
    a3 = null;
  var h4 = false;
  if (null === a3)
    h4 = true;
  else
    switch (k3) {
      case "string":
      case "number":
        h4 = true;
        break;
      case "object":
        switch (a3.$$typeof) {
          case l$2:
          case n$2:
            h4 = true;
        }
    }
  if (h4)
    return h4 = a3, c7 = c7(h4), a3 = "" === d4 ? "." + Q$1(h4, 0) : d4, I$1(c7) ? (e3 = "", null != a3 && (e3 = a3.replace(P$1, "$&/") + "/"), R$1(c7, b3, e3, "", function(a4) {
      return a4;
    })) : null != c7 && (O$1(c7) && (c7 = N$1(c7, e3 + (!c7.key || h4 && h4.key === c7.key ? "" : ("" + c7.key).replace(P$1, "$&/") + "/") + a3)), b3.push(c7)), 1;
  h4 = 0;
  d4 = "" === d4 ? "." : d4 + ":";
  if (I$1(a3))
    for (var g2 = 0; g2 < a3.length; g2++) {
      k3 = a3[g2];
      var f2 = d4 + Q$1(k3, g2);
      h4 += R$1(k3, b3, e3, f2, c7);
    }
  else if (f2 = A$2(a3), "function" === typeof f2)
    for (a3 = f2.call(a3), g2 = 0; !(k3 = a3.next()).done; )
      k3 = k3.value, f2 = d4 + Q$1(k3, g2++), h4 += R$1(k3, b3, e3, f2, c7);
  else if ("object" === k3)
    throw b3 = String(a3), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b3 ? "object with keys {" + Object.keys(a3).join(", ") + "}" : b3) + "). If you meant to render a collection of children, use an array instead.");
  return h4;
}
function S$1(a3, b3, e3) {
  if (null == a3)
    return a3;
  var d4 = [], c7 = 0;
  R$1(a3, d4, "", "", function(a4) {
    return b3.call(e3, a4, c7++);
  });
  return d4;
}
function T$1(a3) {
  if (-1 === a3._status) {
    var b3 = a3._result;
    b3 = b3();
    b3.then(function(b4) {
      if (0 === a3._status || -1 === a3._status)
        a3._status = 1, a3._result = b4;
    }, function(b4) {
      if (0 === a3._status || -1 === a3._status)
        a3._status = 2, a3._result = b4;
    });
    -1 === a3._status && (a3._status = 0, a3._result = b3);
  }
  if (1 === a3._status)
    return a3._result.default;
  throw a3._result;
}
var U$1 = { current: null }, V$1 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$1, ReactCurrentBatchConfig: V$1, ReactCurrentOwner: K$1 };
react_production_min.Children = { map: S$1, forEach: function(a3, b3, e3) {
  S$1(a3, function() {
    b3.apply(this, arguments);
  }, e3);
}, count: function(a3) {
  var b3 = 0;
  S$1(a3, function() {
    b3++;
  });
  return b3;
}, toArray: function(a3) {
  return S$1(a3, function(a4) {
    return a4;
  }) || [];
}, only: function(a3) {
  if (!O$1(a3))
    throw Error("React.Children.only expected to receive a single React element child.");
  return a3;
} };
react_production_min.Component = E$1;
react_production_min.Fragment = p$3;
react_production_min.Profiler = r$1;
react_production_min.PureComponent = G$1;
react_production_min.StrictMode = q$2;
react_production_min.Suspense = w$2;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
react_production_min.cloneElement = function(a3, b3, e3) {
  if (null === a3 || void 0 === a3)
    throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a3 + ".");
  var d4 = C$1({}, a3.props), c7 = a3.key, k3 = a3.ref, h4 = a3._owner;
  if (null != b3) {
    void 0 !== b3.ref && (k3 = b3.ref, h4 = K$1.current);
    void 0 !== b3.key && (c7 = "" + b3.key);
    if (a3.type && a3.type.defaultProps)
      var g2 = a3.type.defaultProps;
    for (f2 in b3)
      J.call(b3, f2) && !L$1.hasOwnProperty(f2) && (d4[f2] = void 0 === b3[f2] && void 0 !== g2 ? g2[f2] : b3[f2]);
  }
  var f2 = arguments.length - 2;
  if (1 === f2)
    d4.children = e3;
  else if (1 < f2) {
    g2 = Array(f2);
    for (var m4 = 0; m4 < f2; m4++)
      g2[m4] = arguments[m4 + 2];
    d4.children = g2;
  }
  return { $$typeof: l$2, type: a3.type, key: c7, ref: k3, props: d4, _owner: h4 };
};
react_production_min.createContext = function(a3) {
  a3 = { $$typeof: u, _currentValue: a3, _currentValue2: a3, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
  a3.Provider = { $$typeof: t$1, _context: a3 };
  return a3.Consumer = a3;
};
react_production_min.createElement = M$1;
react_production_min.createFactory = function(a3) {
  var b3 = M$1.bind(null, a3);
  b3.type = a3;
  return b3;
};
react_production_min.createRef = function() {
  return { current: null };
};
react_production_min.forwardRef = function(a3) {
  return { $$typeof: v$3, render: a3 };
};
react_production_min.isValidElement = O$1;
react_production_min.lazy = function(a3) {
  return { $$typeof: y$1, _payload: { _status: -1, _result: a3 }, _init: T$1 };
};
react_production_min.memo = function(a3, b3) {
  return { $$typeof: x$1, type: a3, compare: void 0 === b3 ? null : b3 };
};
react_production_min.startTransition = function(a3) {
  var b3 = V$1.transition;
  V$1.transition = {};
  try {
    a3();
  } finally {
    V$1.transition = b3;
  }
};
react_production_min.unstable_act = function() {
  throw Error("act(...) is not supported in production builds of React.");
};
react_production_min.useCallback = function(a3, b3) {
  return U$1.current.useCallback(a3, b3);
};
react_production_min.useContext = function(a3) {
  return U$1.current.useContext(a3);
};
react_production_min.useDebugValue = function() {
};
react_production_min.useDeferredValue = function(a3) {
  return U$1.current.useDeferredValue(a3);
};
react_production_min.useEffect = function(a3, b3) {
  return U$1.current.useEffect(a3, b3);
};
react_production_min.useId = function() {
  return U$1.current.useId();
};
react_production_min.useImperativeHandle = function(a3, b3, e3) {
  return U$1.current.useImperativeHandle(a3, b3, e3);
};
react_production_min.useInsertionEffect = function(a3, b3) {
  return U$1.current.useInsertionEffect(a3, b3);
};
react_production_min.useLayoutEffect = function(a3, b3) {
  return U$1.current.useLayoutEffect(a3, b3);
};
react_production_min.useMemo = function(a3, b3) {
  return U$1.current.useMemo(a3, b3);
};
react_production_min.useReducer = function(a3, b3, e3) {
  return U$1.current.useReducer(a3, b3, e3);
};
react_production_min.useRef = function(a3) {
  return U$1.current.useRef(a3);
};
react_production_min.useState = function(a3) {
  return U$1.current.useState(a3);
};
react_production_min.useSyncExternalStore = function(a3, b3, e3) {
  return U$1.current.useSyncExternalStore(a3, b3, e3);
};
react_production_min.useTransition = function() {
  return U$1.current.useTransition();
};
react_production_min.version = "18.2.0";
{
  react.exports = react_production_min;
}
var reactExports = react.exports;
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f$1 = reactExports, k$1 = Symbol.for("react.element"), l$1 = Symbol.for("react.fragment"), m$2 = Object.prototype.hasOwnProperty, n$1 = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$2 = { key: true, ref: true, __self: true, __source: true };
function q$1(c7, a3, g2) {
  var b3, d4 = {}, e3 = null, h4 = null;
  void 0 !== g2 && (e3 = "" + g2);
  void 0 !== a3.key && (e3 = "" + a3.key);
  void 0 !== a3.ref && (h4 = a3.ref);
  for (b3 in a3)
    m$2.call(a3, b3) && !p$2.hasOwnProperty(b3) && (d4[b3] = a3[b3]);
  if (c7 && c7.defaultProps)
    for (b3 in a3 = c7.defaultProps, a3)
      void 0 === d4[b3] && (d4[b3] = a3[b3]);
  return { $$typeof: k$1, type: c7, key: e3, ref: h4, props: d4, _owner: n$1.current };
}
reactJsxRuntime_production_min.Fragment = l$1;
reactJsxRuntime_production_min.jsx = q$1;
reactJsxRuntime_production_min.jsxs = q$1;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
var jsxRuntimeExports = jsxRuntime.exports;
var client = {};
var reactDom = { exports: {} };
var reactDom_production_min = {};
var scheduler = { exports: {} };
var scheduler_production_min = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports2) {
  function f2(a3, b3) {
    var c7 = a3.length;
    a3.push(b3);
    a:
      for (; 0 < c7; ) {
        var d4 = c7 - 1 >>> 1, e3 = a3[d4];
        if (0 < g2(e3, b3))
          a3[d4] = b3, a3[c7] = e3, c7 = d4;
        else
          break a;
      }
  }
  function h4(a3) {
    return 0 === a3.length ? null : a3[0];
  }
  function k3(a3) {
    if (0 === a3.length)
      return null;
    var b3 = a3[0], c7 = a3.pop();
    if (c7 !== b3) {
      a3[0] = c7;
      a:
        for (var d4 = 0, e3 = a3.length, w3 = e3 >>> 1; d4 < w3; ) {
          var m4 = 2 * (d4 + 1) - 1, C2 = a3[m4], n2 = m4 + 1, x3 = a3[n2];
          if (0 > g2(C2, c7))
            n2 < e3 && 0 > g2(x3, C2) ? (a3[d4] = x3, a3[n2] = c7, d4 = n2) : (a3[d4] = C2, a3[m4] = c7, d4 = m4);
          else if (n2 < e3 && 0 > g2(x3, c7))
            a3[d4] = x3, a3[n2] = c7, d4 = n2;
          else
            break a;
        }
    }
    return b3;
  }
  function g2(a3, b3) {
    var c7 = a3.sortIndex - b3.sortIndex;
    return 0 !== c7 ? c7 : a3.id - b3.id;
  }
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var l2 = performance;
    exports2.unstable_now = function() {
      return l2.now();
    };
  } else {
    var p2 = Date, q3 = p2.now();
    exports2.unstable_now = function() {
      return p2.now() - q3;
    };
  }
  var r2 = [], t3 = [], u3 = 1, v2 = null, y4 = 3, z3 = false, A2 = false, B3 = false, D3 = "function" === typeof setTimeout ? setTimeout : null, E3 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
  "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
  function G3(a3) {
    for (var b3 = h4(t3); null !== b3; ) {
      if (null === b3.callback)
        k3(t3);
      else if (b3.startTime <= a3)
        k3(t3), b3.sortIndex = b3.expirationTime, f2(r2, b3);
      else
        break;
      b3 = h4(t3);
    }
  }
  function H4(a3) {
    B3 = false;
    G3(a3);
    if (!A2)
      if (null !== h4(r2))
        A2 = true, I3(J2);
      else {
        var b3 = h4(t3);
        null !== b3 && K3(H4, b3.startTime - a3);
      }
  }
  function J2(a3, b3) {
    A2 = false;
    B3 && (B3 = false, E3(L3), L3 = -1);
    z3 = true;
    var c7 = y4;
    try {
      G3(b3);
      for (v2 = h4(r2); null !== v2 && (!(v2.expirationTime > b3) || a3 && !M4()); ) {
        var d4 = v2.callback;
        if ("function" === typeof d4) {
          v2.callback = null;
          y4 = v2.priorityLevel;
          var e3 = d4(v2.expirationTime <= b3);
          b3 = exports2.unstable_now();
          "function" === typeof e3 ? v2.callback = e3 : v2 === h4(r2) && k3(r2);
          G3(b3);
        } else
          k3(r2);
        v2 = h4(r2);
      }
      if (null !== v2)
        var w3 = true;
      else {
        var m4 = h4(t3);
        null !== m4 && K3(H4, m4.startTime - b3);
        w3 = false;
      }
      return w3;
    } finally {
      v2 = null, y4 = c7, z3 = false;
    }
  }
  var N2 = false, O3 = null, L3 = -1, P2 = 5, Q3 = -1;
  function M4() {
    return exports2.unstable_now() - Q3 < P2 ? false : true;
  }
  function R3() {
    if (null !== O3) {
      var a3 = exports2.unstable_now();
      Q3 = a3;
      var b3 = true;
      try {
        b3 = O3(true, a3);
      } finally {
        b3 ? S4() : (N2 = false, O3 = null);
      }
    } else
      N2 = false;
  }
  var S4;
  if ("function" === typeof F2)
    S4 = function() {
      F2(R3);
    };
  else if ("undefined" !== typeof MessageChannel) {
    var T3 = new MessageChannel(), U2 = T3.port2;
    T3.port1.onmessage = R3;
    S4 = function() {
      U2.postMessage(null);
    };
  } else
    S4 = function() {
      D3(R3, 0);
    };
  function I3(a3) {
    O3 = a3;
    N2 || (N2 = true, S4());
  }
  function K3(a3, b3) {
    L3 = D3(function() {
      a3(exports2.unstable_now());
    }, b3);
  }
  exports2.unstable_IdlePriority = 5;
  exports2.unstable_ImmediatePriority = 1;
  exports2.unstable_LowPriority = 4;
  exports2.unstable_NormalPriority = 3;
  exports2.unstable_Profiling = null;
  exports2.unstable_UserBlockingPriority = 2;
  exports2.unstable_cancelCallback = function(a3) {
    a3.callback = null;
  };
  exports2.unstable_continueExecution = function() {
    A2 || z3 || (A2 = true, I3(J2));
  };
  exports2.unstable_forceFrameRate = function(a3) {
    0 > a3 || 125 < a3 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a3 ? Math.floor(1e3 / a3) : 5;
  };
  exports2.unstable_getCurrentPriorityLevel = function() {
    return y4;
  };
  exports2.unstable_getFirstCallbackNode = function() {
    return h4(r2);
  };
  exports2.unstable_next = function(a3) {
    switch (y4) {
      case 1:
      case 2:
      case 3:
        var b3 = 3;
        break;
      default:
        b3 = y4;
    }
    var c7 = y4;
    y4 = b3;
    try {
      return a3();
    } finally {
      y4 = c7;
    }
  };
  exports2.unstable_pauseExecution = function() {
  };
  exports2.unstable_requestPaint = function() {
  };
  exports2.unstable_runWithPriority = function(a3, b3) {
    switch (a3) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a3 = 3;
    }
    var c7 = y4;
    y4 = a3;
    try {
      return b3();
    } finally {
      y4 = c7;
    }
  };
  exports2.unstable_scheduleCallback = function(a3, b3, c7) {
    var d4 = exports2.unstable_now();
    "object" === typeof c7 && null !== c7 ? (c7 = c7.delay, c7 = "number" === typeof c7 && 0 < c7 ? d4 + c7 : d4) : c7 = d4;
    switch (a3) {
      case 1:
        var e3 = -1;
        break;
      case 2:
        e3 = 250;
        break;
      case 5:
        e3 = 1073741823;
        break;
      case 4:
        e3 = 1e4;
        break;
      default:
        e3 = 5e3;
    }
    e3 = c7 + e3;
    a3 = { id: u3++, callback: b3, priorityLevel: a3, startTime: c7, expirationTime: e3, sortIndex: -1 };
    c7 > d4 ? (a3.sortIndex = c7, f2(t3, a3), null === h4(r2) && a3 === h4(t3) && (B3 ? (E3(L3), L3 = -1) : B3 = true, K3(H4, c7 - d4))) : (a3.sortIndex = e3, f2(r2, a3), A2 || z3 || (A2 = true, I3(J2)));
    return a3;
  };
  exports2.unstable_shouldYield = M4;
  exports2.unstable_wrapCallback = function(a3) {
    var b3 = y4;
    return function() {
      var c7 = y4;
      y4 = b3;
      try {
        return a3.apply(this, arguments);
      } finally {
        y4 = c7;
      }
    };
  };
})(scheduler_production_min);
{
  scheduler.exports = scheduler_production_min;
}
var schedulerExports = scheduler.exports;
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = reactExports, ca = schedulerExports;
function p$1(a3) {
  for (var b3 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a3, c7 = 1; c7 < arguments.length; c7++)
    b3 += "&args[]=" + encodeURIComponent(arguments[c7]);
  return "Minified React error #" + a3 + "; visit " + b3 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var da = /* @__PURE__ */ new Set(), ea = {};
function fa(a3, b3) {
  ha(a3, b3);
  ha(a3 + "Capture", b3);
}
function ha(a3, b3) {
  ea[a3] = b3;
  for (a3 = 0; a3 < b3.length; a3++)
    da.add(b3[a3]);
}
var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
function oa(a3) {
  if (ja.call(ma, a3))
    return true;
  if (ja.call(la, a3))
    return false;
  if (ka.test(a3))
    return ma[a3] = true;
  la[a3] = true;
  return false;
}
function pa(a3, b3, c7, d4) {
  if (null !== c7 && 0 === c7.type)
    return false;
  switch (typeof b3) {
    case "function":
    case "symbol":
      return true;
    case "boolean":
      if (d4)
        return false;
      if (null !== c7)
        return !c7.acceptsBooleans;
      a3 = a3.toLowerCase().slice(0, 5);
      return "data-" !== a3 && "aria-" !== a3;
    default:
      return false;
  }
}
function qa(a3, b3, c7, d4) {
  if (null === b3 || "undefined" === typeof b3 || pa(a3, b3, c7, d4))
    return true;
  if (d4)
    return false;
  if (null !== c7)
    switch (c7.type) {
      case 3:
        return !b3;
      case 4:
        return false === b3;
      case 5:
        return isNaN(b3);
      case 6:
        return isNaN(b3) || 1 > b3;
    }
  return false;
}
function v$2(a3, b3, c7, d4, e3, f2, g2) {
  this.acceptsBooleans = 2 === b3 || 3 === b3 || 4 === b3;
  this.attributeName = d4;
  this.attributeNamespace = e3;
  this.mustUseProperty = c7;
  this.propertyName = a3;
  this.type = b3;
  this.sanitizeURL = f2;
  this.removeEmptyString = g2;
}
var z$1 = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a3) {
  z$1[a3] = new v$2(a3, 0, false, a3, null, false, false);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a3) {
  var b3 = a3[0];
  z$1[b3] = new v$2(b3, 1, false, a3[1], null, false, false);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a3) {
  z$1[a3] = new v$2(a3, 2, false, a3.toLowerCase(), null, false, false);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a3) {
  z$1[a3] = new v$2(a3, 2, false, a3, null, false, false);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a3) {
  z$1[a3] = new v$2(a3, 3, false, a3.toLowerCase(), null, false, false);
});
["checked", "multiple", "muted", "selected"].forEach(function(a3) {
  z$1[a3] = new v$2(a3, 3, true, a3, null, false, false);
});
["capture", "download"].forEach(function(a3) {
  z$1[a3] = new v$2(a3, 4, false, a3, null, false, false);
});
["cols", "rows", "size", "span"].forEach(function(a3) {
  z$1[a3] = new v$2(a3, 6, false, a3, null, false, false);
});
["rowSpan", "start"].forEach(function(a3) {
  z$1[a3] = new v$2(a3, 5, false, a3.toLowerCase(), null, false, false);
});
var ra = /[\-:]([a-z])/g;
function sa(a3) {
  return a3[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a3) {
  var b3 = a3.replace(
    ra,
    sa
  );
  z$1[b3] = new v$2(b3, 1, false, a3, null, false, false);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a3) {
  var b3 = a3.replace(ra, sa);
  z$1[b3] = new v$2(b3, 1, false, a3, "http://www.w3.org/1999/xlink", false, false);
});
["xml:base", "xml:lang", "xml:space"].forEach(function(a3) {
  var b3 = a3.replace(ra, sa);
  z$1[b3] = new v$2(b3, 1, false, a3, "http://www.w3.org/XML/1998/namespace", false, false);
});
["tabIndex", "crossOrigin"].forEach(function(a3) {
  z$1[a3] = new v$2(a3, 1, false, a3.toLowerCase(), null, false, false);
});
z$1.xlinkHref = new v$2("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
["src", "href", "action", "formAction"].forEach(function(a3) {
  z$1[a3] = new v$2(a3, 1, false, a3.toLowerCase(), null, true, true);
});
function ta(a3, b3, c7, d4) {
  var e3 = z$1.hasOwnProperty(b3) ? z$1[b3] : null;
  if (null !== e3 ? 0 !== e3.type : d4 || !(2 < b3.length) || "o" !== b3[0] && "O" !== b3[0] || "n" !== b3[1] && "N" !== b3[1])
    qa(b3, c7, e3, d4) && (c7 = null), d4 || null === e3 ? oa(b3) && (null === c7 ? a3.removeAttribute(b3) : a3.setAttribute(b3, "" + c7)) : e3.mustUseProperty ? a3[e3.propertyName] = null === c7 ? 3 === e3.type ? false : "" : c7 : (b3 = e3.attributeName, d4 = e3.attributeNamespace, null === c7 ? a3.removeAttribute(b3) : (e3 = e3.type, c7 = 3 === e3 || 4 === e3 && true === c7 ? "" : "" + c7, d4 ? a3.setAttributeNS(d4, b3, c7) : a3.setAttribute(b3, c7)));
}
var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
var Ia = Symbol.for("react.offscreen");
var Ja = Symbol.iterator;
function Ka(a3) {
  if (null === a3 || "object" !== typeof a3)
    return null;
  a3 = Ja && a3[Ja] || a3["@@iterator"];
  return "function" === typeof a3 ? a3 : null;
}
var A$1 = Object.assign, La;
function Ma(a3) {
  if (void 0 === La)
    try {
      throw Error();
    } catch (c7) {
      var b3 = c7.stack.trim().match(/\n( *(at )?)/);
      La = b3 && b3[1] || "";
    }
  return "\n" + La + a3;
}
var Na = false;
function Oa(a3, b3) {
  if (!a3 || Na)
    return "";
  Na = true;
  var c7 = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    if (b3)
      if (b3 = function() {
        throw Error();
      }, Object.defineProperty(b3.prototype, "props", { set: function() {
        throw Error();
      } }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b3, []);
        } catch (l2) {
          var d4 = l2;
        }
        Reflect.construct(a3, [], b3);
      } else {
        try {
          b3.call();
        } catch (l2) {
          d4 = l2;
        }
        a3.call(b3.prototype);
      }
    else {
      try {
        throw Error();
      } catch (l2) {
        d4 = l2;
      }
      a3();
    }
  } catch (l2) {
    if (l2 && d4 && "string" === typeof l2.stack) {
      for (var e3 = l2.stack.split("\n"), f2 = d4.stack.split("\n"), g2 = e3.length - 1, h4 = f2.length - 1; 1 <= g2 && 0 <= h4 && e3[g2] !== f2[h4]; )
        h4--;
      for (; 1 <= g2 && 0 <= h4; g2--, h4--)
        if (e3[g2] !== f2[h4]) {
          if (1 !== g2 || 1 !== h4) {
            do
              if (g2--, h4--, 0 > h4 || e3[g2] !== f2[h4]) {
                var k3 = "\n" + e3[g2].replace(" at new ", " at ");
                a3.displayName && k3.includes("<anonymous>") && (k3 = k3.replace("<anonymous>", a3.displayName));
                return k3;
              }
            while (1 <= g2 && 0 <= h4);
          }
          break;
        }
    }
  } finally {
    Na = false, Error.prepareStackTrace = c7;
  }
  return (a3 = a3 ? a3.displayName || a3.name : "") ? Ma(a3) : "";
}
function Pa(a3) {
  switch (a3.tag) {
    case 5:
      return Ma(a3.type);
    case 16:
      return Ma("Lazy");
    case 13:
      return Ma("Suspense");
    case 19:
      return Ma("SuspenseList");
    case 0:
    case 2:
    case 15:
      return a3 = Oa(a3.type, false), a3;
    case 11:
      return a3 = Oa(a3.type.render, false), a3;
    case 1:
      return a3 = Oa(a3.type, true), a3;
    default:
      return "";
  }
}
function Qa(a3) {
  if (null == a3)
    return null;
  if ("function" === typeof a3)
    return a3.displayName || a3.name || null;
  if ("string" === typeof a3)
    return a3;
  switch (a3) {
    case ya:
      return "Fragment";
    case wa:
      return "Portal";
    case Aa:
      return "Profiler";
    case za:
      return "StrictMode";
    case Ea:
      return "Suspense";
    case Fa:
      return "SuspenseList";
  }
  if ("object" === typeof a3)
    switch (a3.$$typeof) {
      case Ca:
        return (a3.displayName || "Context") + ".Consumer";
      case Ba:
        return (a3._context.displayName || "Context") + ".Provider";
      case Da:
        var b3 = a3.render;
        a3 = a3.displayName;
        a3 || (a3 = b3.displayName || b3.name || "", a3 = "" !== a3 ? "ForwardRef(" + a3 + ")" : "ForwardRef");
        return a3;
      case Ga:
        return b3 = a3.displayName || null, null !== b3 ? b3 : Qa(a3.type) || "Memo";
      case Ha:
        b3 = a3._payload;
        a3 = a3._init;
        try {
          return Qa(a3(b3));
        } catch (c7) {
        }
    }
  return null;
}
function Ra(a3) {
  var b3 = a3.type;
  switch (a3.tag) {
    case 24:
      return "Cache";
    case 9:
      return (b3.displayName || "Context") + ".Consumer";
    case 10:
      return (b3._context.displayName || "Context") + ".Provider";
    case 18:
      return "DehydratedFragment";
    case 11:
      return a3 = b3.render, a3 = a3.displayName || a3.name || "", b3.displayName || ("" !== a3 ? "ForwardRef(" + a3 + ")" : "ForwardRef");
    case 7:
      return "Fragment";
    case 5:
      return b3;
    case 4:
      return "Portal";
    case 3:
      return "Root";
    case 6:
      return "Text";
    case 16:
      return Qa(b3);
    case 8:
      return b3 === za ? "StrictMode" : "Mode";
    case 22:
      return "Offscreen";
    case 12:
      return "Profiler";
    case 21:
      return "Scope";
    case 13:
      return "Suspense";
    case 19:
      return "SuspenseList";
    case 25:
      return "TracingMarker";
    case 1:
    case 0:
    case 17:
    case 2:
    case 14:
    case 15:
      if ("function" === typeof b3)
        return b3.displayName || b3.name || null;
      if ("string" === typeof b3)
        return b3;
  }
  return null;
}
function Sa(a3) {
  switch (typeof a3) {
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return a3;
    case "object":
      return a3;
    default:
      return "";
  }
}
function Ta(a3) {
  var b3 = a3.type;
  return (a3 = a3.nodeName) && "input" === a3.toLowerCase() && ("checkbox" === b3 || "radio" === b3);
}
function Ua(a3) {
  var b3 = Ta(a3) ? "checked" : "value", c7 = Object.getOwnPropertyDescriptor(a3.constructor.prototype, b3), d4 = "" + a3[b3];
  if (!a3.hasOwnProperty(b3) && "undefined" !== typeof c7 && "function" === typeof c7.get && "function" === typeof c7.set) {
    var e3 = c7.get, f2 = c7.set;
    Object.defineProperty(a3, b3, { configurable: true, get: function() {
      return e3.call(this);
    }, set: function(a4) {
      d4 = "" + a4;
      f2.call(this, a4);
    } });
    Object.defineProperty(a3, b3, { enumerable: c7.enumerable });
    return { getValue: function() {
      return d4;
    }, setValue: function(a4) {
      d4 = "" + a4;
    }, stopTracking: function() {
      a3._valueTracker = null;
      delete a3[b3];
    } };
  }
}
function Va(a3) {
  a3._valueTracker || (a3._valueTracker = Ua(a3));
}
function Wa(a3) {
  if (!a3)
    return false;
  var b3 = a3._valueTracker;
  if (!b3)
    return true;
  var c7 = b3.getValue();
  var d4 = "";
  a3 && (d4 = Ta(a3) ? a3.checked ? "true" : "false" : a3.value);
  a3 = d4;
  return a3 !== c7 ? (b3.setValue(a3), true) : false;
}
function Xa(a3) {
  a3 = a3 || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a3)
    return null;
  try {
    return a3.activeElement || a3.body;
  } catch (b3) {
    return a3.body;
  }
}
function Ya(a3, b3) {
  var c7 = b3.checked;
  return A$1({}, b3, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c7 ? c7 : a3._wrapperState.initialChecked });
}
function Za(a3, b3) {
  var c7 = null == b3.defaultValue ? "" : b3.defaultValue, d4 = null != b3.checked ? b3.checked : b3.defaultChecked;
  c7 = Sa(null != b3.value ? b3.value : c7);
  a3._wrapperState = { initialChecked: d4, initialValue: c7, controlled: "checkbox" === b3.type || "radio" === b3.type ? null != b3.checked : null != b3.value };
}
function ab(a3, b3) {
  b3 = b3.checked;
  null != b3 && ta(a3, "checked", b3, false);
}
function bb(a3, b3) {
  ab(a3, b3);
  var c7 = Sa(b3.value), d4 = b3.type;
  if (null != c7)
    if ("number" === d4) {
      if (0 === c7 && "" === a3.value || a3.value != c7)
        a3.value = "" + c7;
    } else
      a3.value !== "" + c7 && (a3.value = "" + c7);
  else if ("submit" === d4 || "reset" === d4) {
    a3.removeAttribute("value");
    return;
  }
  b3.hasOwnProperty("value") ? cb(a3, b3.type, c7) : b3.hasOwnProperty("defaultValue") && cb(a3, b3.type, Sa(b3.defaultValue));
  null == b3.checked && null != b3.defaultChecked && (a3.defaultChecked = !!b3.defaultChecked);
}
function db(a3, b3, c7) {
  if (b3.hasOwnProperty("value") || b3.hasOwnProperty("defaultValue")) {
    var d4 = b3.type;
    if (!("submit" !== d4 && "reset" !== d4 || void 0 !== b3.value && null !== b3.value))
      return;
    b3 = "" + a3._wrapperState.initialValue;
    c7 || b3 === a3.value || (a3.value = b3);
    a3.defaultValue = b3;
  }
  c7 = a3.name;
  "" !== c7 && (a3.name = "");
  a3.defaultChecked = !!a3._wrapperState.initialChecked;
  "" !== c7 && (a3.name = c7);
}
function cb(a3, b3, c7) {
  if ("number" !== b3 || Xa(a3.ownerDocument) !== a3)
    null == c7 ? a3.defaultValue = "" + a3._wrapperState.initialValue : a3.defaultValue !== "" + c7 && (a3.defaultValue = "" + c7);
}
var eb = Array.isArray;
function fb(a3, b3, c7, d4) {
  a3 = a3.options;
  if (b3) {
    b3 = {};
    for (var e3 = 0; e3 < c7.length; e3++)
      b3["$" + c7[e3]] = true;
    for (c7 = 0; c7 < a3.length; c7++)
      e3 = b3.hasOwnProperty("$" + a3[c7].value), a3[c7].selected !== e3 && (a3[c7].selected = e3), e3 && d4 && (a3[c7].defaultSelected = true);
  } else {
    c7 = "" + Sa(c7);
    b3 = null;
    for (e3 = 0; e3 < a3.length; e3++) {
      if (a3[e3].value === c7) {
        a3[e3].selected = true;
        d4 && (a3[e3].defaultSelected = true);
        return;
      }
      null !== b3 || a3[e3].disabled || (b3 = a3[e3]);
    }
    null !== b3 && (b3.selected = true);
  }
}
function gb(a3, b3) {
  if (null != b3.dangerouslySetInnerHTML)
    throw Error(p$1(91));
  return A$1({}, b3, { value: void 0, defaultValue: void 0, children: "" + a3._wrapperState.initialValue });
}
function hb(a3, b3) {
  var c7 = b3.value;
  if (null == c7) {
    c7 = b3.children;
    b3 = b3.defaultValue;
    if (null != c7) {
      if (null != b3)
        throw Error(p$1(92));
      if (eb(c7)) {
        if (1 < c7.length)
          throw Error(p$1(93));
        c7 = c7[0];
      }
      b3 = c7;
    }
    null == b3 && (b3 = "");
    c7 = b3;
  }
  a3._wrapperState = { initialValue: Sa(c7) };
}
function ib(a3, b3) {
  var c7 = Sa(b3.value), d4 = Sa(b3.defaultValue);
  null != c7 && (c7 = "" + c7, c7 !== a3.value && (a3.value = c7), null == b3.defaultValue && a3.defaultValue !== c7 && (a3.defaultValue = c7));
  null != d4 && (a3.defaultValue = "" + d4);
}
function jb(a3) {
  var b3 = a3.textContent;
  b3 === a3._wrapperState.initialValue && "" !== b3 && null !== b3 && (a3.value = b3);
}
function kb(a3) {
  switch (a3) {
    case "svg":
      return "http://www.w3.org/2000/svg";
    case "math":
      return "http://www.w3.org/1998/Math/MathML";
    default:
      return "http://www.w3.org/1999/xhtml";
  }
}
function lb(a3, b3) {
  return null == a3 || "http://www.w3.org/1999/xhtml" === a3 ? kb(b3) : "http://www.w3.org/2000/svg" === a3 && "foreignObject" === b3 ? "http://www.w3.org/1999/xhtml" : a3;
}
var mb, nb = function(a3) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b3, c7, d4, e3) {
    MSApp.execUnsafeLocalFunction(function() {
      return a3(b3, c7, d4, e3);
    });
  } : a3;
}(function(a3, b3) {
  if ("http://www.w3.org/2000/svg" !== a3.namespaceURI || "innerHTML" in a3)
    a3.innerHTML = b3;
  else {
    mb = mb || document.createElement("div");
    mb.innerHTML = "<svg>" + b3.valueOf().toString() + "</svg>";
    for (b3 = mb.firstChild; a3.firstChild; )
      a3.removeChild(a3.firstChild);
    for (; b3.firstChild; )
      a3.appendChild(b3.firstChild);
  }
});
function ob(a3, b3) {
  if (b3) {
    var c7 = a3.firstChild;
    if (c7 && c7 === a3.lastChild && 3 === c7.nodeType) {
      c7.nodeValue = b3;
      return;
    }
  }
  a3.textContent = b3;
}
var pb = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
}, qb = ["Webkit", "ms", "Moz", "O"];
Object.keys(pb).forEach(function(a3) {
  qb.forEach(function(b3) {
    b3 = b3 + a3.charAt(0).toUpperCase() + a3.substring(1);
    pb[b3] = pb[a3];
  });
});
function rb(a3, b3, c7) {
  return null == b3 || "boolean" === typeof b3 || "" === b3 ? "" : c7 || "number" !== typeof b3 || 0 === b3 || pb.hasOwnProperty(a3) && pb[a3] ? ("" + b3).trim() : b3 + "px";
}
function sb(a3, b3) {
  a3 = a3.style;
  for (var c7 in b3)
    if (b3.hasOwnProperty(c7)) {
      var d4 = 0 === c7.indexOf("--"), e3 = rb(c7, b3[c7], d4);
      "float" === c7 && (c7 = "cssFloat");
      d4 ? a3.setProperty(c7, e3) : a3[c7] = e3;
    }
}
var tb = A$1({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
function ub(a3, b3) {
  if (b3) {
    if (tb[a3] && (null != b3.children || null != b3.dangerouslySetInnerHTML))
      throw Error(p$1(137, a3));
    if (null != b3.dangerouslySetInnerHTML) {
      if (null != b3.children)
        throw Error(p$1(60));
      if ("object" !== typeof b3.dangerouslySetInnerHTML || !("__html" in b3.dangerouslySetInnerHTML))
        throw Error(p$1(61));
    }
    if (null != b3.style && "object" !== typeof b3.style)
      throw Error(p$1(62));
  }
}
function vb(a3, b3) {
  if (-1 === a3.indexOf("-"))
    return "string" === typeof b3.is;
  switch (a3) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
var wb = null;
function xb(a3) {
  a3 = a3.target || a3.srcElement || window;
  a3.correspondingUseElement && (a3 = a3.correspondingUseElement);
  return 3 === a3.nodeType ? a3.parentNode : a3;
}
var yb = null, zb = null, Ab = null;
function Bb(a3) {
  if (a3 = Cb(a3)) {
    if ("function" !== typeof yb)
      throw Error(p$1(280));
    var b3 = a3.stateNode;
    b3 && (b3 = Db(b3), yb(a3.stateNode, a3.type, b3));
  }
}
function Eb(a3) {
  zb ? Ab ? Ab.push(a3) : Ab = [a3] : zb = a3;
}
function Fb() {
  if (zb) {
    var a3 = zb, b3 = Ab;
    Ab = zb = null;
    Bb(a3);
    if (b3)
      for (a3 = 0; a3 < b3.length; a3++)
        Bb(b3[a3]);
  }
}
function Gb(a3, b3) {
  return a3(b3);
}
function Hb() {
}
var Ib = false;
function Jb(a3, b3, c7) {
  if (Ib)
    return a3(b3, c7);
  Ib = true;
  try {
    return Gb(a3, b3, c7);
  } finally {
    if (Ib = false, null !== zb || null !== Ab)
      Hb(), Fb();
  }
}
function Kb(a3, b3) {
  var c7 = a3.stateNode;
  if (null === c7)
    return null;
  var d4 = Db(c7);
  if (null === d4)
    return null;
  c7 = d4[b3];
  a:
    switch (b3) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (d4 = !d4.disabled) || (a3 = a3.type, d4 = !("button" === a3 || "input" === a3 || "select" === a3 || "textarea" === a3));
        a3 = !d4;
        break a;
      default:
        a3 = false;
    }
  if (a3)
    return null;
  if (c7 && "function" !== typeof c7)
    throw Error(p$1(231, b3, typeof c7));
  return c7;
}
var Lb = false;
if (ia)
  try {
    var Mb = {};
    Object.defineProperty(Mb, "passive", { get: function() {
      Lb = true;
    } });
    window.addEventListener("test", Mb, Mb);
    window.removeEventListener("test", Mb, Mb);
  } catch (a3) {
    Lb = false;
  }
function Nb(a3, b3, c7, d4, e3, f2, g2, h4, k3) {
  var l2 = Array.prototype.slice.call(arguments, 3);
  try {
    b3.apply(c7, l2);
  } catch (m4) {
    this.onError(m4);
  }
}
var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a3) {
  Ob = true;
  Pb = a3;
} };
function Tb(a3, b3, c7, d4, e3, f2, g2, h4, k3) {
  Ob = false;
  Pb = null;
  Nb.apply(Sb, arguments);
}
function Ub(a3, b3, c7, d4, e3, f2, g2, h4, k3) {
  Tb.apply(this, arguments);
  if (Ob) {
    if (Ob) {
      var l2 = Pb;
      Ob = false;
      Pb = null;
    } else
      throw Error(p$1(198));
    Qb || (Qb = true, Rb = l2);
  }
}
function Vb(a3) {
  var b3 = a3, c7 = a3;
  if (a3.alternate)
    for (; b3.return; )
      b3 = b3.return;
  else {
    a3 = b3;
    do
      b3 = a3, 0 !== (b3.flags & 4098) && (c7 = b3.return), a3 = b3.return;
    while (a3);
  }
  return 3 === b3.tag ? c7 : null;
}
function Wb(a3) {
  if (13 === a3.tag) {
    var b3 = a3.memoizedState;
    null === b3 && (a3 = a3.alternate, null !== a3 && (b3 = a3.memoizedState));
    if (null !== b3)
      return b3.dehydrated;
  }
  return null;
}
function Xb(a3) {
  if (Vb(a3) !== a3)
    throw Error(p$1(188));
}
function Yb(a3) {
  var b3 = a3.alternate;
  if (!b3) {
    b3 = Vb(a3);
    if (null === b3)
      throw Error(p$1(188));
    return b3 !== a3 ? null : a3;
  }
  for (var c7 = a3, d4 = b3; ; ) {
    var e3 = c7.return;
    if (null === e3)
      break;
    var f2 = e3.alternate;
    if (null === f2) {
      d4 = e3.return;
      if (null !== d4) {
        c7 = d4;
        continue;
      }
      break;
    }
    if (e3.child === f2.child) {
      for (f2 = e3.child; f2; ) {
        if (f2 === c7)
          return Xb(e3), a3;
        if (f2 === d4)
          return Xb(e3), b3;
        f2 = f2.sibling;
      }
      throw Error(p$1(188));
    }
    if (c7.return !== d4.return)
      c7 = e3, d4 = f2;
    else {
      for (var g2 = false, h4 = e3.child; h4; ) {
        if (h4 === c7) {
          g2 = true;
          c7 = e3;
          d4 = f2;
          break;
        }
        if (h4 === d4) {
          g2 = true;
          d4 = e3;
          c7 = f2;
          break;
        }
        h4 = h4.sibling;
      }
      if (!g2) {
        for (h4 = f2.child; h4; ) {
          if (h4 === c7) {
            g2 = true;
            c7 = f2;
            d4 = e3;
            break;
          }
          if (h4 === d4) {
            g2 = true;
            d4 = f2;
            c7 = e3;
            break;
          }
          h4 = h4.sibling;
        }
        if (!g2)
          throw Error(p$1(189));
      }
    }
    if (c7.alternate !== d4)
      throw Error(p$1(190));
  }
  if (3 !== c7.tag)
    throw Error(p$1(188));
  return c7.stateNode.current === c7 ? a3 : b3;
}
function Zb(a3) {
  a3 = Yb(a3);
  return null !== a3 ? $b(a3) : null;
}
function $b(a3) {
  if (5 === a3.tag || 6 === a3.tag)
    return a3;
  for (a3 = a3.child; null !== a3; ) {
    var b3 = $b(a3);
    if (null !== b3)
      return b3;
    a3 = a3.sibling;
  }
  return null;
}
var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
function mc(a3) {
  if (lc && "function" === typeof lc.onCommitFiberRoot)
    try {
      lc.onCommitFiberRoot(kc, a3, void 0, 128 === (a3.current.flags & 128));
    } catch (b3) {
    }
}
var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
function nc(a3) {
  a3 >>>= 0;
  return 0 === a3 ? 32 : 31 - (pc(a3) / qc | 0) | 0;
}
var rc = 64, sc = 4194304;
function tc(a3) {
  switch (a3 & -a3) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return a3 & 4194240;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return a3 & 130023424;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 1073741824;
    default:
      return a3;
  }
}
function uc(a3, b3) {
  var c7 = a3.pendingLanes;
  if (0 === c7)
    return 0;
  var d4 = 0, e3 = a3.suspendedLanes, f2 = a3.pingedLanes, g2 = c7 & 268435455;
  if (0 !== g2) {
    var h4 = g2 & ~e3;
    0 !== h4 ? d4 = tc(h4) : (f2 &= g2, 0 !== f2 && (d4 = tc(f2)));
  } else
    g2 = c7 & ~e3, 0 !== g2 ? d4 = tc(g2) : 0 !== f2 && (d4 = tc(f2));
  if (0 === d4)
    return 0;
  if (0 !== b3 && b3 !== d4 && 0 === (b3 & e3) && (e3 = d4 & -d4, f2 = b3 & -b3, e3 >= f2 || 16 === e3 && 0 !== (f2 & 4194240)))
    return b3;
  0 !== (d4 & 4) && (d4 |= c7 & 16);
  b3 = a3.entangledLanes;
  if (0 !== b3)
    for (a3 = a3.entanglements, b3 &= d4; 0 < b3; )
      c7 = 31 - oc(b3), e3 = 1 << c7, d4 |= a3[c7], b3 &= ~e3;
  return d4;
}
function vc(a3, b3) {
  switch (a3) {
    case 1:
    case 2:
    case 4:
      return b3 + 250;
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return b3 + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
      return -1;
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function wc(a3, b3) {
  for (var c7 = a3.suspendedLanes, d4 = a3.pingedLanes, e3 = a3.expirationTimes, f2 = a3.pendingLanes; 0 < f2; ) {
    var g2 = 31 - oc(f2), h4 = 1 << g2, k3 = e3[g2];
    if (-1 === k3) {
      if (0 === (h4 & c7) || 0 !== (h4 & d4))
        e3[g2] = vc(h4, b3);
    } else
      k3 <= b3 && (a3.expiredLanes |= h4);
    f2 &= ~h4;
  }
}
function xc(a3) {
  a3 = a3.pendingLanes & -1073741825;
  return 0 !== a3 ? a3 : a3 & 1073741824 ? 1073741824 : 0;
}
function yc() {
  var a3 = rc;
  rc <<= 1;
  0 === (rc & 4194240) && (rc = 64);
  return a3;
}
function zc(a3) {
  for (var b3 = [], c7 = 0; 31 > c7; c7++)
    b3.push(a3);
  return b3;
}
function Ac(a3, b3, c7) {
  a3.pendingLanes |= b3;
  536870912 !== b3 && (a3.suspendedLanes = 0, a3.pingedLanes = 0);
  a3 = a3.eventTimes;
  b3 = 31 - oc(b3);
  a3[b3] = c7;
}
function Bc(a3, b3) {
  var c7 = a3.pendingLanes & ~b3;
  a3.pendingLanes = b3;
  a3.suspendedLanes = 0;
  a3.pingedLanes = 0;
  a3.expiredLanes &= b3;
  a3.mutableReadLanes &= b3;
  a3.entangledLanes &= b3;
  b3 = a3.entanglements;
  var d4 = a3.eventTimes;
  for (a3 = a3.expirationTimes; 0 < c7; ) {
    var e3 = 31 - oc(c7), f2 = 1 << e3;
    b3[e3] = 0;
    d4[e3] = -1;
    a3[e3] = -1;
    c7 &= ~f2;
  }
}
function Cc(a3, b3) {
  var c7 = a3.entangledLanes |= b3;
  for (a3 = a3.entanglements; c7; ) {
    var d4 = 31 - oc(c7), e3 = 1 << d4;
    e3 & b3 | a3[d4] & b3 && (a3[d4] |= b3);
    c7 &= ~e3;
  }
}
var C = 0;
function Dc(a3) {
  a3 &= -a3;
  return 1 < a3 ? 4 < a3 ? 0 !== (a3 & 268435455) ? 16 : 536870912 : 4 : 1;
}
var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function Sc(a3, b3) {
  switch (a3) {
    case "focusin":
    case "focusout":
      Lc = null;
      break;
    case "dragenter":
    case "dragleave":
      Mc = null;
      break;
    case "mouseover":
    case "mouseout":
      Nc = null;
      break;
    case "pointerover":
    case "pointerout":
      Oc.delete(b3.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      Pc.delete(b3.pointerId);
  }
}
function Tc(a3, b3, c7, d4, e3, f2) {
  if (null === a3 || a3.nativeEvent !== f2)
    return a3 = { blockedOn: b3, domEventName: c7, eventSystemFlags: d4, nativeEvent: f2, targetContainers: [e3] }, null !== b3 && (b3 = Cb(b3), null !== b3 && Fc(b3)), a3;
  a3.eventSystemFlags |= d4;
  b3 = a3.targetContainers;
  null !== e3 && -1 === b3.indexOf(e3) && b3.push(e3);
  return a3;
}
function Uc(a3, b3, c7, d4, e3) {
  switch (b3) {
    case "focusin":
      return Lc = Tc(Lc, a3, b3, c7, d4, e3), true;
    case "dragenter":
      return Mc = Tc(Mc, a3, b3, c7, d4, e3), true;
    case "mouseover":
      return Nc = Tc(Nc, a3, b3, c7, d4, e3), true;
    case "pointerover":
      var f2 = e3.pointerId;
      Oc.set(f2, Tc(Oc.get(f2) || null, a3, b3, c7, d4, e3));
      return true;
    case "gotpointercapture":
      return f2 = e3.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a3, b3, c7, d4, e3)), true;
  }
  return false;
}
function Vc(a3) {
  var b3 = Wc(a3.target);
  if (null !== b3) {
    var c7 = Vb(b3);
    if (null !== c7) {
      if (b3 = c7.tag, 13 === b3) {
        if (b3 = Wb(c7), null !== b3) {
          a3.blockedOn = b3;
          Ic(a3.priority, function() {
            Gc(c7);
          });
          return;
        }
      } else if (3 === b3 && c7.stateNode.current.memoizedState.isDehydrated) {
        a3.blockedOn = 3 === c7.tag ? c7.stateNode.containerInfo : null;
        return;
      }
    }
  }
  a3.blockedOn = null;
}
function Xc(a3) {
  if (null !== a3.blockedOn)
    return false;
  for (var b3 = a3.targetContainers; 0 < b3.length; ) {
    var c7 = Yc(a3.domEventName, a3.eventSystemFlags, b3[0], a3.nativeEvent);
    if (null === c7) {
      c7 = a3.nativeEvent;
      var d4 = new c7.constructor(c7.type, c7);
      wb = d4;
      c7.target.dispatchEvent(d4);
      wb = null;
    } else
      return b3 = Cb(c7), null !== b3 && Fc(b3), a3.blockedOn = c7, false;
    b3.shift();
  }
  return true;
}
function Zc(a3, b3, c7) {
  Xc(a3) && c7.delete(b3);
}
function $c() {
  Jc = false;
  null !== Lc && Xc(Lc) && (Lc = null);
  null !== Mc && Xc(Mc) && (Mc = null);
  null !== Nc && Xc(Nc) && (Nc = null);
  Oc.forEach(Zc);
  Pc.forEach(Zc);
}
function ad(a3, b3) {
  a3.blockedOn === b3 && (a3.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
}
function bd(a3) {
  function b3(b4) {
    return ad(b4, a3);
  }
  if (0 < Kc.length) {
    ad(Kc[0], a3);
    for (var c7 = 1; c7 < Kc.length; c7++) {
      var d4 = Kc[c7];
      d4.blockedOn === a3 && (d4.blockedOn = null);
    }
  }
  null !== Lc && ad(Lc, a3);
  null !== Mc && ad(Mc, a3);
  null !== Nc && ad(Nc, a3);
  Oc.forEach(b3);
  Pc.forEach(b3);
  for (c7 = 0; c7 < Qc.length; c7++)
    d4 = Qc[c7], d4.blockedOn === a3 && (d4.blockedOn = null);
  for (; 0 < Qc.length && (c7 = Qc[0], null === c7.blockedOn); )
    Vc(c7), null === c7.blockedOn && Qc.shift();
}
var cd = ua.ReactCurrentBatchConfig, dd$1 = true;
function ed(a3, b3, c7, d4) {
  var e3 = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 1, fd(a3, b3, c7, d4);
  } finally {
    C = e3, cd.transition = f2;
  }
}
function gd(a3, b3, c7, d4) {
  var e3 = C, f2 = cd.transition;
  cd.transition = null;
  try {
    C = 4, fd(a3, b3, c7, d4);
  } finally {
    C = e3, cd.transition = f2;
  }
}
function fd(a3, b3, c7, d4) {
  if (dd$1) {
    var e3 = Yc(a3, b3, c7, d4);
    if (null === e3)
      hd(a3, b3, d4, id, c7), Sc(a3, d4);
    else if (Uc(e3, a3, b3, c7, d4))
      d4.stopPropagation();
    else if (Sc(a3, d4), b3 & 4 && -1 < Rc.indexOf(a3)) {
      for (; null !== e3; ) {
        var f2 = Cb(e3);
        null !== f2 && Ec(f2);
        f2 = Yc(a3, b3, c7, d4);
        null === f2 && hd(a3, b3, d4, id, c7);
        if (f2 === e3)
          break;
        e3 = f2;
      }
      null !== e3 && d4.stopPropagation();
    } else
      hd(a3, b3, d4, null, c7);
  }
}
var id = null;
function Yc(a3, b3, c7, d4) {
  id = null;
  a3 = xb(d4);
  a3 = Wc(a3);
  if (null !== a3)
    if (b3 = Vb(a3), null === b3)
      a3 = null;
    else if (c7 = b3.tag, 13 === c7) {
      a3 = Wb(b3);
      if (null !== a3)
        return a3;
      a3 = null;
    } else if (3 === c7) {
      if (b3.stateNode.current.memoizedState.isDehydrated)
        return 3 === b3.tag ? b3.stateNode.containerInfo : null;
      a3 = null;
    } else
      b3 !== a3 && (a3 = null);
  id = a3;
  return null;
}
function jd(a3) {
  switch (a3) {
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 1;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "toggle":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 4;
    case "message":
      switch (ec()) {
        case fc:
          return 1;
        case gc:
          return 4;
        case hc:
        case ic:
          return 16;
        case jc:
          return 536870912;
        default:
          return 16;
      }
    default:
      return 16;
  }
}
var kd = null, ld = null, md = null;
function nd() {
  if (md)
    return md;
  var a3, b3 = ld, c7 = b3.length, d4, e3 = "value" in kd ? kd.value : kd.textContent, f2 = e3.length;
  for (a3 = 0; a3 < c7 && b3[a3] === e3[a3]; a3++)
    ;
  var g2 = c7 - a3;
  for (d4 = 1; d4 <= g2 && b3[c7 - d4] === e3[f2 - d4]; d4++)
    ;
  return md = e3.slice(a3, 1 < d4 ? 1 - d4 : void 0);
}
function od(a3) {
  var b3 = a3.keyCode;
  "charCode" in a3 ? (a3 = a3.charCode, 0 === a3 && 13 === b3 && (a3 = 13)) : a3 = b3;
  10 === a3 && (a3 = 13);
  return 32 <= a3 || 13 === a3 ? a3 : 0;
}
function pd() {
  return true;
}
function qd() {
  return false;
}
function rd(a3) {
  function b3(b4, d4, e3, f2, g2) {
    this._reactName = b4;
    this._targetInst = e3;
    this.type = d4;
    this.nativeEvent = f2;
    this.target = g2;
    this.currentTarget = null;
    for (var c7 in a3)
      a3.hasOwnProperty(c7) && (b4 = a3[c7], this[c7] = b4 ? b4(f2) : f2[c7]);
    this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }
  A$1(b3.prototype, { preventDefault: function() {
    this.defaultPrevented = true;
    var a4 = this.nativeEvent;
    a4 && (a4.preventDefault ? a4.preventDefault() : "unknown" !== typeof a4.returnValue && (a4.returnValue = false), this.isDefaultPrevented = pd);
  }, stopPropagation: function() {
    var a4 = this.nativeEvent;
    a4 && (a4.stopPropagation ? a4.stopPropagation() : "unknown" !== typeof a4.cancelBubble && (a4.cancelBubble = true), this.isPropagationStopped = pd);
  }, persist: function() {
  }, isPersistent: pd });
  return b3;
}
var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a3) {
  return a3.timeStamp || Date.now();
}, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A$1({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A$1({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a3) {
  return void 0 === a3.relatedTarget ? a3.fromElement === a3.srcElement ? a3.toElement : a3.fromElement : a3.relatedTarget;
}, movementX: function(a3) {
  if ("movementX" in a3)
    return a3.movementX;
  a3 !== yd && (yd && "mousemove" === a3.type ? (wd = a3.screenX - yd.screenX, xd = a3.screenY - yd.screenY) : xd = wd = 0, yd = a3);
  return wd;
}, movementY: function(a3) {
  return "movementY" in a3 ? a3.movementY : xd;
} }), Bd = rd(Ad), Cd = A$1({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A$1({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A$1({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A$1({}, sd, { clipboardData: function(a3) {
  return "clipboardData" in a3 ? a3.clipboardData : window.clipboardData;
} }), Jd = rd(Id), Kd = A$1({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
}, Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
}, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
function Pd(a3) {
  var b3 = this.nativeEvent;
  return b3.getModifierState ? b3.getModifierState(a3) : (a3 = Od[a3]) ? !!b3[a3] : false;
}
function zd() {
  return Pd;
}
var Qd = A$1({}, ud, { key: function(a3) {
  if (a3.key) {
    var b3 = Md[a3.key] || a3.key;
    if ("Unidentified" !== b3)
      return b3;
  }
  return "keypress" === a3.type ? (a3 = od(a3), 13 === a3 ? "Enter" : String.fromCharCode(a3)) : "keydown" === a3.type || "keyup" === a3.type ? Nd[a3.keyCode] || "Unidentified" : "";
}, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a3) {
  return "keypress" === a3.type ? od(a3) : 0;
}, keyCode: function(a3) {
  return "keydown" === a3.type || "keyup" === a3.type ? a3.keyCode : 0;
}, which: function(a3) {
  return "keypress" === a3.type ? od(a3) : "keydown" === a3.type || "keyup" === a3.type ? a3.keyCode : 0;
} }), Rd = rd(Qd), Sd = A$1({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A$1({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A$1({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A$1({}, Ad, {
  deltaX: function(a3) {
    return "deltaX" in a3 ? a3.deltaX : "wheelDeltaX" in a3 ? -a3.wheelDeltaX : 0;
  },
  deltaY: function(a3) {
    return "deltaY" in a3 ? a3.deltaY : "wheelDeltaY" in a3 ? -a3.wheelDeltaY : "wheelDelta" in a3 ? -a3.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
ia && "documentMode" in document && (be = document.documentMode);
var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
function ge(a3, b3) {
  switch (a3) {
    case "keyup":
      return -1 !== $d.indexOf(b3.keyCode);
    case "keydown":
      return 229 !== b3.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function he(a3) {
  a3 = a3.detail;
  return "object" === typeof a3 && "data" in a3 ? a3.data : null;
}
var ie = false;
function je(a3, b3) {
  switch (a3) {
    case "compositionend":
      return he(b3);
    case "keypress":
      if (32 !== b3.which)
        return null;
      fe = true;
      return ee;
    case "textInput":
      return a3 = b3.data, a3 === ee && fe ? null : a3;
    default:
      return null;
  }
}
function ke(a3, b3) {
  if (ie)
    return "compositionend" === a3 || !ae && ge(a3, b3) ? (a3 = nd(), md = ld = kd = null, ie = false, a3) : null;
  switch (a3) {
    case "paste":
      return null;
    case "keypress":
      if (!(b3.ctrlKey || b3.altKey || b3.metaKey) || b3.ctrlKey && b3.altKey) {
        if (b3.char && 1 < b3.char.length)
          return b3.char;
        if (b3.which)
          return String.fromCharCode(b3.which);
      }
      return null;
    case "compositionend":
      return de && "ko" !== b3.locale ? null : b3.data;
    default:
      return null;
  }
}
var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
function me(a3) {
  var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
  return "input" === b3 ? !!le[a3.type] : "textarea" === b3 ? true : false;
}
function ne(a3, b3, c7, d4) {
  Eb(d4);
  b3 = oe(b3, "onChange");
  0 < b3.length && (c7 = new td("onChange", "change", null, c7, d4), a3.push({ event: c7, listeners: b3 }));
}
var pe = null, qe = null;
function re(a3) {
  se(a3, 0);
}
function te(a3) {
  var b3 = ue(a3);
  if (Wa(b3))
    return a3;
}
function ve(a3, b3) {
  if ("change" === a3)
    return b3;
}
var we = false;
if (ia) {
  var xe;
  if (ia) {
    var ye = "oninput" in document;
    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }
    xe = ye;
  } else
    xe = false;
  we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}
function Be(a3) {
  if ("value" === a3.propertyName && te(qe)) {
    var b3 = [];
    ne(b3, qe, a3, xb(a3));
    Jb(re, b3);
  }
}
function Ce(a3, b3, c7) {
  "focusin" === a3 ? (Ae(), pe = b3, qe = c7, pe.attachEvent("onpropertychange", Be)) : "focusout" === a3 && Ae();
}
function De(a3) {
  if ("selectionchange" === a3 || "keyup" === a3 || "keydown" === a3)
    return te(qe);
}
function Ee(a3, b3) {
  if ("click" === a3)
    return te(b3);
}
function Fe(a3, b3) {
  if ("input" === a3 || "change" === a3)
    return te(b3);
}
function Ge(a3, b3) {
  return a3 === b3 && (0 !== a3 || 1 / a3 === 1 / b3) || a3 !== a3 && b3 !== b3;
}
var He = "function" === typeof Object.is ? Object.is : Ge;
function Ie(a3, b3) {
  if (He(a3, b3))
    return true;
  if ("object" !== typeof a3 || null === a3 || "object" !== typeof b3 || null === b3)
    return false;
  var c7 = Object.keys(a3), d4 = Object.keys(b3);
  if (c7.length !== d4.length)
    return false;
  for (d4 = 0; d4 < c7.length; d4++) {
    var e3 = c7[d4];
    if (!ja.call(b3, e3) || !He(a3[e3], b3[e3]))
      return false;
  }
  return true;
}
function Je(a3) {
  for (; a3 && a3.firstChild; )
    a3 = a3.firstChild;
  return a3;
}
function Ke(a3, b3) {
  var c7 = Je(a3);
  a3 = 0;
  for (var d4; c7; ) {
    if (3 === c7.nodeType) {
      d4 = a3 + c7.textContent.length;
      if (a3 <= b3 && d4 >= b3)
        return { node: c7, offset: b3 - a3 };
      a3 = d4;
    }
    a: {
      for (; c7; ) {
        if (c7.nextSibling) {
          c7 = c7.nextSibling;
          break a;
        }
        c7 = c7.parentNode;
      }
      c7 = void 0;
    }
    c7 = Je(c7);
  }
}
function Le(a3, b3) {
  return a3 && b3 ? a3 === b3 ? true : a3 && 3 === a3.nodeType ? false : b3 && 3 === b3.nodeType ? Le(a3, b3.parentNode) : "contains" in a3 ? a3.contains(b3) : a3.compareDocumentPosition ? !!(a3.compareDocumentPosition(b3) & 16) : false : false;
}
function Me() {
  for (var a3 = window, b3 = Xa(); b3 instanceof a3.HTMLIFrameElement; ) {
    try {
      var c7 = "string" === typeof b3.contentWindow.location.href;
    } catch (d4) {
      c7 = false;
    }
    if (c7)
      a3 = b3.contentWindow;
    else
      break;
    b3 = Xa(a3.document);
  }
  return b3;
}
function Ne(a3) {
  var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
  return b3 && ("input" === b3 && ("text" === a3.type || "search" === a3.type || "tel" === a3.type || "url" === a3.type || "password" === a3.type) || "textarea" === b3 || "true" === a3.contentEditable);
}
function Oe(a3) {
  var b3 = Me(), c7 = a3.focusedElem, d4 = a3.selectionRange;
  if (b3 !== c7 && c7 && c7.ownerDocument && Le(c7.ownerDocument.documentElement, c7)) {
    if (null !== d4 && Ne(c7)) {
      if (b3 = d4.start, a3 = d4.end, void 0 === a3 && (a3 = b3), "selectionStart" in c7)
        c7.selectionStart = b3, c7.selectionEnd = Math.min(a3, c7.value.length);
      else if (a3 = (b3 = c7.ownerDocument || document) && b3.defaultView || window, a3.getSelection) {
        a3 = a3.getSelection();
        var e3 = c7.textContent.length, f2 = Math.min(d4.start, e3);
        d4 = void 0 === d4.end ? f2 : Math.min(d4.end, e3);
        !a3.extend && f2 > d4 && (e3 = d4, d4 = f2, f2 = e3);
        e3 = Ke(c7, f2);
        var g2 = Ke(
          c7,
          d4
        );
        e3 && g2 && (1 !== a3.rangeCount || a3.anchorNode !== e3.node || a3.anchorOffset !== e3.offset || a3.focusNode !== g2.node || a3.focusOffset !== g2.offset) && (b3 = b3.createRange(), b3.setStart(e3.node, e3.offset), a3.removeAllRanges(), f2 > d4 ? (a3.addRange(b3), a3.extend(g2.node, g2.offset)) : (b3.setEnd(g2.node, g2.offset), a3.addRange(b3)));
      }
    }
    b3 = [];
    for (a3 = c7; a3 = a3.parentNode; )
      1 === a3.nodeType && b3.push({ element: a3, left: a3.scrollLeft, top: a3.scrollTop });
    "function" === typeof c7.focus && c7.focus();
    for (c7 = 0; c7 < b3.length; c7++)
      a3 = b3[c7], a3.element.scrollLeft = a3.left, a3.element.scrollTop = a3.top;
  }
}
var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
function Ue(a3, b3, c7) {
  var d4 = c7.window === c7 ? c7.document : 9 === c7.nodeType ? c7 : c7.ownerDocument;
  Te || null == Qe || Qe !== Xa(d4) || (d4 = Qe, "selectionStart" in d4 && Ne(d4) ? d4 = { start: d4.selectionStart, end: d4.selectionEnd } : (d4 = (d4.ownerDocument && d4.ownerDocument.defaultView || window).getSelection(), d4 = { anchorNode: d4.anchorNode, anchorOffset: d4.anchorOffset, focusNode: d4.focusNode, focusOffset: d4.focusOffset }), Se && Ie(Se, d4) || (Se = d4, d4 = oe(Re, "onSelect"), 0 < d4.length && (b3 = new td("onSelect", "select", null, b3, c7), a3.push({ event: b3, listeners: d4 }), b3.target = Qe)));
}
function Ve(a3, b3) {
  var c7 = {};
  c7[a3.toLowerCase()] = b3.toLowerCase();
  c7["Webkit" + a3] = "webkit" + b3;
  c7["Moz" + a3] = "moz" + b3;
  return c7;
}
var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
function Ze(a3) {
  if (Xe[a3])
    return Xe[a3];
  if (!We[a3])
    return a3;
  var b3 = We[a3], c7;
  for (c7 in b3)
    if (b3.hasOwnProperty(c7) && c7 in Ye)
      return Xe[a3] = b3[c7];
  return a3;
}
var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function ff(a3, b3) {
  df.set(a3, b3);
  fa(b3, [a3]);
}
for (var gf = 0; gf < ef.length; gf++) {
  var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
  ff(jf, "on" + kf);
}
ff($e, "onAnimationEnd");
ff(af, "onAnimationIteration");
ff(bf, "onAnimationStart");
ff("dblclick", "onDoubleClick");
ff("focusin", "onFocus");
ff("focusout", "onBlur");
ff(cf, "onTransitionEnd");
ha("onMouseEnter", ["mouseout", "mouseover"]);
ha("onMouseLeave", ["mouseout", "mouseover"]);
ha("onPointerEnter", ["pointerout", "pointerover"]);
ha("onPointerLeave", ["pointerout", "pointerover"]);
fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
function nf(a3, b3, c7) {
  var d4 = a3.type || "unknown-event";
  a3.currentTarget = c7;
  Ub(d4, b3, void 0, a3);
  a3.currentTarget = null;
}
function se(a3, b3) {
  b3 = 0 !== (b3 & 4);
  for (var c7 = 0; c7 < a3.length; c7++) {
    var d4 = a3[c7], e3 = d4.event;
    d4 = d4.listeners;
    a: {
      var f2 = void 0;
      if (b3)
        for (var g2 = d4.length - 1; 0 <= g2; g2--) {
          var h4 = d4[g2], k3 = h4.instance, l2 = h4.currentTarget;
          h4 = h4.listener;
          if (k3 !== f2 && e3.isPropagationStopped())
            break a;
          nf(e3, h4, l2);
          f2 = k3;
        }
      else
        for (g2 = 0; g2 < d4.length; g2++) {
          h4 = d4[g2];
          k3 = h4.instance;
          l2 = h4.currentTarget;
          h4 = h4.listener;
          if (k3 !== f2 && e3.isPropagationStopped())
            break a;
          nf(e3, h4, l2);
          f2 = k3;
        }
    }
  }
  if (Qb)
    throw a3 = Rb, Qb = false, Rb = null, a3;
}
function D(a3, b3) {
  var c7 = b3[of];
  void 0 === c7 && (c7 = b3[of] = /* @__PURE__ */ new Set());
  var d4 = a3 + "__bubble";
  c7.has(d4) || (pf(b3, a3, 2, false), c7.add(d4));
}
function qf(a3, b3, c7) {
  var d4 = 0;
  b3 && (d4 |= 4);
  pf(c7, a3, d4, b3);
}
var rf = "_reactListening" + Math.random().toString(36).slice(2);
function sf(a3) {
  if (!a3[rf]) {
    a3[rf] = true;
    da.forEach(function(b4) {
      "selectionchange" !== b4 && (mf.has(b4) || qf(b4, false, a3), qf(b4, true, a3));
    });
    var b3 = 9 === a3.nodeType ? a3 : a3.ownerDocument;
    null === b3 || b3[rf] || (b3[rf] = true, qf("selectionchange", false, b3));
  }
}
function pf(a3, b3, c7, d4) {
  switch (jd(b3)) {
    case 1:
      var e3 = ed;
      break;
    case 4:
      e3 = gd;
      break;
    default:
      e3 = fd;
  }
  c7 = e3.bind(null, b3, c7, a3);
  e3 = void 0;
  !Lb || "touchstart" !== b3 && "touchmove" !== b3 && "wheel" !== b3 || (e3 = true);
  d4 ? void 0 !== e3 ? a3.addEventListener(b3, c7, { capture: true, passive: e3 }) : a3.addEventListener(b3, c7, true) : void 0 !== e3 ? a3.addEventListener(b3, c7, { passive: e3 }) : a3.addEventListener(b3, c7, false);
}
function hd(a3, b3, c7, d4, e3) {
  var f2 = d4;
  if (0 === (b3 & 1) && 0 === (b3 & 2) && null !== d4)
    a:
      for (; ; ) {
        if (null === d4)
          return;
        var g2 = d4.tag;
        if (3 === g2 || 4 === g2) {
          var h4 = d4.stateNode.containerInfo;
          if (h4 === e3 || 8 === h4.nodeType && h4.parentNode === e3)
            break;
          if (4 === g2)
            for (g2 = d4.return; null !== g2; ) {
              var k3 = g2.tag;
              if (3 === k3 || 4 === k3) {
                if (k3 = g2.stateNode.containerInfo, k3 === e3 || 8 === k3.nodeType && k3.parentNode === e3)
                  return;
              }
              g2 = g2.return;
            }
          for (; null !== h4; ) {
            g2 = Wc(h4);
            if (null === g2)
              return;
            k3 = g2.tag;
            if (5 === k3 || 6 === k3) {
              d4 = f2 = g2;
              continue a;
            }
            h4 = h4.parentNode;
          }
        }
        d4 = d4.return;
      }
  Jb(function() {
    var d5 = f2, e4 = xb(c7), g3 = [];
    a: {
      var h5 = df.get(a3);
      if (void 0 !== h5) {
        var k4 = td, n2 = a3;
        switch (a3) {
          case "keypress":
            if (0 === od(c7))
              break a;
          case "keydown":
          case "keyup":
            k4 = Rd;
            break;
          case "focusin":
            n2 = "focus";
            k4 = Fd;
            break;
          case "focusout":
            n2 = "blur";
            k4 = Fd;
            break;
          case "beforeblur":
          case "afterblur":
            k4 = Fd;
            break;
          case "click":
            if (2 === c7.button)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k4 = Bd;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k4 = Dd;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k4 = Vd;
            break;
          case $e:
          case af:
          case bf:
            k4 = Hd;
            break;
          case cf:
            k4 = Xd;
            break;
          case "scroll":
            k4 = vd;
            break;
          case "wheel":
            k4 = Zd;
            break;
          case "copy":
          case "cut":
          case "paste":
            k4 = Jd;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k4 = Td;
        }
        var t3 = 0 !== (b3 & 4), J2 = !t3 && "scroll" === a3, x3 = t3 ? null !== h5 ? h5 + "Capture" : null : h5;
        t3 = [];
        for (var w3 = d5, u3; null !== w3; ) {
          u3 = w3;
          var F2 = u3.stateNode;
          5 === u3.tag && null !== F2 && (u3 = F2, null !== x3 && (F2 = Kb(w3, x3), null != F2 && t3.push(tf(w3, F2, u3))));
          if (J2)
            break;
          w3 = w3.return;
        }
        0 < t3.length && (h5 = new k4(h5, n2, null, c7, e4), g3.push({ event: h5, listeners: t3 }));
      }
    }
    if (0 === (b3 & 7)) {
      a: {
        h5 = "mouseover" === a3 || "pointerover" === a3;
        k4 = "mouseout" === a3 || "pointerout" === a3;
        if (h5 && c7 !== wb && (n2 = c7.relatedTarget || c7.fromElement) && (Wc(n2) || n2[uf]))
          break a;
        if (k4 || h5) {
          h5 = e4.window === e4 ? e4 : (h5 = e4.ownerDocument) ? h5.defaultView || h5.parentWindow : window;
          if (k4) {
            if (n2 = c7.relatedTarget || c7.toElement, k4 = d5, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag))
              n2 = null;
          } else
            k4 = null, n2 = d5;
          if (k4 !== n2) {
            t3 = Bd;
            F2 = "onMouseLeave";
            x3 = "onMouseEnter";
            w3 = "mouse";
            if ("pointerout" === a3 || "pointerover" === a3)
              t3 = Td, F2 = "onPointerLeave", x3 = "onPointerEnter", w3 = "pointer";
            J2 = null == k4 ? h5 : ue(k4);
            u3 = null == n2 ? h5 : ue(n2);
            h5 = new t3(F2, w3 + "leave", k4, c7, e4);
            h5.target = J2;
            h5.relatedTarget = u3;
            F2 = null;
            Wc(e4) === d5 && (t3 = new t3(x3, w3 + "enter", n2, c7, e4), t3.target = u3, t3.relatedTarget = J2, F2 = t3);
            J2 = F2;
            if (k4 && n2)
              b: {
                t3 = k4;
                x3 = n2;
                w3 = 0;
                for (u3 = t3; u3; u3 = vf(u3))
                  w3++;
                u3 = 0;
                for (F2 = x3; F2; F2 = vf(F2))
                  u3++;
                for (; 0 < w3 - u3; )
                  t3 = vf(t3), w3--;
                for (; 0 < u3 - w3; )
                  x3 = vf(x3), u3--;
                for (; w3--; ) {
                  if (t3 === x3 || null !== x3 && t3 === x3.alternate)
                    break b;
                  t3 = vf(t3);
                  x3 = vf(x3);
                }
                t3 = null;
              }
            else
              t3 = null;
            null !== k4 && wf(g3, h5, k4, t3, false);
            null !== n2 && null !== J2 && wf(g3, J2, n2, t3, true);
          }
        }
      }
      a: {
        h5 = d5 ? ue(d5) : window;
        k4 = h5.nodeName && h5.nodeName.toLowerCase();
        if ("select" === k4 || "input" === k4 && "file" === h5.type)
          var na = ve;
        else if (me(h5))
          if (we)
            na = Fe;
          else {
            na = De;
            var xa = Ce;
          }
        else
          (k4 = h5.nodeName) && "input" === k4.toLowerCase() && ("checkbox" === h5.type || "radio" === h5.type) && (na = Ee);
        if (na && (na = na(a3, d5))) {
          ne(g3, na, c7, e4);
          break a;
        }
        xa && xa(a3, h5, d5);
        "focusout" === a3 && (xa = h5._wrapperState) && xa.controlled && "number" === h5.type && cb(h5, "number", h5.value);
      }
      xa = d5 ? ue(d5) : window;
      switch (a3) {
        case "focusin":
          if (me(xa) || "true" === xa.contentEditable)
            Qe = xa, Re = d5, Se = null;
          break;
        case "focusout":
          Se = Re = Qe = null;
          break;
        case "mousedown":
          Te = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = false;
          Ue(g3, c7, e4);
          break;
        case "selectionchange":
          if (Pe)
            break;
        case "keydown":
        case "keyup":
          Ue(g3, c7, e4);
      }
      var $a;
      if (ae)
        b: {
          switch (a3) {
            case "compositionstart":
              var ba = "onCompositionStart";
              break b;
            case "compositionend":
              ba = "onCompositionEnd";
              break b;
            case "compositionupdate":
              ba = "onCompositionUpdate";
              break b;
          }
          ba = void 0;
        }
      else
        ie ? ge(a3, c7) && (ba = "onCompositionEnd") : "keydown" === a3 && 229 === c7.keyCode && (ba = "onCompositionStart");
      ba && (de && "ko" !== c7.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e4, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d5, ba), 0 < xa.length && (ba = new Ld(ba, a3, null, c7, e4), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c7), null !== $a && (ba.data = $a))));
      if ($a = ce ? je(a3, c7) : ke(a3, c7))
        d5 = oe(d5, "onBeforeInput"), 0 < d5.length && (e4 = new Ld("onBeforeInput", "beforeinput", null, c7, e4), g3.push({ event: e4, listeners: d5 }), e4.data = $a);
    }
    se(g3, b3);
  });
}
function tf(a3, b3, c7) {
  return { instance: a3, listener: b3, currentTarget: c7 };
}
function oe(a3, b3) {
  for (var c7 = b3 + "Capture", d4 = []; null !== a3; ) {
    var e3 = a3, f2 = e3.stateNode;
    5 === e3.tag && null !== f2 && (e3 = f2, f2 = Kb(a3, c7), null != f2 && d4.unshift(tf(a3, f2, e3)), f2 = Kb(a3, b3), null != f2 && d4.push(tf(a3, f2, e3)));
    a3 = a3.return;
  }
  return d4;
}
function vf(a3) {
  if (null === a3)
    return null;
  do
    a3 = a3.return;
  while (a3 && 5 !== a3.tag);
  return a3 ? a3 : null;
}
function wf(a3, b3, c7, d4, e3) {
  for (var f2 = b3._reactName, g2 = []; null !== c7 && c7 !== d4; ) {
    var h4 = c7, k3 = h4.alternate, l2 = h4.stateNode;
    if (null !== k3 && k3 === d4)
      break;
    5 === h4.tag && null !== l2 && (h4 = l2, e3 ? (k3 = Kb(c7, f2), null != k3 && g2.unshift(tf(c7, k3, h4))) : e3 || (k3 = Kb(c7, f2), null != k3 && g2.push(tf(c7, k3, h4))));
    c7 = c7.return;
  }
  0 !== g2.length && a3.push({ event: b3, listeners: g2 });
}
var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
function zf(a3) {
  return ("string" === typeof a3 ? a3 : "" + a3).replace(xf, "\n").replace(yf, "");
}
function Af(a3, b3, c7) {
  b3 = zf(b3);
  if (zf(a3) !== b3 && c7)
    throw Error(p$1(425));
}
function Bf() {
}
var Cf = null, Df = null;
function Ef(a3, b3) {
  return "textarea" === a3 || "noscript" === a3 || "string" === typeof b3.children || "number" === typeof b3.children || "object" === typeof b3.dangerouslySetInnerHTML && null !== b3.dangerouslySetInnerHTML && null != b3.dangerouslySetInnerHTML.__html;
}
var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a3) {
  return Hf.resolve(null).then(a3).catch(If);
} : Ff;
function If(a3) {
  setTimeout(function() {
    throw a3;
  });
}
function Kf(a3, b3) {
  var c7 = b3, d4 = 0;
  do {
    var e3 = c7.nextSibling;
    a3.removeChild(c7);
    if (e3 && 8 === e3.nodeType)
      if (c7 = e3.data, "/$" === c7) {
        if (0 === d4) {
          a3.removeChild(e3);
          bd(b3);
          return;
        }
        d4--;
      } else
        "$" !== c7 && "$?" !== c7 && "$!" !== c7 || d4++;
    c7 = e3;
  } while (c7);
  bd(b3);
}
function Lf(a3) {
  for (; null != a3; a3 = a3.nextSibling) {
    var b3 = a3.nodeType;
    if (1 === b3 || 3 === b3)
      break;
    if (8 === b3) {
      b3 = a3.data;
      if ("$" === b3 || "$!" === b3 || "$?" === b3)
        break;
      if ("/$" === b3)
        return null;
    }
  }
  return a3;
}
function Mf(a3) {
  a3 = a3.previousSibling;
  for (var b3 = 0; a3; ) {
    if (8 === a3.nodeType) {
      var c7 = a3.data;
      if ("$" === c7 || "$!" === c7 || "$?" === c7) {
        if (0 === b3)
          return a3;
        b3--;
      } else
        "/$" === c7 && b3++;
    }
    a3 = a3.previousSibling;
  }
  return null;
}
var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
function Wc(a3) {
  var b3 = a3[Of];
  if (b3)
    return b3;
  for (var c7 = a3.parentNode; c7; ) {
    if (b3 = c7[uf] || c7[Of]) {
      c7 = b3.alternate;
      if (null !== b3.child || null !== c7 && null !== c7.child)
        for (a3 = Mf(a3); null !== a3; ) {
          if (c7 = a3[Of])
            return c7;
          a3 = Mf(a3);
        }
      return b3;
    }
    a3 = c7;
    c7 = a3.parentNode;
  }
  return null;
}
function Cb(a3) {
  a3 = a3[Of] || a3[uf];
  return !a3 || 5 !== a3.tag && 6 !== a3.tag && 13 !== a3.tag && 3 !== a3.tag ? null : a3;
}
function ue(a3) {
  if (5 === a3.tag || 6 === a3.tag)
    return a3.stateNode;
  throw Error(p$1(33));
}
function Db(a3) {
  return a3[Pf] || null;
}
var Sf = [], Tf = -1;
function Uf(a3) {
  return { current: a3 };
}
function E(a3) {
  0 > Tf || (a3.current = Sf[Tf], Sf[Tf] = null, Tf--);
}
function G(a3, b3) {
  Tf++;
  Sf[Tf] = a3.current;
  a3.current = b3;
}
var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
function Yf(a3, b3) {
  var c7 = a3.type.contextTypes;
  if (!c7)
    return Vf;
  var d4 = a3.stateNode;
  if (d4 && d4.__reactInternalMemoizedUnmaskedChildContext === b3)
    return d4.__reactInternalMemoizedMaskedChildContext;
  var e3 = {}, f2;
  for (f2 in c7)
    e3[f2] = b3[f2];
  d4 && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = b3, a3.__reactInternalMemoizedMaskedChildContext = e3);
  return e3;
}
function Zf(a3) {
  a3 = a3.childContextTypes;
  return null !== a3 && void 0 !== a3;
}
function $f() {
  E(Wf);
  E(H);
}
function ag(a3, b3, c7) {
  if (H.current !== Vf)
    throw Error(p$1(168));
  G(H, b3);
  G(Wf, c7);
}
function bg(a3, b3, c7) {
  var d4 = a3.stateNode;
  b3 = b3.childContextTypes;
  if ("function" !== typeof d4.getChildContext)
    return c7;
  d4 = d4.getChildContext();
  for (var e3 in d4)
    if (!(e3 in b3))
      throw Error(p$1(108, Ra(a3) || "Unknown", e3));
  return A$1({}, c7, d4);
}
function cg(a3) {
  a3 = (a3 = a3.stateNode) && a3.__reactInternalMemoizedMergedChildContext || Vf;
  Xf = H.current;
  G(H, a3);
  G(Wf, Wf.current);
  return true;
}
function dg(a3, b3, c7) {
  var d4 = a3.stateNode;
  if (!d4)
    throw Error(p$1(169));
  c7 ? (a3 = bg(a3, b3, Xf), d4.__reactInternalMemoizedMergedChildContext = a3, E(Wf), E(H), G(H, a3)) : E(Wf);
  G(Wf, c7);
}
var eg = null, fg = false, gg = false;
function hg(a3) {
  null === eg ? eg = [a3] : eg.push(a3);
}
function ig(a3) {
  fg = true;
  hg(a3);
}
function jg() {
  if (!gg && null !== eg) {
    gg = true;
    var a3 = 0, b3 = C;
    try {
      var c7 = eg;
      for (C = 1; a3 < c7.length; a3++) {
        var d4 = c7[a3];
        do
          d4 = d4(true);
        while (null !== d4);
      }
      eg = null;
      fg = false;
    } catch (e3) {
      throw null !== eg && (eg = eg.slice(a3 + 1)), ac(fc, jg), e3;
    } finally {
      C = b3, gg = false;
    }
  }
  return null;
}
var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
function tg(a3, b3) {
  kg[lg++] = ng;
  kg[lg++] = mg;
  mg = a3;
  ng = b3;
}
function ug(a3, b3, c7) {
  og[pg++] = rg;
  og[pg++] = sg;
  og[pg++] = qg;
  qg = a3;
  var d4 = rg;
  a3 = sg;
  var e3 = 32 - oc(d4) - 1;
  d4 &= ~(1 << e3);
  c7 += 1;
  var f2 = 32 - oc(b3) + e3;
  if (30 < f2) {
    var g2 = e3 - e3 % 5;
    f2 = (d4 & (1 << g2) - 1).toString(32);
    d4 >>= g2;
    e3 -= g2;
    rg = 1 << 32 - oc(b3) + e3 | c7 << e3 | d4;
    sg = f2 + a3;
  } else
    rg = 1 << f2 | c7 << e3 | d4, sg = a3;
}
function vg(a3) {
  null !== a3.return && (tg(a3, 1), ug(a3, 1, 0));
}
function wg(a3) {
  for (; a3 === mg; )
    mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
  for (; a3 === qg; )
    qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
}
var xg = null, yg = null, I = false, zg = null;
function Ag(a3, b3) {
  var c7 = Bg(5, null, null, 0);
  c7.elementType = "DELETED";
  c7.stateNode = b3;
  c7.return = a3;
  b3 = a3.deletions;
  null === b3 ? (a3.deletions = [c7], a3.flags |= 16) : b3.push(c7);
}
function Cg(a3, b3) {
  switch (a3.tag) {
    case 5:
      var c7 = a3.type;
      b3 = 1 !== b3.nodeType || c7.toLowerCase() !== b3.nodeName.toLowerCase() ? null : b3;
      return null !== b3 ? (a3.stateNode = b3, xg = a3, yg = Lf(b3.firstChild), true) : false;
    case 6:
      return b3 = "" === a3.pendingProps || 3 !== b3.nodeType ? null : b3, null !== b3 ? (a3.stateNode = b3, xg = a3, yg = null, true) : false;
    case 13:
      return b3 = 8 !== b3.nodeType ? null : b3, null !== b3 ? (c7 = null !== qg ? { id: rg, overflow: sg } : null, a3.memoizedState = { dehydrated: b3, treeContext: c7, retryLane: 1073741824 }, c7 = Bg(18, null, null, 0), c7.stateNode = b3, c7.return = a3, a3.child = c7, xg = a3, yg = null, true) : false;
    default:
      return false;
  }
}
function Dg(a3) {
  return 0 !== (a3.mode & 1) && 0 === (a3.flags & 128);
}
function Eg(a3) {
  if (I) {
    var b3 = yg;
    if (b3) {
      var c7 = b3;
      if (!Cg(a3, b3)) {
        if (Dg(a3))
          throw Error(p$1(418));
        b3 = Lf(c7.nextSibling);
        var d4 = xg;
        b3 && Cg(a3, b3) ? Ag(d4, c7) : (a3.flags = a3.flags & -4097 | 2, I = false, xg = a3);
      }
    } else {
      if (Dg(a3))
        throw Error(p$1(418));
      a3.flags = a3.flags & -4097 | 2;
      I = false;
      xg = a3;
    }
  }
}
function Fg(a3) {
  for (a3 = a3.return; null !== a3 && 5 !== a3.tag && 3 !== a3.tag && 13 !== a3.tag; )
    a3 = a3.return;
  xg = a3;
}
function Gg(a3) {
  if (a3 !== xg)
    return false;
  if (!I)
    return Fg(a3), I = true, false;
  var b3;
  (b3 = 3 !== a3.tag) && !(b3 = 5 !== a3.tag) && (b3 = a3.type, b3 = "head" !== b3 && "body" !== b3 && !Ef(a3.type, a3.memoizedProps));
  if (b3 && (b3 = yg)) {
    if (Dg(a3))
      throw Hg(), Error(p$1(418));
    for (; b3; )
      Ag(a3, b3), b3 = Lf(b3.nextSibling);
  }
  Fg(a3);
  if (13 === a3.tag) {
    a3 = a3.memoizedState;
    a3 = null !== a3 ? a3.dehydrated : null;
    if (!a3)
      throw Error(p$1(317));
    a: {
      a3 = a3.nextSibling;
      for (b3 = 0; a3; ) {
        if (8 === a3.nodeType) {
          var c7 = a3.data;
          if ("/$" === c7) {
            if (0 === b3) {
              yg = Lf(a3.nextSibling);
              break a;
            }
            b3--;
          } else
            "$" !== c7 && "$!" !== c7 && "$?" !== c7 || b3++;
        }
        a3 = a3.nextSibling;
      }
      yg = null;
    }
  } else
    yg = xg ? Lf(a3.stateNode.nextSibling) : null;
  return true;
}
function Hg() {
  for (var a3 = yg; a3; )
    a3 = Lf(a3.nextSibling);
}
function Ig() {
  yg = xg = null;
  I = false;
}
function Jg(a3) {
  null === zg ? zg = [a3] : zg.push(a3);
}
var Kg = ua.ReactCurrentBatchConfig;
function Lg(a3, b3) {
  if (a3 && a3.defaultProps) {
    b3 = A$1({}, b3);
    a3 = a3.defaultProps;
    for (var c7 in a3)
      void 0 === b3[c7] && (b3[c7] = a3[c7]);
    return b3;
  }
  return b3;
}
var Mg = Uf(null), Ng = null, Og = null, Pg = null;
function Qg() {
  Pg = Og = Ng = null;
}
function Rg(a3) {
  var b3 = Mg.current;
  E(Mg);
  a3._currentValue = b3;
}
function Sg(a3, b3, c7) {
  for (; null !== a3; ) {
    var d4 = a3.alternate;
    (a3.childLanes & b3) !== b3 ? (a3.childLanes |= b3, null !== d4 && (d4.childLanes |= b3)) : null !== d4 && (d4.childLanes & b3) !== b3 && (d4.childLanes |= b3);
    if (a3 === c7)
      break;
    a3 = a3.return;
  }
}
function Tg(a3, b3) {
  Ng = a3;
  Pg = Og = null;
  a3 = a3.dependencies;
  null !== a3 && null !== a3.firstContext && (0 !== (a3.lanes & b3) && (Ug = true), a3.firstContext = null);
}
function Vg(a3) {
  var b3 = a3._currentValue;
  if (Pg !== a3)
    if (a3 = { context: a3, memoizedValue: b3, next: null }, null === Og) {
      if (null === Ng)
        throw Error(p$1(308));
      Og = a3;
      Ng.dependencies = { lanes: 0, firstContext: a3 };
    } else
      Og = Og.next = a3;
  return b3;
}
var Wg = null;
function Xg(a3) {
  null === Wg ? Wg = [a3] : Wg.push(a3);
}
function Yg(a3, b3, c7, d4) {
  var e3 = b3.interleaved;
  null === e3 ? (c7.next = c7, Xg(b3)) : (c7.next = e3.next, e3.next = c7);
  b3.interleaved = c7;
  return Zg(a3, d4);
}
function Zg(a3, b3) {
  a3.lanes |= b3;
  var c7 = a3.alternate;
  null !== c7 && (c7.lanes |= b3);
  c7 = a3;
  for (a3 = a3.return; null !== a3; )
    a3.childLanes |= b3, c7 = a3.alternate, null !== c7 && (c7.childLanes |= b3), c7 = a3, a3 = a3.return;
  return 3 === c7.tag ? c7.stateNode : null;
}
var $g = false;
function ah(a3) {
  a3.updateQueue = { baseState: a3.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
}
function bh(a3, b3) {
  a3 = a3.updateQueue;
  b3.updateQueue === a3 && (b3.updateQueue = { baseState: a3.baseState, firstBaseUpdate: a3.firstBaseUpdate, lastBaseUpdate: a3.lastBaseUpdate, shared: a3.shared, effects: a3.effects });
}
function ch(a3, b3) {
  return { eventTime: a3, lane: b3, tag: 0, payload: null, callback: null, next: null };
}
function dh(a3, b3, c7) {
  var d4 = a3.updateQueue;
  if (null === d4)
    return null;
  d4 = d4.shared;
  if (0 !== (K & 2)) {
    var e3 = d4.pending;
    null === e3 ? b3.next = b3 : (b3.next = e3.next, e3.next = b3);
    d4.pending = b3;
    return Zg(a3, c7);
  }
  e3 = d4.interleaved;
  null === e3 ? (b3.next = b3, Xg(d4)) : (b3.next = e3.next, e3.next = b3);
  d4.interleaved = b3;
  return Zg(a3, c7);
}
function eh(a3, b3, c7) {
  b3 = b3.updateQueue;
  if (null !== b3 && (b3 = b3.shared, 0 !== (c7 & 4194240))) {
    var d4 = b3.lanes;
    d4 &= a3.pendingLanes;
    c7 |= d4;
    b3.lanes = c7;
    Cc(a3, c7);
  }
}
function fh(a3, b3) {
  var c7 = a3.updateQueue, d4 = a3.alternate;
  if (null !== d4 && (d4 = d4.updateQueue, c7 === d4)) {
    var e3 = null, f2 = null;
    c7 = c7.firstBaseUpdate;
    if (null !== c7) {
      do {
        var g2 = { eventTime: c7.eventTime, lane: c7.lane, tag: c7.tag, payload: c7.payload, callback: c7.callback, next: null };
        null === f2 ? e3 = f2 = g2 : f2 = f2.next = g2;
        c7 = c7.next;
      } while (null !== c7);
      null === f2 ? e3 = f2 = b3 : f2 = f2.next = b3;
    } else
      e3 = f2 = b3;
    c7 = { baseState: d4.baseState, firstBaseUpdate: e3, lastBaseUpdate: f2, shared: d4.shared, effects: d4.effects };
    a3.updateQueue = c7;
    return;
  }
  a3 = c7.lastBaseUpdate;
  null === a3 ? c7.firstBaseUpdate = b3 : a3.next = b3;
  c7.lastBaseUpdate = b3;
}
function gh(a3, b3, c7, d4) {
  var e3 = a3.updateQueue;
  $g = false;
  var f2 = e3.firstBaseUpdate, g2 = e3.lastBaseUpdate, h4 = e3.shared.pending;
  if (null !== h4) {
    e3.shared.pending = null;
    var k3 = h4, l2 = k3.next;
    k3.next = null;
    null === g2 ? f2 = l2 : g2.next = l2;
    g2 = k3;
    var m4 = a3.alternate;
    null !== m4 && (m4 = m4.updateQueue, h4 = m4.lastBaseUpdate, h4 !== g2 && (null === h4 ? m4.firstBaseUpdate = l2 : h4.next = l2, m4.lastBaseUpdate = k3));
  }
  if (null !== f2) {
    var q3 = e3.baseState;
    g2 = 0;
    m4 = l2 = k3 = null;
    h4 = f2;
    do {
      var r2 = h4.lane, y4 = h4.eventTime;
      if ((d4 & r2) === r2) {
        null !== m4 && (m4 = m4.next = {
          eventTime: y4,
          lane: 0,
          tag: h4.tag,
          payload: h4.payload,
          callback: h4.callback,
          next: null
        });
        a: {
          var n2 = a3, t3 = h4;
          r2 = b3;
          y4 = c7;
          switch (t3.tag) {
            case 1:
              n2 = t3.payload;
              if ("function" === typeof n2) {
                q3 = n2.call(y4, q3, r2);
                break a;
              }
              q3 = n2;
              break a;
            case 3:
              n2.flags = n2.flags & -65537 | 128;
            case 0:
              n2 = t3.payload;
              r2 = "function" === typeof n2 ? n2.call(y4, q3, r2) : n2;
              if (null === r2 || void 0 === r2)
                break a;
              q3 = A$1({}, q3, r2);
              break a;
            case 2:
              $g = true;
          }
        }
        null !== h4.callback && 0 !== h4.lane && (a3.flags |= 64, r2 = e3.effects, null === r2 ? e3.effects = [h4] : r2.push(h4));
      } else
        y4 = { eventTime: y4, lane: r2, tag: h4.tag, payload: h4.payload, callback: h4.callback, next: null }, null === m4 ? (l2 = m4 = y4, k3 = q3) : m4 = m4.next = y4, g2 |= r2;
      h4 = h4.next;
      if (null === h4)
        if (h4 = e3.shared.pending, null === h4)
          break;
        else
          r2 = h4, h4 = r2.next, r2.next = null, e3.lastBaseUpdate = r2, e3.shared.pending = null;
    } while (1);
    null === m4 && (k3 = q3);
    e3.baseState = k3;
    e3.firstBaseUpdate = l2;
    e3.lastBaseUpdate = m4;
    b3 = e3.shared.interleaved;
    if (null !== b3) {
      e3 = b3;
      do
        g2 |= e3.lane, e3 = e3.next;
      while (e3 !== b3);
    } else
      null === f2 && (e3.shared.lanes = 0);
    hh |= g2;
    a3.lanes = g2;
    a3.memoizedState = q3;
  }
}
function ih(a3, b3, c7) {
  a3 = b3.effects;
  b3.effects = null;
  if (null !== a3)
    for (b3 = 0; b3 < a3.length; b3++) {
      var d4 = a3[b3], e3 = d4.callback;
      if (null !== e3) {
        d4.callback = null;
        d4 = c7;
        if ("function" !== typeof e3)
          throw Error(p$1(191, e3));
        e3.call(d4);
      }
    }
}
var jh = new aa.Component().refs;
function kh(a3, b3, c7, d4) {
  b3 = a3.memoizedState;
  c7 = c7(d4, b3);
  c7 = null === c7 || void 0 === c7 ? b3 : A$1({}, b3, c7);
  a3.memoizedState = c7;
  0 === a3.lanes && (a3.updateQueue.baseState = c7);
}
var nh = { isMounted: function(a3) {
  return (a3 = a3._reactInternals) ? Vb(a3) === a3 : false;
}, enqueueSetState: function(a3, b3, c7) {
  a3 = a3._reactInternals;
  var d4 = L(), e3 = lh(a3), f2 = ch(d4, e3);
  f2.payload = b3;
  void 0 !== c7 && null !== c7 && (f2.callback = c7);
  b3 = dh(a3, f2, e3);
  null !== b3 && (mh(b3, a3, e3, d4), eh(b3, a3, e3));
}, enqueueReplaceState: function(a3, b3, c7) {
  a3 = a3._reactInternals;
  var d4 = L(), e3 = lh(a3), f2 = ch(d4, e3);
  f2.tag = 1;
  f2.payload = b3;
  void 0 !== c7 && null !== c7 && (f2.callback = c7);
  b3 = dh(a3, f2, e3);
  null !== b3 && (mh(b3, a3, e3, d4), eh(b3, a3, e3));
}, enqueueForceUpdate: function(a3, b3) {
  a3 = a3._reactInternals;
  var c7 = L(), d4 = lh(a3), e3 = ch(c7, d4);
  e3.tag = 2;
  void 0 !== b3 && null !== b3 && (e3.callback = b3);
  b3 = dh(a3, e3, d4);
  null !== b3 && (mh(b3, a3, d4, c7), eh(b3, a3, d4));
} };
function oh(a3, b3, c7, d4, e3, f2, g2) {
  a3 = a3.stateNode;
  return "function" === typeof a3.shouldComponentUpdate ? a3.shouldComponentUpdate(d4, f2, g2) : b3.prototype && b3.prototype.isPureReactComponent ? !Ie(c7, d4) || !Ie(e3, f2) : true;
}
function ph(a3, b3, c7) {
  var d4 = false, e3 = Vf;
  var f2 = b3.contextType;
  "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e3 = Zf(b3) ? Xf : H.current, d4 = b3.contextTypes, f2 = (d4 = null !== d4 && void 0 !== d4) ? Yf(a3, e3) : Vf);
  b3 = new b3(c7, f2);
  a3.memoizedState = null !== b3.state && void 0 !== b3.state ? b3.state : null;
  b3.updater = nh;
  a3.stateNode = b3;
  b3._reactInternals = a3;
  d4 && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = e3, a3.__reactInternalMemoizedMaskedChildContext = f2);
  return b3;
}
function qh(a3, b3, c7, d4) {
  a3 = b3.state;
  "function" === typeof b3.componentWillReceiveProps && b3.componentWillReceiveProps(c7, d4);
  "function" === typeof b3.UNSAFE_componentWillReceiveProps && b3.UNSAFE_componentWillReceiveProps(c7, d4);
  b3.state !== a3 && nh.enqueueReplaceState(b3, b3.state, null);
}
function rh(a3, b3, c7, d4) {
  var e3 = a3.stateNode;
  e3.props = c7;
  e3.state = a3.memoizedState;
  e3.refs = jh;
  ah(a3);
  var f2 = b3.contextType;
  "object" === typeof f2 && null !== f2 ? e3.context = Vg(f2) : (f2 = Zf(b3) ? Xf : H.current, e3.context = Yf(a3, f2));
  e3.state = a3.memoizedState;
  f2 = b3.getDerivedStateFromProps;
  "function" === typeof f2 && (kh(a3, b3, f2, c7), e3.state = a3.memoizedState);
  "function" === typeof b3.getDerivedStateFromProps || "function" === typeof e3.getSnapshotBeforeUpdate || "function" !== typeof e3.UNSAFE_componentWillMount && "function" !== typeof e3.componentWillMount || (b3 = e3.state, "function" === typeof e3.componentWillMount && e3.componentWillMount(), "function" === typeof e3.UNSAFE_componentWillMount && e3.UNSAFE_componentWillMount(), b3 !== e3.state && nh.enqueueReplaceState(e3, e3.state, null), gh(a3, c7, e3, d4), e3.state = a3.memoizedState);
  "function" === typeof e3.componentDidMount && (a3.flags |= 4194308);
}
function sh(a3, b3, c7) {
  a3 = c7.ref;
  if (null !== a3 && "function" !== typeof a3 && "object" !== typeof a3) {
    if (c7._owner) {
      c7 = c7._owner;
      if (c7) {
        if (1 !== c7.tag)
          throw Error(p$1(309));
        var d4 = c7.stateNode;
      }
      if (!d4)
        throw Error(p$1(147, a3));
      var e3 = d4, f2 = "" + a3;
      if (null !== b3 && null !== b3.ref && "function" === typeof b3.ref && b3.ref._stringRef === f2)
        return b3.ref;
      b3 = function(a4) {
        var b4 = e3.refs;
        b4 === jh && (b4 = e3.refs = {});
        null === a4 ? delete b4[f2] : b4[f2] = a4;
      };
      b3._stringRef = f2;
      return b3;
    }
    if ("string" !== typeof a3)
      throw Error(p$1(284));
    if (!c7._owner)
      throw Error(p$1(290, a3));
  }
  return a3;
}
function th(a3, b3) {
  a3 = Object.prototype.toString.call(b3);
  throw Error(p$1(31, "[object Object]" === a3 ? "object with keys {" + Object.keys(b3).join(", ") + "}" : a3));
}
function uh(a3) {
  var b3 = a3._init;
  return b3(a3._payload);
}
function vh(a3) {
  function b3(b4, c8) {
    if (a3) {
      var d5 = b4.deletions;
      null === d5 ? (b4.deletions = [c8], b4.flags |= 16) : d5.push(c8);
    }
  }
  function c7(c8, d5) {
    if (!a3)
      return null;
    for (; null !== d5; )
      b3(c8, d5), d5 = d5.sibling;
    return null;
  }
  function d4(a4, b4) {
    for (a4 = /* @__PURE__ */ new Map(); null !== b4; )
      null !== b4.key ? a4.set(b4.key, b4) : a4.set(b4.index, b4), b4 = b4.sibling;
    return a4;
  }
  function e3(a4, b4) {
    a4 = wh(a4, b4);
    a4.index = 0;
    a4.sibling = null;
    return a4;
  }
  function f2(b4, c8, d5) {
    b4.index = d5;
    if (!a3)
      return b4.flags |= 1048576, c8;
    d5 = b4.alternate;
    if (null !== d5)
      return d5 = d5.index, d5 < c8 ? (b4.flags |= 2, c8) : d5;
    b4.flags |= 2;
    return c8;
  }
  function g2(b4) {
    a3 && null === b4.alternate && (b4.flags |= 2);
    return b4;
  }
  function h4(a4, b4, c8, d5) {
    if (null === b4 || 6 !== b4.tag)
      return b4 = xh(c8, a4.mode, d5), b4.return = a4, b4;
    b4 = e3(b4, c8);
    b4.return = a4;
    return b4;
  }
  function k3(a4, b4, c8, d5) {
    var f3 = c8.type;
    if (f3 === ya)
      return m4(a4, b4, c8.props.children, d5, c8.key);
    if (null !== b4 && (b4.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b4.type))
      return d5 = e3(b4, c8.props), d5.ref = sh(a4, b4, c8), d5.return = a4, d5;
    d5 = yh(c8.type, c8.key, c8.props, null, a4.mode, d5);
    d5.ref = sh(a4, b4, c8);
    d5.return = a4;
    return d5;
  }
  function l2(a4, b4, c8, d5) {
    if (null === b4 || 4 !== b4.tag || b4.stateNode.containerInfo !== c8.containerInfo || b4.stateNode.implementation !== c8.implementation)
      return b4 = zh(c8, a4.mode, d5), b4.return = a4, b4;
    b4 = e3(b4, c8.children || []);
    b4.return = a4;
    return b4;
  }
  function m4(a4, b4, c8, d5, f3) {
    if (null === b4 || 7 !== b4.tag)
      return b4 = Ah(c8, a4.mode, d5, f3), b4.return = a4, b4;
    b4 = e3(b4, c8);
    b4.return = a4;
    return b4;
  }
  function q3(a4, b4, c8) {
    if ("string" === typeof b4 && "" !== b4 || "number" === typeof b4)
      return b4 = xh("" + b4, a4.mode, c8), b4.return = a4, b4;
    if ("object" === typeof b4 && null !== b4) {
      switch (b4.$$typeof) {
        case va:
          return c8 = yh(b4.type, b4.key, b4.props, null, a4.mode, c8), c8.ref = sh(a4, null, b4), c8.return = a4, c8;
        case wa:
          return b4 = zh(b4, a4.mode, c8), b4.return = a4, b4;
        case Ha:
          var d5 = b4._init;
          return q3(a4, d5(b4._payload), c8);
      }
      if (eb(b4) || Ka(b4))
        return b4 = Ah(b4, a4.mode, c8, null), b4.return = a4, b4;
      th(a4, b4);
    }
    return null;
  }
  function r2(a4, b4, c8, d5) {
    var e4 = null !== b4 ? b4.key : null;
    if ("string" === typeof c8 && "" !== c8 || "number" === typeof c8)
      return null !== e4 ? null : h4(a4, b4, "" + c8, d5);
    if ("object" === typeof c8 && null !== c8) {
      switch (c8.$$typeof) {
        case va:
          return c8.key === e4 ? k3(a4, b4, c8, d5) : null;
        case wa:
          return c8.key === e4 ? l2(a4, b4, c8, d5) : null;
        case Ha:
          return e4 = c8._init, r2(
            a4,
            b4,
            e4(c8._payload),
            d5
          );
      }
      if (eb(c8) || Ka(c8))
        return null !== e4 ? null : m4(a4, b4, c8, d5, null);
      th(a4, c8);
    }
    return null;
  }
  function y4(a4, b4, c8, d5, e4) {
    if ("string" === typeof d5 && "" !== d5 || "number" === typeof d5)
      return a4 = a4.get(c8) || null, h4(b4, a4, "" + d5, e4);
    if ("object" === typeof d5 && null !== d5) {
      switch (d5.$$typeof) {
        case va:
          return a4 = a4.get(null === d5.key ? c8 : d5.key) || null, k3(b4, a4, d5, e4);
        case wa:
          return a4 = a4.get(null === d5.key ? c8 : d5.key) || null, l2(b4, a4, d5, e4);
        case Ha:
          var f3 = d5._init;
          return y4(a4, b4, c8, f3(d5._payload), e4);
      }
      if (eb(d5) || Ka(d5))
        return a4 = a4.get(c8) || null, m4(b4, a4, d5, e4, null);
      th(b4, d5);
    }
    return null;
  }
  function n2(e4, g3, h5, k4) {
    for (var l3 = null, m5 = null, u3 = g3, w3 = g3 = 0, x3 = null; null !== u3 && w3 < h5.length; w3++) {
      u3.index > w3 ? (x3 = u3, u3 = null) : x3 = u3.sibling;
      var n3 = r2(e4, u3, h5[w3], k4);
      if (null === n3) {
        null === u3 && (u3 = x3);
        break;
      }
      a3 && u3 && null === n3.alternate && b3(e4, u3);
      g3 = f2(n3, g3, w3);
      null === m5 ? l3 = n3 : m5.sibling = n3;
      m5 = n3;
      u3 = x3;
    }
    if (w3 === h5.length)
      return c7(e4, u3), I && tg(e4, w3), l3;
    if (null === u3) {
      for (; w3 < h5.length; w3++)
        u3 = q3(e4, h5[w3], k4), null !== u3 && (g3 = f2(u3, g3, w3), null === m5 ? l3 = u3 : m5.sibling = u3, m5 = u3);
      I && tg(e4, w3);
      return l3;
    }
    for (u3 = d4(e4, u3); w3 < h5.length; w3++)
      x3 = y4(u3, e4, w3, h5[w3], k4), null !== x3 && (a3 && null !== x3.alternate && u3.delete(null === x3.key ? w3 : x3.key), g3 = f2(x3, g3, w3), null === m5 ? l3 = x3 : m5.sibling = x3, m5 = x3);
    a3 && u3.forEach(function(a4) {
      return b3(e4, a4);
    });
    I && tg(e4, w3);
    return l3;
  }
  function t3(e4, g3, h5, k4) {
    var l3 = Ka(h5);
    if ("function" !== typeof l3)
      throw Error(p$1(150));
    h5 = l3.call(h5);
    if (null == h5)
      throw Error(p$1(151));
    for (var u3 = l3 = null, m5 = g3, w3 = g3 = 0, x3 = null, n3 = h5.next(); null !== m5 && !n3.done; w3++, n3 = h5.next()) {
      m5.index > w3 ? (x3 = m5, m5 = null) : x3 = m5.sibling;
      var t4 = r2(e4, m5, n3.value, k4);
      if (null === t4) {
        null === m5 && (m5 = x3);
        break;
      }
      a3 && m5 && null === t4.alternate && b3(e4, m5);
      g3 = f2(t4, g3, w3);
      null === u3 ? l3 = t4 : u3.sibling = t4;
      u3 = t4;
      m5 = x3;
    }
    if (n3.done)
      return c7(
        e4,
        m5
      ), I && tg(e4, w3), l3;
    if (null === m5) {
      for (; !n3.done; w3++, n3 = h5.next())
        n3 = q3(e4, n3.value, k4), null !== n3 && (g3 = f2(n3, g3, w3), null === u3 ? l3 = n3 : u3.sibling = n3, u3 = n3);
      I && tg(e4, w3);
      return l3;
    }
    for (m5 = d4(e4, m5); !n3.done; w3++, n3 = h5.next())
      n3 = y4(m5, e4, w3, n3.value, k4), null !== n3 && (a3 && null !== n3.alternate && m5.delete(null === n3.key ? w3 : n3.key), g3 = f2(n3, g3, w3), null === u3 ? l3 = n3 : u3.sibling = n3, u3 = n3);
    a3 && m5.forEach(function(a4) {
      return b3(e4, a4);
    });
    I && tg(e4, w3);
    return l3;
  }
  function J2(a4, d5, f3, h5) {
    "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
    if ("object" === typeof f3 && null !== f3) {
      switch (f3.$$typeof) {
        case va:
          a: {
            for (var k4 = f3.key, l3 = d5; null !== l3; ) {
              if (l3.key === k4) {
                k4 = f3.type;
                if (k4 === ya) {
                  if (7 === l3.tag) {
                    c7(a4, l3.sibling);
                    d5 = e3(l3, f3.props.children);
                    d5.return = a4;
                    a4 = d5;
                    break a;
                  }
                } else if (l3.elementType === k4 || "object" === typeof k4 && null !== k4 && k4.$$typeof === Ha && uh(k4) === l3.type) {
                  c7(a4, l3.sibling);
                  d5 = e3(l3, f3.props);
                  d5.ref = sh(a4, l3, f3);
                  d5.return = a4;
                  a4 = d5;
                  break a;
                }
                c7(a4, l3);
                break;
              } else
                b3(a4, l3);
              l3 = l3.sibling;
            }
            f3.type === ya ? (d5 = Ah(f3.props.children, a4.mode, h5, f3.key), d5.return = a4, a4 = d5) : (h5 = yh(f3.type, f3.key, f3.props, null, a4.mode, h5), h5.ref = sh(a4, d5, f3), h5.return = a4, a4 = h5);
          }
          return g2(a4);
        case wa:
          a: {
            for (l3 = f3.key; null !== d5; ) {
              if (d5.key === l3)
                if (4 === d5.tag && d5.stateNode.containerInfo === f3.containerInfo && d5.stateNode.implementation === f3.implementation) {
                  c7(a4, d5.sibling);
                  d5 = e3(d5, f3.children || []);
                  d5.return = a4;
                  a4 = d5;
                  break a;
                } else {
                  c7(a4, d5);
                  break;
                }
              else
                b3(a4, d5);
              d5 = d5.sibling;
            }
            d5 = zh(f3, a4.mode, h5);
            d5.return = a4;
            a4 = d5;
          }
          return g2(a4);
        case Ha:
          return l3 = f3._init, J2(a4, d5, l3(f3._payload), h5);
      }
      if (eb(f3))
        return n2(a4, d5, f3, h5);
      if (Ka(f3))
        return t3(a4, d5, f3, h5);
      th(a4, f3);
    }
    return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d5 && 6 === d5.tag ? (c7(a4, d5.sibling), d5 = e3(d5, f3), d5.return = a4, a4 = d5) : (c7(a4, d5), d5 = xh(f3, a4.mode, h5), d5.return = a4, a4 = d5), g2(a4)) : c7(a4, d5);
  }
  return J2;
}
var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
function Hh(a3) {
  if (a3 === Dh)
    throw Error(p$1(174));
  return a3;
}
function Ih(a3, b3) {
  G(Gh, b3);
  G(Fh, a3);
  G(Eh, Dh);
  a3 = b3.nodeType;
  switch (a3) {
    case 9:
    case 11:
      b3 = (b3 = b3.documentElement) ? b3.namespaceURI : lb(null, "");
      break;
    default:
      a3 = 8 === a3 ? b3.parentNode : b3, b3 = a3.namespaceURI || null, a3 = a3.tagName, b3 = lb(b3, a3);
  }
  E(Eh);
  G(Eh, b3);
}
function Jh() {
  E(Eh);
  E(Fh);
  E(Gh);
}
function Kh(a3) {
  Hh(Gh.current);
  var b3 = Hh(Eh.current);
  var c7 = lb(b3, a3.type);
  b3 !== c7 && (G(Fh, a3), G(Eh, c7));
}
function Lh(a3) {
  Fh.current === a3 && (E(Eh), E(Fh));
}
var M = Uf(0);
function Mh(a3) {
  for (var b3 = a3; null !== b3; ) {
    if (13 === b3.tag) {
      var c7 = b3.memoizedState;
      if (null !== c7 && (c7 = c7.dehydrated, null === c7 || "$?" === c7.data || "$!" === c7.data))
        return b3;
    } else if (19 === b3.tag && void 0 !== b3.memoizedProps.revealOrder) {
      if (0 !== (b3.flags & 128))
        return b3;
    } else if (null !== b3.child) {
      b3.child.return = b3;
      b3 = b3.child;
      continue;
    }
    if (b3 === a3)
      break;
    for (; null === b3.sibling; ) {
      if (null === b3.return || b3.return === a3)
        return null;
      b3 = b3.return;
    }
    b3.sibling.return = b3.return;
    b3 = b3.sibling;
  }
  return null;
}
var Nh = [];
function Oh() {
  for (var a3 = 0; a3 < Nh.length; a3++)
    Nh[a3]._workInProgressVersionPrimary = null;
  Nh.length = 0;
}
var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N = null, O = null, P = null, Sh = false, Th = false, Uh = 0, Vh = 0;
function Q() {
  throw Error(p$1(321));
}
function Wh(a3, b3) {
  if (null === b3)
    return false;
  for (var c7 = 0; c7 < b3.length && c7 < a3.length; c7++)
    if (!He(a3[c7], b3[c7]))
      return false;
  return true;
}
function Xh(a3, b3, c7, d4, e3, f2) {
  Rh = f2;
  N = b3;
  b3.memoizedState = null;
  b3.updateQueue = null;
  b3.lanes = 0;
  Ph.current = null === a3 || null === a3.memoizedState ? Yh : Zh;
  a3 = c7(d4, e3);
  if (Th) {
    f2 = 0;
    do {
      Th = false;
      Uh = 0;
      if (25 <= f2)
        throw Error(p$1(301));
      f2 += 1;
      P = O = null;
      b3.updateQueue = null;
      Ph.current = $h;
      a3 = c7(d4, e3);
    } while (Th);
  }
  Ph.current = ai;
  b3 = null !== O && null !== O.next;
  Rh = 0;
  P = O = N = null;
  Sh = false;
  if (b3)
    throw Error(p$1(300));
  return a3;
}
function bi() {
  var a3 = 0 !== Uh;
  Uh = 0;
  return a3;
}
function ci() {
  var a3 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  null === P ? N.memoizedState = P = a3 : P = P.next = a3;
  return P;
}
function di() {
  if (null === O) {
    var a3 = N.alternate;
    a3 = null !== a3 ? a3.memoizedState : null;
  } else
    a3 = O.next;
  var b3 = null === P ? N.memoizedState : P.next;
  if (null !== b3)
    P = b3, O = a3;
  else {
    if (null === a3)
      throw Error(p$1(310));
    O = a3;
    a3 = { memoizedState: O.memoizedState, baseState: O.baseState, baseQueue: O.baseQueue, queue: O.queue, next: null };
    null === P ? N.memoizedState = P = a3 : P = P.next = a3;
  }
  return P;
}
function ei(a3, b3) {
  return "function" === typeof b3 ? b3(a3) : b3;
}
function fi(a3) {
  var b3 = di(), c7 = b3.queue;
  if (null === c7)
    throw Error(p$1(311));
  c7.lastRenderedReducer = a3;
  var d4 = O, e3 = d4.baseQueue, f2 = c7.pending;
  if (null !== f2) {
    if (null !== e3) {
      var g2 = e3.next;
      e3.next = f2.next;
      f2.next = g2;
    }
    d4.baseQueue = e3 = f2;
    c7.pending = null;
  }
  if (null !== e3) {
    f2 = e3.next;
    d4 = d4.baseState;
    var h4 = g2 = null, k3 = null, l2 = f2;
    do {
      var m4 = l2.lane;
      if ((Rh & m4) === m4)
        null !== k3 && (k3 = k3.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d4 = l2.hasEagerState ? l2.eagerState : a3(d4, l2.action);
      else {
        var q3 = {
          lane: m4,
          action: l2.action,
          hasEagerState: l2.hasEagerState,
          eagerState: l2.eagerState,
          next: null
        };
        null === k3 ? (h4 = k3 = q3, g2 = d4) : k3 = k3.next = q3;
        N.lanes |= m4;
        hh |= m4;
      }
      l2 = l2.next;
    } while (null !== l2 && l2 !== f2);
    null === k3 ? g2 = d4 : k3.next = h4;
    He(d4, b3.memoizedState) || (Ug = true);
    b3.memoizedState = d4;
    b3.baseState = g2;
    b3.baseQueue = k3;
    c7.lastRenderedState = d4;
  }
  a3 = c7.interleaved;
  if (null !== a3) {
    e3 = a3;
    do
      f2 = e3.lane, N.lanes |= f2, hh |= f2, e3 = e3.next;
    while (e3 !== a3);
  } else
    null === e3 && (c7.lanes = 0);
  return [b3.memoizedState, c7.dispatch];
}
function gi(a3) {
  var b3 = di(), c7 = b3.queue;
  if (null === c7)
    throw Error(p$1(311));
  c7.lastRenderedReducer = a3;
  var d4 = c7.dispatch, e3 = c7.pending, f2 = b3.memoizedState;
  if (null !== e3) {
    c7.pending = null;
    var g2 = e3 = e3.next;
    do
      f2 = a3(f2, g2.action), g2 = g2.next;
    while (g2 !== e3);
    He(f2, b3.memoizedState) || (Ug = true);
    b3.memoizedState = f2;
    null === b3.baseQueue && (b3.baseState = f2);
    c7.lastRenderedState = f2;
  }
  return [f2, d4];
}
function hi() {
}
function ii(a3, b3) {
  var c7 = N, d4 = di(), e3 = b3(), f2 = !He(d4.memoizedState, e3);
  f2 && (d4.memoizedState = e3, Ug = true);
  d4 = d4.queue;
  ji(ki.bind(null, c7, d4, a3), [a3]);
  if (d4.getSnapshot !== b3 || f2 || null !== P && P.memoizedState.tag & 1) {
    c7.flags |= 2048;
    li(9, mi.bind(null, c7, d4, e3, b3), void 0, null);
    if (null === R)
      throw Error(p$1(349));
    0 !== (Rh & 30) || ni(c7, b3, e3);
  }
  return e3;
}
function ni(a3, b3, c7) {
  a3.flags |= 16384;
  a3 = { getSnapshot: b3, value: c7 };
  b3 = N.updateQueue;
  null === b3 ? (b3 = { lastEffect: null, stores: null }, N.updateQueue = b3, b3.stores = [a3]) : (c7 = b3.stores, null === c7 ? b3.stores = [a3] : c7.push(a3));
}
function mi(a3, b3, c7, d4) {
  b3.value = c7;
  b3.getSnapshot = d4;
  oi(b3) && pi(a3);
}
function ki(a3, b3, c7) {
  return c7(function() {
    oi(b3) && pi(a3);
  });
}
function oi(a3) {
  var b3 = a3.getSnapshot;
  a3 = a3.value;
  try {
    var c7 = b3();
    return !He(a3, c7);
  } catch (d4) {
    return true;
  }
}
function pi(a3) {
  var b3 = Zg(a3, 1);
  null !== b3 && mh(b3, a3, 1, -1);
}
function qi(a3) {
  var b3 = ci();
  "function" === typeof a3 && (a3 = a3());
  b3.memoizedState = b3.baseState = a3;
  a3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a3 };
  b3.queue = a3;
  a3 = a3.dispatch = ri.bind(null, N, a3);
  return [b3.memoizedState, a3];
}
function li(a3, b3, c7, d4) {
  a3 = { tag: a3, create: b3, destroy: c7, deps: d4, next: null };
  b3 = N.updateQueue;
  null === b3 ? (b3 = { lastEffect: null, stores: null }, N.updateQueue = b3, b3.lastEffect = a3.next = a3) : (c7 = b3.lastEffect, null === c7 ? b3.lastEffect = a3.next = a3 : (d4 = c7.next, c7.next = a3, a3.next = d4, b3.lastEffect = a3));
  return a3;
}
function si() {
  return di().memoizedState;
}
function ti(a3, b3, c7, d4) {
  var e3 = ci();
  N.flags |= a3;
  e3.memoizedState = li(1 | b3, c7, void 0, void 0 === d4 ? null : d4);
}
function ui(a3, b3, c7, d4) {
  var e3 = di();
  d4 = void 0 === d4 ? null : d4;
  var f2 = void 0;
  if (null !== O) {
    var g2 = O.memoizedState;
    f2 = g2.destroy;
    if (null !== d4 && Wh(d4, g2.deps)) {
      e3.memoizedState = li(b3, c7, f2, d4);
      return;
    }
  }
  N.flags |= a3;
  e3.memoizedState = li(1 | b3, c7, f2, d4);
}
function vi(a3, b3) {
  return ti(8390656, 8, a3, b3);
}
function ji(a3, b3) {
  return ui(2048, 8, a3, b3);
}
function wi(a3, b3) {
  return ui(4, 2, a3, b3);
}
function xi(a3, b3) {
  return ui(4, 4, a3, b3);
}
function yi(a3, b3) {
  if ("function" === typeof b3)
    return a3 = a3(), b3(a3), function() {
      b3(null);
    };
  if (null !== b3 && void 0 !== b3)
    return a3 = a3(), b3.current = a3, function() {
      b3.current = null;
    };
}
function zi(a3, b3, c7) {
  c7 = null !== c7 && void 0 !== c7 ? c7.concat([a3]) : null;
  return ui(4, 4, yi.bind(null, b3, a3), c7);
}
function Ai() {
}
function Bi(a3, b3) {
  var c7 = di();
  b3 = void 0 === b3 ? null : b3;
  var d4 = c7.memoizedState;
  if (null !== d4 && null !== b3 && Wh(b3, d4[1]))
    return d4[0];
  c7.memoizedState = [a3, b3];
  return a3;
}
function Ci(a3, b3) {
  var c7 = di();
  b3 = void 0 === b3 ? null : b3;
  var d4 = c7.memoizedState;
  if (null !== d4 && null !== b3 && Wh(b3, d4[1]))
    return d4[0];
  a3 = a3();
  c7.memoizedState = [a3, b3];
  return a3;
}
function Di(a3, b3, c7) {
  if (0 === (Rh & 21))
    return a3.baseState && (a3.baseState = false, Ug = true), a3.memoizedState = c7;
  He(c7, b3) || (c7 = yc(), N.lanes |= c7, hh |= c7, a3.baseState = true);
  return b3;
}
function Ei(a3, b3) {
  var c7 = C;
  C = 0 !== c7 && 4 > c7 ? c7 : 4;
  a3(true);
  var d4 = Qh.transition;
  Qh.transition = {};
  try {
    a3(false), b3();
  } finally {
    C = c7, Qh.transition = d4;
  }
}
function Fi() {
  return di().memoizedState;
}
function Gi(a3, b3, c7) {
  var d4 = lh(a3);
  c7 = { lane: d4, action: c7, hasEagerState: false, eagerState: null, next: null };
  if (Hi(a3))
    Ii(b3, c7);
  else if (c7 = Yg(a3, b3, c7, d4), null !== c7) {
    var e3 = L();
    mh(c7, a3, d4, e3);
    Ji(c7, b3, d4);
  }
}
function ri(a3, b3, c7) {
  var d4 = lh(a3), e3 = { lane: d4, action: c7, hasEagerState: false, eagerState: null, next: null };
  if (Hi(a3))
    Ii(b3, e3);
  else {
    var f2 = a3.alternate;
    if (0 === a3.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b3.lastRenderedReducer, null !== f2))
      try {
        var g2 = b3.lastRenderedState, h4 = f2(g2, c7);
        e3.hasEagerState = true;
        e3.eagerState = h4;
        if (He(h4, g2)) {
          var k3 = b3.interleaved;
          null === k3 ? (e3.next = e3, Xg(b3)) : (e3.next = k3.next, k3.next = e3);
          b3.interleaved = e3;
          return;
        }
      } catch (l2) {
      } finally {
      }
    c7 = Yg(a3, b3, e3, d4);
    null !== c7 && (e3 = L(), mh(c7, a3, d4, e3), Ji(c7, b3, d4));
  }
}
function Hi(a3) {
  var b3 = a3.alternate;
  return a3 === N || null !== b3 && b3 === N;
}
function Ii(a3, b3) {
  Th = Sh = true;
  var c7 = a3.pending;
  null === c7 ? b3.next = b3 : (b3.next = c7.next, c7.next = b3);
  a3.pending = b3;
}
function Ji(a3, b3, c7) {
  if (0 !== (c7 & 4194240)) {
    var d4 = b3.lanes;
    d4 &= a3.pendingLanes;
    c7 |= d4;
    b3.lanes = c7;
    Cc(a3, c7);
  }
}
var ai = { readContext: Vg, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useInsertionEffect: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useDeferredValue: Q, useTransition: Q, useMutableSource: Q, useSyncExternalStore: Q, useId: Q, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a3, b3) {
  ci().memoizedState = [a3, void 0 === b3 ? null : b3];
  return a3;
}, useContext: Vg, useEffect: vi, useImperativeHandle: function(a3, b3, c7) {
  c7 = null !== c7 && void 0 !== c7 ? c7.concat([a3]) : null;
  return ti(
    4194308,
    4,
    yi.bind(null, b3, a3),
    c7
  );
}, useLayoutEffect: function(a3, b3) {
  return ti(4194308, 4, a3, b3);
}, useInsertionEffect: function(a3, b3) {
  return ti(4, 2, a3, b3);
}, useMemo: function(a3, b3) {
  var c7 = ci();
  b3 = void 0 === b3 ? null : b3;
  a3 = a3();
  c7.memoizedState = [a3, b3];
  return a3;
}, useReducer: function(a3, b3, c7) {
  var d4 = ci();
  b3 = void 0 !== c7 ? c7(b3) : b3;
  d4.memoizedState = d4.baseState = b3;
  a3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a3, lastRenderedState: b3 };
  d4.queue = a3;
  a3 = a3.dispatch = Gi.bind(null, N, a3);
  return [d4.memoizedState, a3];
}, useRef: function(a3) {
  var b3 = ci();
  a3 = { current: a3 };
  return b3.memoizedState = a3;
}, useState: qi, useDebugValue: Ai, useDeferredValue: function(a3) {
  return ci().memoizedState = a3;
}, useTransition: function() {
  var a3 = qi(false), b3 = a3[0];
  a3 = Ei.bind(null, a3[1]);
  ci().memoizedState = a3;
  return [b3, a3];
}, useMutableSource: function() {
}, useSyncExternalStore: function(a3, b3, c7) {
  var d4 = N, e3 = ci();
  if (I) {
    if (void 0 === c7)
      throw Error(p$1(407));
    c7 = c7();
  } else {
    c7 = b3();
    if (null === R)
      throw Error(p$1(349));
    0 !== (Rh & 30) || ni(d4, b3, c7);
  }
  e3.memoizedState = c7;
  var f2 = { value: c7, getSnapshot: b3 };
  e3.queue = f2;
  vi(ki.bind(
    null,
    d4,
    f2,
    a3
  ), [a3]);
  d4.flags |= 2048;
  li(9, mi.bind(null, d4, f2, c7, b3), void 0, null);
  return c7;
}, useId: function() {
  var a3 = ci(), b3 = R.identifierPrefix;
  if (I) {
    var c7 = sg;
    var d4 = rg;
    c7 = (d4 & ~(1 << 32 - oc(d4) - 1)).toString(32) + c7;
    b3 = ":" + b3 + "R" + c7;
    c7 = Uh++;
    0 < c7 && (b3 += "H" + c7.toString(32));
    b3 += ":";
  } else
    c7 = Vh++, b3 = ":" + b3 + "r" + c7.toString(32) + ":";
  return a3.memoizedState = b3;
}, unstable_isNewReconciler: false }, Zh = {
  readContext: Vg,
  useCallback: Bi,
  useContext: Vg,
  useEffect: ji,
  useImperativeHandle: zi,
  useInsertionEffect: wi,
  useLayoutEffect: xi,
  useMemo: Ci,
  useReducer: fi,
  useRef: si,
  useState: function() {
    return fi(ei);
  },
  useDebugValue: Ai,
  useDeferredValue: function(a3) {
    var b3 = di();
    return Di(b3, O.memoizedState, a3);
  },
  useTransition: function() {
    var a3 = fi(ei)[0], b3 = di().memoizedState;
    return [a3, b3];
  },
  useMutableSource: hi,
  useSyncExternalStore: ii,
  useId: Fi,
  unstable_isNewReconciler: false
}, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
  return gi(ei);
}, useDebugValue: Ai, useDeferredValue: function(a3) {
  var b3 = di();
  return null === O ? b3.memoizedState = a3 : Di(b3, O.memoizedState, a3);
}, useTransition: function() {
  var a3 = gi(ei)[0], b3 = di().memoizedState;
  return [a3, b3];
}, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
function Ki(a3, b3) {
  try {
    var c7 = "", d4 = b3;
    do
      c7 += Pa(d4), d4 = d4.return;
    while (d4);
    var e3 = c7;
  } catch (f2) {
    e3 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
  }
  return { value: a3, source: b3, stack: e3, digest: null };
}
function Li(a3, b3, c7) {
  return { value: a3, source: null, stack: null != c7 ? c7 : null, digest: null != b3 ? b3 : null };
}
function Mi(a3, b3) {
  try {
    console.error(b3.value);
  } catch (c7) {
    setTimeout(function() {
      throw c7;
    });
  }
}
var Ni = "function" === typeof WeakMap ? WeakMap : Map;
function Oi(a3, b3, c7) {
  c7 = ch(-1, c7);
  c7.tag = 3;
  c7.payload = { element: null };
  var d4 = b3.value;
  c7.callback = function() {
    Pi || (Pi = true, Qi = d4);
    Mi(a3, b3);
  };
  return c7;
}
function Ri(a3, b3, c7) {
  c7 = ch(-1, c7);
  c7.tag = 3;
  var d4 = a3.type.getDerivedStateFromError;
  if ("function" === typeof d4) {
    var e3 = b3.value;
    c7.payload = function() {
      return d4(e3);
    };
    c7.callback = function() {
      Mi(a3, b3);
    };
  }
  var f2 = a3.stateNode;
  null !== f2 && "function" === typeof f2.componentDidCatch && (c7.callback = function() {
    Mi(a3, b3);
    "function" !== typeof d4 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
    var c8 = b3.stack;
    this.componentDidCatch(b3.value, { componentStack: null !== c8 ? c8 : "" });
  });
  return c7;
}
function Ti(a3, b3, c7) {
  var d4 = a3.pingCache;
  if (null === d4) {
    d4 = a3.pingCache = new Ni();
    var e3 = /* @__PURE__ */ new Set();
    d4.set(b3, e3);
  } else
    e3 = d4.get(b3), void 0 === e3 && (e3 = /* @__PURE__ */ new Set(), d4.set(b3, e3));
  e3.has(c7) || (e3.add(c7), a3 = Ui.bind(null, a3, b3, c7), b3.then(a3, a3));
}
function Vi(a3) {
  do {
    var b3;
    if (b3 = 13 === a3.tag)
      b3 = a3.memoizedState, b3 = null !== b3 ? null !== b3.dehydrated ? true : false : true;
    if (b3)
      return a3;
    a3 = a3.return;
  } while (null !== a3);
  return null;
}
function Wi(a3, b3, c7, d4, e3) {
  if (0 === (a3.mode & 1))
    return a3 === b3 ? a3.flags |= 65536 : (a3.flags |= 128, c7.flags |= 131072, c7.flags &= -52805, 1 === c7.tag && (null === c7.alternate ? c7.tag = 17 : (b3 = ch(-1, 1), b3.tag = 2, dh(c7, b3, 1))), c7.lanes |= 1), a3;
  a3.flags |= 65536;
  a3.lanes = e3;
  return a3;
}
var Xi = ua.ReactCurrentOwner, Ug = false;
function Yi(a3, b3, c7, d4) {
  b3.child = null === a3 ? Ch(b3, null, c7, d4) : Bh(b3, a3.child, c7, d4);
}
function Zi(a3, b3, c7, d4, e3) {
  c7 = c7.render;
  var f2 = b3.ref;
  Tg(b3, e3);
  d4 = Xh(a3, b3, c7, d4, f2, e3);
  c7 = bi();
  if (null !== a3 && !Ug)
    return b3.updateQueue = a3.updateQueue, b3.flags &= -2053, a3.lanes &= ~e3, $i(a3, b3, e3);
  I && c7 && vg(b3);
  b3.flags |= 1;
  Yi(a3, b3, d4, e3);
  return b3.child;
}
function aj(a3, b3, c7, d4, e3) {
  if (null === a3) {
    var f2 = c7.type;
    if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c7.compare && void 0 === c7.defaultProps)
      return b3.tag = 15, b3.type = f2, cj(a3, b3, f2, d4, e3);
    a3 = yh(c7.type, null, d4, b3, b3.mode, e3);
    a3.ref = b3.ref;
    a3.return = b3;
    return b3.child = a3;
  }
  f2 = a3.child;
  if (0 === (a3.lanes & e3)) {
    var g2 = f2.memoizedProps;
    c7 = c7.compare;
    c7 = null !== c7 ? c7 : Ie;
    if (c7(g2, d4) && a3.ref === b3.ref)
      return $i(a3, b3, e3);
  }
  b3.flags |= 1;
  a3 = wh(f2, d4);
  a3.ref = b3.ref;
  a3.return = b3;
  return b3.child = a3;
}
function cj(a3, b3, c7, d4, e3) {
  if (null !== a3) {
    var f2 = a3.memoizedProps;
    if (Ie(f2, d4) && a3.ref === b3.ref)
      if (Ug = false, b3.pendingProps = d4 = f2, 0 !== (a3.lanes & e3))
        0 !== (a3.flags & 131072) && (Ug = true);
      else
        return b3.lanes = a3.lanes, $i(a3, b3, e3);
  }
  return dj(a3, b3, c7, d4, e3);
}
function ej(a3, b3, c7) {
  var d4 = b3.pendingProps, e3 = d4.children, f2 = null !== a3 ? a3.memoizedState : null;
  if ("hidden" === d4.mode)
    if (0 === (b3.mode & 1))
      b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(fj, gj), gj |= c7;
    else {
      if (0 === (c7 & 1073741824))
        return a3 = null !== f2 ? f2.baseLanes | c7 : c7, b3.lanes = b3.childLanes = 1073741824, b3.memoizedState = { baseLanes: a3, cachePool: null, transitions: null }, b3.updateQueue = null, G(fj, gj), gj |= a3, null;
      b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
      d4 = null !== f2 ? f2.baseLanes : c7;
      G(fj, gj);
      gj |= d4;
    }
  else
    null !== f2 ? (d4 = f2.baseLanes | c7, b3.memoizedState = null) : d4 = c7, G(fj, gj), gj |= d4;
  Yi(a3, b3, e3, c7);
  return b3.child;
}
function hj(a3, b3) {
  var c7 = b3.ref;
  if (null === a3 && null !== c7 || null !== a3 && a3.ref !== c7)
    b3.flags |= 512, b3.flags |= 2097152;
}
function dj(a3, b3, c7, d4, e3) {
  var f2 = Zf(c7) ? Xf : H.current;
  f2 = Yf(b3, f2);
  Tg(b3, e3);
  c7 = Xh(a3, b3, c7, d4, f2, e3);
  d4 = bi();
  if (null !== a3 && !Ug)
    return b3.updateQueue = a3.updateQueue, b3.flags &= -2053, a3.lanes &= ~e3, $i(a3, b3, e3);
  I && d4 && vg(b3);
  b3.flags |= 1;
  Yi(a3, b3, c7, e3);
  return b3.child;
}
function ij(a3, b3, c7, d4, e3) {
  if (Zf(c7)) {
    var f2 = true;
    cg(b3);
  } else
    f2 = false;
  Tg(b3, e3);
  if (null === b3.stateNode)
    jj(a3, b3), ph(b3, c7, d4), rh(b3, c7, d4, e3), d4 = true;
  else if (null === a3) {
    var g2 = b3.stateNode, h4 = b3.memoizedProps;
    g2.props = h4;
    var k3 = g2.context, l2 = c7.contextType;
    "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c7) ? Xf : H.current, l2 = Yf(b3, l2));
    var m4 = c7.getDerivedStateFromProps, q3 = "function" === typeof m4 || "function" === typeof g2.getSnapshotBeforeUpdate;
    q3 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h4 !== d4 || k3 !== l2) && qh(b3, g2, d4, l2);
    $g = false;
    var r2 = b3.memoizedState;
    g2.state = r2;
    gh(b3, d4, g2, e3);
    k3 = b3.memoizedState;
    h4 !== d4 || r2 !== k3 || Wf.current || $g ? ("function" === typeof m4 && (kh(b3, c7, m4, d4), k3 = b3.memoizedState), (h4 = $g || oh(b3, c7, h4, d4, r2, k3, l2)) ? (q3 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b3.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b3.flags |= 4194308), b3.memoizedProps = d4, b3.memoizedState = k3), g2.props = d4, g2.state = k3, g2.context = l2, d4 = h4) : ("function" === typeof g2.componentDidMount && (b3.flags |= 4194308), d4 = false);
  } else {
    g2 = b3.stateNode;
    bh(a3, b3);
    h4 = b3.memoizedProps;
    l2 = b3.type === b3.elementType ? h4 : Lg(b3.type, h4);
    g2.props = l2;
    q3 = b3.pendingProps;
    r2 = g2.context;
    k3 = c7.contextType;
    "object" === typeof k3 && null !== k3 ? k3 = Vg(k3) : (k3 = Zf(c7) ? Xf : H.current, k3 = Yf(b3, k3));
    var y4 = c7.getDerivedStateFromProps;
    (m4 = "function" === typeof y4 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h4 !== q3 || r2 !== k3) && qh(b3, g2, d4, k3);
    $g = false;
    r2 = b3.memoizedState;
    g2.state = r2;
    gh(b3, d4, g2, e3);
    var n2 = b3.memoizedState;
    h4 !== q3 || r2 !== n2 || Wf.current || $g ? ("function" === typeof y4 && (kh(b3, c7, y4, d4), n2 = b3.memoizedState), (l2 = $g || oh(b3, c7, l2, d4, r2, n2, k3) || false) ? (m4 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d4, n2, k3), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d4, n2, k3)), "function" === typeof g2.componentDidUpdate && (b3.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b3.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h4 === a3.memoizedProps && r2 === a3.memoizedState || (b3.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h4 === a3.memoizedProps && r2 === a3.memoizedState || (b3.flags |= 1024), b3.memoizedProps = d4, b3.memoizedState = n2), g2.props = d4, g2.state = n2, g2.context = k3, d4 = l2) : ("function" !== typeof g2.componentDidUpdate || h4 === a3.memoizedProps && r2 === a3.memoizedState || (b3.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h4 === a3.memoizedProps && r2 === a3.memoizedState || (b3.flags |= 1024), d4 = false);
  }
  return kj(a3, b3, c7, d4, f2, e3);
}
function kj(a3, b3, c7, d4, e3, f2) {
  hj(a3, b3);
  var g2 = 0 !== (b3.flags & 128);
  if (!d4 && !g2)
    return e3 && dg(b3, c7, false), $i(a3, b3, f2);
  d4 = b3.stateNode;
  Xi.current = b3;
  var h4 = g2 && "function" !== typeof c7.getDerivedStateFromError ? null : d4.render();
  b3.flags |= 1;
  null !== a3 && g2 ? (b3.child = Bh(b3, a3.child, null, f2), b3.child = Bh(b3, null, h4, f2)) : Yi(a3, b3, h4, f2);
  b3.memoizedState = d4.state;
  e3 && dg(b3, c7, true);
  return b3.child;
}
function lj(a3) {
  var b3 = a3.stateNode;
  b3.pendingContext ? ag(a3, b3.pendingContext, b3.pendingContext !== b3.context) : b3.context && ag(a3, b3.context, false);
  Ih(a3, b3.containerInfo);
}
function mj(a3, b3, c7, d4, e3) {
  Ig();
  Jg(e3);
  b3.flags |= 256;
  Yi(a3, b3, c7, d4);
  return b3.child;
}
var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
function oj(a3) {
  return { baseLanes: a3, cachePool: null, transitions: null };
}
function pj(a3, b3, c7) {
  var d4 = b3.pendingProps, e3 = M.current, f2 = false, g2 = 0 !== (b3.flags & 128), h4;
  (h4 = g2) || (h4 = null !== a3 && null === a3.memoizedState ? false : 0 !== (e3 & 2));
  if (h4)
    f2 = true, b3.flags &= -129;
  else if (null === a3 || null !== a3.memoizedState)
    e3 |= 1;
  G(M, e3 & 1);
  if (null === a3) {
    Eg(b3);
    a3 = b3.memoizedState;
    if (null !== a3 && (a3 = a3.dehydrated, null !== a3))
      return 0 === (b3.mode & 1) ? b3.lanes = 1 : "$!" === a3.data ? b3.lanes = 8 : b3.lanes = 1073741824, null;
    g2 = d4.children;
    a3 = d4.fallback;
    return f2 ? (d4 = b3.mode, f2 = b3.child, g2 = { mode: "hidden", children: g2 }, 0 === (d4 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d4, 0, null), a3 = Ah(a3, d4, c7, null), f2.return = b3, a3.return = b3, f2.sibling = a3, b3.child = f2, b3.child.memoizedState = oj(c7), b3.memoizedState = nj, a3) : rj(b3, g2);
  }
  e3 = a3.memoizedState;
  if (null !== e3 && (h4 = e3.dehydrated, null !== h4))
    return sj(a3, b3, g2, d4, h4, e3, c7);
  if (f2) {
    f2 = d4.fallback;
    g2 = b3.mode;
    e3 = a3.child;
    h4 = e3.sibling;
    var k3 = { mode: "hidden", children: d4.children };
    0 === (g2 & 1) && b3.child !== e3 ? (d4 = b3.child, d4.childLanes = 0, d4.pendingProps = k3, b3.deletions = null) : (d4 = wh(e3, k3), d4.subtreeFlags = e3.subtreeFlags & 14680064);
    null !== h4 ? f2 = wh(h4, f2) : (f2 = Ah(f2, g2, c7, null), f2.flags |= 2);
    f2.return = b3;
    d4.return = b3;
    d4.sibling = f2;
    b3.child = d4;
    d4 = f2;
    f2 = b3.child;
    g2 = a3.child.memoizedState;
    g2 = null === g2 ? oj(c7) : { baseLanes: g2.baseLanes | c7, cachePool: null, transitions: g2.transitions };
    f2.memoizedState = g2;
    f2.childLanes = a3.childLanes & ~c7;
    b3.memoizedState = nj;
    return d4;
  }
  f2 = a3.child;
  a3 = f2.sibling;
  d4 = wh(f2, { mode: "visible", children: d4.children });
  0 === (b3.mode & 1) && (d4.lanes = c7);
  d4.return = b3;
  d4.sibling = null;
  null !== a3 && (c7 = b3.deletions, null === c7 ? (b3.deletions = [a3], b3.flags |= 16) : c7.push(a3));
  b3.child = d4;
  b3.memoizedState = null;
  return d4;
}
function rj(a3, b3) {
  b3 = qj({ mode: "visible", children: b3 }, a3.mode, 0, null);
  b3.return = a3;
  return a3.child = b3;
}
function tj(a3, b3, c7, d4) {
  null !== d4 && Jg(d4);
  Bh(b3, a3.child, null, c7);
  a3 = rj(b3, b3.pendingProps.children);
  a3.flags |= 2;
  b3.memoizedState = null;
  return a3;
}
function sj(a3, b3, c7, d4, e3, f2, g2) {
  if (c7) {
    if (b3.flags & 256)
      return b3.flags &= -257, d4 = Li(Error(p$1(422))), tj(a3, b3, g2, d4);
    if (null !== b3.memoizedState)
      return b3.child = a3.child, b3.flags |= 128, null;
    f2 = d4.fallback;
    e3 = b3.mode;
    d4 = qj({ mode: "visible", children: d4.children }, e3, 0, null);
    f2 = Ah(f2, e3, g2, null);
    f2.flags |= 2;
    d4.return = b3;
    f2.return = b3;
    d4.sibling = f2;
    b3.child = d4;
    0 !== (b3.mode & 1) && Bh(b3, a3.child, null, g2);
    b3.child.memoizedState = oj(g2);
    b3.memoizedState = nj;
    return f2;
  }
  if (0 === (b3.mode & 1))
    return tj(a3, b3, g2, null);
  if ("$!" === e3.data) {
    d4 = e3.nextSibling && e3.nextSibling.dataset;
    if (d4)
      var h4 = d4.dgst;
    d4 = h4;
    f2 = Error(p$1(419));
    d4 = Li(f2, d4, void 0);
    return tj(a3, b3, g2, d4);
  }
  h4 = 0 !== (g2 & a3.childLanes);
  if (Ug || h4) {
    d4 = R;
    if (null !== d4) {
      switch (g2 & -g2) {
        case 4:
          e3 = 2;
          break;
        case 16:
          e3 = 8;
          break;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          e3 = 32;
          break;
        case 536870912:
          e3 = 268435456;
          break;
        default:
          e3 = 0;
      }
      e3 = 0 !== (e3 & (d4.suspendedLanes | g2)) ? 0 : e3;
      0 !== e3 && e3 !== f2.retryLane && (f2.retryLane = e3, Zg(a3, e3), mh(d4, a3, e3, -1));
    }
    uj();
    d4 = Li(Error(p$1(421)));
    return tj(a3, b3, g2, d4);
  }
  if ("$?" === e3.data)
    return b3.flags |= 128, b3.child = a3.child, b3 = vj.bind(null, a3), e3._reactRetry = b3, null;
  a3 = f2.treeContext;
  yg = Lf(e3.nextSibling);
  xg = b3;
  I = true;
  zg = null;
  null !== a3 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a3.id, sg = a3.overflow, qg = b3);
  b3 = rj(b3, d4.children);
  b3.flags |= 4096;
  return b3;
}
function wj(a3, b3, c7) {
  a3.lanes |= b3;
  var d4 = a3.alternate;
  null !== d4 && (d4.lanes |= b3);
  Sg(a3.return, b3, c7);
}
function xj(a3, b3, c7, d4, e3) {
  var f2 = a3.memoizedState;
  null === f2 ? a3.memoizedState = { isBackwards: b3, rendering: null, renderingStartTime: 0, last: d4, tail: c7, tailMode: e3 } : (f2.isBackwards = b3, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d4, f2.tail = c7, f2.tailMode = e3);
}
function yj(a3, b3, c7) {
  var d4 = b3.pendingProps, e3 = d4.revealOrder, f2 = d4.tail;
  Yi(a3, b3, d4.children, c7);
  d4 = M.current;
  if (0 !== (d4 & 2))
    d4 = d4 & 1 | 2, b3.flags |= 128;
  else {
    if (null !== a3 && 0 !== (a3.flags & 128))
      a:
        for (a3 = b3.child; null !== a3; ) {
          if (13 === a3.tag)
            null !== a3.memoizedState && wj(a3, c7, b3);
          else if (19 === a3.tag)
            wj(a3, c7, b3);
          else if (null !== a3.child) {
            a3.child.return = a3;
            a3 = a3.child;
            continue;
          }
          if (a3 === b3)
            break a;
          for (; null === a3.sibling; ) {
            if (null === a3.return || a3.return === b3)
              break a;
            a3 = a3.return;
          }
          a3.sibling.return = a3.return;
          a3 = a3.sibling;
        }
    d4 &= 1;
  }
  G(M, d4);
  if (0 === (b3.mode & 1))
    b3.memoizedState = null;
  else
    switch (e3) {
      case "forwards":
        c7 = b3.child;
        for (e3 = null; null !== c7; )
          a3 = c7.alternate, null !== a3 && null === Mh(a3) && (e3 = c7), c7 = c7.sibling;
        c7 = e3;
        null === c7 ? (e3 = b3.child, b3.child = null) : (e3 = c7.sibling, c7.sibling = null);
        xj(b3, false, e3, c7, f2);
        break;
      case "backwards":
        c7 = null;
        e3 = b3.child;
        for (b3.child = null; null !== e3; ) {
          a3 = e3.alternate;
          if (null !== a3 && null === Mh(a3)) {
            b3.child = e3;
            break;
          }
          a3 = e3.sibling;
          e3.sibling = c7;
          c7 = e3;
          e3 = a3;
        }
        xj(b3, true, c7, null, f2);
        break;
      case "together":
        xj(b3, false, null, null, void 0);
        break;
      default:
        b3.memoizedState = null;
    }
  return b3.child;
}
function jj(a3, b3) {
  0 === (b3.mode & 1) && null !== a3 && (a3.alternate = null, b3.alternate = null, b3.flags |= 2);
}
function $i(a3, b3, c7) {
  null !== a3 && (b3.dependencies = a3.dependencies);
  hh |= b3.lanes;
  if (0 === (c7 & b3.childLanes))
    return null;
  if (null !== a3 && b3.child !== a3.child)
    throw Error(p$1(153));
  if (null !== b3.child) {
    a3 = b3.child;
    c7 = wh(a3, a3.pendingProps);
    b3.child = c7;
    for (c7.return = b3; null !== a3.sibling; )
      a3 = a3.sibling, c7 = c7.sibling = wh(a3, a3.pendingProps), c7.return = b3;
    c7.sibling = null;
  }
  return b3.child;
}
function zj(a3, b3, c7) {
  switch (b3.tag) {
    case 3:
      lj(b3);
      Ig();
      break;
    case 5:
      Kh(b3);
      break;
    case 1:
      Zf(b3.type) && cg(b3);
      break;
    case 4:
      Ih(b3, b3.stateNode.containerInfo);
      break;
    case 10:
      var d4 = b3.type._context, e3 = b3.memoizedProps.value;
      G(Mg, d4._currentValue);
      d4._currentValue = e3;
      break;
    case 13:
      d4 = b3.memoizedState;
      if (null !== d4) {
        if (null !== d4.dehydrated)
          return G(M, M.current & 1), b3.flags |= 128, null;
        if (0 !== (c7 & b3.child.childLanes))
          return pj(a3, b3, c7);
        G(M, M.current & 1);
        a3 = $i(a3, b3, c7);
        return null !== a3 ? a3.sibling : null;
      }
      G(M, M.current & 1);
      break;
    case 19:
      d4 = 0 !== (c7 & b3.childLanes);
      if (0 !== (a3.flags & 128)) {
        if (d4)
          return yj(a3, b3, c7);
        b3.flags |= 128;
      }
      e3 = b3.memoizedState;
      null !== e3 && (e3.rendering = null, e3.tail = null, e3.lastEffect = null);
      G(M, M.current);
      if (d4)
        break;
      else
        return null;
    case 22:
    case 23:
      return b3.lanes = 0, ej(a3, b3, c7);
  }
  return $i(a3, b3, c7);
}
var Aj, Bj, Cj, Dj;
Aj = function(a3, b3) {
  for (var c7 = b3.child; null !== c7; ) {
    if (5 === c7.tag || 6 === c7.tag)
      a3.appendChild(c7.stateNode);
    else if (4 !== c7.tag && null !== c7.child) {
      c7.child.return = c7;
      c7 = c7.child;
      continue;
    }
    if (c7 === b3)
      break;
    for (; null === c7.sibling; ) {
      if (null === c7.return || c7.return === b3)
        return;
      c7 = c7.return;
    }
    c7.sibling.return = c7.return;
    c7 = c7.sibling;
  }
};
Bj = function() {
};
Cj = function(a3, b3, c7, d4) {
  var e3 = a3.memoizedProps;
  if (e3 !== d4) {
    a3 = b3.stateNode;
    Hh(Eh.current);
    var f2 = null;
    switch (c7) {
      case "input":
        e3 = Ya(a3, e3);
        d4 = Ya(a3, d4);
        f2 = [];
        break;
      case "select":
        e3 = A$1({}, e3, { value: void 0 });
        d4 = A$1({}, d4, { value: void 0 });
        f2 = [];
        break;
      case "textarea":
        e3 = gb(a3, e3);
        d4 = gb(a3, d4);
        f2 = [];
        break;
      default:
        "function" !== typeof e3.onClick && "function" === typeof d4.onClick && (a3.onclick = Bf);
    }
    ub(c7, d4);
    var g2;
    c7 = null;
    for (l2 in e3)
      if (!d4.hasOwnProperty(l2) && e3.hasOwnProperty(l2) && null != e3[l2])
        if ("style" === l2) {
          var h4 = e3[l2];
          for (g2 in h4)
            h4.hasOwnProperty(g2) && (c7 || (c7 = {}), c7[g2] = "");
        } else
          "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
    for (l2 in d4) {
      var k3 = d4[l2];
      h4 = null != e3 ? e3[l2] : void 0;
      if (d4.hasOwnProperty(l2) && k3 !== h4 && (null != k3 || null != h4))
        if ("style" === l2)
          if (h4) {
            for (g2 in h4)
              !h4.hasOwnProperty(g2) || k3 && k3.hasOwnProperty(g2) || (c7 || (c7 = {}), c7[g2] = "");
            for (g2 in k3)
              k3.hasOwnProperty(g2) && h4[g2] !== k3[g2] && (c7 || (c7 = {}), c7[g2] = k3[g2]);
          } else
            c7 || (f2 || (f2 = []), f2.push(
              l2,
              c7
            )), c7 = k3;
        else
          "dangerouslySetInnerHTML" === l2 ? (k3 = k3 ? k3.__html : void 0, h4 = h4 ? h4.__html : void 0, null != k3 && h4 !== k3 && (f2 = f2 || []).push(l2, k3)) : "children" === l2 ? "string" !== typeof k3 && "number" !== typeof k3 || (f2 = f2 || []).push(l2, "" + k3) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k3 && "onScroll" === l2 && D("scroll", a3), f2 || h4 === k3 || (f2 = [])) : (f2 = f2 || []).push(l2, k3));
    }
    c7 && (f2 = f2 || []).push("style", c7);
    var l2 = f2;
    if (b3.updateQueue = l2)
      b3.flags |= 4;
  }
};
Dj = function(a3, b3, c7, d4) {
  c7 !== d4 && (b3.flags |= 4);
};
function Ej(a3, b3) {
  if (!I)
    switch (a3.tailMode) {
      case "hidden":
        b3 = a3.tail;
        for (var c7 = null; null !== b3; )
          null !== b3.alternate && (c7 = b3), b3 = b3.sibling;
        null === c7 ? a3.tail = null : c7.sibling = null;
        break;
      case "collapsed":
        c7 = a3.tail;
        for (var d4 = null; null !== c7; )
          null !== c7.alternate && (d4 = c7), c7 = c7.sibling;
        null === d4 ? b3 || null === a3.tail ? a3.tail = null : a3.tail.sibling = null : d4.sibling = null;
    }
}
function S(a3) {
  var b3 = null !== a3.alternate && a3.alternate.child === a3.child, c7 = 0, d4 = 0;
  if (b3)
    for (var e3 = a3.child; null !== e3; )
      c7 |= e3.lanes | e3.childLanes, d4 |= e3.subtreeFlags & 14680064, d4 |= e3.flags & 14680064, e3.return = a3, e3 = e3.sibling;
  else
    for (e3 = a3.child; null !== e3; )
      c7 |= e3.lanes | e3.childLanes, d4 |= e3.subtreeFlags, d4 |= e3.flags, e3.return = a3, e3 = e3.sibling;
  a3.subtreeFlags |= d4;
  a3.childLanes = c7;
  return b3;
}
function Fj(a3, b3, c7) {
  var d4 = b3.pendingProps;
  wg(b3);
  switch (b3.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return S(b3), null;
    case 1:
      return Zf(b3.type) && $f(), S(b3), null;
    case 3:
      d4 = b3.stateNode;
      Jh();
      E(Wf);
      E(H);
      Oh();
      d4.pendingContext && (d4.context = d4.pendingContext, d4.pendingContext = null);
      if (null === a3 || null === a3.child)
        Gg(b3) ? b3.flags |= 4 : null === a3 || a3.memoizedState.isDehydrated && 0 === (b3.flags & 256) || (b3.flags |= 1024, null !== zg && (Gj(zg), zg = null));
      Bj(a3, b3);
      S(b3);
      return null;
    case 5:
      Lh(b3);
      var e3 = Hh(Gh.current);
      c7 = b3.type;
      if (null !== a3 && null != b3.stateNode)
        Cj(a3, b3, c7, d4, e3), a3.ref !== b3.ref && (b3.flags |= 512, b3.flags |= 2097152);
      else {
        if (!d4) {
          if (null === b3.stateNode)
            throw Error(p$1(166));
          S(b3);
          return null;
        }
        a3 = Hh(Eh.current);
        if (Gg(b3)) {
          d4 = b3.stateNode;
          c7 = b3.type;
          var f2 = b3.memoizedProps;
          d4[Of] = b3;
          d4[Pf] = f2;
          a3 = 0 !== (b3.mode & 1);
          switch (c7) {
            case "dialog":
              D("cancel", d4);
              D("close", d4);
              break;
            case "iframe":
            case "object":
            case "embed":
              D("load", d4);
              break;
            case "video":
            case "audio":
              for (e3 = 0; e3 < lf.length; e3++)
                D(lf[e3], d4);
              break;
            case "source":
              D("error", d4);
              break;
            case "img":
            case "image":
            case "link":
              D(
                "error",
                d4
              );
              D("load", d4);
              break;
            case "details":
              D("toggle", d4);
              break;
            case "input":
              Za(d4, f2);
              D("invalid", d4);
              break;
            case "select":
              d4._wrapperState = { wasMultiple: !!f2.multiple };
              D("invalid", d4);
              break;
            case "textarea":
              hb(d4, f2), D("invalid", d4);
          }
          ub(c7, f2);
          e3 = null;
          for (var g2 in f2)
            if (f2.hasOwnProperty(g2)) {
              var h4 = f2[g2];
              "children" === g2 ? "string" === typeof h4 ? d4.textContent !== h4 && (true !== f2.suppressHydrationWarning && Af(d4.textContent, h4, a3), e3 = ["children", h4]) : "number" === typeof h4 && d4.textContent !== "" + h4 && (true !== f2.suppressHydrationWarning && Af(
                d4.textContent,
                h4,
                a3
              ), e3 = ["children", "" + h4]) : ea.hasOwnProperty(g2) && null != h4 && "onScroll" === g2 && D("scroll", d4);
            }
          switch (c7) {
            case "input":
              Va(d4);
              db(d4, f2, true);
              break;
            case "textarea":
              Va(d4);
              jb(d4);
              break;
            case "select":
            case "option":
              break;
            default:
              "function" === typeof f2.onClick && (d4.onclick = Bf);
          }
          d4 = e3;
          b3.updateQueue = d4;
          null !== d4 && (b3.flags |= 4);
        } else {
          g2 = 9 === e3.nodeType ? e3 : e3.ownerDocument;
          "http://www.w3.org/1999/xhtml" === a3 && (a3 = kb(c7));
          "http://www.w3.org/1999/xhtml" === a3 ? "script" === c7 ? (a3 = g2.createElement("div"), a3.innerHTML = "<script><\/script>", a3 = a3.removeChild(a3.firstChild)) : "string" === typeof d4.is ? a3 = g2.createElement(c7, { is: d4.is }) : (a3 = g2.createElement(c7), "select" === c7 && (g2 = a3, d4.multiple ? g2.multiple = true : d4.size && (g2.size = d4.size))) : a3 = g2.createElementNS(a3, c7);
          a3[Of] = b3;
          a3[Pf] = d4;
          Aj(a3, b3, false, false);
          b3.stateNode = a3;
          a: {
            g2 = vb(c7, d4);
            switch (c7) {
              case "dialog":
                D("cancel", a3);
                D("close", a3);
                e3 = d4;
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", a3);
                e3 = d4;
                break;
              case "video":
              case "audio":
                for (e3 = 0; e3 < lf.length; e3++)
                  D(lf[e3], a3);
                e3 = d4;
                break;
              case "source":
                D("error", a3);
                e3 = d4;
                break;
              case "img":
              case "image":
              case "link":
                D(
                  "error",
                  a3
                );
                D("load", a3);
                e3 = d4;
                break;
              case "details":
                D("toggle", a3);
                e3 = d4;
                break;
              case "input":
                Za(a3, d4);
                e3 = Ya(a3, d4);
                D("invalid", a3);
                break;
              case "option":
                e3 = d4;
                break;
              case "select":
                a3._wrapperState = { wasMultiple: !!d4.multiple };
                e3 = A$1({}, d4, { value: void 0 });
                D("invalid", a3);
                break;
              case "textarea":
                hb(a3, d4);
                e3 = gb(a3, d4);
                D("invalid", a3);
                break;
              default:
                e3 = d4;
            }
            ub(c7, e3);
            h4 = e3;
            for (f2 in h4)
              if (h4.hasOwnProperty(f2)) {
                var k3 = h4[f2];
                "style" === f2 ? sb(a3, k3) : "dangerouslySetInnerHTML" === f2 ? (k3 = k3 ? k3.__html : void 0, null != k3 && nb(a3, k3)) : "children" === f2 ? "string" === typeof k3 ? ("textarea" !== c7 || "" !== k3) && ob(a3, k3) : "number" === typeof k3 && ob(a3, "" + k3) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k3 && "onScroll" === f2 && D("scroll", a3) : null != k3 && ta(a3, f2, k3, g2));
              }
            switch (c7) {
              case "input":
                Va(a3);
                db(a3, d4, false);
                break;
              case "textarea":
                Va(a3);
                jb(a3);
                break;
              case "option":
                null != d4.value && a3.setAttribute("value", "" + Sa(d4.value));
                break;
              case "select":
                a3.multiple = !!d4.multiple;
                f2 = d4.value;
                null != f2 ? fb(a3, !!d4.multiple, f2, false) : null != d4.defaultValue && fb(
                  a3,
                  !!d4.multiple,
                  d4.defaultValue,
                  true
                );
                break;
              default:
                "function" === typeof e3.onClick && (a3.onclick = Bf);
            }
            switch (c7) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                d4 = !!d4.autoFocus;
                break a;
              case "img":
                d4 = true;
                break a;
              default:
                d4 = false;
            }
          }
          d4 && (b3.flags |= 4);
        }
        null !== b3.ref && (b3.flags |= 512, b3.flags |= 2097152);
      }
      S(b3);
      return null;
    case 6:
      if (a3 && null != b3.stateNode)
        Dj(a3, b3, a3.memoizedProps, d4);
      else {
        if ("string" !== typeof d4 && null === b3.stateNode)
          throw Error(p$1(166));
        c7 = Hh(Gh.current);
        Hh(Eh.current);
        if (Gg(b3)) {
          d4 = b3.stateNode;
          c7 = b3.memoizedProps;
          d4[Of] = b3;
          if (f2 = d4.nodeValue !== c7) {
            if (a3 = xg, null !== a3)
              switch (a3.tag) {
                case 3:
                  Af(d4.nodeValue, c7, 0 !== (a3.mode & 1));
                  break;
                case 5:
                  true !== a3.memoizedProps.suppressHydrationWarning && Af(d4.nodeValue, c7, 0 !== (a3.mode & 1));
              }
          }
          f2 && (b3.flags |= 4);
        } else
          d4 = (9 === c7.nodeType ? c7 : c7.ownerDocument).createTextNode(d4), d4[Of] = b3, b3.stateNode = d4;
      }
      S(b3);
      return null;
    case 13:
      E(M);
      d4 = b3.memoizedState;
      if (null === a3 || null !== a3.memoizedState && null !== a3.memoizedState.dehydrated) {
        if (I && null !== yg && 0 !== (b3.mode & 1) && 0 === (b3.flags & 128))
          Hg(), Ig(), b3.flags |= 98560, f2 = false;
        else if (f2 = Gg(b3), null !== d4 && null !== d4.dehydrated) {
          if (null === a3) {
            if (!f2)
              throw Error(p$1(318));
            f2 = b3.memoizedState;
            f2 = null !== f2 ? f2.dehydrated : null;
            if (!f2)
              throw Error(p$1(317));
            f2[Of] = b3;
          } else
            Ig(), 0 === (b3.flags & 128) && (b3.memoizedState = null), b3.flags |= 4;
          S(b3);
          f2 = false;
        } else
          null !== zg && (Gj(zg), zg = null), f2 = true;
        if (!f2)
          return b3.flags & 65536 ? b3 : null;
      }
      if (0 !== (b3.flags & 128))
        return b3.lanes = c7, b3;
      d4 = null !== d4;
      d4 !== (null !== a3 && null !== a3.memoizedState) && d4 && (b3.child.flags |= 8192, 0 !== (b3.mode & 1) && (null === a3 || 0 !== (M.current & 1) ? 0 === T && (T = 3) : uj()));
      null !== b3.updateQueue && (b3.flags |= 4);
      S(b3);
      return null;
    case 4:
      return Jh(), Bj(a3, b3), null === a3 && sf(b3.stateNode.containerInfo), S(b3), null;
    case 10:
      return Rg(b3.type._context), S(b3), null;
    case 17:
      return Zf(b3.type) && $f(), S(b3), null;
    case 19:
      E(M);
      f2 = b3.memoizedState;
      if (null === f2)
        return S(b3), null;
      d4 = 0 !== (b3.flags & 128);
      g2 = f2.rendering;
      if (null === g2)
        if (d4)
          Ej(f2, false);
        else {
          if (0 !== T || null !== a3 && 0 !== (a3.flags & 128))
            for (a3 = b3.child; null !== a3; ) {
              g2 = Mh(a3);
              if (null !== g2) {
                b3.flags |= 128;
                Ej(f2, false);
                d4 = g2.updateQueue;
                null !== d4 && (b3.updateQueue = d4, b3.flags |= 4);
                b3.subtreeFlags = 0;
                d4 = c7;
                for (c7 = b3.child; null !== c7; )
                  f2 = c7, a3 = d4, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a3, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a3 = g2.dependencies, f2.dependencies = null === a3 ? null : { lanes: a3.lanes, firstContext: a3.firstContext }), c7 = c7.sibling;
                G(M, M.current & 1 | 2);
                return b3.child;
              }
              a3 = a3.sibling;
            }
          null !== f2.tail && B() > Hj && (b3.flags |= 128, d4 = true, Ej(f2, false), b3.lanes = 4194304);
        }
      else {
        if (!d4)
          if (a3 = Mh(g2), null !== a3) {
            if (b3.flags |= 128, d4 = true, c7 = a3.updateQueue, null !== c7 && (b3.updateQueue = c7, b3.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I)
              return S(b3), null;
          } else
            2 * B() - f2.renderingStartTime > Hj && 1073741824 !== c7 && (b3.flags |= 128, d4 = true, Ej(f2, false), b3.lanes = 4194304);
        f2.isBackwards ? (g2.sibling = b3.child, b3.child = g2) : (c7 = f2.last, null !== c7 ? c7.sibling = g2 : b3.child = g2, f2.last = g2);
      }
      if (null !== f2.tail)
        return b3 = f2.tail, f2.rendering = b3, f2.tail = b3.sibling, f2.renderingStartTime = B(), b3.sibling = null, c7 = M.current, G(M, d4 ? c7 & 1 | 2 : c7 & 1), b3;
      S(b3);
      return null;
    case 22:
    case 23:
      return Ij(), d4 = null !== b3.memoizedState, null !== a3 && null !== a3.memoizedState !== d4 && (b3.flags |= 8192), d4 && 0 !== (b3.mode & 1) ? 0 !== (gj & 1073741824) && (S(b3), b3.subtreeFlags & 6 && (b3.flags |= 8192)) : S(b3), null;
    case 24:
      return null;
    case 25:
      return null;
  }
  throw Error(p$1(156, b3.tag));
}
function Jj(a3, b3) {
  wg(b3);
  switch (b3.tag) {
    case 1:
      return Zf(b3.type) && $f(), a3 = b3.flags, a3 & 65536 ? (b3.flags = a3 & -65537 | 128, b3) : null;
    case 3:
      return Jh(), E(Wf), E(H), Oh(), a3 = b3.flags, 0 !== (a3 & 65536) && 0 === (a3 & 128) ? (b3.flags = a3 & -65537 | 128, b3) : null;
    case 5:
      return Lh(b3), null;
    case 13:
      E(M);
      a3 = b3.memoizedState;
      if (null !== a3 && null !== a3.dehydrated) {
        if (null === b3.alternate)
          throw Error(p$1(340));
        Ig();
      }
      a3 = b3.flags;
      return a3 & 65536 ? (b3.flags = a3 & -65537 | 128, b3) : null;
    case 19:
      return E(M), null;
    case 4:
      return Jh(), null;
    case 10:
      return Rg(b3.type._context), null;
    case 22:
    case 23:
      return Ij(), null;
    case 24:
      return null;
    default:
      return null;
  }
}
var Kj = false, U = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
function Mj(a3, b3) {
  var c7 = a3.ref;
  if (null !== c7)
    if ("function" === typeof c7)
      try {
        c7(null);
      } catch (d4) {
        W(a3, b3, d4);
      }
    else
      c7.current = null;
}
function Nj(a3, b3, c7) {
  try {
    c7();
  } catch (d4) {
    W(a3, b3, d4);
  }
}
var Oj = false;
function Pj(a3, b3) {
  Cf = dd$1;
  a3 = Me();
  if (Ne(a3)) {
    if ("selectionStart" in a3)
      var c7 = { start: a3.selectionStart, end: a3.selectionEnd };
    else
      a: {
        c7 = (c7 = a3.ownerDocument) && c7.defaultView || window;
        var d4 = c7.getSelection && c7.getSelection();
        if (d4 && 0 !== d4.rangeCount) {
          c7 = d4.anchorNode;
          var e3 = d4.anchorOffset, f2 = d4.focusNode;
          d4 = d4.focusOffset;
          try {
            c7.nodeType, f2.nodeType;
          } catch (F2) {
            c7 = null;
            break a;
          }
          var g2 = 0, h4 = -1, k3 = -1, l2 = 0, m4 = 0, q3 = a3, r2 = null;
          b:
            for (; ; ) {
              for (var y4; ; ) {
                q3 !== c7 || 0 !== e3 && 3 !== q3.nodeType || (h4 = g2 + e3);
                q3 !== f2 || 0 !== d4 && 3 !== q3.nodeType || (k3 = g2 + d4);
                3 === q3.nodeType && (g2 += q3.nodeValue.length);
                if (null === (y4 = q3.firstChild))
                  break;
                r2 = q3;
                q3 = y4;
              }
              for (; ; ) {
                if (q3 === a3)
                  break b;
                r2 === c7 && ++l2 === e3 && (h4 = g2);
                r2 === f2 && ++m4 === d4 && (k3 = g2);
                if (null !== (y4 = q3.nextSibling))
                  break;
                q3 = r2;
                r2 = q3.parentNode;
              }
              q3 = y4;
            }
          c7 = -1 === h4 || -1 === k3 ? null : { start: h4, end: k3 };
        } else
          c7 = null;
      }
    c7 = c7 || { start: 0, end: 0 };
  } else
    c7 = null;
  Df = { focusedElem: a3, selectionRange: c7 };
  dd$1 = false;
  for (V = b3; null !== V; )
    if (b3 = V, a3 = b3.child, 0 !== (b3.subtreeFlags & 1028) && null !== a3)
      a3.return = b3, V = a3;
    else
      for (; null !== V; ) {
        b3 = V;
        try {
          var n2 = b3.alternate;
          if (0 !== (b3.flags & 1024))
            switch (b3.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (null !== n2) {
                  var t3 = n2.memoizedProps, J2 = n2.memoizedState, x3 = b3.stateNode, w3 = x3.getSnapshotBeforeUpdate(b3.elementType === b3.type ? t3 : Lg(b3.type, t3), J2);
                  x3.__reactInternalSnapshotBeforeUpdate = w3;
                }
                break;
              case 3:
                var u3 = b3.stateNode.containerInfo;
                1 === u3.nodeType ? u3.textContent = "" : 9 === u3.nodeType && u3.documentElement && u3.removeChild(u3.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(p$1(163));
            }
        } catch (F2) {
          W(b3, b3.return, F2);
        }
        a3 = b3.sibling;
        if (null !== a3) {
          a3.return = b3.return;
          V = a3;
          break;
        }
        V = b3.return;
      }
  n2 = Oj;
  Oj = false;
  return n2;
}
function Qj(a3, b3, c7) {
  var d4 = b3.updateQueue;
  d4 = null !== d4 ? d4.lastEffect : null;
  if (null !== d4) {
    var e3 = d4 = d4.next;
    do {
      if ((e3.tag & a3) === a3) {
        var f2 = e3.destroy;
        e3.destroy = void 0;
        void 0 !== f2 && Nj(b3, c7, f2);
      }
      e3 = e3.next;
    } while (e3 !== d4);
  }
}
function Rj(a3, b3) {
  b3 = b3.updateQueue;
  b3 = null !== b3 ? b3.lastEffect : null;
  if (null !== b3) {
    var c7 = b3 = b3.next;
    do {
      if ((c7.tag & a3) === a3) {
        var d4 = c7.create;
        c7.destroy = d4();
      }
      c7 = c7.next;
    } while (c7 !== b3);
  }
}
function Sj(a3) {
  var b3 = a3.ref;
  if (null !== b3) {
    var c7 = a3.stateNode;
    switch (a3.tag) {
      case 5:
        a3 = c7;
        break;
      default:
        a3 = c7;
    }
    "function" === typeof b3 ? b3(a3) : b3.current = a3;
  }
}
function Tj(a3) {
  var b3 = a3.alternate;
  null !== b3 && (a3.alternate = null, Tj(b3));
  a3.child = null;
  a3.deletions = null;
  a3.sibling = null;
  5 === a3.tag && (b3 = a3.stateNode, null !== b3 && (delete b3[Of], delete b3[Pf], delete b3[of], delete b3[Qf], delete b3[Rf]));
  a3.stateNode = null;
  a3.return = null;
  a3.dependencies = null;
  a3.memoizedProps = null;
  a3.memoizedState = null;
  a3.pendingProps = null;
  a3.stateNode = null;
  a3.updateQueue = null;
}
function Uj(a3) {
  return 5 === a3.tag || 3 === a3.tag || 4 === a3.tag;
}
function Vj(a3) {
  a:
    for (; ; ) {
      for (; null === a3.sibling; ) {
        if (null === a3.return || Uj(a3.return))
          return null;
        a3 = a3.return;
      }
      a3.sibling.return = a3.return;
      for (a3 = a3.sibling; 5 !== a3.tag && 6 !== a3.tag && 18 !== a3.tag; ) {
        if (a3.flags & 2)
          continue a;
        if (null === a3.child || 4 === a3.tag)
          continue a;
        else
          a3.child.return = a3, a3 = a3.child;
      }
      if (!(a3.flags & 2))
        return a3.stateNode;
    }
}
function Wj(a3, b3, c7) {
  var d4 = a3.tag;
  if (5 === d4 || 6 === d4)
    a3 = a3.stateNode, b3 ? 8 === c7.nodeType ? c7.parentNode.insertBefore(a3, b3) : c7.insertBefore(a3, b3) : (8 === c7.nodeType ? (b3 = c7.parentNode, b3.insertBefore(a3, c7)) : (b3 = c7, b3.appendChild(a3)), c7 = c7._reactRootContainer, null !== c7 && void 0 !== c7 || null !== b3.onclick || (b3.onclick = Bf));
  else if (4 !== d4 && (a3 = a3.child, null !== a3))
    for (Wj(a3, b3, c7), a3 = a3.sibling; null !== a3; )
      Wj(a3, b3, c7), a3 = a3.sibling;
}
function Xj(a3, b3, c7) {
  var d4 = a3.tag;
  if (5 === d4 || 6 === d4)
    a3 = a3.stateNode, b3 ? c7.insertBefore(a3, b3) : c7.appendChild(a3);
  else if (4 !== d4 && (a3 = a3.child, null !== a3))
    for (Xj(a3, b3, c7), a3 = a3.sibling; null !== a3; )
      Xj(a3, b3, c7), a3 = a3.sibling;
}
var X = null, Yj = false;
function Zj(a3, b3, c7) {
  for (c7 = c7.child; null !== c7; )
    ak(a3, b3, c7), c7 = c7.sibling;
}
function ak(a3, b3, c7) {
  if (lc && "function" === typeof lc.onCommitFiberUnmount)
    try {
      lc.onCommitFiberUnmount(kc, c7);
    } catch (h4) {
    }
  switch (c7.tag) {
    case 5:
      U || Mj(c7, b3);
    case 6:
      var d4 = X, e3 = Yj;
      X = null;
      Zj(a3, b3, c7);
      X = d4;
      Yj = e3;
      null !== X && (Yj ? (a3 = X, c7 = c7.stateNode, 8 === a3.nodeType ? a3.parentNode.removeChild(c7) : a3.removeChild(c7)) : X.removeChild(c7.stateNode));
      break;
    case 18:
      null !== X && (Yj ? (a3 = X, c7 = c7.stateNode, 8 === a3.nodeType ? Kf(a3.parentNode, c7) : 1 === a3.nodeType && Kf(a3, c7), bd(a3)) : Kf(X, c7.stateNode));
      break;
    case 4:
      d4 = X;
      e3 = Yj;
      X = c7.stateNode.containerInfo;
      Yj = true;
      Zj(a3, b3, c7);
      X = d4;
      Yj = e3;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      if (!U && (d4 = c7.updateQueue, null !== d4 && (d4 = d4.lastEffect, null !== d4))) {
        e3 = d4 = d4.next;
        do {
          var f2 = e3, g2 = f2.destroy;
          f2 = f2.tag;
          void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c7, b3, g2) : 0 !== (f2 & 4) && Nj(c7, b3, g2));
          e3 = e3.next;
        } while (e3 !== d4);
      }
      Zj(a3, b3, c7);
      break;
    case 1:
      if (!U && (Mj(c7, b3), d4 = c7.stateNode, "function" === typeof d4.componentWillUnmount))
        try {
          d4.props = c7.memoizedProps, d4.state = c7.memoizedState, d4.componentWillUnmount();
        } catch (h4) {
          W(c7, b3, h4);
        }
      Zj(a3, b3, c7);
      break;
    case 21:
      Zj(a3, b3, c7);
      break;
    case 22:
      c7.mode & 1 ? (U = (d4 = U) || null !== c7.memoizedState, Zj(a3, b3, c7), U = d4) : Zj(a3, b3, c7);
      break;
    default:
      Zj(a3, b3, c7);
  }
}
function bk(a3) {
  var b3 = a3.updateQueue;
  if (null !== b3) {
    a3.updateQueue = null;
    var c7 = a3.stateNode;
    null === c7 && (c7 = a3.stateNode = new Lj());
    b3.forEach(function(b4) {
      var d4 = ck.bind(null, a3, b4);
      c7.has(b4) || (c7.add(b4), b4.then(d4, d4));
    });
  }
}
function dk(a3, b3) {
  var c7 = b3.deletions;
  if (null !== c7)
    for (var d4 = 0; d4 < c7.length; d4++) {
      var e3 = c7[d4];
      try {
        var f2 = a3, g2 = b3, h4 = g2;
        a:
          for (; null !== h4; ) {
            switch (h4.tag) {
              case 5:
                X = h4.stateNode;
                Yj = false;
                break a;
              case 3:
                X = h4.stateNode.containerInfo;
                Yj = true;
                break a;
              case 4:
                X = h4.stateNode.containerInfo;
                Yj = true;
                break a;
            }
            h4 = h4.return;
          }
        if (null === X)
          throw Error(p$1(160));
        ak(f2, g2, e3);
        X = null;
        Yj = false;
        var k3 = e3.alternate;
        null !== k3 && (k3.return = null);
        e3.return = null;
      } catch (l2) {
        W(e3, b3, l2);
      }
    }
  if (b3.subtreeFlags & 12854)
    for (b3 = b3.child; null !== b3; )
      ek(b3, a3), b3 = b3.sibling;
}
function ek(a3, b3) {
  var c7 = a3.alternate, d4 = a3.flags;
  switch (a3.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      dk(b3, a3);
      fk(a3);
      if (d4 & 4) {
        try {
          Qj(3, a3, a3.return), Rj(3, a3);
        } catch (t3) {
          W(a3, a3.return, t3);
        }
        try {
          Qj(5, a3, a3.return);
        } catch (t3) {
          W(a3, a3.return, t3);
        }
      }
      break;
    case 1:
      dk(b3, a3);
      fk(a3);
      d4 & 512 && null !== c7 && Mj(c7, c7.return);
      break;
    case 5:
      dk(b3, a3);
      fk(a3);
      d4 & 512 && null !== c7 && Mj(c7, c7.return);
      if (a3.flags & 32) {
        var e3 = a3.stateNode;
        try {
          ob(e3, "");
        } catch (t3) {
          W(a3, a3.return, t3);
        }
      }
      if (d4 & 4 && (e3 = a3.stateNode, null != e3)) {
        var f2 = a3.memoizedProps, g2 = null !== c7 ? c7.memoizedProps : f2, h4 = a3.type, k3 = a3.updateQueue;
        a3.updateQueue = null;
        if (null !== k3)
          try {
            "input" === h4 && "radio" === f2.type && null != f2.name && ab(e3, f2);
            vb(h4, g2);
            var l2 = vb(h4, f2);
            for (g2 = 0; g2 < k3.length; g2 += 2) {
              var m4 = k3[g2], q3 = k3[g2 + 1];
              "style" === m4 ? sb(e3, q3) : "dangerouslySetInnerHTML" === m4 ? nb(e3, q3) : "children" === m4 ? ob(e3, q3) : ta(e3, m4, q3, l2);
            }
            switch (h4) {
              case "input":
                bb(e3, f2);
                break;
              case "textarea":
                ib(e3, f2);
                break;
              case "select":
                var r2 = e3._wrapperState.wasMultiple;
                e3._wrapperState.wasMultiple = !!f2.multiple;
                var y4 = f2.value;
                null != y4 ? fb(e3, !!f2.multiple, y4, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                  e3,
                  !!f2.multiple,
                  f2.defaultValue,
                  true
                ) : fb(e3, !!f2.multiple, f2.multiple ? [] : "", false));
            }
            e3[Pf] = f2;
          } catch (t3) {
            W(a3, a3.return, t3);
          }
      }
      break;
    case 6:
      dk(b3, a3);
      fk(a3);
      if (d4 & 4) {
        if (null === a3.stateNode)
          throw Error(p$1(162));
        e3 = a3.stateNode;
        f2 = a3.memoizedProps;
        try {
          e3.nodeValue = f2;
        } catch (t3) {
          W(a3, a3.return, t3);
        }
      }
      break;
    case 3:
      dk(b3, a3);
      fk(a3);
      if (d4 & 4 && null !== c7 && c7.memoizedState.isDehydrated)
        try {
          bd(b3.containerInfo);
        } catch (t3) {
          W(a3, a3.return, t3);
        }
      break;
    case 4:
      dk(b3, a3);
      fk(a3);
      break;
    case 13:
      dk(b3, a3);
      fk(a3);
      e3 = a3.child;
      e3.flags & 8192 && (f2 = null !== e3.memoizedState, e3.stateNode.isHidden = f2, !f2 || null !== e3.alternate && null !== e3.alternate.memoizedState || (gk = B()));
      d4 & 4 && bk(a3);
      break;
    case 22:
      m4 = null !== c7 && null !== c7.memoizedState;
      a3.mode & 1 ? (U = (l2 = U) || m4, dk(b3, a3), U = l2) : dk(b3, a3);
      fk(a3);
      if (d4 & 8192) {
        l2 = null !== a3.memoizedState;
        if ((a3.stateNode.isHidden = l2) && !m4 && 0 !== (a3.mode & 1))
          for (V = a3, m4 = a3.child; null !== m4; ) {
            for (q3 = V = m4; null !== V; ) {
              r2 = V;
              y4 = r2.child;
              switch (r2.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  Qj(4, r2, r2.return);
                  break;
                case 1:
                  Mj(r2, r2.return);
                  var n2 = r2.stateNode;
                  if ("function" === typeof n2.componentWillUnmount) {
                    d4 = r2;
                    c7 = r2.return;
                    try {
                      b3 = d4, n2.props = b3.memoizedProps, n2.state = b3.memoizedState, n2.componentWillUnmount();
                    } catch (t3) {
                      W(d4, c7, t3);
                    }
                  }
                  break;
                case 5:
                  Mj(r2, r2.return);
                  break;
                case 22:
                  if (null !== r2.memoizedState) {
                    hk(q3);
                    continue;
                  }
              }
              null !== y4 ? (y4.return = r2, V = y4) : hk(q3);
            }
            m4 = m4.sibling;
          }
        a:
          for (m4 = null, q3 = a3; ; ) {
            if (5 === q3.tag) {
              if (null === m4) {
                m4 = q3;
                try {
                  e3 = q3.stateNode, l2 ? (f2 = e3.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h4 = q3.stateNode, k3 = q3.memoizedProps.style, g2 = void 0 !== k3 && null !== k3 && k3.hasOwnProperty("display") ? k3.display : null, h4.style.display = rb("display", g2));
                } catch (t3) {
                  W(a3, a3.return, t3);
                }
              }
            } else if (6 === q3.tag) {
              if (null === m4)
                try {
                  q3.stateNode.nodeValue = l2 ? "" : q3.memoizedProps;
                } catch (t3) {
                  W(a3, a3.return, t3);
                }
            } else if ((22 !== q3.tag && 23 !== q3.tag || null === q3.memoizedState || q3 === a3) && null !== q3.child) {
              q3.child.return = q3;
              q3 = q3.child;
              continue;
            }
            if (q3 === a3)
              break a;
            for (; null === q3.sibling; ) {
              if (null === q3.return || q3.return === a3)
                break a;
              m4 === q3 && (m4 = null);
              q3 = q3.return;
            }
            m4 === q3 && (m4 = null);
            q3.sibling.return = q3.return;
            q3 = q3.sibling;
          }
      }
      break;
    case 19:
      dk(b3, a3);
      fk(a3);
      d4 & 4 && bk(a3);
      break;
    case 21:
      break;
    default:
      dk(
        b3,
        a3
      ), fk(a3);
  }
}
function fk(a3) {
  var b3 = a3.flags;
  if (b3 & 2) {
    try {
      a: {
        for (var c7 = a3.return; null !== c7; ) {
          if (Uj(c7)) {
            var d4 = c7;
            break a;
          }
          c7 = c7.return;
        }
        throw Error(p$1(160));
      }
      switch (d4.tag) {
        case 5:
          var e3 = d4.stateNode;
          d4.flags & 32 && (ob(e3, ""), d4.flags &= -33);
          var f2 = Vj(a3);
          Xj(a3, f2, e3);
          break;
        case 3:
        case 4:
          var g2 = d4.stateNode.containerInfo, h4 = Vj(a3);
          Wj(a3, h4, g2);
          break;
        default:
          throw Error(p$1(161));
      }
    } catch (k3) {
      W(a3, a3.return, k3);
    }
    a3.flags &= -3;
  }
  b3 & 4096 && (a3.flags &= -4097);
}
function ik(a3, b3, c7) {
  V = a3;
  jk(a3);
}
function jk(a3, b3, c7) {
  for (var d4 = 0 !== (a3.mode & 1); null !== V; ) {
    var e3 = V, f2 = e3.child;
    if (22 === e3.tag && d4) {
      var g2 = null !== e3.memoizedState || Kj;
      if (!g2) {
        var h4 = e3.alternate, k3 = null !== h4 && null !== h4.memoizedState || U;
        h4 = Kj;
        var l2 = U;
        Kj = g2;
        if ((U = k3) && !l2)
          for (V = e3; null !== V; )
            g2 = V, k3 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e3) : null !== k3 ? (k3.return = g2, V = k3) : kk(e3);
        for (; null !== f2; )
          V = f2, jk(f2), f2 = f2.sibling;
        V = e3;
        Kj = h4;
        U = l2;
      }
      lk(a3);
    } else
      0 !== (e3.subtreeFlags & 8772) && null !== f2 ? (f2.return = e3, V = f2) : lk(a3);
  }
}
function lk(a3) {
  for (; null !== V; ) {
    var b3 = V;
    if (0 !== (b3.flags & 8772)) {
      var c7 = b3.alternate;
      try {
        if (0 !== (b3.flags & 8772))
          switch (b3.tag) {
            case 0:
            case 11:
            case 15:
              U || Rj(5, b3);
              break;
            case 1:
              var d4 = b3.stateNode;
              if (b3.flags & 4 && !U)
                if (null === c7)
                  d4.componentDidMount();
                else {
                  var e3 = b3.elementType === b3.type ? c7.memoizedProps : Lg(b3.type, c7.memoizedProps);
                  d4.componentDidUpdate(e3, c7.memoizedState, d4.__reactInternalSnapshotBeforeUpdate);
                }
              var f2 = b3.updateQueue;
              null !== f2 && ih(b3, f2, d4);
              break;
            case 3:
              var g2 = b3.updateQueue;
              if (null !== g2) {
                c7 = null;
                if (null !== b3.child)
                  switch (b3.child.tag) {
                    case 5:
                      c7 = b3.child.stateNode;
                      break;
                    case 1:
                      c7 = b3.child.stateNode;
                  }
                ih(b3, g2, c7);
              }
              break;
            case 5:
              var h4 = b3.stateNode;
              if (null === c7 && b3.flags & 4) {
                c7 = h4;
                var k3 = b3.memoizedProps;
                switch (b3.type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    k3.autoFocus && c7.focus();
                    break;
                  case "img":
                    k3.src && (c7.src = k3.src);
                }
              }
              break;
            case 6:
              break;
            case 4:
              break;
            case 12:
              break;
            case 13:
              if (null === b3.memoizedState) {
                var l2 = b3.alternate;
                if (null !== l2) {
                  var m4 = l2.memoizedState;
                  if (null !== m4) {
                    var q3 = m4.dehydrated;
                    null !== q3 && bd(q3);
                  }
                }
              }
              break;
            case 19:
            case 17:
            case 21:
            case 22:
            case 23:
            case 25:
              break;
            default:
              throw Error(p$1(163));
          }
        U || b3.flags & 512 && Sj(b3);
      } catch (r2) {
        W(b3, b3.return, r2);
      }
    }
    if (b3 === a3) {
      V = null;
      break;
    }
    c7 = b3.sibling;
    if (null !== c7) {
      c7.return = b3.return;
      V = c7;
      break;
    }
    V = b3.return;
  }
}
function hk(a3) {
  for (; null !== V; ) {
    var b3 = V;
    if (b3 === a3) {
      V = null;
      break;
    }
    var c7 = b3.sibling;
    if (null !== c7) {
      c7.return = b3.return;
      V = c7;
      break;
    }
    V = b3.return;
  }
}
function kk(a3) {
  for (; null !== V; ) {
    var b3 = V;
    try {
      switch (b3.tag) {
        case 0:
        case 11:
        case 15:
          var c7 = b3.return;
          try {
            Rj(4, b3);
          } catch (k3) {
            W(b3, c7, k3);
          }
          break;
        case 1:
          var d4 = b3.stateNode;
          if ("function" === typeof d4.componentDidMount) {
            var e3 = b3.return;
            try {
              d4.componentDidMount();
            } catch (k3) {
              W(b3, e3, k3);
            }
          }
          var f2 = b3.return;
          try {
            Sj(b3);
          } catch (k3) {
            W(b3, f2, k3);
          }
          break;
        case 5:
          var g2 = b3.return;
          try {
            Sj(b3);
          } catch (k3) {
            W(b3, g2, k3);
          }
      }
    } catch (k3) {
      W(b3, b3.return, k3);
    }
    if (b3 === a3) {
      V = null;
      break;
    }
    var h4 = b3.sibling;
    if (null !== h4) {
      h4.return = b3.return;
      V = h4;
      break;
    }
    V = b3.return;
  }
}
var mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K = 0, R = null, Y = null, Z = 0, gj = 0, fj = Uf(0), T = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
function L() {
  return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
}
function lh(a3) {
  if (0 === (a3.mode & 1))
    return 1;
  if (0 !== (K & 2) && 0 !== Z)
    return Z & -Z;
  if (null !== Kg.transition)
    return 0 === Ck && (Ck = yc()), Ck;
  a3 = C;
  if (0 !== a3)
    return a3;
  a3 = window.event;
  a3 = void 0 === a3 ? 16 : jd(a3.type);
  return a3;
}
function mh(a3, b3, c7, d4) {
  if (50 < zk)
    throw zk = 0, Ak = null, Error(p$1(185));
  Ac(a3, c7, d4);
  if (0 === (K & 2) || a3 !== R)
    a3 === R && (0 === (K & 2) && (rk |= c7), 4 === T && Dk(a3, Z)), Ek(a3, d4), 1 === c7 && 0 === K && 0 === (b3.mode & 1) && (Hj = B() + 500, fg && jg());
}
function Ek(a3, b3) {
  var c7 = a3.callbackNode;
  wc(a3, b3);
  var d4 = uc(a3, a3 === R ? Z : 0);
  if (0 === d4)
    null !== c7 && bc(c7), a3.callbackNode = null, a3.callbackPriority = 0;
  else if (b3 = d4 & -d4, a3.callbackPriority !== b3) {
    null != c7 && bc(c7);
    if (1 === b3)
      0 === a3.tag ? ig(Fk.bind(null, a3)) : hg(Fk.bind(null, a3)), Jf(function() {
        0 === (K & 6) && jg();
      }), c7 = null;
    else {
      switch (Dc(d4)) {
        case 1:
          c7 = fc;
          break;
        case 4:
          c7 = gc;
          break;
        case 16:
          c7 = hc;
          break;
        case 536870912:
          c7 = jc;
          break;
        default:
          c7 = hc;
      }
      c7 = Gk(c7, Hk.bind(null, a3));
    }
    a3.callbackPriority = b3;
    a3.callbackNode = c7;
  }
}
function Hk(a3, b3) {
  Bk = -1;
  Ck = 0;
  if (0 !== (K & 6))
    throw Error(p$1(327));
  var c7 = a3.callbackNode;
  if (Ik() && a3.callbackNode !== c7)
    return null;
  var d4 = uc(a3, a3 === R ? Z : 0);
  if (0 === d4)
    return null;
  if (0 !== (d4 & 30) || 0 !== (d4 & a3.expiredLanes) || b3)
    b3 = Jk(a3, d4);
  else {
    b3 = d4;
    var e3 = K;
    K |= 2;
    var f2 = Kk();
    if (R !== a3 || Z !== b3)
      vk = null, Hj = B() + 500, Lk(a3, b3);
    do
      try {
        Mk();
        break;
      } catch (h4) {
        Nk(a3, h4);
      }
    while (1);
    Qg();
    nk.current = f2;
    K = e3;
    null !== Y ? b3 = 0 : (R = null, Z = 0, b3 = T);
  }
  if (0 !== b3) {
    2 === b3 && (e3 = xc(a3), 0 !== e3 && (d4 = e3, b3 = Ok(a3, e3)));
    if (1 === b3)
      throw c7 = qk, Lk(a3, 0), Dk(a3, d4), Ek(a3, B()), c7;
    if (6 === b3)
      Dk(a3, d4);
    else {
      e3 = a3.current.alternate;
      if (0 === (d4 & 30) && !Pk(e3) && (b3 = Jk(a3, d4), 2 === b3 && (f2 = xc(a3), 0 !== f2 && (d4 = f2, b3 = Ok(a3, f2))), 1 === b3))
        throw c7 = qk, Lk(a3, 0), Dk(a3, d4), Ek(a3, B()), c7;
      a3.finishedWork = e3;
      a3.finishedLanes = d4;
      switch (b3) {
        case 0:
        case 1:
          throw Error(p$1(345));
        case 2:
          Qk(a3, uk, vk);
          break;
        case 3:
          Dk(a3, d4);
          if ((d4 & 130023424) === d4 && (b3 = gk + 500 - B(), 10 < b3)) {
            if (0 !== uc(a3, 0))
              break;
            e3 = a3.suspendedLanes;
            if ((e3 & d4) !== d4) {
              L();
              a3.pingedLanes |= a3.suspendedLanes & e3;
              break;
            }
            a3.timeoutHandle = Ff(Qk.bind(null, a3, uk, vk), b3);
            break;
          }
          Qk(a3, uk, vk);
          break;
        case 4:
          Dk(a3, d4);
          if ((d4 & 4194240) === d4)
            break;
          b3 = a3.eventTimes;
          for (e3 = -1; 0 < d4; ) {
            var g2 = 31 - oc(d4);
            f2 = 1 << g2;
            g2 = b3[g2];
            g2 > e3 && (e3 = g2);
            d4 &= ~f2;
          }
          d4 = e3;
          d4 = B() - d4;
          d4 = (120 > d4 ? 120 : 480 > d4 ? 480 : 1080 > d4 ? 1080 : 1920 > d4 ? 1920 : 3e3 > d4 ? 3e3 : 4320 > d4 ? 4320 : 1960 * mk(d4 / 1960)) - d4;
          if (10 < d4) {
            a3.timeoutHandle = Ff(Qk.bind(null, a3, uk, vk), d4);
            break;
          }
          Qk(a3, uk, vk);
          break;
        case 5:
          Qk(a3, uk, vk);
          break;
        default:
          throw Error(p$1(329));
      }
    }
  }
  Ek(a3, B());
  return a3.callbackNode === c7 ? Hk.bind(null, a3) : null;
}
function Ok(a3, b3) {
  var c7 = tk;
  a3.current.memoizedState.isDehydrated && (Lk(a3, b3).flags |= 256);
  a3 = Jk(a3, b3);
  2 !== a3 && (b3 = uk, uk = c7, null !== b3 && Gj(b3));
  return a3;
}
function Gj(a3) {
  null === uk ? uk = a3 : uk.push.apply(uk, a3);
}
function Pk(a3) {
  for (var b3 = a3; ; ) {
    if (b3.flags & 16384) {
      var c7 = b3.updateQueue;
      if (null !== c7 && (c7 = c7.stores, null !== c7))
        for (var d4 = 0; d4 < c7.length; d4++) {
          var e3 = c7[d4], f2 = e3.getSnapshot;
          e3 = e3.value;
          try {
            if (!He(f2(), e3))
              return false;
          } catch (g2) {
            return false;
          }
        }
    }
    c7 = b3.child;
    if (b3.subtreeFlags & 16384 && null !== c7)
      c7.return = b3, b3 = c7;
    else {
      if (b3 === a3)
        break;
      for (; null === b3.sibling; ) {
        if (null === b3.return || b3.return === a3)
          return true;
        b3 = b3.return;
      }
      b3.sibling.return = b3.return;
      b3 = b3.sibling;
    }
  }
  return true;
}
function Dk(a3, b3) {
  b3 &= ~sk;
  b3 &= ~rk;
  a3.suspendedLanes |= b3;
  a3.pingedLanes &= ~b3;
  for (a3 = a3.expirationTimes; 0 < b3; ) {
    var c7 = 31 - oc(b3), d4 = 1 << c7;
    a3[c7] = -1;
    b3 &= ~d4;
  }
}
function Fk(a3) {
  if (0 !== (K & 6))
    throw Error(p$1(327));
  Ik();
  var b3 = uc(a3, 0);
  if (0 === (b3 & 1))
    return Ek(a3, B()), null;
  var c7 = Jk(a3, b3);
  if (0 !== a3.tag && 2 === c7) {
    var d4 = xc(a3);
    0 !== d4 && (b3 = d4, c7 = Ok(a3, d4));
  }
  if (1 === c7)
    throw c7 = qk, Lk(a3, 0), Dk(a3, b3), Ek(a3, B()), c7;
  if (6 === c7)
    throw Error(p$1(345));
  a3.finishedWork = a3.current.alternate;
  a3.finishedLanes = b3;
  Qk(a3, uk, vk);
  Ek(a3, B());
  return null;
}
function Rk(a3, b3) {
  var c7 = K;
  K |= 1;
  try {
    return a3(b3);
  } finally {
    K = c7, 0 === K && (Hj = B() + 500, fg && jg());
  }
}
function Sk(a3) {
  null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
  var b3 = K;
  K |= 1;
  var c7 = pk.transition, d4 = C;
  try {
    if (pk.transition = null, C = 1, a3)
      return a3();
  } finally {
    C = d4, pk.transition = c7, K = b3, 0 === (K & 6) && jg();
  }
}
function Ij() {
  gj = fj.current;
  E(fj);
}
function Lk(a3, b3) {
  a3.finishedWork = null;
  a3.finishedLanes = 0;
  var c7 = a3.timeoutHandle;
  -1 !== c7 && (a3.timeoutHandle = -1, Gf(c7));
  if (null !== Y)
    for (c7 = Y.return; null !== c7; ) {
      var d4 = c7;
      wg(d4);
      switch (d4.tag) {
        case 1:
          d4 = d4.type.childContextTypes;
          null !== d4 && void 0 !== d4 && $f();
          break;
        case 3:
          Jh();
          E(Wf);
          E(H);
          Oh();
          break;
        case 5:
          Lh(d4);
          break;
        case 4:
          Jh();
          break;
        case 13:
          E(M);
          break;
        case 19:
          E(M);
          break;
        case 10:
          Rg(d4.type._context);
          break;
        case 22:
        case 23:
          Ij();
      }
      c7 = c7.return;
    }
  R = a3;
  Y = a3 = wh(a3.current, null);
  Z = gj = b3;
  T = 0;
  qk = null;
  sk = rk = hh = 0;
  uk = tk = null;
  if (null !== Wg) {
    for (b3 = 0; b3 < Wg.length; b3++)
      if (c7 = Wg[b3], d4 = c7.interleaved, null !== d4) {
        c7.interleaved = null;
        var e3 = d4.next, f2 = c7.pending;
        if (null !== f2) {
          var g2 = f2.next;
          f2.next = e3;
          d4.next = g2;
        }
        c7.pending = d4;
      }
    Wg = null;
  }
  return a3;
}
function Nk(a3, b3) {
  do {
    var c7 = Y;
    try {
      Qg();
      Ph.current = ai;
      if (Sh) {
        for (var d4 = N.memoizedState; null !== d4; ) {
          var e3 = d4.queue;
          null !== e3 && (e3.pending = null);
          d4 = d4.next;
        }
        Sh = false;
      }
      Rh = 0;
      P = O = N = null;
      Th = false;
      Uh = 0;
      ok.current = null;
      if (null === c7 || null === c7.return) {
        T = 1;
        qk = b3;
        Y = null;
        break;
      }
      a: {
        var f2 = a3, g2 = c7.return, h4 = c7, k3 = b3;
        b3 = Z;
        h4.flags |= 32768;
        if (null !== k3 && "object" === typeof k3 && "function" === typeof k3.then) {
          var l2 = k3, m4 = h4, q3 = m4.tag;
          if (0 === (m4.mode & 1) && (0 === q3 || 11 === q3 || 15 === q3)) {
            var r2 = m4.alternate;
            r2 ? (m4.updateQueue = r2.updateQueue, m4.memoizedState = r2.memoizedState, m4.lanes = r2.lanes) : (m4.updateQueue = null, m4.memoizedState = null);
          }
          var y4 = Vi(g2);
          if (null !== y4) {
            y4.flags &= -257;
            Wi(y4, g2, h4, f2, b3);
            y4.mode & 1 && Ti(f2, l2, b3);
            b3 = y4;
            k3 = l2;
            var n2 = b3.updateQueue;
            if (null === n2) {
              var t3 = /* @__PURE__ */ new Set();
              t3.add(k3);
              b3.updateQueue = t3;
            } else
              n2.add(k3);
            break a;
          } else {
            if (0 === (b3 & 1)) {
              Ti(f2, l2, b3);
              uj();
              break a;
            }
            k3 = Error(p$1(426));
          }
        } else if (I && h4.mode & 1) {
          var J2 = Vi(g2);
          if (null !== J2) {
            0 === (J2.flags & 65536) && (J2.flags |= 256);
            Wi(J2, g2, h4, f2, b3);
            Jg(Ki(k3, h4));
            break a;
          }
        }
        f2 = k3 = Ki(k3, h4);
        4 !== T && (T = 2);
        null === tk ? tk = [f2] : tk.push(f2);
        f2 = g2;
        do {
          switch (f2.tag) {
            case 3:
              f2.flags |= 65536;
              b3 &= -b3;
              f2.lanes |= b3;
              var x3 = Oi(f2, k3, b3);
              fh(f2, x3);
              break a;
            case 1:
              h4 = k3;
              var w3 = f2.type, u3 = f2.stateNode;
              if (0 === (f2.flags & 128) && ("function" === typeof w3.getDerivedStateFromError || null !== u3 && "function" === typeof u3.componentDidCatch && (null === Si || !Si.has(u3)))) {
                f2.flags |= 65536;
                b3 &= -b3;
                f2.lanes |= b3;
                var F2 = Ri(f2, h4, b3);
                fh(f2, F2);
                break a;
              }
          }
          f2 = f2.return;
        } while (null !== f2);
      }
      Tk(c7);
    } catch (na) {
      b3 = na;
      Y === c7 && null !== c7 && (Y = c7 = c7.return);
      continue;
    }
    break;
  } while (1);
}
function Kk() {
  var a3 = nk.current;
  nk.current = ai;
  return null === a3 ? ai : a3;
}
function uj() {
  if (0 === T || 3 === T || 2 === T)
    T = 4;
  null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);
}
function Jk(a3, b3) {
  var c7 = K;
  K |= 2;
  var d4 = Kk();
  if (R !== a3 || Z !== b3)
    vk = null, Lk(a3, b3);
  do
    try {
      Uk();
      break;
    } catch (e3) {
      Nk(a3, e3);
    }
  while (1);
  Qg();
  K = c7;
  nk.current = d4;
  if (null !== Y)
    throw Error(p$1(261));
  R = null;
  Z = 0;
  return T;
}
function Uk() {
  for (; null !== Y; )
    Vk(Y);
}
function Mk() {
  for (; null !== Y && !cc(); )
    Vk(Y);
}
function Vk(a3) {
  var b3 = Wk(a3.alternate, a3, gj);
  a3.memoizedProps = a3.pendingProps;
  null === b3 ? Tk(a3) : Y = b3;
  ok.current = null;
}
function Tk(a3) {
  var b3 = a3;
  do {
    var c7 = b3.alternate;
    a3 = b3.return;
    if (0 === (b3.flags & 32768)) {
      if (c7 = Fj(c7, b3, gj), null !== c7) {
        Y = c7;
        return;
      }
    } else {
      c7 = Jj(c7, b3);
      if (null !== c7) {
        c7.flags &= 32767;
        Y = c7;
        return;
      }
      if (null !== a3)
        a3.flags |= 32768, a3.subtreeFlags = 0, a3.deletions = null;
      else {
        T = 6;
        Y = null;
        return;
      }
    }
    b3 = b3.sibling;
    if (null !== b3) {
      Y = b3;
      return;
    }
    Y = b3 = a3;
  } while (null !== b3);
  0 === T && (T = 5);
}
function Qk(a3, b3, c7) {
  var d4 = C, e3 = pk.transition;
  try {
    pk.transition = null, C = 1, Xk(a3, b3, c7, d4);
  } finally {
    pk.transition = e3, C = d4;
  }
  return null;
}
function Xk(a3, b3, c7, d4) {
  do
    Ik();
  while (null !== xk);
  if (0 !== (K & 6))
    throw Error(p$1(327));
  c7 = a3.finishedWork;
  var e3 = a3.finishedLanes;
  if (null === c7)
    return null;
  a3.finishedWork = null;
  a3.finishedLanes = 0;
  if (c7 === a3.current)
    throw Error(p$1(177));
  a3.callbackNode = null;
  a3.callbackPriority = 0;
  var f2 = c7.lanes | c7.childLanes;
  Bc(a3, f2);
  a3 === R && (Y = R = null, Z = 0);
  0 === (c7.subtreeFlags & 2064) && 0 === (c7.flags & 2064) || wk || (wk = true, Gk(hc, function() {
    Ik();
    return null;
  }));
  f2 = 0 !== (c7.flags & 15990);
  if (0 !== (c7.subtreeFlags & 15990) || f2) {
    f2 = pk.transition;
    pk.transition = null;
    var g2 = C;
    C = 1;
    var h4 = K;
    K |= 4;
    ok.current = null;
    Pj(a3, c7);
    ek(c7, a3);
    Oe(Df);
    dd$1 = !!Cf;
    Df = Cf = null;
    a3.current = c7;
    ik(c7);
    dc();
    K = h4;
    C = g2;
    pk.transition = f2;
  } else
    a3.current = c7;
  wk && (wk = false, xk = a3, yk = e3);
  f2 = a3.pendingLanes;
  0 === f2 && (Si = null);
  mc(c7.stateNode);
  Ek(a3, B());
  if (null !== b3)
    for (d4 = a3.onRecoverableError, c7 = 0; c7 < b3.length; c7++)
      e3 = b3[c7], d4(e3.value, { componentStack: e3.stack, digest: e3.digest });
  if (Pi)
    throw Pi = false, a3 = Qi, Qi = null, a3;
  0 !== (yk & 1) && 0 !== a3.tag && Ik();
  f2 = a3.pendingLanes;
  0 !== (f2 & 1) ? a3 === Ak ? zk++ : (zk = 0, Ak = a3) : zk = 0;
  jg();
  return null;
}
function Ik() {
  if (null !== xk) {
    var a3 = Dc(yk), b3 = pk.transition, c7 = C;
    try {
      pk.transition = null;
      C = 16 > a3 ? 16 : a3;
      if (null === xk)
        var d4 = false;
      else {
        a3 = xk;
        xk = null;
        yk = 0;
        if (0 !== (K & 6))
          throw Error(p$1(331));
        var e3 = K;
        K |= 4;
        for (V = a3.current; null !== V; ) {
          var f2 = V, g2 = f2.child;
          if (0 !== (V.flags & 16)) {
            var h4 = f2.deletions;
            if (null !== h4) {
              for (var k3 = 0; k3 < h4.length; k3++) {
                var l2 = h4[k3];
                for (V = l2; null !== V; ) {
                  var m4 = V;
                  switch (m4.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(8, m4, f2);
                  }
                  var q3 = m4.child;
                  if (null !== q3)
                    q3.return = m4, V = q3;
                  else
                    for (; null !== V; ) {
                      m4 = V;
                      var r2 = m4.sibling, y4 = m4.return;
                      Tj(m4);
                      if (m4 === l2) {
                        V = null;
                        break;
                      }
                      if (null !== r2) {
                        r2.return = y4;
                        V = r2;
                        break;
                      }
                      V = y4;
                    }
                }
              }
              var n2 = f2.alternate;
              if (null !== n2) {
                var t3 = n2.child;
                if (null !== t3) {
                  n2.child = null;
                  do {
                    var J2 = t3.sibling;
                    t3.sibling = null;
                    t3 = J2;
                  } while (null !== t3);
                }
              }
              V = f2;
            }
          }
          if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
            g2.return = f2, V = g2;
          else
            b:
              for (; null !== V; ) {
                f2 = V;
                if (0 !== (f2.flags & 2048))
                  switch (f2.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(9, f2, f2.return);
                  }
                var x3 = f2.sibling;
                if (null !== x3) {
                  x3.return = f2.return;
                  V = x3;
                  break b;
                }
                V = f2.return;
              }
        }
        var w3 = a3.current;
        for (V = w3; null !== V; ) {
          g2 = V;
          var u3 = g2.child;
          if (0 !== (g2.subtreeFlags & 2064) && null !== u3)
            u3.return = g2, V = u3;
          else
            b:
              for (g2 = w3; null !== V; ) {
                h4 = V;
                if (0 !== (h4.flags & 2048))
                  try {
                    switch (h4.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Rj(9, h4);
                    }
                  } catch (na) {
                    W(h4, h4.return, na);
                  }
                if (h4 === g2) {
                  V = null;
                  break b;
                }
                var F2 = h4.sibling;
                if (null !== F2) {
                  F2.return = h4.return;
                  V = F2;
                  break b;
                }
                V = h4.return;
              }
        }
        K = e3;
        jg();
        if (lc && "function" === typeof lc.onPostCommitFiberRoot)
          try {
            lc.onPostCommitFiberRoot(kc, a3);
          } catch (na) {
          }
        d4 = true;
      }
      return d4;
    } finally {
      C = c7, pk.transition = b3;
    }
  }
  return false;
}
function Yk(a3, b3, c7) {
  b3 = Ki(c7, b3);
  b3 = Oi(a3, b3, 1);
  a3 = dh(a3, b3, 1);
  b3 = L();
  null !== a3 && (Ac(a3, 1, b3), Ek(a3, b3));
}
function W(a3, b3, c7) {
  if (3 === a3.tag)
    Yk(a3, a3, c7);
  else
    for (; null !== b3; ) {
      if (3 === b3.tag) {
        Yk(b3, a3, c7);
        break;
      } else if (1 === b3.tag) {
        var d4 = b3.stateNode;
        if ("function" === typeof b3.type.getDerivedStateFromError || "function" === typeof d4.componentDidCatch && (null === Si || !Si.has(d4))) {
          a3 = Ki(c7, a3);
          a3 = Ri(b3, a3, 1);
          b3 = dh(b3, a3, 1);
          a3 = L();
          null !== b3 && (Ac(b3, 1, a3), Ek(b3, a3));
          break;
        }
      }
      b3 = b3.return;
    }
}
function Ui(a3, b3, c7) {
  var d4 = a3.pingCache;
  null !== d4 && d4.delete(b3);
  b3 = L();
  a3.pingedLanes |= a3.suspendedLanes & c7;
  R === a3 && (Z & c7) === c7 && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a3, 0) : sk |= c7);
  Ek(a3, b3);
}
function Zk(a3, b3) {
  0 === b3 && (0 === (a3.mode & 1) ? b3 = 1 : (b3 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
  var c7 = L();
  a3 = Zg(a3, b3);
  null !== a3 && (Ac(a3, b3, c7), Ek(a3, c7));
}
function vj(a3) {
  var b3 = a3.memoizedState, c7 = 0;
  null !== b3 && (c7 = b3.retryLane);
  Zk(a3, c7);
}
function ck(a3, b3) {
  var c7 = 0;
  switch (a3.tag) {
    case 13:
      var d4 = a3.stateNode;
      var e3 = a3.memoizedState;
      null !== e3 && (c7 = e3.retryLane);
      break;
    case 19:
      d4 = a3.stateNode;
      break;
    default:
      throw Error(p$1(314));
  }
  null !== d4 && d4.delete(b3);
  Zk(a3, c7);
}
var Wk;
Wk = function(a3, b3, c7) {
  if (null !== a3)
    if (a3.memoizedProps !== b3.pendingProps || Wf.current)
      Ug = true;
    else {
      if (0 === (a3.lanes & c7) && 0 === (b3.flags & 128))
        return Ug = false, zj(a3, b3, c7);
      Ug = 0 !== (a3.flags & 131072) ? true : false;
    }
  else
    Ug = false, I && 0 !== (b3.flags & 1048576) && ug(b3, ng, b3.index);
  b3.lanes = 0;
  switch (b3.tag) {
    case 2:
      var d4 = b3.type;
      jj(a3, b3);
      a3 = b3.pendingProps;
      var e3 = Yf(b3, H.current);
      Tg(b3, c7);
      e3 = Xh(null, b3, d4, a3, e3, c7);
      var f2 = bi();
      b3.flags |= 1;
      "object" === typeof e3 && null !== e3 && "function" === typeof e3.render && void 0 === e3.$$typeof ? (b3.tag = 1, b3.memoizedState = null, b3.updateQueue = null, Zf(d4) ? (f2 = true, cg(b3)) : f2 = false, b3.memoizedState = null !== e3.state && void 0 !== e3.state ? e3.state : null, ah(b3), e3.updater = nh, b3.stateNode = e3, e3._reactInternals = b3, rh(b3, d4, a3, c7), b3 = kj(null, b3, d4, true, f2, c7)) : (b3.tag = 0, I && f2 && vg(b3), Yi(null, b3, e3, c7), b3 = b3.child);
      return b3;
    case 16:
      d4 = b3.elementType;
      a: {
        jj(a3, b3);
        a3 = b3.pendingProps;
        e3 = d4._init;
        d4 = e3(d4._payload);
        b3.type = d4;
        e3 = b3.tag = $k(d4);
        a3 = Lg(d4, a3);
        switch (e3) {
          case 0:
            b3 = dj(null, b3, d4, a3, c7);
            break a;
          case 1:
            b3 = ij(null, b3, d4, a3, c7);
            break a;
          case 11:
            b3 = Zi(null, b3, d4, a3, c7);
            break a;
          case 14:
            b3 = aj(null, b3, d4, Lg(d4.type, a3), c7);
            break a;
        }
        throw Error(p$1(
          306,
          d4,
          ""
        ));
      }
      return b3;
    case 0:
      return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : Lg(d4, e3), dj(a3, b3, d4, e3, c7);
    case 1:
      return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : Lg(d4, e3), ij(a3, b3, d4, e3, c7);
    case 3:
      a: {
        lj(b3);
        if (null === a3)
          throw Error(p$1(387));
        d4 = b3.pendingProps;
        f2 = b3.memoizedState;
        e3 = f2.element;
        bh(a3, b3);
        gh(b3, d4, null, c7);
        var g2 = b3.memoizedState;
        d4 = g2.element;
        if (f2.isDehydrated)
          if (f2 = { element: d4, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b3.updateQueue.baseState = f2, b3.memoizedState = f2, b3.flags & 256) {
            e3 = Ki(Error(p$1(423)), b3);
            b3 = mj(a3, b3, d4, c7, e3);
            break a;
          } else if (d4 !== e3) {
            e3 = Ki(Error(p$1(424)), b3);
            b3 = mj(a3, b3, d4, c7, e3);
            break a;
          } else
            for (yg = Lf(b3.stateNode.containerInfo.firstChild), xg = b3, I = true, zg = null, c7 = Ch(b3, null, d4, c7), b3.child = c7; c7; )
              c7.flags = c7.flags & -3 | 4096, c7 = c7.sibling;
        else {
          Ig();
          if (d4 === e3) {
            b3 = $i(a3, b3, c7);
            break a;
          }
          Yi(a3, b3, d4, c7);
        }
        b3 = b3.child;
      }
      return b3;
    case 5:
      return Kh(b3), null === a3 && Eg(b3), d4 = b3.type, e3 = b3.pendingProps, f2 = null !== a3 ? a3.memoizedProps : null, g2 = e3.children, Ef(d4, e3) ? g2 = null : null !== f2 && Ef(d4, f2) && (b3.flags |= 32), hj(a3, b3), Yi(a3, b3, g2, c7), b3.child;
    case 6:
      return null === a3 && Eg(b3), null;
    case 13:
      return pj(a3, b3, c7);
    case 4:
      return Ih(b3, b3.stateNode.containerInfo), d4 = b3.pendingProps, null === a3 ? b3.child = Bh(b3, null, d4, c7) : Yi(a3, b3, d4, c7), b3.child;
    case 11:
      return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : Lg(d4, e3), Zi(a3, b3, d4, e3, c7);
    case 7:
      return Yi(a3, b3, b3.pendingProps, c7), b3.child;
    case 8:
      return Yi(a3, b3, b3.pendingProps.children, c7), b3.child;
    case 12:
      return Yi(a3, b3, b3.pendingProps.children, c7), b3.child;
    case 10:
      a: {
        d4 = b3.type._context;
        e3 = b3.pendingProps;
        f2 = b3.memoizedProps;
        g2 = e3.value;
        G(Mg, d4._currentValue);
        d4._currentValue = g2;
        if (null !== f2)
          if (He(f2.value, g2)) {
            if (f2.children === e3.children && !Wf.current) {
              b3 = $i(a3, b3, c7);
              break a;
            }
          } else
            for (f2 = b3.child, null !== f2 && (f2.return = b3); null !== f2; ) {
              var h4 = f2.dependencies;
              if (null !== h4) {
                g2 = f2.child;
                for (var k3 = h4.firstContext; null !== k3; ) {
                  if (k3.context === d4) {
                    if (1 === f2.tag) {
                      k3 = ch(-1, c7 & -c7);
                      k3.tag = 2;
                      var l2 = f2.updateQueue;
                      if (null !== l2) {
                        l2 = l2.shared;
                        var m4 = l2.pending;
                        null === m4 ? k3.next = k3 : (k3.next = m4.next, m4.next = k3);
                        l2.pending = k3;
                      }
                    }
                    f2.lanes |= c7;
                    k3 = f2.alternate;
                    null !== k3 && (k3.lanes |= c7);
                    Sg(
                      f2.return,
                      c7,
                      b3
                    );
                    h4.lanes |= c7;
                    break;
                  }
                  k3 = k3.next;
                }
              } else if (10 === f2.tag)
                g2 = f2.type === b3.type ? null : f2.child;
              else if (18 === f2.tag) {
                g2 = f2.return;
                if (null === g2)
                  throw Error(p$1(341));
                g2.lanes |= c7;
                h4 = g2.alternate;
                null !== h4 && (h4.lanes |= c7);
                Sg(g2, c7, b3);
                g2 = f2.sibling;
              } else
                g2 = f2.child;
              if (null !== g2)
                g2.return = f2;
              else
                for (g2 = f2; null !== g2; ) {
                  if (g2 === b3) {
                    g2 = null;
                    break;
                  }
                  f2 = g2.sibling;
                  if (null !== f2) {
                    f2.return = g2.return;
                    g2 = f2;
                    break;
                  }
                  g2 = g2.return;
                }
              f2 = g2;
            }
        Yi(a3, b3, e3.children, c7);
        b3 = b3.child;
      }
      return b3;
    case 9:
      return e3 = b3.type, d4 = b3.pendingProps.children, Tg(b3, c7), e3 = Vg(e3), d4 = d4(e3), b3.flags |= 1, Yi(a3, b3, d4, c7), b3.child;
    case 14:
      return d4 = b3.type, e3 = Lg(d4, b3.pendingProps), e3 = Lg(d4.type, e3), aj(a3, b3, d4, e3, c7);
    case 15:
      return cj(a3, b3, b3.type, b3.pendingProps, c7);
    case 17:
      return d4 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d4 ? e3 : Lg(d4, e3), jj(a3, b3), b3.tag = 1, Zf(d4) ? (a3 = true, cg(b3)) : a3 = false, Tg(b3, c7), ph(b3, d4, e3), rh(b3, d4, e3, c7), kj(null, b3, d4, true, a3, c7);
    case 19:
      return yj(a3, b3, c7);
    case 22:
      return ej(a3, b3, c7);
  }
  throw Error(p$1(156, b3.tag));
};
function Gk(a3, b3) {
  return ac(a3, b3);
}
function al(a3, b3, c7, d4) {
  this.tag = a3;
  this.key = c7;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b3;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d4;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function Bg(a3, b3, c7, d4) {
  return new al(a3, b3, c7, d4);
}
function bj(a3) {
  a3 = a3.prototype;
  return !(!a3 || !a3.isReactComponent);
}
function $k(a3) {
  if ("function" === typeof a3)
    return bj(a3) ? 1 : 0;
  if (void 0 !== a3 && null !== a3) {
    a3 = a3.$$typeof;
    if (a3 === Da)
      return 11;
    if (a3 === Ga)
      return 14;
  }
  return 2;
}
function wh(a3, b3) {
  var c7 = a3.alternate;
  null === c7 ? (c7 = Bg(a3.tag, b3, a3.key, a3.mode), c7.elementType = a3.elementType, c7.type = a3.type, c7.stateNode = a3.stateNode, c7.alternate = a3, a3.alternate = c7) : (c7.pendingProps = b3, c7.type = a3.type, c7.flags = 0, c7.subtreeFlags = 0, c7.deletions = null);
  c7.flags = a3.flags & 14680064;
  c7.childLanes = a3.childLanes;
  c7.lanes = a3.lanes;
  c7.child = a3.child;
  c7.memoizedProps = a3.memoizedProps;
  c7.memoizedState = a3.memoizedState;
  c7.updateQueue = a3.updateQueue;
  b3 = a3.dependencies;
  c7.dependencies = null === b3 ? null : { lanes: b3.lanes, firstContext: b3.firstContext };
  c7.sibling = a3.sibling;
  c7.index = a3.index;
  c7.ref = a3.ref;
  return c7;
}
function yh(a3, b3, c7, d4, e3, f2) {
  var g2 = 2;
  d4 = a3;
  if ("function" === typeof a3)
    bj(a3) && (g2 = 1);
  else if ("string" === typeof a3)
    g2 = 5;
  else
    a:
      switch (a3) {
        case ya:
          return Ah(c7.children, e3, f2, b3);
        case za:
          g2 = 8;
          e3 |= 8;
          break;
        case Aa:
          return a3 = Bg(12, c7, b3, e3 | 2), a3.elementType = Aa, a3.lanes = f2, a3;
        case Ea:
          return a3 = Bg(13, c7, b3, e3), a3.elementType = Ea, a3.lanes = f2, a3;
        case Fa:
          return a3 = Bg(19, c7, b3, e3), a3.elementType = Fa, a3.lanes = f2, a3;
        case Ia:
          return qj(c7, e3, f2, b3);
        default:
          if ("object" === typeof a3 && null !== a3)
            switch (a3.$$typeof) {
              case Ba:
                g2 = 10;
                break a;
              case Ca:
                g2 = 9;
                break a;
              case Da:
                g2 = 11;
                break a;
              case Ga:
                g2 = 14;
                break a;
              case Ha:
                g2 = 16;
                d4 = null;
                break a;
            }
          throw Error(p$1(130, null == a3 ? a3 : typeof a3, ""));
      }
  b3 = Bg(g2, c7, b3, e3);
  b3.elementType = a3;
  b3.type = d4;
  b3.lanes = f2;
  return b3;
}
function Ah(a3, b3, c7, d4) {
  a3 = Bg(7, a3, d4, b3);
  a3.lanes = c7;
  return a3;
}
function qj(a3, b3, c7, d4) {
  a3 = Bg(22, a3, d4, b3);
  a3.elementType = Ia;
  a3.lanes = c7;
  a3.stateNode = { isHidden: false };
  return a3;
}
function xh(a3, b3, c7) {
  a3 = Bg(6, a3, null, b3);
  a3.lanes = c7;
  return a3;
}
function zh(a3, b3, c7) {
  b3 = Bg(4, null !== a3.children ? a3.children : [], a3.key, b3);
  b3.lanes = c7;
  b3.stateNode = { containerInfo: a3.containerInfo, pendingChildren: null, implementation: a3.implementation };
  return b3;
}
function bl(a3, b3, c7, d4, e3) {
  this.tag = b3;
  this.containerInfo = a3;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.pendingContext = this.context = null;
  this.callbackPriority = 0;
  this.eventTimes = zc(0);
  this.expirationTimes = zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = zc(0);
  this.identifierPrefix = d4;
  this.onRecoverableError = e3;
  this.mutableSourceEagerHydrationData = null;
}
function cl(a3, b3, c7, d4, e3, f2, g2, h4, k3) {
  a3 = new bl(a3, b3, c7, h4, k3);
  1 === b3 ? (b3 = 1, true === f2 && (b3 |= 8)) : b3 = 0;
  f2 = Bg(3, null, null, b3);
  a3.current = f2;
  f2.stateNode = a3;
  f2.memoizedState = { element: d4, isDehydrated: c7, cache: null, transitions: null, pendingSuspenseBoundaries: null };
  ah(f2);
  return a3;
}
function dl(a3, b3, c7) {
  var d4 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return { $$typeof: wa, key: null == d4 ? null : "" + d4, children: a3, containerInfo: b3, implementation: c7 };
}
function el(a3) {
  if (!a3)
    return Vf;
  a3 = a3._reactInternals;
  a: {
    if (Vb(a3) !== a3 || 1 !== a3.tag)
      throw Error(p$1(170));
    var b3 = a3;
    do {
      switch (b3.tag) {
        case 3:
          b3 = b3.stateNode.context;
          break a;
        case 1:
          if (Zf(b3.type)) {
            b3 = b3.stateNode.__reactInternalMemoizedMergedChildContext;
            break a;
          }
      }
      b3 = b3.return;
    } while (null !== b3);
    throw Error(p$1(171));
  }
  if (1 === a3.tag) {
    var c7 = a3.type;
    if (Zf(c7))
      return bg(a3, c7, b3);
  }
  return b3;
}
function fl(a3, b3, c7, d4, e3, f2, g2, h4, k3) {
  a3 = cl(c7, d4, true, a3, e3, f2, g2, h4, k3);
  a3.context = el(null);
  c7 = a3.current;
  d4 = L();
  e3 = lh(c7);
  f2 = ch(d4, e3);
  f2.callback = void 0 !== b3 && null !== b3 ? b3 : null;
  dh(c7, f2, e3);
  a3.current.lanes = e3;
  Ac(a3, e3, d4);
  Ek(a3, d4);
  return a3;
}
function gl(a3, b3, c7, d4) {
  var e3 = b3.current, f2 = L(), g2 = lh(e3);
  c7 = el(c7);
  null === b3.context ? b3.context = c7 : b3.pendingContext = c7;
  b3 = ch(f2, g2);
  b3.payload = { element: a3 };
  d4 = void 0 === d4 ? null : d4;
  null !== d4 && (b3.callback = d4);
  a3 = dh(e3, b3, g2);
  null !== a3 && (mh(a3, e3, g2, f2), eh(a3, e3, g2));
  return g2;
}
function hl(a3) {
  a3 = a3.current;
  if (!a3.child)
    return null;
  switch (a3.child.tag) {
    case 5:
      return a3.child.stateNode;
    default:
      return a3.child.stateNode;
  }
}
function il(a3, b3) {
  a3 = a3.memoizedState;
  if (null !== a3 && null !== a3.dehydrated) {
    var c7 = a3.retryLane;
    a3.retryLane = 0 !== c7 && c7 < b3 ? c7 : b3;
  }
}
function jl(a3, b3) {
  il(a3, b3);
  (a3 = a3.alternate) && il(a3, b3);
}
function kl() {
  return null;
}
var ll = "function" === typeof reportError ? reportError : function(a3) {
  console.error(a3);
};
function ml(a3) {
  this._internalRoot = a3;
}
nl.prototype.render = ml.prototype.render = function(a3) {
  var b3 = this._internalRoot;
  if (null === b3)
    throw Error(p$1(409));
  gl(a3, b3, null, null);
};
nl.prototype.unmount = ml.prototype.unmount = function() {
  var a3 = this._internalRoot;
  if (null !== a3) {
    this._internalRoot = null;
    var b3 = a3.containerInfo;
    Sk(function() {
      gl(null, a3, null, null);
    });
    b3[uf] = null;
  }
};
function nl(a3) {
  this._internalRoot = a3;
}
nl.prototype.unstable_scheduleHydration = function(a3) {
  if (a3) {
    var b3 = Hc();
    a3 = { blockedOn: null, target: a3, priority: b3 };
    for (var c7 = 0; c7 < Qc.length && 0 !== b3 && b3 < Qc[c7].priority; c7++)
      ;
    Qc.splice(c7, 0, a3);
    0 === c7 && Vc(a3);
  }
};
function ol(a3) {
  return !(!a3 || 1 !== a3.nodeType && 9 !== a3.nodeType && 11 !== a3.nodeType);
}
function pl(a3) {
  return !(!a3 || 1 !== a3.nodeType && 9 !== a3.nodeType && 11 !== a3.nodeType && (8 !== a3.nodeType || " react-mount-point-unstable " !== a3.nodeValue));
}
function ql() {
}
function rl(a3, b3, c7, d4, e3) {
  if (e3) {
    if ("function" === typeof d4) {
      var f2 = d4;
      d4 = function() {
        var a4 = hl(g2);
        f2.call(a4);
      };
    }
    var g2 = fl(b3, d4, a3, 0, null, false, false, "", ql);
    a3._reactRootContainer = g2;
    a3[uf] = g2.current;
    sf(8 === a3.nodeType ? a3.parentNode : a3);
    Sk();
    return g2;
  }
  for (; e3 = a3.lastChild; )
    a3.removeChild(e3);
  if ("function" === typeof d4) {
    var h4 = d4;
    d4 = function() {
      var a4 = hl(k3);
      h4.call(a4);
    };
  }
  var k3 = cl(a3, 0, false, null, null, false, false, "", ql);
  a3._reactRootContainer = k3;
  a3[uf] = k3.current;
  sf(8 === a3.nodeType ? a3.parentNode : a3);
  Sk(function() {
    gl(b3, k3, c7, d4);
  });
  return k3;
}
function sl(a3, b3, c7, d4, e3) {
  var f2 = c7._reactRootContainer;
  if (f2) {
    var g2 = f2;
    if ("function" === typeof e3) {
      var h4 = e3;
      e3 = function() {
        var a4 = hl(g2);
        h4.call(a4);
      };
    }
    gl(b3, g2, a3, e3);
  } else
    g2 = rl(c7, b3, a3, e3, d4);
  return hl(g2);
}
Ec = function(a3) {
  switch (a3.tag) {
    case 3:
      var b3 = a3.stateNode;
      if (b3.current.memoizedState.isDehydrated) {
        var c7 = tc(b3.pendingLanes);
        0 !== c7 && (Cc(b3, c7 | 1), Ek(b3, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
      }
      break;
    case 13:
      Sk(function() {
        var b4 = Zg(a3, 1);
        if (null !== b4) {
          var c8 = L();
          mh(b4, a3, 1, c8);
        }
      }), jl(a3, 1);
  }
};
Fc = function(a3) {
  if (13 === a3.tag) {
    var b3 = Zg(a3, 134217728);
    if (null !== b3) {
      var c7 = L();
      mh(b3, a3, 134217728, c7);
    }
    jl(a3, 134217728);
  }
};
Gc = function(a3) {
  if (13 === a3.tag) {
    var b3 = lh(a3), c7 = Zg(a3, b3);
    if (null !== c7) {
      var d4 = L();
      mh(c7, a3, b3, d4);
    }
    jl(a3, b3);
  }
};
Hc = function() {
  return C;
};
Ic = function(a3, b3) {
  var c7 = C;
  try {
    return C = a3, b3();
  } finally {
    C = c7;
  }
};
yb = function(a3, b3, c7) {
  switch (b3) {
    case "input":
      bb(a3, c7);
      b3 = c7.name;
      if ("radio" === c7.type && null != b3) {
        for (c7 = a3; c7.parentNode; )
          c7 = c7.parentNode;
        c7 = c7.querySelectorAll("input[name=" + JSON.stringify("" + b3) + '][type="radio"]');
        for (b3 = 0; b3 < c7.length; b3++) {
          var d4 = c7[b3];
          if (d4 !== a3 && d4.form === a3.form) {
            var e3 = Db(d4);
            if (!e3)
              throw Error(p$1(90));
            Wa(d4);
            bb(d4, e3);
          }
        }
      }
      break;
    case "textarea":
      ib(a3, c7);
      break;
    case "select":
      b3 = c7.value, null != b3 && fb(a3, !!c7.multiple, b3, false);
  }
};
Gb = Rk;
Hb = Sk;
var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a3) {
  a3 = Zb(a3);
  return null === a3 ? null : a3.stateNode;
}, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!wl.isDisabled && wl.supportsFiber)
    try {
      kc = wl.inject(vl), lc = wl;
    } catch (a3) {
    }
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
reactDom_production_min.createPortal = function(a3, b3) {
  var c7 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!ol(b3))
    throw Error(p$1(200));
  return dl(a3, b3, null, c7);
};
reactDom_production_min.createRoot = function(a3, b3) {
  if (!ol(a3))
    throw Error(p$1(299));
  var c7 = false, d4 = "", e3 = ll;
  null !== b3 && void 0 !== b3 && (true === b3.unstable_strictMode && (c7 = true), void 0 !== b3.identifierPrefix && (d4 = b3.identifierPrefix), void 0 !== b3.onRecoverableError && (e3 = b3.onRecoverableError));
  b3 = cl(a3, 1, false, null, null, c7, false, d4, e3);
  a3[uf] = b3.current;
  sf(8 === a3.nodeType ? a3.parentNode : a3);
  return new ml(b3);
};
reactDom_production_min.findDOMNode = function(a3) {
  if (null == a3)
    return null;
  if (1 === a3.nodeType)
    return a3;
  var b3 = a3._reactInternals;
  if (void 0 === b3) {
    if ("function" === typeof a3.render)
      throw Error(p$1(188));
    a3 = Object.keys(a3).join(",");
    throw Error(p$1(268, a3));
  }
  a3 = Zb(b3);
  a3 = null === a3 ? null : a3.stateNode;
  return a3;
};
reactDom_production_min.flushSync = function(a3) {
  return Sk(a3);
};
reactDom_production_min.hydrate = function(a3, b3, c7) {
  if (!pl(b3))
    throw Error(p$1(200));
  return sl(null, a3, b3, true, c7);
};
reactDom_production_min.hydrateRoot = function(a3, b3, c7) {
  if (!ol(a3))
    throw Error(p$1(405));
  var d4 = null != c7 && c7.hydratedSources || null, e3 = false, f2 = "", g2 = ll;
  null !== c7 && void 0 !== c7 && (true === c7.unstable_strictMode && (e3 = true), void 0 !== c7.identifierPrefix && (f2 = c7.identifierPrefix), void 0 !== c7.onRecoverableError && (g2 = c7.onRecoverableError));
  b3 = fl(b3, null, a3, 1, null != c7 ? c7 : null, e3, false, f2, g2);
  a3[uf] = b3.current;
  sf(a3);
  if (d4)
    for (a3 = 0; a3 < d4.length; a3++)
      c7 = d4[a3], e3 = c7._getVersion, e3 = e3(c7._source), null == b3.mutableSourceEagerHydrationData ? b3.mutableSourceEagerHydrationData = [c7, e3] : b3.mutableSourceEagerHydrationData.push(
        c7,
        e3
      );
  return new nl(b3);
};
reactDom_production_min.render = function(a3, b3, c7) {
  if (!pl(b3))
    throw Error(p$1(200));
  return sl(null, a3, b3, false, c7);
};
reactDom_production_min.unmountComponentAtNode = function(a3) {
  if (!pl(a3))
    throw Error(p$1(40));
  return a3._reactRootContainer ? (Sk(function() {
    sl(null, null, a3, false, function() {
      a3._reactRootContainer = null;
      a3[uf] = null;
    });
  }), true) : false;
};
reactDom_production_min.unstable_batchedUpdates = Rk;
reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a3, b3, c7, d4) {
  if (!pl(c7))
    throw Error(p$1(200));
  if (null == a3 || void 0 === a3._reactInternals)
    throw Error(p$1(38));
  return sl(a3, b3, c7, false, d4);
};
reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
{
  checkDCE();
  reactDom.exports = reactDom_production_min;
}
var reactDomExports = reactDom.exports;
const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
var m$1 = reactDomExports;
{
  client.createRoot = m$1.createRoot;
  client.hydrateRoot = m$1.hydrateRoot;
}
const App$1 = "";
const vaultPasswordLock = (password) => {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(
      `vault action:passwordlock password:${password}`,
      (res) => {
        if (!res.status && !res.pending) {
          reject(
            res.error ? res.error : res.message ? res.message : "Rpc Failed"
          );
        }
        if (res.status && !res.pending) {
          resolve(1);
        }
        if (!res.status && res.pending) {
          resolve(0);
        }
      }
    );
  });
};
const vaultPasswordUnlock = (password) => {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(
      `vault action:passwordunlock password:${password}`,
      (res) => {
        if (!res.status && !res.pending) {
          reject(
            res.error ? res.error : res.message ? res.message : "Rpc Failed"
          );
        }
        if (res.status && !res.pending) {
          resolve(1);
        }
        if (!res.status && res.pending) {
          resolve(0);
        }
      }
    );
  });
};
const isVaultLocked = () => {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(`status`, (response) => {
      if (!response.status)
        reject(response.error ? response.error : "Rpc failed");
      if (response.status) {
        const isLocked = response.response.locked;
        resolve(isLocked);
      }
    });
  });
};
const createBackup = (filename, password) => {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(
      `backup file:"${filename}" password:"${password.length ? password : "minima"}"`,
      (resp) => {
        if (!resp.status)
          reject();
        resolve(resp.backup);
      }
    );
  });
};
const restoreFromBackup = (host2, filepath, password) => {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(
      `restoresync ${host2.length ? 'host:"' + host2 + '"' : ""} file:"${filepath}" password:"${password.length ? password : "minima"}"`,
      (response) => {
        if (!response.status)
          return reject(
            response.error ? response.error : "Restoring from backup failed, please try again"
          );
        resolve(response);
      }
    );
  });
};
function isWriteMode() {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(`checkmode`, function(response) {
      if (response.status) {
        return resolve(response.response.mode === "WRITE");
      }
      return reject();
    });
  });
}
function vault() {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(`vault`, function(response) {
      if (response.response) {
        return resolve(response.response);
      }
      return reject();
    });
  });
}
const importSeedPhrase = (phrase, host2, keyuses = 1e3) => {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(
      `archive action:resync phrase:"${phrase}" host:"${host2}" keyuses:${keyuses}`,
      (response) => {
        if (!response.status)
          reject(response.error ? response.error : "RPC FAILED");
        resolve(response.response);
      }
    );
  });
};
const reset = (archivefile, backupfile, password) => {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(
      `reset archivefile:"${archivefile}" action:restore file:"${backupfile}" password:"${password ? password : "minima"}"`,
      (resp) => {
        if (!resp.status) {
          const isWrongFileType = resp.response.error && resp.response.error.includes("org.h2.jdbcSQLSyntaxErrorException");
          return reject(
            isWrongFileType ? "Invalid file type, please make sure this is of type raw.dat" : resp.response.error ? resp.response.error : "Unexpected error"
          );
        }
        resolve(resp);
      }
    );
  });
};
const resetChainResync = (archivefile) => {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(
      `reset archivefile:"${archivefile}" action:chainsync`,
      (resp) => {
        if (!resp.status) {
          const isWrongFileType = resp.response.error && resp.response.error.includes("org.h2.jdbcSQLSyntaxErrorException");
          reject(
            isWrongFileType ? "Invalid file type, please make sure this is of type raw.dat" : resp.response.error ? resp.response.error : "Unexpected error"
          );
        }
        resolve(resp);
      }
    );
  });
};
const resetSeedSync = (archivefile, phrase, keyuses) => {
  return new Promise((resolve, reject) => {
    window.MDS.cmd(
      `reset archivefile:"${archivefile}" action:seedsync phrase:"${phrase}" keyuses:"${keyuses}"`,
      (resp) => {
        if (!resp.response.status) {
          const isWrongFileType = resp.response.error && resp.response.error.includes("org.h2.jdbcSQLSyntaxErrorException");
          return reject(
            isWrongFileType ? "Invalid file type, please make sure this is of type raw.dat" : resp.response.error ? resp.response.error : "Unexpected error"
          );
        }
        resolve(resp);
      }
    );
  });
};
const createFolder = (folder) => {
  return new Promise((resolve) => {
    window.MDS.file.makedir(folder, (res) => {
      resolve(res);
    });
  });
};
const listFiles = (path) => {
  return new Promise((resolve) => {
    window.MDS.file.list(path, (res) => {
      resolve(res);
    });
  });
};
const saveFileAsBinary = (fileName, hexString) => {
  return new Promise((resolve) => {
    window.MDS.file.savebinary(fileName, hexString, (res) => {
      resolve(res);
    });
  });
};
const getPath = (filename) => {
  return new Promise((resolve, reject) => {
    window.MDS.file.getpath(filename, (response) => {
      if (response.status) {
        resolve(response.response.getpath.path);
      }
      if (!response.status && !response.pending) {
        reject(response.error ? response.error : "RPC FAILED");
      }
    });
  });
};
const toggleBackupStatus = (status) => {
  return new Promise((resolve) => {
    const backupStatus = {
      active: status
    };
    window.MDS.keypair.set(
      "backupStatus",
      JSON.stringify(backupStatus),
      (response) => {
        resolve(response.status);
      }
    );
  });
};
const getBackupStatus = () => {
  return new Promise((resolve) => {
    window.MDS.keypair.get("backupStatus", (response) => {
      resolve(response);
    });
  });
};
const deleteFile = (fileName) => {
  return new Promise((resolve, reject) => {
    window.MDS.file.delete(fileName, (res) => {
      if (res.status) {
        return resolve(res);
      }
      return reject("Failed to delete backup.");
    });
  });
};
async function blobToArrayBuffer(blob) {
  if ("arrayBuffer" in blob)
    return await blob.arrayBuffer();
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = () => reject();
    reader.readAsArrayBuffer(blob);
  });
}
function bufferToHex(buffer) {
  return [...new Uint8Array(buffer)].map((b3) => b3.toString(16).padStart(2, "0")).join("");
}
function getAppUID() {
  const url = window.location.href;
  const matches = url.match(/0x([a-z]|[0-9])+/gi);
  if (matches) {
    return matches[0];
  }
  return "unknown-app-uid";
}
function sql(query, singleResult = true) {
  return new Promise((resolve, reject) => {
    window.MDS.sql(query, function(response) {
      if (response.status) {
        if (response.rows && singleResult) {
          return resolve(response.rows[0]);
        } else if (response.rows) {
          return resolve(response.rows);
        }
        return resolve(response.status);
      }
      return reject();
    });
  });
}
function formatBytes$1(bytes, decimals = 2) {
  if (!+bytes)
    return "0 Bytes";
  const k3 = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = [
    "Bytes",
    "KiB",
    "MiB",
    "GiB",
    "TiB",
    "PiB",
    "EiB",
    "ZiB",
    "YiB"
  ];
  const i2 = Math.floor(Math.log(bytes) / Math.log(k3));
  return `${parseFloat((bytes / Math.pow(k3, i2)).toFixed(dm))} ${sizes[i2]}`;
}
const appContext = reactExports.createContext({});
const AppProvider = ({ children }) => {
  const [displayBackButton] = reactExports.useState(false);
  const [backButton, setBackButton] = reactExports.useState({
    display: false,
    to: "/dashboard",
    title: "Security"
  });
  const loaded = reactExports.useRef(false);
  const [showSecurity, setShowSecurity] = reactExports.useState(true);
  const [vaultLocked, setVaultLocked] = reactExports.useState(null);
  const [logs2, setLogs] = reactExports.useState([]);
  const [modal, setModal] = reactExports.useState({
    content: null,
    primaryActions: null,
    secondaryActions: null
  });
  const [_vault, setVault] = reactExports.useState(null);
  const [_phrase, setPhrase] = reactExports.useState({
    1: "",
    2: "",
    3: "",
    4: "",
    5: "",
    6: "",
    7: "",
    8: "",
    9: "",
    10: "",
    11: "",
    12: "",
    13: "",
    14: "",
    15: "",
    16: "",
    17: "",
    18: "",
    19: "",
    20: "",
    21: "",
    22: "",
    23: "",
    24: ""
  });
  const [_backupLogs, setBackupLogs] = reactExports.useState([]);
  const [_promptBackupLogs, setPromptBackupLogs] = reactExports.useState(false);
  const [_promptBackups, setPromptBackups] = reactExports.useState(false);
  const [_promptArchives, setPromptArchives] = reactExports.useState(false);
  const [backups, setBackups] = reactExports.useState([]);
  const [appIsInWriteMode, setAppIsInWriteMode] = reactExports.useState(
    null
  );
  const [_promptFileUpload, setPromptFileUpload] = reactExports.useState(false);
  const [minidappSystemFailed, setMinidappSystemFailed] = reactExports.useState(null);
  const [shuttingDown, setShuttingDown] = reactExports.useState(false);
  const [archives, setArchives] = reactExports.useState([]);
  const [_currentRestoreWindow, setCurrentRestoreWindow] = reactExports.useState("none");
  reactExports.useEffect(() => {
    if (loaded && loaded.current) {
      if (vaultLocked) {
        resetVault();
      }
      if (!vaultLocked) {
        fetchVault();
      }
    }
  }, [vaultLocked, loaded]);
  const fetchVault = reactExports.useCallback(() => {
    return vault().then((response) => {
      setVault(response);
    });
  }, []);
  const resetVault = () => {
    setVault(null);
  };
  const phraseAsArray = reactExports.useMemo(() => {
    if (!_vault) {
      return [];
    }
    return _vault.phrase.split(" ");
  }, [_vault]);
  const clearPhrase = () => {
    setPhrase({
      1: "",
      2: "",
      3: "",
      4: "",
      5: "",
      6: "",
      7: "",
      8: "",
      9: "",
      10: "",
      11: "",
      12: "",
      13: "",
      14: "",
      15: "",
      16: "",
      17: "",
      18: "",
      19: "",
      20: "",
      21: "",
      22: "",
      23: "",
      24: ""
    });
  };
  const getTimeMilliFromBackupName = (name2) => {
    try {
      const timeMilli = name2.split("backup_")[1];
      return parseInt(timeMilli.split("__")[0]);
    } catch (error) {
      return 0;
    }
  };
  const getTimeMilliFromArchiveName = (name2) => {
    try {
      const timeMilli = name2.split("export_")[1];
      return parseInt(timeMilli.split("__")[0]);
    } catch (error) {
      return 0;
    }
  };
  const getBackupLogs = async () => {
    const autoBackupLogs = await sql(
      "SELECT * FROM cache WHERE name = 'BACKUP_LOGS'"
    );
    if (autoBackupLogs) {
      setBackupLogs(JSON.parse(autoBackupLogs.DATA));
    }
  };
  const getBackups = () => {
    listFiles("/backups").then((response) => {
      if (response.status) {
        setBackups(
          response.response.list.sort(function(a3, b3) {
            return getTimeMilliFromBackupName(a3.name) - getTimeMilliFromBackupName(b3.name);
          }).reverse()
        );
      }
    });
  };
  const getArchives = () => {
    listFiles("/archives").then((response) => {
      if (response.status) {
        setArchives(
          response.response.list.sort(function(a3, b3) {
            return getTimeMilliFromArchiveName(a3.name) - getTimeMilliFromArchiveName(b3.name);
          }).reverse()
        );
      }
    });
  };
  const checkVaultLocked = () => {
    isVaultLocked().then((r2) => {
      setVaultLocked(r2);
    });
  };
  reactExports.useEffect(() => {
    if (!loaded.current) {
      loaded.current = true;
      window.MDS.init((msg) => {
        if (msg.event === "inited") {
          vault().then((response) => {
            setVault(response);
          });
          (async () => {
            const autoBackupLogs = await sql(
              "SELECT * FROM cache WHERE name = 'BACKUP_LOGS'"
            );
            if (autoBackupLogs) {
              setBackupLogs(JSON.parse(autoBackupLogs.DATA));
            }
          })();
          isWriteMode().then((appIsInWriteMode2) => {
            setAppIsInWriteMode(appIsInWriteMode2);
          });
          createFolder("backups");
          createFolder("archives");
          getBackups();
          getArchives();
          checkVaultLocked();
        }
        if (msg.event === "MINIMALOG") {
          const log = msg.data.message;
          setLogs((prevState) => [...prevState, log]);
        }
        if (msg.event === "MDS_SHUTDOWN") {
          setShuttingDown(true);
        }
        if (msg.event === "MDSFAIL") {
          setMinidappSystemFailed(true);
        }
      });
    }
  }, [loaded]);
  const promptBackupLogs = () => {
    setPromptBackupLogs((prevState) => !prevState);
  };
  const promptBackups = () => {
    setPromptBackups((prevState) => !prevState);
  };
  const promptArchives = () => {
    setPromptArchives((prevState) => !prevState);
  };
  const promptFileUpload = (progress) => {
    setPromptFileUpload(progress);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    appContext.Provider,
    {
      value: {
        loaded,
        showSecurity,
        setShowSecurity,
        modal,
        setModal,
        vaultLocked,
        checkVaultLocked,
        logs: logs2,
        setLogs,
        appIsInWriteMode,
        minidappSystemFailed,
        setPhrase,
        clearPhrase,
        phraseAsArray,
        resetVault,
        fetchVault,
        // heading back button stuff
        backButton,
        setBackButton,
        displayBackButton,
        _promptFileUpload,
        promptFileUpload,
        //backups
        _backupLogs,
        _promptBackupLogs,
        promptBackupLogs,
        _promptBackups,
        promptBackups,
        _promptArchives,
        promptArchives,
        backups,
        getBackups,
        getBackupLogs,
        //archives
        archives,
        getArchives,
        // mds shutting down
        shuttingDown,
        _currentRestoreWindow,
        setCurrentRestoreWindow
      },
      children
    }
  );
};
/**
 * @remix-run/router v1.6.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$4() {
  _extends$4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$4.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
const PopStateEventType = "popstate";
function createHashHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = parsePath(window2.location.hash.substr(1));
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to2) {
    let base = window2.document.querySelector("base");
    let href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to2 === "string" ? to2 : createPath(to2));
  }
  function validateHashLocation(location, to2) {
    warning$1(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to2) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant(value2, message) {
  if (value2 === false || value2 === null || typeof value2 === "undefined") {
    throw new Error(message);
  }
}
function warning$1(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined")
      console.warn(message);
    try {
      throw new Error(message);
    } catch (e3) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index2) {
  return {
    usr: location.state,
    key: location.key,
    idx: index2
  };
}
function createLocation(current, to2, state, key2) {
  if (state === void 0) {
    state = null;
  }
  let location = _extends$4({
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to2 === "string" ? parsePath(to2) : to2, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to2 && to2.key || key2 || createKey()
  });
  return location;
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash = ""
  } = _ref;
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#")
    pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener = null;
  let index2 = getIndex();
  if (index2 == null) {
    index2 = 0;
    globalHistory.replaceState(_extends$4({}, globalHistory.state, {
      idx: index2
    }), "");
  }
  function getIndex() {
    let state = globalHistory.state || {
      idx: null
    };
    return state.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index2;
    index2 = nextIndex;
    if (listener) {
      listener({
        action,
        location: history.location,
        delta
      });
    }
  }
  function push(to2, state) {
    action = Action.Push;
    let location = createLocation(history.location, to2, state);
    if (validateLocation)
      validateLocation(location, to2);
    index2 = getIndex() + 1;
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace(to2, state) {
    action = Action.Replace;
    let location = createLocation(history.location, to2, state);
    if (validateLocation)
      validateLocation(location, to2);
    index2 = getIndex();
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to2) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to2 === "string" ? to2 : createPath(to2);
    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to2) {
      return createHref(window2, to2);
    },
    createURL,
    encodeLocation(to2) {
      let url = createURL(to2);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace,
    go(n2) {
      return globalHistory.go(n2);
    }
  };
  return history;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
const immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
function isIndexRoute(route) {
  return route.index === true;
}
function convertRoutesToDataRoutes(routes, mapRouteProperties2, parentPath, manifest) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  if (manifest === void 0) {
    manifest = {};
  }
  return routes.map((route, index2) => {
    let treePath = [...parentPath, index2];
    let id2 = typeof route.id === "string" ? route.id : treePath.join("-");
    invariant(route.index !== true || !route.children, "Cannot specify children on an index route");
    invariant(!manifest[id2], 'Found a route id collision on id "' + id2 + `".  Route id's must be globally unique within Data Router usages`);
    if (isIndexRoute(route)) {
      let indexRoute = _extends$4({}, route, mapRouteProperties2(route), {
        id: id2
      });
      manifest[id2] = indexRoute;
      return indexRoute;
    } else {
      let pathOrLayoutRoute = _extends$4({}, route, mapRouteProperties2(route), {
        id: id2,
        children: void 0
      });
      manifest[id2] = pathOrLayoutRoute;
      if (route.children) {
        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties2, treePath, manifest);
      }
      return pathOrLayoutRoute;
    }
  });
}
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i2 = 0; matches == null && i2 < branches.length; ++i2) {
    matches = matchRouteBranch(
      branches[i2],
      // Incoming pathnames are generally encoded from either window.location
      // or from router.navigate, but we want to match against the unencoded
      // paths in the route definitions.  Memory router locations won't be
      // encoded here but there also shouldn't be anything to decode so this
      // should be a safe operation.  This avoids needing matchRoutes to be
      // history-aware.
      safelyDecodeURI(pathname)
    );
  }
  return matches;
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index2, relativePath) => {
    let meta2 = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index2,
      route
    };
    if (meta2.relativePath.startsWith("/")) {
      invariant(meta2.relativePath.startsWith(parentPath), 'Absolute route path "' + meta2.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta2.relativePath = meta2.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta2.relativePath]);
    let routesMeta = parentsMeta.concat(meta2);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index2) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index2);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index2, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a3, b3) => a3.score !== b3.score ? b3.score - a3.score : compareIndexes(a3.routesMeta.map((meta2) => meta2.childrenIndex), b3.routesMeta.map((meta2) => meta2.childrenIndex)));
}
const paramRe = /^:\w+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;
const isSplat = (s3) => s3 === "*";
function computeScore(path, index2) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index2) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s3) => !isSplat(s3)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a3, b3) {
  let siblings = a3.length === b3.length && a3.slice(0, -1).every((n2, i2) => n2 === b3[i2]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a3[a3.length - 1] - b3[b3.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i2 = 0; i2 < routesMeta.length; ++i2) {
    let meta2 = routesMeta[i2];
    let end = i2 === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match2 = matchPath({
      path: meta2.relativePath,
      caseSensitive: meta2.caseSensitive,
      end
    }, remainingPathname);
    if (!match2)
      return null;
    Object.assign(matchedParams, match2.params);
    let route = meta2.route;
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    });
    if (match2.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match2 = pathname.match(matcher);
  if (!match2)
    return null;
  let matchedPathname = match2[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match2.slice(1);
  let params = paramNames.reduce((memo, paramName, index2) => {
    if (paramName === "*") {
      let splatValue = captureGroups[index2] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    memo[paramName] = safelyDecodeURIComponent(captureGroups[index2] || "", paramName);
    return memo;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning$1(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let paramNames = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_, paramName) => {
    paramNames.push(paramName);
    return "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    paramNames.push("*");
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else
    ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, paramNames];
}
function safelyDecodeURI(value2) {
  try {
    return decodeURI(value2);
  } catch (error) {
    warning$1(false, 'The URL path "' + value2 + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value2;
  }
}
function safelyDecodeURIComponent(value2, paramName) {
  try {
    return decodeURIComponent(value2);
  } catch (error) {
    warning$1(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value2 + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
    return value2;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to2, fromPathname) {
  if (fromPathname === void 0) {
    fromPathname = "/";
  }
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to2 === "string" ? parsePath(to2) : to2;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1)
        segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path) {
  return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match2, index2) => index2 === 0 || match2.route.path && match2.route.path.length > 0);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  if (isPathRelative === void 0) {
    isPathRelative = false;
  }
  let to2;
  if (typeof toArg === "string") {
    to2 = parsePath(toArg);
  } else {
    to2 = _extends$4({}, toArg);
    invariant(!to2.pathname || !to2.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to2));
    invariant(!to2.pathname || !to2.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to2));
    invariant(!to2.search || !to2.search.includes("#"), getInvalidPathError("#", "search", "hash", to2));
  }
  let isEmptyPath = toArg === "" || to2.pathname === "";
  let toPathname = isEmptyPath ? "/" : to2.pathname;
  let from;
  if (isPathRelative || toPathname == null) {
    from = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to2.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to2, from);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
const normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
const normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
class ErrorResponse {
  constructor(status, statusText, data2, internal) {
    if (internal === void 0) {
      internal = false;
    }
    this.status = status;
    this.statusText = statusText || "";
    this.internal = internal;
    if (data2 instanceof Error) {
      this.data = data2.toString();
      this.error = data2;
    } else {
      this.data = data2;
    }
  }
}
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const validMutationMethodsArr = ["post", "put", "patch", "delete"];
const validMutationMethods = new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
const validRequestMethods = new Set(validRequestMethodsArr);
const redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
const redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);
const IDLE_NAVIGATION = {
  state: "idle",
  location: void 0,
  formMethod: void 0,
  formAction: void 0,
  formEncType: void 0,
  formData: void 0
};
const IDLE_FETCHER = {
  state: "idle",
  data: void 0,
  formMethod: void 0,
  formAction: void 0,
  formEncType: void 0,
  formData: void 0
};
const IDLE_BLOCKER = {
  state: "unblocked",
  proceed: void 0,
  reset: void 0,
  location: void 0
};
const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
const isServer = !isBrowser;
const defaultMapRouteProperties = (route) => ({
  hasErrorBoundary: Boolean(route.hasErrorBoundary)
});
function createRouter(init) {
  invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
  let mapRouteProperties2;
  if (init.mapRouteProperties) {
    mapRouteProperties2 = init.mapRouteProperties;
  } else if (init.detectErrorBoundary) {
    let detectErrorBoundary = init.detectErrorBoundary;
    mapRouteProperties2 = (route) => ({
      hasErrorBoundary: detectErrorBoundary(route)
    });
  } else {
    mapRouteProperties2 = defaultMapRouteProperties;
  }
  let manifest = {};
  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties2, void 0, manifest);
  let inFlightDataRoutes;
  let basename = init.basename || "/";
  let future = _extends$4({
    v7_normalizeFormMethod: false,
    v7_prependBasename: false
  }, init.future);
  let unlistenHistory = null;
  let subscribers = /* @__PURE__ */ new Set();
  let savedScrollPositions = null;
  let getScrollRestorationKey = null;
  let getScrollPosition = null;
  let initialScrollRestored = init.hydrationData != null;
  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);
  let initialErrors = null;
  if (initialMatches == null) {
    let error = getInternalRouterError(404, {
      pathname: init.history.location.pathname
    });
    let {
      matches,
      route
    } = getShortCircuitMatches(dataRoutes);
    initialMatches = matches;
    initialErrors = {
      [route.id]: error
    };
  }
  let initialized = (
    // All initialMatches need to be loaded before we're ready.  If we have lazy
    // functions around still then we'll need to run them in initialize()
    !initialMatches.some((m4) => m4.route.lazy) && // And we have to either have no loaders or have been provided hydrationData
    (!initialMatches.some((m4) => m4.route.loader) || init.hydrationData != null)
  );
  let router2;
  let state = {
    historyAction: init.history.action,
    location: init.history.location,
    matches: initialMatches,
    initialized,
    navigation: IDLE_NAVIGATION,
    // Don't restore on initial updateState() if we were SSR'd
    restoreScrollPosition: init.hydrationData != null ? false : null,
    preventScrollReset: false,
    revalidation: "idle",
    loaderData: init.hydrationData && init.hydrationData.loaderData || {},
    actionData: init.hydrationData && init.hydrationData.actionData || null,
    errors: init.hydrationData && init.hydrationData.errors || initialErrors,
    fetchers: /* @__PURE__ */ new Map(),
    blockers: /* @__PURE__ */ new Map()
  };
  let pendingAction = Action.Pop;
  let pendingPreventScrollReset = false;
  let pendingNavigationController;
  let isUninterruptedRevalidation = false;
  let isRevalidationRequired = false;
  let cancelledDeferredRoutes = [];
  let cancelledFetcherLoads = [];
  let fetchControllers = /* @__PURE__ */ new Map();
  let incrementingLoadId = 0;
  let pendingNavigationLoadId = -1;
  let fetchReloadIds = /* @__PURE__ */ new Map();
  let fetchRedirectIds = /* @__PURE__ */ new Set();
  let fetchLoadMatches = /* @__PURE__ */ new Map();
  let activeDeferreds = /* @__PURE__ */ new Map();
  let blockerFunctions = /* @__PURE__ */ new Map();
  let ignoreNextHistoryUpdate = false;
  function initialize2() {
    unlistenHistory = init.history.listen((_ref) => {
      let {
        action: historyAction,
        location,
        delta
      } = _ref;
      if (ignoreNextHistoryUpdate) {
        ignoreNextHistoryUpdate = false;
        return;
      }
      warning$1(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
      let blockerKey = shouldBlockNavigation({
        currentLocation: state.location,
        nextLocation: location,
        historyAction
      });
      if (blockerKey && delta != null) {
        ignoreNextHistoryUpdate = true;
        init.history.go(delta * -1);
        updateBlocker(blockerKey, {
          state: "blocked",
          location,
          proceed() {
            updateBlocker(blockerKey, {
              state: "proceeding",
              proceed: void 0,
              reset: void 0,
              location
            });
            init.history.go(delta);
          },
          reset() {
            deleteBlocker(blockerKey);
            updateState({
              blockers: new Map(router2.state.blockers)
            });
          }
        });
        return;
      }
      return startNavigation(historyAction, location);
    });
    if (!state.initialized) {
      startNavigation(Action.Pop, state.location);
    }
    return router2;
  }
  function dispose() {
    if (unlistenHistory) {
      unlistenHistory();
    }
    subscribers.clear();
    pendingNavigationController && pendingNavigationController.abort();
    state.fetchers.forEach((_, key2) => deleteFetcher(key2));
    state.blockers.forEach((_, key2) => deleteBlocker(key2));
  }
  function subscribe(fn) {
    subscribers.add(fn);
    return () => subscribers.delete(fn);
  }
  function updateState(newState) {
    state = _extends$4({}, state, newState);
    subscribers.forEach((subscriber) => subscriber(state));
  }
  function completeNavigation(location, newState) {
    var _location$state, _location$state2;
    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;
    let actionData;
    if (newState.actionData) {
      if (Object.keys(newState.actionData).length > 0) {
        actionData = newState.actionData;
      } else {
        actionData = null;
      }
    } else if (isActionReload) {
      actionData = state.actionData;
    } else {
      actionData = null;
    }
    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
    for (let [key2] of blockerFunctions) {
      deleteBlocker(key2);
    }
    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
    if (inFlightDataRoutes) {
      dataRoutes = inFlightDataRoutes;
      inFlightDataRoutes = void 0;
    }
    updateState(_extends$4({}, newState, {
      actionData,
      loaderData,
      historyAction: pendingAction,
      location,
      initialized: true,
      navigation: IDLE_NAVIGATION,
      revalidation: "idle",
      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
      preventScrollReset,
      blockers: new Map(state.blockers)
    }));
    if (isUninterruptedRevalidation)
      ;
    else if (pendingAction === Action.Pop)
      ;
    else if (pendingAction === Action.Push) {
      init.history.push(location, location.state);
    } else if (pendingAction === Action.Replace) {
      init.history.replace(location, location.state);
    }
    pendingAction = Action.Pop;
    pendingPreventScrollReset = false;
    isUninterruptedRevalidation = false;
    isRevalidationRequired = false;
    cancelledDeferredRoutes = [];
    cancelledFetcherLoads = [];
  }
  async function navigate(to2, opts) {
    if (typeof to2 === "number") {
      init.history.go(to2);
      return;
    }
    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to2, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
    let {
      path,
      submission,
      error
    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
    let currentLocation = state.location;
    let nextLocation = createLocation(state.location, path, opts && opts.state);
    nextLocation = _extends$4({}, nextLocation, init.history.encodeLocation(nextLocation));
    let userReplace = opts && opts.replace != null ? opts.replace : void 0;
    let historyAction = Action.Push;
    if (userReplace === true) {
      historyAction = Action.Replace;
    } else if (userReplace === false)
      ;
    else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
      historyAction = Action.Replace;
    }
    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0;
    let blockerKey = shouldBlockNavigation({
      currentLocation,
      nextLocation,
      historyAction
    });
    if (blockerKey) {
      updateBlocker(blockerKey, {
        state: "blocked",
        location: nextLocation,
        proceed() {
          updateBlocker(blockerKey, {
            state: "proceeding",
            proceed: void 0,
            reset: void 0,
            location: nextLocation
          });
          navigate(to2, opts);
        },
        reset() {
          deleteBlocker(blockerKey);
          updateState({
            blockers: new Map(state.blockers)
          });
        }
      });
      return;
    }
    return await startNavigation(historyAction, nextLocation, {
      submission,
      // Send through the formData serialization error if we have one so we can
      // render at the right error boundary after we match routes
      pendingError: error,
      preventScrollReset,
      replace: opts && opts.replace
    });
  }
  function revalidate() {
    interruptActiveLoads();
    updateState({
      revalidation: "loading"
    });
    if (state.navigation.state === "submitting") {
      return;
    }
    if (state.navigation.state === "idle") {
      startNavigation(state.historyAction, state.location, {
        startUninterruptedRevalidation: true
      });
      return;
    }
    startNavigation(pendingAction || state.historyAction, state.navigation.location, {
      overrideNavigation: state.navigation
    });
  }
  async function startNavigation(historyAction, location, opts) {
    pendingNavigationController && pendingNavigationController.abort();
    pendingNavigationController = null;
    pendingAction = historyAction;
    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
    saveScrollPosition(state.location, state.matches);
    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let loadingNavigation = opts && opts.overrideNavigation;
    let matches = matchRoutes(routesToUse, location, basename);
    if (!matches) {
      let error = getInternalRouterError(404, {
        pathname: location.pathname
      });
      let {
        matches: notFoundMatches,
        route
      } = getShortCircuitMatches(routesToUse);
      cancelActiveDeferreds();
      completeNavigation(location, {
        matches: notFoundMatches,
        loaderData: {},
        errors: {
          [route.id]: error
        }
      });
      return;
    }
    if (state.initialized && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
      completeNavigation(location, {
        matches
      });
      return;
    }
    pendingNavigationController = new AbortController();
    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);
    let pendingActionData;
    let pendingError;
    if (opts && opts.pendingError) {
      pendingError = {
        [findNearestBoundary(matches).route.id]: opts.pendingError
      };
    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
      let actionOutput = await handleAction(request, location, opts.submission, matches, {
        replace: opts.replace
      });
      if (actionOutput.shortCircuited) {
        return;
      }
      pendingActionData = actionOutput.pendingActionData;
      pendingError = actionOutput.pendingActionError;
      let navigation = _extends$4({
        state: "loading",
        location
      }, opts.submission);
      loadingNavigation = navigation;
      request = new Request(request.url, {
        signal: request.signal
      });
    }
    let {
      shortCircuited,
      loaderData,
      errors
    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);
    if (shortCircuited) {
      return;
    }
    pendingNavigationController = null;
    completeNavigation(location, _extends$4({
      matches
    }, pendingActionData ? {
      actionData: pendingActionData
    } : {}, {
      loaderData,
      errors
    }));
  }
  async function handleAction(request, location, submission, matches, opts) {
    interruptActiveLoads();
    let navigation = _extends$4({
      state: "submitting",
      location
    }, submission);
    updateState({
      navigation
    });
    let result;
    let actionMatch = getTargetMatch(matches, location);
    if (!actionMatch.route.action && !actionMatch.route.lazy) {
      result = {
        type: ResultType.error,
        error: getInternalRouterError(405, {
          method: request.method,
          pathname: location.pathname,
          routeId: actionMatch.route.id
        })
      };
    } else {
      result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties2, basename);
      if (request.signal.aborted) {
        return {
          shortCircuited: true
        };
      }
    }
    if (isRedirectResult(result)) {
      let replace;
      if (opts && opts.replace != null) {
        replace = opts.replace;
      } else {
        replace = result.location === state.location.pathname + state.location.search;
      }
      await startRedirectNavigation(state, result, {
        submission,
        replace
      });
      return {
        shortCircuited: true
      };
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
      if ((opts && opts.replace) !== true) {
        pendingAction = Action.Push;
      }
      return {
        // Send back an empty object we can use to clear out any prior actionData
        pendingActionData: {},
        pendingActionError: {
          [boundaryMatch.route.id]: result.error
        }
      };
    }
    if (isDeferredResult(result)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    return {
      pendingActionData: {
        [actionMatch.route.id]: result.data
      }
    };
  }
  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {
    let loadingNavigation = overrideNavigation;
    if (!loadingNavigation) {
      let navigation = _extends$4({
        state: "loading",
        location,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0
      }, submission);
      loadingNavigation = navigation;
    }
    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {
      formMethod: loadingNavigation.formMethod,
      formAction: loadingNavigation.formAction,
      formData: loadingNavigation.formData,
      formEncType: loadingNavigation.formEncType
    } : void 0;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError);
    cancelActiveDeferreds((routeId) => !(matches && matches.some((m4) => m4.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m4) => m4.route.id === routeId));
    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
      let updatedFetchers2 = markFetchRedirectsDone();
      completeNavigation(location, _extends$4({
        matches,
        loaderData: {},
        // Commit pending error if we're short circuiting
        errors: pendingError || null
      }, pendingActionData ? {
        actionData: pendingActionData
      } : {}, updatedFetchers2 ? {
        fetchers: new Map(state.fetchers)
      } : {}));
      return {
        shortCircuited: true
      };
    }
    if (!isUninterruptedRevalidation) {
      revalidatingFetchers.forEach((rf2) => {
        let fetcher = state.fetchers.get(rf2.key);
        let revalidatingFetcher = {
          state: "loading",
          data: fetcher && fetcher.data,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          " _hasFetcherDoneAnything ": true
        };
        state.fetchers.set(rf2.key, revalidatingFetcher);
      });
      let actionData = pendingActionData || state.actionData;
      updateState(_extends$4({
        navigation: loadingNavigation
      }, actionData ? Object.keys(actionData).length === 0 ? {
        actionData: null
      } : {
        actionData
      } : {}, revalidatingFetchers.length > 0 ? {
        fetchers: new Map(state.fetchers)
      } : {}));
    }
    pendingNavigationLoadId = ++incrementingLoadId;
    revalidatingFetchers.forEach((rf2) => {
      if (rf2.controller) {
        fetchControllers.set(rf2.key, rf2.controller);
      }
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f2) => abortFetcher(f2.key));
    if (pendingNavigationController) {
      pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    }
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
    if (request.signal.aborted) {
      return {
        shortCircuited: true
      };
    }
    if (pendingNavigationController) {
      pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
    }
    revalidatingFetchers.forEach((rf2) => fetchControllers.delete(rf2.key));
    let redirect = findRedirect(results);
    if (redirect) {
      await startRedirectNavigation(state, redirect, {
        replace
      });
      return {
        shortCircuited: true
      };
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
    activeDeferreds.forEach((deferredData, routeId) => {
      deferredData.subscribe((aborted) => {
        if (aborted || deferredData.done) {
          activeDeferreds.delete(routeId);
        }
      });
    });
    let updatedFetchers = markFetchRedirectsDone();
    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
    return _extends$4({
      loaderData,
      errors
    }, shouldUpdateFetchers ? {
      fetchers: new Map(state.fetchers)
    } : {});
  }
  function getFetcher(key2) {
    return state.fetchers.get(key2) || IDLE_FETCHER;
  }
  function fetch2(key2, routeId, href, opts) {
    if (isServer) {
      throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
    }
    if (fetchControllers.has(key2))
      abortFetcher(key2);
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);
    let matches = matchRoutes(routesToUse, normalizedPath, basename);
    if (!matches) {
      setFetcherError(key2, routeId, getInternalRouterError(404, {
        pathname: normalizedPath
      }));
      return;
    }
    let {
      path,
      submission
    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
    let match2 = getTargetMatch(matches, path);
    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
    if (submission && isMutationMethod(submission.formMethod)) {
      handleFetcherAction(key2, routeId, path, match2, matches, submission);
      return;
    }
    fetchLoadMatches.set(key2, {
      routeId,
      path
    });
    handleFetcherLoader(key2, routeId, path, match2, matches, submission);
  }
  async function handleFetcherAction(key2, routeId, path, match2, requestMatches, submission) {
    interruptActiveLoads();
    fetchLoadMatches.delete(key2);
    if (!match2.route.action && !match2.route.lazy) {
      let error = getInternalRouterError(405, {
        method: submission.formMethod,
        pathname: path,
        routeId
      });
      setFetcherError(key2, routeId, error);
      return;
    }
    let existingFetcher = state.fetchers.get(key2);
    let fetcher = _extends$4({
      state: "submitting"
    }, submission, {
      data: existingFetcher && existingFetcher.data,
      " _hasFetcherDoneAnything ": true
    });
    state.fetchers.set(key2, fetcher);
    updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
    fetchControllers.set(key2, abortController);
    let actionResult = await callLoaderOrAction("action", fetchRequest, match2, requestMatches, manifest, mapRouteProperties2, basename);
    if (fetchRequest.signal.aborted) {
      if (fetchControllers.get(key2) === abortController) {
        fetchControllers.delete(key2);
      }
      return;
    }
    if (isRedirectResult(actionResult)) {
      fetchControllers.delete(key2);
      fetchRedirectIds.add(key2);
      let loadingFetcher = _extends$4({
        state: "loading"
      }, submission, {
        data: void 0,
        " _hasFetcherDoneAnything ": true
      });
      state.fetchers.set(key2, loadingFetcher);
      updateState({
        fetchers: new Map(state.fetchers)
      });
      return startRedirectNavigation(state, actionResult, {
        submission,
        isFetchActionRedirect: true
      });
    }
    if (isErrorResult(actionResult)) {
      setFetcherError(key2, routeId, actionResult.error);
      return;
    }
    if (isDeferredResult(actionResult)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    let nextLocation = state.navigation.location || state.location;
    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
    invariant(matches, "Didn't find any matches after fetcher action");
    let loadId = ++incrementingLoadId;
    fetchReloadIds.set(key2, loadId);
    let loadFetcher = _extends$4({
      state: "loading",
      data: actionResult.data
    }, submission, {
      " _hasFetcherDoneAnything ": true
    });
    state.fetchers.set(key2, loadFetcher);
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
      init.history,
      state,
      matches,
      submission,
      nextLocation,
      isRevalidationRequired,
      cancelledDeferredRoutes,
      cancelledFetcherLoads,
      fetchLoadMatches,
      routesToUse,
      basename,
      {
        [match2.route.id]: actionResult.data
      },
      void 0
      // No need to send through errors since we short circuit above
    );
    revalidatingFetchers.filter((rf2) => rf2.key !== key2).forEach((rf2) => {
      let staleKey = rf2.key;
      let existingFetcher2 = state.fetchers.get(staleKey);
      let revalidatingFetcher = {
        state: "loading",
        data: existingFetcher2 && existingFetcher2.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": true
      };
      state.fetchers.set(staleKey, revalidatingFetcher);
      if (rf2.controller) {
        fetchControllers.set(staleKey, rf2.controller);
      }
    });
    updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf2) => abortFetcher(rf2.key));
    abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
    if (abortController.signal.aborted) {
      return;
    }
    abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
    fetchReloadIds.delete(key2);
    fetchControllers.delete(key2);
    revalidatingFetchers.forEach((r2) => fetchControllers.delete(r2.key));
    let redirect = findRedirect(results);
    if (redirect) {
      return startRedirectNavigation(state, redirect);
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
    let doneFetcher = {
      state: "idle",
      data: actionResult.data,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      " _hasFetcherDoneAnything ": true
    };
    state.fetchers.set(key2, doneFetcher);
    let didAbortFetchLoads = abortStaleFetchLoads(loadId);
    if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
      invariant(pendingAction, "Expected pending action");
      pendingNavigationController && pendingNavigationController.abort();
      completeNavigation(state.navigation.location, {
        matches,
        loaderData,
        errors,
        fetchers: new Map(state.fetchers)
      });
    } else {
      updateState(_extends$4({
        errors,
        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)
      }, didAbortFetchLoads ? {
        fetchers: new Map(state.fetchers)
      } : {}));
      isRevalidationRequired = false;
    }
  }
  async function handleFetcherLoader(key2, routeId, path, match2, matches, submission) {
    let existingFetcher = state.fetchers.get(key2);
    let loadingFetcher = _extends$4({
      state: "loading",
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, submission, {
      data: existingFetcher && existingFetcher.data,
      " _hasFetcherDoneAnything ": true
    });
    state.fetchers.set(key2, loadingFetcher);
    updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
    fetchControllers.set(key2, abortController);
    let result = await callLoaderOrAction("loader", fetchRequest, match2, matches, manifest, mapRouteProperties2, basename);
    if (isDeferredResult(result)) {
      result = await resolveDeferredData(result, fetchRequest.signal, true) || result;
    }
    if (fetchControllers.get(key2) === abortController) {
      fetchControllers.delete(key2);
    }
    if (fetchRequest.signal.aborted) {
      return;
    }
    if (isRedirectResult(result)) {
      fetchRedirectIds.add(key2);
      await startRedirectNavigation(state, result);
      return;
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(state.matches, routeId);
      state.fetchers.delete(key2);
      updateState({
        fetchers: new Map(state.fetchers),
        errors: {
          [boundaryMatch.route.id]: result.error
        }
      });
      return;
    }
    invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");
    let doneFetcher = {
      state: "idle",
      data: result.data,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      " _hasFetcherDoneAnything ": true
    };
    state.fetchers.set(key2, doneFetcher);
    updateState({
      fetchers: new Map(state.fetchers)
    });
  }
  async function startRedirectNavigation(state2, redirect, _temp) {
    var _window;
    let {
      submission,
      replace,
      isFetchActionRedirect
    } = _temp === void 0 ? {} : _temp;
    if (redirect.revalidate) {
      isRevalidationRequired = true;
    }
    let redirectLocation = createLocation(
      state2.location,
      redirect.location,
      // TODO: This can be removed once we get rid of useTransition in Remix v2
      _extends$4({
        _isRedirect: true
      }, isFetchActionRedirect ? {
        _isFetchActionRedirect: true
      } : {})
    );
    invariant(redirectLocation, "Expected a location on the redirect navigation");
    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== "undefined") {
      let url = init.history.createURL(redirect.location);
      let isDifferentBasename = stripBasename(url.pathname, basename) == null;
      if (window.location.origin !== url.origin || isDifferentBasename) {
        if (replace) {
          window.location.replace(redirect.location);
        } else {
          window.location.assign(redirect.location);
        }
        return;
      }
    }
    pendingNavigationController = null;
    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;
    let {
      formMethod,
      formAction,
      formEncType,
      formData
    } = state2.navigation;
    if (!submission && formMethod && formAction && formData && formEncType) {
      submission = {
        formMethod,
        formAction,
        formEncType,
        formData
      };
    }
    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {
      await startNavigation(redirectHistoryAction, redirectLocation, {
        submission: _extends$4({}, submission, {
          formAction: redirect.location
        }),
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    } else if (isFetchActionRedirect) {
      await startNavigation(redirectHistoryAction, redirectLocation, {
        overrideNavigation: {
          state: "loading",
          location: redirectLocation,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0
        },
        fetcherSubmission: submission,
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    } else {
      await startNavigation(redirectHistoryAction, redirectLocation, {
        overrideNavigation: {
          state: "loading",
          location: redirectLocation,
          formMethod: submission ? submission.formMethod : void 0,
          formAction: submission ? submission.formAction : void 0,
          formEncType: submission ? submission.formEncType : void 0,
          formData: submission ? submission.formData : void 0
        },
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    }
  }
  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
    let results = await Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches, manifest, mapRouteProperties2, basename)), ...fetchersToLoad.map((f2) => {
      if (f2.matches && f2.match && f2.controller) {
        return callLoaderOrAction("loader", createClientSideRequest(init.history, f2.path, f2.controller.signal), f2.match, f2.matches, manifest, mapRouteProperties2, basename);
      } else {
        let error = {
          type: ResultType.error,
          error: getInternalRouterError(404, {
            pathname: f2.path
          })
        };
        return error;
      }
    })]);
    let loaderResults = results.slice(0, matchesToLoad.length);
    let fetcherResults = results.slice(matchesToLoad.length);
    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f2) => f2.match), fetcherResults, fetchersToLoad.map((f2) => f2.controller ? f2.controller.signal : null), true)]);
    return {
      results,
      loaderResults,
      fetcherResults
    };
  }
  function interruptActiveLoads() {
    isRevalidationRequired = true;
    cancelledDeferredRoutes.push(...cancelActiveDeferreds());
    fetchLoadMatches.forEach((_, key2) => {
      if (fetchControllers.has(key2)) {
        cancelledFetcherLoads.push(key2);
        abortFetcher(key2);
      }
    });
  }
  function setFetcherError(key2, routeId, error) {
    let boundaryMatch = findNearestBoundary(state.matches, routeId);
    deleteFetcher(key2);
    updateState({
      errors: {
        [boundaryMatch.route.id]: error
      },
      fetchers: new Map(state.fetchers)
    });
  }
  function deleteFetcher(key2) {
    if (fetchControllers.has(key2))
      abortFetcher(key2);
    fetchLoadMatches.delete(key2);
    fetchReloadIds.delete(key2);
    fetchRedirectIds.delete(key2);
    state.fetchers.delete(key2);
  }
  function abortFetcher(key2) {
    let controller = fetchControllers.get(key2);
    invariant(controller, "Expected fetch controller: " + key2);
    controller.abort();
    fetchControllers.delete(key2);
  }
  function markFetchersDone(keys2) {
    for (let key2 of keys2) {
      let fetcher = getFetcher(key2);
      let doneFetcher = {
        state: "idle",
        data: fetcher.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": true
      };
      state.fetchers.set(key2, doneFetcher);
    }
  }
  function markFetchRedirectsDone() {
    let doneKeys = [];
    let updatedFetchers = false;
    for (let key2 of fetchRedirectIds) {
      let fetcher = state.fetchers.get(key2);
      invariant(fetcher, "Expected fetcher: " + key2);
      if (fetcher.state === "loading") {
        fetchRedirectIds.delete(key2);
        doneKeys.push(key2);
        updatedFetchers = true;
      }
    }
    markFetchersDone(doneKeys);
    return updatedFetchers;
  }
  function abortStaleFetchLoads(landedId) {
    let yeetedKeys = [];
    for (let [key2, id2] of fetchReloadIds) {
      if (id2 < landedId) {
        let fetcher = state.fetchers.get(key2);
        invariant(fetcher, "Expected fetcher: " + key2);
        if (fetcher.state === "loading") {
          abortFetcher(key2);
          fetchReloadIds.delete(key2);
          yeetedKeys.push(key2);
        }
      }
    }
    markFetchersDone(yeetedKeys);
    return yeetedKeys.length > 0;
  }
  function getBlocker(key2, fn) {
    let blocker = state.blockers.get(key2) || IDLE_BLOCKER;
    if (blockerFunctions.get(key2) !== fn) {
      blockerFunctions.set(key2, fn);
    }
    return blocker;
  }
  function deleteBlocker(key2) {
    state.blockers.delete(key2);
    blockerFunctions.delete(key2);
  }
  function updateBlocker(key2, newBlocker) {
    let blocker = state.blockers.get(key2) || IDLE_BLOCKER;
    invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
    state.blockers.set(key2, newBlocker);
    updateState({
      blockers: new Map(state.blockers)
    });
  }
  function shouldBlockNavigation(_ref2) {
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = _ref2;
    if (blockerFunctions.size === 0) {
      return;
    }
    if (blockerFunctions.size > 1) {
      warning$1(false, "A router only supports one blocker at a time");
    }
    let entries = Array.from(blockerFunctions.entries());
    let [blockerKey, blockerFunction] = entries[entries.length - 1];
    let blocker = state.blockers.get(blockerKey);
    if (blocker && blocker.state === "proceeding") {
      return;
    }
    if (blockerFunction({
      currentLocation,
      nextLocation,
      historyAction
    })) {
      return blockerKey;
    }
  }
  function cancelActiveDeferreds(predicate) {
    let cancelledRouteIds = [];
    activeDeferreds.forEach((dfd, routeId) => {
      if (!predicate || predicate(routeId)) {
        dfd.cancel();
        cancelledRouteIds.push(routeId);
        activeDeferreds.delete(routeId);
      }
    });
    return cancelledRouteIds;
  }
  function enableScrollRestoration(positions, getPosition, getKey) {
    savedScrollPositions = positions;
    getScrollPosition = getPosition;
    getScrollRestorationKey = getKey || ((location) => location.key);
    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
      initialScrollRestored = true;
      let y4 = getSavedScrollPosition(state.location, state.matches);
      if (y4 != null) {
        updateState({
          restoreScrollPosition: y4
        });
      }
    }
    return () => {
      savedScrollPositions = null;
      getScrollPosition = null;
      getScrollRestorationKey = null;
    };
  }
  function saveScrollPosition(location, matches) {
    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {
      let userMatches = matches.map((m4) => createUseMatchesMatch(m4, state.loaderData));
      let key2 = getScrollRestorationKey(location, userMatches) || location.key;
      savedScrollPositions[key2] = getScrollPosition();
    }
  }
  function getSavedScrollPosition(location, matches) {
    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {
      let userMatches = matches.map((m4) => createUseMatchesMatch(m4, state.loaderData));
      let key2 = getScrollRestorationKey(location, userMatches) || location.key;
      let y4 = savedScrollPositions[key2];
      if (typeof y4 === "number") {
        return y4;
      }
    }
    return null;
  }
  function _internalSetRoutes(newRoutes) {
    manifest = {};
    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties2, void 0, manifest);
  }
  router2 = {
    get basename() {
      return basename;
    },
    get state() {
      return state;
    },
    get routes() {
      return dataRoutes;
    },
    initialize: initialize2,
    subscribe,
    enableScrollRestoration,
    navigate,
    fetch: fetch2,
    revalidate,
    // Passthrough to history-aware createHref used by useHref so we get proper
    // hash-aware URLs in DOM paths
    createHref: (to2) => init.history.createHref(to2),
    encodeLocation: (to2) => init.history.encodeLocation(to2),
    getFetcher,
    deleteFetcher,
    dispose,
    getBlocker,
    deleteBlocker,
    _internalFetchControllers: fetchControllers,
    _internalActiveDeferreds: activeDeferreds,
    // TODO: Remove setRoutes, it's temporary to avoid dealing with
    // updating the tree while validating the update algorithm.
    _internalSetRoutes
  };
  return router2;
}
function isSubmissionNavigation(opts) {
  return opts != null && "formData" in opts;
}
function normalizeTo(location, matches, basename, prependBasename, to2, fromRouteId, relative) {
  let contextualMatches;
  let activeRouteMatch;
  if (fromRouteId != null && relative !== "path") {
    contextualMatches = [];
    for (let match2 of matches) {
      contextualMatches.push(match2);
      if (match2.route.id === fromRouteId) {
        activeRouteMatch = match2;
        break;
      }
    }
  } else {
    contextualMatches = matches;
    activeRouteMatch = matches[matches.length - 1];
  }
  let path = resolveTo(to2 ? to2 : ".", getPathContributingMatches(contextualMatches).map((m4) => m4.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === "path");
  if (to2 == null) {
    path.search = location.search;
    path.hash = location.hash;
  }
  if ((to2 == null || to2 === "" || to2 === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {
    path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
  }
  if (prependBasename && basename !== "/") {
    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
  }
  return createPath(path);
}
function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
  if (!opts || !isSubmissionNavigation(opts)) {
    return {
      path
    };
  }
  if (opts.formMethod && !isValidMethod(opts.formMethod)) {
    return {
      path,
      error: getInternalRouterError(405, {
        method: opts.formMethod
      })
    };
  }
  let submission;
  if (opts.formData) {
    let formMethod = opts.formMethod || "get";
    submission = {
      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),
      formAction: stripHashFromPath(path),
      formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
      formData: opts.formData
    };
    if (isMutationMethod(submission.formMethod)) {
      return {
        path,
        submission
      };
    }
  }
  let parsedPath = parsePath(path);
  let searchParams = convertFormDataToSearchParams(opts.formData);
  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
    searchParams.append("index", "");
  }
  parsedPath.search = "?" + searchParams;
  return {
    path: createPath(parsedPath),
    submission
  };
}
function getLoaderMatchesUntilBoundary(matches, boundaryId) {
  let boundaryMatches = matches;
  if (boundaryId) {
    let index2 = matches.findIndex((m4) => m4.route.id === boundaryId);
    if (index2 >= 0) {
      boundaryMatches = matches.slice(0, index2);
    }
  }
  return boundaryMatches;
}
function getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {
  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0;
  let currentUrl = history.createURL(state.location);
  let nextUrl = history.createURL(location);
  let boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0;
  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);
  let navigationMatches = boundaryMatches.filter((match2, index2) => {
    if (match2.route.lazy) {
      return true;
    }
    if (match2.route.loader == null) {
      return false;
    }
    if (isNewLoader(state.loaderData, state.matches[index2], match2) || cancelledDeferredRoutes.some((id2) => id2 === match2.route.id)) {
      return true;
    }
    let currentRouteMatch = state.matches[index2];
    let nextRouteMatch = match2;
    return shouldRevalidateLoader(match2, _extends$4({
      currentUrl,
      currentParams: currentRouteMatch.params,
      nextUrl,
      nextParams: nextRouteMatch.params
    }, submission, {
      actionResult,
      defaultShouldRevalidate: (
        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
        isRevalidationRequired || // Clicked the same link, resubmitted a GET form
        currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
        currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
      )
    }));
  });
  let revalidatingFetchers = [];
  fetchLoadMatches.forEach((f2, key2) => {
    if (!matches.some((m4) => m4.route.id === f2.routeId)) {
      return;
    }
    let fetcherMatches = matchRoutes(routesToUse, f2.path, basename);
    if (!fetcherMatches) {
      revalidatingFetchers.push({
        key: key2,
        routeId: f2.routeId,
        path: f2.path,
        matches: null,
        match: null,
        controller: null
      });
      return;
    }
    let fetcherMatch = getTargetMatch(fetcherMatches, f2.path);
    if (cancelledFetcherLoads.includes(key2)) {
      revalidatingFetchers.push({
        key: key2,
        routeId: f2.routeId,
        path: f2.path,
        matches: fetcherMatches,
        match: fetcherMatch,
        controller: new AbortController()
      });
      return;
    }
    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends$4({
      currentUrl,
      currentParams: state.matches[state.matches.length - 1].params,
      nextUrl,
      nextParams: matches[matches.length - 1].params
    }, submission, {
      actionResult,
      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
      defaultShouldRevalidate: isRevalidationRequired
    }));
    if (shouldRevalidate) {
      revalidatingFetchers.push({
        key: key2,
        routeId: f2.routeId,
        path: f2.path,
        matches: fetcherMatches,
        match: fetcherMatch,
        controller: new AbortController()
      });
    }
  });
  return [navigationMatches, revalidatingFetchers];
}
function isNewLoader(currentLoaderData, currentMatch, match2) {
  let isNew = (
    // [a] -> [a, b]
    !currentMatch || // [a, b] -> [a, c]
    match2.route.id !== currentMatch.route.id
  );
  let isMissingData = currentLoaderData[match2.route.id] === void 0;
  return isNew || isMissingData;
}
function isNewRouteInstance(currentMatch, match2) {
  let currentPath = currentMatch.route.path;
  return (
    // param change for this match, /users/123 -> /users/456
    currentMatch.pathname !== match2.pathname || // splat param changed, which is not present in match.path
    // e.g. /files/images/avatar.jpg -> files/finances.xls
    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match2.params["*"]
  );
}
function shouldRevalidateLoader(loaderMatch, arg) {
  if (loaderMatch.route.shouldRevalidate) {
    let routeChoice = loaderMatch.route.shouldRevalidate(arg);
    if (typeof routeChoice === "boolean") {
      return routeChoice;
    }
  }
  return arg.defaultShouldRevalidate;
}
async function loadLazyRouteModule(route, mapRouteProperties2, manifest) {
  if (!route.lazy) {
    return;
  }
  let lazyRoute = await route.lazy();
  if (!route.lazy) {
    return;
  }
  let routeToUpdate = manifest[route.id];
  invariant(routeToUpdate, "No route found in manifest");
  let routeUpdates = {};
  for (let lazyRouteProperty in lazyRoute) {
    let staticRouteValue = routeToUpdate[lazyRouteProperty];
    let isPropertyStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based
    // on the route updates
    lazyRouteProperty !== "hasErrorBoundary";
    warning$1(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'));
    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {
      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
    }
  }
  Object.assign(routeToUpdate, routeUpdates);
  Object.assign(routeToUpdate, _extends$4({}, mapRouteProperties2(routeToUpdate), {
    lazy: void 0
  }));
}
async function callLoaderOrAction(type, request, match2, matches, manifest, mapRouteProperties2, basename, isStaticRequest, isRouteRequest, requestContext) {
  if (isStaticRequest === void 0) {
    isStaticRequest = false;
  }
  if (isRouteRequest === void 0) {
    isRouteRequest = false;
  }
  let resultType;
  let result;
  let onReject;
  let runHandler = (handler) => {
    let reject;
    let abortPromise = new Promise((_, r2) => reject = r2);
    onReject = () => reject();
    request.signal.addEventListener("abort", onReject);
    return Promise.race([handler({
      request,
      params: match2.params,
      context: requestContext
    }), abortPromise]);
  };
  try {
    let handler = match2.route[type];
    if (match2.route.lazy) {
      if (handler) {
        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match2.route, mapRouteProperties2, manifest)]);
        result = values[0];
      } else {
        await loadLazyRouteModule(match2.route, mapRouteProperties2, manifest);
        handler = match2.route[type];
        if (handler) {
          result = await runHandler(handler);
        } else if (type === "action") {
          let url = new URL(request.url);
          let pathname = url.pathname + url.search;
          throw getInternalRouterError(405, {
            method: request.method,
            pathname,
            routeId: match2.route.id
          });
        } else {
          return {
            type: ResultType.data,
            data: void 0
          };
        }
      }
    } else if (!handler) {
      let url = new URL(request.url);
      let pathname = url.pathname + url.search;
      throw getInternalRouterError(404, {
        pathname
      });
    } else {
      result = await runHandler(handler);
    }
    invariant(result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match2.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
  } catch (e3) {
    resultType = ResultType.error;
    result = e3;
  } finally {
    if (onReject) {
      request.signal.removeEventListener("abort", onReject);
    }
  }
  if (isResponse(result)) {
    let status = result.status;
    if (redirectStatusCodes.has(status)) {
      let location = result.headers.get("Location");
      invariant(location, "Redirects returned/thrown from loaders/actions must have a Location header");
      if (!ABSOLUTE_URL_REGEX.test(location)) {
        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match2) + 1), basename, true, location);
      } else if (!isStaticRequest) {
        let currentUrl = new URL(request.url);
        let url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location);
        let isSameBasename = stripBasename(url.pathname, basename) != null;
        if (url.origin === currentUrl.origin && isSameBasename) {
          location = url.pathname + url.search + url.hash;
        }
      }
      if (isStaticRequest) {
        result.headers.set("Location", location);
        throw result;
      }
      return {
        type: ResultType.redirect,
        status,
        location,
        revalidate: result.headers.get("X-Remix-Revalidate") !== null
      };
    }
    if (isRouteRequest) {
      throw {
        type: resultType || ResultType.data,
        response: result
      };
    }
    let data2;
    let contentType = result.headers.get("Content-Type");
    if (contentType && /\bapplication\/json\b/.test(contentType)) {
      data2 = await result.json();
    } else {
      data2 = await result.text();
    }
    if (resultType === ResultType.error) {
      return {
        type: resultType,
        error: new ErrorResponse(status, result.statusText, data2),
        headers: result.headers
      };
    }
    return {
      type: ResultType.data,
      data: data2,
      statusCode: result.status,
      headers: result.headers
    };
  }
  if (resultType === ResultType.error) {
    return {
      type: resultType,
      error: result
    };
  }
  if (isDeferredData(result)) {
    var _result$init, _result$init2;
    return {
      type: ResultType.deferred,
      deferredData: result,
      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
    };
  }
  return {
    type: ResultType.data,
    data: result
  };
}
function createClientSideRequest(history, location, signal, submission) {
  let url = history.createURL(stripHashFromPath(location)).toString();
  let init = {
    signal
  };
  if (submission && isMutationMethod(submission.formMethod)) {
    let {
      formMethod,
      formEncType,
      formData
    } = submission;
    init.method = formMethod.toUpperCase();
    init.body = formEncType === "application/x-www-form-urlencoded" ? convertFormDataToSearchParams(formData) : formData;
  }
  return new Request(url, init);
}
function convertFormDataToSearchParams(formData) {
  let searchParams = new URLSearchParams();
  for (let [key2, value2] of formData.entries()) {
    searchParams.append(key2, value2 instanceof File ? value2.name : value2);
  }
  return searchParams;
}
function processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
  let loaderData = {};
  let errors = null;
  let statusCode;
  let foundError = false;
  let loaderHeaders = {};
  results.forEach((result, index2) => {
    let id2 = matchesToLoad[index2].route.id;
    invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, id2);
      let error = result.error;
      if (pendingError) {
        error = Object.values(pendingError)[0];
        pendingError = void 0;
      }
      errors = errors || {};
      if (errors[boundaryMatch.route.id] == null) {
        errors[boundaryMatch.route.id] = error;
      }
      loaderData[id2] = void 0;
      if (!foundError) {
        foundError = true;
        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
      }
      if (result.headers) {
        loaderHeaders[id2] = result.headers;
      }
    } else {
      if (isDeferredResult(result)) {
        activeDeferreds.set(id2, result.deferredData);
        loaderData[id2] = result.deferredData.data;
      } else {
        loaderData[id2] = result.data;
      }
      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {
        statusCode = result.statusCode;
      }
      if (result.headers) {
        loaderHeaders[id2] = result.headers;
      }
    }
  });
  if (pendingError) {
    errors = pendingError;
    loaderData[Object.keys(pendingError)[0]] = void 0;
  }
  return {
    loaderData,
    errors,
    statusCode: statusCode || 200,
    loaderHeaders
  };
}
function processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
  let {
    loaderData,
    errors
  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);
  for (let index2 = 0; index2 < revalidatingFetchers.length; index2++) {
    let {
      key: key2,
      match: match2,
      controller
    } = revalidatingFetchers[index2];
    invariant(fetcherResults !== void 0 && fetcherResults[index2] !== void 0, "Did not find corresponding fetcher result");
    let result = fetcherResults[index2];
    if (controller && controller.signal.aborted) {
      continue;
    } else if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(state.matches, match2 == null ? void 0 : match2.route.id);
      if (!(errors && errors[boundaryMatch.route.id])) {
        errors = _extends$4({}, errors, {
          [boundaryMatch.route.id]: result.error
        });
      }
      state.fetchers.delete(key2);
    } else if (isRedirectResult(result)) {
      invariant(false, "Unhandled fetcher revalidation redirect");
    } else if (isDeferredResult(result)) {
      invariant(false, "Unhandled fetcher deferred data");
    } else {
      let doneFetcher = {
        state: "idle",
        data: result.data,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        " _hasFetcherDoneAnything ": true
      };
      state.fetchers.set(key2, doneFetcher);
    }
  }
  return {
    loaderData,
    errors
  };
}
function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
  let mergedLoaderData = _extends$4({}, newLoaderData);
  for (let match2 of matches) {
    let id2 = match2.route.id;
    if (newLoaderData.hasOwnProperty(id2)) {
      if (newLoaderData[id2] !== void 0) {
        mergedLoaderData[id2] = newLoaderData[id2];
      }
    } else if (loaderData[id2] !== void 0 && match2.route.loader) {
      mergedLoaderData[id2] = loaderData[id2];
    }
    if (errors && errors.hasOwnProperty(id2)) {
      break;
    }
  }
  return mergedLoaderData;
}
function findNearestBoundary(matches, routeId) {
  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m4) => m4.route.id === routeId) + 1) : [...matches];
  return eligibleMatches.reverse().find((m4) => m4.route.hasErrorBoundary === true) || matches[0];
}
function getShortCircuitMatches(routes) {
  let route = routes.find((r2) => r2.index || !r2.path || r2.path === "/") || {
    id: "__shim-error-route__"
  };
  return {
    matches: [{
      params: {},
      pathname: "",
      pathnameBase: "",
      route
    }],
    route
  };
}
function getInternalRouterError(status, _temp4) {
  let {
    pathname,
    routeId,
    method,
    type
  } = _temp4 === void 0 ? {} : _temp4;
  let statusText = "Unknown Server Error";
  let errorMessage = "Unknown @remix-run/router error";
  if (status === 400) {
    statusText = "Bad Request";
    if (method && pathname && routeId) {
      errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (type === "defer-action") {
      errorMessage = "defer() is not supported in actions";
    }
  } else if (status === 403) {
    statusText = "Forbidden";
    errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
  } else if (status === 404) {
    statusText = "Not Found";
    errorMessage = 'No route matches URL "' + pathname + '"';
  } else if (status === 405) {
    statusText = "Method Not Allowed";
    if (method && pathname && routeId) {
      errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (method) {
      errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
    }
  }
  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);
}
function findRedirect(results) {
  for (let i2 = results.length - 1; i2 >= 0; i2--) {
    let result = results[i2];
    if (isRedirectResult(result)) {
      return result;
    }
  }
}
function stripHashFromPath(path) {
  let parsedPath = typeof path === "string" ? parsePath(path) : path;
  return createPath(_extends$4({}, parsedPath, {
    hash: ""
  }));
}
function isHashChangeOnly(a3, b3) {
  if (a3.pathname !== b3.pathname || a3.search !== b3.search) {
    return false;
  }
  if (a3.hash === "") {
    return b3.hash !== "";
  } else if (a3.hash === b3.hash) {
    return true;
  } else if (b3.hash !== "") {
    return true;
  }
  return false;
}
function isDeferredResult(result) {
  return result.type === ResultType.deferred;
}
function isErrorResult(result) {
  return result.type === ResultType.error;
}
function isRedirectResult(result) {
  return (result && result.type) === ResultType.redirect;
}
function isDeferredData(value2) {
  let deferred = value2;
  return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
}
function isResponse(value2) {
  return value2 != null && typeof value2.status === "number" && typeof value2.statusText === "string" && typeof value2.headers === "object" && typeof value2.body !== "undefined";
}
function isValidMethod(method) {
  return validRequestMethods.has(method.toLowerCase());
}
function isMutationMethod(method) {
  return validMutationMethods.has(method.toLowerCase());
}
async function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {
  for (let index2 = 0; index2 < results.length; index2++) {
    let result = results[index2];
    let match2 = matchesToLoad[index2];
    if (!match2) {
      continue;
    }
    let currentMatch = currentMatches.find((m4) => m4.route.id === match2.route.id);
    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match2) && (currentLoaderData && currentLoaderData[match2.route.id]) !== void 0;
    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
      let signal = signals[index2];
      invariant(signal, "Expected an AbortSignal for revalidating fetcher deferred result");
      await resolveDeferredData(result, signal, isFetcher).then((result2) => {
        if (result2) {
          results[index2] = result2 || results[index2];
        }
      });
    }
  }
}
async function resolveDeferredData(result, signal, unwrap) {
  if (unwrap === void 0) {
    unwrap = false;
  }
  let aborted = await result.deferredData.resolveData(signal);
  if (aborted) {
    return;
  }
  if (unwrap) {
    try {
      return {
        type: ResultType.data,
        data: result.deferredData.unwrappedData
      };
    } catch (e3) {
      return {
        type: ResultType.error,
        error: e3
      };
    }
  }
  return {
    type: ResultType.data,
    data: result.deferredData.data
  };
}
function hasNakedIndexQuery(search) {
  return new URLSearchParams(search).getAll("index").some((v2) => v2 === "");
}
function createUseMatchesMatch(match2, loaderData) {
  let {
    route,
    pathname,
    params
  } = match2;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function getTargetMatch(matches, location) {
  let search = typeof location === "string" ? parsePath(location).search : location.search;
  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {
    return matches[matches.length - 1];
  }
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches[pathMatches.length - 1];
}
/**
 * React Router v6.11.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$3() {
  _extends$3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$3.apply(this, arguments);
}
const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
const RouteContext = /* @__PURE__ */ reactExports.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
function useInRouterContext() {
  return reactExports.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? invariant(false) : void 0;
  return reactExports.useContext(LocationContext).location;
}
function useIsomorphicLayoutEffect$2(cb2) {
  let isStatic = reactExports.useContext(NavigationContext).static;
  if (!isStatic) {
    reactExports.useLayoutEffect(cb2);
  }
}
function useNavigate() {
  let {
    isDataRoute
  } = reactExports.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  !useInRouterContext() ? invariant(false) : void 0;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  let {
    basename,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect$2(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to2, options) {
    if (options === void 0) {
      options = {};
    }
    if (!activeRef.current)
      return;
    if (typeof to2 === "number") {
      navigator2.go(to2);
      return;
    }
    let path = resolveTo(to2, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    if (dataRouterContext == null && basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
  return navigate;
}
const OutletContext = /* @__PURE__ */ reactExports.createContext(null);
function useOutlet(context) {
  let outlet = reactExports.useContext(RouteContext).outlet;
  if (outlet) {
    return /* @__PURE__ */ reactExports.createElement(OutletContext.Provider, {
      value: context
    }, outlet);
  }
  return outlet;
}
function useRoutesImpl(routes, locationArg, dataRouterState) {
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = reactExports.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  routeMatch && routeMatch.route;
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false) : void 0;
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterState);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
      value: {
        location: _extends$3({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
const defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
class RenderErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error || state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("React Router caught the following error during render", error, errorInfo);
  }
  render() {
    return this.state.error ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match: match2,
    children
  } = _ref;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
  }
  return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState) {
  var _dataRouterState2;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (matches == null) {
    var _dataRouterState;
    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m4) => m4.route.id && (errors == null ? void 0 : errors[m4.route.id]));
    !(errorIndex >= 0) ? invariant(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  return renderedMatches.reduceRight((outlet, match2, index2) => {
    let error = match2.route.id ? errors == null ? void 0 : errors[match2.route.id] : null;
    let errorElement = null;
    if (dataRouterState) {
      errorElement = match2.route.errorElement || defaultErrorElement;
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (match2.route.Component) {
        children = /* @__PURE__ */ reactExports.createElement(match2.route.Component, null);
      } else if (match2.route.element) {
        children = match2.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
        match: match2,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index2 === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
var DataRouterHook$1;
(function(DataRouterHook2) {
  DataRouterHook2["UseBlocker"] = "useBlocker";
  DataRouterHook2["UseRevalidator"] = "useRevalidator";
  DataRouterHook2["UseNavigateStable"] = "useNavigate";
})(DataRouterHook$1 || (DataRouterHook$1 = {}));
var DataRouterStateHook$1;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseBlocker"] = "useBlocker";
  DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook2["UseActionData"] = "useActionData";
  DataRouterStateHook2["UseRouteError"] = "useRouteError";
  DataRouterStateHook2["UseNavigation"] = "useNavigation";
  DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook2["UseMatches"] = "useMatches";
  DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
  DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
  DataRouterStateHook2["UseRouteId"] = "useRouteId";
})(DataRouterStateHook$1 || (DataRouterStateHook$1 = {}));
function useDataRouterContext(hookName) {
  let ctx2 = reactExports.useContext(DataRouterContext);
  !ctx2 ? invariant(false) : void 0;
  return ctx2;
}
function useDataRouterState(hookName) {
  let state = reactExports.useContext(DataRouterStateContext);
  !state ? invariant(false) : void 0;
  return state;
}
function useRouteContext(hookName) {
  let route = reactExports.useContext(RouteContext);
  !route ? invariant(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext();
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? invariant(false) : void 0;
  return thisRoute.route.id;
}
function useLoaderData() {
  let state = useDataRouterState(DataRouterStateHook$1.UseLoaderData);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseLoaderData);
  if (state.errors && state.errors[routeId] != null) {
    console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
    return void 0;
  }
  return state.loaderData[routeId];
}
function useRouteError() {
  var _state$errors;
  let error = reactExports.useContext(RouteErrorContext);
  let state = useDataRouterState(DataRouterStateHook$1.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
  if (error) {
    return error;
  }
  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function useNavigateStable() {
  let {
    router: router2
  } = useDataRouterContext(DataRouterHook$1.UseNavigateStable);
  let id2 = useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable);
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect$2(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to2, options) {
    if (options === void 0) {
      options = {};
    }
    if (!activeRef.current)
      return;
    if (typeof to2 === "number") {
      router2.navigate(to2);
    } else {
      router2.navigate(to2, _extends$3({
        fromRouteId: id2
      }, options));
    }
  }, [router2, id2]);
  return navigate;
}
function RouterProvider(_ref) {
  let {
    fallbackElement,
    router: router2
  } = _ref;
  let [state, setState] = reactExports.useState(router2.state);
  reactExports.useLayoutEffect(() => router2.subscribe(setState), [router2, setState]);
  let navigator2 = reactExports.useMemo(() => {
    return {
      createHref: router2.createHref,
      encodeLocation: router2.encodeLocation,
      go: (n2) => router2.navigate(n2),
      push: (to2, state2, opts) => router2.navigate(to2, {
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      }),
      replace: (to2, state2, opts) => router2.navigate(to2, {
        replace: true,
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      })
    };
  }, [router2]);
  let basename = router2.basename || "/";
  let dataRouterContext = reactExports.useMemo(() => ({
    router: router2,
    navigator: navigator2,
    static: false,
    basename
  }), [router2, navigator2, basename]);
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(DataRouterContext.Provider, {
    value: dataRouterContext
  }, /* @__PURE__ */ reactExports.createElement(DataRouterStateContext.Provider, {
    value: state
  }, /* @__PURE__ */ reactExports.createElement(Router, {
    basename: router2.basename,
    location: router2.state.location,
    navigationType: router2.state.historyAction,
    navigator: navigator2
  }, router2.state.initialized ? /* @__PURE__ */ reactExports.createElement(DataRoutes, {
    routes: router2.routes,
    state
  }) : fallbackElement))), null);
}
function DataRoutes(_ref2) {
  let {
    routes,
    state
  } = _ref2;
  return useRoutesImpl(routes, void 0, state);
}
function Navigate(_ref4) {
  let {
    to: to2,
    replace,
    state,
    relative
  } = _ref4;
  !useInRouterContext() ? invariant(false) : void 0;
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let navigate = useNavigate();
  let path = resolveTo(to2, getPathContributingMatches(matches).map((match2) => match2.pathnameBase), locationPathname, relative === "path");
  let jsonPath = JSON.stringify(path);
  reactExports.useEffect(() => navigate(JSON.parse(jsonPath), {
    replace,
    state,
    relative
  }), [navigate, jsonPath, relative, replace, state]);
  return null;
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  invariant(false);
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false
  } = _ref5;
  !!useInRouterContext() ? invariant(false) : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = reactExports.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp
  }), [basename, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key: key2 = "default"
  } = locationProp;
  let locationContext = reactExports.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key: key2
      },
      navigationType
    };
  }, [basename, pathname, search, hash, state, key2, navigationType]);
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
var AwaitRenderStatus;
(function(AwaitRenderStatus2) {
  AwaitRenderStatus2[AwaitRenderStatus2["pending"] = 0] = "pending";
  AwaitRenderStatus2[AwaitRenderStatus2["success"] = 1] = "success";
  AwaitRenderStatus2[AwaitRenderStatus2["error"] = 2] = "error";
})(AwaitRenderStatus || (AwaitRenderStatus = {}));
new Promise(() => {
});
function createRoutesFromChildren(children, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  reactExports.Children.forEach(children, (element, index2) => {
    if (!/* @__PURE__ */ reactExports.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index2];
    if (element.type === reactExports.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
      return;
    }
    !(element.type === Route) ? invariant(false) : void 0;
    !(!element.props.index || !element.props.children) ? invariant(false) : void 0;
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(element.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}
function mapRouteProperties(route) {
  let updates = {
    // Note: this check also occurs in createRoutesFromChildren so update
    // there if you change this -- please and thank you!
    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
  };
  if (route.Component) {
    Object.assign(updates, {
      element: /* @__PURE__ */ reactExports.createElement(route.Component),
      Component: void 0
    });
  }
  if (route.ErrorBoundary) {
    Object.assign(updates, {
      errorElement: /* @__PURE__ */ reactExports.createElement(route.ErrorBoundary),
      ErrorBoundary: void 0
    });
  }
  return updates;
}
/**
 * React Router DOM v6.11.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$2() {
  _extends$2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
function createHashRouter(routes, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    future: _extends$2({}, opts == null ? void 0 : opts.future, {
      v7_prependBasename: true
    }),
    history: createHashHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes,
    mapRouteProperties
  }).initialize();
}
function parseHydrationData() {
  var _window;
  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
  if (state && state.errors) {
    state = _extends$2({}, state, {
      errors: deserializeErrors(state.errors)
    });
  }
  return state;
}
function deserializeErrors(errors) {
  if (!errors)
    return null;
  let entries = Object.entries(errors);
  let serialized = {};
  for (let [key2, val2] of entries) {
    if (val2 && val2.__type === "RouteErrorResponse") {
      serialized[key2] = new ErrorResponse(val2.status, val2.statusText, val2.data, val2.internal === true);
    } else if (val2 && val2.__type === "Error") {
      let error = new Error(val2.message);
      error.stack = "";
      serialized[key2] = error;
    } else {
      serialized[key2] = val2;
    }
  }
  return serialized;
}
var DataRouterHook;
(function(DataRouterHook2) {
  DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook2["UseSubmitImpl"] = "useSubmitImpl";
  DataRouterHook2["UseFetcher"] = "useFetcher";
})(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseFetchers"] = "useFetchers";
  DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook || (DataRouterStateHook = {}));
const defaultValue = {
  permissions: [],
  authNavigate: null
};
const AuthContext = reactExports.createContext(defaultValue);
const AuthProvider = ({ children }) => {
  const [permissions, setPermissions] = reactExports.useState([]);
  const navigate = useNavigate();
  const authNavigate = (pathname, permissions2, state) => {
    setPermissions(permissions2);
    navigate(pathname, state);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AuthContext.Provider, { value: { permissions, authNavigate }, children });
};
const useAuth = () => {
  return reactExports.useContext(AuthContext);
};
const ArchiveContext = reactExports.createContext(void 0);
const ArchiveProvider = ({ children }) => {
  const [archiveFileToUpload, setArchiveFileToUpload] = reactExports.useState(void 0);
  const [archivePathToResetWith, setArchivePathToResetWith] = reactExports.useState("");
  const [context, setContext] = reactExports.useState(void 0);
  const resetArchiveContext = () => {
    setContext(void 0);
    setArchivePathToResetWith("");
    setArchiveFileToUpload(void 0);
  };
  const handleArchivePathContext = async (path, context2) => {
    const fullPath = await getPath(path);
    setContext(context2);
    setArchivePathToResetWith(fullPath);
  };
  const handleUploadContext = (file) => {
    setArchiveFileToUpload(file);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ArchiveContext.Provider,
    {
      value: {
        userWantsToArchiveReset: !!archivePathToResetWith.length,
        context,
        archiveFileToUpload,
        resetArchiveContext,
        archivePathToResetWith,
        handleArchivePathContext,
        handleUploadContext
      },
      children
    }
  );
};
const useArchiveContext = () => {
  const archiveContext = reactExports.useContext(ArchiveContext);
  if (archiveContext === void 0) {
    throw new Error("useArchiveContext must be inside a provider");
  }
  return archiveContext;
};
function App() {
  const navigate = useNavigate();
  const ls = useLoaderData();
  const [load, setLoad] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (!load) {
      setLoad(true);
      if (!ls) {
        return localStorage.setItem(getAppUID(), "1");
      }
      if (ls) {
        navigate("/dashboard");
      }
    }
  }, [ls, navigate, load]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AuthProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchiveProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(AppProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {}) }) }) });
}
const index = "";
const grid$3 = "_grid_uqza2_1";
const full$3 = "_full_uqza2_38";
const styles$c = {
  grid: grid$3,
  "grid-layout": "_grid-layout_uqza2_12",
  full: full$3
};
const useGetInnerHeight = () => {
  const [innerHeight, setInnerHeight] = reactExports.useState(window.innerHeight);
  reactExports.useEffect(() => {
    window.addEventListener("resize", () => {
      setInnerHeight(window.innerHeight);
    });
  }, [window]);
  return innerHeight;
};
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var globals_exports = {};
__export(globals_exports, {
  assign: () => assign$1,
  colors: () => colors,
  createStringInterpolator: () => createStringInterpolator,
  skipAnimation: () => skipAnimation,
  to: () => to,
  willAdvance: () => willAdvance
});
var updateQueue = makeQueue();
var raf = (fn) => schedule(fn, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn) => schedule(fn, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn) => schedule(fn, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn) => schedule(fn, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn) => schedule(fn, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  const time2 = raf.now() + ms;
  const cancel = () => {
    const i2 = timeouts.findIndex((t3) => t3.cancel == cancel);
    if (~i2)
      timeouts.splice(i2, 1);
    pendingCount -= ~i2 ? 1 : 0;
  };
  const timeout = { time: time2, handler, cancel };
  timeouts.splice(findTimeout(time2), 0, timeout);
  pendingCount += 1;
  start();
  return timeout;
};
var findTimeout = (time2) => ~(~timeouts.findIndex((t3) => t3.time > time2) || ~timeouts.length);
raf.cancel = (fn) => {
  onStartQueue.delete(fn);
  onFrameQueue.delete(fn);
  onFinishQueue.delete(fn);
  updateQueue.delete(fn);
  writeQueue.delete(fn);
};
raf.sync = (fn) => {
  sync = true;
  raf.batchedUpdates(fn);
  sync = false;
};
raf.throttle = (fn) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : (
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  () => {
  }
);
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn) => fn();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn(
      "Cannot call the manual advancement of rafz whilst frameLoop is not set as demand"
    );
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn, queue) {
  if (sync) {
    queue.delete(fn);
    fn(0);
  } else {
    queue.add(fn);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  const prevTs = ts;
  ts = raf.now();
  const count = findTimeout(ts);
  if (count) {
    eachSafely(timeouts.splice(0, count), (t3) => t3.handler());
    pendingCount -= count;
  }
  if (!pendingCount) {
    stop();
    return;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn) {
      pendingCount += current == next && !next.has(fn) ? 1 : 0;
      next.add(fn);
    },
    delete(fn) {
      pendingCount -= current == next && next.has(fn) ? 1 : 0;
      return next.delete(fn);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        pendingCount -= current.size;
        eachSafely(current, (fn) => fn(arg) && next.add(fn));
        pendingCount += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each2) {
  values.forEach((value2) => {
    try {
      each2(value2);
    } catch (e3) {
      raf.catch(e3);
    }
  });
}
function noop$1() {
}
var defineHidden = (obj, key2, value2) => Object.defineProperty(obj, key2, { value: value2, writable: true, configurable: true });
var is = {
  arr: Array.isArray,
  obj: (a3) => !!a3 && a3.constructor.name === "Object",
  fun: (a3) => typeof a3 === "function",
  str: (a3) => typeof a3 === "string",
  num: (a3) => typeof a3 === "number",
  und: (a3) => a3 === void 0
};
function isEqual$1(a3, b3) {
  if (is.arr(a3)) {
    if (!is.arr(b3) || a3.length !== b3.length)
      return false;
    for (let i2 = 0; i2 < a3.length; i2++) {
      if (a3[i2] !== b3[i2])
        return false;
    }
    return true;
  }
  return a3 === b3;
}
var each = (obj, fn) => obj.forEach(fn);
function eachProp(obj, fn, ctx2) {
  if (is.arr(obj)) {
    for (let i2 = 0; i2 < obj.length; i2++) {
      fn.call(ctx2, obj[i2], `${i2}`);
    }
    return;
  }
  for (const key2 in obj) {
    if (obj.hasOwnProperty(key2)) {
      fn.call(ctx2, obj[key2], key2);
    }
  }
}
var toArray$1 = (a3) => is.und(a3) ? [] : is.arr(a3) ? a3 : [a3];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn) => fn(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator;
var to;
var colors = null;
var skipAnimation = false;
var willAdvance = noop$1;
var assign$1 = (globals) => {
  if (globals.to)
    to = globals.to;
  if (globals.now)
    raf.now = globals.now;
  if (globals.colors !== void 0)
    colors = globals.colors;
  if (globals.skipAnimation != null)
    skipAnimation = globals.skipAnimation;
  if (globals.createStringInterpolator)
    createStringInterpolator = globals.createStringInterpolator;
  if (globals.requestAnimationFrame)
    raf.use(globals.requestAnimationFrame);
  if (globals.batchedUpdates)
    raf.batchedUpdates = globals.batchedUpdates;
  if (globals.willAdvance)
    willAdvance = globals.willAdvance;
  if (globals.frameLoop)
    raf.frameLoop = globals.frameLoop;
};
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  /** Advance the given animation on every frame until idle. */
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  /** Advance all animations by the given time. */
  advance,
  /** Call this when an animation's priority changes. */
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  /**
   * Clear all animations. For testing purposes.
   *
   * ☠️ Never call this from within the frameloop.
   */
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(
    findIndex$2(currentFrame, (other) => other.priority > animation.priority),
    0,
    animation
  );
}
function advance(dt) {
  const nextFrame = prevFrame;
  for (let i2 = 0; i2 < currentFrame.length; i2++) {
    const animation = currentFrame[i2];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex$2(arr, test) {
  const index2 = arr.findIndex(test);
  return index2 < 0 ? arr.length : index2;
}
var clamp = (min, max, v2) => Math.min(Math.max(v2, min), max);
var colors2 = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp(
  "hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)
);
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color) {
  let match2;
  if (typeof color === "number") {
    return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;
  }
  if (match2 = hex6.exec(color))
    return parseInt(match2[1] + "ff", 16) >>> 0;
  if (colors && colors[color] !== void 0) {
    return colors[color];
  }
  if (match2 = rgb.exec(color)) {
    return (parse255(match2[1]) << 24 | // r
    parse255(match2[2]) << 16 | // g
    parse255(match2[3]) << 8 | // b
    255) >>> // a
    0;
  }
  if (match2 = rgba.exec(color)) {
    return (parse255(match2[1]) << 24 | // r
    parse255(match2[2]) << 16 | // g
    parse255(match2[3]) << 8 | // b
    parse1(match2[4])) >>> // a
    0;
  }
  if (match2 = hex3.exec(color)) {
    return parseInt(
      match2[1] + match2[1] + // r
      match2[2] + match2[2] + // g
      match2[3] + match2[3] + // b
      "ff",
      // a
      16
    ) >>> 0;
  }
  if (match2 = hex8.exec(color))
    return parseInt(match2[1], 16) >>> 0;
  if (match2 = hex4.exec(color)) {
    return parseInt(
      match2[1] + match2[1] + // r
      match2[2] + match2[2] + // g
      match2[3] + match2[3] + // b
      match2[4] + match2[4],
      // a
      16
    ) >>> 0;
  }
  if (match2 = hsl.exec(color)) {
    return (hslToRgb(
      parse360(match2[1]),
      // h
      parsePercentage(match2[2]),
      // s
      parsePercentage(match2[3])
      // l
    ) | 255) >>> // a
    0;
  }
  if (match2 = hsla.exec(color)) {
    return (hslToRgb(
      parse360(match2[1]),
      // h
      parsePercentage(match2[2]),
      // s
      parsePercentage(match2[3])
      // l
    ) | parse1(match2[4])) >>> // a
    0;
  }
  return null;
}
function hue2rgb(p2, q3, t3) {
  if (t3 < 0)
    t3 += 1;
  if (t3 > 1)
    t3 -= 1;
  if (t3 < 1 / 6)
    return p2 + (q3 - p2) * 6 * t3;
  if (t3 < 1 / 2)
    return q3;
  if (t3 < 2 / 3)
    return p2 + (q3 - p2) * (2 / 3 - t3) * 6;
  return p2;
}
function hslToRgb(h4, s3, l2) {
  const q3 = l2 < 0.5 ? l2 * (1 + s3) : l2 + s3 - l2 * s3;
  const p2 = 2 * l2 - q3;
  const r2 = hue2rgb(p2, q3, h4 + 1 / 3);
  const g2 = hue2rgb(p2, q3, h4);
  const b3 = hue2rgb(p2, q3, h4 - 1 / 3);
  return Math.round(r2 * 255) << 24 | Math.round(g2 * 255) << 16 | Math.round(b3 * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  const r2 = (int32Color & 4278190080) >>> 24;
  const g2 = (int32Color & 16711680) >>> 16;
  const b3 = (int32Color & 65280) >>> 8;
  const a3 = (int32Color & 255) / 255;
  return `rgba(${r2}, ${g2}, ${b3}, ${a3})`;
}
var createInterpolator = (range, output, extrapolate) => {
  if (is.fun(range)) {
    return range;
  }
  if (is.arr(range)) {
    return createInterpolator({
      range,
      output,
      extrapolate
    });
  }
  if (is.str(range.output[0])) {
    return createStringInterpolator(range);
  }
  const config2 = range;
  const outputRange = config2.output;
  const inputRange = config2.range || [0, 1];
  const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
  const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
  const easing = config2.easing || ((t3) => t3);
  return (input) => {
    const range2 = findRange(input, inputRange);
    return interpolate(
      input,
      inputRange[range2],
      inputRange[range2 + 1],
      outputRange[range2],
      outputRange[range2 + 1],
      easing,
      extrapolateLeft,
      extrapolateRight,
      config2.map
    );
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
  let result = map ? map(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i2 = 1; i2 < inputRange.length - 1; ++i2)
    if (inputRange[i2] >= input)
      break;
  return i2 - 1;
}
var steps = (steps2, direction = "end") => (progress2) => {
  progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);
  const expanded = progress2 * steps2;
  const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
  return clamp(0, 1, rounded / steps2);
};
var c1 = 1.70158;
var c2 = c1 * 1.525;
var c3 = c1 + 1;
var c4 = 2 * Math.PI / 3;
var c5 = 2 * Math.PI / 4.5;
var bounceOut = (x3) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x3 < 1 / d1) {
    return n1 * x3 * x3;
  } else if (x3 < 2 / d1) {
    return n1 * (x3 -= 1.5 / d1) * x3 + 0.75;
  } else if (x3 < 2.5 / d1) {
    return n1 * (x3 -= 2.25 / d1) * x3 + 0.9375;
  } else {
    return n1 * (x3 -= 2.625 / d1) * x3 + 0.984375;
  }
};
var easings = {
  linear: (x3) => x3,
  easeInQuad: (x3) => x3 * x3,
  easeOutQuad: (x3) => 1 - (1 - x3) * (1 - x3),
  easeInOutQuad: (x3) => x3 < 0.5 ? 2 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 2) / 2,
  easeInCubic: (x3) => x3 * x3 * x3,
  easeOutCubic: (x3) => 1 - Math.pow(1 - x3, 3),
  easeInOutCubic: (x3) => x3 < 0.5 ? 4 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 3) / 2,
  easeInQuart: (x3) => x3 * x3 * x3 * x3,
  easeOutQuart: (x3) => 1 - Math.pow(1 - x3, 4),
  easeInOutQuart: (x3) => x3 < 0.5 ? 8 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 4) / 2,
  easeInQuint: (x3) => x3 * x3 * x3 * x3 * x3,
  easeOutQuint: (x3) => 1 - Math.pow(1 - x3, 5),
  easeInOutQuint: (x3) => x3 < 0.5 ? 16 * x3 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 5) / 2,
  easeInSine: (x3) => 1 - Math.cos(x3 * Math.PI / 2),
  easeOutSine: (x3) => Math.sin(x3 * Math.PI / 2),
  easeInOutSine: (x3) => -(Math.cos(Math.PI * x3) - 1) / 2,
  easeInExpo: (x3) => x3 === 0 ? 0 : Math.pow(2, 10 * x3 - 10),
  easeOutExpo: (x3) => x3 === 1 ? 1 : 1 - Math.pow(2, -10 * x3),
  easeInOutExpo: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? Math.pow(2, 20 * x3 - 10) / 2 : (2 - Math.pow(2, -20 * x3 + 10)) / 2,
  easeInCirc: (x3) => 1 - Math.sqrt(1 - Math.pow(x3, 2)),
  easeOutCirc: (x3) => Math.sqrt(1 - Math.pow(x3 - 1, 2)),
  easeInOutCirc: (x3) => x3 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x3, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x3 + 2, 2)) + 1) / 2,
  easeInBack: (x3) => c3 * x3 * x3 * x3 - c1 * x3 * x3,
  easeOutBack: (x3) => 1 + c3 * Math.pow(x3 - 1, 3) + c1 * Math.pow(x3 - 1, 2),
  easeInOutBack: (x3) => x3 < 0.5 ? Math.pow(2 * x3, 2) * ((c2 + 1) * 2 * x3 - c2) / 2 : (Math.pow(2 * x3 - 2, 2) * ((c2 + 1) * (x3 * 2 - 2) + c2) + 2) / 2,
  easeInElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : -Math.pow(2, 10 * x3 - 10) * Math.sin((x3 * 10 - 10.75) * c4),
  easeOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : Math.pow(2, -10 * x3) * Math.sin((x3 * 10 - 0.75) * c4) + 1,
  easeInOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? -(Math.pow(2, 20 * x3 - 10) * Math.sin((20 * x3 - 11.125) * c5)) / 2 : Math.pow(2, -20 * x3 + 10) * Math.sin((20 * x3 - 11.125) * c5) / 2 + 1,
  easeInBounce: (x3) => 1 - bounceOut(1 - x3),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x3) => x3 < 0.5 ? (1 - bounceOut(1 - 2 * x3)) / 2 : (1 + bounceOut(2 * x3 - 1)) / 2,
  steps
};
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer2, event) {
  if (observer2.eventObserved) {
    observer2.eventObserved(event);
  } else {
    observer2(event);
  }
}
function callFluidObservers(target, event) {
  const observers = target[$observers];
  if (observers) {
    observers.forEach((observer2) => {
      callFluidObserver(observer2, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer2) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer2)) {
      observers.add(observer2);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer2);
      }
    }
  }
  return observer2;
}
function removeFluidObserver(target, observer2) {
  const observers = target[$observers];
  if (observers && observers.has(observer2)) {
    const count = observers.size - 1;
    if (count) {
      observers.delete(observer2);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count, observer2);
    }
  }
}
var setHidden = (target, key2, value2) => Object.defineProperty(target, key2, {
  value: value2,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input) => {
  const [token, fallback] = parseCSSVariable(input);
  if (!token || isSSR()) {
    return input;
  }
  const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(token);
  if (value2) {
    return value2.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const value22 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (value22) {
      return value22;
    } else {
      return input;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input;
};
var parseCSSVariable = (current) => {
  const match2 = cssVariableRegex.exec(current);
  if (!match2)
    return [,];
  const [, token, fallback] = match2;
  return [token, fallback];
};
var namedColorRegex;
var rgbaRound = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
var createStringInterpolator2 = (config2) => {
  if (!namedColorRegex)
    namedColorRegex = colors ? (
      // match color names, ignore partial matches
      new RegExp(`(${Object.keys(colors).join("|")})(?!\\w)`, "g")
    ) : (
      // never match
      /^\b$/
    );
  const output = config2.output.map((value2) => {
    return getFluidValue(value2).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes = output.map((value2) => value2.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map(
    (_, i2) => keyframes.map((values) => {
      if (!(i2 in values)) {
        throw Error('The arity of each "output" value must be equal');
      }
      return values[i2];
    })
  );
  const interpolators = outputRanges.map(
    (output2) => createInterpolator({ ...config2, output: output2 })
  );
  return (input) => {
    var _a;
    const missingUnit = !unitRegex.test(output[0]) && ((_a = output.find((value2) => unitRegex.test(value2))) == null ? void 0 : _a.replace(numberRegex, ""));
    let i2 = 0;
    return output[0].replace(
      numberRegex,
      () => `${interpolators[i2++](input)}${missingUnit || ""}`
    ).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn) => {
  const func = fn;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(
    `${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`
  );
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(
    `${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`
  );
}
function isAnimatedString(value2) {
  return is.str(value2) && (value2[0] == "#" || /\d/.test(value2) || // Do not identify a CSS variable as an AnimatedString if its SSR
  !isSSR() && cssVariableRegex.test(value2) || value2 in (colors || {}));
}
var useIsomorphicLayoutEffect$1 = isSSR() ? reactExports.useEffect : reactExports.useLayoutEffect;
var useIsMounted = () => {
  const isMounted = reactExports.useRef(false);
  useIsomorphicLayoutEffect$1(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update2 = reactExports.useState()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update2(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = reactExports.useState(
    () => ({
      inputs,
      result: getResult()
    })
  );
  const committed = reactExports.useRef();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(
      inputs && cache.inputs && areInputsEqual(inputs, cache.inputs)
    );
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  reactExports.useEffect(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i2 = 0; i2 < next.length; i2++) {
    if (next[i2] !== prev[i2]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect2) => reactExports.useEffect(effect2, emptyDeps);
var emptyDeps = [];
function usePrev(value2) {
  const prevRef = reactExports.useRef();
  reactExports.useEffect(() => {
    prevRef.current = value2;
  });
  return prevRef.current;
}
var $node = Symbol.for("Animated:node");
var isAnimated = (value2) => !!value2 && value2[$node] === value2;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    setAnimated(this, this);
  }
  /** Get every `AnimatedValue` used by this node. */
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class extends Animated {
  constructor(_value) {
    super();
    this._value = _value;
    this.done = true;
    this.durationProgress = 0;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  /** @internal */
  static create(value2) {
    return new AnimatedValue(value2);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value2, step) {
    if (is.num(value2)) {
      this.lastPosition = value2;
      if (step) {
        value2 = Math.round(value2 / step) * step;
        if (this.done) {
          this.lastPosition = value2;
        }
      }
    }
    if (this._value === value2) {
      return false;
    }
    this._value = value2;
    return true;
  }
  reset() {
    const { done } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class extends AnimatedValue {
  constructor(value2) {
    super(0);
    this._string = null;
    this._toString = createInterpolator({
      output: [value2, value2]
    });
  }
  /** @internal */
  static create(value2) {
    return new AnimatedString(value2);
  }
  getValue() {
    const value2 = this._string;
    return value2 == null ? this._string = this._toString(this._value) : value2;
  }
  setValue(value2) {
    if (is.str(value2)) {
      if (value2 == this._string) {
        return false;
      }
      this._string = value2;
      this._value = 1;
    } else if (super.setValue(value2)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = { dependencies: null };
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values = {};
    eachProp(this.source, (source, key2) => {
      if (isAnimated(source)) {
        values[key2] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values[key2] = getFluidValue(source);
      } else if (!animated2) {
        values[key2] = source;
      }
    });
    return values;
  }
  /** Replace the raw object data */
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  /** Create a payload set. */
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  /** Add to a payload set. */
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  /** @internal */
  static create(source) {
    return new AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i2) => node.setValue(source[i2])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value2) {
  const nodeType = isAnimatedString(value2) ? AnimatedString : AnimatedValue;
  return nodeType.create(value2);
}
function getAnimatedType(value2) {
  const parentNode = getAnimated(value2);
  return parentNode ? parentNode.constructor : is.arr(value2) ? AnimatedArray : isAnimatedString(value2) ? AnimatedString : AnimatedValue;
}
var withAnimated = (Component, host2) => {
  const hasInstance = (
    // Function components must use "forwardRef" to avoid being
    // re-rendered on every animation frame.
    !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent
  );
  return reactExports.forwardRef((givenProps, givenRef) => {
    const instanceRef = reactExports.useRef(null);
    const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks
    reactExports.useCallback(
      (value2) => {
        instanceRef.current = updateRef(givenRef, value2);
      },
      [givenRef]
    );
    const [props, deps] = getAnimatedState(givenProps, host2);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = reactExports.useRef();
    useIsomorphicLayoutEffect$1(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(
            observerRef.current.deps,
            (dep) => removeFluidObserver(dep, observerRef.current)
          );
          raf.cancel(observerRef.current.update);
        }
      };
    });
    reactExports.useEffect(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host2.getComponentProps(props.getValue());
    return /* @__PURE__ */ reactExports.createElement(Component, { ...usedProps, ref });
  });
};
var PropsObserver = class {
  constructor(update2, deps) {
    this.update = update2;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host2) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = {
      ...props,
      style: host2.createAnimatedStyle(props.style)
    };
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value2) {
  if (ref) {
    if (is.fun(ref))
      ref(value2);
    else
      ref.current = value2;
  }
  return value2;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: applyAnimatedValues2 = () => false,
  createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: applyAnimatedValues2,
    createAnimatedStyle,
    getComponentProps
  };
  const animated2 = (Component) => {
    const displayName = getDisplayName(Component) || "Anonymous";
    if (is.str(Component)) {
      Component = animated2[Component] || (animated2[Component] = withAnimated(Component, hostConfig));
    } else {
      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
    }
    Component.displayName = `Animated(${displayName})`;
    return Component;
  };
  eachProp(components, (Component, key2) => {
    if (is.arr(components)) {
      key2 = getDisplayName(Component);
    }
    animated2[key2] = animated2(Component);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;
function callProp(value2, ...args) {
  return is.fun(value2) ? value2(...args) : value2;
}
var matchProp = (value2, key2) => value2 === true || !!(key2 && value2 && (is.fun(value2) ? value2(key2) : toArray$1(value2).includes(key2)));
var resolveProp = (prop, key2) => is.obj(prop) ? key2 && prop[key2] : prop;
var getDefaultProp = (props, key2) => props.default === true ? props[key2] : props.default ? props.default[key2] : void 0;
var noopTransform = (value2) => value2;
var getDefaultProps = (props, transform2 = noopTransform) => {
  let keys2 = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys2 = Object.keys(props);
  }
  const defaults2 = {};
  for (const key2 of keys2) {
    const value2 = transform2(props[key2], key2);
    if (!is.und(value2)) {
      defaults2[key2] = value2;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = [
  "config",
  "onProps",
  "onStart",
  "onChange",
  "onPause",
  "onResume",
  "onRest"
];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  // Transition props
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  // Internal props
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count = 0;
  eachProp(props, (value2, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value2;
      count++;
    }
  });
  if (count) {
    return forward;
  }
}
function inferTo(props) {
  const to2 = getForwardProps(props);
  if (to2) {
    const out = { to: to2 };
    eachProp(props, (val2, key2) => key2 in to2 || (out[key2] = val2));
    return out;
  }
  return { ...props };
}
function computeGoal(value2) {
  value2 = getFluidValue(value2);
  return is.arr(value2) ? value2.map(computeGoal) : isAnimatedString(value2) ? globals_exports.createStringInterpolator({
    range: [0, 1],
    output: [value2, value2]
  })(1) : value2;
}
function hasProps(props) {
  for (const _ in props)
    return true;
  return false;
}
function isAsyncTo(to2) {
  return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);
}
function detachRefs(ctrl, ref) {
  var _a;
  (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  var _a;
  if (ref && ctrl.ref !== ref) {
    (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config$1 = {
  default: { tension: 170, friction: 26 },
  gentle: { tension: 120, friction: 14 },
  wobbly: { tension: 180, friction: 12 },
  stiff: { tension: 210, friction: 20 },
  slow: { tension: 280, friction: 60 },
  molasses: { tension: 280, friction: 120 }
};
var defaults = {
  ...config$1.default,
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
};
var AnimationConfig = class {
  constructor() {
    this.velocity = 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config2, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = { ...defaultConfig };
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = { ...defaultConfig, ...newConfig };
  }
  sanitizeConfig(config2, newConfig);
  Object.assign(config2, newConfig);
  for (const key2 in defaults) {
    if (config2[key2] == null) {
      config2[key2] = defaults[key2];
    }
  }
  let { frequency, damping } = config2;
  const { mass } = config2;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config2.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config2;
}
function sanitizeConfig(config2, props) {
  if (!is.und(props.decay)) {
    config2.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config2.duration = void 0;
      config2.decay = void 0;
    }
    if (isTensionConfig) {
      config2.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, { key: key2, props, defaultProps, state, actions }) {
  return new Promise((resolve, reject) => {
    var _a;
    let delay;
    let timeout;
    let cancel = matchProp((_a = props.cancel) != null ? _a : defaultProps == null ? void 0 : defaultProps.cancel, key2);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key2);
      }
      let pause = defaultProps == null ? void 0 : defaultProps.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key2);
      }
      delay = callProp(props.delay || 0, key2);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals_exports.skipAnimation) {
        state.delayed = true;
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start({ ...props, callId, cancel }, resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(
  target.get(),
  results.every((result) => result.finished)
);
var getNoopResult = (value2) => ({
  value: value2,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value2, finished, cancelled = false) => ({
  value: value2,
  finished,
  cancelled
});
var getCancelledResult = (value2) => ({
  value: value2,
  cancelled: true,
  finished: false
});
function runAsync(to2, props, state, target) {
  const { callId, parentId, onRest } = props;
  const { asyncTo: prevTo, promise: prevPromise } = state;
  if (!parentId && to2 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to2;
    const defaultProps = getDefaultProps(
      props,
      (value2, key2) => (
        // The `onRest` prop is only called when the `runAsync` promise is resolved.
        key2 === "onRest" ? void 0 : value2
      )
    );
    let preventBail;
    let bail;
    const bailPromise = new Promise(
      (resolve, reject) => (preventBail = resolve, bail = reject)
    );
    const bailIfEnded = (bailSignal) => {
      const bailResult = (
        // The `cancel` prop or `stop` method was used.
        callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.
        callId !== state.asyncId && getFinishedResult(target, false)
      );
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAnimationSignal();
      return (async () => {
        if (globals_exports.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 };
        props2.parentId = callId;
        eachProp(defaultProps, (value2, key2) => {
          if (is.und(props2[key2])) {
            props2[key2] = value2;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals_exports.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to2)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to2);
      } else {
        animating = Promise.resolve(to2(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAnimationSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t3) => t3.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super(
      "An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise."
    );
  }
};
var SkipAnimationSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
  }
};
var isFrameValue = (value2) => value2 instanceof FrameValue;
var nextId = 1;
var FrameValue = class extends FluidValue {
  constructor() {
    super(...arguments);
    this.id = nextId++;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  /** Get the current value */
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  /** Create a spring that maps our value to another value */
  to(...args) {
    return globals_exports.to(this, args);
  }
  /** @deprecated Use the `to` method instead. */
  interpolate(...args) {
    deprecateInterpolate();
    return globals_exports.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count) {
    if (count == 1)
      this._attach();
  }
  observerRemoved(count) {
    if (count == 0)
      this._detach();
  }
  /** Called when the first child is added. */
  _attach() {
  }
  /** Called when the last child is removed. */
  _detach() {
  }
  /** Tell our children about our new value */
  _onChange(value2, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value: value2,
      idle
    });
  }
  /** Tell our children about our new priority */
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active2) => active2 ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.animation = new Animation();
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 };
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  /** Equals true when not advancing on each frame. */
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  /**
   * When true, this value has been animated at least once.
   */
  get hasAnimated() {
    return hasAnimated(this);
  }
  /**
   * When true, this value has an unfinished animation,
   * which is either active or paused.
   */
  get isAnimating() {
    return isAnimating(this);
  }
  /**
   * When true, all current and future animations are paused.
   */
  get isPaused() {
    return isPaused(this);
  }
  /**
   *
   *
   */
  get isDelayed() {
    return this._state.delayed;
  }
  /** Advance the current animation by a number of milliseconds */
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let { toValues } = anim;
    const { config: config2 } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray$1(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i2) => {
      if (node2.done)
        return;
      const to2 = (
        // Animated strings always go from 0 to 1.
        node2.constructor == AnimatedString ? 1 : payload ? payload[i2].lastPosition : toValues[i2]
      );
      let finished = anim.immediate;
      let position2 = to2;
      if (!finished) {
        position2 = node2.lastPosition;
        if (config2.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i2];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i2] : config2.velocity;
        let velocity2;
        const precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));
        if (!is.und(config2.duration)) {
          let p2 = 1;
          if (config2.duration > 0) {
            if (this._memoizedDuration !== config2.duration) {
              this._memoizedDuration = config2.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config2.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p2 = (config2.progress || 0) + elapsed / this._memoizedDuration;
            p2 = p2 > 1 ? 1 : p2 < 0 ? 0 : p2;
            node2.durationProgress = p2;
          }
          position2 = from + config2.easing(p2) * (to2 - from);
          velocity2 = (position2 - node2.lastPosition) / dt;
          finished = p2 == 1;
        } else if (config2.decay) {
          const decay = config2.decay === true ? 0.998 : config2.decay;
          const e3 = Math.exp(-(1 - decay) * elapsed);
          position2 = from + v0 / (1 - decay) * (1 - e3);
          finished = Math.abs(node2.lastPosition - position2) <= precision;
          velocity2 = v0 * e3;
        } else {
          velocity2 = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const restVelocity = config2.restVelocity || precision / 10;
          const bounceFactor = config2.clamp ? 0 : config2.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n2 = 0; n2 < numSteps; ++n2) {
            isMoving = Math.abs(velocity2) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to2 - position2) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position2 == to2 || position2 > to2 == isGrowing;
              if (isBouncing) {
                velocity2 = -velocity2 * bounceFactor;
                position2 = to2;
              }
            }
            const springForce = -config2.tension * 1e-6 * (position2 - to2);
            const dampingForce = -config2.friction * 1e-3 * velocity2;
            const acceleration = (springForce + dampingForce) / config2.mass;
            velocity2 = velocity2 + acceleration * step;
            position2 = position2 + velocity2 * step;
          }
        }
        node2.lastVelocity = velocity2;
        if (Number.isNaN(position2)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i2].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position2, config2.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config2.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config2.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  /** Set the current value, while stopping the current animation */
  set(value2) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value2);
      this._set(value2);
    });
    return this;
  }
  /**
   * Freeze the active animation in time, as well as any updates merged
   * before `resume` is called.
   */
  pause() {
    this._update({ pause: true });
  }
  /** Resume the animation if paused. */
  resume() {
    this._update({ pause: false });
  }
  /** Skip to the end of the current animation. */
  finish() {
    if (isAnimating(this)) {
      const { to: to2, config: config2 } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config2.decay) {
          this._set(to2, false);
        }
        this._stop();
      });
    }
    return this;
  }
  /** Push props into the pending queue. */
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to2, arg2) {
    let queue;
    if (!is.und(to2)) {
      queue = [is.obj(to2) ? to2 : { ...arg2, to: to2 }];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(
      queue.map((props) => {
        const up = this._update(props);
        return up;
      })
    ).then((results) => getCombinedResult(this, results));
  }
  /**
   * Stop the current animation, and cancel any delayed updates.
   *
   * Pass `true` to call `onRest` with `cancelled: true`.
   */
  stop(cancel) {
    const { to: to2 } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to2, cancel));
    return this;
  }
  /** Restart the animation. */
  reset() {
    this._update({ reset: true });
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  /**
   * Parse the `to` and `from` range from the given `props` object.
   *
   * This also ensures the initial value is available to animated components
   * during the render phase.
   */
  _prepareNode(props) {
    const key2 = this.key || "";
    let { to: to2, from } = props;
    to2 = is.obj(to2) ? to2[key2] : to2;
    if (to2 == null || isAsyncTo(to2)) {
      to2 = void 0;
    }
    from = is.obj(from) ? from[key2] : from;
    if (from == null) {
      from = void 0;
    }
    const range = { to: to2, from };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to2, from] = [from, to2];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to2);
      }
    }
    return range;
  }
  /** Every update is processed by this method before merging. */
  _update({ ...props }, isLoop) {
    const { key: key2, defaultProps } = this;
    if (props.default)
      Object.assign(
        defaultProps,
        getDefaultProps(
          props,
          (value2, prop) => /^on/.test(prop) ? resolveProp(value2, key2) : value2
        )
      );
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error(
        "Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?"
      );
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key: key2,
      props,
      defaultProps,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(
              this,
              "onPause",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(
              this,
              "onResume",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        start: this._merge.bind(this, range)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  /** Merge props into the current animation */
  _merge(range, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range.to);
    const hasFromProp = !is.und(range.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const { key: key2, defaultProps, animation: anim } = this;
    const { to: prevTo, from: prevFrom } = anim;
    let { to: to2 = prevTo, from = prevFrom } = range;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to2))) {
      to2 = from;
    }
    if (props.reverse)
      [to2, from] = [from, to2];
    const hasFromChanged = !isEqual$1(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual$1(to2, prevTo);
    if (hasToChanged) {
      this._focus(to2);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const { config: config2 } = anim;
    const { decay, velocity: velocity2 } = config2;
    if (hasToProp || hasFromProp) {
      config2.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(
        config2,
        callProp(props.config, key2),
        // Avoid calling the same "config" prop twice.
        props.config !== defaultProps.config ? callProp(defaultProps.config, key2) : void 0
      );
    }
    let node = getAnimated(this);
    if (!node || is.und(to2)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset2 = (
      // When `reset` is undefined, the `from` prop implies `reset: true`,
      // except for declarative updates. When `reset` is defined, there
      // must exist a value to animate from.
      is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key2)
    );
    const value2 = reset2 ? from : this.get();
    const goal = computeGoal(to2);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key2));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to2);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(
            `Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`
          );
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to2);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset2 || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual$1(computeGoal(value2), goal);
        started = !finished;
      }
      if (!isEqual$1(anim.immediate, immediate) && !immediate || !isEqual$1(config2.decay, decay) || !isEqual$1(config2.velocity, velocity2)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset2) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray$1(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset2) {
          this._set(prevTo);
        }
      }
      if (started) {
        const { onRest } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            var _a;
            anim.changed = !reset2;
            onRest == null ? void 0 : onRest(result, this);
            if (reset2) {
              callProp(defaultProps.onRest, result);
            } else {
              (_a = anim.onStart) == null ? void 0 : _a.call(anim, result, this);
            }
          });
      }
    }
    if (reset2) {
      this._set(value2);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value2));
    }
  }
  /** Update the `animation.to` value, which might be a `FluidValue` */
  _focus(value2) {
    const anim = this.animation;
    if (value2 !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value2;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const { to: to2 } = this.animation;
    if (hasFluidValue(to2)) {
      addFluidObserver(to2, this);
      if (isFrameValue(to2)) {
        priority2 = to2.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const { to: to2 } = this.animation;
    if (hasFluidValue(to2)) {
      removeFluidObserver(to2, this);
    }
  }
  /**
   * Update the current value from outside the frameloop,
   * and return the `Animated` node.
   */
  _set(arg, idle = true) {
    const value2 = getFluidValue(arg);
    if (!is.und(value2)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual$1(value2, oldNode.getValue())) {
        const nodeType = getAnimatedType(value2);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value2));
        } else {
          oldNode.setValue(value2);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value2, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(
        this,
        "onStart",
        getFinishedResult(this, checkFinished(this, anim.to)),
        this
      );
    }
  }
  _onChange(value2, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value2, this);
    }
    callProp(this.defaultProps.onChange, value2, this);
    super._onChange(value2, idle);
  }
  // This method resets the animation state (even if already animating) to
  // ensure the latest from/to range is used, and it also ensures this spring
  // is added to the frameloop.
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals_exports.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  /**
   * Exit the frameloop and notify `onRest` listeners.
   *
   * Always wrap `_stop` calls with `batchedUpdates`.
   */
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to2) {
  const goal = computeGoal(to2);
  const value2 = computeGoal(target.get());
  return isEqual$1(value2, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to2 = props.to) {
  const loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse = (overrides || props).reverse;
    const reset2 = !overrides || overrides.reset;
    return createUpdate({
      ...props,
      loop: loop2,
      // Avoid updating default props when looping.
      default: false,
      // Never loop the `pause` prop.
      pause: void 0,
      // For the "reverse" prop to loop as expected, the "to" prop
      // must be undefined. The "reverse" prop is ignored when the
      // "to" prop is an array or function.
      to: !reverse || isAsyncTo(to2) ? to2 : void 0,
      // Ignore the "from" prop except on reset.
      from: reset2 ? props.from : void 0,
      reset: reset2,
      // The "loop" prop can return a "useSpring" props object to
      // override any of the original props.
      ...overrides
    });
  }
}
function createUpdate(props) {
  const { to: to2, from } = props = inferTo(props);
  const keys2 = /* @__PURE__ */ new Set();
  if (is.obj(to2))
    findDefined(to2, keys2);
  if (is.obj(from))
    findDefined(from, keys2);
  props.keys = keys2.size ? Array.from(keys2) : null;
  return props;
}
function declareUpdate(props) {
  const update2 = createUpdate(props);
  if (is.und(update2.default)) {
    update2.default = getDefaultProps(update2);
  }
  return update2;
}
function findDefined(values, keys2) {
  eachProp(values, (value2, key2) => value2 != null && keys2.add(key2));
}
var ACTIVE_EVENTS = [
  "onStart",
  "onRest",
  "onChange",
  "onPause",
  "onResume"
];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
}
function sendEvent(target, type, ...args) {
  var _a, _b, _c, _d;
  (_b = (_a = target.animation)[type]) == null ? void 0 : _b.call(_a, ...args);
  (_d = (_c = target.defaultProps)[type]) == null ? void 0 : _d.call(_c, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId2 = 1;
var Controller = class {
  constructor(props, flush3) {
    this.id = nextId2++;
    this.springs = {};
    this.queue = [];
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush3) {
      this._flush = flush3;
    }
    if (props) {
      this.start({ default: true, ...props });
    }
  }
  /**
   * Equals `true` when no spring values are in the frameloop, and
   * no async animation is currently active.
   */
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  /** Get the current values of our springs */
  get() {
    const values = {};
    this.each((spring, key2) => values[key2] = spring.get());
    return values;
  }
  /** Set the current values without animating. */
  set(values) {
    for (const key2 in values) {
      const value2 = values[key2];
      if (!is.und(value2)) {
        this.springs[key2].set(value2);
      }
    }
  }
  /** Push an update onto the queue of each value. */
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  /**
   * Start the queued animations for every spring, and resolve the returned
   * promise once all queued animations have finished or been cancelled.
   *
   * When you pass a queue (instead of nothing), that queue is used instead of
   * the queued animations added with the `update` method, which are left alone.
   */
  start(props) {
    let { queue } = this;
    if (props) {
      queue = toArray$1(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  /** @internal */
  stop(arg, keys2) {
    if (arg !== !!arg) {
      keys2 = arg;
    }
    if (keys2) {
      const springs = this.springs;
      each(toArray$1(keys2), (key2) => springs[key2].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  /** Freeze the active animation in time */
  pause(keys2) {
    if (is.und(keys2)) {
      this.start({ pause: true });
    } else {
      const springs = this.springs;
      each(toArray$1(keys2), (key2) => springs[key2].pause());
    }
    return this;
  }
  /** Resume the animation if paused. */
  resume(keys2) {
    if (is.und(keys2)) {
      this.start({ pause: false });
    } else {
      const springs = this.springs;
      each(toArray$1(keys2), (key2) => springs[key2].resume());
    }
    return this;
  }
  /** Call a function once per spring value */
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  /** @internal Called at the end of every animation frame */
  _onFrame() {
    const { onStart, onChange, onRest } = this._events;
    const active2 = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active2 && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active2 && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then(
    (results) => getCombinedResult(ctrl, results)
  );
}
async function flushUpdate(ctrl, props, isLoop) {
  const { keys: keys2, to: to2, from, loop: loop2, onRest, onResolve } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to2 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to2) || is.fun(to2) ? to2 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key2) => {
      const handler = props[key2];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key2];
        props[key2] = ({ finished, cancelled }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key2] = props[key2];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys2 || Object.keys(ctrl.springs)).map(
    (key2) => ctrl.springs[key2].start(props)
  );
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(
      scheduleProps(++ctrl["_lastAsyncId"], {
        props,
        state,
        actions: {
          pause: noop$1,
          resume: noop$1,
          start(props2, resolve) {
            if (cancel) {
              stopAsync(state, ctrl["_lastAsyncId"]);
              resolve(getCancelledResult(ctrl));
            } else {
              props2.onRest = onRest;
              resolve(
                runAsync(
                  asyncTo,
                  props2,
                  state,
                  ctrl
                )
              );
            }
          }
        }
      })
    );
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to2);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = { ...ctrl.springs };
  if (props) {
    each(toArray$1(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = { ...props2, to: void 0 };
      }
      prepareSprings(springs, props2, (key2) => {
        return createSpring(key2);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key2) => {
    if (!ctrl.springs[key2]) {
      ctrl.springs[key2] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key2, observer) {
  const spring = new SpringValue();
  spring.key = key2;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key2) => {
      const spring = springs[key2] || (springs[key2] = create(key2));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key2) => {
      return createSpring(key2, ctrl);
    });
  });
}
var SpringContext = ({
  children,
  ...props
}) => {
  const inherited = reactExports.useContext(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({ pause, immediate }), [pause, immediate]);
  const { Provider } = ctx;
  return /* @__PURE__ */ reactExports.createElement(Provider, { value: props }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, reactExports.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i2) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update2 = _getProps(props, ctrl, i2);
        if (update2) {
          results.push(ctrl.start(update2));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i2 = current.indexOf(ctrl);
    if (~i2)
      current.splice(i2, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values) {
    each(current, (ctrl, i2) => {
      const update2 = is.fun(values) ? values(i2, ctrl) : values;
      if (update2) {
        ctrl.set(update2);
      }
    });
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i2) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update2 = this._getProps(props, ctrl, i2);
        if (update2) {
          results.push(ctrl.start(update2));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i2) => ctrl.update(this._getProps(props, ctrl, i2)));
    return this;
  };
  const _getProps = function(arg, ctrl, index2) {
    return is.fun(arg) ? arg(index2, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length2, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = reactExports.useMemo(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const layoutId = reactExports.useRef(0);
  const forceUpdate = useForceUpdate();
  const state = reactExports.useMemo(
    () => ({
      ctrls: [],
      queue: [],
      flush(ctrl, updates2) {
        const springs2 = getSprings(ctrl, updates2);
        const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key2) => !ctrl.springs[key2]);
        return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
          setSprings(ctrl, springs2);
          state.queue.push(() => {
            resolve(flushUpdateQueue(ctrl, updates2));
          });
          forceUpdate();
        });
      }
    }),
    []
  );
  const ctrls = reactExports.useRef([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length2) || 0;
  reactExports.useMemo(() => {
    each(ctrls.current.slice(length2, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length2;
    declareUpdates(prevLength, length2);
  }, [length2]);
  reactExports.useMemo(() => {
    declareUpdates(0, Math.min(prevLength, length2));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i2 = startIndex; i2 < endIndex; i2++) {
      const ctrl = ctrls.current[i2] || (ctrls.current[i2] = new Controller(null, state.flush));
      const update2 = propsFn ? propsFn(i2, ctrl) : props[i2];
      if (update2) {
        updates[i2] = declareUpdate(update2);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i2) => getSprings(ctrl, updates[i2]));
  const context = reactExports.useContext(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect$1(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const { queue } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb2) => cb2());
    }
    each(ctrls.current, (ctrl, i2) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({ default: context });
      }
      const update2 = updates[i2];
      if (update2) {
        replaceRef(ctrl, update2.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update2);
        } else {
          ctrl.start(update2);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x3) => ({ ...x3 }));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(
    1,
    isFn ? props : [props],
    isFn ? deps || [] : deps
  );
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
function useTransition(data2, props, deps) {
  const propsFn = is.fun(props) && props;
  const {
    reset: reset2,
    sort,
    trail = 0,
    expires = true,
    exitBeforeEnter = false,
    onDestroyed,
    ref: propsRef,
    config: propsConfig
  } = propsFn ? propsFn() : props;
  const ref = reactExports.useMemo(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const items = toArray$1(data2);
  const transitions = [];
  const usedTransitions = reactExports.useRef(null);
  const prevTransitions = reset2 ? null : usedTransitions.current;
  useIsomorphicLayoutEffect$1(() => {
    usedTransitions.current = transitions;
  });
  useOnce(() => {
    each(transitions, (t3) => {
      ref == null ? void 0 : ref.add(t3.ctrl);
      t3.ctrl.ref = ref;
    });
    return () => {
      each(usedTransitions.current, (t3) => {
        if (t3.expired) {
          clearTimeout(t3.expirationId);
        }
        detachRefs(t3.ctrl, ref);
        t3.ctrl.stop(true);
      });
    };
  });
  const keys2 = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
  const expired = reset2 && usedTransitions.current || [];
  useIsomorphicLayoutEffect$1(
    () => each(expired, ({ ctrl, item, key: key2 }) => {
      detachRefs(ctrl, ref);
      callProp(onDestroyed, item, key2);
    })
  );
  const reused = [];
  if (prevTransitions)
    each(prevTransitions, (t3, i2) => {
      if (t3.expired) {
        clearTimeout(t3.expirationId);
        expired.push(t3);
      } else {
        i2 = reused[i2] = keys2.indexOf(t3.key);
        if (~i2)
          transitions[i2] = t3;
      }
    });
  each(items, (item, i2) => {
    if (!transitions[i2]) {
      transitions[i2] = {
        key: keys2[i2],
        item,
        phase: "mount",
        ctrl: new Controller()
      };
      transitions[i2].ctrl.item = item;
    }
  });
  if (reused.length) {
    let i2 = -1;
    const { leave } = propsFn ? propsFn() : props;
    each(reused, (keyIndex, prevIndex) => {
      const t3 = prevTransitions[prevIndex];
      if (~keyIndex) {
        i2 = transitions.indexOf(t3);
        transitions[i2] = { ...t3, item: items[keyIndex] };
      } else if (leave) {
        transitions.splice(++i2, 0, t3);
      }
    });
  }
  if (is.fun(sort)) {
    transitions.sort((a3, b3) => sort(a3.item, b3.item));
  }
  let delay = -trail;
  const forceUpdate = useForceUpdate();
  const defaultProps = getDefaultProps(props);
  const changes = /* @__PURE__ */ new Map();
  const exitingTransitions = reactExports.useRef(/* @__PURE__ */ new Map());
  const forceChange = reactExports.useRef(false);
  each(transitions, (t3, i2) => {
    const key2 = t3.key;
    const prevPhase = t3.phase;
    const p2 = propsFn ? propsFn() : props;
    let to2;
    let phase;
    const propsDelay = callProp(p2.delay || 0, key2);
    if (prevPhase == "mount") {
      to2 = p2.enter;
      phase = "enter";
    } else {
      const isLeave = keys2.indexOf(key2) < 0;
      if (prevPhase != "leave") {
        if (isLeave) {
          to2 = p2.leave;
          phase = "leave";
        } else if (to2 = p2.update) {
          phase = "update";
        } else
          return;
      } else if (!isLeave) {
        to2 = p2.enter;
        phase = "enter";
      } else
        return;
    }
    to2 = callProp(to2, t3.item, i2);
    to2 = is.obj(to2) ? inferTo(to2) : { to: to2 };
    if (!to2.config) {
      const config2 = propsConfig || defaultProps.config;
      to2.config = callProp(config2, t3.item, i2, phase);
    }
    delay += trail;
    const payload = {
      ...defaultProps,
      // we need to add our props.delay value you here.
      delay: propsDelay + delay,
      ref: propsRef,
      immediate: p2.immediate,
      // This prevents implied resets.
      reset: false,
      // Merge any phase-specific props.
      ...to2
    };
    if (phase == "enter" && is.und(payload.from)) {
      const p22 = propsFn ? propsFn() : props;
      const from = is.und(p22.initial) || prevTransitions ? p22.from : p22.initial;
      payload.from = callProp(from, t3.item, i2);
    }
    const { onResolve } = payload;
    payload.onResolve = (result) => {
      callProp(onResolve, result);
      const transitions2 = usedTransitions.current;
      const t22 = transitions2.find((t32) => t32.key === key2);
      if (!t22)
        return;
      if (result.cancelled && t22.phase != "update") {
        return;
      }
      if (t22.ctrl.idle) {
        const idle = transitions2.every((t32) => t32.ctrl.idle);
        if (t22.phase == "leave") {
          const expiry = callProp(expires, t22.item);
          if (expiry !== false) {
            const expiryMs = expiry === true ? 0 : expiry;
            t22.expired = true;
            if (!idle && expiryMs > 0) {
              if (expiryMs <= 2147483647)
                t22.expirationId = setTimeout(forceUpdate, expiryMs);
              return;
            }
          }
        }
        if (idle && transitions2.some((t32) => t32.expired)) {
          exitingTransitions.current.delete(t22);
          if (exitBeforeEnter) {
            forceChange.current = true;
          }
          forceUpdate();
        }
      }
    };
    const springs = getSprings(t3.ctrl, payload);
    if (phase === "leave" && exitBeforeEnter) {
      exitingTransitions.current.set(t3, { phase, springs, payload });
    } else {
      changes.set(t3, { phase, springs, payload });
    }
  });
  const context = reactExports.useContext(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect$1(() => {
    if (hasContext) {
      each(transitions, (t3) => {
        t3.ctrl.start({ default: context });
      });
    }
  }, [context]);
  each(changes, (_, t3) => {
    if (exitingTransitions.current.size) {
      const ind = transitions.findIndex((state) => state.key === t3.key);
      transitions.splice(ind, 1);
    }
  });
  useIsomorphicLayoutEffect$1(
    () => {
      each(
        exitingTransitions.current.size ? exitingTransitions.current : changes,
        ({ phase, payload }, t3) => {
          const { ctrl } = t3;
          t3.phase = phase;
          ref == null ? void 0 : ref.add(ctrl);
          if (hasContext && phase == "enter") {
            ctrl.start({ default: context });
          }
          if (payload) {
            replaceRef(ctrl, payload.ref);
            if ((ctrl.ref || ref) && !forceChange.current) {
              ctrl.update(payload);
            } else {
              ctrl.start(payload);
              if (forceChange.current) {
                forceChange.current = false;
              }
            }
          }
        }
      );
    },
    reset2 ? void 0 : deps
  );
  const renderTransitions = (render) => /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, transitions.map((t3, i2) => {
    const { springs } = changes.get(t3) || t3.ctrl;
    const elem2 = render({ ...springs }, t3.item, t3, i2);
    return elem2 && elem2.type ? /* @__PURE__ */ reactExports.createElement(
      elem2.type,
      {
        ...elem2.props,
        key: is.str(t3.key) || is.num(t3.key) ? t3.key : t3.ctrl.id,
        ref: elem2.ref
      }
    ) : elem2;
  }));
  return ref ? [renderTransitions, ref] : renderTransitions;
}
var nextKey = 1;
function getKeys(items, { key: key2, keys: keys2 = key2 }, prevTransitions) {
  if (keys2 === null) {
    const reused = /* @__PURE__ */ new Set();
    return items.map((item) => {
      const t3 = prevTransitions && prevTransitions.find(
        (t22) => t22.item === item && t22.phase !== "leave" && !reused.has(t22)
      );
      if (t3) {
        reused.add(t3);
        return t3.key;
      }
      return nextKey++;
    });
  }
  return is.und(keys2) ? items : is.fun(keys2) ? items.map(keys2) : toArray$1(keys2);
}
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.source = source;
    this.idle = true;
    this._active = /* @__PURE__ */ new Set();
    this.calc = createInterpolator(...args);
    const value2 = this._get();
    const nodeType = getAnimatedType(value2);
    setAnimated(this, nodeType.create(value2));
  }
  advance(_dt) {
    const value2 = this._get();
    const oldValue = this.get();
    if (!isEqual$1(value2, oldValue)) {
      getAnimated(this).setValue(value2);
      this._onChange(value2, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray$1(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals_exports.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  // Observe our sources only when we're observed.
  _attach() {
    let priority2 = 1;
    each(toArray$1(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  // Stop observing our sources once we have no observers.
  _detach() {
    each(toArray$1(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray$1(this.source).reduce(
        (highest, parent2) => Math.max(highest, (isFrameValue(parent2) ? parent2.priority : 0) + 1),
        0
      );
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active2) {
  return !active2.size || Array.from(active2).every(isIdle);
}
function becomeIdle(self2) {
  if (!self2.idle) {
    self2.idle = true;
    each(getPayload(self2), (node) => {
      node.done = true;
    });
    callFluidObservers(self2, {
      type: "idle",
      parent: self2
    });
  }
}
globals_exports.assign({
  createStringInterpolator: createStringInterpolator2,
  to: (source, args) => new Interpolation(source, args)
});
var isCustomPropRE = /^--/;
function dangerousStyleValue(name2, value2) {
  if (value2 == null || typeof value2 === "boolean" || value2 === "")
    return "";
  if (typeof value2 === "number" && value2 !== 0 && !isCustomPropRE.test(name2) && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2]))
    return value2 + "px";
  return ("" + value2).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const { style, children, scrollTop, scrollLeft, viewBox, ...attributes } = props;
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map(
    (name2) => isFilterElement || instance.hasAttribute(name2) ? name2 : attributeCache[name2] || (attributeCache[name2] = name2.replace(
      /([A-Z])/g,
      // Attributes are written in dash case
      (n2) => "-" + n2.toLowerCase()
    ))
  );
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (const name2 in style) {
    if (style.hasOwnProperty(name2)) {
      const value2 = dangerousStyleValue(name2, style[name2]);
      if (isCustomPropRE.test(name2)) {
        instance.style.setProperty(name2, value2);
      } else {
        instance.style[name2] = value2;
      }
    }
  }
  names.forEach((name2, i2) => {
    instance.setAttribute(name2, values[i2]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
  if (viewBox !== void 0) {
    instance.setAttribute("viewBox", viewBox);
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key2) => prefix2 + key2.charAt(0).toUpperCase() + key2.substring(1);
var prefixes$1 = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes$1.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value2, unit) => is.num(value2) && value2 !== 0 ? value2 + unit : value2;
var isValueIdentity = (value2, id2) => is.arr(value2) ? value2.every((v2) => isValueIdentity(v2, id2)) : is.num(value2) ? value2 === id2 : parseFloat(value2) === id2;
var AnimatedStyle = class extends AnimatedObject {
  constructor({ x: x3, y: y4, z: z3, ...style }) {
    const inputs = [];
    const transforms = [];
    if (x3 || y4 || z3) {
      inputs.push([x3 || 0, y4 || 0, z3 || 0]);
      transforms.push((xyz) => [
        `translate3d(${xyz.map((v2) => addUnit(v2, "px")).join(",")})`,
        // prettier-ignore
        isValueIdentity(xyz, 0)
      ]);
    }
    eachProp(style, (value2, key2) => {
      if (key2 === "transform") {
        inputs.push([value2 || ""]);
        transforms.push((transform2) => [transform2, transform2 === ""]);
      } else if (domTransforms.test(key2)) {
        delete style[key2];
        if (is.und(value2))
          return;
        const unit = pxTransforms.test(key2) ? "px" : degTransforms.test(key2) ? "deg" : "";
        inputs.push(toArray$1(value2));
        transforms.push(
          key2 === "rotate3d" ? ([x22, y22, z22, deg]) => [
            `rotate3d(${x22},${y22},${z22},${addUnit(deg, unit)})`,
            isValueIdentity(deg, 0)
          ] : (input) => [
            `${key2}(${input.map((v2) => addUnit(v2, unit)).join(",")})`,
            isValueIdentity(input, key2.startsWith("scale") ? 1 : 0)
          ]
        );
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this.inputs = inputs;
    this.transforms = transforms;
    this._value = null;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform2 = "";
    let identity = true;
    each(this.inputs, (input, i2) => {
      const arg1 = getFluidValue(input[0]);
      const [t3, id2] = this.transforms[i2](
        is.arr(arg1) ? arg1 : input.map(getFluidValue)
      );
      transform2 += " " + t3;
      identity = identity && id2;
    });
    return identity ? "none" : transform2;
  }
  // Start observing our inputs once we have an observer.
  observerAdded(count) {
    if (count == 1)
      each(
        this.inputs,
        (input) => each(
          input,
          (value2) => hasFluidValue(value2) && addFluidObserver(value2, this)
        )
      );
  }
  // Stop observing our inputs once we have no observers.
  observerRemoved(count) {
    if (count == 0)
      each(
        this.inputs,
        (input) => each(
          input,
          (value2) => hasFluidValue(value2) && removeFluidObserver(value2, this)
        )
      );
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
globals_exports.assign({
  batchedUpdates: reactDomExports.unstable_batchedUpdates,
  createStringInterpolator: createStringInterpolator2,
  colors: colors2
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
});
var animated = host.animated;
const FadeIn = ({ isOpen = true, children, delay, loop: loop2 = false }) => {
  const transition = useTransition(isOpen, {
    from: {
      opacity: 0
    },
    enter: {
      display: "grid",
      opacity: 1,
      height: "100%"
    },
    leave: {
      opacity: 0
    },
    delay,
    loop: loop2
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: transition(
    (style, isOpen2) => !!isOpen2 && /* @__PURE__ */ jsxRuntimeExports.jsx(animated.div, { style, children })
  ) });
};
const Splash = () => {
  const navigate = useNavigate();
  const height2 = useGetInnerHeight();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$c["grid-layout"], style: { height: `${height2}px` }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("header", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("main", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("section", { className: "!h-screen px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$c["grid"], children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center px-4 pb-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 50, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "img",
          {
            className: "self-center inline mb-4 justify-self-center",
            alt: "app-icon",
            src: "./assets/icon.svg"
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx("h6", { className: "text-2xl font-bold mb-6", children: "Welcome to Security" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 200, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
          "Designed to help you keep your data and funds safe. ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          "You can easily secure your node by locking your private keys and creating a backup regularly."
        ] }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 500, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: () => navigate("/dashboard"),
          className: "core-black-contrast-2 core-grey-5 self-end mb-12 font-bold w-full",
          children: "Continue"
        }
      ) })
    ] }) }) })
  ] });
};
const grid$2 = "_grid_ixvli_1";
const backdrop$2 = "_backdrop_ixvli_19";
const full$2 = "_full_ixvli_68";
const dialog$4 = "_dialog_ixvli_71";
const button__wrapper$4 = "_button__wrapper_ixvli_94";
const primaryActions$4 = "_primaryActions_ixvli_98";
const secondaryActions$4 = "_secondaryActions_ixvli_119";
const desktop_only$4 = "_desktop_only_ixvli_138";
const mobile_only$4 = "_mobile_only_ixvli_141";
const styles$b = {
  grid: grid$2,
  backdrop: backdrop$2,
  full: full$2,
  dialog: dialog$4,
  button__wrapper: button__wrapper$4,
  primaryActions: primaryActions$4,
  secondaryActions: secondaryActions$4,
  desktop_only: desktop_only$4,
  mobile_only: mobile_only$4
};
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function _objectWithoutPropertiesLoose$2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
function _setPrototypeOf(o, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
    o2.__proto__ = p3;
    return o2;
  };
  return _setPrototypeOf(o, p2);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function hasClass(element, className) {
  if (element.classList)
    return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}
function addClass(element, className) {
  if (element.classList)
    element.classList.add(className);
  else if (!hasClass(element, className))
    if (typeof element.className === "string")
      element.className = element.className + " " + className;
    else
      element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass$1(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}
const config = {
  disabled: false
};
const TransitionGroupContext = React.createContext(null);
var forceReflow = function forceReflow2(node) {
  return node.scrollTop;
};
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Transition2, _React$Component);
  function Transition2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;
    if (timeout != null && typeof timeout !== "number") {
      exit = timeout.exit;
      enter = timeout.enter;
      appear = timeout.appear !== void 0 ? timeout.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
          if (node)
            forceReflow(node);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts2 = this.getTimeouts();
    var enterTimeout = appearing ? timeouts2.appear : timeouts2.enter;
    if (!mounting && !enter || config.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts2 = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
    if (!exit || config.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts2.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active2 = true;
    this.nextCallback = function(event) {
      if (active2) {
        active2 = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active2 = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children = _this$props.children;
    _this$props.in;
    _this$props.mountOnEnter;
    _this$props.unmountOnExit;
    _this$props.appear;
    _this$props.enter;
    _this$props.exit;
    _this$props.timeout;
    _this$props.addEndListener;
    _this$props.onEnter;
    _this$props.onEntering;
    _this$props.onEntered;
    _this$props.onExit;
    _this$props.onExiting;
    _this$props.onExited;
    _this$props.nodeRef;
    var childProps = _objectWithoutPropertiesLoose$2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      /* @__PURE__ */ React.createElement(TransitionGroupContext.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
    );
  };
  return Transition2;
}(React.Component);
Transition.contextType = TransitionGroupContext;
Transition.propTypes = {};
function noop() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
const Transition$1 = Transition;
var _addClass = function addClass$1(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c7) {
    return addClass(node, c7);
  });
};
var removeClass = function removeClass2(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c7) {
    return removeClass$1(node, c7);
  });
};
var CSSTransition = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(CSSTransition2, _React$Component);
  function CSSTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };
    _this.onEnter = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
      _this.removeClasses(node, "exit");
      _this.addClass(node, appearing ? "appear" : "enter", "base");
      if (_this.props.onEnter) {
        _this.props.onEnter(maybeNode, maybeAppearing);
      }
    };
    _this.onEntering = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
      var type = appearing ? "appear" : "enter";
      _this.addClass(node, type, "active");
      if (_this.props.onEntering) {
        _this.props.onEntering(maybeNode, maybeAppearing);
      }
    };
    _this.onEntered = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
      var type = appearing ? "appear" : "enter";
      _this.removeClasses(node, type);
      _this.addClass(node, type, "done");
      if (_this.props.onEntered) {
        _this.props.onEntered(maybeNode, maybeAppearing);
      }
    };
    _this.onExit = function(maybeNode) {
      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
      _this.removeClasses(node, "appear");
      _this.removeClasses(node, "enter");
      _this.addClass(node, "exit", "base");
      if (_this.props.onExit) {
        _this.props.onExit(maybeNode);
      }
    };
    _this.onExiting = function(maybeNode) {
      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
      _this.addClass(node, "exit", "active");
      if (_this.props.onExiting) {
        _this.props.onExiting(maybeNode);
      }
    };
    _this.onExited = function(maybeNode) {
      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
      _this.removeClasses(node, "exit");
      _this.addClass(node, "exit", "done");
      if (_this.props.onExited) {
        _this.props.onExited(maybeNode);
      }
    };
    _this.resolveArguments = function(maybeNode, maybeAppearing) {
      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
    };
    _this.getClassNames = function(type) {
      var classNames = _this.props.classNames;
      var isStringClassNames = typeof classNames === "string";
      var prefix2 = isStringClassNames && classNames ? classNames + "-" : "";
      var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames[type];
      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
      return {
        baseClassName,
        activeClassName,
        doneClassName
      };
    };
    return _this;
  }
  var _proto = CSSTransition2.prototype;
  _proto.addClass = function addClass2(node, type, phase) {
    var className = this.getClassNames(type)[phase + "ClassName"];
    var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
    if (type === "appear" && phase === "done" && doneClassName) {
      className += " " + doneClassName;
    }
    if (phase === "active") {
      if (node)
        forceReflow(node);
    }
    if (className) {
      this.appliedClasses[type][phase] = className;
      _addClass(node, className);
    }
  };
  _proto.removeClasses = function removeClasses(node, type) {
    var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
    this.appliedClasses[type] = {};
    if (baseClassName) {
      removeClass(node, baseClassName);
    }
    if (activeClassName) {
      removeClass(node, activeClassName);
    }
    if (doneClassName) {
      removeClass(node, doneClassName);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props;
    _this$props.classNames;
    var props = _objectWithoutPropertiesLoose$2(_this$props, ["classNames"]);
    return /* @__PURE__ */ React.createElement(Transition$1, _extends$1({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };
  return CSSTransition2;
}(React.Component);
CSSTransition.defaultProps = {
  classNames: ""
};
CSSTransition.propTypes = {};
const CSSTransition$1 = CSSTransition;
const slideEnter = "_slideEnter_crqpp_1";
const slideEnterActive = "_slideEnterActive_crqpp_4";
const slideExit = "_slideExit_crqpp_9";
const slideExitActive = "_slideExitActive_crqpp_12";
const styles$a = {
  slideEnter,
  slideEnterActive,
  slideExit,
  slideExitActive
};
const SlideScreen = ({ display, children }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    CSSTransition$1,
    {
      in: display,
      unmountOnExit: true,
      timeout: 500,
      classNames: {
        enter: styles$a.slideEnter,
        enterDone: styles$a.slideEnterActive,
        exit: styles$a.slideExit,
        exitActive: styles$a.slideExitActive
      },
      children
    }
  );
};
const useCanUseTitleBar = () => {
  const openTitleBar = () => {
    var _a;
    if ((_a = window.navigator.userAgent) == null ? void 0 : _a.includes("Minima Browser")) {
      Android.showTitleBar();
    }
  };
  return openTitleBar;
};
function AppIsInReadMode() {
  const { appIsInWriteMode } = reactExports.useContext(appContext);
  const display = appIsInWriteMode === false;
  const openTitleBar = useCanUseTitleBar();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(SlideScreen, { display, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$b["backdrop"] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$b["grid"], children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", {}),
      /* @__PURE__ */ jsxRuntimeExports.jsx("main", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$b["dialog"], children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { onClick: openTitleBar, className: "flex flex-col justify-center items-center text-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "img",
              {
                className: "mb-4",
                alt: "download",
                src: "./assets/read.svg"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-2xl mb-8", children: [
              "App is in ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              " read mode"
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Please ensure you set the Security minidapp in write mode then reload this page." })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${styles$b.primaryActions}` }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: `${styles$b.desktop_only} ${styles$b.secondaryActions}`,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: (e3) => {
                  e3.stopPropagation();
                  window.location.reload();
                }, children: "Reload" })
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: `${styles$b.mobile_only} ${styles$b.secondaryActions}`,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: (e3) => {
                  e3.stopPropagation();
                  window.location.reload();
                },
                children: "Reload"
              }
            )
          }
        )
      ] }) })
    ] })
  ] }) });
}
const grid$1 = "_grid_ixvli_1";
const backdrop$1 = "_backdrop_ixvli_19";
const full$1 = "_full_ixvli_68";
const dialog$3 = "_dialog_ixvli_71";
const button__wrapper$3 = "_button__wrapper_ixvli_94";
const primaryActions$3 = "_primaryActions_ixvli_98";
const secondaryActions$3 = "_secondaryActions_ixvli_119";
const desktop_only$3 = "_desktop_only_ixvli_138";
const mobile_only$3 = "_mobile_only_ixvli_141";
const styles$9 = {
  grid: grid$1,
  backdrop: backdrop$1,
  full: full$1,
  dialog: dialog$3,
  button__wrapper: button__wrapper$3,
  primaryActions: primaryActions$3,
  secondaryActions: secondaryActions$3,
  desktop_only: desktop_only$3,
  mobile_only: mobile_only$3
};
const useIsMinimaBrowser = () => {
  const [isMinimaBrowser, setMinimaBrowser] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (window.navigator.userAgent.includes("Minima Browser")) {
      setMinimaBrowser(true);
    }
  }, []);
  return isMinimaBrowser;
};
function MinidappSystemFailed() {
  const { minidappSystemFailed } = reactExports.useContext(appContext);
  const isMinimaBrowser = useIsMinimaBrowser();
  const display = minidappSystemFailed === true;
  return display && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$9["backdrop"] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$9["grid"], children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("header", {}),
      /* @__PURE__ */ jsxRuntimeExports.jsx("main", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$9["dialog"], children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                width: "116",
                height: "116",
                viewBox: "0 0 512 512",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M315.717 217.542L328.832 159.576L387.722 183.267L371.138 256.529C365.845 257.805 360.974 261.126 357.875 266.494L306.544 355.402H284.569L267.797 285.338L252.034 355.402H187.722L173.724 273.24L155.187 355.402H91L151.53 88L210.294 111.691L224.292 193.852L240.181 123.788L298.945 147.605L315.717 217.542Z",
                      fill: "white"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M368.012 270.337L348.756 355.402H318.74L367.022 271.775C367.32 271.258 367.652 270.778 368.012 270.337Z",
                      fill: "white"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      fillRule: "evenodd",
                      clipRule: "evenodd",
                      d: "M385.315 271.775C381.25 264.734 371.087 264.734 367.022 271.775L306.653 376.337C302.588 383.378 307.669 392.18 315.8 392.18H436.537C444.668 392.18 449.749 383.378 445.684 376.337L385.315 271.775ZM371.809 371.083C373.168 372.442 374.801 373.121 376.709 373.121C378.617 373.121 380.251 372.442 381.61 371.083C382.968 369.724 383.648 368.091 383.648 366.183C383.648 364.275 382.968 362.641 381.61 361.282C380.251 359.924 378.617 359.244 376.709 359.244C374.801 359.244 373.168 359.924 371.809 361.282C370.45 362.641 369.771 364.275 369.771 366.183C369.771 368.091 370.45 369.724 371.809 371.083ZM369.771 310.675V352.306H383.648V310.675H369.771Z",
                      fill: "white"
                    }
                  )
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8", children: "Minidapp System is offline" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center", children: "Try to re-login into your hub and re-open this app." })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-3", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${styles$9.primaryActions}` }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: `${styles$9.desktop_only} ${styles$9.secondaryActions}`,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => {
                      return window.close();
                    },
                    children: "Close Window"
                  }
                )
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: `${styles$9.mobile_only} ${styles$9.secondaryActions}`,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: () => {
                  if (isMinimaBrowser) {
                    return Android.closeWindow();
                  }
                  return window.close();
                },
                children: "Close Window"
              }
            )
          }
        )
      ] }) })
    ] })
  ] });
}
const BackButton = ({ title, to: to2, extraClass, onClickHandler }) => {
  const navigate = useNavigate();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      onClick: (e3) => {
        e3.stopPropagation();
        to2 ? navigate(to2) : onClickHandler ? onClickHandler() : null;
      },
      className: `flex cursor-pointer items-center`,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            width: "8",
            height: "14",
            viewBox: "0 0 8 14",
            fill: "none",
            xmlns: "http://www.w3.org/2000/svg",
            className: `${extraClass} mr-2`,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "path",
              {
                d: "M6.90017 13.1693L0.730957 7.00009L6.90017 0.830872L7.79631 1.72701L2.52324 7.00009L7.79631 12.2732L6.90017 13.1693Z",
                fill: "#F9F9FA"
              }
            )
          }
        ),
        title
      ]
    }
  );
};
const Dialog$1 = ({ children, dismiss, extraClass }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `fixed left-0 right-0 bottom-0 top-0 grid grid-cols-[1fr_minmax(0,_560px)_1fr] ${extraClass ? extraClass : ""}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        onClick: dismiss,
        id: "backdrop",
        className: "backdrop-blur-sm fixed left-0 right-0 top-0 bottom-0"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { onClick: dismiss, className: "relative z-[21] h-max", children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
  ] });
};
const AnimatedDialog = ({
  isOpen,
  onClose,
  extraClass,
  position: position2,
  children,
  dialogStyles
}) => {
  const springProps = useSpring({
    opacity: isOpen ? 1 : 0,
    transform: isOpen ? "translateY(0%) scale(1)" : "translateY(-50%) scale(0.8)",
    config: config$1.gentle
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: isOpen && reactDomExports.createPortal(
    /* @__PURE__ */ jsxRuntimeExports.jsx(Dialog$1, { extraClass, dismiss: onClose, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `h-screen grid ${position2}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(animated.div, { style: springProps, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        onClick: (e3) => e3.stopPropagation(),
        className: `bg-white shadow-lg shadow-slate-300 dark:shadow-none dark:bg-black w-[calc(100%_-_16px)] md:w-full p-4 px-0 rounded mx-auto ${dialogStyles}`,
        children
      }
    ) }) }) }),
    document.body
  ) });
};
const RefreshIcon = ({ fill, extraClass }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    className: `icon icon-tabler icon-tabler-heart-filled ${extraClass && extraClass}`,
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    strokeWidth: "2.5",
    stroke: fill,
    fill: "none",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4" })
    ]
  }
);
const DoneIcon = ({ fill }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    className: "icon icon-tabler icon-tabler-heart-filled",
    width: "24",
    height: "22",
    viewBox: "0 0 24 24",
    strokeWidth: "2.5",
    stroke: fill,
    fill: "none",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 12l2 2l4 -4" })
    ]
  }
);
const FileUpload = () => {
  const { _promptFileUpload } = reactExports.useContext(appContext);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    AnimatedDialog,
    {
      isOpen: typeof _promptFileUpload === "object",
      onClose: () => null,
      position: "items-start mt-20",
      extraClass: "max-w-sm mx-auto",
      dialogStyles: "h-max rounded-lg !shadow-teal-800 !shadow-sm overflow-hidden bg-black",
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] px-3", children: [
        _promptFileUpload && _promptFileUpload.status === null && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            "File upload in progress... ",
            _promptFileUpload.progress,
            "/100"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(RefreshIcon, { fill: "currentColor", extraClass: "animate-spin" }) })
        ] }),
        _promptFileUpload && _promptFileUpload.status === true && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "File upload completed!" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-teal-300", children: /* @__PURE__ */ jsxRuntimeExports.jsx(DoneIcon, { fill: "currentColor" }) })
        ] }),
        _promptFileUpload && _promptFileUpload.status === false && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "File upload failed..." }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm", children: _promptFileUpload.error })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", {})
        ] })
      ] })
    }
  ) });
};
const Brand = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[auto_1fr] px-3", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "my-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "img",
      {
        className: "w-[32px]",
        alt: "security-icon",
        src: "./assets/security.svg"
      }
    ) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-bold ml-2 my-auto", children: "Security" })
  ] });
};
const Dashboard = () => {
  const { displayBackButton, backButton } = reactExports.useContext(appContext);
  const openTitleBar = useCanUseTitleBar();
  const DISPLAY_BACK_BUTTON = displayBackButton && displayBackButton.display;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(AppIsInReadMode, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(MinidappSystemFailed, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(FileUpload, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-rows-[56px_1fr] h-[100vh]", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "header",
        {
          onClick: openTitleBar,
          className: "grid grid-cols-[1fr_minmax(0,_860px)_1fr]",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "py-3", children: [
              DISPLAY_BACK_BUTTON && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center px-6 py-3 gap-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                BackButton,
                {
                  to: backButton.to,
                  onClickHandler: backButton.onClickHandler,
                  title: backButton.title
                }
              ) }),
              !DISPLAY_BACK_BUTTON && /* @__PURE__ */ jsxRuntimeExports.jsx(Brand, {})
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("main", { className: "grid grid-cols-[1fr_minmax(0,_560px)_1fr]", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
      ] })
    ] })
  ] });
};
const Button = ({
  variant = "primary",
  onClick = null,
  onContextMenu = null,
  children,
  disabled,
  type = "button",
  extraClass,
  onMouseDown,
  onTouchStart,
  onMouseUp,
  onMouseLeave,
  onTouchEnd
}) => {
  let base = "w-full px-4 py-3.5 rounded font-bold disabled:cursor-not-allowed focus:outline-none hover:border-color-transparent hover:outline-none text-black";
  if (extraClass && extraClass.length) {
    base += ` ${extraClass ? extraClass + "" : ""}`;
  }
  if (variant === "primary") {
    base += " text-black bg-white";
  } else if (variant === "secondary") {
    base += " text-white core-black-contrast-3";
  } else if (variant === "tertiary") {
    base += " text-white core-black-contrast-2";
  }
  if (disabled) {
    base += " core-black-contrast text-disabled";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "button",
    {
      onMouseUp,
      onMouseDown,
      onTouchStart,
      onMouseLeave,
      onTouchEnd,
      onContextMenu,
      type,
      disabled,
      className: base,
      onClick,
      children
    }
  );
};
const Input = ({
  accept,
  onChange,
  onBlur,
  placeholder,
  autoComplete,
  type,
  name: name2,
  id: id2,
  extraClass,
  value: value2,
  endIcon,
  startIcon,
  error,
  handleEndIconClick,
  onKeyUp,
  onKeyPress,
  disabled,
  mt,
  mb: mb2
}) => {
  let wrapperBase = `${mt} ${mb2} relative ${startIcon ? "grid grid-cols-[1fr_auto] grid-rows-1" : "flex"}`;
  let base = "core-black-contrast-2 w-full px-4 py-3.5 rounded disabled:opacity-40 disabled:cursor-not-allowed focus:outline-none focus:border-[#fff] border-[#fff] focus:border-[#464C4F]";
  if (extraClass) {
    base += ` ${extraClass}`;
  }
  if (error) {
    wrapperBase += " form-error-border";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `flex flex-col gap-2`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${wrapperBase}`, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          disabled,
          onKeyDown: onKeyPress,
          autoComplete: autoComplete ? autoComplete : "off",
          onBlur,
          name: name2,
          id: id2,
          value: value2,
          type,
          placeholder,
          className: `${base} ${startIcon ? "pl-10" : ""} ${endIcon ? "pr-12" : ""}`,
          onChange,
          accept,
          onKeyUp
        }
      ),
      startIcon,
      !!endIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          onClick: disabled ? void 0 : handleEndIconClick,
          className: "pr-4 my-auto absolute right-[1px] top-4 bottom-0",
          children: endIcon
        }
      )
    ] }),
    error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left", children: error })
  ] });
};
const UnderstandRadio = ({
  children,
  defaultValue: defaultValue2 = false,
  onChange,
  id: id2,
  name: name2
}) => {
  const base = "core-black-contrast w-full px-4 py-3.5 rounded text-sm flex flex-row justify-items-center align-center gap-3 text-left understand-label core-grey-100 items-center";
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: base, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "input",
      {
        defaultChecked: defaultValue2,
        onClick: onChange,
        id: id2,
        name: name2,
        type: "checkbox"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: "understand", children })
  ] });
};
var isArray$2 = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
var hasElementType = typeof Element !== "undefined";
function equal(a3, b3) {
  if (a3 === b3)
    return true;
  if (a3 && b3 && typeof a3 == "object" && typeof b3 == "object") {
    var arrA = isArray$2(a3), arrB = isArray$2(b3), i2, length2, key2;
    if (arrA && arrB) {
      length2 = a3.length;
      if (length2 != b3.length)
        return false;
      for (i2 = length2; i2-- !== 0; )
        if (!equal(a3[i2], b3[i2]))
          return false;
      return true;
    }
    if (arrA != arrB)
      return false;
    var dateA = a3 instanceof Date, dateB = b3 instanceof Date;
    if (dateA != dateB)
      return false;
    if (dateA && dateB)
      return a3.getTime() == b3.getTime();
    var regexpA = a3 instanceof RegExp, regexpB = b3 instanceof RegExp;
    if (regexpA != regexpB)
      return false;
    if (regexpA && regexpB)
      return a3.toString() == b3.toString();
    var keys2 = keyList(a3);
    length2 = keys2.length;
    if (length2 !== keyList(b3).length)
      return false;
    for (i2 = length2; i2-- !== 0; )
      if (!hasProp.call(b3, keys2[i2]))
        return false;
    if (hasElementType && a3 instanceof Element && b3 instanceof Element)
      return a3 === b3;
    for (i2 = length2; i2-- !== 0; ) {
      key2 = keys2[i2];
      if (key2 === "_owner" && a3.$$typeof) {
        continue;
      } else {
        if (!equal(a3[key2], b3[key2]))
          return false;
      }
    }
    return true;
  }
  return a3 !== a3 && b3 !== b3;
}
var reactFastCompare = function exportedEqual(a3, b3) {
  try {
    return equal(a3, b3);
  } catch (error) {
    if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
      console.warn("Warning: react-fast-compare does not handle circular references.", error.name, error.message);
      return false;
    }
    throw error;
  }
};
const isEqual = /* @__PURE__ */ getDefaultExportFromCjs(reactFastCompare);
var isMergeableObject = function isMergeableObject2(value2) {
  return isNonNullObject(value2) && !isSpecial(value2);
};
function isNonNullObject(value2) {
  return !!value2 && typeof value2 === "object";
}
function isSpecial(value2) {
  var stringValue = Object.prototype.toString.call(value2);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value2);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value2) {
  return value2.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val2) {
  return Array.isArray(val2) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value2, options) {
  return options.clone !== false && options.isMergeableObject(value2) ? deepmerge(emptyTarget(value2), value2, options) : value2;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function mergeObject(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    Object.keys(target).forEach(function(key2) {
      destination[key2] = cloneUnlessOtherwiseSpecified(target[key2], options);
    });
  }
  Object.keys(source).forEach(function(key2) {
    if (!options.isMergeableObject(source[key2]) || !target[key2]) {
      destination[key2] = cloneUnlessOtherwiseSpecified(source[key2], options);
    } else {
      destination[key2] = deepmerge(target[key2], source[key2], options);
    }
  });
  return destination;
}
function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
deepmerge.all = function deepmergeAll(array2, options) {
  if (!Array.isArray(array2)) {
    throw new Error("first argument should be an array");
  }
  return array2.reduce(function(prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};
var deepmerge_1 = deepmerge;
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
const freeGlobal$1 = freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal$1 || freeSelf || Function("return this")();
const root$1 = root;
var Symbol$1 = root$1.Symbol;
const Symbol$2 = Symbol$1;
var objectProto$d = Object.prototype;
var hasOwnProperty$a = objectProto$d.hasOwnProperty;
var nativeObjectToString$1 = objectProto$d.toString;
var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;
function getRawTag(value2) {
  var isOwn = hasOwnProperty$a.call(value2, symToStringTag$1), tag = value2[symToStringTag$1];
  try {
    value2[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e3) {
  }
  var result = nativeObjectToString$1.call(value2);
  if (unmasked) {
    if (isOwn) {
      value2[symToStringTag$1] = tag;
    } else {
      delete value2[symToStringTag$1];
    }
  }
  return result;
}
var objectProto$c = Object.prototype;
var nativeObjectToString = objectProto$c.toString;
function objectToString(value2) {
  return nativeObjectToString.call(value2);
}
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : void 0;
function baseGetTag(value2) {
  if (value2 == null) {
    return value2 === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
}
function overArg(func, transform2) {
  return function(arg) {
    return func(transform2(arg));
  };
}
var getPrototype = overArg(Object.getPrototypeOf, Object);
const getPrototype$1 = getPrototype;
function isObjectLike(value2) {
  return value2 != null && typeof value2 == "object";
}
var objectTag$3 = "[object Object]";
var funcProto$2 = Function.prototype, objectProto$b = Object.prototype;
var funcToString$2 = funcProto$2.toString;
var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
var objectCtorString = funcToString$2.call(Object);
function isPlainObject(value2) {
  if (!isObjectLike(value2) || baseGetTag(value2) != objectTag$3) {
    return false;
  }
  var proto = getPrototype$1(value2);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$9.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString$2.call(Ctor) == objectCtorString;
}
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
function eq(value2, other) {
  return value2 === other || value2 !== value2 && other !== other;
}
function assocIndexOf(array2, key2) {
  var length2 = array2.length;
  while (length2--) {
    if (eq(array2[length2][0], key2)) {
      return length2;
    }
  }
  return -1;
}
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key2) {
  var data2 = this.__data__, index2 = assocIndexOf(data2, key2);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data2.length - 1;
  if (index2 == lastIndex) {
    data2.pop();
  } else {
    splice.call(data2, index2, 1);
  }
  --this.size;
  return true;
}
function listCacheGet(key2) {
  var data2 = this.__data__, index2 = assocIndexOf(data2, key2);
  return index2 < 0 ? void 0 : data2[index2][1];
}
function listCacheHas(key2) {
  return assocIndexOf(this.__data__, key2) > -1;
}
function listCacheSet(key2, value2) {
  var data2 = this.__data__, index2 = assocIndexOf(data2, key2);
  if (index2 < 0) {
    ++this.size;
    data2.push([key2, value2]);
  } else {
    data2[index2][1] = value2;
  }
  return this;
}
function ListCache(entries) {
  var index2 = -1, length2 = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length2) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear;
ListCache.prototype["delete"] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}
function stackDelete(key2) {
  var data2 = this.__data__, result = data2["delete"](key2);
  this.size = data2.size;
  return result;
}
function stackGet(key2) {
  return this.__data__.get(key2);
}
function stackHas(key2) {
  return this.__data__.has(key2);
}
function isObject$2(value2) {
  var type = typeof value2;
  return value2 != null && (type == "object" || type == "function");
}
var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction$1(value2) {
  if (!isObject$2(value2)) {
    return false;
  }
  var tag = baseGetTag(value2);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}
var coreJsData = root$1["__core-js_shared__"];
const coreJsData$1 = coreJsData;
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var funcProto$1 = Function.prototype;
var funcToString$1 = funcProto$1.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e3) {
    }
    try {
      return func + "";
    } catch (e3) {
    }
  }
  return "";
}
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto = Function.prototype, objectProto$a = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString.call(hasOwnProperty$8).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative(value2) {
  if (!isObject$2(value2) || isMasked(value2)) {
    return false;
  }
  var pattern = isFunction$1(value2) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value2));
}
function getValue(object2, key2) {
  return object2 == null ? void 0 : object2[key2];
}
function getNative(object2, key2) {
  var value2 = getValue(object2, key2);
  return baseIsNative(value2) ? value2 : void 0;
}
var Map$1 = getNative(root$1, "Map");
const Map$2 = Map$1;
var nativeCreate = getNative(Object, "create");
const nativeCreate$1 = nativeCreate;
function hashClear() {
  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
  this.size = 0;
}
function hashDelete(key2) {
  var result = this.has(key2) && delete this.__data__[key2];
  this.size -= result ? 1 : 0;
  return result;
}
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
var objectProto$9 = Object.prototype;
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
function hashGet(key2) {
  var data2 = this.__data__;
  if (nativeCreate$1) {
    var result = data2[key2];
    return result === HASH_UNDEFINED$1 ? void 0 : result;
  }
  return hasOwnProperty$7.call(data2, key2) ? data2[key2] : void 0;
}
var objectProto$8 = Object.prototype;
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
function hashHas(key2) {
  var data2 = this.__data__;
  return nativeCreate$1 ? data2[key2] !== void 0 : hasOwnProperty$6.call(data2, key2);
}
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function hashSet(key2, value2) {
  var data2 = this.__data__;
  this.size += this.has(key2) ? 0 : 1;
  data2[key2] = nativeCreate$1 && value2 === void 0 ? HASH_UNDEFINED : value2;
  return this;
}
function Hash(entries) {
  var index2 = -1, length2 = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length2) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear;
Hash.prototype["delete"] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$2 || ListCache)(),
    "string": new Hash()
  };
}
function isKeyable(value2) {
  var type = typeof value2;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
}
function getMapData(map, key2) {
  var data2 = map.__data__;
  return isKeyable(key2) ? data2[typeof key2 == "string" ? "string" : "hash"] : data2.map;
}
function mapCacheDelete(key2) {
  var result = getMapData(this, key2)["delete"](key2);
  this.size -= result ? 1 : 0;
  return result;
}
function mapCacheGet(key2) {
  return getMapData(this, key2).get(key2);
}
function mapCacheHas(key2) {
  return getMapData(this, key2).has(key2);
}
function mapCacheSet(key2, value2) {
  var data2 = getMapData(this, key2), size = data2.size;
  data2.set(key2, value2);
  this.size += data2.size == size ? 0 : 1;
  return this;
}
function MapCache(entries) {
  var index2 = -1, length2 = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length2) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype["delete"] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
var LARGE_ARRAY_SIZE = 200;
function stackSet(key2, value2) {
  var data2 = this.__data__;
  if (data2 instanceof ListCache) {
    var pairs = data2.__data__;
    if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key2, value2]);
      this.size = ++data2.size;
      return this;
    }
    data2 = this.__data__ = new MapCache(pairs);
  }
  data2.set(key2, value2);
  this.size = data2.size;
  return this;
}
function Stack(entries) {
  var data2 = this.__data__ = new ListCache(entries);
  this.size = data2.size;
}
Stack.prototype.clear = stackClear;
Stack.prototype["delete"] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
function arrayEach(array2, iteratee) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length;
  while (++index2 < length2) {
    if (iteratee(array2[index2], index2, array2) === false) {
      break;
    }
  }
  return array2;
}
var defineProperty = function() {
  try {
    var func = getNative(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e3) {
  }
}();
const defineProperty$1 = defineProperty;
function baseAssignValue(object2, key2, value2) {
  if (key2 == "__proto__" && defineProperty$1) {
    defineProperty$1(object2, key2, {
      "configurable": true,
      "enumerable": true,
      "value": value2,
      "writable": true
    });
  } else {
    object2[key2] = value2;
  }
}
var objectProto$7 = Object.prototype;
var hasOwnProperty$5 = objectProto$7.hasOwnProperty;
function assignValue(object2, key2, value2) {
  var objValue = object2[key2];
  if (!(hasOwnProperty$5.call(object2, key2) && eq(objValue, value2)) || value2 === void 0 && !(key2 in object2)) {
    baseAssignValue(object2, key2, value2);
  }
}
function copyObject(source, props, object2, customizer) {
  var isNew = !object2;
  object2 || (object2 = {});
  var index2 = -1, length2 = props.length;
  while (++index2 < length2) {
    var key2 = props[index2];
    var newValue = customizer ? customizer(object2[key2], source[key2], key2, object2, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key2];
    }
    if (isNew) {
      baseAssignValue(object2, key2, newValue);
    } else {
      assignValue(object2, key2, newValue);
    }
  }
  return object2;
}
function baseTimes(n2, iteratee) {
  var index2 = -1, result = Array(n2);
  while (++index2 < n2) {
    result[index2] = iteratee(index2);
  }
  return result;
}
var argsTag$2 = "[object Arguments]";
function baseIsArguments(value2) {
  return isObjectLike(value2) && baseGetTag(value2) == argsTag$2;
}
var objectProto$6 = Object.prototype;
var hasOwnProperty$4 = objectProto$6.hasOwnProperty;
var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;
var isArguments = baseIsArguments(function() {
  return arguments;
}()) ? baseIsArguments : function(value2) {
  return isObjectLike(value2) && hasOwnProperty$4.call(value2, "callee") && !propertyIsEnumerable$1.call(value2, "callee");
};
const isArguments$1 = isArguments;
var isArray = Array.isArray;
const isArray$1 = isArray;
function stubFalse() {
  return false;
}
var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
var Buffer$1 = moduleExports$2 ? root$1.Buffer : void 0;
var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;
var isBuffer = nativeIsBuffer || stubFalse;
const isBuffer$1 = isBuffer;
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value2, length2) {
  var type = typeof value2;
  length2 = length2 == null ? MAX_SAFE_INTEGER$1 : length2;
  return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
}
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value2) {
  return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
}
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", errorTag$1 = "[object Error]", funcTag$1 = "[object Function]", mapTag$4 = "[object Map]", numberTag$2 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$2 = "[object RegExp]", setTag$4 = "[object Set]", stringTag$2 = "[object String]", weakMapTag$2 = "[object WeakMap]";
var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$3 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] = typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] = typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$2] = typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] = typedArrayTags[weakMapTag$2] = false;
function baseIsTypedArray(value2) {
  return isObjectLike(value2) && isLength(value2.length) && !!typedArrayTags[baseGetTag(value2)];
}
function baseUnary(func) {
  return function(value2) {
    return func(value2);
  };
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
var freeProcess = moduleExports$1 && freeGlobal$1.process;
var nodeUtil = function() {
  try {
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e3) {
  }
}();
const nodeUtil$1 = nodeUtil;
var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
const isTypedArray$1 = isTypedArray;
var objectProto$5 = Object.prototype;
var hasOwnProperty$3 = objectProto$5.hasOwnProperty;
function arrayLikeKeys(value2, inherited) {
  var isArr = isArray$1(value2), isArg = !isArr && isArguments$1(value2), isBuff = !isArr && !isArg && isBuffer$1(value2), isType = !isArr && !isArg && !isBuff && isTypedArray$1(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value2.length, String) : [], length2 = result.length;
  for (var key2 in value2) {
    if ((inherited || hasOwnProperty$3.call(value2, key2)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key2 == "offset" || key2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || // Skip index properties.
    isIndex(key2, length2)))) {
      result.push(key2);
    }
  }
  return result;
}
var objectProto$4 = Object.prototype;
function isPrototype(value2) {
  var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$4;
  return value2 === proto;
}
var nativeKeys = overArg(Object.keys, Object);
const nativeKeys$1 = nativeKeys;
var objectProto$3 = Object.prototype;
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
function baseKeys(object2) {
  if (!isPrototype(object2)) {
    return nativeKeys$1(object2);
  }
  var result = [];
  for (var key2 in Object(object2)) {
    if (hasOwnProperty$2.call(object2, key2) && key2 != "constructor") {
      result.push(key2);
    }
  }
  return result;
}
function isArrayLike(value2) {
  return value2 != null && isLength(value2.length) && !isFunction$1(value2);
}
function keys(object2) {
  return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
}
function baseAssign(object2, source) {
  return object2 && copyObject(source, keys(source), object2);
}
function nativeKeysIn(object2) {
  var result = [];
  if (object2 != null) {
    for (var key2 in Object(object2)) {
      result.push(key2);
    }
  }
  return result;
}
var objectProto$2 = Object.prototype;
var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
function baseKeysIn(object2) {
  if (!isObject$2(object2)) {
    return nativeKeysIn(object2);
  }
  var isProto = isPrototype(object2), result = [];
  for (var key2 in object2) {
    if (!(key2 == "constructor" && (isProto || !hasOwnProperty$1.call(object2, key2)))) {
      result.push(key2);
    }
  }
  return result;
}
function keysIn(object2) {
  return isArrayLike(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
}
function baseAssignIn(object2, source) {
  return object2 && copyObject(source, keysIn(source), object2);
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer = moduleExports ? root$1.Buffer : void 0, allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
  buffer.copy(result);
  return result;
}
function copyArray(source, array2) {
  var index2 = -1, length2 = source.length;
  array2 || (array2 = Array(length2));
  while (++index2 < length2) {
    array2[index2] = source[index2];
  }
  return array2;
}
function arrayFilter(array2, predicate) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
  while (++index2 < length2) {
    var value2 = array2[index2];
    if (predicate(value2, index2, array2)) {
      result[resIndex++] = value2;
    }
  }
  return result;
}
function stubArray() {
  return [];
}
var objectProto$1 = Object.prototype;
var propertyIsEnumerable = objectProto$1.propertyIsEnumerable;
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object2) {
  if (object2 == null) {
    return [];
  }
  object2 = Object(object2);
  return arrayFilter(nativeGetSymbols$1(object2), function(symbol) {
    return propertyIsEnumerable.call(object2, symbol);
  });
};
const getSymbols$1 = getSymbols;
function copySymbols(source, object2) {
  return copyObject(source, getSymbols$1(source), object2);
}
function arrayPush(array2, values) {
  var index2 = -1, length2 = values.length, offset = array2.length;
  while (++index2 < length2) {
    array2[offset + index2] = values[index2];
  }
  return array2;
}
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object2) {
  var result = [];
  while (object2) {
    arrayPush(result, getSymbols$1(object2));
    object2 = getPrototype$1(object2);
  }
  return result;
};
const getSymbolsIn$1 = getSymbolsIn;
function copySymbolsIn(source, object2) {
  return copyObject(source, getSymbolsIn$1(source), object2);
}
function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
  var result = keysFunc(object2);
  return isArray$1(object2) ? result : arrayPush(result, symbolsFunc(object2));
}
function getAllKeys(object2) {
  return baseGetAllKeys(object2, keys, getSymbols$1);
}
function getAllKeysIn(object2) {
  return baseGetAllKeys(object2, keysIn, getSymbolsIn$1);
}
var DataView = getNative(root$1, "DataView");
const DataView$1 = DataView;
var Promise$1 = getNative(root$1, "Promise");
const Promise$2 = Promise$1;
var Set$1 = getNative(root$1, "Set");
const Set$2 = Set$1;
var WeakMap$1 = getNative(root$1, "WeakMap");
const WeakMap$2 = WeakMap$1;
var mapTag$3 = "[object Map]", objectTag$1 = "[object Object]", promiseTag = "[object Promise]", setTag$3 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
var dataViewTag$2 = "[object DataView]";
var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$2), promiseCtorString = toSource(Promise$2), setCtorString = toSource(Set$2), weakMapCtorString = toSource(WeakMap$2);
var getTag = baseGetTag;
if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$2 || Map$2 && getTag(new Map$2()) != mapTag$3 || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$2 && getTag(new Set$2()) != setTag$3 || WeakMap$2 && getTag(new WeakMap$2()) != weakMapTag$1) {
  getTag = function(value2) {
    var result = baseGetTag(value2), Ctor = result == objectTag$1 ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag$2;
        case mapCtorString:
          return mapTag$3;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag$3;
        case weakMapCtorString:
          return weakMapTag$1;
      }
    }
    return result;
  };
}
const getTag$1 = getTag;
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function initCloneArray(array2) {
  var length2 = array2.length, result = new array2.constructor(length2);
  if (length2 && typeof array2[0] == "string" && hasOwnProperty.call(array2, "index")) {
    result.index = array2.index;
    result.input = array2.input;
  }
  return result;
}
var Uint8Array$1 = root$1.Uint8Array;
const Uint8Array$2 = Uint8Array$1;
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
  return result;
}
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var reFlags = /\w*$/;
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag$2 = "[object Symbol]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
function initCloneByTag(object2, tag, isDeep) {
  var Ctor = object2.constructor;
  switch (tag) {
    case arrayBufferTag$1:
      return cloneArrayBuffer(object2);
    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object2);
    case dataViewTag$1:
      return cloneDataView(object2, isDeep);
    case float32Tag$1:
    case float64Tag$1:
    case int8Tag$1:
    case int16Tag$1:
    case int32Tag$1:
    case uint8Tag$1:
    case uint8ClampedTag$1:
    case uint16Tag$1:
    case uint32Tag$1:
      return cloneTypedArray(object2, isDeep);
    case mapTag$2:
      return new Ctor();
    case numberTag$1:
    case stringTag$1:
      return new Ctor(object2);
    case regexpTag$1:
      return cloneRegExp(object2);
    case setTag$2:
      return new Ctor();
    case symbolTag$2:
      return cloneSymbol(object2);
  }
}
var objectCreate = Object.create;
var baseCreate = function() {
  function object2() {
  }
  return function(proto) {
    if (!isObject$2(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object2.prototype = proto;
    var result = new object2();
    object2.prototype = void 0;
    return result;
  };
}();
const baseCreate$1 = baseCreate;
function initCloneObject(object2) {
  return typeof object2.constructor == "function" && !isPrototype(object2) ? baseCreate$1(getPrototype$1(object2)) : {};
}
var mapTag$1 = "[object Map]";
function baseIsMap(value2) {
  return isObjectLike(value2) && getTag$1(value2) == mapTag$1;
}
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
const isMap$1 = isMap;
var setTag$1 = "[object Set]";
function baseIsSet(value2) {
  return isObjectLike(value2) && getTag$1(value2) == setTag$1;
}
var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
const isSet$1 = isSet;
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag$1 = "[object Symbol]", weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
function baseClone(value2, bitmask, customizer, key2, object2, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
  if (customizer) {
    result = object2 ? customizer(value2, key2, object2, stack) : customizer(value2);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject$2(value2)) {
    return value2;
  }
  var isArr = isArray$1(value2);
  if (isArr) {
    result = initCloneArray(value2);
    if (!isDeep) {
      return copyArray(value2, result);
    }
  } else {
    var tag = getTag$1(value2), isFunc = tag == funcTag || tag == genTag;
    if (isBuffer$1(value2)) {
      return cloneBuffer(value2, isDeep);
    }
    if (tag == objectTag || tag == argsTag || isFunc && !object2) {
      result = isFlat || isFunc ? {} : initCloneObject(value2);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value2, baseAssignIn(result, value2)) : copySymbols(value2, baseAssign(result, value2));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object2 ? value2 : {};
      }
      result = initCloneByTag(value2, tag, isDeep);
    }
  }
  stack || (stack = new Stack());
  var stacked = stack.get(value2);
  if (stacked) {
    return stacked;
  }
  stack.set(value2, result);
  if (isSet$1(value2)) {
    value2.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value2, stack));
    });
  } else if (isMap$1(value2)) {
    value2.forEach(function(subValue, key3) {
      result.set(key3, baseClone(subValue, bitmask, customizer, key3, value2, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
  var props = isArr ? void 0 : keysFunc(value2);
  arrayEach(props || value2, function(subValue, key3) {
    if (props) {
      key3 = subValue;
      subValue = value2[key3];
    }
    assignValue(result, key3, baseClone(subValue, bitmask, customizer, key3, value2, stack));
  });
  return result;
}
var CLONE_SYMBOLS_FLAG = 4;
function clone$1(value2) {
  return baseClone(value2, CLONE_SYMBOLS_FLAG);
}
function arrayMap(array2, iteratee) {
  var index2 = -1, length2 = array2 == null ? 0 : array2.length, result = Array(length2);
  while (++index2 < length2) {
    result[index2] = iteratee(array2[index2], index2, array2);
  }
  return result;
}
var symbolTag = "[object Symbol]";
function isSymbol(value2) {
  return typeof value2 == "symbol" || isObjectLike(value2) && baseGetTag(value2) == symbolTag;
}
var FUNC_ERROR_TEXT = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key2)) {
      return cache.get(key2);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key2, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}
memoize.Cache = MapCache;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize(func, function(key2) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key2;
  });
  var cache = result.cache;
  return result;
}
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped(function(string2) {
  var result = [];
  if (string2.charCodeAt(0) === 46) {
    result.push("");
  }
  string2.replace(rePropName, function(match2, number2, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match2);
  });
  return result;
});
const stringToPath$1 = stringToPath;
var INFINITY$1 = 1 / 0;
function toKey(value2) {
  if (typeof value2 == "string" || isSymbol(value2)) {
    return value2;
  }
  var result = value2 + "";
  return result == "0" && 1 / value2 == -INFINITY$1 ? "-0" : result;
}
var INFINITY = 1 / 0;
var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0, symbolToString$1 = symbolProto ? symbolProto.toString : void 0;
function baseToString(value2) {
  if (typeof value2 == "string") {
    return value2;
  }
  if (isArray$1(value2)) {
    return arrayMap(value2, baseToString) + "";
  }
  if (isSymbol(value2)) {
    return symbolToString$1 ? symbolToString$1.call(value2) : "";
  }
  var result = value2 + "";
  return result == "0" && 1 / value2 == -INFINITY ? "-0" : result;
}
function toString$1(value2) {
  return value2 == null ? "" : baseToString(value2);
}
function toPath(value2) {
  if (isArray$1(value2)) {
    return arrayMap(value2, toKey);
  }
  return isSymbol(value2) ? [value2] : copyArray(stringToPath$1(toString$1(value2)));
}
var isProduction = true;
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }
    var text2 = "Warning: " + message;
    if (typeof console !== "undefined") {
      console.warn(text2);
    }
    try {
      throw Error(text2);
    } catch (x3) {
    }
  }
}
var reactIs$1 = { exports: {} };
var reactIs_production_min = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h$1 = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v$1 = b ? Symbol.for("react.block") : 60121, w$1 = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y = b ? Symbol.for("react.scope") : 60119;
function z(a3) {
  if ("object" === typeof a3 && null !== a3) {
    var u3 = a3.$$typeof;
    switch (u3) {
      case c:
        switch (a3 = a3.type, a3) {
          case l:
          case m:
          case e:
          case g:
          case f:
          case p:
            return a3;
          default:
            switch (a3 = a3 && a3.$$typeof, a3) {
              case k:
              case n:
              case t:
              case r:
              case h$1:
                return a3;
              default:
                return u3;
            }
        }
      case d:
        return u3;
    }
  }
}
function A(a3) {
  return z(a3) === m;
}
reactIs_production_min.AsyncMode = l;
reactIs_production_min.ConcurrentMode = m;
reactIs_production_min.ContextConsumer = k;
reactIs_production_min.ContextProvider = h$1;
reactIs_production_min.Element = c;
reactIs_production_min.ForwardRef = n;
reactIs_production_min.Fragment = e;
reactIs_production_min.Lazy = t;
reactIs_production_min.Memo = r;
reactIs_production_min.Portal = d;
reactIs_production_min.Profiler = g;
reactIs_production_min.StrictMode = f;
reactIs_production_min.Suspense = p;
reactIs_production_min.isAsyncMode = function(a3) {
  return A(a3) || z(a3) === l;
};
reactIs_production_min.isConcurrentMode = A;
reactIs_production_min.isContextConsumer = function(a3) {
  return z(a3) === k;
};
reactIs_production_min.isContextProvider = function(a3) {
  return z(a3) === h$1;
};
reactIs_production_min.isElement = function(a3) {
  return "object" === typeof a3 && null !== a3 && a3.$$typeof === c;
};
reactIs_production_min.isForwardRef = function(a3) {
  return z(a3) === n;
};
reactIs_production_min.isFragment = function(a3) {
  return z(a3) === e;
};
reactIs_production_min.isLazy = function(a3) {
  return z(a3) === t;
};
reactIs_production_min.isMemo = function(a3) {
  return z(a3) === r;
};
reactIs_production_min.isPortal = function(a3) {
  return z(a3) === d;
};
reactIs_production_min.isProfiler = function(a3) {
  return z(a3) === g;
};
reactIs_production_min.isStrictMode = function(a3) {
  return z(a3) === f;
};
reactIs_production_min.isSuspense = function(a3) {
  return z(a3) === p;
};
reactIs_production_min.isValidElementType = function(a3) {
  return "string" === typeof a3 || "function" === typeof a3 || a3 === e || a3 === m || a3 === g || a3 === f || a3 === p || a3 === q || "object" === typeof a3 && null !== a3 && (a3.$$typeof === t || a3.$$typeof === r || a3.$$typeof === h$1 || a3.$$typeof === k || a3.$$typeof === n || a3.$$typeof === w$1 || a3.$$typeof === x || a3.$$typeof === y || a3.$$typeof === v$1);
};
reactIs_production_min.typeOf = z;
{
  reactIs$1.exports = reactIs_production_min;
}
var reactIsExports = reactIs$1.exports;
var reactIs = reactIsExports;
var FORWARD_REF_STATICS = {
  "$$typeof": true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  "$$typeof": true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
var isFunction = function isFunction2(obj) {
  return typeof obj === "function";
};
var isObject$1 = function isObject2(obj) {
  return obj !== null && typeof obj === "object";
};
var isInteger = function isInteger2(obj) {
  return String(Math.floor(Number(obj))) === obj;
};
var isString = function isString2(obj) {
  return Object.prototype.toString.call(obj) === "[object String]";
};
var isEmptyChildren = function isEmptyChildren2(children) {
  return reactExports.Children.count(children) === 0;
};
var isPromise = function isPromise2(value2) {
  return isObject$1(value2) && isFunction(value2.then);
};
function getIn$1(obj, key2, def, p2) {
  if (p2 === void 0) {
    p2 = 0;
  }
  var path = toPath(key2);
  while (obj && p2 < path.length) {
    obj = obj[path[p2++]];
  }
  if (p2 !== path.length && !obj) {
    return def;
  }
  return obj === void 0 ? def : obj;
}
function setIn(obj, path, value2) {
  var res = clone$1(obj);
  var resVal = res;
  var i2 = 0;
  var pathArray = toPath(path);
  for (; i2 < pathArray.length - 1; i2++) {
    var currentPath = pathArray[i2];
    var currentObj = getIn$1(obj, pathArray.slice(0, i2 + 1));
    if (currentObj && (isObject$1(currentObj) || Array.isArray(currentObj))) {
      resVal = resVal[currentPath] = clone$1(currentObj);
    } else {
      var nextPath = pathArray[i2 + 1];
      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};
    }
  }
  if ((i2 === 0 ? obj : resVal)[pathArray[i2]] === value2) {
    return obj;
  }
  if (value2 === void 0) {
    delete resVal[pathArray[i2]];
  } else {
    resVal[pathArray[i2]] = value2;
  }
  if (i2 === 0 && value2 === void 0) {
    delete res[pathArray[i2]];
  }
  return res;
}
function setNestedObjectValues(object2, value2, visited, response) {
  if (visited === void 0) {
    visited = /* @__PURE__ */ new WeakMap();
  }
  if (response === void 0) {
    response = {};
  }
  for (var _i = 0, _Object$keys = Object.keys(object2); _i < _Object$keys.length; _i++) {
    var k3 = _Object$keys[_i];
    var val2 = object2[k3];
    if (isObject$1(val2)) {
      if (!visited.get(val2)) {
        visited.set(val2, true);
        response[k3] = Array.isArray(val2) ? [] : {};
        setNestedObjectValues(val2, value2, visited, response[k3]);
      }
    } else {
      response[k3] = value2;
    }
  }
  return response;
}
var FormikContext = /* @__PURE__ */ reactExports.createContext(void 0);
FormikContext.displayName = "FormikContext";
var FormikProvider = FormikContext.Provider;
FormikContext.Consumer;
function useFormikContext() {
  var formik = reactExports.useContext(FormikContext);
  !!!formik ? warning(false) : void 0;
  return formik;
}
function formikReducer(state, msg) {
  switch (msg.type) {
    case "SET_VALUES":
      return _extends({}, state, {
        values: msg.payload
      });
    case "SET_TOUCHED":
      return _extends({}, state, {
        touched: msg.payload
      });
    case "SET_ERRORS":
      if (isEqual(state.errors, msg.payload)) {
        return state;
      }
      return _extends({}, state, {
        errors: msg.payload
      });
    case "SET_STATUS":
      return _extends({}, state, {
        status: msg.payload
      });
    case "SET_ISSUBMITTING":
      return _extends({}, state, {
        isSubmitting: msg.payload
      });
    case "SET_ISVALIDATING":
      return _extends({}, state, {
        isValidating: msg.payload
      });
    case "SET_FIELD_VALUE":
      return _extends({}, state, {
        values: setIn(state.values, msg.payload.field, msg.payload.value)
      });
    case "SET_FIELD_TOUCHED":
      return _extends({}, state, {
        touched: setIn(state.touched, msg.payload.field, msg.payload.value)
      });
    case "SET_FIELD_ERROR":
      return _extends({}, state, {
        errors: setIn(state.errors, msg.payload.field, msg.payload.value)
      });
    case "RESET_FORM":
      return _extends({}, state, msg.payload);
    case "SET_FORMIK_STATE":
      return msg.payload(state);
    case "SUBMIT_ATTEMPT":
      return _extends({}, state, {
        touched: setNestedObjectValues(state.values, true),
        isSubmitting: true,
        submitCount: state.submitCount + 1
      });
    case "SUBMIT_FAILURE":
      return _extends({}, state, {
        isSubmitting: false
      });
    case "SUBMIT_SUCCESS":
      return _extends({}, state, {
        isSubmitting: false
      });
    default:
      return state;
  }
}
var emptyErrors = {};
var emptyTouched = {};
function useFormik(_ref) {
  var _ref$validateOnChange = _ref.validateOnChange, validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange, _ref$validateOnBlur = _ref.validateOnBlur, validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur, _ref$validateOnMount = _ref.validateOnMount, validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount, isInitialValid = _ref.isInitialValid, _ref$enableReinitiali = _ref.enableReinitialize, enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali, onSubmit = _ref.onSubmit, rest = _objectWithoutPropertiesLoose$1(_ref, ["validateOnChange", "validateOnBlur", "validateOnMount", "isInitialValid", "enableReinitialize", "onSubmit"]);
  var props = _extends({
    validateOnChange,
    validateOnBlur,
    validateOnMount,
    onSubmit
  }, rest);
  var initialValues = reactExports.useRef(props.initialValues);
  var initialErrors = reactExports.useRef(props.initialErrors || emptyErrors);
  var initialTouched = reactExports.useRef(props.initialTouched || emptyTouched);
  var initialStatus = reactExports.useRef(props.initialStatus);
  var isMounted = reactExports.useRef(false);
  var fieldRegistry = reactExports.useRef({});
  reactExports.useEffect(function() {
    isMounted.current = true;
    return function() {
      isMounted.current = false;
    };
  }, []);
  var _React$useReducer = reactExports.useReducer(formikReducer, {
    values: props.initialValues,
    errors: props.initialErrors || emptyErrors,
    touched: props.initialTouched || emptyTouched,
    status: props.initialStatus,
    isSubmitting: false,
    isValidating: false,
    submitCount: 0
  }), state = _React$useReducer[0], dispatch = _React$useReducer[1];
  var runValidateHandler = reactExports.useCallback(function(values, field) {
    return new Promise(function(resolve, reject) {
      var maybePromisedErrors = props.validate(values, field);
      if (maybePromisedErrors == null) {
        resolve(emptyErrors);
      } else if (isPromise(maybePromisedErrors)) {
        maybePromisedErrors.then(function(errors) {
          resolve(errors || emptyErrors);
        }, function(actualException) {
          reject(actualException);
        });
      } else {
        resolve(maybePromisedErrors);
      }
    });
  }, [props.validate]);
  var runValidationSchema = reactExports.useCallback(function(values, field) {
    var validationSchema2 = props.validationSchema;
    var schema = isFunction(validationSchema2) ? validationSchema2(field) : validationSchema2;
    var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);
    return new Promise(function(resolve, reject) {
      promise.then(function() {
        resolve(emptyErrors);
      }, function(err) {
        if (err.name === "ValidationError") {
          resolve(yupToFormErrors(err));
        } else {
          reject(err);
        }
      });
    });
  }, [props.validationSchema]);
  var runSingleFieldLevelValidation = reactExports.useCallback(function(field, value2) {
    return new Promise(function(resolve) {
      return resolve(fieldRegistry.current[field].validate(value2));
    });
  }, []);
  var runFieldLevelValidations = reactExports.useCallback(function(values) {
    var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function(f2) {
      return isFunction(fieldRegistry.current[f2].validate);
    });
    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function(f2) {
      return runSingleFieldLevelValidation(f2, getIn$1(values, f2));
    }) : [Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];
    return Promise.all(fieldValidations).then(function(fieldErrorsList) {
      return fieldErrorsList.reduce(function(prev, curr, index2) {
        if (curr === "DO_NOT_DELETE_YOU_WILL_BE_FIRED") {
          return prev;
        }
        if (curr) {
          prev = setIn(prev, fieldKeysWithValidation[index2], curr);
        }
        return prev;
      }, {});
    });
  }, [runSingleFieldLevelValidation]);
  var runAllValidations = reactExports.useCallback(function(values) {
    return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function(_ref2) {
      var fieldErrors = _ref2[0], schemaErrors = _ref2[1], validateErrors = _ref2[2];
      var combinedErrors = deepmerge_1.all([fieldErrors, schemaErrors, validateErrors], {
        arrayMerge
      });
      return combinedErrors;
    });
  }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]);
  var validateFormWithHighPriority = useEventCallback(function(values) {
    if (values === void 0) {
      values = state.values;
    }
    dispatch({
      type: "SET_ISVALIDATING",
      payload: true
    });
    return runAllValidations(values).then(function(combinedErrors) {
      if (!!isMounted.current) {
        dispatch({
          type: "SET_ISVALIDATING",
          payload: false
        });
        dispatch({
          type: "SET_ERRORS",
          payload: combinedErrors
        });
      }
      return combinedErrors;
    });
  });
  reactExports.useEffect(function() {
    if (validateOnMount && isMounted.current === true && isEqual(initialValues.current, props.initialValues)) {
      validateFormWithHighPriority(initialValues.current);
    }
  }, [validateOnMount, validateFormWithHighPriority]);
  var resetForm = reactExports.useCallback(function(nextState) {
    var values = nextState && nextState.values ? nextState.values : initialValues.current;
    var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};
    var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};
    var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;
    initialValues.current = values;
    initialErrors.current = errors;
    initialTouched.current = touched;
    initialStatus.current = status;
    var dispatchFn = function dispatchFn2() {
      dispatch({
        type: "RESET_FORM",
        payload: {
          isSubmitting: !!nextState && !!nextState.isSubmitting,
          errors,
          touched,
          status,
          values,
          isValidating: !!nextState && !!nextState.isValidating,
          submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === "number" ? nextState.submitCount : 0
        }
      });
    };
    if (props.onReset) {
      var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);
      if (isPromise(maybePromisedOnReset)) {
        maybePromisedOnReset.then(dispatchFn);
      } else {
        dispatchFn();
      }
    } else {
      dispatchFn();
    }
  }, [props.initialErrors, props.initialStatus, props.initialTouched]);
  reactExports.useEffect(function() {
    if (isMounted.current === true && !isEqual(initialValues.current, props.initialValues)) {
      if (enableReinitialize) {
        initialValues.current = props.initialValues;
        resetForm();
        if (validateOnMount) {
          validateFormWithHighPriority(initialValues.current);
        }
      }
    }
  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);
  reactExports.useEffect(function() {
    if (enableReinitialize && isMounted.current === true && !isEqual(initialErrors.current, props.initialErrors)) {
      initialErrors.current = props.initialErrors || emptyErrors;
      dispatch({
        type: "SET_ERRORS",
        payload: props.initialErrors || emptyErrors
      });
    }
  }, [enableReinitialize, props.initialErrors]);
  reactExports.useEffect(function() {
    if (enableReinitialize && isMounted.current === true && !isEqual(initialTouched.current, props.initialTouched)) {
      initialTouched.current = props.initialTouched || emptyTouched;
      dispatch({
        type: "SET_TOUCHED",
        payload: props.initialTouched || emptyTouched
      });
    }
  }, [enableReinitialize, props.initialTouched]);
  reactExports.useEffect(function() {
    if (enableReinitialize && isMounted.current === true && !isEqual(initialStatus.current, props.initialStatus)) {
      initialStatus.current = props.initialStatus;
      dispatch({
        type: "SET_STATUS",
        payload: props.initialStatus
      });
    }
  }, [enableReinitialize, props.initialStatus, props.initialTouched]);
  var validateField = useEventCallback(function(name2) {
    if (fieldRegistry.current[name2] && isFunction(fieldRegistry.current[name2].validate)) {
      var value2 = getIn$1(state.values, name2);
      var maybePromise = fieldRegistry.current[name2].validate(value2);
      if (isPromise(maybePromise)) {
        dispatch({
          type: "SET_ISVALIDATING",
          payload: true
        });
        return maybePromise.then(function(x3) {
          return x3;
        }).then(function(error) {
          dispatch({
            type: "SET_FIELD_ERROR",
            payload: {
              field: name2,
              value: error
            }
          });
          dispatch({
            type: "SET_ISVALIDATING",
            payload: false
          });
        });
      } else {
        dispatch({
          type: "SET_FIELD_ERROR",
          payload: {
            field: name2,
            value: maybePromise
          }
        });
        return Promise.resolve(maybePromise);
      }
    } else if (props.validationSchema) {
      dispatch({
        type: "SET_ISVALIDATING",
        payload: true
      });
      return runValidationSchema(state.values, name2).then(function(x3) {
        return x3;
      }).then(function(error) {
        dispatch({
          type: "SET_FIELD_ERROR",
          payload: {
            field: name2,
            value: getIn$1(error, name2)
          }
        });
        dispatch({
          type: "SET_ISVALIDATING",
          payload: false
        });
      });
    }
    return Promise.resolve();
  });
  var registerField = reactExports.useCallback(function(name2, _ref3) {
    var validate = _ref3.validate;
    fieldRegistry.current[name2] = {
      validate
    };
  }, []);
  var unregisterField = reactExports.useCallback(function(name2) {
    delete fieldRegistry.current[name2];
  }, []);
  var setTouched = useEventCallback(function(touched, shouldValidate) {
    dispatch({
      type: "SET_TOUCHED",
      payload: touched
    });
    var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var setErrors = reactExports.useCallback(function(errors) {
    dispatch({
      type: "SET_ERRORS",
      payload: errors
    });
  }, []);
  var setValues = useEventCallback(function(values, shouldValidate) {
    var resolvedValues = isFunction(values) ? values(state.values) : values;
    dispatch({
      type: "SET_VALUES",
      payload: resolvedValues
    });
    var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();
  });
  var setFieldError = reactExports.useCallback(function(field, value2) {
    dispatch({
      type: "SET_FIELD_ERROR",
      payload: {
        field,
        value: value2
      }
    });
  }, []);
  var setFieldValue = useEventCallback(function(field, value2, shouldValidate) {
    dispatch({
      type: "SET_FIELD_VALUE",
      payload: {
        field,
        value: value2
      }
    });
    var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value2)) : Promise.resolve();
  });
  var executeChange = reactExports.useCallback(function(eventOrTextValue, maybePath) {
    var field = maybePath;
    var val2 = eventOrTextValue;
    var parsed;
    if (!isString(eventOrTextValue)) {
      if (eventOrTextValue.persist) {
        eventOrTextValue.persist();
      }
      var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;
      var type = target.type, name2 = target.name, id2 = target.id, value2 = target.value, checked = target.checked, outerHTML = target.outerHTML, options = target.options, multiple = target.multiple;
      field = maybePath ? maybePath : name2 ? name2 : id2;
      if (!field && false) {
        warnAboutMissingIdentifier({
          htmlContent: outerHTML,
          documentationAnchorLink: "handlechange-e-reactchangeeventany--void",
          handlerName: "handleChange"
        });
      }
      val2 = /number|range/.test(type) ? (parsed = parseFloat(value2), isNaN(parsed) ? "" : parsed) : /checkbox/.test(type) ? getValueForCheckbox(getIn$1(state.values, field), checked, value2) : options && multiple ? getSelectedValues(options) : value2;
    }
    if (field) {
      setFieldValue(field, val2);
    }
  }, [setFieldValue, state.values]);
  var handleChange = useEventCallback(function(eventOrPath) {
    if (isString(eventOrPath)) {
      return function(event) {
        return executeChange(event, eventOrPath);
      };
    } else {
      executeChange(eventOrPath);
    }
  });
  var setFieldTouched = useEventCallback(function(field, touched, shouldValidate) {
    if (touched === void 0) {
      touched = true;
    }
    dispatch({
      type: "SET_FIELD_TOUCHED",
      payload: {
        field,
        value: touched
      }
    });
    var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var executeBlur = reactExports.useCallback(function(e3, path) {
    if (e3.persist) {
      e3.persist();
    }
    var _e$target = e3.target, name2 = _e$target.name, id2 = _e$target.id, outerHTML = _e$target.outerHTML;
    var field = path ? path : name2 ? name2 : id2;
    if (!field && false) {
      warnAboutMissingIdentifier({
        htmlContent: outerHTML,
        documentationAnchorLink: "handleblur-e-any--void",
        handlerName: "handleBlur"
      });
    }
    setFieldTouched(field, true);
  }, [setFieldTouched]);
  var handleBlur = useEventCallback(function(eventOrString) {
    if (isString(eventOrString)) {
      return function(event) {
        return executeBlur(event, eventOrString);
      };
    } else {
      executeBlur(eventOrString);
    }
  });
  var setFormikState = reactExports.useCallback(function(stateOrCb) {
    if (isFunction(stateOrCb)) {
      dispatch({
        type: "SET_FORMIK_STATE",
        payload: stateOrCb
      });
    } else {
      dispatch({
        type: "SET_FORMIK_STATE",
        payload: function payload() {
          return stateOrCb;
        }
      });
    }
  }, []);
  var setStatus = reactExports.useCallback(function(status) {
    dispatch({
      type: "SET_STATUS",
      payload: status
    });
  }, []);
  var setSubmitting = reactExports.useCallback(function(isSubmitting) {
    dispatch({
      type: "SET_ISSUBMITTING",
      payload: isSubmitting
    });
  }, []);
  var submitForm = useEventCallback(function() {
    dispatch({
      type: "SUBMIT_ATTEMPT"
    });
    return validateFormWithHighPriority().then(function(combinedErrors) {
      var isInstanceOfError = combinedErrors instanceof Error;
      var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;
      if (isActuallyValid) {
        var promiseOrUndefined;
        try {
          promiseOrUndefined = executeSubmit();
          if (promiseOrUndefined === void 0) {
            return;
          }
        } catch (error) {
          throw error;
        }
        return Promise.resolve(promiseOrUndefined).then(function(result) {
          if (!!isMounted.current) {
            dispatch({
              type: "SUBMIT_SUCCESS"
            });
          }
          return result;
        })["catch"](function(_errors) {
          if (!!isMounted.current) {
            dispatch({
              type: "SUBMIT_FAILURE"
            });
            throw _errors;
          }
        });
      } else if (!!isMounted.current) {
        dispatch({
          type: "SUBMIT_FAILURE"
        });
        if (isInstanceOfError) {
          throw combinedErrors;
        }
      }
      return;
    });
  });
  var handleSubmit = useEventCallback(function(e3) {
    if (e3 && e3.preventDefault && isFunction(e3.preventDefault)) {
      e3.preventDefault();
    }
    if (e3 && e3.stopPropagation && isFunction(e3.stopPropagation)) {
      e3.stopPropagation();
    }
    submitForm()["catch"](function(reason) {
      console.warn("Warning: An unhandled error was caught from submitForm()", reason);
    });
  });
  var imperativeMethods = {
    resetForm,
    validateForm: validateFormWithHighPriority,
    validateField,
    setErrors,
    setFieldError,
    setFieldTouched,
    setFieldValue,
    setStatus,
    setSubmitting,
    setTouched,
    setValues,
    setFormikState,
    submitForm
  };
  var executeSubmit = useEventCallback(function() {
    return onSubmit(state.values, imperativeMethods);
  });
  var handleReset = useEventCallback(function(e3) {
    if (e3 && e3.preventDefault && isFunction(e3.preventDefault)) {
      e3.preventDefault();
    }
    if (e3 && e3.stopPropagation && isFunction(e3.stopPropagation)) {
      e3.stopPropagation();
    }
    resetForm();
  });
  var getFieldMeta = reactExports.useCallback(function(name2) {
    return {
      value: getIn$1(state.values, name2),
      error: getIn$1(state.errors, name2),
      touched: !!getIn$1(state.touched, name2),
      initialValue: getIn$1(initialValues.current, name2),
      initialTouched: !!getIn$1(initialTouched.current, name2),
      initialError: getIn$1(initialErrors.current, name2)
    };
  }, [state.errors, state.touched, state.values]);
  var getFieldHelpers = reactExports.useCallback(function(name2) {
    return {
      setValue: function setValue(value2, shouldValidate) {
        return setFieldValue(name2, value2, shouldValidate);
      },
      setTouched: function setTouched2(value2, shouldValidate) {
        return setFieldTouched(name2, value2, shouldValidate);
      },
      setError: function setError(value2) {
        return setFieldError(name2, value2);
      }
    };
  }, [setFieldValue, setFieldTouched, setFieldError]);
  var getFieldProps = reactExports.useCallback(function(nameOrOptions) {
    var isAnObject = isObject$1(nameOrOptions);
    var name2 = isAnObject ? nameOrOptions.name : nameOrOptions;
    var valueState = getIn$1(state.values, name2);
    var field = {
      name: name2,
      value: valueState,
      onChange: handleChange,
      onBlur: handleBlur
    };
    if (isAnObject) {
      var type = nameOrOptions.type, valueProp = nameOrOptions.value, is2 = nameOrOptions.as, multiple = nameOrOptions.multiple;
      if (type === "checkbox") {
        if (valueProp === void 0) {
          field.checked = !!valueState;
        } else {
          field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));
          field.value = valueProp;
        }
      } else if (type === "radio") {
        field.checked = valueState === valueProp;
        field.value = valueProp;
      } else if (is2 === "select" && multiple) {
        field.value = field.value || [];
        field.multiple = true;
      }
    }
    return field;
  }, [handleBlur, handleChange, state.values]);
  var dirty = reactExports.useMemo(function() {
    return !isEqual(initialValues.current, state.values);
  }, [initialValues.current, state.values]);
  var isValid2 = reactExports.useMemo(function() {
    return typeof isInitialValid !== "undefined" ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;
  }, [isInitialValid, dirty, state.errors, props]);
  var ctx2 = _extends({}, state, {
    initialValues: initialValues.current,
    initialErrors: initialErrors.current,
    initialTouched: initialTouched.current,
    initialStatus: initialStatus.current,
    handleBlur,
    handleChange,
    handleReset,
    handleSubmit,
    resetForm,
    setErrors,
    setFormikState,
    setFieldTouched,
    setFieldValue,
    setFieldError,
    setStatus,
    setSubmitting,
    setTouched,
    setValues,
    submitForm,
    validateForm: validateFormWithHighPriority,
    validateField,
    isValid: isValid2,
    dirty,
    unregisterField,
    registerField,
    getFieldProps,
    getFieldMeta,
    getFieldHelpers,
    validateOnBlur,
    validateOnChange,
    validateOnMount
  });
  return ctx2;
}
function Formik(props) {
  var formikbag = useFormik(props);
  var component = props.component, children = props.children, render = props.render, innerRef = props.innerRef;
  reactExports.useImperativeHandle(innerRef, function() {
    return formikbag;
  });
  return reactExports.createElement(FormikProvider, {
    value: formikbag
  }, component ? reactExports.createElement(component, formikbag) : render ? render(formikbag) : children ? isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? reactExports.Children.only(children) : null : null);
}
function warnAboutMissingIdentifier(_ref4) {
  var htmlContent = _ref4.htmlContent, documentationAnchorLink = _ref4.documentationAnchorLink, handlerName = _ref4.handlerName;
  console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n    " + htmlContent + "\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#" + documentationAnchorLink + "\n  ");
}
function yupToFormErrors(yupError) {
  var errors = {};
  if (yupError.inner) {
    if (yupError.inner.length === 0) {
      return setIn(errors, yupError.path, yupError.message);
    }
    for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
      var _ref5;
      if (_isArray) {
        if (_i >= _iterator.length)
          break;
        _ref5 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done)
          break;
        _ref5 = _i.value;
      }
      var err = _ref5;
      if (!getIn$1(errors, err.path)) {
        errors = setIn(errors, err.path, err.message);
      }
    }
  }
  return errors;
}
function validateYupSchema(values, schema, sync2, context) {
  if (sync2 === void 0) {
    sync2 = false;
  }
  var normalizedValues = prepareDataForValidation(values);
  return schema[sync2 ? "validateSync" : "validate"](normalizedValues, {
    abortEarly: false,
    context: context || normalizedValues
  });
}
function prepareDataForValidation(values) {
  var data2 = Array.isArray(values) ? [] : {};
  for (var k3 in values) {
    if (Object.prototype.hasOwnProperty.call(values, k3)) {
      var key2 = String(k3);
      if (Array.isArray(values[key2]) === true) {
        data2[key2] = values[key2].map(function(value2) {
          if (Array.isArray(value2) === true || isPlainObject(value2)) {
            return prepareDataForValidation(value2);
          } else {
            return value2 !== "" ? value2 : void 0;
          }
        });
      } else if (isPlainObject(values[key2])) {
        data2[key2] = prepareDataForValidation(values[key2]);
      } else {
        data2[key2] = values[key2] !== "" ? values[key2] : void 0;
      }
    }
  }
  return data2;
}
function arrayMerge(target, source, options) {
  var destination = target.slice();
  source.forEach(function merge(e3, i2) {
    if (typeof destination[i2] === "undefined") {
      var cloneRequested = options.clone !== false;
      var shouldClone = cloneRequested && options.isMergeableObject(e3);
      destination[i2] = shouldClone ? deepmerge_1(Array.isArray(e3) ? [] : {}, e3, options) : e3;
    } else if (options.isMergeableObject(e3)) {
      destination[i2] = deepmerge_1(target[i2], e3, options);
    } else if (target.indexOf(e3) === -1) {
      destination.push(e3);
    }
  });
  return destination;
}
function getSelectedValues(options) {
  return Array.from(options).filter(function(el2) {
    return el2.selected;
  }).map(function(el2) {
    return el2.value;
  });
}
function getValueForCheckbox(currentValue, checked, valueProp) {
  if (typeof currentValue === "boolean") {
    return Boolean(checked);
  }
  var currentArrayOfValues = [];
  var isValueInArray = false;
  var index2 = -1;
  if (!Array.isArray(currentValue)) {
    if (!valueProp || valueProp == "true" || valueProp == "false") {
      return Boolean(checked);
    }
  } else {
    currentArrayOfValues = currentValue;
    index2 = currentValue.indexOf(valueProp);
    isValueInArray = index2 >= 0;
  }
  if (checked && valueProp && !isValueInArray) {
    return currentArrayOfValues.concat(valueProp);
  }
  if (!isValueInArray) {
    return currentArrayOfValues;
  }
  return currentArrayOfValues.slice(0, index2).concat(currentArrayOfValues.slice(index2 + 1));
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
function useEventCallback(fn) {
  var ref = reactExports.useRef(fn);
  useIsomorphicLayoutEffect(function() {
    ref.current = fn;
  });
  return reactExports.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current.apply(void 0, args);
  }, []);
}
var Form = /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
  var action = props.action, rest = _objectWithoutPropertiesLoose$1(props, ["action"]);
  var _action = action != null ? action : "#";
  var _useFormikContext = useFormikContext(), handleReset = _useFormikContext.handleReset, handleSubmit = _useFormikContext.handleSubmit;
  return reactExports.createElement("form", Object.assign({
    onSubmit: handleSubmit,
    ref,
    onReset: handleReset,
    action: _action
  }, rest));
});
Form.displayName = "Form";
function Cache(maxSize) {
  this._maxSize = maxSize;
  this.clear();
}
Cache.prototype.clear = function() {
  this._size = 0;
  this._values = /* @__PURE__ */ Object.create(null);
};
Cache.prototype.get = function(key2) {
  return this._values[key2];
};
Cache.prototype.set = function(key2, value2) {
  this._size >= this._maxSize && this.clear();
  if (!(key2 in this._values))
    this._size++;
  return this._values[key2] = value2;
};
var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g, DIGIT_REGEX = /^\d+$/, LEAD_DIGIT_REGEX = /^\d/, SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g, CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/, MAX_CACHE_SIZE = 512;
var pathCache = new Cache(MAX_CACHE_SIZE), setCache = new Cache(MAX_CACHE_SIZE), getCache = new Cache(MAX_CACHE_SIZE);
var propertyExpr = {
  Cache,
  split,
  normalizePath,
  setter: function(path) {
    var parts = normalizePath(path);
    return setCache.get(path) || setCache.set(path, function setter(obj, value2) {
      var index2 = 0;
      var len = parts.length;
      var data2 = obj;
      while (index2 < len - 1) {
        var part = parts[index2];
        if (part === "__proto__" || part === "constructor" || part === "prototype") {
          return obj;
        }
        data2 = data2[parts[index2++]];
      }
      data2[parts[index2]] = value2;
    });
  },
  getter: function(path, safe) {
    var parts = normalizePath(path);
    return getCache.get(path) || getCache.set(path, function getter(data2) {
      var index2 = 0, len = parts.length;
      while (index2 < len) {
        if (data2 != null || !safe)
          data2 = data2[parts[index2++]];
        else
          return;
      }
      return data2;
    });
  },
  join: function(segments) {
    return segments.reduce(function(path, part) {
      return path + (isQuoted(part) || DIGIT_REGEX.test(part) ? "[" + part + "]" : (path ? "." : "") + part);
    }, "");
  },
  forEach: function(path, cb2, thisArg) {
    forEach(Array.isArray(path) ? path : split(path), cb2, thisArg);
  }
};
function normalizePath(path) {
  return pathCache.get(path) || pathCache.set(
    path,
    split(path).map(function(part) {
      return part.replace(CLEAN_QUOTES_REGEX, "$2");
    })
  );
}
function split(path) {
  return path.match(SPLIT_REGEX) || [""];
}
function forEach(parts, iter, thisArg) {
  var len = parts.length, part, idx, isArray2, isBracket;
  for (idx = 0; idx < len; idx++) {
    part = parts[idx];
    if (part) {
      if (shouldBeQuoted(part)) {
        part = '"' + part + '"';
      }
      isBracket = isQuoted(part);
      isArray2 = !isBracket && /^\d+$/.test(part);
      iter.call(thisArg, part, isBracket, isArray2, idx, parts);
    }
  }
}
function isQuoted(str) {
  return typeof str === "string" && str && ["'", '"'].indexOf(str.charAt(0)) !== -1;
}
function hasLeadingNumber(part) {
  return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
}
function hasSpecialChars(part) {
  return SPEC_CHAR_REGEX.test(part);
}
function shouldBeQuoted(part) {
  return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
}
const reWords = /[A-Z\xc0-\xd6\xd8-\xde]?[a-z\xdf-\xf6\xf8-\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde]|$)|(?:[A-Z\xc0-\xd6\xd8-\xde]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde](?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])|$)|[A-Z\xc0-\xd6\xd8-\xde]?(?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\xc0-\xd6\xd8-\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\d*(?:1ST|2ND|3RD|(?![123])\dTH)(?=\b|[a-z_])|\d*(?:1st|2nd|3rd|(?![123])\dth)(?=\b|[A-Z_])|\d+|(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?(?:\u200d(?:[^\ud800-\udfff]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?)*/g;
const words = (str) => str.match(reWords) || [];
const upperFirst = (str) => str[0].toUpperCase() + str.slice(1);
const join = (str, d4) => words(str).join(d4).toLowerCase();
const camelCase = (str) => words(str).reduce(
  (acc, next) => `${acc}${!acc ? next.toLowerCase() : next[0].toUpperCase() + next.slice(1).toLowerCase()}`,
  ""
);
const pascalCase = (str) => upperFirst(camelCase(str));
const snakeCase = (str) => join(str, "_");
const kebabCase = (str) => join(str, "-");
const sentenceCase = (str) => upperFirst(join(str, " "));
const titleCase = (str) => words(str).map(upperFirst).join(" ");
var tinyCase = {
  words,
  upperFirst,
  camelCase,
  pascalCase,
  snakeCase,
  kebabCase,
  sentenceCase,
  titleCase
};
var toposort$2 = { exports: {} };
toposort$2.exports = function(edges) {
  return toposort(uniqueNodes(edges), edges);
};
toposort$2.exports.array = toposort;
function toposort(nodes, edges) {
  var cursor = nodes.length, sorted = new Array(cursor), visited = {}, i2 = cursor, outgoingEdges = makeOutgoingEdges(edges), nodesHash = makeNodesHash(nodes);
  edges.forEach(function(edge) {
    if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
      throw new Error("Unknown node. There is an unknown node in the supplied edges.");
    }
  });
  while (i2--) {
    if (!visited[i2])
      visit(nodes[i2], i2, /* @__PURE__ */ new Set());
  }
  return sorted;
  function visit(node, i3, predecessors) {
    if (predecessors.has(node)) {
      var nodeRep;
      try {
        nodeRep = ", node was:" + JSON.stringify(node);
      } catch (e3) {
        nodeRep = "";
      }
      throw new Error("Cyclic dependency" + nodeRep);
    }
    if (!nodesHash.has(node)) {
      throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(node));
    }
    if (visited[i3])
      return;
    visited[i3] = true;
    var outgoing = outgoingEdges.get(node) || /* @__PURE__ */ new Set();
    outgoing = Array.from(outgoing);
    if (i3 = outgoing.length) {
      predecessors.add(node);
      do {
        var child = outgoing[--i3];
        visit(child, nodesHash.get(child), predecessors);
      } while (i3);
      predecessors.delete(node);
    }
    sorted[--cursor] = node;
  }
}
function uniqueNodes(arr) {
  var res = /* @__PURE__ */ new Set();
  for (var i2 = 0, len = arr.length; i2 < len; i2++) {
    var edge = arr[i2];
    res.add(edge[0]);
    res.add(edge[1]);
  }
  return Array.from(res);
}
function makeOutgoingEdges(arr) {
  var edges = /* @__PURE__ */ new Map();
  for (var i2 = 0, len = arr.length; i2 < len; i2++) {
    var edge = arr[i2];
    if (!edges.has(edge[0]))
      edges.set(edge[0], /* @__PURE__ */ new Set());
    if (!edges.has(edge[1]))
      edges.set(edge[1], /* @__PURE__ */ new Set());
    edges.get(edge[0]).add(edge[1]);
  }
  return edges;
}
function makeNodesHash(arr) {
  var res = /* @__PURE__ */ new Map();
  for (var i2 = 0, len = arr.length; i2 < len; i2++) {
    res.set(arr[i2], i2);
  }
  return res;
}
var toposortExports = toposort$2.exports;
const toposort$1 = /* @__PURE__ */ getDefaultExportFromCjs(toposortExports);
const toString = Object.prototype.toString;
const errorToString = Error.prototype.toString;
const regExpToString = RegExp.prototype.toString;
const symbolToString = typeof Symbol !== "undefined" ? Symbol.prototype.toString : () => "";
const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
function printNumber(val2) {
  if (val2 != +val2)
    return "NaN";
  const isNegativeZero = val2 === 0 && 1 / val2 < 0;
  return isNegativeZero ? "-0" : "" + val2;
}
function printSimpleValue(val2, quoteStrings = false) {
  if (val2 == null || val2 === true || val2 === false)
    return "" + val2;
  const typeOf = typeof val2;
  if (typeOf === "number")
    return printNumber(val2);
  if (typeOf === "string")
    return quoteStrings ? `"${val2}"` : val2;
  if (typeOf === "function")
    return "[Function " + (val2.name || "anonymous") + "]";
  if (typeOf === "symbol")
    return symbolToString.call(val2).replace(SYMBOL_REGEXP, "Symbol($1)");
  const tag = toString.call(val2).slice(8, -1);
  if (tag === "Date")
    return isNaN(val2.getTime()) ? "" + val2 : val2.toISOString(val2);
  if (tag === "Error" || val2 instanceof Error)
    return "[" + errorToString.call(val2) + "]";
  if (tag === "RegExp")
    return regExpToString.call(val2);
  return null;
}
function printValue(value2, quoteStrings) {
  let result = printSimpleValue(value2, quoteStrings);
  if (result !== null)
    return result;
  return JSON.stringify(value2, function(key2, value3) {
    let result2 = printSimpleValue(this[key2], quoteStrings);
    if (result2 !== null)
      return result2;
    return value3;
  }, 2);
}
function toArray(value2) {
  return value2 == null ? [] : [].concat(value2);
}
let strReg = /\$\{\s*(\w+)\s*\}/g;
class ValidationError extends Error {
  static formatError(message, params) {
    const path = params.label || params.path || "this";
    if (path !== params.path)
      params = Object.assign({}, params, {
        path
      });
    if (typeof message === "string")
      return message.replace(strReg, (_, key2) => printValue(params[key2]));
    if (typeof message === "function")
      return message(params);
    return message;
  }
  static isError(err) {
    return err && err.name === "ValidationError";
  }
  constructor(errorOrErrors, value2, field, type) {
    super();
    this.value = void 0;
    this.path = void 0;
    this.type = void 0;
    this.errors = void 0;
    this.params = void 0;
    this.inner = void 0;
    this.name = "ValidationError";
    this.value = value2;
    this.path = field;
    this.type = type;
    this.errors = [];
    this.inner = [];
    toArray(errorOrErrors).forEach((err) => {
      if (ValidationError.isError(err)) {
        this.errors.push(...err.errors);
        this.inner = this.inner.concat(err.inner.length ? err.inner : err);
      } else {
        this.errors.push(err);
      }
    });
    this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ValidationError);
  }
}
let mixed = {
  default: "${path} is invalid",
  required: "${path} is a required field",
  defined: "${path} must be defined",
  notNull: "${path} cannot be null",
  oneOf: "${path} must be one of the following values: ${values}",
  notOneOf: "${path} must not be one of the following values: ${values}",
  notType: ({
    path,
    type,
    value: value2,
    originalValue
  }) => {
    const castMsg = originalValue != null && originalValue !== value2 ? ` (cast from the value \`${printValue(originalValue, true)}\`).` : ".";
    return type !== "mixed" ? `${path} must be a \`${type}\` type, but the final value was: \`${printValue(value2, true)}\`` + castMsg : `${path} must match the configured type. The validated value was: \`${printValue(value2, true)}\`` + castMsg;
  }
};
let string = {
  length: "${path} must be exactly ${length} characters",
  min: "${path} must be at least ${min} characters",
  max: "${path} must be at most ${max} characters",
  matches: '${path} must match the following: "${regex}"',
  email: "${path} must be a valid email",
  url: "${path} must be a valid URL",
  uuid: "${path} must be a valid UUID",
  trim: "${path} must be a trimmed string",
  lowercase: "${path} must be a lowercase string",
  uppercase: "${path} must be a upper case string"
};
let number = {
  min: "${path} must be greater than or equal to ${min}",
  max: "${path} must be less than or equal to ${max}",
  lessThan: "${path} must be less than ${less}",
  moreThan: "${path} must be greater than ${more}",
  positive: "${path} must be a positive number",
  negative: "${path} must be a negative number",
  integer: "${path} must be an integer"
};
let date = {
  min: "${path} field must be later than ${min}",
  max: "${path} field must be at earlier than ${max}"
};
let boolean = {
  isValue: "${path} field must be ${value}"
};
let object = {
  noUnknown: "${path} field has unspecified keys: ${unknown}"
};
let array = {
  min: "${path} field must have at least ${min} items",
  max: "${path} field must have less than or equal to ${max} items",
  length: "${path} must have ${length} items"
};
Object.assign(/* @__PURE__ */ Object.create(null), {
  mixed,
  string,
  number,
  date,
  object,
  array,
  boolean
});
const isSchema = (obj) => obj && obj.__isYupSchema__;
class Condition {
  static fromOptions(refs, config2) {
    if (!config2.then && !config2.otherwise)
      throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
    let {
      is: is2,
      then,
      otherwise
    } = config2;
    let check = typeof is2 === "function" ? is2 : (...values) => values.every((value2) => value2 === is2);
    return new Condition(refs, (values, schema) => {
      var _branch;
      let branch = check(...values) ? then : otherwise;
      return (_branch = branch == null ? void 0 : branch(schema)) != null ? _branch : schema;
    });
  }
  constructor(refs, builder) {
    this.fn = void 0;
    this.refs = refs;
    this.refs = refs;
    this.fn = builder;
  }
  resolve(base, options) {
    let values = this.refs.map((ref) => (
      // TODO: ? operator here?
      ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context)
    ));
    let schema = this.fn(values, base, options);
    if (schema === void 0 || // @ts-ignore this can be base
    schema === base) {
      return base;
    }
    if (!isSchema(schema))
      throw new TypeError("conditions must return a schema object");
    return schema.resolve(options);
  }
}
const prefixes = {
  context: "$",
  value: "."
};
class Reference {
  constructor(key2, options = {}) {
    this.key = void 0;
    this.isContext = void 0;
    this.isValue = void 0;
    this.isSibling = void 0;
    this.path = void 0;
    this.getter = void 0;
    this.map = void 0;
    if (typeof key2 !== "string")
      throw new TypeError("ref must be a string, got: " + key2);
    this.key = key2.trim();
    if (key2 === "")
      throw new TypeError("ref must be a non-empty string");
    this.isContext = this.key[0] === prefixes.context;
    this.isValue = this.key[0] === prefixes.value;
    this.isSibling = !this.isContext && !this.isValue;
    let prefix2 = this.isContext ? prefixes.context : this.isValue ? prefixes.value : "";
    this.path = this.key.slice(prefix2.length);
    this.getter = this.path && propertyExpr.getter(this.path, true);
    this.map = options.map;
  }
  getValue(value2, parent2, context) {
    let result = this.isContext ? context : this.isValue ? value2 : parent2;
    if (this.getter)
      result = this.getter(result || {});
    if (this.map)
      result = this.map(result);
    return result;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */
  cast(value2, options) {
    return this.getValue(value2, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
  }
  resolve() {
    return this;
  }
  describe() {
    return {
      type: "ref",
      key: this.key
    };
  }
  toString() {
    return `Ref(${this.key})`;
  }
  static isRef(value2) {
    return value2 && value2.__isYupRef;
  }
}
Reference.prototype.__isYupRef = true;
const isAbsent = (value2) => value2 == null;
function createValidation(config2) {
  function validate({
    value: value2,
    path = "",
    options,
    originalValue,
    schema
  }, panic, next) {
    const {
      name: name2,
      test,
      params,
      message,
      skipAbsent
    } = config2;
    let {
      parent: parent2,
      context,
      abortEarly = schema.spec.abortEarly
    } = options;
    function resolve(item) {
      return Reference.isRef(item) ? item.getValue(value2, parent2, context) : item;
    }
    function createError(overrides = {}) {
      const nextParams = Object.assign({
        value: value2,
        originalValue,
        label: schema.spec.label,
        path: overrides.path || path,
        spec: schema.spec
      }, params, overrides.params);
      for (const key2 of Object.keys(nextParams))
        nextParams[key2] = resolve(nextParams[key2]);
      const error = new ValidationError(ValidationError.formatError(overrides.message || message, nextParams), value2, nextParams.path, overrides.type || name2);
      error.params = nextParams;
      return error;
    }
    const invalid = abortEarly ? panic : next;
    let ctx2 = {
      path,
      parent: parent2,
      type: name2,
      from: options.from,
      createError,
      resolve,
      options,
      originalValue,
      schema
    };
    const handleResult = (validOrError) => {
      if (ValidationError.isError(validOrError))
        invalid(validOrError);
      else if (!validOrError)
        invalid(createError());
      else
        next(null);
    };
    const handleError = (err) => {
      if (ValidationError.isError(err))
        invalid(err);
      else
        panic(err);
    };
    const shouldSkip = skipAbsent && isAbsent(value2);
    if (!options.sync) {
      try {
        Promise.resolve(!shouldSkip ? test.call(ctx2, value2, ctx2) : true).then(handleResult, handleError);
      } catch (err) {
        handleError(err);
      }
      return;
    }
    let result;
    try {
      var _result;
      result = !shouldSkip ? test.call(ctx2, value2, ctx2) : true;
      if (typeof ((_result = result) == null ? void 0 : _result.then) === "function") {
        throw new Error(`Validation test of type: "${ctx2.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`);
      }
    } catch (err) {
      handleError(err);
      return;
    }
    handleResult(result);
  }
  validate.OPTIONS = config2;
  return validate;
}
function getIn(schema, path, value2, context = value2) {
  let parent2, lastPart, lastPartDebug;
  if (!path)
    return {
      parent: parent2,
      parentPath: path,
      schema
    };
  propertyExpr.forEach(path, (_part, isBracket, isArray2) => {
    let part = isBracket ? _part.slice(1, _part.length - 1) : _part;
    schema = schema.resolve({
      context,
      parent: parent2,
      value: value2
    });
    let isTuple = schema.type === "tuple";
    let idx = isArray2 ? parseInt(part, 10) : 0;
    if (schema.innerType || isTuple) {
      if (isTuple && !isArray2)
        throw new Error(`Yup.reach cannot implicitly index into a tuple type. the path part "${lastPartDebug}" must contain an index to the tuple element, e.g. "${lastPartDebug}[0]"`);
      if (value2 && idx >= value2.length) {
        throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path}. because there is no value at that index. `);
      }
      parent2 = value2;
      value2 = value2 && value2[idx];
      schema = isTuple ? schema.spec.types[idx] : schema.innerType;
    }
    if (!isArray2) {
      if (!schema.fields || !schema.fields[part])
        throw new Error(`The schema does not contain the path: ${path}. (failed at: ${lastPartDebug} which is a type: "${schema.type}")`);
      parent2 = value2;
      value2 = value2 && value2[part];
      schema = schema.fields[part];
    }
    lastPart = part;
    lastPartDebug = isBracket ? "[" + _part + "]" : "." + _part;
  });
  return {
    schema,
    parent: parent2,
    parentPath: lastPart
  };
}
class ReferenceSet extends Set {
  describe() {
    const description = [];
    for (const item of this.values()) {
      description.push(Reference.isRef(item) ? item.describe() : item);
    }
    return description;
  }
  resolveAll(resolve) {
    let result = [];
    for (const item of this.values()) {
      result.push(resolve(item));
    }
    return result;
  }
  clone() {
    return new ReferenceSet(this.values());
  }
  merge(newItems, removeItems) {
    const next = this.clone();
    newItems.forEach((value2) => next.add(value2));
    removeItems.forEach((value2) => next.delete(value2));
    return next;
  }
}
function clone(src, seen = /* @__PURE__ */ new Map()) {
  if (isSchema(src) || !src || typeof src !== "object")
    return src;
  if (seen.has(src))
    return seen.get(src);
  let copy;
  if (src instanceof Date) {
    copy = new Date(src.getTime());
    seen.set(src, copy);
  } else if (src instanceof RegExp) {
    copy = new RegExp(src);
    seen.set(src, copy);
  } else if (Array.isArray(src)) {
    copy = new Array(src.length);
    seen.set(src, copy);
    for (let i2 = 0; i2 < src.length; i2++)
      copy[i2] = clone(src[i2], seen);
  } else if (src instanceof Map) {
    copy = /* @__PURE__ */ new Map();
    seen.set(src, copy);
    for (const [k3, v2] of src.entries())
      copy.set(k3, clone(v2, seen));
  } else if (src instanceof Set) {
    copy = /* @__PURE__ */ new Set();
    seen.set(src, copy);
    for (const v2 of src)
      copy.add(clone(v2, seen));
  } else if (src instanceof Object) {
    copy = {};
    seen.set(src, copy);
    for (const [k3, v2] of Object.entries(src))
      copy[k3] = clone(v2, seen);
  } else {
    throw Error(`Unable to clone ${src}`);
  }
  return copy;
}
class Schema {
  constructor(options) {
    this.type = void 0;
    this.deps = [];
    this.tests = void 0;
    this.transforms = void 0;
    this.conditions = [];
    this._mutate = void 0;
    this.internalTests = {};
    this._whitelist = new ReferenceSet();
    this._blacklist = new ReferenceSet();
    this.exclusiveTests = /* @__PURE__ */ Object.create(null);
    this._typeCheck = void 0;
    this.spec = void 0;
    this.tests = [];
    this.transforms = [];
    this.withMutation(() => {
      this.typeError(mixed.notType);
    });
    this.type = options.type;
    this._typeCheck = options.check;
    this.spec = Object.assign({
      strip: false,
      strict: false,
      abortEarly: true,
      recursive: true,
      nullable: false,
      optional: true,
      coerce: true
    }, options == null ? void 0 : options.spec);
    this.withMutation((s3) => {
      s3.nonNullable();
    });
  }
  // TODO: remove
  get _type() {
    return this.type;
  }
  clone(spec) {
    if (this._mutate) {
      if (spec)
        Object.assign(this.spec, spec);
      return this;
    }
    const next = Object.create(Object.getPrototypeOf(this));
    next.type = this.type;
    next._typeCheck = this._typeCheck;
    next._whitelist = this._whitelist.clone();
    next._blacklist = this._blacklist.clone();
    next.internalTests = Object.assign({}, this.internalTests);
    next.exclusiveTests = Object.assign({}, this.exclusiveTests);
    next.deps = [...this.deps];
    next.conditions = [...this.conditions];
    next.tests = [...this.tests];
    next.transforms = [...this.transforms];
    next.spec = clone(Object.assign({}, this.spec, spec));
    return next;
  }
  label(label) {
    let next = this.clone();
    next.spec.label = label;
    return next;
  }
  meta(...args) {
    if (args.length === 0)
      return this.spec.meta;
    let next = this.clone();
    next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);
    return next;
  }
  withMutation(fn) {
    let before = this._mutate;
    this._mutate = true;
    let result = fn(this);
    this._mutate = before;
    return result;
  }
  concat(schema) {
    if (!schema || schema === this)
      return this;
    if (schema.type !== this.type && this.type !== "mixed")
      throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${schema.type}`);
    let base = this;
    let combined = schema.clone();
    const mergedSpec = Object.assign({}, base.spec, combined.spec);
    combined.spec = mergedSpec;
    combined.internalTests = Object.assign({}, base.internalTests, combined.internalTests);
    combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);
    combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist);
    combined.tests = base.tests;
    combined.exclusiveTests = base.exclusiveTests;
    combined.withMutation((next) => {
      schema.tests.forEach((fn) => {
        next.test(fn.OPTIONS);
      });
    });
    combined.transforms = [...base.transforms, ...combined.transforms];
    return combined;
  }
  isType(v2) {
    if (v2 == null) {
      if (this.spec.nullable && v2 === null)
        return true;
      if (this.spec.optional && v2 === void 0)
        return true;
      return false;
    }
    return this._typeCheck(v2);
  }
  resolve(options) {
    let schema = this;
    if (schema.conditions.length) {
      let conditions = schema.conditions;
      schema = schema.clone();
      schema.conditions = [];
      schema = conditions.reduce((prevSchema, condition) => condition.resolve(prevSchema, options), schema);
      schema = schema.resolve(options);
    }
    return schema;
  }
  resolveOptions(options) {
    var _options$strict, _options$abortEarly, _options$recursive;
    return Object.assign({}, options, {
      from: options.from || [],
      strict: (_options$strict = options.strict) != null ? _options$strict : this.spec.strict,
      abortEarly: (_options$abortEarly = options.abortEarly) != null ? _options$abortEarly : this.spec.abortEarly,
      recursive: (_options$recursive = options.recursive) != null ? _options$recursive : this.spec.recursive
    });
  }
  /**
   * Run the configured transform pipeline over an input value.
   */
  cast(value2, options = {}) {
    let resolvedSchema = this.resolve(Object.assign({
      value: value2
    }, options));
    let allowOptionality = options.assert === "ignore-optionality";
    let result = resolvedSchema._cast(value2, options);
    if (options.assert !== false && !resolvedSchema.isType(result)) {
      if (allowOptionality && isAbsent(result)) {
        return result;
      }
      let formattedValue = printValue(value2);
      let formattedResult = printValue(result);
      throw new TypeError(`The value of ${options.path || "field"} could not be cast to a value that satisfies the schema type: "${resolvedSchema.type}". 

attempted value: ${formattedValue} 
` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ""));
    }
    return result;
  }
  _cast(rawValue, options) {
    let value2 = rawValue === void 0 ? rawValue : this.transforms.reduce((prevValue, fn) => fn.call(this, prevValue, rawValue, this), rawValue);
    if (value2 === void 0) {
      value2 = this.getDefault(options);
    }
    return value2;
  }
  _validate(_value, options = {}, panic, next) {
    let {
      path,
      originalValue = _value,
      strict = this.spec.strict
    } = options;
    let value2 = _value;
    if (!strict) {
      value2 = this._cast(value2, Object.assign({
        assert: false
      }, options));
    }
    let initialTests = [];
    for (let test of Object.values(this.internalTests)) {
      if (test)
        initialTests.push(test);
    }
    this.runTests({
      path,
      value: value2,
      originalValue,
      options,
      tests: initialTests
    }, panic, (initialErrors) => {
      if (initialErrors.length) {
        return next(initialErrors, value2);
      }
      this.runTests({
        path,
        value: value2,
        originalValue,
        options,
        tests: this.tests
      }, panic, next);
    });
  }
  /**
   * Executes a set of validations, either schema, produced Tests or a nested
   * schema validate result.
   */
  runTests(runOptions, panic, next) {
    let fired = false;
    let {
      tests,
      value: value2,
      originalValue,
      path,
      options
    } = runOptions;
    let panicOnce = (arg) => {
      if (fired)
        return;
      fired = true;
      panic(arg, value2);
    };
    let nextOnce = (arg) => {
      if (fired)
        return;
      fired = true;
      next(arg, value2);
    };
    let count = tests.length;
    let nestedErrors = [];
    if (!count)
      return nextOnce([]);
    let args = {
      value: value2,
      originalValue,
      path,
      options,
      schema: this
    };
    for (let i2 = 0; i2 < tests.length; i2++) {
      const test = tests[i2];
      test(args, panicOnce, function finishTestRun(err) {
        if (err) {
          nestedErrors = nestedErrors.concat(err);
        }
        if (--count <= 0) {
          nextOnce(nestedErrors);
        }
      });
    }
  }
  asNestedTest({
    key: key2,
    index: index2,
    parent: parent2,
    parentPath,
    originalParent,
    options
  }) {
    const k3 = key2 != null ? key2 : index2;
    if (k3 == null) {
      throw TypeError("Must include `key` or `index` for nested validations");
    }
    const isIndex2 = typeof k3 === "number";
    let value2 = parent2[k3];
    const testOptions = Object.assign({}, options, {
      // Nested validations fields are always strict:
      //    1. parent isn't strict so the casting will also have cast inner values
      //    2. parent is strict in which case the nested values weren't cast either
      strict: true,
      parent: parent2,
      value: value2,
      originalValue: originalParent[k3],
      // FIXME: tests depend on `index` being passed around deeply,
      //   we should not let the options.key/index bleed through
      key: void 0,
      // index: undefined,
      [isIndex2 ? "index" : "key"]: k3,
      path: isIndex2 || k3.includes(".") ? `${parentPath || ""}[${value2 ? k3 : `"${k3}"`}]` : (parentPath ? `${parentPath}.` : "") + key2
    });
    return (_, panic, next) => this.resolve(testOptions)._validate(value2, testOptions, panic, next);
  }
  validate(value2, options) {
    let schema = this.resolve(Object.assign({}, options, {
      value: value2
    }));
    return new Promise((resolve, reject) => schema._validate(value2, options, (error, parsed) => {
      if (ValidationError.isError(error))
        error.value = parsed;
      reject(error);
    }, (errors, validated) => {
      if (errors.length)
        reject(new ValidationError(errors, validated));
      else
        resolve(validated);
    }));
  }
  validateSync(value2, options) {
    let schema = this.resolve(Object.assign({}, options, {
      value: value2
    }));
    let result;
    schema._validate(value2, Object.assign({}, options, {
      sync: true
    }), (error, parsed) => {
      if (ValidationError.isError(error))
        error.value = parsed;
      throw error;
    }, (errors, validated) => {
      if (errors.length)
        throw new ValidationError(errors, value2);
      result = validated;
    });
    return result;
  }
  isValid(value2, options) {
    return this.validate(value2, options).then(() => true, (err) => {
      if (ValidationError.isError(err))
        return false;
      throw err;
    });
  }
  isValidSync(value2, options) {
    try {
      this.validateSync(value2, options);
      return true;
    } catch (err) {
      if (ValidationError.isError(err))
        return false;
      throw err;
    }
  }
  _getDefault(options) {
    let defaultValue2 = this.spec.default;
    if (defaultValue2 == null) {
      return defaultValue2;
    }
    return typeof defaultValue2 === "function" ? defaultValue2.call(this, options) : clone(defaultValue2);
  }
  getDefault(options) {
    let schema = this.resolve(options || {});
    return schema._getDefault(options);
  }
  default(def) {
    if (arguments.length === 0) {
      return this._getDefault();
    }
    let next = this.clone({
      default: def
    });
    return next;
  }
  strict(isStrict = true) {
    return this.clone({
      strict: isStrict
    });
  }
  nullability(nullable, message) {
    const next = this.clone({
      nullable
    });
    next.internalTests.nullable = createValidation({
      message,
      name: "nullable",
      test(value2) {
        return value2 === null ? this.schema.spec.nullable : true;
      }
    });
    return next;
  }
  optionality(optional, message) {
    const next = this.clone({
      optional
    });
    next.internalTests.optionality = createValidation({
      message,
      name: "optionality",
      test(value2) {
        return value2 === void 0 ? this.schema.spec.optional : true;
      }
    });
    return next;
  }
  optional() {
    return this.optionality(true);
  }
  defined(message = mixed.defined) {
    return this.optionality(false, message);
  }
  nullable() {
    return this.nullability(true);
  }
  nonNullable(message = mixed.notNull) {
    return this.nullability(false, message);
  }
  required(message = mixed.required) {
    return this.clone().withMutation((next) => next.nonNullable(message).defined(message));
  }
  notRequired() {
    return this.clone().withMutation((next) => next.nullable().optional());
  }
  transform(fn) {
    let next = this.clone();
    next.transforms.push(fn);
    return next;
  }
  /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */
  test(...args) {
    let opts;
    if (args.length === 1) {
      if (typeof args[0] === "function") {
        opts = {
          test: args[0]
        };
      } else {
        opts = args[0];
      }
    } else if (args.length === 2) {
      opts = {
        name: args[0],
        test: args[1]
      };
    } else {
      opts = {
        name: args[0],
        message: args[1],
        test: args[2]
      };
    }
    if (opts.message === void 0)
      opts.message = mixed.default;
    if (typeof opts.test !== "function")
      throw new TypeError("`test` is a required parameters");
    let next = this.clone();
    let validate = createValidation(opts);
    let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
    if (opts.exclusive) {
      if (!opts.name)
        throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");
    }
    if (opts.name)
      next.exclusiveTests[opts.name] = !!opts.exclusive;
    next.tests = next.tests.filter((fn) => {
      if (fn.OPTIONS.name === opts.name) {
        if (isExclusive)
          return false;
        if (fn.OPTIONS.test === validate.OPTIONS.test)
          return false;
      }
      return true;
    });
    next.tests.push(validate);
    return next;
  }
  when(keys2, options) {
    if (!Array.isArray(keys2) && typeof keys2 !== "string") {
      options = keys2;
      keys2 = ".";
    }
    let next = this.clone();
    let deps = toArray(keys2).map((key2) => new Reference(key2));
    deps.forEach((dep) => {
      if (dep.isSibling)
        next.deps.push(dep.key);
    });
    next.conditions.push(typeof options === "function" ? new Condition(deps, options) : Condition.fromOptions(deps, options));
    return next;
  }
  typeError(message) {
    let next = this.clone();
    next.internalTests.typeError = createValidation({
      message,
      name: "typeError",
      skipAbsent: true,
      test(value2) {
        if (!this.schema._typeCheck(value2))
          return this.createError({
            params: {
              type: this.schema.type
            }
          });
        return true;
      }
    });
    return next;
  }
  oneOf(enums, message = mixed.oneOf) {
    let next = this.clone();
    enums.forEach((val2) => {
      next._whitelist.add(val2);
      next._blacklist.delete(val2);
    });
    next.internalTests.whiteList = createValidation({
      message,
      name: "oneOf",
      skipAbsent: true,
      test(value2) {
        let valids = this.schema._whitelist;
        let resolved = valids.resolveAll(this.resolve);
        return resolved.includes(value2) ? true : this.createError({
          params: {
            values: Array.from(valids).join(", "),
            resolved
          }
        });
      }
    });
    return next;
  }
  notOneOf(enums, message = mixed.notOneOf) {
    let next = this.clone();
    enums.forEach((val2) => {
      next._blacklist.add(val2);
      next._whitelist.delete(val2);
    });
    next.internalTests.blacklist = createValidation({
      message,
      name: "notOneOf",
      test(value2) {
        let invalids = this.schema._blacklist;
        let resolved = invalids.resolveAll(this.resolve);
        if (resolved.includes(value2))
          return this.createError({
            params: {
              values: Array.from(invalids).join(", "),
              resolved
            }
          });
        return true;
      }
    });
    return next;
  }
  strip(strip = true) {
    let next = this.clone();
    next.spec.strip = strip;
    return next;
  }
  /**
   * Return a serialized description of the schema including validations, flags, types etc.
   *
   * @param options Provide any needed context for resolving runtime schema alterations (lazy, when conditions, etc).
   */
  describe(options) {
    const next = (options ? this.resolve(options) : this).clone();
    const {
      label,
      meta: meta2,
      optional,
      nullable
    } = next.spec;
    const description = {
      meta: meta2,
      label,
      optional,
      nullable,
      default: next.getDefault(options),
      type: next.type,
      oneOf: next._whitelist.describe(),
      notOneOf: next._blacklist.describe(),
      tests: next.tests.map((fn) => ({
        name: fn.OPTIONS.name,
        params: fn.OPTIONS.params
      })).filter((n2, idx, list) => list.findIndex((c7) => c7.name === n2.name) === idx)
    };
    return description;
  }
}
Schema.prototype.__isYupSchema__ = true;
for (const method of ["validate", "validateSync"])
  Schema.prototype[`${method}At`] = function(path, value2, options = {}) {
    const {
      parent: parent2,
      parentPath,
      schema
    } = getIn(this, path, value2, options.context);
    return schema[method](parent2 && parent2[parentPath], Object.assign({}, options, {
      parent: parent2,
      path
    }));
  };
for (const alias of ["equals", "is"])
  Schema.prototype[alias] = Schema.prototype.oneOf;
for (const alias of ["not", "nope"])
  Schema.prototype[alias] = Schema.prototype.notOneOf;
const returnsTrue = () => true;
function create$8(spec) {
  return new MixedSchema(spec);
}
class MixedSchema extends Schema {
  constructor(spec) {
    super(typeof spec === "function" ? {
      type: "mixed",
      check: spec
    } : Object.assign({
      type: "mixed",
      check: returnsTrue
    }, spec));
  }
}
create$8.prototype = MixedSchema.prototype;
function create$7() {
  return new BooleanSchema();
}
class BooleanSchema extends Schema {
  constructor() {
    super({
      type: "boolean",
      check(v2) {
        if (v2 instanceof Boolean)
          v2 = v2.valueOf();
        return typeof v2 === "boolean";
      }
    });
    this.withMutation(() => {
      this.transform((value2, _raw, ctx2) => {
        if (ctx2.spec.coerce && !ctx2.isType(value2)) {
          if (/^(true|1)$/i.test(String(value2)))
            return true;
          if (/^(false|0)$/i.test(String(value2)))
            return false;
        }
        return value2;
      });
    });
  }
  isTrue(message = boolean.isValue) {
    return this.test({
      message,
      name: "is-value",
      exclusive: true,
      params: {
        value: "true"
      },
      test(value2) {
        return isAbsent(value2) || value2 === true;
      }
    });
  }
  isFalse(message = boolean.isValue) {
    return this.test({
      message,
      name: "is-value",
      exclusive: true,
      params: {
        value: "false"
      },
      test(value2) {
        return isAbsent(value2) || value2 === false;
      }
    });
  }
  default(def) {
    return super.default(def);
  }
  defined(msg) {
    return super.defined(msg);
  }
  optional() {
    return super.optional();
  }
  required(msg) {
    return super.required(msg);
  }
  notRequired() {
    return super.notRequired();
  }
  nullable() {
    return super.nullable();
  }
  nonNullable(msg) {
    return super.nonNullable(msg);
  }
  strip(v2) {
    return super.strip(v2);
  }
}
create$7.prototype = BooleanSchema.prototype;
let rEmail = (
  // eslint-disable-next-line
  /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
);
let rUrl = (
  // eslint-disable-next-line
  /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i
);
let rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
let isTrimmed = (value2) => isAbsent(value2) || value2 === value2.trim();
let objStringTag = {}.toString();
function create$6() {
  return new StringSchema();
}
class StringSchema extends Schema {
  constructor() {
    super({
      type: "string",
      check(value2) {
        if (value2 instanceof String)
          value2 = value2.valueOf();
        return typeof value2 === "string";
      }
    });
    this.withMutation(() => {
      this.transform((value2, _raw, ctx2) => {
        if (!ctx2.spec.coerce || ctx2.isType(value2))
          return value2;
        if (Array.isArray(value2))
          return value2;
        const strValue = value2 != null && value2.toString ? value2.toString() : value2;
        if (strValue === objStringTag)
          return value2;
        return strValue;
      });
    });
  }
  required(message) {
    return super.required(message).withMutation((schema) => schema.test({
      message: message || mixed.required,
      name: "required",
      skipAbsent: true,
      test: (value2) => !!value2.length
    }));
  }
  notRequired() {
    return super.notRequired().withMutation((schema) => {
      schema.tests = schema.tests.filter((t3) => t3.OPTIONS.name !== "required");
      return schema;
    });
  }
  length(length2, message = string.length) {
    return this.test({
      message,
      name: "length",
      exclusive: true,
      params: {
        length: length2
      },
      skipAbsent: true,
      test(value2) {
        return value2.length === this.resolve(length2);
      }
    });
  }
  min(min, message = string.min) {
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      skipAbsent: true,
      test(value2) {
        return value2.length >= this.resolve(min);
      }
    });
  }
  max(max, message = string.max) {
    return this.test({
      name: "max",
      exclusive: true,
      message,
      params: {
        max
      },
      skipAbsent: true,
      test(value2) {
        return value2.length <= this.resolve(max);
      }
    });
  }
  matches(regex, options) {
    let excludeEmptyString = false;
    let message;
    let name2;
    if (options) {
      if (typeof options === "object") {
        ({
          excludeEmptyString = false,
          message,
          name: name2
        } = options);
      } else {
        message = options;
      }
    }
    return this.test({
      name: name2 || "matches",
      message: message || string.matches,
      params: {
        regex
      },
      skipAbsent: true,
      test: (value2) => value2 === "" && excludeEmptyString || value2.search(regex) !== -1
    });
  }
  email(message = string.email) {
    return this.matches(rEmail, {
      name: "email",
      message,
      excludeEmptyString: true
    });
  }
  url(message = string.url) {
    return this.matches(rUrl, {
      name: "url",
      message,
      excludeEmptyString: true
    });
  }
  uuid(message = string.uuid) {
    return this.matches(rUUID, {
      name: "uuid",
      message,
      excludeEmptyString: false
    });
  }
  //-- transforms --
  ensure() {
    return this.default("").transform((val2) => val2 === null ? "" : val2);
  }
  trim(message = string.trim) {
    return this.transform((val2) => val2 != null ? val2.trim() : val2).test({
      message,
      name: "trim",
      test: isTrimmed
    });
  }
  lowercase(message = string.lowercase) {
    return this.transform((value2) => !isAbsent(value2) ? value2.toLowerCase() : value2).test({
      message,
      name: "string_case",
      exclusive: true,
      skipAbsent: true,
      test: (value2) => isAbsent(value2) || value2 === value2.toLowerCase()
    });
  }
  uppercase(message = string.uppercase) {
    return this.transform((value2) => !isAbsent(value2) ? value2.toUpperCase() : value2).test({
      message,
      name: "string_case",
      exclusive: true,
      skipAbsent: true,
      test: (value2) => isAbsent(value2) || value2 === value2.toUpperCase()
    });
  }
}
create$6.prototype = StringSchema.prototype;
let isNaN$1 = (value2) => value2 != +value2;
function create$5() {
  return new NumberSchema();
}
class NumberSchema extends Schema {
  constructor() {
    super({
      type: "number",
      check(value2) {
        if (value2 instanceof Number)
          value2 = value2.valueOf();
        return typeof value2 === "number" && !isNaN$1(value2);
      }
    });
    this.withMutation(() => {
      this.transform((value2, _raw, ctx2) => {
        if (!ctx2.spec.coerce)
          return value2;
        let parsed = value2;
        if (typeof parsed === "string") {
          parsed = parsed.replace(/\s/g, "");
          if (parsed === "")
            return NaN;
          parsed = +parsed;
        }
        if (ctx2.isType(parsed) || parsed === null)
          return parsed;
        return parseFloat(parsed);
      });
    });
  }
  min(min, message = number.min) {
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      skipAbsent: true,
      test(value2) {
        return value2 >= this.resolve(min);
      }
    });
  }
  max(max, message = number.max) {
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        max
      },
      skipAbsent: true,
      test(value2) {
        return value2 <= this.resolve(max);
      }
    });
  }
  lessThan(less, message = number.lessThan) {
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        less
      },
      skipAbsent: true,
      test(value2) {
        return value2 < this.resolve(less);
      }
    });
  }
  moreThan(more, message = number.moreThan) {
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        more
      },
      skipAbsent: true,
      test(value2) {
        return value2 > this.resolve(more);
      }
    });
  }
  positive(msg = number.positive) {
    return this.moreThan(0, msg);
  }
  negative(msg = number.negative) {
    return this.lessThan(0, msg);
  }
  integer(message = number.integer) {
    return this.test({
      name: "integer",
      message,
      skipAbsent: true,
      test: (val2) => Number.isInteger(val2)
    });
  }
  truncate() {
    return this.transform((value2) => !isAbsent(value2) ? value2 | 0 : value2);
  }
  round(method) {
    var _method;
    let avail = ["ceil", "floor", "round", "trunc"];
    method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || "round";
    if (method === "trunc")
      return this.truncate();
    if (avail.indexOf(method.toLowerCase()) === -1)
      throw new TypeError("Only valid options for round() are: " + avail.join(", "));
    return this.transform((value2) => !isAbsent(value2) ? Math[method](value2) : value2);
  }
}
create$5.prototype = NumberSchema.prototype;
var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
function parseIsoDate(date2) {
  var numericKeys = [1, 4, 5, 6, 7, 10, 11], minutesOffset = 0, timestamp, struct;
  if (struct = isoReg.exec(date2)) {
    for (var i2 = 0, k3; k3 = numericKeys[i2]; ++i2)
      struct[k3] = +struct[k3] || 0;
    struct[2] = (+struct[2] || 1) - 1;
    struct[3] = +struct[3] || 1;
    struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0;
    if ((struct[8] === void 0 || struct[8] === "") && (struct[9] === void 0 || struct[9] === ""))
      timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);
    else {
      if (struct[8] !== "Z" && struct[9] !== void 0) {
        minutesOffset = struct[10] * 60 + struct[11];
        if (struct[9] === "+")
          minutesOffset = 0 - minutesOffset;
      }
      timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    }
  } else
    timestamp = Date.parse ? Date.parse(date2) : NaN;
  return timestamp;
}
let invalidDate = /* @__PURE__ */ new Date("");
let isDate$1 = (obj) => Object.prototype.toString.call(obj) === "[object Date]";
class DateSchema extends Schema {
  constructor() {
    super({
      type: "date",
      check(v2) {
        return isDate$1(v2) && !isNaN(v2.getTime());
      }
    });
    this.withMutation(() => {
      this.transform((value2, _raw, ctx2) => {
        if (!ctx2.spec.coerce || ctx2.isType(value2) || value2 === null)
          return value2;
        value2 = parseIsoDate(value2);
        return !isNaN(value2) ? new Date(value2) : DateSchema.INVALID_DATE;
      });
    });
  }
  prepareParam(ref, name2) {
    let param;
    if (!Reference.isRef(ref)) {
      let cast = this.cast(ref);
      if (!this._typeCheck(cast))
        throw new TypeError(`\`${name2}\` must be a Date or a value that can be \`cast()\` to a Date`);
      param = cast;
    } else {
      param = ref;
    }
    return param;
  }
  min(min, message = date.min) {
    let limit = this.prepareParam(min, "min");
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      skipAbsent: true,
      test(value2) {
        return value2 >= this.resolve(limit);
      }
    });
  }
  max(max, message = date.max) {
    let limit = this.prepareParam(max, "max");
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        max
      },
      skipAbsent: true,
      test(value2) {
        return value2 <= this.resolve(limit);
      }
    });
  }
}
DateSchema.INVALID_DATE = invalidDate;
DateSchema.prototype;
function sortFields(fields, excludedEdges = []) {
  let edges = [];
  let nodes = /* @__PURE__ */ new Set();
  let excludes = new Set(excludedEdges.map(([a3, b3]) => `${a3}-${b3}`));
  function addNode(depPath, key2) {
    let node = propertyExpr.split(depPath)[0];
    nodes.add(node);
    if (!excludes.has(`${key2}-${node}`))
      edges.push([key2, node]);
  }
  for (const key2 of Object.keys(fields)) {
    let value2 = fields[key2];
    nodes.add(key2);
    if (Reference.isRef(value2) && value2.isSibling)
      addNode(value2.path, key2);
    else if (isSchema(value2) && "deps" in value2)
      value2.deps.forEach((path) => addNode(path, key2));
  }
  return toposort$1.array(Array.from(nodes), edges).reverse();
}
function findIndex$1(arr, err) {
  let idx = Infinity;
  arr.some((key2, ii2) => {
    var _err$path;
    if ((_err$path = err.path) != null && _err$path.includes(key2)) {
      idx = ii2;
      return true;
    }
  });
  return idx;
}
function sortByKeyOrder(keys2) {
  return (a3, b3) => {
    return findIndex$1(keys2, a3) - findIndex$1(keys2, b3);
  };
}
const parseJson = (value2, _, ctx2) => {
  if (typeof value2 !== "string") {
    return value2;
  }
  let parsed = value2;
  try {
    parsed = JSON.parse(value2);
  } catch (err) {
  }
  return ctx2.isType(parsed) ? parsed : value2;
};
function deepPartial(schema) {
  if ("fields" in schema) {
    const partial = {};
    for (const [key2, fieldSchema] of Object.entries(schema.fields)) {
      partial[key2] = deepPartial(fieldSchema);
    }
    return schema.setFields(partial);
  }
  if (schema.type === "array") {
    const nextArray = schema.optional();
    if (nextArray.innerType)
      nextArray.innerType = deepPartial(nextArray.innerType);
    return nextArray;
  }
  if (schema.type === "tuple") {
    return schema.optional().clone({
      types: schema.spec.types.map(deepPartial)
    });
  }
  if ("optional" in schema) {
    return schema.optional();
  }
  return schema;
}
const deepHas = (obj, p2) => {
  const path = [...propertyExpr.normalizePath(p2)];
  if (path.length === 1)
    return path[0] in obj;
  let last = path.pop();
  let parent2 = propertyExpr.getter(propertyExpr.join(path), true)(obj);
  return !!(parent2 && last in parent2);
};
let isObject = (obj) => Object.prototype.toString.call(obj) === "[object Object]";
function unknown(ctx2, value2) {
  let known = Object.keys(ctx2.fields);
  return Object.keys(value2).filter((key2) => known.indexOf(key2) === -1);
}
const defaultSort = sortByKeyOrder([]);
function create$3(spec) {
  return new ObjectSchema(spec);
}
class ObjectSchema extends Schema {
  constructor(spec) {
    super({
      type: "object",
      check(value2) {
        return isObject(value2) || typeof value2 === "function";
      }
    });
    this.fields = /* @__PURE__ */ Object.create(null);
    this._sortErrors = defaultSort;
    this._nodes = [];
    this._excludedEdges = [];
    this.withMutation(() => {
      if (spec) {
        this.shape(spec);
      }
    });
  }
  _cast(_value, options = {}) {
    var _options$stripUnknown;
    let value2 = super._cast(_value, options);
    if (value2 === void 0)
      return this.getDefault(options);
    if (!this._typeCheck(value2))
      return value2;
    let fields = this.fields;
    let strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
    let props = [].concat(this._nodes, Object.keys(value2).filter((v2) => !this._nodes.includes(v2)));
    let intermediateValue = {};
    let innerOptions = Object.assign({}, options, {
      parent: intermediateValue,
      __validating: options.__validating || false
    });
    let isChanged = false;
    for (const prop of props) {
      let field = fields[prop];
      let exists = prop in value2;
      if (field) {
        let fieldValue;
        let inputValue = value2[prop];
        innerOptions.path = (options.path ? `${options.path}.` : "") + prop;
        field = field.resolve({
          value: inputValue,
          context: options.context,
          parent: intermediateValue
        });
        let fieldSpec = field instanceof Schema ? field.spec : void 0;
        let strict = fieldSpec == null ? void 0 : fieldSpec.strict;
        if (fieldSpec != null && fieldSpec.strip) {
          isChanged = isChanged || prop in value2;
          continue;
        }
        fieldValue = !options.__validating || !strict ? (
          // TODO: use _cast, this is double resolving
          field.cast(value2[prop], innerOptions)
        ) : value2[prop];
        if (fieldValue !== void 0) {
          intermediateValue[prop] = fieldValue;
        }
      } else if (exists && !strip) {
        intermediateValue[prop] = value2[prop];
      }
      if (exists !== prop in intermediateValue || intermediateValue[prop] !== value2[prop]) {
        isChanged = true;
      }
    }
    return isChanged ? intermediateValue : value2;
  }
  _validate(_value, options = {}, panic, next) {
    let {
      from = [],
      originalValue = _value,
      recursive = this.spec.recursive
    } = options;
    options.from = [{
      schema: this,
      value: originalValue
    }, ...from];
    options.__validating = true;
    options.originalValue = originalValue;
    super._validate(_value, options, panic, (objectErrors, value2) => {
      if (!recursive || !isObject(value2)) {
        next(objectErrors, value2);
        return;
      }
      originalValue = originalValue || value2;
      let tests = [];
      for (let key2 of this._nodes) {
        let field = this.fields[key2];
        if (!field || Reference.isRef(field)) {
          continue;
        }
        tests.push(field.asNestedTest({
          options,
          key: key2,
          parent: value2,
          parentPath: options.path,
          originalParent: originalValue
        }));
      }
      this.runTests({
        tests,
        value: value2,
        originalValue,
        options
      }, panic, (fieldErrors) => {
        next(fieldErrors.sort(this._sortErrors).concat(objectErrors), value2);
      });
    });
  }
  clone(spec) {
    const next = super.clone(spec);
    next.fields = Object.assign({}, this.fields);
    next._nodes = this._nodes;
    next._excludedEdges = this._excludedEdges;
    next._sortErrors = this._sortErrors;
    return next;
  }
  concat(schema) {
    let next = super.concat(schema);
    let nextFields = next.fields;
    for (let [field, schemaOrRef] of Object.entries(this.fields)) {
      const target = nextFields[field];
      nextFields[field] = target === void 0 ? schemaOrRef : target;
    }
    return next.withMutation((s3) => (
      // XXX: excludes here is wrong
      s3.setFields(nextFields, [...this._excludedEdges, ...schema._excludedEdges])
    ));
  }
  _getDefault(options) {
    if ("default" in this.spec) {
      return super._getDefault(options);
    }
    if (!this._nodes.length) {
      return void 0;
    }
    let dft = {};
    this._nodes.forEach((key2) => {
      var _innerOptions;
      const field = this.fields[key2];
      let innerOptions = options;
      if ((_innerOptions = innerOptions) != null && _innerOptions.value) {
        innerOptions = Object.assign({}, innerOptions, {
          parent: innerOptions.value,
          value: innerOptions.value[key2]
        });
      }
      dft[key2] = field && "getDefault" in field ? field.getDefault(innerOptions) : void 0;
    });
    return dft;
  }
  setFields(shape, excludedEdges) {
    let next = this.clone();
    next.fields = shape;
    next._nodes = sortFields(shape, excludedEdges);
    next._sortErrors = sortByKeyOrder(Object.keys(shape));
    if (excludedEdges)
      next._excludedEdges = excludedEdges;
    return next;
  }
  shape(additions, excludes = []) {
    return this.clone().withMutation((next) => {
      let edges = next._excludedEdges;
      if (excludes.length) {
        if (!Array.isArray(excludes[0]))
          excludes = [excludes];
        edges = [...next._excludedEdges, ...excludes];
      }
      return next.setFields(Object.assign(next.fields, additions), edges);
    });
  }
  partial() {
    const partial = {};
    for (const [key2, schema] of Object.entries(this.fields)) {
      partial[key2] = "optional" in schema && schema.optional instanceof Function ? schema.optional() : schema;
    }
    return this.setFields(partial);
  }
  deepPartial() {
    const next = deepPartial(this);
    return next;
  }
  pick(keys2) {
    const picked = {};
    for (const key2 of keys2) {
      if (this.fields[key2])
        picked[key2] = this.fields[key2];
    }
    return this.setFields(picked);
  }
  omit(keys2) {
    const fields = Object.assign({}, this.fields);
    for (const key2 of keys2) {
      delete fields[key2];
    }
    return this.setFields(fields);
  }
  from(from, to2, alias) {
    let fromGetter = propertyExpr.getter(from, true);
    return this.transform((obj) => {
      if (!obj)
        return obj;
      let newObj = obj;
      if (deepHas(obj, from)) {
        newObj = Object.assign({}, obj);
        if (!alias)
          delete newObj[from];
        newObj[to2] = fromGetter(obj);
      }
      return newObj;
    });
  }
  /** Parse an input JSON string to an object */
  json() {
    return this.transform(parseJson);
  }
  noUnknown(noAllow = true, message = object.noUnknown) {
    if (typeof noAllow !== "boolean") {
      message = noAllow;
      noAllow = true;
    }
    let next = this.test({
      name: "noUnknown",
      exclusive: true,
      message,
      test(value2) {
        if (value2 == null)
          return true;
        const unknownKeys = unknown(this.schema, value2);
        return !noAllow || unknownKeys.length === 0 || this.createError({
          params: {
            unknown: unknownKeys.join(", ")
          }
        });
      }
    });
    next.spec.noUnknown = noAllow;
    return next;
  }
  unknown(allow = true, message = object.noUnknown) {
    return this.noUnknown(!allow, message);
  }
  transformKeys(fn) {
    return this.transform((obj) => {
      if (!obj)
        return obj;
      const result = {};
      for (const key2 of Object.keys(obj))
        result[fn(key2)] = obj[key2];
      return result;
    });
  }
  camelCase() {
    return this.transformKeys(tinyCase.camelCase);
  }
  snakeCase() {
    return this.transformKeys(tinyCase.snakeCase);
  }
  constantCase() {
    return this.transformKeys((key2) => tinyCase.snakeCase(key2).toUpperCase());
  }
  describe(options) {
    let base = super.describe(options);
    base.fields = {};
    for (const [key2, value2] of Object.entries(this.fields)) {
      var _innerOptions2;
      let innerOptions = options;
      if ((_innerOptions2 = innerOptions) != null && _innerOptions2.value) {
        innerOptions = Object.assign({}, innerOptions, {
          parent: innerOptions.value,
          value: innerOptions.value[key2]
        });
      }
      base.fields[key2] = value2.describe(innerOptions);
    }
    return base;
  }
}
create$3.prototype = ObjectSchema.prototype;
const PERMISSIONS = {
  CAN_VIEW_VIEWSEEDPHRASE: "view_seed_phrase",
  CAN_VIEW_ENTERSEEDPHRASE: "view_enter_seed_phrase",
  CAN_VIEW_IMPORTSEEDPHRASE: "view_import_seed_phrase",
  CAN_VIEW_WIPETHISNODE: "view_wipe_this_node",
  CAN_VIEW_RESYNCING: "view_resyncing",
  CAN_VIEW_RESTORE: "view_restore",
  CAN_VIEW_MODAL: "view_modal",
  CAN_VIEW_AUTOCREATEPASSWORD: "view_auto_create_password",
  CAN_VIEW_DELETE_BACKUP: "view_delete_backup",
  CAN_VIEW_DELETE_ARCHIVE: "view_delete_archive",
  CAN_VIEW_UPLOADING: "can_view_uploading"
};
const TogglePasswordIcon = ({ toggle: toggle2 }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    toggle2 && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        width: "20",
        height: "20",
        viewBox: "0 0 20 20",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "mask",
            {
              id: "mask0_604_3898",
              maskUnits: "userSpaceOnUse",
              x: "0",
              y: "0",
              width: "20",
              height: "20",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "20", height: "20", fill: "#D9D9D9" })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_604_3898)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "path",
            {
              d: "M13.271 11.146L11.979 9.85399C12.0343 9.32599 11.8747 8.87133 11.5 8.48999C11.1253 8.10799 10.674 7.94466 10.146 7.99999L8.854 6.70799C9.03467 6.63866 9.22233 6.58666 9.417 6.55199C9.611 6.51733 9.80533 6.49999 10 6.49999C10.972 6.49999 11.7983 6.84033 12.479 7.52099C13.1597 8.20166 13.5 9.02799 13.5 9.99999C13.5 10.1947 13.4827 10.389 13.448 10.583C13.4133 10.7777 13.3543 10.9653 13.271 11.146ZM16.042 13.917L14.958 12.833C15.458 12.4443 15.913 12.0173 16.323 11.552C16.733 11.0867 17.0767 10.5693 17.354 9.99999C16.6733 8.59733 15.67 7.49666 14.344 6.69799C13.0173 5.89933 11.5693 5.49999 10 5.49999C9.63867 5.49999 9.28467 5.52066 8.938 5.56199C8.59067 5.60399 8.25033 5.67366 7.917 5.77099L6.708 4.56199C7.236 4.35399 7.77433 4.20833 8.323 4.12499C8.87167 4.04166 9.43067 3.99999 10 3.99999C11.986 3.99999 13.802 4.53833 15.448 5.61499C17.094 6.69099 18.278 8.15266 19 9.99999C18.6947 10.792 18.2883 11.5107 17.781 12.156C17.2743 12.802 16.6947 13.389 16.042 13.917ZM16 18.125L13.292 15.417C12.764 15.611 12.2257 15.7567 11.677 15.854C11.1283 15.9513 10.5693 16 10 16C8.014 16 6.198 15.4617 4.552 14.385C2.906 13.309 1.722 11.8473 1 9.99999C1.30533 9.20799 1.708 8.48566 2.208 7.83299C2.708 7.18033 3.29133 6.58999 3.958 6.06199L1.875 3.97899L2.938 2.91699L17.062 17.062L16 18.125ZM5.021 7.14599C4.535 7.53466 4.08367 7.96166 3.667 8.42699C3.25033 8.89233 2.91 9.41666 2.646 9.99999C3.32667 11.4027 4.33 12.5033 5.656 13.302C6.98267 14.1007 8.43067 14.5 10 14.5C10.3613 14.5 10.7153 14.4757 11.062 14.427C11.4093 14.3783 11.7567 14.3123 12.104 14.229L11.167 13.292C10.9723 13.3613 10.7777 13.4133 10.583 13.448C10.389 13.4827 10.1947 13.5 10 13.5C9.028 13.5 8.20167 13.1597 7.521 12.479C6.84033 11.7983 6.5 10.972 6.5 9.99999C6.5 9.80533 6.52433 9.61099 6.573 9.41699C6.62167 9.22233 6.66667 9.02766 6.708 8.83299L5.021 7.14599Z",
              fill: "#A7A7B0"
            }
          ) })
        ]
      }
    ),
    !toggle2 && /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "svg",
      {
        width: "21",
        height: "20",
        viewBox: "0 0 21 20",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "mask",
            {
              id: "mask0_1102_25545",
              maskUnits: "userSpaceOnUse",
              x: "0",
              y: "0",
              width: "21",
              height: "20",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { x: "0.5", width: "20", height: "20", fill: "#D9D9D9" })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1102_25545)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "path",
            {
              d: "M10.5 13.5C11.472 13.5 12.2983 13.1597 12.979 12.479C13.6597 11.7983 14 10.972 14 10C14 9.028 13.6597 8.20167 12.979 7.521C12.2983 6.84033 11.472 6.5 10.5 6.5C9.528 6.5 8.70167 6.84033 8.021 7.521C7.34033 8.20167 7 9.028 7 10C7 10.972 7.34033 11.7983 8.021 12.479C8.70167 13.1597 9.528 13.5 10.5 13.5ZM10.5 12C9.94467 12 9.47233 11.8057 9.083 11.417C8.69433 11.0277 8.5 10.5553 8.5 10C8.5 9.44467 8.69433 8.97233 9.083 8.583C9.47233 8.19433 9.94467 8 10.5 8C11.0553 8 11.5277 8.19433 11.917 8.583C12.3057 8.97233 12.5 9.44467 12.5 10C12.5 10.5553 12.3057 11.0277 11.917 11.417C11.5277 11.8057 11.0553 12 10.5 12ZM10.5 16C8.514 16 6.70833 15.455 5.083 14.365C3.45833 13.2743 2.264 11.8193 1.5 10C2.264 8.18067 3.45833 6.72567 5.083 5.635C6.70833 4.545 8.514 4 10.5 4C12.486 4 14.2917 4.545 15.917 5.635C17.5417 6.72567 18.736 8.18067 19.5 10C18.736 11.8193 17.5417 13.2743 15.917 14.365C14.2917 15.455 12.486 16 10.5 16ZM10.5 14.5C12.0553 14.5 13.4927 14.0973 14.812 13.292C16.132 12.486 17.146 11.3887 17.854 10C17.146 8.61133 16.132 7.514 14.812 6.708C13.4927 5.90267 12.0553 5.5 10.5 5.5C8.94467 5.5 7.50733 5.90267 6.188 6.708C4.868 7.514 3.854 8.61133 3.146 10C3.854 11.3887 4.868 12.486 6.188 13.292C7.50733 14.0973 8.94467 14.5 10.5 14.5Z",
              fill: "#A7A7B0"
            }
          ) })
        ]
      }
    )
  ] });
};
const validationSchema$6 = create$3().shape({
  password: create$6().matches(/^[~!@#=?+<>,._'/()?a-zA-Z0-9-]+$/, "Invalid character").required("Please enter a password").min(12, "Password must be at least 12 characters long"),
  confirmPassword: create$6().required("Please re-enter your password").test("matchy-passwords", function(val2) {
    const { path, parent: parent2, createError } = this;
    if (val2 === void 0) {
      return false;
    }
    const pwd = parent2.password;
    const matching = pwd === val2;
    if (matching) {
      return true;
    }
    return createError({ path, message: "Passwords do not match" });
  }),
  understand: create$7().required("Field is required")
});
const validationSchemaUnlock = create$3().shape({
  password: create$6().required("Please enter a password")
});
const LockPrivateKeys = () => {
  const {
    setModal,
    vaultLocked,
    checkVaultLocked,
    setBackButton,
    displayBackButton: displayHeaderBackButton
  } = reactExports.useContext(appContext);
  const location = useLocation();
  const { authNavigate } = useAuth();
  const [hidePassword, togglePasswordVisibility] = reactExports.useState(false);
  const [hideConfirmPassword, toggleConfirmPasswordVisiblity] = reactExports.useState(false);
  reactExports.useEffect(() => {
    setBackButton({ display: true, to: "/dashboard", title: "Back" });
  }, [location]);
  const UnlockDialog = {
    content: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col justify-center items-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("img", { className: "mb-8 h-[128px] w-[128px]", alt: "unlock", src: "./assets/lock_open.svg" }),
      " ",
      /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-2xl font-semibold", children: [
        "You have unlocked ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " your private keys"
      ] })
    ] }),
    primaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
    secondaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Button,
      {
        variant: "tertiary",
        extraClass: "mt-4",
        onClick: () => {
          authNavigate("/dashboard/lockprivatekeys", []);
          checkVaultLocked();
        },
        children: "Close"
      }
    )
  };
  const LockDialog = {
    content: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("img", { className: "mb-8", alt: "unlock", src: "./assets/lock.svg" }),
      " ",
      /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-2xl font-semibold", children: [
        "You have locked ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " your private keys"
      ] })
    ] }),
    primaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
    secondaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Button,
      {
        variant: "tertiary",
        extraClass: "mt-4",
        onClick: () => {
          authNavigate("/dashboard/lockprivatekeys", []);
          checkVaultLocked();
        },
        children: "Close"
      }
    )
  };
  const formik = useFormik({
    initialValues: {
      password: "",
      confirmPassword: "",
      understand: false
    },
    onSubmit: async (formData) => {
      formik.setStatus(void 0);
      if (!vaultLocked) {
        await vaultPasswordLock(formData.password).then((response) => {
          const isConfirmed = response === 1;
          if (isConfirmed) {
            authNavigate("/dashboard/modal", PERMISSIONS.CAN_VIEW_MODAL);
            setModal({
              content: LockDialog.content,
              primaryActions: LockDialog.primaryActions,
              secondaryActions: LockDialog.secondaryActions
            });
          }
        }).catch((error) => {
          formik.setStatus(error);
          setTimeout(() => formik.setStatus(void 0), 2500);
        });
      }
      if (vaultLocked) {
        await vaultPasswordUnlock(formData.password).then((response) => {
          const isConfirmed = response === 1;
          if (isConfirmed) {
            authNavigate("/dashboard/modal", PERMISSIONS.CAN_VIEW_MODAL);
            setModal({
              content: UnlockDialog.content,
              primaryActions: UnlockDialog.primaryActions,
              secondaryActions: UnlockDialog.secondaryActions
            });
          }
        }).catch((error) => {
          formik.setStatus(error);
          setTimeout(() => formik.setStatus(void 0), 2500);
        });
      }
    },
    validationSchema: !vaultLocked ? validationSchema$6 : validationSchemaUnlock
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    !vaultLocked && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { to: "/dashboard", title: "Back" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left bg-inherit", children: "Lock private keys" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rounded", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 text-left pb-2", children: [
            "Locking your node prevents unauthorised access to your wallet and seed phrase. ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            " Your private keys will be encrypted with a password which you will be required to enter when transacting. You will still be able to receive funds as usual."
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-core-grey-80 text-left", children: "Before locking, ensure you have a copy of your seed phrase written down." })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "core-black-contrast-2 p-4 rounded flex flex-col gap-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "form",
          {
            autoComplete: "off",
            onSubmit: formik.handleSubmit,
            className: "flex flex-col gap-4",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Input,
                {
                  disabled: formik.isSubmitting,
                  extraClass: "core-black-contrast",
                  handleEndIconClick: () => togglePasswordVisibility((prevState) => !prevState),
                  type: !hidePassword ? "password" : "text",
                  autoComplete: "new-password",
                  placeholder: "Enter password",
                  name: "password",
                  id: "password",
                  error: formik.errors.password,
                  value: formik.values.password,
                  onChange: formik.handleChange,
                  endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hidePassword })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Input,
                {
                  disabled: formik.isSubmitting,
                  extraClass: "core-black-contrast",
                  handleEndIconClick: () => toggleConfirmPasswordVisiblity((prevState) => !prevState),
                  type: !hideConfirmPassword ? "password" : "text",
                  autoComplete: "new-password",
                  placeholder: "Confirm password",
                  name: "confirmPassword",
                  id: "confirmPassword",
                  error: formik.errors.confirmPassword,
                  value: formik.values.confirmPassword,
                  onChange: formik.handleChange,
                  endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hideConfirmPassword })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-8", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  UnderstandRadio,
                  {
                    id: "understand",
                    htmlFor: "understand",
                    name: "understand",
                    children: "I understand I am responsible for keeping a record of my Seed Phrase.",
                    onChange: () => {
                      formik.setFieldValue(
                        "understand",
                        !formik.values.understand
                      );
                    }
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    variant: "primary",
                    type: "submit",
                    disabled: !(formik.isValid && formik.values.understand) || formik.isSubmitting,
                    children: "Lock private keys"
                  }
                )
              ] }),
              formik.status && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left", children: formik.status })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm password-label mr-4 ml-4", children: [
          "Enter a password over 12 characters using a-z, A-Z, 0-9 and",
          " ",
          "!@#=?+<>,.-_ '()/",
          "symbols only. ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          "Your password cannot contain spaces."
        ] }) })
      ] })
    ] }) }),
    !!vaultLocked && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { to: "/dashboard", title: "Security" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left bg-inherit", children: "Unlock private keys" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "rounded", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 text-left pb-2", children: [
          "Your seed phrase and private keys will be visible and unprotected against unauthorised access. ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          "You should only unlock your private keys temporarily if required."
        ] }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "core-black-contrast-2 p-4 rounded flex flex-col gap-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "form",
          {
            autoComplete: "off",
            onSubmit: formik.handleSubmit,
            className: "flex flex-col gap-4",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Input,
                {
                  disabled: formik.isSubmitting,
                  extraClass: "core-black-contrast",
                  autoComplete: "new-password",
                  handleEndIconClick: () => togglePasswordVisibility((prevState) => !prevState),
                  type: !hidePassword ? "password" : "text",
                  placeholder: "Enter password",
                  name: "password",
                  id: "password",
                  error: formik.errors.password,
                  value: formik.values.password,
                  onChange: formik.handleChange,
                  endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hidePassword })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-8", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  variant: "primary",
                  extraClass: "text-black",
                  type: "submit",
                  disabled: !formik.isValid || formik.isSubmitting,
                  children: "Unlock private keys"
                }
              ) }),
              formik.status && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left", children: formik.status })
            ]
          }
        ) })
      ] })
    ] }) })
  ] });
};
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number2 = Number(dirtyNumber);
  if (isNaN(number2)) {
    return number2;
  }
  return number2 < 0 ? Math.ceil(number2) : Math.floor(number2);
}
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function getTimezoneOffsetInMilliseconds(date2) {
  var utcDate = new Date(Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds()));
  utcDate.setUTCFullYear(date2.getFullYear());
  return date2.getTime() - utcDate.getTime();
}
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
function isDate(value2) {
  requiredArgs(1, arguments);
  return value2 instanceof Date || _typeof(value2) === "object" && Object.prototype.toString.call(value2) === "[object Date]";
}
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date2 = toDate(dirtyDate);
  return !isNaN(Number(date2));
}
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}
function differenceInMilliseconds(dateLeft, dateRight) {
  requiredArgs(2, arguments);
  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
}
var roundingMap = {
  ceil: Math.ceil,
  round: Math.round,
  floor: Math.floor,
  trunc: function trunc(value2) {
    return value2 < 0 ? Math.ceil(value2) : Math.floor(value2);
  }
  // Math.trunc is not supported by IE
};
var defaultRoundingMethod = "trunc";
function getRoundingMethod(method) {
  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
}
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setHours(23, 59, 59, 999);
  return date2;
}
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var month = date2.getMonth();
  date2.setFullYear(date2.getFullYear(), month + 1, 0);
  date2.setHours(23, 59, 59, 999);
  return date2;
}
function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  return endOfDay(date2).getTime() === endOfMonth(date2).getTime();
}
function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  var result;
  if (difference < 1) {
    result = 0;
  } else {
    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
      dateLeft.setDate(30);
    }
    dateLeft.setMonth(dateLeft.getMonth() - sign * difference);
    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;
    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
      isLastMonthNotFull = false;
    }
    result = sign * (difference - Number(isLastMonthNotFull));
  }
  return result === 0 ? 0 : result;
}
function differenceInSeconds(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1e3;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var timestamp = date2.getTime();
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date2.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCISOWeek(fourthOfJanuary);
  return date2;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date2).getTime() - startOfUTCISOWeekYear(date2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCWeek(firstWeek, options);
  return date2;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCWeek(date2, options).getTime() - startOfUTCWeekYear(date2, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function addLeadingZeros(number2, targetLength) {
  var sign = number2 < 0 ? "-" : "";
  var output = Math.abs(number2).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}
var formatters$2 = {
  // Year
  y: function y2(date2, token) {
    var signedYear = date2.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M2(date2, token) {
    var month = date2.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d2(date2, token) {
    return addLeadingZeros(date2.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date2, token) {
    var dayPeriodEnumValue = date2.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h2(date2, token) {
    return addLeadingZeros(date2.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H2(date2, token) {
    return addLeadingZeros(date2.getUTCHours(), token.length);
  },
  // Minute
  m: function m2(date2, token) {
    return addLeadingZeros(date2.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date2, token) {
    return addLeadingZeros(date2.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S2(date2, token) {
    var numberOfDigits = token.length;
    var milliseconds = date2.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
const formatters$3 = formatters$2;
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  // Era
  G: function G2(date2, token, localize2) {
    var era = date2.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y3(date2, token, localize2) {
    if (token === "yo") {
      var signedYear = date2.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return formatters$3.y(date2, token);
  },
  // Local week-numbering year
  Y: function Y2(date2, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date2, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R2(date2, token) {
    var isoWeekYear = getUTCISOWeekYear(date2);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u2(date2, token) {
    var year = date2.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q2(date2, token, localize2) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q2(date2, token, localize2) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M3(date2, token, localize2) {
    var month = date2.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return formatters$3.M(date2, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L2(date2, token, localize2) {
    var month = date2.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w2(date2, token, localize2, options) {
    var week = getUTCWeek(date2, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I2(date2, token, localize2) {
    var isoWeek = getUTCISOWeek(date2);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d3(date2, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date2.getUTCDate(), {
        unit: "date"
      });
    }
    return formatters$3.d(date2, token);
  },
  // Day of year
  D: function D2(date2, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date2);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E2(date2, token, localize2) {
    var dayOfWeek = date2.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e2(date2, token, localize2, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c6(date2, token, localize2, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date2, token, localize2) {
    var dayOfWeek = date2.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date2, token, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b2(date2, token, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B2(date2, token, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h3(date2, token, localize2) {
    if (token === "ho") {
      var hours = date2.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return formatters$3.h(date2, token);
  },
  // Hour [0-23]
  H: function H3(date2, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date2.getUTCHours(), {
        unit: "hour"
      });
    }
    return formatters$3.H(date2, token);
  },
  // Hour [0-11]
  K: function K2(date2, token, localize2) {
    var hours = date2.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k2(date2, token, localize2) {
    var hours = date2.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m3(date2, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date2.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return formatters$3.m(date2, token);
  },
  // Second
  s: function s2(date2, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date2.getUTCSeconds(), {
        unit: "second"
      });
    }
    return formatters$3.s(date2, token);
  },
  // Fraction of second
  S: function S3(date2, token) {
    return formatters$3.S(date2, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X2(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x2(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O2(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z2(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t2(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T2(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
const formatters$1 = formatters;
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
const longFormatters$1 = longFormatters;
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance$1 = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
const formatDistance$2 = formatDistance$1;
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width2 = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width2] || args.formats[args.defaultWidth];
    return format2;
  };
}
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatLong$1 = formatLong;
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
const formatRelative$1 = formatRelative;
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width2 = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width2] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index2 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index2];
  };
}
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number2 = Number(dirtyNumber);
  var rem100 = number2 % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number2 + "st";
      case 2:
        return number2 + "nd";
      case 3:
        return number2 + "rd";
    }
  }
  return number2 + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
const localize$1 = localize;
function buildMatchFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width2 = options.width;
    var matchPattern = width2 && args.matchPatterns[width2] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string2.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width2 && args.parsePatterns[width2] || args.parsePatterns[args.defaultParseWidth];
    var key2 = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value2;
    value2 = args.valueCallback ? args.valueCallback(key2) : key2;
    value2 = options.valueCallback ? options.valueCallback(value2) : value2;
    var rest = string2.slice(matchedString.length);
    return {
      value: value2,
      rest
    };
  };
}
function findKey(object2, predicate) {
  for (var key2 in object2) {
    if (object2.hasOwnProperty(key2) && predicate(object2[key2])) {
      return key2;
    }
  }
  return void 0;
}
function findIndex(array2, predicate) {
  for (var key2 = 0; key2 < array2.length; key2++) {
    if (predicate(array2[key2])) {
      return key2;
    }
  }
  return void 0;
}
function buildMatchPatternFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string2.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string2.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value2 = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value2 = options.valueCallback ? options.valueCallback(value2) : value2;
    var rest = string2.slice(matchedString.length);
    return {
      value: value2,
      rest
    };
  };
}
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value2) {
      return parseInt(value2, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index2) {
      return index2 + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const match$1 = match;
var locale = {
  code: "en-US",
  formatDistance: formatDistance$2,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
const defaultLocale = locale;
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring2) {
    var firstCharacter = substring2[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters$1[firstCharacter];
      return longFormatter(substring2, locale2.formatLong);
    }
    return substring2;
  }).join("").match(formattingTokensRegExp).map(function(substring2) {
    if (substring2 === "''") {
      return "'";
    }
    var firstCharacter = substring2[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring2);
    }
    var formatter = formatters$1[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring2)) {
        throwProtectedError(substring2, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring2)) {
        throwProtectedError(substring2, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring2, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring2;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}
function assign(target, object2) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property2 in object2) {
    if (Object.prototype.hasOwnProperty.call(object2, property2)) {
      target[property2] = object2[property2];
    }
  }
  return target;
}
function cloneObject(object2) {
  return assign({}, object2);
}
var MINUTES_IN_DAY = 1440;
var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_TWO_MONTHS = 86400;
function formatDistance(dirtyDate, dirtyBaseDate, options) {
  var _ref, _options$locale;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
  if (!locale2.formatDistance) {
    throw new RangeError("locale must contain formatDistance property");
  }
  var comparison = compareAsc(dirtyDate, dirtyBaseDate);
  if (isNaN(comparison)) {
    throw new RangeError("Invalid time value");
  }
  var localizeOptions = assign(cloneObject(options), {
    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),
    comparison
  });
  var dateLeft;
  var dateRight;
  if (comparison > 0) {
    dateLeft = toDate(dirtyBaseDate);
    dateRight = toDate(dirtyDate);
  } else {
    dateLeft = toDate(dirtyDate);
    dateRight = toDate(dirtyBaseDate);
  }
  var seconds = differenceInSeconds(dateRight, dateLeft);
  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1e3;
  var minutes = Math.round((seconds - offsetInSeconds) / 60);
  var months;
  if (minutes < 2) {
    if (options !== null && options !== void 0 && options.includeSeconds) {
      if (seconds < 5) {
        return locale2.formatDistance("lessThanXSeconds", 5, localizeOptions);
      } else if (seconds < 10) {
        return locale2.formatDistance("lessThanXSeconds", 10, localizeOptions);
      } else if (seconds < 20) {
        return locale2.formatDistance("lessThanXSeconds", 20, localizeOptions);
      } else if (seconds < 40) {
        return locale2.formatDistance("halfAMinute", 0, localizeOptions);
      } else if (seconds < 60) {
        return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale2.formatDistance("xMinutes", 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale2.formatDistance("xMinutes", minutes, localizeOptions);
      }
    }
  } else if (minutes < 45) {
    return locale2.formatDistance("xMinutes", minutes, localizeOptions);
  } else if (minutes < 90) {
    return locale2.formatDistance("aboutXHours", 1, localizeOptions);
  } else if (minutes < MINUTES_IN_DAY) {
    var hours = Math.round(minutes / 60);
    return locale2.formatDistance("aboutXHours", hours, localizeOptions);
  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
    return locale2.formatDistance("xDays", 1, localizeOptions);
  } else if (minutes < MINUTES_IN_MONTH) {
    var days = Math.round(minutes / MINUTES_IN_DAY);
    return locale2.formatDistance("xDays", days, localizeOptions);
  } else if (minutes < MINUTES_IN_TWO_MONTHS) {
    months = Math.round(minutes / MINUTES_IN_MONTH);
    return locale2.formatDistance("aboutXMonths", months, localizeOptions);
  }
  months = differenceInMonths(dateRight, dateLeft);
  if (months < 12) {
    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
    return locale2.formatDistance("xMonths", nearestMonth, localizeOptions);
  } else {
    var monthsSinceStartOfYear = months % 12;
    var years = Math.floor(months / 12);
    if (monthsSinceStartOfYear < 3) {
      return locale2.formatDistance("aboutXYears", years, localizeOptions);
    } else if (monthsSinceStartOfYear < 9) {
      return locale2.formatDistance("overXYears", years, localizeOptions);
    } else {
      return locale2.formatDistance("almostXYears", years + 1, localizeOptions);
    }
  }
}
function formatDistanceToNow(dirtyDate, options) {
  requiredArgs(1, arguments);
  return formatDistance(dirtyDate, Date.now(), options);
}
const slider = "_slider_18hyd_17";
const round = "_round_18hyd_60";
const styles$8 = {
  "switch": "_switch_18hyd_2",
  slider,
  round
};
const Toggle = ({ onChange, checkedStatus }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: styles$8.switch, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("input", { checked: checkedStatus, type: "checkbox", onChange }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `${styles$8.slider} ${styles$8.round}` })
  ] });
};
const SlideIn = ({ isOpen = true, children, delay, loop: loop2 = false }) => {
  const transition = useTransition(isOpen, {
    from: {
      position: "absolute",
      right: "-1000px",
      opacity: 0
    },
    enter: {
      position: "relative",
      right: "0",
      opacity: 1
    },
    leave: {
      right: "0",
      opacity: 0
    },
    delay,
    loop: loop2
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: transition(
    (style, isOpen2) => !!isOpen2 && /* @__PURE__ */ jsxRuntimeExports.jsx(animated.div, { style, children })
  ) });
};
const SharedDialog = ({
  nav,
  main,
  primary,
  secondary,
  bg: bg2 = "primary"
}) => {
  let background = "";
  if (bg2 === "secondary") {
    background = "core-black-contrast-2";
  }
  if (bg2 === "primary") {
    background = "core-black-contrast";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full bg-black absolute left-0 top-0 bottom-0 right-0 grid grid-rows-[auto_1fr] grid-cols-1 overflow-hidden", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative top-0 left-0 right-0 max-h-[54px]", children: nav ? nav : /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-[48px]" }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: `overflow-y-auto grid grid-cols-[1fr_minmax(0,_560px)_1fr] lg:grid-cols-[1fr_minmax(0,_900px)_1fr]`,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid md:grid-rows-1", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: `px-6 pt-8 pb-8 h-max mb-8 ${background} rounded mx-4 md:mx-0 md:mt-0 md:self-center`,
                children: [
                  main,
                  primary,
                  secondary && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "md:block hidden", children: secondary })
                ]
              }
            ),
            secondary && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "md:hidden flex mx-4 items-end mb-8", children: secondary })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
        ]
      }
    )
  ] }) });
};
const ComposableModal = ({ children, dismiss, extraClass }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `fixed left-0 right-0 bottom-0 top-0 grid grid-cols-[1fr_minmax(0,_560px)_1fr] ${extraClass && extraClass}`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        onClick: dismiss,
        id: "backdrop",
        className: "backdrop-blur-sm fixed left-0 right-0 top-0 bottom-0"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "relative z-[21] h-full", children }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
  ] });
};
const Cross = ({ dismiss }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { onClick: dismiss, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "24",
      height: "24",
      viewBox: "0 0 24 24",
      strokeWidth: "1.5",
      stroke: "currentColor",
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M18 6l-12 12" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M6 6l12 12" })
      ]
    }
  ) });
};
const BackupLogs = () => {
  const { _backupLogs, promptBackupLogs, _promptBackupLogs, getBackupLogs, loaded } = reactExports.useContext(appContext);
  const springProps = useSpring({
    opacity: _promptBackupLogs ? 1 : 0,
    transform: _promptBackupLogs ? "translateY(0%) scale(1)" : "translateY(-50%) scale(0.8)",
    config: config$1.stiff
  });
  reactExports.useEffect(() => {
    if (loaded.current)
      getBackupLogs();
  }, [_backupLogs, loaded]);
  if (!_promptBackupLogs) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: _promptBackupLogs && reactDomExports.createPortal(
    /* @__PURE__ */ jsxRuntimeExports.jsx(ComposableModal, { dismiss: promptBackupLogs, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      animated.div,
      {
        style: springProps,
        className: "max-w-lg w-full bg-black rounded p-4 min-h-[50vh] md:min-h-[350px] shadow-sm shadow-white mx-4",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-rows-[min-content]", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] p-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold text-white", children: "Logs" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Cross, { dismiss: promptBackupLogs })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "px-4 text-sm flex-1 overflow-y-auto", children: _backupLogs.length > 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-h-80 overflow-y-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full bg-black", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { className: "bg-gradient-to-r from-blue-500 to-indigo-500 sticky top-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 px-4 text-left text-white", children: "Timestamp" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 px-4 text-left text-white", children: "Status" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 px-4 text-left text-white", children: "Size" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 px-4 text-left text-white", children: "Message" })
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: _backupLogs.sort((a3, b3) => b3.timestamp - a3.timestamp).map((log, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "tr",
              {
                className: index2 % 2 === 0 ? "bg-black text-white" : "bg-gray-900 text-white",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-4", children: formatDistanceToNow(
                    new Date(log.timestamp),
                    { addSuffix: true }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("td", { className: "py-3 px-4", children: [
                    log.status === 1 && "Skipped",
                    log.status === 2 && "Done",
                    log.status === 0 && "Pending"
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-4", children: log.size }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-3 px-4", children: log.message })
                ]
              },
              index2
            )) })
          ] }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center text-gray-400", children: "No logs available yet." }) })
        ] })
      }
    ) }) }),
    document.body
  ) });
};
const ConfirmDelete = ({
  isDeleteConfirmationOpen,
  deleteBackup,
  close
}) => {
  if (!isDeleteConfirmationOpen) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ComposableModal, { extraClass: "z-[1000]", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 overflow-y-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "span",
      {
        className: "hidden sm:inline-block sm:align-middle sm:h-screen",
        "aria-hidden": "true",
        children: "​"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "svg",
        {
          className: "h-6 w-6 text-red-600",
          xmlns: "http://www.w3.org/2000/svg",
          fill: "none",
          viewBox: "0 0 24 24",
          stroke: "currentColor",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "path",
            {
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 2,
              d: "M6 18L18 6M6 6l12 12"
            }
          )
        }
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-3 text-center sm:mt-5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-lg leading-6 font-medium text-gray-900", children: "Delete Backup?" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-gray-500", children: [
          "Are you sure you want to delete the backup",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium break-all inline-block", children: isDeleteConfirmationOpen }),
          "?"
        ] }) })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-5 sm:mt-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: deleteBackup,
            type: "button",
            className: "inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:text-sm",
            children: "Delete"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: close,
            type: "button",
            className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm",
            children: "Cancel"
          }
        )
      ] })
    ] }) })
  ] }) }) });
};
const Backups = () => {
  const [searchText, setSearchText] = reactExports.useState("");
  const { getBackups, backups, _promptBackups, promptBackups, loaded } = reactExports.useContext(appContext);
  const [_promptDeleteFile, setPromptDeleteFile] = reactExports.useState(
    false
  );
  const [dropdownIndex, setDropdownIndex] = reactExports.useState(-1);
  const dropdownRef = reactExports.useRef(null);
  const springProps = useSpring({
    opacity: _promptBackups ? 1 : 0,
    transform: _promptBackups ? "translateY(0%) scale(1)" : "translateY(-50%) scale(0.8)",
    config: config$1.stiff
  });
  const toggleDropdown = (index2) => {
    if (dropdownIndex === index2) {
      setDropdownIndex(-1);
    } else {
      setDropdownIndex(index2);
    }
  };
  const promptDeleteFile = (file) => {
    setPromptDeleteFile(file);
  };
  reactExports.useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setDropdownIndex(-1);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdownRef]);
  reactExports.useEffect(() => {
    if (loaded && loaded.current) {
      getBackups();
    }
  }, [_promptBackups, loaded]);
  const handleChange = (e3) => {
    setSearchText(e3.target.value);
  };
  const createDownloadLink = (folder, mdsfile) => {
    const origFilePath = `/${folder}/${mdsfile}`;
    const newFilePath = `/my_downloads/${mdsfile}_minima_download_as_file_`;
    window.MDS.file.copytoweb(origFilePath, newFilePath, function() {
      const url = `my_downloads/${mdsfile}_minima_download_as_file_`;
      const temporaryLink = document.createElement("a");
      temporaryLink.style.display = "none";
      temporaryLink.target = "_blank";
      temporaryLink.href = url;
      temporaryLink.click();
      window.MDS.file.deletefromweb(url, function() {
        temporaryLink.remove();
      });
    });
  };
  const handleDelete = async (backupFile) => {
    await deleteFile("/backups/" + backupFile).then(() => {
      getBackups();
      promptDeleteFile(false);
    });
  };
  const makeTimestamp2 = (filename) => {
    const regex = /^(auto_)?minima_backup_(\d+)__([^_]+)_(\d+)\.bak$/;
    const match2 = filename.match(regex);
    filename.match(regex);
    if (!match2)
      return "";
    const timestamp = parseInt(match2[2]);
    const timestampDate = new Date(timestamp);
    return format(timestampDate, "dd/MM/yyyy HH:mm");
  };
  const makeAuto2 = (filename) => {
    const regex = /^(auto_)?minima_backup_(\d+)__([^_]+)_(\d+)\.bak$/;
    const match2 = filename.match(regex);
    filename.match(regex);
    if (!match2)
      return null;
    const isAuto = match2[1] === "auto_";
    return isAuto ? "Auto" : "";
  };
  if (!_promptBackups) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    _promptDeleteFile && /* @__PURE__ */ jsxRuntimeExports.jsx(
      ConfirmDelete,
      {
        deleteBackup: () => handleDelete(_promptDeleteFile),
        close: () => promptDeleteFile(false),
        isDeleteConfirmationOpen: _promptDeleteFile
      }
    ),
    _promptBackups && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(ComposableModal, { dismiss: promptBackups, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        animated.div,
        {
          style: springProps,
          className: "max-w-lg w-full bg-black rounded p-4 py-0 shadow-sm shadow-white mx-4 min-h-[50vh] md:min-h-[350px] max-h-32 overflow-y-auto",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-rows-[min-content]", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "sticky top-0 z-10 bg-black p-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto]", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold text-white", children: "Latest Backups" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Cross, { dismiss: promptBackups })
              ] }),
              !!backups.length && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "my-4 bg-black", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  disabled: false,
                  id: "search",
                  name: "search",
                  type: "text",
                  placeholder: "Search backups by date",
                  onChange: handleChange,
                  className: "w-full bg-black text-white border border-gray-600 rounded px-3 py-2",
                  autoComplete: "off"
                }
              ) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "px-4 text-sm", children: backups.length ? /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "pb-4 grid grid-cols-1 gap-4 mb-4", children: [
              searchText.length ? backups.filter(
                (o) => makeTimestamp2(o.name).includes(searchText)
              ).map((b3, i2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "li",
                {
                  onClick: () => toggleDropdown(i2),
                  className: "relative font-normal p-4 pr-1 core-grey-5 rounded color-black grid grid-cols-[1fr_auto] md:grid-cols-1",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "font-bold", children: [
                        "My backup",
                        " ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-violet-300", children: makeAuto2(b3.name) })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium text-sm break-word", children: makeTimestamp2(b3.name) })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "md:hidden flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "svg",
                      {
                        onClick: () => toggleDropdown(i2),
                        xmlns: "http://www.w3.org/2000/svg",
                        width: "24",
                        height: "24",
                        viewBox: "0 0 24 24",
                        strokeWidth: "1.5",
                        stroke: "#000000",
                        fill: "none",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "path",
                            {
                              stroke: "none",
                              d: "M0 0h24v24H0z",
                              fill: "none"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" })
                        ]
                      }
                    ) }),
                    dropdownIndex === i2 && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        ref: dropdownRef,
                        className: "absolute right-0 md:left-0 mt-2 w-auto bg-white z-[1] border border-gray-200 rounded-md shadow-md",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "a",
                            {
                              className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                              onClick: (e3) => {
                                e3.stopPropagation();
                                promptDeleteFile(b3.name);
                              },
                              children: "Delete"
                            }
                          ),
                          window.navigator.userAgent.includes(
                            "Minima Browser"
                          ) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "a",
                            {
                              className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                              onClick: async (e3) => {
                                e3.stopPropagation();
                                const fullPath = await getPath(
                                  "/backups/" + b3.name
                                );
                                Android.shareFile(
                                  fullPath,
                                  "*/*"
                                );
                              },
                              children: "Share"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "a",
                            {
                              className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                              onClick: (e3) => {
                                e3.stopPropagation();
                                if (window.navigator.userAgent.includes(
                                  "Minima Browser"
                                )) {
                                  return Android.fileDownload(
                                    window.MDS.minidappuid,
                                    "/backups/" + b3.name
                                  );
                                }
                                createDownloadLink(
                                  "backups",
                                  b3.name
                                );
                              },
                              children: "Download"
                            }
                          )
                        ]
                      }
                    )
                  ]
                },
                i2
              )) : backups.map((b3, i2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "li",
                {
                  onClick: () => toggleDropdown(i2),
                  className: "relative font-normal p-4 pr-1 core-grey-5 rounded color-black grid grid-cols-[1fr_auto] md:grid-cols-1",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "font-bold", children: [
                        "My backup",
                        " ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-violet-300", children: makeAuto2(b3.name) })
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium text-sm break-word", children: makeTimestamp2(b3.name) })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "md:hidden flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "svg",
                      {
                        onClick: () => toggleDropdown(i2),
                        xmlns: "http://www.w3.org/2000/svg",
                        width: "24",
                        height: "24",
                        viewBox: "0 0 24 24",
                        strokeWidth: "1.5",
                        stroke: "#000000",
                        fill: "none",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "path",
                            {
                              stroke: "none",
                              d: "M0 0h24v24H0z",
                              fill: "none"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" })
                        ]
                      }
                    ) }),
                    dropdownIndex === i2 && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        ref: dropdownRef,
                        className: "absolute right-0 md:left-0 mt-2 w-auto bg-white z-[25] border border-gray-200 rounded-md shadow-md",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "a",
                            {
                              className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                              onClick: (e3) => {
                                e3.stopPropagation();
                                promptDeleteFile(b3.name);
                              },
                              children: "Delete"
                            }
                          ),
                          window.navigator.userAgent.includes(
                            "Minima Browser"
                          ) && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "a",
                            {
                              className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                              onClick: async (e3) => {
                                e3.stopPropagation();
                                const fullPath = await getPath(
                                  "/backups/" + b3.name
                                );
                                Android.shareFile(fullPath, "*/*");
                              },
                              children: "Share"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "a",
                            {
                              className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                              onClick: (e3) => {
                                e3.stopPropagation();
                                if (window.navigator.userAgent.includes(
                                  "Minima Browser"
                                )) {
                                  return Android.fileDownload(
                                    window.MDS.minidappuid,
                                    "/backups/" + b3.name
                                  );
                                }
                                createDownloadLink("backups", b3.name);
                              },
                              children: "Download"
                            }
                          )
                        ]
                      }
                    )
                  ]
                },
                i2
              )),
              !!searchText.length && backups.filter(
                (o) => makeTimestamp2(o.name).includes(searchText)
              ).length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center", children: "No results found" })
            ] }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-6 sticky top-0 z-10 bg-black", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  disabled: false,
                  id: "search",
                  name: "search",
                  type: "text",
                  placeholder: "Search backups by date",
                  onChange: handleChange,
                  className: "w-full bg-black text-white border border-gray-600 rounded px-3 py-2",
                  autoComplete: "off"
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center text-gray-400", children: "You have no recent backups" })
            ] }) }) })
          ] })
        }
      ) }) }),
      document.body
    )
  ] });
};
const validationSchema$5 = create$3().shape({
  password: create$6().matches(/^[~!@#=?+<>,._'/()?a-zA-Z0-9-]+$/, "Invalid character").min(12, "Password must be at least 12 characters long"),
  confirmPassword: create$6().test("matchy-passwords", function(val2) {
    const { path, parent: parent2, createError } = this;
    if (parent2.password === void 0) {
      return true;
    }
    if (val2 === void 0 && parent2.password !== void 0) {
      return createError({ path, message: "Please re-enter your password" });
    }
    const pwd = parent2.password;
    const matching = pwd === val2;
    if (matching) {
      return true;
    }
    return createError({ path, message: "Passwords do not match" });
  })
});
const BackupNode = () => {
  const { promptBackups, loaded } = reactExports.useContext(appContext);
  const navigate = useNavigate();
  const [step, setStep] = reactExports.useState(0);
  const [hidePassword, togglePasswordVisibility] = reactExports.useState(false);
  const [hideConfirmPassword, toggleConfirmPasswordVisiblity] = reactExports.useState(false);
  const [autoBackupStatus, setAutoBackupStatus] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [data2, setData] = reactExports.useState(false);
  const { authNavigate } = useAuth();
  const {
    vaultLocked,
    setModal,
    setBackButton,
    displayBackButton: displayHeaderBackButton,
    promptBackupLogs
  } = reactExports.useContext(appContext);
  reactExports.useEffect(() => {
    if (step === 0) {
      return setBackButton({
        display: true,
        to: "/dashboard",
        title: "Back"
      });
    }
    if (step === 1) {
      return setBackButton({
        display: true,
        onClickHandler: () => setStep(0),
        title: "Back"
      });
    }
  }, [step, setBackButton]);
  const createDownloadLink = (folder, mdsfile) => {
    const origFilePath = `/${folder}/${mdsfile}`;
    const newFilePath = `/my_downloads/${mdsfile}_minima_download_as_file_`;
    window.MDS.file.copytoweb(origFilePath, newFilePath, function() {
      const url = `my_downloads/${mdsfile}_minima_download_as_file_`;
      const temporaryLink = document.createElement("a");
      temporaryLink.style.display = "none";
      temporaryLink.target = "_blank";
      temporaryLink.href = url;
      temporaryLink.click();
      window.MDS.file.deletefromweb(url, function() {
        temporaryLink.remove();
      });
    });
  };
  const getBackupStatus$1 = async () => {
    await getBackupStatus().then((response) => {
      if (response.status) {
        const backupStatus = JSON.parse(response.value);
        return setAutoBackupStatus(backupStatus.active);
      }
      return setAutoBackupStatus(false);
    });
  };
  reactExports.useEffect(() => {
    if (loaded.current)
      getBackupStatus$1();
  }, [loaded]);
  const toggleBackupStatus$1 = async (e3) => {
    const togglingOff = e3.target.checked === false;
    const togglingOn = e3.target.checked === true;
    if (togglingOff) {
      authNavigate("/dashboard/modal", PERMISSIONS.CAN_VIEW_MODAL);
      setModal({
        content: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col justify-center items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("img", { className: "mb-4", alt: "informative", src: "./assets/error.svg" }),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8", children: "Deactivate auto backup?" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-6", children: "Daily backups help protect your node." })
        ] }),
        primaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            onClick: async () => {
              await toggleBackupStatus(e3.target.checked);
              window.MDS.keypair.set("autopassword", "");
              setModal({
                content: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col text-center justify-center items-center", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "img",
                    {
                      className: "mb-4",
                      alt: "informative",
                      src: "./assets/error.svg"
                    }
                  ),
                  " ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8", children: "Auto-backup deactivated" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-6", children: "To re-activate auto-backup, go to Backup Node in the Settings menu." })
                ] }),
                primaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
                secondaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    variant: "tertiary",
                    onClick: () => authNavigate("/dashboard/backup", []),
                    children: "Cancel"
                  }
                )
              });
            },
            children: "Turn off auto-backup"
          }
        ),
        secondaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "tertiary",
            onClick: () => authNavigate("/dashboard/backup", []),
            children: "Cancel"
          }
        )
      });
    }
    if (togglingOn) {
      authNavigate(
        "/dashboard/backup/autocreatepassword",
        PERMISSIONS.CAN_VIEW_AUTOCREATEPASSWORD
      );
    }
    getBackupStatus$1();
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Backups, {}),
    step === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { isOpen: true, delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { to: "/dashboard", title: "Back" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left", children: "Backup node" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3", children: [
          "Your backup will contain your private keys, current chain and the proofs of your coins that no one else has. ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          "It is recommended to backup your node at least monthly to ensure a successful restore. The more recent your backup is, the easier it will be to re-sync to the chain when restoring."
        ] }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: " text-left", children: "Before taking a backup, check that you are in sync with the chain." }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast-2 p-4 rounded", children: [
          !vaultLocked && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " text-left mb-6", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-base pb-4 font-bold", children: "Your node is unlocked." }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-base font-medium", children: [
              "Consider",
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "a",
                {
                  className: "hover:cursor-pointer",
                  onClick: () => navigate("/dashboard/lockprivatekeys"),
                  children: "locking"
                }
              ),
              " ",
              "your private keys so they are not exposed if someone gets hold of your backup."
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(1), children: "Backup node" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm password-label mr-4 ml-4", children: "Always store your backup in a secure location offline and never share your backup with anyone." }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "div",
          {
            onClick: promptBackups,
            className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer",
            children: [
              "Browse internal backups",
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-0 h-full px-5 flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  width: "8",
                  height: "12",
                  viewBox: "0 0 8 12",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                      fill: "#F4F4F5"
                    }
                  )
                }
              ) })
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "make-svg-inline", children: [
              "Auto-backup",
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "svg",
                {
                  className: "mx-2 mb-1",
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "24",
                  height: "24",
                  viewBox: "0 0 24 24",
                  fill: "none",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "mask",
                      {
                        id: "mask0_583_16266",
                        maskUnits: "userSpaceOnUse",
                        x: "0",
                        y: "0",
                        width: "24",
                        height: "24",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "24", height: "24", fill: "#D9D9D9" })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_583_16266)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "path",
                      {
                        d: "M6.49998 19.5C5.11794 19.5 3.9391 19.0205 2.96345 18.0617C1.98782 17.1029 1.5 15.9311 1.5 14.5461C1.5 13.3038 1.89968 12.2112 2.69905 11.2683C3.49842 10.3253 4.48976 9.76667 5.67308 9.59232C5.99359 8.09744 6.74519 6.875 7.92788 5.925C9.11056 4.975 10.4679 4.5 12 4.5C13.8107 4.5 15.3467 5.13066 16.608 6.39198C17.8693 7.65328 18.5 9.18928 18.5 11V11.5H18.8077C19.8615 11.5821 20.7403 12.0058 21.4442 12.7712C22.148 13.5365 22.5 14.4461 22.5 15.5C22.5 16.6153 22.1153 17.5609 21.3461 18.3365C20.5769 19.1121 19.6346 19.5 18.5192 19.5H13.0577C12.5525 19.5 12.125 19.325 11.775 18.975C11.425 18.625 11.25 18.1974 11.25 17.6923V12.2153L9.39998 14.0346L8.34615 12.9904L12 9.33655L15.6538 12.9904L14.6 14.0346L12.75 12.2153V17.6923C12.75 17.7692 12.782 17.8397 12.8461 17.9038C12.9102 17.9679 12.9807 18 13.0577 18H18.5C19.2 18 19.7916 17.7583 20.275 17.275C20.7583 16.7916 21 16.2 21 15.5C21 14.8 20.7583 14.2083 20.275 13.725C19.7916 13.2416 19.2 13 18.5 13H17V11C17 9.61664 16.5125 8.43748 15.5375 7.46248C14.5625 6.48748 13.3833 5.99998 12 5.99998C10.6166 5.99998 9.43748 6.48748 8.46248 7.46248C7.48748 8.43748 6.99998 9.61664 6.99998 11H6.48075C5.53332 11 4.71633 11.3416 4.02978 12.025C3.34324 12.7083 2.99998 13.5333 2.99998 14.5C2.99998 15.4666 3.34164 16.2916 4.02498 16.975C4.70831 17.6583 5.53331 18 6.49998 18H8.99998V19.5H6.49998Z",
                        fill: "#F9F9FA"
                      }
                    ) })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-0 h-full px-5 flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Toggle,
              {
                checkedStatus: autoBackupStatus,
                onChange: toggleBackupStatus$1
              }
            ) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              onClick: promptBackupLogs,
              className: "flex gap-1 items-center",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("a", { className: "text-sm cursor-pointer", children: "View backup logs" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "16",
                    height: "16",
                    viewBox: "0 0 24 24",
                    strokeWidth: "1.5",
                    stroke: "#ffec00",
                    fill: "none",
                    strokeLinecap: "round",
                    strokeLinejoin: "round",
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M9 9v-1a3 3 0 0 1 6 0v1" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M8 9h8a6 6 0 0 1 1 3v3a5 5 0 0 1 -10 0v-3a6 6 0 0 1 1 -3" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M3 13l4 0" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M17 13l4 0" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 20l0 -6" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M4 19l3.35 -2" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M20 19l-3.35 -2" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M4 7l3.75 2.4" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M20 7l-3.75 2.4" })
                    ]
                  }
                )
              ]
            }
          ) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm password-label mr-4 ml-4", children: [
          "Auto backups will be taken every 24 hours. ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          "Only the most recent 14 backups will be stored (including manual backups), so you should download and move them to an offline device. The password provided will be required if you need to restore the backup."
        ] }) })
      ] })
    ] }) }) }),
    step === 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { isOpen: true, delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { onClickHandler: () => setStep(0), title: "Back" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left", children: "Create password" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3", children: [
          "Create a password for this backup, you will be required to enter this password if you need to restore this backup.",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          "This is not the same as the password used to lock your private keys."
        ] }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Formik,
          {
            validationSchema: validationSchema$5,
            initialValues: {
              password: "",
              confirmPassword: "",
              txpows: 0
            },
            onSubmit: async (formData) => {
              try {
                const now = /* @__PURE__ */ new Date();
                const dateCreation = format(now, "__dMMMyyyy_Hmm");
                const fileName = `minima_backup_${now.getTime()}` + dateCreation + ".bak";
                const fullPath = await getPath(
                  "/backups/" + fileName
                );
                const { password } = formData;
                await createBackup(fullPath, password).then((resp) => {
                  setData(resp);
                }).catch((err) => {
                  throw err;
                });
              } catch (error2) {
                setError(error2);
              }
            },
            children: ({
              handleSubmit,
              isSubmitting,
              isValid: isValid2,
              errors,
              values,
              touched,
              handleChange,
              handleBlur
            }) => /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "core-black-contrast-2 p-4 rounded flex flex-col gap-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "form",
              {
                autoComplete: "off",
                onSubmit: handleSubmit,
                className: "flex flex-col gap-4",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      disabled: isSubmitting,
                      extraClass: "core-black-contrast",
                      autoComplete: "new-password",
                      handleEndIconClick: () => togglePasswordVisibility(
                        (prevState) => !prevState
                      ),
                      type: !hidePassword ? "password" : "text",
                      placeholder: "Enter password",
                      name: "password",
                      id: "password",
                      error: touched.password && errors.password ? errors.password : false,
                      value: values.password,
                      onChange: handleChange,
                      onBlur: handleBlur,
                      endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hidePassword })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      disabled: isSubmitting || values.password.length === 0,
                      extraClass: "core-black-contrast",
                      autoComplete: "new-password",
                      handleEndIconClick: () => toggleConfirmPasswordVisiblity(
                        (prevState) => !prevState
                      ),
                      type: !hideConfirmPassword ? "password" : "text",
                      placeholder: "Confirm password",
                      name: "confirmPassword",
                      id: "confirmPassword",
                      error: touched.confirmPassword && errors.confirmPassword ? errors.confirmPassword : false,
                      value: values.confirmPassword,
                      onChange: handleChange,
                      onBlur: handleBlur,
                      endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        TogglePasswordIcon,
                        {
                          toggle: hideConfirmPassword
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "submit",
                      disabled: isSubmitting || !isValid2,
                      children: "Backup node"
                    }
                  ) })
                ]
              }
            ) }) })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm password-label mr-4 ml-4", children: [
          "Enter a password over 12 characters using a-z, A-Z, 0-9 and",
          " ",
          "!@#=?+<>,.-_'()/",
          " symbols only. ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          "Your password cannot contain spaces. ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
          " Please make sure you save this password somewhere safe, it cannot be recovered if lost."
        ] }) })
      ] })
    ] }) }) }),
    data2 && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-8 flex items-center flex-col text-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-2",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_850_14572",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_850_14572)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M16.8205 51.9997C15.4735 51.9997 14.3333 51.5331 13.4 50.5997C12.4667 49.6664 12 48.5262 12 47.1792V39.9998H15.9999V47.1792C15.9999 47.3844 16.0854 47.5724 16.2563 47.7434C16.4273 47.9143 16.6154 47.9998 16.8205 47.9998H47.1793C47.3845 47.9998 47.5726 47.9143 47.7435 47.7434C47.9145 47.5724 47.9999 47.3844 47.9999 47.1792V39.9998H51.9999V47.1792C51.9999 48.5262 51.5332 49.6664 50.5999 50.5997C49.6665 51.5331 48.5264 51.9997 47.1793 51.9997H16.8205ZM31.9999 41.6407L20.6155 30.2563L23.4257 27.3641L30 33.9384V11.5383H33.9999V33.9384L40.5742 27.3641L43.3844 30.2563L31.9999 41.6407Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8", children: "Download your backup" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "break-all", children: [
              "Download your backup file locally ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-good", children: data2.file.split("/backups/")[1] ? data2.file.split("/backups/")[1] : data2.file.split("\\backups\\")[1] }),
              " ",
              "which was create on block",
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-good", children: data2.block }),
              " with a size of ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-good", children: data2.size }),
              " and save it in ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "a secure location."
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm mt-4 opacity-80", children: "(It will already be stored in your internal backups)" })
          ] }) }),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              onClick: () => {
                if (window.navigator.userAgent.includes("Minima Browser")) {
                  return Android.fileDownload(
                    window.MDS.minidappuid,
                    "/backups/" + data2.file.split("/backups/")[1]
                  );
                }
                createDownloadLink(
                  "backups",
                  data2.file.split("/backups/")[1] ? data2.file.split("/backups/")[1] : data2.file.split("\\backups\\")[1]
                );
              },
              children: "Download backup"
            }
          ),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              extraClass: "mt-4",
              variant: "tertiary",
              onClick: () => {
                setData(false);
                setStep(0);
              },
              children: "Close"
            }
          )
        }
      ),
      document.body
    ),
    error && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-3 inline",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_594_13339",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_594_13339)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Hmm.. something went wrong." }),
            typeof error === "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: error }),
            typeof error === "object" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: JSON.stringify(error) })
          ] }),
          primary: null,
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              onClick: () => {
                setError(false);
              },
              children: "Cancel"
            }
          )
        }
      ),
      document.body
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(BackupLogs, {})
  ] });
};
const FileChooser = ({
  accept,
  onChange,
  onBlur,
  placeholder,
  autoComplete,
  type,
  name: name2,
  id: id2,
  extraClass,
  endIcon,
  error,
  handleEndIconClick,
  onKeyUp,
  keyValue,
  disabled
}) => {
  const [focus, setFocus] = reactExports.useState(false);
  let wrapperBase = "flex flex-row relative";
  let base = "core-grey-20 font-medium color-black w-full px-4 py-3.5 rounded rounded-r-none disabled:opacity-40 disabled:cursor-not-allowed focus:outline-none";
  if (extraClass) {
    base += ` ${extraClass}`;
  }
  if (error) {
    wrapperBase += " form-error-border";
  }
  if (focus) {
    wrapperBase += " input-outline";
  }
  if (!focus) {
    wrapperBase += " input-no-outline";
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `flex flex-col gap-2`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: wrapperBase, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          disabled,
          autoComplete: autoComplete ? autoComplete : "",
          onBlur,
          name: name2,
          id: id2,
          type,
          placeholder,
          className: `${base} ${endIcon ? "pr-12" : ""}`,
          onChange,
          accept,
          onKeyUp,
          onFocus: () => setFocus(true)
        },
        keyValue
      ),
      !!endIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          onClick: disabled ? void 0 : handleEndIconClick,
          className: "pr-4 absolute right-[1px] top-[12.5px] bottom-0",
          children: endIcon
        }
      )
    ] }),
    error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left", children: error })
  ] });
};
const tooltip = "_tooltip_1frir_1";
const styles$7 = {
  tooltip,
  "tooltip-hook": "_tooltip-hook_1frir_20"
};
const Tooltip = ({ content: content2, position: position2, onClick, extraClass }) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { onClick, className: `${styles$7.tooltip} ${extraClass}`, children: [
    content2,
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        className: styles$7["tooltip-hook"],
        style: { left: position2 + "px" }
      }
    )
  ] });
};
var lottie$1 = { exports: {} };
(function(module, exports) {
  typeof navigator !== "undefined" && function(global2, factory) {
    module.exports = factory();
  }(commonjsGlobal, function() {
    var svgNS = "http://www.w3.org/2000/svg";
    var locationHref = "";
    var _useWebWorker = false;
    var initialDefaultFrame = -999999;
    var setWebWorker = function setWebWorker2(flag) {
      _useWebWorker = !!flag;
    };
    var getWebWorker = function getWebWorker2() {
      return _useWebWorker;
    };
    var setLocationHref = function setLocationHref2(value2) {
      locationHref = value2;
    };
    var getLocationHref = function getLocationHref2() {
      return locationHref;
    };
    function createTag(type) {
      return document.createElement(type);
    }
    function extendPrototype(sources, destination) {
      var i2;
      var len = sources.length;
      var sourcePrototype;
      for (i2 = 0; i2 < len; i2 += 1) {
        sourcePrototype = sources[i2].prototype;
        for (var attr in sourcePrototype) {
          if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr))
            destination.prototype[attr] = sourcePrototype[attr];
        }
      }
    }
    function getDescriptor(object2, prop) {
      return Object.getOwnPropertyDescriptor(object2, prop);
    }
    function createProxyFunction(prototype) {
      function ProxyFunction() {
      }
      ProxyFunction.prototype = prototype;
      return ProxyFunction;
    }
    var audioControllerFactory = function() {
      function AudioController(audioFactory) {
        this.audios = [];
        this.audioFactory = audioFactory;
        this._volume = 1;
        this._isMuted = false;
      }
      AudioController.prototype = {
        addAudio: function addAudio(audio) {
          this.audios.push(audio);
        },
        pause: function pause() {
          var i2;
          var len = this.audios.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this.audios[i2].pause();
          }
        },
        resume: function resume() {
          var i2;
          var len = this.audios.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this.audios[i2].resume();
          }
        },
        setRate: function setRate(rateValue) {
          var i2;
          var len = this.audios.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this.audios[i2].setRate(rateValue);
          }
        },
        createAudio: function createAudio(assetPath) {
          if (this.audioFactory) {
            return this.audioFactory(assetPath);
          }
          if (window.Howl) {
            return new window.Howl({
              src: [assetPath]
            });
          }
          return {
            isPlaying: false,
            play: function play() {
              this.isPlaying = true;
            },
            seek: function seek() {
              this.isPlaying = false;
            },
            playing: function playing() {
            },
            rate: function rate() {
            },
            setVolume: function setVolume() {
            }
          };
        },
        setAudioFactory: function setAudioFactory(audioFactory) {
          this.audioFactory = audioFactory;
        },
        setVolume: function setVolume(value2) {
          this._volume = value2;
          this._updateVolume();
        },
        mute: function mute() {
          this._isMuted = true;
          this._updateVolume();
        },
        unmute: function unmute() {
          this._isMuted = false;
          this._updateVolume();
        },
        getVolume: function getVolume() {
          return this._volume;
        },
        _updateVolume: function _updateVolume() {
          var i2;
          var len = this.audios.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this.audios[i2].volume(this._volume * (this._isMuted ? 0 : 1));
          }
        }
      };
      return function() {
        return new AudioController();
      };
    }();
    var createTypedArray = function() {
      function createRegularArray(type, len) {
        var i2 = 0;
        var arr = [];
        var value2;
        switch (type) {
          case "int16":
          case "uint8c":
            value2 = 1;
            break;
          default:
            value2 = 1.1;
            break;
        }
        for (i2 = 0; i2 < len; i2 += 1) {
          arr.push(value2);
        }
        return arr;
      }
      function createTypedArrayFactory(type, len) {
        if (type === "float32") {
          return new Float32Array(len);
        }
        if (type === "int16") {
          return new Int16Array(len);
        }
        if (type === "uint8c") {
          return new Uint8ClampedArray(len);
        }
        return createRegularArray(type, len);
      }
      if (typeof Uint8ClampedArray === "function" && typeof Float32Array === "function") {
        return createTypedArrayFactory;
      }
      return createRegularArray;
    }();
    function createSizedArray(len) {
      return Array.apply(null, {
        length: len
      });
    }
    function _typeof$6(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$6 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$6 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$6(obj);
    }
    var subframeEnabled = true;
    var expressionsPlugin = null;
    var expressionsInterfaces = null;
    var idPrefix$1 = "";
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    var bmPow = Math.pow;
    var bmSqrt = Math.sqrt;
    var bmFloor = Math.floor;
    var bmMax = Math.max;
    var bmMin = Math.min;
    var BMMath = {};
    (function() {
      var propertyNames = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"];
      var i2;
      var len = propertyNames.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        BMMath[propertyNames[i2]] = Math[propertyNames[i2]];
      }
    })();
    BMMath.random = Math.random;
    BMMath.abs = function(val2) {
      var tOfVal = _typeof$6(val2);
      if (tOfVal === "object" && val2.length) {
        var absArr = createSizedArray(val2.length);
        var i2;
        var len = val2.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          absArr[i2] = Math.abs(val2[i2]);
        }
        return absArr;
      }
      return Math.abs(val2);
    };
    var defaultCurveSegments = 150;
    var degToRads = Math.PI / 180;
    var roundCorner = 0.5519;
    function styleDiv(element) {
      element.style.position = "absolute";
      element.style.top = 0;
      element.style.left = 0;
      element.style.display = "block";
      element.style.transformOrigin = "0 0";
      element.style.webkitTransformOrigin = "0 0";
      element.style.backfaceVisibility = "visible";
      element.style.webkitBackfaceVisibility = "visible";
      element.style.transformStyle = "preserve-3d";
      element.style.webkitTransformStyle = "preserve-3d";
      element.style.mozTransformStyle = "preserve-3d";
    }
    function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {
      this.type = type;
      this.currentTime = currentTime;
      this.totalTime = totalTime;
      this.direction = frameMultiplier < 0 ? -1 : 1;
    }
    function BMCompleteEvent(type, frameMultiplier) {
      this.type = type;
      this.direction = frameMultiplier < 0 ? -1 : 1;
    }
    function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier) {
      this.type = type;
      this.currentLoop = currentLoop;
      this.totalLoops = totalLoops;
      this.direction = frameMultiplier < 0 ? -1 : 1;
    }
    function BMSegmentStartEvent(type, firstFrame, totalFrames) {
      this.type = type;
      this.firstFrame = firstFrame;
      this.totalFrames = totalFrames;
    }
    function BMDestroyEvent(type, target) {
      this.type = type;
      this.target = target;
    }
    function BMRenderFrameErrorEvent(nativeError, currentTime) {
      this.type = "renderFrameError";
      this.nativeError = nativeError;
      this.currentTime = currentTime;
    }
    function BMConfigErrorEvent(nativeError) {
      this.type = "configError";
      this.nativeError = nativeError;
    }
    var createElementID = function() {
      var _count = 0;
      return function createID() {
        _count += 1;
        return idPrefix$1 + "__lottie_element_" + _count;
      };
    }();
    function HSVtoRGB(h4, s3, v2) {
      var r2;
      var g2;
      var b3;
      var i2;
      var f2;
      var p2;
      var q3;
      var t3;
      i2 = Math.floor(h4 * 6);
      f2 = h4 * 6 - i2;
      p2 = v2 * (1 - s3);
      q3 = v2 * (1 - f2 * s3);
      t3 = v2 * (1 - (1 - f2) * s3);
      switch (i2 % 6) {
        case 0:
          r2 = v2;
          g2 = t3;
          b3 = p2;
          break;
        case 1:
          r2 = q3;
          g2 = v2;
          b3 = p2;
          break;
        case 2:
          r2 = p2;
          g2 = v2;
          b3 = t3;
          break;
        case 3:
          r2 = p2;
          g2 = q3;
          b3 = v2;
          break;
        case 4:
          r2 = t3;
          g2 = p2;
          b3 = v2;
          break;
        case 5:
          r2 = v2;
          g2 = p2;
          b3 = q3;
          break;
      }
      return [r2, g2, b3];
    }
    function RGBtoHSV(r2, g2, b3) {
      var max = Math.max(r2, g2, b3);
      var min = Math.min(r2, g2, b3);
      var d4 = max - min;
      var h4;
      var s3 = max === 0 ? 0 : d4 / max;
      var v2 = max / 255;
      switch (max) {
        case min:
          h4 = 0;
          break;
        case r2:
          h4 = g2 - b3 + d4 * (g2 < b3 ? 6 : 0);
          h4 /= 6 * d4;
          break;
        case g2:
          h4 = b3 - r2 + d4 * 2;
          h4 /= 6 * d4;
          break;
        case b3:
          h4 = r2 - g2 + d4 * 4;
          h4 /= 6 * d4;
          break;
      }
      return [h4, s3, v2];
    }
    function addSaturationToRGB(color, offset) {
      var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
      hsv[1] += offset;
      if (hsv[1] > 1) {
        hsv[1] = 1;
      } else if (hsv[1] <= 0) {
        hsv[1] = 0;
      }
      return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }
    function addBrightnessToRGB(color, offset) {
      var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
      hsv[2] += offset;
      if (hsv[2] > 1) {
        hsv[2] = 1;
      } else if (hsv[2] < 0) {
        hsv[2] = 0;
      }
      return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }
    function addHueToRGB(color, offset) {
      var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
      hsv[0] += offset / 360;
      if (hsv[0] > 1) {
        hsv[0] -= 1;
      } else if (hsv[0] < 0) {
        hsv[0] += 1;
      }
      return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }
    var rgbToHex = function() {
      var colorMap = [];
      var i2;
      var hex;
      for (i2 = 0; i2 < 256; i2 += 1) {
        hex = i2.toString(16);
        colorMap[i2] = hex.length === 1 ? "0" + hex : hex;
      }
      return function(r2, g2, b3) {
        if (r2 < 0) {
          r2 = 0;
        }
        if (g2 < 0) {
          g2 = 0;
        }
        if (b3 < 0) {
          b3 = 0;
        }
        return "#" + colorMap[r2] + colorMap[g2] + colorMap[b3];
      };
    }();
    var setSubframeEnabled = function setSubframeEnabled2(flag) {
      subframeEnabled = !!flag;
    };
    var getSubframeEnabled = function getSubframeEnabled2() {
      return subframeEnabled;
    };
    var setExpressionsPlugin = function setExpressionsPlugin2(value2) {
      expressionsPlugin = value2;
    };
    var getExpressionsPlugin = function getExpressionsPlugin2() {
      return expressionsPlugin;
    };
    var setExpressionInterfaces = function setExpressionInterfaces2(value2) {
      expressionsInterfaces = value2;
    };
    var getExpressionInterfaces = function getExpressionInterfaces2() {
      return expressionsInterfaces;
    };
    var setDefaultCurveSegments = function setDefaultCurveSegments2(value2) {
      defaultCurveSegments = value2;
    };
    var getDefaultCurveSegments = function getDefaultCurveSegments2() {
      return defaultCurveSegments;
    };
    var setIdPrefix = function setIdPrefix2(value2) {
      idPrefix$1 = value2;
    };
    function createNS(type) {
      return document.createElementNS(svgNS, type);
    }
    function _typeof$5(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$5 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$5 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$5(obj);
    }
    var dataManager = function() {
      var _counterId = 1;
      var processes = [];
      var workerFn;
      var workerInstance;
      var workerProxy = {
        onmessage: function onmessage() {
        },
        postMessage: function postMessage(path) {
          workerFn({
            data: path
          });
        }
      };
      var _workerSelf = {
        postMessage: function postMessage(data2) {
          workerProxy.onmessage({
            data: data2
          });
        }
      };
      function createWorker(fn) {
        if (window.Worker && window.Blob && getWebWorker()) {
          var blob = new Blob(["var _workerSelf = self; self.onmessage = ", fn.toString()], {
            type: "text/javascript"
          });
          var url = URL.createObjectURL(blob);
          return new Worker(url);
        }
        workerFn = fn;
        return workerProxy;
      }
      function setupWorker() {
        if (!workerInstance) {
          workerInstance = createWorker(function workerStart(e3) {
            function dataFunctionManager() {
              function completeLayers(layers2, comps) {
                var layerData;
                var i2;
                var len = layers2.length;
                var j;
                var jLen;
                var k3;
                var kLen;
                for (i2 = 0; i2 < len; i2 += 1) {
                  layerData = layers2[i2];
                  if ("ks" in layerData && !layerData.completed) {
                    layerData.completed = true;
                    if (layerData.hasMask) {
                      var maskProps = layerData.masksProperties;
                      jLen = maskProps.length;
                      for (j = 0; j < jLen; j += 1) {
                        if (maskProps[j].pt.k.i) {
                          convertPathsToAbsoluteValues(maskProps[j].pt.k);
                        } else {
                          kLen = maskProps[j].pt.k.length;
                          for (k3 = 0; k3 < kLen; k3 += 1) {
                            if (maskProps[j].pt.k[k3].s) {
                              convertPathsToAbsoluteValues(maskProps[j].pt.k[k3].s[0]);
                            }
                            if (maskProps[j].pt.k[k3].e) {
                              convertPathsToAbsoluteValues(maskProps[j].pt.k[k3].e[0]);
                            }
                          }
                        }
                      }
                    }
                    if (layerData.ty === 0) {
                      layerData.layers = findCompLayers(layerData.refId, comps);
                      completeLayers(layerData.layers, comps);
                    } else if (layerData.ty === 4) {
                      completeShapes(layerData.shapes);
                    } else if (layerData.ty === 5) {
                      completeText(layerData);
                    }
                  }
                }
              }
              function completeChars(chars, assets2) {
                if (chars) {
                  var i2 = 0;
                  var len = chars.length;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (chars[i2].t === 1) {
                      chars[i2].data.layers = findCompLayers(chars[i2].data.refId, assets2);
                      completeLayers(chars[i2].data.layers, assets2);
                    }
                  }
                }
              }
              function findComp(id2, comps) {
                var i2 = 0;
                var len = comps.length;
                while (i2 < len) {
                  if (comps[i2].id === id2) {
                    return comps[i2];
                  }
                  i2 += 1;
                }
                return null;
              }
              function findCompLayers(id2, comps) {
                var comp2 = findComp(id2, comps);
                if (comp2) {
                  if (!comp2.layers.__used) {
                    comp2.layers.__used = true;
                    return comp2.layers;
                  }
                  return JSON.parse(JSON.stringify(comp2.layers));
                }
                return null;
              }
              function completeShapes(arr) {
                var i2;
                var len = arr.length;
                var j;
                var jLen;
                for (i2 = len - 1; i2 >= 0; i2 -= 1) {
                  if (arr[i2].ty === "sh") {
                    if (arr[i2].ks.k.i) {
                      convertPathsToAbsoluteValues(arr[i2].ks.k);
                    } else {
                      jLen = arr[i2].ks.k.length;
                      for (j = 0; j < jLen; j += 1) {
                        if (arr[i2].ks.k[j].s) {
                          convertPathsToAbsoluteValues(arr[i2].ks.k[j].s[0]);
                        }
                        if (arr[i2].ks.k[j].e) {
                          convertPathsToAbsoluteValues(arr[i2].ks.k[j].e[0]);
                        }
                      }
                    }
                  } else if (arr[i2].ty === "gr") {
                    completeShapes(arr[i2].it);
                  }
                }
              }
              function convertPathsToAbsoluteValues(path) {
                var i2;
                var len = path.i.length;
                for (i2 = 0; i2 < len; i2 += 1) {
                  path.i[i2][0] += path.v[i2][0];
                  path.i[i2][1] += path.v[i2][1];
                  path.o[i2][0] += path.v[i2][0];
                  path.o[i2][1] += path.v[i2][1];
                }
              }
              function checkVersion(minimum, animVersionString) {
                var animVersion = animVersionString ? animVersionString.split(".") : [100, 100, 100];
                if (minimum[0] > animVersion[0]) {
                  return true;
                }
                if (animVersion[0] > minimum[0]) {
                  return false;
                }
                if (minimum[1] > animVersion[1]) {
                  return true;
                }
                if (animVersion[1] > minimum[1]) {
                  return false;
                }
                if (minimum[2] > animVersion[2]) {
                  return true;
                }
                if (animVersion[2] > minimum[2]) {
                  return false;
                }
                return null;
              }
              var checkText = function() {
                var minimumVersion = [4, 4, 14];
                function updateTextLayer(textLayer) {
                  var documentData = textLayer.t.d;
                  textLayer.t.d = {
                    k: [{
                      s: documentData,
                      t: 0
                    }]
                  };
                }
                function iterateLayers(layers2) {
                  var i2;
                  var len = layers2.length;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (layers2[i2].ty === 5) {
                      updateTextLayer(layers2[i2]);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i2;
                      var len = animationData.assets.length;
                      for (i2 = 0; i2 < len; i2 += 1) {
                        if (animationData.assets[i2].layers) {
                          iterateLayers(animationData.assets[i2].layers);
                        }
                      }
                    }
                  }
                };
              }();
              var checkChars = function() {
                var minimumVersion = [4, 7, 99];
                return function(animationData) {
                  if (animationData.chars && !checkVersion(minimumVersion, animationData.v)) {
                    var i2;
                    var len = animationData.chars.length;
                    for (i2 = 0; i2 < len; i2 += 1) {
                      var charData = animationData.chars[i2];
                      if (charData.data && charData.data.shapes) {
                        completeShapes(charData.data.shapes);
                        charData.data.ip = 0;
                        charData.data.op = 99999;
                        charData.data.st = 0;
                        charData.data.sr = 1;
                        charData.data.ks = {
                          p: {
                            k: [0, 0],
                            a: 0
                          },
                          s: {
                            k: [100, 100],
                            a: 0
                          },
                          a: {
                            k: [0, 0],
                            a: 0
                          },
                          r: {
                            k: 0,
                            a: 0
                          },
                          o: {
                            k: 100,
                            a: 0
                          }
                        };
                        if (!animationData.chars[i2].t) {
                          charData.data.shapes.push({
                            ty: "no"
                          });
                          charData.data.shapes[0].it.push({
                            p: {
                              k: [0, 0],
                              a: 0
                            },
                            s: {
                              k: [100, 100],
                              a: 0
                            },
                            a: {
                              k: [0, 0],
                              a: 0
                            },
                            r: {
                              k: 0,
                              a: 0
                            },
                            o: {
                              k: 100,
                              a: 0
                            },
                            sk: {
                              k: 0,
                              a: 0
                            },
                            sa: {
                              k: 0,
                              a: 0
                            },
                            ty: "tr"
                          });
                        }
                      }
                    }
                  }
                };
              }();
              var checkPathProperties = function() {
                var minimumVersion = [5, 7, 15];
                function updateTextLayer(textLayer) {
                  var pathData = textLayer.t.p;
                  if (typeof pathData.a === "number") {
                    pathData.a = {
                      a: 0,
                      k: pathData.a
                    };
                  }
                  if (typeof pathData.p === "number") {
                    pathData.p = {
                      a: 0,
                      k: pathData.p
                    };
                  }
                  if (typeof pathData.r === "number") {
                    pathData.r = {
                      a: 0,
                      k: pathData.r
                    };
                  }
                }
                function iterateLayers(layers2) {
                  var i2;
                  var len = layers2.length;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (layers2[i2].ty === 5) {
                      updateTextLayer(layers2[i2]);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i2;
                      var len = animationData.assets.length;
                      for (i2 = 0; i2 < len; i2 += 1) {
                        if (animationData.assets[i2].layers) {
                          iterateLayers(animationData.assets[i2].layers);
                        }
                      }
                    }
                  }
                };
              }();
              var checkColors = function() {
                var minimumVersion = [4, 1, 9];
                function iterateShapes(shapes) {
                  var i2;
                  var len = shapes.length;
                  var j;
                  var jLen;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (shapes[i2].ty === "gr") {
                      iterateShapes(shapes[i2].it);
                    } else if (shapes[i2].ty === "fl" || shapes[i2].ty === "st") {
                      if (shapes[i2].c.k && shapes[i2].c.k[0].i) {
                        jLen = shapes[i2].c.k.length;
                        for (j = 0; j < jLen; j += 1) {
                          if (shapes[i2].c.k[j].s) {
                            shapes[i2].c.k[j].s[0] /= 255;
                            shapes[i2].c.k[j].s[1] /= 255;
                            shapes[i2].c.k[j].s[2] /= 255;
                            shapes[i2].c.k[j].s[3] /= 255;
                          }
                          if (shapes[i2].c.k[j].e) {
                            shapes[i2].c.k[j].e[0] /= 255;
                            shapes[i2].c.k[j].e[1] /= 255;
                            shapes[i2].c.k[j].e[2] /= 255;
                            shapes[i2].c.k[j].e[3] /= 255;
                          }
                        }
                      } else {
                        shapes[i2].c.k[0] /= 255;
                        shapes[i2].c.k[1] /= 255;
                        shapes[i2].c.k[2] /= 255;
                        shapes[i2].c.k[3] /= 255;
                      }
                    }
                  }
                }
                function iterateLayers(layers2) {
                  var i2;
                  var len = layers2.length;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    if (layers2[i2].ty === 4) {
                      iterateShapes(layers2[i2].shapes);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i2;
                      var len = animationData.assets.length;
                      for (i2 = 0; i2 < len; i2 += 1) {
                        if (animationData.assets[i2].layers) {
                          iterateLayers(animationData.assets[i2].layers);
                        }
                      }
                    }
                  }
                };
              }();
              var checkShapes = function() {
                var minimumVersion = [4, 4, 18];
                function completeClosingShapes(arr) {
                  var i2;
                  var len = arr.length;
                  var j;
                  var jLen;
                  for (i2 = len - 1; i2 >= 0; i2 -= 1) {
                    if (arr[i2].ty === "sh") {
                      if (arr[i2].ks.k.i) {
                        arr[i2].ks.k.c = arr[i2].closed;
                      } else {
                        jLen = arr[i2].ks.k.length;
                        for (j = 0; j < jLen; j += 1) {
                          if (arr[i2].ks.k[j].s) {
                            arr[i2].ks.k[j].s[0].c = arr[i2].closed;
                          }
                          if (arr[i2].ks.k[j].e) {
                            arr[i2].ks.k[j].e[0].c = arr[i2].closed;
                          }
                        }
                      }
                    } else if (arr[i2].ty === "gr") {
                      completeClosingShapes(arr[i2].it);
                    }
                  }
                }
                function iterateLayers(layers2) {
                  var layerData;
                  var i2;
                  var len = layers2.length;
                  var j;
                  var jLen;
                  var k3;
                  var kLen;
                  for (i2 = 0; i2 < len; i2 += 1) {
                    layerData = layers2[i2];
                    if (layerData.hasMask) {
                      var maskProps = layerData.masksProperties;
                      jLen = maskProps.length;
                      for (j = 0; j < jLen; j += 1) {
                        if (maskProps[j].pt.k.i) {
                          maskProps[j].pt.k.c = maskProps[j].cl;
                        } else {
                          kLen = maskProps[j].pt.k.length;
                          for (k3 = 0; k3 < kLen; k3 += 1) {
                            if (maskProps[j].pt.k[k3].s) {
                              maskProps[j].pt.k[k3].s[0].c = maskProps[j].cl;
                            }
                            if (maskProps[j].pt.k[k3].e) {
                              maskProps[j].pt.k[k3].e[0].c = maskProps[j].cl;
                            }
                          }
                        }
                      }
                    }
                    if (layerData.ty === 4) {
                      completeClosingShapes(layerData.shapes);
                    }
                  }
                }
                return function(animationData) {
                  if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                      var i2;
                      var len = animationData.assets.length;
                      for (i2 = 0; i2 < len; i2 += 1) {
                        if (animationData.assets[i2].layers) {
                          iterateLayers(animationData.assets[i2].layers);
                        }
                      }
                    }
                  }
                };
              }();
              function completeData(animationData) {
                if (animationData.__complete) {
                  return;
                }
                checkColors(animationData);
                checkText(animationData);
                checkChars(animationData);
                checkPathProperties(animationData);
                checkShapes(animationData);
                completeLayers(animationData.layers, animationData.assets);
                completeChars(animationData.chars, animationData.assets);
                animationData.__complete = true;
              }
              function completeText(data2) {
                if (data2.t.a.length === 0 && !("m" in data2.t.p))
                  ;
              }
              var moduleOb = {};
              moduleOb.completeData = completeData;
              moduleOb.checkColors = checkColors;
              moduleOb.checkChars = checkChars;
              moduleOb.checkPathProperties = checkPathProperties;
              moduleOb.checkShapes = checkShapes;
              moduleOb.completeLayers = completeLayers;
              return moduleOb;
            }
            if (!_workerSelf.dataManager) {
              _workerSelf.dataManager = dataFunctionManager();
            }
            if (!_workerSelf.assetLoader) {
              _workerSelf.assetLoader = function() {
                function formatResponse(xhr) {
                  var contentTypeHeader = xhr.getResponseHeader("content-type");
                  if (contentTypeHeader && xhr.responseType === "json" && contentTypeHeader.indexOf("json") !== -1) {
                    return xhr.response;
                  }
                  if (xhr.response && _typeof$5(xhr.response) === "object") {
                    return xhr.response;
                  }
                  if (xhr.response && typeof xhr.response === "string") {
                    return JSON.parse(xhr.response);
                  }
                  if (xhr.responseText) {
                    return JSON.parse(xhr.responseText);
                  }
                  return null;
                }
                function loadAsset(path, fullPath, callback, errorCallback) {
                  var response;
                  var xhr = new XMLHttpRequest();
                  try {
                    xhr.responseType = "json";
                  } catch (err) {
                  }
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      if (xhr.status === 200) {
                        response = formatResponse(xhr);
                        callback(response);
                      } else {
                        try {
                          response = formatResponse(xhr);
                          callback(response);
                        } catch (err) {
                          if (errorCallback) {
                            errorCallback(err);
                          }
                        }
                      }
                    }
                  };
                  try {
                    xhr.open(["G", "E", "T"].join(""), path, true);
                  } catch (error) {
                    xhr.open(["G", "E", "T"].join(""), fullPath + "/" + path, true);
                  }
                  xhr.send();
                }
                return {
                  load: loadAsset
                };
              }();
            }
            if (e3.data.type === "loadAnimation") {
              _workerSelf.assetLoader.load(e3.data.path, e3.data.fullPath, function(data2) {
                _workerSelf.dataManager.completeData(data2);
                _workerSelf.postMessage({
                  id: e3.data.id,
                  payload: data2,
                  status: "success"
                });
              }, function() {
                _workerSelf.postMessage({
                  id: e3.data.id,
                  status: "error"
                });
              });
            } else if (e3.data.type === "complete") {
              var animation = e3.data.animation;
              _workerSelf.dataManager.completeData(animation);
              _workerSelf.postMessage({
                id: e3.data.id,
                payload: animation,
                status: "success"
              });
            } else if (e3.data.type === "loadData") {
              _workerSelf.assetLoader.load(e3.data.path, e3.data.fullPath, function(data2) {
                _workerSelf.postMessage({
                  id: e3.data.id,
                  payload: data2,
                  status: "success"
                });
              }, function() {
                _workerSelf.postMessage({
                  id: e3.data.id,
                  status: "error"
                });
              });
            }
          });
          workerInstance.onmessage = function(event) {
            var data2 = event.data;
            var id2 = data2.id;
            var process = processes[id2];
            processes[id2] = null;
            if (data2.status === "success") {
              process.onComplete(data2.payload);
            } else if (process.onError) {
              process.onError();
            }
          };
        }
      }
      function createProcess(onComplete, onError) {
        _counterId += 1;
        var id2 = "processId_" + _counterId;
        processes[id2] = {
          onComplete,
          onError
        };
        return id2;
      }
      function loadAnimation2(path, onComplete, onError) {
        setupWorker();
        var processId = createProcess(onComplete, onError);
        workerInstance.postMessage({
          type: "loadAnimation",
          path,
          fullPath: window.location.origin + window.location.pathname,
          id: processId
        });
      }
      function loadData(path, onComplete, onError) {
        setupWorker();
        var processId = createProcess(onComplete, onError);
        workerInstance.postMessage({
          type: "loadData",
          path,
          fullPath: window.location.origin + window.location.pathname,
          id: processId
        });
      }
      function completeAnimation(anim, onComplete, onError) {
        setupWorker();
        var processId = createProcess(onComplete, onError);
        workerInstance.postMessage({
          type: "complete",
          animation: anim,
          id: processId
        });
      }
      return {
        loadAnimation: loadAnimation2,
        loadData,
        completeAnimation
      };
    }();
    var ImagePreloader = function() {
      var proxyImage = function() {
        var canvas = createTag("canvas");
        canvas.width = 1;
        canvas.height = 1;
        var ctx2 = canvas.getContext("2d");
        ctx2.fillStyle = "rgba(0,0,0,0)";
        ctx2.fillRect(0, 0, 1, 1);
        return canvas;
      }();
      function imageLoaded() {
        this.loadedAssets += 1;
        if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
          if (this.imagesLoadedCb) {
            this.imagesLoadedCb(null);
          }
        }
      }
      function footageLoaded() {
        this.loadedFootagesCount += 1;
        if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
          if (this.imagesLoadedCb) {
            this.imagesLoadedCb(null);
          }
        }
      }
      function getAssetsPath(assetData, assetsPath, originalPath) {
        var path = "";
        if (assetData.e) {
          path = assetData.p;
        } else if (assetsPath) {
          var imagePath = assetData.p;
          if (imagePath.indexOf("images/") !== -1) {
            imagePath = imagePath.split("/")[1];
          }
          path = assetsPath + imagePath;
        } else {
          path = originalPath;
          path += assetData.u ? assetData.u : "";
          path += assetData.p;
        }
        return path;
      }
      function testImageLoaded(img) {
        var _count = 0;
        var intervalId = setInterval(function() {
          var box = img.getBBox();
          if (box.width || _count > 500) {
            this._imageLoaded();
            clearInterval(intervalId);
          }
          _count += 1;
        }.bind(this), 50);
      }
      function createImageData(assetData) {
        var path = getAssetsPath(assetData, this.assetsPath, this.path);
        var img = createNS("image");
        if (isSafari) {
          this.testImageLoaded(img);
        } else {
          img.addEventListener("load", this._imageLoaded, false);
        }
        img.addEventListener("error", function() {
          ob2.img = proxyImage;
          this._imageLoaded();
        }.bind(this), false);
        img.setAttributeNS("http://www.w3.org/1999/xlink", "href", path);
        if (this._elementHelper.append) {
          this._elementHelper.append(img);
        } else {
          this._elementHelper.appendChild(img);
        }
        var ob2 = {
          img,
          assetData
        };
        return ob2;
      }
      function createImgData(assetData) {
        var path = getAssetsPath(assetData, this.assetsPath, this.path);
        var img = createTag("img");
        img.crossOrigin = "anonymous";
        img.addEventListener("load", this._imageLoaded, false);
        img.addEventListener("error", function() {
          ob2.img = proxyImage;
          this._imageLoaded();
        }.bind(this), false);
        img.src = path;
        var ob2 = {
          img,
          assetData
        };
        return ob2;
      }
      function createFootageData(data2) {
        var ob2 = {
          assetData: data2
        };
        var path = getAssetsPath(data2, this.assetsPath, this.path);
        dataManager.loadData(path, function(footageData) {
          ob2.img = footageData;
          this._footageLoaded();
        }.bind(this), function() {
          ob2.img = {};
          this._footageLoaded();
        }.bind(this));
        return ob2;
      }
      function loadAssets(assets2, cb2) {
        this.imagesLoadedCb = cb2;
        var i2;
        var len = assets2.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (!assets2[i2].layers) {
            if (!assets2[i2].t || assets2[i2].t === "seq") {
              this.totalImages += 1;
              this.images.push(this._createImageData(assets2[i2]));
            } else if (assets2[i2].t === 3) {
              this.totalFootages += 1;
              this.images.push(this.createFootageData(assets2[i2]));
            }
          }
        }
      }
      function setPath(path) {
        this.path = path || "";
      }
      function setAssetsPath(path) {
        this.assetsPath = path || "";
      }
      function getAsset(assetData) {
        var i2 = 0;
        var len = this.images.length;
        while (i2 < len) {
          if (this.images[i2].assetData === assetData) {
            return this.images[i2].img;
          }
          i2 += 1;
        }
        return null;
      }
      function destroy() {
        this.imagesLoadedCb = null;
        this.images.length = 0;
      }
      function loadedImages() {
        return this.totalImages === this.loadedAssets;
      }
      function loadedFootages() {
        return this.totalFootages === this.loadedFootagesCount;
      }
      function setCacheType(type, elementHelper) {
        if (type === "svg") {
          this._elementHelper = elementHelper;
          this._createImageData = this.createImageData.bind(this);
        } else {
          this._createImageData = this.createImgData.bind(this);
        }
      }
      function ImagePreloaderFactory() {
        this._imageLoaded = imageLoaded.bind(this);
        this._footageLoaded = footageLoaded.bind(this);
        this.testImageLoaded = testImageLoaded.bind(this);
        this.createFootageData = createFootageData.bind(this);
        this.assetsPath = "";
        this.path = "";
        this.totalImages = 0;
        this.totalFootages = 0;
        this.loadedAssets = 0;
        this.loadedFootagesCount = 0;
        this.imagesLoadedCb = null;
        this.images = [];
      }
      ImagePreloaderFactory.prototype = {
        loadAssets,
        setAssetsPath,
        setPath,
        loadedImages,
        loadedFootages,
        destroy,
        getAsset,
        createImgData,
        createImageData,
        imageLoaded,
        footageLoaded,
        setCacheType
      };
      return ImagePreloaderFactory;
    }();
    function BaseEvent() {
    }
    BaseEvent.prototype = {
      triggerEvent: function triggerEvent(eventName, args) {
        if (this._cbs[eventName]) {
          var callbacks = this._cbs[eventName];
          for (var i2 = 0; i2 < callbacks.length; i2 += 1) {
            callbacks[i2](args);
          }
        }
      },
      addEventListener: function addEventListener(eventName, callback) {
        if (!this._cbs[eventName]) {
          this._cbs[eventName] = [];
        }
        this._cbs[eventName].push(callback);
        return function() {
          this.removeEventListener(eventName, callback);
        }.bind(this);
      },
      removeEventListener: function removeEventListener(eventName, callback) {
        if (!callback) {
          this._cbs[eventName] = null;
        } else if (this._cbs[eventName]) {
          var i2 = 0;
          var len = this._cbs[eventName].length;
          while (i2 < len) {
            if (this._cbs[eventName][i2] === callback) {
              this._cbs[eventName].splice(i2, 1);
              i2 -= 1;
              len -= 1;
            }
            i2 += 1;
          }
          if (!this._cbs[eventName].length) {
            this._cbs[eventName] = null;
          }
        }
      }
    };
    var markerParser = function() {
      function parsePayloadLines(payload) {
        var lines = payload.split("\r\n");
        var keys2 = {};
        var line;
        var keysCount = 0;
        for (var i2 = 0; i2 < lines.length; i2 += 1) {
          line = lines[i2].split(":");
          if (line.length === 2) {
            keys2[line[0]] = line[1].trim();
            keysCount += 1;
          }
        }
        if (keysCount === 0) {
          throw new Error();
        }
        return keys2;
      }
      return function(_markers) {
        var markers2 = [];
        for (var i2 = 0; i2 < _markers.length; i2 += 1) {
          var _marker = _markers[i2];
          var markerData = {
            time: _marker.tm,
            duration: _marker.dr
          };
          try {
            markerData.payload = JSON.parse(_markers[i2].cm);
          } catch (_) {
            try {
              markerData.payload = parsePayloadLines(_markers[i2].cm);
            } catch (__) {
              markerData.payload = {
                name: _markers[i2].cm
              };
            }
          }
          markers2.push(markerData);
        }
        return markers2;
      };
    }();
    var ProjectInterface = function() {
      function registerComposition(comp2) {
        this.compositions.push(comp2);
      }
      return function() {
        function _thisProjectFunction(name2) {
          var i2 = 0;
          var len = this.compositions.length;
          while (i2 < len) {
            if (this.compositions[i2].data && this.compositions[i2].data.nm === name2) {
              if (this.compositions[i2].prepareFrame && this.compositions[i2].data.xt) {
                this.compositions[i2].prepareFrame(this.currentFrame);
              }
              return this.compositions[i2].compInterface;
            }
            i2 += 1;
          }
          return null;
        }
        _thisProjectFunction.compositions = [];
        _thisProjectFunction.currentFrame = 0;
        _thisProjectFunction.registerComposition = registerComposition;
        return _thisProjectFunction;
      };
    }();
    var renderers = {};
    var registerRenderer = function registerRenderer2(key2, value2) {
      renderers[key2] = value2;
    };
    function getRenderer(key2) {
      return renderers[key2];
    }
    function getRegisteredRenderer() {
      if (renderers.canvas) {
        return "canvas";
      }
      for (var key2 in renderers) {
        if (renderers[key2]) {
          return key2;
        }
      }
      return "";
    }
    function _typeof$4(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$4 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$4 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$4(obj);
    }
    var AnimationItem = function AnimationItem2() {
      this._cbs = [];
      this.name = "";
      this.path = "";
      this.isLoaded = false;
      this.currentFrame = 0;
      this.currentRawFrame = 0;
      this.firstFrame = 0;
      this.totalFrames = 0;
      this.frameRate = 0;
      this.frameMult = 0;
      this.playSpeed = 1;
      this.playDirection = 1;
      this.playCount = 0;
      this.animationData = {};
      this.assets = [];
      this.isPaused = true;
      this.autoplay = false;
      this.loop = true;
      this.renderer = null;
      this.animationID = createElementID();
      this.assetsPath = "";
      this.timeCompleted = 0;
      this.segmentPos = 0;
      this.isSubframeEnabled = getSubframeEnabled();
      this.segments = [];
      this._idle = true;
      this._completedLoop = false;
      this.projectInterface = ProjectInterface();
      this.imagePreloader = new ImagePreloader();
      this.audioController = audioControllerFactory();
      this.markers = [];
      this.configAnimation = this.configAnimation.bind(this);
      this.onSetupError = this.onSetupError.bind(this);
      this.onSegmentComplete = this.onSegmentComplete.bind(this);
      this.drawnFrameEvent = new BMEnterFrameEvent("drawnFrame", 0, 0, 0);
      this.expressionsPlugin = getExpressionsPlugin();
    };
    extendPrototype([BaseEvent], AnimationItem);
    AnimationItem.prototype.setParams = function(params) {
      if (params.wrapper || params.container) {
        this.wrapper = params.wrapper || params.container;
      }
      var animType = "svg";
      if (params.animType) {
        animType = params.animType;
      } else if (params.renderer) {
        animType = params.renderer;
      }
      var RendererClass = getRenderer(animType);
      this.renderer = new RendererClass(this, params.rendererSettings);
      this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);
      this.renderer.setProjectInterface(this.projectInterface);
      this.animType = animType;
      if (params.loop === "" || params.loop === null || params.loop === void 0 || params.loop === true) {
        this.loop = true;
      } else if (params.loop === false) {
        this.loop = false;
      } else {
        this.loop = parseInt(params.loop, 10);
      }
      this.autoplay = "autoplay" in params ? params.autoplay : true;
      this.name = params.name ? params.name : "";
      this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, "autoloadSegments") ? params.autoloadSegments : true;
      this.assetsPath = params.assetsPath;
      this.initialSegment = params.initialSegment;
      if (params.audioFactory) {
        this.audioController.setAudioFactory(params.audioFactory);
      }
      if (params.animationData) {
        this.setupAnimation(params.animationData);
      } else if (params.path) {
        if (params.path.lastIndexOf("\\") !== -1) {
          this.path = params.path.substr(0, params.path.lastIndexOf("\\") + 1);
        } else {
          this.path = params.path.substr(0, params.path.lastIndexOf("/") + 1);
        }
        this.fileName = params.path.substr(params.path.lastIndexOf("/") + 1);
        this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(".json"));
        dataManager.loadAnimation(params.path, this.configAnimation, this.onSetupError);
      }
    };
    AnimationItem.prototype.onSetupError = function() {
      this.trigger("data_failed");
    };
    AnimationItem.prototype.setupAnimation = function(data2) {
      dataManager.completeAnimation(data2, this.configAnimation);
    };
    AnimationItem.prototype.setData = function(wrapper, animationData) {
      if (animationData) {
        if (_typeof$4(animationData) !== "object") {
          animationData = JSON.parse(animationData);
        }
      }
      var params = {
        wrapper,
        animationData
      };
      var wrapperAttributes = wrapper.attributes;
      params.path = wrapperAttributes.getNamedItem("data-animation-path") ? wrapperAttributes.getNamedItem("data-animation-path").value : wrapperAttributes.getNamedItem("data-bm-path") ? wrapperAttributes.getNamedItem("data-bm-path").value : wrapperAttributes.getNamedItem("bm-path") ? wrapperAttributes.getNamedItem("bm-path").value : "";
      params.animType = wrapperAttributes.getNamedItem("data-anim-type") ? wrapperAttributes.getNamedItem("data-anim-type").value : wrapperAttributes.getNamedItem("data-bm-type") ? wrapperAttributes.getNamedItem("data-bm-type").value : wrapperAttributes.getNamedItem("bm-type") ? wrapperAttributes.getNamedItem("bm-type").value : wrapperAttributes.getNamedItem("data-bm-renderer") ? wrapperAttributes.getNamedItem("data-bm-renderer").value : wrapperAttributes.getNamedItem("bm-renderer") ? wrapperAttributes.getNamedItem("bm-renderer").value : getRegisteredRenderer() || "canvas";
      var loop2 = wrapperAttributes.getNamedItem("data-anim-loop") ? wrapperAttributes.getNamedItem("data-anim-loop").value : wrapperAttributes.getNamedItem("data-bm-loop") ? wrapperAttributes.getNamedItem("data-bm-loop").value : wrapperAttributes.getNamedItem("bm-loop") ? wrapperAttributes.getNamedItem("bm-loop").value : "";
      if (loop2 === "false") {
        params.loop = false;
      } else if (loop2 === "true") {
        params.loop = true;
      } else if (loop2 !== "") {
        params.loop = parseInt(loop2, 10);
      }
      var autoplay = wrapperAttributes.getNamedItem("data-anim-autoplay") ? wrapperAttributes.getNamedItem("data-anim-autoplay").value : wrapperAttributes.getNamedItem("data-bm-autoplay") ? wrapperAttributes.getNamedItem("data-bm-autoplay").value : wrapperAttributes.getNamedItem("bm-autoplay") ? wrapperAttributes.getNamedItem("bm-autoplay").value : true;
      params.autoplay = autoplay !== "false";
      params.name = wrapperAttributes.getNamedItem("data-name") ? wrapperAttributes.getNamedItem("data-name").value : wrapperAttributes.getNamedItem("data-bm-name") ? wrapperAttributes.getNamedItem("data-bm-name").value : wrapperAttributes.getNamedItem("bm-name") ? wrapperAttributes.getNamedItem("bm-name").value : "";
      var prerender = wrapperAttributes.getNamedItem("data-anim-prerender") ? wrapperAttributes.getNamedItem("data-anim-prerender").value : wrapperAttributes.getNamedItem("data-bm-prerender") ? wrapperAttributes.getNamedItem("data-bm-prerender").value : wrapperAttributes.getNamedItem("bm-prerender") ? wrapperAttributes.getNamedItem("bm-prerender").value : "";
      if (prerender === "false") {
        params.prerender = false;
      }
      if (!params.path) {
        this.trigger("destroy");
      } else {
        this.setParams(params);
      }
    };
    AnimationItem.prototype.includeLayers = function(data2) {
      if (data2.op > this.animationData.op) {
        this.animationData.op = data2.op;
        this.totalFrames = Math.floor(data2.op - this.animationData.ip);
      }
      var layers2 = this.animationData.layers;
      var i2;
      var len = layers2.length;
      var newLayers = data2.layers;
      var j;
      var jLen = newLayers.length;
      for (j = 0; j < jLen; j += 1) {
        i2 = 0;
        while (i2 < len) {
          if (layers2[i2].id === newLayers[j].id) {
            layers2[i2] = newLayers[j];
            break;
          }
          i2 += 1;
        }
      }
      if (data2.chars || data2.fonts) {
        this.renderer.globalData.fontManager.addChars(data2.chars);
        this.renderer.globalData.fontManager.addFonts(data2.fonts, this.renderer.globalData.defs);
      }
      if (data2.assets) {
        len = data2.assets.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.animationData.assets.push(data2.assets[i2]);
        }
      }
      this.animationData.__complete = false;
      dataManager.completeAnimation(this.animationData, this.onSegmentComplete);
    };
    AnimationItem.prototype.onSegmentComplete = function(data2) {
      this.animationData = data2;
      var expressionsPlugin2 = getExpressionsPlugin();
      if (expressionsPlugin2) {
        expressionsPlugin2.initExpressions(this);
      }
      this.loadNextSegment();
    };
    AnimationItem.prototype.loadNextSegment = function() {
      var segments = this.animationData.segments;
      if (!segments || segments.length === 0 || !this.autoloadSegments) {
        this.trigger("data_ready");
        this.timeCompleted = this.totalFrames;
        return;
      }
      var segment = segments.shift();
      this.timeCompleted = segment.time * this.frameRate;
      var segmentPath = this.path + this.fileName + "_" + this.segmentPos + ".json";
      this.segmentPos += 1;
      dataManager.loadData(segmentPath, this.includeLayers.bind(this), function() {
        this.trigger("data_failed");
      }.bind(this));
    };
    AnimationItem.prototype.loadSegments = function() {
      var segments = this.animationData.segments;
      if (!segments) {
        this.timeCompleted = this.totalFrames;
      }
      this.loadNextSegment();
    };
    AnimationItem.prototype.imagesLoaded = function() {
      this.trigger("loaded_images");
      this.checkLoaded();
    };
    AnimationItem.prototype.preloadImages = function() {
      this.imagePreloader.setAssetsPath(this.assetsPath);
      this.imagePreloader.setPath(this.path);
      this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
    };
    AnimationItem.prototype.configAnimation = function(animData) {
      if (!this.renderer) {
        return;
      }
      try {
        this.animationData = animData;
        if (this.initialSegment) {
          this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
          this.firstFrame = Math.round(this.initialSegment[0]);
        } else {
          this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
          this.firstFrame = Math.round(this.animationData.ip);
        }
        this.renderer.configAnimation(animData);
        if (!animData.assets) {
          animData.assets = [];
        }
        this.assets = this.animationData.assets;
        this.frameRate = this.animationData.fr;
        this.frameMult = this.animationData.fr / 1e3;
        this.renderer.searchExtraCompositions(animData.assets);
        this.markers = markerParser(animData.markers || []);
        this.trigger("config_ready");
        this.preloadImages();
        this.loadSegments();
        this.updaFrameModifier();
        this.waitForFontsLoaded();
        if (this.isPaused) {
          this.audioController.pause();
        }
      } catch (error) {
        this.triggerConfigError(error);
      }
    };
    AnimationItem.prototype.waitForFontsLoaded = function() {
      if (!this.renderer) {
        return;
      }
      if (this.renderer.globalData.fontManager.isLoaded) {
        this.checkLoaded();
      } else {
        setTimeout(this.waitForFontsLoaded.bind(this), 20);
      }
    };
    AnimationItem.prototype.checkLoaded = function() {
      if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== "canvas") && this.imagePreloader.loadedFootages()) {
        this.isLoaded = true;
        var expressionsPlugin2 = getExpressionsPlugin();
        if (expressionsPlugin2) {
          expressionsPlugin2.initExpressions(this);
        }
        this.renderer.initItems();
        setTimeout(function() {
          this.trigger("DOMLoaded");
        }.bind(this), 0);
        this.gotoFrame();
        if (this.autoplay) {
          this.play();
        }
      }
    };
    AnimationItem.prototype.resize = function(width2, height2) {
      var _width = typeof width2 === "number" ? width2 : void 0;
      var _height = typeof height2 === "number" ? height2 : void 0;
      this.renderer.updateContainerSize(_width, _height);
    };
    AnimationItem.prototype.setSubframe = function(flag) {
      this.isSubframeEnabled = !!flag;
    };
    AnimationItem.prototype.gotoFrame = function() {
      this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;
      if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
        this.currentFrame = this.timeCompleted;
      }
      this.trigger("enterFrame");
      this.renderFrame();
      this.trigger("drawnFrame");
    };
    AnimationItem.prototype.renderFrame = function() {
      if (this.isLoaded === false || !this.renderer) {
        return;
      }
      try {
        if (this.expressionsPlugin) {
          this.expressionsPlugin.resetFrame();
        }
        this.renderer.renderFrame(this.currentFrame + this.firstFrame);
      } catch (error) {
        this.triggerRenderFrameError(error);
      }
    };
    AnimationItem.prototype.play = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      if (this.isPaused === true) {
        this.isPaused = false;
        this.trigger("_play");
        this.audioController.resume();
        if (this._idle) {
          this._idle = false;
          this.trigger("_active");
        }
      }
    };
    AnimationItem.prototype.pause = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      if (this.isPaused === false) {
        this.isPaused = true;
        this.trigger("_pause");
        this._idle = true;
        this.trigger("_idle");
        this.audioController.pause();
      }
    };
    AnimationItem.prototype.togglePause = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      if (this.isPaused === true) {
        this.play();
      } else {
        this.pause();
      }
    };
    AnimationItem.prototype.stop = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.pause();
      this.playCount = 0;
      this._completedLoop = false;
      this.setCurrentRawFrameValue(0);
    };
    AnimationItem.prototype.getMarkerData = function(markerName) {
      var marker;
      for (var i2 = 0; i2 < this.markers.length; i2 += 1) {
        marker = this.markers[i2];
        if (marker.payload && marker.payload.name === markerName) {
          return marker;
        }
      }
      return null;
    };
    AnimationItem.prototype.goToAndStop = function(value2, isFrame, name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      var numValue = Number(value2);
      if (isNaN(numValue)) {
        var marker = this.getMarkerData(value2);
        if (marker) {
          this.goToAndStop(marker.time, true);
        }
      } else if (isFrame) {
        this.setCurrentRawFrameValue(value2);
      } else {
        this.setCurrentRawFrameValue(value2 * this.frameModifier);
      }
      this.pause();
    };
    AnimationItem.prototype.goToAndPlay = function(value2, isFrame, name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      var numValue = Number(value2);
      if (isNaN(numValue)) {
        var marker = this.getMarkerData(value2);
        if (marker) {
          if (!marker.duration) {
            this.goToAndStop(marker.time, true);
          } else {
            this.playSegments([marker.time, marker.time + marker.duration], true);
          }
        }
      } else {
        this.goToAndStop(numValue, isFrame, name2);
      }
      this.play();
    };
    AnimationItem.prototype.advanceTime = function(value2) {
      if (this.isPaused === true || this.isLoaded === false) {
        return;
      }
      var nextValue = this.currentRawFrame + value2 * this.frameModifier;
      var _isComplete = false;
      if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
        if (!this.loop || this.playCount === this.loop) {
          if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
            _isComplete = true;
            nextValue = this.totalFrames - 1;
          }
        } else if (nextValue >= this.totalFrames) {
          this.playCount += 1;
          if (!this.checkSegments(nextValue % this.totalFrames)) {
            this.setCurrentRawFrameValue(nextValue % this.totalFrames);
            this._completedLoop = true;
            this.trigger("loopComplete");
          }
        } else {
          this.setCurrentRawFrameValue(nextValue);
        }
      } else if (nextValue < 0) {
        if (!this.checkSegments(nextValue % this.totalFrames)) {
          if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
            this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);
            if (!this._completedLoop) {
              this._completedLoop = true;
            } else {
              this.trigger("loopComplete");
            }
          } else {
            _isComplete = true;
            nextValue = 0;
          }
        }
      } else {
        this.setCurrentRawFrameValue(nextValue);
      }
      if (_isComplete) {
        this.setCurrentRawFrameValue(nextValue);
        this.pause();
        this.trigger("complete");
      }
    };
    AnimationItem.prototype.adjustSegment = function(arr, offset) {
      this.playCount = 0;
      if (arr[1] < arr[0]) {
        if (this.frameModifier > 0) {
          if (this.playSpeed < 0) {
            this.setSpeed(-this.playSpeed);
          } else {
            this.setDirection(-1);
          }
        }
        this.totalFrames = arr[0] - arr[1];
        this.timeCompleted = this.totalFrames;
        this.firstFrame = arr[1];
        this.setCurrentRawFrameValue(this.totalFrames - 1e-3 - offset);
      } else if (arr[1] > arr[0]) {
        if (this.frameModifier < 0) {
          if (this.playSpeed < 0) {
            this.setSpeed(-this.playSpeed);
          } else {
            this.setDirection(1);
          }
        }
        this.totalFrames = arr[1] - arr[0];
        this.timeCompleted = this.totalFrames;
        this.firstFrame = arr[0];
        this.setCurrentRawFrameValue(1e-3 + offset);
      }
      this.trigger("segmentStart");
    };
    AnimationItem.prototype.setSegment = function(init, end) {
      var pendingFrame = -1;
      if (this.isPaused) {
        if (this.currentRawFrame + this.firstFrame < init) {
          pendingFrame = init;
        } else if (this.currentRawFrame + this.firstFrame > end) {
          pendingFrame = end - init;
        }
      }
      this.firstFrame = init;
      this.totalFrames = end - init;
      this.timeCompleted = this.totalFrames;
      if (pendingFrame !== -1) {
        this.goToAndStop(pendingFrame, true);
      }
    };
    AnimationItem.prototype.playSegments = function(arr, forceFlag) {
      if (forceFlag) {
        this.segments.length = 0;
      }
      if (_typeof$4(arr[0]) === "object") {
        var i2;
        var len = arr.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.segments.push(arr[i2]);
        }
      } else {
        this.segments.push(arr);
      }
      if (this.segments.length && forceFlag) {
        this.adjustSegment(this.segments.shift(), 0);
      }
      if (this.isPaused) {
        this.play();
      }
    };
    AnimationItem.prototype.resetSegments = function(forceFlag) {
      this.segments.length = 0;
      this.segments.push([this.animationData.ip, this.animationData.op]);
      if (forceFlag) {
        this.checkSegments(0);
      }
    };
    AnimationItem.prototype.checkSegments = function(offset) {
      if (this.segments.length) {
        this.adjustSegment(this.segments.shift(), offset);
        return true;
      }
      return false;
    };
    AnimationItem.prototype.destroy = function(name2) {
      if (name2 && this.name !== name2 || !this.renderer) {
        return;
      }
      this.renderer.destroy();
      this.imagePreloader.destroy();
      this.trigger("destroy");
      this._cbs = null;
      this.onEnterFrame = null;
      this.onLoopComplete = null;
      this.onComplete = null;
      this.onSegmentStart = null;
      this.onDestroy = null;
      this.renderer = null;
      this.expressionsPlugin = null;
      this.imagePreloader = null;
      this.projectInterface = null;
    };
    AnimationItem.prototype.setCurrentRawFrameValue = function(value2) {
      this.currentRawFrame = value2;
      this.gotoFrame();
    };
    AnimationItem.prototype.setSpeed = function(val2) {
      this.playSpeed = val2;
      this.updaFrameModifier();
    };
    AnimationItem.prototype.setDirection = function(val2) {
      this.playDirection = val2 < 0 ? -1 : 1;
      this.updaFrameModifier();
    };
    AnimationItem.prototype.setLoop = function(isLooping) {
      this.loop = isLooping;
    };
    AnimationItem.prototype.setVolume = function(val2, name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.audioController.setVolume(val2);
    };
    AnimationItem.prototype.getVolume = function() {
      return this.audioController.getVolume();
    };
    AnimationItem.prototype.mute = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.audioController.mute();
    };
    AnimationItem.prototype.unmute = function(name2) {
      if (name2 && this.name !== name2) {
        return;
      }
      this.audioController.unmute();
    };
    AnimationItem.prototype.updaFrameModifier = function() {
      this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
      this.audioController.setRate(this.playSpeed * this.playDirection);
    };
    AnimationItem.prototype.getPath = function() {
      return this.path;
    };
    AnimationItem.prototype.getAssetsPath = function(assetData) {
      var path = "";
      if (assetData.e) {
        path = assetData.p;
      } else if (this.assetsPath) {
        var imagePath = assetData.p;
        if (imagePath.indexOf("images/") !== -1) {
          imagePath = imagePath.split("/")[1];
        }
        path = this.assetsPath + imagePath;
      } else {
        path = this.path;
        path += assetData.u ? assetData.u : "";
        path += assetData.p;
      }
      return path;
    };
    AnimationItem.prototype.getAssetData = function(id2) {
      var i2 = 0;
      var len = this.assets.length;
      while (i2 < len) {
        if (id2 === this.assets[i2].id) {
          return this.assets[i2];
        }
        i2 += 1;
      }
      return null;
    };
    AnimationItem.prototype.hide = function() {
      this.renderer.hide();
    };
    AnimationItem.prototype.show = function() {
      this.renderer.show();
    };
    AnimationItem.prototype.getDuration = function(isFrame) {
      return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
    };
    AnimationItem.prototype.updateDocumentData = function(path, documentData, index2) {
      try {
        var element = this.renderer.getElementByPath(path);
        element.updateDocumentData(documentData, index2);
      } catch (error) {
      }
    };
    AnimationItem.prototype.trigger = function(name2) {
      if (this._cbs && this._cbs[name2]) {
        switch (name2) {
          case "enterFrame":
            this.triggerEvent(name2, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameModifier));
            break;
          case "drawnFrame":
            this.drawnFrameEvent.currentTime = this.currentFrame;
            this.drawnFrameEvent.totalTime = this.totalFrames;
            this.drawnFrameEvent.direction = this.frameModifier;
            this.triggerEvent(name2, this.drawnFrameEvent);
            break;
          case "loopComplete":
            this.triggerEvent(name2, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
            break;
          case "complete":
            this.triggerEvent(name2, new BMCompleteEvent(name2, this.frameMult));
            break;
          case "segmentStart":
            this.triggerEvent(name2, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
            break;
          case "destroy":
            this.triggerEvent(name2, new BMDestroyEvent(name2, this));
            break;
          default:
            this.triggerEvent(name2);
        }
      }
      if (name2 === "enterFrame" && this.onEnterFrame) {
        this.onEnterFrame.call(this, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameMult));
      }
      if (name2 === "loopComplete" && this.onLoopComplete) {
        this.onLoopComplete.call(this, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
      }
      if (name2 === "complete" && this.onComplete) {
        this.onComplete.call(this, new BMCompleteEvent(name2, this.frameMult));
      }
      if (name2 === "segmentStart" && this.onSegmentStart) {
        this.onSegmentStart.call(this, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
      }
      if (name2 === "destroy" && this.onDestroy) {
        this.onDestroy.call(this, new BMDestroyEvent(name2, this));
      }
    };
    AnimationItem.prototype.triggerRenderFrameError = function(nativeError) {
      var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
      this.triggerEvent("error", error);
      if (this.onError) {
        this.onError.call(this, error);
      }
    };
    AnimationItem.prototype.triggerConfigError = function(nativeError) {
      var error = new BMConfigErrorEvent(nativeError, this.currentFrame);
      this.triggerEvent("error", error);
      if (this.onError) {
        this.onError.call(this, error);
      }
    };
    var animationManager = function() {
      var moduleOb = {};
      var registeredAnimations = [];
      var initTime = 0;
      var len = 0;
      var playingAnimationsNum = 0;
      var _stopped = true;
      var _isFrozen = false;
      function removeElement(ev) {
        var i2 = 0;
        var animItem = ev.target;
        while (i2 < len) {
          if (registeredAnimations[i2].animation === animItem) {
            registeredAnimations.splice(i2, 1);
            i2 -= 1;
            len -= 1;
            if (!animItem.isPaused) {
              subtractPlayingCount();
            }
          }
          i2 += 1;
        }
      }
      function registerAnimation(element, animationData) {
        if (!element) {
          return null;
        }
        var i2 = 0;
        while (i2 < len) {
          if (registeredAnimations[i2].elem === element && registeredAnimations[i2].elem !== null) {
            return registeredAnimations[i2].animation;
          }
          i2 += 1;
        }
        var animItem = new AnimationItem();
        setupAnimation(animItem, element);
        animItem.setData(element, animationData);
        return animItem;
      }
      function getRegisteredAnimations() {
        var i2;
        var lenAnims = registeredAnimations.length;
        var animations = [];
        for (i2 = 0; i2 < lenAnims; i2 += 1) {
          animations.push(registeredAnimations[i2].animation);
        }
        return animations;
      }
      function addPlayingCount() {
        playingAnimationsNum += 1;
        activate();
      }
      function subtractPlayingCount() {
        playingAnimationsNum -= 1;
      }
      function setupAnimation(animItem, element) {
        animItem.addEventListener("destroy", removeElement);
        animItem.addEventListener("_active", addPlayingCount);
        animItem.addEventListener("_idle", subtractPlayingCount);
        registeredAnimations.push({
          elem: element,
          animation: animItem
        });
        len += 1;
      }
      function loadAnimation2(params) {
        var animItem = new AnimationItem();
        setupAnimation(animItem, null);
        animItem.setParams(params);
        return animItem;
      }
      function setSpeed(val2, animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.setSpeed(val2, animation);
        }
      }
      function setDirection(val2, animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.setDirection(val2, animation);
        }
      }
      function play(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.play(animation);
        }
      }
      function resume(nowTime) {
        var elapsedTime = nowTime - initTime;
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.advanceTime(elapsedTime);
        }
        initTime = nowTime;
        if (playingAnimationsNum && !_isFrozen) {
          window.requestAnimationFrame(resume);
        } else {
          _stopped = true;
        }
      }
      function first(nowTime) {
        initTime = nowTime;
        window.requestAnimationFrame(resume);
      }
      function pause(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.pause(animation);
        }
      }
      function goToAndStop(value2, isFrame, animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.goToAndStop(value2, isFrame, animation);
        }
      }
      function stop2(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.stop(animation);
        }
      }
      function togglePause(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.togglePause(animation);
        }
      }
      function destroy(animation) {
        var i2;
        for (i2 = len - 1; i2 >= 0; i2 -= 1) {
          registeredAnimations[i2].animation.destroy(animation);
        }
      }
      function searchAnimations2(animationData, standalone, renderer) {
        var animElements = [].concat([].slice.call(document.getElementsByClassName("lottie")), [].slice.call(document.getElementsByClassName("bodymovin")));
        var i2;
        var lenAnims = animElements.length;
        for (i2 = 0; i2 < lenAnims; i2 += 1) {
          if (renderer) {
            animElements[i2].setAttribute("data-bm-type", renderer);
          }
          registerAnimation(animElements[i2], animationData);
        }
        if (standalone && lenAnims === 0) {
          if (!renderer) {
            renderer = "svg";
          }
          var body = document.getElementsByTagName("body")[0];
          body.innerText = "";
          var div2 = createTag("div");
          div2.style.width = "100%";
          div2.style.height = "100%";
          div2.setAttribute("data-bm-type", renderer);
          body.appendChild(div2);
          registerAnimation(div2, animationData);
        }
      }
      function resize() {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.resize();
        }
      }
      function activate() {
        if (!_isFrozen && playingAnimationsNum) {
          if (_stopped) {
            window.requestAnimationFrame(first);
            _stopped = false;
          }
        }
      }
      function freeze() {
        _isFrozen = true;
      }
      function unfreeze() {
        _isFrozen = false;
        activate();
      }
      function setVolume(val2, animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.setVolume(val2, animation);
        }
      }
      function mute(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.mute(animation);
        }
      }
      function unmute(animation) {
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          registeredAnimations[i2].animation.unmute(animation);
        }
      }
      moduleOb.registerAnimation = registerAnimation;
      moduleOb.loadAnimation = loadAnimation2;
      moduleOb.setSpeed = setSpeed;
      moduleOb.setDirection = setDirection;
      moduleOb.play = play;
      moduleOb.pause = pause;
      moduleOb.stop = stop2;
      moduleOb.togglePause = togglePause;
      moduleOb.searchAnimations = searchAnimations2;
      moduleOb.resize = resize;
      moduleOb.goToAndStop = goToAndStop;
      moduleOb.destroy = destroy;
      moduleOb.freeze = freeze;
      moduleOb.unfreeze = unfreeze;
      moduleOb.setVolume = setVolume;
      moduleOb.mute = mute;
      moduleOb.unmute = unmute;
      moduleOb.getRegisteredAnimations = getRegisteredAnimations;
      return moduleOb;
    }();
    var BezierFactory = function() {
      var ob2 = {};
      ob2.getBezierEasing = getBezierEasing;
      var beziers = {};
      function getBezierEasing(a3, b3, c7, d4, nm2) {
        var str = nm2 || ("bez_" + a3 + "_" + b3 + "_" + c7 + "_" + d4).replace(/\./g, "p");
        if (beziers[str]) {
          return beziers[str];
        }
        var bezEasing = new BezierEasing([a3, b3, c7, d4]);
        beziers[str] = bezEasing;
        return bezEasing;
      }
      var NEWTON_ITERATIONS = 4;
      var NEWTON_MIN_SLOPE = 1e-3;
      var SUBDIVISION_PRECISION = 1e-7;
      var SUBDIVISION_MAX_ITERATIONS = 10;
      var kSplineTableSize = 11;
      var kSampleStepSize = 1 / (kSplineTableSize - 1);
      var float32ArraySupported = typeof Float32Array === "function";
      function A2(aA1, aA2) {
        return 1 - 3 * aA2 + 3 * aA1;
      }
      function B3(aA1, aA2) {
        return 3 * aA2 - 6 * aA1;
      }
      function C2(aA1) {
        return 3 * aA1;
      }
      function calcBezier(aT, aA1, aA2) {
        return ((A2(aA1, aA2) * aT + B3(aA1, aA2)) * aT + C2(aA1)) * aT;
      }
      function getSlope(aT, aA1, aA2) {
        return 3 * A2(aA1, aA2) * aT * aT + 2 * B3(aA1, aA2) * aT + C2(aA1);
      }
      function binarySubdivide(aX, aA, aB, mX1, mX2) {
        var currentX, currentT, i2 = 0;
        do {
          currentT = aA + (aB - aA) / 2;
          currentX = calcBezier(currentT, mX1, mX2) - aX;
          if (currentX > 0) {
            aB = currentT;
          } else {
            aA = currentT;
          }
        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i2 < SUBDIVISION_MAX_ITERATIONS);
        return currentT;
      }
      function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
        for (var i2 = 0; i2 < NEWTON_ITERATIONS; ++i2) {
          var currentSlope = getSlope(aGuessT, mX1, mX2);
          if (currentSlope === 0)
            return aGuessT;
          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
          aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
      }
      function BezierEasing(points) {
        this._p = points;
        this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
        this._precomputed = false;
        this.get = this.get.bind(this);
      }
      BezierEasing.prototype = {
        get: function get(x3) {
          var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
          if (!this._precomputed)
            this._precompute();
          if (mX1 === mY1 && mX2 === mY2)
            return x3;
          if (x3 === 0)
            return 0;
          if (x3 === 1)
            return 1;
          return calcBezier(this._getTForX(x3), mY1, mY2);
        },
        // Private part
        _precompute: function _precompute() {
          var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
          this._precomputed = true;
          if (mX1 !== mY1 || mX2 !== mY2) {
            this._calcSampleValues();
          }
        },
        _calcSampleValues: function _calcSampleValues() {
          var mX1 = this._p[0], mX2 = this._p[2];
          for (var i2 = 0; i2 < kSplineTableSize; ++i2) {
            this._mSampleValues[i2] = calcBezier(i2 * kSampleStepSize, mX1, mX2);
          }
        },
        /**
             * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
             */
        _getTForX: function _getTForX(aX) {
          var mX1 = this._p[0], mX2 = this._p[2], mSampleValues = this._mSampleValues;
          var intervalStart = 0;
          var currentSample = 1;
          var lastSample = kSplineTableSize - 1;
          for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
            intervalStart += kSampleStepSize;
          }
          --currentSample;
          var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
          var guessForT = intervalStart + dist * kSampleStepSize;
          var initialSlope = getSlope(guessForT, mX1, mX2);
          if (initialSlope >= NEWTON_MIN_SLOPE) {
            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
          }
          if (initialSlope === 0) {
            return guessForT;
          }
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
      };
      return ob2;
    }();
    var pooling = function() {
      function _double(arr) {
        return arr.concat(createSizedArray(arr.length));
      }
      return {
        "double": _double
      };
    }();
    var poolFactory = function() {
      return function(initialLength, _create, _release) {
        var _length = 0;
        var _maxLength = initialLength;
        var pool = createSizedArray(_maxLength);
        var ob2 = {
          newElement,
          release
        };
        function newElement() {
          var element;
          if (_length) {
            _length -= 1;
            element = pool[_length];
          } else {
            element = _create();
          }
          return element;
        }
        function release(element) {
          if (_length === _maxLength) {
            pool = pooling["double"](pool);
            _maxLength *= 2;
          }
          if (_release) {
            _release(element);
          }
          pool[_length] = element;
          _length += 1;
        }
        return ob2;
      };
    }();
    var bezierLengthPool = function() {
      function create() {
        return {
          addedLength: 0,
          percents: createTypedArray("float32", getDefaultCurveSegments()),
          lengths: createTypedArray("float32", getDefaultCurveSegments())
        };
      }
      return poolFactory(8, create);
    }();
    var segmentsLengthPool = function() {
      function create() {
        return {
          lengths: [],
          totalLength: 0
        };
      }
      function release(element) {
        var i2;
        var len = element.lengths.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          bezierLengthPool.release(element.lengths[i2]);
        }
        element.lengths.length = 0;
      }
      return poolFactory(8, create, release);
    }();
    function bezFunction() {
      var math = Math;
      function pointOnLine2D(x1, y1, x22, y22, x3, y32) {
        var det1 = x1 * y22 + y1 * x3 + x22 * y32 - x3 * y22 - y32 * x1 - x22 * y1;
        return det1 > -1e-3 && det1 < 1e-3;
      }
      function pointOnLine3D(x1, y1, z1, x22, y22, z22, x3, y32, z3) {
        if (z1 === 0 && z22 === 0 && z3 === 0) {
          return pointOnLine2D(x1, y1, x22, y22, x3, y32);
        }
        var dist1 = math.sqrt(math.pow(x22 - x1, 2) + math.pow(y22 - y1, 2) + math.pow(z22 - z1, 2));
        var dist2 = math.sqrt(math.pow(x3 - x1, 2) + math.pow(y32 - y1, 2) + math.pow(z3 - z1, 2));
        var dist3 = math.sqrt(math.pow(x3 - x22, 2) + math.pow(y32 - y22, 2) + math.pow(z3 - z22, 2));
        var diffDist;
        if (dist1 > dist2) {
          if (dist1 > dist3) {
            diffDist = dist1 - dist2 - dist3;
          } else {
            diffDist = dist3 - dist2 - dist1;
          }
        } else if (dist3 > dist2) {
          diffDist = dist3 - dist2 - dist1;
        } else {
          diffDist = dist2 - dist1 - dist3;
        }
        return diffDist > -1e-4 && diffDist < 1e-4;
      }
      var getBezierLength = function() {
        return function(pt1, pt2, pt3, pt4) {
          var curveSegments = getDefaultCurveSegments();
          var k3;
          var i2;
          var len;
          var ptCoord;
          var perc;
          var addedLength = 0;
          var ptDistance;
          var point = [];
          var lastPoint = [];
          var lengthData = bezierLengthPool.newElement();
          len = pt3.length;
          for (k3 = 0; k3 < curveSegments; k3 += 1) {
            perc = k3 / (curveSegments - 1);
            ptDistance = 0;
            for (i2 = 0; i2 < len; i2 += 1) {
              ptCoord = bmPow(1 - perc, 3) * pt1[i2] + 3 * bmPow(1 - perc, 2) * perc * pt3[i2] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i2] + bmPow(perc, 3) * pt2[i2];
              point[i2] = ptCoord;
              if (lastPoint[i2] !== null) {
                ptDistance += bmPow(point[i2] - lastPoint[i2], 2);
              }
              lastPoint[i2] = point[i2];
            }
            if (ptDistance) {
              ptDistance = bmSqrt(ptDistance);
              addedLength += ptDistance;
            }
            lengthData.percents[k3] = perc;
            lengthData.lengths[k3] = addedLength;
          }
          lengthData.addedLength = addedLength;
          return lengthData;
        };
      }();
      function getSegmentsLength(shapeData) {
        var segmentsLength = segmentsLengthPool.newElement();
        var closed = shapeData.c;
        var pathV = shapeData.v;
        var pathO = shapeData.o;
        var pathI = shapeData.i;
        var i2;
        var len = shapeData._length;
        var lengths = segmentsLength.lengths;
        var totalLength = 0;
        for (i2 = 0; i2 < len - 1; i2 += 1) {
          lengths[i2] = getBezierLength(pathV[i2], pathV[i2 + 1], pathO[i2], pathI[i2 + 1]);
          totalLength += lengths[i2].addedLength;
        }
        if (closed && len) {
          lengths[i2] = getBezierLength(pathV[i2], pathV[0], pathO[i2], pathI[0]);
          totalLength += lengths[i2].addedLength;
        }
        segmentsLength.totalLength = totalLength;
        return segmentsLength;
      }
      function BezierData(length2) {
        this.segmentLength = 0;
        this.points = new Array(length2);
      }
      function PointData(partial, point) {
        this.partialLength = partial;
        this.point = point;
      }
      var buildBezierData = function() {
        var storedData = {};
        return function(pt1, pt2, pt3, pt4) {
          var bezierName = (pt1[0] + "_" + pt1[1] + "_" + pt2[0] + "_" + pt2[1] + "_" + pt3[0] + "_" + pt3[1] + "_" + pt4[0] + "_" + pt4[1]).replace(/\./g, "p");
          if (!storedData[bezierName]) {
            var curveSegments = getDefaultCurveSegments();
            var k3;
            var i2;
            var len;
            var ptCoord;
            var perc;
            var addedLength = 0;
            var ptDistance;
            var point;
            var lastPoint = null;
            if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
              curveSegments = 2;
            }
            var bezierData = new BezierData(curveSegments);
            len = pt3.length;
            for (k3 = 0; k3 < curveSegments; k3 += 1) {
              point = createSizedArray(len);
              perc = k3 / (curveSegments - 1);
              ptDistance = 0;
              for (i2 = 0; i2 < len; i2 += 1) {
                ptCoord = bmPow(1 - perc, 3) * pt1[i2] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i2] + pt3[i2]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i2] + pt4[i2]) + bmPow(perc, 3) * pt2[i2];
                point[i2] = ptCoord;
                if (lastPoint !== null) {
                  ptDistance += bmPow(point[i2] - lastPoint[i2], 2);
                }
              }
              ptDistance = bmSqrt(ptDistance);
              addedLength += ptDistance;
              bezierData.points[k3] = new PointData(ptDistance, point);
              lastPoint = point;
            }
            bezierData.segmentLength = addedLength;
            storedData[bezierName] = bezierData;
          }
          return storedData[bezierName];
        };
      }();
      function getDistancePerc(perc, bezierData) {
        var percents = bezierData.percents;
        var lengths = bezierData.lengths;
        var len = percents.length;
        var initPos = bmFloor((len - 1) * perc);
        var lengthPos = perc * bezierData.addedLength;
        var lPerc = 0;
        if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
          return percents[initPos];
        }
        var dir = lengths[initPos] > lengthPos ? -1 : 1;
        var flag = true;
        while (flag) {
          if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
            lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
            flag = false;
          } else {
            initPos += dir;
          }
          if (initPos < 0 || initPos >= len - 1) {
            if (initPos === len - 1) {
              return percents[initPos];
            }
            flag = false;
          }
        }
        return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
      }
      function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
        var t1 = getDistancePerc(percent, bezierData);
        var u1 = 1 - t1;
        var ptX = math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1e3) / 1e3;
        var ptY = math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1e3) / 1e3;
        return [ptX, ptY];
      }
      var bezierSegmentPoints = createTypedArray("float32", 8);
      function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {
        if (startPerc < 0) {
          startPerc = 0;
        } else if (startPerc > 1) {
          startPerc = 1;
        }
        var t0 = getDistancePerc(startPerc, bezierData);
        endPerc = endPerc > 1 ? 1 : endPerc;
        var t1 = getDistancePerc(endPerc, bezierData);
        var i2;
        var len = pt1.length;
        var u0 = 1 - t0;
        var u1 = 1 - t1;
        var u0u0u0 = u0 * u0 * u0;
        var t0u0u0_3 = t0 * u0 * u0 * 3;
        var t0t0u0_3 = t0 * t0 * u0 * 3;
        var t0t0t0 = t0 * t0 * t0;
        var u0u0u1 = u0 * u0 * u1;
        var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1;
        var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1;
        var t0t0t1 = t0 * t0 * t1;
        var u0u1u1 = u0 * u1 * u1;
        var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1;
        var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1;
        var t0t1t1 = t0 * t1 * t1;
        var u1u1u1 = u1 * u1 * u1;
        var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1;
        var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1;
        var t1t1t1 = t1 * t1 * t1;
        for (i2 = 0; i2 < len; i2 += 1) {
          bezierSegmentPoints[i2 * 4] = math.round((u0u0u0 * pt1[i2] + t0u0u0_3 * pt3[i2] + t0t0u0_3 * pt4[i2] + t0t0t0 * pt2[i2]) * 1e3) / 1e3;
          bezierSegmentPoints[i2 * 4 + 1] = math.round((u0u0u1 * pt1[i2] + t0u0u1_3 * pt3[i2] + t0t0u1_3 * pt4[i2] + t0t0t1 * pt2[i2]) * 1e3) / 1e3;
          bezierSegmentPoints[i2 * 4 + 2] = math.round((u0u1u1 * pt1[i2] + t0u1u1_3 * pt3[i2] + t0t1u1_3 * pt4[i2] + t0t1t1 * pt2[i2]) * 1e3) / 1e3;
          bezierSegmentPoints[i2 * 4 + 3] = math.round((u1u1u1 * pt1[i2] + t1u1u1_3 * pt3[i2] + t1t1u1_3 * pt4[i2] + t1t1t1 * pt2[i2]) * 1e3) / 1e3;
        }
        return bezierSegmentPoints;
      }
      return {
        getSegmentsLength,
        getNewSegment,
        getPointInSegment,
        buildBezierData,
        pointOnLine2D,
        pointOnLine3D
      };
    }
    var bez = bezFunction();
    var initFrame = initialDefaultFrame;
    var mathAbs = Math.abs;
    function interpolateValue(frameNum, caching) {
      var offsetTime = this.offsetTime;
      var newValue;
      if (this.propType === "multidimensional") {
        newValue = createTypedArray("float32", this.pv.length);
      }
      var iterationIndex = caching.lastIndex;
      var i2 = iterationIndex;
      var len = this.keyframes.length - 1;
      var flag = true;
      var keyData;
      var nextKeyData;
      var keyframeMetadata;
      while (flag) {
        keyData = this.keyframes[i2];
        nextKeyData = this.keyframes[i2 + 1];
        if (i2 === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
          if (keyData.h) {
            keyData = nextKeyData;
          }
          iterationIndex = 0;
          break;
        }
        if (nextKeyData.t - offsetTime > frameNum) {
          iterationIndex = i2;
          break;
        }
        if (i2 < len - 1) {
          i2 += 1;
        } else {
          iterationIndex = 0;
          flag = false;
        }
      }
      keyframeMetadata = this.keyframesMetadata[i2] || {};
      var k3;
      var kLen;
      var perc;
      var jLen;
      var j;
      var fnc;
      var nextKeyTime = nextKeyData.t - offsetTime;
      var keyTime = keyData.t - offsetTime;
      var endValue;
      if (keyData.to) {
        if (!keyframeMetadata.bezierData) {
          keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
        }
        var bezierData = keyframeMetadata.bezierData;
        if (frameNum >= nextKeyTime || frameNum < keyTime) {
          var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
          kLen = bezierData.points[ind].point.length;
          for (k3 = 0; k3 < kLen; k3 += 1) {
            newValue[k3] = bezierData.points[ind].point[k3];
          }
        } else {
          if (keyframeMetadata.__fnct) {
            fnc = keyframeMetadata.__fnct;
          } else {
            fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
            keyframeMetadata.__fnct = fnc;
          }
          perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
          var distanceInLine = bezierData.segmentLength * perc;
          var segmentPerc;
          var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i2 ? caching._lastAddedLength : 0;
          j = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i2 ? caching._lastPoint : 0;
          flag = true;
          jLen = bezierData.points.length;
          while (flag) {
            addedLength += bezierData.points[j].partialLength;
            if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {
              kLen = bezierData.points[j].point.length;
              for (k3 = 0; k3 < kLen; k3 += 1) {
                newValue[k3] = bezierData.points[j].point[k3];
              }
              break;
            } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
              segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;
              kLen = bezierData.points[j].point.length;
              for (k3 = 0; k3 < kLen; k3 += 1) {
                newValue[k3] = bezierData.points[j].point[k3] + (bezierData.points[j + 1].point[k3] - bezierData.points[j].point[k3]) * segmentPerc;
              }
              break;
            }
            if (j < jLen - 1) {
              j += 1;
            } else {
              flag = false;
            }
          }
          caching._lastPoint = j;
          caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
          caching._lastKeyframeIndex = i2;
        }
      } else {
        var outX;
        var outY;
        var inX;
        var inY;
        var keyValue;
        len = keyData.s.length;
        endValue = nextKeyData.s || keyData.e;
        if (this.sh && keyData.h !== 1) {
          if (frameNum >= nextKeyTime) {
            newValue[0] = endValue[0];
            newValue[1] = endValue[1];
            newValue[2] = endValue[2];
          } else if (frameNum <= keyTime) {
            newValue[0] = keyData.s[0];
            newValue[1] = keyData.s[1];
            newValue[2] = keyData.s[2];
          } else {
            var quatStart = createQuaternion(keyData.s);
            var quatEnd = createQuaternion(endValue);
            var time2 = (frameNum - keyTime) / (nextKeyTime - keyTime);
            quaternionToEuler(newValue, slerp(quatStart, quatEnd, time2));
          }
        } else {
          for (i2 = 0; i2 < len; i2 += 1) {
            if (keyData.h !== 1) {
              if (frameNum >= nextKeyTime) {
                perc = 1;
              } else if (frameNum < keyTime) {
                perc = 0;
              } else {
                if (keyData.o.x.constructor === Array) {
                  if (!keyframeMetadata.__fnct) {
                    keyframeMetadata.__fnct = [];
                  }
                  if (!keyframeMetadata.__fnct[i2]) {
                    outX = keyData.o.x[i2] === void 0 ? keyData.o.x[0] : keyData.o.x[i2];
                    outY = keyData.o.y[i2] === void 0 ? keyData.o.y[0] : keyData.o.y[i2];
                    inX = keyData.i.x[i2] === void 0 ? keyData.i.x[0] : keyData.i.x[i2];
                    inY = keyData.i.y[i2] === void 0 ? keyData.i.y[0] : keyData.i.y[i2];
                    fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                    keyframeMetadata.__fnct[i2] = fnc;
                  } else {
                    fnc = keyframeMetadata.__fnct[i2];
                  }
                } else if (!keyframeMetadata.__fnct) {
                  outX = keyData.o.x;
                  outY = keyData.o.y;
                  inX = keyData.i.x;
                  inY = keyData.i.y;
                  fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                  keyData.keyframeMetadata = fnc;
                } else {
                  fnc = keyframeMetadata.__fnct;
                }
                perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
              }
            }
            endValue = nextKeyData.s || keyData.e;
            keyValue = keyData.h === 1 ? keyData.s[i2] : keyData.s[i2] + (endValue[i2] - keyData.s[i2]) * perc;
            if (this.propType === "multidimensional") {
              newValue[i2] = keyValue;
            } else {
              newValue = keyValue;
            }
          }
        }
      }
      caching.lastIndex = iterationIndex;
      return newValue;
    }
    function slerp(a3, b3, t3) {
      var out = [];
      var ax = a3[0];
      var ay = a3[1];
      var az = a3[2];
      var aw = a3[3];
      var bx = b3[0];
      var by = b3[1];
      var bz = b3[2];
      var bw = b3[3];
      var omega;
      var cosom;
      var sinom;
      var scale0;
      var scale1;
      cosom = ax * bx + ay * by + az * bz + aw * bw;
      if (cosom < 0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
      }
      if (1 - cosom > 1e-6) {
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1 - t3) * omega) / sinom;
        scale1 = Math.sin(t3 * omega) / sinom;
      } else {
        scale0 = 1 - t3;
        scale1 = t3;
      }
      out[0] = scale0 * ax + scale1 * bx;
      out[1] = scale0 * ay + scale1 * by;
      out[2] = scale0 * az + scale1 * bz;
      out[3] = scale0 * aw + scale1 * bw;
      return out;
    }
    function quaternionToEuler(out, quat) {
      var qx = quat[0];
      var qy = quat[1];
      var qz = quat[2];
      var qw = quat[3];
      var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
      var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
      var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
      out[0] = heading / degToRads;
      out[1] = attitude / degToRads;
      out[2] = bank / degToRads;
    }
    function createQuaternion(values) {
      var heading = values[0] * degToRads;
      var attitude = values[1] * degToRads;
      var bank = values[2] * degToRads;
      var c12 = Math.cos(heading / 2);
      var c22 = Math.cos(attitude / 2);
      var c32 = Math.cos(bank / 2);
      var s1 = Math.sin(heading / 2);
      var s22 = Math.sin(attitude / 2);
      var s3 = Math.sin(bank / 2);
      var w3 = c12 * c22 * c32 - s1 * s22 * s3;
      var x3 = s1 * s22 * c32 + c12 * c22 * s3;
      var y4 = s1 * c22 * c32 + c12 * s22 * s3;
      var z3 = c12 * s22 * c32 - s1 * c22 * s3;
      return [x3, y4, z3, w3];
    }
    function getValueAtCurrentTime() {
      var frameNum = this.comp.renderedFrame - this.offsetTime;
      var initTime = this.keyframes[0].t - this.offsetTime;
      var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
      if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
        if (this._caching.lastFrame >= frameNum) {
          this._caching._lastKeyframeIndex = -1;
          this._caching.lastIndex = 0;
        }
        var renderResult = this.interpolateValue(frameNum, this._caching);
        this.pv = renderResult;
      }
      this._caching.lastFrame = frameNum;
      return this.pv;
    }
    function setVValue(val2) {
      var multipliedValue;
      if (this.propType === "unidimensional") {
        multipliedValue = val2 * this.mult;
        if (mathAbs(this.v - multipliedValue) > 1e-5) {
          this.v = multipliedValue;
          this._mdf = true;
        }
      } else {
        var i2 = 0;
        var len = this.v.length;
        while (i2 < len) {
          multipliedValue = val2[i2] * this.mult;
          if (mathAbs(this.v[i2] - multipliedValue) > 1e-5) {
            this.v[i2] = multipliedValue;
            this._mdf = true;
          }
          i2 += 1;
        }
      }
    }
    function processEffectsSequence() {
      if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
        return;
      }
      if (this.lock) {
        this.setVValue(this.pv);
        return;
      }
      this.lock = true;
      this._mdf = this._isFirstFrame;
      var i2;
      var len = this.effectsSequence.length;
      var finalValue = this.kf ? this.pv : this.data.k;
      for (i2 = 0; i2 < len; i2 += 1) {
        finalValue = this.effectsSequence[i2](finalValue);
      }
      this.setVValue(finalValue);
      this._isFirstFrame = false;
      this.lock = false;
      this.frameId = this.elem.globalData.frameId;
    }
    function addEffect(effectFunction) {
      this.effectsSequence.push(effectFunction);
      this.container.addDynamicProperty(this);
    }
    function ValueProperty(elem2, data2, mult, container) {
      this.propType = "unidimensional";
      this.mult = mult || 1;
      this.data = data2;
      this.v = mult ? data2.k * mult : data2.k;
      this.pv = data2.k;
      this._mdf = false;
      this.elem = elem2;
      this.container = container;
      this.comp = elem2.comp;
      this.k = false;
      this.kf = false;
      this.vel = 0;
      this.effectsSequence = [];
      this._isFirstFrame = true;
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.addEffect = addEffect;
    }
    function MultiDimensionalProperty(elem2, data2, mult, container) {
      this.propType = "multidimensional";
      this.mult = mult || 1;
      this.data = data2;
      this._mdf = false;
      this.elem = elem2;
      this.container = container;
      this.comp = elem2.comp;
      this.k = false;
      this.kf = false;
      this.frameId = -1;
      var i2;
      var len = data2.k.length;
      this.v = createTypedArray("float32", len);
      this.pv = createTypedArray("float32", len);
      this.vel = createTypedArray("float32", len);
      for (i2 = 0; i2 < len; i2 += 1) {
        this.v[i2] = data2.k[i2] * this.mult;
        this.pv[i2] = data2.k[i2];
      }
      this._isFirstFrame = true;
      this.effectsSequence = [];
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.addEffect = addEffect;
    }
    function KeyframedValueProperty(elem2, data2, mult, container) {
      this.propType = "unidimensional";
      this.keyframes = data2.k;
      this.keyframesMetadata = [];
      this.offsetTime = elem2.data.st;
      this.frameId = -1;
      this._caching = {
        lastFrame: initFrame,
        lastIndex: 0,
        value: 0,
        _lastKeyframeIndex: -1
      };
      this.k = true;
      this.kf = true;
      this.data = data2;
      this.mult = mult || 1;
      this.elem = elem2;
      this.container = container;
      this.comp = elem2.comp;
      this.v = initFrame;
      this.pv = initFrame;
      this._isFirstFrame = true;
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.interpolateValue = interpolateValue;
      this.effectsSequence = [getValueAtCurrentTime.bind(this)];
      this.addEffect = addEffect;
    }
    function KeyframedMultidimensionalProperty(elem2, data2, mult, container) {
      this.propType = "multidimensional";
      var i2;
      var len = data2.k.length;
      var s3;
      var e3;
      var to2;
      var ti2;
      for (i2 = 0; i2 < len - 1; i2 += 1) {
        if (data2.k[i2].to && data2.k[i2].s && data2.k[i2 + 1] && data2.k[i2 + 1].s) {
          s3 = data2.k[i2].s;
          e3 = data2.k[i2 + 1].s;
          to2 = data2.k[i2].to;
          ti2 = data2.k[i2].ti;
          if (s3.length === 2 && !(s3[0] === e3[0] && s3[1] === e3[1]) && bez.pointOnLine2D(s3[0], s3[1], e3[0], e3[1], s3[0] + to2[0], s3[1] + to2[1]) && bez.pointOnLine2D(s3[0], s3[1], e3[0], e3[1], e3[0] + ti2[0], e3[1] + ti2[1]) || s3.length === 3 && !(s3[0] === e3[0] && s3[1] === e3[1] && s3[2] === e3[2]) && bez.pointOnLine3D(s3[0], s3[1], s3[2], e3[0], e3[1], e3[2], s3[0] + to2[0], s3[1] + to2[1], s3[2] + to2[2]) && bez.pointOnLine3D(s3[0], s3[1], s3[2], e3[0], e3[1], e3[2], e3[0] + ti2[0], e3[1] + ti2[1], e3[2] + ti2[2])) {
            data2.k[i2].to = null;
            data2.k[i2].ti = null;
          }
          if (s3[0] === e3[0] && s3[1] === e3[1] && to2[0] === 0 && to2[1] === 0 && ti2[0] === 0 && ti2[1] === 0) {
            if (s3.length === 2 || s3[2] === e3[2] && to2[2] === 0 && ti2[2] === 0) {
              data2.k[i2].to = null;
              data2.k[i2].ti = null;
            }
          }
        }
      }
      this.effectsSequence = [getValueAtCurrentTime.bind(this)];
      this.data = data2;
      this.keyframes = data2.k;
      this.keyframesMetadata = [];
      this.offsetTime = elem2.data.st;
      this.k = true;
      this.kf = true;
      this._isFirstFrame = true;
      this.mult = mult || 1;
      this.elem = elem2;
      this.container = container;
      this.comp = elem2.comp;
      this.getValue = processEffectsSequence;
      this.setVValue = setVValue;
      this.interpolateValue = interpolateValue;
      this.frameId = -1;
      var arrLen = data2.k[0].s.length;
      this.v = createTypedArray("float32", arrLen);
      this.pv = createTypedArray("float32", arrLen);
      for (i2 = 0; i2 < arrLen; i2 += 1) {
        this.v[i2] = initFrame;
        this.pv[i2] = initFrame;
      }
      this._caching = {
        lastFrame: initFrame,
        lastIndex: 0,
        value: createTypedArray("float32", arrLen)
      };
      this.addEffect = addEffect;
    }
    var PropertyFactory = function() {
      function getProp(elem2, data2, type, mult, container) {
        if (data2.sid) {
          data2 = elem2.globalData.slotManager.getProp(data2);
        }
        var p2;
        if (!data2.k.length) {
          p2 = new ValueProperty(elem2, data2, mult, container);
        } else if (typeof data2.k[0] === "number") {
          p2 = new MultiDimensionalProperty(elem2, data2, mult, container);
        } else {
          switch (type) {
            case 0:
              p2 = new KeyframedValueProperty(elem2, data2, mult, container);
              break;
            case 1:
              p2 = new KeyframedMultidimensionalProperty(elem2, data2, mult, container);
              break;
          }
        }
        if (p2.effectsSequence.length) {
          container.addDynamicProperty(p2);
        }
        return p2;
      }
      var ob2 = {
        getProp
      };
      return ob2;
    }();
    function DynamicPropertyContainer() {
    }
    DynamicPropertyContainer.prototype = {
      addDynamicProperty: function addDynamicProperty(prop) {
        if (this.dynamicProperties.indexOf(prop) === -1) {
          this.dynamicProperties.push(prop);
          this.container.addDynamicProperty(this);
          this._isAnimated = true;
        }
      },
      iterateDynamicProperties: function iterateDynamicProperties() {
        this._mdf = false;
        var i2;
        var len = this.dynamicProperties.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.dynamicProperties[i2].getValue();
          if (this.dynamicProperties[i2]._mdf) {
            this._mdf = true;
          }
        }
      },
      initDynamicPropertyContainer: function initDynamicPropertyContainer(container) {
        this.container = container;
        this.dynamicProperties = [];
        this._mdf = false;
        this._isAnimated = false;
      }
    };
    var pointPool = function() {
      function create() {
        return createTypedArray("float32", 2);
      }
      return poolFactory(8, create);
    }();
    function ShapePath() {
      this.c = false;
      this._length = 0;
      this._maxLength = 8;
      this.v = createSizedArray(this._maxLength);
      this.o = createSizedArray(this._maxLength);
      this.i = createSizedArray(this._maxLength);
    }
    ShapePath.prototype.setPathData = function(closed, len) {
      this.c = closed;
      this.setLength(len);
      var i2 = 0;
      while (i2 < len) {
        this.v[i2] = pointPool.newElement();
        this.o[i2] = pointPool.newElement();
        this.i[i2] = pointPool.newElement();
        i2 += 1;
      }
    };
    ShapePath.prototype.setLength = function(len) {
      while (this._maxLength < len) {
        this.doubleArrayLength();
      }
      this._length = len;
    };
    ShapePath.prototype.doubleArrayLength = function() {
      this.v = this.v.concat(createSizedArray(this._maxLength));
      this.i = this.i.concat(createSizedArray(this._maxLength));
      this.o = this.o.concat(createSizedArray(this._maxLength));
      this._maxLength *= 2;
    };
    ShapePath.prototype.setXYAt = function(x3, y4, type, pos, replace) {
      var arr;
      this._length = Math.max(this._length, pos + 1);
      if (this._length >= this._maxLength) {
        this.doubleArrayLength();
      }
      switch (type) {
        case "v":
          arr = this.v;
          break;
        case "i":
          arr = this.i;
          break;
        case "o":
          arr = this.o;
          break;
        default:
          arr = [];
          break;
      }
      if (!arr[pos] || arr[pos] && !replace) {
        arr[pos] = pointPool.newElement();
      }
      arr[pos][0] = x3;
      arr[pos][1] = y4;
    };
    ShapePath.prototype.setTripleAt = function(vX, vY, oX, oY, iX, iY, pos, replace) {
      this.setXYAt(vX, vY, "v", pos, replace);
      this.setXYAt(oX, oY, "o", pos, replace);
      this.setXYAt(iX, iY, "i", pos, replace);
    };
    ShapePath.prototype.reverse = function() {
      var newPath = new ShapePath();
      newPath.setPathData(this.c, this._length);
      var vertices = this.v;
      var outPoints = this.o;
      var inPoints = this.i;
      var init = 0;
      if (this.c) {
        newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
        init = 1;
      }
      var cnt = this._length - 1;
      var len = this._length;
      var i2;
      for (i2 = init; i2 < len; i2 += 1) {
        newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i2, false);
        cnt -= 1;
      }
      return newPath;
    };
    ShapePath.prototype.length = function() {
      return this._length;
    };
    var shapePool = function() {
      function create() {
        return new ShapePath();
      }
      function release(shapePath) {
        var len = shapePath._length;
        var i2;
        for (i2 = 0; i2 < len; i2 += 1) {
          pointPool.release(shapePath.v[i2]);
          pointPool.release(shapePath.i[i2]);
          pointPool.release(shapePath.o[i2]);
          shapePath.v[i2] = null;
          shapePath.i[i2] = null;
          shapePath.o[i2] = null;
        }
        shapePath._length = 0;
        shapePath.c = false;
      }
      function clone2(shape) {
        var cloned = factory.newElement();
        var i2;
        var len = shape._length === void 0 ? shape.v.length : shape._length;
        cloned.setLength(len);
        cloned.c = shape.c;
        for (i2 = 0; i2 < len; i2 += 1) {
          cloned.setTripleAt(shape.v[i2][0], shape.v[i2][1], shape.o[i2][0], shape.o[i2][1], shape.i[i2][0], shape.i[i2][1], i2);
        }
        return cloned;
      }
      var factory = poolFactory(4, create, release);
      factory.clone = clone2;
      return factory;
    }();
    function ShapeCollection() {
      this._length = 0;
      this._maxLength = 4;
      this.shapes = createSizedArray(this._maxLength);
    }
    ShapeCollection.prototype.addShape = function(shapeData) {
      if (this._length === this._maxLength) {
        this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
        this._maxLength *= 2;
      }
      this.shapes[this._length] = shapeData;
      this._length += 1;
    };
    ShapeCollection.prototype.releaseShapes = function() {
      var i2;
      for (i2 = 0; i2 < this._length; i2 += 1) {
        shapePool.release(this.shapes[i2]);
      }
      this._length = 0;
    };
    var shapeCollectionPool = function() {
      var ob2 = {
        newShapeCollection,
        release
      };
      var _length = 0;
      var _maxLength = 4;
      var pool = createSizedArray(_maxLength);
      function newShapeCollection() {
        var shapeCollection;
        if (_length) {
          _length -= 1;
          shapeCollection = pool[_length];
        } else {
          shapeCollection = new ShapeCollection();
        }
        return shapeCollection;
      }
      function release(shapeCollection) {
        var i2;
        var len = shapeCollection._length;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapePool.release(shapeCollection.shapes[i2]);
        }
        shapeCollection._length = 0;
        if (_length === _maxLength) {
          pool = pooling["double"](pool);
          _maxLength *= 2;
        }
        pool[_length] = shapeCollection;
        _length += 1;
      }
      return ob2;
    }();
    var ShapePropertyFactory = function() {
      var initFrame2 = -999999;
      function interpolateShape(frameNum, previousValue, caching) {
        var iterationIndex = caching.lastIndex;
        var keyPropS;
        var keyPropE;
        var isHold;
        var j;
        var k3;
        var jLen;
        var kLen;
        var perc;
        var vertexValue;
        var kf2 = this.keyframes;
        if (frameNum < kf2[0].t - this.offsetTime) {
          keyPropS = kf2[0].s[0];
          isHold = true;
          iterationIndex = 0;
        } else if (frameNum >= kf2[kf2.length - 1].t - this.offsetTime) {
          keyPropS = kf2[kf2.length - 1].s ? kf2[kf2.length - 1].s[0] : kf2[kf2.length - 2].e[0];
          isHold = true;
        } else {
          var i2 = iterationIndex;
          var len = kf2.length - 1;
          var flag = true;
          var keyData;
          var nextKeyData;
          var keyframeMetadata;
          while (flag) {
            keyData = kf2[i2];
            nextKeyData = kf2[i2 + 1];
            if (nextKeyData.t - this.offsetTime > frameNum) {
              break;
            }
            if (i2 < len - 1) {
              i2 += 1;
            } else {
              flag = false;
            }
          }
          keyframeMetadata = this.keyframesMetadata[i2] || {};
          isHold = keyData.h === 1;
          iterationIndex = i2;
          if (!isHold) {
            if (frameNum >= nextKeyData.t - this.offsetTime) {
              perc = 1;
            } else if (frameNum < keyData.t - this.offsetTime) {
              perc = 0;
            } else {
              var fnc;
              if (keyframeMetadata.__fnct) {
                fnc = keyframeMetadata.__fnct;
              } else {
                fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                keyframeMetadata.__fnct = fnc;
              }
              perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
            }
            keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
          }
          keyPropS = keyData.s[0];
        }
        jLen = previousValue._length;
        kLen = keyPropS.i[0].length;
        caching.lastIndex = iterationIndex;
        for (j = 0; j < jLen; j += 1) {
          for (k3 = 0; k3 < kLen; k3 += 1) {
            vertexValue = isHold ? keyPropS.i[j][k3] : keyPropS.i[j][k3] + (keyPropE.i[j][k3] - keyPropS.i[j][k3]) * perc;
            previousValue.i[j][k3] = vertexValue;
            vertexValue = isHold ? keyPropS.o[j][k3] : keyPropS.o[j][k3] + (keyPropE.o[j][k3] - keyPropS.o[j][k3]) * perc;
            previousValue.o[j][k3] = vertexValue;
            vertexValue = isHold ? keyPropS.v[j][k3] : keyPropS.v[j][k3] + (keyPropE.v[j][k3] - keyPropS.v[j][k3]) * perc;
            previousValue.v[j][k3] = vertexValue;
          }
        }
      }
      function interpolateShapeCurrentTime() {
        var frameNum = this.comp.renderedFrame - this.offsetTime;
        var initTime = this.keyframes[0].t - this.offsetTime;
        var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
        var lastFrame = this._caching.lastFrame;
        if (!(lastFrame !== initFrame2 && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
          this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
          this.interpolateShape(frameNum, this.pv, this._caching);
        }
        this._caching.lastFrame = frameNum;
        return this.pv;
      }
      function resetShape() {
        this.paths = this.localShapeCollection;
      }
      function shapesEqual(shape1, shape2) {
        if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
          return false;
        }
        var i2;
        var len = shape1._length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (shape1.v[i2][0] !== shape2.v[i2][0] || shape1.v[i2][1] !== shape2.v[i2][1] || shape1.o[i2][0] !== shape2.o[i2][0] || shape1.o[i2][1] !== shape2.o[i2][1] || shape1.i[i2][0] !== shape2.i[i2][0] || shape1.i[i2][1] !== shape2.i[i2][1]) {
            return false;
          }
        }
        return true;
      }
      function setVValue2(newPath) {
        if (!shapesEqual(this.v, newPath)) {
          this.v = shapePool.clone(newPath);
          this.localShapeCollection.releaseShapes();
          this.localShapeCollection.addShape(this.v);
          this._mdf = true;
          this.paths = this.localShapeCollection;
        }
      }
      function processEffectsSequence2() {
        if (this.elem.globalData.frameId === this.frameId) {
          return;
        }
        if (!this.effectsSequence.length) {
          this._mdf = false;
          return;
        }
        if (this.lock) {
          this.setVValue(this.pv);
          return;
        }
        this.lock = true;
        this._mdf = false;
        var finalValue;
        if (this.kf) {
          finalValue = this.pv;
        } else if (this.data.ks) {
          finalValue = this.data.ks.k;
        } else {
          finalValue = this.data.pt.k;
        }
        var i2;
        var len = this.effectsSequence.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          finalValue = this.effectsSequence[i2](finalValue);
        }
        this.setVValue(finalValue);
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
      }
      function ShapeProperty(elem2, data2, type) {
        this.propType = "shape";
        this.comp = elem2.comp;
        this.container = elem2;
        this.elem = elem2;
        this.data = data2;
        this.k = false;
        this.kf = false;
        this._mdf = false;
        var pathData = type === 3 ? data2.pt.k : data2.ks.k;
        this.v = shapePool.clone(pathData);
        this.pv = shapePool.clone(this.v);
        this.localShapeCollection = shapeCollectionPool.newShapeCollection();
        this.paths = this.localShapeCollection;
        this.paths.addShape(this.v);
        this.reset = resetShape;
        this.effectsSequence = [];
      }
      function addEffect2(effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.container.addDynamicProperty(this);
      }
      ShapeProperty.prototype.interpolateShape = interpolateShape;
      ShapeProperty.prototype.getValue = processEffectsSequence2;
      ShapeProperty.prototype.setVValue = setVValue2;
      ShapeProperty.prototype.addEffect = addEffect2;
      function KeyframedShapeProperty(elem2, data2, type) {
        this.propType = "shape";
        this.comp = elem2.comp;
        this.elem = elem2;
        this.container = elem2;
        this.offsetTime = elem2.data.st;
        this.keyframes = type === 3 ? data2.pt.k : data2.ks.k;
        this.keyframesMetadata = [];
        this.k = true;
        this.kf = true;
        var len = this.keyframes[0].s[0].i.length;
        this.v = shapePool.newElement();
        this.v.setPathData(this.keyframes[0].s[0].c, len);
        this.pv = shapePool.clone(this.v);
        this.localShapeCollection = shapeCollectionPool.newShapeCollection();
        this.paths = this.localShapeCollection;
        this.paths.addShape(this.v);
        this.lastFrame = initFrame2;
        this.reset = resetShape;
        this._caching = {
          lastFrame: initFrame2,
          lastIndex: 0
        };
        this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
      }
      KeyframedShapeProperty.prototype.getValue = processEffectsSequence2;
      KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
      KeyframedShapeProperty.prototype.setVValue = setVValue2;
      KeyframedShapeProperty.prototype.addEffect = addEffect2;
      var EllShapeProperty = function() {
        var cPoint = roundCorner;
        function EllShapePropertyFactory(elem2, data2) {
          this.v = shapePool.newElement();
          this.v.setPathData(true, 4);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.paths = this.localShapeCollection;
          this.localShapeCollection.addShape(this.v);
          this.d = data2.d;
          this.elem = elem2;
          this.comp = elem2.comp;
          this.frameId = -1;
          this.initDynamicPropertyContainer(elem2);
          this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
          this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.k = false;
            this.convertEllToPath();
          }
        }
        EllShapePropertyFactory.prototype = {
          reset: resetShape,
          getValue: function getValue2() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            this.frameId = this.elem.globalData.frameId;
            this.iterateDynamicProperties();
            if (this._mdf) {
              this.convertEllToPath();
            }
          },
          convertEllToPath: function convertEllToPath() {
            var p0 = this.p.v[0];
            var p1 = this.p.v[1];
            var s0 = this.s.v[0] / 2;
            var s1 = this.s.v[1] / 2;
            var _cw = this.d !== 3;
            var _v = this.v;
            _v.v[0][0] = p0;
            _v.v[0][1] = p1 - s1;
            _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
            _v.v[1][1] = p1;
            _v.v[2][0] = p0;
            _v.v[2][1] = p1 + s1;
            _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
            _v.v[3][1] = p1;
            _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
            _v.i[0][1] = p1 - s1;
            _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
            _v.i[1][1] = p1 - s1 * cPoint;
            _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
            _v.i[2][1] = p1 + s1;
            _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
            _v.i[3][1] = p1 + s1 * cPoint;
            _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
            _v.o[0][1] = p1 - s1;
            _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
            _v.o[1][1] = p1 + s1 * cPoint;
            _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
            _v.o[2][1] = p1 + s1;
            _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
            _v.o[3][1] = p1 - s1 * cPoint;
          }
        };
        extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
        return EllShapePropertyFactory;
      }();
      var StarShapeProperty = function() {
        function StarShapePropertyFactory(elem2, data2) {
          this.v = shapePool.newElement();
          this.v.setPathData(true, 0);
          this.elem = elem2;
          this.comp = elem2.comp;
          this.data = data2;
          this.frameId = -1;
          this.d = data2.d;
          this.initDynamicPropertyContainer(elem2);
          if (data2.sy === 1) {
            this.ir = PropertyFactory.getProp(elem2, data2.ir, 0, 0, this);
            this.is = PropertyFactory.getProp(elem2, data2.is, 0, 0.01, this);
            this.convertToPath = this.convertStarToPath;
          } else {
            this.convertToPath = this.convertPolygonToPath;
          }
          this.pt = PropertyFactory.getProp(elem2, data2.pt, 0, 0, this);
          this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
          this.r = PropertyFactory.getProp(elem2, data2.r, 0, degToRads, this);
          this.or = PropertyFactory.getProp(elem2, data2.or, 0, 0, this);
          this.os = PropertyFactory.getProp(elem2, data2.os, 0, 0.01, this);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.localShapeCollection.addShape(this.v);
          this.paths = this.localShapeCollection;
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.k = false;
            this.convertToPath();
          }
        }
        StarShapePropertyFactory.prototype = {
          reset: resetShape,
          getValue: function getValue2() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            this.frameId = this.elem.globalData.frameId;
            this.iterateDynamicProperties();
            if (this._mdf) {
              this.convertToPath();
            }
          },
          convertStarToPath: function convertStarToPath() {
            var numPts = Math.floor(this.pt.v) * 2;
            var angle = Math.PI * 2 / numPts;
            var longFlag = true;
            var longRad = this.or.v;
            var shortRad = this.ir.v;
            var longRound = this.os.v;
            var shortRound = this.is.v;
            var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
            var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
            var i2;
            var rad;
            var roundness;
            var perimSegment;
            var currentAng = -Math.PI / 2;
            currentAng += this.r.v;
            var dir = this.data.d === 3 ? -1 : 1;
            this.v._length = 0;
            for (i2 = 0; i2 < numPts; i2 += 1) {
              rad = longFlag ? longRad : shortRad;
              roundness = longFlag ? longRound : shortRound;
              perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
              var x3 = rad * Math.cos(currentAng);
              var y4 = rad * Math.sin(currentAng);
              var ox = x3 === 0 && y4 === 0 ? 0 : y4 / Math.sqrt(x3 * x3 + y4 * y4);
              var oy = x3 === 0 && y4 === 0 ? 0 : -x3 / Math.sqrt(x3 * x3 + y4 * y4);
              x3 += +this.p.v[0];
              y4 += +this.p.v[1];
              this.v.setTripleAt(x3, y4, x3 - ox * perimSegment * roundness * dir, y4 - oy * perimSegment * roundness * dir, x3 + ox * perimSegment * roundness * dir, y4 + oy * perimSegment * roundness * dir, i2, true);
              longFlag = !longFlag;
              currentAng += angle * dir;
            }
          },
          convertPolygonToPath: function convertPolygonToPath() {
            var numPts = Math.floor(this.pt.v);
            var angle = Math.PI * 2 / numPts;
            var rad = this.or.v;
            var roundness = this.os.v;
            var perimSegment = 2 * Math.PI * rad / (numPts * 4);
            var i2;
            var currentAng = -Math.PI * 0.5;
            var dir = this.data.d === 3 ? -1 : 1;
            currentAng += this.r.v;
            this.v._length = 0;
            for (i2 = 0; i2 < numPts; i2 += 1) {
              var x3 = rad * Math.cos(currentAng);
              var y4 = rad * Math.sin(currentAng);
              var ox = x3 === 0 && y4 === 0 ? 0 : y4 / Math.sqrt(x3 * x3 + y4 * y4);
              var oy = x3 === 0 && y4 === 0 ? 0 : -x3 / Math.sqrt(x3 * x3 + y4 * y4);
              x3 += +this.p.v[0];
              y4 += +this.p.v[1];
              this.v.setTripleAt(x3, y4, x3 - ox * perimSegment * roundness * dir, y4 - oy * perimSegment * roundness * dir, x3 + ox * perimSegment * roundness * dir, y4 + oy * perimSegment * roundness * dir, i2, true);
              currentAng += angle * dir;
            }
            this.paths.length = 0;
            this.paths[0] = this.v;
          }
        };
        extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
        return StarShapePropertyFactory;
      }();
      var RectShapeProperty = function() {
        function RectShapePropertyFactory(elem2, data2) {
          this.v = shapePool.newElement();
          this.v.c = true;
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.localShapeCollection.addShape(this.v);
          this.paths = this.localShapeCollection;
          this.elem = elem2;
          this.comp = elem2.comp;
          this.frameId = -1;
          this.d = data2.d;
          this.initDynamicPropertyContainer(elem2);
          this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
          this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
          this.r = PropertyFactory.getProp(elem2, data2.r, 0, 0, this);
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.k = false;
            this.convertRectToPath();
          }
        }
        RectShapePropertyFactory.prototype = {
          convertRectToPath: function convertRectToPath() {
            var p0 = this.p.v[0];
            var p1 = this.p.v[1];
            var v0 = this.s.v[0] / 2;
            var v1 = this.s.v[1] / 2;
            var round2 = bmMin(v0, v1, this.r.v);
            var cPoint = round2 * (1 - roundCorner);
            this.v._length = 0;
            if (this.d === 2 || this.d === 1) {
              this.v.setTripleAt(p0 + v0, p1 - v1 + round2, p0 + v0, p1 - v1 + round2, p0 + v0, p1 - v1 + cPoint, 0, true);
              this.v.setTripleAt(p0 + v0, p1 + v1 - round2, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round2, 1, true);
              if (round2 !== 0) {
                this.v.setTripleAt(p0 + v0 - round2, p1 + v1, p0 + v0 - round2, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round2, p1 + v1, 3, true);
                this.v.setTripleAt(p0 - v0, p1 + v1 - round2, p0 - v0, p1 + v1 - round2, p0 - v0, p1 + v1 - cPoint, 4, true);
                this.v.setTripleAt(p0 - v0, p1 - v1 + round2, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round2, 5, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 - v1, p0 - v0 + round2, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                this.v.setTripleAt(p0 + v0 - round2, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round2, p1 - v1, 7, true);
              } else {
                this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
              }
            } else {
              this.v.setTripleAt(p0 + v0, p1 - v1 + round2, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round2, 0, true);
              if (round2 !== 0) {
                this.v.setTripleAt(p0 + v0 - round2, p1 - v1, p0 + v0 - round2, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round2, p1 - v1, 2, true);
                this.v.setTripleAt(p0 - v0, p1 - v1 + round2, p0 - v0, p1 - v1 + round2, p0 - v0, p1 - v1 + cPoint, 3, true);
                this.v.setTripleAt(p0 - v0, p1 + v1 - round2, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round2, 4, true);
                this.v.setTripleAt(p0 - v0 + round2, p1 + v1, p0 - v0 + round2, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                this.v.setTripleAt(p0 + v0 - round2, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round2, p1 + v1, 6, true);
                this.v.setTripleAt(p0 + v0, p1 + v1 - round2, p0 + v0, p1 + v1 - round2, p0 + v0, p1 + v1 - cPoint, 7, true);
              } else {
                this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
              }
            }
          },
          getValue: function getValue2() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            this.frameId = this.elem.globalData.frameId;
            this.iterateDynamicProperties();
            if (this._mdf) {
              this.convertRectToPath();
            }
          },
          reset: resetShape
        };
        extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
        return RectShapePropertyFactory;
      }();
      function getShapeProp(elem2, data2, type) {
        var prop;
        if (type === 3 || type === 4) {
          var dataProp = type === 3 ? data2.pt : data2.ks;
          var keys2 = dataProp.k;
          if (keys2.length) {
            prop = new KeyframedShapeProperty(elem2, data2, type);
          } else {
            prop = new ShapeProperty(elem2, data2, type);
          }
        } else if (type === 5) {
          prop = new RectShapeProperty(elem2, data2);
        } else if (type === 6) {
          prop = new EllShapeProperty(elem2, data2);
        } else if (type === 7) {
          prop = new StarShapeProperty(elem2, data2);
        }
        if (prop.k) {
          elem2.addDynamicProperty(prop);
        }
        return prop;
      }
      function getConstructorFunction() {
        return ShapeProperty;
      }
      function getKeyframedConstructorFunction() {
        return KeyframedShapeProperty;
      }
      var ob2 = {};
      ob2.getShapeProp = getShapeProp;
      ob2.getConstructorFunction = getConstructorFunction;
      ob2.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
      return ob2;
    }();
    /*!
     Transformation Matrix v2.0
     (c) Epistemex 2014-2015
     www.epistemex.com
     By Ken Fyrstenberg
     Contributions by leeoniya.
     License: MIT, header required.
     */
    var Matrix = function() {
      var _cos = Math.cos;
      var _sin = Math.sin;
      var _tan = Math.tan;
      var _rnd = Math.round;
      function reset2() {
        this.props[0] = 1;
        this.props[1] = 0;
        this.props[2] = 0;
        this.props[3] = 0;
        this.props[4] = 0;
        this.props[5] = 1;
        this.props[6] = 0;
        this.props[7] = 0;
        this.props[8] = 0;
        this.props[9] = 0;
        this.props[10] = 1;
        this.props[11] = 0;
        this.props[12] = 0;
        this.props[13] = 0;
        this.props[14] = 0;
        this.props[15] = 1;
        return this;
      }
      function rotate(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function rotateX(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
      }
      function rotateY(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
      }
      function rotateZ(angle) {
        if (angle === 0) {
          return this;
        }
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function shear(sx, sy) {
        return this._t(1, sy, sx, 1, 0, 0);
      }
      function skew(ax, ay) {
        return this.shear(_tan(ax), _tan(ay));
      }
      function skewFromAxis(ax, angle) {
        var mCos = _cos(angle);
        var mSin = _sin(angle);
        return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      }
      function scale2(sx, sy, sz) {
        if (!sz && sz !== 0) {
          sz = 1;
        }
        if (sx === 1 && sy === 1 && sz === 1) {
          return this;
        }
        return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
      }
      function setTransform(a3, b3, c7, d4, e3, f2, g2, h4, i2, j, k3, l2, m4, n2, o, p2) {
        this.props[0] = a3;
        this.props[1] = b3;
        this.props[2] = c7;
        this.props[3] = d4;
        this.props[4] = e3;
        this.props[5] = f2;
        this.props[6] = g2;
        this.props[7] = h4;
        this.props[8] = i2;
        this.props[9] = j;
        this.props[10] = k3;
        this.props[11] = l2;
        this.props[12] = m4;
        this.props[13] = n2;
        this.props[14] = o;
        this.props[15] = p2;
        return this;
      }
      function translate(tx, ty, tz) {
        tz = tz || 0;
        if (tx !== 0 || ty !== 0 || tz !== 0) {
          return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
        }
        return this;
      }
      function transform2(a22, b22, c22, d22, e22, f2, g2, h22, i2, j2, k22, l2, m22, n2, o2, p2) {
        var _p = this.props;
        if (a22 === 1 && b22 === 0 && c22 === 0 && d22 === 0 && e22 === 0 && f2 === 1 && g2 === 0 && h22 === 0 && i2 === 0 && j2 === 0 && k22 === 1 && l2 === 0) {
          _p[12] = _p[12] * a22 + _p[15] * m22;
          _p[13] = _p[13] * f2 + _p[15] * n2;
          _p[14] = _p[14] * k22 + _p[15] * o2;
          _p[15] *= p2;
          this._identityCalculated = false;
          return this;
        }
        var a1 = _p[0];
        var b1 = _p[1];
        var c12 = _p[2];
        var d1 = _p[3];
        var e1 = _p[4];
        var f1 = _p[5];
        var g1 = _p[6];
        var h1 = _p[7];
        var i1 = _p[8];
        var j1 = _p[9];
        var k1 = _p[10];
        var l1 = _p[11];
        var m1 = _p[12];
        var n1 = _p[13];
        var o1 = _p[14];
        var p1 = _p[15];
        _p[0] = a1 * a22 + b1 * e22 + c12 * i2 + d1 * m22;
        _p[1] = a1 * b22 + b1 * f2 + c12 * j2 + d1 * n2;
        _p[2] = a1 * c22 + b1 * g2 + c12 * k22 + d1 * o2;
        _p[3] = a1 * d22 + b1 * h22 + c12 * l2 + d1 * p2;
        _p[4] = e1 * a22 + f1 * e22 + g1 * i2 + h1 * m22;
        _p[5] = e1 * b22 + f1 * f2 + g1 * j2 + h1 * n2;
        _p[6] = e1 * c22 + f1 * g2 + g1 * k22 + h1 * o2;
        _p[7] = e1 * d22 + f1 * h22 + g1 * l2 + h1 * p2;
        _p[8] = i1 * a22 + j1 * e22 + k1 * i2 + l1 * m22;
        _p[9] = i1 * b22 + j1 * f2 + k1 * j2 + l1 * n2;
        _p[10] = i1 * c22 + j1 * g2 + k1 * k22 + l1 * o2;
        _p[11] = i1 * d22 + j1 * h22 + k1 * l2 + l1 * p2;
        _p[12] = m1 * a22 + n1 * e22 + o1 * i2 + p1 * m22;
        _p[13] = m1 * b22 + n1 * f2 + o1 * j2 + p1 * n2;
        _p[14] = m1 * c22 + n1 * g2 + o1 * k22 + p1 * o2;
        _p[15] = m1 * d22 + n1 * h22 + o1 * l2 + p1 * p2;
        this._identityCalculated = false;
        return this;
      }
      function multiply(matrix) {
        var matrixProps = matrix.props;
        return this.transform(matrixProps[0], matrixProps[1], matrixProps[2], matrixProps[3], matrixProps[4], matrixProps[5], matrixProps[6], matrixProps[7], matrixProps[8], matrixProps[9], matrixProps[10], matrixProps[11], matrixProps[12], matrixProps[13], matrixProps[14], matrixProps[15]);
      }
      function isIdentity() {
        if (!this._identityCalculated) {
          this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
          this._identityCalculated = true;
        }
        return this._identity;
      }
      function equals(matr) {
        var i2 = 0;
        while (i2 < 16) {
          if (matr.props[i2] !== this.props[i2]) {
            return false;
          }
          i2 += 1;
        }
        return true;
      }
      function clone2(matr) {
        var i2;
        for (i2 = 0; i2 < 16; i2 += 1) {
          matr.props[i2] = this.props[i2];
        }
        return matr;
      }
      function cloneFromProps(props) {
        var i2;
        for (i2 = 0; i2 < 16; i2 += 1) {
          this.props[i2] = props[i2];
        }
      }
      function applyToPoint(x3, y4, z3) {
        return {
          x: x3 * this.props[0] + y4 * this.props[4] + z3 * this.props[8] + this.props[12],
          y: x3 * this.props[1] + y4 * this.props[5] + z3 * this.props[9] + this.props[13],
          z: x3 * this.props[2] + y4 * this.props[6] + z3 * this.props[10] + this.props[14]
        };
      }
      function applyToX(x3, y4, z3) {
        return x3 * this.props[0] + y4 * this.props[4] + z3 * this.props[8] + this.props[12];
      }
      function applyToY(x3, y4, z3) {
        return x3 * this.props[1] + y4 * this.props[5] + z3 * this.props[9] + this.props[13];
      }
      function applyToZ(x3, y4, z3) {
        return x3 * this.props[2] + y4 * this.props[6] + z3 * this.props[10] + this.props[14];
      }
      function getInverseMatrix() {
        var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
        var a3 = this.props[5] / determinant;
        var b3 = -this.props[1] / determinant;
        var c7 = -this.props[4] / determinant;
        var d4 = this.props[0] / determinant;
        var e3 = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
        var f2 = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
        var inverseMatrix = new Matrix();
        inverseMatrix.props[0] = a3;
        inverseMatrix.props[1] = b3;
        inverseMatrix.props[4] = c7;
        inverseMatrix.props[5] = d4;
        inverseMatrix.props[12] = e3;
        inverseMatrix.props[13] = f2;
        return inverseMatrix;
      }
      function inversePoint(pt) {
        var inverseMatrix = this.getInverseMatrix();
        return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);
      }
      function inversePoints(pts) {
        var i2;
        var len = pts.length;
        var retPts = [];
        for (i2 = 0; i2 < len; i2 += 1) {
          retPts[i2] = inversePoint(pts[i2]);
        }
        return retPts;
      }
      function applyToTriplePoints(pt1, pt2, pt3) {
        var arr = createTypedArray("float32", 6);
        if (this.isIdentity()) {
          arr[0] = pt1[0];
          arr[1] = pt1[1];
          arr[2] = pt2[0];
          arr[3] = pt2[1];
          arr[4] = pt3[0];
          arr[5] = pt3[1];
        } else {
          var p0 = this.props[0];
          var p1 = this.props[1];
          var p4 = this.props[4];
          var p5 = this.props[5];
          var p12 = this.props[12];
          var p13 = this.props[13];
          arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
          arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
          arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
          arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
          arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
          arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
        }
        return arr;
      }
      function applyToPointArray(x3, y4, z3) {
        var arr;
        if (this.isIdentity()) {
          arr = [x3, y4, z3];
        } else {
          arr = [x3 * this.props[0] + y4 * this.props[4] + z3 * this.props[8] + this.props[12], x3 * this.props[1] + y4 * this.props[5] + z3 * this.props[9] + this.props[13], x3 * this.props[2] + y4 * this.props[6] + z3 * this.props[10] + this.props[14]];
        }
        return arr;
      }
      function applyToPointStringified(x3, y4) {
        if (this.isIdentity()) {
          return x3 + "," + y4;
        }
        var _p = this.props;
        return Math.round((x3 * _p[0] + y4 * _p[4] + _p[12]) * 100) / 100 + "," + Math.round((x3 * _p[1] + y4 * _p[5] + _p[13]) * 100) / 100;
      }
      function toCSS() {
        var i2 = 0;
        var props = this.props;
        var cssValue = "matrix3d(";
        var v2 = 1e4;
        while (i2 < 16) {
          cssValue += _rnd(props[i2] * v2) / v2;
          cssValue += i2 === 15 ? ")" : ",";
          i2 += 1;
        }
        return cssValue;
      }
      function roundMatrixProperty(val2) {
        var v2 = 1e4;
        if (val2 < 1e-6 && val2 > 0 || val2 > -1e-6 && val2 < 0) {
          return _rnd(val2 * v2) / v2;
        }
        return val2;
      }
      function to2dCSS() {
        var props = this.props;
        var _a = roundMatrixProperty(props[0]);
        var _b = roundMatrixProperty(props[1]);
        var _c = roundMatrixProperty(props[4]);
        var _d = roundMatrixProperty(props[5]);
        var _e = roundMatrixProperty(props[12]);
        var _f = roundMatrixProperty(props[13]);
        return "matrix(" + _a + "," + _b + "," + _c + "," + _d + "," + _e + "," + _f + ")";
      }
      return function() {
        this.reset = reset2;
        this.rotate = rotate;
        this.rotateX = rotateX;
        this.rotateY = rotateY;
        this.rotateZ = rotateZ;
        this.skew = skew;
        this.skewFromAxis = skewFromAxis;
        this.shear = shear;
        this.scale = scale2;
        this.setTransform = setTransform;
        this.translate = translate;
        this.transform = transform2;
        this.multiply = multiply;
        this.applyToPoint = applyToPoint;
        this.applyToX = applyToX;
        this.applyToY = applyToY;
        this.applyToZ = applyToZ;
        this.applyToPointArray = applyToPointArray;
        this.applyToTriplePoints = applyToTriplePoints;
        this.applyToPointStringified = applyToPointStringified;
        this.toCSS = toCSS;
        this.to2dCSS = to2dCSS;
        this.clone = clone2;
        this.cloneFromProps = cloneFromProps;
        this.equals = equals;
        this.inversePoints = inversePoints;
        this.inversePoint = inversePoint;
        this.getInverseMatrix = getInverseMatrix;
        this._t = this.transform;
        this.isIdentity = isIdentity;
        this._identity = true;
        this._identityCalculated = false;
        this.props = createTypedArray("float32", 16);
        this.reset();
      };
    }();
    function _typeof$3(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$3 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$3 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$3(obj);
    }
    var lottie = {};
    function setLocation(href) {
      setLocationHref(href);
    }
    function searchAnimations() {
      {
        animationManager.searchAnimations();
      }
    }
    function setSubframeRendering(flag) {
      setSubframeEnabled(flag);
    }
    function setPrefix(prefix2) {
      setIdPrefix(prefix2);
    }
    function loadAnimation(params) {
      return animationManager.loadAnimation(params);
    }
    function setQuality(value2) {
      if (typeof value2 === "string") {
        switch (value2) {
          case "high":
            setDefaultCurveSegments(200);
            break;
          default:
          case "medium":
            setDefaultCurveSegments(50);
            break;
          case "low":
            setDefaultCurveSegments(10);
            break;
        }
      } else if (!isNaN(value2) && value2 > 1) {
        setDefaultCurveSegments(value2);
      }
    }
    function inBrowser() {
      return typeof navigator !== "undefined";
    }
    function installPlugin(type, plugin) {
      if (type === "expressions") {
        setExpressionsPlugin(plugin);
      }
    }
    function getFactory(name2) {
      switch (name2) {
        case "propertyFactory":
          return PropertyFactory;
        case "shapePropertyFactory":
          return ShapePropertyFactory;
        case "matrix":
          return Matrix;
        default:
          return null;
      }
    }
    lottie.play = animationManager.play;
    lottie.pause = animationManager.pause;
    lottie.setLocationHref = setLocation;
    lottie.togglePause = animationManager.togglePause;
    lottie.setSpeed = animationManager.setSpeed;
    lottie.setDirection = animationManager.setDirection;
    lottie.stop = animationManager.stop;
    lottie.searchAnimations = searchAnimations;
    lottie.registerAnimation = animationManager.registerAnimation;
    lottie.loadAnimation = loadAnimation;
    lottie.setSubframeRendering = setSubframeRendering;
    lottie.resize = animationManager.resize;
    lottie.goToAndStop = animationManager.goToAndStop;
    lottie.destroy = animationManager.destroy;
    lottie.setQuality = setQuality;
    lottie.inBrowser = inBrowser;
    lottie.installPlugin = installPlugin;
    lottie.freeze = animationManager.freeze;
    lottie.unfreeze = animationManager.unfreeze;
    lottie.setVolume = animationManager.setVolume;
    lottie.mute = animationManager.mute;
    lottie.unmute = animationManager.unmute;
    lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
    lottie.useWebWorker = setWebWorker;
    lottie.setIDPrefix = setPrefix;
    lottie.__getFactory = getFactory;
    lottie.version = "5.12.2";
    function checkReady() {
      if (document.readyState === "complete") {
        clearInterval(readyStateCheckInterval);
        searchAnimations();
      }
    }
    function getQueryVariable(variable) {
      var vars = queryString.split("&");
      for (var i2 = 0; i2 < vars.length; i2 += 1) {
        var pair = vars[i2].split("=");
        if (decodeURIComponent(pair[0]) == variable) {
          return decodeURIComponent(pair[1]);
        }
      }
      return null;
    }
    var queryString = "";
    {
      var scripts = document.getElementsByTagName("script");
      var index = scripts.length - 1;
      var myScript = scripts[index] || {
        src: ""
      };
      queryString = myScript.src ? myScript.src.replace(/^[^\?]+\??/, "") : "";
      getQueryVariable("renderer");
    }
    var readyStateCheckInterval = setInterval(checkReady, 100);
    try {
      if (!((false ? "undefined" : _typeof$3(exports)) === "object" && true) && true) {
        window.bodymovin = lottie;
      }
    } catch (err) {
    }
    var ShapeModifiers = function() {
      var ob2 = {};
      var modifiers = {};
      ob2.registerModifier = registerModifier;
      ob2.getModifier = getModifier;
      function registerModifier(nm2, factory) {
        if (!modifiers[nm2]) {
          modifiers[nm2] = factory;
        }
      }
      function getModifier(nm2, elem2, data2) {
        return new modifiers[nm2](elem2, data2);
      }
      return ob2;
    }();
    function ShapeModifier() {
    }
    ShapeModifier.prototype.initModifierProperties = function() {
    };
    ShapeModifier.prototype.addShapeToModifier = function() {
    };
    ShapeModifier.prototype.addShape = function(data2) {
      if (!this.closed) {
        data2.sh.container.addDynamicProperty(data2.sh);
        var shapeData = {
          shape: data2.sh,
          data: data2,
          localShapeCollection: shapeCollectionPool.newShapeCollection()
        };
        this.shapes.push(shapeData);
        this.addShapeToModifier(shapeData);
        if (this._isAnimated) {
          data2.setAsAnimated();
        }
      }
    };
    ShapeModifier.prototype.init = function(elem2, data2) {
      this.shapes = [];
      this.elem = elem2;
      this.initDynamicPropertyContainer(elem2);
      this.initModifierProperties(elem2, data2);
      this.frameId = initialDefaultFrame;
      this.closed = false;
      this.k = false;
      if (this.dynamicProperties.length) {
        this.k = true;
      } else {
        this.getValue(true);
      }
    };
    ShapeModifier.prototype.processKeys = function() {
      if (this.elem.globalData.frameId === this.frameId) {
        return;
      }
      this.frameId = this.elem.globalData.frameId;
      this.iterateDynamicProperties();
    };
    extendPrototype([DynamicPropertyContainer], ShapeModifier);
    function TrimModifier() {
    }
    extendPrototype([ShapeModifier], TrimModifier);
    TrimModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.s = PropertyFactory.getProp(elem2, data2.s, 0, 0.01, this);
      this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0.01, this);
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0, this);
      this.sValue = 0;
      this.eValue = 0;
      this.getValue = this.processKeys;
      this.m = data2.m;
      this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
    };
    TrimModifier.prototype.addShapeToModifier = function(shapeData) {
      shapeData.pathsData = [];
    };
    TrimModifier.prototype.calculateShapeEdges = function(s3, e3, shapeLength, addedLength, totalModifierLength) {
      var segments = [];
      if (e3 <= 1) {
        segments.push({
          s: s3,
          e: e3
        });
      } else if (s3 >= 1) {
        segments.push({
          s: s3 - 1,
          e: e3 - 1
        });
      } else {
        segments.push({
          s: s3,
          e: 1
        });
        segments.push({
          s: 0,
          e: e3 - 1
        });
      }
      var shapeSegments = [];
      var i2;
      var len = segments.length;
      var segmentOb;
      for (i2 = 0; i2 < len; i2 += 1) {
        segmentOb = segments[i2];
        if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {
          var shapeS;
          var shapeE;
          if (segmentOb.s * totalModifierLength <= addedLength) {
            shapeS = 0;
          } else {
            shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
          }
          if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
            shapeE = 1;
          } else {
            shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
          }
          shapeSegments.push([shapeS, shapeE]);
        }
      }
      if (!shapeSegments.length) {
        shapeSegments.push([0, 0]);
      }
      return shapeSegments;
    };
    TrimModifier.prototype.releasePathsData = function(pathsData) {
      var i2;
      var len = pathsData.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        segmentsLengthPool.release(pathsData[i2]);
      }
      pathsData.length = 0;
      return pathsData;
    };
    TrimModifier.prototype.processShapes = function(_isFirstFrame) {
      var s3;
      var e3;
      if (this._mdf || _isFirstFrame) {
        var o = this.o.v % 360 / 360;
        if (o < 0) {
          o += 1;
        }
        if (this.s.v > 1) {
          s3 = 1 + o;
        } else if (this.s.v < 0) {
          s3 = 0 + o;
        } else {
          s3 = this.s.v + o;
        }
        if (this.e.v > 1) {
          e3 = 1 + o;
        } else if (this.e.v < 0) {
          e3 = 0 + o;
        } else {
          e3 = this.e.v + o;
        }
        if (s3 > e3) {
          var _s = s3;
          s3 = e3;
          e3 = _s;
        }
        s3 = Math.round(s3 * 1e4) * 1e-4;
        e3 = Math.round(e3 * 1e4) * 1e-4;
        this.sValue = s3;
        this.eValue = e3;
      } else {
        s3 = this.sValue;
        e3 = this.eValue;
      }
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j;
      var jLen;
      var pathsData;
      var pathData;
      var totalShapeLength;
      var totalModifierLength = 0;
      if (e3 === s3) {
        for (i2 = 0; i2 < len; i2 += 1) {
          this.shapes[i2].localShapeCollection.releaseShapes();
          this.shapes[i2].shape._mdf = true;
          this.shapes[i2].shape.paths = this.shapes[i2].localShapeCollection;
          if (this._mdf) {
            this.shapes[i2].pathsData.length = 0;
          }
        }
      } else if (!(e3 === 1 && s3 === 0 || e3 === 0 && s3 === 1)) {
        var segments = [];
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
            shapeData.shape.paths = shapeData.localShapeCollection;
          } else {
            shapePaths = shapeData.shape.paths;
            jLen = shapePaths._length;
            totalShapeLength = 0;
            if (!shapeData.shape._mdf && shapeData.pathsData.length) {
              totalShapeLength = shapeData.totalShapeLength;
            } else {
              pathsData = this.releasePathsData(shapeData.pathsData);
              for (j = 0; j < jLen; j += 1) {
                pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
                pathsData.push(pathData);
                totalShapeLength += pathData.totalLength;
              }
              shapeData.totalShapeLength = totalShapeLength;
              shapeData.pathsData = pathsData;
            }
            totalModifierLength += totalShapeLength;
            shapeData.shape._mdf = true;
          }
        }
        var shapeS = s3;
        var shapeE = e3;
        var addedLength = 0;
        var edges;
        for (i2 = len - 1; i2 >= 0; i2 -= 1) {
          shapeData = this.shapes[i2];
          if (shapeData.shape._mdf) {
            localShapeCollection = shapeData.localShapeCollection;
            localShapeCollection.releaseShapes();
            if (this.m === 2 && len > 1) {
              edges = this.calculateShapeEdges(s3, e3, shapeData.totalShapeLength, addedLength, totalModifierLength);
              addedLength += shapeData.totalShapeLength;
            } else {
              edges = [[shapeS, shapeE]];
            }
            jLen = edges.length;
            for (j = 0; j < jLen; j += 1) {
              shapeS = edges[j][0];
              shapeE = edges[j][1];
              segments.length = 0;
              if (shapeE <= 1) {
                segments.push({
                  s: shapeData.totalShapeLength * shapeS,
                  e: shapeData.totalShapeLength * shapeE
                });
              } else if (shapeS >= 1) {
                segments.push({
                  s: shapeData.totalShapeLength * (shapeS - 1),
                  e: shapeData.totalShapeLength * (shapeE - 1)
                });
              } else {
                segments.push({
                  s: shapeData.totalShapeLength * shapeS,
                  e: shapeData.totalShapeLength
                });
                segments.push({
                  s: 0,
                  e: shapeData.totalShapeLength * (shapeE - 1)
                });
              }
              var newShapesData = this.addShapes(shapeData, segments[0]);
              if (segments[0].s !== segments[0].e) {
                if (segments.length > 1) {
                  var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
                  if (lastShapeInCollection.c) {
                    var lastShape = newShapesData.pop();
                    this.addPaths(newShapesData, localShapeCollection);
                    newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                  } else {
                    this.addPaths(newShapesData, localShapeCollection);
                    newShapesData = this.addShapes(shapeData, segments[1]);
                  }
                }
                this.addPaths(newShapesData, localShapeCollection);
              }
            }
            shapeData.shape.paths = localShapeCollection;
          }
        }
      } else if (this._mdf) {
        for (i2 = 0; i2 < len; i2 += 1) {
          this.shapes[i2].pathsData.length = 0;
          this.shapes[i2].shape._mdf = true;
        }
      }
    };
    TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
      var i2;
      var len = newPaths.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        localShapeCollection.addShape(newPaths[i2]);
      }
    };
    TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
      shapePath.setXYAt(pt2[0], pt2[1], "o", pos);
      shapePath.setXYAt(pt3[0], pt3[1], "i", pos + 1);
      if (newShape) {
        shapePath.setXYAt(pt1[0], pt1[1], "v", pos);
      }
      shapePath.setXYAt(pt4[0], pt4[1], "v", pos + 1);
    };
    TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
      shapePath.setXYAt(points[1], points[5], "o", pos);
      shapePath.setXYAt(points[2], points[6], "i", pos + 1);
      if (newShape) {
        shapePath.setXYAt(points[0], points[4], "v", pos);
      }
      shapePath.setXYAt(points[3], points[7], "v", pos + 1);
    };
    TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
      var pathsData = shapeData.pathsData;
      var shapePaths = shapeData.shape.paths.shapes;
      var i2;
      var len = shapeData.shape.paths._length;
      var j;
      var jLen;
      var addedLength = 0;
      var currentLengthData;
      var segmentCount;
      var lengths;
      var segment;
      var shapes = [];
      var initPos;
      var newShape = true;
      if (!shapePath) {
        shapePath = shapePool.newElement();
        segmentCount = 0;
        initPos = 0;
      } else {
        segmentCount = shapePath._length;
        initPos = shapePath._length;
      }
      shapes.push(shapePath);
      for (i2 = 0; i2 < len; i2 += 1) {
        lengths = pathsData[i2].lengths;
        shapePath.c = shapePaths[i2].c;
        jLen = shapePaths[i2].c ? lengths.length : lengths.length + 1;
        for (j = 1; j < jLen; j += 1) {
          currentLengthData = lengths[j - 1];
          if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
            addedLength += currentLengthData.addedLength;
            shapePath.c = false;
          } else if (addedLength > shapeSegment.e) {
            shapePath.c = false;
            break;
          } else {
            if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
              this.addSegment(shapePaths[i2].v[j - 1], shapePaths[i2].o[j - 1], shapePaths[i2].i[j], shapePaths[i2].v[j], shapePath, segmentCount, newShape);
              newShape = false;
            } else {
              segment = bez.getNewSegment(shapePaths[i2].v[j - 1], shapePaths[i2].v[j], shapePaths[i2].o[j - 1], shapePaths[i2].i[j], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j - 1]);
              this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
              newShape = false;
              shapePath.c = false;
            }
            addedLength += currentLengthData.addedLength;
            segmentCount += 1;
          }
        }
        if (shapePaths[i2].c && lengths.length) {
          currentLengthData = lengths[j - 1];
          if (addedLength <= shapeSegment.e) {
            var segmentLength = lengths[j - 1].addedLength;
            if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
              this.addSegment(shapePaths[i2].v[j - 1], shapePaths[i2].o[j - 1], shapePaths[i2].i[0], shapePaths[i2].v[0], shapePath, segmentCount, newShape);
              newShape = false;
            } else {
              segment = bez.getNewSegment(shapePaths[i2].v[j - 1], shapePaths[i2].v[0], shapePaths[i2].o[j - 1], shapePaths[i2].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
              this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
              newShape = false;
              shapePath.c = false;
            }
          } else {
            shapePath.c = false;
          }
          addedLength += currentLengthData.addedLength;
          segmentCount += 1;
        }
        if (shapePath._length) {
          shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], "i", initPos);
          shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], "o", shapePath._length - 1);
        }
        if (addedLength > shapeSegment.e) {
          break;
        }
        if (i2 < len - 1) {
          shapePath = shapePool.newElement();
          newShape = true;
          shapes.push(shapePath);
          segmentCount = 0;
        }
      }
      return shapes;
    };
    function PuckerAndBloatModifier() {
    }
    extendPrototype([ShapeModifier], PuckerAndBloatModifier);
    PuckerAndBloatModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
      this._isAnimated = !!this.amount.effectsSequence.length;
    };
    PuckerAndBloatModifier.prototype.processPath = function(path, amount) {
      var percent = amount / 100;
      var centerPoint = [0, 0];
      var pathLength = path._length;
      var i2 = 0;
      for (i2 = 0; i2 < pathLength; i2 += 1) {
        centerPoint[0] += path.v[i2][0];
        centerPoint[1] += path.v[i2][1];
      }
      centerPoint[0] /= pathLength;
      centerPoint[1] /= pathLength;
      var clonedPath = shapePool.newElement();
      clonedPath.c = path.c;
      var vX;
      var vY;
      var oX;
      var oY;
      var iX;
      var iY;
      for (i2 = 0; i2 < pathLength; i2 += 1) {
        vX = path.v[i2][0] + (centerPoint[0] - path.v[i2][0]) * percent;
        vY = path.v[i2][1] + (centerPoint[1] - path.v[i2][1]) * percent;
        oX = path.o[i2][0] + (centerPoint[0] - path.o[i2][0]) * -percent;
        oY = path.o[i2][1] + (centerPoint[1] - path.o[i2][1]) * -percent;
        iX = path.i[i2][0] + (centerPoint[0] - path.i[i2][0]) * -percent;
        iY = path.i[i2][1] + (centerPoint[1] - path.i[i2][1]) * -percent;
        clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i2);
      }
      return clonedPath;
    };
    PuckerAndBloatModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j;
      var jLen;
      var amount = this.amount.v;
      if (amount !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j = 0; j < jLen; j += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j], amount));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    var TransformPropertyFactory = function() {
      var defaultVector = [0, 0];
      function applyToMatrix(mat) {
        var _mdf = this._mdf;
        this.iterateDynamicProperties();
        this._mdf = this._mdf || _mdf;
        if (this.a) {
          mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
        }
        if (this.s) {
          mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
        }
        if (this.sk) {
          mat.skewFromAxis(-this.sk.v, this.sa.v);
        }
        if (this.r) {
          mat.rotate(-this.r.v);
        } else {
          mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
        }
        if (this.data.p.s) {
          if (this.data.p.z) {
            mat.translate(this.px.v, this.py.v, -this.pz.v);
          } else {
            mat.translate(this.px.v, this.py.v, 0);
          }
        } else {
          mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
        }
      }
      function processKeys(forceRender) {
        if (this.elem.globalData.frameId === this.frameId) {
          return;
        }
        if (this._isDirty) {
          this.precalculateMatrix();
          this._isDirty = false;
        }
        this.iterateDynamicProperties();
        if (this._mdf || forceRender) {
          var frameRate;
          this.v.cloneFromProps(this.pre.props);
          if (this.appliedTransformations < 1) {
            this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
          }
          if (this.appliedTransformations < 2) {
            this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
          }
          if (this.sk && this.appliedTransformations < 3) {
            this.v.skewFromAxis(-this.sk.v, this.sa.v);
          }
          if (this.r && this.appliedTransformations < 4) {
            this.v.rotate(-this.r.v);
          } else if (!this.r && this.appliedTransformations < 4) {
            this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
          }
          if (this.autoOriented) {
            var v1;
            var v2;
            frameRate = this.elem.globalData.frameRate;
            if (this.p && this.p.keyframes && this.p.getValueAtTime) {
              if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
              } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
                v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
              } else {
                v1 = this.p.pv;
                v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
              }
            } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
              v1 = [];
              v2 = [];
              var px = this.px;
              var py = this.py;
              if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
                v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
                v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                v2[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
                v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
              } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);
                v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
                v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
                v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
              } else {
                v1 = [px.pv, py.pv];
                v2[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
                v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
              }
            } else {
              v2 = defaultVector;
              v1 = v2;
            }
            this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
          }
          if (this.data.p && this.data.p.s) {
            if (this.data.p.z) {
              this.v.translate(this.px.v, this.py.v, -this.pz.v);
            } else {
              this.v.translate(this.px.v, this.py.v, 0);
            }
          } else {
            this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
          }
        }
        this.frameId = this.elem.globalData.frameId;
      }
      function precalculateMatrix() {
        this.appliedTransformations = 0;
        this.pre.reset();
        if (!this.a.effectsSequence.length) {
          this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
          this.appliedTransformations = 1;
        } else {
          return;
        }
        if (!this.s.effectsSequence.length) {
          this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
          this.appliedTransformations = 2;
        } else {
          return;
        }
        if (this.sk) {
          if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
            this.pre.skewFromAxis(-this.sk.v, this.sa.v);
            this.appliedTransformations = 3;
          } else {
            return;
          }
        }
        if (this.r) {
          if (!this.r.effectsSequence.length) {
            this.pre.rotate(-this.r.v);
            this.appliedTransformations = 4;
          }
        } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
          this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
          this.appliedTransformations = 4;
        }
      }
      function autoOrient() {
      }
      function addDynamicProperty(prop) {
        this._addDynamicProperty(prop);
        this.elem.addDynamicProperty(prop);
        this._isDirty = true;
      }
      function TransformProperty(elem2, data2, container) {
        this.elem = elem2;
        this.frameId = -1;
        this.propType = "transform";
        this.data = data2;
        this.v = new Matrix();
        this.pre = new Matrix();
        this.appliedTransformations = 0;
        this.initDynamicPropertyContainer(container || elem2);
        if (data2.p && data2.p.s) {
          this.px = PropertyFactory.getProp(elem2, data2.p.x, 0, 0, this);
          this.py = PropertyFactory.getProp(elem2, data2.p.y, 0, 0, this);
          if (data2.p.z) {
            this.pz = PropertyFactory.getProp(elem2, data2.p.z, 0, 0, this);
          }
        } else {
          this.p = PropertyFactory.getProp(elem2, data2.p || {
            k: [0, 0, 0]
          }, 1, 0, this);
        }
        if (data2.rx) {
          this.rx = PropertyFactory.getProp(elem2, data2.rx, 0, degToRads, this);
          this.ry = PropertyFactory.getProp(elem2, data2.ry, 0, degToRads, this);
          this.rz = PropertyFactory.getProp(elem2, data2.rz, 0, degToRads, this);
          if (data2.or.k[0].ti) {
            var i2;
            var len = data2.or.k.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              data2.or.k[i2].to = null;
              data2.or.k[i2].ti = null;
            }
          }
          this.or = PropertyFactory.getProp(elem2, data2.or, 1, degToRads, this);
          this.or.sh = true;
        } else {
          this.r = PropertyFactory.getProp(elem2, data2.r || {
            k: 0
          }, 0, degToRads, this);
        }
        if (data2.sk) {
          this.sk = PropertyFactory.getProp(elem2, data2.sk, 0, degToRads, this);
          this.sa = PropertyFactory.getProp(elem2, data2.sa, 0, degToRads, this);
        }
        this.a = PropertyFactory.getProp(elem2, data2.a || {
          k: [0, 0, 0]
        }, 1, 0, this);
        this.s = PropertyFactory.getProp(elem2, data2.s || {
          k: [100, 100, 100]
        }, 1, 0.01, this);
        if (data2.o) {
          this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, elem2);
        } else {
          this.o = {
            _mdf: false,
            v: 1
          };
        }
        this._isDirty = true;
        if (!this.dynamicProperties.length) {
          this.getValue(true);
        }
      }
      TransformProperty.prototype = {
        applyToMatrix,
        getValue: processKeys,
        precalculateMatrix,
        autoOrient
      };
      extendPrototype([DynamicPropertyContainer], TransformProperty);
      TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
      TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;
      function getTransformProperty(elem2, data2, container) {
        return new TransformProperty(elem2, data2, container);
      }
      return {
        getTransformProperty
      };
    }();
    function RepeaterModifier() {
    }
    extendPrototype([ShapeModifier], RepeaterModifier);
    RepeaterModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.c = PropertyFactory.getProp(elem2, data2.c, 0, null, this);
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, null, this);
      this.tr = TransformPropertyFactory.getTransformProperty(elem2, data2.tr, this);
      this.so = PropertyFactory.getProp(elem2, data2.tr.so, 0, 0.01, this);
      this.eo = PropertyFactory.getProp(elem2, data2.tr.eo, 0, 0.01, this);
      this.data = data2;
      if (!this.dynamicProperties.length) {
        this.getValue(true);
      }
      this._isAnimated = !!this.dynamicProperties.length;
      this.pMatrix = new Matrix();
      this.rMatrix = new Matrix();
      this.sMatrix = new Matrix();
      this.tMatrix = new Matrix();
      this.matrix = new Matrix();
    };
    RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform2, perc, inv) {
      var dir = inv ? -1 : 1;
      var scaleX = transform2.s.v[0] + (1 - transform2.s.v[0]) * (1 - perc);
      var scaleY = transform2.s.v[1] + (1 - transform2.s.v[1]) * (1 - perc);
      pMatrix.translate(transform2.p.v[0] * dir * perc, transform2.p.v[1] * dir * perc, transform2.p.v[2]);
      rMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
      rMatrix.rotate(-transform2.r.v * dir * perc);
      rMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
      sMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
      sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
      sMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
    };
    RepeaterModifier.prototype.init = function(elem2, arr, pos, elemsData) {
      this.elem = elem2;
      this.arr = arr;
      this.pos = pos;
      this.elemsData = elemsData;
      this._currentCopies = 0;
      this._elements = [];
      this._groups = [];
      this.frameId = -1;
      this.initDynamicPropertyContainer(elem2);
      this.initModifierProperties(elem2, arr[pos]);
      while (pos > 0) {
        pos -= 1;
        this._elements.unshift(arr[pos]);
      }
      if (this.dynamicProperties.length) {
        this.k = true;
      } else {
        this.getValue(true);
      }
    };
    RepeaterModifier.prototype.resetElements = function(elements) {
      var i2;
      var len = elements.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        elements[i2]._processed = false;
        if (elements[i2].ty === "gr") {
          this.resetElements(elements[i2].it);
        }
      }
    };
    RepeaterModifier.prototype.cloneElements = function(elements) {
      var newElements = JSON.parse(JSON.stringify(elements));
      this.resetElements(newElements);
      return newElements;
    };
    RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
      var i2;
      var len = elements.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        elements[i2]._render = renderFlag;
        if (elements[i2].ty === "gr") {
          this.changeGroupRender(elements[i2].it, renderFlag);
        }
      }
    };
    RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
      var items;
      var itemsTransform;
      var i2;
      var dir;
      var cont;
      var hasReloaded = false;
      if (this._mdf || _isFirstFrame) {
        var copies = Math.ceil(this.c.v);
        if (this._groups.length < copies) {
          while (this._groups.length < copies) {
            var group = {
              it: this.cloneElements(this._elements),
              ty: "gr"
            };
            group.it.push({
              a: {
                a: 0,
                ix: 1,
                k: [0, 0]
              },
              nm: "Transform",
              o: {
                a: 0,
                ix: 7,
                k: 100
              },
              p: {
                a: 0,
                ix: 2,
                k: [0, 0]
              },
              r: {
                a: 1,
                ix: 6,
                k: [{
                  s: 0,
                  e: 0,
                  t: 0
                }, {
                  s: 0,
                  e: 0,
                  t: 1
                }]
              },
              s: {
                a: 0,
                ix: 3,
                k: [100, 100]
              },
              sa: {
                a: 0,
                ix: 5,
                k: 0
              },
              sk: {
                a: 0,
                ix: 4,
                k: 0
              },
              ty: "tr"
            });
            this.arr.splice(0, 0, group);
            this._groups.splice(0, 0, group);
            this._currentCopies += 1;
          }
          this.elem.reloadShapes();
          hasReloaded = true;
        }
        cont = 0;
        var renderFlag;
        for (i2 = 0; i2 <= this._groups.length - 1; i2 += 1) {
          renderFlag = cont < copies;
          this._groups[i2]._render = renderFlag;
          this.changeGroupRender(this._groups[i2].it, renderFlag);
          if (!renderFlag) {
            var elems = this.elemsData[i2].it;
            var transformData = elems[elems.length - 1];
            if (transformData.transform.op.v !== 0) {
              transformData.transform.op._mdf = true;
              transformData.transform.op.v = 0;
            } else {
              transformData.transform.op._mdf = false;
            }
          }
          cont += 1;
        }
        this._currentCopies = copies;
        var offset = this.o.v;
        var offsetModulo = offset % 1;
        var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
        var pProps = this.pMatrix.props;
        var rProps = this.rMatrix.props;
        var sProps = this.sMatrix.props;
        this.pMatrix.reset();
        this.rMatrix.reset();
        this.sMatrix.reset();
        this.tMatrix.reset();
        this.matrix.reset();
        var iteration = 0;
        if (offset > 0) {
          while (iteration < roundOffset) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
            iteration += 1;
          }
          if (offsetModulo) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
            iteration += offsetModulo;
          }
        } else if (offset < 0) {
          while (iteration > roundOffset) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
            iteration -= 1;
          }
          if (offsetModulo) {
            this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
            iteration -= offsetModulo;
          }
        }
        i2 = this.data.m === 1 ? 0 : this._currentCopies - 1;
        dir = this.data.m === 1 ? 1 : -1;
        cont = this._currentCopies;
        var j;
        var jLen;
        while (cont) {
          items = this.elemsData[i2].it;
          itemsTransform = items[items.length - 1].transform.mProps.v.props;
          jLen = itemsTransform.length;
          items[items.length - 1].transform.mProps._mdf = true;
          items[items.length - 1].transform.op._mdf = true;
          items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i2 / (this._currentCopies - 1));
          if (iteration !== 0) {
            if (i2 !== 0 && dir === 1 || i2 !== this._currentCopies - 1 && dir === -1) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
            }
            this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
            this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
            this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);
            for (j = 0; j < jLen; j += 1) {
              itemsTransform[j] = this.matrix.props[j];
            }
            this.matrix.reset();
          } else {
            this.matrix.reset();
            for (j = 0; j < jLen; j += 1) {
              itemsTransform[j] = this.matrix.props[j];
            }
          }
          iteration += 1;
          cont -= 1;
          i2 += dir;
        }
      } else {
        cont = this._currentCopies;
        i2 = 0;
        dir = 1;
        while (cont) {
          items = this.elemsData[i2].it;
          itemsTransform = items[items.length - 1].transform.mProps.v.props;
          items[items.length - 1].transform.mProps._mdf = false;
          items[items.length - 1].transform.op._mdf = false;
          cont -= 1;
          i2 += dir;
        }
      }
      return hasReloaded;
    };
    RepeaterModifier.prototype.addShape = function() {
    };
    function RoundCornersModifier() {
    }
    extendPrototype([ShapeModifier], RoundCornersModifier);
    RoundCornersModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.rd = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
      this._isAnimated = !!this.rd.effectsSequence.length;
    };
    RoundCornersModifier.prototype.processPath = function(path, round2) {
      var clonedPath = shapePool.newElement();
      clonedPath.c = path.c;
      var i2;
      var len = path._length;
      var currentV;
      var currentI;
      var currentO;
      var closerV;
      var distance;
      var newPosPerc;
      var index2 = 0;
      var vX;
      var vY;
      var oX;
      var oY;
      var iX;
      var iY;
      for (i2 = 0; i2 < len; i2 += 1) {
        currentV = path.v[i2];
        currentO = path.o[i2];
        currentI = path.i[i2];
        if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
          if ((i2 === 0 || i2 === len - 1) && !path.c) {
            clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index2);
            index2 += 1;
          } else {
            if (i2 === 0) {
              closerV = path.v[len - 1];
            } else {
              closerV = path.v[i2 - 1];
            }
            distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
            newPosPerc = distance ? Math.min(distance / 2, round2) / distance : 0;
            iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
            vX = iX;
            iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
            vY = iY;
            oX = vX - (vX - currentV[0]) * roundCorner;
            oY = vY - (vY - currentV[1]) * roundCorner;
            clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
            index2 += 1;
            if (i2 === len - 1) {
              closerV = path.v[0];
            } else {
              closerV = path.v[i2 + 1];
            }
            distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
            newPosPerc = distance ? Math.min(distance / 2, round2) / distance : 0;
            oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
            vX = oX;
            oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
            vY = oY;
            iX = vX - (vX - currentV[0]) * roundCorner;
            iY = vY - (vY - currentV[1]) * roundCorner;
            clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
            index2 += 1;
          }
        } else {
          clonedPath.setTripleAt(path.v[i2][0], path.v[i2][1], path.o[i2][0], path.o[i2][1], path.i[i2][0], path.i[i2][1], index2);
          index2 += 1;
        }
      }
      return clonedPath;
    };
    RoundCornersModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j;
      var jLen;
      var rd2 = this.rd.v;
      if (rd2 !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j = 0; j < jLen; j += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j], rd2));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    function floatEqual(a3, b3) {
      return Math.abs(a3 - b3) * 1e5 <= Math.min(Math.abs(a3), Math.abs(b3));
    }
    function floatZero(f2) {
      return Math.abs(f2) <= 1e-5;
    }
    function lerp(p0, p1, amount) {
      return p0 * (1 - amount) + p1 * amount;
    }
    function lerpPoint(p0, p1, amount) {
      return [lerp(p0[0], p1[0], amount), lerp(p0[1], p1[1], amount)];
    }
    function quadRoots(a3, b3, c7) {
      if (a3 === 0)
        return [];
      var s3 = b3 * b3 - 4 * a3 * c7;
      if (s3 < 0)
        return [];
      var singleRoot = -b3 / (2 * a3);
      if (s3 === 0)
        return [singleRoot];
      var delta = Math.sqrt(s3) / (2 * a3);
      return [singleRoot - delta, singleRoot + delta];
    }
    function polynomialCoefficients(p0, p1, p2, p3) {
      return [-p0 + 3 * p1 - 3 * p2 + p3, 3 * p0 - 6 * p1 + 3 * p2, -3 * p0 + 3 * p1, p0];
    }
    function singlePoint(p2) {
      return new PolynomialBezier(p2, p2, p2, p2, false);
    }
    function PolynomialBezier(p0, p1, p2, p3, linearize) {
      if (linearize && pointEqual(p0, p1)) {
        p1 = lerpPoint(p0, p3, 1 / 3);
      }
      if (linearize && pointEqual(p2, p3)) {
        p2 = lerpPoint(p0, p3, 2 / 3);
      }
      var coeffx = polynomialCoefficients(p0[0], p1[0], p2[0], p3[0]);
      var coeffy = polynomialCoefficients(p0[1], p1[1], p2[1], p3[1]);
      this.a = [coeffx[0], coeffy[0]];
      this.b = [coeffx[1], coeffy[1]];
      this.c = [coeffx[2], coeffy[2]];
      this.d = [coeffx[3], coeffy[3]];
      this.points = [p0, p1, p2, p3];
    }
    PolynomialBezier.prototype.point = function(t3) {
      return [((this.a[0] * t3 + this.b[0]) * t3 + this.c[0]) * t3 + this.d[0], ((this.a[1] * t3 + this.b[1]) * t3 + this.c[1]) * t3 + this.d[1]];
    };
    PolynomialBezier.prototype.derivative = function(t3) {
      return [(3 * t3 * this.a[0] + 2 * this.b[0]) * t3 + this.c[0], (3 * t3 * this.a[1] + 2 * this.b[1]) * t3 + this.c[1]];
    };
    PolynomialBezier.prototype.tangentAngle = function(t3) {
      var p2 = this.derivative(t3);
      return Math.atan2(p2[1], p2[0]);
    };
    PolynomialBezier.prototype.normalAngle = function(t3) {
      var p2 = this.derivative(t3);
      return Math.atan2(p2[0], p2[1]);
    };
    PolynomialBezier.prototype.inflectionPoints = function() {
      var denom = this.a[1] * this.b[0] - this.a[0] * this.b[1];
      if (floatZero(denom))
        return [];
      var tcusp = -0.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / denom;
      var square = tcusp * tcusp - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / denom;
      if (square < 0)
        return [];
      var root2 = Math.sqrt(square);
      if (floatZero(root2)) {
        if (root2 > 0 && root2 < 1)
          return [tcusp];
        return [];
      }
      return [tcusp - root2, tcusp + root2].filter(function(r2) {
        return r2 > 0 && r2 < 1;
      });
    };
    PolynomialBezier.prototype.split = function(t3) {
      if (t3 <= 0)
        return [singlePoint(this.points[0]), this];
      if (t3 >= 1)
        return [this, singlePoint(this.points[this.points.length - 1])];
      var p10 = lerpPoint(this.points[0], this.points[1], t3);
      var p11 = lerpPoint(this.points[1], this.points[2], t3);
      var p12 = lerpPoint(this.points[2], this.points[3], t3);
      var p20 = lerpPoint(p10, p11, t3);
      var p21 = lerpPoint(p11, p12, t3);
      var p3 = lerpPoint(p20, p21, t3);
      return [new PolynomialBezier(this.points[0], p10, p20, p3, true), new PolynomialBezier(p3, p21, p12, this.points[3], true)];
    };
    function extrema(bez2, comp2) {
      var min = bez2.points[0][comp2];
      var max = bez2.points[bez2.points.length - 1][comp2];
      if (min > max) {
        var e3 = max;
        max = min;
        min = e3;
      }
      var f2 = quadRoots(3 * bez2.a[comp2], 2 * bez2.b[comp2], bez2.c[comp2]);
      for (var i2 = 0; i2 < f2.length; i2 += 1) {
        if (f2[i2] > 0 && f2[i2] < 1) {
          var val2 = bez2.point(f2[i2])[comp2];
          if (val2 < min)
            min = val2;
          else if (val2 > max)
            max = val2;
        }
      }
      return {
        min,
        max
      };
    }
    PolynomialBezier.prototype.bounds = function() {
      return {
        x: extrema(this, 0),
        y: extrema(this, 1)
      };
    };
    PolynomialBezier.prototype.boundingBox = function() {
      var bounds = this.bounds();
      return {
        left: bounds.x.min,
        right: bounds.x.max,
        top: bounds.y.min,
        bottom: bounds.y.max,
        width: bounds.x.max - bounds.x.min,
        height: bounds.y.max - bounds.y.min,
        cx: (bounds.x.max + bounds.x.min) / 2,
        cy: (bounds.y.max + bounds.y.min) / 2
      };
    };
    function intersectData(bez2, t1, t22) {
      var box = bez2.boundingBox();
      return {
        cx: box.cx,
        cy: box.cy,
        width: box.width,
        height: box.height,
        bez: bez2,
        t: (t1 + t22) / 2,
        t1,
        t2: t22
      };
    }
    function splitData(data2) {
      var split2 = data2.bez.split(0.5);
      return [intersectData(split2[0], data2.t1, data2.t), intersectData(split2[1], data2.t, data2.t2)];
    }
    function boxIntersect(b1, b22) {
      return Math.abs(b1.cx - b22.cx) * 2 < b1.width + b22.width && Math.abs(b1.cy - b22.cy) * 2 < b1.height + b22.height;
    }
    function intersectsImpl(d1, d22, depth, tolerance, intersections, maxRecursion) {
      if (!boxIntersect(d1, d22))
        return;
      if (depth >= maxRecursion || d1.width <= tolerance && d1.height <= tolerance && d22.width <= tolerance && d22.height <= tolerance) {
        intersections.push([d1.t, d22.t]);
        return;
      }
      var d1s = splitData(d1);
      var d2s = splitData(d22);
      intersectsImpl(d1s[0], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
      intersectsImpl(d1s[0], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
      intersectsImpl(d1s[1], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
      intersectsImpl(d1s[1], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
    }
    PolynomialBezier.prototype.intersections = function(other, tolerance, maxRecursion) {
      if (tolerance === void 0)
        tolerance = 2;
      if (maxRecursion === void 0)
        maxRecursion = 7;
      var intersections = [];
      intersectsImpl(intersectData(this, 0, 1), intersectData(other, 0, 1), 0, tolerance, intersections, maxRecursion);
      return intersections;
    };
    PolynomialBezier.shapeSegment = function(shapePath, index2) {
      var nextIndex = (index2 + 1) % shapePath.length();
      return new PolynomialBezier(shapePath.v[index2], shapePath.o[index2], shapePath.i[nextIndex], shapePath.v[nextIndex], true);
    };
    PolynomialBezier.shapeSegmentInverted = function(shapePath, index2) {
      var nextIndex = (index2 + 1) % shapePath.length();
      return new PolynomialBezier(shapePath.v[nextIndex], shapePath.i[nextIndex], shapePath.o[index2], shapePath.v[index2], true);
    };
    function crossProduct(a3, b3) {
      return [a3[1] * b3[2] - a3[2] * b3[1], a3[2] * b3[0] - a3[0] * b3[2], a3[0] * b3[1] - a3[1] * b3[0]];
    }
    function lineIntersection(start1, end1, start2, end2) {
      var v1 = [start1[0], start1[1], 1];
      var v2 = [end1[0], end1[1], 1];
      var v3 = [start2[0], start2[1], 1];
      var v4 = [end2[0], end2[1], 1];
      var r2 = crossProduct(crossProduct(v1, v2), crossProduct(v3, v4));
      if (floatZero(r2[2]))
        return null;
      return [r2[0] / r2[2], r2[1] / r2[2]];
    }
    function polarOffset(p2, angle, length2) {
      return [p2[0] + Math.cos(angle) * length2, p2[1] - Math.sin(angle) * length2];
    }
    function pointDistance(p1, p2) {
      return Math.hypot(p1[0] - p2[0], p1[1] - p2[1]);
    }
    function pointEqual(p1, p2) {
      return floatEqual(p1[0], p2[0]) && floatEqual(p1[1], p2[1]);
    }
    function ZigZagModifier() {
    }
    extendPrototype([ShapeModifier], ZigZagModifier);
    ZigZagModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.amplitude = PropertyFactory.getProp(elem2, data2.s, 0, null, this);
      this.frequency = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
      this.pointsType = PropertyFactory.getProp(elem2, data2.pt, 0, null, this);
      this._isAnimated = this.amplitude.effectsSequence.length !== 0 || this.frequency.effectsSequence.length !== 0 || this.pointsType.effectsSequence.length !== 0;
    };
    function setPoint(outputBezier, point, angle, direction, amplitude, outAmplitude, inAmplitude) {
      var angO = angle - Math.PI / 2;
      var angI = angle + Math.PI / 2;
      var px = point[0] + Math.cos(angle) * direction * amplitude;
      var py = point[1] - Math.sin(angle) * direction * amplitude;
      outputBezier.setTripleAt(px, py, px + Math.cos(angO) * outAmplitude, py - Math.sin(angO) * outAmplitude, px + Math.cos(angI) * inAmplitude, py - Math.sin(angI) * inAmplitude, outputBezier.length());
    }
    function getPerpendicularVector(pt1, pt2) {
      var vector = [pt2[0] - pt1[0], pt2[1] - pt1[1]];
      var rot = -Math.PI * 0.5;
      var rotatedVector = [Math.cos(rot) * vector[0] - Math.sin(rot) * vector[1], Math.sin(rot) * vector[0] + Math.cos(rot) * vector[1]];
      return rotatedVector;
    }
    function getProjectingAngle(path, cur) {
      var prevIndex = cur === 0 ? path.length() - 1 : cur - 1;
      var nextIndex = (cur + 1) % path.length();
      var prevPoint = path.v[prevIndex];
      var nextPoint = path.v[nextIndex];
      var pVector = getPerpendicularVector(prevPoint, nextPoint);
      return Math.atan2(0, 1) - Math.atan2(pVector[1], pVector[0]);
    }
    function zigZagCorner(outputBezier, path, cur, amplitude, frequency, pointType, direction) {
      var angle = getProjectingAngle(path, cur);
      var point = path.v[cur % path._length];
      var prevPoint = path.v[cur === 0 ? path._length - 1 : cur - 1];
      var nextPoint = path.v[(cur + 1) % path._length];
      var prevDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - prevPoint[0], 2) + Math.pow(point[1] - prevPoint[1], 2)) : 0;
      var nextDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - nextPoint[0], 2) + Math.pow(point[1] - nextPoint[1], 2)) : 0;
      setPoint(outputBezier, path.v[cur % path._length], angle, direction, amplitude, nextDist / ((frequency + 1) * 2), prevDist / ((frequency + 1) * 2));
    }
    function zigZagSegment(outputBezier, segment, amplitude, frequency, pointType, direction) {
      for (var i2 = 0; i2 < frequency; i2 += 1) {
        var t3 = (i2 + 1) / (frequency + 1);
        var dist = pointType === 2 ? Math.sqrt(Math.pow(segment.points[3][0] - segment.points[0][0], 2) + Math.pow(segment.points[3][1] - segment.points[0][1], 2)) : 0;
        var angle = segment.normalAngle(t3);
        var point = segment.point(t3);
        setPoint(outputBezier, point, angle, direction, amplitude, dist / ((frequency + 1) * 2), dist / ((frequency + 1) * 2));
        direction = -direction;
      }
      return direction;
    }
    ZigZagModifier.prototype.processPath = function(path, amplitude, frequency, pointType) {
      var count = path._length;
      var clonedPath = shapePool.newElement();
      clonedPath.c = path.c;
      if (!path.c) {
        count -= 1;
      }
      if (count === 0)
        return clonedPath;
      var direction = -1;
      var segment = PolynomialBezier.shapeSegment(path, 0);
      zigZagCorner(clonedPath, path, 0, amplitude, frequency, pointType, direction);
      for (var i2 = 0; i2 < count; i2 += 1) {
        direction = zigZagSegment(clonedPath, segment, amplitude, frequency, pointType, -direction);
        if (i2 === count - 1 && !path.c) {
          segment = null;
        } else {
          segment = PolynomialBezier.shapeSegment(path, (i2 + 1) % count);
        }
        zigZagCorner(clonedPath, path, i2 + 1, amplitude, frequency, pointType, direction);
      }
      return clonedPath;
    };
    ZigZagModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j;
      var jLen;
      var amplitude = this.amplitude.v;
      var frequency = Math.max(0, Math.round(this.frequency.v));
      var pointType = this.pointsType.v;
      if (amplitude !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j = 0; j < jLen; j += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j], amplitude, frequency, pointType));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    function linearOffset(p1, p2, amount) {
      var angle = Math.atan2(p2[0] - p1[0], p2[1] - p1[1]);
      return [polarOffset(p1, angle, amount), polarOffset(p2, angle, amount)];
    }
    function offsetSegment(segment, amount) {
      var p0;
      var p1a;
      var p1b;
      var p2b;
      var p2a;
      var p3;
      var e3;
      e3 = linearOffset(segment.points[0], segment.points[1], amount);
      p0 = e3[0];
      p1a = e3[1];
      e3 = linearOffset(segment.points[1], segment.points[2], amount);
      p1b = e3[0];
      p2b = e3[1];
      e3 = linearOffset(segment.points[2], segment.points[3], amount);
      p2a = e3[0];
      p3 = e3[1];
      var p1 = lineIntersection(p0, p1a, p1b, p2b);
      if (p1 === null)
        p1 = p1a;
      var p2 = lineIntersection(p2a, p3, p1b, p2b);
      if (p2 === null)
        p2 = p2a;
      return new PolynomialBezier(p0, p1, p2, p3);
    }
    function joinLines(outputBezier, seg1, seg2, lineJoin, miterLimit) {
      var p0 = seg1.points[3];
      var p1 = seg2.points[0];
      if (lineJoin === 3)
        return p0;
      if (pointEqual(p0, p1))
        return p0;
      if (lineJoin === 2) {
        var angleOut = -seg1.tangentAngle(1);
        var angleIn = -seg2.tangentAngle(0) + Math.PI;
        var center = lineIntersection(p0, polarOffset(p0, angleOut + Math.PI / 2, 100), p1, polarOffset(p1, angleOut + Math.PI / 2, 100));
        var radius = center ? pointDistance(center, p0) : pointDistance(p0, p1) / 2;
        var tan = polarOffset(p0, angleOut, 2 * radius * roundCorner);
        outputBezier.setXYAt(tan[0], tan[1], "o", outputBezier.length() - 1);
        tan = polarOffset(p1, angleIn, 2 * radius * roundCorner);
        outputBezier.setTripleAt(p1[0], p1[1], p1[0], p1[1], tan[0], tan[1], outputBezier.length());
        return p1;
      }
      var t0 = pointEqual(p0, seg1.points[2]) ? seg1.points[0] : seg1.points[2];
      var t1 = pointEqual(p1, seg2.points[1]) ? seg2.points[3] : seg2.points[1];
      var intersection = lineIntersection(t0, p0, p1, t1);
      if (intersection && pointDistance(intersection, p0) < miterLimit) {
        outputBezier.setTripleAt(intersection[0], intersection[1], intersection[0], intersection[1], intersection[0], intersection[1], outputBezier.length());
        return intersection;
      }
      return p0;
    }
    function getIntersection(a3, b3) {
      var intersect = a3.intersections(b3);
      if (intersect.length && floatEqual(intersect[0][0], 1))
        intersect.shift();
      if (intersect.length)
        return intersect[0];
      return null;
    }
    function pruneSegmentIntersection(a3, b3) {
      var outa = a3.slice();
      var outb = b3.slice();
      var intersect = getIntersection(a3[a3.length - 1], b3[0]);
      if (intersect) {
        outa[a3.length - 1] = a3[a3.length - 1].split(intersect[0])[0];
        outb[0] = b3[0].split(intersect[1])[1];
      }
      if (a3.length > 1 && b3.length > 1) {
        intersect = getIntersection(a3[0], b3[b3.length - 1]);
        if (intersect) {
          return [[a3[0].split(intersect[0])[0]], [b3[b3.length - 1].split(intersect[1])[1]]];
        }
      }
      return [outa, outb];
    }
    function pruneIntersections(segments) {
      var e3;
      for (var i2 = 1; i2 < segments.length; i2 += 1) {
        e3 = pruneSegmentIntersection(segments[i2 - 1], segments[i2]);
        segments[i2 - 1] = e3[0];
        segments[i2] = e3[1];
      }
      if (segments.length > 1) {
        e3 = pruneSegmentIntersection(segments[segments.length - 1], segments[0]);
        segments[segments.length - 1] = e3[0];
        segments[0] = e3[1];
      }
      return segments;
    }
    function offsetSegmentSplit(segment, amount) {
      var flex = segment.inflectionPoints();
      var left;
      var right;
      var split2;
      var mid;
      if (flex.length === 0) {
        return [offsetSegment(segment, amount)];
      }
      if (flex.length === 1 || floatEqual(flex[1], 1)) {
        split2 = segment.split(flex[0]);
        left = split2[0];
        right = split2[1];
        return [offsetSegment(left, amount), offsetSegment(right, amount)];
      }
      split2 = segment.split(flex[0]);
      left = split2[0];
      var t3 = (flex[1] - flex[0]) / (1 - flex[0]);
      split2 = split2[1].split(t3);
      mid = split2[0];
      right = split2[1];
      return [offsetSegment(left, amount), offsetSegment(mid, amount), offsetSegment(right, amount)];
    }
    function OffsetPathModifier() {
    }
    extendPrototype([ShapeModifier], OffsetPathModifier);
    OffsetPathModifier.prototype.initModifierProperties = function(elem2, data2) {
      this.getValue = this.processKeys;
      this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
      this.miterLimit = PropertyFactory.getProp(elem2, data2.ml, 0, null, this);
      this.lineJoin = data2.lj;
      this._isAnimated = this.amount.effectsSequence.length !== 0;
    };
    OffsetPathModifier.prototype.processPath = function(inputBezier, amount, lineJoin, miterLimit) {
      var outputBezier = shapePool.newElement();
      outputBezier.c = inputBezier.c;
      var count = inputBezier.length();
      if (!inputBezier.c) {
        count -= 1;
      }
      var i2;
      var j;
      var segment;
      var multiSegments = [];
      for (i2 = 0; i2 < count; i2 += 1) {
        segment = PolynomialBezier.shapeSegment(inputBezier, i2);
        multiSegments.push(offsetSegmentSplit(segment, amount));
      }
      if (!inputBezier.c) {
        for (i2 = count - 1; i2 >= 0; i2 -= 1) {
          segment = PolynomialBezier.shapeSegmentInverted(inputBezier, i2);
          multiSegments.push(offsetSegmentSplit(segment, amount));
        }
      }
      multiSegments = pruneIntersections(multiSegments);
      var lastPoint = null;
      var lastSeg = null;
      for (i2 = 0; i2 < multiSegments.length; i2 += 1) {
        var multiSegment = multiSegments[i2];
        if (lastSeg)
          lastPoint = joinLines(outputBezier, lastSeg, multiSegment[0], lineJoin, miterLimit);
        lastSeg = multiSegment[multiSegment.length - 1];
        for (j = 0; j < multiSegment.length; j += 1) {
          segment = multiSegment[j];
          if (lastPoint && pointEqual(segment.points[0], lastPoint)) {
            outputBezier.setXYAt(segment.points[1][0], segment.points[1][1], "o", outputBezier.length() - 1);
          } else {
            outputBezier.setTripleAt(segment.points[0][0], segment.points[0][1], segment.points[1][0], segment.points[1][1], segment.points[0][0], segment.points[0][1], outputBezier.length());
          }
          outputBezier.setTripleAt(segment.points[3][0], segment.points[3][1], segment.points[3][0], segment.points[3][1], segment.points[2][0], segment.points[2][1], outputBezier.length());
          lastPoint = segment.points[3];
        }
      }
      if (multiSegments.length)
        joinLines(outputBezier, lastSeg, multiSegments[0][0], lineJoin, miterLimit);
      return outputBezier;
    };
    OffsetPathModifier.prototype.processShapes = function(_isFirstFrame) {
      var shapePaths;
      var i2;
      var len = this.shapes.length;
      var j;
      var jLen;
      var amount = this.amount.v;
      var miterLimit = this.miterLimit.v;
      var lineJoin = this.lineJoin;
      if (amount !== 0) {
        var shapeData;
        var localShapeCollection;
        for (i2 = 0; i2 < len; i2 += 1) {
          shapeData = this.shapes[i2];
          localShapeCollection = shapeData.localShapeCollection;
          if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
            localShapeCollection.releaseShapes();
            shapeData.shape._mdf = true;
            shapePaths = shapeData.shape.paths.shapes;
            jLen = shapeData.shape.paths._length;
            for (j = 0; j < jLen; j += 1) {
              localShapeCollection.addShape(this.processPath(shapePaths[j], amount, lineJoin, miterLimit));
            }
          }
          shapeData.shape.paths = shapeData.localShapeCollection;
        }
      }
      if (!this.dynamicProperties.length) {
        this._mdf = false;
      }
    };
    function getFontProperties(fontData) {
      var styles2 = fontData.fStyle ? fontData.fStyle.split(" ") : [];
      var fWeight = "normal";
      var fStyle = "normal";
      var len = styles2.length;
      var styleName;
      for (var i2 = 0; i2 < len; i2 += 1) {
        styleName = styles2[i2].toLowerCase();
        switch (styleName) {
          case "italic":
            fStyle = "italic";
            break;
          case "bold":
            fWeight = "700";
            break;
          case "black":
            fWeight = "900";
            break;
          case "medium":
            fWeight = "500";
            break;
          case "regular":
          case "normal":
            fWeight = "400";
            break;
          case "light":
          case "thin":
            fWeight = "200";
            break;
        }
      }
      return {
        style: fStyle,
        weight: fontData.fWeight || fWeight
      };
    }
    var FontManager = function() {
      var maxWaitingTime = 5e3;
      var emptyChar = {
        w: 0,
        size: 0,
        shapes: [],
        data: {
          shapes: []
        }
      };
      var combinedCharacters = [];
      combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
      var BLACK_FLAG_CODE_POINT = 127988;
      var CANCEL_TAG_CODE_POINT = 917631;
      var A_TAG_CODE_POINT = 917601;
      var Z_TAG_CODE_POINT = 917626;
      var VARIATION_SELECTOR_16_CODE_POINT = 65039;
      var ZERO_WIDTH_JOINER_CODE_POINT = 8205;
      var REGIONAL_CHARACTER_A_CODE_POINT = 127462;
      var REGIONAL_CHARACTER_Z_CODE_POINT = 127487;
      var surrogateModifiers = ["d83cdffb", "d83cdffc", "d83cdffd", "d83cdffe", "d83cdfff"];
      function trimFontOptions(font) {
        var familyArray = font.split(",");
        var i2;
        var len = familyArray.length;
        var enabledFamilies = [];
        for (i2 = 0; i2 < len; i2 += 1) {
          if (familyArray[i2] !== "sans-serif" && familyArray[i2] !== "monospace") {
            enabledFamilies.push(familyArray[i2]);
          }
        }
        return enabledFamilies.join(",");
      }
      function setUpNode(font, family) {
        var parentNode = createTag("span");
        parentNode.setAttribute("aria-hidden", true);
        parentNode.style.fontFamily = family;
        var node = createTag("span");
        node.innerText = "giItT1WQy@!-/#";
        parentNode.style.position = "absolute";
        parentNode.style.left = "-10000px";
        parentNode.style.top = "-10000px";
        parentNode.style.fontSize = "300px";
        parentNode.style.fontVariant = "normal";
        parentNode.style.fontStyle = "normal";
        parentNode.style.fontWeight = "normal";
        parentNode.style.letterSpacing = "0";
        parentNode.appendChild(node);
        document.body.appendChild(parentNode);
        var width2 = node.offsetWidth;
        node.style.fontFamily = trimFontOptions(font) + ", " + family;
        return {
          node,
          w: width2,
          parent: parentNode
        };
      }
      function checkLoadedFonts() {
        var i2;
        var len = this.fonts.length;
        var node;
        var w3;
        var loadedCount = len;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (this.fonts[i2].loaded) {
            loadedCount -= 1;
          } else if (this.fonts[i2].fOrigin === "n" || this.fonts[i2].origin === 0) {
            this.fonts[i2].loaded = true;
          } else {
            node = this.fonts[i2].monoCase.node;
            w3 = this.fonts[i2].monoCase.w;
            if (node.offsetWidth !== w3) {
              loadedCount -= 1;
              this.fonts[i2].loaded = true;
            } else {
              node = this.fonts[i2].sansCase.node;
              w3 = this.fonts[i2].sansCase.w;
              if (node.offsetWidth !== w3) {
                loadedCount -= 1;
                this.fonts[i2].loaded = true;
              }
            }
            if (this.fonts[i2].loaded) {
              this.fonts[i2].sansCase.parent.parentNode.removeChild(this.fonts[i2].sansCase.parent);
              this.fonts[i2].monoCase.parent.parentNode.removeChild(this.fonts[i2].monoCase.parent);
            }
          }
        }
        if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
          setTimeout(this.checkLoadedFontsBinded, 20);
        } else {
          setTimeout(this.setIsLoadedBinded, 10);
        }
      }
      function createHelper(fontData, def) {
        var engine = document.body && def ? "svg" : "canvas";
        var helper;
        var fontProps = getFontProperties(fontData);
        if (engine === "svg") {
          var tHelper = createNS("text");
          tHelper.style.fontSize = "100px";
          tHelper.setAttribute("font-family", fontData.fFamily);
          tHelper.setAttribute("font-style", fontProps.style);
          tHelper.setAttribute("font-weight", fontProps.weight);
          tHelper.textContent = "1";
          if (fontData.fClass) {
            tHelper.style.fontFamily = "inherit";
            tHelper.setAttribute("class", fontData.fClass);
          } else {
            tHelper.style.fontFamily = fontData.fFamily;
          }
          def.appendChild(tHelper);
          helper = tHelper;
        } else {
          var tCanvasHelper = new OffscreenCanvas(500, 500).getContext("2d");
          tCanvasHelper.font = fontProps.style + " " + fontProps.weight + " 100px " + fontData.fFamily;
          helper = tCanvasHelper;
        }
        function measure(text2) {
          if (engine === "svg") {
            helper.textContent = text2;
            return helper.getComputedTextLength();
          }
          return helper.measureText(text2).width;
        }
        return {
          measureText: measure
        };
      }
      function addFonts(fontData, defs) {
        if (!fontData) {
          this.isLoaded = true;
          return;
        }
        if (this.chars) {
          this.isLoaded = true;
          this.fonts = fontData.list;
          return;
        }
        if (!document.body) {
          this.isLoaded = true;
          fontData.list.forEach(function(data2) {
            data2.helper = createHelper(data2);
            data2.cache = {};
          });
          this.fonts = fontData.list;
          return;
        }
        var fontArr = fontData.list;
        var i2;
        var len = fontArr.length;
        var _pendingFonts = len;
        for (i2 = 0; i2 < len; i2 += 1) {
          var shouldLoadFont = true;
          var loadedSelector;
          var j;
          fontArr[i2].loaded = false;
          fontArr[i2].monoCase = setUpNode(fontArr[i2].fFamily, "monospace");
          fontArr[i2].sansCase = setUpNode(fontArr[i2].fFamily, "sans-serif");
          if (!fontArr[i2].fPath) {
            fontArr[i2].loaded = true;
            _pendingFonts -= 1;
          } else if (fontArr[i2].fOrigin === "p" || fontArr[i2].origin === 3) {
            loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i2].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i2].fFamily + '"]');
            if (loadedSelector.length > 0) {
              shouldLoadFont = false;
            }
            if (shouldLoadFont) {
              var s3 = createTag("style");
              s3.setAttribute("f-forigin", fontArr[i2].fOrigin);
              s3.setAttribute("f-origin", fontArr[i2].origin);
              s3.setAttribute("f-family", fontArr[i2].fFamily);
              s3.type = "text/css";
              s3.innerText = "@font-face {font-family: " + fontArr[i2].fFamily + "; font-style: normal; src: url('" + fontArr[i2].fPath + "');}";
              defs.appendChild(s3);
            }
          } else if (fontArr[i2].fOrigin === "g" || fontArr[i2].origin === 1) {
            loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');
            for (j = 0; j < loadedSelector.length; j += 1) {
              if (loadedSelector[j].href.indexOf(fontArr[i2].fPath) !== -1) {
                shouldLoadFont = false;
              }
            }
            if (shouldLoadFont) {
              var l2 = createTag("link");
              l2.setAttribute("f-forigin", fontArr[i2].fOrigin);
              l2.setAttribute("f-origin", fontArr[i2].origin);
              l2.type = "text/css";
              l2.rel = "stylesheet";
              l2.href = fontArr[i2].fPath;
              document.body.appendChild(l2);
            }
          } else if (fontArr[i2].fOrigin === "t" || fontArr[i2].origin === 2) {
            loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');
            for (j = 0; j < loadedSelector.length; j += 1) {
              if (fontArr[i2].fPath === loadedSelector[j].src) {
                shouldLoadFont = false;
              }
            }
            if (shouldLoadFont) {
              var sc2 = createTag("link");
              sc2.setAttribute("f-forigin", fontArr[i2].fOrigin);
              sc2.setAttribute("f-origin", fontArr[i2].origin);
              sc2.setAttribute("rel", "stylesheet");
              sc2.setAttribute("href", fontArr[i2].fPath);
              defs.appendChild(sc2);
            }
          }
          fontArr[i2].helper = createHelper(fontArr[i2], defs);
          fontArr[i2].cache = {};
          this.fonts.push(fontArr[i2]);
        }
        if (_pendingFonts === 0) {
          this.isLoaded = true;
        } else {
          setTimeout(this.checkLoadedFonts.bind(this), 100);
        }
      }
      function addChars(chars) {
        if (!chars) {
          return;
        }
        if (!this.chars) {
          this.chars = [];
        }
        var i2;
        var len = chars.length;
        var j;
        var jLen = this.chars.length;
        var found;
        for (i2 = 0; i2 < len; i2 += 1) {
          j = 0;
          found = false;
          while (j < jLen) {
            if (this.chars[j].style === chars[i2].style && this.chars[j].fFamily === chars[i2].fFamily && this.chars[j].ch === chars[i2].ch) {
              found = true;
            }
            j += 1;
          }
          if (!found) {
            this.chars.push(chars[i2]);
            jLen += 1;
          }
        }
      }
      function getCharData(_char, style, font) {
        var i2 = 0;
        var len = this.chars.length;
        while (i2 < len) {
          if (this.chars[i2].ch === _char && this.chars[i2].style === style && this.chars[i2].fFamily === font) {
            return this.chars[i2];
          }
          i2 += 1;
        }
        if ((typeof _char === "string" && _char.charCodeAt(0) !== 13 || !_char) && console && console.warn && !this._warned) {
          this._warned = true;
          console.warn("Missing character from exported characters list: ", _char, style, font);
        }
        return emptyChar;
      }
      function measureText(_char2, fontName, size) {
        var fontData = this.getFontByName(fontName);
        var index2 = _char2;
        if (!fontData.cache[index2]) {
          var tHelper = fontData.helper;
          if (_char2 === " ") {
            var doubleSize = tHelper.measureText("|" + _char2 + "|");
            var singleSize = tHelper.measureText("||");
            fontData.cache[index2] = (doubleSize - singleSize) / 100;
          } else {
            fontData.cache[index2] = tHelper.measureText(_char2) / 100;
          }
        }
        return fontData.cache[index2] * size;
      }
      function getFontByName(name2) {
        var i2 = 0;
        var len = this.fonts.length;
        while (i2 < len) {
          if (this.fonts[i2].fName === name2) {
            return this.fonts[i2];
          }
          i2 += 1;
        }
        return this.fonts[0];
      }
      function getCodePoint(string2) {
        var codePoint = 0;
        var first = string2.charCodeAt(0);
        if (first >= 55296 && first <= 56319) {
          var second = string2.charCodeAt(1);
          if (second >= 56320 && second <= 57343) {
            codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
          }
        }
        return codePoint;
      }
      function isModifier(firstCharCode, secondCharCode) {
        var sum2 = firstCharCode.toString(16) + secondCharCode.toString(16);
        return surrogateModifiers.indexOf(sum2) !== -1;
      }
      function isZeroWidthJoiner(charCode) {
        return charCode === ZERO_WIDTH_JOINER_CODE_POINT;
      }
      function isVariationSelector(charCode) {
        return charCode === VARIATION_SELECTOR_16_CODE_POINT;
      }
      function isRegionalCode(string2) {
        var codePoint = getCodePoint(string2);
        if (codePoint >= REGIONAL_CHARACTER_A_CODE_POINT && codePoint <= REGIONAL_CHARACTER_Z_CODE_POINT) {
          return true;
        }
        return false;
      }
      function isFlagEmoji(string2) {
        return isRegionalCode(string2.substr(0, 2)) && isRegionalCode(string2.substr(2, 2));
      }
      function isCombinedCharacter(_char3) {
        return combinedCharacters.indexOf(_char3) !== -1;
      }
      function isRegionalFlag(text2, index2) {
        var codePoint = getCodePoint(text2.substr(index2, 2));
        if (codePoint !== BLACK_FLAG_CODE_POINT) {
          return false;
        }
        var count = 0;
        index2 += 2;
        while (count < 5) {
          codePoint = getCodePoint(text2.substr(index2, 2));
          if (codePoint < A_TAG_CODE_POINT || codePoint > Z_TAG_CODE_POINT) {
            return false;
          }
          count += 1;
          index2 += 2;
        }
        return getCodePoint(text2.substr(index2, 2)) === CANCEL_TAG_CODE_POINT;
      }
      function setIsLoaded() {
        this.isLoaded = true;
      }
      var Font = function Font2() {
        this.fonts = [];
        this.chars = null;
        this.typekitLoaded = 0;
        this.isLoaded = false;
        this._warned = false;
        this.initTime = Date.now();
        this.setIsLoadedBinded = this.setIsLoaded.bind(this);
        this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
      };
      Font.isModifier = isModifier;
      Font.isZeroWidthJoiner = isZeroWidthJoiner;
      Font.isFlagEmoji = isFlagEmoji;
      Font.isRegionalCode = isRegionalCode;
      Font.isCombinedCharacter = isCombinedCharacter;
      Font.isRegionalFlag = isRegionalFlag;
      Font.isVariationSelector = isVariationSelector;
      Font.BLACK_FLAG_CODE_POINT = BLACK_FLAG_CODE_POINT;
      var fontPrototype = {
        addChars,
        addFonts,
        getCharData,
        getFontByName,
        measureText,
        checkLoadedFonts,
        setIsLoaded
      };
      Font.prototype = fontPrototype;
      return Font;
    }();
    function SlotManager(animationData) {
      this.animationData = animationData;
    }
    SlotManager.prototype.getProp = function(data2) {
      if (this.animationData.slots && this.animationData.slots[data2.sid]) {
        return Object.assign(data2, this.animationData.slots[data2.sid].p);
      }
      return data2;
    };
    function slotFactory(animationData) {
      return new SlotManager(animationData);
    }
    function RenderableElement() {
    }
    RenderableElement.prototype = {
      initRenderable: function initRenderable() {
        this.isInRange = false;
        this.hidden = false;
        this.isTransparent = false;
        this.renderableComponents = [];
      },
      addRenderableComponent: function addRenderableComponent(component) {
        if (this.renderableComponents.indexOf(component) === -1) {
          this.renderableComponents.push(component);
        }
      },
      removeRenderableComponent: function removeRenderableComponent(component) {
        if (this.renderableComponents.indexOf(component) !== -1) {
          this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
        }
      },
      prepareRenderableFrame: function prepareRenderableFrame(num) {
        this.checkLayerLimits(num);
      },
      checkTransparency: function checkTransparency() {
        if (this.finalTransform.mProp.o.v <= 0) {
          if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
            this.isTransparent = true;
            this.hide();
          }
        } else if (this.isTransparent) {
          this.isTransparent = false;
          this.show();
        }
      },
      /**
         * @function
         * Initializes frame related properties.
         *
         * @param {number} num
         * current frame number in Layer's time
         *
         */
      checkLayerLimits: function checkLayerLimits(num) {
        if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
          if (this.isInRange !== true) {
            this.globalData._mdf = true;
            this._mdf = true;
            this.isInRange = true;
            this.show();
          }
        } else if (this.isInRange !== false) {
          this.globalData._mdf = true;
          this.isInRange = false;
          this.hide();
        }
      },
      renderRenderable: function renderRenderable() {
        var i2;
        var len = this.renderableComponents.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.renderableComponents[i2].renderFrame(this._isFirstFrame);
        }
      },
      sourceRectAtTime: function sourceRectAtTime2() {
        return {
          top: 0,
          left: 0,
          width: 100,
          height: 100
        };
      },
      getLayerSize: function getLayerSize() {
        if (this.data.ty === 5) {
          return {
            w: this.data.textData.width,
            h: this.data.textData.height
          };
        }
        return {
          w: this.data.width,
          h: this.data.height
        };
      }
    };
    var getBlendMode = function() {
      var blendModeEnums = {
        0: "source-over",
        1: "multiply",
        2: "screen",
        3: "overlay",
        4: "darken",
        5: "lighten",
        6: "color-dodge",
        7: "color-burn",
        8: "hard-light",
        9: "soft-light",
        10: "difference",
        11: "exclusion",
        12: "hue",
        13: "saturation",
        14: "color",
        15: "luminosity"
      };
      return function(mode) {
        return blendModeEnums[mode] || "";
      };
    }();
    function SliderEffect(data2, elem2, container) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
    }
    function AngleEffect(data2, elem2, container) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
    }
    function ColorEffect(data2, elem2, container) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container);
    }
    function PointEffect(data2, elem2, container) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container);
    }
    function LayerIndexEffect(data2, elem2, container) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
    }
    function MaskIndexEffect(data2, elem2, container) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
    }
    function CheckboxEffect(data2, elem2, container) {
      this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
    }
    function NoValueEffect() {
      this.p = {};
    }
    function EffectsManager(data2, element) {
      var effects = data2.ef || [];
      this.effectElements = [];
      var i2;
      var len = effects.length;
      var effectItem;
      for (i2 = 0; i2 < len; i2 += 1) {
        effectItem = new GroupEffect(effects[i2], element);
        this.effectElements.push(effectItem);
      }
    }
    function GroupEffect(data2, element) {
      this.init(data2, element);
    }
    extendPrototype([DynamicPropertyContainer], GroupEffect);
    GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;
    GroupEffect.prototype.init = function(data2, element) {
      this.data = data2;
      this.effectElements = [];
      this.initDynamicPropertyContainer(element);
      var i2;
      var len = this.data.ef.length;
      var eff;
      var effects = this.data.ef;
      for (i2 = 0; i2 < len; i2 += 1) {
        eff = null;
        switch (effects[i2].ty) {
          case 0:
            eff = new SliderEffect(effects[i2], element, this);
            break;
          case 1:
            eff = new AngleEffect(effects[i2], element, this);
            break;
          case 2:
            eff = new ColorEffect(effects[i2], element, this);
            break;
          case 3:
            eff = new PointEffect(effects[i2], element, this);
            break;
          case 4:
          case 7:
            eff = new CheckboxEffect(effects[i2], element, this);
            break;
          case 10:
            eff = new LayerIndexEffect(effects[i2], element, this);
            break;
          case 11:
            eff = new MaskIndexEffect(effects[i2], element, this);
            break;
          case 5:
            eff = new EffectsManager(effects[i2], element);
            break;
          default:
            eff = new NoValueEffect(effects[i2]);
            break;
        }
        if (eff) {
          this.effectElements.push(eff);
        }
      }
    };
    function BaseElement() {
    }
    BaseElement.prototype = {
      checkMasks: function checkMasks() {
        if (!this.data.hasMask) {
          return false;
        }
        var i2 = 0;
        var len = this.data.masksProperties.length;
        while (i2 < len) {
          if (this.data.masksProperties[i2].mode !== "n" && this.data.masksProperties[i2].cl !== false) {
            return true;
          }
          i2 += 1;
        }
        return false;
      },
      initExpressions: function initExpressions() {
        var expressionsInterfaces2 = getExpressionInterfaces();
        if (!expressionsInterfaces2) {
          return;
        }
        var LayerExpressionInterface2 = expressionsInterfaces2("layer");
        var EffectsExpressionInterface2 = expressionsInterfaces2("effects");
        var ShapeExpressionInterface2 = expressionsInterfaces2("shape");
        var TextExpressionInterface2 = expressionsInterfaces2("text");
        var CompExpressionInterface2 = expressionsInterfaces2("comp");
        this.layerInterface = LayerExpressionInterface2(this);
        if (this.data.hasMask && this.maskManager) {
          this.layerInterface.registerMaskInterface(this.maskManager);
        }
        var effectsInterface = EffectsExpressionInterface2.createEffectsInterface(this, this.layerInterface);
        this.layerInterface.registerEffectsInterface(effectsInterface);
        if (this.data.ty === 0 || this.data.xt) {
          this.compInterface = CompExpressionInterface2(this);
        } else if (this.data.ty === 4) {
          this.layerInterface.shapeInterface = ShapeExpressionInterface2(this.shapesData, this.itemsData, this.layerInterface);
          this.layerInterface.content = this.layerInterface.shapeInterface;
        } else if (this.data.ty === 5) {
          this.layerInterface.textInterface = TextExpressionInterface2(this);
          this.layerInterface.text = this.layerInterface.textInterface;
        }
      },
      setBlendMode: function setBlendMode() {
        var blendModeValue = getBlendMode(this.data.bm);
        var elem2 = this.baseElement || this.layerElement;
        elem2.style["mix-blend-mode"] = blendModeValue;
      },
      initBaseData: function initBaseData(data2, globalData2, comp2) {
        this.globalData = globalData2;
        this.comp = comp2;
        this.data = data2;
        this.layerId = createElementID();
        if (!this.data.sr) {
          this.data.sr = 1;
        }
        this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
      },
      getType: function getType() {
        return this.type;
      },
      sourceRectAtTime: function sourceRectAtTime2() {
      }
    };
    function FrameElement() {
    }
    FrameElement.prototype = {
      /**
         * @function
         * Initializes frame related properties.
         *
         */
      initFrame: function initFrame2() {
        this._isFirstFrame = false;
        this.dynamicProperties = [];
        this._mdf = false;
      },
      /**
         * @function
         * Calculates all dynamic values
         *
         * @param {number} num
         * current frame number in Layer's time
         * @param {boolean} isVisible
         * if layers is currently in range
         *
         */
      prepareProperties: function prepareProperties(num, isVisible) {
        var i2;
        var len = this.dynamicProperties.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (isVisible || this._isParent && this.dynamicProperties[i2].propType === "transform") {
            this.dynamicProperties[i2].getValue();
            if (this.dynamicProperties[i2]._mdf) {
              this.globalData._mdf = true;
              this._mdf = true;
            }
          }
        }
      },
      addDynamicProperty: function addDynamicProperty(prop) {
        if (this.dynamicProperties.indexOf(prop) === -1) {
          this.dynamicProperties.push(prop);
        }
      }
    };
    function FootageElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initRenderable();
      this.assetData = globalData2.getAssetData(data2.refId);
      this.footageData = globalData2.imageLoader.getAsset(this.assetData);
      this.initBaseData(data2, globalData2, comp2);
    }
    FootageElement.prototype.prepareFrame = function() {
    };
    extendPrototype([RenderableElement, BaseElement, FrameElement], FootageElement);
    FootageElement.prototype.getBaseElement = function() {
      return null;
    };
    FootageElement.prototype.renderFrame = function() {
    };
    FootageElement.prototype.destroy = function() {
    };
    FootageElement.prototype.initExpressions = function() {
      var expressionsInterfaces2 = getExpressionInterfaces();
      if (!expressionsInterfaces2) {
        return;
      }
      var FootageInterface2 = expressionsInterfaces2("footage");
      this.layerInterface = FootageInterface2(this);
    };
    FootageElement.prototype.getFootageData = function() {
      return this.footageData;
    };
    function AudioElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initRenderable();
      this.assetData = globalData2.getAssetData(data2.refId);
      this.initBaseData(data2, globalData2, comp2);
      this._isPlaying = false;
      this._canPlay = false;
      var assetPath = this.globalData.getAssetsPath(this.assetData);
      this.audio = this.globalData.audioController.createAudio(assetPath);
      this._currentTime = 0;
      this.globalData.audioController.addAudio(this);
      this._volumeMultiplier = 1;
      this._volume = 1;
      this._previousVolume = null;
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
      this.lv = PropertyFactory.getProp(this, data2.au && data2.au.lv ? data2.au.lv : {
        k: [100]
      }, 1, 0.01, this);
    }
    AudioElement.prototype.prepareFrame = function(num) {
      this.prepareRenderableFrame(num, true);
      this.prepareProperties(num, true);
      if (!this.tm._placeholder) {
        var timeRemapped = this.tm.v;
        this._currentTime = timeRemapped;
      } else {
        this._currentTime = num / this.data.sr;
      }
      this._volume = this.lv.v[0];
      var totalVolume = this._volume * this._volumeMultiplier;
      if (this._previousVolume !== totalVolume) {
        this._previousVolume = totalVolume;
        this.audio.volume(totalVolume);
      }
    };
    extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);
    AudioElement.prototype.renderFrame = function() {
      if (this.isInRange && this._canPlay) {
        if (!this._isPlaying) {
          this.audio.play();
          this.audio.seek(this._currentTime / this.globalData.frameRate);
          this._isPlaying = true;
        } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {
          this.audio.seek(this._currentTime / this.globalData.frameRate);
        }
      }
    };
    AudioElement.prototype.show = function() {
    };
    AudioElement.prototype.hide = function() {
      this.audio.pause();
      this._isPlaying = false;
    };
    AudioElement.prototype.pause = function() {
      this.audio.pause();
      this._isPlaying = false;
      this._canPlay = false;
    };
    AudioElement.prototype.resume = function() {
      this._canPlay = true;
    };
    AudioElement.prototype.setRate = function(rateValue) {
      this.audio.rate(rateValue);
    };
    AudioElement.prototype.volume = function(volumeValue) {
      this._volumeMultiplier = volumeValue;
      this._previousVolume = volumeValue * this._volume;
      this.audio.volume(this._previousVolume);
    };
    AudioElement.prototype.getBaseElement = function() {
      return null;
    };
    AudioElement.prototype.destroy = function() {
    };
    AudioElement.prototype.sourceRectAtTime = function() {
    };
    AudioElement.prototype.initExpressions = function() {
    };
    function BaseRenderer() {
    }
    BaseRenderer.prototype.checkLayers = function(num) {
      var i2;
      var len = this.layers.length;
      var data2;
      this.completeLayers = true;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (!this.elements[i2]) {
          data2 = this.layers[i2];
          if (data2.ip - data2.st <= num - this.layers[i2].st && data2.op - data2.st > num - this.layers[i2].st) {
            this.buildItem(i2);
          }
        }
        this.completeLayers = this.elements[i2] ? this.completeLayers : false;
      }
      this.checkPendingElements();
    };
    BaseRenderer.prototype.createItem = function(layer) {
      switch (layer.ty) {
        case 2:
          return this.createImage(layer);
        case 0:
          return this.createComp(layer);
        case 1:
          return this.createSolid(layer);
        case 3:
          return this.createNull(layer);
        case 4:
          return this.createShape(layer);
        case 5:
          return this.createText(layer);
        case 6:
          return this.createAudio(layer);
        case 13:
          return this.createCamera(layer);
        case 15:
          return this.createFootage(layer);
        default:
          return this.createNull(layer);
      }
    };
    BaseRenderer.prototype.createCamera = function() {
      throw new Error("You're using a 3d camera. Try the html renderer.");
    };
    BaseRenderer.prototype.createAudio = function(data2) {
      return new AudioElement(data2, this.globalData, this);
    };
    BaseRenderer.prototype.createFootage = function(data2) {
      return new FootageElement(data2, this.globalData, this);
    };
    BaseRenderer.prototype.buildAllItems = function() {
      var i2;
      var len = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.buildItem(i2);
      }
      this.checkPendingElements();
    };
    BaseRenderer.prototype.includeLayers = function(newLayers) {
      this.completeLayers = false;
      var i2;
      var len = newLayers.length;
      var j;
      var jLen = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        j = 0;
        while (j < jLen) {
          if (this.layers[j].id === newLayers[i2].id) {
            this.layers[j] = newLayers[i2];
            break;
          }
          j += 1;
        }
      }
    };
    BaseRenderer.prototype.setProjectInterface = function(pInterface) {
      this.globalData.projectInterface = pInterface;
    };
    BaseRenderer.prototype.initItems = function() {
      if (!this.globalData.progressiveLoad) {
        this.buildAllItems();
      }
    };
    BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
      var elements = this.elements;
      var layers2 = this.layers;
      var i2 = 0;
      var len = layers2.length;
      while (i2 < len) {
        if (layers2[i2].ind == parentName) {
          if (!elements[i2] || elements[i2] === true) {
            this.buildItem(i2);
            this.addPendingElement(element);
          } else {
            hierarchy.push(elements[i2]);
            elements[i2].setAsParent();
            if (layers2[i2].parent !== void 0) {
              this.buildElementParenting(element, layers2[i2].parent, hierarchy);
            } else {
              element.setHierarchy(hierarchy);
            }
          }
        }
        i2 += 1;
      }
    };
    BaseRenderer.prototype.addPendingElement = function(element) {
      this.pendingElements.push(element);
    };
    BaseRenderer.prototype.searchExtraCompositions = function(assets2) {
      var i2;
      var len = assets2.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (assets2[i2].xt) {
          var comp2 = this.createComp(assets2[i2]);
          comp2.initExpressions();
          this.globalData.projectInterface.registerComposition(comp2);
        }
      }
    };
    BaseRenderer.prototype.getElementById = function(ind) {
      var i2;
      var len = this.elements.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.elements[i2].data.ind === ind) {
          return this.elements[i2];
        }
      }
      return null;
    };
    BaseRenderer.prototype.getElementByPath = function(path) {
      var pathValue = path.shift();
      var element;
      if (typeof pathValue === "number") {
        element = this.elements[pathValue];
      } else {
        var i2;
        var len = this.elements.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (this.elements[i2].data.nm === pathValue) {
            element = this.elements[i2];
            break;
          }
        }
      }
      if (path.length === 0) {
        return element;
      }
      return element.getElementByPath(path);
    };
    BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {
      this.globalData.fontManager = new FontManager();
      this.globalData.slotManager = slotFactory(animData);
      this.globalData.fontManager.addChars(animData.chars);
      this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
      this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
      this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
      this.globalData.imageLoader = this.animationItem.imagePreloader;
      this.globalData.audioController = this.animationItem.audioController;
      this.globalData.frameId = 0;
      this.globalData.frameRate = animData.fr;
      this.globalData.nm = animData.nm;
      this.globalData.compSize = {
        w: animData.w,
        h: animData.h
      };
    };
    var effectTypes = {
      TRANSFORM_EFFECT: "transformEFfect"
    };
    function TransformElement() {
    }
    TransformElement.prototype = {
      initTransform: function initTransform() {
        var mat = new Matrix();
        this.finalTransform = {
          mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
            o: 0
          },
          _matMdf: false,
          _localMatMdf: false,
          _opMdf: false,
          mat,
          localMat: mat,
          localOpacity: 1
        };
        if (this.data.ao) {
          this.finalTransform.mProp.autoOriented = true;
        }
        if (this.data.ty !== 11)
          ;
      },
      renderTransform: function renderTransform() {
        this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
        this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;
        if (this.hierarchy) {
          var mat;
          var finalMat = this.finalTransform.mat;
          var i2 = 0;
          var len = this.hierarchy.length;
          if (!this.finalTransform._matMdf) {
            while (i2 < len) {
              if (this.hierarchy[i2].finalTransform.mProp._mdf) {
                this.finalTransform._matMdf = true;
                break;
              }
              i2 += 1;
            }
          }
          if (this.finalTransform._matMdf) {
            mat = this.finalTransform.mProp.v.props;
            finalMat.cloneFromProps(mat);
            for (i2 = 0; i2 < len; i2 += 1) {
              finalMat.multiply(this.hierarchy[i2].finalTransform.mProp.v);
            }
          }
        }
        if (this.finalTransform._matMdf) {
          this.finalTransform._localMatMdf = this.finalTransform._matMdf;
        }
        if (this.finalTransform._opMdf) {
          this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
        }
      },
      renderLocalTransform: function renderLocalTransform() {
        if (this.localTransforms) {
          var i2 = 0;
          var len = this.localTransforms.length;
          this.finalTransform._localMatMdf = this.finalTransform._matMdf;
          if (!this.finalTransform._localMatMdf || !this.finalTransform._opMdf) {
            while (i2 < len) {
              if (this.localTransforms[i2]._mdf) {
                this.finalTransform._localMatMdf = true;
              }
              if (this.localTransforms[i2]._opMdf && !this.finalTransform._opMdf) {
                this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
                this.finalTransform._opMdf = true;
              }
              i2 += 1;
            }
          }
          if (this.finalTransform._localMatMdf) {
            var localMat = this.finalTransform.localMat;
            this.localTransforms[0].matrix.clone(localMat);
            for (i2 = 1; i2 < len; i2 += 1) {
              var lmat = this.localTransforms[i2].matrix;
              localMat.multiply(lmat);
            }
            localMat.multiply(this.finalTransform.mat);
          }
          if (this.finalTransform._opMdf) {
            var localOp = this.finalTransform.localOpacity;
            for (i2 = 0; i2 < len; i2 += 1) {
              localOp *= this.localTransforms[i2].opacity * 0.01;
            }
            this.finalTransform.localOpacity = localOp;
          }
        }
      },
      searchEffectTransforms: function searchEffectTransforms() {
        if (this.renderableEffectsManager) {
          var transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
          if (transformEffects.length) {
            this.localTransforms = [];
            this.finalTransform.localMat = new Matrix();
            var i2 = 0;
            var len = transformEffects.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              this.localTransforms.push(transformEffects[i2]);
            }
          }
        }
      },
      globalToLocal: function globalToLocal(pt) {
        var transforms = [];
        transforms.push(this.finalTransform);
        var flag = true;
        var comp2 = this.comp;
        while (flag) {
          if (comp2.finalTransform) {
            if (comp2.data.hasMask) {
              transforms.splice(0, 0, comp2.finalTransform);
            }
            comp2 = comp2.comp;
          } else {
            flag = false;
          }
        }
        var i2;
        var len = transforms.length;
        var ptNew;
        for (i2 = 0; i2 < len; i2 += 1) {
          ptNew = transforms[i2].mat.applyToPointArray(0, 0, 0);
          pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
        }
        return pt;
      },
      mHelper: new Matrix()
    };
    function MaskElement(data2, element, globalData2) {
      this.data = data2;
      this.element = element;
      this.globalData = globalData2;
      this.storedData = [];
      this.masksProperties = this.data.masksProperties || [];
      this.maskElement = null;
      var defs = this.globalData.defs;
      var i2;
      var len = this.masksProperties ? this.masksProperties.length : 0;
      this.viewData = createSizedArray(len);
      this.solidPath = "";
      var path;
      var properties = this.masksProperties;
      var count = 0;
      var currentMasks = [];
      var j;
      var jLen;
      var layerId = createElementID();
      var rect;
      var expansor;
      var feMorph;
      var x3;
      var maskType = "clipPath";
      var maskRef = "clip-path";
      for (i2 = 0; i2 < len; i2 += 1) {
        if (properties[i2].mode !== "a" && properties[i2].mode !== "n" || properties[i2].inv || properties[i2].o.k !== 100 || properties[i2].o.x) {
          maskType = "mask";
          maskRef = "mask";
        }
        if ((properties[i2].mode === "s" || properties[i2].mode === "i") && count === 0) {
          rect = createNS("rect");
          rect.setAttribute("fill", "#ffffff");
          rect.setAttribute("width", this.element.comp.data.w || 0);
          rect.setAttribute("height", this.element.comp.data.h || 0);
          currentMasks.push(rect);
        } else {
          rect = null;
        }
        path = createNS("path");
        if (properties[i2].mode === "n") {
          this.viewData[i2] = {
            op: PropertyFactory.getProp(this.element, properties[i2].o, 0, 0.01, this.element),
            prop: ShapePropertyFactory.getShapeProp(this.element, properties[i2], 3),
            elem: path,
            lastPath: ""
          };
          defs.appendChild(path);
        } else {
          count += 1;
          path.setAttribute("fill", properties[i2].mode === "s" ? "#000000" : "#ffffff");
          path.setAttribute("clip-rule", "nonzero");
          var filterID;
          if (properties[i2].x.k !== 0) {
            maskType = "mask";
            maskRef = "mask";
            x3 = PropertyFactory.getProp(this.element, properties[i2].x, 0, null, this.element);
            filterID = createElementID();
            expansor = createNS("filter");
            expansor.setAttribute("id", filterID);
            feMorph = createNS("feMorphology");
            feMorph.setAttribute("operator", "erode");
            feMorph.setAttribute("in", "SourceGraphic");
            feMorph.setAttribute("radius", "0");
            expansor.appendChild(feMorph);
            defs.appendChild(expansor);
            path.setAttribute("stroke", properties[i2].mode === "s" ? "#000000" : "#ffffff");
          } else {
            feMorph = null;
            x3 = null;
          }
          this.storedData[i2] = {
            elem: path,
            x: x3,
            expan: feMorph,
            lastPath: "",
            lastOperator: "",
            filterId: filterID,
            lastRadius: 0
          };
          if (properties[i2].mode === "i") {
            jLen = currentMasks.length;
            var g2 = createNS("g");
            for (j = 0; j < jLen; j += 1) {
              g2.appendChild(currentMasks[j]);
            }
            var mask2 = createNS("mask");
            mask2.setAttribute("mask-type", "alpha");
            mask2.setAttribute("id", layerId + "_" + count);
            mask2.appendChild(path);
            defs.appendChild(mask2);
            g2.setAttribute("mask", "url(" + getLocationHref() + "#" + layerId + "_" + count + ")");
            currentMasks.length = 0;
            currentMasks.push(g2);
          } else {
            currentMasks.push(path);
          }
          if (properties[i2].inv && !this.solidPath) {
            this.solidPath = this.createLayerSolidPath();
          }
          this.viewData[i2] = {
            elem: path,
            lastPath: "",
            op: PropertyFactory.getProp(this.element, properties[i2].o, 0, 0.01, this.element),
            prop: ShapePropertyFactory.getShapeProp(this.element, properties[i2], 3),
            invRect: rect
          };
          if (!this.viewData[i2].prop.k) {
            this.drawPath(properties[i2], this.viewData[i2].prop.v, this.viewData[i2]);
          }
        }
      }
      this.maskElement = createNS(maskType);
      len = currentMasks.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.maskElement.appendChild(currentMasks[i2]);
      }
      if (count > 0) {
        this.maskElement.setAttribute("id", layerId);
        this.element.maskedElement.setAttribute(maskRef, "url(" + getLocationHref() + "#" + layerId + ")");
        defs.appendChild(this.maskElement);
      }
      if (this.viewData.length) {
        this.element.addRenderableComponent(this);
      }
    }
    MaskElement.prototype.getMaskProperty = function(pos) {
      return this.viewData[pos].prop;
    };
    MaskElement.prototype.renderFrame = function(isFirstFrame) {
      var finalMat = this.element.finalTransform.mat;
      var i2;
      var len = this.masksProperties.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.viewData[i2].prop._mdf || isFirstFrame) {
          this.drawPath(this.masksProperties[i2], this.viewData[i2].prop.v, this.viewData[i2]);
        }
        if (this.viewData[i2].op._mdf || isFirstFrame) {
          this.viewData[i2].elem.setAttribute("fill-opacity", this.viewData[i2].op.v);
        }
        if (this.masksProperties[i2].mode !== "n") {
          if (this.viewData[i2].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
            this.viewData[i2].invRect.setAttribute("transform", finalMat.getInverseMatrix().to2dCSS());
          }
          if (this.storedData[i2].x && (this.storedData[i2].x._mdf || isFirstFrame)) {
            var feMorph = this.storedData[i2].expan;
            if (this.storedData[i2].x.v < 0) {
              if (this.storedData[i2].lastOperator !== "erode") {
                this.storedData[i2].lastOperator = "erode";
                this.storedData[i2].elem.setAttribute("filter", "url(" + getLocationHref() + "#" + this.storedData[i2].filterId + ")");
              }
              feMorph.setAttribute("radius", -this.storedData[i2].x.v);
            } else {
              if (this.storedData[i2].lastOperator !== "dilate") {
                this.storedData[i2].lastOperator = "dilate";
                this.storedData[i2].elem.setAttribute("filter", null);
              }
              this.storedData[i2].elem.setAttribute("stroke-width", this.storedData[i2].x.v * 2);
            }
          }
        }
      }
    };
    MaskElement.prototype.getMaskelement = function() {
      return this.maskElement;
    };
    MaskElement.prototype.createLayerSolidPath = function() {
      var path = "M0,0 ";
      path += " h" + this.globalData.compSize.w;
      path += " v" + this.globalData.compSize.h;
      path += " h-" + this.globalData.compSize.w;
      path += " v-" + this.globalData.compSize.h + " ";
      return path;
    };
    MaskElement.prototype.drawPath = function(pathData, pathNodes, viewData) {
      var pathString = " M" + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
      var i2;
      var len;
      len = pathNodes._length;
      for (i2 = 1; i2 < len; i2 += 1) {
        pathString += " C" + pathNodes.o[i2 - 1][0] + "," + pathNodes.o[i2 - 1][1] + " " + pathNodes.i[i2][0] + "," + pathNodes.i[i2][1] + " " + pathNodes.v[i2][0] + "," + pathNodes.v[i2][1];
      }
      if (pathNodes.c && len > 1) {
        pathString += " C" + pathNodes.o[i2 - 1][0] + "," + pathNodes.o[i2 - 1][1] + " " + pathNodes.i[0][0] + "," + pathNodes.i[0][1] + " " + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
      }
      if (viewData.lastPath !== pathString) {
        var pathShapeValue = "";
        if (viewData.elem) {
          if (pathNodes.c) {
            pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
          }
          viewData.elem.setAttribute("d", pathShapeValue);
        }
        viewData.lastPath = pathString;
      }
    };
    MaskElement.prototype.destroy = function() {
      this.element = null;
      this.globalData = null;
      this.maskElement = null;
      this.data = null;
      this.masksProperties = null;
    };
    var filtersFactory = function() {
      var ob2 = {};
      ob2.createFilter = createFilter;
      ob2.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;
      function createFilter(filId, skipCoordinates) {
        var fil = createNS("filter");
        fil.setAttribute("id", filId);
        if (skipCoordinates !== true) {
          fil.setAttribute("filterUnits", "objectBoundingBox");
          fil.setAttribute("x", "0%");
          fil.setAttribute("y", "0%");
          fil.setAttribute("width", "100%");
          fil.setAttribute("height", "100%");
        }
        return fil;
      }
      function createAlphaToLuminanceFilter() {
        var feColorMatrix = createNS("feColorMatrix");
        feColorMatrix.setAttribute("type", "matrix");
        feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
        feColorMatrix.setAttribute("values", "0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1");
        return feColorMatrix;
      }
      return ob2;
    }();
    var featureSupport = function() {
      var ob2 = {
        maskType: true,
        svgLumaHidden: true,
        offscreenCanvas: typeof OffscreenCanvas !== "undefined"
      };
      if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
        ob2.maskType = false;
      }
      if (/firefox/i.test(navigator.userAgent)) {
        ob2.svgLumaHidden = false;
      }
      return ob2;
    }();
    var registeredEffects$1 = {};
    var idPrefix = "filter_result_";
    function SVGEffects(elem2) {
      var i2;
      var source = "SourceGraphic";
      var len = elem2.data.ef ? elem2.data.ef.length : 0;
      var filId = createElementID();
      var fil = filtersFactory.createFilter(filId, true);
      var count = 0;
      this.filters = [];
      var filterManager;
      for (i2 = 0; i2 < len; i2 += 1) {
        filterManager = null;
        var type = elem2.data.ef[i2].ty;
        if (registeredEffects$1[type]) {
          var Effect = registeredEffects$1[type].effect;
          filterManager = new Effect(fil, elem2.effectsManager.effectElements[i2], elem2, idPrefix + count, source);
          source = idPrefix + count;
          if (registeredEffects$1[type].countsAsEffect) {
            count += 1;
          }
        }
        if (filterManager) {
          this.filters.push(filterManager);
        }
      }
      if (count) {
        elem2.globalData.defs.appendChild(fil);
        elem2.layerElement.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
      }
      if (this.filters.length) {
        elem2.addRenderableComponent(this);
      }
    }
    SVGEffects.prototype.renderFrame = function(_isFirstFrame) {
      var i2;
      var len = this.filters.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.filters[i2].renderFrame(_isFirstFrame);
      }
    };
    SVGEffects.prototype.getEffects = function(type) {
      var i2;
      var len = this.filters.length;
      var effects = [];
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.filters[i2].type === type) {
          effects.push(this.filters[i2]);
        }
      }
      return effects;
    };
    function registerEffect$1(id2, effect2, countsAsEffect) {
      registeredEffects$1[id2] = {
        effect: effect2,
        countsAsEffect
      };
    }
    function SVGBaseElement() {
    }
    SVGBaseElement.prototype = {
      initRendererElement: function initRendererElement() {
        this.layerElement = createNS("g");
      },
      createContainerElements: function createContainerElements() {
        this.matteElement = createNS("g");
        this.transformedElement = this.layerElement;
        this.maskedElement = this.layerElement;
        this._sizeChanged = false;
        var layerElementParent = null;
        if (this.data.td) {
          this.matteMasks = {};
          var gg2 = createNS("g");
          gg2.setAttribute("id", this.layerId);
          gg2.appendChild(this.layerElement);
          layerElementParent = gg2;
          this.globalData.defs.appendChild(gg2);
        } else if (this.data.tt) {
          this.matteElement.appendChild(this.layerElement);
          layerElementParent = this.matteElement;
          this.baseElement = this.matteElement;
        } else {
          this.baseElement = this.layerElement;
        }
        if (this.data.ln) {
          this.layerElement.setAttribute("id", this.data.ln);
        }
        if (this.data.cl) {
          this.layerElement.setAttribute("class", this.data.cl);
        }
        if (this.data.ty === 0 && !this.data.hd) {
          var cp = createNS("clipPath");
          var pt = createNS("path");
          pt.setAttribute("d", "M0,0 L" + this.data.w + ",0 L" + this.data.w + "," + this.data.h + " L0," + this.data.h + "z");
          var clipId = createElementID();
          cp.setAttribute("id", clipId);
          cp.appendChild(pt);
          this.globalData.defs.appendChild(cp);
          if (this.checkMasks()) {
            var cpGroup = createNS("g");
            cpGroup.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
            cpGroup.appendChild(this.layerElement);
            this.transformedElement = cpGroup;
            if (layerElementParent) {
              layerElementParent.appendChild(this.transformedElement);
            } else {
              this.baseElement = this.transformedElement;
            }
          } else {
            this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
          }
        }
        if (this.data.bm !== 0) {
          this.setBlendMode();
        }
      },
      renderElement: function renderElement() {
        if (this.finalTransform._localMatMdf) {
          this.transformedElement.setAttribute("transform", this.finalTransform.localMat.to2dCSS());
        }
        if (this.finalTransform._opMdf) {
          this.transformedElement.setAttribute("opacity", this.finalTransform.localOpacity);
        }
      },
      destroyBaseElement: function destroyBaseElement() {
        this.layerElement = null;
        this.matteElement = null;
        this.maskManager.destroy();
      },
      getBaseElement: function getBaseElement() {
        if (this.data.hd) {
          return null;
        }
        return this.baseElement;
      },
      createRenderableComponents: function createRenderableComponents() {
        this.maskManager = new MaskElement(this.data, this, this.globalData);
        this.renderableEffectsManager = new SVGEffects(this);
        this.searchEffectTransforms();
      },
      getMatte: function getMatte(matteType) {
        if (!this.matteMasks) {
          this.matteMasks = {};
        }
        if (!this.matteMasks[matteType]) {
          var id2 = this.layerId + "_" + matteType;
          var filId;
          var fil;
          var useElement;
          var gg2;
          if (matteType === 1 || matteType === 3) {
            var masker = createNS("mask");
            masker.setAttribute("id", id2);
            masker.setAttribute("mask-type", matteType === 3 ? "luminance" : "alpha");
            useElement = createNS("use");
            useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
            masker.appendChild(useElement);
            this.globalData.defs.appendChild(masker);
            if (!featureSupport.maskType && matteType === 1) {
              masker.setAttribute("mask-type", "luminance");
              filId = createElementID();
              fil = filtersFactory.createFilter(filId);
              this.globalData.defs.appendChild(fil);
              fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
              gg2 = createNS("g");
              gg2.appendChild(useElement);
              masker.appendChild(gg2);
              gg2.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
            }
          } else if (matteType === 2) {
            var maskGroup = createNS("mask");
            maskGroup.setAttribute("id", id2);
            maskGroup.setAttribute("mask-type", "alpha");
            var maskGrouper = createNS("g");
            maskGroup.appendChild(maskGrouper);
            filId = createElementID();
            fil = filtersFactory.createFilter(filId);
            var feCTr = createNS("feComponentTransfer");
            feCTr.setAttribute("in", "SourceGraphic");
            fil.appendChild(feCTr);
            var feFunc = createNS("feFuncA");
            feFunc.setAttribute("type", "table");
            feFunc.setAttribute("tableValues", "1.0 0.0");
            feCTr.appendChild(feFunc);
            this.globalData.defs.appendChild(fil);
            var alphaRect = createNS("rect");
            alphaRect.setAttribute("width", this.comp.data.w);
            alphaRect.setAttribute("height", this.comp.data.h);
            alphaRect.setAttribute("x", "0");
            alphaRect.setAttribute("y", "0");
            alphaRect.setAttribute("fill", "#ffffff");
            alphaRect.setAttribute("opacity", "0");
            maskGrouper.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
            maskGrouper.appendChild(alphaRect);
            useElement = createNS("use");
            useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
            maskGrouper.appendChild(useElement);
            if (!featureSupport.maskType) {
              maskGroup.setAttribute("mask-type", "luminance");
              fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
              gg2 = createNS("g");
              maskGrouper.appendChild(alphaRect);
              gg2.appendChild(this.layerElement);
              maskGrouper.appendChild(gg2);
            }
            this.globalData.defs.appendChild(maskGroup);
          }
          this.matteMasks[matteType] = id2;
        }
        return this.matteMasks[matteType];
      },
      setMatte: function setMatte(id2) {
        if (!this.matteElement) {
          return;
        }
        this.matteElement.setAttribute("mask", "url(" + getLocationHref() + "#" + id2 + ")");
      }
    };
    function HierarchyElement() {
    }
    HierarchyElement.prototype = {
      /**
         * @function
         * Initializes hierarchy properties
         *
         */
      initHierarchy: function initHierarchy() {
        this.hierarchy = [];
        this._isParent = false;
        this.checkParenting();
      },
      /**
         * @function
         * Sets layer's hierarchy.
         * @param {array} hierarch
         * layer's parent list
         *
         */
      setHierarchy: function setHierarchy(hierarchy) {
        this.hierarchy = hierarchy;
      },
      /**
         * @function
         * Sets layer as parent.
         *
         */
      setAsParent: function setAsParent() {
        this._isParent = true;
      },
      /**
         * @function
         * Searches layer's parenting chain
         *
         */
      checkParenting: function checkParenting() {
        if (this.data.parent !== void 0) {
          this.comp.buildElementParenting(this, this.data.parent, []);
        }
      }
    };
    function RenderableDOMElement() {
    }
    (function() {
      var _prototype = {
        initElement: function initElement(data2, globalData2, comp2) {
          this.initFrame();
          this.initBaseData(data2, globalData2, comp2);
          this.initTransform(data2, globalData2, comp2);
          this.initHierarchy();
          this.initRenderable();
          this.initRendererElement();
          this.createContainerElements();
          this.createRenderableComponents();
          this.createContent();
          this.hide();
        },
        hide: function hide() {
          if (!this.hidden && (!this.isInRange || this.isTransparent)) {
            var elem2 = this.baseElement || this.layerElement;
            elem2.style.display = "none";
            this.hidden = true;
          }
        },
        show: function show() {
          if (this.isInRange && !this.isTransparent) {
            if (!this.data.hd) {
              var elem2 = this.baseElement || this.layerElement;
              elem2.style.display = "block";
            }
            this.hidden = false;
            this._isFirstFrame = true;
          }
        },
        renderFrame: function renderFrame() {
          if (this.data.hd || this.hidden) {
            return;
          }
          this.renderTransform();
          this.renderRenderable();
          this.renderLocalTransform();
          this.renderElement();
          this.renderInnerContent();
          if (this._isFirstFrame) {
            this._isFirstFrame = false;
          }
        },
        renderInnerContent: function renderInnerContent() {
        },
        prepareFrame: function prepareFrame(num) {
          this._mdf = false;
          this.prepareRenderableFrame(num);
          this.prepareProperties(num, this.isInRange);
          this.checkTransparency();
        },
        destroy: function destroy() {
          this.innerElem = null;
          this.destroyBaseElement();
        }
      };
      extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
    })();
    function IImageElement(data2, globalData2, comp2) {
      this.assetData = globalData2.getAssetData(data2.refId);
      if (this.assetData && this.assetData.sid) {
        this.assetData = globalData2.slotManager.getProp(this.assetData);
      }
      this.initElement(data2, globalData2, comp2);
      this.sourceRect = {
        top: 0,
        left: 0,
        width: this.assetData.w,
        height: this.assetData.h
      };
    }
    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);
    IImageElement.prototype.createContent = function() {
      var assetPath = this.globalData.getAssetsPath(this.assetData);
      this.innerElem = createNS("image");
      this.innerElem.setAttribute("width", this.assetData.w + "px");
      this.innerElem.setAttribute("height", this.assetData.h + "px");
      this.innerElem.setAttribute("preserveAspectRatio", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
      this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
      this.layerElement.appendChild(this.innerElem);
    };
    IImageElement.prototype.sourceRectAtTime = function() {
      return this.sourceRect;
    };
    function ProcessedElement(element, position2) {
      this.elem = element;
      this.pos = position2;
    }
    function IShapeElement() {
    }
    IShapeElement.prototype = {
      addShapeToModifiers: function addShapeToModifiers(data2) {
        var i2;
        var len = this.shapeModifiers.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.shapeModifiers[i2].addShape(data2);
        }
      },
      isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data2) {
        var i2 = 0;
        var len = this.shapeModifiers.length;
        while (i2 < len) {
          if (this.shapeModifiers[i2].isAnimatedWithShape(data2)) {
            return true;
          }
        }
        return false;
      },
      renderModifiers: function renderModifiers() {
        if (!this.shapeModifiers.length) {
          return;
        }
        var i2;
        var len = this.shapes.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.shapes[i2].sh.reset();
        }
        len = this.shapeModifiers.length;
        var shouldBreakProcess;
        for (i2 = len - 1; i2 >= 0; i2 -= 1) {
          shouldBreakProcess = this.shapeModifiers[i2].processShapes(this._isFirstFrame);
          if (shouldBreakProcess) {
            break;
          }
        }
      },
      searchProcessedElement: function searchProcessedElement(elem2) {
        var elements = this.processedElements;
        var i2 = 0;
        var len = elements.length;
        while (i2 < len) {
          if (elements[i2].elem === elem2) {
            return elements[i2].pos;
          }
          i2 += 1;
        }
        return 0;
      },
      addProcessedElement: function addProcessedElement(elem2, pos) {
        var elements = this.processedElements;
        var i2 = elements.length;
        while (i2) {
          i2 -= 1;
          if (elements[i2].elem === elem2) {
            elements[i2].pos = pos;
            return;
          }
        }
        elements.push(new ProcessedElement(elem2, pos));
      },
      prepareFrame: function prepareFrame(num) {
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
      }
    };
    var lineCapEnum = {
      1: "butt",
      2: "round",
      3: "square"
    };
    var lineJoinEnum = {
      1: "miter",
      2: "round",
      3: "bevel"
    };
    function SVGShapeData(transformers, level, shape) {
      this.caches = [];
      this.styles = [];
      this.transformers = transformers;
      this.lStr = "";
      this.sh = shape;
      this.lvl = level;
      this._isAnimated = !!shape.k;
      var i2 = 0;
      var len = transformers.length;
      while (i2 < len) {
        if (transformers[i2].mProps.dynamicProperties.length) {
          this._isAnimated = true;
          break;
        }
        i2 += 1;
      }
    }
    SVGShapeData.prototype.setAsAnimated = function() {
      this._isAnimated = true;
    };
    function SVGStyleData(data2, level) {
      this.data = data2;
      this.type = data2.ty;
      this.d = "";
      this.lvl = level;
      this._mdf = false;
      this.closed = data2.hd === true;
      this.pElem = createNS("path");
      this.msElem = null;
    }
    SVGStyleData.prototype.reset = function() {
      this.d = "";
      this._mdf = false;
    };
    function DashProperty(elem2, data2, renderer, container) {
      this.elem = elem2;
      this.frameId = -1;
      this.dataProps = createSizedArray(data2.length);
      this.renderer = renderer;
      this.k = false;
      this.dashStr = "";
      this.dashArray = createTypedArray("float32", data2.length ? data2.length - 1 : 0);
      this.dashoffset = createTypedArray("float32", 1);
      this.initDynamicPropertyContainer(container);
      var i2;
      var len = data2.length || 0;
      var prop;
      for (i2 = 0; i2 < len; i2 += 1) {
        prop = PropertyFactory.getProp(elem2, data2[i2].v, 0, 0, this);
        this.k = prop.k || this.k;
        this.dataProps[i2] = {
          n: data2[i2].n,
          p: prop
        };
      }
      if (!this.k) {
        this.getValue(true);
      }
      this._isAnimated = this.k;
    }
    DashProperty.prototype.getValue = function(forceRender) {
      if (this.elem.globalData.frameId === this.frameId && !forceRender) {
        return;
      }
      this.frameId = this.elem.globalData.frameId;
      this.iterateDynamicProperties();
      this._mdf = this._mdf || forceRender;
      if (this._mdf) {
        var i2 = 0;
        var len = this.dataProps.length;
        if (this.renderer === "svg") {
          this.dashStr = "";
        }
        for (i2 = 0; i2 < len; i2 += 1) {
          if (this.dataProps[i2].n !== "o") {
            if (this.renderer === "svg") {
              this.dashStr += " " + this.dataProps[i2].p.v;
            } else {
              this.dashArray[i2] = this.dataProps[i2].p.v;
            }
          } else {
            this.dashoffset[0] = this.dataProps[i2].p.v;
          }
        }
      }
    };
    extendPrototype([DynamicPropertyContainer], DashProperty);
    function SVGStrokeStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
      this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
      this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
      this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
      this.style = styleOb;
      this._isAnimated = !!this._isAnimated;
    }
    extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
    function SVGFillStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
      this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
      this.style = styleOb;
    }
    extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
    function SVGNoStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.style = styleOb;
    }
    extendPrototype([DynamicPropertyContainer], SVGNoStyleData);
    function GradientProperty(elem2, data2, container) {
      this.data = data2;
      this.c = createTypedArray("uint8c", data2.p * 4);
      var cLength = data2.k.k[0].s ? data2.k.k[0].s.length - data2.p * 4 : data2.k.k.length - data2.p * 4;
      this.o = createTypedArray("float32", cLength);
      this._cmdf = false;
      this._omdf = false;
      this._collapsable = this.checkCollapsable();
      this._hasOpacity = cLength;
      this.initDynamicPropertyContainer(container);
      this.prop = PropertyFactory.getProp(elem2, data2.k, 1, null, this);
      this.k = this.prop.k;
      this.getValue(true);
    }
    GradientProperty.prototype.comparePoints = function(values, points) {
      var i2 = 0;
      var len = this.o.length / 2;
      var diff;
      while (i2 < len) {
        diff = Math.abs(values[i2 * 4] - values[points * 4 + i2 * 2]);
        if (diff > 0.01) {
          return false;
        }
        i2 += 1;
      }
      return true;
    };
    GradientProperty.prototype.checkCollapsable = function() {
      if (this.o.length / 2 !== this.c.length / 4) {
        return false;
      }
      if (this.data.k.k[0].s) {
        var i2 = 0;
        var len = this.data.k.k.length;
        while (i2 < len) {
          if (!this.comparePoints(this.data.k.k[i2].s, this.data.p)) {
            return false;
          }
          i2 += 1;
        }
      } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
        return false;
      }
      return true;
    };
    GradientProperty.prototype.getValue = function(forceRender) {
      this.prop.getValue();
      this._mdf = false;
      this._cmdf = false;
      this._omdf = false;
      if (this.prop._mdf || forceRender) {
        var i2;
        var len = this.data.p * 4;
        var mult;
        var val2;
        for (i2 = 0; i2 < len; i2 += 1) {
          mult = i2 % 4 === 0 ? 100 : 255;
          val2 = Math.round(this.prop.v[i2] * mult);
          if (this.c[i2] !== val2) {
            this.c[i2] = val2;
            this._cmdf = !forceRender;
          }
        }
        if (this.o.length) {
          len = this.prop.v.length;
          for (i2 = this.data.p * 4; i2 < len; i2 += 1) {
            mult = i2 % 2 === 0 ? 100 : 1;
            val2 = i2 % 2 === 0 ? Math.round(this.prop.v[i2] * 100) : this.prop.v[i2];
            if (this.o[i2 - this.data.p * 4] !== val2) {
              this.o[i2 - this.data.p * 4] = val2;
              this._omdf = !forceRender;
            }
          }
        }
        this._mdf = !forceRender;
      }
    };
    extendPrototype([DynamicPropertyContainer], GradientProperty);
    function SVGGradientFillStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.initGradientData(elem2, data2, styleOb);
    }
    SVGGradientFillStyleData.prototype.initGradientData = function(elem2, data2, styleOb) {
      this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
      this.s = PropertyFactory.getProp(elem2, data2.s, 1, null, this);
      this.e = PropertyFactory.getProp(elem2, data2.e, 1, null, this);
      this.h = PropertyFactory.getProp(elem2, data2.h || {
        k: 0
      }, 0, 0.01, this);
      this.a = PropertyFactory.getProp(elem2, data2.a || {
        k: 0
      }, 0, degToRads, this);
      this.g = new GradientProperty(elem2, data2.g, this);
      this.style = styleOb;
      this.stops = [];
      this.setGradientData(styleOb.pElem, data2);
      this.setGradientOpacity(data2, styleOb);
      this._isAnimated = !!this._isAnimated;
    };
    SVGGradientFillStyleData.prototype.setGradientData = function(pathElement, data2) {
      var gradientId = createElementID();
      var gfill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
      gfill.setAttribute("id", gradientId);
      gfill.setAttribute("spreadMethod", "pad");
      gfill.setAttribute("gradientUnits", "userSpaceOnUse");
      var stops = [];
      var stop2;
      var j;
      var jLen;
      jLen = data2.g.p * 4;
      for (j = 0; j < jLen; j += 4) {
        stop2 = createNS("stop");
        gfill.appendChild(stop2);
        stops.push(stop2);
      }
      pathElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + gradientId + ")");
      this.gf = gfill;
      this.cst = stops;
    };
    SVGGradientFillStyleData.prototype.setGradientOpacity = function(data2, styleOb) {
      if (this.g._hasOpacity && !this.g._collapsable) {
        var stop2;
        var j;
        var jLen;
        var mask2 = createNS("mask");
        var maskElement = createNS("path");
        mask2.appendChild(maskElement);
        var opacityId = createElementID();
        var maskId = createElementID();
        mask2.setAttribute("id", maskId);
        var opFill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
        opFill.setAttribute("id", opacityId);
        opFill.setAttribute("spreadMethod", "pad");
        opFill.setAttribute("gradientUnits", "userSpaceOnUse");
        jLen = data2.g.k.k[0].s ? data2.g.k.k[0].s.length : data2.g.k.k.length;
        var stops = this.stops;
        for (j = data2.g.p * 4; j < jLen; j += 2) {
          stop2 = createNS("stop");
          stop2.setAttribute("stop-color", "rgb(255,255,255)");
          opFill.appendChild(stop2);
          stops.push(stop2);
        }
        maskElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + opacityId + ")");
        if (data2.ty === "gs") {
          maskElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
          maskElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
          if (data2.lj === 1) {
            maskElement.setAttribute("stroke-miterlimit", data2.ml);
          }
        }
        this.of = opFill;
        this.ms = mask2;
        this.ost = stops;
        this.maskId = maskId;
        styleOb.msElem = maskElement;
      }
    };
    extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
    function SVGGradientStrokeStyleData(elem2, data2, styleOb) {
      this.initDynamicPropertyContainer(elem2);
      this.getValue = this.iterateDynamicProperties;
      this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
      this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
      this.initGradientData(elem2, data2, styleOb);
      this._isAnimated = !!this._isAnimated;
    }
    extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
    function ShapeGroupData() {
      this.it = [];
      this.prevViewData = [];
      this.gr = createNS("g");
    }
    function SVGTransformData(mProps, op2, container) {
      this.transform = {
        mProps,
        op: op2,
        container
      };
      this.elements = [];
      this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
    }
    var buildShapeString = function buildShapeString2(pathNodes, length2, closed, mat) {
      if (length2 === 0) {
        return "";
      }
      var _o = pathNodes.o;
      var _i = pathNodes.i;
      var _v = pathNodes.v;
      var i2;
      var shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
      for (i2 = 1; i2 < length2; i2 += 1) {
        shapeString += " C" + mat.applyToPointStringified(_o[i2 - 1][0], _o[i2 - 1][1]) + " " + mat.applyToPointStringified(_i[i2][0], _i[i2][1]) + " " + mat.applyToPointStringified(_v[i2][0], _v[i2][1]);
      }
      if (closed && length2) {
        shapeString += " C" + mat.applyToPointStringified(_o[i2 - 1][0], _o[i2 - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
        shapeString += "z";
      }
      return shapeString;
    };
    var SVGElementsRenderer = function() {
      var _identityMatrix = new Matrix();
      var _matrixHelper = new Matrix();
      var ob2 = {
        createRenderFunction
      };
      function createRenderFunction(data2) {
        switch (data2.ty) {
          case "fl":
            return renderFill;
          case "gf":
            return renderGradient;
          case "gs":
            return renderGradientStroke;
          case "st":
            return renderStroke;
          case "sh":
          case "el":
          case "rc":
          case "sr":
            return renderPath;
          case "tr":
            return renderContentTransform;
          case "no":
            return renderNoop;
          default:
            return null;
        }
      }
      function renderContentTransform(styleData, itemData, isFirstFrame) {
        if (isFirstFrame || itemData.transform.op._mdf) {
          itemData.transform.container.setAttribute("opacity", itemData.transform.op.v);
        }
        if (isFirstFrame || itemData.transform.mProps._mdf) {
          itemData.transform.container.setAttribute("transform", itemData.transform.mProps.v.to2dCSS());
        }
      }
      function renderNoop() {
      }
      function renderPath(styleData, itemData, isFirstFrame) {
        var j;
        var jLen;
        var pathStringTransformed;
        var redraw;
        var pathNodes;
        var l2;
        var lLen = itemData.styles.length;
        var lvl = itemData.lvl;
        var paths;
        var mat;
        var iterations;
        var k3;
        for (l2 = 0; l2 < lLen; l2 += 1) {
          redraw = itemData.sh._mdf || isFirstFrame;
          if (itemData.styles[l2].lvl < lvl) {
            mat = _matrixHelper.reset();
            iterations = lvl - itemData.styles[l2].lvl;
            k3 = itemData.transformers.length - 1;
            while (!redraw && iterations > 0) {
              redraw = itemData.transformers[k3].mProps._mdf || redraw;
              iterations -= 1;
              k3 -= 1;
            }
            if (redraw) {
              iterations = lvl - itemData.styles[l2].lvl;
              k3 = itemData.transformers.length - 1;
              while (iterations > 0) {
                mat.multiply(itemData.transformers[k3].mProps.v);
                iterations -= 1;
                k3 -= 1;
              }
            }
          } else {
            mat = _identityMatrix;
          }
          paths = itemData.sh.paths;
          jLen = paths._length;
          if (redraw) {
            pathStringTransformed = "";
            for (j = 0; j < jLen; j += 1) {
              pathNodes = paths.shapes[j];
              if (pathNodes && pathNodes._length) {
                pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
              }
            }
            itemData.caches[l2] = pathStringTransformed;
          } else {
            pathStringTransformed = itemData.caches[l2];
          }
          itemData.styles[l2].d += styleData.hd === true ? "" : pathStringTransformed;
          itemData.styles[l2]._mdf = redraw || itemData.styles[l2]._mdf;
        }
      }
      function renderFill(styleData, itemData, isFirstFrame) {
        var styleElem = itemData.style;
        if (itemData.c._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("fill", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
        }
        if (itemData.o._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("fill-opacity", itemData.o.v);
        }
      }
      function renderGradientStroke(styleData, itemData, isFirstFrame) {
        renderGradient(styleData, itemData, isFirstFrame);
        renderStroke(styleData, itemData, isFirstFrame);
      }
      function renderGradient(styleData, itemData, isFirstFrame) {
        var gfill = itemData.gf;
        var hasOpacity = itemData.g._hasOpacity;
        var pt1 = itemData.s.v;
        var pt2 = itemData.e.v;
        if (itemData.o._mdf || isFirstFrame) {
          var attr = styleData.ty === "gf" ? "fill-opacity" : "stroke-opacity";
          itemData.style.pElem.setAttribute(attr, itemData.o.v);
        }
        if (itemData.s._mdf || isFirstFrame) {
          var attr1 = styleData.t === 1 ? "x1" : "cx";
          var attr2 = attr1 === "x1" ? "y1" : "cy";
          gfill.setAttribute(attr1, pt1[0]);
          gfill.setAttribute(attr2, pt1[1]);
          if (hasOpacity && !itemData.g._collapsable) {
            itemData.of.setAttribute(attr1, pt1[0]);
            itemData.of.setAttribute(attr2, pt1[1]);
          }
        }
        var stops;
        var i2;
        var len;
        var stop2;
        if (itemData.g._cmdf || isFirstFrame) {
          stops = itemData.cst;
          var cValues = itemData.g.c;
          len = stops.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            stop2 = stops[i2];
            stop2.setAttribute("offset", cValues[i2 * 4] + "%");
            stop2.setAttribute("stop-color", "rgb(" + cValues[i2 * 4 + 1] + "," + cValues[i2 * 4 + 2] + "," + cValues[i2 * 4 + 3] + ")");
          }
        }
        if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
          var oValues = itemData.g.o;
          if (itemData.g._collapsable) {
            stops = itemData.cst;
          } else {
            stops = itemData.ost;
          }
          len = stops.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            stop2 = stops[i2];
            if (!itemData.g._collapsable) {
              stop2.setAttribute("offset", oValues[i2 * 2] + "%");
            }
            stop2.setAttribute("stop-opacity", oValues[i2 * 2 + 1]);
          }
        }
        if (styleData.t === 1) {
          if (itemData.e._mdf || isFirstFrame) {
            gfill.setAttribute("x2", pt2[0]);
            gfill.setAttribute("y2", pt2[1]);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute("x2", pt2[0]);
              itemData.of.setAttribute("y2", pt2[1]);
            }
          }
        } else {
          var rad;
          if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
            rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
            gfill.setAttribute("r", rad);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute("r", rad);
            }
          }
          if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
            if (!rad) {
              rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
            }
            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
            var percent = itemData.h.v;
            if (percent >= 1) {
              percent = 0.99;
            } else if (percent <= -1) {
              percent = -0.99;
            }
            var dist = rad * percent;
            var x3 = Math.cos(ang + itemData.a.v) * dist + pt1[0];
            var y4 = Math.sin(ang + itemData.a.v) * dist + pt1[1];
            gfill.setAttribute("fx", x3);
            gfill.setAttribute("fy", y4);
            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute("fx", x3);
              itemData.of.setAttribute("fy", y4);
            }
          }
        }
      }
      function renderStroke(styleData, itemData, isFirstFrame) {
        var styleElem = itemData.style;
        var d4 = itemData.d;
        if (d4 && (d4._mdf || isFirstFrame) && d4.dashStr) {
          styleElem.pElem.setAttribute("stroke-dasharray", d4.dashStr);
          styleElem.pElem.setAttribute("stroke-dashoffset", d4.dashoffset[0]);
        }
        if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
          styleElem.pElem.setAttribute("stroke", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
        }
        if (itemData.o._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("stroke-opacity", itemData.o.v);
        }
        if (itemData.w._mdf || isFirstFrame) {
          styleElem.pElem.setAttribute("stroke-width", itemData.w.v);
          if (styleElem.msElem) {
            styleElem.msElem.setAttribute("stroke-width", itemData.w.v);
          }
        }
      }
      return ob2;
    }();
    function SVGShapeElement(data2, globalData2, comp2) {
      this.shapes = [];
      this.shapesData = data2.shapes;
      this.stylesList = [];
      this.shapeModifiers = [];
      this.itemsData = [];
      this.processedElements = [];
      this.animatedContents = [];
      this.initElement(data2, globalData2, comp2);
      this.prevViewData = [];
    }
    extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);
    SVGShapeElement.prototype.initSecondaryElement = function() {
    };
    SVGShapeElement.prototype.identityMatrix = new Matrix();
    SVGShapeElement.prototype.buildExpressionInterface = function() {
    };
    SVGShapeElement.prototype.createContent = function() {
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
      this.filterUniqueShapes();
    };
    SVGShapeElement.prototype.filterUniqueShapes = function() {
      var i2;
      var len = this.shapes.length;
      var shape;
      var j;
      var jLen = this.stylesList.length;
      var style;
      var tempShapes = [];
      var areAnimated = false;
      for (j = 0; j < jLen; j += 1) {
        style = this.stylesList[j];
        areAnimated = false;
        tempShapes.length = 0;
        for (i2 = 0; i2 < len; i2 += 1) {
          shape = this.shapes[i2];
          if (shape.styles.indexOf(style) !== -1) {
            tempShapes.push(shape);
            areAnimated = shape._isAnimated || areAnimated;
          }
        }
        if (tempShapes.length > 1 && areAnimated) {
          this.setShapesAsAnimated(tempShapes);
        }
      }
    };
    SVGShapeElement.prototype.setShapesAsAnimated = function(shapes) {
      var i2;
      var len = shapes.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        shapes[i2].setAsAnimated();
      }
    };
    SVGShapeElement.prototype.createStyleElement = function(data2, level) {
      var elementData;
      var styleOb = new SVGStyleData(data2, level);
      var pathElement = styleOb.pElem;
      if (data2.ty === "st") {
        elementData = new SVGStrokeStyleData(this, data2, styleOb);
      } else if (data2.ty === "fl") {
        elementData = new SVGFillStyleData(this, data2, styleOb);
      } else if (data2.ty === "gf" || data2.ty === "gs") {
        var GradientConstructor = data2.ty === "gf" ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
        elementData = new GradientConstructor(this, data2, styleOb);
        this.globalData.defs.appendChild(elementData.gf);
        if (elementData.maskId) {
          this.globalData.defs.appendChild(elementData.ms);
          this.globalData.defs.appendChild(elementData.of);
          pathElement.setAttribute("mask", "url(" + getLocationHref() + "#" + elementData.maskId + ")");
        }
      } else if (data2.ty === "no") {
        elementData = new SVGNoStyleData(this, data2, styleOb);
      }
      if (data2.ty === "st" || data2.ty === "gs") {
        pathElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
        pathElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
        pathElement.setAttribute("fill-opacity", "0");
        if (data2.lj === 1) {
          pathElement.setAttribute("stroke-miterlimit", data2.ml);
        }
      }
      if (data2.r === 2) {
        pathElement.setAttribute("fill-rule", "evenodd");
      }
      if (data2.ln) {
        pathElement.setAttribute("id", data2.ln);
      }
      if (data2.cl) {
        pathElement.setAttribute("class", data2.cl);
      }
      if (data2.bm) {
        pathElement.style["mix-blend-mode"] = getBlendMode(data2.bm);
      }
      this.stylesList.push(styleOb);
      this.addToAnimatedContents(data2, elementData);
      return elementData;
    };
    SVGShapeElement.prototype.createGroupElement = function(data2) {
      var elementData = new ShapeGroupData();
      if (data2.ln) {
        elementData.gr.setAttribute("id", data2.ln);
      }
      if (data2.cl) {
        elementData.gr.setAttribute("class", data2.cl);
      }
      if (data2.bm) {
        elementData.gr.style["mix-blend-mode"] = getBlendMode(data2.bm);
      }
      return elementData;
    };
    SVGShapeElement.prototype.createTransformElement = function(data2, container) {
      var transformProperty = TransformPropertyFactory.getTransformProperty(this, data2, this);
      var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
      this.addToAnimatedContents(data2, elementData);
      return elementData;
    };
    SVGShapeElement.prototype.createShapeElement = function(data2, ownTransformers, level) {
      var ty = 4;
      if (data2.ty === "rc") {
        ty = 5;
      } else if (data2.ty === "el") {
        ty = 6;
      } else if (data2.ty === "sr") {
        ty = 7;
      }
      var shapeProperty = ShapePropertyFactory.getShapeProp(this, data2, ty, this);
      var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
      this.shapes.push(elementData);
      this.addShapeToModifiers(elementData);
      this.addToAnimatedContents(data2, elementData);
      return elementData;
    };
    SVGShapeElement.prototype.addToAnimatedContents = function(data2, element) {
      var i2 = 0;
      var len = this.animatedContents.length;
      while (i2 < len) {
        if (this.animatedContents[i2].element === element) {
          return;
        }
        i2 += 1;
      }
      this.animatedContents.push({
        fn: SVGElementsRenderer.createRenderFunction(data2),
        element,
        data: data2
      });
    };
    SVGShapeElement.prototype.setElementStyles = function(elementData) {
      var arr = elementData.styles;
      var j;
      var jLen = this.stylesList.length;
      for (j = 0; j < jLen; j += 1) {
        if (!this.stylesList[j].closed) {
          arr.push(this.stylesList[j]);
        }
      }
    };
    SVGShapeElement.prototype.reloadShapes = function() {
      this._isFirstFrame = true;
      var i2;
      var len = this.itemsData.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.prevViewData[i2] = this.itemsData[i2];
      }
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
      this.filterUniqueShapes();
      len = this.dynamicProperties.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.dynamicProperties[i2].getValue();
      }
      this.renderModifiers();
    };
    SVGShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, container, level, transformers, render) {
      var ownTransformers = [].concat(transformers);
      var i2;
      var len = arr.length - 1;
      var j;
      var jLen;
      var ownStyles = [];
      var ownModifiers = [];
      var currentTransform;
      var modifier;
      var processedPos;
      for (i2 = len; i2 >= 0; i2 -= 1) {
        processedPos = this.searchProcessedElement(arr[i2]);
        if (!processedPos) {
          arr[i2]._render = render;
        } else {
          itemsData[i2] = prevViewData[processedPos - 1];
        }
        if (arr[i2].ty === "fl" || arr[i2].ty === "st" || arr[i2].ty === "gf" || arr[i2].ty === "gs" || arr[i2].ty === "no") {
          if (!processedPos) {
            itemsData[i2] = this.createStyleElement(arr[i2], level);
          } else {
            itemsData[i2].style.closed = false;
          }
          if (arr[i2]._render) {
            if (itemsData[i2].style.pElem.parentNode !== container) {
              container.appendChild(itemsData[i2].style.pElem);
            }
          }
          ownStyles.push(itemsData[i2].style);
        } else if (arr[i2].ty === "gr") {
          if (!processedPos) {
            itemsData[i2] = this.createGroupElement(arr[i2]);
          } else {
            jLen = itemsData[i2].it.length;
            for (j = 0; j < jLen; j += 1) {
              itemsData[i2].prevViewData[j] = itemsData[i2].it[j];
            }
          }
          this.searchShapes(arr[i2].it, itemsData[i2].it, itemsData[i2].prevViewData, itemsData[i2].gr, level + 1, ownTransformers, render);
          if (arr[i2]._render) {
            if (itemsData[i2].gr.parentNode !== container) {
              container.appendChild(itemsData[i2].gr);
            }
          }
        } else if (arr[i2].ty === "tr") {
          if (!processedPos) {
            itemsData[i2] = this.createTransformElement(arr[i2], container);
          }
          currentTransform = itemsData[i2].transform;
          ownTransformers.push(currentTransform);
        } else if (arr[i2].ty === "sh" || arr[i2].ty === "rc" || arr[i2].ty === "el" || arr[i2].ty === "sr") {
          if (!processedPos) {
            itemsData[i2] = this.createShapeElement(arr[i2], ownTransformers, level);
          }
          this.setElementStyles(itemsData[i2]);
        } else if (arr[i2].ty === "tm" || arr[i2].ty === "rd" || arr[i2].ty === "ms" || arr[i2].ty === "pb" || arr[i2].ty === "zz" || arr[i2].ty === "op") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i2].ty);
            modifier.init(this, arr[i2]);
            itemsData[i2] = modifier;
            this.shapeModifiers.push(modifier);
          } else {
            modifier = itemsData[i2];
            modifier.closed = false;
          }
          ownModifiers.push(modifier);
        } else if (arr[i2].ty === "rp") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i2].ty);
            itemsData[i2] = modifier;
            modifier.init(this, arr, i2, itemsData);
            this.shapeModifiers.push(modifier);
            render = false;
          } else {
            modifier = itemsData[i2];
            modifier.closed = true;
          }
          ownModifiers.push(modifier);
        }
        this.addProcessedElement(arr[i2], i2 + 1);
      }
      len = ownStyles.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        ownStyles[i2].closed = true;
      }
      len = ownModifiers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        ownModifiers[i2].closed = true;
      }
    };
    SVGShapeElement.prototype.renderInnerContent = function() {
      this.renderModifiers();
      var i2;
      var len = this.stylesList.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.stylesList[i2].reset();
      }
      this.renderShape();
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.stylesList[i2]._mdf || this._isFirstFrame) {
          if (this.stylesList[i2].msElem) {
            this.stylesList[i2].msElem.setAttribute("d", this.stylesList[i2].d);
            this.stylesList[i2].d = "M0 0" + this.stylesList[i2].d;
          }
          this.stylesList[i2].pElem.setAttribute("d", this.stylesList[i2].d || "M0 0");
        }
      }
    };
    SVGShapeElement.prototype.renderShape = function() {
      var i2;
      var len = this.animatedContents.length;
      var animatedContent;
      for (i2 = 0; i2 < len; i2 += 1) {
        animatedContent = this.animatedContents[i2];
        if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
          animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
        }
      }
    };
    SVGShapeElement.prototype.destroy = function() {
      this.destroyBaseElement();
      this.shapesData = null;
      this.itemsData = null;
    };
    function LetterProps(o, sw, sc2, fc2, m4, p2) {
      this.o = o;
      this.sw = sw;
      this.sc = sc2;
      this.fc = fc2;
      this.m = m4;
      this.p = p2;
      this._mdf = {
        o: true,
        sw: !!sw,
        sc: !!sc2,
        fc: !!fc2,
        m: true,
        p: true
      };
    }
    LetterProps.prototype.update = function(o, sw, sc2, fc2, m4, p2) {
      this._mdf.o = false;
      this._mdf.sw = false;
      this._mdf.sc = false;
      this._mdf.fc = false;
      this._mdf.m = false;
      this._mdf.p = false;
      var updated = false;
      if (this.o !== o) {
        this.o = o;
        this._mdf.o = true;
        updated = true;
      }
      if (this.sw !== sw) {
        this.sw = sw;
        this._mdf.sw = true;
        updated = true;
      }
      if (this.sc !== sc2) {
        this.sc = sc2;
        this._mdf.sc = true;
        updated = true;
      }
      if (this.fc !== fc2) {
        this.fc = fc2;
        this._mdf.fc = true;
        updated = true;
      }
      if (this.m !== m4) {
        this.m = m4;
        this._mdf.m = true;
        updated = true;
      }
      if (p2.length && (this.p[0] !== p2[0] || this.p[1] !== p2[1] || this.p[4] !== p2[4] || this.p[5] !== p2[5] || this.p[12] !== p2[12] || this.p[13] !== p2[13])) {
        this.p = p2;
        this._mdf.p = true;
        updated = true;
      }
      return updated;
    };
    function TextProperty(elem2, data2) {
      this._frameId = initialDefaultFrame;
      this.pv = "";
      this.v = "";
      this.kf = false;
      this._isFirstFrame = true;
      this._mdf = false;
      if (data2.d && data2.d.sid) {
        data2.d = elem2.globalData.slotManager.getProp(data2.d);
      }
      this.data = data2;
      this.elem = elem2;
      this.comp = this.elem.comp;
      this.keysIndex = 0;
      this.canResize = false;
      this.minimumFontSize = 1;
      this.effectsSequence = [];
      this.currentData = {
        ascent: 0,
        boxWidth: this.defaultBoxWidth,
        f: "",
        fStyle: "",
        fWeight: "",
        fc: "",
        j: "",
        justifyOffset: "",
        l: [],
        lh: 0,
        lineWidths: [],
        ls: "",
        of: "",
        s: "",
        sc: "",
        sw: 0,
        t: 0,
        tr: 0,
        sz: 0,
        ps: null,
        fillColorAnim: false,
        strokeColorAnim: false,
        strokeWidthAnim: false,
        yOffset: 0,
        finalSize: 0,
        finalText: [],
        finalLineHeight: 0,
        __complete: false
      };
      this.copyData(this.currentData, this.data.d.k[0].s);
      if (!this.searchProperty()) {
        this.completeTextData(this.currentData);
      }
    }
    TextProperty.prototype.defaultBoxWidth = [0, 0];
    TextProperty.prototype.copyData = function(obj, data2) {
      for (var s3 in data2) {
        if (Object.prototype.hasOwnProperty.call(data2, s3)) {
          obj[s3] = data2[s3];
        }
      }
      return obj;
    };
    TextProperty.prototype.setCurrentData = function(data2) {
      if (!data2.__complete) {
        this.completeTextData(data2);
      }
      this.currentData = data2;
      this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
      this._mdf = true;
    };
    TextProperty.prototype.searchProperty = function() {
      return this.searchKeyframes();
    };
    TextProperty.prototype.searchKeyframes = function() {
      this.kf = this.data.d.k.length > 1;
      if (this.kf) {
        this.addEffect(this.getKeyframeValue.bind(this));
      }
      return this.kf;
    };
    TextProperty.prototype.addEffect = function(effectFunction) {
      this.effectsSequence.push(effectFunction);
      this.elem.addDynamicProperty(this);
    };
    TextProperty.prototype.getValue = function(_finalValue) {
      if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
        return;
      }
      this.currentData.t = this.data.d.k[this.keysIndex].s.t;
      var currentValue = this.currentData;
      var currentIndex = this.keysIndex;
      if (this.lock) {
        this.setCurrentData(this.currentData);
        return;
      }
      this.lock = true;
      this._mdf = false;
      var i2;
      var len = this.effectsSequence.length;
      var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (currentIndex !== this.keysIndex) {
          finalValue = this.effectsSequence[i2](finalValue, finalValue.t);
        } else {
          finalValue = this.effectsSequence[i2](this.currentData, finalValue.t);
        }
      }
      if (currentValue !== finalValue) {
        this.setCurrentData(finalValue);
      }
      this.v = this.currentData;
      this.pv = this.v;
      this.lock = false;
      this.frameId = this.elem.globalData.frameId;
    };
    TextProperty.prototype.getKeyframeValue = function() {
      var textKeys = this.data.d.k;
      var frameNum = this.elem.comp.renderedFrame;
      var i2 = 0;
      var len = textKeys.length;
      while (i2 <= len - 1) {
        if (i2 === len - 1 || textKeys[i2 + 1].t > frameNum) {
          break;
        }
        i2 += 1;
      }
      if (this.keysIndex !== i2) {
        this.keysIndex = i2;
      }
      return this.data.d.k[this.keysIndex].s;
    };
    TextProperty.prototype.buildFinalText = function(text2) {
      var charactersArray = [];
      var i2 = 0;
      var len = text2.length;
      var charCode;
      var secondCharCode;
      var shouldCombine = false;
      var shouldCombineNext = false;
      var currentChars = "";
      while (i2 < len) {
        shouldCombine = shouldCombineNext;
        shouldCombineNext = false;
        charCode = text2.charCodeAt(i2);
        currentChars = text2.charAt(i2);
        if (FontManager.isCombinedCharacter(charCode)) {
          shouldCombine = true;
        } else if (charCode >= 55296 && charCode <= 56319) {
          if (FontManager.isRegionalFlag(text2, i2)) {
            currentChars = text2.substr(i2, 14);
          } else {
            secondCharCode = text2.charCodeAt(i2 + 1);
            if (secondCharCode >= 56320 && secondCharCode <= 57343) {
              if (FontManager.isModifier(charCode, secondCharCode)) {
                currentChars = text2.substr(i2, 2);
                shouldCombine = true;
              } else if (FontManager.isFlagEmoji(text2.substr(i2, 4))) {
                currentChars = text2.substr(i2, 4);
              } else {
                currentChars = text2.substr(i2, 2);
              }
            }
          }
        } else if (charCode > 56319) {
          secondCharCode = text2.charCodeAt(i2 + 1);
          if (FontManager.isVariationSelector(charCode)) {
            shouldCombine = true;
          }
        } else if (FontManager.isZeroWidthJoiner(charCode)) {
          shouldCombine = true;
          shouldCombineNext = true;
        }
        if (shouldCombine) {
          charactersArray[charactersArray.length - 1] += currentChars;
          shouldCombine = false;
        } else {
          charactersArray.push(currentChars);
        }
        i2 += currentChars.length;
      }
      return charactersArray;
    };
    TextProperty.prototype.completeTextData = function(documentData) {
      documentData.__complete = true;
      var fontManager = this.elem.globalData.fontManager;
      var data2 = this.data;
      var letters = [];
      var i2;
      var len;
      var newLineFlag;
      var index2 = 0;
      var val2;
      var anchorGrouping = data2.m.g;
      var currentSize = 0;
      var currentPos = 0;
      var currentLine = 0;
      var lineWidths = [];
      var lineWidth = 0;
      var maxLineWidth = 0;
      var j;
      var jLen;
      var fontData = fontManager.getFontByName(documentData.f);
      var charData;
      var cLength = 0;
      var fontProps = getFontProperties(fontData);
      documentData.fWeight = fontProps.weight;
      documentData.fStyle = fontProps.style;
      documentData.finalSize = documentData.s;
      documentData.finalText = this.buildFinalText(documentData.t);
      len = documentData.finalText.length;
      documentData.finalLineHeight = documentData.lh;
      var trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
      var charCode;
      if (documentData.sz) {
        var flag = true;
        var boxWidth = documentData.sz[0];
        var boxHeight = documentData.sz[1];
        var currentHeight;
        var finalText;
        while (flag) {
          finalText = this.buildFinalText(documentData.t);
          currentHeight = 0;
          lineWidth = 0;
          len = finalText.length;
          trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
          var lastSpaceIndex = -1;
          for (i2 = 0; i2 < len; i2 += 1) {
            charCode = finalText[i2].charCodeAt(0);
            newLineFlag = false;
            if (finalText[i2] === " ") {
              lastSpaceIndex = i2;
            } else if (charCode === 13 || charCode === 3) {
              lineWidth = 0;
              newLineFlag = true;
              currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
            }
            if (fontManager.chars) {
              charData = fontManager.getCharData(finalText[i2], fontData.fStyle, fontData.fFamily);
              cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
            } else {
              cLength = fontManager.measureText(finalText[i2], documentData.f, documentData.finalSize);
            }
            if (lineWidth + cLength > boxWidth && finalText[i2] !== " ") {
              if (lastSpaceIndex === -1) {
                len += 1;
              } else {
                i2 = lastSpaceIndex;
              }
              currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
              finalText.splice(i2, lastSpaceIndex === i2 ? 1 : 0, "\r");
              lastSpaceIndex = -1;
              lineWidth = 0;
            } else {
              lineWidth += cLength;
              lineWidth += trackingOffset;
            }
          }
          currentHeight += fontData.ascent * documentData.finalSize / 100;
          if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
            documentData.finalSize -= 1;
            documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
          } else {
            documentData.finalText = finalText;
            len = documentData.finalText.length;
            flag = false;
          }
        }
      }
      lineWidth = -trackingOffset;
      cLength = 0;
      var uncollapsedSpaces = 0;
      var currentChar;
      for (i2 = 0; i2 < len; i2 += 1) {
        newLineFlag = false;
        currentChar = documentData.finalText[i2];
        charCode = currentChar.charCodeAt(0);
        if (charCode === 13 || charCode === 3) {
          uncollapsedSpaces = 0;
          lineWidths.push(lineWidth);
          maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
          lineWidth = -2 * trackingOffset;
          val2 = "";
          newLineFlag = true;
          currentLine += 1;
        } else {
          val2 = currentChar;
        }
        if (fontManager.chars) {
          charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
          cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
        } else {
          cLength = fontManager.measureText(val2, documentData.f, documentData.finalSize);
        }
        if (currentChar === " ") {
          uncollapsedSpaces += cLength + trackingOffset;
        } else {
          lineWidth += cLength + trackingOffset + uncollapsedSpaces;
          uncollapsedSpaces = 0;
        }
        letters.push({
          l: cLength,
          an: cLength,
          add: currentSize,
          n: newLineFlag,
          anIndexes: [],
          val: val2,
          line: currentLine,
          animatorJustifyOffset: 0
        });
        if (anchorGrouping == 2) {
          currentSize += cLength;
          if (val2 === "" || val2 === " " || i2 === len - 1) {
            if (val2 === "" || val2 === " ") {
              currentSize -= cLength;
            }
            while (currentPos <= i2) {
              letters[currentPos].an = currentSize;
              letters[currentPos].ind = index2;
              letters[currentPos].extra = cLength;
              currentPos += 1;
            }
            index2 += 1;
            currentSize = 0;
          }
        } else if (anchorGrouping == 3) {
          currentSize += cLength;
          if (val2 === "" || i2 === len - 1) {
            if (val2 === "") {
              currentSize -= cLength;
            }
            while (currentPos <= i2) {
              letters[currentPos].an = currentSize;
              letters[currentPos].ind = index2;
              letters[currentPos].extra = cLength;
              currentPos += 1;
            }
            currentSize = 0;
            index2 += 1;
          }
        } else {
          letters[index2].ind = index2;
          letters[index2].extra = 0;
          index2 += 1;
        }
      }
      documentData.l = letters;
      maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
      lineWidths.push(lineWidth);
      if (documentData.sz) {
        documentData.boxWidth = documentData.sz[0];
        documentData.justifyOffset = 0;
      } else {
        documentData.boxWidth = maxLineWidth;
        switch (documentData.j) {
          case 1:
            documentData.justifyOffset = -documentData.boxWidth;
            break;
          case 2:
            documentData.justifyOffset = -documentData.boxWidth / 2;
            break;
          default:
            documentData.justifyOffset = 0;
        }
      }
      documentData.lineWidths = lineWidths;
      var animators = data2.a;
      var animatorData;
      var letterData;
      jLen = animators.length;
      var based;
      var ind;
      var indexes = [];
      for (j = 0; j < jLen; j += 1) {
        animatorData = animators[j];
        if (animatorData.a.sc) {
          documentData.strokeColorAnim = true;
        }
        if (animatorData.a.sw) {
          documentData.strokeWidthAnim = true;
        }
        if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
          documentData.fillColorAnim = true;
        }
        ind = 0;
        based = animatorData.s.b;
        for (i2 = 0; i2 < len; i2 += 1) {
          letterData = letters[i2];
          letterData.anIndexes[j] = ind;
          if (based == 1 && letterData.val !== "" || based == 2 && letterData.val !== "" && letterData.val !== " " || based == 3 && (letterData.n || letterData.val == " " || i2 == len - 1) || based == 4 && (letterData.n || i2 == len - 1)) {
            if (animatorData.s.rn === 1) {
              indexes.push(ind);
            }
            ind += 1;
          }
        }
        data2.a[j].s.totalChars = ind;
        var currentInd = -1;
        var newInd;
        if (animatorData.s.rn === 1) {
          for (i2 = 0; i2 < len; i2 += 1) {
            letterData = letters[i2];
            if (currentInd != letterData.anIndexes[j]) {
              currentInd = letterData.anIndexes[j];
              newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
            }
            letterData.anIndexes[j] = newInd;
          }
        }
      }
      documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
      documentData.ls = documentData.ls || 0;
      documentData.ascent = fontData.ascent * documentData.finalSize / 100;
    };
    TextProperty.prototype.updateDocumentData = function(newData, index2) {
      index2 = index2 === void 0 ? this.keysIndex : index2;
      var dData = this.copyData({}, this.data.d.k[index2].s);
      dData = this.copyData(dData, newData);
      this.data.d.k[index2].s = dData;
      this.recalculate(index2);
      this.setCurrentData(dData);
      this.elem.addDynamicProperty(this);
    };
    TextProperty.prototype.recalculate = function(index2) {
      var dData = this.data.d.k[index2].s;
      dData.__complete = false;
      this.keysIndex = 0;
      this._isFirstFrame = true;
      this.getValue(dData);
    };
    TextProperty.prototype.canResizeFont = function(_canResize) {
      this.canResize = _canResize;
      this.recalculate(this.keysIndex);
      this.elem.addDynamicProperty(this);
    };
    TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
      this.minimumFontSize = Math.floor(_fontValue) || 1;
      this.recalculate(this.keysIndex);
      this.elem.addDynamicProperty(this);
    };
    var TextSelectorProp = function() {
      var max = Math.max;
      var min = Math.min;
      var floor = Math.floor;
      function TextSelectorPropFactory(elem2, data2) {
        this._currentTextLength = -1;
        this.k = false;
        this.data = data2;
        this.elem = elem2;
        this.comp = elem2.comp;
        this.finalS = 0;
        this.finalE = 0;
        this.initDynamicPropertyContainer(elem2);
        this.s = PropertyFactory.getProp(elem2, data2.s || {
          k: 0
        }, 0, 0, this);
        if ("e" in data2) {
          this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0, this);
        } else {
          this.e = {
            v: 100
          };
        }
        this.o = PropertyFactory.getProp(elem2, data2.o || {
          k: 0
        }, 0, 0, this);
        this.xe = PropertyFactory.getProp(elem2, data2.xe || {
          k: 0
        }, 0, 0, this);
        this.ne = PropertyFactory.getProp(elem2, data2.ne || {
          k: 0
        }, 0, 0, this);
        this.sm = PropertyFactory.getProp(elem2, data2.sm || {
          k: 100
        }, 0, 0, this);
        this.a = PropertyFactory.getProp(elem2, data2.a, 0, 0.01, this);
        if (!this.dynamicProperties.length) {
          this.getValue();
        }
      }
      TextSelectorPropFactory.prototype = {
        getMult: function getMult(ind) {
          if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
            this.getValue();
          }
          var x1 = 0;
          var y1 = 0;
          var x22 = 1;
          var y22 = 1;
          if (this.ne.v > 0) {
            x1 = this.ne.v / 100;
          } else {
            y1 = -this.ne.v / 100;
          }
          if (this.xe.v > 0) {
            x22 = 1 - this.xe.v / 100;
          } else {
            y22 = 1 + this.xe.v / 100;
          }
          var easer = BezierFactory.getBezierEasing(x1, y1, x22, y22).get;
          var mult = 0;
          var s3 = this.finalS;
          var e3 = this.finalE;
          var type = this.data.sh;
          if (type === 2) {
            if (e3 === s3) {
              mult = ind >= e3 ? 1 : 0;
            } else {
              mult = max(0, min(0.5 / (e3 - s3) + (ind - s3) / (e3 - s3), 1));
            }
            mult = easer(mult);
          } else if (type === 3) {
            if (e3 === s3) {
              mult = ind >= e3 ? 0 : 1;
            } else {
              mult = 1 - max(0, min(0.5 / (e3 - s3) + (ind - s3) / (e3 - s3), 1));
            }
            mult = easer(mult);
          } else if (type === 4) {
            if (e3 === s3) {
              mult = 0;
            } else {
              mult = max(0, min(0.5 / (e3 - s3) + (ind - s3) / (e3 - s3), 1));
              if (mult < 0.5) {
                mult *= 2;
              } else {
                mult = 1 - 2 * (mult - 0.5);
              }
            }
            mult = easer(mult);
          } else if (type === 5) {
            if (e3 === s3) {
              mult = 0;
            } else {
              var tot = e3 - s3;
              ind = min(max(0, ind + 0.5 - s3), e3 - s3);
              var x3 = -tot / 2 + ind;
              var a3 = tot / 2;
              mult = Math.sqrt(1 - x3 * x3 / (a3 * a3));
            }
            mult = easer(mult);
          } else if (type === 6) {
            if (e3 === s3) {
              mult = 0;
            } else {
              ind = min(max(0, ind + 0.5 - s3), e3 - s3);
              mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e3 - s3))) / 2;
            }
            mult = easer(mult);
          } else {
            if (ind >= floor(s3)) {
              if (ind - s3 < 0) {
                mult = max(0, min(min(e3, 1) - (s3 - ind), 1));
              } else {
                mult = max(0, min(e3 - ind, 1));
              }
            }
            mult = easer(mult);
          }
          if (this.sm.v !== 100) {
            var smoothness = this.sm.v * 0.01;
            if (smoothness === 0) {
              smoothness = 1e-8;
            }
            var threshold = 0.5 - smoothness * 0.5;
            if (mult < threshold) {
              mult = 0;
            } else {
              mult = (mult - threshold) / smoothness;
              if (mult > 1) {
                mult = 1;
              }
            }
          }
          return mult * this.a.v;
        },
        getValue: function getValue2(newCharsFlag) {
          this.iterateDynamicProperties();
          this._mdf = newCharsFlag || this._mdf;
          this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
          if (newCharsFlag && this.data.r === 2) {
            this.e.v = this._currentTextLength;
          }
          var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
          var o = this.o.v / divisor;
          var s3 = this.s.v / divisor + o;
          var e3 = this.e.v / divisor + o;
          if (s3 > e3) {
            var _s = s3;
            s3 = e3;
            e3 = _s;
          }
          this.finalS = s3;
          this.finalE = e3;
        }
      };
      extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);
      function getTextSelectorProp(elem2, data2, arr) {
        return new TextSelectorPropFactory(elem2, data2);
      }
      return {
        getTextSelectorProp
      };
    }();
    function TextAnimatorDataProperty(elem2, animatorProps, container) {
      var defaultData = {
        propType: false
      };
      var getProp = PropertyFactory.getProp;
      var textAnimatorAnimatables = animatorProps.a;
      this.a = {
        r: textAnimatorAnimatables.r ? getProp(elem2, textAnimatorAnimatables.r, 0, degToRads, container) : defaultData,
        rx: textAnimatorAnimatables.rx ? getProp(elem2, textAnimatorAnimatables.rx, 0, degToRads, container) : defaultData,
        ry: textAnimatorAnimatables.ry ? getProp(elem2, textAnimatorAnimatables.ry, 0, degToRads, container) : defaultData,
        sk: textAnimatorAnimatables.sk ? getProp(elem2, textAnimatorAnimatables.sk, 0, degToRads, container) : defaultData,
        sa: textAnimatorAnimatables.sa ? getProp(elem2, textAnimatorAnimatables.sa, 0, degToRads, container) : defaultData,
        s: textAnimatorAnimatables.s ? getProp(elem2, textAnimatorAnimatables.s, 1, 0.01, container) : defaultData,
        a: textAnimatorAnimatables.a ? getProp(elem2, textAnimatorAnimatables.a, 1, 0, container) : defaultData,
        o: textAnimatorAnimatables.o ? getProp(elem2, textAnimatorAnimatables.o, 0, 0.01, container) : defaultData,
        p: textAnimatorAnimatables.p ? getProp(elem2, textAnimatorAnimatables.p, 1, 0, container) : defaultData,
        sw: textAnimatorAnimatables.sw ? getProp(elem2, textAnimatorAnimatables.sw, 0, 0, container) : defaultData,
        sc: textAnimatorAnimatables.sc ? getProp(elem2, textAnimatorAnimatables.sc, 1, 0, container) : defaultData,
        fc: textAnimatorAnimatables.fc ? getProp(elem2, textAnimatorAnimatables.fc, 1, 0, container) : defaultData,
        fh: textAnimatorAnimatables.fh ? getProp(elem2, textAnimatorAnimatables.fh, 0, 0, container) : defaultData,
        fs: textAnimatorAnimatables.fs ? getProp(elem2, textAnimatorAnimatables.fs, 0, 0.01, container) : defaultData,
        fb: textAnimatorAnimatables.fb ? getProp(elem2, textAnimatorAnimatables.fb, 0, 0.01, container) : defaultData,
        t: textAnimatorAnimatables.t ? getProp(elem2, textAnimatorAnimatables.t, 0, 0, container) : defaultData
      };
      this.s = TextSelectorProp.getTextSelectorProp(elem2, animatorProps.s, container);
      this.s.t = animatorProps.s.t;
    }
    function TextAnimatorProperty(textData, renderType, elem2) {
      this._isFirstFrame = true;
      this._hasMaskedPath = false;
      this._frameId = -1;
      this._textData = textData;
      this._renderType = renderType;
      this._elem = elem2;
      this._animatorsData = createSizedArray(this._textData.a.length);
      this._pathData = {};
      this._moreOptions = {
        alignment: {}
      };
      this.renderedLetters = [];
      this.lettersChangedFlag = false;
      this.initDynamicPropertyContainer(elem2);
    }
    TextAnimatorProperty.prototype.searchProperties = function() {
      var i2;
      var len = this._textData.a.length;
      var animatorProps;
      var getProp = PropertyFactory.getProp;
      for (i2 = 0; i2 < len; i2 += 1) {
        animatorProps = this._textData.a[i2];
        this._animatorsData[i2] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
      }
      if (this._textData.p && "m" in this._textData.p) {
        this._pathData = {
          a: getProp(this._elem, this._textData.p.a, 0, 0, this),
          f: getProp(this._elem, this._textData.p.f, 0, 0, this),
          l: getProp(this._elem, this._textData.p.l, 0, 0, this),
          r: getProp(this._elem, this._textData.p.r, 0, 0, this),
          p: getProp(this._elem, this._textData.p.p, 0, 0, this),
          m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
        };
        this._hasMaskedPath = true;
      } else {
        this._hasMaskedPath = false;
      }
      this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
    };
    TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag) {
      this.lettersChangedFlag = lettersChangedFlag;
      if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
        return;
      }
      this._isFirstFrame = false;
      var alignment = this._moreOptions.alignment.v;
      var animators = this._animatorsData;
      var textData = this._textData;
      var matrixHelper = this.mHelper;
      var renderType = this._renderType;
      var renderedLettersCount = this.renderedLetters.length;
      var xPos;
      var yPos;
      var i2;
      var len;
      var letters = documentData.l;
      var pathInfo;
      var currentLength;
      var currentPoint;
      var segmentLength;
      var flag;
      var pointInd;
      var segmentInd;
      var prevPoint;
      var points;
      var segments;
      var partialLength;
      var totalLength;
      var perc;
      var tanAngle;
      var mask2;
      if (this._hasMaskedPath) {
        mask2 = this._pathData.m;
        if (!this._pathData.n || this._pathData._mdf) {
          var paths = mask2.v;
          if (this._pathData.r.v) {
            paths = paths.reverse();
          }
          pathInfo = {
            tLength: 0,
            segments: []
          };
          len = paths._length - 1;
          var bezierData;
          totalLength = 0;
          for (i2 = 0; i2 < len; i2 += 1) {
            bezierData = bez.buildBezierData(paths.v[i2], paths.v[i2 + 1], [paths.o[i2][0] - paths.v[i2][0], paths.o[i2][1] - paths.v[i2][1]], [paths.i[i2 + 1][0] - paths.v[i2 + 1][0], paths.i[i2 + 1][1] - paths.v[i2 + 1][1]]);
            pathInfo.tLength += bezierData.segmentLength;
            pathInfo.segments.push(bezierData);
            totalLength += bezierData.segmentLength;
          }
          i2 = len;
          if (mask2.v.c) {
            bezierData = bez.buildBezierData(paths.v[i2], paths.v[0], [paths.o[i2][0] - paths.v[i2][0], paths.o[i2][1] - paths.v[i2][1]], [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
            pathInfo.tLength += bezierData.segmentLength;
            pathInfo.segments.push(bezierData);
            totalLength += bezierData.segmentLength;
          }
          this._pathData.pi = pathInfo;
        }
        pathInfo = this._pathData.pi;
        currentLength = this._pathData.f.v;
        segmentInd = 0;
        pointInd = 1;
        segmentLength = 0;
        flag = true;
        segments = pathInfo.segments;
        if (currentLength < 0 && mask2.v.c) {
          if (pathInfo.tLength < Math.abs(currentLength)) {
            currentLength = -Math.abs(currentLength) % pathInfo.tLength;
          }
          segmentInd = segments.length - 1;
          points = segments[segmentInd].points;
          pointInd = points.length - 1;
          while (currentLength < 0) {
            currentLength += points[pointInd].partialLength;
            pointInd -= 1;
            if (pointInd < 0) {
              segmentInd -= 1;
              points = segments[segmentInd].points;
              pointInd = points.length - 1;
            }
          }
        }
        points = segments[segmentInd].points;
        prevPoint = points[pointInd - 1];
        currentPoint = points[pointInd];
        partialLength = currentPoint.partialLength;
      }
      len = letters.length;
      xPos = 0;
      yPos = 0;
      var yOff = documentData.finalSize * 1.2 * 0.714;
      var firstLine = true;
      var animatorProps;
      var animatorSelector;
      var j;
      var jLen;
      var letterValue;
      jLen = animators.length;
      var mult;
      var ind = -1;
      var offf;
      var xPathPos;
      var yPathPos;
      var initPathPos = currentLength;
      var initSegmentInd = segmentInd;
      var initPointInd = pointInd;
      var currentLine = -1;
      var elemOpacity;
      var sc2;
      var sw;
      var fc2;
      var k3;
      var letterSw;
      var letterSc;
      var letterFc;
      var letterM = "";
      var letterP = this.defaultPropsArray;
      var letterO;
      if (documentData.j === 2 || documentData.j === 1) {
        var animatorJustifyOffset = 0;
        var animatorFirstCharOffset = 0;
        var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
        var lastIndex = 0;
        var isNewLine = true;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (letters[i2].n) {
            if (animatorJustifyOffset) {
              animatorJustifyOffset += animatorFirstCharOffset;
            }
            while (lastIndex < i2) {
              letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
              lastIndex += 1;
            }
            animatorJustifyOffset = 0;
            isNewLine = true;
          } else {
            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;
              if (animatorProps.t.propType) {
                if (isNewLine && documentData.j === 2) {
                  animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                }
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i2].anIndexes[j], textData.a[j].s.totalChars);
                if (mult.length) {
                  animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                } else {
                  animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                }
              }
            }
            isNewLine = false;
          }
        }
        if (animatorJustifyOffset) {
          animatorJustifyOffset += animatorFirstCharOffset;
        }
        while (lastIndex < i2) {
          letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
          lastIndex += 1;
        }
      }
      for (i2 = 0; i2 < len; i2 += 1) {
        matrixHelper.reset();
        elemOpacity = 1;
        if (letters[i2].n) {
          xPos = 0;
          yPos += documentData.yOffset;
          yPos += firstLine ? 1 : 0;
          currentLength = initPathPos;
          firstLine = false;
          if (this._hasMaskedPath) {
            segmentInd = initSegmentInd;
            pointInd = initPointInd;
            points = segments[segmentInd].points;
            prevPoint = points[pointInd - 1];
            currentPoint = points[pointInd];
            partialLength = currentPoint.partialLength;
            segmentLength = 0;
          }
          letterM = "";
          letterFc = "";
          letterSw = "";
          letterO = "";
          letterP = this.defaultPropsArray;
        } else {
          if (this._hasMaskedPath) {
            if (currentLine !== letters[i2].line) {
              switch (documentData.j) {
                case 1:
                  currentLength += totalLength - documentData.lineWidths[letters[i2].line];
                  break;
                case 2:
                  currentLength += (totalLength - documentData.lineWidths[letters[i2].line]) / 2;
                  break;
              }
              currentLine = letters[i2].line;
            }
            if (ind !== letters[i2].ind) {
              if (letters[ind]) {
                currentLength += letters[ind].extra;
              }
              currentLength += letters[i2].an / 2;
              ind = letters[i2].ind;
            }
            currentLength += alignment[0] * letters[i2].an * 5e-3;
            var animatorOffset = 0;
            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;
              if (animatorProps.p.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i2].anIndexes[j], textData.a[j].s.totalChars);
                if (mult.length) {
                  animatorOffset += animatorProps.p.v[0] * mult[0];
                } else {
                  animatorOffset += animatorProps.p.v[0] * mult;
                }
              }
              if (animatorProps.a.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i2].anIndexes[j], textData.a[j].s.totalChars);
                if (mult.length) {
                  animatorOffset += animatorProps.a.v[0] * mult[0];
                } else {
                  animatorOffset += animatorProps.a.v[0] * mult;
                }
              }
            }
            flag = true;
            if (this._pathData.a.v) {
              currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);
              currentLength += this._pathData.f.v;
            }
            while (flag) {
              if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                matrixHelper.translate(-alignment[0] * letters[i2].an * 5e-3, -(alignment[1] * yOff) * 0.01);
                flag = false;
              } else if (points) {
                segmentLength += currentPoint.partialLength;
                pointInd += 1;
                if (pointInd >= points.length) {
                  pointInd = 0;
                  segmentInd += 1;
                  if (!segments[segmentInd]) {
                    if (mask2.v.c) {
                      pointInd = 0;
                      segmentInd = 0;
                      points = segments[segmentInd].points;
                    } else {
                      segmentLength -= currentPoint.partialLength;
                      points = null;
                    }
                  } else {
                    points = segments[segmentInd].points;
                  }
                }
                if (points) {
                  prevPoint = currentPoint;
                  currentPoint = points[pointInd];
                  partialLength = currentPoint.partialLength;
                }
              }
            }
            offf = letters[i2].an / 2 - letters[i2].add;
            matrixHelper.translate(-offf, 0, 0);
          } else {
            offf = letters[i2].an / 2 - letters[i2].add;
            matrixHelper.translate(-offf, 0, 0);
            matrixHelper.translate(-alignment[0] * letters[i2].an * 5e-3, -alignment[1] * yOff * 0.01, 0);
          }
          for (j = 0; j < jLen; j += 1) {
            animatorProps = animators[j].a;
            if (animatorProps.t.propType) {
              animatorSelector = animators[j].s;
              mult = animatorSelector.getMult(letters[i2].anIndexes[j], textData.a[j].s.totalChars);
              if (xPos !== 0 || documentData.j !== 0) {
                if (this._hasMaskedPath) {
                  if (mult.length) {
                    currentLength += animatorProps.t.v * mult[0];
                  } else {
                    currentLength += animatorProps.t.v * mult;
                  }
                } else if (mult.length) {
                  xPos += animatorProps.t.v * mult[0];
                } else {
                  xPos += animatorProps.t.v * mult;
                }
              }
            }
          }
          if (documentData.strokeWidthAnim) {
            sw = documentData.sw || 0;
          }
          if (documentData.strokeColorAnim) {
            if (documentData.sc) {
              sc2 = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
            } else {
              sc2 = [0, 0, 0];
            }
          }
          if (documentData.fillColorAnim && documentData.fc) {
            fc2 = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
          }
          for (j = 0; j < jLen; j += 1) {
            animatorProps = animators[j].a;
            if (animatorProps.a.propType) {
              animatorSelector = animators[j].s;
              mult = animatorSelector.getMult(letters[i2].anIndexes[j], textData.a[j].s.totalChars);
              if (mult.length) {
                matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
              } else {
                matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
              }
            }
          }
          for (j = 0; j < jLen; j += 1) {
            animatorProps = animators[j].a;
            if (animatorProps.s.propType) {
              animatorSelector = animators[j].s;
              mult = animatorSelector.getMult(letters[i2].anIndexes[j], textData.a[j].s.totalChars);
              if (mult.length) {
                matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
              } else {
                matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
              }
            }
          }
          for (j = 0; j < jLen; j += 1) {
            animatorProps = animators[j].a;
            animatorSelector = animators[j].s;
            mult = animatorSelector.getMult(letters[i2].anIndexes[j], textData.a[j].s.totalChars);
            if (animatorProps.sk.propType) {
              if (mult.length) {
                matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
              } else {
                matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
              }
            }
            if (animatorProps.r.propType) {
              if (mult.length) {
                matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
              } else {
                matrixHelper.rotateZ(-animatorProps.r.v * mult);
              }
            }
            if (animatorProps.ry.propType) {
              if (mult.length) {
                matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
              } else {
                matrixHelper.rotateY(animatorProps.ry.v * mult);
              }
            }
            if (animatorProps.rx.propType) {
              if (mult.length) {
                matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
              } else {
                matrixHelper.rotateX(animatorProps.rx.v * mult);
              }
            }
            if (animatorProps.o.propType) {
              if (mult.length) {
                elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
              } else {
                elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
              }
            }
            if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
              if (mult.length) {
                sw += animatorProps.sw.v * mult[0];
              } else {
                sw += animatorProps.sw.v * mult;
              }
            }
            if (documentData.strokeColorAnim && animatorProps.sc.propType) {
              for (k3 = 0; k3 < 3; k3 += 1) {
                if (mult.length) {
                  sc2[k3] += (animatorProps.sc.v[k3] - sc2[k3]) * mult[0];
                } else {
                  sc2[k3] += (animatorProps.sc.v[k3] - sc2[k3]) * mult;
                }
              }
            }
            if (documentData.fillColorAnim && documentData.fc) {
              if (animatorProps.fc.propType) {
                for (k3 = 0; k3 < 3; k3 += 1) {
                  if (mult.length) {
                    fc2[k3] += (animatorProps.fc.v[k3] - fc2[k3]) * mult[0];
                  } else {
                    fc2[k3] += (animatorProps.fc.v[k3] - fc2[k3]) * mult;
                  }
                }
              }
              if (animatorProps.fh.propType) {
                if (mult.length) {
                  fc2 = addHueToRGB(fc2, animatorProps.fh.v * mult[0]);
                } else {
                  fc2 = addHueToRGB(fc2, animatorProps.fh.v * mult);
                }
              }
              if (animatorProps.fs.propType) {
                if (mult.length) {
                  fc2 = addSaturationToRGB(fc2, animatorProps.fs.v * mult[0]);
                } else {
                  fc2 = addSaturationToRGB(fc2, animatorProps.fs.v * mult);
                }
              }
              if (animatorProps.fb.propType) {
                if (mult.length) {
                  fc2 = addBrightnessToRGB(fc2, animatorProps.fb.v * mult[0]);
                } else {
                  fc2 = addBrightnessToRGB(fc2, animatorProps.fb.v * mult);
                }
              }
            }
          }
          for (j = 0; j < jLen; j += 1) {
            animatorProps = animators[j].a;
            if (animatorProps.p.propType) {
              animatorSelector = animators[j].s;
              mult = animatorSelector.getMult(letters[i2].anIndexes[j], textData.a[j].s.totalChars);
              if (this._hasMaskedPath) {
                if (mult.length) {
                  matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                } else {
                  matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                }
              } else if (mult.length) {
                matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
              } else {
                matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
              }
            }
          }
          if (documentData.strokeWidthAnim) {
            letterSw = sw < 0 ? 0 : sw;
          }
          if (documentData.strokeColorAnim) {
            letterSc = "rgb(" + Math.round(sc2[0] * 255) + "," + Math.round(sc2[1] * 255) + "," + Math.round(sc2[2] * 255) + ")";
          }
          if (documentData.fillColorAnim && documentData.fc) {
            letterFc = "rgb(" + Math.round(fc2[0] * 255) + "," + Math.round(fc2[1] * 255) + "," + Math.round(fc2[2] * 255) + ")";
          }
          if (this._hasMaskedPath) {
            matrixHelper.translate(0, -documentData.ls);
            matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);
            if (this._pathData.p.v) {
              tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
              var rot = Math.atan(tanAngle) * 180 / Math.PI;
              if (currentPoint.point[0] < prevPoint.point[0]) {
                rot += 180;
              }
              matrixHelper.rotate(-rot * Math.PI / 180);
            }
            matrixHelper.translate(xPathPos, yPathPos, 0);
            currentLength -= alignment[0] * letters[i2].an * 5e-3;
            if (letters[i2 + 1] && ind !== letters[i2 + 1].ind) {
              currentLength += letters[i2].an / 2;
              currentLength += documentData.tr * 1e-3 * documentData.finalSize;
            }
          } else {
            matrixHelper.translate(xPos, yPos, 0);
            if (documentData.ps) {
              matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
            }
            switch (documentData.j) {
              case 1:
                matrixHelper.translate(letters[i2].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i2].line]), 0, 0);
                break;
              case 2:
                matrixHelper.translate(letters[i2].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i2].line]) / 2, 0, 0);
                break;
            }
            matrixHelper.translate(0, -documentData.ls);
            matrixHelper.translate(offf, 0, 0);
            matrixHelper.translate(alignment[0] * letters[i2].an * 5e-3, alignment[1] * yOff * 0.01, 0);
            xPos += letters[i2].l + documentData.tr * 1e-3 * documentData.finalSize;
          }
          if (renderType === "html") {
            letterM = matrixHelper.toCSS();
          } else if (renderType === "svg") {
            letterM = matrixHelper.to2dCSS();
          } else {
            letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
          }
          letterO = elemOpacity;
        }
        if (renderedLettersCount <= i2) {
          letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
          this.renderedLetters.push(letterValue);
          renderedLettersCount += 1;
          this.lettersChangedFlag = true;
        } else {
          letterValue = this.renderedLetters[i2];
          this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
        }
      }
    };
    TextAnimatorProperty.prototype.getValue = function() {
      if (this._elem.globalData.frameId === this._frameId) {
        return;
      }
      this._frameId = this._elem.globalData.frameId;
      this.iterateDynamicProperties();
    };
    TextAnimatorProperty.prototype.mHelper = new Matrix();
    TextAnimatorProperty.prototype.defaultPropsArray = [];
    extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
    function ITextElement() {
    }
    ITextElement.prototype.initElement = function(data2, globalData2, comp2) {
      this.lettersChangedFlag = true;
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.textProperty = new TextProperty(this, data2.t, this.dynamicProperties);
      this.textAnimator = new TextAnimatorProperty(data2.t, this.renderType, this);
      this.initTransform(data2, globalData2, comp2);
      this.initHierarchy();
      this.initRenderable();
      this.initRendererElement();
      this.createContainerElements();
      this.createRenderableComponents();
      this.createContent();
      this.hide();
      this.textAnimator.searchProperties(this.dynamicProperties);
    };
    ITextElement.prototype.prepareFrame = function(num) {
      this._mdf = false;
      this.prepareRenderableFrame(num);
      this.prepareProperties(num, this.isInRange);
    };
    ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
      var j;
      var jLen = shapes.length;
      var pathNodes;
      var shapeStr = "";
      for (j = 0; j < jLen; j += 1) {
        if (shapes[j].ty === "sh") {
          pathNodes = shapes[j].ks.k;
          shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
        }
      }
      return shapeStr;
    };
    ITextElement.prototype.updateDocumentData = function(newData, index2) {
      this.textProperty.updateDocumentData(newData, index2);
    };
    ITextElement.prototype.canResizeFont = function(_canResize) {
      this.textProperty.canResizeFont(_canResize);
    };
    ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
      this.textProperty.setMinimumFontSize(_fontSize);
    };
    ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
      if (documentData.ps) {
        matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
      }
      matrixHelper.translate(0, -documentData.ls, 0);
      switch (documentData.j) {
        case 1:
          matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
          break;
        case 2:
          matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
          break;
      }
      matrixHelper.translate(xPos, yPos, 0);
    };
    ITextElement.prototype.buildColor = function(colorData) {
      return "rgb(" + Math.round(colorData[0] * 255) + "," + Math.round(colorData[1] * 255) + "," + Math.round(colorData[2] * 255) + ")";
    };
    ITextElement.prototype.emptyProp = new LetterProps();
    ITextElement.prototype.destroy = function() {
    };
    ITextElement.prototype.validateText = function() {
      if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
        this.buildNewText();
        this.textProperty._isFirstFrame = false;
        this.textProperty._mdf = false;
      }
    };
    var emptyShapeData = {
      shapes: []
    };
    function SVGTextLottieElement(data2, globalData2, comp2) {
      this.textSpans = [];
      this.renderType = "svg";
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextLottieElement);
    SVGTextLottieElement.prototype.createContent = function() {
      if (this.data.singleShape && !this.globalData.fontManager.chars) {
        this.textContainer = createNS("text");
      }
    };
    SVGTextLottieElement.prototype.buildTextContents = function(textArray) {
      var i2 = 0;
      var len = textArray.length;
      var textContents = [];
      var currentTextContent = "";
      while (i2 < len) {
        if (textArray[i2] === String.fromCharCode(13) || textArray[i2] === String.fromCharCode(3)) {
          textContents.push(currentTextContent);
          currentTextContent = "";
        } else {
          currentTextContent += textArray[i2];
        }
        i2 += 1;
      }
      textContents.push(currentTextContent);
      return textContents;
    };
    SVGTextLottieElement.prototype.buildShapeData = function(data2, scale2) {
      if (data2.shapes && data2.shapes.length) {
        var shape = data2.shapes[0];
        if (shape.it) {
          var shapeItem = shape.it[shape.it.length - 1];
          if (shapeItem.s) {
            shapeItem.s.k[0] = scale2;
            shapeItem.s.k[1] = scale2;
          }
        }
      }
      return data2;
    };
    SVGTextLottieElement.prototype.buildNewText = function() {
      this.addDynamicProperty(this);
      var i2;
      var len;
      var documentData = this.textProperty.currentData;
      this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
      if (documentData.fc) {
        this.layerElement.setAttribute("fill", this.buildColor(documentData.fc));
      } else {
        this.layerElement.setAttribute("fill", "rgba(0,0,0,0)");
      }
      if (documentData.sc) {
        this.layerElement.setAttribute("stroke", this.buildColor(documentData.sc));
        this.layerElement.setAttribute("stroke-width", documentData.sw);
      }
      this.layerElement.setAttribute("font-size", documentData.finalSize);
      var fontData = this.globalData.fontManager.getFontByName(documentData.f);
      if (fontData.fClass) {
        this.layerElement.setAttribute("class", fontData.fClass);
      } else {
        this.layerElement.setAttribute("font-family", fontData.fFamily);
        var fWeight = documentData.fWeight;
        var fStyle = documentData.fStyle;
        this.layerElement.setAttribute("font-style", fStyle);
        this.layerElement.setAttribute("font-weight", fWeight);
      }
      this.layerElement.setAttribute("aria-label", documentData.t);
      var letters = documentData.l || [];
      var usesGlyphs = !!this.globalData.fontManager.chars;
      len = letters.length;
      var tSpan;
      var matrixHelper = this.mHelper;
      var shapeStr = "";
      var singleShape = this.data.singleShape;
      var xPos = 0;
      var yPos = 0;
      var firstLine = true;
      var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
      if (singleShape && !usesGlyphs && !documentData.sz) {
        var tElement = this.textContainer;
        var justify = "start";
        switch (documentData.j) {
          case 1:
            justify = "end";
            break;
          case 2:
            justify = "middle";
            break;
          default:
            justify = "start";
            break;
        }
        tElement.setAttribute("text-anchor", justify);
        tElement.setAttribute("letter-spacing", trackingOffset);
        var textContent = this.buildTextContents(documentData.finalText);
        len = textContent.length;
        yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
        for (i2 = 0; i2 < len; i2 += 1) {
          tSpan = this.textSpans[i2].span || createNS("tspan");
          tSpan.textContent = textContent[i2];
          tSpan.setAttribute("x", 0);
          tSpan.setAttribute("y", yPos);
          tSpan.style.display = "inherit";
          tElement.appendChild(tSpan);
          if (!this.textSpans[i2]) {
            this.textSpans[i2] = {
              span: null,
              glyph: null
            };
          }
          this.textSpans[i2].span = tSpan;
          yPos += documentData.finalLineHeight;
        }
        this.layerElement.appendChild(tElement);
      } else {
        var cachedSpansLength = this.textSpans.length;
        var charData;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (!this.textSpans[i2]) {
            this.textSpans[i2] = {
              span: null,
              childSpan: null,
              glyph: null
            };
          }
          if (!usesGlyphs || !singleShape || i2 === 0) {
            tSpan = cachedSpansLength > i2 ? this.textSpans[i2].span : createNS(usesGlyphs ? "g" : "text");
            if (cachedSpansLength <= i2) {
              tSpan.setAttribute("stroke-linecap", "butt");
              tSpan.setAttribute("stroke-linejoin", "round");
              tSpan.setAttribute("stroke-miterlimit", "4");
              this.textSpans[i2].span = tSpan;
              if (usesGlyphs) {
                var childSpan = createNS("g");
                tSpan.appendChild(childSpan);
                this.textSpans[i2].childSpan = childSpan;
              }
              this.textSpans[i2].span = tSpan;
              this.layerElement.appendChild(tSpan);
            }
            tSpan.style.display = "inherit";
          }
          matrixHelper.reset();
          if (singleShape) {
            if (letters[i2].n) {
              xPos = -trackingOffset;
              yPos += documentData.yOffset;
              yPos += firstLine ? 1 : 0;
              firstLine = false;
            }
            this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i2].line, xPos, yPos);
            xPos += letters[i2].l || 0;
            xPos += trackingOffset;
          }
          if (usesGlyphs) {
            charData = this.globalData.fontManager.getCharData(documentData.finalText[i2], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
            var glyphElement;
            if (charData.t === 1) {
              glyphElement = new SVGCompElement(charData.data, this.globalData, this);
            } else {
              var data2 = emptyShapeData;
              if (charData.data && charData.data.shapes) {
                data2 = this.buildShapeData(charData.data, documentData.finalSize);
              }
              glyphElement = new SVGShapeElement(data2, this.globalData, this);
            }
            if (this.textSpans[i2].glyph) {
              var glyph = this.textSpans[i2].glyph;
              this.textSpans[i2].childSpan.removeChild(glyph.layerElement);
              glyph.destroy();
            }
            this.textSpans[i2].glyph = glyphElement;
            glyphElement._debug = true;
            glyphElement.prepareFrame(0);
            glyphElement.renderFrame();
            this.textSpans[i2].childSpan.appendChild(glyphElement.layerElement);
            if (charData.t === 1) {
              this.textSpans[i2].childSpan.setAttribute("transform", "scale(" + documentData.finalSize / 100 + "," + documentData.finalSize / 100 + ")");
            }
          } else {
            if (singleShape) {
              tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
            }
            tSpan.textContent = letters[i2].val;
            tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
          }
        }
        if (singleShape && tSpan) {
          tSpan.setAttribute("d", shapeStr);
        }
      }
      while (i2 < this.textSpans.length) {
        this.textSpans[i2].span.style.display = "none";
        i2 += 1;
      }
      this._sizeChanged = true;
    };
    SVGTextLottieElement.prototype.sourceRectAtTime = function() {
      this.prepareFrame(this.comp.renderedFrame - this.data.st);
      this.renderInnerContent();
      if (this._sizeChanged) {
        this._sizeChanged = false;
        var textBox = this.layerElement.getBBox();
        this.bbox = {
          top: textBox.y,
          left: textBox.x,
          width: textBox.width,
          height: textBox.height
        };
      }
      return this.bbox;
    };
    SVGTextLottieElement.prototype.getValue = function() {
      var i2;
      var len = this.textSpans.length;
      var glyphElement;
      this.renderedFrame = this.comp.renderedFrame;
      for (i2 = 0; i2 < len; i2 += 1) {
        glyphElement = this.textSpans[i2].glyph;
        if (glyphElement) {
          glyphElement.prepareFrame(this.comp.renderedFrame - this.data.st);
          if (glyphElement._mdf) {
            this._mdf = true;
          }
        }
      }
    };
    SVGTextLottieElement.prototype.renderInnerContent = function() {
      this.validateText();
      if (!this.data.singleShape || this._mdf) {
        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
          this._sizeChanged = true;
          var i2;
          var len;
          var renderedLetters = this.textAnimator.renderedLetters;
          var letters = this.textProperty.currentData.l;
          len = letters.length;
          var renderedLetter;
          var textSpan;
          var glyphElement;
          for (i2 = 0; i2 < len; i2 += 1) {
            if (!letters[i2].n) {
              renderedLetter = renderedLetters[i2];
              textSpan = this.textSpans[i2].span;
              glyphElement = this.textSpans[i2].glyph;
              if (glyphElement) {
                glyphElement.renderFrame();
              }
              if (renderedLetter._mdf.m) {
                textSpan.setAttribute("transform", renderedLetter.m);
              }
              if (renderedLetter._mdf.o) {
                textSpan.setAttribute("opacity", renderedLetter.o);
              }
              if (renderedLetter._mdf.sw) {
                textSpan.setAttribute("stroke-width", renderedLetter.sw);
              }
              if (renderedLetter._mdf.sc) {
                textSpan.setAttribute("stroke", renderedLetter.sc);
              }
              if (renderedLetter._mdf.fc) {
                textSpan.setAttribute("fill", renderedLetter.fc);
              }
            }
          }
        }
      }
    };
    function ISolidElement(data2, globalData2, comp2) {
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([IImageElement], ISolidElement);
    ISolidElement.prototype.createContent = function() {
      var rect = createNS("rect");
      rect.setAttribute("width", this.data.sw);
      rect.setAttribute("height", this.data.sh);
      rect.setAttribute("fill", this.data.sc);
      this.layerElement.appendChild(rect);
    };
    function NullElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.initFrame();
      this.initTransform(data2, globalData2, comp2);
      this.initHierarchy();
    }
    NullElement.prototype.prepareFrame = function(num) {
      this.prepareProperties(num, true);
    };
    NullElement.prototype.renderFrame = function() {
    };
    NullElement.prototype.getBaseElement = function() {
      return null;
    };
    NullElement.prototype.destroy = function() {
    };
    NullElement.prototype.sourceRectAtTime = function() {
    };
    NullElement.prototype.hide = function() {
    };
    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);
    function SVGRendererBase() {
    }
    extendPrototype([BaseRenderer], SVGRendererBase);
    SVGRendererBase.prototype.createNull = function(data2) {
      return new NullElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createShape = function(data2) {
      return new SVGShapeElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createText = function(data2) {
      return new SVGTextLottieElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createImage = function(data2) {
      return new IImageElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.createSolid = function(data2) {
      return new ISolidElement(data2, this.globalData, this);
    };
    SVGRendererBase.prototype.configAnimation = function(animData) {
      this.svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      this.svgElement.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
      if (this.renderConfig.viewBoxSize) {
        this.svgElement.setAttribute("viewBox", this.renderConfig.viewBoxSize);
      } else {
        this.svgElement.setAttribute("viewBox", "0 0 " + animData.w + " " + animData.h);
      }
      if (!this.renderConfig.viewBoxOnly) {
        this.svgElement.setAttribute("width", animData.w);
        this.svgElement.setAttribute("height", animData.h);
        this.svgElement.style.width = "100%";
        this.svgElement.style.height = "100%";
        this.svgElement.style.transform = "translate3d(0,0,0)";
        this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;
      }
      if (this.renderConfig.width) {
        this.svgElement.setAttribute("width", this.renderConfig.width);
      }
      if (this.renderConfig.height) {
        this.svgElement.setAttribute("height", this.renderConfig.height);
      }
      if (this.renderConfig.className) {
        this.svgElement.setAttribute("class", this.renderConfig.className);
      }
      if (this.renderConfig.id) {
        this.svgElement.setAttribute("id", this.renderConfig.id);
      }
      if (this.renderConfig.focusable !== void 0) {
        this.svgElement.setAttribute("focusable", this.renderConfig.focusable);
      }
      this.svgElement.setAttribute("preserveAspectRatio", this.renderConfig.preserveAspectRatio);
      this.animationItem.wrapper.appendChild(this.svgElement);
      var defs = this.globalData.defs;
      this.setupGlobalData(animData, defs);
      this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
      this.data = animData;
      var maskElement = createNS("clipPath");
      var rect = createNS("rect");
      rect.setAttribute("width", animData.w);
      rect.setAttribute("height", animData.h);
      rect.setAttribute("x", 0);
      rect.setAttribute("y", 0);
      var maskId = createElementID();
      maskElement.setAttribute("id", maskId);
      maskElement.appendChild(rect);
      this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + maskId + ")");
      defs.appendChild(maskElement);
      this.layers = animData.layers;
      this.elements = createSizedArray(animData.layers.length);
    };
    SVGRendererBase.prototype.destroy = function() {
      if (this.animationItem.wrapper) {
        this.animationItem.wrapper.innerText = "";
      }
      this.layerElement = null;
      this.globalData.defs = null;
      var i2;
      var len = this.layers ? this.layers.length : 0;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.elements[i2] && this.elements[i2].destroy) {
          this.elements[i2].destroy();
        }
      }
      this.elements.length = 0;
      this.destroyed = true;
      this.animationItem = null;
    };
    SVGRendererBase.prototype.updateContainerSize = function() {
    };
    SVGRendererBase.prototype.findIndexByInd = function(ind) {
      var i2 = 0;
      var len = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.layers[i2].ind === ind) {
          return i2;
        }
      }
      return -1;
    };
    SVGRendererBase.prototype.buildItem = function(pos) {
      var elements = this.elements;
      if (elements[pos] || this.layers[pos].ty === 99) {
        return;
      }
      elements[pos] = true;
      var element = this.createItem(this.layers[pos]);
      elements[pos] = element;
      if (getExpressionsPlugin()) {
        if (this.layers[pos].ty === 0) {
          this.globalData.projectInterface.registerComposition(element);
        }
        element.initExpressions();
      }
      this.appendElementInPos(element, pos);
      if (this.layers[pos].tt) {
        var elementIndex = "tp" in this.layers[pos] ? this.findIndexByInd(this.layers[pos].tp) : pos - 1;
        if (elementIndex === -1) {
          return;
        }
        if (!this.elements[elementIndex] || this.elements[elementIndex] === true) {
          this.buildItem(elementIndex);
          this.addPendingElement(element);
        } else {
          var matteElement = elements[elementIndex];
          var matteMask = matteElement.getMatte(this.layers[pos].tt);
          element.setMatte(matteMask);
        }
      }
    };
    SVGRendererBase.prototype.checkPendingElements = function() {
      while (this.pendingElements.length) {
        var element = this.pendingElements.pop();
        element.checkParenting();
        if (element.data.tt) {
          var i2 = 0;
          var len = this.elements.length;
          while (i2 < len) {
            if (this.elements[i2] === element) {
              var elementIndex = "tp" in element.data ? this.findIndexByInd(element.data.tp) : i2 - 1;
              var matteElement = this.elements[elementIndex];
              var matteMask = matteElement.getMatte(this.layers[i2].tt);
              element.setMatte(matteMask);
              break;
            }
            i2 += 1;
          }
        }
      }
    };
    SVGRendererBase.prototype.renderFrame = function(num) {
      if (this.renderedFrame === num || this.destroyed) {
        return;
      }
      if (num === null) {
        num = this.renderedFrame;
      } else {
        this.renderedFrame = num;
      }
      this.globalData.frameNum = num;
      this.globalData.frameId += 1;
      this.globalData.projectInterface.currentFrame = num;
      this.globalData._mdf = false;
      var i2;
      var len = this.layers.length;
      if (!this.completeLayers) {
        this.checkLayers(num);
      }
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].prepareFrame(num - this.layers[i2].st);
        }
      }
      if (this.globalData._mdf) {
        for (i2 = 0; i2 < len; i2 += 1) {
          if (this.completeLayers || this.elements[i2]) {
            this.elements[i2].renderFrame();
          }
        }
      }
    };
    SVGRendererBase.prototype.appendElementInPos = function(element, pos) {
      var newElement = element.getBaseElement();
      if (!newElement) {
        return;
      }
      var i2 = 0;
      var nextElement;
      while (i2 < pos) {
        if (this.elements[i2] && this.elements[i2] !== true && this.elements[i2].getBaseElement()) {
          nextElement = this.elements[i2].getBaseElement();
        }
        i2 += 1;
      }
      if (nextElement) {
        this.layerElement.insertBefore(newElement, nextElement);
      } else {
        this.layerElement.appendChild(newElement);
      }
    };
    SVGRendererBase.prototype.hide = function() {
      this.layerElement.style.display = "none";
    };
    SVGRendererBase.prototype.show = function() {
      this.layerElement.style.display = "block";
    };
    function ICompElement() {
    }
    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);
    ICompElement.prototype.initElement = function(data2, globalData2, comp2) {
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.initTransform(data2, globalData2, comp2);
      this.initRenderable();
      this.initHierarchy();
      this.initRendererElement();
      this.createContainerElements();
      this.createRenderableComponents();
      if (this.data.xt || !globalData2.progressiveLoad) {
        this.buildAllItems();
      }
      this.hide();
    };
    ICompElement.prototype.prepareFrame = function(num) {
      this._mdf = false;
      this.prepareRenderableFrame(num);
      this.prepareProperties(num, this.isInRange);
      if (!this.isInRange && !this.data.xt) {
        return;
      }
      if (!this.tm._placeholder) {
        var timeRemapped = this.tm.v;
        if (timeRemapped === this.data.op) {
          timeRemapped = this.data.op - 1;
        }
        this.renderedFrame = timeRemapped;
      } else {
        this.renderedFrame = num / this.data.sr;
      }
      var i2;
      var len = this.elements.length;
      if (!this.completeLayers) {
        this.checkLayers(this.renderedFrame);
      }
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].prepareFrame(this.renderedFrame - this.layers[i2].st);
          if (this.elements[i2]._mdf) {
            this._mdf = true;
          }
        }
      }
    };
    ICompElement.prototype.renderInnerContent = function() {
      var i2;
      var len = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].renderFrame();
        }
      }
    };
    ICompElement.prototype.setElements = function(elems) {
      this.elements = elems;
    };
    ICompElement.prototype.getElements = function() {
      return this.elements;
    };
    ICompElement.prototype.destroyElements = function() {
      var i2;
      var len = this.layers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.elements[i2]) {
          this.elements[i2].destroy();
        }
      }
    };
    ICompElement.prototype.destroy = function() {
      this.destroyElements();
      this.destroyBaseElement();
    };
    function SVGCompElement(data2, globalData2, comp2) {
      this.layers = data2.layers;
      this.supports3d = true;
      this.completeLayers = false;
      this.pendingElements = [];
      this.elements = this.layers ? createSizedArray(this.layers.length) : [];
      this.initElement(data2, globalData2, comp2);
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
    }
    extendPrototype([SVGRendererBase, ICompElement, SVGBaseElement], SVGCompElement);
    SVGCompElement.prototype.createComp = function(data2) {
      return new SVGCompElement(data2, this.globalData, this);
    };
    function SVGRenderer(animationItem, config2) {
      this.animationItem = animationItem;
      this.layers = null;
      this.renderedFrame = -1;
      this.svgElement = createNS("svg");
      var ariaLabel = "";
      if (config2 && config2.title) {
        var titleElement = createNS("title");
        var titleId = createElementID();
        titleElement.setAttribute("id", titleId);
        titleElement.textContent = config2.title;
        this.svgElement.appendChild(titleElement);
        ariaLabel += titleId;
      }
      if (config2 && config2.description) {
        var descElement = createNS("desc");
        var descId = createElementID();
        descElement.setAttribute("id", descId);
        descElement.textContent = config2.description;
        this.svgElement.appendChild(descElement);
        ariaLabel += " " + descId;
      }
      if (ariaLabel) {
        this.svgElement.setAttribute("aria-labelledby", ariaLabel);
      }
      var defs = createNS("defs");
      this.svgElement.appendChild(defs);
      var maskElement = createNS("g");
      this.svgElement.appendChild(maskElement);
      this.layerElement = maskElement;
      this.renderConfig = {
        preserveAspectRatio: config2 && config2.preserveAspectRatio || "xMidYMid meet",
        imagePreserveAspectRatio: config2 && config2.imagePreserveAspectRatio || "xMidYMid slice",
        contentVisibility: config2 && config2.contentVisibility || "visible",
        progressiveLoad: config2 && config2.progressiveLoad || false,
        hideOnTransparent: !(config2 && config2.hideOnTransparent === false),
        viewBoxOnly: config2 && config2.viewBoxOnly || false,
        viewBoxSize: config2 && config2.viewBoxSize || false,
        className: config2 && config2.className || "",
        id: config2 && config2.id || "",
        focusable: config2 && config2.focusable,
        filterSize: {
          width: config2 && config2.filterSize && config2.filterSize.width || "100%",
          height: config2 && config2.filterSize && config2.filterSize.height || "100%",
          x: config2 && config2.filterSize && config2.filterSize.x || "0%",
          y: config2 && config2.filterSize && config2.filterSize.y || "0%"
        },
        width: config2 && config2.width,
        height: config2 && config2.height,
        runExpressions: !config2 || config2.runExpressions === void 0 || config2.runExpressions
      };
      this.globalData = {
        _mdf: false,
        frameNum: -1,
        defs,
        renderConfig: this.renderConfig
      };
      this.elements = [];
      this.pendingElements = [];
      this.destroyed = false;
      this.rendererType = "svg";
    }
    extendPrototype([SVGRendererBase], SVGRenderer);
    SVGRenderer.prototype.createComp = function(data2) {
      return new SVGCompElement(data2, this.globalData, this);
    };
    function ShapeTransformManager() {
      this.sequences = {};
      this.sequenceList = [];
      this.transform_key_count = 0;
    }
    ShapeTransformManager.prototype = {
      addTransformSequence: function addTransformSequence(transforms) {
        var i2;
        var len = transforms.length;
        var key2 = "_";
        for (i2 = 0; i2 < len; i2 += 1) {
          key2 += transforms[i2].transform.key + "_";
        }
        var sequence = this.sequences[key2];
        if (!sequence) {
          sequence = {
            transforms: [].concat(transforms),
            finalTransform: new Matrix(),
            _mdf: false
          };
          this.sequences[key2] = sequence;
          this.sequenceList.push(sequence);
        }
        return sequence;
      },
      processSequence: function processSequence(sequence, isFirstFrame) {
        var i2 = 0;
        var len = sequence.transforms.length;
        var _mdf = isFirstFrame;
        while (i2 < len && !isFirstFrame) {
          if (sequence.transforms[i2].transform.mProps._mdf) {
            _mdf = true;
            break;
          }
          i2 += 1;
        }
        if (_mdf) {
          sequence.finalTransform.reset();
          for (i2 = len - 1; i2 >= 0; i2 -= 1) {
            sequence.finalTransform.multiply(sequence.transforms[i2].transform.mProps.v);
          }
        }
        sequence._mdf = _mdf;
      },
      processSequences: function processSequences(isFirstFrame) {
        var i2;
        var len = this.sequenceList.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.processSequence(this.sequenceList[i2], isFirstFrame);
        }
      },
      getNewKey: function getNewKey() {
        this.transform_key_count += 1;
        return "_" + this.transform_key_count;
      }
    };
    var lumaLoader = function lumaLoader2() {
      var id2 = "__lottie_element_luma_buffer";
      var lumaBuffer = null;
      var lumaBufferCtx = null;
      var svg = null;
      function createLumaSvgFilter() {
        var _svg = createNS("svg");
        var fil = createNS("filter");
        var matrix = createNS("feColorMatrix");
        fil.setAttribute("id", id2);
        matrix.setAttribute("type", "matrix");
        matrix.setAttribute("color-interpolation-filters", "sRGB");
        matrix.setAttribute("values", "0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0");
        fil.appendChild(matrix);
        _svg.appendChild(fil);
        _svg.setAttribute("id", id2 + "_svg");
        if (featureSupport.svgLumaHidden) {
          _svg.style.display = "none";
        }
        return _svg;
      }
      function loadLuma() {
        if (!lumaBuffer) {
          svg = createLumaSvgFilter();
          document.body.appendChild(svg);
          lumaBuffer = createTag("canvas");
          lumaBufferCtx = lumaBuffer.getContext("2d");
          lumaBufferCtx.filter = "url(#" + id2 + ")";
          lumaBufferCtx.fillStyle = "rgba(0,0,0,0)";
          lumaBufferCtx.fillRect(0, 0, 1, 1);
        }
      }
      function getLuma(canvas) {
        if (!lumaBuffer) {
          loadLuma();
        }
        lumaBuffer.width = canvas.width;
        lumaBuffer.height = canvas.height;
        lumaBufferCtx.filter = "url(#" + id2 + ")";
        return lumaBuffer;
      }
      return {
        load: loadLuma,
        get: getLuma
      };
    };
    function createCanvas(width2, height2) {
      if (featureSupport.offscreenCanvas) {
        return new OffscreenCanvas(width2, height2);
      }
      var canvas = createTag("canvas");
      canvas.width = width2;
      canvas.height = height2;
      return canvas;
    }
    var assetLoader = function() {
      return {
        loadLumaCanvas: lumaLoader.load,
        getLumaCanvas: lumaLoader.get,
        createCanvas
      };
    }();
    var registeredEffects = {};
    function CVEffects(elem2) {
      var i2;
      var len = elem2.data.ef ? elem2.data.ef.length : 0;
      this.filters = [];
      var filterManager;
      for (i2 = 0; i2 < len; i2 += 1) {
        filterManager = null;
        var type = elem2.data.ef[i2].ty;
        if (registeredEffects[type]) {
          var Effect = registeredEffects[type].effect;
          filterManager = new Effect(elem2.effectsManager.effectElements[i2], elem2);
        }
        if (filterManager) {
          this.filters.push(filterManager);
        }
      }
      if (this.filters.length) {
        elem2.addRenderableComponent(this);
      }
    }
    CVEffects.prototype.renderFrame = function(_isFirstFrame) {
      var i2;
      var len = this.filters.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.filters[i2].renderFrame(_isFirstFrame);
      }
    };
    CVEffects.prototype.getEffects = function(type) {
      var i2;
      var len = this.filters.length;
      var effects = [];
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.filters[i2].type === type) {
          effects.push(this.filters[i2]);
        }
      }
      return effects;
    };
    function registerEffect(id2, effect2) {
      registeredEffects[id2] = {
        effect: effect2
      };
    }
    function CVMaskElement(data2, element) {
      this.data = data2;
      this.element = element;
      this.masksProperties = this.data.masksProperties || [];
      this.viewData = createSizedArray(this.masksProperties.length);
      var i2;
      var len = this.masksProperties.length;
      var hasMasks = false;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.masksProperties[i2].mode !== "n") {
          hasMasks = true;
        }
        this.viewData[i2] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i2], 3);
      }
      this.hasMasks = hasMasks;
      if (hasMasks) {
        this.element.addRenderableComponent(this);
      }
    }
    CVMaskElement.prototype.renderFrame = function() {
      if (!this.hasMasks) {
        return;
      }
      var transform2 = this.element.finalTransform.mat;
      var ctx2 = this.element.canvasContext;
      var i2;
      var len = this.masksProperties.length;
      var pt;
      var pts;
      var data2;
      ctx2.beginPath();
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.masksProperties[i2].mode !== "n") {
          if (this.masksProperties[i2].inv) {
            ctx2.moveTo(0, 0);
            ctx2.lineTo(this.element.globalData.compSize.w, 0);
            ctx2.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
            ctx2.lineTo(0, this.element.globalData.compSize.h);
            ctx2.lineTo(0, 0);
          }
          data2 = this.viewData[i2].v;
          pt = transform2.applyToPointArray(data2.v[0][0], data2.v[0][1], 0);
          ctx2.moveTo(pt[0], pt[1]);
          var j;
          var jLen = data2._length;
          for (j = 1; j < jLen; j += 1) {
            pts = transform2.applyToTriplePoints(data2.o[j - 1], data2.i[j], data2.v[j]);
            ctx2.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
          }
          pts = transform2.applyToTriplePoints(data2.o[j - 1], data2.i[0], data2.v[0]);
          ctx2.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
        }
      }
      this.element.globalData.renderer.save(true);
      ctx2.clip();
    };
    CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;
    CVMaskElement.prototype.destroy = function() {
      this.element = null;
    };
    function CVBaseElement() {
    }
    var operationsMap = {
      1: "source-in",
      2: "source-out",
      3: "source-in",
      4: "source-out"
    };
    CVBaseElement.prototype = {
      createElements: function createElements() {
      },
      initRendererElement: function initRendererElement() {
      },
      createContainerElements: function createContainerElements() {
        if (this.data.tt >= 1) {
          this.buffers = [];
          var canvasContext = this.globalData.canvasContext;
          var bufferCanvas = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
          this.buffers.push(bufferCanvas);
          var bufferCanvas2 = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
          this.buffers.push(bufferCanvas2);
          if (this.data.tt >= 3 && !document._isProxy) {
            assetLoader.loadLumaCanvas();
          }
        }
        this.canvasContext = this.globalData.canvasContext;
        this.transformCanvas = this.globalData.transformCanvas;
        this.renderableEffectsManager = new CVEffects(this);
        this.searchEffectTransforms();
      },
      createContent: function createContent() {
      },
      setBlendMode: function setBlendMode() {
        var globalData2 = this.globalData;
        if (globalData2.blendMode !== this.data.bm) {
          globalData2.blendMode = this.data.bm;
          var blendModeValue = getBlendMode(this.data.bm);
          globalData2.canvasContext.globalCompositeOperation = blendModeValue;
        }
      },
      createRenderableComponents: function createRenderableComponents() {
        this.maskManager = new CVMaskElement(this.data, this);
        this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
      },
      hideElement: function hideElement() {
        if (!this.hidden && (!this.isInRange || this.isTransparent)) {
          this.hidden = true;
        }
      },
      showElement: function showElement() {
        if (this.isInRange && !this.isTransparent) {
          this.hidden = false;
          this._isFirstFrame = true;
          this.maskManager._isFirstFrame = true;
        }
      },
      clearCanvas: function clearCanvas(canvasContext) {
        canvasContext.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);
      },
      prepareLayer: function prepareLayer() {
        if (this.data.tt >= 1) {
          var buffer = this.buffers[0];
          var bufferCtx = buffer.getContext("2d");
          this.clearCanvas(bufferCtx);
          bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
          this.currentTransform = this.canvasContext.getTransform();
          this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
          this.clearCanvas(this.canvasContext);
          this.canvasContext.setTransform(this.currentTransform);
        }
      },
      exitLayer: function exitLayer() {
        if (this.data.tt >= 1) {
          var buffer = this.buffers[1];
          var bufferCtx = buffer.getContext("2d");
          this.clearCanvas(bufferCtx);
          bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
          this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
          this.clearCanvas(this.canvasContext);
          this.canvasContext.setTransform(this.currentTransform);
          var mask2 = this.comp.getElementById("tp" in this.data ? this.data.tp : this.data.ind - 1);
          mask2.renderFrame(true);
          this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
          if (this.data.tt >= 3 && !document._isProxy) {
            var lumaBuffer = assetLoader.getLumaCanvas(this.canvasContext.canvas);
            var lumaBufferCtx = lumaBuffer.getContext("2d");
            lumaBufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
            this.clearCanvas(this.canvasContext);
            this.canvasContext.drawImage(lumaBuffer, 0, 0);
          }
          this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt];
          this.canvasContext.drawImage(buffer, 0, 0);
          this.canvasContext.globalCompositeOperation = "destination-over";
          this.canvasContext.drawImage(this.buffers[0], 0, 0);
          this.canvasContext.setTransform(this.currentTransform);
          this.canvasContext.globalCompositeOperation = "source-over";
        }
      },
      renderFrame: function renderFrame(forceRender) {
        if (this.hidden || this.data.hd) {
          return;
        }
        if (this.data.td === 1 && !forceRender) {
          return;
        }
        this.renderTransform();
        this.renderRenderable();
        this.renderLocalTransform();
        this.setBlendMode();
        var forceRealStack = this.data.ty === 0;
        this.prepareLayer();
        this.globalData.renderer.save(forceRealStack);
        this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);
        this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);
        this.renderInnerContent();
        this.globalData.renderer.restore(forceRealStack);
        this.exitLayer();
        if (this.maskManager.hasMasks) {
          this.globalData.renderer.restore(true);
        }
        if (this._isFirstFrame) {
          this._isFirstFrame = false;
        }
      },
      destroy: function destroy() {
        this.canvasContext = null;
        this.data = null;
        this.globalData = null;
        this.maskManager.destroy();
      },
      mHelper: new Matrix()
    };
    CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
    CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;
    function CVShapeData(element, data2, styles2, transformsManager) {
      this.styledShapes = [];
      this.tr = [0, 0, 0, 0, 0, 0];
      var ty = 4;
      if (data2.ty === "rc") {
        ty = 5;
      } else if (data2.ty === "el") {
        ty = 6;
      } else if (data2.ty === "sr") {
        ty = 7;
      }
      this.sh = ShapePropertyFactory.getShapeProp(element, data2, ty, element);
      var i2;
      var len = styles2.length;
      var styledShape;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (!styles2[i2].closed) {
          styledShape = {
            transforms: transformsManager.addTransformSequence(styles2[i2].transforms),
            trNodes: []
          };
          this.styledShapes.push(styledShape);
          styles2[i2].elements.push(styledShape);
        }
      }
    }
    CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;
    function CVShapeElement(data2, globalData2, comp2) {
      this.shapes = [];
      this.shapesData = data2.shapes;
      this.stylesList = [];
      this.itemsData = [];
      this.prevViewData = [];
      this.shapeModifiers = [];
      this.processedElements = [];
      this.transformsManager = new ShapeTransformManager();
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement);
    CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;
    CVShapeElement.prototype.transformHelper = {
      opacity: 1,
      _opMdf: false
    };
    CVShapeElement.prototype.dashResetter = [];
    CVShapeElement.prototype.createContent = function() {
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
    };
    CVShapeElement.prototype.createStyleElement = function(data2, transforms) {
      var styleElem = {
        data: data2,
        type: data2.ty,
        preTransforms: this.transformsManager.addTransformSequence(transforms),
        transforms: [],
        elements: [],
        closed: data2.hd === true
      };
      var elementData = {};
      if (data2.ty === "fl" || data2.ty === "st") {
        elementData.c = PropertyFactory.getProp(this, data2.c, 1, 255, this);
        if (!elementData.c.k) {
          styleElem.co = "rgb(" + bmFloor(elementData.c.v[0]) + "," + bmFloor(elementData.c.v[1]) + "," + bmFloor(elementData.c.v[2]) + ")";
        }
      } else if (data2.ty === "gf" || data2.ty === "gs") {
        elementData.s = PropertyFactory.getProp(this, data2.s, 1, null, this);
        elementData.e = PropertyFactory.getProp(this, data2.e, 1, null, this);
        elementData.h = PropertyFactory.getProp(this, data2.h || {
          k: 0
        }, 0, 0.01, this);
        elementData.a = PropertyFactory.getProp(this, data2.a || {
          k: 0
        }, 0, degToRads, this);
        elementData.g = new GradientProperty(this, data2.g, this);
      }
      elementData.o = PropertyFactory.getProp(this, data2.o, 0, 0.01, this);
      if (data2.ty === "st" || data2.ty === "gs") {
        styleElem.lc = lineCapEnum[data2.lc || 2];
        styleElem.lj = lineJoinEnum[data2.lj || 2];
        if (data2.lj == 1) {
          styleElem.ml = data2.ml;
        }
        elementData.w = PropertyFactory.getProp(this, data2.w, 0, null, this);
        if (!elementData.w.k) {
          styleElem.wi = elementData.w.v;
        }
        if (data2.d) {
          var d4 = new DashProperty(this, data2.d, "canvas", this);
          elementData.d = d4;
          if (!elementData.d.k) {
            styleElem.da = elementData.d.dashArray;
            styleElem["do"] = elementData.d.dashoffset[0];
          }
        }
      } else {
        styleElem.r = data2.r === 2 ? "evenodd" : "nonzero";
      }
      this.stylesList.push(styleElem);
      elementData.style = styleElem;
      return elementData;
    };
    CVShapeElement.prototype.createGroupElement = function() {
      var elementData = {
        it: [],
        prevViewData: []
      };
      return elementData;
    };
    CVShapeElement.prototype.createTransformElement = function(data2) {
      var elementData = {
        transform: {
          opacity: 1,
          _opMdf: false,
          key: this.transformsManager.getNewKey(),
          op: PropertyFactory.getProp(this, data2.o, 0, 0.01, this),
          mProps: TransformPropertyFactory.getTransformProperty(this, data2, this)
        }
      };
      return elementData;
    };
    CVShapeElement.prototype.createShapeElement = function(data2) {
      var elementData = new CVShapeData(this, data2, this.stylesList, this.transformsManager);
      this.shapes.push(elementData);
      this.addShapeToModifiers(elementData);
      return elementData;
    };
    CVShapeElement.prototype.reloadShapes = function() {
      this._isFirstFrame = true;
      var i2;
      var len = this.itemsData.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.prevViewData[i2] = this.itemsData[i2];
      }
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
      len = this.dynamicProperties.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        this.dynamicProperties[i2].getValue();
      }
      this.renderModifiers();
      this.transformsManager.processSequences(this._isFirstFrame);
    };
    CVShapeElement.prototype.addTransformToStyleList = function(transform2) {
      var i2;
      var len = this.stylesList.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (!this.stylesList[i2].closed) {
          this.stylesList[i2].transforms.push(transform2);
        }
      }
    };
    CVShapeElement.prototype.removeTransformFromStyleList = function() {
      var i2;
      var len = this.stylesList.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (!this.stylesList[i2].closed) {
          this.stylesList[i2].transforms.pop();
        }
      }
    };
    CVShapeElement.prototype.closeStyles = function(styles2) {
      var i2;
      var len = styles2.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        styles2[i2].closed = true;
      }
    };
    CVShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, shouldRender, transforms) {
      var i2;
      var len = arr.length - 1;
      var j;
      var jLen;
      var ownStyles = [];
      var ownModifiers = [];
      var processedPos;
      var modifier;
      var currentTransform;
      var ownTransforms = [].concat(transforms);
      for (i2 = len; i2 >= 0; i2 -= 1) {
        processedPos = this.searchProcessedElement(arr[i2]);
        if (!processedPos) {
          arr[i2]._shouldRender = shouldRender;
        } else {
          itemsData[i2] = prevViewData[processedPos - 1];
        }
        if (arr[i2].ty === "fl" || arr[i2].ty === "st" || arr[i2].ty === "gf" || arr[i2].ty === "gs") {
          if (!processedPos) {
            itemsData[i2] = this.createStyleElement(arr[i2], ownTransforms);
          } else {
            itemsData[i2].style.closed = false;
          }
          ownStyles.push(itemsData[i2].style);
        } else if (arr[i2].ty === "gr") {
          if (!processedPos) {
            itemsData[i2] = this.createGroupElement(arr[i2]);
          } else {
            jLen = itemsData[i2].it.length;
            for (j = 0; j < jLen; j += 1) {
              itemsData[i2].prevViewData[j] = itemsData[i2].it[j];
            }
          }
          this.searchShapes(arr[i2].it, itemsData[i2].it, itemsData[i2].prevViewData, shouldRender, ownTransforms);
        } else if (arr[i2].ty === "tr") {
          if (!processedPos) {
            currentTransform = this.createTransformElement(arr[i2]);
            itemsData[i2] = currentTransform;
          }
          ownTransforms.push(itemsData[i2]);
          this.addTransformToStyleList(itemsData[i2]);
        } else if (arr[i2].ty === "sh" || arr[i2].ty === "rc" || arr[i2].ty === "el" || arr[i2].ty === "sr") {
          if (!processedPos) {
            itemsData[i2] = this.createShapeElement(arr[i2]);
          }
        } else if (arr[i2].ty === "tm" || arr[i2].ty === "rd" || arr[i2].ty === "pb" || arr[i2].ty === "zz" || arr[i2].ty === "op") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i2].ty);
            modifier.init(this, arr[i2]);
            itemsData[i2] = modifier;
            this.shapeModifiers.push(modifier);
          } else {
            modifier = itemsData[i2];
            modifier.closed = false;
          }
          ownModifiers.push(modifier);
        } else if (arr[i2].ty === "rp") {
          if (!processedPos) {
            modifier = ShapeModifiers.getModifier(arr[i2].ty);
            itemsData[i2] = modifier;
            modifier.init(this, arr, i2, itemsData);
            this.shapeModifiers.push(modifier);
            shouldRender = false;
          } else {
            modifier = itemsData[i2];
            modifier.closed = true;
          }
          ownModifiers.push(modifier);
        }
        this.addProcessedElement(arr[i2], i2 + 1);
      }
      this.removeTransformFromStyleList();
      this.closeStyles(ownStyles);
      len = ownModifiers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        ownModifiers[i2].closed = true;
      }
    };
    CVShapeElement.prototype.renderInnerContent = function() {
      this.transformHelper.opacity = 1;
      this.transformHelper._opMdf = false;
      this.renderModifiers();
      this.transformsManager.processSequences(this._isFirstFrame);
      this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);
    };
    CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {
      if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
        groupTransform.opacity = parentTransform.opacity;
        groupTransform.opacity *= groupTransform.op.v;
        groupTransform._opMdf = true;
      }
    };
    CVShapeElement.prototype.drawLayer = function() {
      var i2;
      var len = this.stylesList.length;
      var j;
      var jLen;
      var k3;
      var kLen;
      var elems;
      var nodes;
      var renderer = this.globalData.renderer;
      var ctx2 = this.globalData.canvasContext;
      var type;
      var currentStyle;
      for (i2 = 0; i2 < len; i2 += 1) {
        currentStyle = this.stylesList[i2];
        type = currentStyle.type;
        if (!((type === "st" || type === "gs") && currentStyle.wi === 0 || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {
          renderer.save();
          elems = currentStyle.elements;
          if (type === "st" || type === "gs") {
            renderer.ctxStrokeStyle(type === "st" ? currentStyle.co : currentStyle.grd);
            renderer.ctxLineWidth(currentStyle.wi);
            renderer.ctxLineCap(currentStyle.lc);
            renderer.ctxLineJoin(currentStyle.lj);
            renderer.ctxMiterLimit(currentStyle.ml || 0);
          } else {
            renderer.ctxFillStyle(type === "fl" ? currentStyle.co : currentStyle.grd);
          }
          renderer.ctxOpacity(currentStyle.coOp);
          if (type !== "st" && type !== "gs") {
            ctx2.beginPath();
          }
          renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);
          jLen = elems.length;
          for (j = 0; j < jLen; j += 1) {
            if (type === "st" || type === "gs") {
              ctx2.beginPath();
              if (currentStyle.da) {
                ctx2.setLineDash(currentStyle.da);
                ctx2.lineDashOffset = currentStyle["do"];
              }
            }
            nodes = elems[j].trNodes;
            kLen = nodes.length;
            for (k3 = 0; k3 < kLen; k3 += 1) {
              if (nodes[k3].t === "m") {
                ctx2.moveTo(nodes[k3].p[0], nodes[k3].p[1]);
              } else if (nodes[k3].t === "c") {
                ctx2.bezierCurveTo(nodes[k3].pts[0], nodes[k3].pts[1], nodes[k3].pts[2], nodes[k3].pts[3], nodes[k3].pts[4], nodes[k3].pts[5]);
              } else {
                ctx2.closePath();
              }
            }
            if (type === "st" || type === "gs") {
              renderer.ctxStroke();
              if (currentStyle.da) {
                ctx2.setLineDash(this.dashResetter);
              }
            }
          }
          if (type !== "st" && type !== "gs") {
            this.globalData.renderer.ctxFill(currentStyle.r);
          }
          renderer.restore();
        }
      }
    };
    CVShapeElement.prototype.renderShape = function(parentTransform, items, data2, isMain) {
      var i2;
      var len = items.length - 1;
      var groupTransform;
      groupTransform = parentTransform;
      for (i2 = len; i2 >= 0; i2 -= 1) {
        if (items[i2].ty === "tr") {
          groupTransform = data2[i2].transform;
          this.renderShapeTransform(parentTransform, groupTransform);
        } else if (items[i2].ty === "sh" || items[i2].ty === "el" || items[i2].ty === "rc" || items[i2].ty === "sr") {
          this.renderPath(items[i2], data2[i2]);
        } else if (items[i2].ty === "fl") {
          this.renderFill(items[i2], data2[i2], groupTransform);
        } else if (items[i2].ty === "st") {
          this.renderStroke(items[i2], data2[i2], groupTransform);
        } else if (items[i2].ty === "gf" || items[i2].ty === "gs") {
          this.renderGradientFill(items[i2], data2[i2], groupTransform);
        } else if (items[i2].ty === "gr") {
          this.renderShape(groupTransform, items[i2].it, data2[i2].it);
        } else if (items[i2].ty === "tm")
          ;
      }
      if (isMain) {
        this.drawLayer();
      }
    };
    CVShapeElement.prototype.renderStyledShape = function(styledShape, shape) {
      if (this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {
        var shapeNodes = styledShape.trNodes;
        var paths = shape.paths;
        var i2;
        var len;
        var j;
        var jLen = paths._length;
        shapeNodes.length = 0;
        var groupTransformMat = styledShape.transforms.finalTransform;
        for (j = 0; j < jLen; j += 1) {
          var pathNodes = paths.shapes[j];
          if (pathNodes && pathNodes.v) {
            len = pathNodes._length;
            for (i2 = 1; i2 < len; i2 += 1) {
              if (i2 === 1) {
                shapeNodes.push({
                  t: "m",
                  p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                });
              }
              shapeNodes.push({
                t: "c",
                pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i2 - 1], pathNodes.i[i2], pathNodes.v[i2])
              });
            }
            if (len === 1) {
              shapeNodes.push({
                t: "m",
                p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
              });
            }
            if (pathNodes.c && len) {
              shapeNodes.push({
                t: "c",
                pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i2 - 1], pathNodes.i[0], pathNodes.v[0])
              });
              shapeNodes.push({
                t: "z"
              });
            }
          }
        }
        styledShape.trNodes = shapeNodes;
      }
    };
    CVShapeElement.prototype.renderPath = function(pathData, itemData) {
      if (pathData.hd !== true && pathData._shouldRender) {
        var i2;
        var len = itemData.styledShapes.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          this.renderStyledShape(itemData.styledShapes[i2], itemData.sh);
        }
      }
    };
    CVShapeElement.prototype.renderFill = function(styleData, itemData, groupTransform) {
      var styleElem = itemData.style;
      if (itemData.c._mdf || this._isFirstFrame) {
        styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
      }
      if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
        styleElem.coOp = itemData.o.v * groupTransform.opacity;
      }
    };
    CVShapeElement.prototype.renderGradientFill = function(styleData, itemData, groupTransform) {
      var styleElem = itemData.style;
      var grd;
      if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf)) {
        var ctx2 = this.globalData.canvasContext;
        var pt1 = itemData.s.v;
        var pt2 = itemData.e.v;
        if (styleData.t === 1) {
          grd = ctx2.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
        } else {
          var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
          var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
          var percent = itemData.h.v;
          if (percent >= 1) {
            percent = 0.99;
          } else if (percent <= -1) {
            percent = -0.99;
          }
          var dist = rad * percent;
          var x3 = Math.cos(ang + itemData.a.v) * dist + pt1[0];
          var y4 = Math.sin(ang + itemData.a.v) * dist + pt1[1];
          grd = ctx2.createRadialGradient(x3, y4, 0, pt1[0], pt1[1], rad);
        }
        var i2;
        var len = styleData.g.p;
        var cValues = itemData.g.c;
        var opacity = 1;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (itemData.g._hasOpacity && itemData.g._collapsable) {
            opacity = itemData.g.o[i2 * 2 + 1];
          }
          grd.addColorStop(cValues[i2 * 4] / 100, "rgba(" + cValues[i2 * 4 + 1] + "," + cValues[i2 * 4 + 2] + "," + cValues[i2 * 4 + 3] + "," + opacity + ")");
        }
        styleElem.grd = grd;
      }
      styleElem.coOp = itemData.o.v * groupTransform.opacity;
    };
    CVShapeElement.prototype.renderStroke = function(styleData, itemData, groupTransform) {
      var styleElem = itemData.style;
      var d4 = itemData.d;
      if (d4 && (d4._mdf || this._isFirstFrame)) {
        styleElem.da = d4.dashArray;
        styleElem["do"] = d4.dashoffset[0];
      }
      if (itemData.c._mdf || this._isFirstFrame) {
        styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
      }
      if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
        styleElem.coOp = itemData.o.v * groupTransform.opacity;
      }
      if (itemData.w._mdf || this._isFirstFrame) {
        styleElem.wi = itemData.w.v;
      }
    };
    CVShapeElement.prototype.destroy = function() {
      this.shapesData = null;
      this.globalData = null;
      this.canvasContext = null;
      this.stylesList.length = 0;
      this.itemsData.length = 0;
    };
    function CVTextElement(data2, globalData2, comp2) {
      this.textSpans = [];
      this.yOffset = 0;
      this.fillColorAnim = false;
      this.strokeColorAnim = false;
      this.strokeWidthAnim = false;
      this.stroke = false;
      this.fill = false;
      this.justifyOffset = 0;
      this.currentRender = null;
      this.renderType = "canvas";
      this.values = {
        fill: "rgba(0,0,0,0)",
        stroke: "rgba(0,0,0,0)",
        sWidth: 0,
        fValue: ""
      };
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement);
    CVTextElement.prototype.tHelper = createTag("canvas").getContext("2d");
    CVTextElement.prototype.buildNewText = function() {
      var documentData = this.textProperty.currentData;
      this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
      var hasFill = false;
      if (documentData.fc) {
        hasFill = true;
        this.values.fill = this.buildColor(documentData.fc);
      } else {
        this.values.fill = "rgba(0,0,0,0)";
      }
      this.fill = hasFill;
      var hasStroke = false;
      if (documentData.sc) {
        hasStroke = true;
        this.values.stroke = this.buildColor(documentData.sc);
        this.values.sWidth = documentData.sw;
      }
      var fontData = this.globalData.fontManager.getFontByName(documentData.f);
      var i2;
      var len;
      var letters = documentData.l;
      var matrixHelper = this.mHelper;
      this.stroke = hasStroke;
      this.values.fValue = documentData.finalSize + "px " + this.globalData.fontManager.getFontByName(documentData.f).fFamily;
      len = documentData.finalText.length;
      var charData;
      var shapeData;
      var k3;
      var kLen;
      var shapes;
      var j;
      var jLen;
      var pathNodes;
      var commands;
      var pathArr;
      var singleShape = this.data.singleShape;
      var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
      var xPos = 0;
      var yPos = 0;
      var firstLine = true;
      var cnt = 0;
      for (i2 = 0; i2 < len; i2 += 1) {
        charData = this.globalData.fontManager.getCharData(documentData.finalText[i2], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
        shapeData = charData && charData.data || {};
        matrixHelper.reset();
        if (singleShape && letters[i2].n) {
          xPos = -trackingOffset;
          yPos += documentData.yOffset;
          yPos += firstLine ? 1 : 0;
          firstLine = false;
        }
        shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
        jLen = shapes.length;
        matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
        if (singleShape) {
          this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i2].line, xPos, yPos);
        }
        commands = createSizedArray(jLen - 1);
        var commandsCounter = 0;
        for (j = 0; j < jLen; j += 1) {
          if (shapes[j].ty === "sh") {
            kLen = shapes[j].ks.k.i.length;
            pathNodes = shapes[j].ks.k;
            pathArr = [];
            for (k3 = 1; k3 < kLen; k3 += 1) {
              if (k3 === 1) {
                pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
              }
              pathArr.push(matrixHelper.applyToX(pathNodes.o[k3 - 1][0], pathNodes.o[k3 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k3 - 1][0], pathNodes.o[k3 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k3][0], pathNodes.i[k3][1], 0), matrixHelper.applyToY(pathNodes.i[k3][0], pathNodes.i[k3][1], 0), matrixHelper.applyToX(pathNodes.v[k3][0], pathNodes.v[k3][1], 0), matrixHelper.applyToY(pathNodes.v[k3][0], pathNodes.v[k3][1], 0));
            }
            pathArr.push(matrixHelper.applyToX(pathNodes.o[k3 - 1][0], pathNodes.o[k3 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k3 - 1][0], pathNodes.o[k3 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
            commands[commandsCounter] = pathArr;
            commandsCounter += 1;
          }
        }
        if (singleShape) {
          xPos += letters[i2].l;
          xPos += trackingOffset;
        }
        if (this.textSpans[cnt]) {
          this.textSpans[cnt].elem = commands;
        } else {
          this.textSpans[cnt] = {
            elem: commands
          };
        }
        cnt += 1;
      }
    };
    CVTextElement.prototype.renderInnerContent = function() {
      this.validateText();
      var ctx2 = this.canvasContext;
      ctx2.font = this.values.fValue;
      this.globalData.renderer.ctxLineCap("butt");
      this.globalData.renderer.ctxLineJoin("miter");
      this.globalData.renderer.ctxMiterLimit(4);
      if (!this.data.singleShape) {
        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
      }
      var i2;
      var len;
      var j;
      var jLen;
      var k3;
      var kLen;
      var renderedLetters = this.textAnimator.renderedLetters;
      var letters = this.textProperty.currentData.l;
      len = letters.length;
      var renderedLetter;
      var lastFill = null;
      var lastStroke = null;
      var lastStrokeW = null;
      var commands;
      var pathArr;
      var renderer = this.globalData.renderer;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (!letters[i2].n) {
          renderedLetter = renderedLetters[i2];
          if (renderedLetter) {
            renderer.save();
            renderer.ctxTransform(renderedLetter.p);
            renderer.ctxOpacity(renderedLetter.o);
          }
          if (this.fill) {
            if (renderedLetter && renderedLetter.fc) {
              if (lastFill !== renderedLetter.fc) {
                renderer.ctxFillStyle(renderedLetter.fc);
                lastFill = renderedLetter.fc;
              }
            } else if (lastFill !== this.values.fill) {
              lastFill = this.values.fill;
              renderer.ctxFillStyle(this.values.fill);
            }
            commands = this.textSpans[i2].elem;
            jLen = commands.length;
            this.globalData.canvasContext.beginPath();
            for (j = 0; j < jLen; j += 1) {
              pathArr = commands[j];
              kLen = pathArr.length;
              this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
              for (k3 = 2; k3 < kLen; k3 += 6) {
                this.globalData.canvasContext.bezierCurveTo(pathArr[k3], pathArr[k3 + 1], pathArr[k3 + 2], pathArr[k3 + 3], pathArr[k3 + 4], pathArr[k3 + 5]);
              }
            }
            this.globalData.canvasContext.closePath();
            renderer.ctxFill();
          }
          if (this.stroke) {
            if (renderedLetter && renderedLetter.sw) {
              if (lastStrokeW !== renderedLetter.sw) {
                lastStrokeW = renderedLetter.sw;
                renderer.ctxLineWidth(renderedLetter.sw);
              }
            } else if (lastStrokeW !== this.values.sWidth) {
              lastStrokeW = this.values.sWidth;
              renderer.ctxLineWidth(this.values.sWidth);
            }
            if (renderedLetter && renderedLetter.sc) {
              if (lastStroke !== renderedLetter.sc) {
                lastStroke = renderedLetter.sc;
                renderer.ctxStrokeStyle(renderedLetter.sc);
              }
            } else if (lastStroke !== this.values.stroke) {
              lastStroke = this.values.stroke;
              renderer.ctxStrokeStyle(this.values.stroke);
            }
            commands = this.textSpans[i2].elem;
            jLen = commands.length;
            this.globalData.canvasContext.beginPath();
            for (j = 0; j < jLen; j += 1) {
              pathArr = commands[j];
              kLen = pathArr.length;
              this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
              for (k3 = 2; k3 < kLen; k3 += 6) {
                this.globalData.canvasContext.bezierCurveTo(pathArr[k3], pathArr[k3 + 1], pathArr[k3 + 2], pathArr[k3 + 3], pathArr[k3 + 4], pathArr[k3 + 5]);
              }
            }
            this.globalData.canvasContext.closePath();
            renderer.ctxStroke();
          }
          if (renderedLetter) {
            this.globalData.renderer.restore();
          }
        }
      }
    };
    function CVImageElement(data2, globalData2, comp2) {
      this.assetData = globalData2.getAssetData(data2.refId);
      this.img = globalData2.imageLoader.getAsset(this.assetData);
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);
    CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
    CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
    CVImageElement.prototype.createContent = function() {
      if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
        var canvas = createTag("canvas");
        canvas.width = this.assetData.w;
        canvas.height = this.assetData.h;
        var ctx2 = canvas.getContext("2d");
        var imgW = this.img.width;
        var imgH = this.img.height;
        var imgRel = imgW / imgH;
        var canvasRel = this.assetData.w / this.assetData.h;
        var widthCrop;
        var heightCrop;
        var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
        if (imgRel > canvasRel && par === "xMidYMid slice" || imgRel < canvasRel && par !== "xMidYMid slice") {
          heightCrop = imgH;
          widthCrop = heightCrop * canvasRel;
        } else {
          widthCrop = imgW;
          heightCrop = widthCrop / canvasRel;
        }
        ctx2.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);
        this.img = canvas;
      }
    };
    CVImageElement.prototype.renderInnerContent = function() {
      this.canvasContext.drawImage(this.img, 0, 0);
    };
    CVImageElement.prototype.destroy = function() {
      this.img = null;
    };
    function CVSolidElement(data2, globalData2, comp2) {
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);
    CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
    CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
    CVSolidElement.prototype.renderInnerContent = function() {
      this.globalData.renderer.ctxFillStyle(this.data.sc);
      this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh);
    };
    function CanvasRendererBase() {
    }
    extendPrototype([BaseRenderer], CanvasRendererBase);
    CanvasRendererBase.prototype.createShape = function(data2) {
      return new CVShapeElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createText = function(data2) {
      return new CVTextElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createImage = function(data2) {
      return new CVImageElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createSolid = function(data2) {
      return new CVSolidElement(data2, this.globalData, this);
    };
    CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
    CanvasRendererBase.prototype.ctxTransform = function(props) {
      if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {
        return;
      }
      this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);
    };
    CanvasRendererBase.prototype.ctxOpacity = function(op2) {
      this.canvasContext.globalAlpha *= op2 < 0 ? 0 : op2;
    };
    CanvasRendererBase.prototype.ctxFillStyle = function(value2) {
      this.canvasContext.fillStyle = value2;
    };
    CanvasRendererBase.prototype.ctxStrokeStyle = function(value2) {
      this.canvasContext.strokeStyle = value2;
    };
    CanvasRendererBase.prototype.ctxLineWidth = function(value2) {
      this.canvasContext.lineWidth = value2;
    };
    CanvasRendererBase.prototype.ctxLineCap = function(value2) {
      this.canvasContext.lineCap = value2;
    };
    CanvasRendererBase.prototype.ctxLineJoin = function(value2) {
      this.canvasContext.lineJoin = value2;
    };
    CanvasRendererBase.prototype.ctxMiterLimit = function(value2) {
      this.canvasContext.miterLimit = value2;
    };
    CanvasRendererBase.prototype.ctxFill = function(rule) {
      this.canvasContext.fill(rule);
    };
    CanvasRendererBase.prototype.ctxFillRect = function(x3, y4, w3, h4) {
      this.canvasContext.fillRect(x3, y4, w3, h4);
    };
    CanvasRendererBase.prototype.ctxStroke = function() {
      this.canvasContext.stroke();
    };
    CanvasRendererBase.prototype.reset = function() {
      if (!this.renderConfig.clearCanvas) {
        this.canvasContext.restore();
        return;
      }
      this.contextData.reset();
    };
    CanvasRendererBase.prototype.save = function() {
      this.canvasContext.save();
    };
    CanvasRendererBase.prototype.restore = function(actionFlag) {
      if (!this.renderConfig.clearCanvas) {
        this.canvasContext.restore();
        return;
      }
      if (actionFlag) {
        this.globalData.blendMode = "source-over";
      }
      this.contextData.restore(actionFlag);
    };
    CanvasRendererBase.prototype.configAnimation = function(animData) {
      if (this.animationItem.wrapper) {
        this.animationItem.container = createTag("canvas");
        var containerStyle = this.animationItem.container.style;
        containerStyle.width = "100%";
        containerStyle.height = "100%";
        var origin = "0px 0px 0px";
        containerStyle.transformOrigin = origin;
        containerStyle.mozTransformOrigin = origin;
        containerStyle.webkitTransformOrigin = origin;
        containerStyle["-webkit-transform"] = origin;
        containerStyle.contentVisibility = this.renderConfig.contentVisibility;
        this.animationItem.wrapper.appendChild(this.animationItem.container);
        this.canvasContext = this.animationItem.container.getContext("2d");
        if (this.renderConfig.className) {
          this.animationItem.container.setAttribute("class", this.renderConfig.className);
        }
        if (this.renderConfig.id) {
          this.animationItem.container.setAttribute("id", this.renderConfig.id);
        }
      } else {
        this.canvasContext = this.renderConfig.context;
      }
      this.contextData.setContext(this.canvasContext);
      this.data = animData;
      this.layers = animData.layers;
      this.transformCanvas = {
        w: animData.w,
        h: animData.h,
        sx: 0,
        sy: 0,
        tx: 0,
        ty: 0
      };
      this.setupGlobalData(animData, document.body);
      this.globalData.canvasContext = this.canvasContext;
      this.globalData.renderer = this;
      this.globalData.isDashed = false;
      this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
      this.globalData.transformCanvas = this.transformCanvas;
      this.elements = createSizedArray(animData.layers.length);
      this.updateContainerSize();
    };
    CanvasRendererBase.prototype.updateContainerSize = function(width2, height2) {
      this.reset();
      var elementWidth;
      var elementHeight;
      if (width2) {
        elementWidth = width2;
        elementHeight = height2;
        this.canvasContext.canvas.width = elementWidth;
        this.canvasContext.canvas.height = elementHeight;
      } else {
        if (this.animationItem.wrapper && this.animationItem.container) {
          elementWidth = this.animationItem.wrapper.offsetWidth;
          elementHeight = this.animationItem.wrapper.offsetHeight;
        } else {
          elementWidth = this.canvasContext.canvas.width;
          elementHeight = this.canvasContext.canvas.height;
        }
        this.canvasContext.canvas.width = elementWidth * this.renderConfig.dpr;
        this.canvasContext.canvas.height = elementHeight * this.renderConfig.dpr;
      }
      var elementRel;
      var animationRel;
      if (this.renderConfig.preserveAspectRatio.indexOf("meet") !== -1 || this.renderConfig.preserveAspectRatio.indexOf("slice") !== -1) {
        var par = this.renderConfig.preserveAspectRatio.split(" ");
        var fillType = par[1] || "meet";
        var pos = par[0] || "xMidYMid";
        var xPos = pos.substr(0, 4);
        var yPos = pos.substr(4);
        elementRel = elementWidth / elementHeight;
        animationRel = this.transformCanvas.w / this.transformCanvas.h;
        if (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice") {
          this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
          this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
        } else {
          this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
          this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
        }
        if (xPos === "xMid" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
          this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;
        } else if (xPos === "xMax" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
          this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;
        } else {
          this.transformCanvas.tx = 0;
        }
        if (yPos === "YMid" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
          this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;
        } else if (yPos === "YMax" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
          this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) * this.renderConfig.dpr;
        } else {
          this.transformCanvas.ty = 0;
        }
      } else if (this.renderConfig.preserveAspectRatio === "none") {
        this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
        this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
        this.transformCanvas.tx = 0;
        this.transformCanvas.ty = 0;
      } else {
        this.transformCanvas.sx = this.renderConfig.dpr;
        this.transformCanvas.sy = this.renderConfig.dpr;
        this.transformCanvas.tx = 0;
        this.transformCanvas.ty = 0;
      }
      this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1];
      this.ctxTransform(this.transformCanvas.props);
      this.canvasContext.beginPath();
      this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
      this.canvasContext.closePath();
      this.canvasContext.clip();
      this.renderFrame(this.renderedFrame, true);
    };
    CanvasRendererBase.prototype.destroy = function() {
      if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {
        this.animationItem.wrapper.innerText = "";
      }
      var i2;
      var len = this.layers ? this.layers.length : 0;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.elements[i2] && this.elements[i2].destroy) {
          this.elements[i2].destroy();
        }
      }
      this.elements.length = 0;
      this.globalData.canvasContext = null;
      this.animationItem.container = null;
      this.destroyed = true;
    };
    CanvasRendererBase.prototype.renderFrame = function(num, forceRender) {
      if (this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender || this.destroyed || num === -1) {
        return;
      }
      this.renderedFrame = num;
      this.globalData.frameNum = num - this.animationItem._isFirstFrame;
      this.globalData.frameId += 1;
      this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
      this.globalData.projectInterface.currentFrame = num;
      var i2;
      var len = this.layers.length;
      if (!this.completeLayers) {
        this.checkLayers(num);
      }
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].prepareFrame(num - this.layers[i2].st);
        }
      }
      if (this.globalData._mdf) {
        if (this.renderConfig.clearCanvas === true) {
          this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
        } else {
          this.save();
        }
        for (i2 = len - 1; i2 >= 0; i2 -= 1) {
          if (this.completeLayers || this.elements[i2]) {
            this.elements[i2].renderFrame();
          }
        }
        if (this.renderConfig.clearCanvas !== true) {
          this.restore();
        }
      }
    };
    CanvasRendererBase.prototype.buildItem = function(pos) {
      var elements = this.elements;
      if (elements[pos] || this.layers[pos].ty === 99) {
        return;
      }
      var element = this.createItem(this.layers[pos], this, this.globalData);
      elements[pos] = element;
      element.initExpressions();
    };
    CanvasRendererBase.prototype.checkPendingElements = function() {
      while (this.pendingElements.length) {
        var element = this.pendingElements.pop();
        element.checkParenting();
      }
    };
    CanvasRendererBase.prototype.hide = function() {
      this.animationItem.container.style.display = "none";
    };
    CanvasRendererBase.prototype.show = function() {
      this.animationItem.container.style.display = "block";
    };
    function CanvasContext() {
      this.opacity = -1;
      this.transform = createTypedArray("float32", 16);
      this.fillStyle = "";
      this.strokeStyle = "";
      this.lineWidth = "";
      this.lineCap = "";
      this.lineJoin = "";
      this.miterLimit = "";
      this.id = Math.random();
    }
    function CVContextData() {
      this.stack = [];
      this.cArrPos = 0;
      this.cTr = new Matrix();
      var i2;
      var len = 15;
      for (i2 = 0; i2 < len; i2 += 1) {
        var canvasContext = new CanvasContext();
        this.stack[i2] = canvasContext;
      }
      this._length = len;
      this.nativeContext = null;
      this.transformMat = new Matrix();
      this.currentOpacity = 1;
      this.currentFillStyle = "";
      this.appliedFillStyle = "";
      this.currentStrokeStyle = "";
      this.appliedStrokeStyle = "";
      this.currentLineWidth = "";
      this.appliedLineWidth = "";
      this.currentLineCap = "";
      this.appliedLineCap = "";
      this.currentLineJoin = "";
      this.appliedLineJoin = "";
      this.appliedMiterLimit = "";
      this.currentMiterLimit = "";
    }
    CVContextData.prototype.duplicate = function() {
      var newLength = this._length * 2;
      var i2 = 0;
      for (i2 = this._length; i2 < newLength; i2 += 1) {
        this.stack[i2] = new CanvasContext();
      }
      this._length = newLength;
    };
    CVContextData.prototype.reset = function() {
      this.cArrPos = 0;
      this.cTr.reset();
      this.stack[this.cArrPos].opacity = 1;
    };
    CVContextData.prototype.restore = function(forceRestore) {
      this.cArrPos -= 1;
      var currentContext = this.stack[this.cArrPos];
      var transform2 = currentContext.transform;
      var i2;
      var arr = this.cTr.props;
      for (i2 = 0; i2 < 16; i2 += 1) {
        arr[i2] = transform2[i2];
      }
      if (forceRestore) {
        this.nativeContext.restore();
        var prevStack = this.stack[this.cArrPos + 1];
        this.appliedFillStyle = prevStack.fillStyle;
        this.appliedStrokeStyle = prevStack.strokeStyle;
        this.appliedLineWidth = prevStack.lineWidth;
        this.appliedLineCap = prevStack.lineCap;
        this.appliedLineJoin = prevStack.lineJoin;
        this.appliedMiterLimit = prevStack.miterLimit;
      }
      this.nativeContext.setTransform(transform2[0], transform2[1], transform2[4], transform2[5], transform2[12], transform2[13]);
      if (forceRestore || currentContext.opacity !== -1 && this.currentOpacity !== currentContext.opacity) {
        this.nativeContext.globalAlpha = currentContext.opacity;
        this.currentOpacity = currentContext.opacity;
      }
      this.currentFillStyle = currentContext.fillStyle;
      this.currentStrokeStyle = currentContext.strokeStyle;
      this.currentLineWidth = currentContext.lineWidth;
      this.currentLineCap = currentContext.lineCap;
      this.currentLineJoin = currentContext.lineJoin;
      this.currentMiterLimit = currentContext.miterLimit;
    };
    CVContextData.prototype.save = function(saveOnNativeFlag) {
      if (saveOnNativeFlag) {
        this.nativeContext.save();
      }
      var props = this.cTr.props;
      if (this._length <= this.cArrPos) {
        this.duplicate();
      }
      var currentStack = this.stack[this.cArrPos];
      var i2;
      for (i2 = 0; i2 < 16; i2 += 1) {
        currentStack.transform[i2] = props[i2];
      }
      this.cArrPos += 1;
      var newStack = this.stack[this.cArrPos];
      newStack.opacity = currentStack.opacity;
      newStack.fillStyle = currentStack.fillStyle;
      newStack.strokeStyle = currentStack.strokeStyle;
      newStack.lineWidth = currentStack.lineWidth;
      newStack.lineCap = currentStack.lineCap;
      newStack.lineJoin = currentStack.lineJoin;
      newStack.miterLimit = currentStack.miterLimit;
    };
    CVContextData.prototype.setOpacity = function(value2) {
      this.stack[this.cArrPos].opacity = value2;
    };
    CVContextData.prototype.setContext = function(value2) {
      this.nativeContext = value2;
    };
    CVContextData.prototype.fillStyle = function(value2) {
      if (this.stack[this.cArrPos].fillStyle !== value2) {
        this.currentFillStyle = value2;
        this.stack[this.cArrPos].fillStyle = value2;
      }
    };
    CVContextData.prototype.strokeStyle = function(value2) {
      if (this.stack[this.cArrPos].strokeStyle !== value2) {
        this.currentStrokeStyle = value2;
        this.stack[this.cArrPos].strokeStyle = value2;
      }
    };
    CVContextData.prototype.lineWidth = function(value2) {
      if (this.stack[this.cArrPos].lineWidth !== value2) {
        this.currentLineWidth = value2;
        this.stack[this.cArrPos].lineWidth = value2;
      }
    };
    CVContextData.prototype.lineCap = function(value2) {
      if (this.stack[this.cArrPos].lineCap !== value2) {
        this.currentLineCap = value2;
        this.stack[this.cArrPos].lineCap = value2;
      }
    };
    CVContextData.prototype.lineJoin = function(value2) {
      if (this.stack[this.cArrPos].lineJoin !== value2) {
        this.currentLineJoin = value2;
        this.stack[this.cArrPos].lineJoin = value2;
      }
    };
    CVContextData.prototype.miterLimit = function(value2) {
      if (this.stack[this.cArrPos].miterLimit !== value2) {
        this.currentMiterLimit = value2;
        this.stack[this.cArrPos].miterLimit = value2;
      }
    };
    CVContextData.prototype.transform = function(props) {
      this.transformMat.cloneFromProps(props);
      var currentTransform = this.cTr;
      this.transformMat.multiply(currentTransform);
      currentTransform.cloneFromProps(this.transformMat.props);
      var trProps = currentTransform.props;
      this.nativeContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);
    };
    CVContextData.prototype.opacity = function(op2) {
      var currentOpacity = this.stack[this.cArrPos].opacity;
      currentOpacity *= op2 < 0 ? 0 : op2;
      if (this.stack[this.cArrPos].opacity !== currentOpacity) {
        if (this.currentOpacity !== op2) {
          this.nativeContext.globalAlpha = op2;
          this.currentOpacity = op2;
        }
        this.stack[this.cArrPos].opacity = currentOpacity;
      }
    };
    CVContextData.prototype.fill = function(rule) {
      if (this.appliedFillStyle !== this.currentFillStyle) {
        this.appliedFillStyle = this.currentFillStyle;
        this.nativeContext.fillStyle = this.appliedFillStyle;
      }
      this.nativeContext.fill(rule);
    };
    CVContextData.prototype.fillRect = function(x3, y4, w3, h4) {
      if (this.appliedFillStyle !== this.currentFillStyle) {
        this.appliedFillStyle = this.currentFillStyle;
        this.nativeContext.fillStyle = this.appliedFillStyle;
      }
      this.nativeContext.fillRect(x3, y4, w3, h4);
    };
    CVContextData.prototype.stroke = function() {
      if (this.appliedStrokeStyle !== this.currentStrokeStyle) {
        this.appliedStrokeStyle = this.currentStrokeStyle;
        this.nativeContext.strokeStyle = this.appliedStrokeStyle;
      }
      if (this.appliedLineWidth !== this.currentLineWidth) {
        this.appliedLineWidth = this.currentLineWidth;
        this.nativeContext.lineWidth = this.appliedLineWidth;
      }
      if (this.appliedLineCap !== this.currentLineCap) {
        this.appliedLineCap = this.currentLineCap;
        this.nativeContext.lineCap = this.appliedLineCap;
      }
      if (this.appliedLineJoin !== this.currentLineJoin) {
        this.appliedLineJoin = this.currentLineJoin;
        this.nativeContext.lineJoin = this.appliedLineJoin;
      }
      if (this.appliedMiterLimit !== this.currentMiterLimit) {
        this.appliedMiterLimit = this.currentMiterLimit;
        this.nativeContext.miterLimit = this.appliedMiterLimit;
      }
      this.nativeContext.stroke();
    };
    function CVCompElement(data2, globalData2, comp2) {
      this.completeLayers = false;
      this.layers = data2.layers;
      this.pendingElements = [];
      this.elements = createSizedArray(this.layers.length);
      this.initElement(data2, globalData2, comp2);
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
    }
    extendPrototype([CanvasRendererBase, ICompElement, CVBaseElement], CVCompElement);
    CVCompElement.prototype.renderInnerContent = function() {
      var ctx2 = this.canvasContext;
      ctx2.beginPath();
      ctx2.moveTo(0, 0);
      ctx2.lineTo(this.data.w, 0);
      ctx2.lineTo(this.data.w, this.data.h);
      ctx2.lineTo(0, this.data.h);
      ctx2.lineTo(0, 0);
      ctx2.clip();
      var i2;
      var len = this.layers.length;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.completeLayers || this.elements[i2]) {
          this.elements[i2].renderFrame();
        }
      }
    };
    CVCompElement.prototype.destroy = function() {
      var i2;
      var len = this.layers.length;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        if (this.elements[i2]) {
          this.elements[i2].destroy();
        }
      }
      this.layers = null;
      this.elements = null;
    };
    CVCompElement.prototype.createComp = function(data2) {
      return new CVCompElement(data2, this.globalData, this);
    };
    function CanvasRenderer(animationItem, config2) {
      this.animationItem = animationItem;
      this.renderConfig = {
        clearCanvas: config2 && config2.clearCanvas !== void 0 ? config2.clearCanvas : true,
        context: config2 && config2.context || null,
        progressiveLoad: config2 && config2.progressiveLoad || false,
        preserveAspectRatio: config2 && config2.preserveAspectRatio || "xMidYMid meet",
        imagePreserveAspectRatio: config2 && config2.imagePreserveAspectRatio || "xMidYMid slice",
        contentVisibility: config2 && config2.contentVisibility || "visible",
        className: config2 && config2.className || "",
        id: config2 && config2.id || "",
        runExpressions: !config2 || config2.runExpressions === void 0 || config2.runExpressions
      };
      this.renderConfig.dpr = config2 && config2.dpr || 1;
      if (this.animationItem.wrapper) {
        this.renderConfig.dpr = config2 && config2.dpr || window.devicePixelRatio || 1;
      }
      this.renderedFrame = -1;
      this.globalData = {
        frameNum: -1,
        _mdf: false,
        renderConfig: this.renderConfig,
        currentGlobalAlpha: -1
      };
      this.contextData = new CVContextData();
      this.elements = [];
      this.pendingElements = [];
      this.transformMat = new Matrix();
      this.completeLayers = false;
      this.rendererType = "canvas";
      if (this.renderConfig.clearCanvas) {
        this.ctxTransform = this.contextData.transform.bind(this.contextData);
        this.ctxOpacity = this.contextData.opacity.bind(this.contextData);
        this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData);
        this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData);
        this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData);
        this.ctxLineCap = this.contextData.lineCap.bind(this.contextData);
        this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData);
        this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData);
        this.ctxFill = this.contextData.fill.bind(this.contextData);
        this.ctxFillRect = this.contextData.fillRect.bind(this.contextData);
        this.ctxStroke = this.contextData.stroke.bind(this.contextData);
        this.save = this.contextData.save.bind(this.contextData);
      }
    }
    extendPrototype([CanvasRendererBase], CanvasRenderer);
    CanvasRenderer.prototype.createComp = function(data2) {
      return new CVCompElement(data2, this.globalData, this);
    };
    function HBaseElement() {
    }
    HBaseElement.prototype = {
      checkBlendMode: function checkBlendMode() {
      },
      initRendererElement: function initRendererElement() {
        this.baseElement = createTag(this.data.tg || "div");
        if (this.data.hasMask) {
          this.svgElement = createNS("svg");
          this.layerElement = createNS("g");
          this.maskedElement = this.layerElement;
          this.svgElement.appendChild(this.layerElement);
          this.baseElement.appendChild(this.svgElement);
        } else {
          this.layerElement = this.baseElement;
        }
        styleDiv(this.baseElement);
      },
      createContainerElements: function createContainerElements() {
        this.renderableEffectsManager = new CVEffects(this);
        this.transformedElement = this.baseElement;
        this.maskedElement = this.layerElement;
        if (this.data.ln) {
          this.layerElement.setAttribute("id", this.data.ln);
        }
        if (this.data.cl) {
          this.layerElement.setAttribute("class", this.data.cl);
        }
        if (this.data.bm !== 0) {
          this.setBlendMode();
        }
      },
      renderElement: function renderElement() {
        var transformedElementStyle = this.transformedElement ? this.transformedElement.style : {};
        if (this.finalTransform._matMdf) {
          var matrixValue = this.finalTransform.mat.toCSS();
          transformedElementStyle.transform = matrixValue;
          transformedElementStyle.webkitTransform = matrixValue;
        }
        if (this.finalTransform._opMdf) {
          transformedElementStyle.opacity = this.finalTransform.mProp.o.v;
        }
      },
      renderFrame: function renderFrame() {
        if (this.data.hd || this.hidden) {
          return;
        }
        this.renderTransform();
        this.renderRenderable();
        this.renderElement();
        this.renderInnerContent();
        if (this._isFirstFrame) {
          this._isFirstFrame = false;
        }
      },
      destroy: function destroy() {
        this.layerElement = null;
        this.transformedElement = null;
        if (this.matteElement) {
          this.matteElement = null;
        }
        if (this.maskManager) {
          this.maskManager.destroy();
          this.maskManager = null;
        }
      },
      createRenderableComponents: function createRenderableComponents() {
        this.maskManager = new MaskElement(this.data, this, this.globalData);
      },
      addEffects: function addEffects() {
      },
      setMatte: function setMatte() {
      }
    };
    HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
    HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
    HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;
    function HSolidElement(data2, globalData2, comp2) {
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);
    HSolidElement.prototype.createContent = function() {
      var rect;
      if (this.data.hasMask) {
        rect = createNS("rect");
        rect.setAttribute("width", this.data.sw);
        rect.setAttribute("height", this.data.sh);
        rect.setAttribute("fill", this.data.sc);
        this.svgElement.setAttribute("width", this.data.sw);
        this.svgElement.setAttribute("height", this.data.sh);
      } else {
        rect = createTag("div");
        rect.style.width = this.data.sw + "px";
        rect.style.height = this.data.sh + "px";
        rect.style.backgroundColor = this.data.sc;
      }
      this.layerElement.appendChild(rect);
    };
    function HShapeElement(data2, globalData2, comp2) {
      this.shapes = [];
      this.shapesData = data2.shapes;
      this.stylesList = [];
      this.shapeModifiers = [];
      this.itemsData = [];
      this.processedElements = [];
      this.animatedContents = [];
      this.shapesContainer = createNS("g");
      this.initElement(data2, globalData2, comp2);
      this.prevViewData = [];
      this.currentBBox = {
        x: 999999,
        y: -999999,
        h: 0,
        w: 0
      };
    }
    extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
    HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;
    HShapeElement.prototype.createContent = function() {
      var cont;
      this.baseElement.style.fontSize = 0;
      if (this.data.hasMask) {
        this.layerElement.appendChild(this.shapesContainer);
        cont = this.svgElement;
      } else {
        cont = createNS("svg");
        var size = this.comp.data ? this.comp.data : this.globalData.compSize;
        cont.setAttribute("width", size.w);
        cont.setAttribute("height", size.h);
        cont.appendChild(this.shapesContainer);
        this.layerElement.appendChild(cont);
      }
      this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
      this.filterUniqueShapes();
      this.shapeCont = cont;
    };
    HShapeElement.prototype.getTransformedPoint = function(transformers, point) {
      var i2;
      var len = transformers.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        point = transformers[i2].mProps.v.applyToPointArray(point[0], point[1], 0);
      }
      return point;
    };
    HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {
      var shape = item.sh.v;
      var transformers = item.transformers;
      var i2;
      var len = shape._length;
      var vPoint;
      var oPoint;
      var nextIPoint;
      var nextVPoint;
      if (len <= 1) {
        return;
      }
      for (i2 = 0; i2 < len - 1; i2 += 1) {
        vPoint = this.getTransformedPoint(transformers, shape.v[i2]);
        oPoint = this.getTransformedPoint(transformers, shape.o[i2]);
        nextIPoint = this.getTransformedPoint(transformers, shape.i[i2 + 1]);
        nextVPoint = this.getTransformedPoint(transformers, shape.v[i2 + 1]);
        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
      }
      if (shape.c) {
        vPoint = this.getTransformedPoint(transformers, shape.v[i2]);
        oPoint = this.getTransformedPoint(transformers, shape.o[i2]);
        nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
        nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
      }
    };
    HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
      this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
      var bounds = this.shapeBoundingBox;
      boundingBox.x = bmMin(bounds.left, boundingBox.x);
      boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);
      boundingBox.y = bmMin(bounds.top, boundingBox.y);
      boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);
    };
    HShapeElement.prototype.shapeBoundingBox = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    HShapeElement.prototype.tempBoundingBox = {
      x: 0,
      xMax: 0,
      y: 0,
      yMax: 0,
      width: 0,
      height: 0
    };
    HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p2, p3) {
      var bounds = [[p0[0], p3[0]], [p0[1], p3[1]]];
      for (var a3, b3, c7, t3, b2ac, t1, t22, i2 = 0; i2 < 2; ++i2) {
        b3 = 6 * p0[i2] - 12 * p1[i2] + 6 * p2[i2];
        a3 = -3 * p0[i2] + 9 * p1[i2] - 9 * p2[i2] + 3 * p3[i2];
        c7 = 3 * p1[i2] - 3 * p0[i2];
        b3 |= 0;
        a3 |= 0;
        c7 |= 0;
        if (a3 === 0 && b3 === 0)
          ;
        else if (a3 === 0) {
          t3 = -c7 / b3;
          if (t3 > 0 && t3 < 1) {
            bounds[i2].push(this.calculateF(t3, p0, p1, p2, p3, i2));
          }
        } else {
          b2ac = b3 * b3 - 4 * c7 * a3;
          if (b2ac >= 0) {
            t1 = (-b3 + bmSqrt(b2ac)) / (2 * a3);
            if (t1 > 0 && t1 < 1)
              bounds[i2].push(this.calculateF(t1, p0, p1, p2, p3, i2));
            t22 = (-b3 - bmSqrt(b2ac)) / (2 * a3);
            if (t22 > 0 && t22 < 1)
              bounds[i2].push(this.calculateF(t22, p0, p1, p2, p3, i2));
          }
        }
      }
      this.shapeBoundingBox.left = bmMin.apply(null, bounds[0]);
      this.shapeBoundingBox.top = bmMin.apply(null, bounds[1]);
      this.shapeBoundingBox.right = bmMax.apply(null, bounds[0]);
      this.shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);
    };
    HShapeElement.prototype.calculateF = function(t3, p0, p1, p2, p3, i2) {
      return bmPow(1 - t3, 3) * p0[i2] + 3 * bmPow(1 - t3, 2) * t3 * p1[i2] + 3 * (1 - t3) * bmPow(t3, 2) * p2[i2] + bmPow(t3, 3) * p3[i2];
    };
    HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {
      var i2;
      var len = itemsData.length;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (itemsData[i2] && itemsData[i2].sh) {
          this.calculateShapeBoundingBox(itemsData[i2], boundingBox);
        } else if (itemsData[i2] && itemsData[i2].it) {
          this.calculateBoundingBox(itemsData[i2].it, boundingBox);
        } else if (itemsData[i2] && itemsData[i2].style && itemsData[i2].w) {
          this.expandStrokeBoundingBox(itemsData[i2].w, boundingBox);
        }
      }
    };
    HShapeElement.prototype.expandStrokeBoundingBox = function(widthProperty, boundingBox) {
      var width2 = 0;
      if (widthProperty.keyframes) {
        for (var i2 = 0; i2 < widthProperty.keyframes.length; i2 += 1) {
          var kfw = widthProperty.keyframes[i2].s;
          if (kfw > width2) {
            width2 = kfw;
          }
        }
        width2 *= widthProperty.mult;
      } else {
        width2 = widthProperty.v * widthProperty.mult;
      }
      boundingBox.x -= width2;
      boundingBox.xMax += width2;
      boundingBox.y -= width2;
      boundingBox.yMax += width2;
    };
    HShapeElement.prototype.currentBoxContains = function(box) {
      return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;
    };
    HShapeElement.prototype.renderInnerContent = function() {
      this._renderShapeFrame();
      if (!this.hidden && (this._isFirstFrame || this._mdf)) {
        var tempBoundingBox = this.tempBoundingBox;
        var max = 999999;
        tempBoundingBox.x = max;
        tempBoundingBox.xMax = -max;
        tempBoundingBox.y = max;
        tempBoundingBox.yMax = -max;
        this.calculateBoundingBox(this.itemsData, tempBoundingBox);
        tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
        tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
        if (this.currentBoxContains(tempBoundingBox)) {
          return;
        }
        var changed = false;
        if (this.currentBBox.w !== tempBoundingBox.width) {
          this.currentBBox.w = tempBoundingBox.width;
          this.shapeCont.setAttribute("width", tempBoundingBox.width);
          changed = true;
        }
        if (this.currentBBox.h !== tempBoundingBox.height) {
          this.currentBBox.h = tempBoundingBox.height;
          this.shapeCont.setAttribute("height", tempBoundingBox.height);
          changed = true;
        }
        if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
          this.currentBBox.w = tempBoundingBox.width;
          this.currentBBox.h = tempBoundingBox.height;
          this.currentBBox.x = tempBoundingBox.x;
          this.currentBBox.y = tempBoundingBox.y;
          this.shapeCont.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
          var shapeStyle = this.shapeCont.style;
          var shapeTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
          shapeStyle.transform = shapeTransform;
          shapeStyle.webkitTransform = shapeTransform;
        }
      }
    };
    function HTextElement(data2, globalData2, comp2) {
      this.textSpans = [];
      this.textPaths = [];
      this.currentBBox = {
        x: 999999,
        y: -999999,
        h: 0,
        w: 0
      };
      this.renderType = "svg";
      this.isMasked = false;
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);
    HTextElement.prototype.createContent = function() {
      this.isMasked = this.checkMasks();
      if (this.isMasked) {
        this.renderType = "svg";
        this.compW = this.comp.data.w;
        this.compH = this.comp.data.h;
        this.svgElement.setAttribute("width", this.compW);
        this.svgElement.setAttribute("height", this.compH);
        var g2 = createNS("g");
        this.maskedElement.appendChild(g2);
        this.innerElem = g2;
      } else {
        this.renderType = "html";
        this.innerElem = this.layerElement;
      }
      this.checkParenting();
    };
    HTextElement.prototype.buildNewText = function() {
      var documentData = this.textProperty.currentData;
      this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
      var innerElemStyle = this.innerElem.style;
      var textColor = documentData.fc ? this.buildColor(documentData.fc) : "rgba(0,0,0,0)";
      innerElemStyle.fill = textColor;
      innerElemStyle.color = textColor;
      if (documentData.sc) {
        innerElemStyle.stroke = this.buildColor(documentData.sc);
        innerElemStyle.strokeWidth = documentData.sw + "px";
      }
      var fontData = this.globalData.fontManager.getFontByName(documentData.f);
      if (!this.globalData.fontManager.chars) {
        innerElemStyle.fontSize = documentData.finalSize + "px";
        innerElemStyle.lineHeight = documentData.finalSize + "px";
        if (fontData.fClass) {
          this.innerElem.className = fontData.fClass;
        } else {
          innerElemStyle.fontFamily = fontData.fFamily;
          var fWeight = documentData.fWeight;
          var fStyle = documentData.fStyle;
          innerElemStyle.fontStyle = fStyle;
          innerElemStyle.fontWeight = fWeight;
        }
      }
      var i2;
      var len;
      var letters = documentData.l;
      len = letters.length;
      var tSpan;
      var tParent;
      var tCont;
      var matrixHelper = this.mHelper;
      var shapes;
      var shapeStr = "";
      var cnt = 0;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.globalData.fontManager.chars) {
          if (!this.textPaths[cnt]) {
            tSpan = createNS("path");
            tSpan.setAttribute("stroke-linecap", lineCapEnum[1]);
            tSpan.setAttribute("stroke-linejoin", lineJoinEnum[2]);
            tSpan.setAttribute("stroke-miterlimit", "4");
          } else {
            tSpan = this.textPaths[cnt];
          }
          if (!this.isMasked) {
            if (this.textSpans[cnt]) {
              tParent = this.textSpans[cnt];
              tCont = tParent.children[0];
            } else {
              tParent = createTag("div");
              tParent.style.lineHeight = 0;
              tCont = createNS("svg");
              tCont.appendChild(tSpan);
              styleDiv(tParent);
            }
          }
        } else if (!this.isMasked) {
          if (this.textSpans[cnt]) {
            tParent = this.textSpans[cnt];
            tSpan = this.textPaths[cnt];
          } else {
            tParent = createTag("span");
            styleDiv(tParent);
            tSpan = createTag("span");
            styleDiv(tSpan);
            tParent.appendChild(tSpan);
          }
        } else {
          tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS("text");
        }
        if (this.globalData.fontManager.chars) {
          var charData = this.globalData.fontManager.getCharData(documentData.finalText[i2], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
          var shapeData;
          if (charData) {
            shapeData = charData.data;
          } else {
            shapeData = null;
          }
          matrixHelper.reset();
          if (shapeData && shapeData.shapes && shapeData.shapes.length) {
            shapes = shapeData.shapes[0].it;
            matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
            shapeStr = this.createPathShape(matrixHelper, shapes);
            tSpan.setAttribute("d", shapeStr);
          }
          if (!this.isMasked) {
            this.innerElem.appendChild(tParent);
            if (shapeData && shapeData.shapes) {
              document.body.appendChild(tCont);
              var boundingBox = tCont.getBBox();
              tCont.setAttribute("width", boundingBox.width + 2);
              tCont.setAttribute("height", boundingBox.height + 2);
              tCont.setAttribute("viewBox", boundingBox.x - 1 + " " + (boundingBox.y - 1) + " " + (boundingBox.width + 2) + " " + (boundingBox.height + 2));
              var tContStyle = tCont.style;
              var tContTranslation = "translate(" + (boundingBox.x - 1) + "px," + (boundingBox.y - 1) + "px)";
              tContStyle.transform = tContTranslation;
              tContStyle.webkitTransform = tContTranslation;
              letters[i2].yOffset = boundingBox.y - 1;
            } else {
              tCont.setAttribute("width", 1);
              tCont.setAttribute("height", 1);
            }
            tParent.appendChild(tCont);
          } else {
            this.innerElem.appendChild(tSpan);
          }
        } else {
          tSpan.textContent = letters[i2].val;
          tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
          if (!this.isMasked) {
            this.innerElem.appendChild(tParent);
            var tStyle = tSpan.style;
            var tSpanTranslation = "translate3d(0," + -documentData.finalSize / 1.2 + "px,0)";
            tStyle.transform = tSpanTranslation;
            tStyle.webkitTransform = tSpanTranslation;
          } else {
            this.innerElem.appendChild(tSpan);
          }
        }
        if (!this.isMasked) {
          this.textSpans[cnt] = tParent;
        } else {
          this.textSpans[cnt] = tSpan;
        }
        this.textSpans[cnt].style.display = "block";
        this.textPaths[cnt] = tSpan;
        cnt += 1;
      }
      while (cnt < this.textSpans.length) {
        this.textSpans[cnt].style.display = "none";
        cnt += 1;
      }
    };
    HTextElement.prototype.renderInnerContent = function() {
      this.validateText();
      var svgStyle;
      if (this.data.singleShape) {
        if (!this._isFirstFrame && !this.lettersChangedFlag) {
          return;
        }
        if (this.isMasked && this.finalTransform._matMdf) {
          this.svgElement.setAttribute("viewBox", -this.finalTransform.mProp.p.v[0] + " " + -this.finalTransform.mProp.p.v[1] + " " + this.compW + " " + this.compH);
          svgStyle = this.svgElement.style;
          var translation = "translate(" + -this.finalTransform.mProp.p.v[0] + "px," + -this.finalTransform.mProp.p.v[1] + "px)";
          svgStyle.transform = translation;
          svgStyle.webkitTransform = translation;
        }
      }
      this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
      if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
        return;
      }
      var i2;
      var len;
      var count = 0;
      var renderedLetters = this.textAnimator.renderedLetters;
      var letters = this.textProperty.currentData.l;
      len = letters.length;
      var renderedLetter;
      var textSpan;
      var textPath;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (letters[i2].n) {
          count += 1;
        } else {
          textSpan = this.textSpans[i2];
          textPath = this.textPaths[i2];
          renderedLetter = renderedLetters[count];
          count += 1;
          if (renderedLetter._mdf.m) {
            if (!this.isMasked) {
              textSpan.style.webkitTransform = renderedLetter.m;
              textSpan.style.transform = renderedLetter.m;
            } else {
              textSpan.setAttribute("transform", renderedLetter.m);
            }
          }
          textSpan.style.opacity = renderedLetter.o;
          if (renderedLetter.sw && renderedLetter._mdf.sw) {
            textPath.setAttribute("stroke-width", renderedLetter.sw);
          }
          if (renderedLetter.sc && renderedLetter._mdf.sc) {
            textPath.setAttribute("stroke", renderedLetter.sc);
          }
          if (renderedLetter.fc && renderedLetter._mdf.fc) {
            textPath.setAttribute("fill", renderedLetter.fc);
            textPath.style.color = renderedLetter.fc;
          }
        }
      }
      if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
        var boundingBox = this.innerElem.getBBox();
        if (this.currentBBox.w !== boundingBox.width) {
          this.currentBBox.w = boundingBox.width;
          this.svgElement.setAttribute("width", boundingBox.width);
        }
        if (this.currentBBox.h !== boundingBox.height) {
          this.currentBBox.h = boundingBox.height;
          this.svgElement.setAttribute("height", boundingBox.height);
        }
        var margin = 1;
        if (this.currentBBox.w !== boundingBox.width + margin * 2 || this.currentBBox.h !== boundingBox.height + margin * 2 || this.currentBBox.x !== boundingBox.x - margin || this.currentBBox.y !== boundingBox.y - margin) {
          this.currentBBox.w = boundingBox.width + margin * 2;
          this.currentBBox.h = boundingBox.height + margin * 2;
          this.currentBBox.x = boundingBox.x - margin;
          this.currentBBox.y = boundingBox.y - margin;
          this.svgElement.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
          svgStyle = this.svgElement.style;
          var svgTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
          svgStyle.transform = svgTransform;
          svgStyle.webkitTransform = svgTransform;
        }
      }
    };
    function HCameraElement(data2, globalData2, comp2) {
      this.initFrame();
      this.initBaseData(data2, globalData2, comp2);
      this.initHierarchy();
      var getProp = PropertyFactory.getProp;
      this.pe = getProp(this, data2.pe, 0, 0, this);
      if (data2.ks.p.s) {
        this.px = getProp(this, data2.ks.p.x, 1, 0, this);
        this.py = getProp(this, data2.ks.p.y, 1, 0, this);
        this.pz = getProp(this, data2.ks.p.z, 1, 0, this);
      } else {
        this.p = getProp(this, data2.ks.p, 1, 0, this);
      }
      if (data2.ks.a) {
        this.a = getProp(this, data2.ks.a, 1, 0, this);
      }
      if (data2.ks.or.k.length && data2.ks.or.k[0].to) {
        var i2;
        var len = data2.ks.or.k.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          data2.ks.or.k[i2].to = null;
          data2.ks.or.k[i2].ti = null;
        }
      }
      this.or = getProp(this, data2.ks.or, 1, degToRads, this);
      this.or.sh = true;
      this.rx = getProp(this, data2.ks.rx, 0, degToRads, this);
      this.ry = getProp(this, data2.ks.ry, 0, degToRads, this);
      this.rz = getProp(this, data2.ks.rz, 0, degToRads, this);
      this.mat = new Matrix();
      this._prevMat = new Matrix();
      this._isFirstFrame = true;
      this.finalTransform = {
        mProp: this
      };
    }
    extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);
    HCameraElement.prototype.setup = function() {
      var i2;
      var len = this.comp.threeDElements.length;
      var comp2;
      var perspectiveStyle;
      var containerStyle;
      for (i2 = 0; i2 < len; i2 += 1) {
        comp2 = this.comp.threeDElements[i2];
        if (comp2.type === "3d") {
          perspectiveStyle = comp2.perspectiveElem.style;
          containerStyle = comp2.container.style;
          var perspective = this.pe.v + "px";
          var origin = "0px 0px 0px";
          var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
          perspectiveStyle.perspective = perspective;
          perspectiveStyle.webkitPerspective = perspective;
          containerStyle.transformOrigin = origin;
          containerStyle.mozTransformOrigin = origin;
          containerStyle.webkitTransformOrigin = origin;
          perspectiveStyle.transform = matrix;
          perspectiveStyle.webkitTransform = matrix;
        }
      }
    };
    HCameraElement.prototype.createElements = function() {
    };
    HCameraElement.prototype.hide = function() {
    };
    HCameraElement.prototype.renderFrame = function() {
      var _mdf = this._isFirstFrame;
      var i2;
      var len;
      if (this.hierarchy) {
        len = this.hierarchy.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          _mdf = this.hierarchy[i2].finalTransform.mProp._mdf || _mdf;
        }
      }
      if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
        this.mat.reset();
        if (this.hierarchy) {
          len = this.hierarchy.length - 1;
          for (i2 = len; i2 >= 0; i2 -= 1) {
            var mTransf = this.hierarchy[i2].finalTransform.mProp;
            this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
            this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
            this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
            this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
            this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
          }
        }
        if (this.p) {
          this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
        } else {
          this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
        }
        if (this.a) {
          var diffVector;
          if (this.p) {
            diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
          } else {
            diffVector = [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
          }
          var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2));
          var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
          var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
          var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
          var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);
          this.mat.rotateY(mRotationY).rotateX(-mRotationX);
        }
        this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
        this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
        this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
        this.mat.translate(0, 0, this.pe.v);
        var hasMatrixChanged = !this._prevMat.equals(this.mat);
        if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
          len = this.comp.threeDElements.length;
          var comp2;
          var perspectiveStyle;
          var containerStyle;
          for (i2 = 0; i2 < len; i2 += 1) {
            comp2 = this.comp.threeDElements[i2];
            if (comp2.type === "3d") {
              if (hasMatrixChanged) {
                var matValue = this.mat.toCSS();
                containerStyle = comp2.container.style;
                containerStyle.transform = matValue;
                containerStyle.webkitTransform = matValue;
              }
              if (this.pe._mdf) {
                perspectiveStyle = comp2.perspectiveElem.style;
                perspectiveStyle.perspective = this.pe.v + "px";
                perspectiveStyle.webkitPerspective = this.pe.v + "px";
              }
            }
          }
          this.mat.clone(this._prevMat);
        }
      }
      this._isFirstFrame = false;
    };
    HCameraElement.prototype.prepareFrame = function(num) {
      this.prepareProperties(num, true);
    };
    HCameraElement.prototype.destroy = function() {
    };
    HCameraElement.prototype.getBaseElement = function() {
      return null;
    };
    function HImageElement(data2, globalData2, comp2) {
      this.assetData = globalData2.getAssetData(data2.refId);
      this.initElement(data2, globalData2, comp2);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);
    HImageElement.prototype.createContent = function() {
      var assetPath = this.globalData.getAssetsPath(this.assetData);
      var img = new Image();
      if (this.data.hasMask) {
        this.imageElem = createNS("image");
        this.imageElem.setAttribute("width", this.assetData.w + "px");
        this.imageElem.setAttribute("height", this.assetData.h + "px");
        this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
        this.layerElement.appendChild(this.imageElem);
        this.baseElement.setAttribute("width", this.assetData.w);
        this.baseElement.setAttribute("height", this.assetData.h);
      } else {
        this.layerElement.appendChild(img);
      }
      img.crossOrigin = "anonymous";
      img.src = assetPath;
      if (this.data.ln) {
        this.baseElement.setAttribute("id", this.data.ln);
      }
    };
    function HybridRendererBase(animationItem, config2) {
      this.animationItem = animationItem;
      this.layers = null;
      this.renderedFrame = -1;
      this.renderConfig = {
        className: config2 && config2.className || "",
        imagePreserveAspectRatio: config2 && config2.imagePreserveAspectRatio || "xMidYMid slice",
        hideOnTransparent: !(config2 && config2.hideOnTransparent === false),
        filterSize: {
          width: config2 && config2.filterSize && config2.filterSize.width || "400%",
          height: config2 && config2.filterSize && config2.filterSize.height || "400%",
          x: config2 && config2.filterSize && config2.filterSize.x || "-100%",
          y: config2 && config2.filterSize && config2.filterSize.y || "-100%"
        }
      };
      this.globalData = {
        _mdf: false,
        frameNum: -1,
        renderConfig: this.renderConfig
      };
      this.pendingElements = [];
      this.elements = [];
      this.threeDElements = [];
      this.destroyed = false;
      this.camera = null;
      this.supports3d = true;
      this.rendererType = "html";
    }
    extendPrototype([BaseRenderer], HybridRendererBase);
    HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;
    HybridRendererBase.prototype.checkPendingElements = function() {
      while (this.pendingElements.length) {
        var element = this.pendingElements.pop();
        element.checkParenting();
      }
    };
    HybridRendererBase.prototype.appendElementInPos = function(element, pos) {
      var newDOMElement = element.getBaseElement();
      if (!newDOMElement) {
        return;
      }
      var layer = this.layers[pos];
      if (!layer.ddd || !this.supports3d) {
        if (this.threeDElements) {
          this.addTo3dContainer(newDOMElement, pos);
        } else {
          var i2 = 0;
          var nextDOMElement;
          var nextLayer;
          var tmpDOMElement;
          while (i2 < pos) {
            if (this.elements[i2] && this.elements[i2] !== true && this.elements[i2].getBaseElement) {
              nextLayer = this.elements[i2];
              tmpDOMElement = this.layers[i2].ddd ? this.getThreeDContainerByPos(i2) : nextLayer.getBaseElement();
              nextDOMElement = tmpDOMElement || nextDOMElement;
            }
            i2 += 1;
          }
          if (nextDOMElement) {
            if (!layer.ddd || !this.supports3d) {
              this.layerElement.insertBefore(newDOMElement, nextDOMElement);
            }
          } else if (!layer.ddd || !this.supports3d) {
            this.layerElement.appendChild(newDOMElement);
          }
        }
      } else {
        this.addTo3dContainer(newDOMElement, pos);
      }
    };
    HybridRendererBase.prototype.createShape = function(data2) {
      if (!this.supports3d) {
        return new SVGShapeElement(data2, this.globalData, this);
      }
      return new HShapeElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createText = function(data2) {
      if (!this.supports3d) {
        return new SVGTextLottieElement(data2, this.globalData, this);
      }
      return new HTextElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createCamera = function(data2) {
      this.camera = new HCameraElement(data2, this.globalData, this);
      return this.camera;
    };
    HybridRendererBase.prototype.createImage = function(data2) {
      if (!this.supports3d) {
        return new IImageElement(data2, this.globalData, this);
      }
      return new HImageElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createSolid = function(data2) {
      if (!this.supports3d) {
        return new ISolidElement(data2, this.globalData, this);
      }
      return new HSolidElement(data2, this.globalData, this);
    };
    HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
    HybridRendererBase.prototype.getThreeDContainerByPos = function(pos) {
      var i2 = 0;
      var len = this.threeDElements.length;
      while (i2 < len) {
        if (this.threeDElements[i2].startPos <= pos && this.threeDElements[i2].endPos >= pos) {
          return this.threeDElements[i2].perspectiveElem;
        }
        i2 += 1;
      }
      return null;
    };
    HybridRendererBase.prototype.createThreeDContainer = function(pos, type) {
      var perspectiveElem = createTag("div");
      var style;
      var containerStyle;
      styleDiv(perspectiveElem);
      var container = createTag("div");
      styleDiv(container);
      if (type === "3d") {
        style = perspectiveElem.style;
        style.width = this.globalData.compSize.w + "px";
        style.height = this.globalData.compSize.h + "px";
        var center = "50% 50%";
        style.webkitTransformOrigin = center;
        style.mozTransformOrigin = center;
        style.transformOrigin = center;
        containerStyle = container.style;
        var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
        containerStyle.transform = matrix;
        containerStyle.webkitTransform = matrix;
      }
      perspectiveElem.appendChild(container);
      var threeDContainerData = {
        container,
        perspectiveElem,
        startPos: pos,
        endPos: pos,
        type
      };
      this.threeDElements.push(threeDContainerData);
      return threeDContainerData;
    };
    HybridRendererBase.prototype.build3dContainers = function() {
      var i2;
      var len = this.layers.length;
      var lastThreeDContainerData;
      var currentContainer = "";
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.layers[i2].ddd && this.layers[i2].ty !== 3) {
          if (currentContainer !== "3d") {
            currentContainer = "3d";
            lastThreeDContainerData = this.createThreeDContainer(i2, "3d");
          }
          lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i2);
        } else {
          if (currentContainer !== "2d") {
            currentContainer = "2d";
            lastThreeDContainerData = this.createThreeDContainer(i2, "2d");
          }
          lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i2);
        }
      }
      len = this.threeDElements.length;
      for (i2 = len - 1; i2 >= 0; i2 -= 1) {
        this.resizerElem.appendChild(this.threeDElements[i2].perspectiveElem);
      }
    };
    HybridRendererBase.prototype.addTo3dContainer = function(elem2, pos) {
      var i2 = 0;
      var len = this.threeDElements.length;
      while (i2 < len) {
        if (pos <= this.threeDElements[i2].endPos) {
          var j = this.threeDElements[i2].startPos;
          var nextElement;
          while (j < pos) {
            if (this.elements[j] && this.elements[j].getBaseElement) {
              nextElement = this.elements[j].getBaseElement();
            }
            j += 1;
          }
          if (nextElement) {
            this.threeDElements[i2].container.insertBefore(elem2, nextElement);
          } else {
            this.threeDElements[i2].container.appendChild(elem2);
          }
          break;
        }
        i2 += 1;
      }
    };
    HybridRendererBase.prototype.configAnimation = function(animData) {
      var resizerElem = createTag("div");
      var wrapper = this.animationItem.wrapper;
      var style = resizerElem.style;
      style.width = animData.w + "px";
      style.height = animData.h + "px";
      this.resizerElem = resizerElem;
      styleDiv(resizerElem);
      style.transformStyle = "flat";
      style.mozTransformStyle = "flat";
      style.webkitTransformStyle = "flat";
      if (this.renderConfig.className) {
        resizerElem.setAttribute("class", this.renderConfig.className);
      }
      wrapper.appendChild(resizerElem);
      style.overflow = "hidden";
      var svg = createNS("svg");
      svg.setAttribute("width", "1");
      svg.setAttribute("height", "1");
      styleDiv(svg);
      this.resizerElem.appendChild(svg);
      var defs = createNS("defs");
      svg.appendChild(defs);
      this.data = animData;
      this.setupGlobalData(animData, svg);
      this.globalData.defs = defs;
      this.layers = animData.layers;
      this.layerElement = this.resizerElem;
      this.build3dContainers();
      this.updateContainerSize();
    };
    HybridRendererBase.prototype.destroy = function() {
      if (this.animationItem.wrapper) {
        this.animationItem.wrapper.innerText = "";
      }
      this.animationItem.container = null;
      this.globalData.defs = null;
      var i2;
      var len = this.layers ? this.layers.length : 0;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.elements[i2] && this.elements[i2].destroy) {
          this.elements[i2].destroy();
        }
      }
      this.elements.length = 0;
      this.destroyed = true;
      this.animationItem = null;
    };
    HybridRendererBase.prototype.updateContainerSize = function() {
      var elementWidth = this.animationItem.wrapper.offsetWidth;
      var elementHeight = this.animationItem.wrapper.offsetHeight;
      var elementRel = elementWidth / elementHeight;
      var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
      var sx;
      var sy;
      var tx;
      var ty;
      if (animationRel > elementRel) {
        sx = elementWidth / this.globalData.compSize.w;
        sy = elementWidth / this.globalData.compSize.w;
        tx = 0;
        ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;
      } else {
        sx = elementHeight / this.globalData.compSize.h;
        sy = elementHeight / this.globalData.compSize.h;
        tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
        ty = 0;
      }
      var style = this.resizerElem.style;
      style.webkitTransform = "matrix3d(" + sx + ",0,0,0,0," + sy + ",0,0,0,0,1,0," + tx + "," + ty + ",0,1)";
      style.transform = style.webkitTransform;
    };
    HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;
    HybridRendererBase.prototype.hide = function() {
      this.resizerElem.style.display = "none";
    };
    HybridRendererBase.prototype.show = function() {
      this.resizerElem.style.display = "block";
    };
    HybridRendererBase.prototype.initItems = function() {
      this.buildAllItems();
      if (this.camera) {
        this.camera.setup();
      } else {
        var cWidth = this.globalData.compSize.w;
        var cHeight = this.globalData.compSize.h;
        var i2;
        var len = this.threeDElements.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          var style = this.threeDElements[i2].perspectiveElem.style;
          style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + "px";
          style.perspective = style.webkitPerspective;
        }
      }
    };
    HybridRendererBase.prototype.searchExtraCompositions = function(assets2) {
      var i2;
      var len = assets2.length;
      var floatingContainer = createTag("div");
      for (i2 = 0; i2 < len; i2 += 1) {
        if (assets2[i2].xt) {
          var comp2 = this.createComp(assets2[i2], floatingContainer, this.globalData.comp, null);
          comp2.initExpressions();
          this.globalData.projectInterface.registerComposition(comp2);
        }
      }
    };
    function HCompElement(data2, globalData2, comp2) {
      this.layers = data2.layers;
      this.supports3d = !data2.hasMask;
      this.completeLayers = false;
      this.pendingElements = [];
      this.elements = this.layers ? createSizedArray(this.layers.length) : [];
      this.initElement(data2, globalData2, comp2);
      this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
        _placeholder: true
      };
    }
    extendPrototype([HybridRendererBase, ICompElement, HBaseElement], HCompElement);
    HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;
    HCompElement.prototype.createContainerElements = function() {
      this._createBaseContainerElements();
      if (this.data.hasMask) {
        this.svgElement.setAttribute("width", this.data.w);
        this.svgElement.setAttribute("height", this.data.h);
        this.transformedElement = this.baseElement;
      } else {
        this.transformedElement = this.layerElement;
      }
    };
    HCompElement.prototype.addTo3dContainer = function(elem2, pos) {
      var j = 0;
      var nextElement;
      while (j < pos) {
        if (this.elements[j] && this.elements[j].getBaseElement) {
          nextElement = this.elements[j].getBaseElement();
        }
        j += 1;
      }
      if (nextElement) {
        this.layerElement.insertBefore(elem2, nextElement);
      } else {
        this.layerElement.appendChild(elem2);
      }
    };
    HCompElement.prototype.createComp = function(data2) {
      if (!this.supports3d) {
        return new SVGCompElement(data2, this.globalData, this);
      }
      return new HCompElement(data2, this.globalData, this);
    };
    function HybridRenderer(animationItem, config2) {
      this.animationItem = animationItem;
      this.layers = null;
      this.renderedFrame = -1;
      this.renderConfig = {
        className: config2 && config2.className || "",
        imagePreserveAspectRatio: config2 && config2.imagePreserveAspectRatio || "xMidYMid slice",
        hideOnTransparent: !(config2 && config2.hideOnTransparent === false),
        filterSize: {
          width: config2 && config2.filterSize && config2.filterSize.width || "400%",
          height: config2 && config2.filterSize && config2.filterSize.height || "400%",
          x: config2 && config2.filterSize && config2.filterSize.x || "-100%",
          y: config2 && config2.filterSize && config2.filterSize.y || "-100%"
        },
        runExpressions: !config2 || config2.runExpressions === void 0 || config2.runExpressions
      };
      this.globalData = {
        _mdf: false,
        frameNum: -1,
        renderConfig: this.renderConfig
      };
      this.pendingElements = [];
      this.elements = [];
      this.threeDElements = [];
      this.destroyed = false;
      this.camera = null;
      this.supports3d = true;
      this.rendererType = "html";
    }
    extendPrototype([HybridRendererBase], HybridRenderer);
    HybridRenderer.prototype.createComp = function(data2) {
      if (!this.supports3d) {
        return new SVGCompElement(data2, this.globalData, this);
      }
      return new HCompElement(data2, this.globalData, this);
    };
    var CompExpressionInterface = function() {
      return function(comp2) {
        function _thisLayerFunction(name2) {
          var i2 = 0;
          var len = comp2.layers.length;
          while (i2 < len) {
            if (comp2.layers[i2].nm === name2 || comp2.layers[i2].ind === name2) {
              return comp2.elements[i2].layerInterface;
            }
            i2 += 1;
          }
          return null;
        }
        Object.defineProperty(_thisLayerFunction, "_name", {
          value: comp2.data.nm
        });
        _thisLayerFunction.layer = _thisLayerFunction;
        _thisLayerFunction.pixelAspect = 1;
        _thisLayerFunction.height = comp2.data.h || comp2.globalData.compSize.h;
        _thisLayerFunction.width = comp2.data.w || comp2.globalData.compSize.w;
        _thisLayerFunction.pixelAspect = 1;
        _thisLayerFunction.frameDuration = 1 / comp2.globalData.frameRate;
        _thisLayerFunction.displayStartTime = 0;
        _thisLayerFunction.numLayers = comp2.layers.length;
        return _thisLayerFunction;
      };
    }();
    function _typeof$2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$2 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$2 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$2(obj);
    }
    function seedRandom(pool, math) {
      var global2 = this, width2 = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width2, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask2 = width2 - 1, nodecrypto;
      function seedrandom(seed, options, callback) {
        var key2 = [];
        options = options === true ? {
          entropy: true
        } : options || {};
        var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed, 3), key2);
        var arc4 = new ARC4(key2);
        var prng = function prng2() {
          var n2 = arc4.g(chunks), d4 = startdenom, x3 = 0;
          while (n2 < significance) {
            n2 = (n2 + x3) * width2;
            d4 *= width2;
            x3 = arc4.g(1);
          }
          while (n2 >= overflow) {
            n2 /= 2;
            d4 /= 2;
            x3 >>>= 1;
          }
          return (n2 + x3) / d4;
        };
        prng.int32 = function() {
          return arc4.g(4) | 0;
        };
        prng.quick = function() {
          return arc4.g(4) / 4294967296;
        };
        prng["double"] = prng;
        mixkey(tostring(arc4.S), pool);
        return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
          if (state) {
            if (state.S) {
              copy(state, arc4);
            }
            prng2.state = function() {
              return copy(arc4, {});
            };
          }
          if (is_math_call) {
            math[rngname] = prng2;
            return seed2;
          } else
            return prng2;
        })(prng, shortseed, "global" in options ? options.global : this == math, options.state);
      }
      math["seed" + rngname] = seedrandom;
      function ARC4(key2) {
        var t3, keylen = key2.length, me2 = this, i2 = 0, j = me2.i = me2.j = 0, s3 = me2.S = [];
        if (!keylen) {
          key2 = [keylen++];
        }
        while (i2 < width2) {
          s3[i2] = i2++;
        }
        for (i2 = 0; i2 < width2; i2++) {
          s3[i2] = s3[j = mask2 & j + key2[i2 % keylen] + (t3 = s3[i2])];
          s3[j] = t3;
        }
        me2.g = function(count) {
          var t4, r2 = 0, i3 = me2.i, j2 = me2.j, s4 = me2.S;
          while (count--) {
            t4 = s4[i3 = mask2 & i3 + 1];
            r2 = r2 * width2 + s4[mask2 & (s4[i3] = s4[j2 = mask2 & j2 + t4]) + (s4[j2] = t4)];
          }
          me2.i = i3;
          me2.j = j2;
          return r2;
        };
      }
      function copy(f2, t3) {
        t3.i = f2.i;
        t3.j = f2.j;
        t3.S = f2.S.slice();
        return t3;
      }
      function flatten(obj, depth) {
        var result = [], typ = _typeof$2(obj), prop;
        if (depth && typ == "object") {
          for (prop in obj) {
            try {
              result.push(flatten(obj[prop], depth - 1));
            } catch (e3) {
            }
          }
        }
        return result.length ? result : typ == "string" ? obj : obj + "\0";
      }
      function mixkey(seed, key2) {
        var stringseed = seed + "", smear, j = 0;
        while (j < stringseed.length) {
          key2[mask2 & j] = mask2 & (smear ^= key2[mask2 & j] * 19) + stringseed.charCodeAt(j++);
        }
        return tostring(key2);
      }
      function autoseed() {
        try {
          if (nodecrypto)
            ;
          var out = new Uint8Array(width2);
          (global2.crypto || global2.msCrypto).getRandomValues(out);
          return tostring(out);
        } catch (e3) {
          var browser = global2.navigator, plugins = browser && browser.plugins;
          return [+/* @__PURE__ */ new Date(), global2, plugins, global2.screen, tostring(pool)];
        }
      }
      function tostring(a3) {
        return String.fromCharCode.apply(0, a3);
      }
      mixkey(math.random(), pool);
    }
    function initialize$2(BMMath2) {
      seedRandom([], BMMath2);
    }
    var propTypes = {
      SHAPE: "shape"
    };
    function _typeof$1(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof$1 = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof$1 = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof$1(obj);
    }
    var ExpressionManager = function() {
      var ob = {};
      var Math = BMMath;
      var window = null;
      var document = null;
      var XMLHttpRequest = null;
      var fetch = null;
      var frames = null;
      var _lottieGlobal = {};
      initialize$2(BMMath);
      function resetFrame() {
        _lottieGlobal = {};
      }
      function $bm_isInstanceOfArray(arr) {
        return arr.constructor === Array || arr.constructor === Float32Array;
      }
      function isNumerable(tOfV, v2) {
        return tOfV === "number" || v2 instanceof Number || tOfV === "boolean" || tOfV === "string";
      }
      function $bm_neg(a3) {
        var tOfA = _typeof$1(a3);
        if (tOfA === "number" || a3 instanceof Number || tOfA === "boolean") {
          return -a3;
        }
        if ($bm_isInstanceOfArray(a3)) {
          var i2;
          var lenA = a3.length;
          var retArr = [];
          for (i2 = 0; i2 < lenA; i2 += 1) {
            retArr[i2] = -a3[i2];
          }
          return retArr;
        }
        if (a3.propType) {
          return a3.v;
        }
        return -a3;
      }
      var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, "easeIn").get;
      var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, "easeOut").get;
      var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, "easeInOut").get;
      function sum(a3, b3) {
        var tOfA = _typeof$1(a3);
        var tOfB = _typeof$1(b3);
        if (isNumerable(tOfA, a3) && isNumerable(tOfB, b3) || tOfA === "string" || tOfB === "string") {
          return a3 + b3;
        }
        if ($bm_isInstanceOfArray(a3) && isNumerable(tOfB, b3)) {
          a3 = a3.slice(0);
          a3[0] += b3;
          return a3;
        }
        if (isNumerable(tOfA, a3) && $bm_isInstanceOfArray(b3)) {
          b3 = b3.slice(0);
          b3[0] = a3 + b3[0];
          return b3;
        }
        if ($bm_isInstanceOfArray(a3) && $bm_isInstanceOfArray(b3)) {
          var i2 = 0;
          var lenA = a3.length;
          var lenB = b3.length;
          var retArr = [];
          while (i2 < lenA || i2 < lenB) {
            if ((typeof a3[i2] === "number" || a3[i2] instanceof Number) && (typeof b3[i2] === "number" || b3[i2] instanceof Number)) {
              retArr[i2] = a3[i2] + b3[i2];
            } else {
              retArr[i2] = b3[i2] === void 0 ? a3[i2] : a3[i2] || b3[i2];
            }
            i2 += 1;
          }
          return retArr;
        }
        return 0;
      }
      var add = sum;
      function sub(a3, b3) {
        var tOfA = _typeof$1(a3);
        var tOfB = _typeof$1(b3);
        if (isNumerable(tOfA, a3) && isNumerable(tOfB, b3)) {
          if (tOfA === "string") {
            a3 = parseInt(a3, 10);
          }
          if (tOfB === "string") {
            b3 = parseInt(b3, 10);
          }
          return a3 - b3;
        }
        if ($bm_isInstanceOfArray(a3) && isNumerable(tOfB, b3)) {
          a3 = a3.slice(0);
          a3[0] -= b3;
          return a3;
        }
        if (isNumerable(tOfA, a3) && $bm_isInstanceOfArray(b3)) {
          b3 = b3.slice(0);
          b3[0] = a3 - b3[0];
          return b3;
        }
        if ($bm_isInstanceOfArray(a3) && $bm_isInstanceOfArray(b3)) {
          var i2 = 0;
          var lenA = a3.length;
          var lenB = b3.length;
          var retArr = [];
          while (i2 < lenA || i2 < lenB) {
            if ((typeof a3[i2] === "number" || a3[i2] instanceof Number) && (typeof b3[i2] === "number" || b3[i2] instanceof Number)) {
              retArr[i2] = a3[i2] - b3[i2];
            } else {
              retArr[i2] = b3[i2] === void 0 ? a3[i2] : a3[i2] || b3[i2];
            }
            i2 += 1;
          }
          return retArr;
        }
        return 0;
      }
      function mul(a3, b3) {
        var tOfA = _typeof$1(a3);
        var tOfB = _typeof$1(b3);
        var arr;
        if (isNumerable(tOfA, a3) && isNumerable(tOfB, b3)) {
          return a3 * b3;
        }
        var i2;
        var len;
        if ($bm_isInstanceOfArray(a3) && isNumerable(tOfB, b3)) {
          len = a3.length;
          arr = createTypedArray("float32", len);
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = a3[i2] * b3;
          }
          return arr;
        }
        if (isNumerable(tOfA, a3) && $bm_isInstanceOfArray(b3)) {
          len = b3.length;
          arr = createTypedArray("float32", len);
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = a3 * b3[i2];
          }
          return arr;
        }
        return 0;
      }
      function div(a3, b3) {
        var tOfA = _typeof$1(a3);
        var tOfB = _typeof$1(b3);
        var arr;
        if (isNumerable(tOfA, a3) && isNumerable(tOfB, b3)) {
          return a3 / b3;
        }
        var i2;
        var len;
        if ($bm_isInstanceOfArray(a3) && isNumerable(tOfB, b3)) {
          len = a3.length;
          arr = createTypedArray("float32", len);
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = a3[i2] / b3;
          }
          return arr;
        }
        if (isNumerable(tOfA, a3) && $bm_isInstanceOfArray(b3)) {
          len = b3.length;
          arr = createTypedArray("float32", len);
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = a3 / b3[i2];
          }
          return arr;
        }
        return 0;
      }
      function mod(a3, b3) {
        if (typeof a3 === "string") {
          a3 = parseInt(a3, 10);
        }
        if (typeof b3 === "string") {
          b3 = parseInt(b3, 10);
        }
        return a3 % b3;
      }
      var $bm_sum = sum;
      var $bm_sub = sub;
      var $bm_mul = mul;
      var $bm_div = div;
      var $bm_mod = mod;
      function clamp(num, min, max) {
        if (min > max) {
          var mm = max;
          max = min;
          min = mm;
        }
        return Math.min(Math.max(num, min), max);
      }
      function radiansToDegrees(val2) {
        return val2 / degToRads;
      }
      var radians_to_degrees = radiansToDegrees;
      function degreesToRadians(val2) {
        return val2 * degToRads;
      }
      var degrees_to_radians = radiansToDegrees;
      var helperLengthArray = [0, 0, 0, 0, 0, 0];
      function length(arr1, arr2) {
        if (typeof arr1 === "number" || arr1 instanceof Number) {
          arr2 = arr2 || 0;
          return Math.abs(arr1 - arr2);
        }
        if (!arr2) {
          arr2 = helperLengthArray;
        }
        var i2;
        var len = Math.min(arr1.length, arr2.length);
        var addedLength = 0;
        for (i2 = 0; i2 < len; i2 += 1) {
          addedLength += Math.pow(arr2[i2] - arr1[i2], 2);
        }
        return Math.sqrt(addedLength);
      }
      function normalize(vec) {
        return div(vec, length(vec));
      }
      function rgbToHsl(val2) {
        var r2 = val2[0];
        var g2 = val2[1];
        var b3 = val2[2];
        var max = Math.max(r2, g2, b3);
        var min = Math.min(r2, g2, b3);
        var h4;
        var s3;
        var l2 = (max + min) / 2;
        if (max === min) {
          h4 = 0;
          s3 = 0;
        } else {
          var d4 = max - min;
          s3 = l2 > 0.5 ? d4 / (2 - max - min) : d4 / (max + min);
          switch (max) {
            case r2:
              h4 = (g2 - b3) / d4 + (g2 < b3 ? 6 : 0);
              break;
            case g2:
              h4 = (b3 - r2) / d4 + 2;
              break;
            case b3:
              h4 = (r2 - g2) / d4 + 4;
              break;
          }
          h4 /= 6;
        }
        return [h4, s3, l2, val2[3]];
      }
      function hue2rgb(p2, q3, t3) {
        if (t3 < 0)
          t3 += 1;
        if (t3 > 1)
          t3 -= 1;
        if (t3 < 1 / 6)
          return p2 + (q3 - p2) * 6 * t3;
        if (t3 < 1 / 2)
          return q3;
        if (t3 < 2 / 3)
          return p2 + (q3 - p2) * (2 / 3 - t3) * 6;
        return p2;
      }
      function hslToRgb(val2) {
        var h4 = val2[0];
        var s3 = val2[1];
        var l2 = val2[2];
        var r2;
        var g2;
        var b3;
        if (s3 === 0) {
          r2 = l2;
          b3 = l2;
          g2 = l2;
        } else {
          var q3 = l2 < 0.5 ? l2 * (1 + s3) : l2 + s3 - l2 * s3;
          var p2 = 2 * l2 - q3;
          r2 = hue2rgb(p2, q3, h4 + 1 / 3);
          g2 = hue2rgb(p2, q3, h4);
          b3 = hue2rgb(p2, q3, h4 - 1 / 3);
        }
        return [r2, g2, b3, val2[3]];
      }
      function linear(t3, tMin, tMax, value1, value2) {
        if (value1 === void 0 || value2 === void 0) {
          value1 = tMin;
          value2 = tMax;
          tMin = 0;
          tMax = 1;
        }
        if (tMax < tMin) {
          var _tMin = tMax;
          tMax = tMin;
          tMin = _tMin;
        }
        if (t3 <= tMin) {
          return value1;
        }
        if (t3 >= tMax) {
          return value2;
        }
        var perc = tMax === tMin ? 0 : (t3 - tMin) / (tMax - tMin);
        if (!value1.length) {
          return value1 + (value2 - value1) * perc;
        }
        var i2;
        var len = value1.length;
        var arr = createTypedArray("float32", len);
        for (i2 = 0; i2 < len; i2 += 1) {
          arr[i2] = value1[i2] + (value2[i2] - value1[i2]) * perc;
        }
        return arr;
      }
      function random(min, max) {
        if (max === void 0) {
          if (min === void 0) {
            min = 0;
            max = 1;
          } else {
            max = min;
            min = void 0;
          }
        }
        if (max.length) {
          var i2;
          var len = max.length;
          if (!min) {
            min = createTypedArray("float32", len);
          }
          var arr = createTypedArray("float32", len);
          var rnd = BMMath.random();
          for (i2 = 0; i2 < len; i2 += 1) {
            arr[i2] = min[i2] + rnd * (max[i2] - min[i2]);
          }
          return arr;
        }
        if (min === void 0) {
          min = 0;
        }
        var rndm = BMMath.random();
        return min + rndm * (max - min);
      }
      function createPath(points, inTangents, outTangents, closed) {
        var i2;
        var len = points.length;
        var path = shapePool.newElement();
        path.setPathData(!!closed, len);
        var arrPlaceholder = [0, 0];
        var inVertexPoint;
        var outVertexPoint;
        for (i2 = 0; i2 < len; i2 += 1) {
          inVertexPoint = inTangents && inTangents[i2] ? inTangents[i2] : arrPlaceholder;
          outVertexPoint = outTangents && outTangents[i2] ? outTangents[i2] : arrPlaceholder;
          path.setTripleAt(points[i2][0], points[i2][1], outVertexPoint[0] + points[i2][0], outVertexPoint[1] + points[i2][1], inVertexPoint[0] + points[i2][0], inVertexPoint[1] + points[i2][1], i2, true);
        }
        return path;
      }
      function initiateExpression(elem, data, property) {
        function noOp(_value) {
          return _value;
        }
        if (!elem.globalData.renderConfig.runExpressions) {
          return noOp;
        }
        var val = data.x;
        var needsVelocity = /velocity(?![\w\d])/.test(val);
        var _needsRandom = val.indexOf("random") !== -1;
        var elemType = elem.data.ty;
        var transform;
        var $bm_transform;
        var content;
        var effect;
        var thisProperty = property;
        thisProperty.valueAtTime = thisProperty.getValueAtTime;
        Object.defineProperty(thisProperty, "value", {
          get: function get() {
            return thisProperty.v;
          }
        });
        elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
        elem.comp.displayStartTime = 0;
        var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
        var outPoint = elem.data.op / elem.comp.globalData.frameRate;
        var width = elem.data.sw ? elem.data.sw : 0;
        var height = elem.data.sh ? elem.data.sh : 0;
        var name = elem.data.nm;
        var loopIn;
        var loop_in;
        var loopOut;
        var loop_out;
        var smooth;
        var toWorld;
        var fromWorld;
        var fromComp;
        var toComp;
        var fromCompToSurface;
        var position;
        var rotation;
        var anchorPoint;
        var scale;
        var thisLayer;
        var thisComp;
        var mask;
        var valueAtTime;
        var velocityAtTime;
        var scoped_bm_rt;
        var expression_function = eval("[function _expression_function(){" + val + ";scoped_bm_rt=$bm_rt}]")[0];
        var numKeys = property.kf ? data.k.length : 0;
        var active = !this.data || this.data.hd !== true;
        var wiggle = function wiggle2(freq, amp) {
          var iWiggle;
          var j;
          var lenWiggle = this.pv.length ? this.pv.length : 1;
          var addedAmps = createTypedArray("float32", lenWiggle);
          freq = 5;
          var iterations = Math.floor(time * freq);
          iWiggle = 0;
          j = 0;
          while (iWiggle < iterations) {
            for (j = 0; j < lenWiggle; j += 1) {
              addedAmps[j] += -amp + amp * 2 * BMMath.random();
            }
            iWiggle += 1;
          }
          var periods = time * freq;
          var perc = periods - Math.floor(periods);
          var arr = createTypedArray("float32", lenWiggle);
          if (lenWiggle > 1) {
            for (j = 0; j < lenWiggle; j += 1) {
              arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp * 2 * BMMath.random()) * perc;
            }
            return arr;
          }
          return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;
        }.bind(this);
        if (thisProperty.loopIn) {
          loopIn = thisProperty.loopIn.bind(thisProperty);
          loop_in = loopIn;
        }
        if (thisProperty.loopOut) {
          loopOut = thisProperty.loopOut.bind(thisProperty);
          loop_out = loopOut;
        }
        if (thisProperty.smooth) {
          smooth = thisProperty.smooth.bind(thisProperty);
        }
        function loopInDuration(type, duration) {
          return loopIn(type, duration, true);
        }
        function loopOutDuration(type, duration) {
          return loopOut(type, duration, true);
        }
        if (this.getValueAtTime) {
          valueAtTime = this.getValueAtTime.bind(this);
        }
        if (this.getVelocityAtTime) {
          velocityAtTime = this.getVelocityAtTime.bind(this);
        }
        var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);
        function lookAt(elem1, elem2) {
          var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
          var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
          var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
          return [yaw, pitch, 0];
        }
        function easeOut(t3, tMin, tMax, val1, val2) {
          return applyEase(easeOutBez, t3, tMin, tMax, val1, val2);
        }
        function easeIn(t3, tMin, tMax, val1, val2) {
          return applyEase(easeInBez, t3, tMin, tMax, val1, val2);
        }
        function ease(t3, tMin, tMax, val1, val2) {
          return applyEase(easeInOutBez, t3, tMin, tMax, val1, val2);
        }
        function applyEase(fn, t3, tMin, tMax, val1, val2) {
          if (val1 === void 0) {
            val1 = tMin;
            val2 = tMax;
          } else {
            t3 = (t3 - tMin) / (tMax - tMin);
          }
          if (t3 > 1) {
            t3 = 1;
          } else if (t3 < 0) {
            t3 = 0;
          }
          var mult = fn(t3);
          if ($bm_isInstanceOfArray(val1)) {
            var iKey;
            var lenKey = val1.length;
            var arr = createTypedArray("float32", lenKey);
            for (iKey = 0; iKey < lenKey; iKey += 1) {
              arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
            }
            return arr;
          }
          return (val2 - val1) * mult + val1;
        }
        function nearestKey(time2) {
          var iKey;
          var lenKey = data.k.length;
          var index2;
          var keyTime;
          if (!data.k.length || typeof data.k[0] === "number") {
            index2 = 0;
            keyTime = 0;
          } else {
            index2 = -1;
            time2 *= elem.comp.globalData.frameRate;
            if (time2 < data.k[0].t) {
              index2 = 1;
              keyTime = data.k[0].t;
            } else {
              for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
                if (time2 === data.k[iKey].t) {
                  index2 = iKey + 1;
                  keyTime = data.k[iKey].t;
                  break;
                } else if (time2 > data.k[iKey].t && time2 < data.k[iKey + 1].t) {
                  if (time2 - data.k[iKey].t > data.k[iKey + 1].t - time2) {
                    index2 = iKey + 2;
                    keyTime = data.k[iKey + 1].t;
                  } else {
                    index2 = iKey + 1;
                    keyTime = data.k[iKey].t;
                  }
                  break;
                }
              }
              if (index2 === -1) {
                index2 = iKey + 1;
                keyTime = data.k[iKey].t;
              }
            }
          }
          var obKey = {};
          obKey.index = index2;
          obKey.time = keyTime / elem.comp.globalData.frameRate;
          return obKey;
        }
        function key(ind) {
          var obKey;
          var iKey;
          var lenKey;
          if (!data.k.length || typeof data.k[0] === "number") {
            throw new Error("The property has no keyframe at index " + ind);
          }
          ind -= 1;
          obKey = {
            time: data.k[ind].t / elem.comp.globalData.frameRate,
            value: []
          };
          var arr = Object.prototype.hasOwnProperty.call(data.k[ind], "s") ? data.k[ind].s : data.k[ind - 1].e;
          lenKey = arr.length;
          for (iKey = 0; iKey < lenKey; iKey += 1) {
            obKey[iKey] = arr[iKey];
            obKey.value[iKey] = arr[iKey];
          }
          return obKey;
        }
        function framesToTime(fr2, fps) {
          if (!fps) {
            fps = elem.comp.globalData.frameRate;
          }
          return fr2 / fps;
        }
        function timeToFrames(t3, fps) {
          if (!t3 && t3 !== 0) {
            t3 = time;
          }
          if (!fps) {
            fps = elem.comp.globalData.frameRate;
          }
          return t3 * fps;
        }
        function seedRandom(seed) {
          BMMath.seedrandom(randSeed + seed);
        }
        function sourceRectAtTime() {
          return elem.sourceRectAtTime();
        }
        function substring(init, end) {
          if (typeof value === "string") {
            if (end === void 0) {
              return value.substring(init);
            }
            return value.substring(init, end);
          }
          return "";
        }
        function substr(init, end) {
          if (typeof value === "string") {
            if (end === void 0) {
              return value.substr(init);
            }
            return value.substr(init, end);
          }
          return "";
        }
        function posterizeTime(framesPerSecond) {
          time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;
          value = valueAtTime(time);
        }
        var time;
        var velocity;
        var value;
        var text;
        var textIndex;
        var textTotal;
        var selectorValue;
        var index = elem.data.ind;
        var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
        var parent;
        var randSeed = Math.floor(Math.random() * 1e6);
        var globalData = elem.globalData;
        function executeExpression(_value) {
          value = _value;
          if (this.frameExpressionId === elem.globalData.frameId && this.propType !== "textSelector") {
            return value;
          }
          if (this.propType === "textSelector") {
            textIndex = this.textIndex;
            textTotal = this.textTotal;
            selectorValue = this.selectorValue;
          }
          if (!thisLayer) {
            text = elem.layerInterface.text;
            thisLayer = elem.layerInterface;
            thisComp = elem.comp.compInterface;
            toWorld = thisLayer.toWorld.bind(thisLayer);
            fromWorld = thisLayer.fromWorld.bind(thisLayer);
            fromComp = thisLayer.fromComp.bind(thisLayer);
            toComp = thisLayer.toComp.bind(thisLayer);
            mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
            fromCompToSurface = fromComp;
          }
          if (!transform) {
            transform = elem.layerInterface("ADBE Transform Group");
            $bm_transform = transform;
            if (transform) {
              anchorPoint = transform.anchorPoint;
            }
          }
          if (elemType === 4 && !content) {
            content = thisLayer("ADBE Root Vectors Group");
          }
          if (!effect) {
            effect = thisLayer(4);
          }
          hasParent = !!(elem.hierarchy && elem.hierarchy.length);
          if (hasParent && !parent) {
            parent = elem.hierarchy[0].layerInterface;
          }
          time = this.comp.renderedFrame / this.comp.globalData.frameRate;
          if (_needsRandom) {
            seedRandom(randSeed + time);
          }
          if (needsVelocity) {
            velocity = velocityAtTime(time);
          }
          expression_function();
          this.frameExpressionId = elem.globalData.frameId;
          scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;
          return scoped_bm_rt;
        }
        executeExpression.__preventDeadCodeRemoval = [$bm_transform, anchorPoint, time, velocity, inPoint, outPoint, width, height, name, loop_in, loop_out, smooth, toComp, fromCompToSurface, toWorld, fromWorld, mask, position, rotation, scale, thisComp, numKeys, active, wiggle, loopInDuration, loopOutDuration, comp, lookAt, easeOut, easeIn, ease, nearestKey, key, text, textIndex, textTotal, selectorValue, framesToTime, timeToFrames, sourceRectAtTime, substring, substr, posterizeTime, index, globalData];
        return executeExpression;
      }
      ob.initiateExpression = initiateExpression;
      ob.__preventDeadCodeRemoval = [window, document, XMLHttpRequest, fetch, frames, $bm_neg, add, $bm_sum, $bm_sub, $bm_mul, $bm_div, $bm_mod, clamp, radians_to_degrees, degreesToRadians, degrees_to_radians, normalize, rgbToHsl, hslToRgb, linear, random, createPath, _lottieGlobal];
      ob.resetFrame = resetFrame;
      return ob;
    }();
    var Expressions = function() {
      var ob2 = {};
      ob2.initExpressions = initExpressions;
      ob2.resetFrame = ExpressionManager.resetFrame;
      function initExpressions(animation) {
        var stackCount = 0;
        var registers = [];
        function pushExpression() {
          stackCount += 1;
        }
        function popExpression() {
          stackCount -= 1;
          if (stackCount === 0) {
            releaseInstances();
          }
        }
        function registerExpressionProperty(expression) {
          if (registers.indexOf(expression) === -1) {
            registers.push(expression);
          }
        }
        function releaseInstances() {
          var i2;
          var len = registers.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            registers[i2].release();
          }
          registers.length = 0;
        }
        animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
        animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
        animation.renderer.globalData.pushExpression = pushExpression;
        animation.renderer.globalData.popExpression = popExpression;
        animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
      }
      return ob2;
    }();
    var MaskManagerInterface = function() {
      function MaskInterface(mask2, data2) {
        this._mask = mask2;
        this._data = data2;
      }
      Object.defineProperty(MaskInterface.prototype, "maskPath", {
        get: function get() {
          if (this._mask.prop.k) {
            this._mask.prop.getValue();
          }
          return this._mask.prop;
        }
      });
      Object.defineProperty(MaskInterface.prototype, "maskOpacity", {
        get: function get() {
          if (this._mask.op.k) {
            this._mask.op.getValue();
          }
          return this._mask.op.v * 100;
        }
      });
      var MaskManager = function MaskManager2(maskManager) {
        var _masksInterfaces = createSizedArray(maskManager.viewData.length);
        var i2;
        var len = maskManager.viewData.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          _masksInterfaces[i2] = new MaskInterface(maskManager.viewData[i2], maskManager.masksProperties[i2]);
        }
        var maskFunction = function maskFunction2(name2) {
          i2 = 0;
          while (i2 < len) {
            if (maskManager.masksProperties[i2].nm === name2) {
              return _masksInterfaces[i2];
            }
            i2 += 1;
          }
          return null;
        };
        return maskFunction;
      };
      return MaskManager;
    }();
    var ExpressionPropertyInterface = function() {
      var defaultUnidimensionalValue = {
        pv: 0,
        v: 0,
        mult: 1
      };
      var defaultMultidimensionalValue = {
        pv: [0, 0, 0],
        v: [0, 0, 0],
        mult: 1
      };
      function completeProperty(expressionValue, property2, type) {
        Object.defineProperty(expressionValue, "velocity", {
          get: function get() {
            return property2.getVelocityAtTime(property2.comp.currentFrame);
          }
        });
        expressionValue.numKeys = property2.keyframes ? property2.keyframes.length : 0;
        expressionValue.key = function(pos) {
          if (!expressionValue.numKeys) {
            return 0;
          }
          var value2 = "";
          if ("s" in property2.keyframes[pos - 1]) {
            value2 = property2.keyframes[pos - 1].s;
          } else if ("e" in property2.keyframes[pos - 2]) {
            value2 = property2.keyframes[pos - 2].e;
          } else {
            value2 = property2.keyframes[pos - 2].s;
          }
          var valueProp = type === "unidimensional" ? new Number(value2) : Object.assign({}, value2);
          valueProp.time = property2.keyframes[pos - 1].t / property2.elem.comp.globalData.frameRate;
          valueProp.value = type === "unidimensional" ? value2[0] : value2;
          return valueProp;
        };
        expressionValue.valueAtTime = property2.getValueAtTime;
        expressionValue.speedAtTime = property2.getSpeedAtTime;
        expressionValue.velocityAtTime = property2.getVelocityAtTime;
        expressionValue.propertyGroup = property2.propertyGroup;
      }
      function UnidimensionalPropertyInterface(property2) {
        if (!property2 || !("pv" in property2)) {
          property2 = defaultUnidimensionalValue;
        }
        var mult = 1 / property2.mult;
        var val2 = property2.pv * mult;
        var expressionValue = new Number(val2);
        expressionValue.value = val2;
        completeProperty(expressionValue, property2, "unidimensional");
        return function() {
          if (property2.k) {
            property2.getValue();
          }
          val2 = property2.v * mult;
          if (expressionValue.value !== val2) {
            expressionValue = new Number(val2);
            expressionValue.value = val2;
            completeProperty(expressionValue, property2, "unidimensional");
          }
          return expressionValue;
        };
      }
      function MultidimensionalPropertyInterface(property2) {
        if (!property2 || !("pv" in property2)) {
          property2 = defaultMultidimensionalValue;
        }
        var mult = 1 / property2.mult;
        var len = property2.data && property2.data.l || property2.pv.length;
        var expressionValue = createTypedArray("float32", len);
        var arrValue = createTypedArray("float32", len);
        expressionValue.value = arrValue;
        completeProperty(expressionValue, property2, "multidimensional");
        return function() {
          if (property2.k) {
            property2.getValue();
          }
          for (var i2 = 0; i2 < len; i2 += 1) {
            arrValue[i2] = property2.v[i2] * mult;
            expressionValue[i2] = arrValue[i2];
          }
          return expressionValue;
        };
      }
      function defaultGetter() {
        return defaultUnidimensionalValue;
      }
      return function(property2) {
        if (!property2) {
          return defaultGetter;
        }
        if (property2.propType === "unidimensional") {
          return UnidimensionalPropertyInterface(property2);
        }
        return MultidimensionalPropertyInterface(property2);
      };
    }();
    var TransformExpressionInterface = function() {
      return function(transform2) {
        function _thisFunction(name2) {
          switch (name2) {
            case "scale":
            case "Scale":
            case "ADBE Scale":
            case 6:
              return _thisFunction.scale;
            case "rotation":
            case "Rotation":
            case "ADBE Rotation":
            case "ADBE Rotate Z":
            case 10:
              return _thisFunction.rotation;
            case "ADBE Rotate X":
              return _thisFunction.xRotation;
            case "ADBE Rotate Y":
              return _thisFunction.yRotation;
            case "position":
            case "Position":
            case "ADBE Position":
            case 2:
              return _thisFunction.position;
            case "ADBE Position_0":
              return _thisFunction.xPosition;
            case "ADBE Position_1":
              return _thisFunction.yPosition;
            case "ADBE Position_2":
              return _thisFunction.zPosition;
            case "anchorPoint":
            case "AnchorPoint":
            case "Anchor Point":
            case "ADBE AnchorPoint":
            case 1:
              return _thisFunction.anchorPoint;
            case "opacity":
            case "Opacity":
            case 11:
              return _thisFunction.opacity;
            default:
              return null;
          }
        }
        Object.defineProperty(_thisFunction, "rotation", {
          get: ExpressionPropertyInterface(transform2.r || transform2.rz)
        });
        Object.defineProperty(_thisFunction, "zRotation", {
          get: ExpressionPropertyInterface(transform2.rz || transform2.r)
        });
        Object.defineProperty(_thisFunction, "xRotation", {
          get: ExpressionPropertyInterface(transform2.rx)
        });
        Object.defineProperty(_thisFunction, "yRotation", {
          get: ExpressionPropertyInterface(transform2.ry)
        });
        Object.defineProperty(_thisFunction, "scale", {
          get: ExpressionPropertyInterface(transform2.s)
        });
        var _px;
        var _py;
        var _pz;
        var _transformFactory;
        if (transform2.p) {
          _transformFactory = ExpressionPropertyInterface(transform2.p);
        } else {
          _px = ExpressionPropertyInterface(transform2.px);
          _py = ExpressionPropertyInterface(transform2.py);
          if (transform2.pz) {
            _pz = ExpressionPropertyInterface(transform2.pz);
          }
        }
        Object.defineProperty(_thisFunction, "position", {
          get: function get() {
            if (transform2.p) {
              return _transformFactory();
            }
            return [_px(), _py(), _pz ? _pz() : 0];
          }
        });
        Object.defineProperty(_thisFunction, "xPosition", {
          get: ExpressionPropertyInterface(transform2.px)
        });
        Object.defineProperty(_thisFunction, "yPosition", {
          get: ExpressionPropertyInterface(transform2.py)
        });
        Object.defineProperty(_thisFunction, "zPosition", {
          get: ExpressionPropertyInterface(transform2.pz)
        });
        Object.defineProperty(_thisFunction, "anchorPoint", {
          get: ExpressionPropertyInterface(transform2.a)
        });
        Object.defineProperty(_thisFunction, "opacity", {
          get: ExpressionPropertyInterface(transform2.o)
        });
        Object.defineProperty(_thisFunction, "skew", {
          get: ExpressionPropertyInterface(transform2.sk)
        });
        Object.defineProperty(_thisFunction, "skewAxis", {
          get: ExpressionPropertyInterface(transform2.sa)
        });
        Object.defineProperty(_thisFunction, "orientation", {
          get: ExpressionPropertyInterface(transform2.or)
        });
        return _thisFunction;
      };
    }();
    var LayerExpressionInterface = function() {
      function getMatrix(time2) {
        var toWorldMat = new Matrix();
        if (time2 !== void 0) {
          var propMatrix = this._elem.finalTransform.mProp.getValueAtTime(time2);
          propMatrix.clone(toWorldMat);
        } else {
          var transformMat = this._elem.finalTransform.mProp;
          transformMat.applyToMatrix(toWorldMat);
        }
        return toWorldMat;
      }
      function toWorldVec(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        toWorldMat.props[12] = 0;
        toWorldMat.props[13] = 0;
        toWorldMat.props[14] = 0;
        return this.applyPoint(toWorldMat, arr);
      }
      function toWorld2(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        return this.applyPoint(toWorldMat, arr);
      }
      function fromWorldVec(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        toWorldMat.props[12] = 0;
        toWorldMat.props[13] = 0;
        toWorldMat.props[14] = 0;
        return this.invertPoint(toWorldMat, arr);
      }
      function fromWorld2(arr, time2) {
        var toWorldMat = this.getMatrix(time2);
        return this.invertPoint(toWorldMat, arr);
      }
      function applyPoint(matrix, arr) {
        if (this._elem.hierarchy && this._elem.hierarchy.length) {
          var i2;
          var len = this._elem.hierarchy.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this._elem.hierarchy[i2].finalTransform.mProp.applyToMatrix(matrix);
          }
        }
        return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);
      }
      function invertPoint(matrix, arr) {
        if (this._elem.hierarchy && this._elem.hierarchy.length) {
          var i2;
          var len = this._elem.hierarchy.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this._elem.hierarchy[i2].finalTransform.mProp.applyToMatrix(matrix);
          }
        }
        return matrix.inversePoint(arr);
      }
      function fromComp2(arr) {
        var toWorldMat = new Matrix();
        toWorldMat.reset();
        this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
        if (this._elem.hierarchy && this._elem.hierarchy.length) {
          var i2;
          var len = this._elem.hierarchy.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            this._elem.hierarchy[i2].finalTransform.mProp.applyToMatrix(toWorldMat);
          }
          return toWorldMat.inversePoint(arr);
        }
        return toWorldMat.inversePoint(arr);
      }
      function sampleImage() {
        return [1, 1, 1, 1];
      }
      return function(elem2) {
        var transformInterface;
        function _registerMaskInterface(maskManager) {
          _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem2);
        }
        function _registerEffectsInterface(effects) {
          _thisLayerFunction.effect = effects;
        }
        function _thisLayerFunction(name2) {
          switch (name2) {
            case "ADBE Root Vectors Group":
            case "Contents":
            case 2:
              return _thisLayerFunction.shapeInterface;
            case 1:
            case 6:
            case "Transform":
            case "transform":
            case "ADBE Transform Group":
              return transformInterface;
            case 4:
            case "ADBE Effect Parade":
            case "effects":
            case "Effects":
              return _thisLayerFunction.effect;
            case "ADBE Text Properties":
              return _thisLayerFunction.textInterface;
            default:
              return null;
          }
        }
        _thisLayerFunction.getMatrix = getMatrix;
        _thisLayerFunction.invertPoint = invertPoint;
        _thisLayerFunction.applyPoint = applyPoint;
        _thisLayerFunction.toWorld = toWorld2;
        _thisLayerFunction.toWorldVec = toWorldVec;
        _thisLayerFunction.fromWorld = fromWorld2;
        _thisLayerFunction.fromWorldVec = fromWorldVec;
        _thisLayerFunction.toComp = toWorld2;
        _thisLayerFunction.fromComp = fromComp2;
        _thisLayerFunction.sampleImage = sampleImage;
        _thisLayerFunction.sourceRectAtTime = elem2.sourceRectAtTime.bind(elem2);
        _thisLayerFunction._elem = elem2;
        transformInterface = TransformExpressionInterface(elem2.finalTransform.mProp);
        var anchorPointDescriptor = getDescriptor(transformInterface, "anchorPoint");
        Object.defineProperties(_thisLayerFunction, {
          hasParent: {
            get: function get() {
              return elem2.hierarchy.length;
            }
          },
          parent: {
            get: function get() {
              return elem2.hierarchy[0].layerInterface;
            }
          },
          rotation: getDescriptor(transformInterface, "rotation"),
          scale: getDescriptor(transformInterface, "scale"),
          position: getDescriptor(transformInterface, "position"),
          opacity: getDescriptor(transformInterface, "opacity"),
          anchorPoint: anchorPointDescriptor,
          anchor_point: anchorPointDescriptor,
          transform: {
            get: function get() {
              return transformInterface;
            }
          },
          active: {
            get: function get() {
              return elem2.isInRange;
            }
          }
        });
        _thisLayerFunction.startTime = elem2.data.st;
        _thisLayerFunction.index = elem2.data.ind;
        _thisLayerFunction.source = elem2.data.refId;
        _thisLayerFunction.height = elem2.data.ty === 0 ? elem2.data.h : 100;
        _thisLayerFunction.width = elem2.data.ty === 0 ? elem2.data.w : 100;
        _thisLayerFunction.inPoint = elem2.data.ip / elem2.comp.globalData.frameRate;
        _thisLayerFunction.outPoint = elem2.data.op / elem2.comp.globalData.frameRate;
        _thisLayerFunction._name = elem2.data.nm;
        _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
        _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
        return _thisLayerFunction;
      };
    }();
    var propertyGroupFactory = function() {
      return function(interfaceFunction, parentPropertyGroup) {
        return function(val2) {
          val2 = val2 === void 0 ? 1 : val2;
          if (val2 <= 0) {
            return interfaceFunction;
          }
          return parentPropertyGroup(val2 - 1);
        };
      };
    }();
    var PropertyInterface = function() {
      return function(propertyName, propertyGroup) {
        var interfaceFunction = {
          _name: propertyName
        };
        function _propertyGroup(val2) {
          val2 = val2 === void 0 ? 1 : val2;
          if (val2 <= 0) {
            return interfaceFunction;
          }
          return propertyGroup(val2 - 1);
        }
        return _propertyGroup;
      };
    }();
    var EffectsExpressionInterface = function() {
      var ob2 = {
        createEffectsInterface
      };
      function createEffectsInterface(elem2, propertyGroup) {
        if (elem2.effectsManager) {
          var effectElements = [];
          var effectsData = elem2.data.ef;
          var i2;
          var len = elem2.effectsManager.effectElements.length;
          for (i2 = 0; i2 < len; i2 += 1) {
            effectElements.push(createGroupInterface(effectsData[i2], elem2.effectsManager.effectElements[i2], propertyGroup, elem2));
          }
          var effects = elem2.data.ef || [];
          var groupInterface = function groupInterface2(name2) {
            i2 = 0;
            len = effects.length;
            while (i2 < len) {
              if (name2 === effects[i2].nm || name2 === effects[i2].mn || name2 === effects[i2].ix) {
                return effectElements[i2];
              }
              i2 += 1;
            }
            return null;
          };
          Object.defineProperty(groupInterface, "numProperties", {
            get: function get() {
              return effects.length;
            }
          });
          return groupInterface;
        }
        return null;
      }
      function createGroupInterface(data2, elements, propertyGroup, elem2) {
        function groupInterface(name2) {
          var effects = data2.ef;
          var i3 = 0;
          var len2 = effects.length;
          while (i3 < len2) {
            if (name2 === effects[i3].nm || name2 === effects[i3].mn || name2 === effects[i3].ix) {
              if (effects[i3].ty === 5) {
                return effectElements[i3];
              }
              return effectElements[i3]();
            }
            i3 += 1;
          }
          throw new Error();
        }
        var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);
        var effectElements = [];
        var i2;
        var len = data2.ef.length;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (data2.ef[i2].ty === 5) {
            effectElements.push(createGroupInterface(data2.ef[i2], elements.effectElements[i2], elements.effectElements[i2].propertyGroup, elem2));
          } else {
            effectElements.push(createValueInterface(elements.effectElements[i2], data2.ef[i2].ty, elem2, _propertyGroup));
          }
        }
        if (data2.mn === "ADBE Color Control") {
          Object.defineProperty(groupInterface, "color", {
            get: function get() {
              return effectElements[0]();
            }
          });
        }
        Object.defineProperties(groupInterface, {
          numProperties: {
            get: function get() {
              return data2.np;
            }
          },
          _name: {
            value: data2.nm
          },
          propertyGroup: {
            value: _propertyGroup
          }
        });
        groupInterface.enabled = data2.en !== 0;
        groupInterface.active = groupInterface.enabled;
        return groupInterface;
      }
      function createValueInterface(element, type, elem2, propertyGroup) {
        var expressionProperty = ExpressionPropertyInterface(element.p);
        function interfaceFunction() {
          if (type === 10) {
            return elem2.comp.compInterface(element.p.v);
          }
          return expressionProperty();
        }
        if (element.p.setGroupProperty) {
          element.p.setGroupProperty(PropertyInterface("", propertyGroup));
        }
        return interfaceFunction;
      }
      return ob2;
    }();
    var ShapePathInterface = function() {
      return function pathInterfaceFactory(shape, view, propertyGroup) {
        var prop = view.sh;
        function interfaceFunction(val2) {
          if (val2 === "Shape" || val2 === "shape" || val2 === "Path" || val2 === "path" || val2 === "ADBE Vector Shape" || val2 === 2) {
            return interfaceFunction.path;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        prop.setGroupProperty(PropertyInterface("Path", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          path: {
            get: function get() {
              if (prop.k) {
                prop.getValue();
              }
              return prop;
            }
          },
          shape: {
            get: function get() {
              if (prop.k) {
                prop.getValue();
              }
              return prop;
            }
          },
          _name: {
            value: shape.nm
          },
          ix: {
            value: shape.ix
          },
          propertyIndex: {
            value: shape.ix
          },
          mn: {
            value: shape.mn
          },
          propertyGroup: {
            value: propertyGroup
          }
        });
        return interfaceFunction;
      };
    }();
    var ShapeExpressionInterface = function() {
      function iterateElements(shapes, view, propertyGroup) {
        var arr = [];
        var i2;
        var len = shapes ? shapes.length : 0;
        for (i2 = 0; i2 < len; i2 += 1) {
          if (shapes[i2].ty === "gr") {
            arr.push(groupInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "fl") {
            arr.push(fillInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "st") {
            arr.push(strokeInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "tm") {
            arr.push(trimInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "tr")
            ;
          else if (shapes[i2].ty === "el") {
            arr.push(ellipseInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "sr") {
            arr.push(starInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "sh") {
            arr.push(ShapePathInterface(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "rc") {
            arr.push(rectInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "rd") {
            arr.push(roundedInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "rp") {
            arr.push(repeaterInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else if (shapes[i2].ty === "gf") {
            arr.push(gradientFillInterfaceFactory(shapes[i2], view[i2], propertyGroup));
          } else {
            arr.push(defaultInterfaceFactory(shapes[i2], view[i2]));
          }
        }
        return arr;
      }
      function contentsInterfaceFactory(shape, view, propertyGroup) {
        var interfaces2;
        var interfaceFunction = function _interfaceFunction(value2) {
          var i2 = 0;
          var len = interfaces2.length;
          while (i2 < len) {
            if (interfaces2[i2]._name === value2 || interfaces2[i2].mn === value2 || interfaces2[i2].propertyIndex === value2 || interfaces2[i2].ix === value2 || interfaces2[i2].ind === value2) {
              return interfaces2[i2];
            }
            i2 += 1;
          }
          if (typeof value2 === "number") {
            return interfaces2[value2 - 1];
          }
          return null;
        };
        interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        interfaces2 = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
        interfaceFunction.numProperties = interfaces2.length;
        var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
        interfaceFunction.transform = transformInterface;
        interfaceFunction.propertyIndex = shape.cix;
        interfaceFunction._name = shape.nm;
        return interfaceFunction;
      }
      function groupInterfaceFactory(shape, view, propertyGroup) {
        var interfaceFunction = function _interfaceFunction(value2) {
          switch (value2) {
            case "ADBE Vectors Group":
            case "Contents":
            case 2:
              return interfaceFunction.content;
            default:
              return interfaceFunction.transform;
          }
        };
        interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var content2 = contentsInterfaceFactory(shape, view, interfaceFunction.propertyGroup);
        var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
        interfaceFunction.content = content2;
        interfaceFunction.transform = transformInterface;
        Object.defineProperty(interfaceFunction, "_name", {
          get: function get() {
            return shape.nm;
          }
        });
        interfaceFunction.numProperties = shape.np;
        interfaceFunction.propertyIndex = shape.ix;
        interfaceFunction.nm = shape.nm;
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function fillInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(val2) {
          if (val2 === "Color" || val2 === "color") {
            return interfaceFunction.color;
          }
          if (val2 === "Opacity" || val2 === "opacity") {
            return interfaceFunction.opacity;
          }
          return null;
        }
        Object.defineProperties(interfaceFunction, {
          color: {
            get: ExpressionPropertyInterface(view.c)
          },
          opacity: {
            get: ExpressionPropertyInterface(view.o)
          },
          _name: {
            value: shape.nm
          },
          mn: {
            value: shape.mn
          }
        });
        view.c.setGroupProperty(PropertyInterface("Color", propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
        return interfaceFunction;
      }
      function gradientFillInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(val2) {
          if (val2 === "Start Point" || val2 === "start point") {
            return interfaceFunction.startPoint;
          }
          if (val2 === "End Point" || val2 === "end point") {
            return interfaceFunction.endPoint;
          }
          if (val2 === "Opacity" || val2 === "opacity") {
            return interfaceFunction.opacity;
          }
          return null;
        }
        Object.defineProperties(interfaceFunction, {
          startPoint: {
            get: ExpressionPropertyInterface(view.s)
          },
          endPoint: {
            get: ExpressionPropertyInterface(view.e)
          },
          opacity: {
            get: ExpressionPropertyInterface(view.o)
          },
          type: {
            get: function get() {
              return "a";
            }
          },
          _name: {
            value: shape.nm
          },
          mn: {
            value: shape.mn
          }
        });
        view.s.setGroupProperty(PropertyInterface("Start Point", propertyGroup));
        view.e.setGroupProperty(PropertyInterface("End Point", propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
        return interfaceFunction;
      }
      function defaultInterfaceFactory() {
        function interfaceFunction() {
          return null;
        }
        return interfaceFunction;
      }
      function strokeInterfaceFactory(shape, view, propertyGroup) {
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);
        function addPropertyToDashOb(i3) {
          Object.defineProperty(dashOb, shape.d[i3].nm, {
            get: ExpressionPropertyInterface(view.d.dataProps[i3].p)
          });
        }
        var i2;
        var len = shape.d ? shape.d.length : 0;
        var dashOb = {};
        for (i2 = 0; i2 < len; i2 += 1) {
          addPropertyToDashOb(i2);
          view.d.dataProps[i2].p.setGroupProperty(_dashPropertyGroup);
        }
        function interfaceFunction(val2) {
          if (val2 === "Color" || val2 === "color") {
            return interfaceFunction.color;
          }
          if (val2 === "Opacity" || val2 === "opacity") {
            return interfaceFunction.opacity;
          }
          if (val2 === "Stroke Width" || val2 === "stroke width") {
            return interfaceFunction.strokeWidth;
          }
          return null;
        }
        Object.defineProperties(interfaceFunction, {
          color: {
            get: ExpressionPropertyInterface(view.c)
          },
          opacity: {
            get: ExpressionPropertyInterface(view.o)
          },
          strokeWidth: {
            get: ExpressionPropertyInterface(view.w)
          },
          dash: {
            get: function get() {
              return dashOb;
            }
          },
          _name: {
            value: shape.nm
          },
          mn: {
            value: shape.mn
          }
        });
        view.c.setGroupProperty(PropertyInterface("Color", _propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
        view.w.setGroupProperty(PropertyInterface("Stroke Width", _propertyGroup));
        return interfaceFunction;
      }
      function trimInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(val2) {
          if (val2 === shape.e.ix || val2 === "End" || val2 === "end") {
            return interfaceFunction.end;
          }
          if (val2 === shape.s.ix) {
            return interfaceFunction.start;
          }
          if (val2 === shape.o.ix) {
            return interfaceFunction.offset;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        interfaceFunction.propertyIndex = shape.ix;
        view.s.setGroupProperty(PropertyInterface("Start", _propertyGroup));
        view.e.setGroupProperty(PropertyInterface("End", _propertyGroup));
        view.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
        interfaceFunction.propertyIndex = shape.ix;
        interfaceFunction.propertyGroup = propertyGroup;
        Object.defineProperties(interfaceFunction, {
          start: {
            get: ExpressionPropertyInterface(view.s)
          },
          end: {
            get: ExpressionPropertyInterface(view.e)
          },
          offset: {
            get: ExpressionPropertyInterface(view.o)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function transformInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.a.ix === value2 || value2 === "Anchor Point") {
            return interfaceFunction.anchorPoint;
          }
          if (shape.o.ix === value2 || value2 === "Opacity") {
            return interfaceFunction.opacity;
          }
          if (shape.p.ix === value2 || value2 === "Position") {
            return interfaceFunction.position;
          }
          if (shape.r.ix === value2 || value2 === "Rotation" || value2 === "ADBE Vector Rotation") {
            return interfaceFunction.rotation;
          }
          if (shape.s.ix === value2 || value2 === "Scale") {
            return interfaceFunction.scale;
          }
          if (shape.sk && shape.sk.ix === value2 || value2 === "Skew") {
            return interfaceFunction.skew;
          }
          if (shape.sa && shape.sa.ix === value2 || value2 === "Skew Axis") {
            return interfaceFunction.skewAxis;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        view.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
        view.transform.mProps.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        view.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point", _propertyGroup));
        view.transform.mProps.s.setGroupProperty(PropertyInterface("Scale", _propertyGroup));
        view.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
        if (view.transform.mProps.sk) {
          view.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew", _propertyGroup));
          view.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle", _propertyGroup));
        }
        view.transform.op.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          opacity: {
            get: ExpressionPropertyInterface(view.transform.mProps.o)
          },
          position: {
            get: ExpressionPropertyInterface(view.transform.mProps.p)
          },
          anchorPoint: {
            get: ExpressionPropertyInterface(view.transform.mProps.a)
          },
          scale: {
            get: ExpressionPropertyInterface(view.transform.mProps.s)
          },
          rotation: {
            get: ExpressionPropertyInterface(view.transform.mProps.r)
          },
          skew: {
            get: ExpressionPropertyInterface(view.transform.mProps.sk)
          },
          skewAxis: {
            get: ExpressionPropertyInterface(view.transform.mProps.sa)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.ty = "tr";
        interfaceFunction.mn = shape.mn;
        interfaceFunction.propertyGroup = propertyGroup;
        return interfaceFunction;
      }
      function ellipseInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.p.ix === value2) {
            return interfaceFunction.position;
          }
          if (shape.s.ix === value2) {
            return interfaceFunction.size;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        interfaceFunction.propertyIndex = shape.ix;
        var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
        prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
        prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          size: {
            get: ExpressionPropertyInterface(prop.s)
          },
          position: {
            get: ExpressionPropertyInterface(prop.p)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function starInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.p.ix === value2) {
            return interfaceFunction.position;
          }
          if (shape.r.ix === value2) {
            return interfaceFunction.rotation;
          }
          if (shape.pt.ix === value2) {
            return interfaceFunction.points;
          }
          if (shape.or.ix === value2 || value2 === "ADBE Vector Star Outer Radius") {
            return interfaceFunction.outerRadius;
          }
          if (shape.os.ix === value2) {
            return interfaceFunction.outerRoundness;
          }
          if (shape.ir && (shape.ir.ix === value2 || value2 === "ADBE Vector Star Inner Radius")) {
            return interfaceFunction.innerRadius;
          }
          if (shape.is && shape.is.ix === value2) {
            return interfaceFunction.innerRoundness;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
        interfaceFunction.propertyIndex = shape.ix;
        prop.or.setGroupProperty(PropertyInterface("Outer Radius", _propertyGroup));
        prop.os.setGroupProperty(PropertyInterface("Outer Roundness", _propertyGroup));
        prop.pt.setGroupProperty(PropertyInterface("Points", _propertyGroup));
        prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
        if (shape.ir) {
          prop.ir.setGroupProperty(PropertyInterface("Inner Radius", _propertyGroup));
          prop.is.setGroupProperty(PropertyInterface("Inner Roundness", _propertyGroup));
        }
        Object.defineProperties(interfaceFunction, {
          position: {
            get: ExpressionPropertyInterface(prop.p)
          },
          rotation: {
            get: ExpressionPropertyInterface(prop.r)
          },
          points: {
            get: ExpressionPropertyInterface(prop.pt)
          },
          outerRadius: {
            get: ExpressionPropertyInterface(prop.or)
          },
          outerRoundness: {
            get: ExpressionPropertyInterface(prop.os)
          },
          innerRadius: {
            get: ExpressionPropertyInterface(prop.ir)
          },
          innerRoundness: {
            get: ExpressionPropertyInterface(prop.is)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function rectInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.p.ix === value2) {
            return interfaceFunction.position;
          }
          if (shape.r.ix === value2) {
            return interfaceFunction.roundness;
          }
          if (shape.s.ix === value2 || value2 === "Size" || value2 === "ADBE Vector Rect Size") {
            return interfaceFunction.size;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
        interfaceFunction.propertyIndex = shape.ix;
        prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
        prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
        prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          position: {
            get: ExpressionPropertyInterface(prop.p)
          },
          roundness: {
            get: ExpressionPropertyInterface(prop.r)
          },
          size: {
            get: ExpressionPropertyInterface(prop.s)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function roundedInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.r.ix === value2 || value2 === "Round Corners 1") {
            return interfaceFunction.radius;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view;
        interfaceFunction.propertyIndex = shape.ix;
        prop.rd.setGroupProperty(PropertyInterface("Radius", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          radius: {
            get: ExpressionPropertyInterface(prop.rd)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      function repeaterInterfaceFactory(shape, view, propertyGroup) {
        function interfaceFunction(value2) {
          if (shape.c.ix === value2 || value2 === "Copies") {
            return interfaceFunction.copies;
          }
          if (shape.o.ix === value2 || value2 === "Offset") {
            return interfaceFunction.offset;
          }
          return null;
        }
        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
        var prop = view;
        interfaceFunction.propertyIndex = shape.ix;
        prop.c.setGroupProperty(PropertyInterface("Copies", _propertyGroup));
        prop.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
        Object.defineProperties(interfaceFunction, {
          copies: {
            get: ExpressionPropertyInterface(prop.c)
          },
          offset: {
            get: ExpressionPropertyInterface(prop.o)
          },
          _name: {
            value: shape.nm
          }
        });
        interfaceFunction.mn = shape.mn;
        return interfaceFunction;
      }
      return function(shapes, view, propertyGroup) {
        var interfaces2;
        function _interfaceFunction(value2) {
          if (typeof value2 === "number") {
            value2 = value2 === void 0 ? 1 : value2;
            if (value2 === 0) {
              return propertyGroup;
            }
            return interfaces2[value2 - 1];
          }
          var i2 = 0;
          var len = interfaces2.length;
          while (i2 < len) {
            if (interfaces2[i2]._name === value2) {
              return interfaces2[i2];
            }
            i2 += 1;
          }
          return null;
        }
        function parentGroupWrapper() {
          return propertyGroup;
        }
        _interfaceFunction.propertyGroup = propertyGroupFactory(_interfaceFunction, parentGroupWrapper);
        interfaces2 = iterateElements(shapes, view, _interfaceFunction.propertyGroup);
        _interfaceFunction.numProperties = interfaces2.length;
        _interfaceFunction._name = "Contents";
        return _interfaceFunction;
      };
    }();
    var TextExpressionInterface = function() {
      return function(elem2) {
        var _sourceText;
        function _thisLayerFunction(name2) {
          switch (name2) {
            case "ADBE Text Document":
              return _thisLayerFunction.sourceText;
            default:
              return null;
          }
        }
        Object.defineProperty(_thisLayerFunction, "sourceText", {
          get: function get() {
            elem2.textProperty.getValue();
            var stringValue = elem2.textProperty.currentData.t;
            if (!_sourceText || stringValue !== _sourceText.value) {
              _sourceText = new String(stringValue);
              _sourceText.value = stringValue || new String(stringValue);
              Object.defineProperty(_sourceText, "style", {
                get: function get2() {
                  return {
                    fillColor: elem2.textProperty.currentData.fc
                  };
                }
              });
            }
            return _sourceText;
          }
        });
        return _thisLayerFunction;
      };
    }();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var FootageInterface = function() {
      var outlineInterfaceFactory = function outlineInterfaceFactory2(elem2) {
        var currentPropertyName = "";
        var currentProperty = elem2.getFootageData();
        function init() {
          currentPropertyName = "";
          currentProperty = elem2.getFootageData();
          return searchProperty;
        }
        function searchProperty(value2) {
          if (currentProperty[value2]) {
            currentPropertyName = value2;
            currentProperty = currentProperty[value2];
            if (_typeof(currentProperty) === "object") {
              return searchProperty;
            }
            return currentProperty;
          }
          var propertyNameIndex = value2.indexOf(currentPropertyName);
          if (propertyNameIndex !== -1) {
            var index2 = parseInt(value2.substr(propertyNameIndex + currentPropertyName.length), 10);
            currentProperty = currentProperty[index2];
            if (_typeof(currentProperty) === "object") {
              return searchProperty;
            }
            return currentProperty;
          }
          return "";
        }
        return init;
      };
      var dataInterfaceFactory = function dataInterfaceFactory2(elem2) {
        function interfaceFunction(value2) {
          if (value2 === "Outline") {
            return interfaceFunction.outlineInterface();
          }
          return null;
        }
        interfaceFunction._name = "Outline";
        interfaceFunction.outlineInterface = outlineInterfaceFactory(elem2);
        return interfaceFunction;
      };
      return function(elem2) {
        function _interfaceFunction(value2) {
          if (value2 === "Data") {
            return _interfaceFunction.dataInterface;
          }
          return null;
        }
        _interfaceFunction._name = "Data";
        _interfaceFunction.dataInterface = dataInterfaceFactory(elem2);
        return _interfaceFunction;
      };
    }();
    var interfaces = {
      layer: LayerExpressionInterface,
      effects: EffectsExpressionInterface,
      comp: CompExpressionInterface,
      shape: ShapeExpressionInterface,
      text: TextExpressionInterface,
      footage: FootageInterface
    };
    function getInterface(type) {
      return interfaces[type] || null;
    }
    var expressionHelpers = function() {
      function searchExpressions(elem2, data2, prop) {
        if (data2.x) {
          prop.k = true;
          prop.x = true;
          prop.initiateExpression = ExpressionManager.initiateExpression;
          prop.effectsSequence.push(prop.initiateExpression(elem2, data2, prop).bind(prop));
        }
      }
      function getValueAtTime(frameNum) {
        frameNum *= this.elem.globalData.frameRate;
        frameNum -= this.offsetTime;
        if (frameNum !== this._cachingAtTime.lastFrame) {
          this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
          this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
          this._cachingAtTime.lastFrame = frameNum;
        }
        return this._cachingAtTime.value;
      }
      function getSpeedAtTime(frameNum) {
        var delta = -0.01;
        var v1 = this.getValueAtTime(frameNum);
        var v2 = this.getValueAtTime(frameNum + delta);
        var speed = 0;
        if (v1.length) {
          var i2;
          for (i2 = 0; i2 < v1.length; i2 += 1) {
            speed += Math.pow(v2[i2] - v1[i2], 2);
          }
          speed = Math.sqrt(speed) * 100;
        } else {
          speed = 0;
        }
        return speed;
      }
      function getVelocityAtTime(frameNum) {
        if (this.vel !== void 0) {
          return this.vel;
        }
        var delta = -1e-3;
        var v1 = this.getValueAtTime(frameNum);
        var v2 = this.getValueAtTime(frameNum + delta);
        var velocity2;
        if (v1.length) {
          velocity2 = createTypedArray("float32", v1.length);
          var i2;
          for (i2 = 0; i2 < v1.length; i2 += 1) {
            velocity2[i2] = (v2[i2] - v1[i2]) / delta;
          }
        } else {
          velocity2 = (v2 - v1) / delta;
        }
        return velocity2;
      }
      function getStaticValueAtTime() {
        return this.pv;
      }
      function setGroupProperty(propertyGroup) {
        this.propertyGroup = propertyGroup;
      }
      return {
        searchExpressions,
        getSpeedAtTime,
        getVelocityAtTime,
        getValueAtTime,
        getStaticValueAtTime,
        setGroupProperty
      };
    }();
    function addPropertyDecorator() {
      function loopOut2(type, duration, durationFlag) {
        if (!this.k || !this.keyframes) {
          return this.pv;
        }
        type = type ? type.toLowerCase() : "";
        var currentFrame2 = this.comp.renderedFrame;
        var keyframes = this.keyframes;
        var lastKeyFrame = keyframes[keyframes.length - 1].t;
        if (currentFrame2 <= lastKeyFrame) {
          return this.pv;
        }
        var cycleDuration;
        var firstKeyFrame;
        if (!durationFlag) {
          if (!duration || duration > keyframes.length - 1) {
            duration = keyframes.length - 1;
          }
          firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
          cycleDuration = lastKeyFrame - firstKeyFrame;
        } else {
          if (!duration) {
            cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);
          } else {
            cycleDuration = Math.abs(lastKeyFrame - this.elem.comp.globalData.frameRate * duration);
          }
          firstKeyFrame = lastKeyFrame - cycleDuration;
        }
        var i2;
        var len;
        var ret;
        if (type === "pingpong") {
          var iterations = Math.floor((currentFrame2 - firstKeyFrame) / cycleDuration);
          if (iterations % 2 !== 0) {
            return this.getValueAtTime((cycleDuration - (currentFrame2 - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          }
        } else if (type === "offset") {
          var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
          var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
          var current = this.getValueAtTime(((currentFrame2 - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          var repeats = Math.floor((currentFrame2 - firstKeyFrame) / cycleDuration);
          if (this.pv.length) {
            ret = new Array(initV.length);
            len = ret.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              ret[i2] = (endV[i2] - initV[i2]) * repeats + current[i2];
            }
            return ret;
          }
          return (endV - initV) * repeats + current;
        } else if (type === "continue") {
          var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
          var nextLastValue = this.getValueAtTime((lastKeyFrame - 1e-3) / this.comp.globalData.frameRate, 0);
          if (this.pv.length) {
            ret = new Array(lastValue.length);
            len = ret.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              ret[i2] = lastValue[i2] + (lastValue[i2] - nextLastValue[i2]) * ((currentFrame2 - lastKeyFrame) / this.comp.globalData.frameRate) / 5e-4;
            }
            return ret;
          }
          return lastValue + (lastValue - nextLastValue) * ((currentFrame2 - lastKeyFrame) / 1e-3);
        }
        return this.getValueAtTime(((currentFrame2 - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
      }
      function loopIn2(type, duration, durationFlag) {
        if (!this.k) {
          return this.pv;
        }
        type = type ? type.toLowerCase() : "";
        var currentFrame2 = this.comp.renderedFrame;
        var keyframes = this.keyframes;
        var firstKeyFrame = keyframes[0].t;
        if (currentFrame2 >= firstKeyFrame) {
          return this.pv;
        }
        var cycleDuration;
        var lastKeyFrame;
        if (!durationFlag) {
          if (!duration || duration > keyframes.length - 1) {
            duration = keyframes.length - 1;
          }
          lastKeyFrame = keyframes[duration].t;
          cycleDuration = lastKeyFrame - firstKeyFrame;
        } else {
          if (!duration) {
            cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);
          } else {
            cycleDuration = Math.abs(this.elem.comp.globalData.frameRate * duration);
          }
          lastKeyFrame = firstKeyFrame + cycleDuration;
        }
        var i2;
        var len;
        var ret;
        if (type === "pingpong") {
          var iterations = Math.floor((firstKeyFrame - currentFrame2) / cycleDuration);
          if (iterations % 2 === 0) {
            return this.getValueAtTime(((firstKeyFrame - currentFrame2) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          }
        } else if (type === "offset") {
          var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
          var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
          var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame2) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          var repeats = Math.floor((firstKeyFrame - currentFrame2) / cycleDuration) + 1;
          if (this.pv.length) {
            ret = new Array(initV.length);
            len = ret.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              ret[i2] = current[i2] - (endV[i2] - initV[i2]) * repeats;
            }
            return ret;
          }
          return current - (endV - initV) * repeats;
        } else if (type === "continue") {
          var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
          var nextFirstValue = this.getValueAtTime((firstKeyFrame + 1e-3) / this.comp.globalData.frameRate, 0);
          if (this.pv.length) {
            ret = new Array(firstValue.length);
            len = ret.length;
            for (i2 = 0; i2 < len; i2 += 1) {
              ret[i2] = firstValue[i2] + (firstValue[i2] - nextFirstValue[i2]) * (firstKeyFrame - currentFrame2) / 1e-3;
            }
            return ret;
          }
          return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame2) / 1e-3;
        }
        return this.getValueAtTime((cycleDuration - ((firstKeyFrame - currentFrame2) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0);
      }
      function smooth2(width2, samples) {
        if (!this.k) {
          return this.pv;
        }
        width2 = (width2 || 0.4) * 0.5;
        samples = Math.floor(samples || 5);
        if (samples <= 1) {
          return this.pv;
        }
        var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
        var initFrame2 = currentTime - width2;
        var endFrame = currentTime + width2;
        var sampleFrequency = samples > 1 ? (endFrame - initFrame2) / (samples - 1) : 1;
        var i2 = 0;
        var j = 0;
        var value2;
        if (this.pv.length) {
          value2 = createTypedArray("float32", this.pv.length);
        } else {
          value2 = 0;
        }
        var sampleValue;
        while (i2 < samples) {
          sampleValue = this.getValueAtTime(initFrame2 + i2 * sampleFrequency);
          if (this.pv.length) {
            for (j = 0; j < this.pv.length; j += 1) {
              value2[j] += sampleValue[j];
            }
          } else {
            value2 += sampleValue;
          }
          i2 += 1;
        }
        if (this.pv.length) {
          for (j = 0; j < this.pv.length; j += 1) {
            value2[j] /= samples;
          }
        } else {
          value2 /= samples;
        }
        return value2;
      }
      function getTransformValueAtTime(time2) {
        if (!this._transformCachingAtTime) {
          this._transformCachingAtTime = {
            v: new Matrix()
          };
        }
        var matrix = this._transformCachingAtTime.v;
        matrix.cloneFromProps(this.pre.props);
        if (this.appliedTransformations < 1) {
          var anchor = this.a.getValueAtTime(time2);
          matrix.translate(-anchor[0] * this.a.mult, -anchor[1] * this.a.mult, anchor[2] * this.a.mult);
        }
        if (this.appliedTransformations < 2) {
          var scale2 = this.s.getValueAtTime(time2);
          matrix.scale(scale2[0] * this.s.mult, scale2[1] * this.s.mult, scale2[2] * this.s.mult);
        }
        if (this.sk && this.appliedTransformations < 3) {
          var skew = this.sk.getValueAtTime(time2);
          var skewAxis = this.sa.getValueAtTime(time2);
          matrix.skewFromAxis(-skew * this.sk.mult, skewAxis * this.sa.mult);
        }
        if (this.r && this.appliedTransformations < 4) {
          var rotation2 = this.r.getValueAtTime(time2);
          matrix.rotate(-rotation2 * this.r.mult);
        } else if (!this.r && this.appliedTransformations < 4) {
          var rotationZ = this.rz.getValueAtTime(time2);
          var rotationY = this.ry.getValueAtTime(time2);
          var rotationX = this.rx.getValueAtTime(time2);
          var orientation = this.or.getValueAtTime(time2);
          matrix.rotateZ(-rotationZ * this.rz.mult).rotateY(rotationY * this.ry.mult).rotateX(rotationX * this.rx.mult).rotateZ(-orientation[2] * this.or.mult).rotateY(orientation[1] * this.or.mult).rotateX(orientation[0] * this.or.mult);
        }
        if (this.data.p && this.data.p.s) {
          var positionX = this.px.getValueAtTime(time2);
          var positionY = this.py.getValueAtTime(time2);
          if (this.data.p.z) {
            var positionZ = this.pz.getValueAtTime(time2);
            matrix.translate(positionX * this.px.mult, positionY * this.py.mult, -positionZ * this.pz.mult);
          } else {
            matrix.translate(positionX * this.px.mult, positionY * this.py.mult, 0);
          }
        } else {
          var position2 = this.p.getValueAtTime(time2);
          matrix.translate(position2[0] * this.p.mult, position2[1] * this.p.mult, -position2[2] * this.p.mult);
        }
        return matrix;
      }
      function getTransformStaticValueAtTime() {
        return this.v.clone(new Matrix());
      }
      var getTransformProperty = TransformPropertyFactory.getTransformProperty;
      TransformPropertyFactory.getTransformProperty = function(elem2, data2, container) {
        var prop = getTransformProperty(elem2, data2, container);
        if (prop.dynamicProperties.length) {
          prop.getValueAtTime = getTransformValueAtTime.bind(prop);
        } else {
          prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
        }
        prop.setGroupProperty = expressionHelpers.setGroupProperty;
        return prop;
      };
      var propertyGetProp = PropertyFactory.getProp;
      PropertyFactory.getProp = function(elem2, data2, type, mult, container) {
        var prop = propertyGetProp(elem2, data2, type, mult, container);
        if (prop.kf) {
          prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
        } else {
          prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
        }
        prop.setGroupProperty = expressionHelpers.setGroupProperty;
        prop.loopOut = loopOut2;
        prop.loopIn = loopIn2;
        prop.smooth = smooth2;
        prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
        prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
        prop.numKeys = data2.a === 1 ? data2.k.length : 0;
        prop.propertyIndex = data2.ix;
        var value2 = 0;
        if (type !== 0) {
          value2 = createTypedArray("float32", data2.a === 1 ? data2.k[0].s.length : data2.k.length);
        }
        prop._cachingAtTime = {
          lastFrame: initialDefaultFrame,
          lastIndex: 0,
          value: value2
        };
        expressionHelpers.searchExpressions(elem2, data2, prop);
        if (prop.k) {
          container.addDynamicProperty(prop);
        }
        return prop;
      };
      function getShapeValueAtTime(frameNum) {
        if (!this._cachingAtTime) {
          this._cachingAtTime = {
            shapeValue: shapePool.clone(this.pv),
            lastIndex: 0,
            lastTime: initialDefaultFrame
          };
        }
        frameNum *= this.elem.globalData.frameRate;
        frameNum -= this.offsetTime;
        if (frameNum !== this._cachingAtTime.lastTime) {
          this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
          this._cachingAtTime.lastTime = frameNum;
          this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
        }
        return this._cachingAtTime.shapeValue;
      }
      var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
      var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();
      function ShapeExpressions() {
      }
      ShapeExpressions.prototype = {
        vertices: function vertices(prop, time2) {
          if (this.k) {
            this.getValue();
          }
          var shapePath = this.v;
          if (time2 !== void 0) {
            shapePath = this.getValueAtTime(time2, 0);
          }
          var i2;
          var len = shapePath._length;
          var vertices2 = shapePath[prop];
          var points = shapePath.v;
          var arr = createSizedArray(len);
          for (i2 = 0; i2 < len; i2 += 1) {
            if (prop === "i" || prop === "o") {
              arr[i2] = [vertices2[i2][0] - points[i2][0], vertices2[i2][1] - points[i2][1]];
            } else {
              arr[i2] = [vertices2[i2][0], vertices2[i2][1]];
            }
          }
          return arr;
        },
        points: function points(time2) {
          return this.vertices("v", time2);
        },
        inTangents: function inTangents(time2) {
          return this.vertices("i", time2);
        },
        outTangents: function outTangents(time2) {
          return this.vertices("o", time2);
        },
        isClosed: function isClosed() {
          return this.v.c;
        },
        pointOnPath: function pointOnPath(perc, time2) {
          var shapePath = this.v;
          if (time2 !== void 0) {
            shapePath = this.getValueAtTime(time2, 0);
          }
          if (!this._segmentsLength) {
            this._segmentsLength = bez.getSegmentsLength(shapePath);
          }
          var segmentsLength = this._segmentsLength;
          var lengths = segmentsLength.lengths;
          var lengthPos = segmentsLength.totalLength * perc;
          var i2 = 0;
          var len = lengths.length;
          var accumulatedLength = 0;
          var pt;
          while (i2 < len) {
            if (accumulatedLength + lengths[i2].addedLength > lengthPos) {
              var initIndex = i2;
              var endIndex = shapePath.c && i2 === len - 1 ? 0 : i2 + 1;
              var segmentPerc = (lengthPos - accumulatedLength) / lengths[i2].addedLength;
              pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i2]);
              break;
            } else {
              accumulatedLength += lengths[i2].addedLength;
            }
            i2 += 1;
          }
          if (!pt) {
            pt = shapePath.c ? [shapePath.v[0][0], shapePath.v[0][1]] : [shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1]];
          }
          return pt;
        },
        vectorOnPath: function vectorOnPath(perc, time2, vectorType) {
          if (perc == 1) {
            perc = this.v.c;
          } else if (perc == 0) {
            perc = 0.999;
          }
          var pt1 = this.pointOnPath(perc, time2);
          var pt2 = this.pointOnPath(perc + 1e-3, time2);
          var xLength = pt2[0] - pt1[0];
          var yLength = pt2[1] - pt1[1];
          var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));
          if (magnitude === 0) {
            return [0, 0];
          }
          var unitVector = vectorType === "tangent" ? [xLength / magnitude, yLength / magnitude] : [-yLength / magnitude, xLength / magnitude];
          return unitVector;
        },
        tangentOnPath: function tangentOnPath(perc, time2) {
          return this.vectorOnPath(perc, time2, "tangent");
        },
        normalOnPath: function normalOnPath(perc, time2) {
          return this.vectorOnPath(perc, time2, "normal");
        },
        setGroupProperty: expressionHelpers.setGroupProperty,
        getValueAtTime: expressionHelpers.getStaticValueAtTime
      };
      extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
      extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
      KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
      KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;
      var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
      ShapePropertyFactory.getShapeProp = function(elem2, data2, type, arr, trims) {
        var prop = propertyGetShapeProp(elem2, data2, type, arr, trims);
        prop.propertyIndex = data2.ix;
        prop.lock = false;
        if (type === 3) {
          expressionHelpers.searchExpressions(elem2, data2.pt, prop);
        } else if (type === 4) {
          expressionHelpers.searchExpressions(elem2, data2.ks, prop);
        }
        if (prop.k) {
          elem2.addDynamicProperty(prop);
        }
        return prop;
      };
    }
    function initialize$1() {
      addPropertyDecorator();
    }
    function addDecorator() {
      function searchExpressions() {
        if (this.data.d.x) {
          this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);
          this.addEffect(this.getExpressionValue.bind(this));
          return true;
        }
        return null;
      }
      TextProperty.prototype.getExpressionValue = function(currentValue, text2) {
        var newValue = this.calculateExpression(text2);
        if (currentValue.t !== newValue) {
          var newData = {};
          this.copyData(newData, currentValue);
          newData.t = newValue.toString();
          newData.__complete = false;
          return newData;
        }
        return currentValue;
      };
      TextProperty.prototype.searchProperty = function() {
        var isKeyframed = this.searchKeyframes();
        var hasExpressions = this.searchExpressions();
        this.kf = isKeyframed || hasExpressions;
        return this.kf;
      };
      TextProperty.prototype.searchExpressions = searchExpressions;
    }
    function initialize() {
      addDecorator();
    }
    function SVGComposableEffect() {
    }
    SVGComposableEffect.prototype = {
      createMergeNode: function createMergeNode(resultId, ins) {
        var feMerge = createNS("feMerge");
        feMerge.setAttribute("result", resultId);
        var feMergeNode;
        var i2;
        for (i2 = 0; i2 < ins.length; i2 += 1) {
          feMergeNode = createNS("feMergeNode");
          feMergeNode.setAttribute("in", ins[i2]);
          feMerge.appendChild(feMergeNode);
          feMerge.appendChild(feMergeNode);
        }
        return feMerge;
      }
    };
    var linearFilterValue = "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";
    function SVGTintFilter(filter, filterManager, elem2, id2, source) {
      this.filterManager = filterManager;
      var feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
      feColorMatrix.setAttribute("values", linearFilterValue + " 1 0");
      this.linearFilter = feColorMatrix;
      feColorMatrix.setAttribute("result", id2 + "_tint_1");
      filter.appendChild(feColorMatrix);
      feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
      feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
      feColorMatrix.setAttribute("result", id2 + "_tint_2");
      filter.appendChild(feColorMatrix);
      this.matrixFilter = feColorMatrix;
      var feMerge = this.createMergeNode(id2, [source, id2 + "_tint_1", id2 + "_tint_2"]);
      filter.appendChild(feMerge);
    }
    extendPrototype([SVGComposableEffect], SVGTintFilter);
    SVGTintFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var colorBlack = this.filterManager.effectElements[0].p.v;
        var colorWhite = this.filterManager.effectElements[1].p.v;
        var opacity = this.filterManager.effectElements[2].p.v / 100;
        this.linearFilter.setAttribute("values", linearFilterValue + " " + opacity + " 0");
        this.matrixFilter.setAttribute("values", colorWhite[0] - colorBlack[0] + " 0 0 0 " + colorBlack[0] + " " + (colorWhite[1] - colorBlack[1]) + " 0 0 0 " + colorBlack[1] + " " + (colorWhite[2] - colorBlack[2]) + " 0 0 0 " + colorBlack[2] + " 0 0 0 1 0");
      }
    };
    function SVGFillFilter(filter, filterManager, elem2, id2) {
      this.filterManager = filterManager;
      var feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
      feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
      feColorMatrix.setAttribute("result", id2);
      filter.appendChild(feColorMatrix);
      this.matrixFilter = feColorMatrix;
    }
    SVGFillFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var color = this.filterManager.effectElements[2].p.v;
        var opacity = this.filterManager.effectElements[6].p.v;
        this.matrixFilter.setAttribute("values", "0 0 0 0 " + color[0] + " 0 0 0 0 " + color[1] + " 0 0 0 0 " + color[2] + " 0 0 0 " + opacity + " 0");
      }
    };
    function SVGStrokeEffect(fil, filterManager, elem2) {
      this.initialized = false;
      this.filterManager = filterManager;
      this.elem = elem2;
      this.paths = [];
    }
    SVGStrokeEffect.prototype.initialize = function() {
      var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
      var path;
      var groupPath;
      var i2;
      var len;
      if (this.filterManager.effectElements[1].p.v === 1) {
        len = this.elem.maskManager.masksProperties.length;
        i2 = 0;
      } else {
        i2 = this.filterManager.effectElements[0].p.v - 1;
        len = i2 + 1;
      }
      groupPath = createNS("g");
      groupPath.setAttribute("fill", "none");
      groupPath.setAttribute("stroke-linecap", "round");
      groupPath.setAttribute("stroke-dashoffset", 1);
      for (i2; i2 < len; i2 += 1) {
        path = createNS("path");
        groupPath.appendChild(path);
        this.paths.push({
          p: path,
          m: i2
        });
      }
      if (this.filterManager.effectElements[10].p.v === 3) {
        var mask2 = createNS("mask");
        var id2 = createElementID();
        mask2.setAttribute("id", id2);
        mask2.setAttribute("mask-type", "alpha");
        mask2.appendChild(groupPath);
        this.elem.globalData.defs.appendChild(mask2);
        var g2 = createNS("g");
        g2.setAttribute("mask", "url(" + getLocationHref() + "#" + id2 + ")");
        while (elemChildren[0]) {
          g2.appendChild(elemChildren[0]);
        }
        this.elem.layerElement.appendChild(g2);
        this.masker = mask2;
        groupPath.setAttribute("stroke", "#fff");
      } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
        if (this.filterManager.effectElements[10].p.v === 2) {
          elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
          while (elemChildren.length) {
            this.elem.layerElement.removeChild(elemChildren[0]);
          }
        }
        this.elem.layerElement.appendChild(groupPath);
        this.elem.layerElement.removeAttribute("mask");
        groupPath.setAttribute("stroke", "#fff");
      }
      this.initialized = true;
      this.pathMasker = groupPath;
    };
    SVGStrokeEffect.prototype.renderFrame = function(forceRender) {
      if (!this.initialized) {
        this.initialize();
      }
      var i2;
      var len = this.paths.length;
      var mask2;
      var path;
      for (i2 = 0; i2 < len; i2 += 1) {
        if (this.paths[i2].m !== -1) {
          mask2 = this.elem.maskManager.viewData[this.paths[i2].m];
          path = this.paths[i2].p;
          if (forceRender || this.filterManager._mdf || mask2.prop._mdf) {
            path.setAttribute("d", mask2.lastPath);
          }
          if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask2.prop._mdf) {
            var dasharrayValue;
            if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
              var s3 = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
              var e3 = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
              var l2 = path.getTotalLength();
              dasharrayValue = "0 0 0 " + l2 * s3 + " ";
              var lineLength = l2 * (e3 - s3);
              var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
              var units = Math.floor(lineLength / segment);
              var j;
              for (j = 0; j < units; j += 1) {
                dasharrayValue += "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + " ";
              }
              dasharrayValue += "0 " + l2 * 10 + " 0 0";
            } else {
              dasharrayValue = "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
            }
            path.setAttribute("stroke-dasharray", dasharrayValue);
          }
        }
      }
      if (forceRender || this.filterManager.effectElements[4].p._mdf) {
        this.pathMasker.setAttribute("stroke-width", this.filterManager.effectElements[4].p.v * 2);
      }
      if (forceRender || this.filterManager.effectElements[6].p._mdf) {
        this.pathMasker.setAttribute("opacity", this.filterManager.effectElements[6].p.v);
      }
      if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
        if (forceRender || this.filterManager.effectElements[3].p._mdf) {
          var color = this.filterManager.effectElements[3].p.v;
          this.pathMasker.setAttribute("stroke", "rgb(" + bmFloor(color[0] * 255) + "," + bmFloor(color[1] * 255) + "," + bmFloor(color[2] * 255) + ")");
        }
      }
    };
    function SVGTritoneFilter(filter, filterManager, elem2, id2) {
      this.filterManager = filterManager;
      var feColorMatrix = createNS("feColorMatrix");
      feColorMatrix.setAttribute("type", "matrix");
      feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
      feColorMatrix.setAttribute("values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0");
      filter.appendChild(feColorMatrix);
      var feComponentTransfer = createNS("feComponentTransfer");
      feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
      feComponentTransfer.setAttribute("result", id2);
      this.matrixFilter = feComponentTransfer;
      var feFuncR = createNS("feFuncR");
      feFuncR.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFuncR);
      this.feFuncR = feFuncR;
      var feFuncG = createNS("feFuncG");
      feFuncG.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFuncG);
      this.feFuncG = feFuncG;
      var feFuncB = createNS("feFuncB");
      feFuncB.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFuncB);
      this.feFuncB = feFuncB;
      filter.appendChild(feComponentTransfer);
    }
    SVGTritoneFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var color1 = this.filterManager.effectElements[0].p.v;
        var color2 = this.filterManager.effectElements[1].p.v;
        var color3 = this.filterManager.effectElements[2].p.v;
        var tableR = color3[0] + " " + color2[0] + " " + color1[0];
        var tableG = color3[1] + " " + color2[1] + " " + color1[1];
        var tableB = color3[2] + " " + color2[2] + " " + color1[2];
        this.feFuncR.setAttribute("tableValues", tableR);
        this.feFuncG.setAttribute("tableValues", tableG);
        this.feFuncB.setAttribute("tableValues", tableB);
      }
    };
    function SVGProLevelsFilter(filter, filterManager, elem2, id2) {
      this.filterManager = filterManager;
      var effectElements = this.filterManager.effectElements;
      var feComponentTransfer = createNS("feComponentTransfer");
      if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
        this.feFuncR = this.createFeFunc("feFuncR", feComponentTransfer);
      }
      if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
        this.feFuncG = this.createFeFunc("feFuncG", feComponentTransfer);
      }
      if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
        this.feFuncB = this.createFeFunc("feFuncB", feComponentTransfer);
      }
      if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
        this.feFuncA = this.createFeFunc("feFuncA", feComponentTransfer);
      }
      if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
        feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
        filter.appendChild(feComponentTransfer);
      }
      if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {
        feComponentTransfer = createNS("feComponentTransfer");
        feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
        feComponentTransfer.setAttribute("result", id2);
        filter.appendChild(feComponentTransfer);
        this.feFuncRComposed = this.createFeFunc("feFuncR", feComponentTransfer);
        this.feFuncGComposed = this.createFeFunc("feFuncG", feComponentTransfer);
        this.feFuncBComposed = this.createFeFunc("feFuncB", feComponentTransfer);
      }
    }
    SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {
      var feFunc = createNS(type);
      feFunc.setAttribute("type", "table");
      feComponentTransfer.appendChild(feFunc);
      return feFunc;
    };
    SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
      var cnt = 0;
      var segments = 256;
      var perc;
      var min = Math.min(inputBlack, inputWhite);
      var max = Math.max(inputBlack, inputWhite);
      var table = Array.call(null, {
        length: segments
      });
      var colorValue;
      var pos = 0;
      var outputDelta = outputWhite - outputBlack;
      var inputDelta = inputWhite - inputBlack;
      while (cnt <= 256) {
        perc = cnt / 256;
        if (perc <= min) {
          colorValue = inputDelta < 0 ? outputWhite : outputBlack;
        } else if (perc >= max) {
          colorValue = inputDelta < 0 ? outputBlack : outputWhite;
        } else {
          colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
        }
        table[pos] = colorValue;
        pos += 1;
        cnt += 256 / (segments - 1);
      }
      return table.join(" ");
    };
    SVGProLevelsFilter.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var val2;
        var effectElements = this.filterManager.effectElements;
        if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
          val2 = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
          this.feFuncRComposed.setAttribute("tableValues", val2);
          this.feFuncGComposed.setAttribute("tableValues", val2);
          this.feFuncBComposed.setAttribute("tableValues", val2);
        }
        if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
          val2 = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
          this.feFuncR.setAttribute("tableValues", val2);
        }
        if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
          val2 = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
          this.feFuncG.setAttribute("tableValues", val2);
        }
        if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
          val2 = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
          this.feFuncB.setAttribute("tableValues", val2);
        }
        if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
          val2 = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
          this.feFuncA.setAttribute("tableValues", val2);
        }
      }
    };
    function SVGDropShadowEffect(filter, filterManager, elem2, id2, source) {
      var globalFilterSize = filterManager.container.globalData.renderConfig.filterSize;
      var filterSize = filterManager.data.fs || globalFilterSize;
      filter.setAttribute("x", filterSize.x || globalFilterSize.x);
      filter.setAttribute("y", filterSize.y || globalFilterSize.y);
      filter.setAttribute("width", filterSize.width || globalFilterSize.width);
      filter.setAttribute("height", filterSize.height || globalFilterSize.height);
      this.filterManager = filterManager;
      var feGaussianBlur = createNS("feGaussianBlur");
      feGaussianBlur.setAttribute("in", "SourceAlpha");
      feGaussianBlur.setAttribute("result", id2 + "_drop_shadow_1");
      feGaussianBlur.setAttribute("stdDeviation", "0");
      this.feGaussianBlur = feGaussianBlur;
      filter.appendChild(feGaussianBlur);
      var feOffset = createNS("feOffset");
      feOffset.setAttribute("dx", "25");
      feOffset.setAttribute("dy", "0");
      feOffset.setAttribute("in", id2 + "_drop_shadow_1");
      feOffset.setAttribute("result", id2 + "_drop_shadow_2");
      this.feOffset = feOffset;
      filter.appendChild(feOffset);
      var feFlood = createNS("feFlood");
      feFlood.setAttribute("flood-color", "#00ff00");
      feFlood.setAttribute("flood-opacity", "1");
      feFlood.setAttribute("result", id2 + "_drop_shadow_3");
      this.feFlood = feFlood;
      filter.appendChild(feFlood);
      var feComposite = createNS("feComposite");
      feComposite.setAttribute("in", id2 + "_drop_shadow_3");
      feComposite.setAttribute("in2", id2 + "_drop_shadow_2");
      feComposite.setAttribute("operator", "in");
      feComposite.setAttribute("result", id2 + "_drop_shadow_4");
      filter.appendChild(feComposite);
      var feMerge = this.createMergeNode(id2, [id2 + "_drop_shadow_4", source]);
      filter.appendChild(feMerge);
    }
    extendPrototype([SVGComposableEffect], SVGDropShadowEffect);
    SVGDropShadowEffect.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        if (forceRender || this.filterManager.effectElements[4].p._mdf) {
          this.feGaussianBlur.setAttribute("stdDeviation", this.filterManager.effectElements[4].p.v / 4);
        }
        if (forceRender || this.filterManager.effectElements[0].p._mdf) {
          var col = this.filterManager.effectElements[0].p.v;
          this.feFlood.setAttribute("flood-color", rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
        }
        if (forceRender || this.filterManager.effectElements[1].p._mdf) {
          this.feFlood.setAttribute("flood-opacity", this.filterManager.effectElements[1].p.v / 255);
        }
        if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
          var distance = this.filterManager.effectElements[3].p.v;
          var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
          var x3 = distance * Math.cos(angle);
          var y4 = distance * Math.sin(angle);
          this.feOffset.setAttribute("dx", x3);
          this.feOffset.setAttribute("dy", y4);
        }
      }
    };
    var _svgMatteSymbols = [];
    function SVGMatte3Effect(filterElem, filterManager, elem2) {
      this.initialized = false;
      this.filterManager = filterManager;
      this.filterElem = filterElem;
      this.elem = elem2;
      elem2.matteElement = createNS("g");
      elem2.matteElement.appendChild(elem2.layerElement);
      elem2.matteElement.appendChild(elem2.transformedElement);
      elem2.baseElement = elem2.matteElement;
    }
    SVGMatte3Effect.prototype.findSymbol = function(mask2) {
      var i2 = 0;
      var len = _svgMatteSymbols.length;
      while (i2 < len) {
        if (_svgMatteSymbols[i2] === mask2) {
          return _svgMatteSymbols[i2];
        }
        i2 += 1;
      }
      return null;
    };
    SVGMatte3Effect.prototype.replaceInParent = function(mask2, symbolId) {
      var parentNode = mask2.layerElement.parentNode;
      if (!parentNode) {
        return;
      }
      var children = parentNode.children;
      var i2 = 0;
      var len = children.length;
      while (i2 < len) {
        if (children[i2] === mask2.layerElement) {
          break;
        }
        i2 += 1;
      }
      var nextChild;
      if (i2 <= len - 2) {
        nextChild = children[i2 + 1];
      }
      var useElem = createNS("use");
      useElem.setAttribute("href", "#" + symbolId);
      if (nextChild) {
        parentNode.insertBefore(useElem, nextChild);
      } else {
        parentNode.appendChild(useElem);
      }
    };
    SVGMatte3Effect.prototype.setElementAsMask = function(elem2, mask2) {
      if (!this.findSymbol(mask2)) {
        var symbolId = createElementID();
        var masker = createNS("mask");
        masker.setAttribute("id", mask2.layerId);
        masker.setAttribute("mask-type", "alpha");
        _svgMatteSymbols.push(mask2);
        var defs = elem2.globalData.defs;
        defs.appendChild(masker);
        var symbol = createNS("symbol");
        symbol.setAttribute("id", symbolId);
        this.replaceInParent(mask2, symbolId);
        symbol.appendChild(mask2.layerElement);
        defs.appendChild(symbol);
        var useElem = createNS("use");
        useElem.setAttribute("href", "#" + symbolId);
        masker.appendChild(useElem);
        mask2.data.hd = false;
        mask2.show();
      }
      elem2.setMatte(mask2.layerId);
    };
    SVGMatte3Effect.prototype.initialize = function() {
      var ind = this.filterManager.effectElements[0].p.v;
      var elements = this.elem.comp.elements;
      var i2 = 0;
      var len = elements.length;
      while (i2 < len) {
        if (elements[i2] && elements[i2].data.ind === ind) {
          this.setElementAsMask(this.elem, elements[i2]);
        }
        i2 += 1;
      }
      this.initialized = true;
    };
    SVGMatte3Effect.prototype.renderFrame = function() {
      if (!this.initialized) {
        this.initialize();
      }
    };
    function SVGGaussianBlurEffect(filter, filterManager, elem2, id2) {
      filter.setAttribute("x", "-100%");
      filter.setAttribute("y", "-100%");
      filter.setAttribute("width", "300%");
      filter.setAttribute("height", "300%");
      this.filterManager = filterManager;
      var feGaussianBlur = createNS("feGaussianBlur");
      feGaussianBlur.setAttribute("result", id2);
      filter.appendChild(feGaussianBlur);
      this.feGaussianBlur = feGaussianBlur;
    }
    SVGGaussianBlurEffect.prototype.renderFrame = function(forceRender) {
      if (forceRender || this.filterManager._mdf) {
        var kBlurrinessToSigma = 0.3;
        var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma;
        var dimensions = this.filterManager.effectElements[1].p.v;
        var sigmaX = dimensions == 3 ? 0 : sigma;
        var sigmaY = dimensions == 2 ? 0 : sigma;
        this.feGaussianBlur.setAttribute("stdDeviation", sigmaX + " " + sigmaY);
        var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? "wrap" : "duplicate";
        this.feGaussianBlur.setAttribute("edgeMode", edgeMode);
      }
    };
    function TransformEffect() {
    }
    TransformEffect.prototype.init = function(effectsManager) {
      this.effectsManager = effectsManager;
      this.type = effectTypes.TRANSFORM_EFFECT;
      this.matrix = new Matrix();
      this.opacity = -1;
      this._mdf = false;
      this._opMdf = false;
    };
    TransformEffect.prototype.renderFrame = function(forceFrame) {
      this._opMdf = false;
      this._mdf = false;
      if (forceFrame || this.effectsManager._mdf) {
        var effectElements = this.effectsManager.effectElements;
        var anchor = effectElements[0].p.v;
        var position2 = effectElements[1].p.v;
        var isUniformScale = effectElements[2].p.v === 1;
        var scaleHeight = effectElements[3].p.v;
        var scaleWidth = isUniformScale ? scaleHeight : effectElements[4].p.v;
        var skew = effectElements[5].p.v;
        var skewAxis = effectElements[6].p.v;
        var rotation2 = effectElements[7].p.v;
        this.matrix.reset();
        this.matrix.translate(-anchor[0], -anchor[1], anchor[2]);
        this.matrix.scale(scaleWidth * 0.01, scaleHeight * 0.01, 1);
        this.matrix.rotate(-rotation2 * degToRads);
        this.matrix.skewFromAxis(-skew * degToRads, (skewAxis + 90) * degToRads);
        this.matrix.translate(position2[0], position2[1], 0);
        this._mdf = true;
        if (this.opacity !== effectElements[8].p.v) {
          this.opacity = effectElements[8].p.v;
          this._opMdf = true;
        }
      }
    };
    function SVGTransformEffect(_, filterManager) {
      this.init(filterManager);
    }
    extendPrototype([TransformEffect], SVGTransformEffect);
    function CVTransformEffect(effectsManager) {
      this.init(effectsManager);
    }
    extendPrototype([TransformEffect], CVTransformEffect);
    registerRenderer("canvas", CanvasRenderer);
    registerRenderer("html", HybridRenderer);
    registerRenderer("svg", SVGRenderer);
    ShapeModifiers.registerModifier("tm", TrimModifier);
    ShapeModifiers.registerModifier("pb", PuckerAndBloatModifier);
    ShapeModifiers.registerModifier("rp", RepeaterModifier);
    ShapeModifiers.registerModifier("rd", RoundCornersModifier);
    ShapeModifiers.registerModifier("zz", ZigZagModifier);
    ShapeModifiers.registerModifier("op", OffsetPathModifier);
    setExpressionsPlugin(Expressions);
    setExpressionInterfaces(getInterface);
    initialize$1();
    initialize();
    registerEffect$1(20, SVGTintFilter, true);
    registerEffect$1(21, SVGFillFilter, true);
    registerEffect$1(22, SVGStrokeEffect, false);
    registerEffect$1(23, SVGTritoneFilter, true);
    registerEffect$1(24, SVGProLevelsFilter, true);
    registerEffect$1(25, SVGDropShadowEffect, true);
    registerEffect$1(28, SVGMatte3Effect, false);
    registerEffect$1(29, SVGGaussianBlurEffect, true);
    registerEffect$1(35, SVGTransformEffect, false);
    registerEffect(35, CVTransformEffect);
    return lottie;
  });
})(lottie$1, lottie$1.exports);
var lottieExports = lottie$1.exports;
const lottie = /* @__PURE__ */ getDefaultExportFromCjs(lottieExports);
function _iterableToArrayLimit(arr, i2) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i2) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i2); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function ownKeys(object2, enumerableOnly) {
  var keys2 = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object2);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = null != arguments[i2] ? arguments[i2] : {};
    i2 % 2 ? ownKeys(Object(source), true).forEach(function(key2) {
      _defineProperty(target, key2, source[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target;
}
function _defineProperty(obj, key2, value2) {
  key2 = _toPropertyKey(key2);
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value2;
  }
  return obj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key2, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key2 = sourceSymbolKeys[i2];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key2))
        continue;
      target[key2] = source[key2];
    }
  }
  return target;
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n2 = Object.prototype.toString.call(o).slice(8, -1);
  if (n2 === "Object" && o.constructor)
    n2 = o.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key2 = _toPrimitive(arg, "string");
  return typeof key2 === "symbol" ? key2 : String(key2);
}
var _excluded$1 = ["animationData", "loop", "autoplay", "initialSegment", "onComplete", "onLoopComplete", "onEnterFrame", "onSegmentStart", "onConfigReady", "onDataReady", "onDataFailed", "onLoadedImages", "onDOMLoaded", "onDestroy", "lottieRef", "renderer", "name", "assetsPath", "rendererSettings"];
var useLottie = function useLottie2(props, style) {
  var animationData = props.animationData, loop2 = props.loop, autoplay = props.autoplay, initialSegment = props.initialSegment, onComplete = props.onComplete, onLoopComplete = props.onLoopComplete, onEnterFrame = props.onEnterFrame, onSegmentStart = props.onSegmentStart, onConfigReady = props.onConfigReady, onDataReady = props.onDataReady, onDataFailed = props.onDataFailed, onLoadedImages = props.onLoadedImages, onDOMLoaded = props.onDOMLoaded, onDestroy = props.onDestroy;
  props.lottieRef;
  props.renderer;
  props.name;
  props.assetsPath;
  props.rendererSettings;
  var rest = _objectWithoutProperties(props, _excluded$1);
  var _useState = reactExports.useState(false), _useState2 = _slicedToArray(_useState, 2), animationLoaded = _useState2[0], setAnimationLoaded = _useState2[1];
  var animationInstanceRef = reactExports.useRef();
  var animationContainer = reactExports.useRef(null);
  var play = function play2() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.play();
  };
  var stop2 = function stop3() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.stop();
  };
  var pause = function pause2() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.pause();
  };
  var setSpeed = function setSpeed2(speed) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSpeed(speed);
  };
  var goToAndPlay = function goToAndPlay2(value2, isFrame) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndPlay(value2, isFrame);
  };
  var goToAndStop = function goToAndStop2(value2, isFrame) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndStop(value2, isFrame);
  };
  var setDirection = function setDirection2(direction) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setDirection(direction);
  };
  var playSegments = function playSegments2(segments, forceFlag) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.playSegments(segments, forceFlag);
  };
  var setSubframe = function setSubframe2(useSubFrames) {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSubframe(useSubFrames);
  };
  var getDuration = function getDuration2(inFrames) {
    var _a;
    return (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.getDuration(inFrames);
  };
  var destroy = function destroy2() {
    var _a;
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
    animationInstanceRef.current = void 0;
  };
  var loadAnimation2 = function loadAnimation3() {
    var forcedConfigs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var _a;
    if (!animationContainer.current) {
      return;
    }
    (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
    var config2 = _objectSpread2(_objectSpread2(_objectSpread2({}, props), forcedConfigs), {}, {
      container: animationContainer.current
    });
    animationInstanceRef.current = lottie.loadAnimation(config2);
    setAnimationLoaded(!!animationInstanceRef.current);
    return function() {
      var _a2;
      (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.destroy();
      animationInstanceRef.current = void 0;
    };
  };
  reactExports.useEffect(function() {
    var onUnmount = loadAnimation2();
    return function() {
      return onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount();
    };
  }, [animationData, loop2]);
  reactExports.useEffect(function() {
    if (!animationInstanceRef.current) {
      return;
    }
    animationInstanceRef.current.autoplay = !!autoplay;
  }, [autoplay]);
  reactExports.useEffect(function() {
    if (!animationInstanceRef.current) {
      return;
    }
    if (!initialSegment) {
      animationInstanceRef.current.resetSegments(true);
      return;
    }
    if (!Array.isArray(initialSegment) || !initialSegment.length) {
      return;
    }
    if (animationInstanceRef.current.currentRawFrame < initialSegment[0] || animationInstanceRef.current.currentRawFrame > initialSegment[1]) {
      animationInstanceRef.current.currentRawFrame = initialSegment[0];
    }
    animationInstanceRef.current.setSegment(initialSegment[0], initialSegment[1]);
  }, [initialSegment]);
  reactExports.useEffect(function() {
    var partialListeners = [{
      name: "complete",
      handler: onComplete
    }, {
      name: "loopComplete",
      handler: onLoopComplete
    }, {
      name: "enterFrame",
      handler: onEnterFrame
    }, {
      name: "segmentStart",
      handler: onSegmentStart
    }, {
      name: "config_ready",
      handler: onConfigReady
    }, {
      name: "data_ready",
      handler: onDataReady
    }, {
      name: "data_failed",
      handler: onDataFailed
    }, {
      name: "loaded_images",
      handler: onLoadedImages
    }, {
      name: "DOMLoaded",
      handler: onDOMLoaded
    }, {
      name: "destroy",
      handler: onDestroy
    }];
    var listeners = partialListeners.filter(function(listener) {
      return listener.handler != null;
    });
    if (!listeners.length) {
      return;
    }
    var deregisterList = listeners.map(
      /**
       * Handle the process of adding an event listener
       * @param {Listener} listener
       * @return {Function} Function that deregister the listener
       */
      function(listener) {
        var _a;
        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(listener.name, listener.handler);
        return function() {
          var _a2;
          (_a2 = animationInstanceRef.current) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener(listener.name, listener.handler);
        };
      }
    );
    return function() {
      deregisterList.forEach(function(deregister) {
        return deregister();
      });
    };
  }, [onComplete, onLoopComplete, onEnterFrame, onSegmentStart, onConfigReady, onDataReady, onDataFailed, onLoadedImages, onDOMLoaded, onDestroy]);
  var View = /* @__PURE__ */ React.createElement("div", _objectSpread2({
    style,
    ref: animationContainer
  }, rest));
  return {
    View,
    play,
    stop: stop2,
    pause,
    setSpeed,
    goToAndStop,
    goToAndPlay,
    setDirection,
    playSegments,
    setSubframe,
    getDuration,
    destroy,
    animationContainerRef: animationContainer,
    animationLoaded,
    animationItem: animationInstanceRef.current
  };
};
function getContainerVisibility(container) {
  var _container$getBoundin = container.getBoundingClientRect(), top = _container$getBoundin.top, height2 = _container$getBoundin.height;
  var current = window.innerHeight - top;
  var max = window.innerHeight + height2;
  return current / max;
}
function getContainerCursorPosition(container, cursorX, cursorY) {
  var _container$getBoundin2 = container.getBoundingClientRect(), top = _container$getBoundin2.top, left = _container$getBoundin2.left, width2 = _container$getBoundin2.width, height2 = _container$getBoundin2.height;
  var x3 = (cursorX - left) / width2;
  var y4 = (cursorY - top) / height2;
  return {
    x: x3,
    y: y4
  };
}
var useInitInteractivity = function useInitInteractivity2(_ref) {
  var wrapperRef = _ref.wrapperRef, animationItem = _ref.animationItem, mode = _ref.mode, actions = _ref.actions;
  reactExports.useEffect(function() {
    var wrapper = wrapperRef.current;
    if (!wrapper || !animationItem || !actions.length) {
      return;
    }
    animationItem.stop();
    var scrollModeHandler = function scrollModeHandler2() {
      var assignedSegment = null;
      var scrollHandler = function scrollHandler2() {
        var currentPercent = getContainerVisibility(wrapper);
        var action = actions.find(function(_ref2) {
          var visibility = _ref2.visibility;
          return visibility && currentPercent >= visibility[0] && currentPercent <= visibility[1];
        });
        if (!action) {
          return;
        }
        if (action.type === "seek" && action.visibility && action.frames.length === 2) {
          var frameToGo = action.frames[0] + Math.ceil((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0]) * action.frames[1]);
          //! goToAndStop must be relative to the start of the current segment
          animationItem.goToAndStop(frameToGo - animationItem.firstFrame - 1, true);
        }
        if (action.type === "loop") {
          if (assignedSegment === null) {
            animationItem.playSegments(action.frames, true);
            assignedSegment = action.frames;
          } else {
            if (assignedSegment !== action.frames) {
              animationItem.playSegments(action.frames, true);
              assignedSegment = action.frames;
            } else if (animationItem.isPaused) {
              animationItem.playSegments(action.frames, true);
              assignedSegment = action.frames;
            }
          }
        }
        if (action.type === "play" && animationItem.isPaused) {
          animationItem.resetSegments(true);
          animationItem.play();
        }
        if (action.type === "stop") {
          animationItem.goToAndStop(action.frames[0] - animationItem.firstFrame - 1, true);
        }
      };
      document.addEventListener("scroll", scrollHandler);
      return function() {
        document.removeEventListener("scroll", scrollHandler);
      };
    };
    var cursorModeHandler = function cursorModeHandler2() {
      var handleCursor = function handleCursor2(_x, _y) {
        var x3 = _x;
        var y4 = _y;
        if (x3 !== -1 && y4 !== -1) {
          var pos = getContainerCursorPosition(wrapper, x3, y4);
          x3 = pos.x;
          y4 = pos.y;
        }
        var action = actions.find(function(_ref3) {
          var position2 = _ref3.position;
          if (position2 && Array.isArray(position2.x) && Array.isArray(position2.y)) {
            return x3 >= position2.x[0] && x3 <= position2.x[1] && y4 >= position2.y[0] && y4 <= position2.y[1];
          }
          if (position2 && !Number.isNaN(position2.x) && !Number.isNaN(position2.y)) {
            return x3 === position2.x && y4 === position2.y;
          }
          return false;
        });
        if (!action) {
          return;
        }
        if (action.type === "seek" && action.position && Array.isArray(action.position.x) && Array.isArray(action.position.y) && action.frames.length === 2) {
          var xPercent = (x3 - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);
          var yPercent = (y4 - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);
          animationItem.playSegments(action.frames, true);
          animationItem.goToAndStop(Math.ceil((xPercent + yPercent) / 2 * (action.frames[1] - action.frames[0])), true);
        }
        if (action.type === "loop") {
          animationItem.playSegments(action.frames, true);
        }
        if (action.type === "play") {
          if (animationItem.isPaused) {
            animationItem.resetSegments(false);
          }
          animationItem.playSegments(action.frames);
        }
        if (action.type === "stop") {
          animationItem.goToAndStop(action.frames[0], true);
        }
      };
      var mouseMoveHandler = function mouseMoveHandler2(ev) {
        handleCursor(ev.clientX, ev.clientY);
      };
      var mouseOutHandler = function mouseOutHandler2() {
        handleCursor(-1, -1);
      };
      wrapper.addEventListener("mousemove", mouseMoveHandler);
      wrapper.addEventListener("mouseout", mouseOutHandler);
      return function() {
        wrapper.removeEventListener("mousemove", mouseMoveHandler);
        wrapper.removeEventListener("mouseout", mouseOutHandler);
      };
    };
    switch (mode) {
      case "scroll":
        return scrollModeHandler();
      case "cursor":
        return cursorModeHandler();
    }
  }, [mode, animationItem]);
};
var useLottieInteractivity = function useLottieInteractivity2(_ref4) {
  var actions = _ref4.actions, mode = _ref4.mode, lottieObj = _ref4.lottieObj;
  var animationItem = lottieObj.animationItem, View = lottieObj.View, animationContainerRef = lottieObj.animationContainerRef;
  useInitInteractivity({
    actions,
    animationItem,
    mode,
    wrapperRef: animationContainerRef
  });
  return View;
};
var _excluded = ["style", "interactivity"];
var Lottie = function Lottie2(props) {
  var _a, _b, _c;
  var style = props.style, interactivity = props.interactivity, lottieProps = _objectWithoutProperties(props, _excluded);
  var _useLottie = useLottie(lottieProps, style), View = _useLottie.View, play = _useLottie.play, stop2 = _useLottie.stop, pause = _useLottie.pause, setSpeed = _useLottie.setSpeed, goToAndStop = _useLottie.goToAndStop, goToAndPlay = _useLottie.goToAndPlay, setDirection = _useLottie.setDirection, playSegments = _useLottie.playSegments, setSubframe = _useLottie.setSubframe, getDuration = _useLottie.getDuration, destroy = _useLottie.destroy, animationContainerRef = _useLottie.animationContainerRef, animationLoaded = _useLottie.animationLoaded, animationItem = _useLottie.animationItem;
  reactExports.useEffect(function() {
    if (props.lottieRef) {
      props.lottieRef.current = {
        play,
        stop: stop2,
        pause,
        setSpeed,
        goToAndPlay,
        goToAndStop,
        setDirection,
        playSegments,
        setSubframe,
        getDuration,
        destroy,
        animationContainerRef,
        animationLoaded,
        animationItem
      };
    }
  }, [(_a = props.lottieRef) === null || _a === void 0 ? void 0 : _a.current]);
  return useLottieInteractivity({
    lottieObj: {
      View,
      play,
      stop: stop2,
      pause,
      setSpeed,
      goToAndStop,
      goToAndPlay,
      setDirection,
      playSegments,
      setSubframe,
      getDuration,
      destroy,
      animationContainerRef,
      animationLoaded,
      animationItem
    },
    actions: (_b = interactivity === null || interactivity === void 0 ? void 0 : interactivity.actions) !== null && _b !== void 0 ? _b : [],
    mode: (_c = interactivity === null || interactivity === void 0 ? void 0 : interactivity.mode) !== null && _c !== void 0 ? _c : "scroll"
  });
};
const v = "4.8.0";
const meta = {
  g: "LottieFiles AE 3.4.3",
  a: "",
  k: "",
  d: "",
  tc: ""
};
const fr = 30;
const ip = 0;
const op = 50;
const w = 720;
const h = 720;
const nm = "loading";
const ddd = 0;
const assets = [];
const layers = [
  {
    ddd: 0,
    ind: 1,
    ty: 4,
    nm: "Shape Layer 2",
    sr: 1,
    ks: {
      o: {
        a: 0,
        k: 100,
        ix: 11
      },
      r: {
        a: 1,
        k: [
          {
            i: {
              x: [
                0.297
              ],
              y: [
                1
              ]
            },
            o: {
              x: [
                0.279
              ],
              y: [
                0
              ]
            },
            t: 0,
            s: [
              0
            ]
          },
          {
            t: 50,
            s: [
              36
            ]
          }
        ],
        ix: 10
      },
      p: {
        a: 0,
        k: [
          360,
          360,
          0
        ],
        ix: 2
      },
      a: {
        a: 0,
        k: [
          46,
          14,
          0
        ],
        ix: 1
      },
      s: {
        a: 0,
        k: [
          112.004,
          112.004,
          100
        ],
        ix: 6
      }
    },
    ao: 0,
    shapes: [
      {
        ty: "gr",
        it: [
          {
            d: 1,
            ty: "el",
            s: {
              a: 0,
              k: [
                559.031,
                559.031
              ],
              ix: 2
            },
            p: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 3
            },
            nm: "Ellipse Path 1",
            mn: "ADBE Vector Shape - Ellipse",
            hd: false
          },
          {
            ty: "st",
            c: {
              a: 0,
              k: [
                0.956862745098,
                0.956862745098,
                0.960784313725,
                1
              ],
              ix: 3
            },
            o: {
              a: 0,
              k: 100,
              ix: 4
            },
            w: {
              a: 0,
              k: 64,
              ix: 5
            },
            lc: 1,
            lj: 1,
            ml: 4,
            bm: 0,
            nm: "Stroke 1",
            mn: "ADBE Vector Graphic - Stroke",
            hd: false
          },
          {
            ty: "tr",
            p: {
              a: 0,
              k: [
                46,
                14
              ],
              ix: 2
            },
            a: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 1
            },
            s: {
              a: 0,
              k: [
                88.542,
                88.542
              ],
              ix: 3
            },
            r: {
              a: 0,
              k: 0,
              ix: 6
            },
            o: {
              a: 0,
              k: 100,
              ix: 7
            },
            sk: {
              a: 0,
              k: 0,
              ix: 4
            },
            sa: {
              a: 0,
              k: 0,
              ix: 5
            },
            nm: "Transform"
          }
        ],
        nm: "Ellipse 1",
        np: 3,
        cix: 2,
        bm: 0,
        ix: 1,
        mn: "ADBE Vector Group",
        hd: false
      },
      {
        ty: "tm",
        s: {
          a: 1,
          k: [
            {
              i: {
                x: [
                  0.243
                ],
                y: [
                  1
                ]
              },
              o: {
                x: [
                  0.431
                ],
                y: [
                  0
                ]
              },
              t: 10,
              s: [
                0
              ]
            },
            {
              t: 50,
              s: [
                90
              ]
            }
          ],
          ix: 1
        },
        e: {
          a: 1,
          k: [
            {
              i: {
                x: [
                  0.243
                ],
                y: [
                  1
                ]
              },
              o: {
                x: [
                  0.431
                ],
                y: [
                  0
                ]
              },
              t: 0,
              s: [
                10
              ]
            },
            {
              t: 40,
              s: [
                100
              ]
            }
          ],
          ix: 2
        },
        o: {
          a: 0,
          k: 0,
          ix: 3
        },
        m: 1,
        ix: 2,
        nm: "Trim Paths 1",
        mn: "ADBE Vector Filter - Trim",
        hd: false
      }
    ],
    ip: 0,
    op: 60,
    st: 0,
    bm: 0
  },
  {
    ddd: 0,
    ind: 2,
    ty: 4,
    nm: "Shape Layer 1",
    sr: 1,
    ks: {
      o: {
        a: 0,
        k: 100,
        ix: 11
      },
      r: {
        a: 0,
        k: 0,
        ix: 10
      },
      p: {
        a: 0,
        k: [
          360,
          360,
          0
        ],
        ix: 2
      },
      a: {
        a: 0,
        k: [
          46,
          14,
          0
        ],
        ix: 1
      },
      s: {
        a: 0,
        k: [
          112.004,
          112.004,
          100
        ],
        ix: 6
      }
    },
    ao: 0,
    shapes: [
      {
        ty: "gr",
        it: [
          {
            d: 1,
            ty: "el",
            s: {
              a: 0,
              k: [
                559.031,
                559.031
              ],
              ix: 2
            },
            p: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 3
            },
            nm: "Ellipse Path 1",
            mn: "ADBE Vector Shape - Ellipse",
            hd: false
          },
          {
            ty: "st",
            c: {
              a: 0,
              k: [
                0.274509803922,
                0.298039215686,
                0.309803921569,
                1
              ],
              ix: 3
            },
            o: {
              a: 0,
              k: 100,
              ix: 4
            },
            w: {
              a: 0,
              k: 64,
              ix: 5
            },
            lc: 1,
            lj: 1,
            ml: 4,
            bm: 0,
            nm: "Stroke 1",
            mn: "ADBE Vector Graphic - Stroke",
            hd: false
          },
          {
            ty: "tr",
            p: {
              a: 0,
              k: [
                46,
                14
              ],
              ix: 2
            },
            a: {
              a: 0,
              k: [
                0,
                0
              ],
              ix: 1
            },
            s: {
              a: 0,
              k: [
                88.542,
                88.542
              ],
              ix: 3
            },
            r: {
              a: 0,
              k: 0,
              ix: 6
            },
            o: {
              a: 0,
              k: 100,
              ix: 7
            },
            sk: {
              a: 0,
              k: 0,
              ix: 4
            },
            sa: {
              a: 0,
              k: 0,
              ix: 5
            },
            nm: "Transform"
          }
        ],
        nm: "Ellipse 1",
        np: 3,
        cix: 2,
        bm: 0,
        ix: 1,
        mn: "ADBE Vector Group",
        hd: false
      }
    ],
    ip: 0,
    op: 60,
    st: 0,
    bm: 0
  }
];
const markers = [];
const Loading = {
  v,
  meta,
  fr,
  ip,
  op,
  w,
  h,
  nm,
  ddd,
  assets,
  layers,
  markers
};
const logs = "_logs_1supl_3";
const toggle = "_toggle_1supl_3";
const stream = "_stream_1supl_12";
const active$1 = "_active_1supl_29";
const passive = "_passive_1supl_33";
const borderAll = "_borderAll_1supl_38";
const borderTwo = "_borderTwo_1supl_42";
const styles$6 = {
  logs,
  toggle,
  stream,
  active: active$1,
  passive,
  borderAll,
  borderTwo
};
const Logs = () => {
  const [hide, setHide] = reactExports.useState(true);
  const ref = reactExports.createRef();
  const { logs: logs2 } = reactExports.useContext(appContext);
  const scrollToBottomOfList = reactExports.useCallback(() => {
    if (ref && ref.current) {
      ref.current.scrollIntoView({
        behavior: "smooth",
        block: "end"
      });
    }
  }, [ref]);
  reactExports.useEffect(() => {
    scrollToBottomOfList();
  }, [logs2]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$6["logs"], children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        className: `${styles$6.toggle} ${hide ? styles$6.borderAll : styles$6.borderTwo}`,
        onClick: () => setHide((prevState) => !prevState),
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
            hide ? "Show" : "Hide",
            " logs"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "svg",
            {
              className: `${!hide ? styles$6.active : styles$6.passive}`,
              xmlns: "http://www.w3.org/2000/svg",
              width: "24",
              height: "24",
              viewBox: "0 0 24 24",
              fill: "none",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "path",
                {
                  d: "M11.6502 15.2747L6 9.5999L6.9 8.7251L11.6502 13.4747L16.4004 8.7251L17.3004 9.6251L11.6502 15.2747Z",
                  fill: "#F4F4F5"
                }
              )
            }
          )
        ]
      }
    ),
    !hide && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$6["stream"], children: [
      logs2.length ? logs2.map((l2, i2) => /* @__PURE__ */ jsxRuntimeExports.jsx("code", { className: "text-white", children: l2 }, i2)) : /* @__PURE__ */ jsxRuntimeExports.jsx("code", { className: "text-white", children: "Loading logs..." }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ref, className: "pt-2" })
    ] })
  ] });
};
const active = "_active_1pbmb_1";
const layout = "_layout_1pbmb_6";
const picker = "_picker_1pbmb_10";
const dd = "_dd_1pbmb_36";
const backdrop = "_backdrop_1pbmb_51";
const styles$5 = {
  active,
  layout,
  picker,
  dd,
  backdrop,
  "no-results": "_no-results_1pbmb_94"
};
function formatBytes(bytes, decimals = 2) {
  if (!+bytes)
    return "0 Bytes";
  const k3 = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = [
    "Bytes",
    "KiB",
    "MiB",
    "GiB",
    "TiB",
    "PiB",
    "EiB",
    "ZiB",
    "YiB"
  ];
  const i2 = Math.floor(Math.log(bytes) / Math.log(k3));
  return `${parseFloat((bytes / Math.pow(k3, i2)).toFixed(dm))} ${sizes[i2]}`;
}
const List = ({ options, setForm, disabled }) => {
  const [selected, setSelected] = reactExports.useState("");
  const [openModal, setModal] = reactExports.useState(false);
  const [searchText, setSearchText] = reactExports.useState("");
  const handleChange = (e3) => {
    setSearchText(e3.target.value);
  };
  const handleSelect = (backup) => {
    setSelected(backup);
    setModal(false);
    setForm(backup);
    setSearchText("");
  };
  reactExports.useEffect(() => {
    if (selected === "") {
      handleSelect(options.length ? options[0].name : "");
      setForm(options.length ? options[0].name : "");
    }
  }, [options]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${styles$5.layout} core-grey-20`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "div",
      {
        onClick: () => {
          if (!disabled) {
            options.length ? setModal((prevState) => !prevState) : null;
          }
        },
        className: `${styles$5.picker} hover:cursor-pointer hover:bg-slate-200 relative ${disabled ? "hover:cursor-not-allowed" : ""}`,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "span",
            {
              className: `color-black font-sm ${disabled ? "text-disabled" : ""}`,
              children: [
                !!selected.length && selected,
                !selected.length && "No files available"
              ]
            }
          ),
          !disabled && /* @__PURE__ */ jsxRuntimeExports.jsx(
            "svg",
            {
              className: `${openModal ? styles$5.active : ""} top-6 absolute right-4`,
              width: "16",
              height: "10",
              viewBox: "0 0 16 10",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "path",
                {
                  d: "M8.0004 9.06678L0.466797 1.50038L1.6668 0.333984L8.0004 6.66678L14.334 0.333984L15.534 1.53398L8.0004 9.06678Z",
                  fill: "#91919D"
                }
              )
            }
          )
        ]
      }
    ),
    openModal && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: styles$5["backdrop"], children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$5["dd"], children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center mb-6", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl", children: "Choose a file" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            className: "hover:cursor-pointer",
            onClick: () => setModal(false),
            width: "16",
            height: "17",
            viewBox: "0 0 16 17",
            fill: "none",
            xmlns: "http://www.w3.org/2000/svg",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "path",
              {
                d: "M1.23077 16.5L0 15.2692L6.76923 8.5C4.12568 5.85645 2.64355 4.37432 0 1.73077L1.23077 0.5L8 7.26923L14.7692 0.5L16 1.73077L9.23077 8.5L16 15.2692L14.7692 16.5L8 9.73077L1.23077 16.5Z",
                fill: "#F9F9FA"
              }
            )
          }
        )
      ] }),
      !!options.length && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Input,
          {
            disabled: false,
            id: "search",
            name: "search",
            type: "text",
            placeholder: "Search files",
            onChange: handleChange,
            extraClass: "core-black-contrast-2 rounded-r-none",
            endIcon: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                width: "20",
                height: "20",
                viewBox: "0 0 20 20",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M16.3913 8.69565C16.3913 12.9458 12.9459 16.3913 8.69566 16.3913C4.44546 16.3913 1 12.9458 1 8.69565C1 4.44546 4.44546 1 8.69566 1C12.9459 1 16.3913 4.44546 16.3913 8.69565Z",
                      stroke: "#BDBDC4",
                      strokeWidth: "2",
                      strokeMiterlimit: "10",
                      strokeLinecap: "round",
                      strokeLinejoin: "round"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M19 19L15 15",
                      stroke: "#BDBDC4",
                      strokeWidth: "2",
                      strokeMiterlimit: "10",
                      strokeLinecap: "round",
                      strokeLinejoin: "round"
                    }
                  )
                ]
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "pb-4", children: [
          !!searchText.length && options.filter((o) => o.name.includes(searchText)).map((b3, i2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "li",
            {
              className: "font-normal p-4 core-grey-5 rounded color-black grid grid-cols-[1fr,auto] grid-rows-1 gap-2 items-center",
              onClick: () => handleSelect(b3.name),
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "font-medium text-sm break-all", children: b3.name }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm font-medium text-right grid", children: formatBytes(b3.size) })
              ]
            },
            i2
          )),
          !searchText.length && options.map((b3, i2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "li",
            {
              className: "font-normal p-4 core-grey-5 rounded color-black grid grid-cols-[1fr,auto] grid-rows-1 gap-2 items-center",
              onClick: () => handleSelect(b3.name),
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "font-medium text-sm break-all", children: b3.name }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm font-medium text-right grid", children: formatBytes(b3.size) })
              ]
            },
            i2
          )),
          !!searchText.length && options.filter((o) => o.name.includes(searchText)).length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: styles$5["no-results"], children: "No results found" })
        ] })
      ] }),
      !options.length && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: styles$5["no-results"], children: "No file found" })
    ] }) }) })
  ] });
};
const RestoreFromBackup = () => {
  const {
    setBackButton,
    displayBackButton: displayHeaderBackButton,
    backups,
    getBackups,
    shuttingDown
  } = reactExports.useContext(appContext);
  const location = useLocation();
  const [tooltip2, setTooltip] = reactExports.useState({ host: false });
  const [hidePassword, togglePasswordVisibility] = reactExports.useState(false);
  const [MDSShutdown, setMDSShutdown] = reactExports.useState(false);
  const [beginRestoring, setBeginRestoring] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(false);
  const [resetFileField, setResetFileField] = reactExports.useState(0);
  reactExports.useEffect(() => {
    if (shuttingDown) {
      setMDSShutdown(true);
    }
  }, [shuttingDown]);
  reactExports.useEffect(() => {
    setBackButton({ display: true, to: -1, title: "Back" });
  }, [location]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    step && step === 1 && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "img",
              {
                className: "mb-4",
                alt: "informative",
                src: "./assets/error.svg"
              }
            ),
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8", children: "Please note" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-6 text-center", children: [
              "Restoring a backup is irreversible. ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              " Consider taking a backup of this node before restoring"
            ] })
          ] }),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              onClick: () => {
                setStep(2);
              },
              children: "Continue"
            }
          ),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              onClick: () => setStep(false),
              extraClass: "mt-4",
              children: "Cancel"
            }
          )
        }
      ),
      document.body
    ),
    step && step === 2 && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "img",
              {
                className: "mb-4",
                alt: "informative",
                src: "./assets/error.svg"
              }
            ),
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8", children: "Restore from backup" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-6 text-center", children: "Select a backup stored internally within the app or upload a new backup from an external location." })
          ] }),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                extraClass: "mb-2",
                onClick: () => {
                  setStep(3);
                  getBackups();
                },
                children: "Select an internal backup"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  setStep(4);
                },
                children: "Upload an external backup"
              }
            )
          ] }),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              onClick: () => setStep(step - 1),
              extraClass: "mt-4",
              children: "Cancel"
            }
          )
        }
      ),
      document.body
    ),
    step && step === 3 && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          bg: "primary",
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Formik,
              {
                validationSchema: validationSchema$4,
                initialValues: {
                  host: "",
                  password: "",
                  file: void 0
                },
                onSubmit: async (formData) => {
                  setBeginRestoring(true);
                  try {
                    await restoreFromBackup(
                      formData.host,
                      formData.file,
                      formData.password
                    ).catch((error2) => {
                      throw error2;
                    });
                  } catch (error2) {
                    setError(error2);
                  }
                },
                children: ({
                  handleSubmit,
                  setFieldValue,
                  errors,
                  touched,
                  values,
                  handleBlur,
                  handleChange,
                  isValid: isValid2,
                  isSubmitting
                }) => /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: !beginRestoring && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "form",
                  {
                    autoComplete: "off",
                    className: "flex flex-col gap-4",
                    onSubmit: handleSubmit,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 text-center", children: "Restore from backup" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-12 text-center", children: [
                        "Once restored, the node will attempt to ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                        " sync to the latest block, please be patient."
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        List,
                        {
                          options: backups,
                          setForm: async (option) => {
                            if (option.length) {
                              const fullPath = await getPath(
                                "/backups/" + option
                              );
                              setFieldValue("file", fullPath);
                            }
                          }
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Input,
                        {
                          disabled: isSubmitting,
                          error: errors.password ? errors.password : false,
                          autoComplete: "new-password",
                          onChange: handleChange,
                          onBlur: handleBlur,
                          placeholder: "Enter password",
                          handleEndIconClick: () => togglePasswordVisibility(
                            (prevState) => !prevState
                          ),
                          type: !hidePassword ? "password" : "text",
                          id: "password",
                          name: "password",
                          value: values.password,
                          endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hidePassword })
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "mb-2 flex gap-2 items-center", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: "Archive node host" }),
                        !tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "img",
                          {
                            className: "w-4 h-4",
                            onClick: () => setTooltip({ ...tooltip2, host: true }),
                            alt: "tooltip",
                            src: "./assets/help_filled.svg"
                          }
                        ),
                        !!tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "img",
                          {
                            className: "w-4 h-4",
                            onClick: () => setTooltip({ ...tooltip2, host: false }),
                            alt: "tooltip-dismiss",
                            src: "./assets/cancel_filled.svg"
                          }
                        )
                      ] }),
                      tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Tooltip,
                        {
                          extraClass: "!mb-0 !mt-0",
                          onClick: () => setTooltip({ ...tooltip2, host: false }),
                          content: " ip:port of the archive node to sync from. Use 'auto' to connect to a default archive node.",
                          position: 148
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Input,
                        {
                          disabled: isSubmitting,
                          id: "host",
                          name: "host",
                          placeholder: "host (optional)",
                          type: "text",
                          value: values.host,
                          onChange: handleChange,
                          onBlur: handleBlur,
                          autoComplete: "off",
                          error: touched.host && errors.host ? errors.host : false
                        }
                      ) }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          disabled: !isValid2 || isSubmitting || !values.file,
                          type: "submit",
                          children: "Restore"
                        }
                      )
                    ]
                  }
                ) })
              }
            ),
            error && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "svg",
                {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "mask",
                      {
                        id: "mask0_594_13339",
                        maskUnits: "userSpaceOnUse",
                        x: "0",
                        y: "0",
                        width: "64",
                        height: "64",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_594_13339)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "path",
                      {
                        d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                        fill: "#F4F4F5"
                      }
                    ) })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Hmm.. something went wrong." }),
              typeof error === "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: error.includes("GZIP") ? "Invalid password." : error.includes("connectdata") ? "Host is invalid." : error.includes("Incorrect Password!") ? "Incorrect password!" : error }),
              typeof error === "object" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: JSON.stringify(error) })
            ] }),
            !!beginRestoring && !error && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col align-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Lottie,
                {
                  className: "mb-4 inline",
                  width: 4,
                  height: 4,
                  style: { maxWidth: 80, alignSelf: "center" },
                  animationData: Loading
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Restoring" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-8 text-center", children: [
                "Please don’t leave this screen whilst the chain is re-syncing.",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                " ",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                "Your node will shutdown once it is complete."
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Logs, {})
            ] })
          ] }),
          primary: null,
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            !beginRestoring && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                extraClass: "mt-4",
                onClick: () => setStep(2),
                children: "Cancel"
              }
            ),
            error && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                onClick: () => {
                  setError(false);
                  setBeginRestoring(false);
                },
                children: "Cancel"
              }
            )
          ] })
        }
      ),
      document.body
    ),
    step && step === 4 && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          bg: "primary",
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            !beginRestoring && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Formik,
              {
                validationSchema: validationSchema$4,
                initialValues: {
                  host: "",
                  password: "",
                  file: void 0
                },
                onSubmit: async (formData) => {
                  setBeginRestoring(true);
                  try {
                    const arrayBuffer = await blobToArrayBuffer(
                      formData.file
                    );
                    const hex = bufferToHex(arrayBuffer);
                    await saveFileAsBinary(
                      "/backups/" + formData.file.name,
                      hex
                    );
                    const fullPath = await getPath(
                      "/backups/" + formData.file.name
                    );
                    await restoreFromBackup(
                      formData.host,
                      fullPath,
                      formData.password
                    ).catch((error2) => {
                      throw error2;
                    });
                  } catch (error2) {
                    setError(error2);
                  }
                },
                children: ({
                  handleSubmit,
                  setFieldValue,
                  errors,
                  touched,
                  values,
                  handleBlur,
                  handleChange,
                  isValid: isValid2,
                  isSubmitting
                }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 text-center", children: "Restore from backup" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-12 text-center", children: [
                    "Once restored, the node will attempt to ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                    " sync to the latest block, please be patient."
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    FileChooser,
                    {
                      disabled: isSubmitting,
                      keyValue: resetFileField,
                      handleEndIconClick: () => {
                        setResetFileField((prev) => prev + 1);
                        setFieldValue("file", void 0);
                      },
                      error: errors.file && errors.file ? errors.file : false,
                      extraClass: "core-grey-20",
                      accept: ".bak",
                      onChange: (e3) => {
                        if (e3.target.files) {
                          setFieldValue("file", e3.target.files[0]);
                        }
                      },
                      onBlur: handleBlur,
                      placeholder: "Select file",
                      type: "file",
                      id: "file",
                      name: "file",
                      endIcon: values.file && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "svg",
                        {
                          xmlns: "http://www.w3.org/2000/svg",
                          width: "25",
                          height: "24",
                          viewBox: "0 0 25 24",
                          fill: "none",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "mask",
                              {
                                id: "mask0_645_17003",
                                maskUnits: "userSpaceOnUse",
                                x: "0",
                                y: "0",
                                width: "25",
                                height: "24",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "rect",
                                  {
                                    x: "0.5",
                                    width: "24",
                                    height: "24",
                                    fill: "#D9D9D9"
                                  }
                                )
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_645_17003)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "path",
                              {
                                d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                fill: "#91919D"
                              }
                            ) })
                          ]
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      disabled: isSubmitting,
                      mb: "mb-4",
                      mt: "mt-4",
                      error: errors.password ? errors.password : false,
                      autoComplete: "new-password",
                      onChange: handleChange,
                      onBlur: handleBlur,
                      placeholder: "Enter password",
                      handleEndIconClick: () => togglePasswordVisibility((prevState) => !prevState),
                      type: !hidePassword ? "password" : "text",
                      id: "password",
                      name: "password",
                      value: values.password,
                      endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hidePassword })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "mb-2 flex gap-2 items-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: "Archive node host" }),
                      !tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "img",
                        {
                          className: "w-4 h-4",
                          onClick: () => setTooltip({ ...tooltip2, host: true }),
                          alt: "tooltip",
                          src: "./assets/help_filled.svg"
                        }
                      ),
                      !!tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "img",
                        {
                          className: "w-4 h-4",
                          onClick: () => setTooltip({ ...tooltip2, host: false }),
                          alt: "tooltip-dismiss",
                          src: "./assets/cancel_filled.svg"
                        }
                      )
                    ] }),
                    !!tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Tooltip,
                      {
                        extraClass: "!mt-0 mb-2",
                        onClick: () => setTooltip({ ...tooltip2, host: false }),
                        content: " ip:port of the archive node to sync from.",
                        position: 148
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        disabled: isSubmitting,
                        mb: "mb-4",
                        id: "host",
                        name: "host",
                        placeholder: "host (optional)",
                        type: "text",
                        value: values.host,
                        onChange: handleChange,
                        onBlur: handleBlur,
                        autoComplete: "off",
                        error: touched.host && errors.host ? errors.host : false
                      }
                    ) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        type: "submit",
                        disabled: !isValid2 || isSubmitting,
                        children: "Restore"
                      }
                    )
                  ] })
                ] })
              }
            ),
            error && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "svg",
                {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "mask",
                      {
                        id: "mask0_594_13339",
                        maskUnits: "userSpaceOnUse",
                        x: "0",
                        y: "0",
                        width: "64",
                        height: "64",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_594_13339)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "path",
                      {
                        d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                        fill: "#F4F4F5"
                      }
                    ) })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Hmm.. something went wrong." }),
              typeof error === "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: error.includes("GZIP") ? "Invalid password." : error.includes("connectdata") ? "Host is invalid." : error.includes("Incorrect Password!") ? "Incorrect password!" : error }),
              typeof error === "object" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: JSON.stringify(error) })
            ] }),
            !!beginRestoring && !error && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col align-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Lottie,
                {
                  className: "mb-4 inline",
                  width: 4,
                  height: 4,
                  style: { maxWidth: 80, alignSelf: "center" },
                  animationData: Loading
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Restoring" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-8 text-center", children: [
                "Please don’t leave this screen whilst the chain is re-syncing.",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                " ",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                "Your node will shutdown once it is complete."
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Logs, {})
            ] })
          ] }),
          primary: null,
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            !beginRestoring && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                extraClass: "mt-4",
                onClick: () => setStep(2),
                children: "Cancel"
              }
            ),
            error && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                onClick: () => {
                  setError(false);
                  setBeginRestoring(false);
                },
                children: "Cancel"
              }
            )
          ] })
        }
      ),
      document.body
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { to: -1, title: "Back" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left", children: "Restore from backup" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast-2 p-4 rounded", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-6 text-left", children: [
            "Restoring a backup will wipe this node and import the private keys, coin proofs and chain state provided in the backup. ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            " Once restored, the node will attempt to sync to the latest block, please be patient."
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(1), children: "Restore" })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm password-label mr-4 ml-4", children: "Once the syncing process has finished, the node will shutdown. Restart the node for the restore to take effect." }) })
      ] })
    ] }) }),
    MDSShutdown && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          bg: "primary",
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-3 inline",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_1102_25908",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1102_25908)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 font-semibold text-center", children: "Restore complete" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium mb-6 mt-6 text-center", children: "Your node was successfully restored and will shutdown. Restart Minima for the restore to take effect." })
          ] }),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              onClick: () => {
                if (window.navigator.userAgent.includes("Minima Browser")) {
                  return Android.shutdownMinima();
                }
                return window.close();
              },
              children: "Close application"
            }
          )
        }
      ),
      document.body
    )
  ] });
};
const validationSchema$4 = create$3().shape({
  host: create$6(),
  file: create$8().required("Please select a (.bak) file").test("Test extension", function(val2) {
    const { path, createError } = this;
    const re2 = /(?:\.([^.]+))?$/;
    if (val2 === void 0 || val2 === null || val2.length === 0) {
      return createError({
        path: "file",
        message: "Please select a valid (.bak) file"
      });
    }
    if (val2 && val2.name && typeof val2.name === "string") {
      const extension = re2.exec(val2.name);
      if (extension && typeof extension[1] === "string" && extension[1] !== "bak") {
        return createError({
          path,
          message: "Please select a valid file extension type."
        });
      }
    }
    return true;
  }),
  password: create$6()
});
const validationSchema$3 = create$3().shape({
  host: create$6().required("Enter an archive node host")
});
const ChainResyncReset = () => {
  const {
    displayBackButton: displayHeaderBackButton,
    setBackButton,
    shuttingDown
  } = reactExports.useContext(appContext);
  const { archives, getArchives } = reactExports.useContext(appContext);
  const navigate = useNavigate();
  const [MDSShutdown, setMDSShutdown] = reactExports.useState(false);
  const [haveArchive, setHaveArchive] = reactExports.useState(false);
  const [noHaveArchive, setNoHaveArchive] = reactExports.useState(false);
  const [resetFileField, setResetFileField] = reactExports.useState(0);
  const [archiveFileSelection, setArchiveFileSelection] = reactExports.useState("local");
  const [beginResyncing, setBeginResyncing] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [progress, setProgress] = reactExports.useState(0);
  const [fileUpload, setFileUpload] = reactExports.useState(false);
  const [stepNo, setStepNo] = reactExports.useState(0);
  const [tooltip2, setTooltip] = reactExports.useState({ host: false });
  reactExports.useEffect(() => {
    if (shuttingDown) {
      setMDSShutdown(true);
    }
  }, [shuttingDown]);
  reactExports.useEffect(() => {
    setBackButton({
      display: true,
      onClickHandler: () => navigate("/dashboard/archivereset"),
      title: "Archive Reset"
    });
  }, []);
  const handleArchiveSelector = (event) => {
    setArchiveFileSelection(event.target.value);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    haveArchive && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Formik,
            {
              initialValues: {
                file: "",
                upload: null
              },
              onSubmit: async (formData) => {
                setBeginResyncing(true);
                try {
                  const { file: archivefilepath } = formData;
                  const fullPath = await getPath(archivefilepath);
                  await resetChainResync(fullPath).catch((error2) => {
                    throw new Error(error2);
                  });
                } catch (error2) {
                  setError(
                    error2 instanceof Error ? error2.message : "An unexpected error occurred"
                  );
                }
              },
              children: ({
                handleSubmit,
                setFieldValue,
                errors,
                values,
                handleBlur,
                isSubmitting,
                resetForm
              }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Select an archive" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-6 text-center", children: "Select a local archive or upload a new one" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative mb-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "select",
                    {
                      disabled: fileUpload,
                      defaultValue: archiveFileSelection,
                      onChange: (e3) => {
                        handleArchiveSelector(e3);
                        resetForm();
                      },
                      className: "p-4 bg-black hover:cursor-pointer rounded w-full hover:opacity-80",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("option", { id: "value", value: "local", children: "Select an internal archive file" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("option", { id: "split", value: "upload", children: "Upload an archive file" })
                      ]
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "svg",
                    {
                      className: "my-auto absolute right-2 top-[12px]",
                      width: "32",
                      height: "33",
                      viewBox: "0 0 32 33",
                      fill: "none",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "mask",
                          {
                            id: "mask0_2226_53255",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "32",
                            height: "33",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "rect",
                              {
                                y: "0.550781",
                                width: "32",
                                height: "32",
                                fill: "#D9D9D9"
                              }
                            )
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_2226_53255)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "path",
                          {
                            d: "M16.0004 20.6172L8.4668 13.0508L9.6668 11.8844L16.0004 18.2172L22.334 11.8844L23.534 13.0844L16.0004 20.6172Z",
                            fill: "#FaFaFF"
                          }
                        ) })
                      ]
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  archiveFileSelection === "local" && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      List,
                      {
                        disabled: archives.length === 0,
                        options: archives,
                        setForm: async (option) => {
                          if (option.length) {
                            setFieldValue("file", "/archives/" + option);
                          }
                        }
                      }
                    ),
                    archives.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm mt-2 text-good", children: "No archives found in your internal files. Upload a new one!" })
                  ] }),
                  !fileUpload && archiveFileSelection === "upload" && !values.file.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    FileChooser,
                    {
                      disabled: isSubmitting,
                      keyValue: resetFileField,
                      handleEndIconClick: () => {
                        setResetFileField((prev) => prev + 1);
                        setFieldValue("upload", void 0);
                      },
                      error: errors.upload && errors.upload ? errors.upload : false,
                      extraClass: "core-grey-20",
                      accept: ".gzip,.dat",
                      onChange: (e3) => {
                        if (e3.target.files) {
                          setFieldValue("upload", e3.target.files[0]);
                        }
                      },
                      onBlur: handleBlur,
                      placeholder: "Select file",
                      type: "file",
                      id: "upload",
                      name: "upload",
                      endIcon: values.upload && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "svg",
                        {
                          xmlns: "http://www.w3.org/2000/svg",
                          width: "25",
                          height: "24",
                          viewBox: "0 0 25 24",
                          fill: "none",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "mask",
                              {
                                id: "mask0_645_17003",
                                maskUnits: "userSpaceOnUse",
                                x: "0",
                                y: "0",
                                width: "25",
                                height: "24",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "rect",
                                  {
                                    x: "0.5",
                                    width: "24",
                                    height: "24",
                                    fill: "#D9D9D9"
                                  }
                                )
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_645_17003)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "path",
                              {
                                d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                fill: "#91919D"
                              }
                            ) })
                          ]
                        }
                      )
                    }
                  ),
                  fileUpload && archiveFileSelection === "upload" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast-2 h-[56px] rounded p-4 mt-4 relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black", children: [
                      (Number(progress) * 100).toFixed(0),
                      "%"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "div",
                      {
                        className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                        style: {
                          transform: `scaleX(${progress})`,
                          left: "-1px",
                          top: "-2px",
                          width: "calc(100% + 1px)"
                        }
                      }
                    )
                  ] }),
                  fileUpload && values.upload && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm mt-2", children: [
                    "Uploading",
                    " ",
                    values.upload.name ? values.upload.name + "..." : ""
                  ] }),
                  !fileUpload && !!values.file.length && archiveFileSelection === "upload" && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-good flex items-center mt-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        height: "24",
                        viewBox: "0 -960 960 960",
                        width: "24",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "path",
                          {
                            fill: "#4FE3C1",
                            d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                          }
                        )
                      }
                    ),
                    values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]
                  ] }),
                  values.upload && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: !fileUpload && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      variant: "primary",
                      extraClass: "mt-4",
                      onClick: async () => {
                        setFileUpload(true);
                        setFieldValue("file", "");
                        window.MDS.file.upload(
                          values.upload,
                          async function(resp) {
                            if (resp.allchunks >= 10) {
                              setProgress(
                                resp.chunk / resp.allchunks
                              );
                            }
                            const fileName = resp.filename;
                            if (resp.allchunks === resp.chunk) {
                              setFileUpload(false);
                              window.MDS.file.move(
                                "/fileupload/" + fileName,
                                "/archives/" + fileName,
                                (resp2) => {
                                  if (resp2.status) {
                                    setFieldValue(
                                      "file",
                                      "/archives/" + fileName
                                    );
                                    setFieldValue(
                                      "upload",
                                      void 0
                                    );
                                    setFileUpload(false);
                                    getArchives();
                                  }
                                }
                              );
                            }
                          }
                        );
                      },
                      children: "Upload"
                    }
                  ) }),
                  values.file && values.file.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "submit",
                      variant: "primary",
                      extraClass: "mt-4",
                      children: "Continue"
                    }
                  ),
                  !fileUpload && archiveFileSelection === "upload" && !!values.file.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      onClick: () => setFieldValue("file", ""),
                      variant: "tertiary",
                      extraClass: "mt-4",
                      children: "Upload a different file"
                    }
                  )
                ] })
              ] })
            }
          ) }),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            error && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                onClick: () => {
                  setError(false);
                  setBeginResyncing(false);
                },
                children: "Cancel"
              }
            ),
            !fileUpload && !error && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                extraClass: "mt-4",
                onClick: () => {
                  setHaveArchive(false);
                },
                children: "Cancel"
              }
            )
          ] })
        }
      ),
      document.body
    ),
    noHaveArchive && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Formik,
            {
              validationSchema: validationSchema$3,
              initialValues: {
                host: ""
              },
              onSubmit: async (formData) => {
                setBeginResyncing(true);
                const { host: host2 } = formData;
                window.MDS.cmd(
                  `archive action:resync host:"${host2}"`,
                  (response) => {
                    if (!response.status) {
                      setError(response.error);
                    }
                  }
                );
              },
              children: ({
                handleSubmit,
                values,
                handleChange,
                handleBlur,
                isSubmitting,
                isValid: isValid2,
                errors
              }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, children: [
                stepNo === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(FadeIn, { delay: 0, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Re-sync your node?" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-6 text-center", children: [
                    "The full chain will be downloaded from your chosen archive node. ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                    "This action is irreversible, consider taking a backup before starting re-sync. ",
                    /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                    "This process should take up to 2 hours to complete but could take longer. Please connect your device to a power source before continuing."
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      variant: "primary",
                      type: "submit",
                      onClick: () => setStepNo(1),
                      children: "Continue"
                    }
                  )
                ] }),
                stepNo === 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs(FadeIn, { delay: 0, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "svg",
                      {
                        className: "mb-2",
                        width: "64",
                        height: "64",
                        viewBox: "0 0 64 64",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "mask",
                            {
                              id: "mask0_1607_21111",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "64",
                              height: "64",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1607_21111)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "path",
                            {
                              d: "M31.9993 44.6146C32.6096 44.6146 33.1211 44.4082 33.5339 43.9954C33.9467 43.5826 34.1531 43.071 34.1531 42.4608C34.1531 41.8506 33.9467 41.339 33.5339 40.9262C33.1211 40.5134 32.6096 40.307 31.9993 40.307C31.389 40.307 30.8775 40.5134 30.4647 40.9262C30.0519 41.339 29.8455 41.8506 29.8455 42.4608C29.8455 43.071 30.0519 43.5826 30.4647 43.9954C30.8775 44.4082 31.389 44.6146 31.9993 44.6146ZM29.9994 34.8711H33.9992V18.8711H29.9994V34.8711ZM32.0037 57.3326C28.4999 57.3326 25.2065 56.6677 22.1235 55.3379C19.0404 54.0081 16.3586 52.2034 14.078 49.9239C11.7974 47.6443 9.99191 44.9636 8.66155 41.882C7.33119 38.8003 6.66602 35.5076 6.66602 32.0038C6.66602 28.4999 7.3309 25.2065 8.66068 22.1235C9.99046 19.0404 11.7951 16.3586 14.0747 14.078C16.3543 11.7974 19.0349 9.99191 22.1166 8.66155C25.1983 7.3312 28.491 6.66602 31.9948 6.66602C35.4986 6.66602 38.7921 7.33091 41.8751 8.66069C44.9582 9.99046 47.64 11.7951 49.9206 14.0747C52.2012 16.3543 54.0067 19.0349 55.337 22.1166C56.6674 25.1983 57.3326 28.491 57.3326 31.9948C57.3326 35.4986 56.6677 38.7921 55.3379 41.8751C54.0081 44.9582 52.2034 47.64 49.9239 49.9206C47.6443 52.2012 44.9636 54.0067 41.882 55.337C38.8003 56.6674 35.5076 57.3326 32.0037 57.3326Z",
                              fill: "#F4F4F5"
                            }
                          ) })
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Restore without archive file" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-6 text-center", children: [
                      "Restoring without an archive file can take much longer to re-sync the chain. ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                      " Please ensure you have a stable internet connection and plug your device into a power source before continuing."
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      variant: "primary",
                      type: "submit",
                      onClick: () => setStepNo(2),
                      children: "Continue"
                    }
                  )
                ] }),
                stepNo === 2 && /* @__PURE__ */ jsxRuntimeExports.jsxs(FadeIn, { delay: 0, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Enter your archive host" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-4 rounded", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "mb-2 flex gap-2 items-center", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: "Archive node host" }),
                      !tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "img",
                        {
                          className: "w-4 h-4",
                          onClick: () => setTooltip({ ...tooltip2, host: true }),
                          alt: "tooltip",
                          src: "./assets/help_filled.svg"
                        }
                      ),
                      !!tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "img",
                        {
                          className: "w-4 h-4",
                          onClick: () => setTooltip({ ...tooltip2, host: false }),
                          alt: "tooltip-dismiss",
                          src: "./assets/cancel_filled.svg"
                        }
                      )
                    ] }),
                    tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Tooltip,
                      {
                        extraClass: "!mb-0 !mt-0 !mb-4",
                        onClick: () => setTooltip({ ...tooltip2, host: false }),
                        content: "Enter an ip:port of the archive node to sync from.",
                        position: 148
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Input,
                      {
                        disabled: isSubmitting,
                        extraClass: "",
                        id: "host",
                        name: "host",
                        placeholder: "host",
                        type: "text",
                        value: values.host,
                        onChange: handleChange,
                        onBlur: handleBlur,
                        autoComplete: "off",
                        error: errors && errors.host ? errors.host : false
                      }
                    ) })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      disabled: !isValid2 || isSubmitting,
                      variant: "primary",
                      type: "submit",
                      children: "Re-sync"
                    }
                  )
                ] })
              ] })
            }
          ) }),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              extraClass: "mt-4",
              variant: "tertiary",
              onClick: () => {
                {
                  stepNo === 0 ? setNoHaveArchive(false) : setStepNo(0);
                }
              },
              children: "Cancel"
            }
          ) })
        }
      ),
      document.body
    ),
    error && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-3 inline",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_594_13339",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_594_13339)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Hmm.. something went wrong." }),
            typeof error === "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: typeof error.includes !== "undefined" && error.toString().includes("GZIP") ? "Invalid password." : typeof error.includes !== "undefined" && error.toString().includes("connectdata") ? "Host is invalid." : typeof error.includes !== "undefined" && error.toString().includes("Incorrect Password!") ? "Incorrect password!" : error.toString() }),
            typeof error === "object" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: JSON.stringify(error) })
          ] }),
          primary: null,
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              onClick: () => {
                setError(false);
                setBeginResyncing(false);
              },
              children: "Cancel"
            }
          )
        }
      ),
      document.body
    ),
    beginResyncing && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          size: "lg",
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col align-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Lottie,
              {
                className: "mb-4 inline",
                width: 4,
                height: 4,
                style: { maxWidth: 80, alignSelf: "center" },
                animationData: Loading
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Re-syncing" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-8 text-center", children: [
              "Please don’t leave this screen whilst the chain is re-syncing.",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "Your node will shutdown when it is complete."
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Logs, {})
          ] }),
          primary: null,
          secondary: null
        }
      ),
      document.body
    ),
    MDSShutdown && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          bg: "primary",
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-3 inline",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_1102_25908",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1102_25908)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 font-semibold text-center", children: "Re-sync complete" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium mb-6 mt-6 text-center", children: "Your node was successfully re-synced and will shutdown. Restart Minima for the re-sync to take effect." })
          ] }),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              onClick: () => {
                if (window.navigator.userAgent.includes("Minima Browser")) {
                  return Android.shutdownMinima();
                }
                return window.close();
              },
              children: "Close application"
            }
          )
        }
      ),
      document.body
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { isOpen: true, delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(
        BackButton,
        {
          onClickHandler: () => navigate("/dashboard/archivereset"),
          title: "Archive Reset"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left", children: "Chain re-sync" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 text-left", children: [
        "If your node is on the wrong chain or has been offline for a long time, you can re-sync all blocks from an archive file.",
        " ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " Before doing a chain re-sync, you can attempt to get back in sync with the chain by:",
        /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "list-disc list-inside mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "pt-4 pl-2.5", children: "Shutting down your node from Settings and restarting it (please allow 10-15 minutes for the node to sync)" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "pl-2.5", children: "Checking your internet connection is stable" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "pl-2.5", children: "Checking the battery settings for the Minima app to ensure it is allowed to run in the background" })
        ] }),
        "The archive file will be used to sync your node to the chain's top block and must be recently extracted from an archive node."
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-left flex gap-2 mb-8", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "svg",
          {
            className: "flex-none w-7",
            xmlns: "http://www.w3.org/2000/svg",
            width: "48",
            height: "24",
            viewBox: "0 0 24 24",
            fill: "none",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "8", fill: "#08090B" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "mask",
                {
                  id: "mask0_1607_18879",
                  maskUnits: "userSpaceOnUse",
                  x: "0",
                  y: "0",
                  width: "24",
                  height: "24",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "24", height: "24", fill: "#D9D9D9" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1607_18879)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "path",
                {
                  d: "M12 16.7307C12.2288 16.7307 12.4207 16.6533 12.5755 16.4985C12.7303 16.3437 12.8077 16.1519 12.8077 15.9231C12.8077 15.6942 12.7303 15.5024 12.5755 15.3476C12.4207 15.1928 12.2288 15.1154 12 15.1154C11.7711 15.1154 11.5793 15.1928 11.4245 15.3476C11.2697 15.5024 11.1923 15.6942 11.1923 15.9231C11.1923 16.1519 11.2697 16.3437 11.4245 16.4985C11.5793 16.6533 11.7711 16.7307 12 16.7307ZM11.25 13.0769H12.75V7.0769H11.25V13.0769ZM12.0017 21.5C10.6877 21.5 9.45268 21.2506 8.29655 20.752C7.1404 20.2533 6.13472 19.5765 5.2795 18.7217C4.42427 17.8669 3.74721 16.8616 3.24833 15.706C2.74944 14.5504 2.5 13.3156 2.5 12.0017C2.5 10.6877 2.74933 9.45268 3.248 8.29655C3.74667 7.1404 4.42342 6.13472 5.27825 5.2795C6.1331 4.42427 7.13834 3.74721 8.29398 3.24833C9.44959 2.74944 10.6844 2.5 11.9983 2.5C13.3122 2.5 14.5473 2.74933 15.7034 3.248C16.8596 3.74667 17.8652 4.42342 18.7205 5.27825C19.5757 6.1331 20.2527 7.13834 20.7516 8.29398C21.2505 9.44959 21.5 10.6844 21.5 11.9983C21.5 13.3122 21.2506 14.5473 20.752 15.7034C20.2533 16.8596 19.5765 17.8652 18.7217 18.7205C17.8669 19.5757 16.8616 20.2527 15.706 20.7516C14.5504 21.2505 13.3156 21.5 12.0017 21.5Z",
                  fill: "#E9E9EB"
                }
              ) })
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm password-label", children: [
          "If you don't have an archive file, you can visit the archive file channel on our Discord server",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { target: "_blank", href: "https://discord.com/invite/minima", children: "https://discord.com/invite/minima" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { extraClass: "mb-4", onClick: () => setHaveArchive(true), children: "I have an archive file" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "tertiary", onClick: () => setNoHaveArchive(true), children: "I don't have an archive file" })
    ] }) }) })
  ] });
};
const styles$4 = {
  "seed-phrase-list": "_seed-phrase-list_1olpg_1"
};
const useLongPress = (onLongPress, onClick, onFinish, { shouldPreventDefault = true, delay = 300 } = {}) => {
  const [longPressTriggered, setLongPressTriggered] = reactExports.useState(false);
  const timeout = reactExports.useRef();
  const target = reactExports.useRef();
  const start2 = reactExports.useCallback(
    (event) => {
      if (shouldPreventDefault && event.target) {
        event.target.addEventListener("touchend", preventDefault, {
          passive: false
        });
        target.current = event.target;
      }
      timeout.current = setTimeout(() => {
        onLongPress(event);
        setLongPressTriggered(true);
      }, delay);
    },
    [onLongPress, delay, shouldPreventDefault]
  );
  const clear = reactExports.useCallback(
    (shouldTriggerClick = true) => {
      onFinish();
      timeout.current && clearTimeout(timeout.current);
      shouldTriggerClick && !longPressTriggered && onClick();
      setLongPressTriggered(false);
      if (shouldPreventDefault && target.current) {
        target.current.removeEventListener("touchend", preventDefault);
      }
    },
    [shouldPreventDefault, onClick, longPressTriggered]
  );
  return {
    onMouseDown: (e3) => start2(e3),
    onTouchStart: (e3) => start2(e3),
    onMouseUp: (e3) => clear(e3),
    onMouseLeave: () => clear(false),
    onTouchEnd: (e3) => clear(e3)
  };
};
const isTouchEvent = (event) => {
  return "touches" in event;
};
const preventDefault = (event) => {
  if (!isTouchEvent(event))
    return;
  if (event.touches.length < 2 && event.preventDefault) {
    event.preventDefault();
  }
};
const ViewSeedPhrase = () => {
  const location = useLocation();
  const {
    phraseAsArray,
    setBackButton,
    displayBackButton: displayHeaderBackButton
  } = reactExports.useContext(appContext);
  const [hide, setHideSeedPhrase] = reactExports.useState(true);
  const onLongPress = () => {
    setHideSeedPhrase(false);
  };
  reactExports.useEffect(() => {
    setBackButton({
      display: true,
      to: "/dashboard/manageseedphrase",
      title: "Back"
    });
  }, [location]);
  const defaultOptions2 = {
    shouldPreventDefault: true,
    delay: 500
  };
  const longPressEvent = useLongPress(
    onLongPress,
    defaultOptions2,
    () => setHideSeedPhrase(true)
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full flex flex-col justify-between px-4 pb-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { to: "/dashboard/manageseedphrase", title: "Back" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left bg-inherit", children: "Your seed phrase" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: styles$4["seed-phrase-list"], children: phraseAsArray.map((p2, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: index2 + 1 }),
        !hide ? p2.toUpperCase() : ""
      ] }, index2)) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Button,
        {
          ...longPressEvent,
          extraClass: `desktop-only p-16 flex gap-2 items-center justify-center mt-8 ${!hide ? "core-black-contrast core-grey-contrast-3" : ""}`,
          children: [
            "Hold to view",
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                width: "21",
                height: "20",
                viewBox: "0 0 21 20",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_1102_25545",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "21",
                      height: "20",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "rect",
                        {
                          x: "0.5",
                          width: "20",
                          height: "20",
                          fill: hide ? "#D9D9D9" : "#464C4F"
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1102_25545)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M10.5 13.5C11.472 13.5 12.2983 13.1597 12.979 12.479C13.6597 11.7983 14 10.972 14 10C14 9.028 13.6597 8.20167 12.979 7.521C12.2983 6.84033 11.472 6.5 10.5 6.5C9.528 6.5 8.70167 6.84033 8.021 7.521C7.34033 8.20167 7 9.028 7 10C7 10.972 7.34033 11.7983 8.021 12.479C8.70167 13.1597 9.528 13.5 10.5 13.5ZM10.5 12C9.94467 12 9.47233 11.8057 9.083 11.417C8.69433 11.0277 8.5 10.5553 8.5 10C8.5 9.44467 8.69433 8.97233 9.083 8.583C9.47233 8.19433 9.94467 8 10.5 8C11.0553 8 11.5277 8.19433 11.917 8.583C12.3057 8.97233 12.5 9.44467 12.5 10C12.5 10.5553 12.3057 11.0277 11.917 11.417C11.5277 11.8057 11.0553 12 10.5 12ZM10.5 16C8.514 16 6.70833 15.455 5.083 14.365C3.45833 13.2743 2.264 11.8193 1.5 10C2.264 8.18067 3.45833 6.72567 5.083 5.635C6.70833 4.545 8.514 4 10.5 4C12.486 4 14.2917 4.545 15.917 5.635C17.5417 6.72567 18.736 8.18067 19.5 10C18.736 11.8193 17.5417 13.2743 15.917 14.365C14.2917 15.455 12.486 16 10.5 16ZM10.5 14.5C12.0553 14.5 13.4927 14.0973 14.812 13.292C16.132 12.486 17.146 11.3887 17.854 10C17.146 8.61133 16.132 7.514 14.812 6.708C13.4927 5.90267 12.0553 5.5 10.5 5.5C8.94467 5.5 7.50733 5.90267 6.188 6.708C4.868 7.514 3.854 8.61133 3.146 10C3.854 11.3887 4.868 12.486 6.188 13.292C7.50733 14.0973 8.94467 14.5 10.5 14.5Z",
                      fill: hide ? "#08090B" : "#464C4F"
                    }
                  ) })
                ]
              }
            )
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Button,
      {
        onTouchStart: () => setHideSeedPhrase(false),
        onTouchEnd: () => setHideSeedPhrase(true),
        extraClass: `mobile-only p-16 flex gap-2 items-center justify-center mb-8 mt-4 ${!hide ? "core-black-contrast core-grey-contrast-3" : ""}`,
        children: [
          "Hold to view",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "svg",
            {
              width: "21",
              height: "20",
              viewBox: "0 0 21 20",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "mask",
                  {
                    id: "mask0_1102_25545",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "21",
                    height: "20",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "rect",
                      {
                        x: "0.5",
                        width: "20",
                        height: "20",
                        fill: hide ? "#D9D9D9" : "#464C4F"
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1102_25545)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M10.5 13.5C11.472 13.5 12.2983 13.1597 12.979 12.479C13.6597 11.7983 14 10.972 14 10C14 9.028 13.6597 8.20167 12.979 7.521C12.2983 6.84033 11.472 6.5 10.5 6.5C9.528 6.5 8.70167 6.84033 8.021 7.521C7.34033 8.20167 7 9.028 7 10C7 10.972 7.34033 11.7983 8.021 12.479C8.70167 13.1597 9.528 13.5 10.5 13.5ZM10.5 12C9.94467 12 9.47233 11.8057 9.083 11.417C8.69433 11.0277 8.5 10.5553 8.5 10C8.5 9.44467 8.69433 8.97233 9.083 8.583C9.47233 8.19433 9.94467 8 10.5 8C11.0553 8 11.5277 8.19433 11.917 8.583C12.3057 8.97233 12.5 9.44467 12.5 10C12.5 10.5553 12.3057 11.0277 11.917 11.417C11.5277 11.8057 11.0553 12 10.5 12ZM10.5 16C8.514 16 6.70833 15.455 5.083 14.365C3.45833 13.2743 2.264 11.8193 1.5 10C2.264 8.18067 3.45833 6.72567 5.083 5.635C6.70833 4.545 8.514 4 10.5 4C12.486 4 14.2917 4.545 15.917 5.635C17.5417 6.72567 18.736 8.18067 19.5 10C18.736 11.8193 17.5417 13.2743 15.917 14.365C14.2917 15.455 12.486 16 10.5 16ZM10.5 14.5C12.0553 14.5 13.4927 14.0973 14.812 13.292C16.132 12.486 17.146 11.3887 17.854 10C17.146 8.61133 16.132 7.514 14.812 6.708C13.4927 5.90267 12.0553 5.5 10.5 5.5C8.94467 5.5 7.50733 5.90267 6.188 6.708C4.868 7.514 3.854 8.61133 3.146 10C3.854 11.3887 4.868 12.486 6.188 13.292C7.50733 14.0973 8.94467 14.5 10.5 14.5Z",
                    fill: hide ? "#08090B" : "#464C4F"
                  }
                ) })
              ]
            }
          )
        ]
      }
    )
  ] });
};
const Authorisation = ({ permissions }) => {
  const { permissions: userPermissions } = useAuth();
  const isAllowed = permissions.some(
    (allowed) => userPermissions.includes(allowed)
  );
  return isAllowed ? /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/dashboard", replace: true });
};
const RightArrow = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "svg",
    {
      width: "8",
      height: "12",
      viewBox: "0 0 8 12",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
          fill: "currentColor"
        }
      )
    }
  );
};
const HomeScreenNavigation = ({ extraClass, location, children, icon, handleClick }) => {
  const navigate = useNavigate();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "div",
    {
      onClick: () => location ? navigate(location) : handleClick ? handleClick() : null,
      className: `bg-[#1B1B1B] p-4 rounded grid grid-cols-[1fr_auto] cursor-pointer ${extraClass && extraClass}`,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm tracking-wide opacity-80 font-bold", children }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "my-auto", children: [
          !icon && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-300", children: /* @__PURE__ */ jsxRuntimeExports.jsx(RightArrow, {}) }),
          icon && icon
        ] })
      ]
    }
  );
};
const Locked = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "16",
      height: "16",
      viewBox: "0 0 24 24",
      fill: "currentColor",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "mask",
          {
            id: "mask0_583_16035",
            maskUnits: "userSpaceOnUse",
            x: "0",
            y: "0",
            width: "24",
            height: "24",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "24", height: "24", fill: "currentColor" })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_583_16035)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "path",
          {
            d: "M6.3077 21.4999C5.81058 21.4999 5.38502 21.3229 5.03102 20.9689C4.67701 20.6149 4.5 20.1893 4.5 19.6922V10.3077C4.5 9.81053 4.67701 9.38498 5.03102 9.03098C5.38502 8.67696 5.81058 8.49995 6.3077 8.49995H7.5V6.49995C7.5 5.25125 7.93782 4.18908 8.81345 3.31345C9.6891 2.43782 10.7513 2 12 2C13.2487 2 14.3108 2.43782 15.1865 3.31345C16.0621 4.18908 16.5 5.25125 16.5 6.49995V8.49995H17.6922C18.1894 8.49995 18.6149 8.67696 18.9689 9.03098C19.3229 9.38498 19.5 9.81053 19.5 10.3077V19.6922C19.5 20.1893 19.3229 20.6149 18.9689 20.9689C18.6149 21.3229 18.1894 21.4999 17.6922 21.4999H6.3077ZM12 16.7499C12.4859 16.7499 12.899 16.5797 13.2394 16.2393C13.5798 15.899 13.75 15.4858 13.75 14.9999C13.75 14.514 13.5798 14.1009 13.2394 13.7605C12.899 13.4201 12.4859 13.25 12 13.25C11.5141 13.25 11.1009 13.4201 10.7606 13.7605C10.4202 14.1009 10.25 14.514 10.25 14.9999C10.25 15.4858 10.4202 15.899 10.7606 16.2393C11.1009 16.5797 11.5141 16.7499 12 16.7499ZM8.99997 8.49995H15V6.49995C15 5.66662 14.7083 4.95828 14.125 4.37495C13.5416 3.79162 12.8333 3.49995 12 3.49995C11.1666 3.49995 10.4583 3.79162 9.87497 4.37495C9.29164 4.95828 8.99997 5.66662 8.99997 6.49995V8.49995Z",
            fill: "currentColor"
          }
        ) })
      ]
    }
  );
};
const Unlocked = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "svg",
    {
      className: "ml-2",
      xmlns: "http://www.w3.org/2000/svg",
      width: "16",
      height: "20",
      viewBox: "0 0 16 20",
      fill: "currentColor",
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          d: "M2.3 6.5H11V4.5C11 3.66667 10.7083 2.95833 10.125 2.375C9.54167 1.79167 8.83333 1.5 8 1.5C7.16667 1.5 6.45833 1.79167 5.875 2.375C5.29167 2.95833 5 3.66667 5 4.5H3.5C3.5 3.25 3.93733 2.18733 4.812 1.312C5.68733 0.437333 6.75 0 8 0C9.25 0 10.3127 0.437333 11.188 1.312C12.0627 2.18733 12.5 3.25 12.5 4.5V6.5H13.7C14.2 6.5 14.625 6.675 14.975 7.025C15.325 7.375 15.5 7.8 15.5 8.3V17.7C15.5 18.2 15.325 18.625 14.975 18.975C14.625 19.325 14.2 19.5 13.7 19.5H2.3C1.8 19.5 1.375 19.325 1.025 18.975C0.675 18.625 0.5 18.2 0.5 17.7V8.3C0.5 7.8 0.675 7.375 1.025 7.025C1.375 6.675 1.8 6.5 2.3 6.5ZM8 14.75C8.48333 14.75 8.896 14.5793 9.238 14.238C9.57933 13.896 9.75 13.4833 9.75 13C9.75 12.5167 9.57933 12.104 9.238 11.762C8.896 11.4207 8.48333 11.25 8 11.25C7.51667 11.25 7.104 11.4207 6.762 11.762C6.42067 12.104 6.25 12.5167 6.25 13C6.25 13.4833 6.42067 13.896 6.762 14.238C7.104 14.5793 7.51667 14.75 8 14.75Z",
          fill: "currentColor"
        }
      )
    }
  );
};
function Security() {
  const { vaultLocked, setBackButton } = reactExports.useContext(appContext);
  reactExports.useEffect(() => {
    setBackButton({ display: false, to: "/dashboard", title: "Security" });
  }, [setBackButton]);
  const VAULT_LOCKED = vaultLocked !== null && vaultLocked;
  const VAULT_UNLOCKED = vaultLocked !== null && !vaultLocked;
  const VAULT_STATUS_UNDEFINED = vaultLocked === null;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-w-md mx-auto w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "my-3 flex flex-col gap-2 mx-3 md:mx-0", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      HomeScreenNavigation,
      {
        extraClass: "bg-black border border-[#1B1B1B] cursor-default",
        icon: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          !!VAULT_LOCKED && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] items-center text-teal-300", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm tracking-tighter font-bold pr-1 my-auto", children: "LOCKED" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Locked, {})
          ] }),
          !!VAULT_UNLOCKED && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] items-center text-red-300", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm tracking-tighter font-bold pr-1 my-auto", children: "UNLOCKED" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Unlocked, {})
          ] }),
          !!VAULT_STATUS_UNDEFINED && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "my-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            RefreshIcon,
            {
              extraClass: "animate-spin w-[20px]",
              fill: "currentColor"
            }
          ) })
        ] }),
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Node status" })
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(HomeScreenNavigation, { location: "lockprivatekeys", children: !vaultLocked ? "Lock private keys" : "Unlock private keys" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(HomeScreenNavigation, { location: "backup", children: "Backup node" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(HomeScreenNavigation, { location: "quicksync", children: "Restore node" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(HomeScreenNavigation, { location: "manageseedphrase", children: "Manage seed phrase" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto_1fr] items-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("hr", { className: "border-gray-500 w-full" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mx-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-violet-400", children: "Legacy" }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("hr", { className: "border-gray-500 w-full" })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(HomeScreenNavigation, { location: "restore", children: "Restore from backup" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(HomeScreenNavigation, { location: "archivereset", children: "Archive reset" })
  ] }) }) });
}
const dialog$2 = "_dialog_am9c7_1";
const button__wrapper$2 = "_button__wrapper_am9c7_16";
const primaryActions$2 = "_primaryActions_am9c7_20";
const secondaryActions$2 = "_secondaryActions_am9c7_41";
const desktop_only$2 = "_desktop_only_am9c7_62";
const mobile_only$2 = "_mobile_only_am9c7_65";
const styles$3 = {
  dialog: dialog$2,
  button__wrapper: button__wrapper$2,
  primaryActions: primaryActions$2,
  secondaryActions: secondaryActions$2,
  desktop_only: desktop_only$2,
  mobile_only: mobile_only$2
};
const Dialog = () => {
  const { modal } = reactExports.useContext(appContext);
  const location = useLocation();
  const [error, setError] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (location.state && location.state.hasOwnPropery("error")) {
      setError(location.state.error);
    }
  }, [location]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$3["dialog"], children: [
      modal.content,
      modal.primaryActions && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-3", children: [
        !!error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left", children: error }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${styles$3.primaryActions}`, children: modal.primaryActions }),
        modal.secondaryActions && /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: `${styles$3.desktop_only} ${styles$3.secondaryActions}`,
            children: modal.secondaryActions
          }
        )
      ] })
    ] }),
    modal.secondaryActions && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${styles$3.mobile_only} ${styles$3.secondaryActions}`, children: modal.secondaryActions })
  ] });
};
const validationSchema$2 = create$3().shape({
  password: create$6().matches(/^[~!@#=?+<>,._'/()?a-zA-Z0-9-]+$/, "Invalid character").min(12, "Password must be at least 12 characters long"),
  confirmPassword: create$6().test("matchy-passwords", function(val2) {
    const { path, parent: parent2, createError } = this;
    if (parent2.password === void 0) {
      return true;
    }
    if (val2 === void 0 && parent2.password !== void 0) {
      return createError({ path, message: "Please re-enter your password" });
    }
    const pwd = parent2.password;
    const matching = pwd === val2;
    if (matching) {
      return true;
    }
    return createError({ path, message: "Passwords do not match" });
  })
});
const AutoCreatePassword = () => {
  const navigate = useNavigate();
  const [hidePassword, togglePasswordVisibility] = reactExports.useState(false);
  const [hideConfirmPassword, toggleConfirmPasswordVisiblity] = reactExports.useState(false);
  const {
    displayBackButton: displayHeaderBackButton,
    setBackButton,
    setModal
  } = reactExports.useContext(appContext);
  const { authNavigate } = useAuth();
  reactExports.useEffect(() => {
    return setBackButton({
      display: true,
      to: "/dashboard/backup",
      title: "Back"
    });
  }, []);
  const formik = useFormik({
    initialValues: {
      password: "",
      confirmPassword: ""
    },
    onSubmit: async (formData) => {
      window.MDS.keypair.set("autopassword", formData.password);
      await toggleBackupStatus(true);
      authNavigate("/dashboard/modal", PERMISSIONS.CAN_VIEW_MODAL);
      setModal({
        content: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex text-center flex-col items-center justify-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "svg",
            {
              className: "mb-3 inline",
              width: "64",
              height: "64",
              viewBox: "0 0 64 64",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "mask",
                  {
                    id: "mask0_1102_25908",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "64",
                    height: "64",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1102_25908)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                    fill: "#F4F4F5"
                  }
                ) })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 font-semibold", children: "Auto-backup activated" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "font-medium mb-6 mt-6", children: [
            "Auto backups will be taken every 24 hours. ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            "Only the most recent 14 backups will be stored (including manual backups), so you should download and move them to an offline device. The password provided will be required if you need to restore the backup."
          ] })
        ] }),
        primaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
        secondaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "tertiary",
            onClick: () => {
              authNavigate("dashboard/backup", []);
            },
            children: "Close"
          }
        )
      });
    },
    validationSchema: validationSchema$2
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
    !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(
      BackButton,
      {
        onClickHandler: () => navigate("/dashboard/backup"),
        title: "Back"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left", children: "Create password" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-5", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3", children: [
        "Create a password to protect your backups, you will be required to enter this password if you need to restore from an auto-backup. ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        "This is not the same as the password used to lock your private keys."
      ] }) }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "core-black-contrast-2 p-4 rounded flex flex-col gap-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "form",
        {
          autoComplete: "off",
          onSubmit: formik.handleSubmit,
          className: "flex flex-col gap-4",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Input,
              {
                disabled: formik.isSubmitting,
                extraClass: "core-black-contrast",
                autoComplete: "new-password",
                handleEndIconClick: () => togglePasswordVisibility((prevState) => !prevState),
                type: !hidePassword ? "password" : "text",
                placeholder: "Enter password",
                name: "password",
                id: "password",
                error: formik.errors.password,
                value: formik.values.password,
                onChange: formik.handleChange,
                onBlur: formik.handleBlur,
                endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hidePassword })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Input,
              {
                disabled: formik.isSubmitting,
                extraClass: "core-black-contrast",
                autoComplete: "new-password",
                handleEndIconClick: () => toggleConfirmPasswordVisiblity((prevState) => !prevState),
                type: !hideConfirmPassword ? "password" : "text",
                placeholder: "Confirm password",
                name: "confirmPassword",
                id: "confirmPassword",
                error: formik.errors.confirmPassword,
                value: formik.values.confirmPassword,
                onChange: formik.handleChange,
                onBlur: formik.handleBlur,
                endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: hideConfirmPassword })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { type: "submit", disabled: !formik.isValid, children: "Turn on auto-backup" }) })
          ]
        }
      ) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm password-label mr-4 ml-4", children: [
        "Enter a password over 12 characters using a-z, A-Z, 0-9 and",
        " ",
        "!@#=?+<>,.-_'()/",
        " symbols only. ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        "Your password cannot contain spaces. ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " Please make sure you save this password somewhere safe, it cannot be recovered if lost."
      ] }) })
    ] })
  ] }) });
};
const dialog$1 = "_dialog_am9c7_1";
const button__wrapper$1 = "_button__wrapper_am9c7_16";
const primaryActions$1 = "_primaryActions_am9c7_20";
const secondaryActions$1 = "_secondaryActions_am9c7_41";
const desktop_only$1 = "_desktop_only_am9c7_62";
const mobile_only$1 = "_mobile_only_am9c7_65";
const styles$2 = {
  dialog: dialog$1,
  button__wrapper: button__wrapper$1,
  primaryActions: primaryActions$1,
  secondaryActions: secondaryActions$1,
  desktop_only: desktop_only$1,
  mobile_only: mobile_only$1
};
const DeleteArchive = () => {
  const location = useLocation();
  const [error, setError] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const { getBackups } = reactExports.useContext(appContext);
  const { authNavigate } = useAuth();
  const handleClick = async () => {
    setLoading(true);
    await deleteFile("/archives/" + location.state.backup.name).then(() => {
      getBackups();
      authNavigate("/dashboard/archivereset/archives", []);
    }).catch((error2) => {
      setTimeout(() => setLoading(false), 1500);
      setError(error2);
    });
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles$2["dialog"], children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            className: "inline mb-2",
            xmlns: "http://www.w3.org/2000/svg",
            width: "64",
            height: "65",
            viewBox: "0 0 64 65",
            fill: "none",
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("g", { id: "delete", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "mask",
                {
                  id: "mask0_1422_18346",
                  maskUnits: "userSpaceOnUse",
                  x: "0",
                  y: "0",
                  width: "64",
                  height: "65",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "rect",
                    {
                      id: "Bounding box",
                      y: "0.5",
                      width: "64",
                      height: "64",
                      fill: "#D9D9D9"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1422_18346)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "path",
                {
                  id: "delete_2",
                  d: "M20.3083 53.8333C19.081 53.8333 18.0562 53.4222 17.234 52.6C16.4118 51.7778 16.0007 50.753 16.0007 49.5257V16.5H13.334V13.8333H24.0007V11.782H40.0006V13.8333H50.6673V16.5H48.0006V49.5257C48.0006 50.753 47.5895 51.7778 46.7673 52.6C45.9451 53.4222 44.9203 53.8333 43.693 53.8333H20.3083ZM26.1545 45.8333H28.8212V21.8333H26.1545V45.8333ZM35.1801 45.8333H37.8468V21.8333H35.1801V45.8333Z",
                  fill: "#F9F9FA"
                }
              ) })
            ] })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-1", children: "Delete this archive?" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xl mb-9 text-core-grey-80 ", children: location.state.backup.name })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-3", children: [
        !!error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left", children: error }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${styles$2.primaryActions}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { disabled: loading, onClick: handleClick, children: !loading ? "Delete archive" : "Deleting..." }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${styles$2.desktop_only} ${styles$2.secondaryActions}`, children: !loading && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "tertiary",
            onClick: () => authNavigate("/dashboard/archivereset/archives", []),
            children: "Cancel"
          }
        ) })
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${styles$2.mobile_only} ${styles$2.secondaryActions}`, children: !loading && /* @__PURE__ */ jsxRuntimeExports.jsx(
      Button,
      {
        variant: "tertiary",
        onClick: () => authNavigate("/dashboard/archivereset/archives", []),
        children: "Cancel"
      }
    ) })
  ] });
};
const dialog = "_dialog_1a7wj_1";
const button__wrapper = "_button__wrapper_1a7wj_13";
const primaryActions = "_primaryActions_1a7wj_17";
const secondaryActions = "_secondaryActions_1a7wj_38";
const desktop_only = "_desktop_only_1a7wj_60";
const mobile_only = "_mobile_only_1a7wj_63";
const styles$1 = {
  dialog,
  button__wrapper,
  primaryActions,
  secondaryActions,
  desktop_only,
  mobile_only
};
const CommonDialogLayout = ({
  status,
  content: content2,
  primaryActions: primaryActions2,
  secondaryActions: secondaryActions2
}) => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `${styles$1.dialog} core-black-contrast`, children: [
      content2,
      primaryActions2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-3", children: [
        !!status && /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: `text-sm form-${status.error ? "error" : status.warning ? "warning" : "success"}-message text-left`,
            children: status.message
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${styles$1.primaryActions}`, children: primaryActions2 }),
        secondaryActions2 && /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: `${styles$1.desktop_only} ${styles$1.secondaryActions}`,
            children: secondaryActions2
          }
        )
      ] })
    ] }),
    secondaryActions2 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${styles$1.mobile_only} ${styles$1.secondaryActions}`, children: secondaryActions2 })
  ] });
};
const Archives = () => {
  const [searchText, setSearchText] = reactExports.useState("");
  const { getArchives, archives, _promptArchives, promptArchives, loaded } = reactExports.useContext(appContext);
  const [dropdownIndex, setDropdownIndex] = reactExports.useState(-1);
  const [_promptDeleteFile, setPromptDeleteFile] = reactExports.useState(
    false
  );
  const dropdownRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if (loaded && loaded.current)
      getArchives();
  }, [loaded, _promptArchives]);
  const springProps = useSpring({
    opacity: _promptArchives ? 1 : 0,
    transform: _promptArchives ? "translateY(0%) scale(1)" : "translateY(-50%) scale(0.8)",
    config: config$1.stiff
  });
  const toggleDropdown = (index2) => {
    if (dropdownIndex === index2) {
      setDropdownIndex(-1);
    } else {
      setDropdownIndex(index2);
    }
  };
  const promptDeleteFile = (file) => {
    setPromptDeleteFile(file);
  };
  reactExports.useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setDropdownIndex(-1);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [dropdownRef]);
  const handleChange = (e3) => {
    setSearchText(e3.target.value);
  };
  const createDownloadLink = (folder, mdsfile) => {
    const origFilePath = `/${folder}/${mdsfile}`;
    const newFilePath = `/my_downloads/${mdsfile}_minima_download_as_file_`;
    window.MDS.file.copytoweb(origFilePath, newFilePath, function() {
      const url = `my_downloads/${mdsfile}_minima_download_as_file_`;
      const temporaryLink = document.createElement("a");
      temporaryLink.style.display = "none";
      temporaryLink.target = "_blank";
      temporaryLink.href = url;
      temporaryLink.click();
      window.MDS.file.deletefromweb(url, function() {
        temporaryLink.remove();
      });
    });
  };
  const handleDelete = async (archiveFile) => {
    await deleteFile("/archives/" + archiveFile).then(() => {
      getArchives();
      promptDeleteFile(false);
    });
  };
  const makeTimestamp2 = (filename) => {
    const regex = /archive_export_(\d+)__([^_]+)_(\d+)\.raw\.dat$/;
    const match2 = filename.match(regex);
    filename.match(regex);
    if (!match2)
      return "";
    const timestamp = parseInt(match2[1]);
    const timestampDate = new Date(timestamp);
    return format(timestampDate, "dd/MM/yyyy HH:mm");
  };
  if (!_promptArchives) {
    return null;
  }
  const renderArchiveItem = (b3, i2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "li",
    {
      onClick: () => toggleDropdown(i2),
      className: "relative font-normal p-4 pr-1 core-grey-5 rounded color-black grid grid-cols-[1fr_auto] md:grid-cols-1 h-max",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold", children: "Archive" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium text-sm break-word", children: makeTimestamp2(b3.name) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "md:hidden z-[2] flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "svg",
          {
            onClick: () => toggleDropdown(i2),
            xmlns: "http://www.w3.org/2000/svg",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24",
            strokeWidth: "1.5",
            stroke: "#000000",
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" })
            ]
          }
        ) }),
        dropdownIndex === i2 && /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "div",
          {
            ref: dropdownRef,
            className: "absolute right-0 md:left-0 mt-2 w-auto bg-white z-[25] border border-gray-200 rounded-md shadow-md",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "a",
                {
                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                  onClick: (e3) => {
                    e3.stopPropagation();
                    promptDeleteFile(b3.name);
                  },
                  children: "Delete"
                }
              ),
              window.navigator.userAgent.includes("Minima Browser") && /* @__PURE__ */ jsxRuntimeExports.jsx(
                "a",
                {
                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                  onClick: async (e3) => {
                    e3.stopPropagation();
                    const fullPath = await getPath(
                      "/archives/" + b3.name
                    );
                    Android.shareFile(fullPath, "*/*");
                  },
                  children: "Share"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "a",
                {
                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                  onClick: (e3) => {
                    e3.stopPropagation();
                    if (window.navigator.userAgent.includes("Minima Browser")) {
                      return Android.fileDownload(
                        window.MDS.minidappuid,
                        "/archives/" + b3.name
                      );
                    }
                    createDownloadLink("archives", b3.name);
                  },
                  children: "Download"
                }
              )
            ]
          }
        )
      ]
    },
    i2
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    _promptDeleteFile && /* @__PURE__ */ jsxRuntimeExports.jsx(
      ConfirmDelete,
      {
        deleteBackup: () => handleDelete(_promptDeleteFile),
        close: () => promptDeleteFile(false),
        isDeleteConfirmationOpen: _promptDeleteFile
      }
    ),
    _promptArchives && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(ComposableModal, { dismiss: promptArchives, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full flex items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        animated.div,
        {
          style: springProps,
          className: "max-w-lg w-full bg-black rounded p-4 py-0 shadow-sm shadow-white mx-4 min-h-[50vh] md:min-h-[350px] max-h-32 overflow-y-auto",
          children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-rows-[min-content]", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "sticky top-0 z-10 bg-black p-4", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto]", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "font-bold text-white", children: "Latest Archives" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Cross, { dismiss: promptArchives })
              ] }),
              !!archives.length && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "my-4 bg-black", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  disabled: false,
                  id: "search",
                  name: "search",
                  type: "text",
                  placeholder: "Search archives by date",
                  onChange: handleChange,
                  className: "w-full bg-black text-white border border-gray-600 rounded px-3 py-2",
                  autoComplete: "off"
                }
              ) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 text-sm", children: [
              !!archives.length && /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "pb-4 grid grid-cols-1 gap-4 mb-4", children: [
                searchText.length ? archives.filter(
                  (o) => makeTimestamp2(o.name).includes(searchText)
                ).map(renderArchiveItem) : archives.map(renderArchiveItem),
                !!searchText.length && archives.filter(
                  (o) => makeTimestamp2(o.name).includes(searchText)
                ).length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center", children: "No results found" })
              ] }),
              !archives.length && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center text-gray-400", children: "You have no recent archives" })
            ] })
          ] })
        }
      ) }) }),
      document.body
    )
  ] });
};
const ArchiveReset$1 = () => {
  const {
    displayBackButton: displayHeaderBackButton,
    setBackButton,
    promptArchives
  } = reactExports.useContext(appContext);
  const navigate = useNavigate();
  const { authNavigate } = useAuth();
  const [exportingArchive, setExportingArchive] = reactExports.useState(false);
  const [exporting, setExporting] = reactExports.useState(false);
  const [exportedArchive, setExportedArchive] = reactExports.useState(null);
  const [error, setError] = reactExports.useState(false);
  const [fileName, setFileName] = reactExports.useState("");
  const downloadFile = (folder, mdsfile) => {
    const origFilePath = `/${folder}/${mdsfile}`;
    const newFilePath = `/my_downloads/${mdsfile}_minima_download_as_file_`;
    window.MDS.file.copytoweb(origFilePath, newFilePath, function() {
      const url = `my_downloads/${mdsfile}_minima_download_as_file_`;
      const temporaryLink = document.createElement("a");
      temporaryLink.style.display = "none";
      temporaryLink.target = "_blank";
      temporaryLink.href = url;
      temporaryLink.click();
      window.MDS.file.deletefromweb(url, function() {
        temporaryLink.remove();
      });
    });
  };
  reactExports.useEffect(() => {
    setBackButton({
      display: true,
      to: "/dashboard",
      title: "Back"
    });
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Archives, {}),
    !exportingArchive && /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { isOpen: true, delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { to: "/dashboard", title: "Back" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left", children: "Reset node" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-left flex gap-2 mb-8", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "svg",
          {
            className: "flex-none w-7",
            xmlns: "http://www.w3.org/2000/svg",
            width: "48",
            height: "24",
            viewBox: "0 0 24 24",
            fill: "none",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "8", fill: "#08090B" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "mask",
                {
                  id: "mask0_1607_18879",
                  maskUnits: "userSpaceOnUse",
                  x: "0",
                  y: "0",
                  width: "24",
                  height: "24",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "24", height: "24", fill: "#D9D9D9" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1607_18879)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "path",
                {
                  d: "M12 16.7307C12.2288 16.7307 12.4207 16.6533 12.5755 16.4985C12.7303 16.3437 12.8077 16.1519 12.8077 15.9231C12.8077 15.6942 12.7303 15.5024 12.5755 15.3476C12.4207 15.1928 12.2288 15.1154 12 15.1154C11.7711 15.1154 11.5793 15.1928 11.4245 15.3476C11.2697 15.5024 11.1923 15.6942 11.1923 15.9231C11.1923 16.1519 11.2697 16.3437 11.4245 16.4985C11.5793 16.6533 11.7711 16.7307 12 16.7307ZM11.25 13.0769H12.75V7.0769H11.25V13.0769ZM12.0017 21.5C10.6877 21.5 9.45268 21.2506 8.29655 20.752C7.1404 20.2533 6.13472 19.5765 5.2795 18.7217C4.42427 17.8669 3.74721 16.8616 3.24833 15.706C2.74944 14.5504 2.5 13.3156 2.5 12.0017C2.5 10.6877 2.74933 9.45268 3.248 8.29655C3.74667 7.1404 4.42342 6.13472 5.27825 5.2795C6.1331 4.42427 7.13834 3.74721 8.29398 3.24833C9.44959 2.74944 10.6844 2.5 11.9983 2.5C13.3122 2.5 14.5473 2.74933 15.7034 3.248C16.8596 3.74667 17.8652 4.42342 18.7205 5.27825C19.5757 6.1331 20.2527 7.13834 20.7516 8.29398C21.2505 9.44959 21.5 10.6844 21.5 11.9983C21.5 13.3122 21.2506 14.5473 20.752 15.7034C20.2533 16.8596 19.5765 17.8652 18.7217 18.7205C17.8669 19.5757 16.8616 20.2527 15.706 20.7516C14.5504 21.2505 13.3156 21.5 12.0017 21.5Z",
                  fill: "#E9E9EB"
                }
              ) })
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm password-label", children: "Make sure you have your seed phrase written down before resetting your node or you could lose access to your coins." })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          onClick: () => authNavigate("/dashboard/archivereset/restorebackup", []),
          className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer mb-4",
          children: [
            "Restore a backup",
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-0 h-full px-5 flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                width: "8",
                height: "12",
                viewBox: "0 0 8 12",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                    fill: "#F4F4F5"
                  }
                )
              }
            ) })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          onClick: () => authNavigate("/dashboard/archivereset/chainresync", []),
          className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer mb-4",
          children: [
            "Chain re-sync",
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-0 h-full px-5 flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                width: "8",
                height: "12",
                viewBox: "0 0 8 12",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                    fill: "#F4F4F5"
                  }
                )
              }
            ) })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          onClick: () => authNavigate("/dashboard/archivereset/seedresync", []),
          className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer mb-4",
          children: [
            "Import seed phrase",
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-0 h-full px-5 flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                width: "8",
                height: "12",
                viewBox: "0 0 8 12",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                    fill: "#F4F4F5"
                  }
                )
              }
            ) })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-left password-label mb-6", children: "If you are running an archive node, you can export it as a file." }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setExportingArchive(true), children: "Archive export" }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          onClick: promptArchives,
          className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer mt-4",
          children: [
            "Browse internal archives",
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-0 h-full px-5 flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                width: "8",
                height: "12",
                viewBox: "0 0 8 12",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                    fill: "#F4F4F5"
                  }
                )
              }
            ) })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          onClick: () => navigate("integritycheck"),
          className: "text-left relative core-black-contrast-2 py-4 px-5 rounded cursor-pointer mt-4",
          children: [
            "Archive integrity check",
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-0 h-full px-5 flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                width: "8",
                height: "12",
                viewBox: "0 0 8 12",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                    fill: "#F4F4F5"
                  }
                )
              }
            ) })
          ]
        }
      )
    ] }) }) }),
    !!exportingArchive && /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { isOpen: true, delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      CommonDialogLayout,
      {
        status: void 0,
        primaryActions: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left mb-4 break-words", children: error }),
          exportedArchive === null && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              disabled: exporting,
              onClick: async () => {
                setError(false);
                setExporting(true);
                const rootPath = await getPath("");
                const now = /* @__PURE__ */ new Date();
                const dateCreation = format(now, "__dMMMyyyy_Hmm");
                const fileName2 = `archive_export_${now.getTime()}` + dateCreation + ".raw.dat";
                setFileName(fileName2);
                window.MDS.cmd(
                  `archive action:exportraw file:"${rootPath}/archives/${fileName2}"`,
                  async function(resp) {
                    if (!resp.status) {
                      setError(
                        resp.error ? resp.error : "Exporting archive failed, please try again..."
                      );
                      setExporting(false);
                    }
                    if (resp.status) {
                      setExporting(false);
                      setExportedArchive({
                        fileLocation: resp.response.file,
                        size: resp.response.size
                      });
                    }
                  }
                );
              },
              children: !exporting ? "Export archive file" : "Exporting..."
            }
          ),
          !exporting && exportedArchive !== null && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              onClick: () => {
                if (window.navigator.userAgent.includes("Minima Browser")) {
                  return Android.fileDownload(
                    window.MDS.minidappuid,
                    "/archives/" + fileName
                  );
                }
                downloadFile("archives", fileName);
              },
              children: "Download now"
            }
          )
        ] }),
        secondaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: !exporting && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            onClick: () => {
              setExportingArchive(false);
              setExportedArchive(null);
            },
            children: exportedArchive === null ? "Cancel" : "Done"
          }
        ) }),
        content: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          exportedArchive !== null && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col justify-center items-center text-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "inline mb-6",
                xmlns: "http://www.w3.org/2000/svg",
                width: "48",
                height: "48",
                viewBox: "0 0 28 28",
                fill: "none",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_1546_39369",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "28",
                      height: "28",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "28", height: "28", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1546_39369)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M11.9085 20.2688L21.8162 10.3611L20.2632 8.80812L11.9085 17.1628L7.70849 12.9628L6.15548 14.5158L11.9085 20.2688ZM14.0025 28C12.0661 28 10.2461 27.6326 8.54231 26.8977C6.8385 26.1628 5.35644 25.1655 4.09612 23.9057C2.83577 22.6459 1.838 21.1645 1.1028 19.4615C0.367599 17.7585 0 15.9388 0 14.0025C0 12.0661 0.36744 10.2461 1.10232 8.54231C1.8372 6.8385 2.83452 5.35644 4.09427 4.09612C5.35406 2.83577 6.83547 1.838 8.53851 1.1028C10.2415 0.367601 12.0612 0 13.9975 0C15.9339 0 17.7539 0.367441 19.4577 1.10232C21.1615 1.8372 22.6436 2.83452 23.9039 4.09427C25.1642 5.35406 26.162 6.83547 26.8972 8.53851C27.6324 10.2415 28 12.0612 28 13.9975C28 15.9339 27.6326 17.7539 26.8977 19.4577C26.1628 21.1615 25.1655 22.6436 23.9057 23.9039C22.6459 25.1642 21.1645 26.162 19.4615 26.8972C17.7585 27.6324 15.9388 28 14.0025 28Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8", children: "Export completed" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-6", children: [
              "An archive ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-good", children: fileName }),
              " ",
              "with size",
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-good", children: exportedArchive.size }),
              " ",
              "has been saved in your internal archives directory. Click",
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "a",
                {
                  className: "cursor-pointer",
                  onClick: () => {
                    setExportingArchive(false);
                    setExportedArchive(null);
                    promptArchives();
                  },
                  children: "here"
                }
              ),
              " ",
              "to browse your archives. You can also download it below:"
            ] })
          ] }),
          exportedArchive === null && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center flex-col justify-center text-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "img",
              {
                className: "mb-4 inline",
                alt: "informative",
                src: "./assets/error.svg"
              }
            ),
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8", children: "Please note" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-6", children: "Only do this if you are an archive node." })
          ] })
        ] })
      }
    ) })
  ] });
};
const ArchiveReset = () => {
  const { displayBackButton: displayHeaderBackButton, setBackButton } = reactExports.useContext(appContext);
  const navigate = useNavigate();
  const { archives, getArchives, backups, shuttingDown } = reactExports.useContext(appContext);
  const [MDSShutdown, setMDSShutdown] = reactExports.useState(false);
  const [progress, setProgress] = reactExports.useState(0);
  const [fileUpload, setFileUpload] = reactExports.useState(false);
  const [resetFileField, setResetFileField] = reactExports.useState(0);
  const [beginRestoring, setBeginRestoring] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [archiveFileSelection, setArchiveFileSelection] = reactExports.useState("local");
  const [haveArchive, setHaveArchive] = reactExports.useState(false);
  const [backupSelect, setBackupSelect] = reactExports.useState(false);
  const [backupSteps, setBackupSteps] = reactExports.useState(0);
  const [hidePassword, togglePasswordVisibility] = reactExports.useState(false);
  reactExports.useEffect(() => {
    if (shuttingDown) {
      setMDSShutdown(true);
    }
  }, [shuttingDown]);
  reactExports.useEffect(() => {
    setBackButton({
      display: true,
      onClickHandler: () => navigate("/dashboard/archivereset"),
      title: "Archive Reset"
    });
  }, []);
  const handleArchiveSelector = (event) => {
    setArchiveFileSelection(event.target.value);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    haveArchive && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Formik,
            {
              validationSchema: validationSchema$1,
              initialValues: {
                file: "",
                upload: null,
                password: "",
                backupfilepath: ""
              },
              onSubmit: async (formData) => {
                setBeginRestoring(true);
                try {
                  const {
                    file: archivefilepath,
                    backupfilepath,
                    password
                  } = formData;
                  const fullArchivePath = await getPath(archivefilepath);
                  await reset(fullArchivePath, backupfilepath, password).catch((error2) => {
                    throw new Error(error2);
                  });
                } catch (error2) {
                  setError(
                    error2 instanceof Error ? error2.message : "An unexpected error occurred"
                  );
                }
              },
              children: ({
                handleSubmit,
                setFieldValue,
                errors,
                values,
                handleBlur,
                handleChange,
                isValid: isValid2,
                isSubmitting,
                resetForm,
                submitForm
              }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Select an archive" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-6 text-center", children: "Select a local archive or upload a new one" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative mb-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "select",
                    {
                      disabled: fileUpload,
                      defaultValue: archiveFileSelection,
                      onChange: (e3) => {
                        handleArchiveSelector(e3);
                        resetForm();
                      },
                      className: "p-4 bg-black hover:cursor-pointer rounded w-full hover:opacity-80",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("option", { id: "value", value: "local", children: "Select an internal archive file" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("option", { id: "split", value: "upload", children: "Upload an archive file" })
                      ]
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "svg",
                    {
                      className: "my-auto absolute right-2 top-[12px]",
                      width: "32",
                      height: "33",
                      viewBox: "0 0 32 33",
                      fill: "none",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "mask",
                          {
                            id: "mask0_2226_53255",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "32",
                            height: "33",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "rect",
                              {
                                y: "0.550781",
                                width: "32",
                                height: "32",
                                fill: "#D9D9D9"
                              }
                            )
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_2226_53255)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "path",
                          {
                            d: "M16.0004 20.6172L8.4668 13.0508L9.6668 11.8844L16.0004 18.2172L22.334 11.8844L23.534 13.0844L16.0004 20.6172Z",
                            fill: "#FaFaFF"
                          }
                        ) })
                      ]
                    }
                  )
                ] }),
                !backupSelect && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  archiveFileSelection === "local" && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      List,
                      {
                        disabled: archives.length === 0,
                        options: archives,
                        setForm: (option) => {
                          if (option.length) {
                            setFieldValue(
                              "file",
                              "/archives/" + option
                            );
                          }
                        }
                      }
                    ),
                    archives.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm mt-2 text-good", children: "No archives found in your internal files. Upload a new one!" })
                  ] }),
                  !fileUpload && archiveFileSelection === "upload" && !values.file.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    FileChooser,
                    {
                      disabled: isSubmitting,
                      keyValue: resetFileField,
                      handleEndIconClick: () => {
                        setResetFileField((prev) => prev + 1);
                        setFieldValue("upload", void 0);
                      },
                      error: errors.upload && errors.upload ? errors.upload : false,
                      extraClass: "core-grey-20",
                      accept: ".gzip,.dat",
                      onChange: (e3) => {
                        if (e3.target.files) {
                          setFieldValue("upload", e3.target.files[0]);
                        }
                      },
                      onBlur: handleBlur,
                      placeholder: "Select file",
                      type: "file",
                      id: "upload",
                      name: "upload",
                      endIcon: values.upload && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "svg",
                        {
                          xmlns: "http://www.w3.org/2000/svg",
                          width: "25",
                          height: "24",
                          viewBox: "0 0 25 24",
                          fill: "none",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "mask",
                              {
                                id: "mask0_645_17003",
                                maskUnits: "userSpaceOnUse",
                                x: "0",
                                y: "0",
                                width: "25",
                                height: "24",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "rect",
                                  {
                                    x: "0.5",
                                    width: "24",
                                    height: "24",
                                    fill: "#D9D9D9"
                                  }
                                )
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_645_17003)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "path",
                              {
                                d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                fill: "#91919D"
                              }
                            ) })
                          ]
                        }
                      )
                    }
                  ),
                  fileUpload && archiveFileSelection === "upload" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast-2 h-[56px] rounded p-4 mt-4 relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black", children: [
                      (Number(progress) * 100).toFixed(0),
                      "%"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "div",
                      {
                        className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                        style: {
                          transform: `scaleX(${progress})`,
                          left: "-1px",
                          top: "-2px",
                          width: "calc(100% + 1px)"
                        }
                      }
                    )
                  ] }),
                  fileUpload && values.upload && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm mt-2", children: [
                    "Uploading",
                    " ",
                    values.upload.name ? values.upload.name + "..." : ""
                  ] }),
                  !fileUpload && !!values.file.length && archiveFileSelection === "upload" && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-good flex items-center mt-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        height: "24",
                        viewBox: "0 -960 960 960",
                        width: "24",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "path",
                          {
                            fill: "#4FE3C1",
                            d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                          }
                        )
                      }
                    ),
                    values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]
                  ] }),
                  values.upload && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: !fileUpload && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      variant: "primary",
                      extraClass: "mt-4",
                      onClick: async () => {
                        setFileUpload(true);
                        setFieldValue("file", "");
                        window.MDS.file.upload(
                          values.upload,
                          async function(resp) {
                            if (resp.allchunks >= 10) {
                              setProgress(
                                resp.chunk / resp.allchunks
                              );
                            }
                            const fileName = resp.filename;
                            if (resp.allchunks === resp.chunk) {
                              setFileUpload(false);
                              window.MDS.file.move(
                                "/fileupload/" + fileName,
                                "/archives/" + fileName,
                                (resp2) => {
                                  if (resp2.status) {
                                    setFieldValue(
                                      "file",
                                      "/archives/" + fileName
                                    );
                                    setFieldValue(
                                      "upload",
                                      void 0
                                    );
                                    setFileUpload(false);
                                    getArchives();
                                  }
                                }
                              );
                            }
                          }
                        );
                      },
                      children: "Upload"
                    }
                  ) }),
                  values.file && values.file.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      onClick: () => setBackupSelect(true),
                      variant: "primary",
                      extraClass: "mt-4",
                      children: "Continue"
                    }
                  ),
                  !fileUpload && archiveFileSelection === "upload" && !!values.file.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      onClick: () => setFieldValue("file", ""),
                      variant: "tertiary",
                      extraClass: "mt-4",
                      children: "Upload a different file"
                    }
                  )
                ] }),
                !!backupSelect && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  backupSteps === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    SharedDialog,
                    {
                      main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "img",
                          {
                            className: "mb-4",
                            alt: "informative",
                            src: "./assets/error.svg"
                          }
                        ),
                        " ",
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8", children: "Restore from backup" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-6 text-center", children: "Select a backup stored internally within the app or upload a new backup from an external location." })
                      ] }),
                      primary: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Button,
                          {
                            extraClass: "mb-4",
                            onClick: () => {
                              setFieldValue("backupfilepath", "");
                              setBackupSteps(1);
                            },
                            children: "Select an internal backup"
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Button,
                          {
                            onClick: () => {
                              setFieldValue("backupfilepath", "");
                              setBackupSteps(2);
                            },
                            children: "Upload an external backup"
                          }
                        )
                      ] }),
                      secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          variant: "tertiary",
                          onClick: () => setBackupSelect(false),
                          extraClass: "mt-4",
                          children: "Cancel"
                        }
                      )
                    }
                  ),
                  backupSteps === 1 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    SharedDialog,
                    {
                      main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 text-center", children: "Restore from backup" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-12 text-center", children: [
                          "Once restored, the node will attempt to",
                          " ",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          " sync to the latest block, please be patient."
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-base pb-1", children: "Archive file" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 core-grey-20 rounded truncate whitespace-normal break-all  !bg-black text-good", children: values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1] })
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-base pb-1", children: "Backup file" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            List,
                            {
                              options: backups,
                              setForm: async (option) => {
                                if (option.length) {
                                  const fullPath = await getPath(
                                    "/backups/" + option
                                  );
                                  setFieldValue(
                                    "backupfilepath",
                                    fullPath
                                  );
                                }
                              }
                            }
                          )
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Input,
                          {
                            disabled: isSubmitting,
                            error: errors.password ? errors.password : false,
                            autoComplete: "new-password",
                            onChange: handleChange,
                            onBlur: handleBlur,
                            placeholder: "Enter password",
                            handleEndIconClick: () => togglePasswordVisibility(
                              (prevState) => !prevState
                            ),
                            type: !hidePassword ? "password" : "text",
                            id: "password",
                            name: "password",
                            value: values.password,
                            endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              TogglePasswordIcon,
                              {
                                toggle: hidePassword
                              }
                            )
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Button,
                          {
                            disabled: !isValid2 || isSubmitting,
                            onClick: submitForm,
                            children: "Restore"
                          }
                        )
                      ] }),
                      primary: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
                      secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          variant: "tertiary",
                          onClick: () => setBackupSteps(0),
                          extraClass: "mt-4",
                          children: "Cancel"
                        }
                      )
                    }
                  ),
                  backupSteps === 2 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    SharedDialog,
                    {
                      bg: "primary",
                      main: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 text-center", children: "Restore from backup" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-12 text-center", children: [
                          "Once restored, the node will attempt to",
                          " ",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          " sync to the latest block, please be patient."
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-base pb-1", children: "Archive file" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 mb-4 core-grey-20 rounded truncate whitespace-normal break-all !bg-black text-good", children: values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-base pb-1", children: "Backup file" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          FileChooser,
                          {
                            disabled: isSubmitting,
                            keyValue: resetFileField,
                            handleEndIconClick: () => {
                              setResetFileField((prev) => prev + 1);
                              setFieldValue("upload", void 0);
                            },
                            error: errors.file && errors.file ? errors.file : false,
                            extraClass: "core-grey-20",
                            accept: ".bak",
                            onChange: (e3) => {
                              if (e3.target.files) {
                                setFieldValue(
                                  "upload",
                                  e3.target.files[0]
                                );
                                setFieldValue("backupfilepath", "");
                              }
                            },
                            onBlur: handleBlur,
                            placeholder: "Select file",
                            type: "file",
                            id: "upload",
                            name: "upload",
                            endIcon: values.upload && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "svg",
                              {
                                xmlns: "http://www.w3.org/2000/svg",
                                width: "25",
                                height: "24",
                                viewBox: "0 0 25 24",
                                fill: "none",
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "mask",
                                    {
                                      id: "mask0_645_17003",
                                      maskUnits: "userSpaceOnUse",
                                      x: "0",
                                      y: "0",
                                      width: "25",
                                      height: "24",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "rect",
                                        {
                                          x: "0.5",
                                          width: "24",
                                          height: "24",
                                          fill: "#D9D9D9"
                                        }
                                      )
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_645_17003)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "path",
                                    {
                                      d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                      fill: "#91919D"
                                    }
                                  ) })
                                ]
                              }
                            )
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Input,
                          {
                            disabled: isSubmitting,
                            mb: "mb-4",
                            mt: "mt-4",
                            error: errors.password ? errors.password : false,
                            autoComplete: "new-password",
                            onChange: handleChange,
                            onBlur: handleBlur,
                            placeholder: "Enter password",
                            handleEndIconClick: () => togglePasswordVisibility(
                              (prevState) => !prevState
                            ),
                            type: !hidePassword ? "password" : "text",
                            id: "password",
                            name: "password",
                            value: values.password,
                            endIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              TogglePasswordIcon,
                              {
                                toggle: hidePassword
                              }
                            )
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                          values.backupfilepath.length > 0 && values.file.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 justify-center", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-2 text-good text-center flex items-center justify-center gap-1", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "svg",
                                {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  height: "24",
                                  viewBox: "0 -960 960 960",
                                  width: "24",
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "path",
                                    {
                                      fill: "#4FE3C1",
                                      d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                                    }
                                  )
                                }
                              ),
                              "Archive ready!"
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-2 text-good text-center flex items-center justify-center gap-1", children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "svg",
                                {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  height: "24",
                                  viewBox: "0 -960 960 960",
                                  width: "24",
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "path",
                                    {
                                      fill: "#4FE3C1",
                                      d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                                    }
                                  )
                                }
                              ),
                              "Backup ready!"
                            ] })
                          ] }),
                          values.backupfilepath.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            Button,
                            {
                              type: "submit",
                              disabled: !isValid2 || isSubmitting,
                              children: "Restore"
                            }
                          ),
                          values.backupfilepath.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            Button,
                            {
                              disabled: fileUpload || !values.upload,
                              onClick: async () => {
                                setFileUpload(true);
                                try {
                                  const arrayBuffer = await blobToArrayBuffer(
                                    values.upload
                                  );
                                  const hex = bufferToHex(arrayBuffer);
                                  await saveFileAsBinary(
                                    "/backups/" + values.upload.name,
                                    hex
                                  );
                                  const fullPath = await getPath(
                                    "/backups/" + values.upload.name
                                  );
                                  setFieldValue("upload", null);
                                  setFieldValue(
                                    "backupfilepath",
                                    fullPath
                                  );
                                } catch (error2) {
                                  setError(error2);
                                } finally {
                                  setFileUpload(false);
                                }
                              },
                              children: fileUpload ? "Upload..." : "Upload"
                            }
                          )
                        ] })
                      ] }) }),
                      primary: null,
                      secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: !beginRestoring && /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          variant: "tertiary",
                          extraClass: "mt-2",
                          onClick: () => setBackupSteps(0),
                          children: "Cancel"
                        }
                      ) })
                    }
                  )
                ] })
              ] })
            }
          ) }),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            error && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                onClick: () => {
                  setError(false);
                  setBeginRestoring(false);
                },
                children: "Cancel"
              }
            ),
            !fileUpload && !error && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                extraClass: "mt-4",
                onClick: () => setHaveArchive(false),
                children: "Cancel"
              }
            )
          ] })
        }
      ),
      document.body
    ),
    error && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-3 inline",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_594_13339",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_594_13339)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Hmm.. something went wrong." }),
            typeof error === "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: typeof error.includes !== "undefined" && error.toString().includes("GZIP") ? "Invalid password." : typeof error.includes !== "undefined" && error.toString().includes("connectdata") ? "Host is invalid." : typeof error.includes !== "undefined" && error.toString().includes("Incorrect Password!") ? "Incorrect password!" : error.toString() }),
            typeof error === "object" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: JSON.stringify(error) })
          ] }),
          primary: null,
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              onClick: () => {
                setError(false);
                setBeginRestoring(false);
              },
              children: "Cancel"
            }
          )
        }
      ),
      document.body
    ),
    beginRestoring && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          size: "lg",
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col align-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Lottie,
              {
                className: "mb-4 inline",
                width: 4,
                height: 4,
                style: { maxWidth: 80, alignSelf: "center" },
                animationData: Loading
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Restoring" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-8 text-center", children: [
              "Please don’t leave this screen whilst the chain is re-syncing.",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "Your node will shutdown once it is complete."
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Logs, {})
          ] }),
          primary: null,
          secondary: null
        }
      ),
      document.body
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { isOpen: true, delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { to: -1, title: "Back" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left", children: "Restore" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 text-left", children: [
        "If you have lost access to your node or started a new node, you can restore your wallet from a backup. ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " You will need:",
        /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "list-disc list-inside mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "pt-4 pl-2.5", children: "Upload an archive file (.gzip/.dat)" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "pl-2.5", children: "Upload your backup file (.bak) and provide the password if applicable" })
        ] }),
        "The archive file will be used to sync your node to the chain's top block and must be recently extracted from an archive node."
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-left flex gap-2 mb-8", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "svg",
          {
            className: "flex-none w-7",
            xmlns: "http://www.w3.org/2000/svg",
            width: "48",
            height: "24",
            viewBox: "0 0 24 24",
            fill: "none",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "8", fill: "#08090B" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "mask",
                {
                  id: "mask0_1607_18879",
                  maskUnits: "userSpaceOnUse",
                  x: "0",
                  y: "0",
                  width: "24",
                  height: "24",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "24", height: "24", fill: "#D9D9D9" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1607_18879)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "path",
                {
                  d: "M12 16.7307C12.2288 16.7307 12.4207 16.6533 12.5755 16.4985C12.7303 16.3437 12.8077 16.1519 12.8077 15.9231C12.8077 15.6942 12.7303 15.5024 12.5755 15.3476C12.4207 15.1928 12.2288 15.1154 12 15.1154C11.7711 15.1154 11.5793 15.1928 11.4245 15.3476C11.2697 15.5024 11.1923 15.6942 11.1923 15.9231C11.1923 16.1519 11.2697 16.3437 11.4245 16.4985C11.5793 16.6533 11.7711 16.7307 12 16.7307ZM11.25 13.0769H12.75V7.0769H11.25V13.0769ZM12.0017 21.5C10.6877 21.5 9.45268 21.2506 8.29655 20.752C7.1404 20.2533 6.13472 19.5765 5.2795 18.7217C4.42427 17.8669 3.74721 16.8616 3.24833 15.706C2.74944 14.5504 2.5 13.3156 2.5 12.0017C2.5 10.6877 2.74933 9.45268 3.248 8.29655C3.74667 7.1404 4.42342 6.13472 5.27825 5.2795C6.1331 4.42427 7.13834 3.74721 8.29398 3.24833C9.44959 2.74944 10.6844 2.5 11.9983 2.5C13.3122 2.5 14.5473 2.74933 15.7034 3.248C16.8596 3.74667 17.8652 4.42342 18.7205 5.27825C19.5757 6.1331 20.2527 7.13834 20.7516 8.29398C21.2505 9.44959 21.5 10.6844 21.5 11.9983C21.5 13.3122 21.2506 14.5473 20.752 15.7034C20.2533 16.8596 19.5765 17.8652 18.7217 18.7205C17.8669 19.5757 16.8616 20.2527 15.706 20.7516C14.5504 21.2505 13.3156 21.5 12.0017 21.5Z",
                  fill: "#E9E9EB"
                }
              ) })
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm password-label", children: [
          "If you don't have an archive file, you can visit the archive file channel on our Discord server",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { target: "_blank", href: "https://discord.com/invite/minima", children: "https://discord.com/invite/minima" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { extraClass: "mb-4", onClick: () => setHaveArchive(true), children: "I have an archive file" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          variant: "tertiary",
          onClick: () => navigate("/dashboard/restore"),
          children: "I don't have an archive file"
        }
      )
    ] }) }) }),
    MDSShutdown && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          bg: "primary",
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-3 inline",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_1102_25908",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1102_25908)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 font-semibold text-center", children: "Re-sync complete" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium mb-6 mt-6 text-center", children: "Your node was successfully re-synced and will shutdown. Restart Minima for the re-sync to take effect." })
          ] }),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              onClick: () => {
                if (window.navigator.userAgent.includes("Minima Browser")) {
                  return Android.shutdownMinima();
                }
                return window.close();
              },
              children: "Close application"
            }
          )
        }
      ),
      document.body
    )
  ] });
};
const validationSchema$1 = create$3().shape({
  backupfilepath: create$8().required("Please select a (.bak) file").test("Test extension", function(val2) {
    const { path, createError } = this;
    const re2 = /(?:\.([^.]+))?$/;
    if (val2 === void 0 || val2 === null || val2.length === 0) {
      return createError({
        path: "file",
        message: "Please select a valid (.bak) file"
      });
    }
    if (val2 && val2.name && typeof val2.name === "string") {
      const extension = re2.exec(val2.name);
      if (extension && typeof extension[1] === "string" && extension[1] !== "bak") {
        return createError({
          path,
          message: "Please select a valid file extension type."
        });
      }
    }
    return true;
  }),
  password: create$6()
});
const grid = "_grid_1mjka_1";
const full = "_full_1mjka_27";
const styles = {
  grid,
  full
};
const Grid = ({ header, content: content2, fullHeight = false }) => {
  const height2 = useGetInnerHeight();
  const openTitleBar = useCanUseTitleBar();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: styles["grid"], style: { height: `${height2}px` }, children: [
    header && /* @__PURE__ */ jsxRuntimeExports.jsx("header", { onClick: openTitleBar, children: header }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("main", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("section", { className: fullHeight ? "!h-screen" : "", children: content2 }) })
  ] });
};
const Uploading = () => {
  const inputRef = reactExports.useRef(null);
  const location = useLocation();
  const navigate = useNavigate();
  const { authNavigate } = useAuth();
  const [error, setError] = reactExports.useState(false);
  const [progress, setProgress] = reactExports.useState(0);
  const [uploading, setUploading] = reactExports.useState(false);
  const {
    context,
    resetArchiveContext,
    handleArchivePathContext,
    archivePathToResetWith,
    archiveFileToUpload
  } = useArchiveContext();
  const { getArchives } = reactExports.useContext(appContext);
  reactExports.useEffect(() => {
    if (archiveFileToUpload) {
      handleFileUpload(archiveFileToUpload);
    }
  }, [location, archiveFileToUpload]);
  const handleFileUpload = (file) => {
    setUploading(true);
    try {
      window.MDS.file.upload(file, async function(resp) {
        if (resp.allchunks >= 10) {
          setProgress(resp.chunk / resp.allchunks);
        }
        const fileName = resp.filename;
        if (resp.allchunks === resp.chunk) {
          setUploading(false);
          window.MDS.file.move(
            "/fileupload/" + fileName,
            "/archives/" + fileName,
            (resp2) => {
              if (resp2.status) {
                handleArchivePathContext(
                  "/archives/" + fileName,
                  location.state && location.state.context ? location.state.context : null
                );
                getArchives();
              }
            }
          );
        }
      });
    } catch (error2) {
      console.error(error2);
      setError(error2);
      setUploading(false);
    }
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Grid,
    {
      header: null,
      content: /* @__PURE__ */ jsxRuntimeExports.jsx(
        CommonDialogLayout,
        {
          status: void 0,
          primaryActions: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            location.state && !location.state.justUploading && !uploading && !error && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: async () => {
                  if (context === "restore") {
                    authNavigate("/dashboard/restore/frombackup", [
                      PERMISSIONS.CAN_VIEW_RESTORE
                    ]);
                  }
                  if (context === "chainresync") {
                    authNavigate("/dashboard/resyncing", [
                      PERMISSIONS.CAN_VIEW_RESYNCING
                    ]);
                    await resetChainResync(archivePathToResetWith).catch((error2) => {
                      authNavigate(
                        "/dashboard/resyncing",
                        [PERMISSIONS.CAN_VIEW_RESYNCING],
                        {
                          state: {
                            error: error2 ? error2 : "Something went wrong, please try again."
                          }
                        }
                      );
                    });
                  }
                  if (context === "seedresync") {
                    authNavigate(
                      "/dashboard/manageseedphrase/importseedphrase",
                      [PERMISSIONS.CAN_VIEW_IMPORTSEEDPHRASE],
                      { state: { seedresync: true } }
                    );
                  }
                },
                children: "Continue"
              }
            ),
            !uploading && error && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  accept: ".gzip",
                  className: "hidden",
                  type: "file",
                  ref: inputRef,
                  onChange: (e3) => {
                    const file = e3.target.files ? e3.target.files[0] : null;
                    if (file) {
                      setError(false);
                      handleFileUpload(file);
                      authNavigate(
                        "/upload",
                        [PERMISSIONS["CAN_VIEW_UPLOADING"]],
                        location.state
                      );
                    }
                  }
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Button,
                {
                  extraClass: "mt-4",
                  onClick: () => {
                    var _a;
                    return (_a = inputRef.current) == null ? void 0 : _a.click();
                  },
                  children: "Upload a different file"
                }
              )
            ] })
          ] }),
          secondaryActions: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: !uploading && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              onClick: () => {
                if (location.state && location.state.justUploading) {
                  return navigate(-1);
                }
                resetArchiveContext();
                navigate("/dashboard/archivereset");
              },
              children: "Cancel"
            }
          ) }),
          content: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid h-full", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex w-full justify-between px-2 py-2", children: [
              !!uploading && /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl", children: "Uploading file..." }),
              !uploading && /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl", children: "Upload complete" }),
              !!uploading && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-span-1 flex justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Lottie,
                {
                  className: "mb-4",
                  style: {
                    width: 32,
                    height: 32,
                    alignSelf: "center"
                  },
                  animationData: Loading
                }
              ) }) }),
              !uploading && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "col-span-1 flex justify-end", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "28",
                  height: "28",
                  viewBox: "0 0 28 28",
                  fill: "none",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "mask",
                      {
                        id: "mask0_1546_39369",
                        maskUnits: "userSpaceOnUse",
                        x: "0",
                        y: "0",
                        width: "28",
                        height: "28",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "28", height: "28", fill: "#D9D9D9" })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1546_39369)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "path",
                      {
                        d: "M11.9085 20.2688L21.8162 10.3611L20.2632 8.80812L11.9085 17.1628L7.70849 12.9628L6.15548 14.5158L11.9085 20.2688ZM14.0025 28C12.0661 28 10.2461 27.6326 8.54231 26.8977C6.8385 26.1628 5.35644 25.1655 4.09612 23.9057C2.83577 22.6459 1.838 21.1645 1.1028 19.4615C0.367599 17.7585 0 15.9388 0 14.0025C0 12.0661 0.36744 10.2461 1.10232 8.54231C1.8372 6.8385 2.83452 5.35644 4.09427 4.09612C5.35406 2.83577 6.83547 1.838 8.53851 1.1028C10.2415 0.367601 12.0612 0 13.9975 0C15.9339 0 17.7539 0.367441 19.4577 1.10232C21.1615 1.8372 22.6436 2.83452 23.9039 4.09427C25.1642 5.35406 26.162 6.83547 26.8972 8.53851C27.6324 10.2415 28 12.0612 28 13.9975C28 15.9339 27.6326 17.7539 26.8977 19.4577C26.1628 21.1615 25.1655 22.6436 23.9057 23.9039C22.6459 25.1642 21.1645 26.162 19.4615 26.8972C17.7585 27.6324 15.9388 28 14.0025 28Z",
                        fill: "#F4F4F5"
                      }
                    ) })
                  ]
                }
              ) }) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: `break-all w-full p-4 text-white mt-4 text-left core-black-contrast-2 rounded mb-4 ${error ? "upload-error" : ""}`,
                children: archiveFileToUpload ? archiveFileToUpload.name : "N/A"
              }
            ),
            uploading && !!progress && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast-2 h-[56px] rounded p-4 mt-6 mb-8 relative", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black", children: [
                (Number(progress) * 100).toFixed(0),
                "%"
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "div",
                {
                  className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                  style: {
                    transform: `scaleX(${progress})`,
                    left: "-1px",
                    top: "-2px",
                    width: "calc(100% + 1px)"
                  }
                }
              )
            ] }),
            !uploading && error && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 py-3 mb-4 rounded flex  gap-4 form-error-box", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: "flex-none",
                  width: "20",
                  height: "20",
                  viewBox: "0 0 20 20",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M6.4 15L10 11.4L13.6 15L15 13.6L11.4 10L15 6.4L13.6 5L10 8.6L6.4 5L5 6.4L8.6 10L5 13.6L6.4 15ZM10 20C8.61667 20 7.31667 19.7375 6.1 19.2125C4.88333 18.6875 3.825 17.975 2.925 17.075C2.025 16.175 1.3125 15.1167 0.7875 13.9C0.2625 12.6833 0 11.3833 0 10C0 8.61667 0.2625 7.31667 0.7875 6.1C1.3125 4.88333 2.025 3.825 2.925 2.925C3.825 2.025 4.88333 1.3125 6.1 0.7875C7.31667 0.2625 8.61667 0 10 0C11.3833 0 12.6833 0.2625 13.9 0.7875C15.1167 1.3125 16.175 2.025 17.075 2.925C17.975 3.825 18.6875 4.88333 19.2125 6.1C19.7375 7.31667 20 8.61667 20 10C20 11.3833 19.7375 12.6833 19.2125 13.9C18.6875 15.1167 17.975 16.175 17.075 17.075C16.175 17.975 15.1167 18.6875 13.9 19.2125C12.6833 19.7375 11.3833 20 10 20Z",
                      fill: "#FF627E"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-left my-auto text-black", children: "This archive file contains errors, please use another file." })
            ] })
          ] }) }) })
        }
      )
    }
  );
};
const bip39 = [
  "ABANDON",
  "ABILITY",
  "ABLE",
  "ABOUT",
  "ABOVE",
  "ABSENT",
  "ABSORB",
  "ABSTRACT",
  "ABSURD",
  "ABUSE",
  "ACCESS",
  "ACCIDENT",
  "ACCOUNT",
  "ACCUSE",
  "ACHIEVE",
  "ACID",
  "ACOUSTIC",
  "ACQUIRE",
  "ACROSS",
  "ACT",
  "ACTION",
  "ACTOR",
  "ACTRESS",
  "ACTUAL",
  "ADAPT",
  "ADD",
  "ADDICT",
  "ADDRESS",
  "ADJUST",
  "ADMIT",
  "ADULT",
  "ADVANCE",
  "ADVICE",
  "AEROBIC",
  "AFFAIR",
  "AFFORD",
  "AFRAID",
  "AGAIN",
  "AGE",
  "AGENT",
  "AGREE",
  "AHEAD",
  "AIM",
  "AIR",
  "AIRPORT",
  "AISLE",
  "ALARM",
  "ALBUM",
  "ALCOHOL",
  "ALERT",
  "ALIEN",
  "ALL",
  "ALLEY",
  "ALLOW",
  "ALMOST",
  "ALONE",
  "ALPHA",
  "ALREADY",
  "ALSO",
  "ALTER",
  "ALWAYS",
  "AMATEUR",
  "AMAZING",
  "AMONG",
  "AMOUNT",
  "AMUSED",
  "ANALYST",
  "ANCHOR",
  "ANCIENT",
  "ANGER",
  "ANGLE",
  "ANGRY",
  "ANIMAL",
  "ANKLE",
  "ANNOUNCE",
  "ANNUAL",
  "ANOTHER",
  "ANSWER",
  "ANTENNA",
  "ANTIQUE",
  "ANXIETY",
  "ANY",
  "APART",
  "APOLOGY",
  "APPEAR",
  "APPLE",
  "APPROVE",
  "APRIL",
  "ARCH",
  "ARCTIC",
  "AREA",
  "ARENA",
  "ARGUE",
  "ARM",
  "ARMED",
  "ARMOR",
  "ARMY",
  "AROUND",
  "ARRANGE",
  "ARREST",
  "ARRIVE",
  "ARROW",
  "ART",
  "ARTEFACT",
  "ARTIST",
  "ARTWORK",
  "ASK",
  "ASPECT",
  "ASSAULT",
  "ASSET",
  "ASSIST",
  "ASSUME",
  "ASTHMA",
  "ATHLETE",
  "ATOM",
  "ATTACK",
  "ATTEND",
  "ATTITUDE",
  "ATTRACT",
  "AUCTION",
  "AUDIT",
  "AUGUST",
  "AUNT",
  "AUTHOR",
  "AUTO",
  "AUTUMN",
  "AVERAGE",
  "AVOCADO",
  "AVOID",
  "AWAKE",
  "AWARE",
  "AWAY",
  "AWESOME",
  "AWFUL",
  "AWKWARD",
  "AXIS",
  "BABY",
  "BACHELOR",
  "BACON",
  "BADGE",
  "BAG",
  "BALANCE",
  "BALCONY",
  "BALL",
  "BAMBOO",
  "BANANA",
  "BANNER",
  "BAR",
  "BARELY",
  "BARGAIN",
  "BARREL",
  "BASE",
  "BASIC",
  "BASKET",
  "BATTLE",
  "BEACH",
  "BEAN",
  "BEAUTY",
  "BECAUSE",
  "BECOME",
  "BEEF",
  "BEFORE",
  "BEGIN",
  "BEHAVE",
  "BEHIND",
  "BELIEVE",
  "BELOW",
  "BELT",
  "BENCH",
  "BENEFIT",
  "BEST",
  "BETRAY",
  "BETTER",
  "BETWEEN",
  "BEYOND",
  "BICYCLE",
  "BID",
  "BIKE",
  "BIND",
  "BIOLOGY",
  "BIRD",
  "BIRTH",
  "BITTER",
  "BLACK",
  "BLADE",
  "BLAME",
  "BLANKET",
  "BLAST",
  "BLEAK",
  "BLESS",
  "BLIND",
  "BLOOD",
  "BLOSSOM",
  "BLOUSE",
  "BLUE",
  "BLUR",
  "BLUSH",
  "BOARD",
  "BOAT",
  "BODY",
  "BOIL",
  "BOMB",
  "BONE",
  "BONUS",
  "BOOK",
  "BOOST",
  "BORDER",
  "BORING",
  "BORROW",
  "BOSS",
  "BOTTOM",
  "BOUNCE",
  "BOX",
  "BOY",
  "BRACKET",
  "BRAIN",
  "BRAND",
  "BRASS",
  "BRAVE",
  "BREAD",
  "BREEZE",
  "BRICK",
  "BRIDGE",
  "BRIEF",
  "BRIGHT",
  "BRING",
  "BRISK",
  "BROCCOLI",
  "BROKEN",
  "BRONZE",
  "BROOM",
  "BROTHER",
  "BROWN",
  "BRUSH",
  "BUBBLE",
  "BUDDY",
  "BUDGET",
  "BUFFALO",
  "BUILD",
  "BULB",
  "BULK",
  "BULLET",
  "BUNDLE",
  "BUNKER",
  "BURDEN",
  "BURGER",
  "BURST",
  "BUS",
  "BUSINESS",
  "BUSY",
  "BUTTER",
  "BUYER",
  "BUZZ",
  "CABBAGE",
  "CABIN",
  "CABLE",
  "CACTUS",
  "CAGE",
  "CAKE",
  "CALL",
  "CALM",
  "CAMERA",
  "CAMP",
  "CAN",
  "CANAL",
  "CANCEL",
  "CANDY",
  "CANNON",
  "CANOE",
  "CANVAS",
  "CANYON",
  "CAPABLE",
  "CAPITAL",
  "CAPTAIN",
  "CAR",
  "CARBON",
  "CARD",
  "CARGO",
  "CARPET",
  "CARRY",
  "CART",
  "CASE",
  "CASH",
  "CASINO",
  "CASTLE",
  "CASUAL",
  "CAT",
  "CATALOG",
  "CATCH",
  "CATEGORY",
  "CATTLE",
  "CAUGHT",
  "CAUSE",
  "CAUTION",
  "CAVE",
  "CEILING",
  "CELERY",
  "CEMENT",
  "CENSUS",
  "CENTURY",
  "CEREAL",
  "CERTAIN",
  "CHAIR",
  "CHALK",
  "CHAMPION",
  "CHANGE",
  "CHAOS",
  "CHAPTER",
  "CHARGE",
  "CHASE",
  "CHAT",
  "CHEAP",
  "CHECK",
  "CHEESE",
  "CHEF",
  "CHERRY",
  "CHEST",
  "CHICKEN",
  "CHIEF",
  "CHILD",
  "CHIMNEY",
  "CHOICE",
  "CHOOSE",
  "CHRONIC",
  "CHUCKLE",
  "CHUNK",
  "CHURN",
  "CIGAR",
  "CINNAMON",
  "CIRCLE",
  "CITIZEN",
  "CITY",
  "CIVIL",
  "CLAIM",
  "CLAP",
  "CLARIFY",
  "CLAW",
  "CLAY",
  "CLEAN",
  "CLERK",
  "CLEVER",
  "CLICK",
  "CLIENT",
  "CLIFF",
  "CLIMB",
  "CLINIC",
  "CLIP",
  "CLOCK",
  "CLOG",
  "CLOSE",
  "CLOTH",
  "CLOUD",
  "CLOWN",
  "CLUB",
  "CLUMP",
  "CLUSTER",
  "CLUTCH",
  "COACH",
  "COAST",
  "COCONUT",
  "CODE",
  "COFFEE",
  "COIL",
  "COIN",
  "COLLECT",
  "COLOR",
  "COLUMN",
  "COMBINE",
  "COME",
  "COMFORT",
  "COMIC",
  "COMMON",
  "COMPANY",
  "CONCERT",
  "CONDUCT",
  "CONFIRM",
  "CONGRESS",
  "CONNECT",
  "CONSIDER",
  "CONTROL",
  "CONVINCE",
  "COOK",
  "COOL",
  "COPPER",
  "COPY",
  "CORAL",
  "CORE",
  "CORN",
  "CORRECT",
  "COST",
  "COTTON",
  "COUCH",
  "COUNTRY",
  "COUPLE",
  "COURSE",
  "COUSIN",
  "COVER",
  "COYOTE",
  "CRACK",
  "CRADLE",
  "CRAFT",
  "CRAM",
  "CRANE",
  "CRASH",
  "CRATER",
  "CRAWL",
  "CRAZY",
  "CREAM",
  "CREDIT",
  "CREEK",
  "CREW",
  "CRICKET",
  "CRIME",
  "CRISP",
  "CRITIC",
  "CROP",
  "CROSS",
  "CROUCH",
  "CROWD",
  "CRUCIAL",
  "CRUEL",
  "CRUISE",
  "CRUMBLE",
  "CRUNCH",
  "CRUSH",
  "CRY",
  "CRYSTAL",
  "CUBE",
  "CULTURE",
  "CUP",
  "CUPBOARD",
  "CURIOUS",
  "CURRENT",
  "CURTAIN",
  "CURVE",
  "CUSHION",
  "CUSTOM",
  "CUTE",
  "CYCLE",
  "DAD",
  "DAMAGE",
  "DAMP",
  "DANCE",
  "DANGER",
  "DARING",
  "DASH",
  "DAUGHTER",
  "DAWN",
  "DAY",
  "DEAL",
  "DEBATE",
  "DEBRIS",
  "DECADE",
  "DECEMBER",
  "DECIDE",
  "DECLINE",
  "DECORATE",
  "DECREASE",
  "DEER",
  "DEFENSE",
  "DEFINE",
  "DEFY",
  "DEGREE",
  "DELAY",
  "DELIVER",
  "DEMAND",
  "DEMISE",
  "DENIAL",
  "DENTIST",
  "DENY",
  "DEPART",
  "DEPEND",
  "DEPOSIT",
  "DEPTH",
  "DEPUTY",
  "DERIVE",
  "DESCRIBE",
  "DESERT",
  "DESIGN",
  "DESK",
  "DESPAIR",
  "DESTROY",
  "DETAIL",
  "DETECT",
  "DEVELOP",
  "DEVICE",
  "DEVOTE",
  "DIAGRAM",
  "DIAL",
  "DIAMOND",
  "DIARY",
  "DICE",
  "DIESEL",
  "DIET",
  "DIFFER",
  "DIGITAL",
  "DIGNITY",
  "DILEMMA",
  "DINNER",
  "DINOSAUR",
  "DIRECT",
  "DIRT",
  "DISAGREE",
  "DISCOVER",
  "DISEASE",
  "DISH",
  "DISMISS",
  "DISORDER",
  "DISPLAY",
  "DISTANCE",
  "DIVERT",
  "DIVIDE",
  "DIVORCE",
  "DIZZY",
  "DOCTOR",
  "DOCUMENT",
  "DOG",
  "DOLL",
  "DOLPHIN",
  "DOMAIN",
  "DONATE",
  "DONKEY",
  "DONOR",
  "DOOR",
  "DOSE",
  "DOUBLE",
  "DOVE",
  "DRAFT",
  "DRAGON",
  "DRAMA",
  "DRASTIC",
  "DRAW",
  "DREAM",
  "DRESS",
  "DRIFT",
  "DRILL",
  "DRINK",
  "DRIP",
  "DRIVE",
  "DROP",
  "DRUM",
  "DRY",
  "DUCK",
  "DUMB",
  "DUNE",
  "DURING",
  "DUST",
  "DUTCH",
  "DUTY",
  "DWARF",
  "DYNAMIC",
  "EAGER",
  "EAGLE",
  "EARLY",
  "EARN",
  "EARTH",
  "EASILY",
  "EAST",
  "EASY",
  "ECHO",
  "ECOLOGY",
  "ECONOMY",
  "EDGE",
  "EDIT",
  "EDUCATE",
  "EFFORT",
  "EGG",
  "EIGHT",
  "EITHER",
  "ELBOW",
  "ELDER",
  "ELECTRIC",
  "ELEGANT",
  "ELEMENT",
  "ELEPHANT",
  "ELEVATOR",
  "ELITE",
  "ELSE",
  "EMBARK",
  "EMBODY",
  "EMBRACE",
  "EMERGE",
  "EMOTION",
  "EMPLOY",
  "EMPOWER",
  "EMPTY",
  "ENABLE",
  "ENACT",
  "END",
  "ENDLESS",
  "ENDORSE",
  "ENEMY",
  "ENERGY",
  "ENFORCE",
  "ENGAGE",
  "ENGINE",
  "ENHANCE",
  "ENJOY",
  "ENLIST",
  "ENOUGH",
  "ENRICH",
  "ENROLL",
  "ENSURE",
  "ENTER",
  "ENTIRE",
  "ENTRY",
  "ENVELOPE",
  "EPISODE",
  "EQUAL",
  "EQUIP",
  "ERA",
  "ERASE",
  "ERODE",
  "EROSION",
  "ERROR",
  "ERUPT",
  "ESCAPE",
  "ESSAY",
  "ESSENCE",
  "ESTATE",
  "ETERNAL",
  "ETHICS",
  "EVIDENCE",
  "EVIL",
  "EVOKE",
  "EVOLVE",
  "EXACT",
  "EXAMPLE",
  "EXCESS",
  "EXCHANGE",
  "EXCITE",
  "EXCLUDE",
  "EXCUSE",
  "EXECUTE",
  "EXERCISE",
  "EXHAUST",
  "EXHIBIT",
  "EXILE",
  "EXIST",
  "EXIT",
  "EXOTIC",
  "EXPAND",
  "EXPECT",
  "EXPIRE",
  "EXPLAIN",
  "EXPOSE",
  "EXPRESS",
  "EXTEND",
  "EXTRA",
  "EYE",
  "EYEBROW",
  "FABRIC",
  "FACE",
  "FACULTY",
  "FADE",
  "FAINT",
  "FAITH",
  "FALL",
  "FALSE",
  "FAME",
  "FAMILY",
  "FAMOUS",
  "FAN",
  "FANCY",
  "FANTASY",
  "FARM",
  "FASHION",
  "FAT",
  "FATAL",
  "FATHER",
  "FATIGUE",
  "FAULT",
  "FAVORITE",
  "FEATURE",
  "FEBRUARY",
  "FEDERAL",
  "FEE",
  "FEED",
  "FEEL",
  "FEMALE",
  "FENCE",
  "FESTIVAL",
  "FETCH",
  "FEVER",
  "FEW",
  "FIBER",
  "FICTION",
  "FIELD",
  "FIGURE",
  "FILE",
  "FILM",
  "FILTER",
  "FINAL",
  "FIND",
  "FINE",
  "FINGER",
  "FINISH",
  "FIRE",
  "FIRM",
  "FIRST",
  "FISCAL",
  "FISH",
  "FIT",
  "FITNESS",
  "FIX",
  "FLAG",
  "FLAME",
  "FLASH",
  "FLAT",
  "FLAVOR",
  "FLEE",
  "FLIGHT",
  "FLIP",
  "FLOAT",
  "FLOCK",
  "FLOOR",
  "FLOWER",
  "FLUID",
  "FLUSH",
  "FLY",
  "FOAM",
  "FOCUS",
  "FOG",
  "FOIL",
  "FOLD",
  "FOLLOW",
  "FOOD",
  "FOOT",
  "FORCE",
  "FOREST",
  "FORGET",
  "FORK",
  "FORTUNE",
  "FORUM",
  "FORWARD",
  "FOSSIL",
  "FOSTER",
  "FOUND",
  "FOX",
  "FRAGILE",
  "FRAME",
  "FREQUENT",
  "FRESH",
  "FRIEND",
  "FRINGE",
  "FROG",
  "FRONT",
  "FROST",
  "FROWN",
  "FROZEN",
  "FRUIT",
  "FUEL",
  "FUN",
  "FUNNY",
  "FURNACE",
  "FURY",
  "FUTURE",
  "GADGET",
  "GAIN",
  "GALAXY",
  "GALLERY",
  "GAME",
  "GAP",
  "GARAGE",
  "GARBAGE",
  "GARDEN",
  "GARLIC",
  "GARMENT",
  "GAS",
  "GASP",
  "GATE",
  "GATHER",
  "GAUGE",
  "GAZE",
  "GENERAL",
  "GENIUS",
  "GENRE",
  "GENTLE",
  "GENUINE",
  "GESTURE",
  "GHOST",
  "GIANT",
  "GIFT",
  "GIGGLE",
  "GINGER",
  "GIRAFFE",
  "GIRL",
  "GIVE",
  "GLAD",
  "GLANCE",
  "GLARE",
  "GLASS",
  "GLIDE",
  "GLIMPSE",
  "GLOBE",
  "GLOOM",
  "GLORY",
  "GLOVE",
  "GLOW",
  "GLUE",
  "GOAT",
  "GODDESS",
  "GOLD",
  "GOOD",
  "GOOSE",
  "GORILLA",
  "GOSPEL",
  "GOSSIP",
  "GOVERN",
  "GOWN",
  "GRAB",
  "GRACE",
  "GRAIN",
  "GRANT",
  "GRAPE",
  "GRASS",
  "GRAVITY",
  "GREAT",
  "GREEN",
  "GRID",
  "GRIEF",
  "GRIT",
  "GROCERY",
  "GROUP",
  "GROW",
  "GRUNT",
  "GUARD",
  "GUESS",
  "GUIDE",
  "GUILT",
  "GUITAR",
  "GUN",
  "GYM",
  "HABIT",
  "HAIR",
  "HALF",
  "HAMMER",
  "HAMSTER",
  "HAND",
  "HAPPY",
  "HARBOR",
  "HARD",
  "HARSH",
  "HARVEST",
  "HAT",
  "HAVE",
  "HAWK",
  "HAZARD",
  "HEAD",
  "HEALTH",
  "HEART",
  "HEAVY",
  "HEDGEHOG",
  "HEIGHT",
  "HELLO",
  "HELMET",
  "HELP",
  "HEN",
  "HERO",
  "HIDDEN",
  "HIGH",
  "HILL",
  "HINT",
  "HIP",
  "HIRE",
  "HISTORY",
  "HOBBY",
  "HOCKEY",
  "HOLD",
  "HOLE",
  "HOLIDAY",
  "HOLLOW",
  "HOME",
  "HONEY",
  "HOOD",
  "HOPE",
  "HORN",
  "HORROR",
  "HORSE",
  "HOSPITAL",
  "HOST",
  "HOTEL",
  "HOUR",
  "HOVER",
  "HUB",
  "HUGE",
  "HUMAN",
  "HUMBLE",
  "HUMOR",
  "HUNDRED",
  "HUNGRY",
  "HUNT",
  "HURDLE",
  "HURRY",
  "HURT",
  "HUSBAND",
  "HYBRID",
  "ICE",
  "ICON",
  "IDEA",
  "IDENTIFY",
  "IDLE",
  "IGNORE",
  "ILL",
  "ILLEGAL",
  "ILLNESS",
  "IMAGE",
  "IMITATE",
  "IMMENSE",
  "IMMUNE",
  "IMPACT",
  "IMPOSE",
  "IMPROVE",
  "IMPULSE",
  "INCH",
  "INCLUDE",
  "INCOME",
  "INCREASE",
  "INDEX",
  "INDICATE",
  "INDOOR",
  "INDUSTRY",
  "INFANT",
  "INFLICT",
  "INFORM",
  "INHALE",
  "INHERIT",
  "INITIAL",
  "INJECT",
  "INJURY",
  "INMATE",
  "INNER",
  "INNOCENT",
  "INPUT",
  "INQUIRY",
  "INSANE",
  "INSECT",
  "INSIDE",
  "INSPIRE",
  "INSTALL",
  "INTACT",
  "INTEREST",
  "INTO",
  "INVEST",
  "INVITE",
  "INVOLVE",
  "IRON",
  "ISLAND",
  "ISOLATE",
  "ISSUE",
  "ITEM",
  "IVORY",
  "JACKET",
  "JAGUAR",
  "JAR",
  "JAZZ",
  "JEALOUS",
  "JEANS",
  "JELLY",
  "JEWEL",
  "JOB",
  "JOIN",
  "JOKE",
  "JOURNEY",
  "JOY",
  "JUDGE",
  "JUICE",
  "JUMP",
  "JUNGLE",
  "JUNIOR",
  "JUNK",
  "JUST",
  "KANGAROO",
  "KEEN",
  "KEEP",
  "KETCHUP",
  "KEY",
  "KICK",
  "KID",
  "KIDNEY",
  "KIND",
  "KINGDOM",
  "KISS",
  "KIT",
  "KITCHEN",
  "KITE",
  "KITTEN",
  "KIWI",
  "KNEE",
  "KNIFE",
  "KNOCK",
  "KNOW",
  "LAB",
  "LABEL",
  "LABOR",
  "LADDER",
  "LADY",
  "LAKE",
  "LAMP",
  "LANGUAGE",
  "LAPTOP",
  "LARGE",
  "LATER",
  "LATIN",
  "LAUGH",
  "LAUNDRY",
  "LAVA",
  "LAW",
  "LAWN",
  "LAWSUIT",
  "LAYER",
  "LAZY",
  "LEADER",
  "LEAF",
  "LEARN",
  "LEAVE",
  "LECTURE",
  "LEFT",
  "LEG",
  "LEGAL",
  "LEGEND",
  "LEISURE",
  "LEMON",
  "LEND",
  "LENGTH",
  "LENS",
  "LEOPARD",
  "LESSON",
  "LETTER",
  "LEVEL",
  "LIAR",
  "LIBERTY",
  "LIBRARY",
  "LICENSE",
  "LIFE",
  "LIFT",
  "LIGHT",
  "LIKE",
  "LIMB",
  "LIMIT",
  "LINK",
  "LION",
  "LIQUID",
  "LIST",
  "LITTLE",
  "LIVE",
  "LIZARD",
  "LOAD",
  "LOAN",
  "LOBSTER",
  "LOCAL",
  "LOCK",
  "LOGIC",
  "LONELY",
  "LONG",
  "LOOP",
  "LOTTERY",
  "LOUD",
  "LOUNGE",
  "LOVE",
  "LOYAL",
  "LUCKY",
  "LUGGAGE",
  "LUMBER",
  "LUNAR",
  "LUNCH",
  "LUXURY",
  "LYRICS",
  "MACHINE",
  "MAD",
  "MAGIC",
  "MAGNET",
  "MAID",
  "MAIL",
  "MAIN",
  "MAJOR",
  "MAKE",
  "MAMMAL",
  "MAN",
  "MANAGE",
  "MANDATE",
  "MANGO",
  "MANSION",
  "MANUAL",
  "MAPLE",
  "MARBLE",
  "MARCH",
  "MARGIN",
  "MARINE",
  "MARKET",
  "MARRIAGE",
  "MASK",
  "MASS",
  "MASTER",
  "MATCH",
  "MATERIAL",
  "MATH",
  "MATRIX",
  "MATTER",
  "MAXIMUM",
  "MAZE",
  "MEADOW",
  "MEAN",
  "MEASURE",
  "MEAT",
  "MECHANIC",
  "MEDAL",
  "MEDIA",
  "MELODY",
  "MELT",
  "MEMBER",
  "MEMORY",
  "MENTION",
  "MENU",
  "MERCY",
  "MERGE",
  "MERIT",
  "MERRY",
  "MESH",
  "MESSAGE",
  "METAL",
  "METHOD",
  "MIDDLE",
  "MIDNIGHT",
  "MILK",
  "MILLION",
  "MIMIC",
  "MIND",
  "MINIMUM",
  "MINOR",
  "MINUTE",
  "MIRACLE",
  "MIRROR",
  "MISERY",
  "MISS",
  "MISTAKE",
  "MIX",
  "MIXED",
  "MIXTURE",
  "MOBILE",
  "MODEL",
  "MODIFY",
  "MOM",
  "MOMENT",
  "MONITOR",
  "MONKEY",
  "MONSTER",
  "MONTH",
  "MOON",
  "MORAL",
  "MORE",
  "MORNING",
  "MOSQUITO",
  "MOTHER",
  "MOTION",
  "MOTOR",
  "MOUNTAIN",
  "MOUSE",
  "MOVE",
  "MOVIE",
  "MUCH",
  "MUFFIN",
  "MULE",
  "MULTIPLY",
  "MUSCLE",
  "MUSEUM",
  "MUSHROOM",
  "MUSIC",
  "MUST",
  "MUTUAL",
  "MYSELF",
  "MYSTERY",
  "MYTH",
  "NAIVE",
  "NAME",
  "NAPKIN",
  "NARROW",
  "NASTY",
  "NATION",
  "NATURE",
  "NEAR",
  "NECK",
  "NEED",
  "NEGATIVE",
  "NEGLECT",
  "NEITHER",
  "NEPHEW",
  "NERVE",
  "NEST",
  "NET",
  "NETWORK",
  "NEUTRAL",
  "NEVER",
  "NEWS",
  "NEXT",
  "NICE",
  "NIGHT",
  "NOBLE",
  "NOISE",
  "NOMINEE",
  "NOODLE",
  "NORMAL",
  "NORTH",
  "NOSE",
  "NOTABLE",
  "NOTE",
  "NOTHING",
  "NOTICE",
  "NOVEL",
  "NOW",
  "NUCLEAR",
  "NUMBER",
  "NURSE",
  "NUT",
  "OAK",
  "OBEY",
  "OBJECT",
  "OBLIGE",
  "OBSCURE",
  "OBSERVE",
  "OBTAIN",
  "OBVIOUS",
  "OCCUR",
  "OCEAN",
  "OCTOBER",
  "ODOR",
  "OFF",
  "OFFER",
  "OFFICE",
  "OFTEN",
  "OIL",
  "OKAY",
  "OLD",
  "OLIVE",
  "OLYMPIC",
  "OMIT",
  "ONCE",
  "ONE",
  "ONION",
  "ONLINE",
  "ONLY",
  "OPEN",
  "OPERA",
  "OPINION",
  "OPPOSE",
  "OPTION",
  "ORANGE",
  "ORBIT",
  "ORCHARD",
  "ORDER",
  "ORDINARY",
  "ORGAN",
  "ORIENT",
  "ORIGINAL",
  "ORPHAN",
  "OSTRICH",
  "OTHER",
  "OUTDOOR",
  "OUTER",
  "OUTPUT",
  "OUTSIDE",
  "OVAL",
  "OVEN",
  "OVER",
  "OWN",
  "OWNER",
  "OXYGEN",
  "OYSTER",
  "OZONE",
  "PACT",
  "PADDLE",
  "PAGE",
  "PAIR",
  "PALACE",
  "PALM",
  "PANDA",
  "PANEL",
  "PANIC",
  "PANTHER",
  "PAPER",
  "PARADE",
  "PARENT",
  "PARK",
  "PARROT",
  "PARTY",
  "PASS",
  "PATCH",
  "PATH",
  "PATIENT",
  "PATROL",
  "PATTERN",
  "PAUSE",
  "PAVE",
  "PAYMENT",
  "PEACE",
  "PEANUT",
  "PEAR",
  "PEASANT",
  "PELICAN",
  "PEN",
  "PENALTY",
  "PENCIL",
  "PEOPLE",
  "PEPPER",
  "PERFECT",
  "PERMIT",
  "PERSON",
  "PET",
  "PHONE",
  "PHOTO",
  "PHRASE",
  "PHYSICAL",
  "PIANO",
  "PICNIC",
  "PICTURE",
  "PIECE",
  "PIG",
  "PIGEON",
  "PILL",
  "PILOT",
  "PINK",
  "PIONEER",
  "PIPE",
  "PISTOL",
  "PITCH",
  "PIZZA",
  "PLACE",
  "PLANET",
  "PLASTIC",
  "PLATE",
  "PLAY",
  "PLEASE",
  "PLEDGE",
  "PLUCK",
  "PLUG",
  "PLUNGE",
  "POEM",
  "POET",
  "POINT",
  "POLAR",
  "POLE",
  "POLICE",
  "POND",
  "PONY",
  "POOL",
  "POPULAR",
  "PORTION",
  "POSITION",
  "POSSIBLE",
  "POST",
  "POTATO",
  "POTTERY",
  "POVERTY",
  "POWDER",
  "POWER",
  "PRACTICE",
  "PRAISE",
  "PREDICT",
  "PREFER",
  "PREPARE",
  "PRESENT",
  "PRETTY",
  "PREVENT",
  "PRICE",
  "PRIDE",
  "PRIMARY",
  "PRINT",
  "PRIORITY",
  "PRISON",
  "PRIVATE",
  "PRIZE",
  "PROBLEM",
  "PROCESS",
  "PRODUCE",
  "PROFIT",
  "PROGRAM",
  "PROJECT",
  "PROMOTE",
  "PROOF",
  "PROPERTY",
  "PROSPER",
  "PROTECT",
  "PROUD",
  "PROVIDE",
  "PUBLIC",
  "PUDDING",
  "PULL",
  "PULP",
  "PULSE",
  "PUMPKIN",
  "PUNCH",
  "PUPIL",
  "PUPPY",
  "PURCHASE",
  "PURITY",
  "PURPOSE",
  "PURSE",
  "PUSH",
  "PUT",
  "PUZZLE",
  "PYRAMID",
  "QUALITY",
  "QUANTUM",
  "QUARTER",
  "QUESTION",
  "QUICK",
  "QUIT",
  "QUIZ",
  "QUOTE",
  "RABBIT",
  "RACCOON",
  "RACE",
  "RACK",
  "RADAR",
  "RADIO",
  "RAIL",
  "RAIN",
  "RAISE",
  "RALLY",
  "RAMP",
  "RANCH",
  "RANDOM",
  "RANGE",
  "RAPID",
  "RARE",
  "RATE",
  "RATHER",
  "RAVEN",
  "RAW",
  "RAZOR",
  "READY",
  "REAL",
  "REASON",
  "REBEL",
  "REBUILD",
  "RECALL",
  "RECEIVE",
  "RECIPE",
  "RECORD",
  "RECYCLE",
  "REDUCE",
  "REFLECT",
  "REFORM",
  "REFUSE",
  "REGION",
  "REGRET",
  "REGULAR",
  "REJECT",
  "RELAX",
  "RELEASE",
  "RELIEF",
  "RELY",
  "REMAIN",
  "REMEMBER",
  "REMIND",
  "REMOVE",
  "RENDER",
  "RENEW",
  "RENT",
  "REOPEN",
  "REPAIR",
  "REPEAT",
  "REPLACE",
  "REPORT",
  "REQUIRE",
  "RESCUE",
  "RESEMBLE",
  "RESIST",
  "RESOURCE",
  "RESPONSE",
  "RESULT",
  "RETIRE",
  "RETREAT",
  "RETURN",
  "REUNION",
  "REVEAL",
  "REVIEW",
  "REWARD",
  "RHYTHM",
  "RIB",
  "RIBBON",
  "RICE",
  "RICH",
  "RIDE",
  "RIDGE",
  "RIFLE",
  "RIGHT",
  "RIGID",
  "RING",
  "RIOT",
  "RIPPLE",
  "RISK",
  "RITUAL",
  "RIVAL",
  "RIVER",
  "ROAD",
  "ROAST",
  "ROBOT",
  "ROBUST",
  "ROCKET",
  "ROMANCE",
  "ROOF",
  "ROOKIE",
  "ROOM",
  "ROSE",
  "ROTATE",
  "ROUGH",
  "ROUND",
  "ROUTE",
  "ROYAL",
  "RUBBER",
  "RUDE",
  "RUG",
  "RULE",
  "RUN",
  "RUNWAY",
  "RURAL",
  "SAD",
  "SADDLE",
  "SADNESS",
  "SAFE",
  "SAIL",
  "SALAD",
  "SALMON",
  "SALON",
  "SALT",
  "SALUTE",
  "SAME",
  "SAMPLE",
  "SAND",
  "SATISFY",
  "SATOSHI",
  "SAUCE",
  "SAUSAGE",
  "SAVE",
  "SAY",
  "SCALE",
  "SCAN",
  "SCARE",
  "SCATTER",
  "SCENE",
  "SCHEME",
  "SCHOOL",
  "SCIENCE",
  "SCISSORS",
  "SCORPION",
  "SCOUT",
  "SCRAP",
  "SCREEN",
  "SCRIPT",
  "SCRUB",
  "SEA",
  "SEARCH",
  "SEASON",
  "SEAT",
  "SECOND",
  "SECRET",
  "SECTION",
  "SECURITY",
  "SEED",
  "SEEK",
  "SEGMENT",
  "SELECT",
  "SELL",
  "SEMINAR",
  "SENIOR",
  "SENSE",
  "SENTENCE",
  "SERIES",
  "SERVICE",
  "SESSION",
  "SETTLE",
  "SETUP",
  "SEVEN",
  "SHADOW",
  "SHAFT",
  "SHALLOW",
  "SHARE",
  "SHED",
  "SHELL",
  "SHERIFF",
  "SHIELD",
  "SHIFT",
  "SHINE",
  "SHIP",
  "SHIVER",
  "SHOCK",
  "SHOE",
  "SHOOT",
  "SHOP",
  "SHORT",
  "SHOULDER",
  "SHOVE",
  "SHRIMP",
  "SHRUG",
  "SHUFFLE",
  "SHY",
  "SIBLING",
  "SICK",
  "SIDE",
  "SIEGE",
  "SIGHT",
  "SIGN",
  "SILENT",
  "SILK",
  "SILLY",
  "SILVER",
  "SIMILAR",
  "SIMPLE",
  "SINCE",
  "SING",
  "SIREN",
  "SISTER",
  "SITUATE",
  "SIX",
  "SIZE",
  "SKATE",
  "SKETCH",
  "SKI",
  "SKILL",
  "SKIN",
  "SKIRT",
  "SKULL",
  "SLAB",
  "SLAM",
  "SLEEP",
  "SLENDER",
  "SLICE",
  "SLIDE",
  "SLIGHT",
  "SLIM",
  "SLOGAN",
  "SLOT",
  "SLOW",
  "SLUSH",
  "SMALL",
  "SMART",
  "SMILE",
  "SMOKE",
  "SMOOTH",
  "SNACK",
  "SNAKE",
  "SNAP",
  "SNIFF",
  "SNOW",
  "SOAP",
  "SOCCER",
  "SOCIAL",
  "SOCK",
  "SODA",
  "SOFT",
  "SOLAR",
  "SOLDIER",
  "SOLID",
  "SOLUTION",
  "SOLVE",
  "SOMEONE",
  "SONG",
  "SOON",
  "SORRY",
  "SORT",
  "SOUL",
  "SOUND",
  "SOUP",
  "SOURCE",
  "SOUTH",
  "SPACE",
  "SPARE",
  "SPATIAL",
  "SPAWN",
  "SPEAK",
  "SPECIAL",
  "SPEED",
  "SPELL",
  "SPEND",
  "SPHERE",
  "SPICE",
  "SPIDER",
  "SPIKE",
  "SPIN",
  "SPIRIT",
  "SPLIT",
  "SPOIL",
  "SPONSOR",
  "SPOON",
  "SPORT",
  "SPOT",
  "SPRAY",
  "SPREAD",
  "SPRING",
  "SPY",
  "SQUARE",
  "SQUEEZE",
  "SQUIRREL",
  "STABLE",
  "STADIUM",
  "STAFF",
  "STAGE",
  "STAIRS",
  "STAMP",
  "STAND",
  "START",
  "STATE",
  "STAY",
  "STEAK",
  "STEEL",
  "STEM",
  "STEP",
  "STEREO",
  "STICK",
  "STILL",
  "STING",
  "STOCK",
  "STOMACH",
  "STONE",
  "STOOL",
  "STORY",
  "STOVE",
  "STRATEGY",
  "STREET",
  "STRIKE",
  "STRONG",
  "STRUGGLE",
  "STUDENT",
  "STUFF",
  "STUMBLE",
  "STYLE",
  "SUBJECT",
  "SUBMIT",
  "SUBWAY",
  "SUCCESS",
  "SUCH",
  "SUDDEN",
  "SUFFER",
  "SUGAR",
  "SUGGEST",
  "SUIT",
  "SUMMER",
  "SUN",
  "SUNNY",
  "SUNSET",
  "SUPER",
  "SUPPLY",
  "SUPREME",
  "SURE",
  "SURFACE",
  "SURGE",
  "SURPRISE",
  "SURROUND",
  "SURVEY",
  "SUSPECT",
  "SUSTAIN",
  "SWALLOW",
  "SWAMP",
  "SWAP",
  "SWARM",
  "SWEAR",
  "SWEET",
  "SWIFT",
  "SWIM",
  "SWING",
  "SWITCH",
  "SWORD",
  "SYMBOL",
  "SYMPTOM",
  "SYRUP",
  "SYSTEM",
  "TABLE",
  "TACKLE",
  "TAG",
  "TAIL",
  "TALENT",
  "TALK",
  "TANK",
  "TAPE",
  "TARGET",
  "TASK",
  "TASTE",
  "TATTOO",
  "TAXI",
  "TEACH",
  "TEAM",
  "TELL",
  "TEN",
  "TENANT",
  "TENNIS",
  "TENT",
  "TERM",
  "TEST",
  "TEXT",
  "THANK",
  "THAT",
  "THEME",
  "THEN",
  "THEORY",
  "THERE",
  "THEY",
  "THING",
  "THIS",
  "THOUGHT",
  "THREE",
  "THRIVE",
  "THROW",
  "THUMB",
  "THUNDER",
  "TICKET",
  "TIDE",
  "TIGER",
  "TILT",
  "TIMBER",
  "TIME",
  "TINY",
  "TIP",
  "TIRED",
  "TISSUE",
  "TITLE",
  "TOAST",
  "TOBACCO",
  "TODAY",
  "TODDLER",
  "TOE",
  "TOGETHER",
  "TOILET",
  "TOKEN",
  "TOMATO",
  "TOMORROW",
  "TONE",
  "TONGUE",
  "TONIGHT",
  "TOOL",
  "TOOTH",
  "TOP",
  "TOPIC",
  "TOPPLE",
  "TORCH",
  "TORNADO",
  "TORTOISE",
  "TOSS",
  "TOTAL",
  "TOURIST",
  "TOWARD",
  "TOWER",
  "TOWN",
  "TOY",
  "TRACK",
  "TRADE",
  "TRAFFIC",
  "TRAGIC",
  "TRAIN",
  "TRANSFER",
  "TRAP",
  "TRASH",
  "TRAVEL",
  "TRAY",
  "TREAT",
  "TREE",
  "TREND",
  "TRIAL",
  "TRIBE",
  "TRICK",
  "TRIGGER",
  "TRIM",
  "TRIP",
  "TROPHY",
  "TROUBLE",
  "TRUCK",
  "TRUE",
  "TRULY",
  "TRUMPET",
  "TRUST",
  "TRUTH",
  "TRY",
  "TUBE",
  "TUITION",
  "TUMBLE",
  "TUNA",
  "TUNNEL",
  "TURKEY",
  "TURN",
  "TURTLE",
  "TWELVE",
  "TWENTY",
  "TWICE",
  "TWIN",
  "TWIST",
  "TWO",
  "TYPE",
  "TYPICAL",
  "UGLY",
  "UMBRELLA",
  "UNABLE",
  "UNAWARE",
  "UNCLE",
  "UNCOVER",
  "UNDER",
  "UNDO",
  "UNFAIR",
  "UNFOLD",
  "UNHAPPY",
  "UNIFORM",
  "UNIQUE",
  "UNIT",
  "UNIVERSE",
  "UNKNOWN",
  "UNLOCK",
  "UNTIL",
  "UNUSUAL",
  "UNVEIL",
  "UPDATE",
  "UPGRADE",
  "UPHOLD",
  "UPON",
  "UPPER",
  "UPSET",
  "URBAN",
  "URGE",
  "USAGE",
  "USE",
  "USED",
  "USEFUL",
  "USELESS",
  "USUAL",
  "UTILITY",
  "VACANT",
  "VACUUM",
  "VAGUE",
  "VALID",
  "VALLEY",
  "VALVE",
  "VAN",
  "VANISH",
  "VAPOR",
  "VARIOUS",
  "VAST",
  "VAULT",
  "VEHICLE",
  "VELVET",
  "VENDOR",
  "VENTURE",
  "VENUE",
  "VERB",
  "VERIFY",
  "VERSION",
  "VERY",
  "VESSEL",
  "VETERAN",
  "VIABLE",
  "VIBRANT",
  "VICIOUS",
  "VICTORY",
  "VIDEO",
  "VIEW",
  "VILLAGE",
  "VINTAGE",
  "VIOLIN",
  "VIRTUAL",
  "VIRUS",
  "VISA",
  "VISIT",
  "VISUAL",
  "VITAL",
  "VIVID",
  "VOCAL",
  "VOICE",
  "VOID",
  "VOLCANO",
  "VOLUME",
  "VOTE",
  "VOYAGE",
  "WAGE",
  "WAGON",
  "WAIT",
  "WALK",
  "WALL",
  "WALNUT",
  "WANT",
  "WARFARE",
  "WARM",
  "WARRIOR",
  "WASH",
  "WASP",
  "WASTE",
  "WATER",
  "WAVE",
  "WAY",
  "WEALTH",
  "WEAPON",
  "WEAR",
  "WEASEL",
  "WEATHER",
  "WEB",
  "WEDDING",
  "WEEKEND",
  "WEIRD",
  "WELCOME",
  "WEST",
  "WET",
  "WHALE",
  "WHAT",
  "WHEAT",
  "WHEEL",
  "WHEN",
  "WHERE",
  "WHIP",
  "WHISPER",
  "WIDE",
  "WIDTH",
  "WIFE",
  "WILD",
  "WILL",
  "WIN",
  "WINDOW",
  "WINE",
  "WING",
  "WINK",
  "WINNER",
  "WINTER",
  "WIRE",
  "WISDOM",
  "WISE",
  "WISH",
  "WITNESS",
  "WOLF",
  "WOMAN",
  "WONDER",
  "WOOD",
  "WOOL",
  "WORD",
  "WORK",
  "WORLD",
  "WORRY",
  "WORTH",
  "WRAP",
  "WRECK",
  "WRESTLE",
  "WRIST",
  "WRITE",
  "WRONG",
  "YARD",
  "YEAR",
  "YELLOW",
  "YOU",
  "YOUNG",
  "YOUTH",
  "ZEBRA",
  "ZERO",
  "ZONE",
  "ZOO"
];
const Autocomplete = ({
  accept,
  onChange,
  onBlur,
  placeholder,
  autoComplete,
  type,
  name: name2,
  id: id2,
  extraClass,
  value: value2,
  endIcon,
  startIcon,
  error,
  handleEndIconClick,
  onKeyUp,
  disabled,
  mt,
  mb: mb2,
  suggestions,
  onPaste
}) => {
  const suggestionsContainerRef = reactExports.useRef(null);
  const [selectedIndex, setSelectedIndex] = reactExports.useState(-1);
  const [filteredSuggestions, setFilteredSuggestions] = reactExports.useState([]);
  const wrapperBase = `${mt} ${mb2} ${startIcon ? "grid grid-cols-[1fr_auto] grid-rows-1" : "flex"}`;
  let base = `core-black-contrast-2 w-full px-4 py-3.5 ${filteredSuggestions.length > 0 ? "rounded-t" : "rounded"} disabled:opacity-40 disabled:cursor-not-allowed focus:outline-none focus:border-[#fff] border-[#fff] focus:border-[#464C4F]`;
  if (extraClass) {
    base += ` ${extraClass}`;
  }
  const handleKeyDown = (event) => {
    switch (event.key) {
      case "ArrowDown":
        setFilteredSuggestions(
          suggestions.filter((s3) => s3.startsWith(value2.toUpperCase()))
        );
        setSelectedIndex(
          (prevIndex) => Math.min(prevIndex + 1, filteredSuggestions.length - 1)
        );
        break;
      case "ArrowUp":
        if (selectedIndex === 0) {
          setFilteredSuggestions([]);
        }
        setSelectedIndex((prevIndex) => Math.max(prevIndex - 1, 0));
        break;
      case "Enter":
        if (selectedIndex !== -1 && filteredSuggestions[selectedIndex]) {
          onChange(filteredSuggestions[selectedIndex]);
          setFilteredSuggestions([]);
        }
        break;
      case "Tab":
        if (selectedIndex === -1) {
          setSelectedIndex(0);
          event.preventDefault();
        }
        if (selectedIndex !== -1 && filteredSuggestions[selectedIndex]) {
          onChange(filteredSuggestions[selectedIndex]);
          setFilteredSuggestions([]);
        }
        break;
      case "Escape":
        setFilteredSuggestions([]);
        break;
    }
  };
  const handleInputChange = (event) => {
    const value22 = event.target.value;
    onChange(value22);
    if (value22.length === 0) {
      return setFilteredSuggestions([]);
    }
    const filtered = suggestions.filter(
      (s3) => s3.startsWith(value22.toUpperCase())
    );
    setFilteredSuggestions(filtered);
  };
  const handleSelect = (suggestion) => {
    onChange(suggestion);
    setFilteredSuggestions([]);
  };
  reactExports.useEffect(() => {
    if (suggestionsContainerRef.current && selectedIndex !== -1) {
      const selectedSuggestion = (
        // @ts-ignore
        suggestionsContainerRef.current.children[selectedIndex]
      );
      if (selectedSuggestion) {
        selectedSuggestion.scrollIntoView({
          behavior: "smooth",
          block: "nearest"
        });
      }
    }
  }, [selectedIndex]);
  reactExports.useEffect(() => {
    const handleDocumentClick = (event) => {
      if (suggestionsContainerRef.current && // @ts-ignore
      !suggestionsContainerRef.current.contains(event.target)) {
        setFilteredSuggestions([]);
      }
    };
    document.addEventListener("click", handleDocumentClick);
    return () => {
      document.removeEventListener("click", handleDocumentClick);
    };
  }, []);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: `flex flex-col gap-2`, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: `${wrapperBase}`, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative w-full", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          onPaste,
          disabled,
          onKeyDown: handleKeyDown,
          autoComplete: autoComplete ? autoComplete : "off",
          onBlur,
          name: name2,
          id: id2,
          value: value2,
          type,
          placeholder,
          className: `${base} ${startIcon ? "pl-10" : ""} ${endIcon ? "pr-12" : ""}`,
          onChange: handleInputChange,
          accept,
          onKeyUp
        }
      ),
      filteredSuggestions.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
        "ul",
        {
          ref: suggestionsContainerRef,
          id: `autocomplete_list_${id2}`,
          className: `max-h-[150px] scroll overflow-y-auto absolute top-[100%] z-[1000] w-full bg-white px-0 rounded-b-lg animate-fadeIn`,
          children: filteredSuggestions.filter((s3) => s3.startsWith(value2.toUpperCase())).map((s3, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "li",
            {
              onClick: () => {
                handleSelect(s3);
              },
              className: `${selectedIndex === index2 ? "bg-slate-200" : ""} first:pb-2 last:border-b-none! hover:cursor-pointer hover:bg-slate-200 hover:font-semibold ${startIcon ? "grid grid-cols-[32px_auto] grid-rows-1" : "flex"}  px-2 pt-2 text-black font-light ${filteredSuggestions.length > 1 ? "border-b pb-2" : ""}`,
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", {}),
                s3
              ]
            },
            `word_${s3}`
          ))
        }
      ),
      startIcon,
      !!endIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          onClick: disabled ? void 0 : handleEndIconClick,
          className: "pr-4 my-auto absolute right-[1px] top-4 bottom-0",
          children: endIcon
        }
      )
    ] }) }),
    error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left", children: error })
  ] });
};
const validationSchema = create$3().shape({
  seedPhrase: create$3({
    "1": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "2": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "3": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "4": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "5": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "6": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "7": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "8": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "9": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "10": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "11": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "12": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "13": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "14": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "15": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "16": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "17": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "18": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "19": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "20": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "21": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "22": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "23": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "24": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word")
  }),
  keyuses: create$5().required(
    "Please enter the maximum times you have signed a transaction.  Otherwise leave the default 1000 if you think you haven't signed over 1000 transactions"
  )
});
const validationSchemaNoArchive = create$3().shape({
  seedPhrase: create$3({
    "1": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "2": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "3": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "4": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "5": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "6": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "7": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "8": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "9": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "10": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "11": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "12": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "13": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "14": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "15": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "16": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "17": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "18": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "19": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "20": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "21": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "22": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "23": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
    "24": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word")
  }),
  keyuses: create$5().required(
    "Please enter the maximum times you have signed a transaction.  Otherwise leave the default 1000 if you think you haven't signed over 1000 transactions"
  ),
  host: create$6().required("A host is required")
});
const SeedResyncReset = () => {
  const {
    setBackButton,
    displayBackButton: displayHeaderBackButton,
    shuttingDown
  } = reactExports.useContext(appContext);
  const { archives, getArchives } = reactExports.useContext(appContext);
  const [MDSShutdown, setMDSShutdown] = reactExports.useState(false);
  const [haveArchive, setHaveArchive] = reactExports.useState(false);
  const [noHaveArchive, setNoHaveArchive] = reactExports.useState(false);
  const [resetFileField, setResetFileField] = reactExports.useState(0);
  const [archiveFileSelection, setArchiveFileSelection] = reactExports.useState("local");
  const [beginResyncing, setBeginResyncing] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [progress, setProgress] = reactExports.useState(0);
  const [fileUpload, setFileUpload] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(0);
  const [stepNo, setStepNo] = reactExports.useState(0);
  const [tooltip2, setTooltip] = reactExports.useState({ host: false, keyuses: false });
  const navigate = useNavigate();
  const handlePaste = async (event, setFieldValue, validateForm, setFieldError, setFieldTouched) => {
    const clipboardData = event.clipboardData;
    const pastedText = clipboardData.getData("text");
    const isPastedTextASeedPhrase = pastedText.split(" ").length === 24;
    if (isPastedTextASeedPhrase) {
      event.preventDefault();
      pastedText.split(" ").forEach((_seed, index2) => setFieldValue(`seedPhrase.${index2 + 1}`, ""));
      pastedText.split(" ").forEach((_seed, index2) => setFieldValue(`seedPhrase.${index2 + 1}`, _seed.toUpperCase()));
      const errors = await validateForm();
      if (errors.seedPhrase) {
        Object.keys(errors.seedPhrase).map((key2) => {
          if (errors.seedPhrase[key2]) {
            setFieldError(`seedPhrase.${key2}`, errors.seedPhrase[key2]);
            setFieldTouched(`seedPhrase.${key2}`, errors.seedPhrase[key2]);
          }
        });
      }
      return pastedText;
    }
    return false;
  };
  reactExports.useEffect(() => {
    if (shuttingDown) {
      setMDSShutdown(true);
    }
  }, [shuttingDown]);
  reactExports.useEffect(() => {
    setBackButton({
      display: true,
      onClickHandler: () => navigate("/dashboard/archivereset"),
      title: "Archive Reset"
    });
  }, []);
  const handleArchiveSelector = (event) => {
    setArchiveFileSelection(event.target.value);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    haveArchive && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Formik,
            {
              validationSchema,
              initialValues: {
                seedPhrase: {
                  1: "".toUpperCase(),
                  2: "".toUpperCase(),
                  3: "".toUpperCase(),
                  4: "".toUpperCase(),
                  5: "".toUpperCase(),
                  6: "".toUpperCase(),
                  7: "".toUpperCase(),
                  8: "".toUpperCase(),
                  9: "".toUpperCase(),
                  10: "".toUpperCase(),
                  11: "".toUpperCase(),
                  12: "".toUpperCase(),
                  13: "".toUpperCase(),
                  14: "".toUpperCase(),
                  15: "".toUpperCase(),
                  16: "".toUpperCase(),
                  17: "".toUpperCase(),
                  18: "".toUpperCase(),
                  19: "".toUpperCase(),
                  20: "".toUpperCase(),
                  21: "".toUpperCase(),
                  22: "".toUpperCase(),
                  23: "".toUpperCase(),
                  24: "".toUpperCase()
                },
                keyuses: 1e3,
                host: "",
                upload: null,
                file: ""
              },
              onSubmit: async (formData) => {
                setBeginResyncing(true);
                try {
                  const phraseAsString = Object.values(formData.seedPhrase).toString().replaceAll(",", " ");
                  const { keyuses, file } = formData;
                  const fullPath = await getPath(file);
                  await resetSeedSync(fullPath, phraseAsString, keyuses).catch((error2) => {
                    throw new Error(error2);
                  });
                } catch (error2) {
                  setError(
                    error2 instanceof Error ? error2.message : "An unexpected error occurred"
                  );
                }
              },
              children: ({
                handleSubmit,
                setFieldValue,
                errors,
                touched,
                values,
                handleBlur,
                handleChange,
                isSubmitting,
                resetForm,
                isValid: isValid2,
                dirty,
                submitForm,
                validateForm,
                setFieldError,
                setFieldTouched
              }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                step === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center mb-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "svg",
                    {
                      width: "64",
                      height: "64",
                      viewBox: "0 0 64 64",
                      fill: "none",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "mask",
                          {
                            id: "mask0_1546_39570",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "64",
                            height: "64",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1546_39570)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "path",
                          {
                            d: "M31.9993 44.6146C32.6096 44.6146 33.1211 44.4082 33.5339 43.9954C33.9467 43.5826 34.1531 43.071 34.1531 42.4608C34.1531 41.8506 33.9467 41.339 33.5339 40.9262C33.1211 40.5134 32.6096 40.307 31.9993 40.307C31.389 40.307 30.8775 40.5134 30.4647 40.9262C30.0519 41.339 29.8455 41.8506 29.8455 42.4608C29.8455 43.071 30.0519 43.5826 30.4647 43.9954C30.8775 44.4082 31.389 44.6146 31.9993 44.6146ZM29.9994 34.8711H33.9992V18.8711H29.9994V34.8711ZM32.0037 57.3326C28.4999 57.3326 25.2065 56.6677 22.1235 55.3379C19.0404 54.0081 16.3586 52.2034 14.078 49.9239C11.7974 47.6443 9.99191 44.9636 8.66155 41.882C7.33119 38.8003 6.66602 35.5076 6.66602 32.0038C6.66602 28.4999 7.3309 25.2065 8.66068 22.1235C9.99046 19.0404 11.7951 16.3586 14.0747 14.078C16.3543 11.7974 19.0349 9.99191 22.1166 8.66155C25.1983 7.3312 28.491 6.66602 31.9948 6.66602C35.4986 6.66602 38.7921 7.33091 41.8751 8.66069C44.9582 9.99046 47.64 11.7951 49.9206 14.0747C52.2012 16.3543 54.0067 19.0349 55.337 22.1166C56.6674 25.1983 57.3326 28.491 57.3326 31.9948C57.3326 35.4986 56.6677 38.7921 55.3379 41.8751C54.0081 44.9582 52.2034 47.64 49.9239 49.9206C47.6443 52.2012 44.9636 54.0067 41.882 55.337C38.8003 56.6674 35.5076 57.3326 32.0037 57.3326Z",
                            fill: "#F4F4F5"
                          }
                        ) })
                      ]
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Please note" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-6 text-center", children: "Importing a seed phrase is irreversible. Consider taking a backup of this node before restoring." }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "primary", onClick: () => setStep(1), children: "Select archive file" })
                ] }),
                step === 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Select an archive" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-6 text-center", children: "Select a local archive or upload a new one" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative mb-4", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "select",
                      {
                        disabled: fileUpload,
                        defaultValue: archiveFileSelection,
                        onChange: (e3) => {
                          handleArchiveSelector(e3);
                          resetForm();
                        },
                        className: "p-4 bg-black hover:cursor-pointer rounded w-full hover:opacity-80",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("option", { id: "value", value: "local", children: "Select an internal archive file" }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("option", { id: "split", value: "upload", children: "Upload an archive file" })
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "svg",
                      {
                        className: "my-auto absolute right-2 top-[12px]",
                        width: "32",
                        height: "33",
                        viewBox: "0 0 32 33",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "mask",
                            {
                              id: "mask0_2226_53255",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "32",
                              height: "33",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "rect",
                                {
                                  y: "0.550781",
                                  width: "32",
                                  height: "32",
                                  fill: "#D9D9D9"
                                }
                              )
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_2226_53255)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "path",
                            {
                              d: "M16.0004 20.6172L8.4668 13.0508L9.6668 11.8844L16.0004 18.2172L22.334 11.8844L23.534 13.0844L16.0004 20.6172Z",
                              fill: "#FaFaFF"
                            }
                          ) })
                        ]
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    archiveFileSelection === "local" && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        List,
                        {
                          disabled: archives.length === 0,
                          options: archives,
                          setForm: async (option) => {
                            if (option.length) {
                              setFieldValue(
                                "file",
                                "/archives/" + option
                              );
                            }
                          }
                        }
                      ),
                      archives.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm mt-2 text-good", children: "No archives found in your internal files. Upload a new one!" })
                    ] }),
                    !fileUpload && archiveFileSelection === "upload" && !values.file.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      FileChooser,
                      {
                        disabled: isSubmitting,
                        keyValue: resetFileField,
                        handleEndIconClick: () => {
                          setResetFileField((prev) => prev + 1);
                          setFieldValue("upload", void 0);
                        },
                        error: errors.upload && errors.upload ? errors.upload : false,
                        extraClass: "core-grey-20",
                        accept: ".gzip,.dat",
                        onChange: (e3) => {
                          if (e3.target.files) {
                            setFieldValue(
                              "upload",
                              e3.target.files[0]
                            );
                          }
                        },
                        onBlur: handleBlur,
                        placeholder: "Select file",
                        type: "file",
                        id: "upload",
                        name: "upload",
                        endIcon: values.upload && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                          "svg",
                          {
                            xmlns: "http://www.w3.org/2000/svg",
                            width: "25",
                            height: "24",
                            viewBox: "0 0 25 24",
                            fill: "none",
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "mask",
                                {
                                  id: "mask0_645_17003",
                                  maskUnits: "userSpaceOnUse",
                                  x: "0",
                                  y: "0",
                                  width: "25",
                                  height: "24",
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "rect",
                                    {
                                      x: "0.5",
                                      width: "24",
                                      height: "24",
                                      fill: "#D9D9D9"
                                    }
                                  )
                                }
                              ),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_645_17003)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "path",
                                {
                                  d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                  fill: "#91919D"
                                }
                              ) })
                            ]
                          }
                        )
                      }
                    ),
                    fileUpload && archiveFileSelection === "upload" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast-2 h-[56px] rounded p-4 mt-4 relative", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black", children: [
                        (Number(progress) * 100).toFixed(0),
                        "%"
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "div",
                        {
                          className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                          style: {
                            transform: `scaleX(${progress})`,
                            left: "-1px",
                            top: "-2px",
                            width: "calc(100% + 1px)"
                          }
                        }
                      )
                    ] }),
                    fileUpload && values.upload && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm mt-2", children: [
                      "Uploading",
                      " ",
                      values.upload.name ? values.upload.name + "..." : ""
                    ] }),
                    !fileUpload && !!values.file.length && archiveFileSelection === "upload" && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-good flex items-center mt-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "svg",
                        {
                          xmlns: "http://www.w3.org/2000/svg",
                          height: "24",
                          viewBox: "0 -960 960 960",
                          width: "24",
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "path",
                            {
                              fill: "#4FE3C1",
                              d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                            }
                          )
                        }
                      ),
                      values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]
                    ] }),
                    values.upload && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: !fileUpload && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        variant: "primary",
                        extraClass: "mt-4",
                        onClick: async () => {
                          setFileUpload(true);
                          setFieldValue("file", "");
                          window.MDS.file.upload(
                            values.upload,
                            async function(resp) {
                              if (resp.allchunks >= 10) {
                                setProgress(
                                  resp.chunk / resp.allchunks
                                );
                              }
                              const fileName = resp.filename;
                              if (resp.allchunks === resp.chunk) {
                                setFileUpload(false);
                                window.MDS.file.move(
                                  "/fileupload/" + fileName,
                                  "/archives/" + fileName,
                                  (resp2) => {
                                    if (resp2.status) {
                                      setFieldValue(
                                        "file",
                                        "/archives/" + fileName
                                      );
                                      setFieldValue(
                                        "upload",
                                        void 0
                                      );
                                      setFileUpload(false);
                                      getArchives();
                                    }
                                  }
                                );
                              }
                            }
                          );
                        },
                        children: "Upload"
                      }
                    ) }),
                    values.file && values.file.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        onClick: () => setStep(2),
                        variant: "primary",
                        extraClass: "mt-4",
                        children: "Continue"
                      }
                    ),
                    !fileUpload && archiveFileSelection === "upload" && !!values.file.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Button,
                      {
                        onClick: () => setFieldValue("file", ""),
                        variant: "tertiary",
                        extraClass: "mt-4",
                        children: "Upload a different file"
                      }
                    )
                  ] })
                ] }),
                step === 2 && reactDomExports.createPortal(
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    SharedDialog,
                    {
                      nav: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        Button,
                        {
                          onClick: () => setStep(1),
                          extraClass: "w-max !bg-transparent text-white border-b-1 flex items-center hover:opacity-80",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "svg",
                              {
                                width: "16",
                                height: "17",
                                viewBox: "0 0 16 17",
                                fill: "none",
                                xmlns: "http://www.w3.org/2000/svg",
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "mask",
                                    {
                                      id: "mask0_1546_42097",
                                      maskUnits: "userSpaceOnUse",
                                      x: "0",
                                      y: "0",
                                      width: "16",
                                      height: "17",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "rect",
                                        {
                                          y: "0.5",
                                          width: "16",
                                          height: "16",
                                          fill: "#D9D9D9"
                                        }
                                      )
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1546_42097)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "path",
                                    {
                                      d: "M6.39969 14.6685L0.230469 8.4993L6.39969 2.33008L7.29582 3.22621L2.02275 8.4993L7.29582 13.7724L6.39969 14.6685Z",
                                      fill: "#F9F9FA"
                                    }
                                  ) })
                                ]
                              }
                            ),
                            "Cancel"
                          ]
                        }
                      ),
                      main: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-2xl mb-8 text-center", children: [
                          "Enter your ",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          " 24-word seed phrase"
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "grid grid-cols-2 lg:grid-cols-4 gap-2 mb-4", children: values.seedPhrase && Object.keys(values.seedPhrase).map(
                          (seed) => /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            Autocomplete,
                            {
                              onPaste: (e3) => handlePaste(e3, setFieldValue, validateForm, setFieldError, setFieldTouched),
                              extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                              disabled: false,
                              placeholder: "",
                              type: "text",
                              value: values.seedPhrase[seed],
                              id: `seedPhrase.${seed}`,
                              name: `seedPhrase.${seed}`,
                              suggestions: bip39,
                              onChange: (value2) => setFieldValue(
                                `seedPhrase.${seed}`,
                                value2
                              ),
                              onBlur: handleBlur,
                              error: getIn$1(
                                touched,
                                `seedPhrase.${seed}`
                              ) && getIn$1(
                                errors,
                                `seedPhrase.${seed}`
                              ) ? getIn$1(
                                errors,
                                `seedPhrase.${seed}`
                              ) : false,
                              startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "h4",
                                {
                                  className: `absolute top-[15px] left-[15px] ${getIn$1(
                                    touched,
                                    `seedPhrase.${seed}`
                                  ) && getIn$1(
                                    errors,
                                    `seedPhrase.${seed}`
                                  ) ? "fa-error" : "fa"} color-core-grey text-base z-20`,
                                  children: seed
                                }
                              )
                            }
                          ) }, `seedInputField_${seed}`)
                        ) }),
                        dirty && isValid2 && /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 50, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStep(3), children: "I'm ready" }) })
                      ] }),
                      primary: null,
                      secondary: null
                    }
                  ),
                  document.body
                ),
                step === 3 && reactDomExports.createPortal(
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    SharedDialog,
                    {
                      main: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Final step" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "mb-2 flex gap-2 items-center mt-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: "Key uses" }),
                          !tooltip2.keyuses && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-4 h-4",
                              onClick: () => setTooltip({
                                ...tooltip2,
                                keyuses: true
                              }),
                              alt: "tooltip",
                              src: "./assets/help_filled.svg"
                            }
                          ),
                          !!tooltip2.keyuses && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-4 h-4",
                              onClick: () => setTooltip({
                                ...tooltip2,
                                keyuses: false
                              }),
                              alt: "tooltip-dismiss",
                              src: "./assets/cancel_filled.svg"
                            }
                          )
                        ] }),
                        tooltip2.keyuses && /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Tooltip,
                          {
                            onClick: () => setTooltip({ ...tooltip2, keyuses: false }),
                            content: "How many times at most you used your keys. Your keys are used for signing every transaction you make. Every time you import your seed phrase this needs to be higher.",
                            position: 75
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Input,
                          {
                            extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                            disabled: false,
                            placeholder: "default 1000",
                            type: "text",
                            value: values.keyuses,
                            id: "keyuses",
                            name: "keyuses",
                            onChange: handleChange,
                            onBlur: handleBlur,
                            error: errors.keyuses ? errors.keyuses : false
                          }
                        ),
                        values.keyuses && values.keyuses < 1e3 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm mt-2 opacity-50", children: "We suggest for you to use 1000 as a safe number" })
                      ] }),
                      primary: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 50, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          disabled: !isValid2,
                          extraClass: "mt-4",
                          onClick: () => setStep(4),
                          children: "Re-sync"
                        }
                      ) }),
                      secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          extraClass: "mt-4",
                          variant: "tertiary",
                          onClick: () => {
                            setStep(2);
                            if (!values.keyuses || errors.keyuses) {
                              setFieldValue("keyuses", 1e3);
                            }
                          },
                          children: "Cancel"
                        }
                      )
                    }
                  ),
                  document.body
                ),
                step === 4 && reactDomExports.createPortal(
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    SharedDialog,
                    {
                      main: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Wipe this node?" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-center mb-4", children: [
                          "This node will be wiped and recreated with the given seed phrase. ",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          " This process can take up to an hour, please connect your device to a power source before you continue."
                        ] })
                      ] }) }),
                      primary: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 50, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          disabled: !isValid2,
                          onClick: () => submitForm(),
                          children: "Start re-sync"
                        }
                      ) }),
                      secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          extraClass: "mt-4",
                          variant: "tertiary",
                          onClick: () => setStep(3),
                          children: "Cancel"
                        }
                      )
                    }
                  ),
                  document.body
                )
              ] })
            }
          ) }),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            error && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                onClick: () => {
                  setError(false);
                  setBeginResyncing(false);
                },
                children: "Cancel"
              }
            ),
            !fileUpload && !error && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                variant: "tertiary",
                extraClass: "mt-2",
                onClick: () => {
                  setHaveArchive(false);
                  setStep(0);
                },
                children: "Cancel"
              }
            )
          ] })
        }
      ),
      document.body
    ),
    noHaveArchive && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Formik,
            {
              validationSchema: validationSchemaNoArchive,
              initialValues: {
                seedPhrase: {
                  1: "".toUpperCase(),
                  2: "".toUpperCase(),
                  3: "".toUpperCase(),
                  4: "".toUpperCase(),
                  5: "".toUpperCase(),
                  6: "".toUpperCase(),
                  7: "".toUpperCase(),
                  8: "".toUpperCase(),
                  9: "".toUpperCase(),
                  10: "".toUpperCase(),
                  11: "".toUpperCase(),
                  12: "".toUpperCase(),
                  13: "".toUpperCase(),
                  14: "".toUpperCase(),
                  15: "".toUpperCase(),
                  16: "".toUpperCase(),
                  17: "".toUpperCase(),
                  18: "".toUpperCase(),
                  19: "".toUpperCase(),
                  20: "".toUpperCase(),
                  21: "".toUpperCase(),
                  22: "".toUpperCase(),
                  23: "".toUpperCase(),
                  24: "".toUpperCase()
                },
                keyuses: 1e3,
                host: ""
              },
              onSubmit: async (formData) => {
                setBeginResyncing(true);
                try {
                  const phraseAsString = Object.values(formData.seedPhrase).toString().replaceAll(",", " ");
                  const { keyuses, host: host2 } = formData;
                  await importSeedPhrase(phraseAsString, host2, keyuses).catch((error2) => {
                    throw error2;
                  });
                } catch (error2) {
                  setError(error2);
                }
              },
              children: ({
                setFieldValue,
                dirty,
                handleSubmit,
                values,
                handleChange,
                handleBlur,
                touched,
                submitForm,
                isValid: isValid2,
                errors,
                validateForm,
                setFieldError,
                setFieldTouched
              }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, children: [
                stepNo === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs(FadeIn, { delay: 0, children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "svg",
                      {
                        className: "mb-2",
                        width: "64",
                        height: "64",
                        viewBox: "0 0 64 64",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "mask",
                            {
                              id: "mask0_1607_21111",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "64",
                              height: "64",
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1607_21111)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "path",
                            {
                              d: "M31.9993 44.6146C32.6096 44.6146 33.1211 44.4082 33.5339 43.9954C33.9467 43.5826 34.1531 43.071 34.1531 42.4608C34.1531 41.8506 33.9467 41.339 33.5339 40.9262C33.1211 40.5134 32.6096 40.307 31.9993 40.307C31.389 40.307 30.8775 40.5134 30.4647 40.9262C30.0519 41.339 29.8455 41.8506 29.8455 42.4608C29.8455 43.071 30.0519 43.5826 30.4647 43.9954C30.8775 44.4082 31.389 44.6146 31.9993 44.6146ZM29.9994 34.8711H33.9992V18.8711H29.9994V34.8711ZM32.0037 57.3326C28.4999 57.3326 25.2065 56.6677 22.1235 55.3379C19.0404 54.0081 16.3586 52.2034 14.078 49.9239C11.7974 47.6443 9.99191 44.9636 8.66155 41.882C7.33119 38.8003 6.66602 35.5076 6.66602 32.0038C6.66602 28.4999 7.3309 25.2065 8.66068 22.1235C9.99046 19.0404 11.7951 16.3586 14.0747 14.078C16.3543 11.7974 19.0349 9.99191 22.1166 8.66155C25.1983 7.3312 28.491 6.66602 31.9948 6.66602C35.4986 6.66602 38.7921 7.33091 41.8751 8.66069C44.9582 9.99046 47.64 11.7951 49.9206 14.0747C52.2012 16.3543 54.0067 19.0349 55.337 22.1166C56.6674 25.1983 57.3326 28.491 57.3326 31.9948C57.3326 35.4986 56.6677 38.7921 55.3379 41.8751C54.0081 44.9582 52.2034 47.64 49.9239 49.9206C47.6443 52.2012 44.9636 54.0067 41.882 55.337C38.8003 56.6674 35.5076 57.3326 32.0037 57.3326Z",
                              fill: "#F4F4F5"
                            }
                          ) })
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Restore without archive file" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-6 text-center", children: [
                      "Restoring without an archive file can take much longer to re-sync the chain. ",
                      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                      " Please ensure you have a stable internet connection and plug your device into a power source before continuing."
                    ] })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      variant: "primary",
                      type: "submit",
                      onClick: () => setStepNo(1),
                      children: "Continue"
                    }
                  )
                ] }),
                stepNo === 1 && reactDomExports.createPortal(
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    SharedDialog,
                    {
                      nav: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        Button,
                        {
                          onClick: () => {
                            setStepNo(0);
                            setNoHaveArchive(false);
                          },
                          extraClass: "w-max !bg-transparent text-white border-b-1 flex items-center hover:opacity-80",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                              "svg",
                              {
                                width: "16",
                                height: "17",
                                viewBox: "0 0 16 17",
                                fill: "none",
                                xmlns: "http://www.w3.org/2000/svg",
                                children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "mask",
                                    {
                                      id: "mask0_1546_42097",
                                      maskUnits: "userSpaceOnUse",
                                      x: "0",
                                      y: "0",
                                      width: "16",
                                      height: "17",
                                      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                        "rect",
                                        {
                                          y: "0.5",
                                          width: "16",
                                          height: "16",
                                          fill: "#D9D9D9"
                                        }
                                      )
                                    }
                                  ),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1546_42097)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    "path",
                                    {
                                      d: "M6.39969 14.6685L0.230469 8.4993L6.39969 2.33008L7.29582 3.22621L2.02275 8.4993L7.29582 13.7724L6.39969 14.6685Z",
                                      fill: "#F9F9FA"
                                    }
                                  ) })
                                ]
                              }
                            ),
                            "Cancel"
                          ]
                        }
                      ),
                      main: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-2xl mb-8 text-center", children: [
                          "Enter your ",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          " 24-word seed phrase",
                          " "
                        ] }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "grid grid-cols-2 lg:grid-cols-4 gap-2 mb-4", children: values.seedPhrase && Object.keys(values.seedPhrase).map(
                          (seed) => /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                            Autocomplete,
                            {
                              onPaste: (e3) => handlePaste(e3, setFieldValue, validateForm, setFieldError, setFieldTouched),
                              extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                              disabled: false,
                              placeholder: "",
                              type: "text",
                              value: values.seedPhrase[seed],
                              id: `seedPhrase.${seed}`,
                              name: `seedPhrase.${seed}`,
                              suggestions: bip39,
                              onChange: (value2) => setFieldValue(
                                `seedPhrase.${seed}`,
                                value2
                              ),
                              onBlur: handleBlur,
                              error: getIn$1(
                                touched,
                                `seedPhrase.${seed}`
                              ) && getIn$1(
                                errors,
                                `seedPhrase.${seed}`
                              ) ? getIn$1(
                                errors,
                                `seedPhrase.${seed}`
                              ) : false,
                              startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                "h4",
                                {
                                  className: `absolute top-[15px] left-[15px] ${getIn$1(
                                    touched,
                                    `seedPhrase.${seed}`
                                  ) && getIn$1(
                                    errors,
                                    `seedPhrase.${seed}`
                                  ) ? "fa-error" : "fa"} color-core-grey text-base z-20`,
                                  children: seed
                                }
                              )
                            }
                          ) }, seed)
                        ) }),
                        dirty && !errors.seedPhrase && /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 50, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: () => setStepNo(2), children: "I'm ready" }) })
                      ] }),
                      primary: null,
                      secondary: null
                    }
                  ),
                  document.body
                ),
                stepNo === 2 && reactDomExports.createPortal(
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    SharedDialog,
                    {
                      main: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Final step" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "mb-2 flex gap-2 items-center mt-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: "Archive host" }),
                          !tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-4 h-4",
                              onClick: () => setTooltip({
                                ...tooltip2,
                                host: true
                              }),
                              alt: "tooltip",
                              src: "./assets/help_filled.svg"
                            }
                          ),
                          !!tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-4 h-4",
                              onClick: () => setTooltip({
                                ...tooltip2,
                                host: false
                              }),
                              alt: "tooltip-dismiss",
                              src: "./assets/cancel_filled.svg"
                            }
                          )
                        ] }),
                        tooltip2.host && /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Tooltip,
                          {
                            onClick: () => setTooltip({ ...tooltip2, host: false }),
                            content: "Enter an ip:port of the archive node to sync from.",
                            position: 75
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Input,
                          {
                            extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                            disabled: false,
                            placeholder: "",
                            type: "text",
                            value: values.host,
                            id: "host",
                            name: "host",
                            onChange: handleChange,
                            onBlur: handleBlur,
                            error: errors.host ? errors.host : false
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "mb-2 flex gap-2 items-center mt-2", children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: "Key uses" }),
                          !tooltip2.keyuses && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-4 h-4",
                              onClick: () => setTooltip({
                                ...tooltip2,
                                keyuses: true
                              }),
                              alt: "tooltip",
                              src: "./assets/help_filled.svg"
                            }
                          ),
                          !!tooltip2.keyuses && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "img",
                            {
                              className: "w-4 h-4",
                              onClick: () => setTooltip({
                                ...tooltip2,
                                keyuses: false
                              }),
                              alt: "tooltip-dismiss",
                              src: "./assets/cancel_filled.svg"
                            }
                          )
                        ] }),
                        tooltip2.keyuses && /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Tooltip,
                          {
                            onClick: () => setTooltip({ ...tooltip2, keyuses: false }),
                            content: "How many times at most you used your keys. Your keys are used for signing every transaction you make. Every time you import your seed phrase this needs to be higher.",
                            position: 75
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Input,
                          {
                            extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                            disabled: false,
                            placeholder: "default 1000",
                            type: "text",
                            value: values.keyuses,
                            id: "keyuses",
                            name: "keyuses",
                            onChange: handleChange,
                            onBlur: handleBlur,
                            error: errors.keyuses ? errors.keyuses : false
                          }
                        ),
                        values.keyuses && values.keyuses < 1e3 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm mt-2 opacity-50", children: "We suggest for you to use 1000 as a safe number" })
                      ] }),
                      primary: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 50, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          disabled: !isValid2,
                          extraClass: "mt-4",
                          onClick: () => setStepNo(3),
                          children: "Re-sync"
                        }
                      ) }),
                      secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          extraClass: "mt-4",
                          variant: "tertiary",
                          onClick: () => setStepNo(1),
                          children: "Cancel"
                        }
                      )
                    }
                  ),
                  document.body
                ),
                stepNo === 3 && reactDomExports.createPortal(
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    SharedDialog,
                    {
                      main: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Wipe this node?" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-center mb-4", children: [
                          "This node will be wiped and recreated with the given seed phrase. ",
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                          " This process can take up to an hour, please connect your device to a power source before you continue."
                        ] })
                      ] }) }),
                      primary: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 50, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          disabled: !isValid2,
                          onClick: () => submitForm(),
                          children: "Start re-sync"
                        }
                      ) }),
                      secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        Button,
                        {
                          extraClass: "mt-4",
                          variant: "tertiary",
                          onClick: () => setStepNo(2),
                          children: "Cancel"
                        }
                      )
                    }
                  ),
                  document.body
                )
              ] })
            }
          ) }),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              extraClass: "mt-4",
              variant: "tertiary",
              onClick: () => {
                {
                  stepNo === 0 ? setNoHaveArchive(false) : setStepNo(0);
                }
              },
              children: "Cancel"
            }
          ) })
        }
      ),
      document.body
    ),
    error && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-3 inline",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_594_13339",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_594_13339)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Hmm.. something went wrong." }),
            typeof error === "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: typeof error.includes !== "undefined" && error.toString().includes("GZIP") ? "Invalid password." : typeof error.includes !== "undefined" && error.toString().includes("connectdata") ? "Host is invalid." : typeof error.includes !== "undefined" && error.toString().includes("Incorrect Password!") ? "Incorrect password!" : error.toString() }),
            typeof error === "object" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: JSON.stringify(error) })
          ] }),
          primary: null,
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "tertiary",
              onClick: () => {
                setError(false);
                setBeginResyncing(false);
              },
              children: "Cancel"
            }
          )
        }
      ),
      document.body
    ),
    beginResyncing && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          size: "lg",
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col align-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Lottie,
              {
                className: "mb-4 inline",
                width: 4,
                height: 4,
                style: { maxWidth: 80, alignSelf: "center" },
                animationData: Loading
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Re-syncing" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-8 text-center", children: [
              "Please don’t leave this screen whilst the chain is re-syncing.",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "Your node will shutdown once it is complete."
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Logs, {})
          ] }),
          primary: null,
          secondary: null
        }
      ),
      document.body
    ),
    MDSShutdown && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          bg: "primary",
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center justify-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-3 inline",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_1102_25908",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1102_25908)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 font-semibold text-center", children: "Seed phrase imported" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-medium mb-6 mt-6 text-center", children: "Your node will shutdown, restart it for the restore to take effect." })
          ] }),
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
          primary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              variant: "primary",
              onClick: () => {
                if (window.navigator.userAgent.includes("Minima Browser")) {
                  return Android.shutdownMinima();
                }
                return window.close();
              },
              children: "Close application"
            }
          )
        }
      ),
      document.body
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { isOpen: true, delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
      !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(
        BackButton,
        {
          onClickHandler: () => navigate("/dashboard/archivereset"),
          title: "Archive Reset"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left", children: "Import seed phrase" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 text-left", children: [
        "If you have lost access to your node or started a new node, you can restore your wallet using just your seed phrase. ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        "You will need:",
        /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "list-disc list-inside mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "pt-4 pl-2.5", children: "Your 24 word seed phrase" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "pl-2.5", children: "An archive file or archive host" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "pl-2.5", children: "Checking the battery settings for the Minima app to ensure it is allowed to run in the background" })
        ] }),
        "The archive file will be used to sync your node to the chain's top block and must be recently extracted from an archive node."
      ] }) }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-left flex gap-2 mb-8", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "svg",
          {
            className: "flex-none w-7",
            xmlns: "http://www.w3.org/2000/svg",
            width: "48",
            height: "24",
            viewBox: "0 0 24 24",
            fill: "none",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "8", fill: "#08090B" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "mask",
                {
                  id: "mask0_1607_18879",
                  maskUnits: "userSpaceOnUse",
                  x: "0",
                  y: "0",
                  width: "24",
                  height: "24",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "24", height: "24", fill: "#D9D9D9" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1607_18879)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "path",
                {
                  d: "M12 16.7307C12.2288 16.7307 12.4207 16.6533 12.5755 16.4985C12.7303 16.3437 12.8077 16.1519 12.8077 15.9231C12.8077 15.6942 12.7303 15.5024 12.5755 15.3476C12.4207 15.1928 12.2288 15.1154 12 15.1154C11.7711 15.1154 11.5793 15.1928 11.4245 15.3476C11.2697 15.5024 11.1923 15.6942 11.1923 15.9231C11.1923 16.1519 11.2697 16.3437 11.4245 16.4985C11.5793 16.6533 11.7711 16.7307 12 16.7307ZM11.25 13.0769H12.75V7.0769H11.25V13.0769ZM12.0017 21.5C10.6877 21.5 9.45268 21.2506 8.29655 20.752C7.1404 20.2533 6.13472 19.5765 5.2795 18.7217C4.42427 17.8669 3.74721 16.8616 3.24833 15.706C2.74944 14.5504 2.5 13.3156 2.5 12.0017C2.5 10.6877 2.74933 9.45268 3.248 8.29655C3.74667 7.1404 4.42342 6.13472 5.27825 5.2795C6.1331 4.42427 7.13834 3.74721 8.29398 3.24833C9.44959 2.74944 10.6844 2.5 11.9983 2.5C13.3122 2.5 14.5473 2.74933 15.7034 3.248C16.8596 3.74667 17.8652 4.42342 18.7205 5.27825C19.5757 6.1331 20.2527 7.13834 20.7516 8.29398C21.2505 9.44959 21.5 10.6844 21.5 11.9983C21.5 13.3122 21.2506 14.5473 20.752 15.7034C20.2533 16.8596 19.5765 17.8652 18.7217 18.7205C17.8669 19.5757 16.8616 20.2527 15.706 20.7516C14.5504 21.2505 13.3156 21.5 12.0017 21.5Z",
                  fill: "#E9E9EB"
                }
              ) })
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm password-label", children: [
          "If you don't have an archive file, you can visit the archive file channel on our Discord server",
          " ",
          /* @__PURE__ */ jsxRuntimeExports.jsx("a", { target: "_blank", href: "https://discord.com/invite/minima", children: "https://discord.com/invite/minima" })
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { extraClass: "mb-4", onClick: () => setHaveArchive(true), children: "I have an archive file" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "tertiary", onClick: () => setNoHaveArchive(true), children: "I don't have an archive file" })
    ] }) }) })
  ] });
};
const IntegrityCheck = () => {
  const inputRef = reactExports.useRef(null);
  const [progress, setProgress] = reactExports.useState(0);
  const [error, setError] = reactExports.useState(false);
  const [archiveFileSelection, setArchiveFileSelection] = reactExports.useState("local");
  const [resetFileField, setResetFileField] = reactExports.useState(0);
  const [fileUpload, setFileUpload] = reactExports.useState(false);
  const [myIntegrity, setMyIntegrity] = reactExports.useState(null);
  const [lastCheck, setLastCheck] = reactExports.useState(null);
  const [errorIntegrity, setErrorIntegrity] = reactExports.useState(false);
  const [showExternal, setShowExternal] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [showIntegrity, setShowIntegrity] = reactExports.useState(false);
  const [externalPath, setExternalPath] = reactExports.useState("");
  const [inspection, setExternalInspection] = reactExports.useState(null);
  const { authNavigate } = useAuth();
  const { getArchives } = reactExports.useContext(appContext);
  const { handleUploadContext } = useArchiveContext();
  const {
    setBackButton,
    displayBackButton: displayHeaderBackButton,
    archives
  } = reactExports.useContext(appContext);
  reactExports.useEffect(() => {
    setBackButton({ display: true, to: -1, title: "Back" });
  }, []);
  reactExports.useEffect(() => {
    window.MDS.keypair.get("integritycheck", function(res) {
      if (res.status) {
        const lastCheck2 = JSON.parse(res.value);
        setLastCheck(parseInt(lastCheck2.ms));
        setMyIntegrity(lastCheck2.integrity);
      }
    });
  }, []);
  const handleExternalClick = () => {
    setShowExternal(true);
  };
  const handleArchiveSelector = (event) => {
    setArchiveFileSelection(event.target.value);
  };
  const handleExternalIntegrityCheck = () => {
    setLoading(true);
    setError(false);
    window.MDS.cmd(
      `archive action:inspect file:"${externalPath}"`,
      async function(resp) {
        if (!resp.status) {
          setError(resp.error ? resp.error : "Inspection failed!");
          setLoading(false);
        }
        if (resp.status) {
          setLoading(false);
          setExternalInspection(resp.response);
        }
      }
    );
  };
  const handleIntegrityCheckOwn = () => {
    setLastCheck(null);
    setMyIntegrity(null);
    setLoading(true);
    setErrorIntegrity(false);
    window.MDS.cmd("archive action:integrity", function(resp) {
      if (resp.status) {
        const ms = (/* @__PURE__ */ new Date()).getTime();
        window.MDS.keypair.set(
          "integritycheck",
          JSON.stringify({ ms, integrity: { ...resp.response } })
        );
        setLoading(false);
        setLastCheck(ms);
        setMyIntegrity(resp.response);
      }
      if (!resp.status) {
        setLoading(false);
        setErrorIntegrity(resp.error);
      }
    });
  };
  const complete = inspection && inspection.archive.last === "1";
  const warning2 = inspection && parseInt(inspection.archive.last) > 1;
  const bad = inspection && parseInt(inspection.archive.last) <= 0;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { isOpen: true, delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: [
    !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { to: -1, title: "Back" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "mt-6 text-2xl mb-8 text-left bg-inherit", children: "Archive integrity check" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-3 text-left", children: [
      "Check the integrity of your archive database. No host is required.",
      " ",
      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
      /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
      "You can either check the integrity of your node's archive database. Or you can check an external file."
    ] }) }),
    loading && /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "mb-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "li",
      {
        className: `core-black-contrast-2 flex rounded justify-between p-4 ${showIntegrity ? "border-b-0" : ""}`,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-base", children: "Checking archive integrity..." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Lottie,
            {
              style: { width: 26, height: 26, alignSelf: "center" },
              animationData: Loading
            }
          )
        ]
      }
    ) }),
    !loading && myIntegrity && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "mb-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "li",
          {
            className: `core-black-contrast-2 flex rounded justify-between p-4 ${showIntegrity ? "border-b-0" : ""}`,
            onClick: () => setShowIntegrity((prevState) => !prevState),
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-base", children: "Archive Integrity" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  className: `${showIntegrity ? "arrow-active" : "arrow-passive"}`,
                  xmlns: "http://www.w3.org/2000/svg",
                  height: "24",
                  viewBox: "0 -960 960 960",
                  width: "24",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M480-345 240-585l56-56 184 184 184-184 56 56-240 240Z",
                      fill: "#d9d9d9"
                    }
                  )
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "li",
          {
            "aria-expanded": !showIntegrity,
            className: "accordion-content flex flex-col gap-4 drawer-active",
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-left p-4 rounded-b-lg core-black-contrast", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "p",
                {
                  className: `${myIntegrity.valid ? "form-success-message" : "text-error"}`,
                  children: myIntegrity == null ? void 0 : myIntegrity.recommend
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-lg text-white", children: "Archive" }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "text-black mt-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm text-white", children: "Blocks" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-white opacity-50", children: myIntegrity == null ? void 0 : myIntegrity.archive.blocks })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "text-black mt-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm text-white", children: "End" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-white opacity-50", children: myIntegrity == null ? void 0 : myIntegrity.archive.end })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "text-black mt-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm text-white", children: "Start" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-white opacity-50", children: myIntegrity == null ? void 0 : myIntegrity.archive.start })
              ] }),
              (myIntegrity == null ? void 0 : myIntegrity.cascade.exists) && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "mt-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-lg text-white", children: "Cascade" }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "text-black mt-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm text-white", children: "Exists" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-white opacity-50", children: (myIntegrity == null ? void 0 : myIntegrity.cascade.exists) ? "True" : "False" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "text-black mt-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm text-white", children: "Tip" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-white opacity-50", children: myIntegrity == null ? void 0 : myIntegrity.cascade.tip })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "text-black mt-2", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm text-white", children: "Start" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-white opacity-50", children: myIntegrity == null ? void 0 : myIntegrity.cascade.length })
                ] })
              ] })
            ] })
          }
        )
      ] }),
      lastCheck && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-6", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-left flex gap-1 items-center", children: [
        "Your last check was on",
        " ",
        format(lastCheck, "yyyy/dd/MM - hh:mm:ss a"),
        " ",
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "svg",
          {
            xmlns: "http://www.w3.org/2000/svg",
            height: "16",
            viewBox: "0 -960 960 960",
            width: "16",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "path",
              {
                fill: "#4FE3C1",
                d: "M440-120v-319q-64 0-123-24.5T213-533q-45-45-69-104t-24-123v-80h80q63 0 122 24.5T426-746q31 31 51.5 68t31.5 79q5-7 11-13.5t13-13.5q45-45 104-69.5T760-720h80v80q0 64-24.5 123T746-413q-45 45-103.5 69T520-320v200h-80Zm0-400q0-48-18.5-91.5T369-689q-34-34-77.5-52.5T200-760q0 48 18 92t52 78q34 34 78 52t92 18Zm80 120q48 0 91.5-18t77.5-52q34-34 52.5-78t18.5-92q-48 0-92 18.5T590-569q-34 34-52 77.5T520-400Zm0 0Zm-80-120Z"
              }
            )
          }
        )
      ] }) })
    ] }),
    !loading && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast-2 rounded text-left p-4", children: [
      errorIntegrity && errorIntegrity.length && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left mb-4 break-words", children: errorIntegrity }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        Button,
        {
          disabled: loading,
          onClick: handleIntegrityCheckOwn,
          extraClass: "core-black-contrast-1 mb-4",
          children: "Check my integrity"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { onClick: handleExternalClick, variant: "primary", children: "Check external" })
    ] }),
    showExternal && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-[54px] left-0 right-0 bottom-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_minmax(0,_560px)_1fr] grid-rows-1 bg-black h-full", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast p-4 rounded w-full mx-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("h1", { className: "text-2xl mb-12 flex items-center justify-between", children: [
            !loading && "External integrity check",
            loading && "Inspecting file...",
            loading && /* @__PURE__ */ jsxRuntimeExports.jsx(
              Lottie,
              {
                style: { width: 26, height: 26, alignSelf: "center" },
                animationData: Loading
              }
            ),
            !loading && /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                className: "hover:cursor-pointer",
                onClick: () => {
                  setShowExternal(false);
                },
                width: "16",
                height: "17",
                viewBox: "0 0 16 17",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M1.23077 16.5L0 15.2692L6.76923 8.5C4.12568 5.85645 2.64355 4.37432 0 1.73077L1.23077 0.5L8 7.26923L14.7692 0.5L16 1.73077L9.23077 8.5L16 15.2692L14.7692 16.5L8 9.73077L1.23077 16.5Z",
                    fill: "#F9F9FA"
                  }
                )
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            List,
            {
              disabled: loading,
              options: archives,
              setForm: async (option) => {
                setLoading(true);
                await getPath("/archives/" + option).then((path) => {
                  setExternalPath(path);
                  setLoading(false);
                }).catch((err) => {
                  return setError(err);
                });
              }
            }
          ),
          !loading && error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-sm form-error-message text-left mb-4 break-words mt-4", children: error }),
          !loading && complete && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 py-3 mb-4 flex rounded gap-4 form-success-box mt-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "flex-none",
                width: "24",
                height: "24",
                viewBox: "0 0 24 24",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { cx: "12", cy: "12", r: "8", fill: "white" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_1546_39376",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "24",
                      height: "24",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "24", height: "24", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_1546_39376)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M10.5061 16.4777L17.583 9.40081L16.4737 8.29152L10.5061 14.2591L7.50607 11.2591L6.39677 12.3684L10.5061 16.4777ZM12.0018 22C10.6187 22 9.31863 21.7375 8.10165 21.2126C6.88464 20.6877 5.82603 19.9753 4.9258 19.0755C4.02555 18.1757 3.31285 17.1175 2.78771 15.9011C2.26257 14.6846 2 13.3849 2 12.0018C2 10.6187 2.26246 9.31863 2.78737 8.10165C3.31228 6.88464 4.02465 5.82603 4.92448 4.9258C5.82433 4.02555 6.88248 3.31286 8.09894 2.78771C9.31538 2.26257 10.6151 2 11.9982 2C13.3813 2 14.6814 2.26246 15.8984 2.78737C17.1154 3.31229 18.174 4.02465 19.0742 4.92448C19.9745 5.82433 20.6871 6.88248 21.2123 8.09894C21.7374 9.31538 22 10.6151 22 11.9982C22 13.3813 21.7375 14.6814 21.2126 15.8984C20.6877 17.1154 19.9753 18.174 19.0755 19.0742C18.1757 19.9745 17.1175 20.6871 15.9011 21.2123C14.6846 21.7374 13.3849 22 12.0018 22Z",
                      fill: "#00CBB6"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm my-auto text-left text-black", children: "This archive file contains no errors." })
          ] }),
          !loading && warning2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 py-3 rounded mb-4 flex gap-4 form-info-box mt-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                className: "flex-none",
                width: "20",
                height: "20",
                viewBox: "0 0 20 20",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M9.99998 14.7307C10.2288 14.7307 10.4207 14.6533 10.5755 14.4985C10.7303 14.3437 10.8077 14.1519 10.8077 13.9231C10.8077 13.6942 10.7303 13.5024 10.5755 13.3476C10.4207 13.1928 10.2288 13.1154 9.99998 13.1154C9.77113 13.1154 9.5793 13.1928 9.4245 13.3476C9.2697 13.5024 9.1923 13.6942 9.1923 13.9231C9.1923 14.1519 9.2697 14.3437 9.4245 14.4985C9.5793 14.6533 9.77113 14.7307 9.99998 14.7307ZM9.25 11.0769H10.75V5.0769H9.25V11.0769ZM10.0017 19.5C8.68772 19.5 7.45268 19.2506 6.29655 18.752C5.1404 18.2533 4.13472 17.5765 3.2795 16.7217C2.42427 15.8669 1.74721 14.8616 1.24833 13.706C0.749442 12.5504 0.5 11.3156 0.5 10.0017C0.5 8.68772 0.749334 7.45268 1.248 6.29655C1.74667 5.1404 2.42342 4.13472 3.27825 3.2795C4.1331 2.42427 5.13834 1.74721 6.29398 1.24833C7.44959 0.749443 8.68437 0.5 9.9983 0.5C11.3122 0.5 12.5473 0.749334 13.7034 1.248C14.8596 1.74667 15.8652 2.42342 16.7205 3.27825C17.5757 4.1331 18.2527 5.13834 18.7516 6.29398C19.2505 7.44959 19.5 8.68437 19.5 9.9983C19.5 11.3122 19.2506 12.5473 18.752 13.7034C18.2533 14.8596 17.5765 15.8652 16.7217 16.7205C15.8669 17.5757 14.8616 18.2527 13.706 18.7516C12.5504 19.2505 11.3156 19.5 10.0017 19.5Z",
                    fill: "#FFD028"
                  }
                )
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-left my-auto text-black", children: [
              "This archive file can only re-sync from block",
              " ",
              inspection.archive.last,
              " and may not be able to re-sync all coins, consider using a different archive file."
            ] })
          ] }),
          !loading && bad && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 py-3 mb-4 rounded flex  gap-4 form-error-box mt-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                className: "flex-none",
                width: "20",
                height: "20",
                viewBox: "0 0 20 20",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M6.4 15L10 11.4L13.6 15L15 13.6L11.4 10L15 6.4L13.6 5L10 8.6L6.4 5L5 6.4L8.6 10L5 13.6L6.4 15ZM10 20C8.61667 20 7.31667 19.7375 6.1 19.2125C4.88333 18.6875 3.825 17.975 2.925 17.075C2.025 16.175 1.3125 15.1167 0.7875 13.9C0.2625 12.6833 0 11.3833 0 10C0 8.61667 0.2625 7.31667 0.7875 6.1C1.3125 4.88333 2.025 3.825 2.925 2.925C3.825 2.025 4.88333 1.3125 6.1 0.7875C7.31667 0.2625 8.61667 0 10 0C11.3833 0 12.6833 0.2625 13.9 0.7875C15.1167 1.3125 16.175 2.025 17.075 2.925C17.975 3.825 18.6875 4.88333 19.2125 6.1C19.7375 7.31667 20 8.61667 20 10C20 11.3833 19.7375 12.6833 19.2125 13.9C18.6875 15.1167 17.975 16.175 17.075 17.075C16.175 17.975 15.1167 18.6875 13.9 19.2125C12.6833 19.7375 11.3833 20 10 20Z",
                    fill: "#FF627E"
                  }
                )
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm text-left my-auto text-black", children: "This archive file contains errors, please use another file." })
          ] }),
          !loading && (complete || warning2) && /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-left p-4 rounded core-black-contrast-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("li", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-lg text-white", children: "Archive" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "text-black mt-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm text-white", children: "First" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-white opacity-50", children: inspection == null ? void 0 : inspection.archive.first })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "text-black mt-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm text-white", children: "Last" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-white opacity-50", children: inspection == null ? void 0 : inspection.archive.last })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "text-black mt-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm text-white", children: "Size" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-white opacity-50", children: inspection == null ? void 0 : inspection.archive.size })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            Button,
            {
              onClick: handleExternalIntegrityCheck,
              disabled: loading || !archives.length,
              variant: "primary",
              extraClass: "mt-6 flex justify-center bg-white",
              children: [
                !loading && "Check integrity",
                loading && "Inspecting..."
              ]
            }
          ),
          !loading && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "input",
              {
                accept: ".gzip",
                className: "hidden",
                type: "file",
                ref: inputRef,
                onChange: (e3) => {
                  const file = e3.target.files ? e3.target.files[0] : null;
                  if (file) {
                    setError(false);
                    handleUploadContext(file);
                    authNavigate(
                      "/upload",
                      [PERMISSIONS["CAN_VIEW_UPLOADING"]],
                      { state: { justUploading: true } }
                    );
                  }
                }
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                onClick: () => {
                  var _a;
                  return (_a = inputRef.current) == null ? void 0 : _a.click();
                },
                variant: "tertiary",
                extraClass: "mt-2",
                children: !archives.length ? "Upload file" : "Upload another file"
              }
            )
          ] })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {})
      ] }) }),
      document.body
    ),
    showExternal && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Formik,
            {
              initialValues: { file: "", upload: null },
              onSubmit: async (formData) => {
                setLoading(true);
                try {
                  const fullPath = await getPath(formData.file);
                  const response = await new Promise((resolve, reject) => {
                    window.MDS.cmd(
                      `archive action:inspect file:"${fullPath}"`,
                      function(resp) {
                        if (!resp.status) {
                          reject(
                            resp.error ? resp.error : "Failed to inspect archive"
                          );
                        } else {
                          resolve(resp.response);
                        }
                      }
                    );
                  }).catch((err) => {
                    throw new Error(err);
                  });
                  setExternalInspection(response);
                } catch (error2) {
                  setError(
                    error2 instanceof Error ? error2.message : "An unexpected error occurred"
                  );
                }
              },
              children: ({
                handleSubmit,
                setFieldValue,
                errors,
                values,
                handleBlur,
                isSubmitting,
                resetForm
              }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit, children: [
                " ",
                /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Select an archive" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-6 text-center", children: [
                  "Select a local archive or upload a new one, ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                  " then you can then inspect its integrity"
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative mb-4", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "select",
                    {
                      disabled: fileUpload,
                      defaultValue: archiveFileSelection,
                      onChange: (e3) => {
                        handleArchiveSelector(e3);
                        resetForm();
                      },
                      className: "p-4 bg-black hover:cursor-pointer rounded w-full hover:opacity-80",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("option", { id: "value", value: "local", children: "Select an internal archive file" }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("option", { id: "split", value: "upload", children: "Upload an archive file" })
                      ]
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    "svg",
                    {
                      className: "my-auto absolute right-2 top-[12px]",
                      width: "32",
                      height: "33",
                      viewBox: "0 0 32 33",
                      fill: "none",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "mask",
                          {
                            id: "mask0_2226_53255",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "32",
                            height: "33",
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "rect",
                              {
                                y: "0.550781",
                                width: "32",
                                height: "32",
                                fill: "#D9D9D9"
                              }
                            )
                          }
                        ),
                        /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_2226_53255)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "path",
                          {
                            d: "M16.0004 20.6172L8.4668 13.0508L9.6668 11.8844L16.0004 18.2172L22.334 11.8844L23.534 13.0844L16.0004 20.6172Z",
                            fill: "#FaFaFF"
                          }
                        ) })
                      ]
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                  archiveFileSelection === "local" && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      List,
                      {
                        disabled: archives.length === 0,
                        options: archives,
                        setForm: async (option) => {
                          if (option.length) {
                            setFieldValue("file", "/archives/" + option);
                          }
                        }
                      }
                    ),
                    archives.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm mt-2 text-good", children: "No archives found in your internal files. Upload a new one!" })
                  ] }),
                  !fileUpload && archiveFileSelection === "upload" && !values.file.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    FileChooser,
                    {
                      disabled: isSubmitting,
                      keyValue: resetFileField,
                      handleEndIconClick: () => {
                        setResetFileField((prev) => prev + 1);
                        setFieldValue("upload", void 0);
                      },
                      error: errors.upload && errors.upload ? errors.upload : false,
                      extraClass: "core-grey-20",
                      accept: ".gzip",
                      onChange: (e3) => {
                        if (e3.target.files) {
                          setFieldValue("upload", e3.target.files[0]);
                        }
                      },
                      onBlur: handleBlur,
                      placeholder: "Select file",
                      type: "file",
                      id: "upload",
                      name: "upload",
                      endIcon: values.upload && /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        "svg",
                        {
                          xmlns: "http://www.w3.org/2000/svg",
                          width: "25",
                          height: "24",
                          viewBox: "0 0 25 24",
                          fill: "none",
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "mask",
                              {
                                id: "mask0_645_17003",
                                maskUnits: "userSpaceOnUse",
                                x: "0",
                                y: "0",
                                width: "25",
                                height: "24",
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                  "rect",
                                  {
                                    x: "0.5",
                                    width: "24",
                                    height: "24",
                                    fill: "#D9D9D9"
                                  }
                                )
                              }
                            ),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_645_17003)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                              "path",
                              {
                                d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                fill: "#91919D"
                              }
                            ) })
                          ]
                        }
                      )
                    }
                  ),
                  fileUpload && archiveFileSelection === "upload" && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast-2 h-[56px] rounded p-4 mt-4 relative", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black", children: [
                      (Number(progress) * 100).toFixed(0),
                      "%"
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "div",
                      {
                        className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                        style: {
                          transform: `scaleX(${progress})`,
                          left: "-1px",
                          top: "-2px",
                          width: "calc(100% + 1px)"
                        }
                      }
                    )
                  ] }),
                  fileUpload && values.upload && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm mt-2", children: [
                    "Uploading",
                    " ",
                    values.upload.name ? values.upload.name + "..." : ""
                  ] }),
                  !fileUpload && !!values.file.length && archiveFileSelection === "upload" && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm text-good flex items-center mt-2", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        height: "24",
                        viewBox: "0 -960 960 960",
                        width: "24",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          "path",
                          {
                            fill: "#4FE3C1",
                            d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                          }
                        )
                      }
                    ),
                    values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]
                  ] }),
                  values.upload && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: !fileUpload && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      variant: "primary",
                      extraClass: "mt-4",
                      onClick: async () => {
                        setFileUpload(true);
                        setFieldValue("file", "");
                        window.MDS.file.upload(
                          values.upload,
                          async function(resp) {
                            if (resp.allchunks >= 10) {
                              setProgress(
                                resp.chunk / resp.allchunks
                              );
                            }
                            const fileName = resp.filename;
                            if (resp.allchunks === resp.chunk) {
                              setFileUpload(false);
                              window.MDS.file.move(
                                "/fileupload/" + fileName,
                                "/archives/" + fileName,
                                (resp2) => {
                                  if (resp2.status) {
                                    setFieldValue(
                                      "file",
                                      "/archives/" + fileName
                                    );
                                    setFieldValue(
                                      "upload",
                                      void 0
                                    );
                                    setFileUpload(false);
                                    getArchives();
                                  }
                                }
                              );
                            }
                          }
                        );
                      },
                      children: "Upload"
                    }
                  ) }),
                  values.file && values.file.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      type: "submit",
                      variant: "primary",
                      extraClass: "mt-4",
                      children: "Inspect integrity"
                    }
                  ),
                  !fileUpload && archiveFileSelection === "upload" && !!values.file.length && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Button,
                    {
                      onClick: () => setFieldValue("file", ""),
                      variant: "tertiary",
                      extraClass: "mt-4",
                      children: "Upload a different file"
                    }
                  )
                ] })
              ] })
            }
          ),
          primary: null,
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: !fileUpload && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              extraClass: "mt-4",
              onClick: () => setShowExternal(false),
              variant: "tertiary",
              children: "Cancel"
            }
          ) })
        }
      ),
      document.body
    ),
    error && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "svg",
              {
                className: "mb-3 inline",
                width: "64",
                height: "64",
                viewBox: "0 0 64 64",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "mask",
                    {
                      id: "mask0_594_13339",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "64", height: "64", fill: "#D9D9D9" })
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("g", { mask: "url(#mask0_594_13339)", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                      fill: "#F4F4F5"
                    }
                  ) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Hmm.. something went wrong." }),
            typeof error === "string" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: error.includes("GZIP") ? "Invalid password." : error.includes("connectdata") ? "Host is invalid." : error.includes("Incorrect Password!") ? "Incorrect password!" : error }),
            typeof error === "object" && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8 text-center text-error truncate whitespace-normal break-all", children: JSON.stringify(error) })
          ] }),
          primary: null,
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              extraClass: "mt-4",
              variant: "tertiary",
              onClick: () => {
                setError(false);
                setLoading(false);
              },
              children: "Cancel"
            }
          ) })
        }
      ),
      document.body
    ),
    loading && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col align-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Lottie,
              {
                className: "mb-4 inline",
                width: 4,
                height: 4,
                style: { maxWidth: 80, alignSelf: "center" },
                animationData: Loading
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-8 text-center", children: "Inspecting..." }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "mb-8 text-center", children: [
              "Please don’t leave this screen whilst the archive is being inspected.",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              " ",
              /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
              "This may take a few minutes to finish."
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Logs, {})
          ] }),
          primary: null,
          secondary: null
        }
      ),
      document.body
    ),
    inspection && reactDomExports.createPortal(
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        SharedDialog,
        {
          main: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                className: "mb-2",
                xmlns: "http://www.w3.org/2000/svg",
                height: "64",
                viewBox: "0 -960 960 960",
                width: "64",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    fill: "#4FE3C1",
                    d: "M440-120v-319q-64 0-123-24.5T213-533q-45-45-69-104t-24-123v-80h80q63 0 122 24.5T426-746q31 31 51.5 68t31.5 79q5-7 11-13.5t13-13.5q45-45 104-69.5T760-720h80v80q0 64-24.5 123T746-413q-45 45-103.5 69T520-320v200h-80Zm0-400q0-48-18.5-91.5T369-689q-34-34-77.5-52.5T200-760q0 48 18 92t52 78q34 34 78 52t92 18Zm80 120q48 0 91.5-18t77.5-52q34-34 52.5-78t18.5-92q-48 0-92 18.5T590-569q-34 34-52 77.5T520-400Zm0 0Zm-80-120Z"
                  }
                )
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-4 font-semibold text-center", children: "Inspection completed" }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full bg-black rounded", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-base text-center font-bold core-black-contrast-2 p-4 w-full rounded-t", children: "Your results..." }),
              (inspection == null ? void 0 : inspection.cascade.exists) && /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-left pt-4 pl-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "text-bold", children: "Cascade" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "pt-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm opacity-80", children: "Start" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: inspection == null ? void 0 : inspection.cascade.start })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "pt-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm opacity-80", children: "Length" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: inspection == null ? void 0 : inspection.cascade.length })
                ] })
              ] }),
              !(inspection == null ? void 0 : inspection.cascade.exists) && /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "text-left pt-4 pl-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "text-bold", children: "Cascade" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "pt-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm opacity-80", children: "Exists" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "False" })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("ul", { className: "pt-4 pl-4 pb-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "text-left text-bold", children: "Archive" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "pt-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm opacity-80", children: "First" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: inspection == null ? void 0 : inspection.archive.first })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "pt-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm opacity-80", children: "Last" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: inspection == null ? void 0 : inspection.archive.last })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("li", { className: "pt-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-sm opacity-80", children: "Size" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: inspection == null ? void 0 : inspection.archive.size })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                extraClass: "mt-4",
                onClick: () => {
                  setLoading(false);
                  setExternalInspection(false);
                },
                children: "Inspect another file"
              }
            )
          ] }),
          primary: null,
          secondary: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              extraClass: "mt-4",
              variant: "tertiary",
              onClick: () => {
                setLoading(false);
                setShowExternal(false);
                setExternalInspection(false);
              },
              children: "Done"
            }
          )
        }
      ),
      document.body
    )
  ] }) });
};
const ManageSeedPhrase = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { authNavigate } = useAuth();
  const {
    vaultLocked,
    setBackButton,
    displayBackButton: displayHeaderBackButton
  } = reactExports.useContext(appContext);
  reactExports.useEffect(() => {
    setBackButton({ display: true, to: "/dashboard", title: "Security" });
  }, [location]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(SlideScreen, { display: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col h-full bg-black px-4 pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col h-full", children: [
    !displayHeaderBackButton && /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { to: "/dashboard", title: "Security" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-6 text-2xl mb-8 text-left", children: "Manage seed phrase" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "core-black-contrast p-4 rounded", children: [
      !!vaultLocked && /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          className: "mb-5 text-left",
          onClick: () => navigate("/dashboard/lockprivatekeys"),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "a",
              {
                className: "hover:cursor-pointer",
                onClick: () => navigate("/dashboard/lockprivatekeys"),
                children: "Unlock"
              }
            ),
            " ",
            "your node to view your seed phrase."
          ]
        }
      ),
      !vaultLocked && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-5 text-left", children: [
        "If you haven't already, write down your seed phrase and store it in a secure place. ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        " ",
        /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
        "Your seed phrase allows you to recover your coins if you lose access to your node and do not have a backup."
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          onClick: () => {
            if (!vaultLocked) {
              return authNavigate(
                "/dashboard/manageseedphrase/viewseedphrase",
                [PERMISSIONS.CAN_VIEW_VIEWSEEDPHRASE]
              );
            }
          },
          className: "text-left relative core-black-contrast-2 py-4 px-5 rounded cursor-pointer",
          children: [
            "Show seed phrase",
            !!vaultLocked && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "form-error-message absolute flex-row gap-2 right-0 top-0 h-full px-5 flex items-center", children: [
              "Node locked",
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "16",
                  height: "20",
                  viewBox: "0 0 16 20",
                  fill: "none",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "path",
                    {
                      d: "M2.3077 19.4999C1.81058 19.4999 1.38502 19.3229 1.03102 18.9689C0.677008 18.6149 0.5 18.1893 0.5 17.6922V8.30765C0.5 7.81053 0.677008 7.38498 1.03102 7.03098C1.38502 6.67696 1.81058 6.49995 2.3077 6.49995H3.5V4.49995C3.5 3.25125 3.93782 2.18908 4.81345 1.31345C5.6891 0.437817 6.75127 0 7.99997 0C9.24867 0 10.3108 0.437817 11.1865 1.31345C12.0621 2.18908 12.5 3.25125 12.5 4.49995V6.49995H13.6922C14.1894 6.49995 14.6149 6.67696 14.9689 7.03098C15.3229 7.38498 15.5 7.81053 15.5 8.30765V17.6922C15.5 18.1893 15.3229 18.6149 14.9689 18.9689C14.6149 19.3229 14.1894 19.4999 13.6922 19.4999H2.3077ZM7.99997 14.7499C8.48587 14.7499 8.89901 14.5797 9.23938 14.2393C9.57976 13.899 9.74995 13.4858 9.74995 12.9999C9.74995 12.514 9.57976 12.1009 9.23938 11.7605C8.89901 11.4201 8.48587 11.25 7.99997 11.25C7.51407 11.25 7.10094 11.4201 6.76058 11.7605C6.42019 12.1009 6.25 12.514 6.25 12.9999C6.25 13.4858 6.42019 13.899 6.76058 14.2393C7.10094 14.5797 7.51407 14.7499 7.99997 14.7499ZM4.99997 6.49995H11V4.49995C11 3.66662 10.7083 2.95828 10.125 2.37495C9.54164 1.79162 8.83331 1.49995 7.99997 1.49995C7.16664 1.49995 6.45831 1.79162 5.87497 2.37495C5.29164 2.95828 4.99997 3.66662 4.99997 4.49995V6.49995Z",
                      fill: "#FF627E"
                    }
                  )
                }
              )
            ] }),
            !vaultLocked && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute right-0 top-0 h-full px-5 flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              "svg",
              {
                width: "8",
                height: "12",
                viewBox: "0 0 8 12",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "path",
                  {
                    d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                    fill: "#F4F4F5"
                  }
                )
              }
            ) })
          ]
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-col gap-5", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: !vaultLocked && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-left mt-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm password-label mr-4 ml-4 mb-1", children: "Do not share your seed phrase with anyone. It can be used to access your coins regardless of whether your node is locked." }) }) }) }) })
  ] }) }) }) });
};
const Navigation = () => {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      HomeScreenNavigation,
      {
        location: "host",
        extraClass: "mb-3",
        children: "QuickSync"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      HomeScreenNavigation,
      {
        location: "fromseedphrase",
        extraClass: "mb-3",
        children: "Import Seed Phrase"
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      HomeScreenNavigation,
      {
        location: "frombackup",
        extraClass: "mb-3",
        children: "Import Backup"
      }
    )
  ] });
};
const QuickSync = () => {
  const location = useLocation();
  const isChildRoute = [
    "/dashboard/quicksync/host",
    "/dashboard/quicksync/fromseedphrase",
    "/dashboard/quicksync/frombackup"
  ].includes(location.pathname);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mx-4", children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-[auto_1fr] mb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(BackButton, { title: "Back", to: -1 }) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl mb-5", children: "QuickSync & Restore" }),
    !isChildRoute && /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-5", children: "Choose an option:" }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Navigation, {})
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {})
  ] });
};
const DialogLogs = () => {
  const { logs: cliLogs, setLogs } = reactExports.useContext(appContext);
  const logsEndRef = reactExports.useRef(null);
  const scrollToBottom = () => {
    var _a;
    (_a = logsEndRef.current) == null ? void 0 : _a.scrollIntoView({ behavior: "smooth" });
  };
  reactExports.useEffect(() => {
    setLogs([]);
  }, []);
  reactExports.useEffect(() => {
    scrollToBottom();
  }, [cliLogs]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    cliLogs.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto] my-3 items-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs animate-pulse", children: "Loading logs..." }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-teal-300 my-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        RefreshIcon,
        {
          fill: "currentColor",
          extraClass: "animate-spin w-[16px]"
        }
      ) })
    ] }),
    cliLogs.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "my-3", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[1fr_auto_1fr] gap-2", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("hr", { className: "border-sky-400 pb-1 mt-2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-center text-white font-bold", children: "CLI Logs" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("hr", { className: "border-sky-400 pb-1 mt-2" })
      ] }),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-[#1B1B1B] rounded-lg px-3 py-3 overflow-auto max-h-[200px] grid gap-2", children: [
        cliLogs.map((l2) => /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs", children: l2 }, l2)),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ref: logsEndRef })
      ] })
    ] })
  ] });
};
const Host = () => {
  const [f2, setF] = reactExports.useState(false);
  const [confirm, setConfirm] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [shutdown, setShutdown] = reactExports.useState(false);
  const DEFAULT = !loading && !error && !shutdown;
  const RESYNCING = loading && !error && !shutdown;
  const ERROR = !loading && error && !shutdown;
  const SUCCESS = !loading && !error && shutdown;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(SlideIn, { isOpen: true, delay: 0, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl mb-2 font-bold", children: "QuickSync" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "QuickSync will restore the coins for this node and re-sync the chain to the latest block." }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Formik,
      {
        validateOnMount: true,
        initialValues: { ip: "" },
        validationSchema: create$3().shape({
          ip: create$6().matches(
            /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]|65[0-4][0-9][0-9]|6[0-4][0-9][0-9][0-9][0-9]|[1-5](\d){4}|[1-9](\d){0,3})$/,
            "Invalid IP:Port format"
          ).required("IP:Port is required").trim()
        }),
        onSubmit: async ({ ip: ip2 }) => {
          setLoading(true);
          setError(false);
          try {
            await new Promise((resolve, reject) => {
              window.MDS.cmd(
                `megammrsync action:resync host:${ip2.trim()}`,
                (resp) => {
                  if (!resp.status)
                    reject(
                      resp.error ? resp.error : `Mega node re-sync failed with host:${ip2}`
                    );
                  resolve(resp);
                }
              );
            }).catch((error2) => {
              throw error2;
            });
            setShutdown(true);
            setLoading(false);
          } catch (error2) {
            setLoading(false);
            if (typeof error2 === "string") {
              return setError(
                error2.includes("Incorrect Password!") ? "Incorrect password!" : error2
              );
            }
            if (error2 instanceof Error) {
              return setError(error2.message);
            }
            setError("Host re-sync failed, please try again.");
          }
        },
        children: ({
          handleSubmit,
          handleChange,
          handleBlur,
          errors,
          values,
          isValid: isValid2,
          submitForm,
          isSubmitting
        }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "form",
          {
            onSubmit: handleSubmit,
            className: `my-3 core-black-contrast-2 p-4 rounded ${f2 && "outline outline-[#1B1B1B]"}`,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " grid grid-rows-[auto_1fr]", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm mb-3", children: "Enter the IP:Port of a Mega node to QuickSync from" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    id: "ip",
                    name: "ip",
                    onChange: handleChange,
                    value: values.ip,
                    onFocus: () => setF(true),
                    onBlur: (e3) => {
                      handleBlur(e3);
                      setF(false);
                    },
                    placeholder: "e.g. 34.32.59.133:9001",
                    className: `truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ${errors.ip && "!outline !outline-[#FF627E]"}`
                  }
                ),
                errors.ip && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mt-3 text-[#FF627E]", children: errors.ip })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => setConfirm(true),
                  type: "button",
                  disabled: !isValid2,
                  className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                  children: "Restore"
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                AnimatedDialog,
                {
                  isOpen: confirm,
                  onClose: () => null,
                  position: "items-start mt-20",
                  extraClass: "max-w-sm mx-auto",
                  dialogStyles: "h-[400px] rounded-lg !shadow-teal-800 !shadow-sm overflow-hidden bg-black",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-between items-center pr-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-[auto_1fr] ml-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "my-auto font-bold ml-2", children: "Host Resync" }) }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 h-full flex flex-col justify-between", children: [
                      DEFAULT && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm my-3", children: "Are you sure you wish to restore the coins for this node and re-sync to the latest block?" }),
                      SUCCESS && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Re-sync completed. Please close this screen and re-login to the Minihub." }) }),
                      ERROR && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: error.replace("Archive", "") }),
                      RESYNCING && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "animate-pulse", children: "Re-syncing..." }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(DialogLogs, {})
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-end mb-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[auto_1fr] gap-2", children: [
                          !SUCCESS && !RESYNCING && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              disabled: isSubmitting,
                              className: "disabled:bg-opacity-10 bg-gray-600 !py-2  font-bold tracking-tighter",
                              type: "button",
                              onClick: () => setConfirm(false),
                              children: "Dismiss"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "button",
                            {
                              disabled: isSubmitting,
                              onClick: () => {
                                if (!SUCCESS) {
                                  return submitForm();
                                }
                                if (window.navigator.userAgent.includes(
                                  "Minima Browser"
                                )) {
                                  return Android.shutdownMinima();
                                }
                                return window.close();
                              },
                              type: "button",
                              className: "disabled:bg-opacity-50 font-bold !py-2 text-black bg-violet-300",
                              children: [
                                DEFAULT && "Okay",
                                ERROR && "Re-try",
                                SUCCESS && "Close",
                                RESYNCING && "Re-syncing"
                              ]
                            }
                          )
                        ] })
                      ] })
                    ] })
                  ] })
                }
              )
            ]
          }
        )
      }
    )
  ] });
};
const EnterSeedPhrase = ({ formNext }) => {
  const {
    values,
    setFieldValue,
    validateForm,
    setFieldError,
    setFieldTouched,
    touched,
    errors,
    handleBlur
  } = useFormikContext();
  const [step, _] = reactExports.useState(3);
  const seeds = Object.keys(values.seedPhrase);
  const handlePaste = async (event, setFieldValue2, validateForm2, setFieldError2, setFieldTouched2) => {
    const clipboardData = event.clipboardData;
    const pastedText = clipboardData.getData("text");
    const isPastedTextASeedPhrase = pastedText.split(" ").length === 24;
    if (isPastedTextASeedPhrase) {
      event.preventDefault();
      pastedText.split(" ").forEach(
        (_seed, index2) => setFieldValue2(`seedPhrase.${index2 + 1}`, "")
      );
      pastedText.split(" ").forEach(
        (_seed, index2) => setFieldValue2(`seedPhrase.${index2 + 1}`, _seed.toUpperCase())
      );
      const errors2 = await validateForm2();
      if (errors2.seedPhrase) {
        Object.keys(errors2.seedPhrase).map((key2) => {
          if (errors2.seedPhrase[key2]) {
            setFieldError2(`seedPhrase.${key2}`, errors2.seedPhrase[key2]);
            setFieldTouched2(`seedPhrase.${key2}`, errors2.seedPhrase[key2]);
          }
        });
      }
      return pastedText;
    }
    return false;
  };
  const TOUCHED_ALL_SEEDPHRASES = touched.seedPhrase && touched.seedPhrase.length === 25;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    step === 3 && !!errors.seedPhrase && TOUCHED_ALL_SEEDPHRASES && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-sm bg-yellow-300 rounded p-2 mb-3", children: "There is something wrong with your seed phrase, double check that you have entered it correctly." }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: "grid grid-cols-2 gap-2 mb-4", children: values.seedPhrase && seeds.map((seed) => /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Autocomplete,
      {
        onPaste: (e3) => handlePaste(
          e3,
          setFieldValue,
          validateForm,
          setFieldError,
          setFieldTouched
        ),
        extraClass: "!bg-[#1B1B1B] focus:!bg-white focus:!text-black focus:border !focus:border-[#464C4F] focus:font-bold",
        disabled: false,
        placeholder: "",
        type: "text",
        value: values.seedPhrase[seed],
        id: `seedPhrase.${seed}`,
        name: `seedPhrase.${seed}`,
        suggestions: bip39,
        onChange: (value2) => setFieldValue(`seedPhrase.${seed}`, value2),
        onBlur: handleBlur,
        error: getIn$1(touched, `seedPhrase.${seed}`) && getIn$1(errors, `seedPhrase.${seed}`) ? getIn$1(errors, `seedPhrase.${seed}`) : false,
        startIcon: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "h4",
          {
            className: `absolute top-[15px] left-[15px] ${getIn$1(touched, `seedPhrase.${seed}`) && getIn$1(errors, `seedPhrase.${seed}`) ? "fa-error" : "fa"} color-core-grey text-base z-20`,
            children: seed
          }
        )
      }
    ) }, `seedInputField_${seed}`)) }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "button",
      {
        disabled: step === 3 && !!errors.seedPhrase || step === 3 && !TOUCHED_ALL_SEEDPHRASES,
        type: "button",
        onClick: () => formNext(),
        className: "font-bold bg-white text-black disabled:bg-opacity-10 w-full",
        children: "Next"
      }
    ) })
  ] });
};
const FromSeedPhrase = () => {
  const [f2, setF] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(1);
  const [confirm, setConfirm] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [shutdown, setShutdown] = reactExports.useState(false);
  const DEFAULT = !loading && !error && !shutdown;
  const RESYNCING = loading && !error && !shutdown;
  const ERROR = !loading && error && !shutdown;
  const SUCCESS = !loading && !error && shutdown;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(SlideIn, { isOpen: true, delay: 0, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl mb-2 font-bold", children: "Import Seed Phrase with QuickSync" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Importing your seed phrase with QuickSync will wipe this node, restore your coins using the seed phrase provided and re-sync the chain to the latest block using the QuickSync host provided." }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-center text-violet-300 mt-3", children: [
      "Step ",
      step,
      "/4"
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[auto_16px_auto_16px_auto_16px_auto] my-3 text-center items-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "p",
        {
          onClick: () => !RESYNCING && step === 2 ? setStep(1) : null,
          className: `text-xs opacity-50 cursor-pointer ${step === 1 && "opacity-100 text-yellow-300 font-bold"} ${step > 1 && "opacity-100 text-violet-300 font-bold"}`,
          children: "QuickSync"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `${step > 1 && "text-violet-300 opacity-50"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RightArrow, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "p",
        {
          onClick: () => !RESYNCING && step === 3 ? setStep(2) : null,
          className: `text-xs opacity-50 cursor-pointer ${step === 2 && "opacity-100 text-yellow-300"} ${step > 2 && "opacity-100 text-violet-300 font-bold"}`,
          children: "Seed Phrase"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `${step > 2 && "text-violet-300 opacity-50"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RightArrow, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "p",
        {
          onClick: () => !RESYNCING && step === 4 ? setStep(3) : null,
          className: `text-xs opacity-50 cursor-pointer ${step === 3 && "opacity-100 text-yellow-300"} ${step > 2 && "opacity-100 text-violet-300 font-bold"}`,
          children: "Keys"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `${step > 3 && "text-violet-300 opacity-50"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RightArrow, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "p",
        {
          className: `text-xs opacity-50 cursor-pointer ${step === 4 && "opacity-100 text-yellow-300"} ${step > 3 && "opacity-100 text-violet-300 font-bold"}`,
          children: "Key Uses"
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Formik,
      {
        validateOnMount: true,
        initialValues: {
          ip: "",
          keys: 64,
          keyuses: 1e3,
          seedPhrase: Array.from({ length: 24 }, (_, i2) => ({
            [i2 + 1]: "".toUpperCase()
          })).reduce((acc, cur) => Object.assign(acc, cur), {})
        },
        validationSchema: create$3().shape({
          ip: create$6().matches(
            /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]|65[0-4][0-9][0-9]|6[0-4][0-9][0-9][0-9][0-9]|[1-5](\d){4}|[1-9](\d){0,3})$/,
            "Invalid IP:Port format"
          ).required("IP:Port is required").trim(),
          seedPhrase: create$3({
            "1": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "2": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "3": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "4": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "5": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "6": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "7": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "8": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "9": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "10": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "11": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "12": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "13": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "14": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "15": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "16": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "17": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "18": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "19": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "20": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "21": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "22": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "23": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "24": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word")
          }),
          keys: create$5().required("This field is required"),
          keyuses: create$5().required("This field is required")
        }),
        onSubmit: async ({ ip: ip2, seedPhrase, keys: keys2, keyuses }) => {
          setLoading(true);
          setError(false);
          try {
            const phraseAsString = Object.values(seedPhrase).toString().replaceAll(",", " ");
            await new Promise((resolve, reject) => {
              window.MDS.cmd(
                `megammrsync action:resync host:${ip2.trim()} phrase:"${phraseAsString}" keys:${keys2} keyuses:${keyuses}`,
                (resp) => {
                  if (!resp.status)
                    reject(
                      resp.error ? resp.error : `Mega node re-sync failed with host:${ip2}`
                    );
                  resolve(resp);
                }
              );
            });
            setShutdown(true);
            setLoading(false);
          } catch (error2) {
            setLoading(false);
            if (typeof error2 === "string") {
              return setError(
                error2.includes("Incorrect Password!") ? "Incorrect password!" : error2
              );
            }
            if (error2 instanceof Error) {
              return setError(error2.message);
            }
            setError("Seed phrase re-sync failed, please try again.");
          }
        },
        children: ({
          handleSubmit,
          handleChange,
          handleBlur,
          errors,
          values,
          submitForm,
          isSubmitting
        }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "form",
          {
            onSubmit: handleSubmit,
            className: `my-3 core-black-contrast-2 p-4 rounded ${f2 && "outline outline-none"}`,
            children: [
              step === 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " grid grid-rows-[auto_1fr]", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm mb-3", children: "Enter the IP:Port of a Mega node to QuickSync from" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    id: "ip",
                    name: "ip",
                    onChange: handleChange,
                    value: values.ip,
                    onFocus: () => setF(true),
                    onBlur: (e3) => {
                      handleBlur(e3);
                      setF(false);
                    },
                    placeholder: "e.g. 34.32.59.133:9001",
                    className: `truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ${errors.ip && "!outline !outline-[#FF627E]"}`
                  }
                ),
                errors.ip && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mt-3 text-[#FF627E]", children: errors.ip }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setStep(2),
                    disabled: !!errors.ip,
                    type: "button",
                    className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                    children: "Next"
                  }
                )
              ] }),
              step === 2 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                EnterSeedPhrase,
                {
                  formNext: () => setStep((prevState) => prevState + 1),
                  formPrev: () => setStep((prevState) => prevState - 1)
                }
              ) }),
              step === 3 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " grid grid-rows-[auto_1fr]", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm mb-3", children: "Enter the number of keys (addresses) to create (default is 64)" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    id: "keys",
                    name: "keys",
                    onChange: handleChange,
                    value: values.keys,
                    onFocus: () => setF(true),
                    onBlur: (e3) => {
                      handleBlur(e3);
                      setF(false);
                    },
                    placeholder: "Number of keys (addresses)",
                    className: `truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ${errors.ip && "!outline !outline-[#FF627E]"}`,
                    type: "number"
                  }
                ),
                errors.keys && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mt-3 text-[#FF627E]", children: errors.keys }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "my-2", children: "All Minima nodes are started with 64 addresses by default. If you created more, you can set the number of addresses to create manually here. Note that in future you should always create at least this many addresses to ensure all your coins are recovered." }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setStep(4),
                    disabled: !!errors.keys,
                    type: "button",
                    className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                    children: "Next"
                  }
                )
              ] }) }),
              step === 4 && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " grid grid-rows-[auto_1fr]", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm mb-3", children: "Enter the number of key uses" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    id: "keyuses",
                    name: "keyuses",
                    onChange: handleChange,
                    value: values.keyuses,
                    onFocus: () => setF(true),
                    onBlur: (e3) => {
                      handleBlur(e3);
                      setF(false);
                    },
                    placeholder: "Number of signatures",
                    className: `truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ${errors.ip && "!outline !outline-[#FF627E]"}`,
                    type: "number"
                  }
                ),
                errors.keyuses && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mt-3 text-[#FF627E]", children: errors.keyuses }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "my-2", children: "Enter the maximum times you have signed a transaction or leave the default if you think you haven't signed over 1000 transactions." }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setConfirm(true),
                    disabled: !!errors.keyuses,
                    type: "button",
                    className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                    children: "Next"
                  }
                )
              ] }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                AnimatedDialog,
                {
                  isOpen: confirm,
                  onClose: () => null,
                  position: "items-start mt-20",
                  extraClass: "max-w-sm mx-auto",
                  dialogStyles: "h-[400px] rounded-lg !shadow-teal-800 !shadow-sm overflow-hidden bg-black",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-between items-center pr-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-[auto_1fr] ml-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "my-auto font-bold ml-2", children: "Seed Phrase Restore" }) }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 h-full flex flex-col justify-between", children: [
                      DEFAULT && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm my-3", children: "Are you sure you wish to wipe and restore this node to the seed phrase provided? Your coins will be restored and the node will re-sync to the latest block." }),
                      SUCCESS && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Re-sync complete. Please close this screen and re-login to the Minihub." }),
                      ERROR && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: error.replace("Archive", "") }),
                      RESYNCING && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "animate-pulse", children: "Re-syncing..." }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(DialogLogs, {})
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-end mb-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[auto_1fr] gap-2", children: [
                          !SUCCESS && !RESYNCING && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              disabled: isSubmitting,
                              className: "disabled:bg-opacity-10 bg-gray-600 !py-2  font-bold tracking-tighter",
                              type: "button",
                              onClick: () => setConfirm(false),
                              children: "Dismiss"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "button",
                            {
                              disabled: isSubmitting,
                              onClick: () => {
                                if (!SUCCESS) {
                                  return submitForm();
                                }
                                if (window.navigator.userAgent.includes(
                                  "Minima Browser"
                                )) {
                                  return Android.shutdownMinima();
                                }
                                return window.close();
                              },
                              type: "button",
                              className: "disabled:bg-opacity-50 font-bold !py-2 text-black bg-violet-300",
                              children: [
                                DEFAULT && "Okay",
                                ERROR && "Re-try",
                                SUCCESS && "Close",
                                RESYNCING && "Re-syncing"
                              ]
                            }
                          )
                        ] })
                      ] })
                    ] })
                  ] })
                }
              )
            ]
          }
        )
      }
    )
  ] });
};
const MinimaFileUploader = ({
  renderData,
  internalDataName,
  internalListStyle,
  internalSearch,
  externalAcceptFileType
}) => {
  const inputRef = reactExports.useRef(null);
  const { _promptFileUpload, promptFileUpload } = reactExports.useContext(appContext);
  const { setFieldValue } = useFormikContext();
  const [promptInternal, setPromptInternal] = reactExports.useState(false);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "button",
        {
          onClick: () => setPromptInternal(true),
          type: "button",
          className: "bg-white focus:outline focus:outline-violet-300 text-black hover:bg-opacity-80 w-full mb-2 font-bold",
          children: "Select an internal backup"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => {
              var _a;
              return (_a = inputRef.current) == null ? void 0 : _a.click();
            },
            type: "button",
            className: "bg-white focus:outline focus:outline-violet-300 text-black hover:bg-opacity-80 w-full font-bold",
            children: "Select an external backup"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "input",
          {
            ref: inputRef,
            id: "upload",
            name: "upload",
            type: "file",
            className: "hidden",
            accept: externalAcceptFileType,
            onChange: async (e3) => {
              try {
                promptFileUpload({ status: null, progress: "", error: "" });
                if (e3.target.files && e3.target.files.length) {
                  await new Promise((resolve, reject) => {
                    window.MDS.file.upload(
                      // @ts-ignore
                      e3.target.files[0],
                      async function(resp) {
                        if (!resp.status)
                          reject(resp.error ? resp.error : "Upload failed...");
                        if (resp.allchunks >= 10) {
                          promptFileUpload({
                            status: null,
                            progress: resp.chunk / resp.allchunks,
                            error: ""
                          });
                        }
                        if (resp.allchunks === resp.chunk) {
                          promptFileUpload({
                            status: true,
                            progress: "100",
                            error: ""
                          });
                          window.MDS.file.move(
                            "/fileupload/" + resp.filename,
                            `/${internalDataName.toLowerCase()}/` + resp.filename,
                            (moveres) => {
                              if (!moveres.status)
                                reject(
                                  moveres.error ? moveres.error : "Moving file failed..."
                                );
                              setFieldValue(
                                "file",
                                `/${internalDataName.toLowerCase()}/` + resp.filename
                              );
                              resolve(true);
                            }
                          );
                        }
                      }
                    );
                  }).catch((error) => {
                    throw error;
                  });
                } else {
                  promptFileUpload(false);
                }
              } catch (error) {
                if (error instanceof Error) {
                  return promptFileUpload({
                    status: false,
                    progress: "",
                    error: error.message
                  });
                }
                promptFileUpload({
                  status: false,
                  progress: "",
                  error: "Something went wrong, please try again."
                });
              } finally {
                setTimeout(() => {
                  promptFileUpload(false);
                }, _promptFileUpload && _promptFileUpload.status === false ? 5e3 : 2e3);
              }
            }
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      AnimatedDialog,
      {
        isOpen: promptInternal,
        onClose: () => setPromptInternal(false),
        position: "items-start mt-20",
        extraClass: "max-w-sm mx-auto",
        dialogStyles: "h-[400px] rounded-lg !shadow-teal-800 !shadow-sm bg-black overflow-y-scroll",
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-between items-center pr-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-[auto_1fr] ml-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "my-auto font-bold ml-2", children: [
            "Select from ",
            internalDataName,
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs", children: "(Internal)" })
          ] }) }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            internalSearch && internalSearch,
            /* @__PURE__ */ jsxRuntimeExports.jsx("ul", { className: internalListStyle, children: renderData({ setFieldValue, setPromptInternal }) })
          ] })
        ] })
      }
    )
  ] });
};
const makeTimestamp = (filename) => {
  const regex = /^(auto_)?minima_backup_(\d+)__([^_]+)_(\d+)\.bak$/;
  const match2 = filename.match(regex);
  filename.match(regex);
  if (!match2)
    return "";
  const timestamp = parseInt(match2[2]);
  const timestampDate = new Date(timestamp);
  return format(timestampDate, "dd/MM/yyyy HH:mm");
};
const makeAuto = (filename) => {
  const regex = /^(auto_)?minima_backup_(\d+)__([^_]+)_(\d+)\.bak$/;
  const match2 = filename.match(regex);
  filename.match(regex);
  if (!match2)
    return null;
  const isAuto = match2[1] === "auto_";
  return isAuto ? "Auto" : "";
};
const FromBackup = () => {
  const { backups } = reactExports.useContext(appContext);
  const [f2, setF] = reactExports.useState(false);
  const [step, setStep] = reactExports.useState(1);
  const [hidePassword, setHidePassword] = reactExports.useState(true);
  const [searchText, setSearchText] = reactExports.useState("");
  const [confirm, setConfirm] = reactExports.useState(false);
  const [loading, setLoading] = reactExports.useState(false);
  const [error, setError] = reactExports.useState(false);
  const [shutdown, setShutdown] = reactExports.useState(false);
  const handleSearchEvent = (e3) => {
    setSearchText(e3.target.value);
  };
  const renderBackups = ({ setFieldValue, setPromptInternal }) => {
    if (backups.filter((b3) => makeTimestamp(b3.name).includes(searchText)).length === 0) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("li", { className: "px-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-center", children: "No backup found with the specified date/time" }) });
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { isOpen: true, delay: 0, children: backups.filter((b3) => makeTimestamp(b3.name).includes(searchText)).sort((a3, b3) => {
      const dateA = new Date(makeTimestamp(a3.name));
      const dateB = new Date(makeTimestamp(b3.name));
      return dateA - dateB;
    }).map((backup, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
      "li",
      {
        className: "grid grid-cols-[1fr_auto] bg-[#1B1B1B] px-4 py-3 mb-3",
        onClick: () => {
          setFieldValue("file", backup.location);
          setPromptInternal(false);
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("h3", { className: "text-white font-bold", children: [
            "My ",
            makeAuto(backup.name),
            " Backup"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "my-auto", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs", children: makeTimestamp(backup.name) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-xs text-right fotn-bold", children: formatBytes$1(backup.size) })
          ] })
        ]
      },
      index2
    )) });
  };
  const DEFAULT = !loading && !error && !shutdown;
  const RESYNCING = loading && !error && !shutdown;
  const ERROR = !loading && error && !shutdown;
  const SUCCESS = !loading && !error && shutdown;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(SlideIn, { isOpen: true, delay: 0, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl mb-2 font-bold", children: "Import a Backup" }),
    /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Importing a backup will restore the node to its locked or unlocked state when the backup was taken. QuickSync will ensure your coins are restored and the chain is synced to the latest block (optional but recommended)" }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-center text-violet-300 mt-3", children: [
      "Step ",
      step,
      "/3"
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[auto_16px_auto_16px_auto] my-3 text-center items-center", children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "p",
        {
          onClick: () => !RESYNCING && step === 2 ? setStep(1) : null,
          className: `text-xs opacity-50 cursor-pointer ${step === 1 && "opacity-100 text-yellow-300 font-bold"} ${step > 1 && "opacity-100 text-violet-300 font-bold"}`,
          children: "Back up"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `${step > 1 && "text-violet-300 opacity-50"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RightArrow, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "p",
        {
          onClick: () => !RESYNCING && step === 3 ? setStep(2) : null,
          className: `text-xs opacity-50 cursor-pointer ${step === 2 && "opacity-100 text-yellow-300"} ${step > 2 && "opacity-100 text-violet-300 font-bold"}`,
          children: "Password"
        }
      ),
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: `${step > 2 && "text-violet-300 opacity-50"}`, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RightArrow, {}) }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(
        "p",
        {
          className: `text-xs opacity-50 cursor-pointer ${step === 3 && "opacity-100 text-yellow-300"} ${step > 3 && "opacity-100 text-violet-300 font-bold"}`,
          children: "QuickSync"
        }
      )
    ] }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Formik,
      {
        initialValues: {
          ip: "",
          file: "",
          password: ""
        },
        validationSchema: create$3().shape({
          ip: create$6().matches(
            /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]|65[0-4][0-9][0-9]|6[0-4][0-9][0-9][0-9][0-9]|[1-5](\d){4}|[1-9](\d){0,3})$/,
            "Invalid IP:Port format"
          ).trim(),
          file: create$6().required("Backup required").min(1).trim()
        }),
        onSubmit: async ({ ip: ip2, file, password }) => {
          setLoading(true);
          setError(false);
          try {
            const fullPath = await getPath(file);
            await new Promise((resolve, reject) => {
              if (ip2.trim().length === 0) {
                window.MDS.cmd(
                  `restoresync file:"${fullPath}" password:"${password.length ? password : "minima"}"`,
                  (response) => {
                    if (!response.status)
                      return reject(
                        response.error ? response.error : "Restoring from backup failed, please try again"
                      );
                    resolve(response);
                  }
                );
              } else {
                window.MDS.cmd(
                  `megammrsync action:resync file:"${fullPath}" ${ip2.length > 0 ? `host:${ip2.trim()}` : ""} ${password.length > 0 ? "password:" + password : ""}`,
                  (resp) => {
                    if (!resp.status)
                      reject(
                        resp.error ? resp.error : `Mega node re-sync failed with host:${ip2}`
                      );
                    resolve(resp);
                  }
                );
              }
            });
            setShutdown(true);
            setLoading(false);
          } catch (error2) {
            setLoading(false);
            if (typeof error2 === "string") {
              return setError(
                error2.includes("GZIP") || error2.includes("Incorrect Password!") ? "Incorrect password!" : error2
              );
            }
            if (error2 instanceof Error) {
              return setError(error2.message);
            }
            setError("Backup re-sync failed, please try again.");
          }
        },
        children: ({
          handleSubmit,
          handleChange,
          handleBlur,
          setFieldValue,
          submitForm,
          errors,
          values,
          isSubmitting
        }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "form",
          {
            onSubmit: handleSubmit,
            className: `my-3 core-black-contrast-2 p-4 rounded ${f2 && "outline outline-none"}`,
            children: [
              step === 1 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm mb-3", children: "Select a backup to restore" }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-rows-[16px_1fr]", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
                  values.file.length === 0 && /* @__PURE__ */ jsxRuntimeExports.jsx(
                    MinimaFileUploader,
                    {
                      renderData: renderBackups,
                      internalDataName: "backups",
                      internalListStyle: "my-3",
                      internalSearch: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "px-3", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          value: searchText,
                          onChange: handleSearchEvent,
                          placeholder: "Search by date/time",
                          className: "w-full rounded px-3 mt-3 !text-black focus:!outline focus:outline-violet-300 py-2"
                        }
                      ) }),
                      externalAcceptFileType: ".bak"
                    }
                  ),
                  values.file.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-rows-2 bg-[#1B1B1B] px-3 my-2 rounded py-2", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-violet-300", children: "Selected file" }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm break-all", children: values.file })
                    ] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        onClick: () => setFieldValue("file", ""),
                        type: "button",
                        className: "!p-2 bg-black focus:outline focus:outline-violet-300 text-white hover:!cursor-pointer w-full font-bold mb-2",
                        children: "Use another file"
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "button",
                      {
                        disabled: !!errors.file,
                        onClick: () => setStep(2),
                        type: "button",
                        className: "bg-white focus:outline focus:outline-violet-300 text-black hover:bg-opacity-80 w-full font-bold disabled:opacity-10",
                        children: "Next"
                      }
                    )
                  ] })
                ] })
              ] }),
              step === 3 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " grid grid-rows-[auto_1fr]", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("label", { className: "text-sm mb-3", children: "Enter the IP:Port of a Mega node to QuickSync from" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "input",
                  {
                    id: "ip",
                    name: "ip",
                    onChange: handleChange,
                    value: values.ip,
                    onFocus: () => setF(true),
                    onBlur: (e3) => {
                      handleBlur(e3);
                      setF(false);
                    },
                    placeholder: "e.g. 34.32.59.133:9001",
                    className: `truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ${errors.ip && "!outline !outline-[#FF627E]"}`
                  }
                ),
                errors.ip && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mt-3 text-[#FF627E]", children: errors.ip }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setConfirm(true),
                    disabled: !!errors.ip,
                    type: "button",
                    className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                    children: "Next"
                  }
                )
              ] }),
              step === 2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: " grid grid-rows-[auto_1fr]", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsxs("label", { className: "text-sm mb-3", children: [
                  "Enter your backup password",
                  " ",
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs", children: "(if applicable)" })
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "div",
                  {
                    className: `w-full bg-[#1B1B1B] grid grid-cols-[1fr_auto] ${errors.password && "!outline !outline-[#FF627E]"} ${f2 && "outline outline-violet-300"} rounded`,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "input",
                        {
                          id: "password",
                          name: "password",
                          type: hidePassword ? "password" : "text",
                          onChange: handleChange,
                          value: values.password,
                          onFocus: () => setF(true),
                          onBlur: (e3) => {
                            handleBlur(e3);
                            setF(false);
                          },
                          placeholder: "Enter password",
                          className: `truncate focus:outline-none px-4 py-3 core-black-contrast `
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        "div",
                        {
                          className: "my-auto px-3",
                          onClick: () => setHidePassword((prevState) => !prevState),
                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(TogglePasswordIcon, { toggle: !hidePassword })
                        }
                      )
                    ]
                  }
                ),
                errors.password && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "mt-3 text-[#FF627E]", children: errors.password }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "my-2", children: "Keep the field empty if you haven't set any." }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => setStep(3),
                    disabled: !!errors.password,
                    type: "button",
                    className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                    children: "Next"
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                AnimatedDialog,
                {
                  isOpen: confirm,
                  onClose: () => null,
                  position: "items-start mt-20",
                  extraClass: "max-w-sm mx-auto",
                  dialogStyles: "h-[400px] rounded-lg !shadow-violet-800 !shadow-sm overflow-hidden bg-black",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex justify-between items-center pr-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-[auto_1fr] ml-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "my-auto font-bold ml-2", children: "Import backup" }) }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "px-4 h-full flex flex-col justify-between", children: [
                      DEFAULT && /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-sm my-3", children: [
                        !values.ip.length && "This will restore the backup and attempt to sync to the latest block. If not using QuickSync and the backup is old or was taken when out of sync with the chain, it may not be possible to sync to the latest block. Continue?",
                        !!values.ip.length && "This will restore the backup and attempt to re-sync the chain to the latest block using the QuickSync host provided.” Continue?"
                      ] }),
                      SUCCESS && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Re-sync completed. Please close this screen and re-login to the Minihub." }),
                      ERROR && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: error.replace("Archive", "") }),
                      RESYNCING && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "animate-pulse", children: "Re-syncing..." }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(DialogLogs, {})
                      ] }),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-end mb-4", children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx("div", {}),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-[auto_1fr] gap-2", children: [
                          !SUCCESS && !RESYNCING && /* @__PURE__ */ jsxRuntimeExports.jsx(
                            "button",
                            {
                              disabled: isSubmitting,
                              className: "disabled:bg-opacity-10 bg-gray-600 !py-2  font-bold tracking-tighter",
                              type: "button",
                              onClick: () => setConfirm(false),
                              children: "Dismiss"
                            }
                          ),
                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                            "button",
                            {
                              disabled: isSubmitting,
                              onClick: () => {
                                if (!SUCCESS) {
                                  return submitForm();
                                }
                                if (window.navigator.userAgent.includes(
                                  "Minima Browser"
                                )) {
                                  return Android.shutdownMinima();
                                }
                                return window.close();
                              },
                              type: "button",
                              className: "disabled:bg-opacity-50 font-bold !py-2 text-black bg-violet-300",
                              children: [
                                DEFAULT && "Okay",
                                ERROR && "Re-try",
                                SUCCESS && "Close",
                                RESYNCING && "Re-syncing"
                              ]
                            }
                          )
                        ] })
                      ] })
                    ] })
                  ] })
                }
              )
            ]
          }
        )
      }
    )
  ] });
};
const router = createHashRouter(
  createRoutesFromChildren(
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Route,
      {
        path: "/",
        element: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}),
        loader: () => {
          return localStorage.getItem(getAppUID());
        },
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { index: true, element: /* @__PURE__ */ jsxRuntimeExports.jsx(Splash, {}) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Route,
            {
              element: /* @__PURE__ */ jsxRuntimeExports.jsx(Authorisation, { permissions: [PERMISSIONS["CAN_VIEW_UPLOADING"]] }),
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "upload", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Uploading, {}) })
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { path: "/dashboard", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Dashboard, {}), children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Route,
              {
                index: true,
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Security, {}) })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { path: "archivereset", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Route,
                {
                  index: true,
                  element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchiveReset$1, {}) })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Route,
                {
                  path: "restorebackup",
                  element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ArchiveReset, {}) })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Route,
                {
                  path: "chainresync",
                  element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ChainResyncReset, {}) })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Route,
                {
                  path: "seedresync",
                  element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx(SeedResyncReset, {}) })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { path: "archives", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Route,
                  {
                    index: true,
                    element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Archives, {}) })
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Route,
                  {
                    element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Authorisation,
                      {
                        permissions: [PERMISSIONS["CAN_VIEW_DELETE_ARCHIVE"]]
                      }
                    ),
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Route,
                      {
                        path: "delete",
                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(DeleteArchive, {}) })
                      }
                    )
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "integritycheck", element: /* @__PURE__ */ jsxRuntimeExports.jsx(IntegrityCheck, {}) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Route,
              {
                path: "lockprivatekeys",
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(LockPrivateKeys, {}) })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Route,
              {
                path: "quicksync",
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(QuickSync, {}) }),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "host", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Host, {}) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "fromseedphrase", element: /* @__PURE__ */ jsxRuntimeExports.jsx(FromSeedPhrase, {}) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "frombackup", element: /* @__PURE__ */ jsxRuntimeExports.jsx(FromBackup, {}) })
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { path: "backup", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Route,
                {
                  index: true,
                  element: /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(BackupNode, {}) })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "backups", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Route,
                {
                  index: true,
                  element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Backups, {}) })
                }
              ) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Route,
                {
                  element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Authorisation,
                    {
                      permissions: [PERMISSIONS["CAN_VIEW_AUTOCREATEPASSWORD"]]
                    }
                  ),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Route,
                    {
                      path: "autocreatepassword",
                      element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(AutoCreatePassword, {}) })
                    }
                  )
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { path: "manageseedphrase", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Route,
                {
                  index: true,
                  element: /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ManageSeedPhrase, {}) })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                Route,
                {
                  element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Authorisation,
                    {
                      permissions: [PERMISSIONS["CAN_VIEW_VIEWSEEDPHRASE"]]
                    }
                  ),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Route,
                    {
                      path: "viewseedphrase",
                      element: /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ViewSeedPhrase, {}) })
                    }
                  )
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "restore", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Route,
              {
                index: true,
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(SlideIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RestoreFromBackup, {}) })
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Route,
              {
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Authorisation, { permissions: [PERMISSIONS["CAN_VIEW_MODAL"]] }),
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Route,
                  {
                    path: "modal",
                    element: /* @__PURE__ */ jsxRuntimeExports.jsx(FadeIn, { delay: 100, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Dialog, {}) })
                  }
                )
              }
            )
          ] })
        ]
      }
    )
  )
);
client.createRoot(document.getElementById("root")).render(
  /* @__PURE__ */ jsxRuntimeExports.jsx(React.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(RouterProvider, { router }) })
);
export {
  __vite_legacy_guard
};
