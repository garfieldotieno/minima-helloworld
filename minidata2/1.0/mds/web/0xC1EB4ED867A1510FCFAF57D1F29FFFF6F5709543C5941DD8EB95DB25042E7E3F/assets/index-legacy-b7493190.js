;
(function () {
  var _excluded2 = ["children"],
    _excluded3 = ["style", "children", "scrollTop", "scrollLeft", "viewBox"],
    _excluded4 = ["x", "y", "z"],
    _excluded5 = ["scrollTop", "scrollLeft"];
  function _objectWithoutProperties2(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose2(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
  function _objectWithoutPropertiesLoose2(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
  function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure " + obj); }
  function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf2(Wrapper, Class); }; return _wrapNativeSuper(Class); }
  function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf2(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
  function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
  function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf2(subClass, superClass); }
  function _setPrototypeOf2(o, p) { _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf2(o, p); }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
  function _possibleConstructorReturn(self, call) { if (call && (_typeof2(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
  function _defineProperty2(obj, key, value) { key = _toPropertyKey2(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey2(descriptor.key), descriptor); } }
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  function _toPropertyKey2(arg) { var key = _toPrimitive2(arg, "string"); return _typeof2(key) === "symbol" ? key : String(key); }
  function _toPrimitive2(input, hint) { if (_typeof2(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof2(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  function _toArray(arr) { return _arrayWithHoles2(arr) || _iterableToArray(arr) || _unsupportedIterableToArray2(arr) || _nonIterableRest2(); }
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof2(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function _slicedToArray2(arr, i) { return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2(); }
  function _nonIterableRest2() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _iterableToArrayLimit2(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
  function _arrayWithHoles2(arr) { if (Array.isArray(arr)) return arr; }
  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread(); }
  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray2(arr); }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  function _typeof2(obj) { "@babel/helpers - typeof"; return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof2(obj); }
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e3) { throw _e3; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e4) { didErr = true; err = _e4; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen); }
  function _arrayLikeToArray2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
  System.register([], function (exports, module) {
    'use strict';

    return {
      execute: function execute() {
        var __vite_style__ = document.createElement('style');
        __vite_style__.textContent = "@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&family=Roboto+Mono:wght@400&display=swap');\n\n\n/*\n! tailwindcss v3.3.2 | MIT License | https://tailwindcss.com\n*/\n\n\n/*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n5. Use the user's configured `sans` font-feature-settings by default.\n6. Use the user's configured `sans` font-variation-settings by default.\n*/\n\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n  font-variation-settings: normal; /* 6 */\n}\n\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n\n/*\nRemove the default font size and weight for headings.\n*/\n\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n\n/*\n1. Use the user's configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n\n/*\nAdd the correct font size in all browsers.\n*/\n\n\nsmall {\n  font-size: 80%;\n}\n\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\n\nsub {\n  bottom: -0.25em;\n}\n\n\nsup {\n  top: -0.5em;\n}\n\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n\n:-moz-focusring {\n  outline: auto;\n}\n\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\n\nprogress {\n  vertical-align: baseline;\n}\n\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\n\nsummary {\n  display: list-item;\n}\n\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\n\nlegend {\n  padding: 0;\n}\n\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\n\ntextarea {\n  resize: vertical;\n}\n\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n\n/*\nSet the default cursor for buttons.\n*/\n\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n\n\n:disabled {\n  cursor: default;\n}\n\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n\n\n[hidden] {\n  display: none;\n}\n\n\n*, ::before, ::after{\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n\n::backdrop{\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n\n.container{\n  width: 100%;\n}\n\n\n@media (min-width: 640px){\n\n\n  .container{\n    max-width: 640px;\n  }\n}\n\n\n@media (min-width: 768px){\n\n\n  .container{\n    max-width: 768px;\n  }\n}\n\n\n@media (min-width: 1024px){\n\n\n  .container{\n    max-width: 1024px;\n  }\n}\n\n\n@media (min-width: 1280px){\n\n\n  .container{\n    max-width: 1280px;\n  }\n}\n\n\n@media (min-width: 1536px){\n\n\n  .container{\n    max-width: 1536px;\n  }\n}\n\n\n.visible{\n  visibility: visible;\n}\n\n\n.fixed{\n  position: fixed;\n}\n\n\n.absolute{\n  position: absolute;\n}\n\n\n.relative{\n  position: relative;\n}\n\n\n.sticky{\n  position: sticky;\n}\n\n\n.inset-0{\n  inset: 0px;\n}\n\n\n.bottom-0{\n  bottom: 0px;\n}\n\n\n.bottom-10{\n  bottom: 2.5rem;\n}\n\n\n.left-0{\n  left: 0px;\n}\n\n\n.left-\\[15px\\]{\n  left: 15px;\n}\n\n\n.left-\\[16px\\]{\n  left: 16px;\n}\n\n\n.right-0{\n  right: 0px;\n}\n\n\n.right-2{\n  right: 0.5rem;\n}\n\n\n.right-4{\n  right: 1rem;\n}\n\n\n.right-\\[1px\\]{\n  right: 1px;\n}\n\n\n.top-0{\n  top: 0px;\n}\n\n\n.top-4{\n  top: 1rem;\n}\n\n\n.top-6{\n  top: 1.5rem;\n}\n\n\n.top-\\[100\\%\\]{\n  top: 100%;\n}\n\n\n.top-\\[12\\.5px\\]{\n  top: 12.5px;\n}\n\n\n.top-\\[12px\\]{\n  top: 12px;\n}\n\n\n.top-\\[15px\\]{\n  top: 15px;\n}\n\n\n.top-\\[54px\\]{\n  top: 54px;\n}\n\n\n.z-10{\n  z-index: 10;\n}\n\n\n.z-20{\n  z-index: 20;\n}\n\n\n.z-\\[1000\\]{\n  z-index: 1000;\n}\n\n\n.z-\\[1\\]{\n  z-index: 1;\n}\n\n\n.z-\\[21\\]{\n  z-index: 21;\n}\n\n\n.z-\\[25\\]{\n  z-index: 25;\n}\n\n\n.z-\\[2\\]{\n  z-index: 2;\n}\n\n\n.z-\\[60\\]{\n  z-index: 60;\n}\n\n\n.z-\\[70\\]{\n  z-index: 70;\n}\n\n\n.z-\\[80\\]{\n  z-index: 80;\n}\n\n\n.z-\\[90\\]{\n  z-index: 90;\n}\n\n\n.col-span-1{\n  grid-column: span 1 / span 1;\n}\n\n\n.mx-2{\n  margin-left: 0.5rem;\n  margin-right: 0.5rem;\n}\n\n\n.mx-3{\n  margin-left: 0.75rem;\n  margin-right: 0.75rem;\n}\n\n\n.mx-4{\n  margin-left: 1rem;\n  margin-right: 1rem;\n}\n\n\n.mx-auto{\n  margin-left: auto;\n  margin-right: auto;\n}\n\n\n.my-2{\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n\n\n.my-3{\n  margin-top: 0.75rem;\n  margin-bottom: 0.75rem;\n}\n\n\n.my-4{\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n\n\n.my-auto{\n  margin-top: auto;\n  margin-bottom: auto;\n}\n\n\n.\\!mb-0{\n  margin-bottom: 0px !important;\n}\n\n\n.\\!mb-4{\n  margin-bottom: 1rem !important;\n}\n\n\n.\\!mt-0{\n  margin-top: 0px !important;\n}\n\n\n.mb-1{\n  margin-bottom: 0.25rem;\n}\n\n\n.mb-12{\n  margin-bottom: 3rem;\n}\n\n\n.mb-2{\n  margin-bottom: 0.5rem;\n}\n\n\n.mb-3{\n  margin-bottom: 0.75rem;\n}\n\n\n.mb-4{\n  margin-bottom: 1rem;\n}\n\n\n.mb-5{\n  margin-bottom: 1.25rem;\n}\n\n\n.mb-6{\n  margin-bottom: 1.5rem;\n}\n\n\n.mb-8{\n  margin-bottom: 2rem;\n}\n\n\n.mb-9{\n  margin-bottom: 2.25rem;\n}\n\n\n.ml-2{\n  margin-left: 0.5rem;\n}\n\n\n.ml-4{\n  margin-left: 1rem;\n}\n\n\n.mr-2{\n  margin-right: 0.5rem;\n}\n\n\n.mr-4{\n  margin-right: 1rem;\n}\n\n\n.mt-2{\n  margin-top: 0.5rem;\n}\n\n\n.mt-20{\n  margin-top: 5rem;\n}\n\n\n.mt-3{\n  margin-top: 0.75rem;\n}\n\n\n.mt-4{\n  margin-top: 1rem;\n}\n\n\n.mt-5{\n  margin-top: 1.25rem;\n}\n\n\n.mt-6{\n  margin-top: 1.5rem;\n}\n\n\n.mt-8{\n  margin-top: 2rem;\n}\n\n\n.block{\n  display: block;\n}\n\n\n.inline-block{\n  display: inline-block;\n}\n\n\n.inline{\n  display: inline;\n}\n\n\n.flex{\n  display: flex;\n}\n\n\n.inline-flex{\n  display: inline-flex;\n}\n\n\n.table{\n  display: table;\n}\n\n\n.grid{\n  display: grid;\n}\n\n\n.hidden{\n  display: none;\n}\n\n\n.\\!h-screen{\n  height: 100vh !important;\n}\n\n\n.h-12{\n  height: 3rem;\n}\n\n\n.h-4{\n  height: 1rem;\n}\n\n\n.h-6{\n  height: 1.5rem;\n}\n\n\n.h-\\[100vh\\]{\n  height: 100vh;\n}\n\n\n.h-\\[128px\\]{\n  height: 128px;\n}\n\n\n.h-\\[400px\\]{\n  height: 400px;\n}\n\n\n.h-\\[48px\\]{\n  height: 48px;\n}\n\n\n.h-\\[56px\\]{\n  height: 56px;\n}\n\n\n.h-full{\n  height: 100%;\n}\n\n\n.h-max{\n  height: -moz-max-content;\n  height: max-content;\n}\n\n\n.h-screen{\n  height: 100vh;\n}\n\n\n.max-h-32{\n  max-height: 8rem;\n}\n\n\n.max-h-80{\n  max-height: 20rem;\n}\n\n\n.max-h-\\[150px\\]{\n  max-height: 150px;\n}\n\n\n.max-h-\\[200px\\]{\n  max-height: 200px;\n}\n\n\n.max-h-\\[54px\\]{\n  max-height: 54px;\n}\n\n\n.min-h-\\[50vh\\]{\n  min-height: 50vh;\n}\n\n\n.min-h-screen{\n  min-height: 100vh;\n}\n\n\n.w-12{\n  width: 3rem;\n}\n\n\n.w-4{\n  width: 1rem;\n}\n\n\n.w-6{\n  width: 1.5rem;\n}\n\n\n.w-7{\n  width: 1.75rem;\n}\n\n\n.w-\\[128px\\]{\n  width: 128px;\n}\n\n\n.w-\\[16px\\]{\n  width: 16px;\n}\n\n\n.w-\\[20px\\]{\n  width: 20px;\n}\n\n\n.w-\\[32px\\]{\n  width: 32px;\n}\n\n\n.w-\\[calc\\(100\\%_-_16px\\)\\]{\n  width: calc(100% - 16px);\n}\n\n\n.w-auto{\n  width: auto;\n}\n\n\n.w-full{\n  width: 100%;\n}\n\n\n.w-max{\n  width: -moz-max-content;\n  width: max-content;\n}\n\n\n.max-w-lg{\n  max-width: 32rem;\n}\n\n\n.max-w-md{\n  max-width: 28rem;\n}\n\n\n.max-w-sm{\n  max-width: 24rem;\n}\n\n\n.flex-1{\n  flex: 1 1 0%;\n}\n\n\n.flex-none{\n  flex: none;\n}\n\n\n.origin-left{\n  transform-origin: left;\n}\n\n\n.transform{\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n\n\n@keyframes pulse{\n\n\n  50%{\n    opacity: .5;\n  }\n}\n\n\n.animate-pulse{\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n\n@keyframes spin{\n\n\n  to{\n    transform: rotate(360deg);\n  }\n}\n\n\n.animate-spin{\n  animation: spin 1s linear infinite;\n}\n\n\n.cursor-default{\n  cursor: default;\n}\n\n\n.cursor-pointer{\n  cursor: pointer;\n}\n\n\n.resize{\n  resize: both;\n}\n\n\n.list-inside{\n  list-style-position: inside;\n}\n\n\n.list-disc{\n  list-style-type: disc;\n}\n\n\n.grid-cols-1{\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\n\n\n.grid-cols-2{\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n\n\n.grid-cols-\\[1fr\\2c auto\\]{\n  grid-template-columns: 1fr auto;\n}\n\n\n.grid-cols-\\[1fr_auto\\]{\n  grid-template-columns: 1fr auto;\n}\n\n\n.grid-cols-\\[1fr_auto_1fr\\]{\n  grid-template-columns: 1fr auto 1fr;\n}\n\n\n.grid-cols-\\[1fr_minmax\\(0\\2c _560px\\)_1fr\\]{\n  grid-template-columns: 1fr minmax(0, 560px) 1fr;\n}\n\n\n.grid-cols-\\[1fr_minmax\\(0\\2c _860px\\)_1fr\\]{\n  grid-template-columns: 1fr minmax(0, 860px) 1fr;\n}\n\n\n.grid-cols-\\[32px_auto\\]{\n  grid-template-columns: 32px auto;\n}\n\n\n.grid-cols-\\[auto_16px_auto_16px_auto\\]{\n  grid-template-columns: auto 16px auto 16px auto;\n}\n\n\n.grid-cols-\\[auto_16px_auto_16px_auto_16px_auto\\]{\n  grid-template-columns: auto 16px auto 16px auto 16px auto;\n}\n\n\n.grid-cols-\\[auto_1fr\\]{\n  grid-template-columns: auto 1fr;\n}\n\n\n.grid-rows-1{\n  grid-template-rows: repeat(1, minmax(0, 1fr));\n}\n\n\n.grid-rows-2{\n  grid-template-rows: repeat(2, minmax(0, 1fr));\n}\n\n\n.grid-rows-\\[16px_1fr\\]{\n  grid-template-rows: 16px 1fr;\n}\n\n\n.grid-rows-\\[56px_1fr\\]{\n  grid-template-rows: 56px 1fr;\n}\n\n\n.grid-rows-\\[auto_1fr\\]{\n  grid-template-rows: auto 1fr;\n}\n\n\n.grid-rows-\\[min-content\\]{\n  grid-template-rows: min-content;\n}\n\n\n.flex-row{\n  flex-direction: row;\n}\n\n\n.flex-col{\n  flex-direction: column;\n}\n\n\n.items-start{\n  align-items: flex-start;\n}\n\n\n.items-end{\n  align-items: flex-end;\n}\n\n\n.items-center{\n  align-items: center;\n}\n\n\n.justify-end{\n  justify-content: flex-end;\n}\n\n\n.justify-center{\n  justify-content: center;\n}\n\n\n.justify-between{\n  justify-content: space-between;\n}\n\n\n.justify-items-center{\n  justify-items: center;\n}\n\n\n.gap-1{\n  gap: 0.25rem;\n}\n\n\n.gap-2{\n  gap: 0.5rem;\n}\n\n\n.gap-3{\n  gap: 0.75rem;\n}\n\n\n.gap-4{\n  gap: 1rem;\n}\n\n\n.gap-5{\n  gap: 1.25rem;\n}\n\n\n.gap-6{\n  gap: 1.5rem;\n}\n\n\n.gap-8{\n  gap: 2rem;\n}\n\n\n.self-end{\n  align-self: flex-end;\n}\n\n\n.self-center{\n  align-self: center;\n}\n\n\n.justify-self-center{\n  justify-self: center;\n}\n\n\n.overflow-auto{\n  overflow: auto;\n}\n\n\n.overflow-hidden{\n  overflow: hidden;\n}\n\n\n.overflow-y-auto{\n  overflow-y: auto;\n}\n\n\n.overflow-y-scroll{\n  overflow-y: scroll;\n}\n\n\n.truncate{\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n\n.whitespace-normal{\n  white-space: normal;\n}\n\n\n.break-words{\n  overflow-wrap: break-word;\n}\n\n\n.break-all{\n  word-break: break-all;\n}\n\n\n.rounded{\n  border-radius: 0.25rem;\n}\n\n\n.rounded-full{\n  border-radius: 9999px;\n}\n\n\n.rounded-lg{\n  border-radius: 0.5rem;\n}\n\n\n.rounded-md{\n  border-radius: 0.375rem;\n}\n\n\n.rounded-b-lg{\n  border-bottom-right-radius: 0.5rem;\n  border-bottom-left-radius: 0.5rem;\n}\n\n\n.rounded-r-none{\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0px;\n}\n\n\n.rounded-t{\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n\n.border{\n  border-width: 1px;\n}\n\n\n.border-b{\n  border-bottom-width: 1px;\n}\n\n\n.border-b-0{\n  border-bottom-width: 0px;\n}\n\n\n.border-\\[\\#1B1B1B\\]{\n  --tw-border-opacity: 1;\n  border-color: rgb(27 27 27 / var(--tw-border-opacity));\n}\n\n\n.border-\\[\\#fff\\]{\n  --tw-border-opacity: 1;\n  border-color: rgb(255 255 255 / var(--tw-border-opacity));\n}\n\n\n.border-gray-200{\n  --tw-border-opacity: 1;\n  border-color: rgb(229 231 235 / var(--tw-border-opacity));\n}\n\n\n.border-gray-300{\n  --tw-border-opacity: 1;\n  border-color: rgb(209 213 219 / var(--tw-border-opacity));\n}\n\n\n.border-gray-500{\n  --tw-border-opacity: 1;\n  border-color: rgb(107 114 128 / var(--tw-border-opacity));\n}\n\n\n.border-gray-600{\n  --tw-border-opacity: 1;\n  border-color: rgb(75 85 99 / var(--tw-border-opacity));\n}\n\n\n.border-sky-400{\n  --tw-border-opacity: 1;\n  border-color: rgb(56 189 248 / var(--tw-border-opacity));\n}\n\n\n.border-transparent{\n  border-color: transparent;\n}\n\n\n.\\!bg-\\[\\#1B1B1B\\]{\n  --tw-bg-opacity: 1 !important;\n  background-color: rgb(27 27 27 / var(--tw-bg-opacity)) !important;\n}\n\n\n.\\!bg-black{\n  --tw-bg-opacity: 1 !important;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity)) !important;\n}\n\n\n.\\!bg-transparent{\n  background-color: transparent !important;\n}\n\n\n.bg-\\[\\#1B1B1B\\]{\n  --tw-bg-opacity: 1;\n  background-color: rgb(27 27 27 / var(--tw-bg-opacity));\n}\n\n\n.bg-black{\n  --tw-bg-opacity: 1;\n  background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n}\n\n\n.bg-gray-600{\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n\n\n.bg-gray-900{\n  --tw-bg-opacity: 1;\n  background-color: rgb(17 24 39 / var(--tw-bg-opacity));\n}\n\n\n.bg-inherit{\n  background-color: inherit;\n}\n\n\n.bg-red-100{\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n}\n\n\n.bg-red-600{\n  --tw-bg-opacity: 1;\n  background-color: rgb(220 38 38 / var(--tw-bg-opacity));\n}\n\n\n.bg-slate-200{\n  --tw-bg-opacity: 1;\n  background-color: rgb(226 232 240 / var(--tw-bg-opacity));\n}\n\n\n.bg-violet-300{\n  --tw-bg-opacity: 1;\n  background-color: rgb(196 181 253 / var(--tw-bg-opacity));\n}\n\n\n.bg-violet-500{\n  --tw-bg-opacity: 1;\n  background-color: rgb(139 92 246 / var(--tw-bg-opacity));\n}\n\n\n.bg-white{\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n\n\n.bg-yellow-300{\n  --tw-bg-opacity: 1;\n  background-color: rgb(253 224 71 / var(--tw-bg-opacity));\n}\n\n\n.bg-opacity-90{\n  --tw-bg-opacity: 0.9;\n}\n\n\n.bg-gradient-to-r{\n  background-image: linear-gradient(to right, var(--tw-gradient-stops));\n}\n\n\n.from-blue-500{\n  --tw-gradient-from: #3b82f6 var(--tw-gradient-from-position);\n  --tw-gradient-to: rgb(59 130 246 / 0) var(--tw-gradient-to-position);\n  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);\n}\n\n\n.to-indigo-500{\n  --tw-gradient-to: #6366f1 var(--tw-gradient-to-position);\n}\n\n\n.\\!p-2{\n  padding: 0.5rem !important;\n}\n\n\n.p-16{\n  padding: 4rem;\n}\n\n\n.p-2{\n  padding: 0.5rem;\n}\n\n\n.p-4{\n  padding: 1rem;\n}\n\n\n.p-8{\n  padding: 2rem;\n}\n\n\n.\\!py-2{\n  padding-top: 0.5rem !important;\n  padding-bottom: 0.5rem !important;\n}\n\n\n.px-0{\n  padding-left: 0px;\n  padding-right: 0px;\n}\n\n\n.px-2{\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n\n.px-3{\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n\n\n.px-4{\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n\n.px-5{\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\n\n\n.px-6{\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n\n\n.px-8{\n  padding-left: 2rem;\n  padding-right: 2rem;\n}\n\n\n.py-0{\n  padding-top: 0px;\n  padding-bottom: 0px;\n}\n\n\n.py-2{\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n\n.py-3{\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n\n\n.py-3\\.5{\n  padding-top: 0.875rem;\n  padding-bottom: 0.875rem;\n}\n\n\n.py-4{\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n\n\n.pb-1{\n  padding-bottom: 0.25rem;\n}\n\n\n.pb-2{\n  padding-bottom: 0.5rem;\n}\n\n\n.pb-20{\n  padding-bottom: 5rem;\n}\n\n\n.pb-4{\n  padding-bottom: 1rem;\n}\n\n\n.pb-8{\n  padding-bottom: 2rem;\n}\n\n\n.pl-10{\n  padding-left: 2.5rem;\n}\n\n\n.pl-2{\n  padding-left: 0.5rem;\n}\n\n\n.pl-2\\.5{\n  padding-left: 0.625rem;\n}\n\n\n.pl-4{\n  padding-left: 1rem;\n}\n\n\n.pr-1{\n  padding-right: 0.25rem;\n}\n\n\n.pr-12{\n  padding-right: 3rem;\n}\n\n\n.pr-4{\n  padding-right: 1rem;\n}\n\n\n.pt-1{\n  padding-top: 0.25rem;\n}\n\n\n.pt-2{\n  padding-top: 0.5rem;\n}\n\n\n.pt-4{\n  padding-top: 1rem;\n}\n\n\n.pt-5{\n  padding-top: 1.25rem;\n}\n\n\n.pt-8{\n  padding-top: 2rem;\n}\n\n\n.text-left{\n  text-align: left;\n}\n\n\n.text-center{\n  text-align: center;\n}\n\n\n.text-right{\n  text-align: right;\n}\n\n\n.align-bottom{\n  vertical-align: bottom;\n}\n\n\n.text-2xl{\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n\n\n.text-base{\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n\n\n.text-lg{\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n\n\n.text-sm{\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n\n\n.text-xl{\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n\n\n.text-xs{\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n\n\n.font-black{\n  font-weight: 900;\n}\n\n\n.font-bold{\n  font-weight: 700;\n}\n\n\n.font-light{\n  font-weight: 300;\n}\n\n\n.font-medium{\n  font-weight: 500;\n}\n\n\n.font-normal{\n  font-weight: 400;\n}\n\n\n.font-semibold{\n  font-weight: 600;\n}\n\n\n.uppercase{\n  text-transform: uppercase;\n}\n\n\n.leading-6{\n  line-height: 1.5rem;\n}\n\n\n.tracking-tighter{\n  letter-spacing: -0.05em;\n}\n\n\n.tracking-wide{\n  letter-spacing: 0.025em;\n}\n\n\n.\\!text-black{\n  --tw-text-opacity: 1 !important;\n  color: rgb(0 0 0 / var(--tw-text-opacity)) !important;\n}\n\n\n.text-\\[\\#FF627E\\]{\n  --tw-text-opacity: 1;\n  color: rgb(255 98 126 / var(--tw-text-opacity));\n}\n\n\n.text-black{\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\n\n\n.text-gray-300{\n  --tw-text-opacity: 1;\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\n\n\n.text-gray-400{\n  --tw-text-opacity: 1;\n  color: rgb(156 163 175 / var(--tw-text-opacity));\n}\n\n\n.text-gray-500{\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\n\n\n.text-gray-700{\n  --tw-text-opacity: 1;\n  color: rgb(55 65 81 / var(--tw-text-opacity));\n}\n\n\n.text-gray-800{\n  --tw-text-opacity: 1;\n  color: rgb(31 41 55 / var(--tw-text-opacity));\n}\n\n\n.text-gray-900{\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\n\n\n.text-red-300{\n  --tw-text-opacity: 1;\n  color: rgb(252 165 165 / var(--tw-text-opacity));\n}\n\n\n.text-red-600{\n  --tw-text-opacity: 1;\n  color: rgb(220 38 38 / var(--tw-text-opacity));\n}\n\n\n.text-teal-300{\n  --tw-text-opacity: 1;\n  color: rgb(94 234 212 / var(--tw-text-opacity));\n}\n\n\n.text-violet-300{\n  --tw-text-opacity: 1;\n  color: rgb(196 181 253 / var(--tw-text-opacity));\n}\n\n\n.text-violet-400{\n  --tw-text-opacity: 1;\n  color: rgb(167 139 250 / var(--tw-text-opacity));\n}\n\n\n.text-white{\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n\n.text-yellow-300{\n  --tw-text-opacity: 1;\n  color: rgb(253 224 71 / var(--tw-text-opacity));\n}\n\n\n.opacity-100{\n  opacity: 1;\n}\n\n\n.opacity-50{\n  opacity: 0.5;\n}\n\n\n.opacity-80{\n  opacity: 0.8;\n}\n\n\n.\\!shadow-sm{\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05) !important;\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color) !important;\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important;\n}\n\n\n.shadow-lg{\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n\n.shadow-md{\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n\n.shadow-sm{\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n\n.shadow-xl{\n  --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n\n.\\!shadow-teal-800{\n  --tw-shadow-color: #115e59 !important;\n  --tw-shadow: var(--tw-shadow-colored) !important;\n}\n\n\n.\\!shadow-violet-800{\n  --tw-shadow-color: #5b21b6 !important;\n  --tw-shadow: var(--tw-shadow-colored) !important;\n}\n\n\n.shadow-slate-300{\n  --tw-shadow-color: #cbd5e1;\n  --tw-shadow: var(--tw-shadow-colored);\n}\n\n\n.shadow-white{\n  --tw-shadow-color: #fff;\n  --tw-shadow: var(--tw-shadow-colored);\n}\n\n\n.outline-none{\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n\n.\\!outline{\n  outline-style: solid !important;\n}\n\n\n.outline{\n  outline-style: solid;\n}\n\n\n.\\!outline-\\[\\#FF627E\\]{\n  outline-color: #FF627E !important;\n}\n\n\n.outline-\\[\\#1B1B1B\\]{\n  outline-color: #1B1B1B;\n}\n\n\n.outline-violet-300{\n  outline-color: #c4b5fd;\n}\n\n\n.filter{\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n\n\n.backdrop-blur-sm{\n  --tw-backdrop-blur: blur(4px);\n  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n          backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n}\n\n\n.transition{\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n\n.transition-all{\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n\n.duration-100{\n  transition-duration: 100ms;\n}\n\n\n:root {\n  --globalnav-background: rgba(22, 22, 23, .2);\n  --inset: rgba(255,255,255,0.2);\n  --globalnav-backdrop-filter: saturate(180%) blur(10px);\n  --globalnav-backdrop-filter-level-two: saturate(180%) blur(20px);\n\n  --status-red: #FF627E;\n  --status-green: #4FE3C1;\n  --core-grey: #91919D;\n  --core-grey-5: #F9F9FA;\n  --core-grey-20: #E9E9EB;\n  --core-grey-80: #A7A7B0;\n  --core-grey-100: #D9D9D9;\n  --core-grey-150: #D3D3D8;\n  --core-black-100: #08090B;\n  --core-black-contrast: #17191C;\n  --core-black-contrast-2: #282B2E;\n  --core-black-contrast-3: #464C4F;\n  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n\n  color-scheme: light dark;\n  color: rgba(255, 255, 255, 0.87);\n  background-color: #08090B;\n\n  font-synthesis: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-text-size-adjust: 100%;\n}\n\n\nbody {\n  margin: 0;\n  color: #E9E9EB;\n  height: 100%;\n  min-height: -webkit-fill-available;\n  font-weight: 500;\n  letter-spacing: 0.3px;\n  font-family: 'Manrope', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: var(--background-color);\n  background-size: cover;\n  background-repeat: no-repeat;\n  -webkit-tap-highlight-color: transparent;\n  background-color: #08090B;\n}\n\n\n.text-good {\n  color: var(--status-green)\n}\n\n\n.core-black-contrast-2 {\n  background-color: var(--core-black-contrast-2);\n}\n\n\n.core-black-contrast {\n  background-color: var(--core-black-contrast);\n}\n\n\n.core-black-contrast-3 {\n  background-color: var(--core-black-contrast-3);\n}\n\n\n.bg-black {\n  background-color: var(--core-black-100);\n}\n\n\n.color-core-grey {\n  color: var(--core-grey);\n}\n\n\n.color-black {\n  color: var(--core-black-100);\n}\n\n\n.text-disabled {\n  color: var(--core-black-contrast-3);\n}\n\n\n.text-error {\n  color: var(--status-red);\n}\n\n\n.form-error-message {\n  color: var(--status-red);\n  font-weight: 600;\n}\n\n\n.form-success-box {\n  background-color: #E1FFF1;\n}\n\n\n.form-error-box {\n  background-color: #FFD6D9;\n}\n\n\n.form-info-box {\n  background-color: #FFF9E5;\n}\n\n\n.form-success-message {\n  color: var(--status-green);\n  font-weight: 600;\n}\n\n\n.form-error-border {\n  border: 1px solid var(--status-red);\n  border-radius: 4px;\n}\n\n\n.make-svg-inline svg {\n  display: inline;\n}\n\n\n.input-outline {\n  outline: 1px solid #464C4F;\n}\n\n\n.input-no-outline {\n  outline: none;\n}\n\n\n.password-label {\n  color: var(--core-grey-80);\n}\n\n\n.understand-label {\n  color: var(--core-grey-5);\n}\n\n\n.core-grey-5 {\n  background-color: var(--core-grey-5);\n}\n\n\n.core-grey-100 {\n  background-color: var(--core-grey-100);\n}\n\n\n.core-grey-20 {\n  background-color: var(--core-grey-20);\n}\n\n\n.text-core-grey-80 {\n  color: var(--core-grey-80);\n}\n\n\n.text-core-grey-5 {\n  color: var(--core-grey-5);\n}\n\n\n.border-white {\n  border: 1px solid var(--core-grey-5);\n  border-radius: 4px;\n}\n\n\n.core-black-contrast-2 {\n  background-color: var(--core-black-contrast-2);\n}\n\n\n.core-black-contrast {\n  background-color: var(--core-black-contrast);\n}\n\n\n.core-grey-contrast-3 {\n  color:  var(--core-black-contrast-3);\n}\n\n\na {\n  font-weight: 500;\n  color: #646cff;\n  text-decoration: inherit;\n}\n\n\na:hover {\n  color: #535bf2;\n}\n\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\n\nbutton {\n  border-radius: 8px;\n  border: 1px solid transparent;\n  padding: 12px 16px;\n  font-size: 1em;\n  font-weight: 500;\n  font-family: inherit;\n  background-color: #282B2E;\n  cursor: pointer;\n  transition: border-color 0.25s;\n}\n\n\nbutton:hover {\n  border-color: #646cff;\n}\n\n\nbutton:focus,\nbutton:focus-visible {\n  outline: 4px auto -webkit-focus-ring-color;\n}\n\n\n@media (prefers-color-scheme: light) {\n  :root {\n    color: #213547;\n    background-color: #080908;\n  }\n  a:hover {\n    color: #747bff;\n  }\n}\n\n\n.title-bar {\n  width: 100%;\n  background: var(--core-black-100);\n}\n\n\nbody.theme-light .title-bar {\n  text-shadow: none;\n  background: none;\n  box-shadow: inset 0 0 2px rgba(255,255,255,1);\n  border-bottom: 1px solid rgba(0,0,0,0.1);\n}\n\n\ninput:-internal-autofill-selected {\n  background-color: #08090B!important;\n}\n\n\ninput:-webkit-autofill,\n  input:-webkit-autofill:focus {\n    -webkit-transition: background-color 600000s 0s, color 600000s 0s;\n    transition: background-color 600000s 0s, color 600000s 0s;\n  }\n\n\ninput[type=\"checkbox\"] {\n    /* Add if not using autoprefixer */\n    -webkit-appearance: none;\n    -moz-appearance: none;\n         appearance: none;\n    /* For iOS < 15 to remove gradient background */\n    background-color: var(--core-black-contrast-3);\n    /* Not removed via appearance */\n    margin: 0;\n    font: inherit;\n    color: #BDBDC4;\n    width: 20px;\n    height: 20px;\n    border: 2px solid  var(--core-black-contrast-3);\n    border-radius: 12px;\n    transform: translateY(-0.01em);\n  }\n\n\ninput[type=\"checkbox\"]:disabled {\n    background-color: #E9E9EB;\n  }\n\n\ninput[type=\"checkbox\"] {\n    /* ...existing styles */\n  \n    display: grid;\n    place-content: center;\n  }\n\n\ninput[type=\"checkbox\"]::before {\n    content: url(" + new URL('check_small-992d4e4f.svg', module.meta.url).href + ");\n    width: inherit;\n    height: inherit;\n    border-radius: 50%;\n    transform: scale(0);\n    transition: 120ms transform ease-in-out;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 4px 6px;\n    /* box-shadow: inset 1em 1em #282B2E; */\n  }\n\n\ninput[type=\"checkbox\"]:checked::before {\n    transform: scale(1);\n  }\n\n\ninput[type=\"checkbox\"]::before {\n    /* ...existing styles */\n  \n    /* Windows High Contrast Mode */\n    background-color: #F9F9FA;\n  }\n\n\ninput[type=\"checkbox\"]:focus {\n    outline: max(2px, 0.15em) solid #F9F9FA;\n    outline-offset: max(2px, 0.15em);\n  }\n\n\nbutton:hover {\n    outline: none!important;\n    border-color: transparent!important;\n  }\n\n\n.desktop-only {\n    display: none;\n  }\n\n\n.mobile-only {\n    margin-top: 16px;\n    display: flex;\n    margin-bottom: 2.375em;\n  }\n\n\n@media screen and (min-width: 560px) {\n  \n    .desktop-only {\n      display: flex;\n    }\n    .mobile-only {\n      display: none;\n    }\n    \n  }\n\n\ncode {\n  font-family: 'Roboto Mono', monospace;\n  font-size: 0.875rem;\n  color: var(--core-grey-150);\n  font-weight: 400;\n}\n\n\n::file-selector-button {\n  display: none;\n}\n\n\n.blend {\n  color: rgb(255, 255, 255);\n  mix-blend-mode: difference;\n}\n\n\n.upload-complete {\n  border: 1px solid #00CBB6;\n  border-radius: 4px;\n}\n\n\n.upload-warning {\n  border: 1px solid #FFD028;\n  border-radius: 4px;\n}\n\n\n.upload-error {\n  border: 1px solid #FF627E;\n  border-radius: 4px;\n}\n\n\n.arrow-active {\n  transform: rotate(180deg);\n  transition: transform 0.2s ease-in;\n}\n\n\n.arrow-passive {\n  transform: rotate(0deg);\n  transition: transform 0.2s ease-in;\n}\n\n\n.accordion-content {\n  overflow: hidden;\n  max-height: 1000px;\n  transition: max-height 1s ease-in-out;\n}\n\n\n.accordion-content[aria-expanded=\"true\"] {\n  max-height: 0px;\n  transition: max-height 0.5s cubic-bezier(0, 1, 0, 1);\n}\n\n\nselect {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n       appearance: none;\n}\n\n\ninput:focus + .fa {\n  color: var(--core-black-contrast);\n  font-weight: 700;\n}\n\n\ninput + .fa-error {\n  color: var(--status-red);\n  font-weight: 700;\n}\n\n\ninput:focus + .fa-error {\n  color: var(--core-black-contrast);\n  font-weight: 700;\n}\n\n\n.first\\:pb-2:first-child{\n  padding-bottom: 0.5rem;\n}\n\n\n.hover\\:\\!cursor-pointer:hover{\n  cursor: pointer !important;\n}\n\n\n.hover\\:cursor-not-allowed:hover{\n  cursor: not-allowed;\n}\n\n\n.hover\\:cursor-pointer:hover{\n  cursor: pointer;\n}\n\n\n.hover\\:bg-gray-200:hover{\n  --tw-bg-opacity: 1;\n  background-color: rgb(229 231 235 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-gray-50:hover{\n  --tw-bg-opacity: 1;\n  background-color: rgb(249 250 251 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-red-700:hover{\n  --tw-bg-opacity: 1;\n  background-color: rgb(185 28 28 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-slate-200:hover{\n  --tw-bg-opacity: 1;\n  background-color: rgb(226 232 240 / var(--tw-bg-opacity));\n}\n\n\n.hover\\:bg-opacity-80:hover{\n  --tw-bg-opacity: 0.8;\n}\n\n\n.hover\\:font-semibold:hover{\n  font-weight: 600;\n}\n\n\n.hover\\:text-violet-400:hover{\n  --tw-text-opacity: 1;\n  color: rgb(167 139 250 / var(--tw-text-opacity));\n}\n\n\n.hover\\:text-white:hover{\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\n\n\n.hover\\:opacity-80:hover{\n  opacity: 0.8;\n}\n\n\n.hover\\:outline-none:hover{\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n\n.focus\\:border:focus{\n  border-width: 1px;\n}\n\n\n.focus\\:border-\\[\\#464C4F\\]:focus{\n  --tw-border-opacity: 1;\n  border-color: rgb(70 76 79 / var(--tw-border-opacity));\n}\n\n\n.focus\\:border-\\[\\#fff\\]:focus{\n  --tw-border-opacity: 1;\n  border-color: rgb(255 255 255 / var(--tw-border-opacity));\n}\n\n\n.focus\\:\\!bg-white:focus{\n  --tw-bg-opacity: 1 !important;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity)) !important;\n}\n\n\n.focus\\:bg-white:focus{\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n\n\n.focus\\:font-bold:focus{\n  font-weight: 700;\n}\n\n\n.focus\\:\\!text-black:focus{\n  --tw-text-opacity: 1 !important;\n  color: rgb(0 0 0 / var(--tw-text-opacity)) !important;\n}\n\n\n.focus\\:text-black:focus{\n  --tw-text-opacity: 1;\n  color: rgb(0 0 0 / var(--tw-text-opacity));\n}\n\n\n.focus\\:outline-none:focus{\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n\n.focus\\:\\!outline:focus{\n  outline-style: solid !important;\n}\n\n\n.focus\\:outline:focus{\n  outline-style: solid;\n}\n\n\n.focus\\:\\!outline-violet-300:focus{\n  outline-color: #c4b5fd !important;\n}\n\n\n.focus\\:outline-violet-300:focus{\n  outline-color: #c4b5fd;\n}\n\n\n.focus\\:ring-2:focus{\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n\n\n.focus\\:ring-indigo-500:focus{\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(99 102 241 / var(--tw-ring-opacity));\n}\n\n\n.focus\\:ring-red-500:focus{\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(239 68 68 / var(--tw-ring-opacity));\n}\n\n\n.focus\\:ring-offset-2:focus{\n  --tw-ring-offset-width: 2px;\n}\n\n\n.disabled\\:cursor-not-allowed:disabled{\n  cursor: not-allowed;\n}\n\n\n.disabled\\:bg-opacity-10:disabled{\n  --tw-bg-opacity: 0.1;\n}\n\n\n.disabled\\:bg-opacity-50:disabled{\n  --tw-bg-opacity: 0.5;\n}\n\n\n.disabled\\:opacity-10:disabled{\n  opacity: 0.1;\n}\n\n\n.disabled\\:opacity-40:disabled{\n  opacity: 0.4;\n}\n\n\n@media (prefers-color-scheme: dark){\n\n\n  .dark\\:bg-black{\n    --tw-bg-opacity: 1;\n    background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n  }\n\n\n  .dark\\:text-black{\n    --tw-text-opacity: 1;\n    color: rgb(0 0 0 / var(--tw-text-opacity));\n  }\n\n\n  .dark\\:shadow-none{\n    --tw-shadow: 0 0 #0000;\n    --tw-shadow-colored: 0 0 #0000;\n    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n  }\n\n\n  .dark\\:hover\\:text-black:hover{\n    --tw-text-opacity: 1;\n    color: rgb(0 0 0 / var(--tw-text-opacity));\n  }\n}\n\n\n@media (min-width: 640px){\n\n\n  .sm\\:my-8{\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n  }\n\n\n  .sm\\:mt-5{\n    margin-top: 1.25rem;\n  }\n\n\n  .sm\\:mt-6{\n    margin-top: 1.5rem;\n  }\n\n\n  .sm\\:block{\n    display: block;\n  }\n\n\n  .sm\\:inline-block{\n    display: inline-block;\n  }\n\n\n  .sm\\:h-screen{\n    height: 100vh;\n  }\n\n\n  .sm\\:w-full{\n    width: 100%;\n  }\n\n\n  .sm\\:max-w-lg{\n    max-width: 32rem;\n  }\n\n\n  .sm\\:p-0{\n    padding: 0px;\n  }\n\n\n  .sm\\:p-6{\n    padding: 1.5rem;\n  }\n\n\n  .sm\\:align-middle{\n    vertical-align: middle;\n  }\n\n\n  .sm\\:text-sm{\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n}\n\n\n@media (min-width: 768px){\n\n\n  .md\\:left-0{\n    left: 0px;\n  }\n\n\n  .md\\:mx-0{\n    margin-left: 0px;\n    margin-right: 0px;\n  }\n\n\n  .md\\:mt-0{\n    margin-top: 0px;\n  }\n\n\n  .md\\:block{\n    display: block;\n  }\n\n\n  .md\\:hidden{\n    display: none;\n  }\n\n\n  .md\\:min-h-\\[350px\\]{\n    min-height: 350px;\n  }\n\n\n  .md\\:w-full{\n    width: 100%;\n  }\n\n\n  .md\\:grid-cols-1{\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n  }\n\n\n  .md\\:grid-rows-1{\n    grid-template-rows: repeat(1, minmax(0, 1fr));\n  }\n\n\n  .md\\:self-center{\n    align-self: center;\n  }\n}\n\n\n@media (min-width: 1024px){\n\n\n  .lg\\:grid-cols-4{\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n\n\n  .lg\\:grid-cols-\\[1fr_minmax\\(0\\2c _900px\\)_1fr\\]{\n    grid-template-columns: 1fr minmax(0, 900px) 1fr;\n  }\n}\n._grid_uqza2_1 {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr auto;\n}\n\n._grid_uqza2_1 > div {\n  align-self: center;\n}\n\n\n._grid-layout_uqza2_12 {\n  display: grid;\n\n  grid-template-areas: \n\n        'header'\n        'content';\n\n  grid-template-rows: auto 1fr;\n  grid-template-columns: 1fr;\n}\n\n._grid-layout_uqza2_12 main {\n  grid-area: content;\n  overflow-x: hidden;\n  overflow-y: overlay;\n  display: grid;\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr minmax(0, 560px) 1fr;\n}\n._grid-layout_uqza2_12 main section {\n  grid-area: 1 / 2 / 1 / 3;\n\n  display: grid;\n  height: calc(100vh - 56px);\n}\n._grid-layout_uqza2_12 main section._full_uqza2_38 {\n  grid-area: 1 / 1 / 1 / 4;\n}\n._grid-layout_uqza2_12 header {\n  grid-area: header;\n}\n\n._grid_ixvli_1 {\n  height: 100vh;\n  display: grid;\n\n  grid-template-columns: 1fr;\n  grid-template-rows: 56px 1fr;\n  grid-template-areas:\n              'header'\n              'main';\n  \n  position: absolute;\n  z-index: 44;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n\n._backdrop_ixvli_19 {\n  background-color: rgba(0, 0, 0, 0.5);\n  position: absolute;\n  z-index: 43;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n}\n._grid_ixvli_1 > header {\n  grid-area: header;\n}\n._grid_ixvli_1 > main {\n  grid-area: main;\n  height: calc(100vh - 56px);\n  overflow: hidden;\n  overflow-y: overlay;\n  \n  display: grid;\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr minmax(0, 560px) 1fr;\n}\n._grid_ixvli_1 main > section {\n  grid-area: 1 / 2 / 1 / 3;\n\n  display: grid;\n  margin: 0 16px;\n  background: none!important;\n\n  grid-template-areas: \n            'main';\n  grid-template-areas:\n              'main'\n              'actions';\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr;\n}\n\n._grid_ixvli_1 main > section div:first-of-type {\n  grid-area: main;\n}\n._grid_ixvli_1 main > section div:last-of-type {\n  grid-area: actions;\n}\n._grid_ixvli_1 main > section div:first-of-type {\n  grid-area: main;\n}\n._grid_ixvli_1 main > section._full_ixvli_68 {\n  grid-area: 1 / 1 / 1 / 4\n}\n._dialog_ixvli_71 {\n  background-color: #17191C;\n  border-radius: 4px;\n  padding: 40px 24px;\n\n  align-self: center;\n\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n}\n._dialog_ixvli_71 p {\n  word-break: break-word!important;\n}\n._dialog_ixvli_71 img {\n  display: inline;\n  width: 100px;\n  height: 100px;\n  align-self: center;\n\n  fill: #E9E9EB;\n}\n\n._button__wrapper_ixvli_94 {\n  align-items: center;\n}\n\n._primaryActions_ixvli_98 button {\n  background-color: #F9F9FA;\n  border-radius: 4px;\n  padding: 16px!important;\n  color: #282B2E;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  border: none;\n  width: 100%;\n  font-size: 1rem;\n  text-align: center;\n}\n._primaryActions_ixvli_98 button:hover {\n  opacity: 0.8;\n  cursor: pointer;\n}\n._primaryActions_ixvli_98 button:disabled {\n  background-color: #D3D3D8;\n  cursor: not-allowed;\n}\n._secondaryActions_ixvli_119 button {\n  background-color: #464C4F!important;\n  border: none;\n  border-radius: 4px;\n  padding: 16px;\n  color: #F9F9FA;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  font-size: 1rem;\n  width: 100%;\n}\n._secondaryActions_ixvli_119 button:hover {\n  cursor: pointer;\n  color: #91919D;\n  border-color: #91919D;\n}\n\n\n._desktop_only_ixvli_138 {\n  display: none;\n}\n._mobile_only_ixvli_141 {\n  display: block;\n  margin-bottom: 2.375em;\n}\n@media screen and (min-width: 560px) {\n  \n  \n  ._grid_ixvli_1 {  \n    grid-template-rows: 56px 1fr;\n    \n    grid-template-areas: \n              'header'\n              'main';\n  }\n\n  ._grid_ixvli_1 main > section {\n    grid-template-rows: 1fr;\n    grid-template-columns: 1fr;\n    grid-template-areas: \n                'main';\n  }\n\n\n  ._desktop_only_ixvli_138 {\n    display: block;\n  }\n  ._mobile_only_ixvli_141 {\n    display: none;\n  }\n  \n}\n\n._slideEnter_crqpp_1 {\n  opacity: 0;\n}\n._slideEnterActive_crqpp_4 {\n  opacity: 1;\n  transition: opacity 200ms;\n}\n\n._slideExit_crqpp_9 {\n  opacity: 1;\n}\n._slideExitActive_crqpp_12 {\n  opacity: 0;\n  transition: opacity 200ms;\n}\n._grid_ixvli_1 {\n  height: 100vh;\n  display: grid;\n\n  grid-template-columns: 1fr;\n  grid-template-rows: 56px 1fr;\n  grid-template-areas:\n              'header'\n              'main';\n  \n  position: absolute;\n  z-index: 44;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n\n._backdrop_ixvli_19 {\n  background-color: rgba(0, 0, 0, 0.5);\n  position: absolute;\n  z-index: 43;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n}\n._grid_ixvli_1 > header {\n  grid-area: header;\n}\n._grid_ixvli_1 > main {\n  grid-area: main;\n  height: calc(100vh - 56px);\n  overflow: hidden;\n  overflow-y: overlay;\n  \n  display: grid;\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr minmax(0, 560px) 1fr;\n}\n._grid_ixvli_1 main > section {\n  grid-area: 1 / 2 / 1 / 3;\n\n  display: grid;\n  margin: 0 16px;\n  background: none!important;\n\n  grid-template-areas: \n            'main';\n  grid-template-areas:\n              'main'\n              'actions';\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr;\n}\n\n._grid_ixvli_1 main > section div:first-of-type {\n  grid-area: main;\n}\n._grid_ixvli_1 main > section div:last-of-type {\n  grid-area: actions;\n}\n._grid_ixvli_1 main > section div:first-of-type {\n  grid-area: main;\n}\n._grid_ixvli_1 main > section._full_ixvli_68 {\n  grid-area: 1 / 1 / 1 / 4\n}\n._dialog_ixvli_71 {\n  background-color: #17191C;\n  border-radius: 4px;\n  padding: 40px 24px;\n\n  align-self: center;\n\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n}\n._dialog_ixvli_71 p {\n  word-break: break-word!important;\n}\n._dialog_ixvli_71 img {\n  display: inline;\n  width: 100px;\n  height: 100px;\n  align-self: center;\n\n  fill: #E9E9EB;\n}\n\n._button__wrapper_ixvli_94 {\n  align-items: center;\n}\n\n._primaryActions_ixvli_98 button {\n  background-color: #F9F9FA;\n  border-radius: 4px;\n  padding: 16px!important;\n  color: #282B2E;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  border: none;\n  width: 100%;\n  font-size: 1rem;\n  text-align: center;\n}\n._primaryActions_ixvli_98 button:hover {\n  opacity: 0.8;\n  cursor: pointer;\n}\n._primaryActions_ixvli_98 button:disabled {\n  background-color: #D3D3D8;\n  cursor: not-allowed;\n}\n._secondaryActions_ixvli_119 button {\n  background-color: #464C4F!important;\n  border: none;\n  border-radius: 4px;\n  padding: 16px;\n  color: #F9F9FA;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  font-size: 1rem;\n  width: 100%;\n}\n._secondaryActions_ixvli_119 button:hover {\n  cursor: pointer;\n  color: #91919D;\n  border-color: #91919D;\n}\n\n\n._desktop_only_ixvli_138 {\n  display: none;\n}\n._mobile_only_ixvli_141 {\n  display: block;\n  margin-bottom: 2.375em;\n}\n@media screen and (min-width: 560px) {\n  \n  \n  ._grid_ixvli_1 {  \n    grid-template-rows: 56px 1fr;\n    \n    grid-template-areas: \n              'header'\n              'main';\n  }\n\n  ._grid_ixvli_1 main > section {\n    grid-template-rows: 1fr;\n    grid-template-columns: 1fr;\n    grid-template-areas: \n                'main';\n  }\n\n\n  ._desktop_only_ixvli_138 {\n    display: block;\n  }\n  ._mobile_only_ixvli_141 {\n    display: none;\n  }\n  \n}\n\n/* The switch - the box around the slider */\n._switch_18hyd_2 {\n  position: relative;\n  display: inline-block;\n  width: 42px;\n  height: 24px;\n}\n\n/* Hide default HTML checkbox */\n._switch_18hyd_2 input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider */\n._slider_18hyd_17 {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #08090B;\n  transition: .4s;\n}\n\n._slider_18hyd_17:before {\n  position: absolute;\n  content: \"\";\n  height: 20px;\n  width: 20px;\n  left: 3px;\n  bottom: 2px;\n  background-color: #464C4F;\n  transition: .4s;\n}\n\ninput:checked + ._slider_18hyd_17 {\n  background-color: #F9F9FA;\n}\ninput:checked + ._slider_18hyd_17:before {\n  background-color: #282B2E;\n}\n\ninput:focus + ._slider_18hyd_17 {\n  box-shadow: 0 0 1px #282B2E;\n}\n\ninput:checked + ._slider_18hyd_17:before {\n  transform: translateX(17px);\n}\n\n\n/* Rounded sliders */\n._slider_18hyd_17._round_18hyd_60 {\n  border-radius: 34px;\n}\n\n._slider_18hyd_17._round_18hyd_60:before {\n  border-radius: 50%;\n}._tooltip_1frir_1 {\n  position: relative;\n  /* border: 3px solid #464C4F; */\n  \n  border-radius: 4px;\n  padding: 15px;\n  background: white;\n  color: #08090B;\n\n  margin-top: 10px;\n  margin-bottom: 16px;\n  text-align: left;\n\n  font-size: 0.875rem;\n  font-weight: 500;\n  height: -moz-max-content;\n  height: max-content;\n}\n\n._tooltip-hook_1frir_20 {\n  position: absolute;\n  z-index: 40;\n  top: -22px;\n  left: 20px;\n}\n\n/* .tooltip-hook::before {\n  content: \"\";\n  position: absolute;\n  top: -7px;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 14px;\n  border-style: solid;\n  border-color: transparent transparent #464C4F transparent;\n} */\n\n/* .tooltip-hook::after {\n  content: \"\";\n  position: absolute;\n  top: -7px;\n  left: 50%;\n  margin-left: -9px;\n  border-width: 18px;\n  border-style: solid;\n  border-color: transparent transparent white transparent;\n} */\n\n\n._logs_1supl_3 div._toggle_1supl_3 {\n  background-color: #282B2E;\n  color: #F9F9FA;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 16px;\n}\n\n._logs_1supl_3 div._stream_1supl_12 {\n  background-color: #08090B;\n  text-align: left;\n  padding: 16px;\n  word-break: break-word;\n  overflow: hidden;\n  overflow-y: scroll;\n  max-width: 100%;\n  display: flex;\n  flex-direction: column;\n  max-height: 250px;\n\n  \n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n._active_1supl_29 {\n  transform: rotate(180deg);\n  transition: transform 0.2s ease-in;\n}\n._passive_1supl_33 {\n  transform: rotate(0deg);\n  transition: transform 0.2s ease-in;\n}\n\n._borderAll_1supl_38 {\n  border-radius: 4px;\n}\n\n._borderTwo_1supl_42 {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n._logs_1supl_3 {\n  width: 100%;\n}._active_1pbmb_1 {\n  transform: rotate(180deg);\n  transition: transform 0.1s ease-in;\n}\n\n._layout_1pbmb_6 {\n  border-radius: 4px;\n}\n\n._picker_1pbmb_10 {\n  padding: 16px;\n  display: grid;\n  grid-template-columns: 1fr 20px;\n  grid-template-rows: 1fr;\n  gap: 16px;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n\n._picker_1pbmb_10 > span {\n  font-weight: 500;\n  justify-self: flex-start;\n  text-overflow: ellipsis;\n  width: 100%;\n  overflow: hidden;\n  word-break: break-all;\n  text-align: left;\n}\n\n._picker_1pbmb_10 > img {\n  align-self: flex-end;\n  margin: auto 0;\n}\n\n._dd_1pbmb_36 {\n  position: absolute;\n  background-color: #17191C;\n  border-radius: 4px;\n  padding: 24px;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n  color: #F9F9FA;\n  width: 100%;\n  z-index: 44;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  height: 85vh;\n}\n._backdrop_1pbmb_51 {\n  position: absolute;\n  z-index: 43;\n  top: 56px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #08090B;\n  display: grid;\n}\n\n._dd_1pbmb_36 > ul {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  text-align: left;\n  overflow-y: scroll;\n  height: 80%;\n}\n\n\n._dd_1pbmb_36 > ul li:hover {\n  opacity: 0.8;\n  cursor: pointer;\n}\n\n@media screen and (min-width: 560px) {\n  ._dd_1pbmb_36 {\n    position: relative;\n    align-self: center;\n    justify-self: center;\n    overflow: hidden;\n    max-width: 568px;\n    max-height: 568px;\n  }\n\n  ._dd_1pbmb_36 ul {\n    height: 368px;\n    overflow-y: scroll;\n  }\n}\n\n\n._no-results_1pbmb_94 {\n  align-self: center;\n  justify-self: center;\n}._seed-phrase-list_1olpg_1 {\n  display: grid;\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr 1fr;\n  gap: 8px;\n}\n\n._seed-phrase-list_1olpg_1 > li {\n  background-color: #282B2E;\n  padding: 8px;\n  padding-left: 0;\n  color: #F9F9FA;\n  font-weight: 500;\n  display: flex;\n  flex-direction: row;\n  text-align: left;\n  gap: 8px;\n}\n._seed-phrase-list_1olpg_1 > li div:first-of-type {\n  margin: auto 0;\n  padding: 0 12px;\n  color: #91919D;\n  font-weight: 500;\n  text-align: center;\n}\n\n._seed-phrase-list_1olpg_1 > li {\n  display: grid;\n  grid-template-rows: 1fr;\n  grid-template-columns: 50px 1fr;\n}\n._dialog_am9c7_1 {\n  background-color: #17191C;\n  border-radius: 4px;\n  padding: 40px 24px;\n  align-self: center;\n\n  margin: 0 16px;\n}\n._dialog_am9c7_1 p {\n  word-break: break-word!important;\n}\n._dialog_am9c7_1 img {\n  display: inline;\n}\n\n._button__wrapper_am9c7_16 {\n  align-items: center;\n}\n\n._primaryActions_am9c7_20 button {\n  background-color: #F9F9FA;\n  border-radius: 4px;\n  padding: 16px!important;\n  color: #282B2E;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  border: none;\n  width: 100%;\n  font-size: 1rem;\n  text-align: center;\n}\n._primaryActions_am9c7_20 button:hover {\n  opacity: 0.8;\n  cursor: pointer;\n}\n._primaryActions_am9c7_20 button:disabled {\n  background-color: #D3D3D8;\n  cursor: not-allowed;\n}\n._secondaryActions_am9c7_41 button {\n  border: none;\n  border-radius: 4px;\n  padding: 16px;\n  color: #F9F9FA;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  font-size: 1rem;\n  align-self: flex-end;\n}\n._secondaryActions_am9c7_41 button:hover {\n  cursor: pointer;\n  color: #91919D;\n  border-color: #91919D;\n}\n\n._secondaryActions_am9c7_41 {\n  margin: 0 16px;\n}\n\n._desktop_only_am9c7_62 {\n  display: none;\n}\n._mobile_only_am9c7_65 {\n  margin-top: 16px;\n  display: grid;\n  margin-bottom: 2.375em;\n}\n@media screen and (min-width: 560px) {\n  \n  ._desktop_only_am9c7_62 {\n    display: block;\n  }\n  ._mobile_only_am9c7_65 {\n    display: none;\n  }\n  \n  ._secondaryActions_am9c7_41 {\n    margin: 0;\n  }\n}\n\n._dialog_am9c7_1 {\n  background-color: #17191C;\n  border-radius: 4px;\n  padding: 40px 24px;\n  align-self: center;\n\n  margin: 0 16px;\n}\n._dialog_am9c7_1 p {\n  word-break: break-word!important;\n}\n._dialog_am9c7_1 img {\n  display: inline;\n}\n\n._button__wrapper_am9c7_16 {\n  align-items: center;\n}\n\n._primaryActions_am9c7_20 button {\n  background-color: #F9F9FA;\n  border-radius: 4px;\n  padding: 16px!important;\n  color: #282B2E;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  border: none;\n  width: 100%;\n  font-size: 1rem;\n  text-align: center;\n}\n._primaryActions_am9c7_20 button:hover {\n  opacity: 0.8;\n  cursor: pointer;\n}\n._primaryActions_am9c7_20 button:disabled {\n  background-color: #D3D3D8;\n  cursor: not-allowed;\n}\n._secondaryActions_am9c7_41 button {\n  border: none;\n  border-radius: 4px;\n  padding: 16px;\n  color: #F9F9FA;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  font-size: 1rem;\n  align-self: flex-end;\n}\n._secondaryActions_am9c7_41 button:hover {\n  cursor: pointer;\n  color: #91919D;\n  border-color: #91919D;\n}\n\n._secondaryActions_am9c7_41 {\n  margin: 0 16px;\n}\n\n._desktop_only_am9c7_62 {\n  display: none;\n}\n._mobile_only_am9c7_65 {\n  margin-top: 16px;\n  display: grid;\n  margin-bottom: 2.375em;\n}\n@media screen and (min-width: 560px) {\n  \n  ._desktop_only_am9c7_62 {\n    display: block;\n  }\n  ._mobile_only_am9c7_65 {\n    display: none;\n  }\n  \n  ._secondaryActions_am9c7_41 {\n    margin: 0;\n  }\n}\n\n._dialog_1a7wj_1 {\n\n  border-radius: 4px;\n  padding: 32px 24px;\n  align-self: center;\n\n  margin: 0 16px;\n}\n._dialog_1a7wj_1 p {\n  word-break: break-word!important;\n}\n\n._button__wrapper_1a7wj_13 {\n  align-items: center;\n}\n\n._primaryActions_1a7wj_17 button {\n  background-color: #F9F9FA;\n  border-radius: 4px;\n  padding: 16px!important;\n  color: #282B2E;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  border: none;\n  width: 100%;\n  font-size: 1rem;\n  text-align: center;\n}\n._primaryActions_1a7wj_17 button:hover {\n  opacity: 0.8;\n  cursor: pointer;\n}\n._primaryActions_1a7wj_17 button:disabled {\n  background-color: #D3D3D8;\n  cursor: not-allowed;\n}\n._secondaryActions_1a7wj_38 button {\n  background-color: #464C4F!important;\n  border: none;\n  border-radius: 4px;\n  padding: 16px;\n  color: #F9F9FA;\n  letter-spacing: 0.05em;\n  line-height: 1.5;\n  font-weight: 600;\n  font-size: 1rem;\n  align-self: flex-end;\n}\n._secondaryActions_1a7wj_38 button:hover {\n  cursor: pointer;\n  color: #91919D;\n  border-color: #91919D;\n}\n\n._secondaryActions_1a7wj_38 {\n  margin: 0 16px;\n}\n\n._desktop_only_1a7wj_60 {\n  display: none;\n}\n._mobile_only_1a7wj_63 {\n  margin-top: 16px;\n  display: grid;\n  margin-bottom: 2.375em;\n}\n@media screen and (min-width: 560px) {\n  \n  ._desktop_only_1a7wj_60 {\n    display: block;\n  }\n  ._mobile_only_1a7wj_63 {\n    display: none;\n  }\n  \n  ._secondaryActions_1a7wj_38 {\n    margin: 0;\n  }\n}\n\n._grid_1mjka_1 {\n  display: grid;\n\n  grid-template-areas: \n\n        'header'\n        'content';\n\n  grid-template-rows: 56px 1fr;\n  grid-template-columns: 1fr;\n}\n\n._grid_1mjka_1 main {\n  grid-area: content;\n  overflow-x: hidden;\n  overflow-y: overlay;\n  display: grid;\n  grid-template-rows: 1fr;\n  grid-template-columns: 1fr minmax(0, 560px) 1fr;\n}\n._grid_1mjka_1 main section {\n  grid-area: 1 / 2 / 1 / 3;\n\n  display: grid;\n  height: calc(100vh - 56px);\n}\n._grid_1mjka_1 main section._full_1mjka_27 {\n  grid-area: 1 / 1 / 1 / 4;\n}\n._grid_1mjka_1 header {\n  grid-area: header;\n}\n\n";
        document.head.appendChild(__vite_style__);
        false && function polyfill() {
          var relList = document.createElement('link').relList;
          if (relList && relList.supports && relList.supports('modulepreload')) {
            return;
          }
          var _iterator2 = _createForOfIteratorHelper(document.querySelectorAll('link[rel="modulepreload"]')),
            _step;
          try {
            for (_iterator2.s(); !(_step = _iterator2.n()).done;) {
              var link = _step.value;
              processPreload(link);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          new MutationObserver(function (mutations) {
            var _iterator3 = _createForOfIteratorHelper(mutations),
              _step2;
            try {
              for (_iterator3.s(); !(_step2 = _iterator3.n()).done;) {
                var mutation = _step2.value;
                if (mutation.type !== 'childList') {
                  continue;
                }
                var _iterator4 = _createForOfIteratorHelper(mutation.addedNodes),
                  _step3;
                try {
                  for (_iterator4.s(); !(_step3 = _iterator4.n()).done;) {
                    var node = _step3.value;
                    if (node.tagName === 'LINK' && node.rel === 'modulepreload') processPreload(node);
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }).observe(document, {
            childList: true,
            subtree: true
          });
          function getFetchOpts(link) {
            var fetchOpts = {};
            if (link.integrity) fetchOpts.integrity = link.integrity;
            if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
            if (link.crossOrigin === 'use-credentials') fetchOpts.credentials = 'include';else if (link.crossOrigin === 'anonymous') fetchOpts.credentials = 'omit';else fetchOpts.credentials = 'same-origin';
            return fetchOpts;
          }
          function processPreload(link) {
            if (link.ep)
              // ep marker = processed
              return;
            link.ep = true;
            // prepopulate the load record
            var fetchOpts = getFetchOpts(link);
            fetch(link.href, fetchOpts);
          }
        }();
        var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
        function getDefaultExportFromCjs(x) {
          return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
        }
        var jsxRuntime = {
          exports: {}
        };
        var reactJsxRuntime_production_min = {};
        var react = {
          exports: {}
        };
        var react_production_min = {};

        /**
         * @license React
         * react.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var l$2 = Symbol.for("react.element"),
          n$2 = Symbol.for("react.portal"),
          p$3 = Symbol.for("react.fragment"),
          q$2 = Symbol.for("react.strict_mode"),
          r$1 = Symbol.for("react.profiler"),
          t$1 = Symbol.for("react.provider"),
          u = Symbol.for("react.context"),
          v$3 = Symbol.for("react.forward_ref"),
          w$2 = Symbol.for("react.suspense"),
          x$1 = Symbol.for("react.memo"),
          y$1 = Symbol.for("react.lazy"),
          z$2 = Symbol.iterator;
        function A$2(a) {
          if (null === a || "object" !== _typeof2(a)) return null;
          a = z$2 && a[z$2] || a["@@iterator"];
          return "function" === typeof a ? a : null;
        }
        var B$1 = {
            isMounted: function isMounted() {
              return !1;
            },
            enqueueForceUpdate: function enqueueForceUpdate() {},
            enqueueReplaceState: function enqueueReplaceState() {},
            enqueueSetState: function enqueueSetState() {}
          },
          C$1 = Object.assign,
          D$1 = {};
        function E$1(a, b, e) {
          this.props = a;
          this.context = b;
          this.refs = D$1;
          this.updater = e || B$1;
        }
        E$1.prototype.isReactComponent = {};
        E$1.prototype.setState = function (a, b) {
          if ("object" !== _typeof2(a) && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          this.updater.enqueueSetState(this, a, b, "setState");
        };
        E$1.prototype.forceUpdate = function (a) {
          this.updater.enqueueForceUpdate(this, a, "forceUpdate");
        };
        function F() {}
        F.prototype = E$1.prototype;
        function G$1(a, b, e) {
          this.props = a;
          this.context = b;
          this.refs = D$1;
          this.updater = e || B$1;
        }
        var H$1 = G$1.prototype = new F();
        H$1.constructor = G$1;
        C$1(H$1, E$1.prototype);
        H$1.isPureReactComponent = !0;
        var I$1 = Array.isArray,
          J = Object.prototype.hasOwnProperty,
          K$1 = {
            current: null
          },
          L$1 = {
            key: !0,
            ref: !0,
            __self: !0,
            __source: !0
          };
        function M$1(a, b, e) {
          var d,
            c = {},
            k = null,
            h = null;
          if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L$1.hasOwnProperty(d) && (c[d] = b[d]);
          var g = arguments.length - 2;
          if (1 === g) c.children = e;else if (1 < g) {
            for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
            c.children = f;
          }
          if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
          return {
            $$typeof: l$2,
            type: a,
            key: k,
            ref: h,
            props: c,
            _owner: K$1.current
          };
        }
        function N$1(a, b) {
          return {
            $$typeof: l$2,
            type: a.type,
            key: b,
            ref: a.ref,
            props: a.props,
            _owner: a._owner
          };
        }
        function O$1(a) {
          return "object" === _typeof2(a) && null !== a && a.$$typeof === l$2;
        }
        function escape(a) {
          var b = {
            "=": "=0",
            ":": "=2"
          };
          return "$" + a.replace(/[=:]/g, function (a) {
            return b[a];
          });
        }
        var P$1 = /\/+/g;
        function Q$1(a, b) {
          return "object" === _typeof2(a) && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
        }
        function R$1(a, b, e, d, c) {
          var k = _typeof2(a);
          if ("undefined" === k || "boolean" === k) a = null;
          var h = !1;
          if (null === a) h = !0;else switch (k) {
            case "string":
            case "number":
              h = !0;
              break;
            case "object":
              switch (a.$$typeof) {
                case l$2:
                case n$2:
                  h = !0;
              }
          }
          if (h) return h = a, c = c(h), a = "" === d ? "." + Q$1(h, 0) : d, I$1(c) ? (e = "", null != a && (e = a.replace(P$1, "$&/") + "/"), R$1(c, b, e, "", function (a) {
            return a;
          })) : null != c && (O$1(c) && (c = N$1(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P$1, "$&/") + "/") + a)), b.push(c)), 1;
          h = 0;
          d = "" === d ? "." : d + ":";
          if (I$1(a)) for (var g = 0; g < a.length; g++) {
            k = a[g];
            var f = d + Q$1(k, g);
            h += R$1(k, b, e, f, c);
          } else if (f = A$2(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q$1(k, g++), h += R$1(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
          return h;
        }
        function S$1(a, b, e) {
          if (null == a) return a;
          var d = [],
            c = 0;
          R$1(a, d, "", "", function (a) {
            return b.call(e, a, c++);
          });
          return d;
        }
        function T$1(a) {
          if (-1 === a._status) {
            var b = a._result;
            b = b();
            b.then(function (b) {
              if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
            }, function (b) {
              if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
            });
            -1 === a._status && (a._status = 0, a._result = b);
          }
          if (1 === a._status) return a._result.default;
          throw a._result;
        }
        var U$1 = {
            current: null
          },
          V$1 = {
            transition: null
          },
          W$1 = {
            ReactCurrentDispatcher: U$1,
            ReactCurrentBatchConfig: V$1,
            ReactCurrentOwner: K$1
          };
        react_production_min.Children = {
          map: S$1,
          forEach: function forEach(a, b, e) {
            S$1(a, function () {
              b.apply(this, arguments);
            }, e);
          },
          count: function count(a) {
            var b = 0;
            S$1(a, function () {
              b++;
            });
            return b;
          },
          toArray: function toArray(a) {
            return S$1(a, function (a) {
              return a;
            }) || [];
          },
          only: function only(a) {
            if (!O$1(a)) throw Error("React.Children.only expected to receive a single React element child.");
            return a;
          }
        };
        react_production_min.Component = E$1;
        react_production_min.Fragment = p$3;
        react_production_min.Profiler = r$1;
        react_production_min.PureComponent = G$1;
        react_production_min.StrictMode = q$2;
        react_production_min.Suspense = w$2;
        react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
        react_production_min.cloneElement = function (a, b, e) {
          if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
          var d = C$1({}, a.props),
            c = a.key,
            k = a.ref,
            h = a._owner;
          if (null != b) {
            void 0 !== b.ref && (k = b.ref, h = K$1.current);
            void 0 !== b.key && (c = "" + b.key);
            if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
            for (f in b) J.call(b, f) && !L$1.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
          }
          var f = arguments.length - 2;
          if (1 === f) d.children = e;else if (1 < f) {
            g = Array(f);
            for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
            d.children = g;
          }
          return {
            $$typeof: l$2,
            type: a.type,
            key: c,
            ref: k,
            props: d,
            _owner: h
          };
        };
        react_production_min.createContext = function (a) {
          a = {
            $$typeof: u,
            _currentValue: a,
            _currentValue2: a,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          a.Provider = {
            $$typeof: t$1,
            _context: a
          };
          return a.Consumer = a;
        };
        react_production_min.createElement = M$1;
        react_production_min.createFactory = function (a) {
          var b = M$1.bind(null, a);
          b.type = a;
          return b;
        };
        react_production_min.createRef = function () {
          return {
            current: null
          };
        };
        react_production_min.forwardRef = function (a) {
          return {
            $$typeof: v$3,
            render: a
          };
        };
        react_production_min.isValidElement = O$1;
        react_production_min.lazy = function (a) {
          return {
            $$typeof: y$1,
            _payload: {
              _status: -1,
              _result: a
            },
            _init: T$1
          };
        };
        react_production_min.memo = function (a, b) {
          return {
            $$typeof: x$1,
            type: a,
            compare: void 0 === b ? null : b
          };
        };
        react_production_min.startTransition = function (a) {
          var b = V$1.transition;
          V$1.transition = {};
          try {
            a();
          } finally {
            V$1.transition = b;
          }
        };
        react_production_min.unstable_act = function () {
          throw Error("act(...) is not supported in production builds of React.");
        };
        react_production_min.useCallback = function (a, b) {
          return U$1.current.useCallback(a, b);
        };
        react_production_min.useContext = function (a) {
          return U$1.current.useContext(a);
        };
        react_production_min.useDebugValue = function () {};
        react_production_min.useDeferredValue = function (a) {
          return U$1.current.useDeferredValue(a);
        };
        react_production_min.useEffect = function (a, b) {
          return U$1.current.useEffect(a, b);
        };
        react_production_min.useId = function () {
          return U$1.current.useId();
        };
        react_production_min.useImperativeHandle = function (a, b, e) {
          return U$1.current.useImperativeHandle(a, b, e);
        };
        react_production_min.useInsertionEffect = function (a, b) {
          return U$1.current.useInsertionEffect(a, b);
        };
        react_production_min.useLayoutEffect = function (a, b) {
          return U$1.current.useLayoutEffect(a, b);
        };
        react_production_min.useMemo = function (a, b) {
          return U$1.current.useMemo(a, b);
        };
        react_production_min.useReducer = function (a, b, e) {
          return U$1.current.useReducer(a, b, e);
        };
        react_production_min.useRef = function (a) {
          return U$1.current.useRef(a);
        };
        react_production_min.useState = function (a) {
          return U$1.current.useState(a);
        };
        react_production_min.useSyncExternalStore = function (a, b, e) {
          return U$1.current.useSyncExternalStore(a, b, e);
        };
        react_production_min.useTransition = function () {
          return U$1.current.useTransition();
        };
        react_production_min.version = "18.2.0";
        {
          react.exports = react_production_min;
        }
        var reactExports = react.exports;
        var React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

        /**
         * @license React
         * react-jsx-runtime.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var f$1 = reactExports,
          k$1 = Symbol.for("react.element"),
          l$1 = Symbol.for("react.fragment"),
          m$2 = Object.prototype.hasOwnProperty,
          n$1 = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
          p$2 = {
            key: !0,
            ref: !0,
            __self: !0,
            __source: !0
          };
        function q$1(c, a, g) {
          var b,
            d = {},
            e = null,
            h = null;
          void 0 !== g && (e = "" + g);
          void 0 !== a.key && (e = "" + a.key);
          void 0 !== a.ref && (h = a.ref);
          for (b in a) m$2.call(a, b) && !p$2.hasOwnProperty(b) && (d[b] = a[b]);
          if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
          return {
            $$typeof: k$1,
            type: c,
            key: e,
            ref: h,
            props: d,
            _owner: n$1.current
          };
        }
        reactJsxRuntime_production_min.Fragment = l$1;
        reactJsxRuntime_production_min.jsx = q$1;
        reactJsxRuntime_production_min.jsxs = q$1;
        {
          jsxRuntime.exports = reactJsxRuntime_production_min;
        }
        var jsxRuntimeExports = jsxRuntime.exports;
        var client = {};
        var reactDom = {
          exports: {}
        };
        var reactDom_production_min = {};
        var scheduler = {
          exports: {}
        };
        var scheduler_production_min = {};

        /**
         * @license React
         * scheduler.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        (function (exports) {
          function f(a, b) {
            var c = a.length;
            a.push(b);
            a: for (; 0 < c;) {
              var d = c - 1 >>> 1,
                e = a[d];
              if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;else break a;
            }
          }
          function h(a) {
            return 0 === a.length ? null : a[0];
          }
          function k(a) {
            if (0 === a.length) return null;
            var b = a[0],
              c = a.pop();
            if (c !== b) {
              a[0] = c;
              a: for (var d = 0, e = a.length, w = e >>> 1; d < w;) {
                var m = 2 * (d + 1) - 1,
                  C = a[m],
                  n = m + 1,
                  x = a[n];
                if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;else break a;
              }
            }
            return b;
          }
          function g(a, b) {
            var c = a.sortIndex - b.sortIndex;
            return 0 !== c ? c : a.id - b.id;
          }
          if ("object" === (typeof performance === "undefined" ? "undefined" : _typeof2(performance)) && "function" === typeof performance.now) {
            var l = performance;
            exports.unstable_now = function () {
              return l.now();
            };
          } else {
            var p = Date,
              q = p.now();
            exports.unstable_now = function () {
              return p.now() - q;
            };
          }
          var r = [],
            t = [],
            u = 1,
            v = null,
            y = 3,
            z = !1,
            A = !1,
            B = !1,
            D = "function" === typeof setTimeout ? setTimeout : null,
            E = "function" === typeof clearTimeout ? clearTimeout : null,
            F = "undefined" !== typeof setImmediate ? setImmediate : null;
          "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
          function G(a) {
            for (var b = h(t); null !== b;) {
              if (null === b.callback) k(t);else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);else break;
              b = h(t);
            }
          }
          function H(a) {
            B = !1;
            G(a);
            if (!A) if (null !== h(r)) A = !0, I(J);else {
              var b = h(t);
              null !== b && K(H, b.startTime - a);
            }
          }
          function J(a, b) {
            A = !1;
            B && (B = !1, E(L), L = -1);
            z = !0;
            var c = y;
            try {
              G(b);
              for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M());) {
                var d = v.callback;
                if ("function" === typeof d) {
                  v.callback = null;
                  y = v.priorityLevel;
                  var e = d(v.expirationTime <= b);
                  b = exports.unstable_now();
                  "function" === typeof e ? v.callback = e : v === h(r) && k(r);
                  G(b);
                } else k(r);
                v = h(r);
              }
              if (null !== v) var w = !0;else {
                var m = h(t);
                null !== m && K(H, m.startTime - b);
                w = !1;
              }
              return w;
            } finally {
              v = null, y = c, z = !1;
            }
          }
          var N = !1,
            O = null,
            L = -1,
            P = 5,
            Q = -1;
          function M() {
            return exports.unstable_now() - Q < P ? !1 : !0;
          }
          function R() {
            if (null !== O) {
              var a = exports.unstable_now();
              Q = a;
              var b = !0;
              try {
                b = O(!0, a);
              } finally {
                b ? S() : (N = !1, O = null);
              }
            } else N = !1;
          }
          var S;
          if ("function" === typeof F) S = function S() {
            F(R);
          };else if ("undefined" !== typeof MessageChannel) {
            var T = new MessageChannel(),
              U = T.port2;
            T.port1.onmessage = R;
            S = function S() {
              U.postMessage(null);
            };
          } else S = function S() {
            D(R, 0);
          };
          function I(a) {
            O = a;
            N || (N = !0, S());
          }
          function K(a, b) {
            L = D(function () {
              a(exports.unstable_now());
            }, b);
          }
          exports.unstable_IdlePriority = 5;
          exports.unstable_ImmediatePriority = 1;
          exports.unstable_LowPriority = 4;
          exports.unstable_NormalPriority = 3;
          exports.unstable_Profiling = null;
          exports.unstable_UserBlockingPriority = 2;
          exports.unstable_cancelCallback = function (a) {
            a.callback = null;
          };
          exports.unstable_continueExecution = function () {
            A || z || (A = !0, I(J));
          };
          exports.unstable_forceFrameRate = function (a) {
            0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1E3 / a) : 5;
          };
          exports.unstable_getCurrentPriorityLevel = function () {
            return y;
          };
          exports.unstable_getFirstCallbackNode = function () {
            return h(r);
          };
          exports.unstable_next = function (a) {
            switch (y) {
              case 1:
              case 2:
              case 3:
                var b = 3;
                break;
              default:
                b = y;
            }
            var c = y;
            y = b;
            try {
              return a();
            } finally {
              y = c;
            }
          };
          exports.unstable_pauseExecution = function () {};
          exports.unstable_requestPaint = function () {};
          exports.unstable_runWithPriority = function (a, b) {
            switch (a) {
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
                break;
              default:
                a = 3;
            }
            var c = y;
            y = a;
            try {
              return b();
            } finally {
              y = c;
            }
          };
          exports.unstable_scheduleCallback = function (a, b, c) {
            var d = exports.unstable_now();
            "object" === _typeof2(c) && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
            switch (a) {
              case 1:
                var e = -1;
                break;
              case 2:
                e = 250;
                break;
              case 5:
                e = 1073741823;
                break;
              case 4:
                e = 1E4;
                break;
              default:
                e = 5E3;
            }
            e = c + e;
            a = {
              id: u++,
              callback: b,
              priorityLevel: a,
              startTime: c,
              expirationTime: e,
              sortIndex: -1
            };
            c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = !0, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = !0, I(J)));
            return a;
          };
          exports.unstable_shouldYield = M;
          exports.unstable_wrapCallback = function (a) {
            var b = y;
            return function () {
              var c = y;
              y = b;
              try {
                return a.apply(this, arguments);
              } finally {
                y = c;
              }
            };
          };
        })(scheduler_production_min);
        {
          scheduler.exports = scheduler_production_min;
        }
        var schedulerExports = scheduler.exports;

        /**
         * @license React
         * react-dom.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var aa = reactExports,
          ca = schedulerExports;
        function p$1(a) {
          for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
          return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
        }
        var da = new Set(),
          ea = {};
        function fa(a, b) {
          ha(a, b);
          ha(a + "Capture", b);
        }
        function ha(a, b) {
          ea[a] = b;
          for (a = 0; a < b.length; a++) da.add(b[a]);
        }
        var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
          ja = Object.prototype.hasOwnProperty,
          ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
          la = {},
          ma = {};
        function oa(a) {
          if (ja.call(ma, a)) return !0;
          if (ja.call(la, a)) return !1;
          if (ka.test(a)) return ma[a] = !0;
          la[a] = !0;
          return !1;
        }
        function pa(a, b, c, d) {
          if (null !== c && 0 === c.type) return !1;
          switch (_typeof2(b)) {
            case "function":
            case "symbol":
              return !0;
            case "boolean":
              if (d) return !1;
              if (null !== c) return !c.acceptsBooleans;
              a = a.toLowerCase().slice(0, 5);
              return "data-" !== a && "aria-" !== a;
            default:
              return !1;
          }
        }
        function qa(a, b, c, d) {
          if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return !0;
          if (d) return !1;
          if (null !== c) switch (c.type) {
            case 3:
              return !b;
            case 4:
              return !1 === b;
            case 5:
              return isNaN(b);
            case 6:
              return isNaN(b) || 1 > b;
          }
          return !1;
        }
        function v$2(a, b, c, d, e, f, g) {
          this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
          this.attributeName = d;
          this.attributeNamespace = e;
          this.mustUseProperty = c;
          this.propertyName = a;
          this.type = b;
          this.sanitizeURL = f;
          this.removeEmptyString = g;
        }
        var z$1 = {};
        "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
          z$1[a] = new v$2(a, 0, !1, a, null, !1, !1);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
          var b = a[0];
          z$1[b] = new v$2(b, 1, !1, a[1], null, !1, !1);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
          z$1[a] = new v$2(a, 2, !1, a.toLowerCase(), null, !1, !1);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
          z$1[a] = new v$2(a, 2, !1, a, null, !1, !1);
        });
        "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
          z$1[a] = new v$2(a, 3, !1, a.toLowerCase(), null, !1, !1);
        });
        ["checked", "multiple", "muted", "selected"].forEach(function (a) {
          z$1[a] = new v$2(a, 3, !0, a, null, !1, !1);
        });
        ["capture", "download"].forEach(function (a) {
          z$1[a] = new v$2(a, 4, !1, a, null, !1, !1);
        });
        ["cols", "rows", "size", "span"].forEach(function (a) {
          z$1[a] = new v$2(a, 6, !1, a, null, !1, !1);
        });
        ["rowSpan", "start"].forEach(function (a) {
          z$1[a] = new v$2(a, 5, !1, a.toLowerCase(), null, !1, !1);
        });
        var ra = /[\-:]([a-z])/g;
        function sa(a) {
          return a[1].toUpperCase();
        }
        "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
          var b = a.replace(ra, sa);
          z$1[b] = new v$2(b, 1, !1, a, null, !1, !1);
        });
        "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
          var b = a.replace(ra, sa);
          z$1[b] = new v$2(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
        });
        ["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
          var b = a.replace(ra, sa);
          z$1[b] = new v$2(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
        });
        ["tabIndex", "crossOrigin"].forEach(function (a) {
          z$1[a] = new v$2(a, 1, !1, a.toLowerCase(), null, !1, !1);
        });
        z$1.xlinkHref = new v$2("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
        ["src", "href", "action", "formAction"].forEach(function (a) {
          z$1[a] = new v$2(a, 1, !1, a.toLowerCase(), null, !0, !0);
        });
        function ta(a, b, c, d) {
          var e = z$1.hasOwnProperty(b) ? z$1[b] : null;
          if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
        }
        var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
          va = Symbol.for("react.element"),
          wa = Symbol.for("react.portal"),
          ya = Symbol.for("react.fragment"),
          za = Symbol.for("react.strict_mode"),
          Aa = Symbol.for("react.profiler"),
          Ba = Symbol.for("react.provider"),
          Ca = Symbol.for("react.context"),
          Da = Symbol.for("react.forward_ref"),
          Ea = Symbol.for("react.suspense"),
          Fa = Symbol.for("react.suspense_list"),
          Ga = Symbol.for("react.memo"),
          Ha = Symbol.for("react.lazy");
        var Ia = Symbol.for("react.offscreen");
        var Ja = Symbol.iterator;
        function Ka(a) {
          if (null === a || "object" !== _typeof2(a)) return null;
          a = Ja && a[Ja] || a["@@iterator"];
          return "function" === typeof a ? a : null;
        }
        var A$1 = Object.assign,
          La;
        function Ma(a) {
          if (void 0 === La) try {
            throw Error();
          } catch (c) {
            var b = c.stack.trim().match(/\n( *(at )?)/);
            La = b && b[1] || "";
          }
          return "\n" + La + a;
        }
        var Na = !1;
        function Oa(a, b) {
          if (!a || Na) return "";
          Na = !0;
          var c = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          try {
            if (b) {
              if (b = function b() {
                throw Error();
              }, Object.defineProperty(b.prototype, "props", {
                set: function set() {
                  throw Error();
                }
              }), "object" === (typeof Reflect === "undefined" ? "undefined" : _typeof2(Reflect)) && Reflect.construct) {
                try {
                  Reflect.construct(b, []);
                } catch (l) {
                  var d = l;
                }
                Reflect.construct(a, [], b);
              } else {
                try {
                  b.call();
                } catch (l) {
                  d = l;
                }
                a.call(b.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (l) {
                d = l;
              }
              a();
            }
          } catch (l) {
            if (l && d && "string" === typeof l.stack) {
              for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) h--;
              for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
                if (1 !== g || 1 !== h) {
                  do if (g--, h--, 0 > h || e[g] !== f[h]) {
                    var k = "\n" + e[g].replace(" at new ", " at ");
                    a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                    return k;
                  } while (1 <= g && 0 <= h);
                }
                break;
              }
            }
          } finally {
            Na = !1, Error.prepareStackTrace = c;
          }
          return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
        }
        function Pa(a) {
          switch (a.tag) {
            case 5:
              return Ma(a.type);
            case 16:
              return Ma("Lazy");
            case 13:
              return Ma("Suspense");
            case 19:
              return Ma("SuspenseList");
            case 0:
            case 2:
            case 15:
              return a = Oa(a.type, !1), a;
            case 11:
              return a = Oa(a.type.render, !1), a;
            case 1:
              return a = Oa(a.type, !0), a;
            default:
              return "";
          }
        }
        function Qa(a) {
          if (null == a) return null;
          if ("function" === typeof a) return a.displayName || a.name || null;
          if ("string" === typeof a) return a;
          switch (a) {
            case ya:
              return "Fragment";
            case wa:
              return "Portal";
            case Aa:
              return "Profiler";
            case za:
              return "StrictMode";
            case Ea:
              return "Suspense";
            case Fa:
              return "SuspenseList";
          }
          if ("object" === _typeof2(a)) switch (a.$$typeof) {
            case Ca:
              return (a.displayName || "Context") + ".Consumer";
            case Ba:
              return (a._context.displayName || "Context") + ".Provider";
            case Da:
              var b = a.render;
              a = a.displayName;
              a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
              return a;
            case Ga:
              return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
            case Ha:
              b = a._payload;
              a = a._init;
              try {
                return Qa(a(b));
              } catch (c) {}
          }
          return null;
        }
        function Ra(a) {
          var b = a.type;
          switch (a.tag) {
            case 24:
              return "Cache";
            case 9:
              return (b.displayName || "Context") + ".Consumer";
            case 10:
              return (b._context.displayName || "Context") + ".Provider";
            case 18:
              return "DehydratedFragment";
            case 11:
              return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            case 7:
              return "Fragment";
            case 5:
              return b;
            case 4:
              return "Portal";
            case 3:
              return "Root";
            case 6:
              return "Text";
            case 16:
              return Qa(b);
            case 8:
              return b === za ? "StrictMode" : "Mode";
            case 22:
              return "Offscreen";
            case 12:
              return "Profiler";
            case 21:
              return "Scope";
            case 13:
              return "Suspense";
            case 19:
              return "SuspenseList";
            case 25:
              return "TracingMarker";
            case 1:
            case 0:
            case 17:
            case 2:
            case 14:
            case 15:
              if ("function" === typeof b) return b.displayName || b.name || null;
              if ("string" === typeof b) return b;
          }
          return null;
        }
        function Sa(a) {
          switch (_typeof2(a)) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return a;
            case "object":
              return a;
            default:
              return "";
          }
        }
        function Ta(a) {
          var b = a.type;
          return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
        }
        function Ua(a) {
          var b = Ta(a) ? "checked" : "value",
            c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
            d = "" + a[b];
          if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
            var e = c.get,
              f = c.set;
            Object.defineProperty(a, b, {
              configurable: !0,
              get: function get() {
                return e.call(this);
              },
              set: function set(a) {
                d = "" + a;
                f.call(this, a);
              }
            });
            Object.defineProperty(a, b, {
              enumerable: c.enumerable
            });
            return {
              getValue: function getValue() {
                return d;
              },
              setValue: function setValue(a) {
                d = "" + a;
              },
              stopTracking: function stopTracking() {
                a._valueTracker = null;
                delete a[b];
              }
            };
          }
        }
        function Va(a) {
          a._valueTracker || (a._valueTracker = Ua(a));
        }
        function Wa(a) {
          if (!a) return !1;
          var b = a._valueTracker;
          if (!b) return !0;
          var c = b.getValue();
          var d = "";
          a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
          a = d;
          return a !== c ? (b.setValue(a), !0) : !1;
        }
        function Xa(a) {
          a = a || ("undefined" !== typeof document ? document : void 0);
          if ("undefined" === typeof a) return null;
          try {
            return a.activeElement || a.body;
          } catch (b) {
            return a.body;
          }
        }
        function Ya(a, b) {
          var c = b.checked;
          return A$1({}, b, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: null != c ? c : a._wrapperState.initialChecked
          });
        }
        function Za(a, b) {
          var c = null == b.defaultValue ? "" : b.defaultValue,
            d = null != b.checked ? b.checked : b.defaultChecked;
          c = Sa(null != b.value ? b.value : c);
          a._wrapperState = {
            initialChecked: d,
            initialValue: c,
            controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
          };
        }
        function ab(a, b) {
          b = b.checked;
          null != b && ta(a, "checked", b, !1);
        }
        function bb(a, b) {
          ab(a, b);
          var c = Sa(b.value),
            d = b.type;
          if (null != c) {
            if ("number" === d) {
              if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
            } else a.value !== "" + c && (a.value = "" + c);
          } else if ("submit" === d || "reset" === d) {
            a.removeAttribute("value");
            return;
          }
          b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
          null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
        }
        function db(a, b, c) {
          if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
            var d = b.type;
            if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
            b = "" + a._wrapperState.initialValue;
            c || b === a.value || (a.value = b);
            a.defaultValue = b;
          }
          c = a.name;
          "" !== c && (a.name = "");
          a.defaultChecked = !!a._wrapperState.initialChecked;
          "" !== c && (a.name = c);
        }
        function cb(a, b, c) {
          if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
        }
        var eb = Array.isArray;
        function fb(a, b, c, d) {
          a = a.options;
          if (b) {
            b = {};
            for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;
            for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
          } else {
            c = "" + Sa(c);
            b = null;
            for (e = 0; e < a.length; e++) {
              if (a[e].value === c) {
                a[e].selected = !0;
                d && (a[e].defaultSelected = !0);
                return;
              }
              null !== b || a[e].disabled || (b = a[e]);
            }
            null !== b && (b.selected = !0);
          }
        }
        function gb(a, b) {
          if (null != b.dangerouslySetInnerHTML) throw Error(p$1(91));
          return A$1({}, b, {
            value: void 0,
            defaultValue: void 0,
            children: "" + a._wrapperState.initialValue
          });
        }
        function hb(a, b) {
          var c = b.value;
          if (null == c) {
            c = b.children;
            b = b.defaultValue;
            if (null != c) {
              if (null != b) throw Error(p$1(92));
              if (eb(c)) {
                if (1 < c.length) throw Error(p$1(93));
                c = c[0];
              }
              b = c;
            }
            null == b && (b = "");
            c = b;
          }
          a._wrapperState = {
            initialValue: Sa(c)
          };
        }
        function ib(a, b) {
          var c = Sa(b.value),
            d = Sa(b.defaultValue);
          null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
          null != d && (a.defaultValue = "" + d);
        }
        function jb(a) {
          var b = a.textContent;
          b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
        }
        function kb(a) {
          switch (a) {
            case "svg":
              return "http://www.w3.org/2000/svg";
            case "math":
              return "http://www.w3.org/1998/Math/MathML";
            default:
              return "http://www.w3.org/1999/xhtml";
          }
        }
        function lb(a, b) {
          return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
        }
        var mb,
          nb = function (a) {
            return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
              MSApp.execUnsafeLocalFunction(function () {
                return a(b, c, d, e);
              });
            } : a;
          }(function (a, b) {
            if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;else {
              mb = mb || document.createElement("div");
              mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
              for (b = mb.firstChild; a.firstChild;) a.removeChild(a.firstChild);
              for (; b.firstChild;) a.appendChild(b.firstChild);
            }
          });
        function ob(a, b) {
          if (b) {
            var c = a.firstChild;
            if (c && c === a.lastChild && 3 === c.nodeType) {
              c.nodeValue = b;
              return;
            }
          }
          a.textContent = b;
        }
        var pb = {
            animationIterationCount: !0,
            aspectRatio: !0,
            borderImageOutset: !0,
            borderImageSlice: !0,
            borderImageWidth: !0,
            boxFlex: !0,
            boxFlexGroup: !0,
            boxOrdinalGroup: !0,
            columnCount: !0,
            columns: !0,
            flex: !0,
            flexGrow: !0,
            flexPositive: !0,
            flexShrink: !0,
            flexNegative: !0,
            flexOrder: !0,
            gridArea: !0,
            gridRow: !0,
            gridRowEnd: !0,
            gridRowSpan: !0,
            gridRowStart: !0,
            gridColumn: !0,
            gridColumnEnd: !0,
            gridColumnSpan: !0,
            gridColumnStart: !0,
            fontWeight: !0,
            lineClamp: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            tabSize: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0,
            fillOpacity: !0,
            floodOpacity: !0,
            stopOpacity: !0,
            strokeDasharray: !0,
            strokeDashoffset: !0,
            strokeMiterlimit: !0,
            strokeOpacity: !0,
            strokeWidth: !0
          },
          qb = ["Webkit", "ms", "Moz", "O"];
        Object.keys(pb).forEach(function (a) {
          qb.forEach(function (b) {
            b = b + a.charAt(0).toUpperCase() + a.substring(1);
            pb[b] = pb[a];
          });
        });
        function rb(a, b, c) {
          return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
        }
        function sb(a, b) {
          a = a.style;
          for (var c in b) if (b.hasOwnProperty(c)) {
            var d = 0 === c.indexOf("--"),
              e = rb(c, b[c], d);
            "float" === c && (c = "cssFloat");
            d ? a.setProperty(c, e) : a[c] = e;
          }
        }
        var tb = A$1({
          menuitem: !0
        }, {
          area: !0,
          base: !0,
          br: !0,
          col: !0,
          embed: !0,
          hr: !0,
          img: !0,
          input: !0,
          keygen: !0,
          link: !0,
          meta: !0,
          param: !0,
          source: !0,
          track: !0,
          wbr: !0
        });
        function ub(a, b) {
          if (b) {
            if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p$1(137, a));
            if (null != b.dangerouslySetInnerHTML) {
              if (null != b.children) throw Error(p$1(60));
              if ("object" !== _typeof2(b.dangerouslySetInnerHTML) || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p$1(61));
            }
            if (null != b.style && "object" !== _typeof2(b.style)) throw Error(p$1(62));
          }
        }
        function vb(a, b) {
          if (-1 === a.indexOf("-")) return "string" === typeof b.is;
          switch (a) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return !1;
            default:
              return !0;
          }
        }
        var wb = null;
        function xb(a) {
          a = a.target || a.srcElement || window;
          a.correspondingUseElement && (a = a.correspondingUseElement);
          return 3 === a.nodeType ? a.parentNode : a;
        }
        var yb = null,
          zb = null,
          Ab = null;
        function Bb(a) {
          if (a = Cb(a)) {
            if ("function" !== typeof yb) throw Error(p$1(280));
            var b = a.stateNode;
            b && (b = Db(b), yb(a.stateNode, a.type, b));
          }
        }
        function Eb(a) {
          zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
        }
        function Fb() {
          if (zb) {
            var a = zb,
              b = Ab;
            Ab = zb = null;
            Bb(a);
            if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
          }
        }
        function Gb(a, b) {
          return a(b);
        }
        function Hb() {}
        var Ib = !1;
        function Jb(a, b, c) {
          if (Ib) return a(b, c);
          Ib = !0;
          try {
            return Gb(a, b, c);
          } finally {
            if (Ib = !1, null !== zb || null !== Ab) Hb(), Fb();
          }
        }
        function Kb(a, b) {
          var c = a.stateNode;
          if (null === c) return null;
          var d = Db(c);
          if (null === d) return null;
          c = d[b];
          a: switch (b) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
              a = !d;
              break a;
            default:
              a = !1;
          }
          if (a) return null;
          if (c && "function" !== typeof c) throw Error(p$1(231, b, _typeof2(c)));
          return c;
        }
        var Lb = !1;
        if (ia) try {
          var Mb = {};
          Object.defineProperty(Mb, "passive", {
            get: function get() {
              Lb = !0;
            }
          });
          window.addEventListener("test", Mb, Mb);
          window.removeEventListener("test", Mb, Mb);
        } catch (a) {
          Lb = !1;
        }
        function Nb(a, b, c, d, e, f, g, h, k) {
          var l = Array.prototype.slice.call(arguments, 3);
          try {
            b.apply(c, l);
          } catch (m) {
            this.onError(m);
          }
        }
        var Ob = !1,
          Pb = null,
          Qb = !1,
          Rb = null,
          Sb = {
            onError: function onError(a) {
              Ob = !0;
              Pb = a;
            }
          };
        function Tb(a, b, c, d, e, f, g, h, k) {
          Ob = !1;
          Pb = null;
          Nb.apply(Sb, arguments);
        }
        function Ub(a, b, c, d, e, f, g, h, k) {
          Tb.apply(this, arguments);
          if (Ob) {
            if (Ob) {
              var l = Pb;
              Ob = !1;
              Pb = null;
            } else throw Error(p$1(198));
            Qb || (Qb = !0, Rb = l);
          }
        }
        function Vb(a) {
          var b = a,
            c = a;
          if (a.alternate) for (; b.return;) b = b.return;else {
            a = b;
            do b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return; while (a);
          }
          return 3 === b.tag ? c : null;
        }
        function Wb(a) {
          if (13 === a.tag) {
            var b = a.memoizedState;
            null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
            if (null !== b) return b.dehydrated;
          }
          return null;
        }
        function Xb(a) {
          if (Vb(a) !== a) throw Error(p$1(188));
        }
        function Yb(a) {
          var b = a.alternate;
          if (!b) {
            b = Vb(a);
            if (null === b) throw Error(p$1(188));
            return b !== a ? null : a;
          }
          for (var c = a, d = b;;) {
            var e = c.return;
            if (null === e) break;
            var f = e.alternate;
            if (null === f) {
              d = e.return;
              if (null !== d) {
                c = d;
                continue;
              }
              break;
            }
            if (e.child === f.child) {
              for (f = e.child; f;) {
                if (f === c) return Xb(e), a;
                if (f === d) return Xb(e), b;
                f = f.sibling;
              }
              throw Error(p$1(188));
            }
            if (c.return !== d.return) c = e, d = f;else {
              for (var g = !1, h = e.child; h;) {
                if (h === c) {
                  g = !0;
                  c = e;
                  d = f;
                  break;
                }
                if (h === d) {
                  g = !0;
                  d = e;
                  c = f;
                  break;
                }
                h = h.sibling;
              }
              if (!g) {
                for (h = f.child; h;) {
                  if (h === c) {
                    g = !0;
                    c = f;
                    d = e;
                    break;
                  }
                  if (h === d) {
                    g = !0;
                    d = f;
                    c = e;
                    break;
                  }
                  h = h.sibling;
                }
                if (!g) throw Error(p$1(189));
              }
            }
            if (c.alternate !== d) throw Error(p$1(190));
          }
          if (3 !== c.tag) throw Error(p$1(188));
          return c.stateNode.current === c ? a : b;
        }
        function Zb(a) {
          a = Yb(a);
          return null !== a ? $b(a) : null;
        }
        function $b(a) {
          if (5 === a.tag || 6 === a.tag) return a;
          for (a = a.child; null !== a;) {
            var b = $b(a);
            if (null !== b) return b;
            a = a.sibling;
          }
          return null;
        }
        var ac = ca.unstable_scheduleCallback,
          bc = ca.unstable_cancelCallback,
          cc = ca.unstable_shouldYield,
          dc = ca.unstable_requestPaint,
          B = ca.unstable_now,
          ec = ca.unstable_getCurrentPriorityLevel,
          fc = ca.unstable_ImmediatePriority,
          gc = ca.unstable_UserBlockingPriority,
          hc = ca.unstable_NormalPriority,
          ic = ca.unstable_LowPriority,
          jc = ca.unstable_IdlePriority,
          kc = null,
          lc = null;
        function mc(a) {
          if (lc && "function" === typeof lc.onCommitFiberRoot) try {
            lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
          } catch (b) {}
        }
        var oc = Math.clz32 ? Math.clz32 : nc,
          pc = Math.log,
          qc = Math.LN2;
        function nc(a) {
          a >>>= 0;
          return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
        }
        var rc = 64,
          sc = 4194304;
        function tc(a) {
          switch (a & -a) {
            case 1:
              return 1;
            case 2:
              return 2;
            case 4:
              return 4;
            case 8:
              return 8;
            case 16:
              return 16;
            case 32:
              return 32;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return a & 4194240;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              return a & 130023424;
            case 134217728:
              return 134217728;
            case 268435456:
              return 268435456;
            case 536870912:
              return 536870912;
            case 1073741824:
              return 1073741824;
            default:
              return a;
          }
        }
        function uc(a, b) {
          var c = a.pendingLanes;
          if (0 === c) return 0;
          var d = 0,
            e = a.suspendedLanes,
            f = a.pingedLanes,
            g = c & 268435455;
          if (0 !== g) {
            var h = g & ~e;
            0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
          } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
          if (0 === d) return 0;
          if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
          0 !== (d & 4) && (d |= c & 16);
          b = a.entangledLanes;
          if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
          return d;
        }
        function vc(a, b) {
          switch (a) {
            case 1:
            case 2:
            case 4:
              return b + 250;
            case 8:
            case 16:
            case 32:
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return b + 5E3;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              return -1;
            case 134217728:
            case 268435456:
            case 536870912:
            case 1073741824:
              return -1;
            default:
              return -1;
          }
        }
        function wc(a, b) {
          for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;) {
            var g = 31 - oc(f),
              h = 1 << g,
              k = e[g];
            if (-1 === k) {
              if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
            } else k <= b && (a.expiredLanes |= h);
            f &= ~h;
          }
        }
        function xc(a) {
          a = a.pendingLanes & -1073741825;
          return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
        }
        function yc() {
          var a = rc;
          rc <<= 1;
          0 === (rc & 4194240) && (rc = 64);
          return a;
        }
        function zc(a) {
          for (var b = [], c = 0; 31 > c; c++) b.push(a);
          return b;
        }
        function Ac(a, b, c) {
          a.pendingLanes |= b;
          536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
          a = a.eventTimes;
          b = 31 - oc(b);
          a[b] = c;
        }
        function Bc(a, b) {
          var c = a.pendingLanes & ~b;
          a.pendingLanes = b;
          a.suspendedLanes = 0;
          a.pingedLanes = 0;
          a.expiredLanes &= b;
          a.mutableReadLanes &= b;
          a.entangledLanes &= b;
          b = a.entanglements;
          var d = a.eventTimes;
          for (a = a.expirationTimes; 0 < c;) {
            var e = 31 - oc(c),
              f = 1 << e;
            b[e] = 0;
            d[e] = -1;
            a[e] = -1;
            c &= ~f;
          }
        }
        function Cc(a, b) {
          var c = a.entangledLanes |= b;
          for (a = a.entanglements; c;) {
            var d = 31 - oc(c),
              e = 1 << d;
            e & b | a[d] & b && (a[d] |= b);
            c &= ~e;
          }
        }
        var C = 0;
        function Dc(a) {
          a &= -a;
          return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
        }
        var Ec,
          Fc,
          Gc,
          Hc,
          Ic,
          Jc = !1,
          Kc = [],
          Lc = null,
          Mc = null,
          Nc = null,
          Oc = new Map(),
          Pc = new Map(),
          Qc = [],
          Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
        function Sc(a, b) {
          switch (a) {
            case "focusin":
            case "focusout":
              Lc = null;
              break;
            case "dragenter":
            case "dragleave":
              Mc = null;
              break;
            case "mouseover":
            case "mouseout":
              Nc = null;
              break;
            case "pointerover":
            case "pointerout":
              Oc.delete(b.pointerId);
              break;
            case "gotpointercapture":
            case "lostpointercapture":
              Pc.delete(b.pointerId);
          }
        }
        function Tc(a, b, c, d, e, f) {
          if (null === a || a.nativeEvent !== f) return a = {
            blockedOn: b,
            domEventName: c,
            eventSystemFlags: d,
            nativeEvent: f,
            targetContainers: [e]
          }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
          a.eventSystemFlags |= d;
          b = a.targetContainers;
          null !== e && -1 === b.indexOf(e) && b.push(e);
          return a;
        }
        function Uc(a, b, c, d, e) {
          switch (b) {
            case "focusin":
              return Lc = Tc(Lc, a, b, c, d, e), !0;
            case "dragenter":
              return Mc = Tc(Mc, a, b, c, d, e), !0;
            case "mouseover":
              return Nc = Tc(Nc, a, b, c, d, e), !0;
            case "pointerover":
              var f = e.pointerId;
              Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
              return !0;
            case "gotpointercapture":
              return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), !0;
          }
          return !1;
        }
        function Vc(a) {
          var b = Wc(a.target);
          if (null !== b) {
            var c = Vb(b);
            if (null !== c) if (b = c.tag, 13 === b) {
              if (b = Wb(c), null !== b) {
                a.blockedOn = b;
                Ic(a.priority, function () {
                  Gc(c);
                });
                return;
              }
            } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
              a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
              return;
            }
          }
          a.blockedOn = null;
        }
        function Xc(a) {
          if (null !== a.blockedOn) return !1;
          for (var b = a.targetContainers; 0 < b.length;) {
            var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
            if (null === c) {
              c = a.nativeEvent;
              var d = new c.constructor(c.type, c);
              wb = d;
              c.target.dispatchEvent(d);
              wb = null;
            } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, !1;
            b.shift();
          }
          return !0;
        }
        function Zc(a, b, c) {
          Xc(a) && c.delete(b);
        }
        function $c() {
          Jc = !1;
          null !== Lc && Xc(Lc) && (Lc = null);
          null !== Mc && Xc(Mc) && (Mc = null);
          null !== Nc && Xc(Nc) && (Nc = null);
          Oc.forEach(Zc);
          Pc.forEach(Zc);
        }
        function ad(a, b) {
          a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = !0, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
        }
        function bd(a) {
          function b(b) {
            return ad(b, a);
          }
          if (0 < Kc.length) {
            ad(Kc[0], a);
            for (var c = 1; c < Kc.length; c++) {
              var d = Kc[c];
              d.blockedOn === a && (d.blockedOn = null);
            }
          }
          null !== Lc && ad(Lc, a);
          null !== Mc && ad(Mc, a);
          null !== Nc && ad(Nc, a);
          Oc.forEach(b);
          Pc.forEach(b);
          for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
          for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn);) Vc(c), null === c.blockedOn && Qc.shift();
        }
        var cd = ua.ReactCurrentBatchConfig,
          dd$1 = !0;
        function ed(a, b, c, d) {
          var e = C,
            f = cd.transition;
          cd.transition = null;
          try {
            C = 1, fd(a, b, c, d);
          } finally {
            C = e, cd.transition = f;
          }
        }
        function gd(a, b, c, d) {
          var e = C,
            f = cd.transition;
          cd.transition = null;
          try {
            C = 4, fd(a, b, c, d);
          } finally {
            C = e, cd.transition = f;
          }
        }
        function fd(a, b, c, d) {
          if (dd$1) {
            var e = Yc(a, b, c, d);
            if (null === e) hd(a, b, d, id, c), Sc(a, d);else if (Uc(e, a, b, c, d)) d.stopPropagation();else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
              for (; null !== e;) {
                var f = Cb(e);
                null !== f && Ec(f);
                f = Yc(a, b, c, d);
                null === f && hd(a, b, d, id, c);
                if (f === e) break;
                e = f;
              }
              null !== e && d.stopPropagation();
            } else hd(a, b, d, null, c);
          }
        }
        var id = null;
        function Yc(a, b, c, d) {
          id = null;
          a = xb(d);
          a = Wc(a);
          if (null !== a) if (b = Vb(a), null === b) a = null;else if (c = b.tag, 13 === c) {
            a = Wb(b);
            if (null !== a) return a;
            a = null;
          } else if (3 === c) {
            if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
            a = null;
          } else b !== a && (a = null);
          id = a;
          return null;
        }
        function jd(a) {
          switch (a) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return 1;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return 4;
            case "message":
              switch (ec()) {
                case fc:
                  return 1;
                case gc:
                  return 4;
                case hc:
                case ic:
                  return 16;
                case jc:
                  return 536870912;
                default:
                  return 16;
              }
            default:
              return 16;
          }
        }
        var kd = null,
          ld = null,
          md = null;
        function nd() {
          if (md) return md;
          var a,
            b = ld,
            c = b.length,
            d,
            e = "value" in kd ? kd.value : kd.textContent,
            f = e.length;
          for (a = 0; a < c && b[a] === e[a]; a++);
          var g = c - a;
          for (d = 1; d <= g && b[c - d] === e[f - d]; d++);
          return md = e.slice(a, 1 < d ? 1 - d : void 0);
        }
        function od(a) {
          var b = a.keyCode;
          "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
          10 === a && (a = 13);
          return 32 <= a || 13 === a ? a : 0;
        }
        function pd() {
          return !0;
        }
        function qd() {
          return !1;
        }
        function rd(a) {
          function b(b, d, e, f, g) {
            this._reactName = b;
            this._targetInst = e;
            this.type = d;
            this.nativeEvent = f;
            this.target = g;
            this.currentTarget = null;
            for (var c in a) a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
            this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
            this.isPropagationStopped = qd;
            return this;
          }
          A$1(b.prototype, {
            preventDefault: function preventDefault() {
              this.defaultPrevented = !0;
              var a = this.nativeEvent;
              a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
            },
            stopPropagation: function stopPropagation() {
              var a = this.nativeEvent;
              a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
            },
            persist: function persist() {},
            isPersistent: pd
          });
          return b;
        }
        var sd = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function timeStamp(a) {
              return a.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          },
          td = rd(sd),
          ud = A$1({}, sd, {
            view: 0,
            detail: 0
          }),
          vd = rd(ud),
          wd,
          xd,
          yd,
          Ad = A$1({}, ud, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: zd,
            button: 0,
            buttons: 0,
            relatedTarget: function relatedTarget(a) {
              return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
            },
            movementX: function movementX(a) {
              if ("movementX" in a) return a.movementX;
              a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
              return wd;
            },
            movementY: function movementY(a) {
              return "movementY" in a ? a.movementY : xd;
            }
          }),
          Bd = rd(Ad),
          Cd = A$1({}, Ad, {
            dataTransfer: 0
          }),
          Dd = rd(Cd),
          Ed = A$1({}, ud, {
            relatedTarget: 0
          }),
          Fd = rd(Ed),
          Gd = A$1({}, sd, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          }),
          Hd = rd(Gd),
          Id = A$1({}, sd, {
            clipboardData: function clipboardData(a) {
              return "clipboardData" in a ? a.clipboardData : window.clipboardData;
            }
          }),
          Jd = rd(Id),
          Kd = A$1({}, sd, {
            data: 0
          }),
          Ld = rd(Kd),
          Md = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          },
          Nd = {
            8: "Backspace",
            9: "Tab",
            12: "Clear",
            13: "Enter",
            16: "Shift",
            17: "Control",
            18: "Alt",
            19: "Pause",
            20: "CapsLock",
            27: "Escape",
            32: " ",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "ArrowLeft",
            38: "ArrowUp",
            39: "ArrowRight",
            40: "ArrowDown",
            45: "Insert",
            46: "Delete",
            112: "F1",
            113: "F2",
            114: "F3",
            115: "F4",
            116: "F5",
            117: "F6",
            118: "F7",
            119: "F8",
            120: "F9",
            121: "F10",
            122: "F11",
            123: "F12",
            144: "NumLock",
            145: "ScrollLock",
            224: "Meta"
          },
          Od = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
        function Pd(a) {
          var b = this.nativeEvent;
          return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
        }
        function zd() {
          return Pd;
        }
        var Qd = A$1({}, ud, {
            key: function key(a) {
              if (a.key) {
                var b = Md[a.key] || a.key;
                if ("Unidentified" !== b) return b;
              }
              return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
            },
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: zd,
            charCode: function charCode(a) {
              return "keypress" === a.type ? od(a) : 0;
            },
            keyCode: function keyCode(a) {
              return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
            },
            which: function which(a) {
              return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
            }
          }),
          Rd = rd(Qd),
          Sd = A$1({}, Ad, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          }),
          Td = rd(Sd),
          Ud = A$1({}, ud, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: zd
          }),
          Vd = rd(Ud),
          Wd = A$1({}, sd, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          }),
          Xd = rd(Wd),
          Yd = A$1({}, Ad, {
            deltaX: function deltaX(a) {
              return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
            },
            deltaY: function deltaY(a) {
              return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          }),
          Zd = rd(Yd),
          $d = [9, 13, 27, 32],
          ae = ia && "CompositionEvent" in window,
          be = null;
        ia && "documentMode" in document && (be = document.documentMode);
        var ce = ia && "TextEvent" in window && !be,
          de = ia && (!ae || be && 8 < be && 11 >= be),
          ee = String.fromCharCode(32),
          fe = !1;
        function ge(a, b) {
          switch (a) {
            case "keyup":
              return -1 !== $d.indexOf(b.keyCode);
            case "keydown":
              return 229 !== b.keyCode;
            case "keypress":
            case "mousedown":
            case "focusout":
              return !0;
            default:
              return !1;
          }
        }
        function he(a) {
          a = a.detail;
          return "object" === _typeof2(a) && "data" in a ? a.data : null;
        }
        var ie = !1;
        function je(a, b) {
          switch (a) {
            case "compositionend":
              return he(b);
            case "keypress":
              if (32 !== b.which) return null;
              fe = !0;
              return ee;
            case "textInput":
              return a = b.data, a === ee && fe ? null : a;
            default:
              return null;
          }
        }
        function ke(a, b) {
          if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;
          switch (a) {
            case "paste":
              return null;
            case "keypress":
              if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
                if (b.char && 1 < b.char.length) return b.char;
                if (b.which) return String.fromCharCode(b.which);
              }
              return null;
            case "compositionend":
              return de && "ko" !== b.locale ? null : b.data;
            default:
              return null;
          }
        }
        var le = {
          color: !0,
          date: !0,
          datetime: !0,
          "datetime-local": !0,
          email: !0,
          month: !0,
          number: !0,
          password: !0,
          range: !0,
          search: !0,
          tel: !0,
          text: !0,
          time: !0,
          url: !0,
          week: !0
        };
        function me(a) {
          var b = a && a.nodeName && a.nodeName.toLowerCase();
          return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
        }
        function ne(a, b, c, d) {
          Eb(d);
          b = oe(b, "onChange");
          0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
            event: c,
            listeners: b
          }));
        }
        var pe = null,
          qe = null;
        function re(a) {
          se(a, 0);
        }
        function te(a) {
          var b = ue(a);
          if (Wa(b)) return a;
        }
        function ve(a, b) {
          if ("change" === a) return b;
        }
        var we = !1;
        if (ia) {
          var xe;
          if (ia) {
            var ye = ("oninput" in document);
            if (!ye) {
              var ze = document.createElement("div");
              ze.setAttribute("oninput", "return;");
              ye = "function" === typeof ze.oninput;
            }
            xe = ye;
          } else xe = !1;
          we = xe && (!document.documentMode || 9 < document.documentMode);
        }
        function Ae() {
          pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
        }
        function Be(a) {
          if ("value" === a.propertyName && te(qe)) {
            var b = [];
            ne(b, qe, a, xb(a));
            Jb(re, b);
          }
        }
        function Ce(a, b, c) {
          "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
        }
        function De(a) {
          if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
        }
        function Ee(a, b) {
          if ("click" === a) return te(b);
        }
        function Fe(a, b) {
          if ("input" === a || "change" === a) return te(b);
        }
        function Ge(a, b) {
          return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
        }
        var He = "function" === typeof Object.is ? Object.is : Ge;
        function Ie(a, b) {
          if (He(a, b)) return !0;
          if ("object" !== _typeof2(a) || null === a || "object" !== _typeof2(b) || null === b) return !1;
          var c = Object.keys(a),
            d = Object.keys(b);
          if (c.length !== d.length) return !1;
          for (d = 0; d < c.length; d++) {
            var e = c[d];
            if (!ja.call(b, e) || !He(a[e], b[e])) return !1;
          }
          return !0;
        }
        function Je(a) {
          for (; a && a.firstChild;) a = a.firstChild;
          return a;
        }
        function Ke(a, b) {
          var c = Je(a);
          a = 0;
          for (var d; c;) {
            if (3 === c.nodeType) {
              d = a + c.textContent.length;
              if (a <= b && d >= b) return {
                node: c,
                offset: b - a
              };
              a = d;
            }
            a: {
              for (; c;) {
                if (c.nextSibling) {
                  c = c.nextSibling;
                  break a;
                }
                c = c.parentNode;
              }
              c = void 0;
            }
            c = Je(c);
          }
        }
        function Le(a, b) {
          return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
        }
        function Me() {
          for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {
            try {
              var c = "string" === typeof b.contentWindow.location.href;
            } catch (d) {
              c = !1;
            }
            if (c) a = b.contentWindow;else break;
            b = Xa(a.document);
          }
          return b;
        }
        function Ne(a) {
          var b = a && a.nodeName && a.nodeName.toLowerCase();
          return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
        }
        function Oe(a) {
          var b = Me(),
            c = a.focusedElem,
            d = a.selectionRange;
          if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
            if (null !== d && Ne(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
              a = a.getSelection();
              var e = c.textContent.length,
                f = Math.min(d.start, e);
              d = void 0 === d.end ? f : Math.min(d.end, e);
              !a.extend && f > d && (e = d, d = f, f = e);
              e = Ke(c, f);
              var g = Ke(c, d);
              e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
            }
            b = [];
            for (a = c; a = a.parentNode;) 1 === a.nodeType && b.push({
              element: a,
              left: a.scrollLeft,
              top: a.scrollTop
            });
            "function" === typeof c.focus && c.focus();
            for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
          }
        }
        var Pe = ia && "documentMode" in document && 11 >= document.documentMode,
          Qe = null,
          Re = null,
          Se = null,
          Te = !1;
        function Ue(a, b, c) {
          var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
          Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = {
            start: d.selectionStart,
            end: d.selectionEnd
          } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
            anchorNode: d.anchorNode,
            anchorOffset: d.anchorOffset,
            focusNode: d.focusNode,
            focusOffset: d.focusOffset
          }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
            event: b,
            listeners: d
          }), b.target = Qe)));
        }
        function Ve(a, b) {
          var c = {};
          c[a.toLowerCase()] = b.toLowerCase();
          c["Webkit" + a] = "webkit" + b;
          c["Moz" + a] = "moz" + b;
          return c;
        }
        var We = {
            animationend: Ve("Animation", "AnimationEnd"),
            animationiteration: Ve("Animation", "AnimationIteration"),
            animationstart: Ve("Animation", "AnimationStart"),
            transitionend: Ve("Transition", "TransitionEnd")
          },
          Xe = {},
          Ye = {};
        ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
        function Ze(a) {
          if (Xe[a]) return Xe[a];
          if (!We[a]) return a;
          var b = We[a],
            c;
          for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
          return a;
        }
        var $e = Ze("animationend"),
          af = Ze("animationiteration"),
          bf = Ze("animationstart"),
          cf = Ze("transitionend"),
          df = new Map(),
          ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
        function ff(a, b) {
          df.set(a, b);
          fa(b, [a]);
        }
        for (var gf = 0; gf < ef.length; gf++) {
          var hf = ef[gf],
            jf = hf.toLowerCase(),
            kf = hf[0].toUpperCase() + hf.slice(1);
          ff(jf, "on" + kf);
        }
        ff($e, "onAnimationEnd");
        ff(af, "onAnimationIteration");
        ff(bf, "onAnimationStart");
        ff("dblclick", "onDoubleClick");
        ff("focusin", "onFocus");
        ff("focusout", "onBlur");
        ff(cf, "onTransitionEnd");
        ha("onMouseEnter", ["mouseout", "mouseover"]);
        ha("onMouseLeave", ["mouseout", "mouseover"]);
        ha("onPointerEnter", ["pointerout", "pointerover"]);
        ha("onPointerLeave", ["pointerout", "pointerover"]);
        fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
        fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
        fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
        fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
        fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
        var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
          mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
        function nf(a, b, c) {
          var d = a.type || "unknown-event";
          a.currentTarget = c;
          Ub(d, b, void 0, a);
          a.currentTarget = null;
        }
        function se(a, b) {
          b = 0 !== (b & 4);
          for (var c = 0; c < a.length; c++) {
            var d = a[c],
              e = d.event;
            d = d.listeners;
            a: {
              var f = void 0;
              if (b) for (var g = d.length - 1; 0 <= g; g--) {
                var h = d[g],
                  k = h.instance,
                  l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                nf(e, h, l);
                f = k;
              } else for (g = 0; g < d.length; g++) {
                h = d[g];
                k = h.instance;
                l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                nf(e, h, l);
                f = k;
              }
            }
          }
          if (Qb) throw a = Rb, Qb = !1, Rb = null, a;
        }
        function D(a, b) {
          var c = b[of];
          void 0 === c && (c = b[of] = new Set());
          var d = a + "__bubble";
          c.has(d) || (pf(b, a, 2, !1), c.add(d));
        }
        function qf(a, b, c) {
          var d = 0;
          b && (d |= 4);
          pf(c, a, d, b);
        }
        var rf = "_reactListening" + Math.random().toString(36).slice(2);
        function sf(a) {
          if (!a[rf]) {
            a[rf] = !0;
            da.forEach(function (b) {
              "selectionchange" !== b && (mf.has(b) || qf(b, !1, a), qf(b, !0, a));
            });
            var b = 9 === a.nodeType ? a : a.ownerDocument;
            null === b || b[rf] || (b[rf] = !0, qf("selectionchange", !1, b));
          }
        }
        function pf(a, b, c, d) {
          switch (jd(b)) {
            case 1:
              var e = ed;
              break;
            case 4:
              e = gd;
              break;
            default:
              e = fd;
          }
          c = e.bind(null, b, c, a);
          e = void 0;
          !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
          d ? void 0 !== e ? a.addEventListener(b, c, {
            capture: !0,
            passive: e
          }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
            passive: e
          }) : a.addEventListener(b, c, !1);
        }
        function hd(a, b, c, d, e) {
          var f = d;
          if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {
            if (null === d) return;
            var g = d.tag;
            if (3 === g || 4 === g) {
              var h = d.stateNode.containerInfo;
              if (h === e || 8 === h.nodeType && h.parentNode === e) break;
              if (4 === g) for (g = d.return; null !== g;) {
                var k = g.tag;
                if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
                g = g.return;
              }
              for (; null !== h;) {
                g = Wc(h);
                if (null === g) return;
                k = g.tag;
                if (5 === k || 6 === k) {
                  d = f = g;
                  continue a;
                }
                h = h.parentNode;
              }
            }
            d = d.return;
          }
          Jb(function () {
            var d = f,
              e = xb(c),
              g = [];
            a: {
              var h = df.get(a);
              if (void 0 !== h) {
                var k = td,
                  n = a;
                switch (a) {
                  case "keypress":
                    if (0 === od(c)) break a;
                  case "keydown":
                  case "keyup":
                    k = Rd;
                    break;
                  case "focusin":
                    n = "focus";
                    k = Fd;
                    break;
                  case "focusout":
                    n = "blur";
                    k = Fd;
                    break;
                  case "beforeblur":
                  case "afterblur":
                    k = Fd;
                    break;
                  case "click":
                    if (2 === c.button) break a;
                  case "auxclick":
                  case "dblclick":
                  case "mousedown":
                  case "mousemove":
                  case "mouseup":
                  case "mouseout":
                  case "mouseover":
                  case "contextmenu":
                    k = Bd;
                    break;
                  case "drag":
                  case "dragend":
                  case "dragenter":
                  case "dragexit":
                  case "dragleave":
                  case "dragover":
                  case "dragstart":
                  case "drop":
                    k = Dd;
                    break;
                  case "touchcancel":
                  case "touchend":
                  case "touchmove":
                  case "touchstart":
                    k = Vd;
                    break;
                  case $e:
                  case af:
                  case bf:
                    k = Hd;
                    break;
                  case cf:
                    k = Xd;
                    break;
                  case "scroll":
                    k = vd;
                    break;
                  case "wheel":
                    k = Zd;
                    break;
                  case "copy":
                  case "cut":
                  case "paste":
                    k = Jd;
                    break;
                  case "gotpointercapture":
                  case "lostpointercapture":
                  case "pointercancel":
                  case "pointerdown":
                  case "pointermove":
                  case "pointerout":
                  case "pointerover":
                  case "pointerup":
                    k = Td;
                }
                var t = 0 !== (b & 4),
                  J = !t && "scroll" === a,
                  x = t ? null !== h ? h + "Capture" : null : h;
                t = [];
                for (var w = d, u; null !== w;) {
                  u = w;
                  var F = u.stateNode;
                  5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));
                  if (J) break;
                  w = w.return;
                }
                0 < t.length && (h = new k(h, n, null, c, e), g.push({
                  event: h,
                  listeners: t
                }));
              }
            }
            if (0 === (b & 7)) {
              a: {
                h = "mouseover" === a || "pointerover" === a;
                k = "mouseout" === a || "pointerout" === a;
                if (h && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;
                if (k || h) {
                  h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;
                  if (k) {
                    if (n = c.relatedTarget || c.toElement, k = d, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
                  } else k = null, n = d;
                  if (k !== n) {
                    t = Bd;
                    F = "onMouseLeave";
                    x = "onMouseEnter";
                    w = "mouse";
                    if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
                    J = null == k ? h : ue(k);
                    u = null == n ? h : ue(n);
                    h = new t(F, w + "leave", k, c, e);
                    h.target = J;
                    h.relatedTarget = u;
                    F = null;
                    Wc(e) === d && (t = new t(x, w + "enter", n, c, e), t.target = u, t.relatedTarget = J, F = t);
                    J = F;
                    if (k && n) b: {
                      t = k;
                      x = n;
                      w = 0;
                      for (u = t; u; u = vf(u)) w++;
                      u = 0;
                      for (F = x; F; F = vf(F)) u++;
                      for (; 0 < w - u;) t = vf(t), w--;
                      for (; 0 < u - w;) x = vf(x), u--;
                      for (; w--;) {
                        if (t === x || null !== x && t === x.alternate) break b;
                        t = vf(t);
                        x = vf(x);
                      }
                      t = null;
                    } else t = null;
                    null !== k && wf(g, h, k, t, !1);
                    null !== n && null !== J && wf(g, J, n, t, !0);
                  }
                }
              }
              a: {
                h = d ? ue(d) : window;
                k = h.nodeName && h.nodeName.toLowerCase();
                if ("select" === k || "input" === k && "file" === h.type) var na = ve;else if (me(h)) {
                  if (we) na = Fe;else {
                    na = De;
                    var xa = Ce;
                  }
                } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (na = Ee);
                if (na && (na = na(a, d))) {
                  ne(g, na, c, e);
                  break a;
                }
                xa && xa(a, h, d);
                "focusout" === a && (xa = h._wrapperState) && xa.controlled && "number" === h.type && cb(h, "number", h.value);
              }
              xa = d ? ue(d) : window;
              switch (a) {
                case "focusin":
                  if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d, Se = null;
                  break;
                case "focusout":
                  Se = Re = Qe = null;
                  break;
                case "mousedown":
                  Te = !0;
                  break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                  Te = !1;
                  Ue(g, c, e);
                  break;
                case "selectionchange":
                  if (Pe) break;
                case "keydown":
                case "keyup":
                  Ue(g, c, e);
              }
              var $a;
              if (ae) b: {
                switch (a) {
                  case "compositionstart":
                    var ba = "onCompositionStart";
                    break b;
                  case "compositionend":
                    ba = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    ba = "onCompositionUpdate";
                    break b;
                }
                ba = void 0;
              } else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
              ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), xa = oe(d, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e), g.push({
                event: ba,
                listeners: xa
              }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
              if ($a = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
                event: e,
                listeners: d
              }), e.data = $a);
            }
            se(g, b);
          });
        }
        function tf(a, b, c) {
          return {
            instance: a,
            listener: b,
            currentTarget: c
          };
        }
        function oe(a, b) {
          for (var c = b + "Capture", d = []; null !== a;) {
            var e = a,
              f = e.stateNode;
            5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
            a = a.return;
          }
          return d;
        }
        function vf(a) {
          if (null === a) return null;
          do a = a.return; while (a && 5 !== a.tag);
          return a ? a : null;
        }
        function wf(a, b, c, d, e) {
          for (var f = b._reactName, g = []; null !== c && c !== d;) {
            var h = c,
              k = h.alternate,
              l = h.stateNode;
            if (null !== k && k === d) break;
            5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));
            c = c.return;
          }
          0 !== g.length && a.push({
            event: b,
            listeners: g
          });
        }
        var xf = /\r\n?/g,
          yf = /\u0000|\uFFFD/g;
        function zf(a) {
          return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
        }
        function Af(a, b, c) {
          b = zf(b);
          if (zf(a) !== b && c) throw Error(p$1(425));
        }
        function Bf() {}
        var Cf = null,
          Df = null;
        function Ef(a, b) {
          return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === _typeof2(b.dangerouslySetInnerHTML) && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
        }
        var Ff = "function" === typeof setTimeout ? setTimeout : void 0,
          Gf = "function" === typeof clearTimeout ? clearTimeout : void 0,
          Hf = "function" === typeof Promise ? Promise : void 0,
          Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function (a) {
            return Hf.resolve(null).then(a).catch(If);
          } : Ff;
        function If(a) {
          setTimeout(function () {
            throw a;
          });
        }
        function Kf(a, b) {
          var c = b,
            d = 0;
          do {
            var e = c.nextSibling;
            a.removeChild(c);
            if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
              if (0 === d) {
                a.removeChild(e);
                bd(b);
                return;
              }
              d--;
            } else "$" !== c && "$?" !== c && "$!" !== c || d++;
            c = e;
          } while (c);
          bd(b);
        }
        function Lf(a) {
          for (; null != a; a = a.nextSibling) {
            var b = a.nodeType;
            if (1 === b || 3 === b) break;
            if (8 === b) {
              b = a.data;
              if ("$" === b || "$!" === b || "$?" === b) break;
              if ("/$" === b) return null;
            }
          }
          return a;
        }
        function Mf(a) {
          a = a.previousSibling;
          for (var b = 0; a;) {
            if (8 === a.nodeType) {
              var c = a.data;
              if ("$" === c || "$!" === c || "$?" === c) {
                if (0 === b) return a;
                b--;
              } else "/$" === c && b++;
            }
            a = a.previousSibling;
          }
          return null;
        }
        var Nf = Math.random().toString(36).slice(2),
          Of = "__reactFiber$" + Nf,
          Pf = "__reactProps$" + Nf,
          uf = "__reactContainer$" + Nf,
          of = "__reactEvents$" + Nf,
          Qf = "__reactListeners$" + Nf,
          Rf = "__reactHandles$" + Nf;
        function Wc(a) {
          var b = a[Of];
          if (b) return b;
          for (var c = a.parentNode; c;) {
            if (b = c[uf] || c[Of]) {
              c = b.alternate;
              if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a;) {
                if (c = a[Of]) return c;
                a = Mf(a);
              }
              return b;
            }
            a = c;
            c = a.parentNode;
          }
          return null;
        }
        function Cb(a) {
          a = a[Of] || a[uf];
          return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
        }
        function ue(a) {
          if (5 === a.tag || 6 === a.tag) return a.stateNode;
          throw Error(p$1(33));
        }
        function Db(a) {
          return a[Pf] || null;
        }
        var Sf = [],
          Tf = -1;
        function Uf(a) {
          return {
            current: a
          };
        }
        function E(a) {
          0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
        }
        function G(a, b) {
          Tf++;
          Sf[Tf] = a.current;
          a.current = b;
        }
        var Vf = {},
          H = Uf(Vf),
          Wf = Uf(!1),
          Xf = Vf;
        function Yf(a, b) {
          var c = a.type.contextTypes;
          if (!c) return Vf;
          var d = a.stateNode;
          if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
          var e = {},
            f;
          for (f in c) e[f] = b[f];
          d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
          return e;
        }
        function Zf(a) {
          a = a.childContextTypes;
          return null !== a && void 0 !== a;
        }
        function $f() {
          E(Wf);
          E(H);
        }
        function ag(a, b, c) {
          if (H.current !== Vf) throw Error(p$1(168));
          G(H, b);
          G(Wf, c);
        }
        function bg(a, b, c) {
          var d = a.stateNode;
          b = b.childContextTypes;
          if ("function" !== typeof d.getChildContext) return c;
          d = d.getChildContext();
          for (var e in d) if (!(e in b)) throw Error(p$1(108, Ra(a) || "Unknown", e));
          return A$1({}, c, d);
        }
        function cg(a) {
          a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
          Xf = H.current;
          G(H, a);
          G(Wf, Wf.current);
          return !0;
        }
        function dg(a, b, c) {
          var d = a.stateNode;
          if (!d) throw Error(p$1(169));
          c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
          G(Wf, c);
        }
        var eg = null,
          fg = !1,
          gg = !1;
        function hg(a) {
          null === eg ? eg = [a] : eg.push(a);
        }
        function ig(a) {
          fg = !0;
          hg(a);
        }
        function jg() {
          if (!gg && null !== eg) {
            gg = !0;
            var a = 0,
              b = C;
            try {
              var c = eg;
              for (C = 1; a < c.length; a++) {
                var d = c[a];
                do d = d(!0); while (null !== d);
              }
              eg = null;
              fg = !1;
            } catch (e) {
              throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
            } finally {
              C = b, gg = !1;
            }
          }
          return null;
        }
        var kg = [],
          lg = 0,
          mg = null,
          ng = 0,
          og = [],
          pg = 0,
          qg = null,
          rg = 1,
          sg = "";
        function tg(a, b) {
          kg[lg++] = ng;
          kg[lg++] = mg;
          mg = a;
          ng = b;
        }
        function ug(a, b, c) {
          og[pg++] = rg;
          og[pg++] = sg;
          og[pg++] = qg;
          qg = a;
          var d = rg;
          a = sg;
          var e = 32 - oc(d) - 1;
          d &= ~(1 << e);
          c += 1;
          var f = 32 - oc(b) + e;
          if (30 < f) {
            var g = e - e % 5;
            f = (d & (1 << g) - 1).toString(32);
            d >>= g;
            e -= g;
            rg = 1 << 32 - oc(b) + e | c << e | d;
            sg = f + a;
          } else rg = 1 << f | c << e | d, sg = a;
        }
        function vg(a) {
          null !== a.return && (tg(a, 1), ug(a, 1, 0));
        }
        function wg(a) {
          for (; a === mg;) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
          for (; a === qg;) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
        }
        var xg = null,
          yg = null,
          I = !1,
          zg = null;
        function Ag(a, b) {
          var c = Bg(5, null, null, 0);
          c.elementType = "DELETED";
          c.stateNode = b;
          c.return = a;
          b = a.deletions;
          null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
        }
        function Cg(a, b) {
          switch (a.tag) {
            case 5:
              var c = a.type;
              b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
              return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), !0) : !1;
            case 6:
              return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, !0) : !1;
            case 13:
              return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? {
                id: rg,
                overflow: sg
              } : null, a.memoizedState = {
                dehydrated: b,
                treeContext: c,
                retryLane: 1073741824
              }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, !0) : !1;
            default:
              return !1;
          }
        }
        function Dg(a) {
          return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
        }
        function Eg(a) {
          if (I) {
            var b = yg;
            if (b) {
              var c = b;
              if (!Cg(a, b)) {
                if (Dg(a)) throw Error(p$1(418));
                b = Lf(c.nextSibling);
                var d = xg;
                b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = !1, xg = a);
              }
            } else {
              if (Dg(a)) throw Error(p$1(418));
              a.flags = a.flags & -4097 | 2;
              I = !1;
              xg = a;
            }
          }
        }
        function Fg(a) {
          for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;
          xg = a;
        }
        function Gg(a) {
          if (a !== xg) return !1;
          if (!I) return Fg(a), I = !0, !1;
          var b;
          (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
          if (b && (b = yg)) {
            if (Dg(a)) throw Hg(), Error(p$1(418));
            for (; b;) Ag(a, b), b = Lf(b.nextSibling);
          }
          Fg(a);
          if (13 === a.tag) {
            a = a.memoizedState;
            a = null !== a ? a.dehydrated : null;
            if (!a) throw Error(p$1(317));
            a: {
              a = a.nextSibling;
              for (b = 0; a;) {
                if (8 === a.nodeType) {
                  var c = a.data;
                  if ("/$" === c) {
                    if (0 === b) {
                      yg = Lf(a.nextSibling);
                      break a;
                    }
                    b--;
                  } else "$" !== c && "$!" !== c && "$?" !== c || b++;
                }
                a = a.nextSibling;
              }
              yg = null;
            }
          } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
          return !0;
        }
        function Hg() {
          for (var a = yg; a;) a = Lf(a.nextSibling);
        }
        function Ig() {
          yg = xg = null;
          I = !1;
        }
        function Jg(a) {
          null === zg ? zg = [a] : zg.push(a);
        }
        var Kg = ua.ReactCurrentBatchConfig;
        function Lg(a, b) {
          if (a && a.defaultProps) {
            b = A$1({}, b);
            a = a.defaultProps;
            for (var c in a) void 0 === b[c] && (b[c] = a[c]);
            return b;
          }
          return b;
        }
        var Mg = Uf(null),
          Ng = null,
          Og = null,
          Pg = null;
        function Qg() {
          Pg = Og = Ng = null;
        }
        function Rg(a) {
          var b = Mg.current;
          E(Mg);
          a._currentValue = b;
        }
        function Sg(a, b, c) {
          for (; null !== a;) {
            var d = a.alternate;
            (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
            if (a === c) break;
            a = a.return;
          }
        }
        function Tg(a, b) {
          Ng = a;
          Pg = Og = null;
          a = a.dependencies;
          null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (Ug = !0), a.firstContext = null);
        }
        function Vg(a) {
          var b = a._currentValue;
          if (Pg !== a) if (a = {
            context: a,
            memoizedValue: b,
            next: null
          }, null === Og) {
            if (null === Ng) throw Error(p$1(308));
            Og = a;
            Ng.dependencies = {
              lanes: 0,
              firstContext: a
            };
          } else Og = Og.next = a;
          return b;
        }
        var Wg = null;
        function Xg(a) {
          null === Wg ? Wg = [a] : Wg.push(a);
        }
        function Yg(a, b, c, d) {
          var e = b.interleaved;
          null === e ? (c.next = c, Xg(b)) : (c.next = e.next, e.next = c);
          b.interleaved = c;
          return Zg(a, d);
        }
        function Zg(a, b) {
          a.lanes |= b;
          var c = a.alternate;
          null !== c && (c.lanes |= b);
          c = a;
          for (a = a.return; null !== a;) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
          return 3 === c.tag ? c.stateNode : null;
        }
        var $g = !1;
        function ah(a) {
          a.updateQueue = {
            baseState: a.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: 0
            },
            effects: null
          };
        }
        function bh(a, b) {
          a = a.updateQueue;
          b.updateQueue === a && (b.updateQueue = {
            baseState: a.baseState,
            firstBaseUpdate: a.firstBaseUpdate,
            lastBaseUpdate: a.lastBaseUpdate,
            shared: a.shared,
            effects: a.effects
          });
        }
        function ch(a, b) {
          return {
            eventTime: a,
            lane: b,
            tag: 0,
            payload: null,
            callback: null,
            next: null
          };
        }
        function dh(a, b, c) {
          var d = a.updateQueue;
          if (null === d) return null;
          d = d.shared;
          if (0 !== (K & 2)) {
            var e = d.pending;
            null === e ? b.next = b : (b.next = e.next, e.next = b);
            d.pending = b;
            return Zg(a, c);
          }
          e = d.interleaved;
          null === e ? (b.next = b, Xg(d)) : (b.next = e.next, e.next = b);
          d.interleaved = b;
          return Zg(a, c);
        }
        function eh(a, b, c) {
          b = b.updateQueue;
          if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
            var d = b.lanes;
            d &= a.pendingLanes;
            c |= d;
            b.lanes = c;
            Cc(a, c);
          }
        }
        function fh(a, b) {
          var c = a.updateQueue,
            d = a.alternate;
          if (null !== d && (d = d.updateQueue, c === d)) {
            var e = null,
              f = null;
            c = c.firstBaseUpdate;
            if (null !== c) {
              do {
                var g = {
                  eventTime: c.eventTime,
                  lane: c.lane,
                  tag: c.tag,
                  payload: c.payload,
                  callback: c.callback,
                  next: null
                };
                null === f ? e = f = g : f = f.next = g;
                c = c.next;
              } while (null !== c);
              null === f ? e = f = b : f = f.next = b;
            } else e = f = b;
            c = {
              baseState: d.baseState,
              firstBaseUpdate: e,
              lastBaseUpdate: f,
              shared: d.shared,
              effects: d.effects
            };
            a.updateQueue = c;
            return;
          }
          a = c.lastBaseUpdate;
          null === a ? c.firstBaseUpdate = b : a.next = b;
          c.lastBaseUpdate = b;
        }
        function gh(a, b, c, d) {
          var e = a.updateQueue;
          $g = !1;
          var f = e.firstBaseUpdate,
            g = e.lastBaseUpdate,
            h = e.shared.pending;
          if (null !== h) {
            e.shared.pending = null;
            var k = h,
              l = k.next;
            k.next = null;
            null === g ? f = l : g.next = l;
            g = k;
            var m = a.alternate;
            null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
          }
          if (null !== f) {
            var q = e.baseState;
            g = 0;
            m = l = k = null;
            h = f;
            do {
              var r = h.lane,
                y = h.eventTime;
              if ((d & r) === r) {
                null !== m && (m = m.next = {
                  eventTime: y,
                  lane: 0,
                  tag: h.tag,
                  payload: h.payload,
                  callback: h.callback,
                  next: null
                });
                a: {
                  var n = a,
                    t = h;
                  r = b;
                  y = c;
                  switch (t.tag) {
                    case 1:
                      n = t.payload;
                      if ("function" === typeof n) {
                        q = n.call(y, q, r);
                        break a;
                      }
                      q = n;
                      break a;
                    case 3:
                      n.flags = n.flags & -65537 | 128;
                    case 0:
                      n = t.payload;
                      r = "function" === typeof n ? n.call(y, q, r) : n;
                      if (null === r || void 0 === r) break a;
                      q = A$1({}, q, r);
                      break a;
                    case 2:
                      $g = !0;
                  }
                }
                null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));
              } else y = {
                eventTime: y,
                lane: r,
                tag: h.tag,
                payload: h.payload,
                callback: h.callback,
                next: null
              }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
              h = h.next;
              if (null === h) if (h = e.shared.pending, null === h) break;else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
            } while (1);
            null === m && (k = q);
            e.baseState = k;
            e.firstBaseUpdate = l;
            e.lastBaseUpdate = m;
            b = e.shared.interleaved;
            if (null !== b) {
              e = b;
              do g |= e.lane, e = e.next; while (e !== b);
            } else null === f && (e.shared.lanes = 0);
            hh |= g;
            a.lanes = g;
            a.memoizedState = q;
          }
        }
        function ih(a, b, c) {
          a = b.effects;
          b.effects = null;
          if (null !== a) for (b = 0; b < a.length; b++) {
            var d = a[b],
              e = d.callback;
            if (null !== e) {
              d.callback = null;
              d = c;
              if ("function" !== typeof e) throw Error(p$1(191, e));
              e.call(d);
            }
          }
        }
        var jh = new aa.Component().refs;
        function kh(a, b, c, d) {
          b = a.memoizedState;
          c = c(d, b);
          c = null === c || void 0 === c ? b : A$1({}, b, c);
          a.memoizedState = c;
          0 === a.lanes && (a.updateQueue.baseState = c);
        }
        var nh = {
          isMounted: function isMounted(a) {
            return (a = a._reactInternals) ? Vb(a) === a : !1;
          },
          enqueueSetState: function enqueueSetState(a, b, c) {
            a = a._reactInternals;
            var d = L(),
              e = lh(a),
              f = ch(d, e);
            f.payload = b;
            void 0 !== c && null !== c && (f.callback = c);
            b = dh(a, f, e);
            null !== b && (mh(b, a, e, d), eh(b, a, e));
          },
          enqueueReplaceState: function enqueueReplaceState(a, b, c) {
            a = a._reactInternals;
            var d = L(),
              e = lh(a),
              f = ch(d, e);
            f.tag = 1;
            f.payload = b;
            void 0 !== c && null !== c && (f.callback = c);
            b = dh(a, f, e);
            null !== b && (mh(b, a, e, d), eh(b, a, e));
          },
          enqueueForceUpdate: function enqueueForceUpdate(a, b) {
            a = a._reactInternals;
            var c = L(),
              d = lh(a),
              e = ch(c, d);
            e.tag = 2;
            void 0 !== b && null !== b && (e.callback = b);
            b = dh(a, e, d);
            null !== b && (mh(b, a, d, c), eh(b, a, d));
          }
        };
        function oh(a, b, c, d, e, f, g) {
          a = a.stateNode;
          return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : !0;
        }
        function ph(a, b, c) {
          var d = !1,
            e = Vf;
          var f = b.contextType;
          "object" === _typeof2(f) && null !== f ? f = Vg(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
          b = new b(c, f);
          a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
          b.updater = nh;
          a.stateNode = b;
          b._reactInternals = a;
          d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
          return b;
        }
        function qh(a, b, c, d) {
          a = b.state;
          "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
          "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
          b.state !== a && nh.enqueueReplaceState(b, b.state, null);
        }
        function rh(a, b, c, d) {
          var e = a.stateNode;
          e.props = c;
          e.state = a.memoizedState;
          e.refs = jh;
          ah(a);
          var f = b.contextType;
          "object" === _typeof2(f) && null !== f ? e.context = Vg(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));
          e.state = a.memoizedState;
          f = b.getDerivedStateFromProps;
          "function" === typeof f && (kh(a, b, f, c), e.state = a.memoizedState);
          "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a, c, e, d), e.state = a.memoizedState);
          "function" === typeof e.componentDidMount && (a.flags |= 4194308);
        }
        function sh(a, b, c) {
          a = c.ref;
          if (null !== a && "function" !== typeof a && "object" !== _typeof2(a)) {
            if (c._owner) {
              c = c._owner;
              if (c) {
                if (1 !== c.tag) throw Error(p$1(309));
                var d = c.stateNode;
              }
              if (!d) throw Error(p$1(147, a));
              var e = d,
                f = "" + a;
              if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
              b = function b(a) {
                var b = e.refs;
                b === jh && (b = e.refs = {});
                null === a ? delete b[f] : b[f] = a;
              };
              b._stringRef = f;
              return b;
            }
            if ("string" !== typeof a) throw Error(p$1(284));
            if (!c._owner) throw Error(p$1(290, a));
          }
          return a;
        }
        function th(a, b) {
          a = Object.prototype.toString.call(b);
          throw Error(p$1(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
        }
        function uh(a) {
          var b = a._init;
          return b(a._payload);
        }
        function vh(a) {
          function b(b, c) {
            if (a) {
              var d = b.deletions;
              null === d ? (b.deletions = [c], b.flags |= 16) : d.push(c);
            }
          }
          function c(c, d) {
            if (!a) return null;
            for (; null !== d;) b(c, d), d = d.sibling;
            return null;
          }
          function d(a, b) {
            for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
            return a;
          }
          function e(a, b) {
            a = wh(a, b);
            a.index = 0;
            a.sibling = null;
            return a;
          }
          function f(b, c, d) {
            b.index = d;
            if (!a) return b.flags |= 1048576, c;
            d = b.alternate;
            if (null !== d) return d = d.index, d < c ? (b.flags |= 2, c) : d;
            b.flags |= 2;
            return c;
          }
          function g(b) {
            a && null === b.alternate && (b.flags |= 2);
            return b;
          }
          function h(a, b, c, d) {
            if (null === b || 6 !== b.tag) return b = xh(c, a.mode, d), b.return = a, b;
            b = e(b, c);
            b.return = a;
            return b;
          }
          function k(a, b, c, d) {
            var f = c.type;
            if (f === ya) return m(a, b, c.props.children, d, c.key);
            if (null !== b && (b.elementType === f || "object" === _typeof2(f) && null !== f && f.$$typeof === Ha && uh(f) === b.type)) return d = e(b, c.props), d.ref = sh(a, b, c), d.return = a, d;
            d = yh(c.type, c.key, c.props, null, a.mode, d);
            d.ref = sh(a, b, c);
            d.return = a;
            return d;
          }
          function l(a, b, c, d) {
            if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = zh(c, a.mode, d), b.return = a, b;
            b = e(b, c.children || []);
            b.return = a;
            return b;
          }
          function m(a, b, c, d, f) {
            if (null === b || 7 !== b.tag) return b = Ah(c, a.mode, d, f), b.return = a, b;
            b = e(b, c);
            b.return = a;
            return b;
          }
          function q(a, b, c) {
            if ("string" === typeof b && "" !== b || "number" === typeof b) return b = xh("" + b, a.mode, c), b.return = a, b;
            if ("object" === _typeof2(b) && null !== b) {
              switch (b.$$typeof) {
                case va:
                  return c = yh(b.type, b.key, b.props, null, a.mode, c), c.ref = sh(a, null, b), c.return = a, c;
                case wa:
                  return b = zh(b, a.mode, c), b.return = a, b;
                case Ha:
                  var d = b._init;
                  return q(a, d(b._payload), c);
              }
              if (eb(b) || Ka(b)) return b = Ah(b, a.mode, c, null), b.return = a, b;
              th(a, b);
            }
            return null;
          }
          function r(a, b, c, d) {
            var e = null !== b ? b.key : null;
            if ("string" === typeof c && "" !== c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);
            if ("object" === _typeof2(c) && null !== c) {
              switch (c.$$typeof) {
                case va:
                  return c.key === e ? k(a, b, c, d) : null;
                case wa:
                  return c.key === e ? l(a, b, c, d) : null;
                case Ha:
                  return e = c._init, r(a, b, e(c._payload), d);
              }
              if (eb(c) || Ka(c)) return null !== e ? null : m(a, b, c, d, null);
              th(a, c);
            }
            return null;
          }
          function y(a, b, c, d, e) {
            if ("string" === typeof d && "" !== d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);
            if ("object" === _typeof2(d) && null !== d) {
              switch (d.$$typeof) {
                case va:
                  return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);
                case wa:
                  return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
                case Ha:
                  var f = d._init;
                  return y(a, b, c, f(d._payload), e);
              }
              if (eb(d) || Ka(d)) return a = a.get(c) || null, m(b, a, d, e, null);
              th(b, d);
            }
            return null;
          }
          function n(e, g, h, k) {
            for (var l = null, m = null, u = g, w = g = 0, x = null; null !== u && w < h.length; w++) {
              u.index > w ? (x = u, u = null) : x = u.sibling;
              var n = r(e, u, h[w], k);
              if (null === n) {
                null === u && (u = x);
                break;
              }
              a && u && null === n.alternate && b(e, u);
              g = f(n, g, w);
              null === m ? l = n : m.sibling = n;
              m = n;
              u = x;
            }
            if (w === h.length) return c(e, u), I && tg(e, w), l;
            if (null === u) {
              for (; w < h.length; w++) u = q(e, h[w], k), null !== u && (g = f(u, g, w), null === m ? l = u : m.sibling = u, m = u);
              I && tg(e, w);
              return l;
            }
            for (u = d(e, u); w < h.length; w++) x = y(u, e, w, h[w], k), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g = f(x, g, w), null === m ? l = x : m.sibling = x, m = x);
            a && u.forEach(function (a) {
              return b(e, a);
            });
            I && tg(e, w);
            return l;
          }
          function t(e, g, h, k) {
            var l = Ka(h);
            if ("function" !== typeof l) throw Error(p$1(150));
            h = l.call(h);
            if (null == h) throw Error(p$1(151));
            for (var u = l = null, m = g, w = g = 0, x = null, n = h.next(); null !== m && !n.done; w++, n = h.next()) {
              m.index > w ? (x = m, m = null) : x = m.sibling;
              var t = r(e, m, n.value, k);
              if (null === t) {
                null === m && (m = x);
                break;
              }
              a && m && null === t.alternate && b(e, m);
              g = f(t, g, w);
              null === u ? l = t : u.sibling = t;
              u = t;
              m = x;
            }
            if (n.done) return c(e, m), I && tg(e, w), l;
            if (null === m) {
              for (; !n.done; w++, n = h.next()) n = q(e, n.value, k), null !== n && (g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
              I && tg(e, w);
              return l;
            }
            for (m = d(e, m); !n.done; w++, n = h.next()) n = y(m, e, w, n.value, k), null !== n && (a && null !== n.alternate && m.delete(null === n.key ? w : n.key), g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
            a && m.forEach(function (a) {
              return b(e, a);
            });
            I && tg(e, w);
            return l;
          }
          function J(a, d, f, h) {
            "object" === _typeof2(f) && null !== f && f.type === ya && null === f.key && (f = f.props.children);
            if ("object" === _typeof2(f) && null !== f) {
              switch (f.$$typeof) {
                case va:
                  a: {
                    for (var k = f.key, l = d; null !== l;) {
                      if (l.key === k) {
                        k = f.type;
                        if (k === ya) {
                          if (7 === l.tag) {
                            c(a, l.sibling);
                            d = e(l, f.props.children);
                            d.return = a;
                            a = d;
                            break a;
                          }
                        } else if (l.elementType === k || "object" === _typeof2(k) && null !== k && k.$$typeof === Ha && uh(k) === l.type) {
                          c(a, l.sibling);
                          d = e(l, f.props);
                          d.ref = sh(a, l, f);
                          d.return = a;
                          a = d;
                          break a;
                        }
                        c(a, l);
                        break;
                      } else b(a, l);
                      l = l.sibling;
                    }
                    f.type === ya ? (d = Ah(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = yh(f.type, f.key, f.props, null, a.mode, h), h.ref = sh(a, d, f), h.return = a, a = h);
                  }
                  return g(a);
                case wa:
                  a: {
                    for (l = f.key; null !== d;) {
                      if (d.key === l) {
                        if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                          c(a, d.sibling);
                          d = e(d, f.children || []);
                          d.return = a;
                          a = d;
                          break a;
                        } else {
                          c(a, d);
                          break;
                        }
                      } else b(a, d);
                      d = d.sibling;
                    }
                    d = zh(f, a.mode, h);
                    d.return = a;
                    a = d;
                  }
                  return g(a);
                case Ha:
                  return l = f._init, J(a, d, l(f._payload), h);
              }
              if (eb(f)) return n(a, d, f, h);
              if (Ka(f)) return t(a, d, f, h);
              th(a, f);
            }
            return "string" === typeof f && "" !== f || "number" === typeof f ? (f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = xh(f, a.mode, h), d.return = a, a = d), g(a)) : c(a, d);
          }
          return J;
        }
        var Bh = vh(!0),
          Ch = vh(!1),
          Dh = {},
          Eh = Uf(Dh),
          Fh = Uf(Dh),
          Gh = Uf(Dh);
        function Hh(a) {
          if (a === Dh) throw Error(p$1(174));
          return a;
        }
        function Ih(a, b) {
          G(Gh, b);
          G(Fh, a);
          G(Eh, Dh);
          a = b.nodeType;
          switch (a) {
            case 9:
            case 11:
              b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
              break;
            default:
              a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
          }
          E(Eh);
          G(Eh, b);
        }
        function Jh() {
          E(Eh);
          E(Fh);
          E(Gh);
        }
        function Kh(a) {
          Hh(Gh.current);
          var b = Hh(Eh.current);
          var c = lb(b, a.type);
          b !== c && (G(Fh, a), G(Eh, c));
        }
        function Lh(a) {
          Fh.current === a && (E(Eh), E(Fh));
        }
        var M = Uf(0);
        function Mh(a) {
          for (var b = a; null !== b;) {
            if (13 === b.tag) {
              var c = b.memoizedState;
              if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
            } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
              if (0 !== (b.flags & 128)) return b;
            } else if (null !== b.child) {
              b.child.return = b;
              b = b.child;
              continue;
            }
            if (b === a) break;
            for (; null === b.sibling;) {
              if (null === b.return || b.return === a) return null;
              b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
          }
          return null;
        }
        var Nh = [];
        function Oh() {
          for (var a = 0; a < Nh.length; a++) Nh[a]._workInProgressVersionPrimary = null;
          Nh.length = 0;
        }
        var Ph = ua.ReactCurrentDispatcher,
          Qh = ua.ReactCurrentBatchConfig,
          Rh = 0,
          N = null,
          O = null,
          P = null,
          Sh = !1,
          Th = !1,
          Uh = 0,
          Vh = 0;
        function Q() {
          throw Error(p$1(321));
        }
        function Wh(a, b) {
          if (null === b) return !1;
          for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;
          return !0;
        }
        function Xh(a, b, c, d, e, f) {
          Rh = f;
          N = b;
          b.memoizedState = null;
          b.updateQueue = null;
          b.lanes = 0;
          Ph.current = null === a || null === a.memoizedState ? Yh : Zh;
          a = c(d, e);
          if (Th) {
            f = 0;
            do {
              Th = !1;
              Uh = 0;
              if (25 <= f) throw Error(p$1(301));
              f += 1;
              P = O = null;
              b.updateQueue = null;
              Ph.current = $h;
              a = c(d, e);
            } while (Th);
          }
          Ph.current = ai;
          b = null !== O && null !== O.next;
          Rh = 0;
          P = O = N = null;
          Sh = !1;
          if (b) throw Error(p$1(300));
          return a;
        }
        function bi() {
          var a = 0 !== Uh;
          Uh = 0;
          return a;
        }
        function ci() {
          var a = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          null === P ? N.memoizedState = P = a : P = P.next = a;
          return P;
        }
        function di() {
          if (null === O) {
            var a = N.alternate;
            a = null !== a ? a.memoizedState : null;
          } else a = O.next;
          var b = null === P ? N.memoizedState : P.next;
          if (null !== b) P = b, O = a;else {
            if (null === a) throw Error(p$1(310));
            O = a;
            a = {
              memoizedState: O.memoizedState,
              baseState: O.baseState,
              baseQueue: O.baseQueue,
              queue: O.queue,
              next: null
            };
            null === P ? N.memoizedState = P = a : P = P.next = a;
          }
          return P;
        }
        function ei(a, b) {
          return "function" === typeof b ? b(a) : b;
        }
        function fi(a) {
          var b = di(),
            c = b.queue;
          if (null === c) throw Error(p$1(311));
          c.lastRenderedReducer = a;
          var d = O,
            e = d.baseQueue,
            f = c.pending;
          if (null !== f) {
            if (null !== e) {
              var g = e.next;
              e.next = f.next;
              f.next = g;
            }
            d.baseQueue = e = f;
            c.pending = null;
          }
          if (null !== e) {
            f = e.next;
            d = d.baseState;
            var h = g = null,
              k = null,
              l = f;
            do {
              var m = l.lane;
              if ((Rh & m) === m) null !== k && (k = k.next = {
                lane: 0,
                action: l.action,
                hasEagerState: l.hasEagerState,
                eagerState: l.eagerState,
                next: null
              }), d = l.hasEagerState ? l.eagerState : a(d, l.action);else {
                var q = {
                  lane: m,
                  action: l.action,
                  hasEagerState: l.hasEagerState,
                  eagerState: l.eagerState,
                  next: null
                };
                null === k ? (h = k = q, g = d) : k = k.next = q;
                N.lanes |= m;
                hh |= m;
              }
              l = l.next;
            } while (null !== l && l !== f);
            null === k ? g = d : k.next = h;
            He(d, b.memoizedState) || (Ug = !0);
            b.memoizedState = d;
            b.baseState = g;
            b.baseQueue = k;
            c.lastRenderedState = d;
          }
          a = c.interleaved;
          if (null !== a) {
            e = a;
            do f = e.lane, N.lanes |= f, hh |= f, e = e.next; while (e !== a);
          } else null === e && (c.lanes = 0);
          return [b.memoizedState, c.dispatch];
        }
        function gi(a) {
          var b = di(),
            c = b.queue;
          if (null === c) throw Error(p$1(311));
          c.lastRenderedReducer = a;
          var d = c.dispatch,
            e = c.pending,
            f = b.memoizedState;
          if (null !== e) {
            c.pending = null;
            var g = e = e.next;
            do f = a(f, g.action), g = g.next; while (g !== e);
            He(f, b.memoizedState) || (Ug = !0);
            b.memoizedState = f;
            null === b.baseQueue && (b.baseState = f);
            c.lastRenderedState = f;
          }
          return [f, d];
        }
        function hi() {}
        function ii(a, b) {
          var c = N,
            d = di(),
            e = b(),
            f = !He(d.memoizedState, e);
          f && (d.memoizedState = e, Ug = !0);
          d = d.queue;
          ji(ki.bind(null, c, d, a), [a]);
          if (d.getSnapshot !== b || f || null !== P && P.memoizedState.tag & 1) {
            c.flags |= 2048;
            li(9, mi.bind(null, c, d, e, b), void 0, null);
            if (null === R) throw Error(p$1(349));
            0 !== (Rh & 30) || ni(c, b, e);
          }
          return e;
        }
        function ni(a, b, c) {
          a.flags |= 16384;
          a = {
            getSnapshot: b,
            value: c
          };
          b = N.updateQueue;
          null === b ? (b = {
            lastEffect: null,
            stores: null
          }, N.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
        }
        function mi(a, b, c, d) {
          b.value = c;
          b.getSnapshot = d;
          oi(b) && pi(a);
        }
        function ki(a, b, c) {
          return c(function () {
            oi(b) && pi(a);
          });
        }
        function oi(a) {
          var b = a.getSnapshot;
          a = a.value;
          try {
            var c = b();
            return !He(a, c);
          } catch (d) {
            return !0;
          }
        }
        function pi(a) {
          var b = Zg(a, 1);
          null !== b && mh(b, a, 1, -1);
        }
        function qi(a) {
          var b = ci();
          "function" === typeof a && (a = a());
          b.memoizedState = b.baseState = a;
          a = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: ei,
            lastRenderedState: a
          };
          b.queue = a;
          a = a.dispatch = ri.bind(null, N, a);
          return [b.memoizedState, a];
        }
        function li(a, b, c, d) {
          a = {
            tag: a,
            create: b,
            destroy: c,
            deps: d,
            next: null
          };
          b = N.updateQueue;
          null === b ? (b = {
            lastEffect: null,
            stores: null
          }, N.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
          return a;
        }
        function si() {
          return di().memoizedState;
        }
        function ti(a, b, c, d) {
          var e = ci();
          N.flags |= a;
          e.memoizedState = li(1 | b, c, void 0, void 0 === d ? null : d);
        }
        function ui(a, b, c, d) {
          var e = di();
          d = void 0 === d ? null : d;
          var f = void 0;
          if (null !== O) {
            var g = O.memoizedState;
            f = g.destroy;
            if (null !== d && Wh(d, g.deps)) {
              e.memoizedState = li(b, c, f, d);
              return;
            }
          }
          N.flags |= a;
          e.memoizedState = li(1 | b, c, f, d);
        }
        function vi(a, b) {
          return ti(8390656, 8, a, b);
        }
        function ji(a, b) {
          return ui(2048, 8, a, b);
        }
        function wi(a, b) {
          return ui(4, 2, a, b);
        }
        function xi(a, b) {
          return ui(4, 4, a, b);
        }
        function yi(a, b) {
          if ("function" === typeof b) return a = a(), b(a), function () {
            b(null);
          };
          if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
            b.current = null;
          };
        }
        function zi(a, b, c) {
          c = null !== c && void 0 !== c ? c.concat([a]) : null;
          return ui(4, 4, yi.bind(null, b, a), c);
        }
        function Ai() {}
        function Bi(a, b) {
          var c = di();
          b = void 0 === b ? null : b;
          var d = c.memoizedState;
          if (null !== d && null !== b && Wh(b, d[1])) return d[0];
          c.memoizedState = [a, b];
          return a;
        }
        function Ci(a, b) {
          var c = di();
          b = void 0 === b ? null : b;
          var d = c.memoizedState;
          if (null !== d && null !== b && Wh(b, d[1])) return d[0];
          a = a();
          c.memoizedState = [a, b];
          return a;
        }
        function Di(a, b, c) {
          if (0 === (Rh & 21)) return a.baseState && (a.baseState = !1, Ug = !0), a.memoizedState = c;
          He(c, b) || (c = yc(), N.lanes |= c, hh |= c, a.baseState = !0);
          return b;
        }
        function Ei(a, b) {
          var c = C;
          C = 0 !== c && 4 > c ? c : 4;
          a(!0);
          var d = Qh.transition;
          Qh.transition = {};
          try {
            a(!1), b();
          } finally {
            C = c, Qh.transition = d;
          }
        }
        function Fi() {
          return di().memoizedState;
        }
        function Gi(a, b, c) {
          var d = lh(a);
          c = {
            lane: d,
            action: c,
            hasEagerState: !1,
            eagerState: null,
            next: null
          };
          if (Hi(a)) Ii(b, c);else if (c = Yg(a, b, c, d), null !== c) {
            var e = L();
            mh(c, a, d, e);
            Ji(c, b, d);
          }
        }
        function ri(a, b, c) {
          var d = lh(a),
            e = {
              lane: d,
              action: c,
              hasEagerState: !1,
              eagerState: null,
              next: null
            };
          if (Hi(a)) Ii(b, e);else {
            var f = a.alternate;
            if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
              var g = b.lastRenderedState,
                h = f(g, c);
              e.hasEagerState = !0;
              e.eagerState = h;
              if (He(h, g)) {
                var k = b.interleaved;
                null === k ? (e.next = e, Xg(b)) : (e.next = k.next, k.next = e);
                b.interleaved = e;
                return;
              }
            } catch (l) {} finally {}
            c = Yg(a, b, e, d);
            null !== c && (e = L(), mh(c, a, d, e), Ji(c, b, d));
          }
        }
        function Hi(a) {
          var b = a.alternate;
          return a === N || null !== b && b === N;
        }
        function Ii(a, b) {
          Th = Sh = !0;
          var c = a.pending;
          null === c ? b.next = b : (b.next = c.next, c.next = b);
          a.pending = b;
        }
        function Ji(a, b, c) {
          if (0 !== (c & 4194240)) {
            var d = b.lanes;
            d &= a.pendingLanes;
            c |= d;
            b.lanes = c;
            Cc(a, c);
          }
        }
        var ai = {
            readContext: Vg,
            useCallback: Q,
            useContext: Q,
            useEffect: Q,
            useImperativeHandle: Q,
            useInsertionEffect: Q,
            useLayoutEffect: Q,
            useMemo: Q,
            useReducer: Q,
            useRef: Q,
            useState: Q,
            useDebugValue: Q,
            useDeferredValue: Q,
            useTransition: Q,
            useMutableSource: Q,
            useSyncExternalStore: Q,
            useId: Q,
            unstable_isNewReconciler: !1
          },
          Yh = {
            readContext: Vg,
            useCallback: function useCallback(a, b) {
              ci().memoizedState = [a, void 0 === b ? null : b];
              return a;
            },
            useContext: Vg,
            useEffect: vi,
            useImperativeHandle: function useImperativeHandle(a, b, c) {
              c = null !== c && void 0 !== c ? c.concat([a]) : null;
              return ti(4194308, 4, yi.bind(null, b, a), c);
            },
            useLayoutEffect: function useLayoutEffect(a, b) {
              return ti(4194308, 4, a, b);
            },
            useInsertionEffect: function useInsertionEffect(a, b) {
              return ti(4, 2, a, b);
            },
            useMemo: function useMemo(a, b) {
              var c = ci();
              b = void 0 === b ? null : b;
              a = a();
              c.memoizedState = [a, b];
              return a;
            },
            useReducer: function useReducer(a, b, c) {
              var d = ci();
              b = void 0 !== c ? c(b) : b;
              d.memoizedState = d.baseState = b;
              a = {
                pending: null,
                interleaved: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: a,
                lastRenderedState: b
              };
              d.queue = a;
              a = a.dispatch = Gi.bind(null, N, a);
              return [d.memoizedState, a];
            },
            useRef: function useRef(a) {
              var b = ci();
              a = {
                current: a
              };
              return b.memoizedState = a;
            },
            useState: qi,
            useDebugValue: Ai,
            useDeferredValue: function useDeferredValue(a) {
              return ci().memoizedState = a;
            },
            useTransition: function useTransition() {
              var a = qi(!1),
                b = a[0];
              a = Ei.bind(null, a[1]);
              ci().memoizedState = a;
              return [b, a];
            },
            useMutableSource: function useMutableSource() {},
            useSyncExternalStore: function useSyncExternalStore(a, b, c) {
              var d = N,
                e = ci();
              if (I) {
                if (void 0 === c) throw Error(p$1(407));
                c = c();
              } else {
                c = b();
                if (null === R) throw Error(p$1(349));
                0 !== (Rh & 30) || ni(d, b, c);
              }
              e.memoizedState = c;
              var f = {
                value: c,
                getSnapshot: b
              };
              e.queue = f;
              vi(ki.bind(null, d, f, a), [a]);
              d.flags |= 2048;
              li(9, mi.bind(null, d, f, c, b), void 0, null);
              return c;
            },
            useId: function useId() {
              var a = ci(),
                b = R.identifierPrefix;
              if (I) {
                var c = sg;
                var d = rg;
                c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
                b = ":" + b + "R" + c;
                c = Uh++;
                0 < c && (b += "H" + c.toString(32));
                b += ":";
              } else c = Vh++, b = ":" + b + "r" + c.toString(32) + ":";
              return a.memoizedState = b;
            },
            unstable_isNewReconciler: !1
          },
          Zh = {
            readContext: Vg,
            useCallback: Bi,
            useContext: Vg,
            useEffect: ji,
            useImperativeHandle: zi,
            useInsertionEffect: wi,
            useLayoutEffect: xi,
            useMemo: Ci,
            useReducer: fi,
            useRef: si,
            useState: function useState() {
              return fi(ei);
            },
            useDebugValue: Ai,
            useDeferredValue: function useDeferredValue(a) {
              var b = di();
              return Di(b, O.memoizedState, a);
            },
            useTransition: function useTransition() {
              var a = fi(ei)[0],
                b = di().memoizedState;
              return [a, b];
            },
            useMutableSource: hi,
            useSyncExternalStore: ii,
            useId: Fi,
            unstable_isNewReconciler: !1
          },
          $h = {
            readContext: Vg,
            useCallback: Bi,
            useContext: Vg,
            useEffect: ji,
            useImperativeHandle: zi,
            useInsertionEffect: wi,
            useLayoutEffect: xi,
            useMemo: Ci,
            useReducer: gi,
            useRef: si,
            useState: function useState() {
              return gi(ei);
            },
            useDebugValue: Ai,
            useDeferredValue: function useDeferredValue(a) {
              var b = di();
              return null === O ? b.memoizedState = a : Di(b, O.memoizedState, a);
            },
            useTransition: function useTransition() {
              var a = gi(ei)[0],
                b = di().memoizedState;
              return [a, b];
            },
            useMutableSource: hi,
            useSyncExternalStore: ii,
            useId: Fi,
            unstable_isNewReconciler: !1
          };
        function Ki(a, b) {
          try {
            var c = "",
              d = b;
            do c += Pa(d), d = d.return; while (d);
            var e = c;
          } catch (f) {
            e = "\nError generating stack: " + f.message + "\n" + f.stack;
          }
          return {
            value: a,
            source: b,
            stack: e,
            digest: null
          };
        }
        function Li(a, b, c) {
          return {
            value: a,
            source: null,
            stack: null != c ? c : null,
            digest: null != b ? b : null
          };
        }
        function Mi(a, b) {
          try {
            console.error(b.value);
          } catch (c) {
            setTimeout(function () {
              throw c;
            });
          }
        }
        var Ni = "function" === typeof WeakMap ? WeakMap : Map;
        function Oi(a, b, c) {
          c = ch(-1, c);
          c.tag = 3;
          c.payload = {
            element: null
          };
          var d = b.value;
          c.callback = function () {
            Pi || (Pi = !0, Qi = d);
            Mi(a, b);
          };
          return c;
        }
        function Ri(a, b, c) {
          c = ch(-1, c);
          c.tag = 3;
          var d = a.type.getDerivedStateFromError;
          if ("function" === typeof d) {
            var e = b.value;
            c.payload = function () {
              return d(e);
            };
            c.callback = function () {
              Mi(a, b);
            };
          }
          var f = a.stateNode;
          null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
            Mi(a, b);
            "function" !== typeof d && (null === Si ? Si = new Set([this]) : Si.add(this));
            var c = b.stack;
            this.componentDidCatch(b.value, {
              componentStack: null !== c ? c : ""
            });
          });
          return c;
        }
        function Ti(a, b, c) {
          var d = a.pingCache;
          if (null === d) {
            d = a.pingCache = new Ni();
            var e = new Set();
            d.set(b, e);
          } else e = d.get(b), void 0 === e && (e = new Set(), d.set(b, e));
          e.has(c) || (e.add(c), a = Ui.bind(null, a, b, c), b.then(a, a));
        }
        function Vi(a) {
          do {
            var b;
            if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? !0 : !1 : !0;
            if (b) return a;
            a = a.return;
          } while (null !== a);
          return null;
        }
        function Wi(a, b, c, d, e) {
          if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = ch(-1, 1), b.tag = 2, dh(c, b, 1))), c.lanes |= 1), a;
          a.flags |= 65536;
          a.lanes = e;
          return a;
        }
        var Xi = ua.ReactCurrentOwner,
          Ug = !1;
        function Yi(a, b, c, d) {
          b.child = null === a ? Ch(b, null, c, d) : Bh(b, a.child, c, d);
        }
        function Zi(a, b, c, d, e) {
          c = c.render;
          var f = b.ref;
          Tg(b, e);
          d = Xh(a, b, c, d, f, e);
          c = bi();
          if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);
          I && c && vg(b);
          b.flags |= 1;
          Yi(a, b, d, e);
          return b.child;
        }
        function aj(a, b, c, d, e) {
          if (null === a) {
            var f = c.type;
            if ("function" === typeof f && !bj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, cj(a, b, f, d, e);
            a = yh(c.type, null, d, b, b.mode, e);
            a.ref = b.ref;
            a.return = b;
            return b.child = a;
          }
          f = a.child;
          if (0 === (a.lanes & e)) {
            var g = f.memoizedProps;
            c = c.compare;
            c = null !== c ? c : Ie;
            if (c(g, d) && a.ref === b.ref) return $i(a, b, e);
          }
          b.flags |= 1;
          a = wh(f, d);
          a.ref = b.ref;
          a.return = b;
          return b.child = a;
        }
        function cj(a, b, c, d, e) {
          if (null !== a) {
            var f = a.memoizedProps;
            if (Ie(f, d) && a.ref === b.ref) if (Ug = !1, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (Ug = !0);else return b.lanes = a.lanes, $i(a, b, e);
          }
          return dj(a, b, c, d, e);
        }
        function ej(a, b, c) {
          var d = b.pendingProps,
            e = d.children,
            f = null !== a ? a.memoizedState : null;
          if ("hidden" === d.mode) {
            if (0 === (b.mode & 1)) b.memoizedState = {
              baseLanes: 0,
              cachePool: null,
              transitions: null
            }, G(fj, gj), gj |= c;else {
              if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
                baseLanes: a,
                cachePool: null,
                transitions: null
              }, b.updateQueue = null, G(fj, gj), gj |= a, null;
              b.memoizedState = {
                baseLanes: 0,
                cachePool: null,
                transitions: null
              };
              d = null !== f ? f.baseLanes : c;
              G(fj, gj);
              gj |= d;
            }
          } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(fj, gj), gj |= d;
          Yi(a, b, e, c);
          return b.child;
        }
        function hj(a, b) {
          var c = b.ref;
          if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
        }
        function dj(a, b, c, d, e) {
          var f = Zf(c) ? Xf : H.current;
          f = Yf(b, f);
          Tg(b, e);
          c = Xh(a, b, c, d, f, e);
          d = bi();
          if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);
          I && d && vg(b);
          b.flags |= 1;
          Yi(a, b, c, e);
          return b.child;
        }
        function ij(a, b, c, d, e) {
          if (Zf(c)) {
            var f = !0;
            cg(b);
          } else f = !1;
          Tg(b, e);
          if (null === b.stateNode) jj(a, b), ph(b, c, d), rh(b, c, d, e), d = !0;else if (null === a) {
            var g = b.stateNode,
              h = b.memoizedProps;
            g.props = h;
            var k = g.context,
              l = c.contextType;
            "object" === _typeof2(l) && null !== l ? l = Vg(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));
            var m = c.getDerivedStateFromProps,
              q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
            q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && qh(b, g, d, l);
            $g = !1;
            var r = b.memoizedState;
            g.state = r;
            gh(b, d, g, e);
            k = b.memoizedState;
            h !== d || r !== k || Wf.current || $g ? ("function" === typeof m && (kh(b, c, m, d), k = b.memoizedState), (h = $g || oh(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = !1);
          } else {
            g = b.stateNode;
            bh(a, b);
            h = b.memoizedProps;
            l = b.type === b.elementType ? h : Lg(b.type, h);
            g.props = l;
            q = b.pendingProps;
            r = g.context;
            k = c.contextType;
            "object" === _typeof2(k) && null !== k ? k = Vg(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));
            var y = c.getDerivedStateFromProps;
            (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && qh(b, g, d, k);
            $g = !1;
            r = b.memoizedState;
            g.state = r;
            gh(b, d, g, e);
            var n = b.memoizedState;
            h !== q || r !== n || Wf.current || $g ? ("function" === typeof y && (kh(b, c, y, d), n = b.memoizedState), (l = $g || oh(b, c, l, d, r, n, k) || !1) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);
          }
          return kj(a, b, c, d, f, e);
        }
        function kj(a, b, c, d, e, f) {
          hj(a, b);
          var g = 0 !== (b.flags & 128);
          if (!d && !g) return e && dg(b, c, !1), $i(a, b, f);
          d = b.stateNode;
          Xi.current = b;
          var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
          b.flags |= 1;
          null !== a && g ? (b.child = Bh(b, a.child, null, f), b.child = Bh(b, null, h, f)) : Yi(a, b, h, f);
          b.memoizedState = d.state;
          e && dg(b, c, !0);
          return b.child;
        }
        function lj(a) {
          var b = a.stateNode;
          b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, !1);
          Ih(a, b.containerInfo);
        }
        function mj(a, b, c, d, e) {
          Ig();
          Jg(e);
          b.flags |= 256;
          Yi(a, b, c, d);
          return b.child;
        }
        var nj = {
          dehydrated: null,
          treeContext: null,
          retryLane: 0
        };
        function oj(a) {
          return {
            baseLanes: a,
            cachePool: null,
            transitions: null
          };
        }
        function pj(a, b, c) {
          var d = b.pendingProps,
            e = M.current,
            f = !1,
            g = 0 !== (b.flags & 128),
            h;
          (h = g) || (h = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
          if (h) f = !0, b.flags &= -129;else if (null === a || null !== a.memoizedState) e |= 1;
          G(M, e & 1);
          if (null === a) {
            Eg(b);
            a = b.memoizedState;
            if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
            g = d.children;
            a = d.fallback;
            return f ? (d = b.mode, f = b.child, g = {
              mode: "hidden",
              children: g
            }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = qj(g, d, 0, null), a = Ah(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = oj(c), b.memoizedState = nj, a) : rj(b, g);
          }
          e = a.memoizedState;
          if (null !== e && (h = e.dehydrated, null !== h)) return sj(a, b, g, d, h, e, c);
          if (f) {
            f = d.fallback;
            g = b.mode;
            e = a.child;
            h = e.sibling;
            var k = {
              mode: "hidden",
              children: d.children
            };
            0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = wh(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
            null !== h ? f = wh(h, f) : (f = Ah(f, g, c, null), f.flags |= 2);
            f.return = b;
            d.return = b;
            d.sibling = f;
            b.child = d;
            d = f;
            f = b.child;
            g = a.child.memoizedState;
            g = null === g ? oj(c) : {
              baseLanes: g.baseLanes | c,
              cachePool: null,
              transitions: g.transitions
            };
            f.memoizedState = g;
            f.childLanes = a.childLanes & ~c;
            b.memoizedState = nj;
            return d;
          }
          f = a.child;
          a = f.sibling;
          d = wh(f, {
            mode: "visible",
            children: d.children
          });
          0 === (b.mode & 1) && (d.lanes = c);
          d.return = b;
          d.sibling = null;
          null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
          b.child = d;
          b.memoizedState = null;
          return d;
        }
        function rj(a, b) {
          b = qj({
            mode: "visible",
            children: b
          }, a.mode, 0, null);
          b.return = a;
          return a.child = b;
        }
        function tj(a, b, c, d) {
          null !== d && Jg(d);
          Bh(b, a.child, null, c);
          a = rj(b, b.pendingProps.children);
          a.flags |= 2;
          b.memoizedState = null;
          return a;
        }
        function sj(a, b, c, d, e, f, g) {
          if (c) {
            if (b.flags & 256) return b.flags &= -257, d = Li(Error(p$1(422))), tj(a, b, g, d);
            if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
            f = d.fallback;
            e = b.mode;
            d = qj({
              mode: "visible",
              children: d.children
            }, e, 0, null);
            f = Ah(f, e, g, null);
            f.flags |= 2;
            d.return = b;
            f.return = b;
            d.sibling = f;
            b.child = d;
            0 !== (b.mode & 1) && Bh(b, a.child, null, g);
            b.child.memoizedState = oj(g);
            b.memoizedState = nj;
            return f;
          }
          if (0 === (b.mode & 1)) return tj(a, b, g, null);
          if ("$!" === e.data) {
            d = e.nextSibling && e.nextSibling.dataset;
            if (d) var h = d.dgst;
            d = h;
            f = Error(p$1(419));
            d = Li(f, d, void 0);
            return tj(a, b, g, d);
          }
          h = 0 !== (g & a.childLanes);
          if (Ug || h) {
            d = R;
            if (null !== d) {
              switch (g & -g) {
                case 4:
                  e = 2;
                  break;
                case 16:
                  e = 8;
                  break;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                  e = 32;
                  break;
                case 536870912:
                  e = 268435456;
                  break;
                default:
                  e = 0;
              }
              e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
              0 !== e && e !== f.retryLane && (f.retryLane = e, Zg(a, e), mh(d, a, e, -1));
            }
            uj();
            d = Li(Error(p$1(421)));
            return tj(a, b, g, d);
          }
          if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = vj.bind(null, a), e._reactRetry = b, null;
          a = f.treeContext;
          yg = Lf(e.nextSibling);
          xg = b;
          I = !0;
          zg = null;
          null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
          b = rj(b, d.children);
          b.flags |= 4096;
          return b;
        }
        function wj(a, b, c) {
          a.lanes |= b;
          var d = a.alternate;
          null !== d && (d.lanes |= b);
          Sg(a.return, b, c);
        }
        function xj(a, b, c, d, e) {
          var f = a.memoizedState;
          null === f ? a.memoizedState = {
            isBackwards: b,
            rendering: null,
            renderingStartTime: 0,
            last: d,
            tail: c,
            tailMode: e
          } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
        }
        function yj(a, b, c) {
          var d = b.pendingProps,
            e = d.revealOrder,
            f = d.tail;
          Yi(a, b, d.children, c);
          d = M.current;
          if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;else {
            if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a;) {
              if (13 === a.tag) null !== a.memoizedState && wj(a, c, b);else if (19 === a.tag) wj(a, c, b);else if (null !== a.child) {
                a.child.return = a;
                a = a.child;
                continue;
              }
              if (a === b) break a;
              for (; null === a.sibling;) {
                if (null === a.return || a.return === b) break a;
                a = a.return;
              }
              a.sibling.return = a.return;
              a = a.sibling;
            }
            d &= 1;
          }
          G(M, d);
          if (0 === (b.mode & 1)) b.memoizedState = null;else switch (e) {
            case "forwards":
              c = b.child;
              for (e = null; null !== c;) a = c.alternate, null !== a && null === Mh(a) && (e = c), c = c.sibling;
              c = e;
              null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
              xj(b, !1, e, c, f);
              break;
            case "backwards":
              c = null;
              e = b.child;
              for (b.child = null; null !== e;) {
                a = e.alternate;
                if (null !== a && null === Mh(a)) {
                  b.child = e;
                  break;
                }
                a = e.sibling;
                e.sibling = c;
                c = e;
                e = a;
              }
              xj(b, !0, c, null, f);
              break;
            case "together":
              xj(b, !1, null, null, void 0);
              break;
            default:
              b.memoizedState = null;
          }
          return b.child;
        }
        function jj(a, b) {
          0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
        }
        function $i(a, b, c) {
          null !== a && (b.dependencies = a.dependencies);
          hh |= b.lanes;
          if (0 === (c & b.childLanes)) return null;
          if (null !== a && b.child !== a.child) throw Error(p$1(153));
          if (null !== b.child) {
            a = b.child;
            c = wh(a, a.pendingProps);
            b.child = c;
            for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = wh(a, a.pendingProps), c.return = b;
            c.sibling = null;
          }
          return b.child;
        }
        function zj(a, b, c) {
          switch (b.tag) {
            case 3:
              lj(b);
              Ig();
              break;
            case 5:
              Kh(b);
              break;
            case 1:
              Zf(b.type) && cg(b);
              break;
            case 4:
              Ih(b, b.stateNode.containerInfo);
              break;
            case 10:
              var d = b.type._context,
                e = b.memoizedProps.value;
              G(Mg, d._currentValue);
              d._currentValue = e;
              break;
            case 13:
              d = b.memoizedState;
              if (null !== d) {
                if (null !== d.dehydrated) return G(M, M.current & 1), b.flags |= 128, null;
                if (0 !== (c & b.child.childLanes)) return pj(a, b, c);
                G(M, M.current & 1);
                a = $i(a, b, c);
                return null !== a ? a.sibling : null;
              }
              G(M, M.current & 1);
              break;
            case 19:
              d = 0 !== (c & b.childLanes);
              if (0 !== (a.flags & 128)) {
                if (d) return yj(a, b, c);
                b.flags |= 128;
              }
              e = b.memoizedState;
              null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
              G(M, M.current);
              if (d) break;else return null;
            case 22:
            case 23:
              return b.lanes = 0, ej(a, b, c);
          }
          return $i(a, b, c);
        }
        var Aj, Bj, Cj, Dj;
        Aj = function Aj(a, b) {
          for (var c = b.child; null !== c;) {
            if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
              c.child.return = c;
              c = c.child;
              continue;
            }
            if (c === b) break;
            for (; null === c.sibling;) {
              if (null === c.return || c.return === b) return;
              c = c.return;
            }
            c.sibling.return = c.return;
            c = c.sibling;
          }
        };
        Bj = function Bj() {};
        Cj = function Cj(a, b, c, d) {
          var e = a.memoizedProps;
          if (e !== d) {
            a = b.stateNode;
            Hh(Eh.current);
            var f = null;
            switch (c) {
              case "input":
                e = Ya(a, e);
                d = Ya(a, d);
                f = [];
                break;
              case "select":
                e = A$1({}, e, {
                  value: void 0
                });
                d = A$1({}, d, {
                  value: void 0
                });
                f = [];
                break;
              case "textarea":
                e = gb(a, e);
                d = gb(a, d);
                f = [];
                break;
              default:
                "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
            }
            ub(c, d);
            var g;
            c = null;
            for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
              var h = e[l];
              for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
            } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
            for (l in d) {
              var k = d[l];
              h = null != e ? e[l] : void 0;
              if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {
                if (h) {
                  for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
                  for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
                } else c || (f || (f = []), f.push(l, c)), c = k;
              } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
            }
            c && (f = f || []).push("style", c);
            var l = f;
            if (b.updateQueue = l) b.flags |= 4;
          }
        };
        Dj = function Dj(a, b, c, d) {
          c !== d && (b.flags |= 4);
        };
        function Ej(a, b) {
          if (!I) switch (a.tailMode) {
            case "hidden":
              b = a.tail;
              for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;
              null === c ? a.tail = null : c.sibling = null;
              break;
            case "collapsed":
              c = a.tail;
              for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;
              null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
          }
        }
        function S(a) {
          var b = null !== a.alternate && a.alternate.child === a.child,
            c = 0,
            d = 0;
          if (b) for (var e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;else for (e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
          a.subtreeFlags |= d;
          a.childLanes = c;
          return b;
        }
        function Fj(a, b, c) {
          var d = b.pendingProps;
          wg(b);
          switch (b.tag) {
            case 2:
            case 16:
            case 15:
            case 0:
            case 11:
            case 7:
            case 8:
            case 12:
            case 9:
            case 14:
              return S(b), null;
            case 1:
              return Zf(b.type) && $f(), S(b), null;
            case 3:
              d = b.stateNode;
              Jh();
              E(Wf);
              E(H);
              Oh();
              d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
              if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Gj(zg), zg = null));
              Bj(a, b);
              S(b);
              return null;
            case 5:
              Lh(b);
              var e = Hh(Gh.current);
              c = b.type;
              if (null !== a && null != b.stateNode) Cj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);else {
                if (!d) {
                  if (null === b.stateNode) throw Error(p$1(166));
                  S(b);
                  return null;
                }
                a = Hh(Eh.current);
                if (Gg(b)) {
                  d = b.stateNode;
                  c = b.type;
                  var f = b.memoizedProps;
                  d[Of] = b;
                  d[Pf] = f;
                  a = 0 !== (b.mode & 1);
                  switch (c) {
                    case "dialog":
                      D("cancel", d);
                      D("close", d);
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      D("load", d);
                      break;
                    case "video":
                    case "audio":
                      for (e = 0; e < lf.length; e++) D(lf[e], d);
                      break;
                    case "source":
                      D("error", d);
                      break;
                    case "img":
                    case "image":
                    case "link":
                      D("error", d);
                      D("load", d);
                      break;
                    case "details":
                      D("toggle", d);
                      break;
                    case "input":
                      Za(d, f);
                      D("invalid", d);
                      break;
                    case "select":
                      d._wrapperState = {
                        wasMultiple: !!f.multiple
                      };
                      D("invalid", d);
                      break;
                    case "textarea":
                      hb(d, f), D("invalid", d);
                  }
                  ub(c, f);
                  e = null;
                  for (var g in f) if (f.hasOwnProperty(g)) {
                    var h = f[g];
                    "children" === g ? "string" === typeof h ? d.textContent !== h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
                  }
                  switch (c) {
                    case "input":
                      Va(d);
                      db(d, f, !0);
                      break;
                    case "textarea":
                      Va(d);
                      jb(d);
                      break;
                    case "select":
                    case "option":
                      break;
                    default:
                      "function" === typeof f.onClick && (d.onclick = Bf);
                  }
                  d = e;
                  b.updateQueue = d;
                  null !== d && (b.flags |= 4);
                } else {
                  g = 9 === e.nodeType ? e : e.ownerDocument;
                  "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
                  "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
                    is: d.is
                  }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
                  a[Of] = b;
                  a[Pf] = d;
                  Aj(a, b, !1, !1);
                  b.stateNode = a;
                  a: {
                    g = vb(c, d);
                    switch (c) {
                      case "dialog":
                        D("cancel", a);
                        D("close", a);
                        e = d;
                        break;
                      case "iframe":
                      case "object":
                      case "embed":
                        D("load", a);
                        e = d;
                        break;
                      case "video":
                      case "audio":
                        for (e = 0; e < lf.length; e++) D(lf[e], a);
                        e = d;
                        break;
                      case "source":
                        D("error", a);
                        e = d;
                        break;
                      case "img":
                      case "image":
                      case "link":
                        D("error", a);
                        D("load", a);
                        e = d;
                        break;
                      case "details":
                        D("toggle", a);
                        e = d;
                        break;
                      case "input":
                        Za(a, d);
                        e = Ya(a, d);
                        D("invalid", a);
                        break;
                      case "option":
                        e = d;
                        break;
                      case "select":
                        a._wrapperState = {
                          wasMultiple: !!d.multiple
                        };
                        e = A$1({}, d, {
                          value: void 0
                        });
                        D("invalid", a);
                        break;
                      case "textarea":
                        hb(a, d);
                        e = gb(a, d);
                        D("invalid", a);
                        break;
                      default:
                        e = d;
                    }
                    ub(c, e);
                    h = e;
                    for (f in h) if (h.hasOwnProperty(f)) {
                      var k = h[f];
                      "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));
                    }
                    switch (c) {
                      case "input":
                        Va(a);
                        db(a, d, !1);
                        break;
                      case "textarea":
                        Va(a);
                        jb(a);
                        break;
                      case "option":
                        null != d.value && a.setAttribute("value", "" + Sa(d.value));
                        break;
                      case "select":
                        a.multiple = !!d.multiple;
                        f = d.value;
                        null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
                        break;
                      default:
                        "function" === typeof e.onClick && (a.onclick = Bf);
                    }
                    switch (c) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        d = !!d.autoFocus;
                        break a;
                      case "img":
                        d = !0;
                        break a;
                      default:
                        d = !1;
                    }
                  }
                  d && (b.flags |= 4);
                }
                null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
              }
              S(b);
              return null;
            case 6:
              if (a && null != b.stateNode) Dj(a, b, a.memoizedProps, d);else {
                if ("string" !== typeof d && null === b.stateNode) throw Error(p$1(166));
                c = Hh(Gh.current);
                Hh(Eh.current);
                if (Gg(b)) {
                  d = b.stateNode;
                  c = b.memoizedProps;
                  d[Of] = b;
                  if (f = d.nodeValue !== c) if (a = xg, null !== a) switch (a.tag) {
                    case 3:
                      Af(d.nodeValue, c, 0 !== (a.mode & 1));
                      break;
                    case 5:
                      !0 !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
                  }
                  f && (b.flags |= 4);
                } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
              }
              S(b);
              return null;
            case 13:
              E(M);
              d = b.memoizedState;
              if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
                if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = !1;else if (f = Gg(b), null !== d && null !== d.dehydrated) {
                  if (null === a) {
                    if (!f) throw Error(p$1(318));
                    f = b.memoizedState;
                    f = null !== f ? f.dehydrated : null;
                    if (!f) throw Error(p$1(317));
                    f[Of] = b;
                  } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
                  S(b);
                  f = !1;
                } else null !== zg && (Gj(zg), zg = null), f = !0;
                if (!f) return b.flags & 65536 ? b : null;
              }
              if (0 !== (b.flags & 128)) return b.lanes = c, b;
              d = null !== d;
              d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (M.current & 1) ? 0 === T && (T = 3) : uj()));
              null !== b.updateQueue && (b.flags |= 4);
              S(b);
              return null;
            case 4:
              return Jh(), Bj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
            case 10:
              return Rg(b.type._context), S(b), null;
            case 17:
              return Zf(b.type) && $f(), S(b), null;
            case 19:
              E(M);
              f = b.memoizedState;
              if (null === f) return S(b), null;
              d = 0 !== (b.flags & 128);
              g = f.rendering;
              if (null === g) {
                if (d) Ej(f, !1);else {
                  if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a;) {
                    g = Mh(a);
                    if (null !== g) {
                      b.flags |= 128;
                      Ej(f, !1);
                      d = g.updateQueue;
                      null !== d && (b.updateQueue = d, b.flags |= 4);
                      b.subtreeFlags = 0;
                      d = c;
                      for (c = b.child; null !== c;) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                        lanes: a.lanes,
                        firstContext: a.firstContext
                      }), c = c.sibling;
                      G(M, M.current & 1 | 2);
                      return b.child;
                    }
                    a = a.sibling;
                  }
                  null !== f.tail && B() > Hj && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);
                }
              } else {
                if (!d) if (a = Mh(g), null !== a) {
                  if (b.flags |= 128, d = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Ej(f, !0), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;
                } else 2 * B() - f.renderingStartTime > Hj && 1073741824 !== c && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);
                f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
              }
              if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = M.current, G(M, d ? c & 1 | 2 : c & 1), b;
              S(b);
              return null;
            case 22:
            case 23:
              return Ij(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (gj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
            case 24:
              return null;
            case 25:
              return null;
          }
          throw Error(p$1(156, b.tag));
        }
        function Jj(a, b) {
          wg(b);
          switch (b.tag) {
            case 1:
              return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
            case 3:
              return Jh(), E(Wf), E(H), Oh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
            case 5:
              return Lh(b), null;
            case 13:
              E(M);
              a = b.memoizedState;
              if (null !== a && null !== a.dehydrated) {
                if (null === b.alternate) throw Error(p$1(340));
                Ig();
              }
              a = b.flags;
              return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
            case 19:
              return E(M), null;
            case 4:
              return Jh(), null;
            case 10:
              return Rg(b.type._context), null;
            case 22:
            case 23:
              return Ij(), null;
            case 24:
              return null;
            default:
              return null;
          }
        }
        var Kj = !1,
          U = !1,
          Lj = "function" === typeof WeakSet ? WeakSet : Set,
          V = null;
        function Mj(a, b) {
          var c = a.ref;
          if (null !== c) if ("function" === typeof c) try {
            c(null);
          } catch (d) {
            W(a, b, d);
          } else c.current = null;
        }
        function Nj(a, b, c) {
          try {
            c();
          } catch (d) {
            W(a, b, d);
          }
        }
        var Oj = !1;
        function Pj(a, b) {
          Cf = dd$1;
          a = Me();
          if (Ne(a)) {
            if ("selectionStart" in a) var c = {
              start: a.selectionStart,
              end: a.selectionEnd
            };else a: {
              c = (c = a.ownerDocument) && c.defaultView || window;
              var d = c.getSelection && c.getSelection();
              if (d && 0 !== d.rangeCount) {
                c = d.anchorNode;
                var e = d.anchorOffset,
                  f = d.focusNode;
                d = d.focusOffset;
                try {
                  c.nodeType, f.nodeType;
                } catch (F) {
                  c = null;
                  break a;
                }
                var g = 0,
                  h = -1,
                  k = -1,
                  l = 0,
                  m = 0,
                  q = a,
                  r = null;
                b: for (;;) {
                  for (var y;;) {
                    q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
                    q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
                    3 === q.nodeType && (g += q.nodeValue.length);
                    if (null === (y = q.firstChild)) break;
                    r = q;
                    q = y;
                  }
                  for (;;) {
                    if (q === a) break b;
                    r === c && ++l === e && (h = g);
                    r === f && ++m === d && (k = g);
                    if (null !== (y = q.nextSibling)) break;
                    q = r;
                    r = q.parentNode;
                  }
                  q = y;
                }
                c = -1 === h || -1 === k ? null : {
                  start: h,
                  end: k
                };
              } else c = null;
            }
            c = c || {
              start: 0,
              end: 0
            };
          } else c = null;
          Df = {
            focusedElem: a,
            selectionRange: c
          };
          dd$1 = !1;
          for (V = b; null !== V;) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;else for (; null !== V;) {
            b = V;
            try {
              var n = b.alternate;
              if (0 !== (b.flags & 1024)) switch (b.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (null !== n) {
                    var t = n.memoizedProps,
                      J = n.memoizedState,
                      x = b.stateNode,
                      w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Lg(b.type, t), J);
                    x.__reactInternalSnapshotBeforeUpdate = w;
                  }
                  break;
                case 3:
                  var u = b.stateNode.containerInfo;
                  1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(p$1(163));
              }
            } catch (F) {
              W(b, b.return, F);
            }
            a = b.sibling;
            if (null !== a) {
              a.return = b.return;
              V = a;
              break;
            }
            V = b.return;
          }
          n = Oj;
          Oj = !1;
          return n;
        }
        function Qj(a, b, c) {
          var d = b.updateQueue;
          d = null !== d ? d.lastEffect : null;
          if (null !== d) {
            var e = d = d.next;
            do {
              if ((e.tag & a) === a) {
                var f = e.destroy;
                e.destroy = void 0;
                void 0 !== f && Nj(b, c, f);
              }
              e = e.next;
            } while (e !== d);
          }
        }
        function Rj(a, b) {
          b = b.updateQueue;
          b = null !== b ? b.lastEffect : null;
          if (null !== b) {
            var c = b = b.next;
            do {
              if ((c.tag & a) === a) {
                var d = c.create;
                c.destroy = d();
              }
              c = c.next;
            } while (c !== b);
          }
        }
        function Sj(a) {
          var b = a.ref;
          if (null !== b) {
            var c = a.stateNode;
            switch (a.tag) {
              case 5:
                a = c;
                break;
              default:
                a = c;
            }
            "function" === typeof b ? b(a) : b.current = a;
          }
        }
        function Tj(a) {
          var b = a.alternate;
          null !== b && (a.alternate = null, Tj(b));
          a.child = null;
          a.deletions = null;
          a.sibling = null;
          5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
          a.stateNode = null;
          a.return = null;
          a.dependencies = null;
          a.memoizedProps = null;
          a.memoizedState = null;
          a.pendingProps = null;
          a.stateNode = null;
          a.updateQueue = null;
        }
        function Uj(a) {
          return 5 === a.tag || 3 === a.tag || 4 === a.tag;
        }
        function Vj(a) {
          a: for (;;) {
            for (; null === a.sibling;) {
              if (null === a.return || Uj(a.return)) return null;
              a = a.return;
            }
            a.sibling.return = a.return;
            for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;) {
              if (a.flags & 2) continue a;
              if (null === a.child || 4 === a.tag) continue a;else a.child.return = a, a = a.child;
            }
            if (!(a.flags & 2)) return a.stateNode;
          }
        }
        function Wj(a, b, c) {
          var d = a.tag;
          if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a;) Wj(a, b, c), a = a.sibling;
        }
        function Xj(a, b, c) {
          var d = a.tag;
          if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (Xj(a, b, c), a = a.sibling; null !== a;) Xj(a, b, c), a = a.sibling;
        }
        var X = null,
          Yj = !1;
        function Zj(a, b, c) {
          for (c = c.child; null !== c;) ak(a, b, c), c = c.sibling;
        }
        function ak(a, b, c) {
          if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
            lc.onCommitFiberUnmount(kc, c);
          } catch (h) {}
          switch (c.tag) {
            case 5:
              U || Mj(c, b);
            case 6:
              var d = X,
                e = Yj;
              X = null;
              Zj(a, b, c);
              X = d;
              Yj = e;
              null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
              break;
            case 18:
              null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
              break;
            case 4:
              d = X;
              e = Yj;
              X = c.stateNode.containerInfo;
              Yj = !0;
              Zj(a, b, c);
              X = d;
              Yj = e;
              break;
            case 0:
            case 11:
            case 14:
            case 15:
              if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
                e = d = d.next;
                do {
                  var f = e,
                    g = f.destroy;
                  f = f.tag;
                  void 0 !== g && (0 !== (f & 2) ? Nj(c, b, g) : 0 !== (f & 4) && Nj(c, b, g));
                  e = e.next;
                } while (e !== d);
              }
              Zj(a, b, c);
              break;
            case 1:
              if (!U && (Mj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
                d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
              } catch (h) {
                W(c, b, h);
              }
              Zj(a, b, c);
              break;
            case 21:
              Zj(a, b, c);
              break;
            case 22:
              c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Zj(a, b, c), U = d) : Zj(a, b, c);
              break;
            default:
              Zj(a, b, c);
          }
        }
        function bk(a) {
          var b = a.updateQueue;
          if (null !== b) {
            a.updateQueue = null;
            var c = a.stateNode;
            null === c && (c = a.stateNode = new Lj());
            b.forEach(function (b) {
              var d = ck.bind(null, a, b);
              c.has(b) || (c.add(b), b.then(d, d));
            });
          }
        }
        function dk(a, b) {
          var c = b.deletions;
          if (null !== c) for (var d = 0; d < c.length; d++) {
            var e = c[d];
            try {
              var f = a,
                g = b,
                h = g;
              a: for (; null !== h;) {
                switch (h.tag) {
                  case 5:
                    X = h.stateNode;
                    Yj = !1;
                    break a;
                  case 3:
                    X = h.stateNode.containerInfo;
                    Yj = !0;
                    break a;
                  case 4:
                    X = h.stateNode.containerInfo;
                    Yj = !0;
                    break a;
                }
                h = h.return;
              }
              if (null === X) throw Error(p$1(160));
              ak(f, g, e);
              X = null;
              Yj = !1;
              var k = e.alternate;
              null !== k && (k.return = null);
              e.return = null;
            } catch (l) {
              W(e, b, l);
            }
          }
          if (b.subtreeFlags & 12854) for (b = b.child; null !== b;) ek(b, a), b = b.sibling;
        }
        function ek(a, b) {
          var c = a.alternate,
            d = a.flags;
          switch (a.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              dk(b, a);
              fk(a);
              if (d & 4) {
                try {
                  Qj(3, a, a.return), Rj(3, a);
                } catch (t) {
                  W(a, a.return, t);
                }
                try {
                  Qj(5, a, a.return);
                } catch (t) {
                  W(a, a.return, t);
                }
              }
              break;
            case 1:
              dk(b, a);
              fk(a);
              d & 512 && null !== c && Mj(c, c.return);
              break;
            case 5:
              dk(b, a);
              fk(a);
              d & 512 && null !== c && Mj(c, c.return);
              if (a.flags & 32) {
                var e = a.stateNode;
                try {
                  ob(e, "");
                } catch (t) {
                  W(a, a.return, t);
                }
              }
              if (d & 4 && (e = a.stateNode, null != e)) {
                var f = a.memoizedProps,
                  g = null !== c ? c.memoizedProps : f,
                  h = a.type,
                  k = a.updateQueue;
                a.updateQueue = null;
                if (null !== k) try {
                  "input" === h && "radio" === f.type && null != f.name && ab(e, f);
                  vb(h, g);
                  var l = vb(h, f);
                  for (g = 0; g < k.length; g += 2) {
                    var m = k[g],
                      q = k[g + 1];
                    "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
                  }
                  switch (h) {
                    case "input":
                      bb(e, f);
                      break;
                    case "textarea":
                      ib(e, f);
                      break;
                    case "select":
                      var r = e._wrapperState.wasMultiple;
                      e._wrapperState.wasMultiple = !!f.multiple;
                      var y = f.value;
                      null != y ? fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, !0) : fb(e, !!f.multiple, f.multiple ? [] : "", !1));
                  }
                  e[Pf] = f;
                } catch (t) {
                  W(a, a.return, t);
                }
              }
              break;
            case 6:
              dk(b, a);
              fk(a);
              if (d & 4) {
                if (null === a.stateNode) throw Error(p$1(162));
                e = a.stateNode;
                f = a.memoizedProps;
                try {
                  e.nodeValue = f;
                } catch (t) {
                  W(a, a.return, t);
                }
              }
              break;
            case 3:
              dk(b, a);
              fk(a);
              if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
                bd(b.containerInfo);
              } catch (t) {
                W(a, a.return, t);
              }
              break;
            case 4:
              dk(b, a);
              fk(a);
              break;
            case 13:
              dk(b, a);
              fk(a);
              e = a.child;
              e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B()));
              d & 4 && bk(a);
              break;
            case 22:
              m = null !== c && null !== c.memoizedState;
              a.mode & 1 ? (U = (l = U) || m, dk(b, a), U = l) : dk(b, a);
              fk(a);
              if (d & 8192) {
                l = null !== a.memoizedState;
                if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m;) {
                  for (q = V = m; null !== V;) {
                    r = V;
                    y = r.child;
                    switch (r.tag) {
                      case 0:
                      case 11:
                      case 14:
                      case 15:
                        Qj(4, r, r.return);
                        break;
                      case 1:
                        Mj(r, r.return);
                        var n = r.stateNode;
                        if ("function" === typeof n.componentWillUnmount) {
                          d = r;
                          c = r.return;
                          try {
                            b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                          } catch (t) {
                            W(d, c, t);
                          }
                        }
                        break;
                      case 5:
                        Mj(r, r.return);
                        break;
                      case 22:
                        if (null !== r.memoizedState) {
                          hk(q);
                          continue;
                        }
                    }
                    null !== y ? (y.return = r, V = y) : hk(q);
                  }
                  m = m.sibling;
                }
                a: for (m = null, q = a;;) {
                  if (5 === q.tag) {
                    if (null === m) {
                      m = q;
                      try {
                        e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
                      } catch (t) {
                        W(a, a.return, t);
                      }
                    }
                  } else if (6 === q.tag) {
                    if (null === m) try {
                      q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                    } catch (t) {
                      W(a, a.return, t);
                    }
                  } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
                    q.child.return = q;
                    q = q.child;
                    continue;
                  }
                  if (q === a) break a;
                  for (; null === q.sibling;) {
                    if (null === q.return || q.return === a) break a;
                    m === q && (m = null);
                    q = q.return;
                  }
                  m === q && (m = null);
                  q.sibling.return = q.return;
                  q = q.sibling;
                }
              }
              break;
            case 19:
              dk(b, a);
              fk(a);
              d & 4 && bk(a);
              break;
            case 21:
              break;
            default:
              dk(b, a), fk(a);
          }
        }
        function fk(a) {
          var b = a.flags;
          if (b & 2) {
            try {
              a: {
                for (var c = a.return; null !== c;) {
                  if (Uj(c)) {
                    var d = c;
                    break a;
                  }
                  c = c.return;
                }
                throw Error(p$1(160));
              }
              switch (d.tag) {
                case 5:
                  var e = d.stateNode;
                  d.flags & 32 && (ob(e, ""), d.flags &= -33);
                  var f = Vj(a);
                  Xj(a, f, e);
                  break;
                case 3:
                case 4:
                  var g = d.stateNode.containerInfo,
                    h = Vj(a);
                  Wj(a, h, g);
                  break;
                default:
                  throw Error(p$1(161));
              }
            } catch (k) {
              W(a, a.return, k);
            }
            a.flags &= -3;
          }
          b & 4096 && (a.flags &= -4097);
        }
        function ik(a, b, c) {
          V = a;
          jk(a);
        }
        function jk(a, b, c) {
          for (var d = 0 !== (a.mode & 1); null !== V;) {
            var e = V,
              f = e.child;
            if (22 === e.tag && d) {
              var g = null !== e.memoizedState || Kj;
              if (!g) {
                var h = e.alternate,
                  k = null !== h && null !== h.memoizedState || U;
                h = Kj;
                var l = U;
                Kj = g;
                if ((U = k) && !l) for (V = e; null !== V;) g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? kk(e) : null !== k ? (k.return = g, V = k) : kk(e);
                for (; null !== f;) V = f, jk(f), f = f.sibling;
                V = e;
                Kj = h;
                U = l;
              }
              lk(a);
            } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : lk(a);
          }
        }
        function lk(a) {
          for (; null !== V;) {
            var b = V;
            if (0 !== (b.flags & 8772)) {
              var c = b.alternate;
              try {
                if (0 !== (b.flags & 8772)) switch (b.tag) {
                  case 0:
                  case 11:
                  case 15:
                    U || Rj(5, b);
                    break;
                  case 1:
                    var d = b.stateNode;
                    if (b.flags & 4 && !U) if (null === c) d.componentDidMount();else {
                      var e = b.elementType === b.type ? c.memoizedProps : Lg(b.type, c.memoizedProps);
                      d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                    }
                    var f = b.updateQueue;
                    null !== f && ih(b, f, d);
                    break;
                  case 3:
                    var g = b.updateQueue;
                    if (null !== g) {
                      c = null;
                      if (null !== b.child) switch (b.child.tag) {
                        case 5:
                          c = b.child.stateNode;
                          break;
                        case 1:
                          c = b.child.stateNode;
                      }
                      ih(b, g, c);
                    }
                    break;
                  case 5:
                    var h = b.stateNode;
                    if (null === c && b.flags & 4) {
                      c = h;
                      var k = b.memoizedProps;
                      switch (b.type) {
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                          k.autoFocus && c.focus();
                          break;
                        case "img":
                          k.src && (c.src = k.src);
                      }
                    }
                    break;
                  case 6:
                    break;
                  case 4:
                    break;
                  case 12:
                    break;
                  case 13:
                    if (null === b.memoizedState) {
                      var l = b.alternate;
                      if (null !== l) {
                        var m = l.memoizedState;
                        if (null !== m) {
                          var q = m.dehydrated;
                          null !== q && bd(q);
                        }
                      }
                    }
                    break;
                  case 19:
                  case 17:
                  case 21:
                  case 22:
                  case 23:
                  case 25:
                    break;
                  default:
                    throw Error(p$1(163));
                }
                U || b.flags & 512 && Sj(b);
              } catch (r) {
                W(b, b.return, r);
              }
            }
            if (b === a) {
              V = null;
              break;
            }
            c = b.sibling;
            if (null !== c) {
              c.return = b.return;
              V = c;
              break;
            }
            V = b.return;
          }
        }
        function hk(a) {
          for (; null !== V;) {
            var b = V;
            if (b === a) {
              V = null;
              break;
            }
            var c = b.sibling;
            if (null !== c) {
              c.return = b.return;
              V = c;
              break;
            }
            V = b.return;
          }
        }
        function kk(a) {
          for (; null !== V;) {
            var b = V;
            try {
              switch (b.tag) {
                case 0:
                case 11:
                case 15:
                  var c = b.return;
                  try {
                    Rj(4, b);
                  } catch (k) {
                    W(b, c, k);
                  }
                  break;
                case 1:
                  var d = b.stateNode;
                  if ("function" === typeof d.componentDidMount) {
                    var e = b.return;
                    try {
                      d.componentDidMount();
                    } catch (k) {
                      W(b, e, k);
                    }
                  }
                  var f = b.return;
                  try {
                    Sj(b);
                  } catch (k) {
                    W(b, f, k);
                  }
                  break;
                case 5:
                  var g = b.return;
                  try {
                    Sj(b);
                  } catch (k) {
                    W(b, g, k);
                  }
              }
            } catch (k) {
              W(b, b.return, k);
            }
            if (b === a) {
              V = null;
              break;
            }
            var h = b.sibling;
            if (null !== h) {
              h.return = b.return;
              V = h;
              break;
            }
            V = b.return;
          }
        }
        var mk = Math.ceil,
          nk = ua.ReactCurrentDispatcher,
          ok = ua.ReactCurrentOwner,
          pk = ua.ReactCurrentBatchConfig,
          K = 0,
          R = null,
          Y = null,
          Z = 0,
          gj = 0,
          fj = Uf(0),
          T = 0,
          qk = null,
          hh = 0,
          rk = 0,
          sk = 0,
          tk = null,
          uk = null,
          gk = 0,
          Hj = Infinity,
          vk = null,
          Pi = !1,
          Qi = null,
          Si = null,
          wk = !1,
          xk = null,
          yk = 0,
          zk = 0,
          Ak = null,
          Bk = -1,
          Ck = 0;
        function L() {
          return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
        }
        function lh(a) {
          if (0 === (a.mode & 1)) return 1;
          if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
          if (null !== Kg.transition) return 0 === Ck && (Ck = yc()), Ck;
          a = C;
          if (0 !== a) return a;
          a = window.event;
          a = void 0 === a ? 16 : jd(a.type);
          return a;
        }
        function mh(a, b, c, d) {
          if (50 < zk) throw zk = 0, Ak = null, Error(p$1(185));
          Ac(a, c, d);
          if (0 === (K & 2) || a !== R) a === R && (0 === (K & 2) && (rk |= c), 4 === T && Dk(a, Z)), Ek(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Hj = B() + 500, fg && jg());
        }
        function Ek(a, b) {
          var c = a.callbackNode;
          wc(a, b);
          var d = uc(a, a === R ? Z : 0);
          if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;else if (b = d & -d, a.callbackPriority !== b) {
            null != c && bc(c);
            if (1 === b) 0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function () {
              0 === (K & 6) && jg();
            }), c = null;else {
              switch (Dc(d)) {
                case 1:
                  c = fc;
                  break;
                case 4:
                  c = gc;
                  break;
                case 16:
                  c = hc;
                  break;
                case 536870912:
                  c = jc;
                  break;
                default:
                  c = hc;
              }
              c = Gk(c, Hk.bind(null, a));
            }
            a.callbackPriority = b;
            a.callbackNode = c;
          }
        }
        function Hk(a, b) {
          Bk = -1;
          Ck = 0;
          if (0 !== (K & 6)) throw Error(p$1(327));
          var c = a.callbackNode;
          if (Ik() && a.callbackNode !== c) return null;
          var d = uc(a, a === R ? Z : 0);
          if (0 === d) return null;
          if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Jk(a, d);else {
            b = d;
            var e = K;
            K |= 2;
            var f = Kk();
            if (R !== a || Z !== b) vk = null, Hj = B() + 500, Lk(a, b);
            do try {
              Mk();
              break;
            } catch (h) {
              Nk(a, h);
            } while (1);
            Qg();
            nk.current = f;
            K = e;
            null !== Y ? b = 0 : (R = null, Z = 0, b = T);
          }
          if (0 !== b) {
            2 === b && (e = xc(a), 0 !== e && (d = e, b = Ok(a, e)));
            if (1 === b) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;
            if (6 === b) Dk(a, d);else {
              e = a.current.alternate;
              if (0 === (d & 30) && !Pk(e) && (b = Jk(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Ok(a, f))), 1 === b)) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;
              a.finishedWork = e;
              a.finishedLanes = d;
              switch (b) {
                case 0:
                case 1:
                  throw Error(p$1(345));
                case 2:
                  Qk(a, uk, vk);
                  break;
                case 3:
                  Dk(a, d);
                  if ((d & 130023424) === d && (b = gk + 500 - B(), 10 < b)) {
                    if (0 !== uc(a, 0)) break;
                    e = a.suspendedLanes;
                    if ((e & d) !== d) {
                      L();
                      a.pingedLanes |= a.suspendedLanes & e;
                      break;
                    }
                    a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b);
                    break;
                  }
                  Qk(a, uk, vk);
                  break;
                case 4:
                  Dk(a, d);
                  if ((d & 4194240) === d) break;
                  b = a.eventTimes;
                  for (e = -1; 0 < d;) {
                    var g = 31 - oc(d);
                    f = 1 << g;
                    g = b[g];
                    g > e && (e = g);
                    d &= ~f;
                  }
                  d = e;
                  d = B() - d;
                  d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * mk(d / 1960)) - d;
                  if (10 < d) {
                    a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d);
                    break;
                  }
                  Qk(a, uk, vk);
                  break;
                case 5:
                  Qk(a, uk, vk);
                  break;
                default:
                  throw Error(p$1(329));
              }
            }
          }
          Ek(a, B());
          return a.callbackNode === c ? Hk.bind(null, a) : null;
        }
        function Ok(a, b) {
          var c = tk;
          a.current.memoizedState.isDehydrated && (Lk(a, b).flags |= 256);
          a = Jk(a, b);
          2 !== a && (b = uk, uk = c, null !== b && Gj(b));
          return a;
        }
        function Gj(a) {
          null === uk ? uk = a : uk.push.apply(uk, a);
        }
        function Pk(a) {
          for (var b = a;;) {
            if (b.flags & 16384) {
              var c = b.updateQueue;
              if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
                var e = c[d],
                  f = e.getSnapshot;
                e = e.value;
                try {
                  if (!He(f(), e)) return !1;
                } catch (g) {
                  return !1;
                }
              }
            }
            c = b.child;
            if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;else {
              if (b === a) break;
              for (; null === b.sibling;) {
                if (null === b.return || b.return === a) return !0;
                b = b.return;
              }
              b.sibling.return = b.return;
              b = b.sibling;
            }
          }
          return !0;
        }
        function Dk(a, b) {
          b &= ~sk;
          b &= ~rk;
          a.suspendedLanes |= b;
          a.pingedLanes &= ~b;
          for (a = a.expirationTimes; 0 < b;) {
            var c = 31 - oc(b),
              d = 1 << c;
            a[c] = -1;
            b &= ~d;
          }
        }
        function Fk(a) {
          if (0 !== (K & 6)) throw Error(p$1(327));
          Ik();
          var b = uc(a, 0);
          if (0 === (b & 1)) return Ek(a, B()), null;
          var c = Jk(a, b);
          if (0 !== a.tag && 2 === c) {
            var d = xc(a);
            0 !== d && (b = d, c = Ok(a, d));
          }
          if (1 === c) throw c = qk, Lk(a, 0), Dk(a, b), Ek(a, B()), c;
          if (6 === c) throw Error(p$1(345));
          a.finishedWork = a.current.alternate;
          a.finishedLanes = b;
          Qk(a, uk, vk);
          Ek(a, B());
          return null;
        }
        function Rk(a, b) {
          var c = K;
          K |= 1;
          try {
            return a(b);
          } finally {
            K = c, 0 === K && (Hj = B() + 500, fg && jg());
          }
        }
        function Sk(a) {
          null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
          var b = K;
          K |= 1;
          var c = pk.transition,
            d = C;
          try {
            if (pk.transition = null, C = 1, a) return a();
          } finally {
            C = d, pk.transition = c, K = b, 0 === (K & 6) && jg();
          }
        }
        function Ij() {
          gj = fj.current;
          E(fj);
        }
        function Lk(a, b) {
          a.finishedWork = null;
          a.finishedLanes = 0;
          var c = a.timeoutHandle;
          -1 !== c && (a.timeoutHandle = -1, Gf(c));
          if (null !== Y) for (c = Y.return; null !== c;) {
            var d = c;
            wg(d);
            switch (d.tag) {
              case 1:
                d = d.type.childContextTypes;
                null !== d && void 0 !== d && $f();
                break;
              case 3:
                Jh();
                E(Wf);
                E(H);
                Oh();
                break;
              case 5:
                Lh(d);
                break;
              case 4:
                Jh();
                break;
              case 13:
                E(M);
                break;
              case 19:
                E(M);
                break;
              case 10:
                Rg(d.type._context);
                break;
              case 22:
              case 23:
                Ij();
            }
            c = c.return;
          }
          R = a;
          Y = a = wh(a.current, null);
          Z = gj = b;
          T = 0;
          qk = null;
          sk = rk = hh = 0;
          uk = tk = null;
          if (null !== Wg) {
            for (b = 0; b < Wg.length; b++) if (c = Wg[b], d = c.interleaved, null !== d) {
              c.interleaved = null;
              var e = d.next,
                f = c.pending;
              if (null !== f) {
                var g = f.next;
                f.next = e;
                d.next = g;
              }
              c.pending = d;
            }
            Wg = null;
          }
          return a;
        }
        function Nk(a, b) {
          do {
            var c = Y;
            try {
              Qg();
              Ph.current = ai;
              if (Sh) {
                for (var d = N.memoizedState; null !== d;) {
                  var e = d.queue;
                  null !== e && (e.pending = null);
                  d = d.next;
                }
                Sh = !1;
              }
              Rh = 0;
              P = O = N = null;
              Th = !1;
              Uh = 0;
              ok.current = null;
              if (null === c || null === c.return) {
                T = 1;
                qk = b;
                Y = null;
                break;
              }
              a: {
                var f = a,
                  g = c.return,
                  h = c,
                  k = b;
                b = Z;
                h.flags |= 32768;
                if (null !== k && "object" === _typeof2(k) && "function" === typeof k.then) {
                  var l = k,
                    m = h,
                    q = m.tag;
                  if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
                    var r = m.alternate;
                    r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
                  }
                  var y = Vi(g);
                  if (null !== y) {
                    y.flags &= -257;
                    Wi(y, g, h, f, b);
                    y.mode & 1 && Ti(f, l, b);
                    b = y;
                    k = l;
                    var n = b.updateQueue;
                    if (null === n) {
                      var t = new Set();
                      t.add(k);
                      b.updateQueue = t;
                    } else n.add(k);
                    break a;
                  } else {
                    if (0 === (b & 1)) {
                      Ti(f, l, b);
                      uj();
                      break a;
                    }
                    k = Error(p$1(426));
                  }
                } else if (I && h.mode & 1) {
                  var J = Vi(g);
                  if (null !== J) {
                    0 === (J.flags & 65536) && (J.flags |= 256);
                    Wi(J, g, h, f, b);
                    Jg(Ki(k, h));
                    break a;
                  }
                }
                f = k = Ki(k, h);
                4 !== T && (T = 2);
                null === tk ? tk = [f] : tk.push(f);
                f = g;
                do {
                  switch (f.tag) {
                    case 3:
                      f.flags |= 65536;
                      b &= -b;
                      f.lanes |= b;
                      var x = Oi(f, k, b);
                      fh(f, x);
                      break a;
                    case 1:
                      h = k;
                      var w = f.type,
                        u = f.stateNode;
                      if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Si || !Si.has(u)))) {
                        f.flags |= 65536;
                        b &= -b;
                        f.lanes |= b;
                        var F = Ri(f, h, b);
                        fh(f, F);
                        break a;
                      }
                  }
                  f = f.return;
                } while (null !== f);
              }
              Tk(c);
            } catch (na) {
              b = na;
              Y === c && null !== c && (Y = c = c.return);
              continue;
            }
            break;
          } while (1);
        }
        function Kk() {
          var a = nk.current;
          nk.current = ai;
          return null === a ? ai : a;
        }
        function uj() {
          if (0 === T || 3 === T || 2 === T) T = 4;
          null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);
        }
        function Jk(a, b) {
          var c = K;
          K |= 2;
          var d = Kk();
          if (R !== a || Z !== b) vk = null, Lk(a, b);
          do try {
            Uk();
            break;
          } catch (e) {
            Nk(a, e);
          } while (1);
          Qg();
          K = c;
          nk.current = d;
          if (null !== Y) throw Error(p$1(261));
          R = null;
          Z = 0;
          return T;
        }
        function Uk() {
          for (; null !== Y;) Vk(Y);
        }
        function Mk() {
          for (; null !== Y && !cc();) Vk(Y);
        }
        function Vk(a) {
          var b = Wk(a.alternate, a, gj);
          a.memoizedProps = a.pendingProps;
          null === b ? Tk(a) : Y = b;
          ok.current = null;
        }
        function Tk(a) {
          var b = a;
          do {
            var c = b.alternate;
            a = b.return;
            if (0 === (b.flags & 32768)) {
              if (c = Fj(c, b, gj), null !== c) {
                Y = c;
                return;
              }
            } else {
              c = Jj(c, b);
              if (null !== c) {
                c.flags &= 32767;
                Y = c;
                return;
              }
              if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;else {
                T = 6;
                Y = null;
                return;
              }
            }
            b = b.sibling;
            if (null !== b) {
              Y = b;
              return;
            }
            Y = b = a;
          } while (null !== b);
          0 === T && (T = 5);
        }
        function Qk(a, b, c) {
          var d = C,
            e = pk.transition;
          try {
            pk.transition = null, C = 1, Xk(a, b, c, d);
          } finally {
            pk.transition = e, C = d;
          }
          return null;
        }
        function Xk(a, b, c, d) {
          do Ik(); while (null !== xk);
          if (0 !== (K & 6)) throw Error(p$1(327));
          c = a.finishedWork;
          var e = a.finishedLanes;
          if (null === c) return null;
          a.finishedWork = null;
          a.finishedLanes = 0;
          if (c === a.current) throw Error(p$1(177));
          a.callbackNode = null;
          a.callbackPriority = 0;
          var f = c.lanes | c.childLanes;
          Bc(a, f);
          a === R && (Y = R = null, Z = 0);
          0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || wk || (wk = !0, Gk(hc, function () {
            Ik();
            return null;
          }));
          f = 0 !== (c.flags & 15990);
          if (0 !== (c.subtreeFlags & 15990) || f) {
            f = pk.transition;
            pk.transition = null;
            var g = C;
            C = 1;
            var h = K;
            K |= 4;
            ok.current = null;
            Pj(a, c);
            ek(c, a);
            Oe(Df);
            dd$1 = !!Cf;
            Df = Cf = null;
            a.current = c;
            ik(c);
            dc();
            K = h;
            C = g;
            pk.transition = f;
          } else a.current = c;
          wk && (wk = !1, xk = a, yk = e);
          f = a.pendingLanes;
          0 === f && (Si = null);
          mc(c.stateNode);
          Ek(a, B());
          if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, {
            componentStack: e.stack,
            digest: e.digest
          });
          if (Pi) throw Pi = !1, a = Qi, Qi = null, a;
          0 !== (yk & 1) && 0 !== a.tag && Ik();
          f = a.pendingLanes;
          0 !== (f & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;
          jg();
          return null;
        }
        function Ik() {
          if (null !== xk) {
            var a = Dc(yk),
              b = pk.transition,
              c = C;
            try {
              pk.transition = null;
              C = 16 > a ? 16 : a;
              if (null === xk) var d = !1;else {
                a = xk;
                xk = null;
                yk = 0;
                if (0 !== (K & 6)) throw Error(p$1(331));
                var e = K;
                K |= 4;
                for (V = a.current; null !== V;) {
                  var f = V,
                    g = f.child;
                  if (0 !== (V.flags & 16)) {
                    var h = f.deletions;
                    if (null !== h) {
                      for (var k = 0; k < h.length; k++) {
                        var l = h[k];
                        for (V = l; null !== V;) {
                          var m = V;
                          switch (m.tag) {
                            case 0:
                            case 11:
                            case 15:
                              Qj(8, m, f);
                          }
                          var q = m.child;
                          if (null !== q) q.return = m, V = q;else for (; null !== V;) {
                            m = V;
                            var r = m.sibling,
                              y = m.return;
                            Tj(m);
                            if (m === l) {
                              V = null;
                              break;
                            }
                            if (null !== r) {
                              r.return = y;
                              V = r;
                              break;
                            }
                            V = y;
                          }
                        }
                      }
                      var n = f.alternate;
                      if (null !== n) {
                        var t = n.child;
                        if (null !== t) {
                          n.child = null;
                          do {
                            var J = t.sibling;
                            t.sibling = null;
                            t = J;
                          } while (null !== t);
                        }
                      }
                      V = f;
                    }
                  }
                  if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;else b: for (; null !== V;) {
                    f = V;
                    if (0 !== (f.flags & 2048)) switch (f.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(9, f, f.return);
                    }
                    var x = f.sibling;
                    if (null !== x) {
                      x.return = f.return;
                      V = x;
                      break b;
                    }
                    V = f.return;
                  }
                }
                var w = a.current;
                for (V = w; null !== V;) {
                  g = V;
                  var u = g.child;
                  if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;else b: for (g = w; null !== V;) {
                    h = V;
                    if (0 !== (h.flags & 2048)) try {
                      switch (h.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Rj(9, h);
                      }
                    } catch (na) {
                      W(h, h.return, na);
                    }
                    if (h === g) {
                      V = null;
                      break b;
                    }
                    var F = h.sibling;
                    if (null !== F) {
                      F.return = h.return;
                      V = F;
                      break b;
                    }
                    V = h.return;
                  }
                }
                K = e;
                jg();
                if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
                  lc.onPostCommitFiberRoot(kc, a);
                } catch (na) {}
                d = !0;
              }
              return d;
            } finally {
              C = c, pk.transition = b;
            }
          }
          return !1;
        }
        function Yk(a, b, c) {
          b = Ki(c, b);
          b = Oi(a, b, 1);
          a = dh(a, b, 1);
          b = L();
          null !== a && (Ac(a, 1, b), Ek(a, b));
        }
        function W(a, b, c) {
          if (3 === a.tag) Yk(a, a, c);else for (; null !== b;) {
            if (3 === b.tag) {
              Yk(b, a, c);
              break;
            } else if (1 === b.tag) {
              var d = b.stateNode;
              if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Si || !Si.has(d))) {
                a = Ki(c, a);
                a = Ri(b, a, 1);
                b = dh(b, a, 1);
                a = L();
                null !== b && (Ac(b, 1, a), Ek(b, a));
                break;
              }
            }
            b = b.return;
          }
        }
        function Ui(a, b, c) {
          var d = a.pingCache;
          null !== d && d.delete(b);
          b = L();
          a.pingedLanes |= a.suspendedLanes & c;
          R === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a, 0) : sk |= c);
          Ek(a, b);
        }
        function Zk(a, b) {
          0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
          var c = L();
          a = Zg(a, b);
          null !== a && (Ac(a, b, c), Ek(a, c));
        }
        function vj(a) {
          var b = a.memoizedState,
            c = 0;
          null !== b && (c = b.retryLane);
          Zk(a, c);
        }
        function ck(a, b) {
          var c = 0;
          switch (a.tag) {
            case 13:
              var d = a.stateNode;
              var e = a.memoizedState;
              null !== e && (c = e.retryLane);
              break;
            case 19:
              d = a.stateNode;
              break;
            default:
              throw Error(p$1(314));
          }
          null !== d && d.delete(b);
          Zk(a, c);
        }
        var Wk;
        Wk = function Wk(a, b, c) {
          if (null !== a) {
            if (a.memoizedProps !== b.pendingProps || Wf.current) Ug = !0;else {
              if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return Ug = !1, zj(a, b, c);
              Ug = 0 !== (a.flags & 131072) ? !0 : !1;
            }
          } else Ug = !1, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
          b.lanes = 0;
          switch (b.tag) {
            case 2:
              var d = b.type;
              jj(a, b);
              a = b.pendingProps;
              var e = Yf(b, H.current);
              Tg(b, c);
              e = Xh(null, b, d, a, e, c);
              var f = bi();
              b.flags |= 1;
              "object" === _typeof2(e) && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = !0, cg(b)) : f = !1, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b), e.updater = nh, b.stateNode = e, e._reactInternals = b, rh(b, d, a, c), b = kj(null, b, d, !0, f, c)) : (b.tag = 0, I && f && vg(b), Yi(null, b, e, c), b = b.child);
              return b;
            case 16:
              d = b.elementType;
              a: {
                jj(a, b);
                a = b.pendingProps;
                e = d._init;
                d = e(d._payload);
                b.type = d;
                e = b.tag = $k(d);
                a = Lg(d, a);
                switch (e) {
                  case 0:
                    b = dj(null, b, d, a, c);
                    break a;
                  case 1:
                    b = ij(null, b, d, a, c);
                    break a;
                  case 11:
                    b = Zi(null, b, d, a, c);
                    break a;
                  case 14:
                    b = aj(null, b, d, Lg(d.type, a), c);
                    break a;
                }
                throw Error(p$1(306, d, ""));
              }
              return b;
            case 0:
              return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), dj(a, b, d, e, c);
            case 1:
              return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), ij(a, b, d, e, c);
            case 3:
              a: {
                lj(b);
                if (null === a) throw Error(p$1(387));
                d = b.pendingProps;
                f = b.memoizedState;
                e = f.element;
                bh(a, b);
                gh(b, d, null, c);
                var g = b.memoizedState;
                d = g.element;
                if (f.isDehydrated) {
                  if (f = {
                    element: d,
                    isDehydrated: !1,
                    cache: g.cache,
                    pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,
                    transitions: g.transitions
                  }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                    e = Ki(Error(p$1(423)), b);
                    b = mj(a, b, d, c, e);
                    break a;
                  } else if (d !== e) {
                    e = Ki(Error(p$1(424)), b);
                    b = mj(a, b, d, c, e);
                    break a;
                  } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = !0, zg = null, c = Ch(b, null, d, c), b.child = c; c;) c.flags = c.flags & -3 | 4096, c = c.sibling;
                } else {
                  Ig();
                  if (d === e) {
                    b = $i(a, b, c);
                    break a;
                  }
                  Yi(a, b, d, c);
                }
                b = b.child;
              }
              return b;
            case 5:
              return Kh(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), hj(a, b), Yi(a, b, g, c), b.child;
            case 6:
              return null === a && Eg(b), null;
            case 13:
              return pj(a, b, c);
            case 4:
              return Ih(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Bh(b, null, d, c) : Yi(a, b, d, c), b.child;
            case 11:
              return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), Zi(a, b, d, e, c);
            case 7:
              return Yi(a, b, b.pendingProps, c), b.child;
            case 8:
              return Yi(a, b, b.pendingProps.children, c), b.child;
            case 12:
              return Yi(a, b, b.pendingProps.children, c), b.child;
            case 10:
              a: {
                d = b.type._context;
                e = b.pendingProps;
                f = b.memoizedProps;
                g = e.value;
                G(Mg, d._currentValue);
                d._currentValue = g;
                if (null !== f) if (He(f.value, g)) {
                  if (f.children === e.children && !Wf.current) {
                    b = $i(a, b, c);
                    break a;
                  }
                } else for (f = b.child, null !== f && (f.return = b); null !== f;) {
                  var h = f.dependencies;
                  if (null !== h) {
                    g = f.child;
                    for (var k = h.firstContext; null !== k;) {
                      if (k.context === d) {
                        if (1 === f.tag) {
                          k = ch(-1, c & -c);
                          k.tag = 2;
                          var l = f.updateQueue;
                          if (null !== l) {
                            l = l.shared;
                            var m = l.pending;
                            null === m ? k.next = k : (k.next = m.next, m.next = k);
                            l.pending = k;
                          }
                        }
                        f.lanes |= c;
                        k = f.alternate;
                        null !== k && (k.lanes |= c);
                        Sg(f.return, c, b);
                        h.lanes |= c;
                        break;
                      }
                      k = k.next;
                    }
                  } else if (10 === f.tag) g = f.type === b.type ? null : f.child;else if (18 === f.tag) {
                    g = f.return;
                    if (null === g) throw Error(p$1(341));
                    g.lanes |= c;
                    h = g.alternate;
                    null !== h && (h.lanes |= c);
                    Sg(g, c, b);
                    g = f.sibling;
                  } else g = f.child;
                  if (null !== g) g.return = f;else for (g = f; null !== g;) {
                    if (g === b) {
                      g = null;
                      break;
                    }
                    f = g.sibling;
                    if (null !== f) {
                      f.return = g.return;
                      g = f;
                      break;
                    }
                    g = g.return;
                  }
                  f = g;
                }
                Yi(a, b, e.children, c);
                b = b.child;
              }
              return b;
            case 9:
              return e = b.type, d = b.pendingProps.children, Tg(b, c), e = Vg(e), d = d(e), b.flags |= 1, Yi(a, b, d, c), b.child;
            case 14:
              return d = b.type, e = Lg(d, b.pendingProps), e = Lg(d.type, e), aj(a, b, d, e, c);
            case 15:
              return cj(a, b, b.type, b.pendingProps, c);
            case 17:
              return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), jj(a, b), b.tag = 1, Zf(d) ? (a = !0, cg(b)) : a = !1, Tg(b, c), ph(b, d, e), rh(b, d, e, c), kj(null, b, d, !0, a, c);
            case 19:
              return yj(a, b, c);
            case 22:
              return ej(a, b, c);
          }
          throw Error(p$1(156, b.tag));
        };
        function Gk(a, b) {
          return ac(a, b);
        }
        function al(a, b, c, d) {
          this.tag = a;
          this.key = c;
          this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = b;
          this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
          this.mode = d;
          this.subtreeFlags = this.flags = 0;
          this.deletions = null;
          this.childLanes = this.lanes = 0;
          this.alternate = null;
        }
        function Bg(a, b, c, d) {
          return new al(a, b, c, d);
        }
        function bj(a) {
          a = a.prototype;
          return !(!a || !a.isReactComponent);
        }
        function $k(a) {
          if ("function" === typeof a) return bj(a) ? 1 : 0;
          if (void 0 !== a && null !== a) {
            a = a.$$typeof;
            if (a === Da) return 11;
            if (a === Ga) return 14;
          }
          return 2;
        }
        function wh(a, b) {
          var c = a.alternate;
          null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
          c.flags = a.flags & 14680064;
          c.childLanes = a.childLanes;
          c.lanes = a.lanes;
          c.child = a.child;
          c.memoizedProps = a.memoizedProps;
          c.memoizedState = a.memoizedState;
          c.updateQueue = a.updateQueue;
          b = a.dependencies;
          c.dependencies = null === b ? null : {
            lanes: b.lanes,
            firstContext: b.firstContext
          };
          c.sibling = a.sibling;
          c.index = a.index;
          c.ref = a.ref;
          return c;
        }
        function yh(a, b, c, d, e, f) {
          var g = 2;
          d = a;
          if ("function" === typeof a) bj(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
            case ya:
              return Ah(c.children, e, f, b);
            case za:
              g = 8;
              e |= 8;
              break;
            case Aa:
              return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
            case Ea:
              return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
            case Fa:
              return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
            case Ia:
              return qj(c, e, f, b);
            default:
              if ("object" === _typeof2(a) && null !== a) switch (a.$$typeof) {
                case Ba:
                  g = 10;
                  break a;
                case Ca:
                  g = 9;
                  break a;
                case Da:
                  g = 11;
                  break a;
                case Ga:
                  g = 14;
                  break a;
                case Ha:
                  g = 16;
                  d = null;
                  break a;
              }
              throw Error(p$1(130, null == a ? a : _typeof2(a), ""));
          }
          b = Bg(g, c, b, e);
          b.elementType = a;
          b.type = d;
          b.lanes = f;
          return b;
        }
        function Ah(a, b, c, d) {
          a = Bg(7, a, d, b);
          a.lanes = c;
          return a;
        }
        function qj(a, b, c, d) {
          a = Bg(22, a, d, b);
          a.elementType = Ia;
          a.lanes = c;
          a.stateNode = {
            isHidden: !1
          };
          return a;
        }
        function xh(a, b, c) {
          a = Bg(6, a, null, b);
          a.lanes = c;
          return a;
        }
        function zh(a, b, c) {
          b = Bg(4, null !== a.children ? a.children : [], a.key, b);
          b.lanes = c;
          b.stateNode = {
            containerInfo: a.containerInfo,
            pendingChildren: null,
            implementation: a.implementation
          };
          return b;
        }
        function bl(a, b, c, d, e) {
          this.tag = b;
          this.containerInfo = a;
          this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
          this.timeoutHandle = -1;
          this.callbackNode = this.pendingContext = this.context = null;
          this.callbackPriority = 0;
          this.eventTimes = zc(0);
          this.expirationTimes = zc(-1);
          this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
          this.entanglements = zc(0);
          this.identifierPrefix = d;
          this.onRecoverableError = e;
          this.mutableSourceEagerHydrationData = null;
        }
        function cl(a, b, c, d, e, f, g, h, k) {
          a = new bl(a, b, c, h, k);
          1 === b ? (b = 1, !0 === f && (b |= 8)) : b = 0;
          f = Bg(3, null, null, b);
          a.current = f;
          f.stateNode = a;
          f.memoizedState = {
            element: d,
            isDehydrated: c,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          ah(f);
          return a;
        }
        function dl(a, b, c) {
          var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
          return {
            $$typeof: wa,
            key: null == d ? null : "" + d,
            children: a,
            containerInfo: b,
            implementation: c
          };
        }
        function el(a) {
          if (!a) return Vf;
          a = a._reactInternals;
          a: {
            if (Vb(a) !== a || 1 !== a.tag) throw Error(p$1(170));
            var b = a;
            do {
              switch (b.tag) {
                case 3:
                  b = b.stateNode.context;
                  break a;
                case 1:
                  if (Zf(b.type)) {
                    b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                    break a;
                  }
              }
              b = b.return;
            } while (null !== b);
            throw Error(p$1(171));
          }
          if (1 === a.tag) {
            var c = a.type;
            if (Zf(c)) return bg(a, c, b);
          }
          return b;
        }
        function fl(a, b, c, d, e, f, g, h, k) {
          a = cl(c, d, !0, a, e, f, g, h, k);
          a.context = el(null);
          c = a.current;
          d = L();
          e = lh(c);
          f = ch(d, e);
          f.callback = void 0 !== b && null !== b ? b : null;
          dh(c, f, e);
          a.current.lanes = e;
          Ac(a, e, d);
          Ek(a, d);
          return a;
        }
        function gl(a, b, c, d) {
          var e = b.current,
            f = L(),
            g = lh(e);
          c = el(c);
          null === b.context ? b.context = c : b.pendingContext = c;
          b = ch(f, g);
          b.payload = {
            element: a
          };
          d = void 0 === d ? null : d;
          null !== d && (b.callback = d);
          a = dh(e, b, g);
          null !== a && (mh(a, e, g, f), eh(a, e, g));
          return g;
        }
        function hl(a) {
          a = a.current;
          if (!a.child) return null;
          switch (a.child.tag) {
            case 5:
              return a.child.stateNode;
            default:
              return a.child.stateNode;
          }
        }
        function il(a, b) {
          a = a.memoizedState;
          if (null !== a && null !== a.dehydrated) {
            var c = a.retryLane;
            a.retryLane = 0 !== c && c < b ? c : b;
          }
        }
        function jl(a, b) {
          il(a, b);
          (a = a.alternate) && il(a, b);
        }
        function kl() {
          return null;
        }
        var ll = "function" === typeof reportError ? reportError : function (a) {
          console.error(a);
        };
        function ml(a) {
          this._internalRoot = a;
        }
        nl.prototype.render = ml.prototype.render = function (a) {
          var b = this._internalRoot;
          if (null === b) throw Error(p$1(409));
          gl(a, b, null, null);
        };
        nl.prototype.unmount = ml.prototype.unmount = function () {
          var a = this._internalRoot;
          if (null !== a) {
            this._internalRoot = null;
            var b = a.containerInfo;
            Sk(function () {
              gl(null, a, null, null);
            });
            b[uf] = null;
          }
        };
        function nl(a) {
          this._internalRoot = a;
        }
        nl.prototype.unstable_scheduleHydration = function (a) {
          if (a) {
            var b = Hc();
            a = {
              blockedOn: null,
              target: a,
              priority: b
            };
            for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++);
            Qc.splice(c, 0, a);
            0 === c && Vc(a);
          }
        };
        function ol(a) {
          return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
        }
        function pl(a) {
          return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
        }
        function ql() {}
        function rl(a, b, c, d, e) {
          if (e) {
            if ("function" === typeof d) {
              var f = d;
              d = function d() {
                var a = hl(g);
                f.call(a);
              };
            }
            var g = fl(b, d, a, 0, null, !1, !1, "", ql);
            a._reactRootContainer = g;
            a[uf] = g.current;
            sf(8 === a.nodeType ? a.parentNode : a);
            Sk();
            return g;
          }
          for (; e = a.lastChild;) a.removeChild(e);
          if ("function" === typeof d) {
            var h = d;
            d = function d() {
              var a = hl(k);
              h.call(a);
            };
          }
          var k = cl(a, 0, !1, null, null, !1, !1, "", ql);
          a._reactRootContainer = k;
          a[uf] = k.current;
          sf(8 === a.nodeType ? a.parentNode : a);
          Sk(function () {
            gl(b, k, c, d);
          });
          return k;
        }
        function sl(a, b, c, d, e) {
          var f = c._reactRootContainer;
          if (f) {
            var g = f;
            if ("function" === typeof e) {
              var h = e;
              e = function e() {
                var a = hl(g);
                h.call(a);
              };
            }
            gl(b, g, a, e);
          } else g = rl(c, b, a, e, d);
          return hl(g);
        }
        Ec = function Ec(a) {
          switch (a.tag) {
            case 3:
              var b = a.stateNode;
              if (b.current.memoizedState.isDehydrated) {
                var c = tc(b.pendingLanes);
                0 !== c && (Cc(b, c | 1), Ek(b, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
              }
              break;
            case 13:
              Sk(function () {
                var b = Zg(a, 1);
                if (null !== b) {
                  var c = L();
                  mh(b, a, 1, c);
                }
              }), jl(a, 1);
          }
        };
        Fc = function Fc(a) {
          if (13 === a.tag) {
            var b = Zg(a, 134217728);
            if (null !== b) {
              var c = L();
              mh(b, a, 134217728, c);
            }
            jl(a, 134217728);
          }
        };
        Gc = function Gc(a) {
          if (13 === a.tag) {
            var b = lh(a),
              c = Zg(a, b);
            if (null !== c) {
              var d = L();
              mh(c, a, b, d);
            }
            jl(a, b);
          }
        };
        Hc = function Hc() {
          return C;
        };
        Ic = function Ic(a, b) {
          var c = C;
          try {
            return C = a, b();
          } finally {
            C = c;
          }
        };
        yb = function yb(a, b, c) {
          switch (b) {
            case "input":
              bb(a, c);
              b = c.name;
              if ("radio" === c.type && null != b) {
                for (c = a; c.parentNode;) c = c.parentNode;
                c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
                for (b = 0; b < c.length; b++) {
                  var d = c[b];
                  if (d !== a && d.form === a.form) {
                    var e = Db(d);
                    if (!e) throw Error(p$1(90));
                    Wa(d);
                    bb(d, e);
                  }
                }
              }
              break;
            case "textarea":
              ib(a, c);
              break;
            case "select":
              b = c.value, null != b && fb(a, !!c.multiple, b, !1);
          }
        };
        Gb = Rk;
        Hb = Sk;
        var tl = {
            usingClientEntryPoint: !1,
            Events: [Cb, ue, Db, Eb, Fb, Rk]
          },
          ul = {
            findFiberByHostInstance: Wc,
            bundleType: 0,
            version: "18.2.0",
            rendererPackageName: "react-dom"
          };
        var vl = {
          bundleType: ul.bundleType,
          version: ul.version,
          rendererPackageName: ul.rendererPackageName,
          rendererConfig: ul.rendererConfig,
          overrideHookState: null,
          overrideHookStateDeletePath: null,
          overrideHookStateRenamePath: null,
          overrideProps: null,
          overridePropsDeletePath: null,
          overridePropsRenamePath: null,
          setErrorHandler: null,
          setSuspenseHandler: null,
          scheduleUpdate: null,
          currentDispatcherRef: ua.ReactCurrentDispatcher,
          findHostInstanceByFiber: function findHostInstanceByFiber(a) {
            a = Zb(a);
            return null === a ? null : a.stateNode;
          },
          findFiberByHostInstance: ul.findFiberByHostInstance || kl,
          findHostInstancesForRefresh: null,
          scheduleRefresh: null,
          scheduleRoot: null,
          setRefreshHandler: null,
          getCurrentFiber: null,
          reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
        };
        if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
          var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (!wl.isDisabled && wl.supportsFiber) try {
            kc = wl.inject(vl), lc = wl;
          } catch (a) {}
        }
        reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
        reactDom_production_min.createPortal = function (a, b) {
          var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
          if (!ol(b)) throw Error(p$1(200));
          return dl(a, b, null, c);
        };
        reactDom_production_min.createRoot = function (a, b) {
          if (!ol(a)) throw Error(p$1(299));
          var c = !1,
            d = "",
            e = ll;
          null !== b && void 0 !== b && (!0 === b.unstable_strictMode && (c = !0), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
          b = cl(a, 1, !1, null, null, c, !1, d, e);
          a[uf] = b.current;
          sf(8 === a.nodeType ? a.parentNode : a);
          return new ml(b);
        };
        reactDom_production_min.findDOMNode = function (a) {
          if (null == a) return null;
          if (1 === a.nodeType) return a;
          var b = a._reactInternals;
          if (void 0 === b) {
            if ("function" === typeof a.render) throw Error(p$1(188));
            a = Object.keys(a).join(",");
            throw Error(p$1(268, a));
          }
          a = Zb(b);
          a = null === a ? null : a.stateNode;
          return a;
        };
        reactDom_production_min.flushSync = function (a) {
          return Sk(a);
        };
        reactDom_production_min.hydrate = function (a, b, c) {
          if (!pl(b)) throw Error(p$1(200));
          return sl(null, a, b, !0, c);
        };
        reactDom_production_min.hydrateRoot = function (a, b, c) {
          if (!ol(a)) throw Error(p$1(405));
          var d = null != c && c.hydratedSources || null,
            e = !1,
            f = "",
            g = ll;
          null !== c && void 0 !== c && (!0 === c.unstable_strictMode && (e = !0), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
          b = fl(b, null, a, 1, null != c ? c : null, e, !1, f, g);
          a[uf] = b.current;
          sf(a);
          if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(c, e);
          return new nl(b);
        };
        reactDom_production_min.render = function (a, b, c) {
          if (!pl(b)) throw Error(p$1(200));
          return sl(null, a, b, !1, c);
        };
        reactDom_production_min.unmountComponentAtNode = function (a) {
          if (!pl(a)) throw Error(p$1(40));
          return a._reactRootContainer ? (Sk(function () {
            sl(null, null, a, !1, function () {
              a._reactRootContainer = null;
              a[uf] = null;
            });
          }), !0) : !1;
        };
        reactDom_production_min.unstable_batchedUpdates = Rk;
        reactDom_production_min.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
          if (!pl(c)) throw Error(p$1(200));
          if (null == a || void 0 === a._reactInternals) throw Error(p$1(38));
          return sl(a, b, c, !1, d);
        };
        reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
        function checkDCE() {
          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
            return;
          }
          try {
            // Verify that the code above has been dead code eliminated (DCE'd).
            __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
          } catch (err) {
            // DevTools shouldn't crash React, no matter what.
            // We should still report in case we break this code.
            console.error(err);
          }
        }
        {
          // DCE check should happen before ReactDOM bundle executes so that
          // DevTools can report bad minification during injection.
          checkDCE();
          reactDom.exports = reactDom_production_min;
        }
        var reactDomExports = reactDom.exports;
        var ReactDOM = /*@__PURE__*/getDefaultExportFromCjs(reactDomExports);
        var m$1 = reactDomExports;
        {
          client.createRoot = m$1.createRoot;
          client.hydrateRoot = m$1.hydrateRoot;
        }
        var App$1 = '';
        var vaultPasswordLock = function vaultPasswordLock(password) {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("vault action:passwordlock password:".concat(password), function (res) {
              if (!res.status && !res.pending) {
                reject(res.error ? res.error : res.message ? res.message : "Rpc Failed");
              }
              if (res.status && !res.pending) {
                resolve(1);
              }
              if (!res.status && res.pending) {
                resolve(0);
              }
            });
          });
        };
        var vaultPasswordUnlock = function vaultPasswordUnlock(password) {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("vault action:passwordunlock password:".concat(password), function (res) {
              if (!res.status && !res.pending) {
                reject(res.error ? res.error : res.message ? res.message : "Rpc Failed");
              }
              if (res.status && !res.pending) {
                resolve(1);
              }
              if (!res.status && res.pending) {
                resolve(0);
              }
            });
          });
        };
        var isVaultLocked = function isVaultLocked() {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("status", function (response) {
              if (!response.status) reject(response.error ? response.error : "Rpc failed");
              if (response.status) {
                var isLocked = response.response.locked;
                resolve(isLocked);
              }
            });
          });
        };
        var createBackup = function createBackup(filename, password) {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("backup file:\"".concat(filename, "\" password:\"").concat(password.length ? password : "minima", "\""), function (resp) {
              if (!resp.status) reject();
              resolve(resp.backup);
            });
          });
        };
        var restoreFromBackup = function restoreFromBackup(host, filepath, password) {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("restoresync ".concat(host.length ? 'host:"' + host + '"' : "", " file:\"").concat(filepath, "\" password:\"").concat(password.length ? password : "minima", "\""), function (response) {
              if (!response.status) return reject(response.error ? response.error : "Restoring from backup failed, please try again");
              resolve(response);
            });
          });
        };
        function isWriteMode() {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("checkmode", function (response) {
              if (response.status) {
                return resolve(response.response.mode === "WRITE");
              }
              return reject();
            });
          });
        }
        function vault() {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("vault", function (response) {
              if (response.response) {
                return resolve(response.response);
              }
              return reject();
            });
          });
        }
        var importSeedPhrase = function importSeedPhrase(phrase, host) {
          var keyuses = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("archive action:resync phrase:\"".concat(phrase, "\" host:\"").concat(host, "\" keyuses:").concat(keyuses), function (response) {
              if (!response.status) reject(response.error ? response.error : "RPC FAILED");
              resolve(response.response);
            });
          });
        };
        var reset = function reset(archivefile, backupfile, password) {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("reset archivefile:\"".concat(archivefile, "\" action:restore file:\"").concat(backupfile, "\" password:\"").concat(password ? password : "minima", "\""), function (resp) {
              if (!resp.status) {
                var isWrongFileType = resp.response.error && resp.response.error.includes("org.h2.jdbcSQLSyntaxErrorException");
                return reject(isWrongFileType ? "Invalid file type, please make sure this is of type raw.dat" : resp.response.error ? resp.response.error : "Unexpected error");
              }
              resolve(resp);
            });
          });
        };
        var resetChainResync = function resetChainResync(archivefile) {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("reset archivefile:\"".concat(archivefile, "\" action:chainsync"), function (resp) {
              if (!resp.status) {
                var isWrongFileType = resp.response.error && resp.response.error.includes("org.h2.jdbcSQLSyntaxErrorException");
                reject(isWrongFileType ? "Invalid file type, please make sure this is of type raw.dat" : resp.response.error ? resp.response.error : "Unexpected error");
              }
              resolve(resp);
            });
          });
        };
        var resetSeedSync = function resetSeedSync(archivefile, phrase, keyuses) {
          return new Promise(function (resolve, reject) {
            window.MDS.cmd("reset archivefile:\"".concat(archivefile, "\" action:seedsync phrase:\"").concat(phrase, "\" keyuses:\"").concat(keyuses, "\""), function (resp) {
              if (!resp.response.status) {
                var isWrongFileType = resp.response.error && resp.response.error.includes("org.h2.jdbcSQLSyntaxErrorException");
                return reject(isWrongFileType ? "Invalid file type, please make sure this is of type raw.dat" : resp.response.error ? resp.response.error : "Unexpected error");
              }
              resolve(resp);
            });
          });
        };
        var createFolder = function createFolder(folder) {
          return new Promise(function (resolve) {
            window.MDS.file.makedir(folder, function (res) {
              resolve(res);
            });
          });
        };
        var listFiles = function listFiles(path) {
          return new Promise(function (resolve) {
            window.MDS.file.list(path, function (res) {
              resolve(res);
            });
          });
        };
        var saveFileAsBinary = function saveFileAsBinary(fileName, hexString) {
          return new Promise(function (resolve) {
            window.MDS.file.savebinary(fileName, hexString, function (res) {
              resolve(res);
            });
          });
        };
        var getPath = function getPath(filename) {
          return new Promise(function (resolve, reject) {
            window.MDS.file.getpath(filename, function (response) {
              if (response.status) {
                resolve(response.response.getpath.path);
              }
              if (!response.status && !response.pending) {
                reject(response.error ? response.error : "RPC FAILED");
              }
            });
          });
        };
        var toggleBackupStatus = function toggleBackupStatus(status) {
          return new Promise(function (resolve) {
            var backupStatus = {
              active: status
            };
            window.MDS.keypair.set("backupStatus", JSON.stringify(backupStatus), function (response) {
              resolve(response.status);
            });
          });
        };
        var getBackupStatus = function getBackupStatus() {
          return new Promise(function (resolve) {
            window.MDS.keypair.get("backupStatus", function (response) {
              resolve(response);
            });
          });
        };
        var deleteFile = function deleteFile(fileName) {
          return new Promise(function (resolve, reject) {
            window.MDS.file.delete(fileName, function (res) {
              if (res.status) {
                return resolve(res);
              }
              return reject("Failed to delete backup.");
            });
          });
        };
        function blobToArrayBuffer(_x2) {
          return _blobToArrayBuffer.apply(this, arguments);
        }
        function _blobToArrayBuffer() {
          _blobToArrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee62(blob) {
            return _regeneratorRuntime().wrap(function _callee62$(_context62) {
              while (1) switch (_context62.prev = _context62.next) {
                case 0:
                  if (!("arrayBuffer" in blob)) {
                    _context62.next = 4;
                    break;
                  }
                  _context62.next = 3;
                  return blob.arrayBuffer();
                case 3:
                  return _context62.abrupt("return", _context62.sent);
                case 4:
                  return _context62.abrupt("return", new Promise(function (resolve, reject) {
                    var reader = new FileReader();
                    reader.onload = function () {
                      return resolve(reader.result);
                    };
                    reader.onerror = function () {
                      return reject();
                    };
                    reader.readAsArrayBuffer(blob);
                  }));
                case 5:
                case "end":
                  return _context62.stop();
              }
            }, _callee62);
          }));
          return _blobToArrayBuffer.apply(this, arguments);
        }
        function bufferToHex(buffer) {
          return _toConsumableArray(new Uint8Array(buffer)).map(function (b) {
            return b.toString(16).padStart(2, "0");
          }).join("");
        }
        function getAppUID() {
          var url = window.location.href;
          var matches = url.match(/0x([a-z]|[0-9])+/gi);
          if (matches) {
            return matches[0];
          }
          return "unknown-app-uid";
        }
        function sql(query) {
          var singleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          return new Promise(function (resolve, reject) {
            window.MDS.sql(query, function (response) {
              if (response.status) {
                if (response.rows && singleResult) {
                  return resolve(response.rows[0]);
                } else if (response.rows) {
                  return resolve(response.rows);
                }
                return resolve(response.status);
              }
              return reject();
            });
          });
        }
        function formatBytes$1(bytes) {
          var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
          if (!+bytes) return "0 Bytes";
          var k = 1024;
          var dm = decimals < 0 ? 0 : decimals;
          var sizes = ["Bytes", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"];
          var i = Math.floor(Math.log(bytes) / Math.log(k));
          return "".concat(parseFloat((bytes / Math.pow(k, i)).toFixed(dm)), " ").concat(sizes[i]);
        }
        var appContext = reactExports.createContext({});
        var AppProvider = function AppProvider(_ref8) {
          var children = _ref8.children;
          var _reactExports$useStat = reactExports.useState(false),
            _reactExports$useStat2 = _slicedToArray2(_reactExports$useStat, 1),
            displayBackButton = _reactExports$useStat2[0];
          var _reactExports$useStat3 = reactExports.useState({
              display: false,
              to: "/dashboard",
              title: "Security"
            }),
            _reactExports$useStat4 = _slicedToArray2(_reactExports$useStat3, 2),
            backButton = _reactExports$useStat4[0],
            setBackButton = _reactExports$useStat4[1];
          var loaded = reactExports.useRef(false);
          var _reactExports$useStat5 = reactExports.useState(true),
            _reactExports$useStat6 = _slicedToArray2(_reactExports$useStat5, 2),
            showSecurity = _reactExports$useStat6[0],
            setShowSecurity = _reactExports$useStat6[1];
          var _reactExports$useStat7 = reactExports.useState(null),
            _reactExports$useStat8 = _slicedToArray2(_reactExports$useStat7, 2),
            vaultLocked = _reactExports$useStat8[0],
            setVaultLocked = _reactExports$useStat8[1];
          var _reactExports$useStat9 = reactExports.useState([]),
            _reactExports$useStat10 = _slicedToArray2(_reactExports$useStat9, 2),
            logs = _reactExports$useStat10[0],
            setLogs = _reactExports$useStat10[1];
          var _reactExports$useStat11 = reactExports.useState({
              content: null,
              primaryActions: null,
              secondaryActions: null
            }),
            _reactExports$useStat12 = _slicedToArray2(_reactExports$useStat11, 2),
            modal = _reactExports$useStat12[0],
            setModal = _reactExports$useStat12[1];
          var _reactExports$useStat13 = reactExports.useState(null),
            _reactExports$useStat14 = _slicedToArray2(_reactExports$useStat13, 2),
            _vault = _reactExports$useStat14[0],
            setVault = _reactExports$useStat14[1];
          var _reactExports$useStat15 = reactExports.useState({
              1: "",
              2: "",
              3: "",
              4: "",
              5: "",
              6: "",
              7: "",
              8: "",
              9: "",
              10: "",
              11: "",
              12: "",
              13: "",
              14: "",
              15: "",
              16: "",
              17: "",
              18: "",
              19: "",
              20: "",
              21: "",
              22: "",
              23: "",
              24: ""
            }),
            _reactExports$useStat16 = _slicedToArray2(_reactExports$useStat15, 2),
            _phrase = _reactExports$useStat16[0],
            setPhrase = _reactExports$useStat16[1];
          var _reactExports$useStat17 = reactExports.useState([]),
            _reactExports$useStat18 = _slicedToArray2(_reactExports$useStat17, 2),
            _backupLogs = _reactExports$useStat18[0],
            setBackupLogs = _reactExports$useStat18[1];
          var _reactExports$useStat19 = reactExports.useState(false),
            _reactExports$useStat20 = _slicedToArray2(_reactExports$useStat19, 2),
            _promptBackupLogs = _reactExports$useStat20[0],
            setPromptBackupLogs = _reactExports$useStat20[1];
          var _reactExports$useStat21 = reactExports.useState(false),
            _reactExports$useStat22 = _slicedToArray2(_reactExports$useStat21, 2),
            _promptBackups = _reactExports$useStat22[0],
            setPromptBackups = _reactExports$useStat22[1];
          var _reactExports$useStat23 = reactExports.useState(false),
            _reactExports$useStat24 = _slicedToArray2(_reactExports$useStat23, 2),
            _promptArchives = _reactExports$useStat24[0],
            setPromptArchives = _reactExports$useStat24[1];
          var _reactExports$useStat25 = reactExports.useState([]),
            _reactExports$useStat26 = _slicedToArray2(_reactExports$useStat25, 2),
            backups = _reactExports$useStat26[0],
            setBackups = _reactExports$useStat26[1];
          var _reactExports$useStat27 = reactExports.useState(null),
            _reactExports$useStat28 = _slicedToArray2(_reactExports$useStat27, 2),
            appIsInWriteMode = _reactExports$useStat28[0],
            setAppIsInWriteMode = _reactExports$useStat28[1];
          var _reactExports$useStat29 = reactExports.useState(false),
            _reactExports$useStat30 = _slicedToArray2(_reactExports$useStat29, 2),
            _promptFileUpload = _reactExports$useStat30[0],
            setPromptFileUpload = _reactExports$useStat30[1];
          var _reactExports$useStat31 = reactExports.useState(null),
            _reactExports$useStat32 = _slicedToArray2(_reactExports$useStat31, 2),
            minidappSystemFailed = _reactExports$useStat32[0],
            setMinidappSystemFailed = _reactExports$useStat32[1];
          var _reactExports$useStat33 = reactExports.useState(false),
            _reactExports$useStat34 = _slicedToArray2(_reactExports$useStat33, 2),
            shuttingDown = _reactExports$useStat34[0],
            setShuttingDown = _reactExports$useStat34[1];
          var _reactExports$useStat35 = reactExports.useState([]),
            _reactExports$useStat36 = _slicedToArray2(_reactExports$useStat35, 2),
            archives = _reactExports$useStat36[0],
            setArchives = _reactExports$useStat36[1];
          var _reactExports$useStat37 = reactExports.useState("none"),
            _reactExports$useStat38 = _slicedToArray2(_reactExports$useStat37, 2),
            _currentRestoreWindow = _reactExports$useStat38[0],
            setCurrentRestoreWindow = _reactExports$useStat38[1];
          reactExports.useEffect(function () {
            if (loaded && loaded.current) {
              if (vaultLocked) {
                resetVault();
              }
              if (!vaultLocked) {
                fetchVault();
              }
            }
          }, [vaultLocked, loaded]);
          var fetchVault = reactExports.useCallback(function () {
            return vault().then(function (response) {
              setVault(response);
            });
          }, []);
          var resetVault = function resetVault() {
            setVault(null);
          };
          var phraseAsArray = reactExports.useMemo(function () {
            if (!_vault) {
              return [];
            }
            return _vault.phrase.split(" ");
          }, [_vault]);
          var clearPhrase = function clearPhrase() {
            setPhrase({
              1: "",
              2: "",
              3: "",
              4: "",
              5: "",
              6: "",
              7: "",
              8: "",
              9: "",
              10: "",
              11: "",
              12: "",
              13: "",
              14: "",
              15: "",
              16: "",
              17: "",
              18: "",
              19: "",
              20: "",
              21: "",
              22: "",
              23: "",
              24: ""
            });
          };
          var getTimeMilliFromBackupName = function getTimeMilliFromBackupName(name) {
            try {
              var timeMilli = name.split("backup_")[1];
              return parseInt(timeMilli.split("__")[0]);
            } catch (error) {
              return 0;
            }
          };
          var getTimeMilliFromArchiveName = function getTimeMilliFromArchiveName(name) {
            try {
              var timeMilli = name.split("export_")[1];
              return parseInt(timeMilli.split("__")[0]);
            } catch (error) {
              return 0;
            }
          };
          var getBackupLogs = /*#__PURE__*/function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              var autoBackupLogs;
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return sql("SELECT * FROM cache WHERE name = 'BACKUP_LOGS'");
                  case 2:
                    autoBackupLogs = _context.sent;
                    if (autoBackupLogs) {
                      setBackupLogs(JSON.parse(autoBackupLogs.DATA));
                    }
                  case 4:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            return function getBackupLogs() {
              return _ref9.apply(this, arguments);
            };
          }();
          var getBackups = function getBackups() {
            listFiles("/backups").then(function (response) {
              if (response.status) {
                setBackups(response.response.list.sort(function (a, b) {
                  return getTimeMilliFromBackupName(a.name) - getTimeMilliFromBackupName(b.name);
                }).reverse());
              }
            });
          };
          var getArchives = function getArchives() {
            listFiles("/archives").then(function (response) {
              if (response.status) {
                setArchives(response.response.list.sort(function (a, b) {
                  return getTimeMilliFromArchiveName(a.name) - getTimeMilliFromArchiveName(b.name);
                }).reverse());
              }
            });
          };
          var checkVaultLocked = function checkVaultLocked() {
            isVaultLocked().then(function (r) {
              setVaultLocked(r);
            });
          };
          reactExports.useEffect(function () {
            if (!loaded.current) {
              loaded.current = true;
              window.MDS.init(function (msg) {
                if (msg.event === "inited") {
                  vault().then(function (response) {
                    setVault(response);
                  });
                  _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                    var autoBackupLogs;
                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                      while (1) switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return sql("SELECT * FROM cache WHERE name = 'BACKUP_LOGS'");
                        case 2:
                          autoBackupLogs = _context2.sent;
                          if (autoBackupLogs) {
                            setBackupLogs(JSON.parse(autoBackupLogs.DATA));
                          }
                        case 4:
                        case "end":
                          return _context2.stop();
                      }
                    }, _callee2);
                  }))();
                  isWriteMode().then(function (appIsInWriteMode2) {
                    setAppIsInWriteMode(appIsInWriteMode2);
                  });
                  createFolder("backups");
                  createFolder("archives");
                  getBackups();
                  getArchives();
                  checkVaultLocked();
                }
                if (msg.event === "MINIMALOG") {
                  var log = msg.data.message;
                  setLogs(function (prevState) {
                    return [].concat(_toConsumableArray(prevState), [log]);
                  });
                }
                if (msg.event === "MDS_SHUTDOWN") {
                  setShuttingDown(true);
                }
                if (msg.event === "MDSFAIL") {
                  setMinidappSystemFailed(true);
                }
              });
            }
          }, [loaded]);
          var promptBackupLogs = function promptBackupLogs() {
            setPromptBackupLogs(function (prevState) {
              return !prevState;
            });
          };
          var promptBackups = function promptBackups() {
            setPromptBackups(function (prevState) {
              return !prevState;
            });
          };
          var promptArchives = function promptArchives() {
            setPromptArchives(function (prevState) {
              return !prevState;
            });
          };
          var promptFileUpload = function promptFileUpload(progress) {
            setPromptFileUpload(progress);
          };
          return /* @__PURE__ */jsxRuntimeExports.jsx(appContext.Provider, {
            value: {
              loaded: loaded,
              showSecurity: showSecurity,
              setShowSecurity: setShowSecurity,
              modal: modal,
              setModal: setModal,
              vaultLocked: vaultLocked,
              checkVaultLocked: checkVaultLocked,
              logs: logs,
              setLogs: setLogs,
              appIsInWriteMode: appIsInWriteMode,
              minidappSystemFailed: minidappSystemFailed,
              setPhrase: setPhrase,
              clearPhrase: clearPhrase,
              phraseAsArray: phraseAsArray,
              resetVault: resetVault,
              fetchVault: fetchVault,
              // heading back button stuff
              backButton: backButton,
              setBackButton: setBackButton,
              displayBackButton: displayBackButton,
              _promptFileUpload: _promptFileUpload,
              promptFileUpload: promptFileUpload,
              //backups
              _backupLogs: _backupLogs,
              _promptBackupLogs: _promptBackupLogs,
              promptBackupLogs: promptBackupLogs,
              _promptBackups: _promptBackups,
              promptBackups: promptBackups,
              _promptArchives: _promptArchives,
              promptArchives: promptArchives,
              backups: backups,
              getBackups: getBackups,
              getBackupLogs: getBackupLogs,
              //archives
              archives: archives,
              getArchives: getArchives,
              // mds shutting down
              shuttingDown: shuttingDown,
              _currentRestoreWindow: _currentRestoreWindow,
              setCurrentRestoreWindow: setCurrentRestoreWindow
            },
            children: children
          });
        };

        /**
         * @remix-run/router v1.6.2
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */
        function _extends$4() {
          _extends$4 = Object.assign ? Object.assign.bind() : function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends$4.apply(this, arguments);
        }

        ////////////////////////////////////////////////////////////////////////////////
        //#region Types and Constants
        ////////////////////////////////////////////////////////////////////////////////

        /**
         * Actions represent the type of change to a location value.
         */
        var Action;
        (function (Action) {
          /**
           * A POP indicates a change to an arbitrary index in the history stack, such
           * as a back or forward navigation. It does not describe the direction of the
           * navigation, only that the current index changed.
           *
           * Note: This is the default action for newly created history objects.
           */
          Action["Pop"] = "POP";
          /**
           * A PUSH indicates a new entry being added to the history stack, such as when
           * a link is clicked and a new page loads. When this happens, all subsequent
           * entries in the stack are lost.
           */

          Action["Push"] = "PUSH";
          /**
           * A REPLACE indicates the entry at the current index in the history stack
           * being replaced by a new one.
           */

          Action["Replace"] = "REPLACE";
        })(Action || (Action = {}));
        var PopStateEventType = "popstate";
        /**
         * Hash history stores the location in window.location.hash. This makes it ideal
         * for situations where you don't want to send the location to the server for
         * some reason, either because you do cannot configure it or the URL space is
         * reserved for something else.
         *
         * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
         */

        function createHashHistory(options) {
          if (options === void 0) {
            options = {};
          }
          function createHashLocation(window, globalHistory) {
            var _parsePath = parsePath(window.location.hash.substr(1)),
              _parsePath$pathname = _parsePath.pathname,
              pathname = _parsePath$pathname === void 0 ? "/" : _parsePath$pathname,
              _parsePath$search = _parsePath.search,
              search = _parsePath$search === void 0 ? "" : _parsePath$search,
              _parsePath$hash = _parsePath.hash,
              hash = _parsePath$hash === void 0 ? "" : _parsePath$hash;
            return createLocation("", {
              pathname: pathname,
              search: search,
              hash: hash
            },
            // state defaults to `null` because `window.history.state` does
            globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");
          }
          function createHashHref(window, to) {
            var base = window.document.querySelector("base");
            var href = "";
            if (base && base.getAttribute("href")) {
              var url = window.location.href;
              var hashIndex = url.indexOf("#");
              href = hashIndex === -1 ? url : url.slice(0, hashIndex);
            }
            return href + "#" + (typeof to === "string" ? to : createPath(to));
          }
          function validateHashLocation(location, to) {
            warning$1(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
          }
          return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
        }
        function invariant(value, message) {
          if (value === false || value === null || typeof value === "undefined") {
            throw new Error(message);
          }
        }
        function warning$1(cond, message) {
          if (!cond) {
            // eslint-disable-next-line no-console
            if (typeof console !== "undefined") console.warn(message);
            try {
              // Welcome to debugging history!
              //
              // This error is thrown as a convenience so you can more easily
              // find the source for a warning that appears in the console by
              // enabling "pause on exceptions" in your JavaScript debugger.
              throw new Error(message); // eslint-disable-next-line no-empty
            } catch (e) {}
          }
        }
        function createKey() {
          return Math.random().toString(36).substr(2, 8);
        }
        /**
         * For browser-based histories, we combine the state and key into an object
         */

        function getHistoryState(location, index) {
          return {
            usr: location.state,
            key: location.key,
            idx: index
          };
        }
        /**
         * Creates a Location object with a unique key from the given Path
         */

        function createLocation(current, to, state, key) {
          if (state === void 0) {
            state = null;
          }
          var location = _extends$4({
            pathname: typeof current === "string" ? current : current.pathname,
            search: "",
            hash: ""
          }, typeof to === "string" ? parsePath(to) : to, {
            state: state,
            // TODO: This could be cleaned up.  push/replace should probably just take
            // full Locations now and avoid the need to run through this flow at all
            // But that's a pretty big refactor to the current test suite so going to
            // keep as is for the time being and just let any incoming keys take precedence
            key: to && to.key || key || createKey()
          });
          return location;
        }
        /**
         * Creates a string URL path from the given pathname, search, and hash components.
         */

        function createPath(_ref) {
          var _ref$pathname = _ref.pathname,
            pathname = _ref$pathname === void 0 ? "/" : _ref$pathname,
            _ref$search = _ref.search,
            search = _ref$search === void 0 ? "" : _ref$search,
            _ref$hash = _ref.hash,
            hash = _ref$hash === void 0 ? "" : _ref$hash;
          if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
          if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
          return pathname;
        }
        /**
         * Parses a string URL path into its separate pathname, search, and hash components.
         */

        function parsePath(path) {
          var parsedPath = {};
          if (path) {
            var hashIndex = path.indexOf("#");
            if (hashIndex >= 0) {
              parsedPath.hash = path.substr(hashIndex);
              path = path.substr(0, hashIndex);
            }
            var searchIndex = path.indexOf("?");
            if (searchIndex >= 0) {
              parsedPath.search = path.substr(searchIndex);
              path = path.substr(0, searchIndex);
            }
            if (path) {
              parsedPath.pathname = path;
            }
          }
          return parsedPath;
        }
        function getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {
          if (options === void 0) {
            options = {};
          }
          var _options2 = options,
            _options2$window = _options2.window,
            window = _options2$window === void 0 ? document.defaultView : _options2$window,
            _options2$v5Compat = _options2.v5Compat,
            v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;
          var globalHistory = window.history;
          var action = Action.Pop;
          var listener = null;
          var index = getIndex(); // Index should only be null when we initialize. If not, it's because the
          // user called history.pushState or history.replaceState directly, in which
          // case we should log a warning as it will result in bugs.

          if (index == null) {
            index = 0;
            globalHistory.replaceState(_extends$4({}, globalHistory.state, {
              idx: index
            }), "");
          }
          function getIndex() {
            var state = globalHistory.state || {
              idx: null
            };
            return state.idx;
          }
          function handlePop() {
            action = Action.Pop;
            var nextIndex = getIndex();
            var delta = nextIndex == null ? null : nextIndex - index;
            index = nextIndex;
            if (listener) {
              listener({
                action: action,
                location: history.location,
                delta: delta
              });
            }
          }
          function push(to, state) {
            action = Action.Push;
            var location = createLocation(history.location, to, state);
            if (validateLocation) validateLocation(location, to);
            index = getIndex() + 1;
            var historyState = getHistoryState(location, index);
            var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/

            try {
              globalHistory.pushState(historyState, "", url);
            } catch (error) {
              // They are going to lose state here, but there is no real
              // way to warn them about it since the page will refresh...
              window.location.assign(url);
            }
            if (v5Compat && listener) {
              listener({
                action: action,
                location: history.location,
                delta: 1
              });
            }
          }
          function replace(to, state) {
            action = Action.Replace;
            var location = createLocation(history.location, to, state);
            if (validateLocation) validateLocation(location, to);
            index = getIndex();
            var historyState = getHistoryState(location, index);
            var url = history.createHref(location);
            globalHistory.replaceState(historyState, "", url);
            if (v5Compat && listener) {
              listener({
                action: action,
                location: history.location,
                delta: 0
              });
            }
          }
          function createURL(to) {
            // window.location.origin is "null" (the literal string value) in Firefox
            // under certain conditions, notably when serving from a local HTML file
            // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297
            var base = window.location.origin !== "null" ? window.location.origin : window.location.href;
            var href = typeof to === "string" ? to : createPath(to);
            invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
            return new URL(href, base);
          }
          var history = {
            get action() {
              return action;
            },
            get location() {
              return getLocation(window, globalHistory);
            },
            listen: function listen(fn) {
              if (listener) {
                throw new Error("A history only accepts one active listener");
              }
              window.addEventListener(PopStateEventType, handlePop);
              listener = fn;
              return function () {
                window.removeEventListener(PopStateEventType, handlePop);
                listener = null;
              };
            },
            createHref: function createHref(to) {
              return _createHref(window, to);
            },
            createURL: createURL,
            encodeLocation: function encodeLocation(to) {
              // Encode a Location the same way window.location would
              var url = createURL(to);
              return {
                pathname: url.pathname,
                search: url.search,
                hash: url.hash
              };
            },
            push: push,
            replace: replace,
            go: function go(n) {
              return globalHistory.go(n);
            }
          };
          return history;
        } //#endregion

        var ResultType;
        (function (ResultType) {
          ResultType["data"] = "data";
          ResultType["deferred"] = "deferred";
          ResultType["redirect"] = "redirect";
          ResultType["error"] = "error";
        })(ResultType || (ResultType = {}));
        var immutableRouteKeys = new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
        function isIndexRoute(route) {
          return route.index === true;
        } // Walk the route tree generating unique IDs where necessary so we are working
        // solely with AgnosticDataRouteObject's within the Router

        function convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {
          if (parentPath === void 0) {
            parentPath = [];
          }
          if (manifest === void 0) {
            manifest = {};
          }
          return routes.map(function (route, index) {
            var treePath = [].concat(_toConsumableArray(parentPath), [index]);
            var id = typeof route.id === "string" ? route.id : treePath.join("-");
            invariant(route.index !== true || !route.children, "Cannot specify children on an index route");
            invariant(!manifest[id], "Found a route id collision on id \"" + id + "\".  Route " + "id's must be globally unique within Data Router usages");
            if (isIndexRoute(route)) {
              var indexRoute = _extends$4({}, route, mapRouteProperties(route), {
                id: id
              });
              manifest[id] = indexRoute;
              return indexRoute;
            } else {
              var pathOrLayoutRoute = _extends$4({}, route, mapRouteProperties(route), {
                id: id,
                children: undefined
              });
              manifest[id] = pathOrLayoutRoute;
              if (route.children) {
                pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);
              }
              return pathOrLayoutRoute;
            }
          });
        }
        /**
         * Matches the given routes to a location and returns the match data.
         *
         * @see https://reactrouter.com/utils/match-routes
         */

        function matchRoutes(routes, locationArg, basename) {
          if (basename === void 0) {
            basename = "/";
          }
          var location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
          var pathname = stripBasename(location.pathname || "/", basename);
          if (pathname == null) {
            return null;
          }
          var branches = flattenRoutes(routes);
          rankRouteBranches(branches);
          var matches = null;
          for (var i = 0; matches == null && i < branches.length; ++i) {
            matches = matchRouteBranch(branches[i],
            // Incoming pathnames are generally encoded from either window.location
            // or from router.navigate, but we want to match against the unencoded
            // paths in the route definitions.  Memory router locations won't be
            // encoded here but there also shouldn't be anything to decode so this
            // should be a safe operation.  This avoids needing matchRoutes to be
            // history-aware.
            safelyDecodeURI(pathname));
          }
          return matches;
        }
        function flattenRoutes(routes, branches, parentsMeta, parentPath) {
          if (branches === void 0) {
            branches = [];
          }
          if (parentsMeta === void 0) {
            parentsMeta = [];
          }
          if (parentPath === void 0) {
            parentPath = "";
          }
          var flattenRoute = function flattenRoute(route, index, relativePath) {
            var meta = {
              relativePath: relativePath === undefined ? route.path || "" : relativePath,
              caseSensitive: route.caseSensitive === true,
              childrenIndex: index,
              route: route
            };
            if (meta.relativePath.startsWith("/")) {
              invariant(meta.relativePath.startsWith(parentPath), "Absolute route path \"" + meta.relativePath + "\" nested under path " + ("\"" + parentPath + "\" is not valid. An absolute child route path ") + "must start with the combined path of all its parent routes.");
              meta.relativePath = meta.relativePath.slice(parentPath.length);
            }
            var path = joinPaths([parentPath, meta.relativePath]);
            var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the
            // route tree depth-first and child routes appear before their parents in
            // the "flattened" version.

            if (route.children && route.children.length > 0) {
              invariant(
              // Our types know better, but runtime JS may not!
              // @ts-expect-error
              route.index !== true, "Index routes must not have child routes. Please remove " + ("all child routes from route path \"" + path + "\"."));
              flattenRoutes(route.children, branches, routesMeta, path);
            } // Routes without a path shouldn't ever match by themselves unless they are
            // index routes, so don't add them to the list of possible branches.

            if (route.path == null && !route.index) {
              return;
            }
            branches.push({
              path: path,
              score: computeScore(path, route.index),
              routesMeta: routesMeta
            });
          };
          routes.forEach(function (route, index) {
            var _route$path;

            // coarse-grain check for optional params
            if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
              flattenRoute(route, index);
            } else {
              var _iterator5 = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),
                _step4;
              try {
                for (_iterator5.s(); !(_step4 = _iterator5.n()).done;) {
                  var exploded = _step4.value;
                  flattenRoute(route, index, exploded);
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
            }
          });
          return branches;
        }
        /**
         * Computes all combinations of optional path segments for a given path,
         * excluding combinations that are ambiguous and of lower priority.
         *
         * For example, `/one/:two?/three/:four?/:five?` explodes to:
         * - `/one/three`
         * - `/one/:two/three`
         * - `/one/three/:four`
         * - `/one/three/:five`
         * - `/one/:two/three/:four`
         * - `/one/:two/three/:five`
         * - `/one/three/:four/:five`
         * - `/one/:two/three/:four/:five`
         */

        function explodeOptionalSegments(path) {
          var segments = path.split("/");
          if (segments.length === 0) return [];
          var _segments = _toArray(segments),
            first = _segments[0],
            rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`

          var isOptional = first.endsWith("?"); // Compute the corresponding required segment: `foo?` -> `foo`

          var required = first.replace(/\?$/, "");
          if (rest.length === 0) {
            // Intepret empty string as omitting an optional segment
            // `["one", "", "three"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`
            return isOptional ? [required, ""] : [required];
          }
          var restExploded = explodeOptionalSegments(rest.join("/"));
          var result = []; // All child paths with the prefix.  Do this for all children before the
          // optional version for all children so we get consistent ordering where the
          // parent optional aspect is preferred as required.  Otherwise, we can get
          // child sections interspersed where deeper optional segments are higher than
          // parent optional segments, where for example, /:two would explodes _earlier_
          // then /:one.  By always including the parent as required _for all children_
          // first, we avoid this issue

          result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {
            return subpath === "" ? required : [required, subpath].join("/");
          }))); // Then if this is an optional value, add all child versions without

          if (isOptional) {
            result.push.apply(result, _toConsumableArray(restExploded));
          } // for absolute paths, ensure `/` instead of empty segment

          return result.map(function (exploded) {
            return path.startsWith("/") && exploded === "" ? "/" : exploded;
          });
        }
        function rankRouteBranches(branches) {
          branches.sort(function (a, b) {
            return a.score !== b.score ? b.score - a.score // Higher score first
            : compareIndexes(a.routesMeta.map(function (meta) {
              return meta.childrenIndex;
            }), b.routesMeta.map(function (meta) {
              return meta.childrenIndex;
            }));
          });
        }
        var paramRe = /^:\w+$/;
        var dynamicSegmentValue = 3;
        var indexRouteValue = 2;
        var emptySegmentValue = 1;
        var staticSegmentValue = 10;
        var splatPenalty = -2;
        var isSplat = function isSplat(s) {
          return s === "*";
        };
        function computeScore(path, index) {
          var segments = path.split("/");
          var initialScore = segments.length;
          if (segments.some(isSplat)) {
            initialScore += splatPenalty;
          }
          if (index) {
            initialScore += indexRouteValue;
          }
          return segments.filter(function (s) {
            return !isSplat(s);
          }).reduce(function (score, segment) {
            return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue);
          }, initialScore);
        }
        function compareIndexes(a, b) {
          var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {
            return n === b[i];
          });
          return siblings ?
          // If two routes are siblings, we should try to match the earlier sibling
          // first. This allows people to have fine-grained control over the matching
          // behavior by simply putting routes with identical paths in the order they
          // want them tried.
          a[a.length - 1] - b[b.length - 1] :
          // Otherwise, it doesn't really make sense to rank non-siblings by index,
          // so they sort equally.
          0;
        }
        function matchRouteBranch(branch, pathname) {
          var routesMeta = branch.routesMeta;
          var matchedParams = {};
          var matchedPathname = "/";
          var matches = [];
          for (var i = 0; i < routesMeta.length; ++i) {
            var _meta = routesMeta[i];
            var end = i === routesMeta.length - 1;
            var remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
            var _match = matchPath({
              path: _meta.relativePath,
              caseSensitive: _meta.caseSensitive,
              end: end
            }, remainingPathname);
            if (!_match) return null;
            Object.assign(matchedParams, _match.params);
            var route = _meta.route;
            matches.push({
              // TODO: Can this as be avoided?
              params: matchedParams,
              pathname: joinPaths([matchedPathname, _match.pathname]),
              pathnameBase: normalizePathname(joinPaths([matchedPathname, _match.pathnameBase])),
              route: route
            });
            if (_match.pathnameBase !== "/") {
              matchedPathname = joinPaths([matchedPathname, _match.pathnameBase]);
            }
          }
          return matches;
        }
        /**
         * Performs pattern matching on a URL pathname and returns information about
         * the match.
         *
         * @see https://reactrouter.com/utils/match-path
         */

        function matchPath(pattern, pathname) {
          if (typeof pattern === "string") {
            pattern = {
              path: pattern,
              caseSensitive: false,
              end: true
            };
          }
          var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),
            _compilePath2 = _slicedToArray2(_compilePath, 2),
            matcher = _compilePath2[0],
            paramNames = _compilePath2[1];
          var match = pathname.match(matcher);
          if (!match) return null;
          var matchedPathname = match[0];
          var pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
          var captureGroups = match.slice(1);
          var params = paramNames.reduce(function (memo, paramName, index) {
            // We need to compute the pathnameBase here using the raw splat value
            // instead of using params["*"] later because it will be decoded then
            if (paramName === "*") {
              var splatValue = captureGroups[index] || "";
              pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
            }
            memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || "", paramName);
            return memo;
          }, {});
          return {
            params: params,
            pathname: matchedPathname,
            pathnameBase: pathnameBase,
            pattern: pattern
          };
        }
        function compilePath(path, caseSensitive, end) {
          if (caseSensitive === void 0) {
            caseSensitive = false;
          }
          if (end === void 0) {
            end = true;
          }
          warning$1(path === "*" || !path.endsWith("*") || path.endsWith("/*"), "Route path \"" + path + "\" will be treated as if it were " + ("\"" + path.replace(/\*$/, "/*") + "\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \"" + path.replace(/\*$/, "/*") + "\"."));
          var paramNames = [];
          var regexpSource = "^" + path.replace(/\/*\*?$/, "") // Ignore trailing / and /*, we'll handle it below
          .replace(/^\/*/, "/") // Make sure it has a leading /
          .replace(/[\\.*+^$?{}|()[\]]/g, "\\$&") // Escape special regex chars
          .replace(/\/:(\w+)/g, function (_, paramName) {
            paramNames.push(paramName);
            return "/([^\\/]+)";
          });
          if (path.endsWith("*")) {
            paramNames.push("*");
            regexpSource += path === "*" || path === "/*" ? "(.*)$" // Already matched the initial /, just match the rest
            : "(?:\\/(.+)|\\/*)$"; // Don't include the / in params["*"]
          } else if (end) {
            // When matching to the end, ignore trailing slashes
            regexpSource += "\\/*$";
          } else if (path !== "" && path !== "/") {
            // If our path is non-empty and contains anything beyond an initial slash,
            // then we have _some_ form of path in our regex so we should expect to
            // match only if we find the end of this path segment.  Look for an optional
            // non-captured trailing slash (to match a portion of the URL) or the end
            // of the path (if we've matched to the end).  We used to do this with a
            // word boundary but that gives false positives on routes like
            // /user-preferences since `-` counts as a word boundary.
            regexpSource += "(?:(?=\\/|$))";
          } else ;
          var matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");
          return [matcher, paramNames];
        }
        function safelyDecodeURI(value) {
          try {
            return decodeURI(value);
          } catch (error) {
            warning$1(false, "The URL path \"" + value + "\" could not be decoded because it is is a " + "malformed URL segment. This is probably due to a bad percent " + ("encoding (" + error + ")."));
            return value;
          }
        }
        function safelyDecodeURIComponent(value, paramName) {
          try {
            return decodeURIComponent(value);
          } catch (error) {
            warning$1(false, "The value for the URL param \"" + paramName + "\" will not be decoded because" + (" the string \"" + value + "\" is a malformed URL segment. This is probably") + (" due to a bad percent encoding (" + error + ")."));
            return value;
          }
        }
        /**
         * @private
         */

        function stripBasename(pathname, basename) {
          if (basename === "/") return pathname;
          if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
            return null;
          } // We want to leave trailing slash behavior in the user's control, so if they
          // specify a basename with a trailing slash, we should support it

          var startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
          var nextChar = pathname.charAt(startIndex);
          if (nextChar && nextChar !== "/") {
            // pathname does not start with basename/
            return null;
          }
          return pathname.slice(startIndex) || "/";
        }
        /**
         * Returns a resolved path object relative to the given pathname.
         *
         * @see https://reactrouter.com/utils/resolve-path
         */

        function resolvePath(to, fromPathname) {
          if (fromPathname === void 0) {
            fromPathname = "/";
          }
          var _ref11 = typeof to === "string" ? parsePath(to) : to,
            toPathname = _ref11.pathname,
            _ref11$search = _ref11.search,
            search = _ref11$search === void 0 ? "" : _ref11$search,
            _ref11$hash = _ref11.hash,
            hash = _ref11$hash === void 0 ? "" : _ref11$hash;
          var pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
          return {
            pathname: pathname,
            search: normalizeSearch(search),
            hash: normalizeHash(hash)
          };
        }
        function resolvePathname(relativePath, fromPathname) {
          var segments = fromPathname.replace(/\/+$/, "").split("/");
          var relativeSegments = relativePath.split("/");
          relativeSegments.forEach(function (segment) {
            if (segment === "..") {
              // Keep the root "" segment so the pathname starts at /
              if (segments.length > 1) segments.pop();
            } else if (segment !== ".") {
              segments.push(segment);
            }
          });
          return segments.length > 1 ? segments.join("/") : "/";
        }
        function getInvalidPathError(char, field, dest, path) {
          return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + "a string in <Link to=\"...\"> and the router will parse it for you.";
        }
        /**
         * @private
         *
         * When processing relative navigation we want to ignore ancestor routes that
         * do not contribute to the path, such that index/pathless layout routes don't
         * interfere.
         *
         * For example, when moving a route element into an index route and/or a
         * pathless layout route, relative link behavior contained within should stay
         * the same.  Both of the following examples should link back to the root:
         *
         *   <Route path="/">
         *     <Route path="accounts" element={<Link to=".."}>
         *   </Route>
         *
         *   <Route path="/">
         *     <Route path="accounts">
         *       <Route element={<AccountsLayout />}>       // <-- Does not contribute
         *         <Route index element={<Link to=".."} />  // <-- Does not contribute
         *       </Route
         *     </Route>
         *   </Route>
         */

        function getPathContributingMatches(matches) {
          return matches.filter(function (match, index) {
            return index === 0 || match.route.path && match.route.path.length > 0;
          });
        }
        /**
         * @private
         */

        function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
          if (isPathRelative === void 0) {
            isPathRelative = false;
          }
          var to;
          if (typeof toArg === "string") {
            to = parsePath(toArg);
          } else {
            to = _extends$4({}, toArg);
            invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
            invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
            invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
          }
          var isEmptyPath = toArg === "" || to.pathname === "";
          var toPathname = isEmptyPath ? "/" : to.pathname;
          var from; // Routing is relative to the current pathname if explicitly requested.
          //
          // If a pathname is explicitly provided in `to`, it should be relative to the
          // route context. This is explained in `Note on `<Link to>` values` in our
          // migration guide from v5 as a means of disambiguation between `to` values
          // that begin with `/` and those that do not. However, this is problematic for
          // `to` values that do not provide a pathname. `to` can simply be a search or
          // hash string, in which case we should assume that the navigation is relative
          // to the current location's pathname and *not* the route pathname.

          if (isPathRelative || toPathname == null) {
            from = locationPathname;
          } else {
            var routePathnameIndex = routePathnames.length - 1;
            if (toPathname.startsWith("..")) {
              var toSegments = toPathname.split("/"); // Each leading .. segment means "go up one route" instead of "go up one
              // URL segment".  This is a key difference from how <a href> works and a
              // major reason we call this a "to" value instead of a "href".

              while (toSegments[0] === "..") {
                toSegments.shift();
                routePathnameIndex -= 1;
              }
              to.pathname = toSegments.join("/");
            } // If there are more ".." segments than parent routes, resolve relative to
            // the root / URL.

            from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
          }
          var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original "to" had one

          var hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/"); // Or if this was a link to the current path which has a trailing slash

          var hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
          if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
            path.pathname += "/";
          }
          return path;
        }
        /**
         * @private
         */

        var joinPaths = function joinPaths(paths) {
          return paths.join("/").replace(/\/\/+/g, "/");
        };
        /**
         * @private
         */

        var normalizePathname = function normalizePathname(pathname) {
          return pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
        };
        /**
         * @private
         */

        var normalizeSearch = function normalizeSearch(search) {
          return !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
        };
        /**
         * @private
         */

        var normalizeHash = function normalizeHash(hash) {
          return !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
        };
        /**
         * @private
         * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies
         */
        var ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {
          _classCallCheck(this, ErrorResponse);
          if (internal === void 0) {
            internal = false;
          }
          this.status = status;
          this.statusText = statusText || "";
          this.internal = internal;
          if (data instanceof Error) {
            this.data = data.toString();
            this.error = data;
          } else {
            this.data = data;
          }
        });
        /**
         * Check if the given error is an ErrorResponse generated from a 4xx/5xx
         * Response thrown from an action/loader
         */
        function isRouteErrorResponse(error) {
          return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
        }
        var validMutationMethodsArr = ["post", "put", "patch", "delete"];
        var validMutationMethods = new Set(validMutationMethodsArr);
        var validRequestMethodsArr = ["get"].concat(validMutationMethodsArr);
        var validRequestMethods = new Set(validRequestMethodsArr);
        var redirectStatusCodes = new Set([301, 302, 303, 307, 308]);
        var redirectPreserveMethodStatusCodes = new Set([307, 308]);
        var IDLE_NAVIGATION = {
          state: "idle",
          location: undefined,
          formMethod: undefined,
          formAction: undefined,
          formEncType: undefined,
          formData: undefined
        };
        var IDLE_FETCHER = {
          state: "idle",
          data: undefined,
          formMethod: undefined,
          formAction: undefined,
          formEncType: undefined,
          formData: undefined
        };
        var IDLE_BLOCKER = {
          state: "unblocked",
          proceed: undefined,
          reset: undefined,
          location: undefined
        };
        var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
        var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
        var isServer = !isBrowser;
        var defaultMapRouteProperties = function defaultMapRouteProperties(route) {
          return {
            hasErrorBoundary: Boolean(route.hasErrorBoundary)
          };
        }; //#endregion
        ////////////////////////////////////////////////////////////////////////////////
        //#region createRouter
        ////////////////////////////////////////////////////////////////////////////////

        /**
         * Create a router and listen to history POP navigations
         */

        function createRouter(init) {
          invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
          var mapRouteProperties;
          if (init.mapRouteProperties) {
            mapRouteProperties = init.mapRouteProperties;
          } else if (init.detectErrorBoundary) {
            // If they are still using the deprecated version, wrap it with the new API
            var detectErrorBoundary = init.detectErrorBoundary;
            mapRouteProperties = function mapRouteProperties(route) {
              return {
                hasErrorBoundary: detectErrorBoundary(route)
              };
            };
          } else {
            mapRouteProperties = defaultMapRouteProperties;
          } // Routes keyed by ID

          var manifest = {}; // Routes in tree format for matching

          var dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);
          var inFlightDataRoutes;
          var basename = init.basename || "/"; // Config driven behavior flags

          var future = _extends$4({
            v7_normalizeFormMethod: false,
            v7_prependBasename: false
          }, init.future); // Cleanup function for history

          var unlistenHistory = null; // Externally-provided functions to call on all state changes

          var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing

          var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys

          var getScrollRestorationKey = null; // Externally-provided function to get current scroll position

          var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because
          // we don't get the saved positions from <ScrollRestoration /> until _after_
          // the initial render, we need to manually trigger a separate updateState to
          // send along the restoreScrollPosition
          // Set to true if we have `hydrationData` since we assume we were SSR'd and that
          // SSR did the initial scroll restoration.

          var initialScrollRestored = init.hydrationData != null;
          var initialMatches = matchRoutes(dataRoutes, init.history.location, basename);
          var initialErrors = null;
          if (initialMatches == null) {
            // If we do not match a user-provided-route, fall back to the root
            // to allow the error boundary to take over
            var error = getInternalRouterError(404, {
              pathname: init.history.location.pathname
            });
            var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),
              matches = _getShortCircuitMatch.matches,
              route = _getShortCircuitMatch.route;
            initialMatches = matches;
            initialErrors = _defineProperty2({}, route.id, error);
          }
          var initialized =
          // All initialMatches need to be loaded before we're ready.  If we have lazy
          // functions around still then we'll need to run them in initialize()
          !initialMatches.some(function (m) {
            return m.route.lazy;
          }) && (
          // And we have to either have no loaders or have been provided hydrationData
          !initialMatches.some(function (m) {
            return m.route.loader;
          }) || init.hydrationData != null);
          var router;
          var state = {
            historyAction: init.history.action,
            location: init.history.location,
            matches: initialMatches,
            initialized: initialized,
            navigation: IDLE_NAVIGATION,
            // Don't restore on initial updateState() if we were SSR'd
            restoreScrollPosition: init.hydrationData != null ? false : null,
            preventScrollReset: false,
            revalidation: "idle",
            loaderData: init.hydrationData && init.hydrationData.loaderData || {},
            actionData: init.hydrationData && init.hydrationData.actionData || null,
            errors: init.hydrationData && init.hydrationData.errors || initialErrors,
            fetchers: new Map(),
            blockers: new Map()
          }; // -- Stateful internal variables to manage navigations --
          // Current navigation in progress (to be committed in completeNavigation)

          var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot
          // be restored?

          var pendingPreventScrollReset = false; // AbortController for the active navigation

          var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a
          // revalidation is entirely uninterrupted

          var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:
          //  - submissions (completed or interrupted)
          //  - useRevalidator()
          //  - X-Remix-Revalidate (from redirect)

          var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due
          // to a cancelled deferred on action submission

          var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an
          // action navigation and require revalidation

          var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers

          var fetchControllers = new Map(); // Track loads based on the order in which they started

          var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against
          // the globally incrementing load when a fetcher load lands after a completed
          // navigation

          var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions

          var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations

          var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers

          var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a
          // route loader returns defer() we stick one in here.  Then, when a nested
          // promise resolves we update loaderData.  If a new navigation starts we
          // cancel active deferreds for eliminated routes.

          var activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since
          // we don't need to update UI state if they change

          var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on
          // a POP navigation that was blocked by the user without touching router state

          var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.
          // Implemented as a Fluent API for ease of:
          //   let router = createRouter(init).initialize();

          function initialize() {
            // If history informs us of a POP navigation, start the navigation but do not update
            // state.  We'll update our own state once the navigation completes
            unlistenHistory = init.history.listen(function (_ref) {
              var historyAction = _ref.action,
                location = _ref.location,
                delta = _ref.delta;

              // Ignore this event if it was just us resetting the URL from a
              // blocked POP navigation
              if (ignoreNextHistoryUpdate) {
                ignoreNextHistoryUpdate = false;
                return;
              }
              warning$1(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location " + "that was not created by @remix-run/router. This will fail silently in " + "production. This can happen if you are navigating outside the router " + "via `window.history.pushState`/`window.location.hash` instead of using " + "router navigation APIs.  This can also happen if you are using " + "createHashRouter and the user manually changes the URL.");
              var blockerKey = shouldBlockNavigation({
                currentLocation: state.location,
                nextLocation: location,
                historyAction: historyAction
              });
              if (blockerKey && delta != null) {
                // Restore the URL to match the current UI, but don't update router state
                ignoreNextHistoryUpdate = true;
                init.history.go(delta * -1); // Put the blocker into a blocked state

                updateBlocker(blockerKey, {
                  state: "blocked",
                  location: location,
                  proceed: function proceed() {
                    updateBlocker(blockerKey, {
                      state: "proceeding",
                      proceed: undefined,
                      reset: undefined,
                      location: location
                    }); // Re-do the same POP navigation we just blocked

                    init.history.go(delta);
                  },
                  reset: function reset() {
                    deleteBlocker(blockerKey);
                    updateState({
                      blockers: new Map(router.state.blockers)
                    });
                  }
                });
                return;
              }
              return startNavigation(historyAction, location);
            }); // Kick off initial data load if needed.  Use Pop to avoid modifying history
            // Note we don't do any handling of lazy here.  For SPA's it'll get handled
            // in the normal navigation flow.  For SSR it's expected that lazy modules are
            // resolved prior to router creation since we can't go into a fallbackElement
            // UI for SSR'd apps

            if (!state.initialized) {
              startNavigation(Action.Pop, state.location);
            }
            return router;
          } // Clean up a router and it's side effects

          function dispose() {
            if (unlistenHistory) {
              unlistenHistory();
            }
            subscribers.clear();
            pendingNavigationController && pendingNavigationController.abort();
            state.fetchers.forEach(function (_, key) {
              return deleteFetcher(key);
            });
            state.blockers.forEach(function (_, key) {
              return deleteBlocker(key);
            });
          } // Subscribe to state updates for the router

          function subscribe(fn) {
            subscribers.add(fn);
            return function () {
              return subscribers.delete(fn);
            };
          } // Update our state and notify the calling context of the change

          function updateState(newState) {
            state = _extends$4({}, state, newState);
            subscribers.forEach(function (subscriber) {
              return subscriber(state);
            });
          } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION
          // and setting state.[historyAction/location/matches] to the new route.
          // - Location is a required param
          // - Navigation will always be set to IDLE_NAVIGATION
          // - Can pass any other state in newState

          function completeNavigation(location, newState) {
            var _location$state, _location$state2;

            // Deduce if we're in a loading/actionReload state:
            // - We have committed actionData in the store
            // - The current navigation was a mutation submission
            // - We're past the submitting state and into the loading state
            // - The location being loaded is not the result of a redirect
            var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;
            var actionData;
            if (newState.actionData) {
              if (Object.keys(newState.actionData).length > 0) {
                actionData = newState.actionData;
              } else {
                // Empty actionData -> clear prior actionData due to an action error
                actionData = null;
              }
            } else if (isActionReload) {
              // Keep the current data if we're wrapping up the action reload
              actionData = state.actionData;
            } else {
              // Clear actionData on any other completed navigations
              actionData = null;
            } // Always preserve any existing loaderData from re-used routes

            var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers
            // so we can start fresh
            var _iterator6 = _createForOfIteratorHelper(blockerFunctions),
              _step5;
            try {
              for (_iterator6.s(); !(_step5 = _iterator6.n()).done;) {
                var _step5$value = _slicedToArray2(_step5.value, 1),
                  key = _step5$value[0];
                deleteBlocker(key);
              } // Always respect the user flag.  Otherwise don't reset on mutation
              // submission navigations unless they redirect
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
            var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
            if (inFlightDataRoutes) {
              dataRoutes = inFlightDataRoutes;
              inFlightDataRoutes = undefined;
            }
            updateState(_extends$4({}, newState, {
              actionData: actionData,
              loaderData: loaderData,
              historyAction: pendingAction,
              location: location,
              initialized: true,
              navigation: IDLE_NAVIGATION,
              revalidation: "idle",
              restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
              preventScrollReset: preventScrollReset,
              blockers: new Map(state.blockers)
            }));
            if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {
              init.history.push(location, location.state);
            } else if (pendingAction === Action.Replace) {
              init.history.replace(location, location.state);
            } // Reset stateful navigation vars

            pendingAction = Action.Pop;
            pendingPreventScrollReset = false;
            isUninterruptedRevalidation = false;
            isRevalidationRequired = false;
            cancelledDeferredRoutes = [];
            cancelledFetcherLoads = [];
          } // Trigger a navigation event, which can either be a numerical POP or a PUSH
          // replace with an optional submission
          function navigate(_x3, _x4) {
            return _navigate.apply(this, arguments);
          } // Revalidate all current loaders.  If a navigation is in progress or if this
          // is interrupted by a navigation, allow this to "succeed" by calling all
          // loaders during the next loader round
          function _navigate() {
            _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(to, opts) {
              var normalizedPath, _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;
              return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                while (1) switch (_context3.prev = _context3.next) {
                  case 0:
                    if (!(typeof to === "number")) {
                      _context3.next = 3;
                      break;
                    }
                    init.history.go(to);
                    return _context3.abrupt("return");
                  case 3:
                    normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
                    _normalizeNavigateOpt2 = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;
                    currentLocation = state.location;
                    nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded
                    // URL from window.location, so we need to encode it here so the behavior
                    // remains the same as POP and non-data-router usages.  new URL() does all
                    // the same encoding we'd get from a history.pushState/window.location read
                    // without having to touch history
                    nextLocation = _extends$4({}, nextLocation, init.history.encodeLocation(nextLocation));
                    userReplace = opts && opts.replace != null ? opts.replace : undefined;
                    historyAction = Action.Push;
                    if (userReplace === true) {
                      historyAction = Action.Replace;
                    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
                      // By default on submissions to the current location we REPLACE so that
                      // users don't have to double-click the back button to get to the prior
                      // location.  If the user redirects to a different location from the
                      // action/loader this will be ignored and the redirect will be a PUSH
                      historyAction = Action.Replace;
                    }
                    preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : undefined;
                    blockerKey = shouldBlockNavigation({
                      currentLocation: currentLocation,
                      nextLocation: nextLocation,
                      historyAction: historyAction
                    });
                    if (!blockerKey) {
                      _context3.next = 16;
                      break;
                    }
                    // Put the blocker into a blocked state
                    updateBlocker(blockerKey, {
                      state: "blocked",
                      location: nextLocation,
                      proceed: function proceed() {
                        updateBlocker(blockerKey, {
                          state: "proceeding",
                          proceed: undefined,
                          reset: undefined,
                          location: nextLocation
                        }); // Send the same navigation through

                        navigate(to, opts);
                      },
                      reset: function reset() {
                        deleteBlocker(blockerKey);
                        updateState({
                          blockers: new Map(state.blockers)
                        });
                      }
                    });
                    return _context3.abrupt("return");
                  case 16:
                    _context3.next = 18;
                    return startNavigation(historyAction, nextLocation, {
                      submission: submission,
                      // Send through the formData serialization error if we have one so we can
                      // render at the right error boundary after we match routes
                      pendingError: error,
                      preventScrollReset: preventScrollReset,
                      replace: opts && opts.replace
                    });
                  case 18:
                    return _context3.abrupt("return", _context3.sent);
                  case 19:
                  case "end":
                    return _context3.stop();
                }
              }, _callee3);
            }));
            return _navigate.apply(this, arguments);
          }
          function revalidate() {
            interruptActiveLoads();
            updateState({
              revalidation: "loading"
            }); // If we're currently submitting an action, we don't need to start a new
            // navigation, we'll just let the follow up loader execution call all loaders

            if (state.navigation.state === "submitting") {
              return;
            } // If we're currently in an idle state, start a new navigation for the current
            // action/location and mark it as uninterrupted, which will skip the history
            // update in completeNavigation

            if (state.navigation.state === "idle") {
              startNavigation(state.historyAction, state.location, {
                startUninterruptedRevalidation: true
              });
              return;
            } // Otherwise, if we're currently in a loading state, just start a new
            // navigation to the navigation.location but do not trigger an uninterrupted
            // revalidation so that history correctly updates once the navigation completes

            startNavigation(pendingAction || state.historyAction, state.navigation.location, {
              overrideNavigation: state.navigation
            });
          } // Start a navigation to the given action/location.  Can optionally provide a
          // overrideNavigation which will override the normalLoad in the case of a redirect
          // navigation
          function startNavigation(_x5, _x6, _x7) {
            return _startNavigation.apply(this, arguments);
          } // Call the action matched by the leaf route for this navigation and handle
          // redirects/errors
          function _startNavigation() {
            _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(historyAction, location, opts) {
              var routesToUse, loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;
              return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                while (1) switch (_context4.prev = _context4.next) {
                  case 0:
                    // Abort any in-progress navigations and start a new one. Unset any ongoing
                    // uninterrupted revalidations unless told otherwise, since we want this
                    // new navigation to update history normally
                    pendingNavigationController && pendingNavigationController.abort();
                    pendingNavigationController = null;
                    pendingAction = historyAction;
                    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,
                    // and track whether we should reset scroll on completion

                    saveScrollPosition(state.location, state.matches);
                    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
                    routesToUse = inFlightDataRoutes || dataRoutes;
                    loadingNavigation = opts && opts.overrideNavigation;
                    matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing
                    if (matches) {
                      _context4.next = 15;
                      break;
                    }
                    _error = getInternalRouterError(404, {
                      pathname: location.pathname
                    });
                    _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes
                    cancelActiveDeferreds();
                    completeNavigation(location, {
                      matches: notFoundMatches,
                      loaderData: {},
                      errors: _defineProperty2({}, _route.id, _error)
                    });
                    return _context4.abrupt("return");
                  case 15:
                    if (!(state.initialized && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {
                      _context4.next = 18;
                      break;
                    }
                    completeNavigation(location, {
                      matches: matches
                    });
                    return _context4.abrupt("return");
                  case 18:
                    // Create a controller/Request for this navigation

                    pendingNavigationController = new AbortController();
                    request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);
                    if (!(opts && opts.pendingError)) {
                      _context4.next = 24;
                      break;
                    }
                    // If we have a pendingError, it means the user attempted a GET submission
                    // with binary FormData so assign here and skip to handleLoaders.  That
                    // way we handle calling loaders above the boundary etc.  It's not really
                    // different from an actionError in that sense.
                    pendingError = _defineProperty2({}, findNearestBoundary(matches).route.id, opts.pendingError);
                    _context4.next = 35;
                    break;
                  case 24:
                    if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
                      _context4.next = 35;
                      break;
                    }
                    _context4.next = 27;
                    return handleAction(request, location, opts.submission, matches, {
                      replace: opts.replace
                    });
                  case 27:
                    actionOutput = _context4.sent;
                    if (!actionOutput.shortCircuited) {
                      _context4.next = 30;
                      break;
                    }
                    return _context4.abrupt("return");
                  case 30:
                    pendingActionData = actionOutput.pendingActionData;
                    pendingError = actionOutput.pendingActionError;
                    navigation = _extends$4({
                      state: "loading",
                      location: location
                    }, opts.submission);
                    loadingNavigation = navigation; // Create a GET request for the loaders

                    request = new Request(request.url, {
                      signal: request.signal
                    });
                  case 35:
                    _context4.next = 37;
                    return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);
                  case 37:
                    _yield$handleLoaders = _context4.sent;
                    shortCircuited = _yield$handleLoaders.shortCircuited;
                    loaderData = _yield$handleLoaders.loaderData;
                    errors = _yield$handleLoaders.errors;
                    if (!shortCircuited) {
                      _context4.next = 43;
                      break;
                    }
                    return _context4.abrupt("return");
                  case 43:
                    // Clean up now that the action/loaders have completed.  Don't clean up if
                    // we short circuited because pendingNavigationController will have already
                    // been assigned to a new controller for the next navigation

                    pendingNavigationController = null;
                    completeNavigation(location, _extends$4({
                      matches: matches
                    }, pendingActionData ? {
                      actionData: pendingActionData
                    } : {}, {
                      loaderData: loaderData,
                      errors: errors
                    }));
                  case 45:
                  case "end":
                    return _context4.stop();
                }
              }, _callee4);
            }));
            return _startNavigation.apply(this, arguments);
          }
          function handleAction(_x8, _x9, _x10, _x11, _x12) {
            return _handleAction.apply(this, arguments);
          } // Call all applicable loaders for the given matches, handling redirects,
          // errors, etc.
          function _handleAction() {
            _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, submission, matches, opts) {
              var navigation, result, actionMatch, replace, boundaryMatch;
              return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                while (1) switch (_context5.prev = _context5.next) {
                  case 0:
                    interruptActiveLoads(); // Put us in a submitting state
                    navigation = _extends$4({
                      state: "submitting",
                      location: location
                    }, submission);
                    updateState({
                      navigation: navigation
                    }); // Call our action and get the result
                    actionMatch = getTargetMatch(matches, location);
                    if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {
                      _context5.next = 8;
                      break;
                    }
                    result = {
                      type: ResultType.error,
                      error: getInternalRouterError(405, {
                        method: request.method,
                        pathname: location.pathname,
                        routeId: actionMatch.route.id
                      })
                    };
                    _context5.next = 13;
                    break;
                  case 8:
                    _context5.next = 10;
                    return callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename);
                  case 10:
                    result = _context5.sent;
                    if (!request.signal.aborted) {
                      _context5.next = 13;
                      break;
                    }
                    return _context5.abrupt("return", {
                      shortCircuited: true
                    });
                  case 13:
                    if (!isRedirectResult(result)) {
                      _context5.next = 18;
                      break;
                    }
                    if (opts && opts.replace != null) {
                      replace = opts.replace;
                    } else {
                      // If the user didn't explicity indicate replace behavior, replace if
                      // we redirected to the exact same location we're currently at to avoid
                      // double back-buttons
                      replace = result.location === state.location.pathname + state.location.search;
                    }
                    _context5.next = 17;
                    return startRedirectNavigation(state, result, {
                      submission: submission,
                      replace: replace
                    });
                  case 17:
                    return _context5.abrupt("return", {
                      shortCircuited: true
                    });
                  case 18:
                    if (!isErrorResult(result)) {
                      _context5.next = 22;
                      break;
                    }
                    // Store off the pending error - we use it to determine which loaders
                    // to call and will commit it when we complete the navigation
                    boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the
                    // action threw an error that'll be rendered in an errorElement, we fall
                    // back to PUSH so that the user can use the back button to get back to
                    // the pre-submission form location to try again
                    if ((opts && opts.replace) !== true) {
                      pendingAction = Action.Push;
                    }
                    return _context5.abrupt("return", {
                      // Send back an empty object we can use to clear out any prior actionData
                      pendingActionData: {},
                      pendingActionError: _defineProperty2({}, boundaryMatch.route.id, result.error)
                    });
                  case 22:
                    if (!isDeferredResult(result)) {
                      _context5.next = 24;
                      break;
                    }
                    throw getInternalRouterError(400, {
                      type: "defer-action"
                    });
                  case 24:
                    return _context5.abrupt("return", {
                      pendingActionData: _defineProperty2({}, actionMatch.route.id, result.data)
                    });
                  case 25:
                  case "end":
                    return _context5.stop();
                }
              }, _callee5);
            }));
            return _handleAction.apply(this, arguments);
          }
          function handleLoaders(_x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20, _x21) {
            return _handleLoaders.apply(this, arguments);
          }
          function _handleLoaders() {
            _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {
              var loadingNavigation, navigation, activeSubmission, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _updatedFetchers, actionData, abortPendingFetchRevalidations, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, updatedFetchers, didAbortFetchLoads, shouldUpdateFetchers;
              return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                while (1) switch (_context6.prev = _context6.next) {
                  case 0:
                    // Figure out the right navigation we want to use for data loading
                    loadingNavigation = overrideNavigation;
                    if (!loadingNavigation) {
                      navigation = _extends$4({
                        state: "loading",
                        location: location,
                        formMethod: undefined,
                        formAction: undefined,
                        formEncType: undefined,
                        formData: undefined
                      }, submission);
                      loadingNavigation = navigation;
                    } // If this was a redirect from an action we don't have a "submission" but
                    // we have it on the loading navigation so use that if available
                    activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {
                      formMethod: loadingNavigation.formMethod,
                      formAction: loadingNavigation.formAction,
                      formData: loadingNavigation.formData,
                      formEncType: loadingNavigation.formEncType
                    } : undefined;
                    routesToUse = inFlightDataRoutes || dataRoutes;
                    _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError), _getMatchesToLoad2 = _slicedToArray2(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're
                    // about to reload.  Note that if this is an action reload we would have
                    // already cancelled all pending deferreds so this would be a no-op
                    cancelActiveDeferreds(function (routeId) {
                      return !(matches && matches.some(function (m) {
                        return m.route.id === routeId;
                      })) || matchesToLoad && matchesToLoad.some(function (m) {
                        return m.route.id === routeId;
                      });
                    }); // Short circuit if we have no loaders to run
                    if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {
                      _context6.next = 10;
                      break;
                    }
                    _updatedFetchers = markFetchRedirectsDone();
                    completeNavigation(location, _extends$4({
                      matches: matches,
                      loaderData: {},
                      // Commit pending error if we're short circuiting
                      errors: pendingError || null
                    }, pendingActionData ? {
                      actionData: pendingActionData
                    } : {}, _updatedFetchers ? {
                      fetchers: new Map(state.fetchers)
                    } : {}));
                    return _context6.abrupt("return", {
                      shortCircuited: true
                    });
                  case 10:
                    // If this is an uninterrupted revalidation, we remain in our current idle
                    // state.  If not, we need to switch to our loading state and load data,
                    // preserving any new action data or existing action data (in the case of
                    // a revalidation interrupting an actionReload)

                    if (!isUninterruptedRevalidation) {
                      revalidatingFetchers.forEach(function (rf) {
                        var fetcher = state.fetchers.get(rf.key);
                        var revalidatingFetcher = {
                          state: "loading",
                          data: fetcher && fetcher.data,
                          formMethod: undefined,
                          formAction: undefined,
                          formEncType: undefined,
                          formData: undefined,
                          " _hasFetcherDoneAnything ": true
                        };
                        state.fetchers.set(rf.key, revalidatingFetcher);
                      });
                      actionData = pendingActionData || state.actionData;
                      updateState(_extends$4({
                        navigation: loadingNavigation
                      }, actionData ? Object.keys(actionData).length === 0 ? {
                        actionData: null
                      } : {
                        actionData: actionData
                      } : {}, revalidatingFetchers.length > 0 ? {
                        fetchers: new Map(state.fetchers)
                      } : {}));
                    }
                    pendingNavigationLoadId = ++incrementingLoadId;
                    revalidatingFetchers.forEach(function (rf) {
                      if (rf.controller) {
                        // Fetchers use an independent AbortController so that aborting a fetcher
                        // (via deleteFetcher) does not abort the triggering navigation that
                        // triggered the revalidation
                        fetchControllers.set(rf.key, rf.controller);
                      }
                    }); // Proxy navigation abort through to revalidation fetchers
                    abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {
                      return revalidatingFetchers.forEach(function (f) {
                        return abortFetcher(f.key);
                      });
                    };
                    if (pendingNavigationController) {
                      pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
                    }
                    _context6.next = 17;
                    return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
                  case 17:
                    _yield$callLoadersAnd = _context6.sent;
                    results = _yield$callLoadersAnd.results;
                    loaderResults = _yield$callLoadersAnd.loaderResults;
                    fetcherResults = _yield$callLoadersAnd.fetcherResults;
                    if (!request.signal.aborted) {
                      _context6.next = 23;
                      break;
                    }
                    return _context6.abrupt("return", {
                      shortCircuited: true
                    });
                  case 23:
                    // Clean up _after_ loaders have completed.  Don't clean up if we short
                    // circuited because fetchControllers would have been aborted and
                    // reassigned to new controllers for the next navigation

                    if (pendingNavigationController) {
                      pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
                    }
                    revalidatingFetchers.forEach(function (rf) {
                      return fetchControllers.delete(rf.key);
                    }); // If any loaders returned a redirect Response, start a new REPLACE navigation
                    redirect = findRedirect(results);
                    if (!redirect) {
                      _context6.next = 30;
                      break;
                    }
                    _context6.next = 29;
                    return startRedirectNavigation(state, redirect, {
                      replace: replace
                    });
                  case 29:
                    return _context6.abrupt("return", {
                      shortCircuited: true
                    });
                  case 30:
                    // Process and commit output from loaders
                    _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle
                    activeDeferreds.forEach(function (deferredData, routeId) {
                      deferredData.subscribe(function (aborted) {
                        // Note: No need to updateState here since the TrackedPromise on
                        // loaderData is stable across resolve/reject
                        // Remove this instance if we were aborted or if promises have settled
                        if (aborted || deferredData.done) {
                          activeDeferreds.delete(routeId);
                        }
                      });
                    });
                    updatedFetchers = markFetchRedirectsDone();
                    didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
                    shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
                    return _context6.abrupt("return", _extends$4({
                      loaderData: loaderData,
                      errors: errors
                    }, shouldUpdateFetchers ? {
                      fetchers: new Map(state.fetchers)
                    } : {}));
                  case 36:
                  case "end":
                    return _context6.stop();
                }
              }, _callee6);
            }));
            return _handleLoaders.apply(this, arguments);
          }
          function getFetcher(key) {
            return state.fetchers.get(key) || IDLE_FETCHER;
          } // Trigger a fetcher load/submit for the given fetcher key

          function fetch(key, routeId, href, opts) {
            if (isServer) {
              throw new Error("router.fetch() was called during the server render, but it shouldn't be. " + "You are likely calling a useFetcher() method in the body of your component. " + "Try moving it to a useEffect or a callback.");
            }
            if (fetchControllers.has(key)) abortFetcher(key);
            var routesToUse = inFlightDataRoutes || dataRoutes;
            var normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);
            var matches = matchRoutes(routesToUse, normalizedPath, basename);
            if (!matches) {
              setFetcherError(key, routeId, getInternalRouterError(404, {
                pathname: normalizedPath
              }));
              return;
            }
            var _normalizeNavigateOpt = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts),
              path = _normalizeNavigateOpt.path,
              submission = _normalizeNavigateOpt.submission;
            var match = getTargetMatch(matches, path);
            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
            if (submission && isMutationMethod(submission.formMethod)) {
              handleFetcherAction(key, routeId, path, match, matches, submission);
              return;
            } // Store off the match so we can call it's shouldRevalidate on subsequent
            // revalidations

            fetchLoadMatches.set(key, {
              routeId: routeId,
              path: path
            });
            handleFetcherLoader(key, routeId, path, match, matches, submission);
          } // Call the action for the matched fetcher.submit(), and then handle redirects,
          // errors, and revalidation
          function handleFetcherAction(_x22, _x23, _x24, _x25, _x26, _x27) {
            return _handleFetcherAction.apply(this, arguments);
          } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.
          function _handleFetcherAction() {
            _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, requestMatches, submission) {
              var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, abortPendingFetchRevalidations, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;
              return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                while (1) switch (_context7.prev = _context7.next) {
                  case 0:
                    interruptActiveLoads();
                    fetchLoadMatches.delete(key);
                    if (!(!match.route.action && !match.route.lazy)) {
                      _context7.next = 6;
                      break;
                    }
                    _error2 = getInternalRouterError(405, {
                      method: submission.formMethod,
                      pathname: path,
                      routeId: routeId
                    });
                    setFetcherError(key, routeId, _error2);
                    return _context7.abrupt("return");
                  case 6:
                    // Put this fetcher into it's submitting state
                    existingFetcher = state.fetchers.get(key);
                    fetcher = _extends$4({
                      state: "submitting"
                    }, submission, {
                      data: existingFetcher && existingFetcher.data,
                      " _hasFetcherDoneAnything ": true
                    });
                    state.fetchers.set(key, fetcher);
                    updateState({
                      fetchers: new Map(state.fetchers)
                    }); // Call the action for the fetcher
                    abortController = new AbortController();
                    fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
                    fetchControllers.set(key, abortController);
                    _context7.next = 15;
                    return callLoaderOrAction("action", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);
                  case 15:
                    actionResult = _context7.sent;
                    if (!fetchRequest.signal.aborted) {
                      _context7.next = 19;
                      break;
                    }
                    // We can delete this so long as we weren't aborted by ou our own fetcher
                    // re-submit which would have put _new_ controller is in fetchControllers
                    if (fetchControllers.get(key) === abortController) {
                      fetchControllers.delete(key);
                    }
                    return _context7.abrupt("return");
                  case 19:
                    if (!isRedirectResult(actionResult)) {
                      _context7.next = 26;
                      break;
                    }
                    fetchControllers.delete(key);
                    fetchRedirectIds.add(key);
                    loadingFetcher = _extends$4({
                      state: "loading"
                    }, submission, {
                      data: undefined,
                      " _hasFetcherDoneAnything ": true
                    });
                    state.fetchers.set(key, loadingFetcher);
                    updateState({
                      fetchers: new Map(state.fetchers)
                    });
                    return _context7.abrupt("return", startRedirectNavigation(state, actionResult, {
                      submission: submission,
                      isFetchActionRedirect: true
                    }));
                  case 26:
                    if (!isErrorResult(actionResult)) {
                      _context7.next = 29;
                      break;
                    }
                    setFetcherError(key, routeId, actionResult.error);
                    return _context7.abrupt("return");
                  case 29:
                    if (!isDeferredResult(actionResult)) {
                      _context7.next = 31;
                      break;
                    }
                    throw getInternalRouterError(400, {
                      type: "defer-action"
                    });
                  case 31:
                    // Start the data load for current matches, or the next location if we're
                    // in the middle of a navigation
                    nextLocation = state.navigation.location || state.location;
                    revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);
                    routesToUse = inFlightDataRoutes || dataRoutes;
                    matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
                    invariant(matches, "Didn't find any matches after fetcher action");
                    loadId = ++incrementingLoadId;
                    fetchReloadIds.set(key, loadId);
                    loadFetcher = _extends$4({
                      state: "loading",
                      data: actionResult.data
                    }, submission, {
                      " _hasFetcherDoneAnything ": true
                    });
                    state.fetchers.set(key, loadFetcher);
                    _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, _defineProperty2({}, match.route.id, actionResult.data), undefined // No need to send through errors since we short circuit above
                    ), _getMatchesToLoad4 = _slicedToArray2(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the
                    // current fetcher which we want to keep in it's current loading state which
                    // contains it's action submission info + action data
                    revalidatingFetchers.filter(function (rf) {
                      return rf.key !== key;
                    }).forEach(function (rf) {
                      var staleKey = rf.key;
                      var existingFetcher = state.fetchers.get(staleKey);
                      var revalidatingFetcher = {
                        state: "loading",
                        data: existingFetcher && existingFetcher.data,
                        formMethod: undefined,
                        formAction: undefined,
                        formEncType: undefined,
                        formData: undefined,
                        " _hasFetcherDoneAnything ": true
                      };
                      state.fetchers.set(staleKey, revalidatingFetcher);
                      if (rf.controller) {
                        fetchControllers.set(staleKey, rf.controller);
                      }
                    });
                    updateState({
                      fetchers: new Map(state.fetchers)
                    });
                    abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {
                      return revalidatingFetchers.forEach(function (rf) {
                        return abortFetcher(rf.key);
                      });
                    };
                    abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
                    _context7.next = 47;
                    return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
                  case 47:
                    _yield$callLoadersAnd2 = _context7.sent;
                    results = _yield$callLoadersAnd2.results;
                    loaderResults = _yield$callLoadersAnd2.loaderResults;
                    fetcherResults = _yield$callLoadersAnd2.fetcherResults;
                    if (!abortController.signal.aborted) {
                      _context7.next = 53;
                      break;
                    }
                    return _context7.abrupt("return");
                  case 53:
                    abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
                    fetchReloadIds.delete(key);
                    fetchControllers.delete(key);
                    revalidatingFetchers.forEach(function (r) {
                      return fetchControllers.delete(r.key);
                    });
                    redirect = findRedirect(results);
                    if (!redirect) {
                      _context7.next = 60;
                      break;
                    }
                    return _context7.abrupt("return", startRedirectNavigation(state, redirect));
                  case 60:
                    // Process and commit output from loaders
                    _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;
                    doneFetcher = {
                      state: "idle",
                      data: actionResult.data,
                      formMethod: undefined,
                      formAction: undefined,
                      formEncType: undefined,
                      formData: undefined,
                      " _hasFetcherDoneAnything ": true
                    };
                    state.fetchers.set(key, doneFetcher);
                    didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is
                    // more recent than the navigation, we want the newer data so abort the
                    // navigation and complete it with the fetcher data
                    if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
                      invariant(pendingAction, "Expected pending action");
                      pendingNavigationController && pendingNavigationController.abort();
                      completeNavigation(state.navigation.location, {
                        matches: matches,
                        loaderData: loaderData,
                        errors: errors,
                        fetchers: new Map(state.fetchers)
                      });
                    } else {
                      // otherwise just update with the fetcher data, preserving any existing
                      // loaderData for loaders that did not need to reload.  We have to
                      // manually merge here since we aren't going through completeNavigation
                      updateState(_extends$4({
                        errors: errors,
                        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)
                      }, didAbortFetchLoads ? {
                        fetchers: new Map(state.fetchers)
                      } : {}));
                      isRevalidationRequired = false;
                    }
                  case 65:
                  case "end":
                    return _context7.stop();
                }
              }, _callee7);
            }));
            return _handleFetcherAction.apply(this, arguments);
          }
          function handleFetcherLoader(_x28, _x29, _x30, _x31, _x32, _x33) {
            return _handleFetcherLoader.apply(this, arguments);
          }
          /**
           * Utility function to handle redirects returned from an action or loader.
           * Normally, a redirect "replaces" the navigation that triggered it.  So, for
           * example:
           *
           *  - user is on /a
           *  - user clicks a link to /b
           *  - loader for /b redirects to /c
           *
           * In a non-JS app the browser would track the in-flight navigation to /b and
           * then replace it with /c when it encountered the redirect response.  In
           * the end it would only ever update the URL bar with /c.
           *
           * In client-side routing using pushState/replaceState, we aim to emulate
           * this behavior and we also do not update history until the end of the
           * navigation (including processed redirects).  This means that we never
           * actually touch history until we've processed redirects, so we just use
           * the history action from the original navigation (PUSH or REPLACE).
           */
          function _handleFetcherLoader() {
            _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(key, routeId, path, match, matches, submission) {
              var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;
              return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                while (1) switch (_context8.prev = _context8.next) {
                  case 0:
                    existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state
                    loadingFetcher = _extends$4({
                      state: "loading",
                      formMethod: undefined,
                      formAction: undefined,
                      formEncType: undefined,
                      formData: undefined
                    }, submission, {
                      data: existingFetcher && existingFetcher.data,
                      " _hasFetcherDoneAnything ": true
                    });
                    state.fetchers.set(key, loadingFetcher);
                    updateState({
                      fetchers: new Map(state.fetchers)
                    }); // Call the loader for this fetcher route match
                    abortController = new AbortController();
                    fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
                    fetchControllers.set(key, abortController);
                    _context8.next = 9;
                    return callLoaderOrAction("loader", fetchRequest, match, matches, manifest, mapRouteProperties, basename);
                  case 9:
                    result = _context8.sent;
                    if (!isDeferredResult(result)) {
                      _context8.next = 17;
                      break;
                    }
                    _context8.next = 13;
                    return resolveDeferredData(result, fetchRequest.signal, true);
                  case 13:
                    _context8.t0 = _context8.sent;
                    if (_context8.t0) {
                      _context8.next = 16;
                      break;
                    }
                    _context8.t0 = result;
                  case 16:
                    result = _context8.t0;
                  case 17:
                    // We can delete this so long as we weren't aborted by our our own fetcher
                    // re-load which would have put _new_ controller is in fetchControllers

                    if (fetchControllers.get(key) === abortController) {
                      fetchControllers.delete(key);
                    }
                    if (!fetchRequest.signal.aborted) {
                      _context8.next = 20;
                      break;
                    }
                    return _context8.abrupt("return");
                  case 20:
                    if (!isRedirectResult(result)) {
                      _context8.next = 25;
                      break;
                    }
                    fetchRedirectIds.add(key);
                    _context8.next = 24;
                    return startRedirectNavigation(state, result);
                  case 24:
                    return _context8.abrupt("return");
                  case 25:
                    if (!isErrorResult(result)) {
                      _context8.next = 30;
                      break;
                    }
                    boundaryMatch = findNearestBoundary(state.matches, routeId);
                    state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -
                    // do we need to behave any differently with our non-redirect errors?
                    // What if it was a non-redirect Response?

                    updateState({
                      fetchers: new Map(state.fetchers),
                      errors: _defineProperty2({}, boundaryMatch.route.id, result.error)
                    });
                    return _context8.abrupt("return");
                  case 30:
                    invariant(!isDeferredResult(result), "Unhandled fetcher deferred data"); // Put the fetcher back into an idle state
                    doneFetcher = {
                      state: "idle",
                      data: result.data,
                      formMethod: undefined,
                      formAction: undefined,
                      formEncType: undefined,
                      formData: undefined,
                      " _hasFetcherDoneAnything ": true
                    };
                    state.fetchers.set(key, doneFetcher);
                    updateState({
                      fetchers: new Map(state.fetchers)
                    });
                  case 34:
                  case "end":
                    return _context8.stop();
                }
              }, _callee8);
            }));
            return _handleFetcherLoader.apply(this, arguments);
          }
          function startRedirectNavigation(_x34, _x35, _x36) {
            return _startRedirectNavigation.apply(this, arguments);
          }
          function _startRedirectNavigation() {
            _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(state, redirect, _temp) {
              var _window, _ref12, submission, replace, isFetchActionRedirect, redirectLocation, url, isDifferentBasename, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;
              return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                while (1) switch (_context9.prev = _context9.next) {
                  case 0:
                    _ref12 = _temp === void 0 ? {} : _temp, submission = _ref12.submission, replace = _ref12.replace, isFetchActionRedirect = _ref12.isFetchActionRedirect;
                    if (redirect.revalidate) {
                      isRevalidationRequired = true;
                    }
                    redirectLocation = createLocation(state.location, redirect.location,
                    // TODO: This can be removed once we get rid of useTransition in Remix v2
                    _extends$4({
                      _isRedirect: true
                    }, isFetchActionRedirect ? {
                      _isFetchActionRedirect: true
                    } : {}));
                    invariant(redirectLocation, "Expected a location on the redirect navigation"); // Check if this an absolute external redirect that goes to a new origin
                    if (!(ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== "undefined")) {
                      _context9.next = 10;
                      break;
                    }
                    url = init.history.createURL(redirect.location);
                    isDifferentBasename = stripBasename(url.pathname, basename) == null;
                    if (!(window.location.origin !== url.origin || isDifferentBasename)) {
                      _context9.next = 10;
                      break;
                    }
                    if (replace) {
                      window.location.replace(redirect.location);
                    } else {
                      window.location.assign(redirect.location);
                    }
                    return _context9.abrupt("return");
                  case 10:
                    // There's no need to abort on redirects, since we don't detect the
                    // redirect until the action/loaders have settled

                    pendingNavigationController = null;
                    redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in
                    // state.navigation
                    _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;
                    if (!submission && formMethod && formAction && formData && formEncType) {
                      submission = {
                        formMethod: formMethod,
                        formAction: formAction,
                        formEncType: formEncType,
                        formData: formData
                      };
                    } // If this was a 307/308 submission we want to preserve the HTTP method and
                    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the
                    // redirected location
                    if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {
                      _context9.next = 19;
                      break;
                    }
                    _context9.next = 17;
                    return startNavigation(redirectHistoryAction, redirectLocation, {
                      submission: _extends$4({}, submission, {
                        formAction: redirect.location
                      }),
                      // Preserve this flag across redirects
                      preventScrollReset: pendingPreventScrollReset
                    });
                  case 17:
                    _context9.next = 26;
                    break;
                  case 19:
                    if (!isFetchActionRedirect) {
                      _context9.next = 24;
                      break;
                    }
                    _context9.next = 22;
                    return startNavigation(redirectHistoryAction, redirectLocation, {
                      overrideNavigation: {
                        state: "loading",
                        location: redirectLocation,
                        formMethod: undefined,
                        formAction: undefined,
                        formEncType: undefined,
                        formData: undefined
                      },
                      fetcherSubmission: submission,
                      // Preserve this flag across redirects
                      preventScrollReset: pendingPreventScrollReset
                    });
                  case 22:
                    _context9.next = 26;
                    break;
                  case 24:
                    _context9.next = 26;
                    return startNavigation(redirectHistoryAction, redirectLocation, {
                      overrideNavigation: {
                        state: "loading",
                        location: redirectLocation,
                        formMethod: submission ? submission.formMethod : undefined,
                        formAction: submission ? submission.formAction : undefined,
                        formEncType: submission ? submission.formEncType : undefined,
                        formData: submission ? submission.formData : undefined
                      },
                      // Preserve this flag across redirects
                      preventScrollReset: pendingPreventScrollReset
                    });
                  case 26:
                  case "end":
                    return _context9.stop();
                }
              }, _callee9);
            }));
            return _startRedirectNavigation.apply(this, arguments);
          }
          function callLoadersAndMaybeResolveData(_x37, _x38, _x39, _x40, _x41) {
            return _callLoadersAndMaybeResolveData.apply(this, arguments);
          }
          function _callLoadersAndMaybeResolveData() {
            _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
              var results, loaderResults, fetcherResults;
              return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                while (1) switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.next = 2;
                    return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {
                      return callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename);
                    })), _toConsumableArray(fetchersToLoad.map(function (f) {
                      if (f.matches && f.match && f.controller) {
                        return callLoaderOrAction("loader", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);
                      } else {
                        var _error3 = {
                          type: ResultType.error,
                          error: getInternalRouterError(404, {
                            pathname: f.path
                          })
                        };
                        return _error3;
                      }
                    }))));
                  case 2:
                    results = _context10.sent;
                    loaderResults = results.slice(0, matchesToLoad.length);
                    fetcherResults = results.slice(matchesToLoad.length);
                    _context10.next = 7;
                    return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(function () {
                      return request.signal;
                    }), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {
                      return f.match;
                    }), fetcherResults, fetchersToLoad.map(function (f) {
                      return f.controller ? f.controller.signal : null;
                    }), true)]);
                  case 7:
                    return _context10.abrupt("return", {
                      results: results,
                      loaderResults: loaderResults,
                      fetcherResults: fetcherResults
                    });
                  case 8:
                  case "end":
                    return _context10.stop();
                }
              }, _callee10);
            }));
            return _callLoadersAndMaybeResolveData.apply(this, arguments);
          }
          function interruptActiveLoads() {
            var _cancelledDeferredRou;
            // Every interruption triggers a revalidation
            isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for
            // revalidation

            (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads

            fetchLoadMatches.forEach(function (_, key) {
              if (fetchControllers.has(key)) {
                cancelledFetcherLoads.push(key);
                abortFetcher(key);
              }
            });
          }
          function setFetcherError(key, routeId, error) {
            var boundaryMatch = findNearestBoundary(state.matches, routeId);
            deleteFetcher(key);
            updateState({
              errors: _defineProperty2({}, boundaryMatch.route.id, error),
              fetchers: new Map(state.fetchers)
            });
          }
          function deleteFetcher(key) {
            if (fetchControllers.has(key)) abortFetcher(key);
            fetchLoadMatches.delete(key);
            fetchReloadIds.delete(key);
            fetchRedirectIds.delete(key);
            state.fetchers.delete(key);
          }
          function abortFetcher(key) {
            var controller = fetchControllers.get(key);
            invariant(controller, "Expected fetch controller: " + key);
            controller.abort();
            fetchControllers.delete(key);
          }
          function markFetchersDone(keys) {
            var _iterator7 = _createForOfIteratorHelper(keys),
              _step6;
            try {
              for (_iterator7.s(); !(_step6 = _iterator7.n()).done;) {
                var key = _step6.value;
                var fetcher = getFetcher(key);
                var doneFetcher = {
                  state: "idle",
                  data: fetcher.data,
                  formMethod: undefined,
                  formAction: undefined,
                  formEncType: undefined,
                  formData: undefined,
                  " _hasFetcherDoneAnything ": true
                };
                state.fetchers.set(key, doneFetcher);
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }
          }
          function markFetchRedirectsDone() {
            var doneKeys = [];
            var updatedFetchers = false;
            var _iterator8 = _createForOfIteratorHelper(fetchRedirectIds),
              _step7;
            try {
              for (_iterator8.s(); !(_step7 = _iterator8.n()).done;) {
                var key = _step7.value;
                var fetcher = state.fetchers.get(key);
                invariant(fetcher, "Expected fetcher: " + key);
                if (fetcher.state === "loading") {
                  fetchRedirectIds.delete(key);
                  doneKeys.push(key);
                  updatedFetchers = true;
                }
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
            markFetchersDone(doneKeys);
            return updatedFetchers;
          }
          function abortStaleFetchLoads(landedId) {
            var yeetedKeys = [];
            var _iterator9 = _createForOfIteratorHelper(fetchReloadIds),
              _step8;
            try {
              for (_iterator9.s(); !(_step8 = _iterator9.n()).done;) {
                var _step8$value = _slicedToArray2(_step8.value, 2),
                  key = _step8$value[0],
                  _id = _step8$value[1];
                if (_id < landedId) {
                  var fetcher = state.fetchers.get(key);
                  invariant(fetcher, "Expected fetcher: " + key);
                  if (fetcher.state === "loading") {
                    abortFetcher(key);
                    fetchReloadIds.delete(key);
                    yeetedKeys.push(key);
                  }
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }
            markFetchersDone(yeetedKeys);
            return yeetedKeys.length > 0;
          }
          function getBlocker(key, fn) {
            var blocker = state.blockers.get(key) || IDLE_BLOCKER;
            if (blockerFunctions.get(key) !== fn) {
              blockerFunctions.set(key, fn);
            }
            return blocker;
          }
          function deleteBlocker(key) {
            state.blockers.delete(key);
            blockerFunctions.delete(key);
          } // Utility function to update blockers, ensuring valid state transitions

          function updateBlocker(key, newBlocker) {
            var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)
            // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM

            invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
            state.blockers.set(key, newBlocker);
            updateState({
              blockers: new Map(state.blockers)
            });
          }
          function shouldBlockNavigation(_ref2) {
            var currentLocation = _ref2.currentLocation,
              nextLocation = _ref2.nextLocation,
              historyAction = _ref2.historyAction;
            if (blockerFunctions.size === 0) {
              return;
            } // We ony support a single active blocker at the moment since we don't have
            // any compelling use cases for multi-blocker yet

            if (blockerFunctions.size > 1) {
              warning$1(false, "A router only supports one blocker at a time");
            }
            var entries = Array.from(blockerFunctions.entries());
            var _entries = _slicedToArray2(entries[entries.length - 1], 2),
              blockerKey = _entries[0],
              blockerFunction = _entries[1];
            var blocker = state.blockers.get(blockerKey);
            if (blocker && blocker.state === "proceeding") {
              // If the blocker is currently proceeding, we don't need to re-check
              // it and can let this navigation continue
              return;
            } // At this point, we know we're unblocked/blocked so we need to check the
            // user-provided blocker function

            if (blockerFunction({
              currentLocation: currentLocation,
              nextLocation: nextLocation,
              historyAction: historyAction
            })) {
              return blockerKey;
            }
          }
          function cancelActiveDeferreds(predicate) {
            var cancelledRouteIds = [];
            activeDeferreds.forEach(function (dfd, routeId) {
              if (!predicate || predicate(routeId)) {
                // Cancel the deferred - but do not remove from activeDeferreds here -
                // we rely on the subscribers to do that so our tests can assert proper
                // cleanup via _internalActiveDeferreds
                dfd.cancel();
                cancelledRouteIds.push(routeId);
                activeDeferreds.delete(routeId);
              }
            });
            return cancelledRouteIds;
          } // Opt in to capturing and reporting scroll positions during navigations,
          // used by the <ScrollRestoration> component

          function enableScrollRestoration(positions, getPosition, getKey) {
            savedScrollPositions = positions;
            getScrollPosition = getPosition;
            getScrollRestorationKey = getKey || function (location) {
              return location.key;
            }; // Perform initial hydration scroll restoration, since we miss the boat on
            // the initial updateState() because we've not yet rendered <ScrollRestoration/>
            // and therefore have no savedScrollPositions available

            if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
              initialScrollRestored = true;
              var _y2 = getSavedScrollPosition(state.location, state.matches);
              if (_y2 != null) {
                updateState({
                  restoreScrollPosition: _y2
                });
              }
            }
            return function () {
              savedScrollPositions = null;
              getScrollPosition = null;
              getScrollRestorationKey = null;
            };
          }
          function saveScrollPosition(location, matches) {
            if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {
              var userMatches = matches.map(function (m) {
                return createUseMatchesMatch(m, state.loaderData);
              });
              var key = getScrollRestorationKey(location, userMatches) || location.key;
              savedScrollPositions[key] = getScrollPosition();
            }
          }
          function getSavedScrollPosition(location, matches) {
            if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {
              var userMatches = matches.map(function (m) {
                return createUseMatchesMatch(m, state.loaderData);
              });
              var key = getScrollRestorationKey(location, userMatches) || location.key;
              var _y3 = savedScrollPositions[key];
              if (typeof _y3 === "number") {
                return _y3;
              }
            }
            return null;
          }
          function _internalSetRoutes(newRoutes) {
            manifest = {};
            inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);
          }
          router = {
            get basename() {
              return basename;
            },
            get state() {
              return state;
            },
            get routes() {
              return dataRoutes;
            },
            initialize: initialize,
            subscribe: subscribe,
            enableScrollRestoration: enableScrollRestoration,
            navigate: navigate,
            fetch: fetch,
            revalidate: revalidate,
            // Passthrough to history-aware createHref used by useHref so we get proper
            // hash-aware URLs in DOM paths
            createHref: function createHref(to) {
              return init.history.createHref(to);
            },
            encodeLocation: function encodeLocation(to) {
              return init.history.encodeLocation(to);
            },
            getFetcher: getFetcher,
            deleteFetcher: deleteFetcher,
            dispose: dispose,
            getBlocker: getBlocker,
            deleteBlocker: deleteBlocker,
            _internalFetchControllers: fetchControllers,
            _internalActiveDeferreds: activeDeferreds,
            // TODO: Remove setRoutes, it's temporary to avoid dealing with
            // updating the tree while validating the update algorithm.
            _internalSetRoutes: _internalSetRoutes
          };
          return router;
        } //#endregion

        function isSubmissionNavigation(opts) {
          return opts != null && "formData" in opts;
        }
        function normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {
          var contextualMatches;
          var activeRouteMatch;
          if (fromRouteId != null && relative !== "path") {
            // Grab matches up to the calling route so our route-relative logic is
            // relative to the correct source route.  When using relative:path,
            // fromRouteId is ignored since that is always relative to the current
            // location path
            contextualMatches = [];
            var _iterator10 = _createForOfIteratorHelper(matches),
              _step9;
            try {
              for (_iterator10.s(); !(_step9 = _iterator10.n()).done;) {
                var _match2 = _step9.value;
                contextualMatches.push(_match2);
                if (_match2.route.id === fromRouteId) {
                  activeRouteMatch = _match2;
                  break;
                }
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }
          } else {
            contextualMatches = matches;
            activeRouteMatch = matches[matches.length - 1];
          } // Resolve the relative path

          var path = resolveTo(to ? to : ".", getPathContributingMatches(contextualMatches).map(function (m) {
            return m.pathnameBase;
          }), stripBasename(location.pathname, basename) || location.pathname, relative === "path"); // When `to` is not specified we inherit search/hash from the current
          // location, unlike when to="." and we just inherit the path.
          // See https://github.com/remix-run/remix/issues/927

          if (to == null) {
            path.search = location.search;
            path.hash = location.hash;
          } // Add an ?index param for matched index routes if we don't already have one

          if ((to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {
            path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
          } // If we're operating within a basename, prepend it to the pathname.  If
          // this is a root navigation, then just use the raw basename which allows
          // the basename to have full control over the presence of a trailing slash
          // on root actions

          if (prependBasename && basename !== "/") {
            path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
          }
          return createPath(path);
        } // Normalize navigation options by converting formMethod=GET formData objects to
        // URLSearchParams so they behave identically to links with query params

        function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
          // Return location verbatim on non-submission navigations
          if (!opts || !isSubmissionNavigation(opts)) {
            return {
              path: path
            };
          }
          if (opts.formMethod && !isValidMethod(opts.formMethod)) {
            return {
              path: path,
              error: getInternalRouterError(405, {
                method: opts.formMethod
              })
            };
          } // Create a Submission on non-GET navigations

          var submission;
          if (opts.formData) {
            var formMethod = opts.formMethod || "get";
            submission = {
              formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),
              formAction: stripHashFromPath(path),
              formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
              formData: opts.formData
            };
            if (isMutationMethod(submission.formMethod)) {
              return {
                path: path,
                submission: submission
              };
            }
          } // Flatten submission onto URLSearchParams for GET submissions

          var parsedPath = parsePath(path);
          var searchParams = convertFormDataToSearchParams(opts.formData); // On GET navigation submissions we can drop the ?index param from the
          // resulting location since all loaders will run.  But fetcher GET submissions
          // only run a single loader so we need to preserve any incoming ?index params

          if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
            searchParams.append("index", "");
          }
          parsedPath.search = "?" + searchParams;
          return {
            path: createPath(parsedPath),
            submission: submission
          };
        } // Filter out all routes below any caught error as they aren't going to
        // render so we don't need to load them

        function getLoaderMatchesUntilBoundary(matches, boundaryId) {
          var boundaryMatches = matches;
          if (boundaryId) {
            var _index = matches.findIndex(function (m) {
              return m.route.id === boundaryId;
            });
            if (_index >= 0) {
              boundaryMatches = matches.slice(0, _index);
            }
          }
          return boundaryMatches;
        }
        function getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {
          var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;
          var currentUrl = history.createURL(state.location);
          var nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation

          var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;
          var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);
          var navigationMatches = boundaryMatches.filter(function (match, index) {
            if (match.route.lazy) {
              // We haven't loaded this route yet so we don't know if it's got a loader!
              return true;
            }
            if (match.route.loader == null) {
              return false;
            } // Always call the loader on new route instances and pending defer cancellations

            if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {
              return id === match.route.id;
            })) {
              return true;
            } // This is the default implementation for when we revalidate.  If the route
            // provides it's own implementation, then we give them full control but
            // provide this value so they can leverage it if needed after they check
            // their own specific use cases

            var currentRouteMatch = state.matches[index];
            var nextRouteMatch = match;
            return shouldRevalidateLoader(match, _extends$4({
              currentUrl: currentUrl,
              currentParams: currentRouteMatch.params,
              nextUrl: nextUrl,
              nextParams: nextRouteMatch.params
            }, submission, {
              actionResult: actionResult,
              defaultShouldRevalidate:
              // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
              isRevalidationRequired ||
              // Clicked the same link, resubmitted a GET form
              currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||
              // Search params affect all loaders
              currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
            }));
          }); // Pick fetcher.loads that need to be revalidated

          var revalidatingFetchers = [];
          fetchLoadMatches.forEach(function (f, key) {
            // Don't revalidate if fetcher won't be present in the subsequent render
            if (!matches.some(function (m) {
              return m.route.id === f.routeId;
            })) {
              return;
            }
            var fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so
            // we can trigger a 404 in callLoadersAndMaybeResolveData

            if (!fetcherMatches) {
              revalidatingFetchers.push({
                key: key,
                routeId: f.routeId,
                path: f.path,
                matches: null,
                match: null,
                controller: null
              });
              return;
            }
            var fetcherMatch = getTargetMatch(fetcherMatches, f.path);
            if (cancelledFetcherLoads.includes(key)) {
              revalidatingFetchers.push({
                key: key,
                routeId: f.routeId,
                path: f.path,
                matches: fetcherMatches,
                match: fetcherMatch,
                controller: new AbortController()
              });
              return;
            } // Revalidating fetchers are decoupled from the route matches since they
            // hit a static href, so they _always_ check shouldRevalidate and the
            // default is strictly if a revalidation is explicitly required (action
            // submissions, useRevalidator, X-Remix-Revalidate).

            var shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends$4({
              currentUrl: currentUrl,
              currentParams: state.matches[state.matches.length - 1].params,
              nextUrl: nextUrl,
              nextParams: matches[matches.length - 1].params
            }, submission, {
              actionResult: actionResult,
              // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
              defaultShouldRevalidate: isRevalidationRequired
            }));
            if (shouldRevalidate) {
              revalidatingFetchers.push({
                key: key,
                routeId: f.routeId,
                path: f.path,
                matches: fetcherMatches,
                match: fetcherMatch,
                controller: new AbortController()
              });
            }
          });
          return [navigationMatches, revalidatingFetchers];
        }
        function isNewLoader(currentLoaderData, currentMatch, match) {
          var isNew =
          // [a] -> [a, b]
          !currentMatch ||
          // [a, b] -> [a, c]
          match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially
          // from a prior error or from a cancelled pending deferred

          var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data

          return isNew || isMissingData;
        }
        function isNewRouteInstance(currentMatch, match) {
          var currentPath = currentMatch.route.path;
          return (
            // param change for this match, /users/123 -> /users/456
            currentMatch.pathname !== match.pathname ||
            // splat param changed, which is not present in match.path
            // e.g. /files/images/avatar.jpg -> files/finances.xls
            currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]
          );
        }
        function shouldRevalidateLoader(loaderMatch, arg) {
          if (loaderMatch.route.shouldRevalidate) {
            var routeChoice = loaderMatch.route.shouldRevalidate(arg);
            if (typeof routeChoice === "boolean") {
              return routeChoice;
            }
          }
          return arg.defaultShouldRevalidate;
        }
        /**
         * Execute route.lazy() methods to lazily load route modules (loader, action,
         * shouldRevalidate) and update the routeManifest in place which shares objects
         * with dataRoutes so those get updated as well.
         */
        function loadLazyRouteModule(_x42, _x43, _x44) {
          return _loadLazyRouteModule.apply(this, arguments);
        }
        function _loadLazyRouteModule() {
          _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee63(route, mapRouteProperties, manifest) {
            var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;
            return _regeneratorRuntime().wrap(function _callee63$(_context63) {
              while (1) switch (_context63.prev = _context63.next) {
                case 0:
                  if (route.lazy) {
                    _context63.next = 2;
                    break;
                  }
                  return _context63.abrupt("return");
                case 2:
                  _context63.next = 4;
                  return route.lazy();
                case 4:
                  lazyRoute = _context63.sent;
                  if (route.lazy) {
                    _context63.next = 7;
                    break;
                  }
                  return _context63.abrupt("return");
                case 7:
                  routeToUpdate = manifest[route.id];
                  invariant(routeToUpdate, "No route found in manifest"); // Update the route in place.  This should be safe because there's no way
                  // we could yet be sitting on this route as we can't get there without
                  // resolving lazy() first.
                  //
                  // This is different than the HMR "update" use-case where we may actively be
                  // on the route being updated.  The main concern boils down to "does this
                  // mutation affect any ongoing navigations or any current state.matches
                  // values?".  If not, it should be safe to update in place.
                  routeUpdates = {};
                  for (lazyRouteProperty in lazyRoute) {
                    staticRouteValue = routeToUpdate[lazyRouteProperty];
                    isPropertyStaticallyDefined = staticRouteValue !== undefined &&
                    // This property isn't static since it should always be updated based
                    // on the route updates
                    lazyRouteProperty !== "hasErrorBoundary";
                    warning$1(!isPropertyStaticallyDefined, "Route \"" + routeToUpdate.id + "\" has a static property \"" + lazyRouteProperty + "\" " + "defined but its lazy function is also returning a value for this property. " + ("The lazy route property \"" + lazyRouteProperty + "\" will be ignored."));
                    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {
                      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
                    }
                  } // Mutate the route with the provided updates.  Do this first so we pass
                  // the updated version to mapRouteProperties

                  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route
                  // updates and remove the `lazy` function so we don't resolve the lazy
                  // route again.

                  Object.assign(routeToUpdate, _extends$4({}, mapRouteProperties(routeToUpdate), {
                    lazy: undefined
                  }));
                case 13:
                case "end":
                  return _context63.stop();
              }
            }, _callee63);
          }));
          return _loadLazyRouteModule.apply(this, arguments);
        }
        function callLoaderOrAction(_x45, _x46, _x47, _x48, _x49, _x50, _x51, _x52, _x53, _x54) {
          return _callLoaderOrAction.apply(this, arguments);
        } // Utility method for creating the Request instances for loaders/actions during
        // client-side navigations and fetches.  During SSR we will always have a
        // Request instance from the static handler (query/queryRoute)
        function _callLoaderOrAction() {
          _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee64(type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {
            var resultType, result, onReject, runHandler, handler, values, url, pathname, _url, _pathname, status, location, currentUrl, _url2, isSameBasename, data, contentType, _result$init, _result$init2;
            return _regeneratorRuntime().wrap(function _callee64$(_context64) {
              while (1) switch (_context64.prev = _context64.next) {
                case 0:
                  if (isStaticRequest === void 0) {
                    isStaticRequest = false;
                  }
                  if (isRouteRequest === void 0) {
                    isRouteRequest = false;
                  }
                  runHandler = function runHandler(handler) {
                    // Setup a promise we can race against so that abort signals short circuit
                    var reject;
                    var abortPromise = new Promise(function (_, r) {
                      return reject = r;
                    });
                    onReject = function onReject() {
                      return reject();
                    };
                    request.signal.addEventListener("abort", onReject);
                    return Promise.race([handler({
                      request: request,
                      params: match.params,
                      context: requestContext
                    }), abortPromise]);
                  };
                  _context64.prev = 3;
                  handler = match.route[type];
                  if (!match.route.lazy) {
                    _context64.next = 31;
                    break;
                  }
                  if (!handler) {
                    _context64.next = 13;
                    break;
                  }
                  _context64.next = 9;
                  return Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);
                case 9:
                  values = _context64.sent;
                  result = values[0];
                  _context64.next = 29;
                  break;
                case 13:
                  _context64.next = 15;
                  return loadLazyRouteModule(match.route, mapRouteProperties, manifest);
                case 15:
                  handler = match.route[type];
                  if (!handler) {
                    _context64.next = 22;
                    break;
                  }
                  _context64.next = 19;
                  return runHandler(handler);
                case 19:
                  result = _context64.sent;
                  _context64.next = 29;
                  break;
                case 22:
                  if (!(type === "action")) {
                    _context64.next = 28;
                    break;
                  }
                  url = new URL(request.url);
                  pathname = url.pathname + url.search;
                  throw getInternalRouterError(405, {
                    method: request.method,
                    pathname: pathname,
                    routeId: match.route.id
                  });
                case 28:
                  return _context64.abrupt("return", {
                    type: ResultType.data,
                    data: undefined
                  });
                case 29:
                  _context64.next = 40;
                  break;
                case 31:
                  if (handler) {
                    _context64.next = 37;
                    break;
                  }
                  _url = new URL(request.url);
                  _pathname = _url.pathname + _url.search;
                  throw getInternalRouterError(404, {
                    pathname: _pathname
                  });
                case 37:
                  _context64.next = 39;
                  return runHandler(handler);
                case 39:
                  result = _context64.sent;
                case 40:
                  invariant(result !== undefined, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ("\"" + match.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
                  _context64.next = 47;
                  break;
                case 43:
                  _context64.prev = 43;
                  _context64.t0 = _context64["catch"](3);
                  resultType = ResultType.error;
                  result = _context64.t0;
                case 47:
                  _context64.prev = 47;
                  if (onReject) {
                    request.signal.removeEventListener("abort", onReject);
                  }
                  return _context64.finish(47);
                case 50:
                  if (!isResponse(result)) {
                    _context64.next = 75;
                    break;
                  }
                  status = result.status; // Process redirects
                  if (!redirectStatusCodes.has(status)) {
                    _context64.next = 60;
                    break;
                  }
                  location = result.headers.get("Location");
                  invariant(location, "Redirects returned/thrown from loaders/actions must have a Location header"); // Support relative routing in internal redirects

                  if (!ABSOLUTE_URL_REGEX.test(location)) {
                    location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);
                  } else if (!isStaticRequest) {
                    // Strip off the protocol+origin for same-origin + same-basename absolute
                    // redirects. If this is a static request, we can let it go back to the
                    // browser as-is
                    currentUrl = new URL(request.url);
                    _url2 = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location);
                    isSameBasename = stripBasename(_url2.pathname, basename) != null;
                    if (_url2.origin === currentUrl.origin && isSameBasename) {
                      location = _url2.pathname + _url2.search + _url2.hash;
                    }
                  } // Don't process redirects in the router during static requests requests.
                  // Instead, throw the Response and let the server handle it with an HTTP
                  // redirect.  We also update the Location header in place in this flow so
                  // basename and relative routing is taken into account
                  if (!isStaticRequest) {
                    _context64.next = 59;
                    break;
                  }
                  result.headers.set("Location", location);
                  throw result;
                case 59:
                  return _context64.abrupt("return", {
                    type: ResultType.redirect,
                    status: status,
                    location: location,
                    revalidate: result.headers.get("X-Remix-Revalidate") !== null
                  });
                case 60:
                  if (!isRouteRequest) {
                    _context64.next = 62;
                    break;
                  }
                  throw {
                    type: resultType || ResultType.data,
                    response: result
                  };
                case 62:
                  contentType = result.headers.get("Content-Type"); // Check between word boundaries instead of startsWith() due to the last
                  // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type
                  if (!(contentType && /\bapplication\/json\b/.test(contentType))) {
                    _context64.next = 69;
                    break;
                  }
                  _context64.next = 66;
                  return result.json();
                case 66:
                  data = _context64.sent;
                  _context64.next = 72;
                  break;
                case 69:
                  _context64.next = 71;
                  return result.text();
                case 71:
                  data = _context64.sent;
                case 72:
                  if (!(resultType === ResultType.error)) {
                    _context64.next = 74;
                    break;
                  }
                  return _context64.abrupt("return", {
                    type: resultType,
                    error: new ErrorResponse(status, result.statusText, data),
                    headers: result.headers
                  });
                case 74:
                  return _context64.abrupt("return", {
                    type: ResultType.data,
                    data: data,
                    statusCode: result.status,
                    headers: result.headers
                  });
                case 75:
                  if (!(resultType === ResultType.error)) {
                    _context64.next = 77;
                    break;
                  }
                  return _context64.abrupt("return", {
                    type: resultType,
                    error: result
                  });
                case 77:
                  if (!isDeferredData(result)) {
                    _context64.next = 79;
                    break;
                  }
                  return _context64.abrupt("return", {
                    type: ResultType.deferred,
                    deferredData: result,
                    statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
                    headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
                  });
                case 79:
                  return _context64.abrupt("return", {
                    type: ResultType.data,
                    data: result
                  });
                case 80:
                case "end":
                  return _context64.stop();
              }
            }, _callee64, null, [[3, 43, 47, 50]]);
          }));
          return _callLoaderOrAction.apply(this, arguments);
        }
        function createClientSideRequest(history, location, signal, submission) {
          var url = history.createURL(stripHashFromPath(location)).toString();
          var init = {
            signal: signal
          };
          if (submission && isMutationMethod(submission.formMethod)) {
            var formMethod = submission.formMethod,
              formEncType = submission.formEncType,
              formData = submission.formData; // Didn't think we needed this but it turns out unlike other methods, patch
            // won't be properly normalized to uppercase and results in a 405 error.
            // See: https://fetch.spec.whatwg.org/#concept-method

            init.method = formMethod.toUpperCase();
            init.body = formEncType === "application/x-www-form-urlencoded" ? convertFormDataToSearchParams(formData) : formData;
          } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)

          return new Request(url, init);
        }
        function convertFormDataToSearchParams(formData) {
          var searchParams = new URLSearchParams();
          var _iterator11 = _createForOfIteratorHelper(formData.entries()),
            _step10;
          try {
            for (_iterator11.s(); !(_step10 = _iterator11.n()).done;) {
              var _step10$value = _slicedToArray2(_step10.value, 2),
                key = _step10$value[0],
                value = _step10$value[1];
              // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs
              searchParams.append(key, value instanceof File ? value.name : value);
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }
          return searchParams;
        }
        function processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
          // Fill in loaderData/errors from our loaders
          var loaderData = {};
          var errors = null;
          var statusCode;
          var foundError = false;
          var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors

          results.forEach(function (result, index) {
            var id = matchesToLoad[index].route.id;
            invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
            if (isErrorResult(result)) {
              // Look upwards from the matched route for the closest ancestor
              // error boundary, defaulting to the root match
              var boundaryMatch = findNearestBoundary(matches, id);
              var error = result.error; // If we have a pending action error, we report it at the highest-route
              // that throws a loader error, and then clear it out to indicate that
              // it was consumed

              if (pendingError) {
                error = Object.values(pendingError)[0];
                pendingError = undefined;
              }
              errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary

              if (errors[boundaryMatch.route.id] == null) {
                errors[boundaryMatch.route.id] = error;
              } // Clear our any prior loaderData for the throwing route

              loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and
              // prevent deeper status codes from overriding

              if (!foundError) {
                foundError = true;
                statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
              }
              if (result.headers) {
                loaderHeaders[id] = result.headers;
              }
            } else {
              if (isDeferredResult(result)) {
                activeDeferreds.set(id, result.deferredData);
                loaderData[id] = result.deferredData.data;
              } else {
                loaderData[id] = result.data;
              } // Error status codes always override success status codes, but if all
              // loaders are successful we take the deepest status code.

              if (result.statusCode != null && result.statusCode !== 200 && !foundError) {
                statusCode = result.statusCode;
              }
              if (result.headers) {
                loaderHeaders[id] = result.headers;
              }
            }
          }); // If we didn't consume the pending action error (i.e., all loaders
          // resolved), then consume it here.  Also clear out any loaderData for the
          // throwing route

          if (pendingError) {
            errors = pendingError;
            loaderData[Object.keys(pendingError)[0]] = undefined;
          }
          return {
            loaderData: loaderData,
            errors: errors,
            statusCode: statusCode || 200,
            loaderHeaders: loaderHeaders
          };
        }
        function processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
          var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),
            loaderData = _processRouteLoaderDa.loaderData,
            errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers

          for (var _index2 = 0; _index2 < revalidatingFetchers.length; _index2++) {
            var _revalidatingFetchers = revalidatingFetchers[_index2],
              key = _revalidatingFetchers.key,
              _match3 = _revalidatingFetchers.match,
              controller = _revalidatingFetchers.controller;
            invariant(fetcherResults !== undefined && fetcherResults[_index2] !== undefined, "Did not find corresponding fetcher result");
            var result = fetcherResults[_index2]; // Process fetcher non-redirect errors

            if (controller && controller.signal.aborted) {
              // Nothing to do for aborted fetchers
              continue;
            } else if (isErrorResult(result)) {
              var boundaryMatch = findNearestBoundary(state.matches, _match3 == null ? void 0 : _match3.route.id);
              if (!(errors && errors[boundaryMatch.route.id])) {
                errors = _extends$4({}, errors, _defineProperty2({}, boundaryMatch.route.id, result.error));
              }
              state.fetchers.delete(key);
            } else if (isRedirectResult(result)) {
              // Should never get here, redirects should get processed above, but we
              // keep this to type narrow to a success result in the else
              invariant(false, "Unhandled fetcher revalidation redirect");
            } else if (isDeferredResult(result)) {
              // Should never get here, deferred data should be awaited for fetchers
              // in resolveDeferredResults
              invariant(false, "Unhandled fetcher deferred data");
            } else {
              var doneFetcher = {
                state: "idle",
                data: result.data,
                formMethod: undefined,
                formAction: undefined,
                formEncType: undefined,
                formData: undefined,
                " _hasFetcherDoneAnything ": true
              };
              state.fetchers.set(key, doneFetcher);
            }
          }
          return {
            loaderData: loaderData,
            errors: errors
          };
        }
        function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
          var mergedLoaderData = _extends$4({}, newLoaderData);
          var _iterator12 = _createForOfIteratorHelper(matches),
            _step11;
          try {
            for (_iterator12.s(); !(_step11 = _iterator12.n()).done;) {
              var _match4 = _step11.value;
              var _id2 = _match4.route.id;
              if (newLoaderData.hasOwnProperty(_id2)) {
                if (newLoaderData[_id2] !== undefined) {
                  mergedLoaderData[_id2] = newLoaderData[_id2];
                }
              } else if (loaderData[_id2] !== undefined && _match4.route.loader) {
                // Preserve existing keys not included in newLoaderData and where a loader
                // wasn't removed by HMR
                mergedLoaderData[_id2] = loaderData[_id2];
              }
              if (errors && errors.hasOwnProperty(_id2)) {
                // Don't keep any loader data below the boundary
                break;
              }
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
          return mergedLoaderData;
        } // Find the nearest error boundary, looking upwards from the leaf route (or the
        // route specified by routeId) for the closest ancestor error boundary,
        // defaulting to the root match

        function findNearestBoundary(matches, routeId) {
          var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {
            return m.route.id === routeId;
          }) + 1) : _toConsumableArray(matches);
          return eligibleMatches.reverse().find(function (m) {
            return m.route.hasErrorBoundary === true;
          }) || matches[0];
        }
        function getShortCircuitMatches(routes) {
          // Prefer a root layout route if present, otherwise shim in a route object
          var route = routes.find(function (r) {
            return r.index || !r.path || r.path === "/";
          }) || {
            id: "__shim-error-route__"
          };
          return {
            matches: [{
              params: {},
              pathname: "",
              pathnameBase: "",
              route: route
            }],
            route: route
          };
        }
        function getInternalRouterError(status, _temp4) {
          var _ref13 = _temp4 === void 0 ? {} : _temp4,
            pathname = _ref13.pathname,
            routeId = _ref13.routeId,
            method = _ref13.method,
            type = _ref13.type;
          var statusText = "Unknown Server Error";
          var errorMessage = "Unknown @remix-run/router error";
          if (status === 400) {
            statusText = "Bad Request";
            if (method && pathname && routeId) {
              errorMessage = "You made a " + method + " request to \"" + pathname + "\" but " + ("did not provide a `loader` for route \"" + routeId + "\", ") + "so there is no way to handle the request.";
            } else if (type === "defer-action") {
              errorMessage = "defer() is not supported in actions";
            }
          } else if (status === 403) {
            statusText = "Forbidden";
            errorMessage = "Route \"" + routeId + "\" does not match URL \"" + pathname + "\"";
          } else if (status === 404) {
            statusText = "Not Found";
            errorMessage = "No route matches URL \"" + pathname + "\"";
          } else if (status === 405) {
            statusText = "Method Not Allowed";
            if (method && pathname && routeId) {
              errorMessage = "You made a " + method.toUpperCase() + " request to \"" + pathname + "\" but " + ("did not provide an `action` for route \"" + routeId + "\", ") + "so there is no way to handle the request.";
            } else if (method) {
              errorMessage = "Invalid request method \"" + method.toUpperCase() + "\"";
            }
          }
          return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);
        } // Find any returned redirect errors, starting from the lowest match

        function findRedirect(results) {
          for (var i = results.length - 1; i >= 0; i--) {
            var result = results[i];
            if (isRedirectResult(result)) {
              return result;
            }
          }
        }
        function stripHashFromPath(path) {
          var parsedPath = typeof path === "string" ? parsePath(path) : path;
          return createPath(_extends$4({}, parsedPath, {
            hash: ""
          }));
        }
        function isHashChangeOnly(a, b) {
          if (a.pathname !== b.pathname || a.search !== b.search) {
            return false;
          }
          if (a.hash === "") {
            // /page -> /page#hash
            return b.hash !== "";
          } else if (a.hash === b.hash) {
            // /page#hash -> /page#hash
            return true;
          } else if (b.hash !== "") {
            // /page#hash -> /page#other
            return true;
          } // If the hash is removed the browser will re-perform a request to the server
          // /page#hash -> /page

          return false;
        }
        function isDeferredResult(result) {
          return result.type === ResultType.deferred;
        }
        function isErrorResult(result) {
          return result.type === ResultType.error;
        }
        function isRedirectResult(result) {
          return (result && result.type) === ResultType.redirect;
        }
        function isDeferredData(value) {
          var deferred = value;
          return deferred && _typeof2(deferred) === "object" && _typeof2(deferred.data) === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
        }
        function isResponse(value) {
          return value != null && typeof value.status === "number" && typeof value.statusText === "string" && _typeof2(value.headers) === "object" && typeof value.body !== "undefined";
        }
        function isValidMethod(method) {
          return validRequestMethods.has(method.toLowerCase());
        }
        function isMutationMethod(method) {
          return validMutationMethods.has(method.toLowerCase());
        }
        function resolveDeferredResults(_x55, _x56, _x57, _x58, _x59, _x60) {
          return _resolveDeferredResults.apply(this, arguments);
        }
        function _resolveDeferredResults() {
          _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee65(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {
            var _loop3, _index3, _ret;
            return _regeneratorRuntime().wrap(function _callee65$(_context66) {
              while (1) switch (_context66.prev = _context66.next) {
                case 0:
                  _loop3 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop3(_index3) {
                    var result, match, currentMatch, isRevalidatingLoader, signal;
                    return _regeneratorRuntime().wrap(function _loop3$(_context65) {
                      while (1) switch (_context65.prev = _context65.next) {
                        case 0:
                          result = results[_index3];
                          match = matchesToLoad[_index3]; // If we don't have a match, then we can have a deferred result to do
                          // anything with.  This is for revalidating fetchers where the route was
                          // removed during HMR
                          if (match) {
                            _context65.next = 4;
                            break;
                          }
                          return _context65.abrupt("return", "continue");
                        case 4:
                          currentMatch = currentMatches.find(function (m) {
                            return m.route.id === match.route.id;
                          });
                          isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;
                          if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {
                            _context65.next = 11;
                            break;
                          }
                          // Note: we do not have to touch activeDeferreds here since we race them
                          // against the signal in resolveDeferredData and they'll get aborted
                          // there if needed
                          signal = signals[_index3];
                          invariant(signal, "Expected an AbortSignal for revalidating fetcher deferred result");
                          _context65.next = 11;
                          return resolveDeferredData(result, signal, isFetcher).then(function (result) {
                            if (result) {
                              results[_index3] = result || results[_index3];
                            }
                          });
                        case 11:
                        case "end":
                          return _context65.stop();
                      }
                    }, _loop3);
                  });
                  _index3 = 0;
                case 2:
                  if (!(_index3 < results.length)) {
                    _context66.next = 10;
                    break;
                  }
                  return _context66.delegateYield(_loop3(_index3), "t0", 4);
                case 4:
                  _ret = _context66.t0;
                  if (!(_ret === "continue")) {
                    _context66.next = 7;
                    break;
                  }
                  return _context66.abrupt("continue", 7);
                case 7:
                  _index3++;
                  _context66.next = 2;
                  break;
                case 10:
                case "end":
                  return _context66.stop();
              }
            }, _callee65);
          }));
          return _resolveDeferredResults.apply(this, arguments);
        }
        function resolveDeferredData(_x61, _x62, _x63) {
          return _resolveDeferredData.apply(this, arguments);
        }
        function _resolveDeferredData() {
          _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee66(result, signal, unwrap) {
            var aborted;
            return _regeneratorRuntime().wrap(function _callee66$(_context67) {
              while (1) switch (_context67.prev = _context67.next) {
                case 0:
                  if (unwrap === void 0) {
                    unwrap = false;
                  }
                  _context67.next = 3;
                  return result.deferredData.resolveData(signal);
                case 3:
                  aborted = _context67.sent;
                  if (!aborted) {
                    _context67.next = 6;
                    break;
                  }
                  return _context67.abrupt("return");
                case 6:
                  if (!unwrap) {
                    _context67.next = 14;
                    break;
                  }
                  _context67.prev = 7;
                  return _context67.abrupt("return", {
                    type: ResultType.data,
                    data: result.deferredData.unwrappedData
                  });
                case 11:
                  _context67.prev = 11;
                  _context67.t0 = _context67["catch"](7);
                  return _context67.abrupt("return", {
                    type: ResultType.error,
                    error: _context67.t0
                  });
                case 14:
                  return _context67.abrupt("return", {
                    type: ResultType.data,
                    data: result.deferredData.data
                  });
                case 15:
                case "end":
                  return _context67.stop();
              }
            }, _callee66, null, [[7, 11]]);
          }));
          return _resolveDeferredData.apply(this, arguments);
        }
        function hasNakedIndexQuery(search) {
          return new URLSearchParams(search).getAll("index").some(function (v) {
            return v === "";
          });
        } // Note: This should match the format exported by useMatches, so if you change
        // this please also change that :)  Eventually we'll DRY this up

        function createUseMatchesMatch(match, loaderData) {
          var route = match.route,
            pathname = match.pathname,
            params = match.params;
          return {
            id: route.id,
            pathname: pathname,
            params: params,
            data: loaderData[route.id],
            handle: route.handle
          };
        }
        function getTargetMatch(matches, location) {
          var search = typeof location === "string" ? parsePath(location).search : location.search;
          if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {
            // Return the leaf index route when index is present
            return matches[matches.length - 1];
          } // Otherwise grab the deepest "path contributing" match (ignoring index and
          // pathless layout routes)

          var pathMatches = getPathContributingMatches(matches);
          return pathMatches[pathMatches.length - 1];
        } //#endregion

        /**
         * React Router v6.11.2
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */

        function _extends$3() {
          _extends$3 = Object.assign ? Object.assign.bind() : function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends$3.apply(this, arguments);
        }
        var DataRouterContext = /*#__PURE__*/reactExports.createContext(null);
        var DataRouterStateContext = /*#__PURE__*/reactExports.createContext(null);
        var NavigationContext = /*#__PURE__*/reactExports.createContext(null);
        var LocationContext = /*#__PURE__*/reactExports.createContext(null);
        var RouteContext = /*#__PURE__*/reactExports.createContext({
          outlet: null,
          matches: [],
          isDataRoute: false
        });
        var RouteErrorContext = /*#__PURE__*/reactExports.createContext(null);
        /**
         * Returns true if this component is a descendant of a <Router>.
         *
         * @see https://reactrouter.com/hooks/use-in-router-context
         */

        function useInRouterContext() {
          return reactExports.useContext(LocationContext) != null;
        }
        /**
         * Returns the current location object, which represents the current URL in web
         * browsers.
         *
         * Note: If you're using this it may mean you're doing some of your own
         * "routing" in your app, and we'd like to know what your use case is. We may
         * be able to provide something higher-level to better suit your needs.
         *
         * @see https://reactrouter.com/hooks/use-location
         */

        function useLocation() {
          !useInRouterContext() ? invariant(false) : void 0;
          return reactExports.useContext(LocationContext).location;
        }
        function useIsomorphicLayoutEffect$2(cb) {
          var isStatic = reactExports.useContext(NavigationContext).static;
          if (!isStatic) {
            // We should be able to get rid of this once react 18.3 is released
            // See: https://github.com/facebook/react/pull/26395
            // eslint-disable-next-line react-hooks/rules-of-hooks
            reactExports.useLayoutEffect(cb);
          }
        }
        /**
         * Returns an imperative method for changing the location. Used by <Link>s, but
         * may also be used by other elements to change the location.
         *
         * @see https://reactrouter.com/hooks/use-navigate
         */

        function useNavigate() {
          var _reactExports$useCont = reactExports.useContext(RouteContext),
            isDataRoute = _reactExports$useCont.isDataRoute; // Conditional usage is OK here because the usage of a data router is static
          // eslint-disable-next-line react-hooks/rules-of-hooks

          return isDataRoute ? useNavigateStable() : useNavigateUnstable();
        }
        function useNavigateUnstable() {
          !useInRouterContext() ? invariant(false) : void 0;
          var dataRouterContext = reactExports.useContext(DataRouterContext);
          var _reactExports$useCont2 = reactExports.useContext(NavigationContext),
            basename = _reactExports$useCont2.basename,
            navigator = _reactExports$useCont2.navigator;
          var _reactExports$useCont3 = reactExports.useContext(RouteContext),
            matches = _reactExports$useCont3.matches;
          var _useLocation = useLocation(),
            locationPathname = _useLocation.pathname;
          var routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map(function (match) {
            return match.pathnameBase;
          }));
          var activeRef = reactExports.useRef(false);
          useIsomorphicLayoutEffect$2(function () {
            activeRef.current = true;
          });
          var navigate = reactExports.useCallback(function (to, options) {
            if (options === void 0) {
              options = {};
            }
            // is useless because we haven't wired up our history listener yet

            if (!activeRef.current) return;
            if (typeof to === "number") {
              navigator.go(to);
              return;
            }
            var path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path"); // If we're operating within a basename, prepend it to the pathname prior
            // to handing off to history (but only if we're not in a data router,
            // otherwise it'll prepend the basename inside of the router).
            // If this is a root navigation, then we navigate to the raw basename
            // which allows the basename to have full control over the presence of a
            // trailing slash on root links

            if (dataRouterContext == null && basename !== "/") {
              path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
            }
            (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);
          }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);
          return navigate;
        }
        var OutletContext = /*#__PURE__*/reactExports.createContext(null);
        /**
         * Returns the element for the child route at this level of the route
         * hierarchy. Used internally by <Outlet> to render child routes.
         *
         * @see https://reactrouter.com/hooks/use-outlet
         */

        function useOutlet(context) {
          var outlet = reactExports.useContext(RouteContext).outlet;
          if (outlet) {
            return /*#__PURE__*/reactExports.createElement(OutletContext.Provider, {
              value: context
            }, outlet);
          }
          return outlet;
        }
        function useRoutesImpl(routes, locationArg, dataRouterState) {
          !useInRouterContext() ? invariant(false) : void 0;
          var _reactExports$useCont4 = reactExports.useContext(NavigationContext),
            navigator = _reactExports$useCont4.navigator;
          var _reactExports$useCont5 = reactExports.useContext(RouteContext),
            parentMatches = _reactExports$useCont5.matches;
          var routeMatch = parentMatches[parentMatches.length - 1];
          var parentParams = routeMatch ? routeMatch.params : {};
          routeMatch ? routeMatch.pathname : "/";
          var parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
          routeMatch && routeMatch.route;
          var locationFromContext = useLocation();
          var location;
          if (locationArg) {
            var _parsedLocationArg$pa;
            var parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
            !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false) : void 0;
            location = parsedLocationArg;
          } else {
            location = locationFromContext;
          }
          var pathname = location.pathname || "/";
          var remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
          var matches = matchRoutes(routes, {
            pathname: remainingPathname
          });
          var renderedMatches = _renderMatches(matches && matches.map(function (match) {
            return Object.assign({}, match, {
              params: Object.assign({}, parentParams, match.params),
              pathname: joinPaths([parentPathnameBase,
              // Re-encode pathnames that were decoded inside matchRoutes
              navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),
              pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([parentPathnameBase,
              // Re-encode pathnames that were decoded inside matchRoutes
              navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])
            });
          }), parentMatches, dataRouterState); // When a user passes in a `locationArg`, the associated routes need to
          // be wrapped in a new `LocationContext.Provider` in order for `useLocation`
          // to use the scoped location instead of the global location.

          if (locationArg && renderedMatches) {
            return /*#__PURE__*/reactExports.createElement(LocationContext.Provider, {
              value: {
                location: _extends$3({
                  pathname: "/",
                  search: "",
                  hash: "",
                  state: null,
                  key: "default"
                }, location),
                navigationType: Action.Pop
              }
            }, renderedMatches);
          }
          return renderedMatches;
        }
        function DefaultErrorComponent() {
          var error = useRouteError();
          var message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
          var stack = error instanceof Error ? error.stack : null;
          var lightgrey = "rgba(200,200,200, 0.5)";
          var preStyles = {
            padding: "0.5rem",
            backgroundColor: lightgrey
          };
          var devInfo = null;
          return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement("h2", null, "Unexpected Application Error!"), /*#__PURE__*/reactExports.createElement("h3", {
            style: {
              fontStyle: "italic"
            }
          }, message), stack ? /*#__PURE__*/reactExports.createElement("pre", {
            style: preStyles
          }, stack) : null, devInfo);
        }
        var defaultErrorElement = /*#__PURE__*/reactExports.createElement(DefaultErrorComponent, null);
        var RenderErrorBoundary = /*#__PURE__*/function (_reactExports$Compone) {
          _inherits(RenderErrorBoundary, _reactExports$Compone);
          var _super = _createSuper(RenderErrorBoundary);
          function RenderErrorBoundary(props) {
            var _this5;
            _classCallCheck(this, RenderErrorBoundary);
            _this5 = _super.call(this, props);
            _this5.state = {
              location: props.location,
              revalidation: props.revalidation,
              error: props.error
            };
            return _this5;
          }
          _createClass(RenderErrorBoundary, [{
            key: "componentDidCatch",
            value: function componentDidCatch(error, errorInfo) {
              console.error("React Router caught the following error during render", error, errorInfo);
            }
          }, {
            key: "render",
            value: function render() {
              return this.state.error ? /*#__PURE__*/reactExports.createElement(RouteContext.Provider, {
                value: this.props.routeContext
              }, /*#__PURE__*/reactExports.createElement(RouteErrorContext.Provider, {
                value: this.state.error,
                children: this.props.component
              })) : this.props.children;
            }
          }], [{
            key: "getDerivedStateFromError",
            value: function getDerivedStateFromError(error) {
              return {
                error: error
              };
            }
          }, {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(props, state) {
              // When we get into an error state, the user will likely click "back" to the
              // previous page that didn't have an error. Because this wraps the entire
              // application, that will have no effect--the error page continues to display.
              // This gives us a mechanism to recover from the error when the location changes.
              //
              // Whether we're in an error state or not, we update the location in state
              // so that when we are in an error state, it gets reset when a new location
              // comes in and the user recovers from the error.
              if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
                return {
                  error: props.error,
                  location: props.location,
                  revalidation: props.revalidation
                };
              } // If we're not changing locations, preserve the location but still surface
              // any new errors that may come through. We retain the existing error, we do
              // this because the error provided from the app state may be cleared without
              // the location changing.

              return {
                error: props.error || state.error,
                location: state.location,
                revalidation: props.revalidation || state.revalidation
              };
            }
          }]);
          return RenderErrorBoundary;
        }(reactExports.Component);
        function RenderedRoute(_ref) {
          var routeContext = _ref.routeContext,
            match = _ref.match,
            children = _ref.children;
          var dataRouterContext = reactExports.useContext(DataRouterContext); // Track how deep we got in our render pass to emulate SSR componentDidCatch
          // in a DataStaticRouter

          if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
            dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
          }
          return /*#__PURE__*/reactExports.createElement(RouteContext.Provider, {
            value: routeContext
          }, children);
        }
        function _renderMatches(matches, parentMatches, dataRouterState) {
          var _dataRouterState2;
          if (parentMatches === void 0) {
            parentMatches = [];
          }
          if (dataRouterState === void 0) {
            dataRouterState = null;
          }
          if (matches == null) {
            var _dataRouterState;
            if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
              // Don't bail if we have data router errors so we can render them in the
              // boundary.  Use the pre-matched (or shimmed) matches
              matches = dataRouterState.matches;
            } else {
              return null;
            }
          }
          var renderedMatches = matches; // If we have data errors, trim matches to the highest error boundary

          var errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
          if (errors != null) {
            var errorIndex = renderedMatches.findIndex(function (m) {
              return m.route.id && (errors == null ? void 0 : errors[m.route.id]);
            });
            !(errorIndex >= 0) ? invariant(false) : void 0;
            renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
          }
          return renderedMatches.reduceRight(function (outlet, match, index) {
            var error = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null; // Only data routers handle errors

            var errorElement = null;
            if (dataRouterState) {
              errorElement = match.route.errorElement || defaultErrorElement;
            }
            var matches = parentMatches.concat(renderedMatches.slice(0, index + 1));
            var getChildren = function getChildren() {
              var children;
              if (error) {
                children = errorElement;
              } else if (match.route.Component) {
                // Note: This is a de-optimized path since React won't re-use the
                // ReactElement since it's identity changes with each new
                // React.createElement call.  We keep this so folks can use
                // `<Route Component={...}>` in `<Routes>` but generally `Component`
                // usage is only advised in `RouterProvider` when we can convert it to
                // `element` ahead of time.
                children = /*#__PURE__*/reactExports.createElement(match.route.Component, null);
              } else if (match.route.element) {
                children = match.route.element;
              } else {
                children = outlet;
              }
              return /*#__PURE__*/reactExports.createElement(RenderedRoute, {
                match: match,
                routeContext: {
                  outlet: outlet,
                  matches: matches,
                  isDataRoute: dataRouterState != null
                },
                children: children
              });
            }; // Only wrap in an error boundary within data router usages when we have an
            // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to
            // an ancestor ErrorBoundary/errorElement

            return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/reactExports.createElement(RenderErrorBoundary, {
              location: dataRouterState.location,
              revalidation: dataRouterState.revalidation,
              component: errorElement,
              error: error,
              children: getChildren(),
              routeContext: {
                outlet: null,
                matches: matches,
                isDataRoute: true
              }
            }) : getChildren();
          }, null);
        }
        var DataRouterHook$1;
        (function (DataRouterHook) {
          DataRouterHook["UseBlocker"] = "useBlocker";
          DataRouterHook["UseRevalidator"] = "useRevalidator";
          DataRouterHook["UseNavigateStable"] = "useNavigate";
        })(DataRouterHook$1 || (DataRouterHook$1 = {}));
        var DataRouterStateHook$1;
        (function (DataRouterStateHook) {
          DataRouterStateHook["UseBlocker"] = "useBlocker";
          DataRouterStateHook["UseLoaderData"] = "useLoaderData";
          DataRouterStateHook["UseActionData"] = "useActionData";
          DataRouterStateHook["UseRouteError"] = "useRouteError";
          DataRouterStateHook["UseNavigation"] = "useNavigation";
          DataRouterStateHook["UseRouteLoaderData"] = "useRouteLoaderData";
          DataRouterStateHook["UseMatches"] = "useMatches";
          DataRouterStateHook["UseRevalidator"] = "useRevalidator";
          DataRouterStateHook["UseNavigateStable"] = "useNavigate";
          DataRouterStateHook["UseRouteId"] = "useRouteId";
        })(DataRouterStateHook$1 || (DataRouterStateHook$1 = {}));
        function useDataRouterContext(hookName) {
          var ctx = reactExports.useContext(DataRouterContext);
          !ctx ? invariant(false) : void 0;
          return ctx;
        }
        function useDataRouterState(hookName) {
          var state = reactExports.useContext(DataRouterStateContext);
          !state ? invariant(false) : void 0;
          return state;
        }
        function useRouteContext(hookName) {
          var route = reactExports.useContext(RouteContext);
          !route ? invariant(false) : void 0;
          return route;
        } // Internal version with hookName-aware debugging

        function useCurrentRouteId(hookName) {
          var route = useRouteContext();
          var thisRoute = route.matches[route.matches.length - 1];
          !thisRoute.route.id ? invariant(false) : void 0;
          return thisRoute.route.id;
        }
        /**
         * Returns the loader data for the nearest ancestor Route loader
         */

        function useLoaderData() {
          var state = useDataRouterState(DataRouterStateHook$1.UseLoaderData);
          var routeId = useCurrentRouteId(DataRouterStateHook$1.UseLoaderData);
          if (state.errors && state.errors[routeId] != null) {
            console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
            return undefined;
          }
          return state.loaderData[routeId];
        }
        /**
         * Returns the nearest ancestor Route error, which could be a loader/action
         * error or a render error.  This is intended to be called from your
         * ErrorBoundary/errorElement to display a proper error message.
         */

        function useRouteError() {
          var _state$errors;
          var error = reactExports.useContext(RouteErrorContext);
          var state = useDataRouterState(DataRouterStateHook$1.UseRouteError);
          var routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError); // If this was a render error, we put it in a RouteError context inside
          // of RenderErrorBoundary

          if (error) {
            return error;
          } // Otherwise look for errors from our data router state

          return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
        }
        /**
         * Stable version of useNavigate that is used when we are in the context of
         * a RouterProvider.
         */

        function useNavigateStable() {
          var _useDataRouterContext = useDataRouterContext(DataRouterHook$1.UseNavigateStable),
            router = _useDataRouterContext.router;
          var id = useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable);
          var activeRef = reactExports.useRef(false);
          useIsomorphicLayoutEffect$2(function () {
            activeRef.current = true;
          });
          var navigate = reactExports.useCallback(function (to, options) {
            if (options === void 0) {
              options = {};
            }
            // is useless because we haven't wired up our router subscriber yet

            if (!activeRef.current) return;
            if (typeof to === "number") {
              router.navigate(to);
            } else {
              router.navigate(to, _extends$3({
                fromRouteId: id
              }, options));
            }
          }, [router, id]);
          return navigate;
        }

        /**
         * Given a Remix Router instance, render the appropriate UI
         */
        function RouterProvider(_ref) {
          var fallbackElement = _ref.fallbackElement,
            router = _ref.router;
          // Need to use a layout effect here so we are subscribed early enough to
          // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)
          var _reactExports$useStat39 = reactExports.useState(router.state),
            _reactExports$useStat40 = _slicedToArray2(_reactExports$useStat39, 2),
            state = _reactExports$useStat40[0],
            setState = _reactExports$useStat40[1];
          reactExports.useLayoutEffect(function () {
            return router.subscribe(setState);
          }, [router, setState]);
          var navigator = reactExports.useMemo(function () {
            return {
              createHref: router.createHref,
              encodeLocation: router.encodeLocation,
              go: function go(n) {
                return router.navigate(n);
              },
              push: function push(to, state, opts) {
                return router.navigate(to, {
                  state: state,
                  preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                });
              },
              replace: function replace(to, state, opts) {
                return router.navigate(to, {
                  replace: true,
                  state: state,
                  preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                });
              }
            };
          }, [router]);
          var basename = router.basename || "/";
          var dataRouterContext = reactExports.useMemo(function () {
            return {
              router: router,
              navigator: navigator,
              static: false,
              basename: basename
            };
          }, [router, navigator, basename]); // The fragment and {null} here are important!  We need them to keep React 18's
          // useId happy when we are server-rendering since we may have a <script> here
          // containing the hydrated server-side staticContext (from StaticRouterProvider).
          // useId relies on the component tree structure to generate deterministic id's
          // so we need to ensure it remains the same on the client even though
          // we don't need the <script> tag

          return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(DataRouterContext.Provider, {
            value: dataRouterContext
          }, /*#__PURE__*/reactExports.createElement(DataRouterStateContext.Provider, {
            value: state
          }, /*#__PURE__*/reactExports.createElement(Router, {
            basename: router.basename,
            location: router.state.location,
            navigationType: router.state.historyAction,
            navigator: navigator
          }, router.state.initialized ? /*#__PURE__*/reactExports.createElement(DataRoutes, {
            routes: router.routes,
            state: state
          }) : fallbackElement))), null);
        }
        function DataRoutes(_ref2) {
          var routes = _ref2.routes,
            state = _ref2.state;
          return useRoutesImpl(routes, undefined, state);
        }

        /**
         * Changes the current location.
         *
         * Note: This API is mostly useful in React.Component subclasses that are not
         * able to use hooks. In functional components, we recommend you use the
         * `useNavigate` hook instead.
         *
         * @see https://reactrouter.com/components/navigate
         */
        function Navigate(_ref4) {
          var to = _ref4.to,
            replace = _ref4.replace,
            state = _ref4.state,
            relative = _ref4.relative;
          !useInRouterContext() ? invariant(false) : void 0;
          var _reactExports$useCont6 = reactExports.useContext(RouteContext),
            matches = _reactExports$useCont6.matches;
          var _useLocation2 = useLocation(),
            locationPathname = _useLocation2.pathname;
          var navigate = useNavigate(); // Resolve the path outside of the effect so that when effects run twice in
          // StrictMode they navigate to the same place

          var path = resolveTo(to, getPathContributingMatches(matches).map(function (match) {
            return match.pathnameBase;
          }), locationPathname, relative === "path");
          var jsonPath = JSON.stringify(path);
          reactExports.useEffect(function () {
            return navigate(JSON.parse(jsonPath), {
              replace: replace,
              state: state,
              relative: relative
            });
          }, [navigate, jsonPath, relative, replace, state]);
          return null;
        }

        /**
         * Renders the child route's element, if there is one.
         *
         * @see https://reactrouter.com/components/outlet
         */
        function Outlet(props) {
          return useOutlet(props.context);
        }

        /**
         * Declares an element that should be rendered at a certain URL path.
         *
         * @see https://reactrouter.com/components/route
         */
        function Route(_props) {
          invariant(false);
        }

        /**
         * Provides location context for the rest of the app.
         *
         * Note: You usually won't render a <Router> directly. Instead, you'll render a
         * router that is more specific to your environment such as a <BrowserRouter>
         * in web browsers or a <StaticRouter> for server rendering.
         *
         * @see https://reactrouter.com/router-components/router
         */
        function Router(_ref5) {
          var _ref5$basename = _ref5.basename,
            basenameProp = _ref5$basename === void 0 ? "/" : _ref5$basename,
            _ref5$children = _ref5.children,
            children = _ref5$children === void 0 ? null : _ref5$children,
            locationProp = _ref5.location,
            _ref5$navigationType = _ref5.navigationType,
            navigationType = _ref5$navigationType === void 0 ? Action.Pop : _ref5$navigationType,
            navigator = _ref5.navigator,
            _ref5$static = _ref5.static,
            staticProp = _ref5$static === void 0 ? false : _ref5$static;
          !!useInRouterContext() ? invariant(false) : void 0; // Preserve trailing slashes on basename, so we can let the user control
          // the enforcement of trailing slashes throughout the app

          var basename = basenameProp.replace(/^\/*/, "/");
          var navigationContext = reactExports.useMemo(function () {
            return {
              basename: basename,
              navigator: navigator,
              static: staticProp
            };
          }, [basename, navigator, staticProp]);
          if (typeof locationProp === "string") {
            locationProp = parsePath(locationProp);
          }
          var _locationProp = locationProp,
            _locationProp$pathnam = _locationProp.pathname,
            pathname = _locationProp$pathnam === void 0 ? "/" : _locationProp$pathnam,
            _locationProp$search = _locationProp.search,
            search = _locationProp$search === void 0 ? "" : _locationProp$search,
            _locationProp$hash = _locationProp.hash,
            hash = _locationProp$hash === void 0 ? "" : _locationProp$hash,
            _locationProp$state = _locationProp.state,
            state = _locationProp$state === void 0 ? null : _locationProp$state,
            _locationProp$key = _locationProp.key,
            key = _locationProp$key === void 0 ? "default" : _locationProp$key;
          var locationContext = reactExports.useMemo(function () {
            var trailingPathname = stripBasename(pathname, basename);
            if (trailingPathname == null) {
              return null;
            }
            return {
              location: {
                pathname: trailingPathname,
                search: search,
                hash: hash,
                state: state,
                key: key
              },
              navigationType: navigationType
            };
          }, [basename, pathname, search, hash, state, key, navigationType]);
          if (locationContext == null) {
            return null;
          }
          return /*#__PURE__*/reactExports.createElement(NavigationContext.Provider, {
            value: navigationContext
          }, /*#__PURE__*/reactExports.createElement(LocationContext.Provider, {
            children: children,
            value: locationContext
          }));
        }
        var AwaitRenderStatus;
        (function (AwaitRenderStatus) {
          AwaitRenderStatus[AwaitRenderStatus["pending"] = 0] = "pending";
          AwaitRenderStatus[AwaitRenderStatus["success"] = 1] = "success";
          AwaitRenderStatus[AwaitRenderStatus["error"] = 2] = "error";
        })(AwaitRenderStatus || (AwaitRenderStatus = {}));
        new Promise(function () {});
        // UTILS
        ///////////////////////////////////////////////////////////////////////////////

        /**
         * Creates a route config from a React "children" object, which is usually
         * either a `<Route>` element or an array of them. Used internally by
         * `<Routes>` to create a route config from its children.
         *
         * @see https://reactrouter.com/utils/create-routes-from-children
         */

        function createRoutesFromChildren(children, parentPath) {
          if (parentPath === void 0) {
            parentPath = [];
          }
          var routes = [];
          reactExports.Children.forEach(children, function (element, index) {
            if (! /*#__PURE__*/reactExports.isValidElement(element)) {
              // Ignore non-elements. This allows people to more easily inline
              // conditionals in their route config.
              return;
            }
            var treePath = [].concat(_toConsumableArray(parentPath), [index]);
            if (element.type === reactExports.Fragment) {
              // Transparently support React.Fragment and its children.
              routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
              return;
            }
            !(element.type === Route) ? invariant(false) : void 0;
            !(!element.props.index || !element.props.children) ? invariant(false) : void 0;
            var route = {
              id: element.props.id || treePath.join("-"),
              caseSensitive: element.props.caseSensitive,
              element: element.props.element,
              Component: element.props.Component,
              index: element.props.index,
              path: element.props.path,
              loader: element.props.loader,
              action: element.props.action,
              errorElement: element.props.errorElement,
              ErrorBoundary: element.props.ErrorBoundary,
              hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
              shouldRevalidate: element.props.shouldRevalidate,
              handle: element.props.handle,
              lazy: element.props.lazy
            };
            if (element.props.children) {
              route.children = createRoutesFromChildren(element.props.children, treePath);
            }
            routes.push(route);
          });
          return routes;
        }
        function mapRouteProperties(route) {
          var updates = {
            // Note: this check also occurs in createRoutesFromChildren so update
            // there if you change this -- please and thank you!
            hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
          };
          if (route.Component) {
            Object.assign(updates, {
              element: /*#__PURE__*/reactExports.createElement(route.Component),
              Component: undefined
            });
          }
          if (route.ErrorBoundary) {
            Object.assign(updates, {
              errorElement: /*#__PURE__*/reactExports.createElement(route.ErrorBoundary),
              ErrorBoundary: undefined
            });
          }
          return updates;
        }

        /**
         * React Router DOM v6.11.2
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */

        function _extends$2() {
          _extends$2 = Object.assign ? Object.assign.bind() : function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends$2.apply(this, arguments);
        }
        function createHashRouter(routes, opts) {
          return createRouter({
            basename: opts == null ? void 0 : opts.basename,
            future: _extends$2({}, opts == null ? void 0 : opts.future, {
              v7_prependBasename: true
            }),
            history: createHashHistory({
              window: opts == null ? void 0 : opts.window
            }),
            hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
            routes: routes,
            mapRouteProperties: mapRouteProperties
          }).initialize();
        }
        function parseHydrationData() {
          var _window;
          var state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
          if (state && state.errors) {
            state = _extends$2({}, state, {
              errors: deserializeErrors(state.errors)
            });
          }
          return state;
        }
        function deserializeErrors(errors) {
          if (!errors) return null;
          var entries = Object.entries(errors);
          var serialized = {};
          for (var _i2 = 0, _entries2 = entries; _i2 < _entries2.length; _i2++) {
            var _entries2$_i = _slicedToArray2(_entries2[_i2], 2),
              key = _entries2$_i[0],
              val = _entries2$_i[1];
            // Hey you!  If you change this, please change the corresponding logic in
            // serializeErrors in react-router-dom/server.tsx :)
            if (val && val.__type === "RouteErrorResponse") {
              serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === true);
            } else if (val && val.__type === "Error") {
              var error = new Error(val.message); // Wipe away the client-side stack trace.  Nothing to fill it in with
              // because we don't serialize SSR stack traces for security reasons

              error.stack = "";
              serialized[key] = error;
            } else {
              serialized[key] = val;
            }
          }
          return serialized;
        }
        ////////////////////////////////////////////////////////////////////////////////
        //#region Hooks
        ////////////////////////////////////////////////////////////////////////////////

        var DataRouterHook;
        (function (DataRouterHook) {
          DataRouterHook["UseScrollRestoration"] = "useScrollRestoration";
          DataRouterHook["UseSubmitImpl"] = "useSubmitImpl";
          DataRouterHook["UseFetcher"] = "useFetcher";
        })(DataRouterHook || (DataRouterHook = {}));
        var DataRouterStateHook;
        (function (DataRouterStateHook) {
          DataRouterStateHook["UseFetchers"] = "useFetchers";
          DataRouterStateHook["UseScrollRestoration"] = "useScrollRestoration";
        })(DataRouterStateHook || (DataRouterStateHook = {}));
        var defaultValue = {
          permissions: [],
          authNavigate: null
        };
        var AuthContext = reactExports.createContext(defaultValue);
        var AuthProvider = function AuthProvider(_ref14) {
          var children = _ref14.children;
          var _reactExports$useStat41 = reactExports.useState([]),
            _reactExports$useStat42 = _slicedToArray2(_reactExports$useStat41, 2),
            permissions = _reactExports$useStat42[0],
            setPermissions = _reactExports$useStat42[1];
          var navigate = useNavigate();
          var authNavigate = function authNavigate(pathname, permissions2, state) {
            setPermissions(permissions2);
            navigate(pathname, state);
          };
          return /* @__PURE__ */jsxRuntimeExports.jsx(AuthContext.Provider, {
            value: {
              permissions: permissions,
              authNavigate: authNavigate
            },
            children: children
          });
        };
        var useAuth = function useAuth() {
          return reactExports.useContext(AuthContext);
        };
        var ArchiveContext = reactExports.createContext(void 0);
        var ArchiveProvider = function ArchiveProvider(_ref15) {
          var children = _ref15.children;
          var _reactExports$useStat43 = reactExports.useState(void 0),
            _reactExports$useStat44 = _slicedToArray2(_reactExports$useStat43, 2),
            archiveFileToUpload = _reactExports$useStat44[0],
            setArchiveFileToUpload = _reactExports$useStat44[1];
          var _reactExports$useStat45 = reactExports.useState(""),
            _reactExports$useStat46 = _slicedToArray2(_reactExports$useStat45, 2),
            archivePathToResetWith = _reactExports$useStat46[0],
            setArchivePathToResetWith = _reactExports$useStat46[1];
          var _reactExports$useStat47 = reactExports.useState(void 0),
            _reactExports$useStat48 = _slicedToArray2(_reactExports$useStat47, 2),
            context = _reactExports$useStat48[0],
            setContext = _reactExports$useStat48[1];
          var resetArchiveContext = function resetArchiveContext() {
            setContext(void 0);
            setArchivePathToResetWith("");
            setArchiveFileToUpload(void 0);
          };
          var handleArchivePathContext = /*#__PURE__*/function () {
            var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(path, context2) {
              var fullPath;
              return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                while (1) switch (_context11.prev = _context11.next) {
                  case 0:
                    _context11.next = 2;
                    return getPath(path);
                  case 2:
                    fullPath = _context11.sent;
                    setContext(context2);
                    setArchivePathToResetWith(fullPath);
                  case 5:
                  case "end":
                    return _context11.stop();
                }
              }, _callee11);
            }));
            return function handleArchivePathContext(_x64, _x65) {
              return _ref16.apply(this, arguments);
            };
          }();
          var handleUploadContext = function handleUploadContext(file) {
            setArchiveFileToUpload(file);
          };
          return /* @__PURE__ */jsxRuntimeExports.jsx(ArchiveContext.Provider, {
            value: {
              userWantsToArchiveReset: !!archivePathToResetWith.length,
              context: context,
              archiveFileToUpload: archiveFileToUpload,
              resetArchiveContext: resetArchiveContext,
              archivePathToResetWith: archivePathToResetWith,
              handleArchivePathContext: handleArchivePathContext,
              handleUploadContext: handleUploadContext
            },
            children: children
          });
        };
        var useArchiveContext = function useArchiveContext() {
          var archiveContext = reactExports.useContext(ArchiveContext);
          if (archiveContext === void 0) {
            throw new Error("useArchiveContext must be inside a provider");
          }
          return archiveContext;
        };
        function App() {
          var navigate = useNavigate();
          var ls = useLoaderData();
          var _reactExports$useStat49 = reactExports.useState(false),
            _reactExports$useStat50 = _slicedToArray2(_reactExports$useStat49, 2),
            load = _reactExports$useStat50[0],
            setLoad = _reactExports$useStat50[1];
          reactExports.useEffect(function () {
            if (!load) {
              setLoad(true);
              if (!ls) {
                return localStorage.setItem(getAppUID(), "1");
              }
              if (ls) {
                navigate("/dashboard");
              }
            }
          }, [ls, navigate, load]);
          return /* @__PURE__ */jsxRuntimeExports.jsx(AuthProvider, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(ArchiveProvider, {
              children: /* @__PURE__ */jsxRuntimeExports.jsx(AppProvider, {
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Outlet, {})
              })
            })
          });
        }
        var index = '';
        var grid$3 = "_grid_uqza2_1";
        var full$3 = "_full_uqza2_38";
        var styles$c = {
          grid: grid$3,
          "grid-layout": "_grid-layout_uqza2_12",
          full: full$3
        };
        var useGetInnerHeight = function useGetInnerHeight() {
          var _reactExports$useStat51 = reactExports.useState(window.innerHeight),
            _reactExports$useStat52 = _slicedToArray2(_reactExports$useStat51, 2),
            innerHeight = _reactExports$useStat52[0],
            setInnerHeight = _reactExports$useStat52[1];
          reactExports.useEffect(function () {
            window.addEventListener("resize", function () {
              setInnerHeight(window.innerHeight);
            });
          }, [window]);
          return innerHeight;
        };
        var __defProp = Object.defineProperty;
        var __export = function __export(target, all) {
          for (var name in all) __defProp(target, name, {
            get: all[name],
            enumerable: true
          });
        };

        // src/globals.ts
        var globals_exports = {};
        __export(globals_exports, {
          assign: function assign() {
            return assign$1;
          },
          colors: function colors() {
            return _colors;
          },
          createStringInterpolator: function createStringInterpolator() {
            return _createStringInterpolator;
          },
          skipAnimation: function skipAnimation() {
            return _skipAnimation;
          },
          to: function to() {
            return _to;
          },
          willAdvance: function willAdvance() {
            return _willAdvance;
          }
        });

        // ../rafz/dist/react-spring_rafz.modern.mjs
        var updateQueue = makeQueue();
        var raf = function raf(fn) {
          return schedule(fn, updateQueue);
        };
        var writeQueue = makeQueue();
        raf.write = function (fn) {
          return schedule(fn, writeQueue);
        };
        var onStartQueue = makeQueue();
        raf.onStart = function (fn) {
          return schedule(fn, onStartQueue);
        };
        var onFrameQueue = makeQueue();
        raf.onFrame = function (fn) {
          return schedule(fn, onFrameQueue);
        };
        var onFinishQueue = makeQueue();
        raf.onFinish = function (fn) {
          return schedule(fn, onFinishQueue);
        };
        var timeouts = [];
        raf.setTimeout = function (handler, ms) {
          var time = raf.now() + ms;
          var cancel = function cancel() {
            var i = timeouts.findIndex(function (t) {
              return t.cancel == cancel;
            });
            if (~i) timeouts.splice(i, 1);
            pendingCount -= ~i ? 1 : 0;
          };
          var timeout = {
            time: time,
            handler: handler,
            cancel: cancel
          };
          timeouts.splice(findTimeout(time), 0, timeout);
          pendingCount += 1;
          start();
          return timeout;
        };
        var findTimeout = function findTimeout(time) {
          return ~(~timeouts.findIndex(function (t) {
            return t.time > time;
          }) || ~timeouts.length);
        };
        raf.cancel = function (fn) {
          onStartQueue.delete(fn);
          onFrameQueue.delete(fn);
          onFinishQueue.delete(fn);
          updateQueue.delete(fn);
          writeQueue.delete(fn);
        };
        raf.sync = function (fn) {
          sync = true;
          raf.batchedUpdates(fn);
          sync = false;
        };
        raf.throttle = function (fn) {
          var lastArgs;
          function queuedFn() {
            try {
              fn.apply(void 0, _toConsumableArray(lastArgs));
            } finally {
              lastArgs = null;
            }
          }
          function throttled() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            lastArgs = args;
            raf.onStart(queuedFn);
          }
          throttled.handler = fn;
          throttled.cancel = function () {
            onStartQueue.delete(queuedFn);
            lastArgs = null;
          };
          return throttled;
        };
        var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame :
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        function () {};
        raf.use = function (impl) {
          return nativeRaf = impl;
        };
        raf.now = typeof performance != "undefined" ? function () {
          return performance.now();
        } : Date.now;
        raf.batchedUpdates = function (fn) {
          return fn();
        };
        raf.catch = console.error;
        raf.frameLoop = "always";
        raf.advance = function () {
          if (raf.frameLoop !== "demand") {
            console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
          } else {
            update();
          }
        };
        var ts = -1;
        var pendingCount = 0;
        var sync = false;
        function schedule(fn, queue) {
          if (sync) {
            queue.delete(fn);
            fn(0);
          } else {
            queue.add(fn);
            start();
          }
        }
        function start() {
          if (ts < 0) {
            ts = 0;
            if (raf.frameLoop !== "demand") {
              nativeRaf(loop);
            }
          }
        }
        function stop() {
          ts = -1;
        }
        function loop() {
          if (~ts) {
            nativeRaf(loop);
            raf.batchedUpdates(update);
          }
        }
        function update() {
          var prevTs = ts;
          ts = raf.now();
          var count = findTimeout(ts);
          if (count) {
            eachSafely(timeouts.splice(0, count), function (t) {
              return t.handler();
            });
            pendingCount -= count;
          }
          if (!pendingCount) {
            stop();
            return;
          }
          onStartQueue.flush();
          updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
          onFrameQueue.flush();
          writeQueue.flush();
          onFinishQueue.flush();
        }
        function makeQueue() {
          var next = /* @__PURE__ */new Set();
          var current = next;
          return {
            add: function add(fn) {
              pendingCount += current == next && !next.has(fn) ? 1 : 0;
              next.add(fn);
            },
            delete: function _delete(fn) {
              pendingCount -= current == next && next.has(fn) ? 1 : 0;
              return next.delete(fn);
            },
            flush: function flush(arg) {
              if (current.size) {
                next = /* @__PURE__ */new Set();
                pendingCount -= current.size;
                eachSafely(current, function (fn) {
                  return fn(arg) && next.add(fn);
                });
                pendingCount += next.size;
                current = next;
              }
            }
          };
        }
        function eachSafely(values, each2) {
          values.forEach(function (value) {
            try {
              each2(value);
            } catch (e) {
              raf.catch(e);
            }
          });
        }

        // src/helpers.ts
        function noop$1() {}
        var defineHidden = function defineHidden(obj, key, value) {
          return Object.defineProperty(obj, key, {
            value: value,
            writable: true,
            configurable: true
          });
        };
        var is = {
          arr: Array.isArray,
          obj: function obj(a) {
            return !!a && a.constructor.name === "Object";
          },
          fun: function fun(a) {
            return typeof a === "function";
          },
          str: function str(a) {
            return typeof a === "string";
          },
          num: function num(a) {
            return typeof a === "number";
          },
          und: function und(a) {
            return a === void 0;
          }
        };
        function isEqual$1(a, b) {
          if (is.arr(a)) {
            if (!is.arr(b) || a.length !== b.length) return false;
            for (var i = 0; i < a.length; i++) {
              if (a[i] !== b[i]) return false;
            }
            return true;
          }
          return a === b;
        }
        var each = function each(obj, fn) {
          return obj.forEach(fn);
        };
        function eachProp(obj, fn, ctx) {
          if (is.arr(obj)) {
            for (var i = 0; i < obj.length; i++) {
              fn.call(ctx, obj[i], "".concat(i));
            }
            return;
          }
          for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
              fn.call(ctx, obj[key], key);
            }
          }
        }
        var toArray$1 = function toArray$1(a) {
          return is.und(a) ? [] : is.arr(a) ? a : [a];
        };
        function flush(queue, iterator) {
          if (queue.size) {
            var items = Array.from(queue);
            queue.clear();
            each(items, iterator);
          }
        }
        var flushCalls = function flushCalls(queue) {
          for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
          }
          return flush(queue, function (fn) {
            return fn.apply(void 0, args);
          });
        };
        var isSSR = function isSSR() {
          return typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
        };

        // src/globals.ts
        var _createStringInterpolator;
        var _to;
        var _colors = null;
        var _skipAnimation = false;
        var _willAdvance = noop$1;
        var assign$1 = function assign$1(globals) {
          if (globals.to) _to = globals.to;
          if (globals.now) raf.now = globals.now;
          if (globals.colors !== void 0) _colors = globals.colors;
          if (globals.skipAnimation != null) _skipAnimation = globals.skipAnimation;
          if (globals.createStringInterpolator) _createStringInterpolator = globals.createStringInterpolator;
          if (globals.requestAnimationFrame) raf.use(globals.requestAnimationFrame);
          if (globals.batchedUpdates) raf.batchedUpdates = globals.batchedUpdates;
          if (globals.willAdvance) _willAdvance = globals.willAdvance;
          if (globals.frameLoop) raf.frameLoop = globals.frameLoop;
        };

        // src/FrameLoop.ts
        var startQueue = /* @__PURE__ */new Set();
        var currentFrame = [];
        var prevFrame = [];
        var priority = 0;
        var frameLoop = {
          get idle() {
            return !startQueue.size && !currentFrame.length;
          },
          /** Advance the given animation on every frame until idle. */start: function start(animation) {
            if (priority > animation.priority) {
              startQueue.add(animation);
              raf.onStart(flushStartQueue);
            } else {
              startSafely(animation);
              raf(advance);
            }
          },
          /** Advance all animations by the given time. */
          advance: advance,
          /** Call this when an animation's priority changes. */sort: function sort(animation) {
            if (priority) {
              raf.onFrame(function () {
                return frameLoop.sort(animation);
              });
            } else {
              var prevIndex = currentFrame.indexOf(animation);
              if (~prevIndex) {
                currentFrame.splice(prevIndex, 1);
                startUnsafely(animation);
              }
            }
          },
          /**
           * Clear all animations. For testing purposes.
           *
           * ☠️ Never call this from within the frameloop.
           */
          clear: function clear() {
            currentFrame = [];
            startQueue.clear();
          }
        };
        function flushStartQueue() {
          startQueue.forEach(startSafely);
          startQueue.clear();
          raf(advance);
        }
        function startSafely(animation) {
          if (!currentFrame.includes(animation)) startUnsafely(animation);
        }
        function startUnsafely(animation) {
          currentFrame.splice(findIndex$2(currentFrame, function (other) {
            return other.priority > animation.priority;
          }), 0, animation);
        }
        function advance(dt) {
          var nextFrame = prevFrame;
          for (var i = 0; i < currentFrame.length; i++) {
            var animation = currentFrame[i];
            priority = animation.priority;
            if (!animation.idle) {
              _willAdvance(animation);
              animation.advance(dt);
              if (!animation.idle) {
                nextFrame.push(animation);
              }
            }
          }
          priority = 0;
          prevFrame = currentFrame;
          prevFrame.length = 0;
          currentFrame = nextFrame;
          return currentFrame.length > 0;
        }
        function findIndex$2(arr, test) {
          var index = arr.findIndex(test);
          return index < 0 ? arr.length : index;
        }

        // src/clamp.ts
        var clamp = function clamp(min, max, v) {
          return Math.min(Math.max(v, min), max);
        };

        // src/colors.ts
        var colors2 = {
          transparent: 0,
          aliceblue: 4042850303,
          antiquewhite: 4209760255,
          aqua: 16777215,
          aquamarine: 2147472639,
          azure: 4043309055,
          beige: 4126530815,
          bisque: 4293182719,
          black: 255,
          blanchedalmond: 4293643775,
          blue: 65535,
          blueviolet: 2318131967,
          brown: 2771004159,
          burlywood: 3736635391,
          burntsienna: 3934150143,
          cadetblue: 1604231423,
          chartreuse: 2147418367,
          chocolate: 3530104575,
          coral: 4286533887,
          cornflowerblue: 1687547391,
          cornsilk: 4294499583,
          crimson: 3692313855,
          cyan: 16777215,
          darkblue: 35839,
          darkcyan: 9145343,
          darkgoldenrod: 3095792639,
          darkgray: 2846468607,
          darkgreen: 6553855,
          darkgrey: 2846468607,
          darkkhaki: 3182914559,
          darkmagenta: 2332068863,
          darkolivegreen: 1433087999,
          darkorange: 4287365375,
          darkorchid: 2570243327,
          darkred: 2332033279,
          darksalmon: 3918953215,
          darkseagreen: 2411499519,
          darkslateblue: 1211993087,
          darkslategray: 793726975,
          darkslategrey: 793726975,
          darkturquoise: 13554175,
          darkviolet: 2483082239,
          deeppink: 4279538687,
          deepskyblue: 12582911,
          dimgray: 1768516095,
          dimgrey: 1768516095,
          dodgerblue: 512819199,
          firebrick: 2988581631,
          floralwhite: 4294635775,
          forestgreen: 579543807,
          fuchsia: 4278255615,
          gainsboro: 3705462015,
          ghostwhite: 4177068031,
          gold: 4292280575,
          goldenrod: 3668254975,
          gray: 2155905279,
          green: 8388863,
          greenyellow: 2919182335,
          grey: 2155905279,
          honeydew: 4043305215,
          hotpink: 4285117695,
          indianred: 3445382399,
          indigo: 1258324735,
          ivory: 4294963455,
          khaki: 4041641215,
          lavender: 3873897215,
          lavenderblush: 4293981695,
          lawngreen: 2096890111,
          lemonchiffon: 4294626815,
          lightblue: 2916673279,
          lightcoral: 4034953471,
          lightcyan: 3774873599,
          lightgoldenrodyellow: 4210742015,
          lightgray: 3553874943,
          lightgreen: 2431553791,
          lightgrey: 3553874943,
          lightpink: 4290167295,
          lightsalmon: 4288707327,
          lightseagreen: 548580095,
          lightskyblue: 2278488831,
          lightslategray: 2005441023,
          lightslategrey: 2005441023,
          lightsteelblue: 2965692159,
          lightyellow: 4294959359,
          lime: 16711935,
          limegreen: 852308735,
          linen: 4210091775,
          magenta: 4278255615,
          maroon: 2147483903,
          mediumaquamarine: 1724754687,
          mediumblue: 52735,
          mediumorchid: 3126187007,
          mediumpurple: 2473647103,
          mediumseagreen: 1018393087,
          mediumslateblue: 2070474495,
          mediumspringgreen: 16423679,
          mediumturquoise: 1221709055,
          mediumvioletred: 3340076543,
          midnightblue: 421097727,
          mintcream: 4127193855,
          mistyrose: 4293190143,
          moccasin: 4293178879,
          navajowhite: 4292783615,
          navy: 33023,
          oldlace: 4260751103,
          olive: 2155872511,
          olivedrab: 1804477439,
          orange: 4289003775,
          orangered: 4282712319,
          orchid: 3664828159,
          palegoldenrod: 4008225535,
          palegreen: 2566625535,
          paleturquoise: 2951671551,
          palevioletred: 3681588223,
          papayawhip: 4293907967,
          peachpuff: 4292524543,
          peru: 3448061951,
          pink: 4290825215,
          plum: 3718307327,
          powderblue: 2967529215,
          purple: 2147516671,
          rebeccapurple: 1714657791,
          red: 4278190335,
          rosybrown: 3163525119,
          royalblue: 1097458175,
          saddlebrown: 2336560127,
          salmon: 4202722047,
          sandybrown: 4104413439,
          seagreen: 780883967,
          seashell: 4294307583,
          sienna: 2689740287,
          silver: 3233857791,
          skyblue: 2278484991,
          slateblue: 1784335871,
          slategray: 1887473919,
          slategrey: 1887473919,
          snow: 4294638335,
          springgreen: 16744447,
          steelblue: 1182971135,
          tan: 3535047935,
          teal: 8421631,
          thistle: 3636451583,
          tomato: 4284696575,
          turquoise: 1088475391,
          violet: 4001558271,
          wheat: 4125012991,
          white: 4294967295,
          whitesmoke: 4126537215,
          yellow: 4294902015,
          yellowgreen: 2597139199
        };

        // src/colorMatchers.ts
        var NUMBER = "[-+]?\\d*\\.?\\d+";
        var PERCENTAGE = NUMBER + "%";
        function call() {
          for (var _len4 = arguments.length, parts = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            parts[_key4] = arguments[_key4];
          }
          return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
        }
        var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
        var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
        var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
        var hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
        var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
        var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
        var hex6 = /^#([0-9a-fA-F]{6})$/;
        var hex8 = /^#([0-9a-fA-F]{8})$/;

        // src/normalizeColor.ts
        function normalizeColor(color) {
          var match;
          if (typeof color === "number") {
            return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;
          }
          if (match = hex6.exec(color)) return parseInt(match[1] + "ff", 16) >>> 0;
          if (_colors && _colors[color] !== void 0) {
            return _colors[color];
          }
          if (match = rgb.exec(color)) {
            return (parse255(match[1]) << 24 |
            // r
            parse255(match[2]) << 16 |
            // g
            parse255(match[3]) << 8 |
            // b
            255) >>>
            // a
            0;
          }
          if (match = rgba.exec(color)) {
            return (parse255(match[1]) << 24 |
            // r
            parse255(match[2]) << 16 |
            // g
            parse255(match[3]) << 8 |
            // b
            parse1(match[4])) >>>
            // a
            0;
          }
          if (match = hex3.exec(color)) {
            return parseInt(match[1] + match[1] +
            // r
            match[2] + match[2] +
            // g
            match[3] + match[3] +
            // b
            "ff",
            // a
            16) >>> 0;
          }
          if (match = hex8.exec(color)) return parseInt(match[1], 16) >>> 0;
          if (match = hex4.exec(color)) {
            return parseInt(match[1] + match[1] +
            // r
            match[2] + match[2] +
            // g
            match[3] + match[3] +
            // b
            match[4] + match[4],
            // a
            16) >>> 0;
          }
          if (match = hsl.exec(color)) {
            return (hslToRgb(parse360(match[1]),
            // h
            parsePercentage(match[2]),
            // s
            parsePercentage(match[3])
            // l
            ) | 255) >>>
            // a
            0;
          }
          if (match = hsla.exec(color)) {
            return (hslToRgb(parse360(match[1]),
            // h
            parsePercentage(match[2]),
            // s
            parsePercentage(match[3])
            // l
            ) | parse1(match[4])) >>>
            // a
            0;
          }
          return null;
        }
        function hue2rgb(p, q, t) {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
        }
        function hslToRgb(h, s, l) {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          var r = hue2rgb(p, q, h + 1 / 3);
          var g = hue2rgb(p, q, h);
          var b = hue2rgb(p, q, h - 1 / 3);
          return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
        }
        function parse255(str) {
          var int = parseInt(str, 10);
          if (int < 0) return 0;
          if (int > 255) return 255;
          return int;
        }
        function parse360(str) {
          var int = parseFloat(str);
          return (int % 360 + 360) % 360 / 360;
        }
        function parse1(str) {
          var num = parseFloat(str);
          if (num < 0) return 0;
          if (num > 1) return 255;
          return Math.round(num * 255);
        }
        function parsePercentage(str) {
          var int = parseFloat(str);
          if (int < 0) return 0;
          if (int > 100) return 1;
          return int / 100;
        }

        // src/colorToRgba.ts
        function colorToRgba(input) {
          var int32Color = normalizeColor(input);
          if (int32Color === null) return input;
          int32Color = int32Color || 0;
          var r = (int32Color & 4278190080) >>> 24;
          var g = (int32Color & 16711680) >>> 16;
          var b = (int32Color & 65280) >>> 8;
          var a = (int32Color & 255) / 255;
          return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")");
        }

        // src/createInterpolator.ts
        var createInterpolator = function createInterpolator(range, output, extrapolate) {
          if (is.fun(range)) {
            return range;
          }
          if (is.arr(range)) {
            return createInterpolator({
              range: range,
              output: output,
              extrapolate: extrapolate
            });
          }
          if (is.str(range.output[0])) {
            return _createStringInterpolator(range);
          }
          var config = range;
          var outputRange = config.output;
          var inputRange = config.range || [0, 1];
          var extrapolateLeft = config.extrapolateLeft || config.extrapolate || "extend";
          var extrapolateRight = config.extrapolateRight || config.extrapolate || "extend";
          var easing = config.easing || function (t) {
            return t;
          };
          return function (input) {
            var range2 = findRange(input, inputRange);
            return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config.map);
          };
        };
        function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
          var result = map ? map(input) : input;
          if (result < inputMin) {
            if (extrapolateLeft === "identity") return result;else if (extrapolateLeft === "clamp") result = inputMin;
          }
          if (result > inputMax) {
            if (extrapolateRight === "identity") return result;else if (extrapolateRight === "clamp") result = inputMax;
          }
          if (outputMin === outputMax) return outputMin;
          if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;
          if (inputMin === -Infinity) result = -result;else if (inputMax === Infinity) result = result - inputMin;else result = (result - inputMin) / (inputMax - inputMin);
          result = easing(result);
          if (outputMin === -Infinity) result = -result;else if (outputMax === Infinity) result = result + outputMin;else result = result * (outputMax - outputMin) + outputMin;
          return result;
        }
        function findRange(input, inputRange) {
          for (var i = 1; i < inputRange.length - 1; ++i) if (inputRange[i] >= input) break;
          return i - 1;
        }

        // src/easings.ts
        var steps = function steps(steps2) {
          var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "end";
          return function (progress2) {
            progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);
            var expanded = progress2 * steps2;
            var rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
            return clamp(0, 1, rounded / steps2);
          };
        };
        var c1 = 1.70158;
        var c2 = c1 * 1.525;
        var c3 = c1 + 1;
        var c4 = 2 * Math.PI / 3;
        var c5 = 2 * Math.PI / 4.5;
        var bounceOut = function bounceOut(x) {
          var n1 = 7.5625;
          var d1 = 2.75;
          if (x < 1 / d1) {
            return n1 * x * x;
          } else if (x < 2 / d1) {
            return n1 * (x -= 1.5 / d1) * x + 0.75;
          } else if (x < 2.5 / d1) {
            return n1 * (x -= 2.25 / d1) * x + 0.9375;
          } else {
            return n1 * (x -= 2.625 / d1) * x + 0.984375;
          }
        };
        var easings = {
          linear: function linear(x) {
            return x;
          },
          easeInQuad: function easeInQuad(x) {
            return x * x;
          },
          easeOutQuad: function easeOutQuad(x) {
            return 1 - (1 - x) * (1 - x);
          },
          easeInOutQuad: function easeInOutQuad(x) {
            return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;
          },
          easeInCubic: function easeInCubic(x) {
            return x * x * x;
          },
          easeOutCubic: function easeOutCubic(x) {
            return 1 - Math.pow(1 - x, 3);
          },
          easeInOutCubic: function easeInOutCubic(x) {
            return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;
          },
          easeInQuart: function easeInQuart(x) {
            return x * x * x * x;
          },
          easeOutQuart: function easeOutQuart(x) {
            return 1 - Math.pow(1 - x, 4);
          },
          easeInOutQuart: function easeInOutQuart(x) {
            return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;
          },
          easeInQuint: function easeInQuint(x) {
            return x * x * x * x * x;
          },
          easeOutQuint: function easeOutQuint(x) {
            return 1 - Math.pow(1 - x, 5);
          },
          easeInOutQuint: function easeInOutQuint(x) {
            return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;
          },
          easeInSine: function easeInSine(x) {
            return 1 - Math.cos(x * Math.PI / 2);
          },
          easeOutSine: function easeOutSine(x) {
            return Math.sin(x * Math.PI / 2);
          },
          easeInOutSine: function easeInOutSine(x) {
            return -(Math.cos(Math.PI * x) - 1) / 2;
          },
          easeInExpo: function easeInExpo(x) {
            return x === 0 ? 0 : Math.pow(2, 10 * x - 10);
          },
          easeOutExpo: function easeOutExpo(x) {
            return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);
          },
          easeInOutExpo: function easeInOutExpo(x) {
            return x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2;
          },
          easeInCirc: function easeInCirc(x) {
            return 1 - Math.sqrt(1 - Math.pow(x, 2));
          },
          easeOutCirc: function easeOutCirc(x) {
            return Math.sqrt(1 - Math.pow(x - 1, 2));
          },
          easeInOutCirc: function easeInOutCirc(x) {
            return x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;
          },
          easeInBack: function easeInBack(x) {
            return c3 * x * x * x - c1 * x * x;
          },
          easeOutBack: function easeOutBack(x) {
            return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);
          },
          easeInOutBack: function easeInOutBack(x) {
            return x < 0.5 ? Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2) / 2 : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;
          },
          easeInElastic: function easeInElastic(x) {
            return x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4);
          },
          easeOutElastic: function easeOutElastic(x) {
            return x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1;
          },
          easeInOutElastic: function easeInOutElastic(x) {
            return x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2 : Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5) / 2 + 1;
          },
          easeInBounce: function easeInBounce(x) {
            return 1 - bounceOut(1 - x);
          },
          easeOutBounce: bounceOut,
          easeInOutBounce: function easeInOutBounce(x) {
            return x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2;
          },
          steps: steps
        };

        // src/fluids.ts
        var $get = Symbol.for("FluidValue.get");
        var $observers = Symbol.for("FluidValue.observers");
        var hasFluidValue = function hasFluidValue(arg) {
          return Boolean(arg && arg[$get]);
        };
        var getFluidValue = function getFluidValue(arg) {
          return arg && arg[$get] ? arg[$get]() : arg;
        };
        var getFluidObservers = function getFluidObservers(target) {
          return target[$observers] || null;
        };
        function callFluidObserver(observer2, event) {
          if (observer2.eventObserved) {
            observer2.eventObserved(event);
          } else {
            observer2(event);
          }
        }
        function callFluidObservers(target, event) {
          var observers = target[$observers];
          if (observers) {
            observers.forEach(function (observer2) {
              callFluidObserver(observer2, event);
            });
          }
        }
        var FluidValue = /*#__PURE__*/_createClass(function FluidValue(get) {
          _classCallCheck(this, FluidValue);
          if (!get && !(get = this.get)) {
            throw Error("Unknown getter");
          }
          setFluidGetter(this, get);
        });
        var setFluidGetter = function setFluidGetter(target, get) {
          return setHidden(target, $get, get);
        };
        function addFluidObserver(target, observer2) {
          if (target[$get]) {
            var observers = target[$observers];
            if (!observers) {
              setHidden(target, $observers, observers = /* @__PURE__ */new Set());
            }
            if (!observers.has(observer2)) {
              observers.add(observer2);
              if (target.observerAdded) {
                target.observerAdded(observers.size, observer2);
              }
            }
          }
          return observer2;
        }
        function removeFluidObserver(target, observer2) {
          var observers = target[$observers];
          if (observers && observers.has(observer2)) {
            var count = observers.size - 1;
            if (count) {
              observers.delete(observer2);
            } else {
              target[$observers] = null;
            }
            if (target.observerRemoved) {
              target.observerRemoved(count, observer2);
            }
          }
        }
        var setHidden = function setHidden(target, key, value) {
          return Object.defineProperty(target, key, {
            value: value,
            writable: true,
            configurable: true
          });
        };

        // src/regexs.ts
        var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
        var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
        var unitRegex = new RegExp("(".concat(numberRegex.source, ")(%|[a-z]+)"), "i");
        var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
        var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;

        // src/variableToRgba.ts
        var variableToRgba = function variableToRgba(input) {
          var _parseCSSVariable = parseCSSVariable(input),
            _parseCSSVariable2 = _slicedToArray2(_parseCSSVariable, 2),
            token = _parseCSSVariable2[0],
            fallback = _parseCSSVariable2[1];
          if (!token || isSSR()) {
            return input;
          }
          var value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
          if (value) {
            return value.trim();
          } else if (fallback && fallback.startsWith("--")) {
            var value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
            if (value2) {
              return value2;
            } else {
              return input;
            }
          } else if (fallback && cssVariableRegex.test(fallback)) {
            return variableToRgba(fallback);
          } else if (fallback) {
            return fallback;
          }
          return input;
        };
        var parseCSSVariable = function parseCSSVariable(current) {
          var match = cssVariableRegex.exec(current);
          if (!match) return [,];
          var _match5 = _slicedToArray2(match, 3),
            token = _match5[1],
            fallback = _match5[2];
          return [token, fallback];
        };

        // src/stringInterpolation.ts
        var namedColorRegex;
        var rgbaRound = function rgbaRound(_, p1, p2, p3, p4) {
          return "rgba(".concat(Math.round(p1), ", ").concat(Math.round(p2), ", ").concat(Math.round(p3), ", ").concat(p4, ")");
        };
        var createStringInterpolator2 = function createStringInterpolator2(config) {
          if (!namedColorRegex) namedColorRegex = _colors ?
          // match color names, ignore partial matches
          new RegExp("(".concat(Object.keys(_colors).join("|"), ")(?!\\w)"), "g") :
          // never match
          /^\b$/;
          var output = config.output.map(function (value) {
            return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
          });
          var keyframes = output.map(function (value) {
            return value.match(numberRegex).map(Number);
          });
          var outputRanges = keyframes[0].map(function (_, i) {
            return keyframes.map(function (values) {
              if (!(i in values)) {
                throw Error('The arity of each "output" value must be equal');
              }
              return values[i];
            });
          });
          var interpolators = outputRanges.map(function (output2) {
            return createInterpolator(_objectSpread(_objectSpread({}, config), {}, {
              output: output2
            }));
          });
          return function (input) {
            var _output$find;
            var missingUnit = !unitRegex.test(output[0]) && ((_output$find = output.find(function (value) {
              return unitRegex.test(value);
            })) === null || _output$find === void 0 ? void 0 : _output$find.replace(numberRegex, ""));
            var i = 0;
            return output[0].replace(numberRegex, function () {
              return "".concat(interpolators[i++](input)).concat(missingUnit || "");
            }).replace(rgbaRegex, rgbaRound);
          };
        };

        // src/deprecations.ts
        var prefix = "react-spring: ";
        var once = function once(fn) {
          var func = fn;
          var called = false;
          if (typeof func != "function") {
            throw new TypeError("".concat(prefix, "once requires a function parameter"));
          }
          return function () {
            if (!called) {
              func.apply(void 0, arguments);
              called = true;
            }
          };
        };
        var warnInterpolate = once(console.warn);
        function deprecateInterpolate() {
          warnInterpolate("".concat(prefix, "The \"interpolate\" function is deprecated in v9 (use \"to\" instead)"));
        }
        var warnDirectCall = once(console.warn);
        function deprecateDirectCall() {
          warnDirectCall("".concat(prefix, "Directly calling start instead of using the api object is deprecated in v9 (use \".start\" instead), this will be removed in later 0.X.0 versions"));
        }

        // src/isAnimatedString.ts
        function isAnimatedString(value) {
          return is.str(value) && (value[0] == "#" || /\d/.test(value) ||
          // Do not identify a CSS variable as an AnimatedString if its SSR
          !isSSR() && cssVariableRegex.test(value) || value in (_colors || {}));
        }
        var useIsomorphicLayoutEffect$1 = isSSR() ? reactExports.useEffect : reactExports.useLayoutEffect;

        // src/hooks/useIsMounted.ts
        var useIsMounted = function useIsMounted() {
          var isMounted = reactExports.useRef(false);
          useIsomorphicLayoutEffect$1(function () {
            isMounted.current = true;
            return function () {
              isMounted.current = false;
            };
          }, []);
          return isMounted;
        };

        // src/hooks/useForceUpdate.ts
        function useForceUpdate() {
          var update2 = reactExports.useState()[1];
          var isMounted = useIsMounted();
          return function () {
            if (isMounted.current) {
              update2(Math.random());
            }
          };
        }
        function useMemoOne(getResult, inputs) {
          var _reactExports$useStat53 = reactExports.useState(function () {
              return {
                inputs: inputs,
                result: getResult()
              };
            }),
            _reactExports$useStat54 = _slicedToArray2(_reactExports$useStat53, 1),
            initial = _reactExports$useStat54[0];
          var committed = reactExports.useRef();
          var prevCache = committed.current;
          var cache = prevCache;
          if (cache) {
            var useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));
            if (!useCache) {
              cache = {
                inputs: inputs,
                result: getResult()
              };
            }
          } else {
            cache = initial;
          }
          reactExports.useEffect(function () {
            committed.current = cache;
            if (prevCache == initial) {
              initial.inputs = initial.result = void 0;
            }
          }, [cache]);
          return cache.result;
        }
        function areInputsEqual(next, prev) {
          if (next.length !== prev.length) {
            return false;
          }
          for (var i = 0; i < next.length; i++) {
            if (next[i] !== prev[i]) {
              return false;
            }
          }
          return true;
        }
        var useOnce = function useOnce(effect) {
          return reactExports.useEffect(effect, emptyDeps);
        };
        var emptyDeps = [];
        function usePrev(value) {
          var prevRef = reactExports.useRef();
          reactExports.useEffect(function () {
            prevRef.current = value;
          });
          return prevRef.current;
        }

        // src/Animated.ts
        var $node = Symbol.for("Animated:node");
        var isAnimated = function isAnimated(value) {
          return !!value && value[$node] === value;
        };
        var getAnimated = function getAnimated(owner) {
          return owner && owner[$node];
        };
        var setAnimated = function setAnimated(owner, node) {
          return defineHidden(owner, $node, node);
        };
        var getPayload = function getPayload(owner) {
          return owner && owner[$node] && owner[$node].getPayload();
        };
        var Animated = /*#__PURE__*/function () {
          function Animated() {
            _classCallCheck(this, Animated);
            setAnimated(this, this);
          }
          /** Get every `AnimatedValue` used by this node. */
          _createClass(Animated, [{
            key: "getPayload",
            value: function getPayload() {
              return this.payload || [];
            }
          }]);
          return Animated;
        }();
        var AnimatedValue = /*#__PURE__*/function (_Animated) {
          _inherits(AnimatedValue, _Animated);
          var _super2 = _createSuper(AnimatedValue);
          function AnimatedValue(_value) {
            var _this6;
            _classCallCheck(this, AnimatedValue);
            _this6 = _super2.call(this);
            _this6._value = _value;
            _this6.done = true;
            _this6.durationProgress = 0;
            if (is.num(_this6._value)) {
              _this6.lastPosition = _this6._value;
            }
            return _this6;
          }
          /** @internal */
          _createClass(AnimatedValue, [{
            key: "getPayload",
            value: function getPayload() {
              return [this];
            }
          }, {
            key: "getValue",
            value: function getValue() {
              return this._value;
            }
          }, {
            key: "setValue",
            value: function setValue(value, step) {
              if (is.num(value)) {
                this.lastPosition = value;
                if (step) {
                  value = Math.round(value / step) * step;
                  if (this.done) {
                    this.lastPosition = value;
                  }
                }
              }
              if (this._value === value) {
                return false;
              }
              this._value = value;
              return true;
            }
          }, {
            key: "reset",
            value: function reset() {
              var done = this.done;
              this.done = false;
              if (is.num(this._value)) {
                this.elapsedTime = 0;
                this.durationProgress = 0;
                this.lastPosition = this._value;
                if (done) this.lastVelocity = null;
                this.v0 = null;
              }
            }
          }], [{
            key: "create",
            value: function create(value) {
              return new AnimatedValue(value);
            }
          }]);
          return AnimatedValue;
        }(Animated);
        var AnimatedString = /*#__PURE__*/function (_AnimatedValue) {
          _inherits(AnimatedString, _AnimatedValue);
          var _super3 = _createSuper(AnimatedString);
          function AnimatedString(value) {
            var _this7;
            _classCallCheck(this, AnimatedString);
            _this7 = _super3.call(this, 0);
            _this7._string = null;
            _this7._toString = createInterpolator({
              output: [value, value]
            });
            return _this7;
          }
          /** @internal */
          _createClass(AnimatedString, [{
            key: "getValue",
            value: function getValue() {
              var value = this._string;
              return value == null ? this._string = this._toString(this._value) : value;
            }
          }, {
            key: "setValue",
            value: function setValue(value) {
              if (is.str(value)) {
                if (value == this._string) {
                  return false;
                }
                this._string = value;
                this._value = 1;
              } else if (_get(_getPrototypeOf(AnimatedString.prototype), "setValue", this).call(this, value)) {
                this._string = null;
              } else {
                return false;
              }
              return true;
            }
          }, {
            key: "reset",
            value: function reset(goal) {
              if (goal) {
                this._toString = createInterpolator({
                  output: [this.getValue(), goal]
                });
              }
              this._value = 0;
              _get(_getPrototypeOf(AnimatedString.prototype), "reset", this).call(this);
            }
          }], [{
            key: "create",
            value: function create(value) {
              return new AnimatedString(value);
            }
          }]);
          return AnimatedString;
        }(AnimatedValue);

        // src/context.ts
        var TreeContext = {
          dependencies: null
        };

        // src/AnimatedObject.ts
        var AnimatedObject = /*#__PURE__*/function (_Animated2) {
          _inherits(AnimatedObject, _Animated2);
          var _super4 = _createSuper(AnimatedObject);
          function AnimatedObject(source) {
            var _this8;
            _classCallCheck(this, AnimatedObject);
            _this8 = _super4.call(this);
            _this8.source = source;
            _this8.setValue(source);
            return _this8;
          }
          _createClass(AnimatedObject, [{
            key: "getValue",
            value: function getValue(animated) {
              var values = {};
              eachProp(this.source, function (source, key) {
                if (isAnimated(source)) {
                  values[key] = source.getValue(animated);
                } else if (hasFluidValue(source)) {
                  values[key] = getFluidValue(source);
                } else if (!animated) {
                  values[key] = source;
                }
              });
              return values;
            }
            /** Replace the raw object data */
          }, {
            key: "setValue",
            value: function setValue(source) {
              this.source = source;
              this.payload = this._makePayload(source);
            }
          }, {
            key: "reset",
            value: function reset() {
              if (this.payload) {
                each(this.payload, function (node) {
                  return node.reset();
                });
              }
            }
            /** Create a payload set. */
          }, {
            key: "_makePayload",
            value: function _makePayload(source) {
              if (source) {
                var payload = /* @__PURE__ */new Set();
                eachProp(source, this._addToPayload, payload);
                return Array.from(payload);
              }
            }
            /** Add to a payload set. */
          }, {
            key: "_addToPayload",
            value: function _addToPayload(source) {
              var _this9 = this;
              if (TreeContext.dependencies && hasFluidValue(source)) {
                TreeContext.dependencies.add(source);
              }
              var payload = getPayload(source);
              if (payload) {
                each(payload, function (node) {
                  return _this9.add(node);
                });
              }
            }
          }]);
          return AnimatedObject;
        }(Animated);

        // src/AnimatedArray.ts
        var AnimatedArray = /*#__PURE__*/function (_AnimatedObject) {
          _inherits(AnimatedArray, _AnimatedObject);
          var _super5 = _createSuper(AnimatedArray);
          function AnimatedArray(source) {
            _classCallCheck(this, AnimatedArray);
            return _super5.call(this, source);
          }
          /** @internal */
          _createClass(AnimatedArray, [{
            key: "getValue",
            value: function getValue() {
              return this.source.map(function (node) {
                return node.getValue();
              });
            }
          }, {
            key: "setValue",
            value: function setValue(source) {
              var payload = this.getPayload();
              if (source.length == payload.length) {
                return payload.map(function (node, i) {
                  return node.setValue(source[i]);
                }).some(Boolean);
              }
              _get(_getPrototypeOf(AnimatedArray.prototype), "setValue", this).call(this, source.map(makeAnimated));
              return true;
            }
          }], [{
            key: "create",
            value: function create(source) {
              return new AnimatedArray(source);
            }
          }]);
          return AnimatedArray;
        }(AnimatedObject);
        function makeAnimated(value) {
          var nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
          return nodeType.create(value);
        }
        function getAnimatedType(value) {
          var parentNode = getAnimated(value);
          return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
        }
        var withAnimated = function withAnimated(Component, host) {
          var hasInstance =
          // Function components must use "forwardRef" to avoid being
          // re-rendered on every animation frame.
          !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;
          return reactExports.forwardRef(function (givenProps, givenRef) {
            var instanceRef = reactExports.useRef(null);
            var ref = hasInstance &&
            // eslint-disable-next-line react-hooks/rules-of-hooks
            reactExports.useCallback(function (value) {
              instanceRef.current = updateRef(givenRef, value);
            }, [givenRef]);
            var _getAnimatedState = getAnimatedState(givenProps, host),
              _getAnimatedState2 = _slicedToArray2(_getAnimatedState, 2),
              props = _getAnimatedState2[0],
              deps = _getAnimatedState2[1];
            var forceUpdate = useForceUpdate();
            var callback = function callback() {
              var instance = instanceRef.current;
              if (hasInstance && !instance) {
                return;
              }
              var didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;
              if (didUpdate === false) {
                forceUpdate();
              }
            };
            var observer = new PropsObserver(callback, deps);
            var observerRef = reactExports.useRef();
            useIsomorphicLayoutEffect$1(function () {
              observerRef.current = observer;
              each(deps, function (dep) {
                return addFluidObserver(dep, observer);
              });
              return function () {
                if (observerRef.current) {
                  each(observerRef.current.deps, function (dep) {
                    return removeFluidObserver(dep, observerRef.current);
                  });
                  raf.cancel(observerRef.current.update);
                }
              };
            });
            reactExports.useEffect(callback, []);
            useOnce(function () {
              return function () {
                var observer2 = observerRef.current;
                each(observer2.deps, function (dep) {
                  return removeFluidObserver(dep, observer2);
                });
              };
            });
            var usedProps = host.getComponentProps(props.getValue());
            return /* @__PURE__ */reactExports.createElement(Component, _objectSpread(_objectSpread({}, usedProps), {}, {
              ref: ref
            }));
          });
        };
        var PropsObserver = /*#__PURE__*/function () {
          function PropsObserver(update, deps) {
            _classCallCheck(this, PropsObserver);
            this.update = update;
            this.deps = deps;
          }
          _createClass(PropsObserver, [{
            key: "eventObserved",
            value: function eventObserved(event) {
              if (event.type == "change") {
                raf.write(this.update);
              }
            }
          }]);
          return PropsObserver;
        }();
        function getAnimatedState(props, host) {
          var dependencies = /* @__PURE__ */new Set();
          TreeContext.dependencies = dependencies;
          if (props.style) props = _objectSpread(_objectSpread({}, props), {}, {
            style: host.createAnimatedStyle(props.style)
          });
          props = new AnimatedObject(props);
          TreeContext.dependencies = null;
          return [props, dependencies];
        }
        function updateRef(ref, value) {
          if (ref) {
            if (is.fun(ref)) ref(value);else ref.current = value;
          }
          return value;
        }

        // src/createHost.ts
        var cacheKey = Symbol.for("AnimatedComponent");
        var createHost = function createHost(components) {
          var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref17$applyAnimatedV = _ref17.applyAnimatedValues,
            applyAnimatedValues = _ref17$applyAnimatedV === void 0 ? function () {
              return false;
            } : _ref17$applyAnimatedV,
            _ref17$createAnimated = _ref17.createAnimatedStyle,
            createAnimatedStyle = _ref17$createAnimated === void 0 ? function (style) {
              return new AnimatedObject(style);
            } : _ref17$createAnimated,
            _ref17$getComponentPr = _ref17.getComponentProps,
            getComponentProps = _ref17$getComponentPr === void 0 ? function (props) {
              return props;
            } : _ref17$getComponentPr;
          var hostConfig = {
            applyAnimatedValues: applyAnimatedValues,
            createAnimatedStyle: createAnimatedStyle,
            getComponentProps: getComponentProps
          };
          var animated = function animated(Component) {
            var displayName = getDisplayName(Component) || "Anonymous";
            if (is.str(Component)) {
              Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));
            } else {
              Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
            }
            Component.displayName = "Animated(".concat(displayName, ")");
            return Component;
          };
          eachProp(components, function (Component, key) {
            if (is.arr(components)) {
              key = getDisplayName(Component);
            }
            animated[key] = animated(Component);
          });
          return {
            animated: animated
          };
        };
        var getDisplayName = function getDisplayName(arg) {
          return is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;
        };

        // src/hooks/useChain.ts
        function callProp(value) {
          for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
            args[_key5 - 1] = arguments[_key5];
          }
          return is.fun(value) ? value.apply(void 0, args) : value;
        }
        var matchProp = function matchProp(value, key) {
          return value === true || !!(key && value && (is.fun(value) ? value(key) : toArray$1(value).includes(key)));
        };
        var resolveProp = function resolveProp(prop, key) {
          return is.obj(prop) ? key && prop[key] : prop;
        };
        var getDefaultProp = function getDefaultProp(props, key) {
          return props.default === true ? props[key] : props.default ? props.default[key] : void 0;
        };
        var noopTransform = function noopTransform(value) {
          return value;
        };
        var getDefaultProps = function getDefaultProps(props) {
          var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noopTransform;
          var keys = DEFAULT_PROPS;
          if (props.default && props.default !== true) {
            props = props.default;
            keys = Object.keys(props);
          }
          var defaults2 = {};
          var _iterator13 = _createForOfIteratorHelper(keys),
            _step12;
          try {
            for (_iterator13.s(); !(_step12 = _iterator13.n()).done;) {
              var key = _step12.value;
              var value = transform(props[key], key);
              if (!is.und(value)) {
                defaults2[key] = value;
              }
            }
          } catch (err) {
            _iterator13.e(err);
          } finally {
            _iterator13.f();
          }
          return defaults2;
        };
        var DEFAULT_PROPS = ["config", "onProps", "onStart", "onChange", "onPause", "onResume", "onRest"];
        var RESERVED_PROPS = {
          config: 1,
          from: 1,
          to: 1,
          ref: 1,
          loop: 1,
          reset: 1,
          pause: 1,
          cancel: 1,
          reverse: 1,
          immediate: 1,
          default: 1,
          delay: 1,
          onProps: 1,
          onStart: 1,
          onChange: 1,
          onPause: 1,
          onResume: 1,
          onRest: 1,
          onResolve: 1,
          // Transition props
          items: 1,
          trail: 1,
          sort: 1,
          expires: 1,
          initial: 1,
          enter: 1,
          update: 1,
          leave: 1,
          children: 1,
          onDestroyed: 1,
          // Internal props
          keys: 1,
          callId: 1,
          parentId: 1
        };
        function getForwardProps(props) {
          var forward = {};
          var count = 0;
          eachProp(props, function (value, prop) {
            if (!RESERVED_PROPS[prop]) {
              forward[prop] = value;
              count++;
            }
          });
          if (count) {
            return forward;
          }
        }
        function inferTo(props) {
          var to2 = getForwardProps(props);
          if (to2) {
            var out = {
              to: to2
            };
            eachProp(props, function (val, key) {
              return key in to2 || (out[key] = val);
            });
            return out;
          }
          return _objectSpread({}, props);
        }
        function computeGoal(value) {
          value = getFluidValue(value);
          return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals_exports.createStringInterpolator({
            range: [0, 1],
            output: [value, value]
          })(1) : value;
        }
        function hasProps(props) {
          for (var _ in props) return true;
          return false;
        }
        function isAsyncTo(to2) {
          return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);
        }
        function detachRefs(ctrl, ref) {
          var _ctrl$ref;
          (_ctrl$ref = ctrl.ref) === null || _ctrl$ref === void 0 ? void 0 : _ctrl$ref.delete(ctrl);
          ref === null || ref === void 0 ? void 0 : ref.delete(ctrl);
        }
        function replaceRef(ctrl, ref) {
          if (ref && ctrl.ref !== ref) {
            var _ctrl$ref2;
            (_ctrl$ref2 = ctrl.ref) === null || _ctrl$ref2 === void 0 ? void 0 : _ctrl$ref2.delete(ctrl);
            ref.add(ctrl);
            ctrl.ref = ref;
          }
        }

        // src/constants.ts
        var config$1 = {
          default: {
            tension: 170,
            friction: 26
          },
          gentle: {
            tension: 120,
            friction: 14
          },
          wobbly: {
            tension: 180,
            friction: 12
          },
          stiff: {
            tension: 210,
            friction: 20
          },
          slow: {
            tension: 280,
            friction: 60
          },
          molasses: {
            tension: 280,
            friction: 120
          }
        };

        // src/AnimationConfig.ts
        var defaults = _objectSpread(_objectSpread({}, config$1.default), {}, {
          mass: 1,
          damping: 1,
          easing: easings.linear,
          clamp: false
        });
        var AnimationConfig = /*#__PURE__*/_createClass(function AnimationConfig() {
          _classCallCheck(this, AnimationConfig);
          /**
           * The initial velocity of one or more values.
           *
           * @default 0
           */
          this.velocity = 0;
          Object.assign(this, defaults);
        });
        function mergeConfig(config2, newConfig, defaultConfig) {
          if (defaultConfig) {
            defaultConfig = _objectSpread({}, defaultConfig);
            sanitizeConfig(defaultConfig, newConfig);
            newConfig = _objectSpread(_objectSpread({}, defaultConfig), newConfig);
          }
          sanitizeConfig(config2, newConfig);
          Object.assign(config2, newConfig);
          for (var key in defaults) {
            if (config2[key] == null) {
              config2[key] = defaults[key];
            }
          }
          var frequency = config2.frequency,
            damping = config2.damping;
          var mass = config2.mass;
          if (!is.und(frequency)) {
            if (frequency < 0.01) frequency = 0.01;
            if (damping < 0) damping = 0;
            config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
            config2.friction = 4 * Math.PI * damping * mass / frequency;
          }
          return config2;
        }
        function sanitizeConfig(config2, props) {
          if (!is.und(props.decay)) {
            config2.duration = void 0;
          } else {
            var isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
            if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
              config2.duration = void 0;
              config2.decay = void 0;
            }
            if (isTensionConfig) {
              config2.frequency = void 0;
            }
          }
        }

        // src/Animation.ts
        var emptyArray = [];
        var Animation = /*#__PURE__*/_createClass(function Animation() {
          _classCallCheck(this, Animation);
          this.changed = false;
          this.values = emptyArray;
          this.toValues = null;
          this.fromValues = emptyArray;
          this.config = new AnimationConfig();
          this.immediate = false;
        });
        function scheduleProps(callId, _ref18) {
          var key = _ref18.key,
            props = _ref18.props,
            defaultProps = _ref18.defaultProps,
            state = _ref18.state,
            actions = _ref18.actions;
          return new Promise(function (resolve, reject) {
            var _props$cancel;
            var delay;
            var timeout;
            var cancel = matchProp((_props$cancel = props.cancel) !== null && _props$cancel !== void 0 ? _props$cancel : defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.cancel, key);
            if (cancel) {
              onStart();
            } else {
              if (!is.und(props.pause)) {
                state.paused = matchProp(props.pause, key);
              }
              var pause = defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.pause;
              if (pause !== true) {
                pause = state.paused || matchProp(pause, key);
              }
              delay = callProp(props.delay || 0, key);
              if (pause) {
                state.resumeQueue.add(onResume);
                actions.pause();
              } else {
                actions.resume();
                onResume();
              }
            }
            function onPause() {
              state.resumeQueue.add(onResume);
              state.timeouts.delete(timeout);
              timeout.cancel();
              delay = timeout.time - raf.now();
            }
            function onResume() {
              if (delay > 0 && !globals_exports.skipAnimation) {
                state.delayed = true;
                timeout = raf.setTimeout(onStart, delay);
                state.pauseQueue.add(onPause);
                state.timeouts.add(timeout);
              } else {
                onStart();
              }
            }
            function onStart() {
              if (state.delayed) {
                state.delayed = false;
              }
              state.pauseQueue.delete(onPause);
              state.timeouts.delete(timeout);
              if (callId <= (state.cancelId || 0)) {
                cancel = true;
              }
              try {
                actions.start(_objectSpread(_objectSpread({}, props), {}, {
                  callId: callId,
                  cancel: cancel
                }), resolve);
              } catch (err) {
                reject(err);
              }
            }
          });
        }

        // src/AnimationResult.ts
        var getCombinedResult = function getCombinedResult(target, results) {
          return results.length == 1 ? results[0] : results.some(function (result) {
            return result.cancelled;
          }) ? getCancelledResult(target.get()) : results.every(function (result) {
            return result.noop;
          }) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every(function (result) {
            return result.finished;
          }));
        };
        var getNoopResult = function getNoopResult(value) {
          return {
            value: value,
            noop: true,
            finished: true,
            cancelled: false
          };
        };
        var getFinishedResult = function getFinishedResult(value, finished) {
          var cancelled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          return {
            value: value,
            finished: finished,
            cancelled: cancelled
          };
        };
        var getCancelledResult = function getCancelledResult(value) {
          return {
            value: value,
            cancelled: true,
            finished: false
          };
        };

        // src/runAsync.ts
        function runAsync(to2, props, state, target) {
          var callId = props.callId,
            parentId = props.parentId,
            onRest = props.onRest;
          var prevTo = state.asyncTo,
            prevPromise = state.promise;
          if (!parentId && to2 === prevTo && !props.reset) {
            return prevPromise;
          }
          return state.promise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
            var defaultProps, preventBail, bail, bailPromise, bailIfEnded, animate, result, animating;
            return _regeneratorRuntime().wrap(function _callee14$(_context14) {
              while (1) switch (_context14.prev = _context14.next) {
                case 0:
                  state.asyncId = callId;
                  state.asyncTo = to2;
                  defaultProps = getDefaultProps(props, function (value, key) {
                    return (
                      // The `onRest` prop is only called when the `runAsync` promise is resolved.
                      key === "onRest" ? void 0 : value
                    );
                  });
                  bailPromise = new Promise(function (resolve, reject) {
                    return preventBail = resolve, bail = reject;
                  });
                  bailIfEnded = function bailIfEnded(bailSignal) {
                    var bailResult =
                    // The `cancel` prop or `stop` method was used.
                    callId <= (state.cancelId || 0) && getCancelledResult(target) ||
                    // The async `to` prop was replaced.
                    callId !== state.asyncId && getFinishedResult(target, false);
                    if (bailResult) {
                      bailSignal.result = bailResult;
                      bail(bailSignal);
                      throw bailSignal;
                    }
                  };
                  animate = function animate(arg1, arg2) {
                    var bailSignal = new BailSignal();
                    var skipAnimationSignal = new SkipAnimationSignal();
                    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
                      var props2, result2;
                      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
                        while (1) switch (_context12.prev = _context12.next) {
                          case 0:
                            if (!globals_exports.skipAnimation) {
                              _context12.next = 5;
                              break;
                            }
                            stopAsync(state);
                            skipAnimationSignal.result = getFinishedResult(target, false);
                            bail(skipAnimationSignal);
                            throw skipAnimationSignal;
                          case 5:
                            bailIfEnded(bailSignal);
                            props2 = is.obj(arg1) ? _objectSpread({}, arg1) : _objectSpread(_objectSpread({}, arg2), {}, {
                              to: arg1
                            });
                            props2.parentId = callId;
                            eachProp(defaultProps, function (value, key) {
                              if (is.und(props2[key])) {
                                props2[key] = value;
                              }
                            });
                            _context12.next = 11;
                            return target.start(props2);
                          case 11:
                            result2 = _context12.sent;
                            bailIfEnded(bailSignal);
                            if (!state.paused) {
                              _context12.next = 16;
                              break;
                            }
                            _context12.next = 16;
                            return new Promise(function (resume) {
                              state.resumeQueue.add(resume);
                            });
                          case 16:
                            return _context12.abrupt("return", result2);
                          case 17:
                          case "end":
                            return _context12.stop();
                        }
                      }, _callee12);
                    }))();
                  };
                  if (!globals_exports.skipAnimation) {
                    _context14.next = 9;
                    break;
                  }
                  stopAsync(state);
                  return _context14.abrupt("return", getFinishedResult(target, false));
                case 9:
                  _context14.prev = 9;
                  if (is.arr(to2)) {
                    animating = function () {
                      var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(queue) {
                        var _iterator14, _step13, props2;
                        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                          while (1) switch (_context13.prev = _context13.next) {
                            case 0:
                              _iterator14 = _createForOfIteratorHelper(queue);
                              _context13.prev = 1;
                              _iterator14.s();
                            case 3:
                              if ((_step13 = _iterator14.n()).done) {
                                _context13.next = 9;
                                break;
                              }
                              props2 = _step13.value;
                              _context13.next = 7;
                              return animate(props2);
                            case 7:
                              _context13.next = 3;
                              break;
                            case 9:
                              _context13.next = 14;
                              break;
                            case 11:
                              _context13.prev = 11;
                              _context13.t0 = _context13["catch"](1);
                              _iterator14.e(_context13.t0);
                            case 14:
                              _context13.prev = 14;
                              _iterator14.f();
                              return _context13.finish(14);
                            case 17:
                            case "end":
                              return _context13.stop();
                          }
                        }, _callee13, null, [[1, 11, 14, 17]]);
                      }));
                      return function (_x66) {
                        return _ref21.apply(this, arguments);
                      };
                    }()(to2);
                  } else {
                    animating = Promise.resolve(to2(animate, target.stop.bind(target)));
                  }
                  _context14.next = 13;
                  return Promise.all([animating.then(preventBail), bailPromise]);
                case 13:
                  result = getFinishedResult(target.get(), true, false);
                  _context14.next = 27;
                  break;
                case 16:
                  _context14.prev = 16;
                  _context14.t0 = _context14["catch"](9);
                  if (!(_context14.t0 instanceof BailSignal)) {
                    _context14.next = 22;
                    break;
                  }
                  result = _context14.t0.result;
                  _context14.next = 27;
                  break;
                case 22:
                  if (!(_context14.t0 instanceof SkipAnimationSignal)) {
                    _context14.next = 26;
                    break;
                  }
                  result = _context14.t0.result;
                  _context14.next = 27;
                  break;
                case 26:
                  throw _context14.t0;
                case 27:
                  _context14.prev = 27;
                  if (callId == state.asyncId) {
                    state.asyncId = parentId;
                    state.asyncTo = parentId ? prevTo : void 0;
                    state.promise = parentId ? prevPromise : void 0;
                  }
                  return _context14.finish(27);
                case 30:
                  if (is.fun(onRest)) {
                    raf.batchedUpdates(function () {
                      onRest(result, target, target.item);
                    });
                  }
                  return _context14.abrupt("return", result);
                case 32:
                case "end":
                  return _context14.stop();
              }
            }, _callee14, null, [[9, 16, 27, 30]]);
          }))();
        }
        function stopAsync(state, cancelId) {
          flush(state.timeouts, function (t) {
            return t.cancel();
          });
          state.pauseQueue.clear();
          state.resumeQueue.clear();
          state.asyncId = state.asyncTo = state.promise = void 0;
          if (cancelId) state.cancelId = cancelId;
        }
        var BailSignal = /*#__PURE__*/function (_Error) {
          _inherits(BailSignal, _Error);
          var _super6 = _createSuper(BailSignal);
          function BailSignal() {
            _classCallCheck(this, BailSignal);
            return _super6.call(this, "An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
          }
          return _createClass(BailSignal);
        }( /*#__PURE__*/_wrapNativeSuper(Error));
        var SkipAnimationSignal = /*#__PURE__*/function (_Error2) {
          _inherits(SkipAnimationSignal, _Error2);
          var _super7 = _createSuper(SkipAnimationSignal);
          function SkipAnimationSignal() {
            _classCallCheck(this, SkipAnimationSignal);
            return _super7.call(this, "SkipAnimationSignal");
          }
          return _createClass(SkipAnimationSignal);
        }( /*#__PURE__*/_wrapNativeSuper(Error));
        var isFrameValue = function isFrameValue(value) {
          return value instanceof FrameValue;
        };
        var nextId = 1;
        var FrameValue = /*#__PURE__*/function (_FluidValue) {
          _inherits(FrameValue, _FluidValue);
          var _super8 = _createSuper(FrameValue);
          function FrameValue() {
            var _this10;
            _classCallCheck(this, FrameValue);
            _this10 = _super8.apply(this, arguments);
            _this10.id = nextId++;
            _this10._priority = 0;
            return _this10;
          }
          _createClass(FrameValue, [{
            key: "priority",
            get: function get() {
              return this._priority;
            },
            set: function set(priority) {
              if (this._priority != priority) {
                this._priority = priority;
                this._onPriorityChange(priority);
              }
            }
            /** Get the current value */
          }, {
            key: "get",
            value: function get() {
              var node = getAnimated(this);
              return node && node.getValue();
            }
            /** Create a spring that maps our value to another value */
          }, {
            key: "to",
            value: function to() {
              for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                args[_key6] = arguments[_key6];
              }
              return globals_exports.to(this, args);
            }
            /** @deprecated Use the `to` method instead. */
          }, {
            key: "interpolate",
            value: function interpolate() {
              deprecateInterpolate();
              for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                args[_key7] = arguments[_key7];
              }
              return globals_exports.to(this, args);
            }
          }, {
            key: "toJSON",
            value: function toJSON() {
              return this.get();
            }
          }, {
            key: "observerAdded",
            value: function observerAdded(count) {
              if (count == 1) this._attach();
            }
          }, {
            key: "observerRemoved",
            value: function observerRemoved(count) {
              if (count == 0) this._detach();
            }
            /** Called when the first child is added. */
          }, {
            key: "_attach",
            value: function _attach() {}
            /** Called when the last child is removed. */
          }, {
            key: "_detach",
            value: function _detach() {}
            /** Tell our children about our new value */
          }, {
            key: "_onChange",
            value: function _onChange(value) {
              var idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
              callFluidObservers(this, {
                type: "change",
                parent: this,
                value: value,
                idle: idle
              });
            }
            /** Tell our children about our new priority */
          }, {
            key: "_onPriorityChange",
            value: function _onPriorityChange(priority) {
              if (!this.idle) {
                frameLoop.sort(this);
              }
              callFluidObservers(this, {
                type: "priority",
                parent: this,
                priority: priority
              });
            }
          }]);
          return FrameValue;
        }(FluidValue);

        // src/SpringPhase.ts
        var $P = Symbol.for("SpringPhase");
        var HAS_ANIMATED = 1;
        var IS_ANIMATING = 2;
        var IS_PAUSED = 4;
        var hasAnimated = function hasAnimated(target) {
          return (target[$P] & HAS_ANIMATED) > 0;
        };
        var isAnimating = function isAnimating(target) {
          return (target[$P] & IS_ANIMATING) > 0;
        };
        var isPaused = function isPaused(target) {
          return (target[$P] & IS_PAUSED) > 0;
        };
        var setActiveBit = function setActiveBit(target, active) {
          return active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
        };
        var setPausedBit = function setPausedBit(target, paused) {
          return paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
        };

        // src/SpringValue.ts
        var SpringValue = /*#__PURE__*/function (_FrameValue) {
          _inherits(SpringValue, _FrameValue);
          var _super9 = _createSuper(SpringValue);
          function SpringValue(arg1, arg2) {
            var _this11;
            _classCallCheck(this, SpringValue);
            _this11 = _super9.call(this);
            /** The animation state */
            _this11.animation = new Animation();
            /** Some props have customizable default values */
            _this11.defaultProps = {};
            /** The state for `runAsync` calls */
            _this11._state = {
              paused: false,
              delayed: false,
              pauseQueue: /* @__PURE__ */new Set(),
              resumeQueue: /* @__PURE__ */new Set(),
              timeouts: /* @__PURE__ */new Set()
            };
            /** The promise resolvers of pending `start` calls */
            _this11._pendingCalls = /* @__PURE__ */new Set();
            /** The counter for tracking `scheduleProps` calls */
            _this11._lastCallId = 0;
            /** The last `scheduleProps` call that changed the `to` prop */
            _this11._lastToId = 0;
            _this11._memoizedDuration = 0;
            if (!is.und(arg1) || !is.und(arg2)) {
              var props = is.obj(arg1) ? _objectSpread({}, arg1) : _objectSpread(_objectSpread({}, arg2), {}, {
                from: arg1
              });
              if (is.und(props.default)) {
                props.default = true;
              }
              _this11.start(props);
            }
            return _this11;
          }
          /** Equals true when not advancing on each frame. */
          _createClass(SpringValue, [{
            key: "idle",
            get: function get() {
              return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
            }
          }, {
            key: "goal",
            get: function get() {
              return getFluidValue(this.animation.to);
            }
          }, {
            key: "velocity",
            get: function get() {
              var node = getAnimated(this);
              return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map(function (node2) {
                return node2.lastVelocity || 0;
              });
            }
            /**
             * When true, this value has been animated at least once.
             */
          }, {
            key: "hasAnimated",
            get: function get() {
              return hasAnimated(this);
            }
            /**
             * When true, this value has an unfinished animation,
             * which is either active or paused.
             */
          }, {
            key: "isAnimating",
            get: function get() {
              return isAnimating(this);
            }
            /**
             * When true, all current and future animations are paused.
             */
          }, {
            key: "isPaused",
            get: function get() {
              return isPaused(this);
            }
            /**
             *
             *
             */
          }, {
            key: "isDelayed",
            get: function get() {
              return this._state.delayed;
            }
            /** Advance the current animation by a number of milliseconds */
          }, {
            key: "advance",
            value: function advance(dt) {
              var _this12 = this;
              var idle = true;
              var changed = false;
              var anim = this.animation;
              var toValues = anim.toValues;
              var config2 = anim.config;
              var payload = getPayload(anim.to);
              if (!payload && hasFluidValue(anim.to)) {
                toValues = toArray$1(getFluidValue(anim.to));
              }
              anim.values.forEach(function (node2, i) {
                if (node2.done) return;
                var to2 =
                // Animated strings always go from 0 to 1.
                node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];
                var finished = anim.immediate;
                var position = to2;
                if (!finished) {
                  position = node2.lastPosition;
                  if (config2.tension <= 0) {
                    node2.done = true;
                    return;
                  }
                  var elapsed = node2.elapsedTime += dt;
                  var from = anim.fromValues[i];
                  var v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i] : config2.velocity;
                  var velocity;
                  var precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));
                  if (!is.und(config2.duration)) {
                    var _p2 = 1;
                    if (config2.duration > 0) {
                      if (_this12._memoizedDuration !== config2.duration) {
                        _this12._memoizedDuration = config2.duration;
                        if (node2.durationProgress > 0) {
                          node2.elapsedTime = config2.duration * node2.durationProgress;
                          elapsed = node2.elapsedTime += dt;
                        }
                      }
                      _p2 = (config2.progress || 0) + elapsed / _this12._memoizedDuration;
                      _p2 = _p2 > 1 ? 1 : _p2 < 0 ? 0 : _p2;
                      node2.durationProgress = _p2;
                    }
                    position = from + config2.easing(_p2) * (to2 - from);
                    velocity = (position - node2.lastPosition) / dt;
                    finished = _p2 == 1;
                  } else if (config2.decay) {
                    var decay = config2.decay === true ? 0.998 : config2.decay;
                    var _e2 = Math.exp(-(1 - decay) * elapsed);
                    position = from + v0 / (1 - decay) * (1 - _e2);
                    finished = Math.abs(node2.lastPosition - position) <= precision;
                    velocity = v0 * _e2;
                  } else {
                    velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
                    var restVelocity = config2.restVelocity || precision / 10;
                    var bounceFactor = config2.clamp ? 0 : config2.bounce;
                    var canBounce = !is.und(bounceFactor);
                    var isGrowing = from == to2 ? node2.v0 > 0 : from < to2;
                    var isMoving;
                    var isBouncing = false;
                    var step = 1;
                    var numSteps = Math.ceil(dt / step);
                    for (var _n2 = 0; _n2 < numSteps; ++_n2) {
                      isMoving = Math.abs(velocity) > restVelocity;
                      if (!isMoving) {
                        finished = Math.abs(to2 - position) <= precision;
                        if (finished) {
                          break;
                        }
                      }
                      if (canBounce) {
                        isBouncing = position == to2 || position > to2 == isGrowing;
                        if (isBouncing) {
                          velocity = -velocity * bounceFactor;
                          position = to2;
                        }
                      }
                      var springForce = -config2.tension * 1e-6 * (position - to2);
                      var dampingForce = -config2.friction * 1e-3 * velocity;
                      var acceleration = (springForce + dampingForce) / config2.mass;
                      velocity = velocity + acceleration * step;
                      position = position + velocity * step;
                    }
                  }
                  node2.lastVelocity = velocity;
                  if (Number.isNaN(position)) {
                    console.warn("Got NaN while animating:", _this12);
                    finished = true;
                  }
                }
                if (payload && !payload[i].done) {
                  finished = false;
                }
                if (finished) {
                  node2.done = true;
                } else {
                  idle = false;
                }
                if (node2.setValue(position, config2.round)) {
                  changed = true;
                }
              });
              var node = getAnimated(this);
              var currVal = node.getValue();
              if (idle) {
                var finalVal = getFluidValue(anim.to);
                if ((currVal !== finalVal || changed) && !config2.decay) {
                  node.setValue(finalVal);
                  this._onChange(finalVal);
                } else if (changed && config2.decay) {
                  this._onChange(currVal);
                }
                this._stop();
              } else if (changed) {
                this._onChange(currVal);
              }
            }
            /** Set the current value, while stopping the current animation */
          }, {
            key: "set",
            value: function set(value) {
              var _this13 = this;
              raf.batchedUpdates(function () {
                _this13._stop();
                _this13._focus(value);
                _this13._set(value);
              });
              return this;
            }
            /**
             * Freeze the active animation in time, as well as any updates merged
             * before `resume` is called.
             */
          }, {
            key: "pause",
            value: function pause() {
              this._update({
                pause: true
              });
            }
            /** Resume the animation if paused. */
          }, {
            key: "resume",
            value: function resume() {
              this._update({
                pause: false
              });
            }
            /** Skip to the end of the current animation. */
          }, {
            key: "finish",
            value: function finish() {
              var _this14 = this;
              if (isAnimating(this)) {
                var _this$animation = this.animation,
                  to2 = _this$animation.to,
                  config2 = _this$animation.config;
                raf.batchedUpdates(function () {
                  _this14._onStart();
                  if (!config2.decay) {
                    _this14._set(to2, false);
                  }
                  _this14._stop();
                });
              }
              return this;
            }
            /** Push props into the pending queue. */
          }, {
            key: "update",
            value: function update(props) {
              var queue = this.queue || (this.queue = []);
              queue.push(props);
              return this;
            }
          }, {
            key: "start",
            value: function start(to2, arg2) {
              var _this15 = this;
              var queue;
              if (!is.und(to2)) {
                queue = [is.obj(to2) ? to2 : _objectSpread(_objectSpread({}, arg2), {}, {
                  to: to2
                })];
              } else {
                queue = this.queue || [];
                this.queue = [];
              }
              return Promise.all(queue.map(function (props) {
                var up = _this15._update(props);
                return up;
              })).then(function (results) {
                return getCombinedResult(_this15, results);
              });
            }
            /**
             * Stop the current animation, and cancel any delayed updates.
             *
             * Pass `true` to call `onRest` with `cancelled: true`.
             */
          }, {
            key: "stop",
            value: function stop(cancel) {
              var _this16 = this;
              var to2 = this.animation.to;
              this._focus(this.get());
              stopAsync(this._state, cancel && this._lastCallId);
              raf.batchedUpdates(function () {
                return _this16._stop(to2, cancel);
              });
              return this;
            }
            /** Restart the animation. */
          }, {
            key: "reset",
            value: function reset() {
              this._update({
                reset: true
              });
            }
            /** @internal */
          }, {
            key: "eventObserved",
            value: function eventObserved(event) {
              if (event.type == "change") {
                this._start();
              } else if (event.type == "priority") {
                this.priority = event.priority + 1;
              }
            }
            /**
             * Parse the `to` and `from` range from the given `props` object.
             *
             * This also ensures the initial value is available to animated components
             * during the render phase.
             */
          }, {
            key: "_prepareNode",
            value: function _prepareNode(props) {
              var key = this.key || "";
              var to2 = props.to,
                from = props.from;
              to2 = is.obj(to2) ? to2[key] : to2;
              if (to2 == null || isAsyncTo(to2)) {
                to2 = void 0;
              }
              from = is.obj(from) ? from[key] : from;
              if (from == null) {
                from = void 0;
              }
              var range = {
                to: to2,
                from: from
              };
              if (!hasAnimated(this)) {
                if (props.reverse) {
                  var _ref22 = [from, to2];
                  to2 = _ref22[0];
                  from = _ref22[1];
                }
                from = getFluidValue(from);
                if (!is.und(from)) {
                  this._set(from);
                } else if (!getAnimated(this)) {
                  this._set(to2);
                }
              }
              return range;
            }
            /** Every update is processed by this method before merging. */
          }, {
            key: "_update",
            value: function _update(_ref23, isLoop) {
              var _this17 = this;
              var props = Object.assign({}, (_objectDestructuringEmpty(_ref23), _ref23));
              var key = this.key,
                defaultProps = this.defaultProps;
              if (props.default) Object.assign(defaultProps, getDefaultProps(props, function (value, prop) {
                return /^on/.test(prop) ? resolveProp(value, key) : value;
              }));
              mergeActiveFn(this, props, "onProps");
              sendEvent(this, "onProps", props, this);
              var range = this._prepareNode(props);
              if (Object.isFrozen(this)) {
                throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
              }
              var state = this._state;
              return scheduleProps(++this._lastCallId, {
                key: key,
                props: props,
                defaultProps: defaultProps,
                state: state,
                actions: {
                  pause: function pause() {
                    if (!isPaused(_this17)) {
                      setPausedBit(_this17, true);
                      flushCalls(state.pauseQueue);
                      sendEvent(_this17, "onPause", getFinishedResult(_this17, checkFinished(_this17, _this17.animation.to)), _this17);
                    }
                  },
                  resume: function resume() {
                    if (isPaused(_this17)) {
                      setPausedBit(_this17, false);
                      if (isAnimating(_this17)) {
                        _this17._resume();
                      }
                      flushCalls(state.resumeQueue);
                      sendEvent(_this17, "onResume", getFinishedResult(_this17, checkFinished(_this17, _this17.animation.to)), _this17);
                    }
                  },
                  start: this._merge.bind(this, range)
                }
              }).then(function (result) {
                if (props.loop && result.finished && !(isLoop && result.noop)) {
                  var nextProps = createLoopUpdate(props);
                  if (nextProps) {
                    return _this17._update(nextProps, true);
                  }
                }
                return result;
              });
            }
            /** Merge props into the current animation */
          }, {
            key: "_merge",
            value: function _merge(range, props, resolve) {
              var _this18 = this;
              if (props.cancel) {
                this.stop(true);
                return resolve(getCancelledResult(this));
              }
              var hasToProp = !is.und(range.to);
              var hasFromProp = !is.und(range.from);
              if (hasToProp || hasFromProp) {
                if (props.callId > this._lastToId) {
                  this._lastToId = props.callId;
                } else {
                  return resolve(getCancelledResult(this));
                }
              }
              var key = this.key,
                defaultProps = this.defaultProps,
                anim = this.animation;
              var prevTo = anim.to,
                prevFrom = anim.from;
              var _range$to = range.to,
                to2 = _range$to === void 0 ? prevTo : _range$to,
                _range$from = range.from,
                from = _range$from === void 0 ? prevFrom : _range$from;
              if (hasFromProp && !hasToProp && (!props.default || is.und(to2))) {
                to2 = from;
              }
              if (props.reverse) {
                var _ref24 = [from, to2];
                to2 = _ref24[0];
                from = _ref24[1];
              }
              var hasFromChanged = !isEqual$1(from, prevFrom);
              if (hasFromChanged) {
                anim.from = from;
              }
              from = getFluidValue(from);
              var hasToChanged = !isEqual$1(to2, prevTo);
              if (hasToChanged) {
                this._focus(to2);
              }
              var hasAsyncTo = isAsyncTo(props.to);
              var config2 = anim.config;
              var decay = config2.decay,
                velocity = config2.velocity;
              if (hasToProp || hasFromProp) {
                config2.velocity = 0;
              }
              if (props.config && !hasAsyncTo) {
                mergeConfig(config2, callProp(props.config, key),
                // Avoid calling the same "config" prop twice.
                props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);
              }
              var node = getAnimated(this);
              if (!node || is.und(to2)) {
                return resolve(getFinishedResult(this, true));
              }
              var reset =
              // When `reset` is undefined, the `from` prop implies `reset: true`,
              // except for declarative updates. When `reset` is defined, there
              // must exist a value to animate from.
              is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);
              var value = reset ? from : this.get();
              var goal = computeGoal(to2);
              var isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
              var immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
              if (hasToChanged) {
                var nodeType = getAnimatedType(to2);
                if (nodeType !== node.constructor) {
                  if (immediate) {
                    node = this._set(goal);
                  } else throw Error("Cannot animate between ".concat(node.constructor.name, " and ").concat(nodeType.name, ", as the \"to\" prop suggests"));
                }
              }
              var goalType = node.constructor;
              var started = hasFluidValue(to2);
              var finished = false;
              if (!started) {
                var hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
                if (hasToChanged || hasValueChanged) {
                  finished = isEqual$1(computeGoal(value), goal);
                  started = !finished;
                }
                if (!isEqual$1(anim.immediate, immediate) && !immediate || !isEqual$1(config2.decay, decay) || !isEqual$1(config2.velocity, velocity)) {
                  started = true;
                }
              }
              if (finished && isAnimating(this)) {
                if (anim.changed && !reset) {
                  started = true;
                } else if (!started) {
                  this._stop(prevTo);
                }
              }
              if (!hasAsyncTo) {
                if (started || hasFluidValue(prevTo)) {
                  anim.values = node.getPayload();
                  anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray$1(goal);
                }
                if (anim.immediate != immediate) {
                  anim.immediate = immediate;
                  if (!immediate && !reset) {
                    this._set(prevTo);
                  }
                }
                if (started) {
                  var onRest = anim.onRest;
                  each(ACTIVE_EVENTS, function (type) {
                    return mergeActiveFn(_this18, props, type);
                  });
                  var result = getFinishedResult(this, checkFinished(this, prevTo));
                  flushCalls(this._pendingCalls, result);
                  this._pendingCalls.add(resolve);
                  if (anim.changed) raf.batchedUpdates(function () {
                    anim.changed = !reset;
                    onRest === null || onRest === void 0 ? void 0 : onRest(result, _this18);
                    if (reset) {
                      callProp(defaultProps.onRest, result);
                    } else {
                      var _anim$onStart;
                      (_anim$onStart = anim.onStart) === null || _anim$onStart === void 0 ? void 0 : _anim$onStart.call(anim, result, _this18);
                    }
                  });
                }
              }
              if (reset) {
                this._set(value);
              }
              if (hasAsyncTo) {
                resolve(runAsync(props.to, props, this._state, this));
              } else if (started) {
                this._start();
              } else if (isAnimating(this) && !hasToChanged) {
                this._pendingCalls.add(resolve);
              } else {
                resolve(getNoopResult(value));
              }
            }
            /** Update the `animation.to` value, which might be a `FluidValue` */
          }, {
            key: "_focus",
            value: function _focus(value) {
              var anim = this.animation;
              if (value !== anim.to) {
                if (getFluidObservers(this)) {
                  this._detach();
                }
                anim.to = value;
                if (getFluidObservers(this)) {
                  this._attach();
                }
              }
            }
          }, {
            key: "_attach",
            value: function _attach() {
              var priority = 0;
              var to2 = this.animation.to;
              if (hasFluidValue(to2)) {
                addFluidObserver(to2, this);
                if (isFrameValue(to2)) {
                  priority = to2.priority + 1;
                }
              }
              this.priority = priority;
            }
          }, {
            key: "_detach",
            value: function _detach() {
              var to2 = this.animation.to;
              if (hasFluidValue(to2)) {
                removeFluidObserver(to2, this);
              }
            }
            /**
             * Update the current value from outside the frameloop,
             * and return the `Animated` node.
             */
          }, {
            key: "_set",
            value: function _set(arg) {
              var _this19 = this;
              var idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
              var value = getFluidValue(arg);
              if (!is.und(value)) {
                var oldNode = getAnimated(this);
                if (!oldNode || !isEqual$1(value, oldNode.getValue())) {
                  var nodeType = getAnimatedType(value);
                  if (!oldNode || oldNode.constructor != nodeType) {
                    setAnimated(this, nodeType.create(value));
                  } else {
                    oldNode.setValue(value);
                  }
                  if (oldNode) {
                    raf.batchedUpdates(function () {
                      _this19._onChange(value, idle);
                    });
                  }
                }
              }
              return getAnimated(this);
            }
          }, {
            key: "_onStart",
            value: function _onStart() {
              var anim = this.animation;
              if (!anim.changed) {
                anim.changed = true;
                sendEvent(this, "onStart", getFinishedResult(this, checkFinished(this, anim.to)), this);
              }
            }
          }, {
            key: "_onChange",
            value: function _onChange(value, idle) {
              if (!idle) {
                this._onStart();
                callProp(this.animation.onChange, value, this);
              }
              callProp(this.defaultProps.onChange, value, this);
              _get(_getPrototypeOf(SpringValue.prototype), "_onChange", this).call(this, value, idle);
            }
            // This method resets the animation state (even if already animating) to
            // ensure the latest from/to range is used, and it also ensures this spring
            // is added to the frameloop.
          }, {
            key: "_start",
            value: function _start() {
              var anim = this.animation;
              getAnimated(this).reset(getFluidValue(anim.to));
              if (!anim.immediate) {
                anim.fromValues = anim.values.map(function (node) {
                  return node.lastPosition;
                });
              }
              if (!isAnimating(this)) {
                setActiveBit(this, true);
                if (!isPaused(this)) {
                  this._resume();
                }
              }
            }
          }, {
            key: "_resume",
            value: function _resume() {
              if (globals_exports.skipAnimation) {
                this.finish();
              } else {
                frameLoop.start(this);
              }
            }
            /**
             * Exit the frameloop and notify `onRest` listeners.
             *
             * Always wrap `_stop` calls with `batchedUpdates`.
             */
          }, {
            key: "_stop",
            value: function _stop(goal, cancel) {
              if (isAnimating(this)) {
                setActiveBit(this, false);
                var anim = this.animation;
                each(anim.values, function (node) {
                  node.done = true;
                });
                if (anim.toValues) {
                  anim.onChange = anim.onPause = anim.onResume = void 0;
                }
                callFluidObservers(this, {
                  type: "idle",
                  parent: this
                });
                var result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal !== null && goal !== void 0 ? goal : anim.to));
                flushCalls(this._pendingCalls, result);
                if (anim.changed) {
                  anim.changed = false;
                  sendEvent(this, "onRest", result, this);
                }
              }
            }
          }]);
          return SpringValue;
        }(FrameValue);
        function checkFinished(target, to2) {
          var goal = computeGoal(to2);
          var value = computeGoal(target.get());
          return isEqual$1(value, goal);
        }
        function createLoopUpdate(props) {
          var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.loop;
          var to2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.to;
          var loopRet = callProp(loop);
          if (loopRet) {
            var overrides = loopRet !== true && inferTo(loopRet);
            var reverse = (overrides || props).reverse;
            var _reset = !overrides || overrides.reset;
            return createUpdate(_objectSpread(_objectSpread({}, props), {}, {
              loop: loop,
              // Avoid updating default props when looping.
              default: false,
              // Never loop the `pause` prop.
              pause: void 0,
              // For the "reverse" prop to loop as expected, the "to" prop
              // must be undefined. The "reverse" prop is ignored when the
              // "to" prop is an array or function.
              to: !reverse || isAsyncTo(to2) ? to2 : void 0,
              // Ignore the "from" prop except on reset.
              from: _reset ? props.from : void 0,
              reset: _reset
            }, overrides));
          }
        }
        function createUpdate(props) {
          var _props2 = props = inferTo(props),
            to2 = _props2.to,
            from = _props2.from;
          var keys = /* @__PURE__ */new Set();
          if (is.obj(to2)) findDefined(to2, keys);
          if (is.obj(from)) findDefined(from, keys);
          props.keys = keys.size ? Array.from(keys) : null;
          return props;
        }
        function declareUpdate(props) {
          var update2 = createUpdate(props);
          if (is.und(update2.default)) {
            update2.default = getDefaultProps(update2);
          }
          return update2;
        }
        function findDefined(values, keys) {
          eachProp(values, function (value, key) {
            return value != null && keys.add(key);
          });
        }
        var ACTIVE_EVENTS = ["onStart", "onRest", "onChange", "onPause", "onResume"];
        function mergeActiveFn(target, props, type) {
          target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
        }
        function sendEvent(target, type) {
          var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;
          for (var _len8 = arguments.length, args = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {
            args[_key8 - 2] = arguments[_key8];
          }
          (_target$animation$typ = (_target$animation = target.animation)[type]) === null || _target$animation$typ === void 0 ? void 0 : _target$animation$typ.call.apply(_target$animation$typ, [_target$animation].concat(args));
          (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type]) === null || _target$defaultProps$ === void 0 ? void 0 : _target$defaultProps$.call.apply(_target$defaultProps$, [_target$defaultProps].concat(args));
        }
        var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
        var nextId2 = 1;
        var Controller = /*#__PURE__*/function () {
          function Controller(props, flush3) {
            _classCallCheck(this, Controller);
            this.id = nextId2++;
            /** The animated values */
            this.springs = {};
            /** The queue of props passed to the `update` method. */
            this.queue = [];
            /** The counter for tracking `scheduleProps` calls */
            this._lastAsyncId = 0;
            /** The values currently being animated */
            this._active = /* @__PURE__ */new Set();
            /** The values that changed recently */
            this._changed = /* @__PURE__ */new Set();
            /** Equals false when `onStart` listeners can be called */
            this._started = false;
            /** State used by the `runAsync` function */
            this._state = {
              paused: false,
              pauseQueue: /* @__PURE__ */new Set(),
              resumeQueue: /* @__PURE__ */new Set(),
              timeouts: /* @__PURE__ */new Set()
            };
            /** The event queues that are flushed once per frame maximum */
            this._events = {
              onStart: /* @__PURE__ */new Map(),
              onChange: /* @__PURE__ */new Map(),
              onRest: /* @__PURE__ */new Map()
            };
            this._onFrame = this._onFrame.bind(this);
            if (flush3) {
              this._flush = flush3;
            }
            if (props) {
              this.start(_objectSpread({
                default: true
              }, props));
            }
          }
          /**
           * Equals `true` when no spring values are in the frameloop, and
           * no async animation is currently active.
           */
          _createClass(Controller, [{
            key: "idle",
            get: function get() {
              return !this._state.asyncTo && Object.values(this.springs).every(function (spring) {
                return spring.idle && !spring.isDelayed && !spring.isPaused;
              });
            }
          }, {
            key: "item",
            get: function get() {
              return this._item;
            },
            set: function set(item) {
              this._item = item;
            }
            /** Get the current values of our springs */
          }, {
            key: "get",
            value: function get() {
              var values = {};
              this.each(function (spring, key) {
                return values[key] = spring.get();
              });
              return values;
            }
            /** Set the current values without animating. */
          }, {
            key: "set",
            value: function set(values) {
              for (var key in values) {
                var value = values[key];
                if (!is.und(value)) {
                  this.springs[key].set(value);
                }
              }
            }
            /** Push an update onto the queue of each value. */
          }, {
            key: "update",
            value: function update(props) {
              if (props) {
                this.queue.push(createUpdate(props));
              }
              return this;
            }
            /**
             * Start the queued animations for every spring, and resolve the returned
             * promise once all queued animations have finished or been cancelled.
             *
             * When you pass a queue (instead of nothing), that queue is used instead of
             * the queued animations added with the `update` method, which are left alone.
             */
          }, {
            key: "start",
            value: function start(props) {
              var queue = this.queue;
              if (props) {
                queue = toArray$1(props).map(createUpdate);
              } else {
                this.queue = [];
              }
              if (this._flush) {
                return this._flush(this, queue);
              }
              prepareKeys(this, queue);
              return flushUpdateQueue(this, queue);
            }
            /** @internal */
          }, {
            key: "stop",
            value: function stop(arg, keys) {
              if (arg !== !!arg) {
                keys = arg;
              }
              if (keys) {
                var springs = this.springs;
                each(toArray$1(keys), function (key) {
                  return springs[key].stop(!!arg);
                });
              } else {
                stopAsync(this._state, this._lastAsyncId);
                this.each(function (spring) {
                  return spring.stop(!!arg);
                });
              }
              return this;
            }
            /** Freeze the active animation in time */
          }, {
            key: "pause",
            value: function pause(keys) {
              if (is.und(keys)) {
                this.start({
                  pause: true
                });
              } else {
                var springs = this.springs;
                each(toArray$1(keys), function (key) {
                  return springs[key].pause();
                });
              }
              return this;
            }
            /** Resume the animation if paused. */
          }, {
            key: "resume",
            value: function resume(keys) {
              if (is.und(keys)) {
                this.start({
                  pause: false
                });
              } else {
                var springs = this.springs;
                each(toArray$1(keys), function (key) {
                  return springs[key].resume();
                });
              }
              return this;
            }
            /** Call a function once per spring value */
          }, {
            key: "each",
            value: function each(iterator) {
              eachProp(this.springs, iterator);
            }
            /** @internal Called at the end of every animation frame */
          }, {
            key: "_onFrame",
            value: function _onFrame() {
              var _this20 = this;
              var _this$_events = this._events,
                onStart = _this$_events.onStart,
                onChange = _this$_events.onChange,
                onRest = _this$_events.onRest;
              var active = this._active.size > 0;
              var changed = this._changed.size > 0;
              if (active && !this._started || changed && !this._started) {
                this._started = true;
                flush(onStart, function (_ref25) {
                  var _ref26 = _slicedToArray2(_ref25, 2),
                    onStart2 = _ref26[0],
                    result = _ref26[1];
                  result.value = _this20.get();
                  onStart2(result, _this20, _this20._item);
                });
              }
              var idle = !active && this._started;
              var values = changed || idle && onRest.size ? this.get() : null;
              if (changed && onChange.size) {
                flush(onChange, function (_ref27) {
                  var _ref28 = _slicedToArray2(_ref27, 2),
                    onChange2 = _ref28[0],
                    result = _ref28[1];
                  result.value = values;
                  onChange2(result, _this20, _this20._item);
                });
              }
              if (idle) {
                this._started = false;
                flush(onRest, function (_ref29) {
                  var _ref30 = _slicedToArray2(_ref29, 2),
                    onRest2 = _ref30[0],
                    result = _ref30[1];
                  result.value = values;
                  onRest2(result, _this20, _this20._item);
                });
              }
            }
            /** @internal */
          }, {
            key: "eventObserved",
            value: function eventObserved(event) {
              if (event.type == "change") {
                this._changed.add(event.parent);
                if (!event.idle) {
                  this._active.add(event.parent);
                }
              } else if (event.type == "idle") {
                this._active.delete(event.parent);
              } else return;
              raf.onFrame(this._onFrame);
            }
          }]);
          return Controller;
        }();
        function flushUpdateQueue(ctrl, queue) {
          return Promise.all(queue.map(function (props) {
            return flushUpdate(ctrl, props);
          })).then(function (results) {
            return getCombinedResult(ctrl, results);
          });
        }
        function flushUpdate(_x67, _x68, _x69) {
          return _flushUpdate.apply(this, arguments);
        }
        function _flushUpdate() {
          _flushUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee67(ctrl, props, isLoop) {
            var keys, to2, from, loop, onRest, onResolve, defaults2, asyncTo, state, promises, cancel, result, nextProps;
            return _regeneratorRuntime().wrap(function _callee67$(_context68) {
              while (1) switch (_context68.prev = _context68.next) {
                case 0:
                  keys = props.keys, to2 = props.to, from = props.from, loop = props.loop, onRest = props.onRest, onResolve = props.onResolve;
                  defaults2 = is.obj(props.default) && props.default;
                  if (loop) {
                    props.loop = false;
                  }
                  if (to2 === false) props.to = null;
                  if (from === false) props.from = null;
                  asyncTo = is.arr(to2) || is.fun(to2) ? to2 : void 0;
                  if (asyncTo) {
                    props.to = void 0;
                    props.onRest = void 0;
                    if (defaults2) {
                      defaults2.onRest = void 0;
                    }
                  } else {
                    each(BATCHED_EVENTS, function (key) {
                      var handler = props[key];
                      if (is.fun(handler)) {
                        var queue = ctrl["_events"][key];
                        props[key] = function (_ref107) {
                          var finished = _ref107.finished,
                            cancelled = _ref107.cancelled;
                          var result2 = queue.get(handler);
                          if (result2) {
                            if (!finished) result2.finished = false;
                            if (cancelled) result2.cancelled = true;
                          } else {
                            queue.set(handler, {
                              value: null,
                              finished: finished || false,
                              cancelled: cancelled || false
                            });
                          }
                        };
                        if (defaults2) {
                          defaults2[key] = props[key];
                        }
                      }
                    });
                  }
                  state = ctrl["_state"];
                  if (props.pause === !state.paused) {
                    state.paused = props.pause;
                    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
                  } else if (state.paused) {
                    props.pause = true;
                  }
                  promises = (keys || Object.keys(ctrl.springs)).map(function (key) {
                    return ctrl.springs[key].start(props);
                  });
                  cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
                  if (asyncTo || cancel && state.asyncId) {
                    promises.push(scheduleProps(++ctrl["_lastAsyncId"], {
                      props: props,
                      state: state,
                      actions: {
                        pause: noop$1,
                        resume: noop$1,
                        start: function start(props2, resolve) {
                          if (cancel) {
                            stopAsync(state, ctrl["_lastAsyncId"]);
                            resolve(getCancelledResult(ctrl));
                          } else {
                            props2.onRest = onRest;
                            resolve(runAsync(asyncTo, props2, state, ctrl));
                          }
                        }
                      }
                    }));
                  }
                  if (!state.paused) {
                    _context68.next = 15;
                    break;
                  }
                  _context68.next = 15;
                  return new Promise(function (resume) {
                    state.resumeQueue.add(resume);
                  });
                case 15:
                  _context68.t0 = getCombinedResult;
                  _context68.t1 = ctrl;
                  _context68.next = 19;
                  return Promise.all(promises);
                case 19:
                  _context68.t2 = _context68.sent;
                  result = (0, _context68.t0)(_context68.t1, _context68.t2);
                  if (!(loop && result.finished && !(isLoop && result.noop))) {
                    _context68.next = 26;
                    break;
                  }
                  nextProps = createLoopUpdate(props, loop, to2);
                  if (!nextProps) {
                    _context68.next = 26;
                    break;
                  }
                  prepareKeys(ctrl, [nextProps]);
                  return _context68.abrupt("return", flushUpdate(ctrl, nextProps, true));
                case 26:
                  if (onResolve) {
                    raf.batchedUpdates(function () {
                      return onResolve(result, ctrl, ctrl.item);
                    });
                  }
                  return _context68.abrupt("return", result);
                case 28:
                case "end":
                  return _context68.stop();
              }
            }, _callee67);
          }));
          return _flushUpdate.apply(this, arguments);
        }
        function getSprings(ctrl, props) {
          var springs = _objectSpread({}, ctrl.springs);
          if (props) {
            each(toArray$1(props), function (props2) {
              if (is.und(props2.keys)) {
                props2 = createUpdate(props2);
              }
              if (!is.obj(props2.to)) {
                props2 = _objectSpread(_objectSpread({}, props2), {}, {
                  to: void 0
                });
              }
              prepareSprings(springs, props2, function (key) {
                return createSpring(key);
              });
            });
          }
          setSprings(ctrl, springs);
          return springs;
        }
        function setSprings(ctrl, springs) {
          eachProp(springs, function (spring, key) {
            if (!ctrl.springs[key]) {
              ctrl.springs[key] = spring;
              addFluidObserver(spring, ctrl);
            }
          });
        }
        function createSpring(key, observer) {
          var spring = new SpringValue();
          spring.key = key;
          if (observer) {
            addFluidObserver(spring, observer);
          }
          return spring;
        }
        function prepareSprings(springs, props, create) {
          if (props.keys) {
            each(props.keys, function (key) {
              var spring = springs[key] || (springs[key] = create(key));
              spring["_prepareNode"](props);
            });
          }
        }
        function prepareKeys(ctrl, queue) {
          each(queue, function (props) {
            prepareSprings(ctrl.springs, props, function (key) {
              return createSpring(key, ctrl);
            });
          });
        }
        var SpringContext = function SpringContext(_ref31) {
          var children = _ref31.children,
            props = _objectWithoutProperties2(_ref31, _excluded2);
          var inherited = reactExports.useContext(ctx);
          var pause = props.pause || !!inherited.pause,
            immediate = props.immediate || !!inherited.immediate;
          props = useMemoOne(function () {
            return {
              pause: pause,
              immediate: immediate
            };
          }, [pause, immediate]);
          var Provider = ctx.Provider;
          return /* @__PURE__ */reactExports.createElement(Provider, {
            value: props
          }, children);
        };
        var ctx = makeContext(SpringContext, {});
        SpringContext.Provider = ctx.Provider;
        SpringContext.Consumer = ctx.Consumer;
        function makeContext(target, init) {
          Object.assign(target, reactExports.createContext(init));
          target.Provider._context = target;
          target.Consumer._context = target;
          return target;
        }
        var SpringRef = function SpringRef() {
          var current = [];
          var SpringRef2 = function SpringRef2(props) {
            deprecateDirectCall();
            var results = [];
            each(current, function (ctrl, i) {
              if (is.und(props)) {
                results.push(ctrl.start());
              } else {
                var update2 = _getProps(props, ctrl, i);
                if (update2) {
                  results.push(ctrl.start(update2));
                }
              }
            });
            return results;
          };
          SpringRef2.current = current;
          SpringRef2.add = function (ctrl) {
            if (!current.includes(ctrl)) {
              current.push(ctrl);
            }
          };
          SpringRef2.delete = function (ctrl) {
            var i = current.indexOf(ctrl);
            if (~i) current.splice(i, 1);
          };
          SpringRef2.pause = function () {
            var _arguments = arguments;
            each(current, function (ctrl) {
              return ctrl.pause.apply(ctrl, _toConsumableArray(_arguments));
            });
            return this;
          };
          SpringRef2.resume = function () {
            var _arguments2 = arguments;
            each(current, function (ctrl) {
              return ctrl.resume.apply(ctrl, _toConsumableArray(_arguments2));
            });
            return this;
          };
          SpringRef2.set = function (values) {
            each(current, function (ctrl, i) {
              var update2 = is.fun(values) ? values(i, ctrl) : values;
              if (update2) {
                ctrl.set(update2);
              }
            });
          };
          SpringRef2.start = function (props) {
            var _this21 = this;
            var results = [];
            each(current, function (ctrl, i) {
              if (is.und(props)) {
                results.push(ctrl.start());
              } else {
                var update2 = _this21._getProps(props, ctrl, i);
                if (update2) {
                  results.push(ctrl.start(update2));
                }
              }
            });
            return results;
          };
          SpringRef2.stop = function () {
            var _arguments3 = arguments;
            each(current, function (ctrl) {
              return ctrl.stop.apply(ctrl, _toConsumableArray(_arguments3));
            });
            return this;
          };
          SpringRef2.update = function (props) {
            var _this22 = this;
            each(current, function (ctrl, i) {
              return ctrl.update(_this22._getProps(props, ctrl, i));
            });
            return this;
          };
          var _getProps = function _getProps(arg, ctrl, index) {
            return is.fun(arg) ? arg(index, ctrl) : arg;
          };
          SpringRef2._getProps = _getProps;
          return SpringRef2;
        };

        // src/hooks/useSprings.ts
        function useSprings(length, props, deps) {
          var _arguments4 = arguments;
          var propsFn = is.fun(props) && props;
          if (propsFn && !deps) deps = [];
          var ref = reactExports.useMemo(function () {
            return propsFn || _arguments4.length == 3 ? SpringRef() : void 0;
          }, []);
          var layoutId = reactExports.useRef(0);
          var forceUpdate = useForceUpdate();
          var state = reactExports.useMemo(function () {
            return {
              ctrls: [],
              queue: [],
              flush: function flush(ctrl, updates2) {
                var springs2 = getSprings(ctrl, updates2);
                var canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some(function (key) {
                  return !ctrl.springs[key];
                });
                return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise(function (resolve) {
                  setSprings(ctrl, springs2);
                  state.queue.push(function () {
                    resolve(flushUpdateQueue(ctrl, updates2));
                  });
                  forceUpdate();
                });
              }
            };
          }, []);
          var ctrls = reactExports.useRef(_toConsumableArray(state.ctrls));
          var updates = [];
          var prevLength = usePrev(length) || 0;
          reactExports.useMemo(function () {
            each(ctrls.current.slice(length, prevLength), function (ctrl) {
              detachRefs(ctrl, ref);
              ctrl.stop(true);
            });
            ctrls.current.length = length;
            declareUpdates(prevLength, length);
          }, [length]);
          reactExports.useMemo(function () {
            declareUpdates(0, Math.min(prevLength, length));
          }, deps);
          function declareUpdates(startIndex, endIndex) {
            for (var i = startIndex; i < endIndex; i++) {
              var ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));
              var update2 = propsFn ? propsFn(i, ctrl) : props[i];
              if (update2) {
                updates[i] = declareUpdate(update2);
              }
            }
          }
          var springs = ctrls.current.map(function (ctrl, i) {
            return getSprings(ctrl, updates[i]);
          });
          var context = reactExports.useContext(SpringContext);
          var prevContext = usePrev(context);
          var hasContext = context !== prevContext && hasProps(context);
          useIsomorphicLayoutEffect$1(function () {
            layoutId.current++;
            state.ctrls = ctrls.current;
            var queue = state.queue;
            if (queue.length) {
              state.queue = [];
              each(queue, function (cb) {
                return cb();
              });
            }
            each(ctrls.current, function (ctrl, i) {
              ref === null || ref === void 0 ? void 0 : ref.add(ctrl);
              if (hasContext) {
                ctrl.start({
                  default: context
                });
              }
              var update2 = updates[i];
              if (update2) {
                replaceRef(ctrl, update2.ref);
                if (ctrl.ref) {
                  ctrl.queue.push(update2);
                } else {
                  ctrl.start(update2);
                }
              }
            });
          });
          useOnce(function () {
            return function () {
              each(state.ctrls, function (ctrl) {
                return ctrl.stop(true);
              });
            };
          });
          var values = springs.map(function (x) {
            return _objectSpread({}, x);
          });
          return ref ? [values, ref] : values;
        }

        // src/hooks/useSpring.ts
        function useSpring(props, deps) {
          var isFn = is.fun(props);
          var _useSprings = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps),
            _useSprings2 = _slicedToArray2(_useSprings, 2),
            _useSprings2$ = _slicedToArray2(_useSprings2[0], 1),
            values = _useSprings2$[0],
            ref = _useSprings2[1];
          return isFn || arguments.length == 2 ? [values, ref] : values;
        }
        function useTransition(data, props, deps) {
          var _arguments5 = arguments;
          var propsFn = is.fun(props) && props;
          var _ref32 = propsFn ? propsFn() : props,
            reset = _ref32.reset,
            sort = _ref32.sort,
            _ref32$trail = _ref32.trail,
            trail = _ref32$trail === void 0 ? 0 : _ref32$trail,
            _ref32$expires = _ref32.expires,
            expires = _ref32$expires === void 0 ? true : _ref32$expires,
            _ref32$exitBeforeEnte = _ref32.exitBeforeEnter,
            exitBeforeEnter = _ref32$exitBeforeEnte === void 0 ? false : _ref32$exitBeforeEnte,
            onDestroyed = _ref32.onDestroyed,
            propsRef = _ref32.ref,
            propsConfig = _ref32.config;
          var ref = reactExports.useMemo(function () {
            return propsFn || _arguments5.length == 3 ? SpringRef() : void 0;
          }, []);
          var items = toArray$1(data);
          var transitions = [];
          var usedTransitions = reactExports.useRef(null);
          var prevTransitions = reset ? null : usedTransitions.current;
          useIsomorphicLayoutEffect$1(function () {
            usedTransitions.current = transitions;
          });
          useOnce(function () {
            each(transitions, function (t) {
              ref === null || ref === void 0 ? void 0 : ref.add(t.ctrl);
              t.ctrl.ref = ref;
            });
            return function () {
              each(usedTransitions.current, function (t) {
                if (t.expired) {
                  clearTimeout(t.expirationId);
                }
                detachRefs(t.ctrl, ref);
                t.ctrl.stop(true);
              });
            };
          });
          var keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
          var expired = reset && usedTransitions.current || [];
          useIsomorphicLayoutEffect$1(function () {
            return each(expired, function (_ref33) {
              var ctrl = _ref33.ctrl,
                item = _ref33.item,
                key = _ref33.key;
              detachRefs(ctrl, ref);
              callProp(onDestroyed, item, key);
            });
          });
          var reused = [];
          if (prevTransitions) each(prevTransitions, function (t, i) {
            if (t.expired) {
              clearTimeout(t.expirationId);
              expired.push(t);
            } else {
              i = reused[i] = keys.indexOf(t.key);
              if (~i) transitions[i] = t;
            }
          });
          each(items, function (item, i) {
            if (!transitions[i]) {
              transitions[i] = {
                key: keys[i],
                item: item,
                phase: "mount" /* MOUNT */,
                ctrl: new Controller()
              };
              transitions[i].ctrl.item = item;
            }
          });
          if (reused.length) {
            var i = -1;
            var _ref34 = propsFn ? propsFn() : props,
              leave = _ref34.leave;
            each(reused, function (keyIndex, prevIndex) {
              var t = prevTransitions[prevIndex];
              if (~keyIndex) {
                i = transitions.indexOf(t);
                transitions[i] = _objectSpread(_objectSpread({}, t), {}, {
                  item: items[keyIndex]
                });
              } else if (leave) {
                transitions.splice(++i, 0, t);
              }
            });
          }
          if (is.fun(sort)) {
            transitions.sort(function (a, b) {
              return sort(a.item, b.item);
            });
          }
          var delay = -trail;
          var forceUpdate = useForceUpdate();
          var defaultProps = getDefaultProps(props);
          var changes = /* @__PURE__ */new Map();
          var exitingTransitions = reactExports.useRef( /* @__PURE__ */new Map());
          var forceChange = reactExports.useRef(false);
          each(transitions, function (t, i) {
            var key = t.key;
            var prevPhase = t.phase;
            var p = propsFn ? propsFn() : props;
            var to2;
            var phase;
            var propsDelay = callProp(p.delay || 0, key);
            if (prevPhase == "mount" /* MOUNT */) {
              to2 = p.enter;
              phase = "enter" /* ENTER */;
            } else {
              var isLeave = keys.indexOf(key) < 0;
              if (prevPhase != "leave" /* LEAVE */) {
                if (isLeave) {
                  to2 = p.leave;
                  phase = "leave" /* LEAVE */;
                } else if (to2 = p.update) {
                  phase = "update" /* UPDATE */;
                } else return;
              } else if (!isLeave) {
                to2 = p.enter;
                phase = "enter" /* ENTER */;
              } else return;
            }
            to2 = callProp(to2, t.item, i);
            to2 = is.obj(to2) ? inferTo(to2) : {
              to: to2
            };
            if (!to2.config) {
              var config2 = propsConfig || defaultProps.config;
              to2.config = callProp(config2, t.item, i, phase);
            }
            delay += trail;
            var payload = _objectSpread(_objectSpread({}, defaultProps), {}, {
              // we need to add our props.delay value you here.
              delay: propsDelay + delay,
              ref: propsRef,
              immediate: p.immediate,
              // This prevents implied resets.
              reset: false
            }, to2);
            if (phase == "enter" /* ENTER */ && is.und(payload.from)) {
              var p2 = propsFn ? propsFn() : props;
              var from = is.und(p2.initial) || prevTransitions ? p2.from : p2.initial;
              payload.from = callProp(from, t.item, i);
            }
            var onResolve = payload.onResolve;
            payload.onResolve = function (result) {
              callProp(onResolve, result);
              var transitions2 = usedTransitions.current;
              var t2 = transitions2.find(function (t3) {
                return t3.key === key;
              });
              if (!t2) return;
              if (result.cancelled && t2.phase != "update" /* UPDATE */) {
                return;
              }
              if (t2.ctrl.idle) {
                var idle = transitions2.every(function (t3) {
                  return t3.ctrl.idle;
                });
                if (t2.phase == "leave" /* LEAVE */) {
                  var expiry = callProp(expires, t2.item);
                  if (expiry !== false) {
                    var expiryMs = expiry === true ? 0 : expiry;
                    t2.expired = true;
                    if (!idle && expiryMs > 0) {
                      if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);
                      return;
                    }
                  }
                }
                if (idle && transitions2.some(function (t3) {
                  return t3.expired;
                })) {
                  exitingTransitions.current.delete(t2);
                  if (exitBeforeEnter) {
                    forceChange.current = true;
                  }
                  forceUpdate();
                }
              }
            };
            var springs = getSprings(t.ctrl, payload);
            if (phase === "leave" /* LEAVE */ && exitBeforeEnter) {
              exitingTransitions.current.set(t, {
                phase: phase,
                springs: springs,
                payload: payload
              });
            } else {
              changes.set(t, {
                phase: phase,
                springs: springs,
                payload: payload
              });
            }
          });
          var context = reactExports.useContext(SpringContext);
          var prevContext = usePrev(context);
          var hasContext = context !== prevContext && hasProps(context);
          useIsomorphicLayoutEffect$1(function () {
            if (hasContext) {
              each(transitions, function (t) {
                t.ctrl.start({
                  default: context
                });
              });
            }
          }, [context]);
          each(changes, function (_, t) {
            if (exitingTransitions.current.size) {
              var ind = transitions.findIndex(function (state) {
                return state.key === t.key;
              });
              transitions.splice(ind, 1);
            }
          });
          useIsomorphicLayoutEffect$1(function () {
            each(exitingTransitions.current.size ? exitingTransitions.current : changes, function (_ref35, t) {
              var phase = _ref35.phase,
                payload = _ref35.payload;
              var ctrl = t.ctrl;
              t.phase = phase;
              ref === null || ref === void 0 ? void 0 : ref.add(ctrl);
              if (hasContext && phase == "enter" /* ENTER */) {
                ctrl.start({
                  default: context
                });
              }
              if (payload) {
                replaceRef(ctrl, payload.ref);
                if ((ctrl.ref || ref) && !forceChange.current) {
                  ctrl.update(payload);
                } else {
                  ctrl.start(payload);
                  if (forceChange.current) {
                    forceChange.current = false;
                  }
                }
              }
            });
          }, reset ? void 0 : deps);
          var renderTransitions = function renderTransitions(render) {
            return /* @__PURE__ */reactExports.createElement(reactExports.Fragment, null, transitions.map(function (t, i) {
              var _ref36 = changes.get(t) || t.ctrl,
                springs = _ref36.springs;
              var elem = render(_objectSpread({}, springs), t.item, t, i);
              return elem && elem.type ? /* @__PURE__ */reactExports.createElement(elem.type, _objectSpread(_objectSpread({}, elem.props), {}, {
                key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,
                ref: elem.ref
              })) : elem;
            }));
          };
          return ref ? [renderTransitions, ref] : renderTransitions;
        }
        var nextKey = 1;
        function getKeys(items, _ref37, prevTransitions) {
          var key = _ref37.key,
            _ref37$keys = _ref37.keys,
            keys = _ref37$keys === void 0 ? key : _ref37$keys;
          if (keys === null) {
            var reused = /* @__PURE__ */new Set();
            return items.map(function (item) {
              var t = prevTransitions && prevTransitions.find(function (t2) {
                return t2.item === item && t2.phase !== "leave" /* LEAVE */ && !reused.has(t2);
              });
              if (t) {
                reused.add(t);
                return t.key;
              }
              return nextKey++;
            });
          }
          return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray$1(keys);
        }
        var Interpolation = /*#__PURE__*/function (_FrameValue2) {
          _inherits(Interpolation, _FrameValue2);
          var _super10 = _createSuper(Interpolation);
          function Interpolation(source, args) {
            var _this23;
            _classCallCheck(this, Interpolation);
            _this23 = _super10.call(this);
            _this23.source = source;
            /** Equals false when in the frameloop */
            _this23.idle = true;
            /** The inputs which are currently animating */
            _this23._active = /* @__PURE__ */new Set();
            _this23.calc = createInterpolator.apply(void 0, _toConsumableArray(args));
            var value = _this23._get();
            var nodeType = getAnimatedType(value);
            setAnimated(_assertThisInitialized(_this23), nodeType.create(value));
            return _this23;
          }
          _createClass(Interpolation, [{
            key: "advance",
            value: function advance(_dt) {
              var value = this._get();
              var oldValue = this.get();
              if (!isEqual$1(value, oldValue)) {
                getAnimated(this).setValue(value);
                this._onChange(value, this.idle);
              }
              if (!this.idle && checkIdle(this._active)) {
                becomeIdle(this);
              }
            }
          }, {
            key: "_get",
            value: function _get() {
              var inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray$1(getFluidValue(this.source));
              return this.calc.apply(this, _toConsumableArray(inputs));
            }
          }, {
            key: "_start",
            value: function _start() {
              var _this24 = this;
              if (this.idle && !checkIdle(this._active)) {
                this.idle = false;
                each(getPayload(this), function (node) {
                  node.done = false;
                });
                if (globals_exports.skipAnimation) {
                  raf.batchedUpdates(function () {
                    return _this24.advance();
                  });
                  becomeIdle(this);
                } else {
                  frameLoop.start(this);
                }
              }
            }
            // Observe our sources only when we're observed.
          }, {
            key: "_attach",
            value: function _attach() {
              var _this25 = this;
              var priority = 1;
              each(toArray$1(this.source), function (source) {
                if (hasFluidValue(source)) {
                  addFluidObserver(source, _this25);
                }
                if (isFrameValue(source)) {
                  if (!source.idle) {
                    _this25._active.add(source);
                  }
                  priority = Math.max(priority, source.priority + 1);
                }
              });
              this.priority = priority;
              this._start();
            }
            // Stop observing our sources once we have no observers.
          }, {
            key: "_detach",
            value: function _detach() {
              var _this26 = this;
              each(toArray$1(this.source), function (source) {
                if (hasFluidValue(source)) {
                  removeFluidObserver(source, _this26);
                }
              });
              this._active.clear();
              becomeIdle(this);
            }
            /** @internal */
          }, {
            key: "eventObserved",
            value: function eventObserved(event) {
              if (event.type == "change") {
                if (event.idle) {
                  this.advance();
                } else {
                  this._active.add(event.parent);
                  this._start();
                }
              } else if (event.type == "idle") {
                this._active.delete(event.parent);
              } else if (event.type == "priority") {
                this.priority = toArray$1(this.source).reduce(function (highest, parent) {
                  return Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1);
                }, 0);
              }
            }
          }]);
          return Interpolation;
        }(FrameValue);
        function isIdle(source) {
          return source.idle !== false;
        }
        function checkIdle(active) {
          return !active.size || Array.from(active).every(isIdle);
        }
        function becomeIdle(self) {
          if (!self.idle) {
            self.idle = true;
            each(getPayload(self), function (node) {
              node.done = true;
            });
            callFluidObservers(self, {
              type: "idle",
              parent: self
            });
          }
        }
        globals_exports.assign({
          createStringInterpolator: createStringInterpolator2,
          to: function to(source, args) {
            return new Interpolation(source, args);
          }
        });

        // src/index.ts

        // src/applyAnimatedValues.ts
        var isCustomPropRE = /^--/;
        function dangerousStyleValue(name, value) {
          if (value == null || typeof value === "boolean" || value === "") return "";
          if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + "px";
          return ("" + value).trim();
        }
        var attributeCache = {};
        function applyAnimatedValues(instance, props) {
          if (!instance.nodeType || !instance.setAttribute) {
            return false;
          }
          var isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
          var style = props.style,
            children = props.children,
            scrollTop = props.scrollTop,
            scrollLeft = props.scrollLeft,
            viewBox = props.viewBox,
            attributes = _objectWithoutProperties2(props, _excluded3);
          var values = Object.values(attributes);
          var names = Object.keys(attributes).map(function (name) {
            return isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g,
            // Attributes are written in dash case
            function (n) {
              return "-" + n.toLowerCase();
            }));
          });
          if (children !== void 0) {
            instance.textContent = children;
          }
          for (var name in style) {
            if (style.hasOwnProperty(name)) {
              var value = dangerousStyleValue(name, style[name]);
              if (isCustomPropRE.test(name)) {
                instance.style.setProperty(name, value);
              } else {
                instance.style[name] = value;
              }
            }
          }
          names.forEach(function (name, i) {
            instance.setAttribute(name, values[i]);
          });
          if (scrollTop !== void 0) {
            instance.scrollTop = scrollTop;
          }
          if (scrollLeft !== void 0) {
            instance.scrollLeft = scrollLeft;
          }
          if (viewBox !== void 0) {
            instance.setAttribute("viewBox", viewBox);
          }
        }
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        var prefixKey = function prefixKey(prefix, key) {
          return prefix + key.charAt(0).toUpperCase() + key.substring(1);
        };
        var prefixes$1 = ["Webkit", "Ms", "Moz", "O"];
        isUnitlessNumber = Object.keys(isUnitlessNumber).reduce(function (acc, prop) {
          prefixes$1.forEach(function (prefix) {
            return acc[prefixKey(prefix, prop)] = acc[prop];
          });
          return acc;
        }, isUnitlessNumber);
        var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
        var pxTransforms = /^(translate)/;
        var degTransforms = /^(rotate|skew)/;
        var addUnit = function addUnit(value, unit) {
          return is.num(value) && value !== 0 ? value + unit : value;
        };
        var isValueIdentity = function isValueIdentity(value, id) {
          return is.arr(value) ? value.every(function (v) {
            return isValueIdentity(v, id);
          }) : is.num(value) ? value === id : parseFloat(value) === id;
        };
        var AnimatedStyle = /*#__PURE__*/function (_AnimatedObject2) {
          _inherits(AnimatedStyle, _AnimatedObject2);
          var _super11 = _createSuper(AnimatedStyle);
          function AnimatedStyle(_ref38) {
            var x = _ref38.x,
              y = _ref38.y,
              z = _ref38.z,
              style = _objectWithoutProperties2(_ref38, _excluded4);
            _classCallCheck(this, AnimatedStyle);
            var inputs = [];
            var transforms = [];
            if (x || y || z) {
              inputs.push([x || 0, y || 0, z || 0]);
              transforms.push(function (xyz) {
                return ["translate3d(".concat(xyz.map(function (v) {
                  return addUnit(v, "px");
                }).join(","), ")"),
                // prettier-ignore
                isValueIdentity(xyz, 0)];
              });
            }
            eachProp(style, function (value, key) {
              if (key === "transform") {
                inputs.push([value || ""]);
                transforms.push(function (transform) {
                  return [transform, transform === ""];
                });
              } else if (domTransforms.test(key)) {
                delete style[key];
                if (is.und(value)) return;
                var unit = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
                inputs.push(toArray$1(value));
                transforms.push(key === "rotate3d" ? function (_ref39) {
                  var _ref40 = _slicedToArray2(_ref39, 4),
                    x2 = _ref40[0],
                    y2 = _ref40[1],
                    z2 = _ref40[2],
                    deg = _ref40[3];
                  return ["rotate3d(".concat(x2, ",").concat(y2, ",").concat(z2, ",").concat(addUnit(deg, unit), ")"), isValueIdentity(deg, 0)];
                } : function (input) {
                  return ["".concat(key, "(").concat(input.map(function (v) {
                    return addUnit(v, unit);
                  }).join(","), ")"), isValueIdentity(input, key.startsWith("scale") ? 1 : 0)];
                });
              }
            });
            if (inputs.length) {
              style.transform = new FluidTransform(inputs, transforms);
            }
            return _super11.call(this, style);
          }
          return _createClass(AnimatedStyle);
        }(AnimatedObject);
        var FluidTransform = /*#__PURE__*/function (_FluidValue2) {
          _inherits(FluidTransform, _FluidValue2);
          var _super12 = _createSuper(FluidTransform);
          function FluidTransform(inputs, transforms) {
            var _this27;
            _classCallCheck(this, FluidTransform);
            _this27 = _super12.call(this);
            _this27.inputs = inputs;
            _this27.transforms = transforms;
            _this27._value = null;
            return _this27;
          }
          _createClass(FluidTransform, [{
            key: "get",
            value: function get() {
              return this._value || (this._value = this._get());
            }
          }, {
            key: "_get",
            value: function _get() {
              var _this28 = this;
              var transform = "";
              var identity = true;
              each(this.inputs, function (input, i) {
                var arg1 = getFluidValue(input[0]);
                var _this28$transforms$i = _this28.transforms[i](is.arr(arg1) ? arg1 : input.map(getFluidValue)),
                  _this28$transforms$i2 = _slicedToArray2(_this28$transforms$i, 2),
                  t = _this28$transforms$i2[0],
                  id = _this28$transforms$i2[1];
                transform += " " + t;
                identity = identity && id;
              });
              return identity ? "none" : transform;
            }
            // Start observing our inputs once we have an observer.
          }, {
            key: "observerAdded",
            value: function observerAdded(count) {
              var _this29 = this;
              if (count == 1) each(this.inputs, function (input) {
                return each(input, function (value) {
                  return hasFluidValue(value) && addFluidObserver(value, _this29);
                });
              });
            }
            // Stop observing our inputs once we have no observers.
          }, {
            key: "observerRemoved",
            value: function observerRemoved(count) {
              var _this30 = this;
              if (count == 0) each(this.inputs, function (input) {
                return each(input, function (value) {
                  return hasFluidValue(value) && removeFluidObserver(value, _this30);
                });
              });
            }
          }, {
            key: "eventObserved",
            value: function eventObserved(event) {
              if (event.type == "change") {
                this._value = null;
              }
              callFluidObservers(this, event);
            }
          }]);
          return FluidTransform;
        }(FluidValue);

        // src/primitives.ts
        var primitives = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr",
        // SVG
        "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
        globals_exports.assign({
          batchedUpdates: reactDomExports.unstable_batchedUpdates,
          createStringInterpolator: createStringInterpolator2,
          colors: colors2
        });
        var host = createHost(primitives, {
          applyAnimatedValues: applyAnimatedValues,
          createAnimatedStyle: function createAnimatedStyle(style) {
            return new AnimatedStyle(style);
          },
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          getComponentProps: function getComponentProps(_ref41) {
            var scrollTop = _ref41.scrollTop,
              scrollLeft = _ref41.scrollLeft,
              props = _objectWithoutProperties2(_ref41, _excluded5);
            return props;
          }
        });
        var animated = host.animated;
        var FadeIn = function FadeIn(_ref42) {
          var _ref42$isOpen = _ref42.isOpen,
            isOpen = _ref42$isOpen === void 0 ? true : _ref42$isOpen,
            children = _ref42.children,
            delay = _ref42.delay,
            _ref42$loop = _ref42.loop,
            loop = _ref42$loop === void 0 ? false : _ref42$loop;
          var transition = useTransition(isOpen, {
            from: {
              opacity: 0
            },
            enter: {
              display: "grid",
              opacity: 1,
              height: "100%"
            },
            leave: {
              opacity: 0
            },
            delay: delay,
            loop: loop
          });
          return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
            children: transition(function (style, isOpen2) {
              return !!isOpen2 && /* @__PURE__ */jsxRuntimeExports.jsx(animated.div, {
                style: style,
                children: children
              });
            })
          });
        };
        var Splash = function Splash() {
          var navigate = useNavigate();
          var height = useGetInnerHeight();
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: styles$c["grid-layout"],
            style: {
              height: "".concat(height, "px")
            },
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("header", {}), /* @__PURE__ */jsxRuntimeExports.jsx("main", {
              children: /* @__PURE__ */jsxRuntimeExports.jsx("section", {
                className: "!h-screen px-4 pb-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: styles$c["grid"],
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "text-center px-4 pb-4",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                      delay: 50,
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                        className: "self-center inline mb-4 justify-self-center",
                        alt: "app-icon",
                        src: "./assets/icon.svg"
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                      delay: 100,
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("h6", {
                        className: "text-2xl font-bold mb-6",
                        children: "Welcome to Security"
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                      delay: 200,
                      children: /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                        children: ["Designed to help you keep your data and funds safe. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "You can easily secure your node by locking your private keys and creating a backup regularly."]
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                    delay: 500,
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                      onClick: function onClick() {
                        return navigate("/dashboard");
                      },
                      className: "core-black-contrast-2 core-grey-5 self-end mb-12 font-bold w-full",
                      children: "Continue"
                    })
                  })]
                })
              })
            })]
          });
        };
        var grid$2 = "_grid_ixvli_1";
        var backdrop$2 = "_backdrop_ixvli_19";
        var full$2 = "_full_ixvli_68";
        var dialog$4 = "_dialog_ixvli_71";
        var button__wrapper$4 = "_button__wrapper_ixvli_94";
        var primaryActions$4 = "_primaryActions_ixvli_98";
        var secondaryActions$4 = "_secondaryActions_ixvli_119";
        var desktop_only$4 = "_desktop_only_ixvli_138";
        var mobile_only$4 = "_mobile_only_ixvli_141";
        var styles$b = {
          grid: grid$2,
          backdrop: backdrop$2,
          full: full$2,
          dialog: dialog$4,
          button__wrapper: button__wrapper$4,
          primaryActions: primaryActions$4,
          secondaryActions: secondaryActions$4,
          desktop_only: desktop_only$4,
          mobile_only: mobile_only$4
        };
        function _extends$1() {
          _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends$1.apply(this, arguments);
        }
        function _objectWithoutPropertiesLoose$2(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        function _setPrototypeOf(o, p) {
          _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };
          return _setPrototypeOf(o, p);
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          _setPrototypeOf(subClass, superClass);
        }

        /**
         * Checks if a given element has a CSS class.
         * 
         * @param element the element
         * @param className the CSS class name
         */
        function hasClass(element, className) {
          if (element.classList) return !!className && element.classList.contains(className);
          return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
        }

        /**
         * Adds a CSS class to a given element.
         * 
         * @param element the element
         * @param className the CSS class name
         */

        function addClass(element, className) {
          if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
        }
        function replaceClassName(origClass, classToRemove) {
          return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
        }
        /**
         * Removes a CSS class from a given element.
         * 
         * @param element the element
         * @param className the CSS class name
         */

        function removeClass$1(element, className) {
          if (element.classList) {
            element.classList.remove(className);
          } else if (typeof element.className === 'string') {
            element.className = replaceClassName(element.className, className);
          } else {
            element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
          }
        }
        var config = {
          disabled: false
        };
        var TransitionGroupContext = React.createContext(null);
        var forceReflow = function forceReflow(node) {
          return node.scrollTop;
        };
        var UNMOUNTED = 'unmounted';
        var EXITED = 'exited';
        var ENTERING = 'entering';
        var ENTERED = 'entered';
        var EXITING = 'exiting';
        /**
         * The Transition component lets you describe a transition from one component
         * state to another _over time_ with a simple declarative API. Most commonly
         * it's used to animate the mounting and unmounting of a component, but can also
         * be used to describe in-place transition states as well.
         *
         * ---
         *
         * **Note**: `Transition` is a platform-agnostic base component. If you're using
         * transitions in CSS, you'll probably want to use
         * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
         * instead. It inherits all the features of `Transition`, but contains
         * additional features necessary to play nice with CSS transitions (hence the
         * name of the component).
         *
         * ---
         *
         * By default the `Transition` component does not alter the behavior of the
         * component it renders, it only tracks "enter" and "exit" states for the
         * components. It's up to you to give meaning and effect to those states. For
         * example we can add styles to a component when it enters or exits:
         *
         * ```jsx
         * import { Transition } from 'react-transition-group';
         *
         * const duration = 300;
         *
         * const defaultStyle = {
         *   transition: `opacity ${duration}ms ease-in-out`,
         *   opacity: 0,
         * }
         *
         * const transitionStyles = {
         *   entering: { opacity: 1 },
         *   entered:  { opacity: 1 },
         *   exiting:  { opacity: 0 },
         *   exited:  { opacity: 0 },
         * };
         *
         * const Fade = ({ in: inProp }) => (
         *   <Transition in={inProp} timeout={duration}>
         *     {state => (
         *       <div style={{
         *         ...defaultStyle,
         *         ...transitionStyles[state]
         *       }}>
         *         I'm a fade Transition!
         *       </div>
         *     )}
         *   </Transition>
         * );
         * ```
         *
         * There are 4 main states a Transition can be in:
         *  - `'entering'`
         *  - `'entered'`
         *  - `'exiting'`
         *  - `'exited'`
         *
         * Transition state is toggled via the `in` prop. When `true` the component
         * begins the "Enter" stage. During this stage, the component will shift from
         * its current transition state, to `'entering'` for the duration of the
         * transition and then to the `'entered'` stage once it's complete. Let's take
         * the following example (we'll use the
         * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
         *
         * ```jsx
         * function App() {
         *   const [inProp, setInProp] = useState(false);
         *   return (
         *     <div>
         *       <Transition in={inProp} timeout={500}>
         *         {state => (
         *           // ...
         *         )}
         *       </Transition>
         *       <button onClick={() => setInProp(true)}>
         *         Click to Enter
         *       </button>
         *     </div>
         *   );
         * }
         * ```
         *
         * When the button is clicked the component will shift to the `'entering'` state
         * and stay there for 500ms (the value of `timeout`) before it finally switches
         * to `'entered'`.
         *
         * When `in` is `false` the same thing happens except the state moves from
         * `'exiting'` to `'exited'`.
         */

        var Transition = /*#__PURE__*/function (_React$Component) {
          _inheritsLoose(Transition, _React$Component);
          function Transition(props, context) {
            var _this;
            _this = _React$Component.call(this, props, context) || this;
            var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

            var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
            var initialStatus;
            _this.appearStatus = null;
            if (props.in) {
              if (appear) {
                initialStatus = EXITED;
                _this.appearStatus = ENTERING;
              } else {
                initialStatus = ENTERED;
              }
            } else {
              if (props.unmountOnExit || props.mountOnEnter) {
                initialStatus = UNMOUNTED;
              } else {
                initialStatus = EXITED;
              }
            }
            _this.state = {
              status: initialStatus
            };
            _this.nextCallback = null;
            return _this;
          }
          Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
            var nextIn = _ref.in;
            if (nextIn && prevState.status === UNMOUNTED) {
              return {
                status: EXITED
              };
            }
            return null;
          } // getSnapshotBeforeUpdate(prevProps) {
          //   let nextStatus = null
          //   if (prevProps !== this.props) {
          //     const { status } = this.state
          //     if (this.props.in) {
          //       if (status !== ENTERING && status !== ENTERED) {
          //         nextStatus = ENTERING
          //       }
          //     } else {
          //       if (status === ENTERING || status === ENTERED) {
          //         nextStatus = EXITING
          //       }
          //     }
          //   }
          //   return { nextStatus }
          // }
          ;

          var _proto = Transition.prototype;
          _proto.componentDidMount = function componentDidMount() {
            this.updateStatus(true, this.appearStatus);
          };
          _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
            var nextStatus = null;
            if (prevProps !== this.props) {
              var status = this.state.status;
              if (this.props.in) {
                if (status !== ENTERING && status !== ENTERED) {
                  nextStatus = ENTERING;
                }
              } else {
                if (status === ENTERING || status === ENTERED) {
                  nextStatus = EXITING;
                }
              }
            }
            this.updateStatus(false, nextStatus);
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            this.cancelNextCallback();
          };
          _proto.getTimeouts = function getTimeouts() {
            var timeout = this.props.timeout;
            var exit, enter, appear;
            exit = enter = appear = timeout;
            if (timeout != null && typeof timeout !== 'number') {
              exit = timeout.exit;
              enter = timeout.enter; // TODO: remove fallback for next major

              appear = timeout.appear !== undefined ? timeout.appear : enter;
            }
            return {
              exit: exit,
              enter: enter,
              appear: appear
            };
          };
          _proto.updateStatus = function updateStatus(mounting, nextStatus) {
            if (mounting === void 0) {
              mounting = false;
            }
            if (nextStatus !== null) {
              // nextStatus will always be ENTERING or EXITING.
              this.cancelNextCallback();
              if (nextStatus === ENTERING) {
                if (this.props.unmountOnExit || this.props.mountOnEnter) {
                  var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
                  // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
                  // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

                  if (node) forceReflow(node);
                }
                this.performEnter(mounting);
              } else {
                this.performExit();
              }
            } else if (this.props.unmountOnExit && this.state.status === EXITED) {
              this.setState({
                status: UNMOUNTED
              });
            }
          };
          _proto.performEnter = function performEnter(mounting) {
            var _this2 = this;
            var enter = this.props.enter;
            var appearing = this.context ? this.context.isMounting : mounting;
            var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
              maybeNode = _ref2[0],
              maybeAppearing = _ref2[1];
            var timeouts = this.getTimeouts();
            var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
            // if we are mounting and running this it means appear _must_ be set

            if (!mounting && !enter || config.disabled) {
              this.safeSetState({
                status: ENTERED
              }, function () {
                _this2.props.onEntered(maybeNode);
              });
              return;
            }
            this.props.onEnter(maybeNode, maybeAppearing);
            this.safeSetState({
              status: ENTERING
            }, function () {
              _this2.props.onEntering(maybeNode, maybeAppearing);
              _this2.onTransitionEnd(enterTimeout, function () {
                _this2.safeSetState({
                  status: ENTERED
                }, function () {
                  _this2.props.onEntered(maybeNode, maybeAppearing);
                });
              });
            });
          };
          _proto.performExit = function performExit() {
            var _this3 = this;
            var exit = this.props.exit;
            var timeouts = this.getTimeouts();
            var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

            if (!exit || config.disabled) {
              this.safeSetState({
                status: EXITED
              }, function () {
                _this3.props.onExited(maybeNode);
              });
              return;
            }
            this.props.onExit(maybeNode);
            this.safeSetState({
              status: EXITING
            }, function () {
              _this3.props.onExiting(maybeNode);
              _this3.onTransitionEnd(timeouts.exit, function () {
                _this3.safeSetState({
                  status: EXITED
                }, function () {
                  _this3.props.onExited(maybeNode);
                });
              });
            });
          };
          _proto.cancelNextCallback = function cancelNextCallback() {
            if (this.nextCallback !== null) {
              this.nextCallback.cancel();
              this.nextCallback = null;
            }
          };
          _proto.safeSetState = function safeSetState(nextState, callback) {
            // This shouldn't be necessary, but there are weird race conditions with
            // setState callbacks and unmounting in testing, so always make sure that
            // we can cancel any pending setState callbacks after we unmount.
            callback = this.setNextCallback(callback);
            this.setState(nextState, callback);
          };
          _proto.setNextCallback = function setNextCallback(callback) {
            var _this4 = this;
            var active = true;
            this.nextCallback = function (event) {
              if (active) {
                active = false;
                _this4.nextCallback = null;
                callback(event);
              }
            };
            this.nextCallback.cancel = function () {
              active = false;
            };
            return this.nextCallback;
          };
          _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
            this.setNextCallback(handler);
            var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
            var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
            if (!node || doesNotHaveTimeoutOrListener) {
              setTimeout(this.nextCallback, 0);
              return;
            }
            if (this.props.addEndListener) {
              var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
                maybeNode = _ref3[0],
                maybeNextCallback = _ref3[1];
              this.props.addEndListener(maybeNode, maybeNextCallback);
            }
            if (timeout != null) {
              setTimeout(this.nextCallback, timeout);
            }
          };
          _proto.render = function render() {
            var status = this.state.status;
            if (status === UNMOUNTED) {
              return null;
            }
            var _this$props = this.props,
              children = _this$props.children;
            _this$props.in;
            _this$props.mountOnEnter;
            _this$props.unmountOnExit;
            _this$props.appear;
            _this$props.enter;
            _this$props.exit;
            _this$props.timeout;
            _this$props.addEndListener;
            _this$props.onEnter;
            _this$props.onEntering;
            _this$props.onEntered;
            _this$props.onExit;
            _this$props.onExiting;
            _this$props.onExited;
            _this$props.nodeRef;
            var childProps = _objectWithoutPropertiesLoose$2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
            return /*#__PURE__*/(
              // allows for nested Transitions
              React.createElement(TransitionGroupContext.Provider, {
                value: null
              }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
            );
          };
          return Transition;
        }(React.Component);
        Transition.contextType = TransitionGroupContext;
        Transition.propTypes = {}; // Name the function so it is clearer in the documentation

        function noop() {}
        Transition.defaultProps = {
          in: false,
          mountOnEnter: false,
          unmountOnExit: false,
          appear: false,
          enter: true,
          exit: true,
          onEnter: noop,
          onEntering: noop,
          onEntered: noop,
          onExit: noop,
          onExiting: noop,
          onExited: noop
        };
        Transition.UNMOUNTED = UNMOUNTED;
        Transition.EXITED = EXITED;
        Transition.ENTERING = ENTERING;
        Transition.ENTERED = ENTERED;
        Transition.EXITING = EXITING;
        var Transition$1 = Transition;
        var _addClass = function addClass$1(node, classes) {
          return node && classes && classes.split(' ').forEach(function (c) {
            return addClass(node, c);
          });
        };
        var removeClass = function removeClass(node, classes) {
          return node && classes && classes.split(' ').forEach(function (c) {
            return removeClass$1(node, c);
          });
        };
        /**
         * A transition component inspired by the excellent
         * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
         * use it if you're using CSS transitions or animations. It's built upon the
         * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
         * component, so it inherits all of its props.
         *
         * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
         * and `exit` states of the transition. The first class is applied and then a
         * second `*-active` class in order to activate the CSS transition. After the
         * transition, matching `*-done` class names are applied to persist the
         * transition state.
         *
         * ```jsx
         * function App() {
         *   const [inProp, setInProp] = useState(false);
         *   return (
         *     <div>
         *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
         *         <div>
         *           {"I'll receive my-node-* classes"}
         *         </div>
         *       </CSSTransition>
         *       <button type="button" onClick={() => setInProp(true)}>
         *         Click to Enter
         *       </button>
         *     </div>
         *   );
         * }
         * ```
         *
         * When the `in` prop is set to `true`, the child component will first receive
         * the class `example-enter`, then the `example-enter-active` will be added in
         * the next tick. `CSSTransition` [forces a
         * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
         * between before adding the `example-enter-active`. This is an important trick
         * because it allows us to transition between `example-enter` and
         * `example-enter-active` even though they were added immediately one after
         * another. Most notably, this is what makes it possible for us to animate
         * _appearance_.
         *
         * ```css
         * .my-node-enter {
         *   opacity: 0;
         * }
         * .my-node-enter-active {
         *   opacity: 1;
         *   transition: opacity 200ms;
         * }
         * .my-node-exit {
         *   opacity: 1;
         * }
         * .my-node-exit-active {
         *   opacity: 0;
         *   transition: opacity 200ms;
         * }
         * ```
         *
         * `*-active` classes represent which styles you want to animate **to**, so it's
         * important to add `transition` declaration only to them, otherwise transitions
         * might not behave as intended! This might not be obvious when the transitions
         * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
         * the example above (minus `transition`), but it becomes apparent in more
         * complex transitions.
         *
         * **Note**: If you're using the
         * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
         * prop, make sure to define styles for `.appear-*` classes as well.
         */

        var CSSTransition = /*#__PURE__*/function (_React$Component) {
          _inheritsLoose(CSSTransition, _React$Component);
          function CSSTransition() {
            var _this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
            _this.appliedClasses = {
              appear: {},
              enter: {},
              exit: {}
            };
            _this.onEnter = function (maybeNode, maybeAppearing) {
              var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
                node = _this$resolveArgument[0],
                appearing = _this$resolveArgument[1];
              _this.removeClasses(node, 'exit');
              _this.addClass(node, appearing ? 'appear' : 'enter', 'base');
              if (_this.props.onEnter) {
                _this.props.onEnter(maybeNode, maybeAppearing);
              }
            };
            _this.onEntering = function (maybeNode, maybeAppearing) {
              var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
                node = _this$resolveArgument2[0],
                appearing = _this$resolveArgument2[1];
              var type = appearing ? 'appear' : 'enter';
              _this.addClass(node, type, 'active');
              if (_this.props.onEntering) {
                _this.props.onEntering(maybeNode, maybeAppearing);
              }
            };
            _this.onEntered = function (maybeNode, maybeAppearing) {
              var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
                node = _this$resolveArgument3[0],
                appearing = _this$resolveArgument3[1];
              var type = appearing ? 'appear' : 'enter';
              _this.removeClasses(node, type);
              _this.addClass(node, type, 'done');
              if (_this.props.onEntered) {
                _this.props.onEntered(maybeNode, maybeAppearing);
              }
            };
            _this.onExit = function (maybeNode) {
              var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
                node = _this$resolveArgument4[0];
              _this.removeClasses(node, 'appear');
              _this.removeClasses(node, 'enter');
              _this.addClass(node, 'exit', 'base');
              if (_this.props.onExit) {
                _this.props.onExit(maybeNode);
              }
            };
            _this.onExiting = function (maybeNode) {
              var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
                node = _this$resolveArgument5[0];
              _this.addClass(node, 'exit', 'active');
              if (_this.props.onExiting) {
                _this.props.onExiting(maybeNode);
              }
            };
            _this.onExited = function (maybeNode) {
              var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
                node = _this$resolveArgument6[0];
              _this.removeClasses(node, 'exit');
              _this.addClass(node, 'exit', 'done');
              if (_this.props.onExited) {
                _this.props.onExited(maybeNode);
              }
            };
            _this.resolveArguments = function (maybeNode, maybeAppearing) {
              return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
              : [maybeNode, maybeAppearing];
            };
            _this.getClassNames = function (type) {
              var classNames = _this.props.classNames;
              var isStringClassNames = typeof classNames === 'string';
              var prefix = isStringClassNames && classNames ? classNames + "-" : '';
              var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
              var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
              var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
              return {
                baseClassName: baseClassName,
                activeClassName: activeClassName,
                doneClassName: doneClassName
              };
            };
            return _this;
          }
          var _proto = CSSTransition.prototype;
          _proto.addClass = function addClass(node, type, phase) {
            var className = this.getClassNames(type)[phase + "ClassName"];
            var _this$getClassNames = this.getClassNames('enter'),
              doneClassName = _this$getClassNames.doneClassName;
            if (type === 'appear' && phase === 'done' && doneClassName) {
              className += " " + doneClassName;
            } // This is to force a repaint,
            // which is necessary in order to transition styles when adding a class name.

            if (phase === 'active') {
              if (node) forceReflow(node);
            }
            if (className) {
              this.appliedClasses[type][phase] = className;
              _addClass(node, className);
            }
          };
          _proto.removeClasses = function removeClasses(node, type) {
            var _this$appliedClasses$ = this.appliedClasses[type],
              baseClassName = _this$appliedClasses$.base,
              activeClassName = _this$appliedClasses$.active,
              doneClassName = _this$appliedClasses$.done;
            this.appliedClasses[type] = {};
            if (baseClassName) {
              removeClass(node, baseClassName);
            }
            if (activeClassName) {
              removeClass(node, activeClassName);
            }
            if (doneClassName) {
              removeClass(node, doneClassName);
            }
          };
          _proto.render = function render() {
            var _this$props = this.props;
            _this$props.classNames;
            var props = _objectWithoutPropertiesLoose$2(_this$props, ["classNames"]);
            return /*#__PURE__*/React.createElement(Transition$1, _extends$1({}, props, {
              onEnter: this.onEnter,
              onEntered: this.onEntered,
              onEntering: this.onEntering,
              onExit: this.onExit,
              onExiting: this.onExiting,
              onExited: this.onExited
            }));
          };
          return CSSTransition;
        }(React.Component);
        CSSTransition.defaultProps = {
          classNames: ''
        };
        CSSTransition.propTypes = {};
        var CSSTransition$1 = CSSTransition;
        var slideEnter = "_slideEnter_crqpp_1";
        var slideEnterActive = "_slideEnterActive_crqpp_4";
        var slideExit = "_slideExit_crqpp_9";
        var slideExitActive = "_slideExitActive_crqpp_12";
        var styles$a = {
          slideEnter: slideEnter,
          slideEnterActive: slideEnterActive,
          slideExit: slideExit,
          slideExitActive: slideExitActive
        };
        var SlideScreen = function SlideScreen(_ref43) {
          var display = _ref43.display,
            children = _ref43.children;
          return /* @__PURE__ */jsxRuntimeExports.jsx(CSSTransition$1, {
            in: display,
            unmountOnExit: true,
            timeout: 500,
            classNames: {
              enter: styles$a.slideEnter,
              enterDone: styles$a.slideEnterActive,
              exit: styles$a.slideExit,
              exitActive: styles$a.slideExitActive
            },
            children: children
          });
        };
        var useCanUseTitleBar = function useCanUseTitleBar() {
          var openTitleBar = function openTitleBar() {
            var _window$navigator$use;
            if ((_window$navigator$use = window.navigator.userAgent) !== null && _window$navigator$use !== void 0 && _window$navigator$use.includes("Minima Browser")) {
              Android.showTitleBar();
            }
          };
          return openTitleBar;
        };
        function AppIsInReadMode() {
          var _reactExports$useCont7 = reactExports.useContext(appContext),
            appIsInWriteMode = _reactExports$useCont7.appIsInWriteMode;
          var display = appIsInWriteMode === false;
          var openTitleBar = useCanUseTitleBar();
          return /* @__PURE__ */jsxRuntimeExports.jsx(SlideScreen, {
            display: display,
            children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: styles$b["backdrop"]
              }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: styles$b["grid"],
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("header", {}), /* @__PURE__ */jsxRuntimeExports.jsx("main", {
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("section", {
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: styles$b["dialog"],
                      children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        onClick: openTitleBar,
                        className: "flex flex-col justify-center items-center text-center",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("img", {
                          className: "mb-4",
                          alt: "download",
                          src: "./assets/read.svg"
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("h1", {
                          className: "text-2xl mb-8",
                          children: ["App is in ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " read mode"]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: "Please ensure you set the Security minidapp in write mode then reload this page."
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "flex flex-col gap-3",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          className: "".concat(styles$b.primaryActions)
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          className: "".concat(styles$b.desktop_only, " ").concat(styles$b.secondaryActions),
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                            onClick: function onClick(e) {
                              e.stopPropagation();
                              window.location.reload();
                            },
                            children: "Reload"
                          })
                        })]
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "".concat(styles$b.mobile_only, " ").concat(styles$b.secondaryActions),
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                        onClick: function onClick(e) {
                          e.stopPropagation();
                          window.location.reload();
                        },
                        children: "Reload"
                      })
                    })]
                  })
                })]
              })]
            })
          });
        }
        var grid$1 = "_grid_ixvli_1";
        var backdrop$1 = "_backdrop_ixvli_19";
        var full$1 = "_full_ixvli_68";
        var dialog$3 = "_dialog_ixvli_71";
        var button__wrapper$3 = "_button__wrapper_ixvli_94";
        var primaryActions$3 = "_primaryActions_ixvli_98";
        var secondaryActions$3 = "_secondaryActions_ixvli_119";
        var desktop_only$3 = "_desktop_only_ixvli_138";
        var mobile_only$3 = "_mobile_only_ixvli_141";
        var styles$9 = {
          grid: grid$1,
          backdrop: backdrop$1,
          full: full$1,
          dialog: dialog$3,
          button__wrapper: button__wrapper$3,
          primaryActions: primaryActions$3,
          secondaryActions: secondaryActions$3,
          desktop_only: desktop_only$3,
          mobile_only: mobile_only$3
        };
        var useIsMinimaBrowser = function useIsMinimaBrowser() {
          var _reactExports$useStat55 = reactExports.useState(false),
            _reactExports$useStat56 = _slicedToArray2(_reactExports$useStat55, 2),
            isMinimaBrowser = _reactExports$useStat56[0],
            setMinimaBrowser = _reactExports$useStat56[1];
          reactExports.useEffect(function () {
            if (window.navigator.userAgent.includes("Minima Browser")) {
              setMinimaBrowser(true);
            }
          }, []);
          return isMinimaBrowser;
        };
        function MinidappSystemFailed() {
          var _reactExports$useCont8 = reactExports.useContext(appContext),
            minidappSystemFailed = _reactExports$useCont8.minidappSystemFailed;
          var isMinimaBrowser = useIsMinimaBrowser();
          var display = minidappSystemFailed === true;
          return display && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: styles$9["backdrop"]
            }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: styles$9["grid"],
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("header", {}), /* @__PURE__ */jsxRuntimeExports.jsx("main", {
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("section", {
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: styles$9["dialog"],
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "flex flex-col items-center justify-center",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                        width: "116",
                        height: "116",
                        viewBox: "0 0 512 512",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M315.717 217.542L328.832 159.576L387.722 183.267L371.138 256.529C365.845 257.805 360.974 261.126 357.875 266.494L306.544 355.402H284.569L267.797 285.338L252.034 355.402H187.722L173.724 273.24L155.187 355.402H91L151.53 88L210.294 111.691L224.292 193.852L240.181 123.788L298.945 147.605L315.717 217.542Z",
                          fill: "white"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M368.012 270.337L348.756 355.402H318.74L367.022 271.775C367.32 271.258 367.652 270.778 368.012 270.337Z",
                          fill: "white"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          fillRule: "evenodd",
                          clipRule: "evenodd",
                          d: "M385.315 271.775C381.25 264.734 371.087 264.734 367.022 271.775L306.653 376.337C302.588 383.378 307.669 392.18 315.8 392.18H436.537C444.668 392.18 449.749 383.378 445.684 376.337L385.315 271.775ZM371.809 371.083C373.168 372.442 374.801 373.121 376.709 373.121C378.617 373.121 380.251 372.442 381.61 371.083C382.968 369.724 383.648 368.091 383.648 366.183C383.648 364.275 382.968 362.641 381.61 361.282C380.251 359.924 378.617 359.244 376.709 359.244C374.801 359.244 373.168 359.924 371.809 361.282C370.45 362.641 369.771 364.275 369.771 366.183C369.771 368.091 370.45 369.724 371.809 371.083ZM369.771 310.675V352.306H383.648V310.675H369.771Z",
                          fill: "white"
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                        className: "text-2xl mb-8",
                        children: "Minidapp System is offline"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "text-center",
                        children: "Try to re-login into your hub and re-open this app."
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "flex flex-col gap-3",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "".concat(styles$9.primaryActions)
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "".concat(styles$9.desktop_only, " ").concat(styles$9.secondaryActions),
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                          onClick: function onClick() {
                            return window.close();
                          },
                          children: "Close Window"
                        })
                      })]
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "".concat(styles$9.mobile_only, " ").concat(styles$9.secondaryActions),
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                      onClick: function onClick() {
                        if (isMinimaBrowser) {
                          return Android.closeWindow();
                        }
                        return window.close();
                      },
                      children: "Close Window"
                    })
                  })]
                })
              })]
            })]
          });
        }
        var BackButton = function BackButton(_ref44) {
          var title = _ref44.title,
            to = _ref44.to,
            extraClass = _ref44.extraClass,
            onClickHandler = _ref44.onClickHandler;
          var navigate = useNavigate();
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            onClick: function onClick(e) {
              e.stopPropagation();
              to ? navigate(to) : onClickHandler ? onClickHandler() : null;
            },
            className: "flex cursor-pointer items-center",
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
              width: "8",
              height: "14",
              viewBox: "0 0 8 14",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              className: "".concat(extraClass, " mr-2"),
              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                d: "M6.90017 13.1693L0.730957 7.00009L6.90017 0.830872L7.79631 1.72701L2.52324 7.00009L7.79631 12.2732L6.90017 13.1693Z",
                fill: "#F9F9FA"
              })
            }), title]
          });
        };
        var Dialog$1 = function Dialog$1(_ref45) {
          var children = _ref45.children,
            dismiss = _ref45.dismiss,
            extraClass = _ref45.extraClass;
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "fixed left-0 right-0 bottom-0 top-0 grid grid-cols-[1fr_minmax(0,_560px)_1fr] ".concat(extraClass ? extraClass : ""),
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
              onClick: dismiss,
              id: "backdrop",
              className: "backdrop-blur-sm fixed left-0 right-0 top-0 bottom-0"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {}), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              onClick: dismiss,
              className: "relative z-[21] h-max",
              children: children
            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {})]
          });
        };
        var AnimatedDialog = function AnimatedDialog(_ref46) {
          var isOpen = _ref46.isOpen,
            onClose = _ref46.onClose,
            extraClass = _ref46.extraClass,
            position = _ref46.position,
            children = _ref46.children,
            dialogStyles = _ref46.dialogStyles;
          var springProps = useSpring({
            opacity: isOpen ? 1 : 0,
            transform: isOpen ? "translateY(0%) scale(1)" : "translateY(-50%) scale(0.8)",
            config: config$1.gentle
          });
          return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
            children: isOpen && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(Dialog$1, {
              extraClass: extraClass,
              dismiss: onClose,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "h-screen grid ".concat(position),
                children: /* @__PURE__ */jsxRuntimeExports.jsx(animated.div, {
                  style: springProps,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    onClick: function onClick(e) {
                      return e.stopPropagation();
                    },
                    className: "bg-white shadow-lg shadow-slate-300 dark:shadow-none dark:bg-black w-[calc(100%_-_16px)] md:w-full p-4 px-0 rounded mx-auto ".concat(dialogStyles),
                    children: children
                  })
                })
              })
            }), document.body)
          });
        };
        var RefreshIcon = function RefreshIcon(_ref47) {
          var fill = _ref47.fill,
            extraClass = _ref47.extraClass;
          return /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            className: "icon icon-tabler icon-tabler-heart-filled ".concat(extraClass && extraClass),
            width: "24",
            height: "24",
            viewBox: "0 0 24 24",
            strokeWidth: "2.5",
            stroke: fill,
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("path", {
              stroke: "none",
              d: "M0 0h24v24H0z",
              fill: "none"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
              d: "M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
              d: "M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4"
            })]
          });
        };
        var DoneIcon = function DoneIcon(_ref48) {
          var fill = _ref48.fill;
          return /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            className: "icon icon-tabler icon-tabler-heart-filled",
            width: "24",
            height: "22",
            viewBox: "0 0 24 24",
            strokeWidth: "2.5",
            stroke: fill,
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("path", {
              stroke: "none",
              d: "M0 0h24v24H0z",
              fill: "none"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
              d: "M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
              d: "M9 12l2 2l4 -4"
            })]
          });
        };
        var FileUpload = function FileUpload() {
          var _reactExports$useCont9 = reactExports.useContext(appContext),
            _promptFileUpload = _reactExports$useCont9._promptFileUpload;
          return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(AnimatedDialog, {
              isOpen: _typeof2(_promptFileUpload) === "object",
              onClose: function onClose() {
                return null;
              },
              position: "items-start mt-20",
              extraClass: "max-w-sm mx-auto",
              dialogStyles: "h-max rounded-lg !shadow-teal-800 !shadow-sm overflow-hidden bg-black",
              children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "grid grid-cols-[1fr_auto] px-3",
                children: [_promptFileUpload && _promptFileUpload.status === null && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                    children: ["File upload in progress... ", _promptFileUpload.progress, "/100"]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(RefreshIcon, {
                      fill: "currentColor",
                      extraClass: "animate-spin"
                    })
                  })]
                }), _promptFileUpload && _promptFileUpload.status === true && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    children: "File upload completed!"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                    className: "text-teal-300",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(DoneIcon, {
                      fill: "currentColor"
                    })
                  })]
                }), _promptFileUpload && _promptFileUpload.status === false && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                      children: "File upload failed..."
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                      className: "text-sm",
                      children: _promptFileUpload.error
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {})]
                })]
              })
            })
          });
        };
        var Brand = function Brand() {
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "grid grid-cols-[auto_1fr] px-3",
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "my-auto",
              children: /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                className: "w-[32px]",
                alt: "security-icon",
                src: "./assets/security.svg"
              })
            }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
              className: "font-bold ml-2 my-auto",
              children: "Security"
            })]
          });
        };
        var Dashboard = function Dashboard() {
          var _reactExports$useCont10 = reactExports.useContext(appContext),
            displayBackButton = _reactExports$useCont10.displayBackButton,
            backButton = _reactExports$useCont10.backButton;
          var openTitleBar = useCanUseTitleBar();
          var DISPLAY_BACK_BUTTON = displayBackButton && displayBackButton.display;
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsx(AppIsInReadMode, {}), /* @__PURE__ */jsxRuntimeExports.jsx(MinidappSystemFailed, {}), /* @__PURE__ */jsxRuntimeExports.jsx(FileUpload, {}), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "grid grid-rows-[56px_1fr] h-[100vh]",
              children: [/* @__PURE__ */jsxRuntimeExports.jsxs("header", {
                onClick: openTitleBar,
                className: "grid grid-cols-[1fr_minmax(0,_860px)_1fr]",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {}), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "py-3",
                  children: [DISPLAY_BACK_BUTTON && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "flex items-center px-6 py-3 gap-3",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                      to: backButton.to,
                      onClickHandler: backButton.onClickHandler,
                      title: backButton.title
                    })
                  }), !DISPLAY_BACK_BUTTON && /* @__PURE__ */jsxRuntimeExports.jsx(Brand, {})]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {})]
              }), /* @__PURE__ */jsxRuntimeExports.jsxs("main", {
                className: "grid grid-cols-[1fr_minmax(0,_560px)_1fr]",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {}), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(Outlet, {})
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {})]
              })]
            })]
          });
        };
        var Button = function Button(_ref49) {
          var _ref49$variant = _ref49.variant,
            variant = _ref49$variant === void 0 ? "primary" : _ref49$variant,
            _ref49$onClick = _ref49.onClick,
            onClick = _ref49$onClick === void 0 ? null : _ref49$onClick,
            _ref49$onContextMenu = _ref49.onContextMenu,
            onContextMenu = _ref49$onContextMenu === void 0 ? null : _ref49$onContextMenu,
            children = _ref49.children,
            disabled = _ref49.disabled,
            _ref49$type = _ref49.type,
            type = _ref49$type === void 0 ? "button" : _ref49$type,
            extraClass = _ref49.extraClass,
            onMouseDown = _ref49.onMouseDown,
            onTouchStart = _ref49.onTouchStart,
            onMouseUp = _ref49.onMouseUp,
            onMouseLeave = _ref49.onMouseLeave,
            onTouchEnd = _ref49.onTouchEnd;
          var base = "w-full px-4 py-3.5 rounded font-bold disabled:cursor-not-allowed focus:outline-none hover:border-color-transparent hover:outline-none text-black";
          if (extraClass && extraClass.length) {
            base += " ".concat(extraClass ? extraClass + "" : "");
          }
          if (variant === "primary") {
            base += " text-black bg-white";
          } else if (variant === "secondary") {
            base += " text-white core-black-contrast-3";
          } else if (variant === "tertiary") {
            base += " text-white core-black-contrast-2";
          }
          if (disabled) {
            base += " core-black-contrast text-disabled";
          }
          return /* @__PURE__ */jsxRuntimeExports.jsx("button", {
            onMouseUp: onMouseUp,
            onMouseDown: onMouseDown,
            onTouchStart: onTouchStart,
            onMouseLeave: onMouseLeave,
            onTouchEnd: onTouchEnd,
            onContextMenu: onContextMenu,
            type: type,
            disabled: disabled,
            className: base,
            onClick: onClick,
            children: children
          });
        };
        var Input = function Input(_ref50) {
          var accept = _ref50.accept,
            onChange = _ref50.onChange,
            onBlur = _ref50.onBlur,
            placeholder = _ref50.placeholder,
            autoComplete = _ref50.autoComplete,
            type = _ref50.type,
            name = _ref50.name,
            id = _ref50.id,
            extraClass = _ref50.extraClass,
            value = _ref50.value,
            endIcon = _ref50.endIcon,
            startIcon = _ref50.startIcon,
            error = _ref50.error,
            handleEndIconClick = _ref50.handleEndIconClick,
            onKeyUp = _ref50.onKeyUp,
            onKeyPress = _ref50.onKeyPress,
            disabled = _ref50.disabled,
            mt = _ref50.mt,
            mb = _ref50.mb;
          var wrapperBase = "".concat(mt, " ").concat(mb, " relative ").concat(startIcon ? "grid grid-cols-[1fr_auto] grid-rows-1" : "flex");
          var base = "core-black-contrast-2 w-full px-4 py-3.5 rounded disabled:opacity-40 disabled:cursor-not-allowed focus:outline-none focus:border-[#fff] border-[#fff] focus:border-[#464C4F]";
          if (extraClass) {
            base += " ".concat(extraClass);
          }
          if (error) {
            wrapperBase += " form-error-border";
          }
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "flex flex-col gap-2",
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "".concat(wrapperBase),
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("input", {
                disabled: disabled,
                onKeyDown: onKeyPress,
                autoComplete: autoComplete ? autoComplete : "off",
                onBlur: onBlur,
                name: name,
                id: id,
                value: value,
                type: type,
                placeholder: placeholder,
                className: "".concat(base, " ").concat(startIcon ? "pl-10" : "", " ").concat(endIcon ? "pr-12" : ""),
                onChange: onChange,
                accept: accept,
                onKeyUp: onKeyUp
              }), startIcon, !!endIcon && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                onClick: disabled ? void 0 : handleEndIconClick,
                className: "pr-4 my-auto absolute right-[1px] top-4 bottom-0",
                children: endIcon
              })]
            }), error && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "text-sm form-error-message text-left",
              children: error
            })]
          });
        };
        var UnderstandRadio = function UnderstandRadio(_ref51) {
          var children = _ref51.children,
            _ref51$defaultValue = _ref51.defaultValue,
            defaultValue = _ref51$defaultValue === void 0 ? false : _ref51$defaultValue,
            onChange = _ref51.onChange,
            id = _ref51.id,
            name = _ref51.name;
          var base = "core-black-contrast w-full px-4 py-3.5 rounded text-sm flex flex-row justify-items-center align-center gap-3 text-left understand-label core-grey-100 items-center";
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: base,
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("input", {
              defaultChecked: defaultValue,
              onClick: onChange,
              id: id,
              name: name,
              type: "checkbox"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("label", {
              htmlFor: "understand",
              children: children
            })]
          });
        };
        var isArray$2 = Array.isArray;
        var keyList = Object.keys;
        var hasProp = Object.prototype.hasOwnProperty;
        var hasElementType = typeof Element !== 'undefined';
        function equal(a, b) {
          // fast-deep-equal index.js 2.0.1
          if (a === b) return true;
          if (a && b && _typeof2(a) == 'object' && _typeof2(b) == 'object') {
            var arrA = isArray$2(a),
              arrB = isArray$2(b),
              i,
              length,
              key;
            if (arrA && arrB) {
              length = a.length;
              if (length != b.length) return false;
              for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;
              return true;
            }
            if (arrA != arrB) return false;
            var dateA = a instanceof Date,
              dateB = b instanceof Date;
            if (dateA != dateB) return false;
            if (dateA && dateB) return a.getTime() == b.getTime();
            var regexpA = a instanceof RegExp,
              regexpB = b instanceof RegExp;
            if (regexpA != regexpB) return false;
            if (regexpA && regexpB) return a.toString() == b.toString();
            var keys = keyList(a);
            length = keys.length;
            if (length !== keyList(b).length) return false;
            for (i = length; i-- !== 0;) if (!hasProp.call(b, keys[i])) return false;
            // end fast-deep-equal

            // start react-fast-compare
            // custom handling for DOM elements
            if (hasElementType && a instanceof Element && b instanceof Element) return a === b;

            // custom handling for React
            for (i = length; i-- !== 0;) {
              key = keys[i];
              if (key === '_owner' && a.$$typeof) {
                // React-specific: avoid traversing React elements' _owner.
                //  _owner contains circular references
                // and is not needed when comparing the actual elements (and not their owners)
                // .$$typeof and ._store on just reasonable markers of a react element
                continue;
              } else {
                // all other properties should be traversed as usual
                if (!equal(a[key], b[key])) return false;
              }
            }
            // end react-fast-compare

            // fast-deep-equal index.js 2.0.1
            return true;
          }
          return a !== a && b !== b;
        }
        // end fast-deep-equal

        var reactFastCompare = function exportedEqual(a, b) {
          try {
            return equal(a, b);
          } catch (error) {
            if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
              // warn on circular references, don't crash
              // browsers give this different errors name and messages:
              // chrome/safari: "RangeError", "Maximum call stack size exceeded"
              // firefox: "InternalError", too much recursion"
              // edge: "Error", "Out of stack space"
              console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
              return false;
            }
            // some other error. we should definitely know about these
            throw error;
          }
        };
        var isEqual = /*@__PURE__*/getDefaultExportFromCjs(reactFastCompare);
        var isMergeableObject = function isMergeableObject(value) {
          return isNonNullObject(value) && !isSpecial(value);
        };
        function isNonNullObject(value) {
          return !!value && _typeof2(value) === 'object';
        }
        function isSpecial(value) {
          var stringValue = Object.prototype.toString.call(value);
          return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
        }

        // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
        var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
        var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
        function isReactElement(value) {
          return value.$$typeof === REACT_ELEMENT_TYPE;
        }
        function emptyTarget(val) {
          return Array.isArray(val) ? [] : {};
        }
        function cloneUnlessOtherwiseSpecified(value, options) {
          return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
        }
        function defaultArrayMerge(target, source, options) {
          return target.concat(source).map(function (element) {
            return cloneUnlessOtherwiseSpecified(element, options);
          });
        }
        function mergeObject(target, source, options) {
          var destination = {};
          if (options.isMergeableObject(target)) {
            Object.keys(target).forEach(function (key) {
              destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
            });
          }
          Object.keys(source).forEach(function (key) {
            if (!options.isMergeableObject(source[key]) || !target[key]) {
              destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
            } else {
              destination[key] = deepmerge(target[key], source[key], options);
            }
          });
          return destination;
        }
        function deepmerge(target, source, options) {
          options = options || {};
          options.arrayMerge = options.arrayMerge || defaultArrayMerge;
          options.isMergeableObject = options.isMergeableObject || isMergeableObject;
          var sourceIsArray = Array.isArray(source);
          var targetIsArray = Array.isArray(target);
          var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
          if (!sourceAndTargetTypesMatch) {
            return cloneUnlessOtherwiseSpecified(source, options);
          } else if (sourceIsArray) {
            return options.arrayMerge(target, source, options);
          } else {
            return mergeObject(target, source, options);
          }
        }
        deepmerge.all = function deepmergeAll(array, options) {
          if (!Array.isArray(array)) {
            throw new Error('first argument should be an array');
          }
          return array.reduce(function (prev, next) {
            return deepmerge(prev, next, options);
          }, {});
        };
        var deepmerge_1 = deepmerge;

        /** Detect free variable `global` from Node.js. */
        var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof2(global)) == 'object' && global && global.Object === Object && global;
        var freeGlobal$1 = freeGlobal;

        /** Detect free variable `self`. */
        var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof2(self)) == 'object' && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = freeGlobal$1 || freeSelf || Function('return this')();
        var root$1 = root;

        /** Built-in value references. */
        var Symbol$1 = root$1.Symbol;
        var Symbol$2 = Symbol$1;

        /** Used for built-in method references. */
        var objectProto$d = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty$a = objectProto$d.hasOwnProperty;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString$1 = objectProto$d.toString;

        /** Built-in value references. */
        var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty$a.call(value, symToStringTag$1),
            tag = value[symToStringTag$1];
          try {
            value[symToStringTag$1] = undefined;
            var unmasked = true;
          } catch (e) {}
          var result = nativeObjectToString$1.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag$1] = tag;
            } else {
              delete value[symToStringTag$1];
            }
          }
          return result;
        }

        /** Used for built-in method references. */
        var objectProto$c = Object.prototype;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto$c.toString;

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }

        /** `Object#toString` result references. */
        var nullTag = '[object Null]',
          undefinedTag = '[object Undefined]';

        /** Built-in value references. */
        var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }

        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
          return function (arg) {
            return func(transform(arg));
          };
        }

        /** Built-in value references. */
        var getPrototype = overArg(Object.getPrototypeOf, Object);
        var getPrototype$1 = getPrototype;

        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return value != null && _typeof2(value) == 'object';
        }

        /** `Object#toString` result references. */
        var objectTag$3 = '[object Object]';

        /** Used for built-in method references. */
        var funcProto$2 = Function.prototype,
          objectProto$b = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString$2 = funcProto$2.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

        /** Used to infer the `Object` constructor. */
        var objectCtorString = funcToString$2.call(Object);

        /**
         * Checks if `value` is a plain object, that is, an object created by the
         * `Object` constructor or one with a `[[Prototype]]` of `null`.
         *
         * @static
         * @memberOf _
         * @since 0.8.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * _.isPlainObject(new Foo);
         * // => false
         *
         * _.isPlainObject([1, 2, 3]);
         * // => false
         *
         * _.isPlainObject({ 'x': 0, 'y': 0 });
         * // => true
         *
         * _.isPlainObject(Object.create(null));
         * // => true
         */
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
            return false;
          }
          var proto = getPrototype$1(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty$9.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString$2.call(Ctor) == objectCtorString;
        }

        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }

        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }

        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }

        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /** Built-in value references. */
        var splice = arrayProto.splice;

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }

        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          return index < 0 ? undefined : data[index][1];
        }

        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }

        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }

        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
          var data = this.__data__,
            result = data['delete'](key);
          this.size = data.size;
          return result;
        }

        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
          return this.__data__.get(key);
        }

        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
          return this.__data__.has(key);
        }

        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject$2(value) {
          var type = _typeof2(value);
          return value != null && (type == 'object' || type == 'function');
        }

        /** `Object#toString` result references. */
        var asyncTag = '[object AsyncFunction]',
          funcTag$2 = '[object Function]',
          genTag$1 = '[object GeneratorFunction]',
          proxyTag = '[object Proxy]';

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction$1(value) {
          if (!isObject$2(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
        }

        /** Used to detect overreaching core-js shims. */
        var coreJsData = root$1['__core-js_shared__'];
        var coreJsData$1 = coreJsData;

        /** Used to detect methods masquerading as native. */
        var maskSrcKey = function () {
          var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
          return uid ? 'Symbol(src)_1.' + uid : '';
        }();

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }

        /** Used for built-in method references. */
        var funcProto$1 = Function.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString$1 = funcProto$1.toString;

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString$1.call(func);
            } catch (e) {}
            try {
              return func + '';
            } catch (e) {}
          }
          return '';
        }

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;

        /** Used for built-in method references. */
        var funcProto = Function.prototype,
          objectProto$a = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty$8).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
          if (!isObject$2(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }

        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
          return object == null ? undefined : object[key];
        }

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined;
        }

        /* Built-in method references that are verified to be native. */
        var Map$1 = getNative(root$1, 'Map');
        var Map$2 = Map$1;

        /* Built-in method references that are verified to be native. */
        var nativeCreate = getNative(Object, 'create');
        var nativeCreate$1 = nativeCreate;

        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
          this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

        /** Used for built-in method references. */
        var objectProto$9 = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate$1) {
            var result = data[key];
            return result === HASH_UNDEFINED$1 ? undefined : result;
          }
          return hasOwnProperty$7.call(data, key) ? data[key] : undefined;
        }

        /** Used for built-in method references. */
        var objectProto$8 = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$6.call(data, key);
        }

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate$1 && value === undefined ? HASH_UNDEFINED : value;
          return this;
        }

        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            'hash': new Hash(),
            'map': new (Map$2 || ListCache)(),
            'string': new Hash()
          };
        }

        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
          var type = _typeof2(value);
          return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
        }

        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
        }

        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
          var result = getMapData(this, key)['delete'](key);
          this.size -= result ? 1 : 0;
          return result;
        }

        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }

        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }

        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
            size = data.size;
          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }

        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }

        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }

        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        var defineProperty = function () {
          try {
            var func = getNative(Object, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) {}
        }();
        var defineProperty$1 = defineProperty;

        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
          if (key == '__proto__' && defineProperty$1) {
            defineProperty$1(object, key, {
              'configurable': true,
              'enumerable': true,
              'value': value,
              'writable': true
            });
          } else {
            object[key] = value;
          }
        }

        /** Used for built-in method references. */
        var objectProto$7 = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty$5 = objectProto$7.hasOwnProperty;

        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty$5.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }

        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1,
            length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
            if (newValue === undefined) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }

        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
          var index = -1,
            result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }

        /** `Object#toString` result references. */
        var argsTag$2 = '[object Arguments]';

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag$2;
        }

        /** Used for built-in method references. */
        var objectProto$6 = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty$4 = objectProto$6.hasOwnProperty;

        /** Built-in value references. */
        var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(function () {
          return arguments;
        }()) ? baseIsArguments : function (value) {
          return isObjectLike(value) && hasOwnProperty$4.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
        };
        var isArguments$1 = isArguments;

        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;
        var isArray$1 = isArray;

        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
          return false;
        }

        /** Detect free variable `exports`. */
        var freeExports$2 = _typeof2(exports) == 'object' && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule$2 = freeExports$2 && _typeof2(module) == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

        /** Built-in value references. */
        var Buffer$1 = moduleExports$2 ? root$1.Buffer : undefined;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;

        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;
        var isBuffer$1 = isBuffer;

        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER$1 = 9007199254740991;

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          var type = _typeof2(value);
          length = length == null ? MAX_SAFE_INTEGER$1 : length;
          return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }

        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
          return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }

        /** `Object#toString` result references. */
        var argsTag$1 = '[object Arguments]',
          arrayTag$1 = '[object Array]',
          boolTag$2 = '[object Boolean]',
          dateTag$2 = '[object Date]',
          errorTag$1 = '[object Error]',
          funcTag$1 = '[object Function]',
          mapTag$4 = '[object Map]',
          numberTag$2 = '[object Number]',
          objectTag$2 = '[object Object]',
          regexpTag$2 = '[object RegExp]',
          setTag$4 = '[object Set]',
          stringTag$2 = '[object String]',
          weakMapTag$2 = '[object WeakMap]';
        var arrayBufferTag$2 = '[object ArrayBuffer]',
          dataViewTag$3 = '[object DataView]',
          float32Tag$2 = '[object Float32Array]',
          float64Tag$2 = '[object Float64Array]',
          int8Tag$2 = '[object Int8Array]',
          int16Tag$2 = '[object Int16Array]',
          int32Tag$2 = '[object Int32Array]',
          uint8Tag$2 = '[object Uint8Array]',
          uint8ClampedTag$2 = '[object Uint8ClampedArray]',
          uint16Tag$2 = '[object Uint16Array]',
          uint32Tag$2 = '[object Uint32Array]';

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
        typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] = typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] = typedArrayTags[objectTag$2] = typedArrayTags[regexpTag$2] = typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] = typedArrayTags[weakMapTag$2] = false;

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }

        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
          return function (value) {
            return func(value);
          };
        }

        /** Detect free variable `exports`. */
        var freeExports$1 = _typeof2(exports) == 'object' && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule$1 = freeExports$1 && _typeof2(module) == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports$1 && freeGlobal$1.process;

        /** Used to access faster Node.js helpers. */
        var nodeUtil = function () {
          try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;
            if (types) {
              return types;
            }

            // Legacy `process.binding('util')` for Node.js < 10.
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
          } catch (e) {}
        }();
        var nodeUtil$1 = nodeUtil;

        /* Node.js helper references. */
        var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        var isTypedArray$1 = isTypedArray;

        /** Used for built-in method references. */
        var objectProto$5 = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty$3 = objectProto$5.hasOwnProperty;

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray$1(value),
            isArg = !isArr && isArguments$1(value),
            isBuff = !isArr && !isArg && isBuffer$1(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty$3.call(value, key)) && !(skipIndexes && (
            // Safari 9 has enumerable `arguments.length` in strict mode.
            key == 'length' ||
            // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == 'offset' || key == 'parent') ||
            // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
            // Skip index properties.
            isIndex(key, length)))) {
              result.push(key);
            }
          }
          return result;
        }

        /** Used for built-in method references. */
        var objectProto$4 = Object.prototype;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
          var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$4;
          return value === proto;
        }

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeKeys = overArg(Object.keys, Object);
        var nativeKeys$1 = nativeKeys;

        /** Used for built-in method references. */
        var objectProto$3 = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys$1(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty$2.call(object, key) && key != 'constructor') {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction$1(value);
        }

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }

        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }

        /** Used for built-in method references. */
        var objectProto$2 = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
          if (!isObject$2(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
            result = [];
          for (var key in object) {
            if (!(key == 'constructor' && (isProto || !hasOwnProperty$1.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }

        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }

        /** Detect free variable `exports`. */
        var freeExports = _typeof2(exports) == 'object' && exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && _typeof2(module) == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Built-in value references. */
        var Buffer = moduleExports ? root$1.Buffer : undefined,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result);
          return result;
        }

        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
          var index = -1,
            length = source.length;
          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }

        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }

        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
          return [];
        }

        /** Used for built-in method references. */
        var objectProto$1 = Object.prototype;

        /** Built-in value references. */
        var propertyIsEnumerable = objectProto$1.propertyIsEnumerable;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols$1 ? stubArray : function (object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols$1(object), function (symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbols$1 = getSymbols;

        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
          return copyObject(source, getSymbols$1(source), object);
        }

        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
          var index = -1,
            length = values.length,
            offset = array.length;
          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
          var result = [];
          while (object) {
            arrayPush(result, getSymbols$1(object));
            object = getPrototype$1(object);
          }
          return result;
        };
        var getSymbolsIn$1 = getSymbolsIn;

        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn$1(source), object);
        }

        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
        }

        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols$1);
        }

        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn$1);
        }

        /* Built-in method references that are verified to be native. */
        var DataView = getNative(root$1, 'DataView');
        var DataView$1 = DataView;

        /* Built-in method references that are verified to be native. */
        var Promise$1 = getNative(root$1, 'Promise');
        var Promise$2 = Promise$1;

        /* Built-in method references that are verified to be native. */
        var Set$1 = getNative(root$1, 'Set');
        var Set$2 = Set$1;

        /* Built-in method references that are verified to be native. */
        var WeakMap$1 = getNative(root$1, 'WeakMap');
        var WeakMap$2 = WeakMap$1;

        /** `Object#toString` result references. */
        var mapTag$3 = '[object Map]',
          objectTag$1 = '[object Object]',
          promiseTag = '[object Promise]',
          setTag$3 = '[object Set]',
          weakMapTag$1 = '[object WeakMap]';
        var dataViewTag$2 = '[object DataView]';

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView$1),
          mapCtorString = toSource(Map$2),
          promiseCtorString = toSource(Promise$2),
          setCtorString = toSource(Set$2),
          weakMapCtorString = toSource(WeakMap$2);

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;

        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$2 || Map$2 && getTag(new Map$2()) != mapTag$3 || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$2 && getTag(new Set$2()) != setTag$3 || WeakMap$2 && getTag(new WeakMap$2()) != weakMapTag$1) {
          getTag = function getTag(value) {
            var result = baseGetTag(value),
              Ctor = result == objectTag$1 ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag$2;
                case mapCtorString:
                  return mapTag$3;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag$3;
                case weakMapCtorString:
                  return weakMapTag$1;
              }
            }
            return result;
          };
        }
        var getTag$1 = getTag;

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
            result = new array.constructor(length);

          // Add properties assigned by `RegExp#exec`.
          if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }

        /** Built-in value references. */
        var Uint8Array$1 = root$1.Uint8Array;
        var Uint8Array$2 = Uint8Array$1;

        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
          return result;
        }

        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }

        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/;

        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }

        /** Used to convert symbols to primitives and strings. */
        var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
          symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }

        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }

        /** `Object#toString` result references. */
        var boolTag$1 = '[object Boolean]',
          dateTag$1 = '[object Date]',
          mapTag$2 = '[object Map]',
          numberTag$1 = '[object Number]',
          regexpTag$1 = '[object RegExp]',
          setTag$2 = '[object Set]',
          stringTag$1 = '[object String]',
          symbolTag$2 = '[object Symbol]';
        var arrayBufferTag$1 = '[object ArrayBuffer]',
          dataViewTag$1 = '[object DataView]',
          float32Tag$1 = '[object Float32Array]',
          float64Tag$1 = '[object Float64Array]',
          int8Tag$1 = '[object Int8Array]',
          int16Tag$1 = '[object Int16Array]',
          int32Tag$1 = '[object Int32Array]',
          uint8Tag$1 = '[object Uint8Array]',
          uint8ClampedTag$1 = '[object Uint8ClampedArray]',
          uint16Tag$1 = '[object Uint16Array]',
          uint32Tag$1 = '[object Uint32Array]';

        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag$1:
              return cloneArrayBuffer(object);
            case boolTag$1:
            case dateTag$1:
              return new Ctor(+object);
            case dataViewTag$1:
              return cloneDataView(object, isDeep);
            case float32Tag$1:
            case float64Tag$1:
            case int8Tag$1:
            case int16Tag$1:
            case int32Tag$1:
            case uint8Tag$1:
            case uint8ClampedTag$1:
            case uint16Tag$1:
            case uint32Tag$1:
              return cloneTypedArray(object, isDeep);
            case mapTag$2:
              return new Ctor();
            case numberTag$1:
            case stringTag$1:
              return new Ctor(object);
            case regexpTag$1:
              return cloneRegExp(object);
            case setTag$2:
              return new Ctor();
            case symbolTag$2:
              return cloneSymbol(object);
          }
        }

        /** Built-in value references. */
        var objectCreate = Object.create;

        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = function () {
          function object() {}
          return function (proto) {
            if (!isObject$2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object();
            object.prototype = undefined;
            return result;
          };
        }();
        var baseCreate$1 = baseCreate;

        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate$1(getPrototype$1(object)) : {};
        }

        /** `Object#toString` result references. */
        var mapTag$1 = '[object Map]';

        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
          return isObjectLike(value) && getTag$1(value) == mapTag$1;
        }

        /* Node.js helper references. */
        var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        var isMap$1 = isMap;

        /** `Object#toString` result references. */
        var setTag$1 = '[object Set]';

        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
          return isObjectLike(value) && getTag$1(value) == setTag$1;
        }

        /* Node.js helper references. */
        var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;

        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        var isSet$1 = isSet;

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG$1 = 4;

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          objectTag = '[object Object]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag$1 = '[object Symbol]',
          weakMapTag = '[object WeakMap]';
        var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== undefined) {
            return result;
          }
          if (!isObject$2(value)) {
            return value;
          }
          var isArr = isArray$1(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag$1(value),
              isFunc = tag == funcTag || tag == genTag;
            if (isBuffer$1(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          // Check for circular references and return its corresponding clone.
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);
          if (isSet$1(value)) {
            value.forEach(function (subValue) {
              result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap$1(value)) {
            value.forEach(function (subValue, key) {
              result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined : keysFunc(value);
          arrayEach(props || value, function (subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        /** Used to compose bitmasks for cloning. */
        var CLONE_SYMBOLS_FLAG = 4;

        /**
         * Creates a shallow clone of `value`.
         *
         * **Note:** This method is loosely based on the
         * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
         * and supports cloning arrays, array buffers, booleans, date objects, maps,
         * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
         * arrays. The own enumerable properties of `arguments` objects are cloned
         * as plain objects. An empty object is returned for uncloneable values such
         * as error objects, functions, DOM nodes, and WeakMaps.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to clone.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeep
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var shallow = _.clone(objects);
         * console.log(shallow[0] === objects[0]);
         * // => true
         */
        function clone$1(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }

        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }

        /** `Object#toString` result references. */
        var symbolTag = '[object Symbol]';

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return _typeof2(value) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }

        /** Error message constants. */
        var FUNC_ERROR_TEXT = 'Expected a function';

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
          if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function memoized() {
            var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }

        // Expose `MapCache`.
        memoize.Cache = MapCache;

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500;

        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
          var result = memoize(func, function (key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result.cache;
          return result;
        }

        /** Used to match property names within property paths. */
        var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g;

        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function (string) {
          var result = [];
          if (string.charCodeAt(0) === 46 /* . */) {
            result.push('');
          }
          string.replace(rePropName, function (match, number, quote, subString) {
            result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
          });
          return result;
        });
        var stringToPath$1 = stringToPath;

        /** Used as references for various `Number` constants. */
        var INFINITY$1 = 1 / 0;

        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result = value + '';
          return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
        }

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0;

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
          symbolToString$1 = symbolProto ? symbolProto.toString : undefined;

        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
          // Exit early for strings to avoid a performance hit in some environments.
          if (typeof value == 'string') {
            return value;
          }
          if (isArray$1(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString$1 ? symbolToString$1.call(value) : '';
          }
          var result = value + '';
          return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }

        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString$1(value) {
          return value == null ? '' : baseToString(value);
        }

        /**
         * Converts `value` to a property path array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {*} value The value to convert.
         * @returns {Array} Returns the new property path array.
         * @example
         *
         * _.toPath('a.b.c');
         * // => ['a', 'b', 'c']
         *
         * _.toPath('a[0].b.c');
         * // => ['a', '0', 'b', 'c']
         */
        function toPath(value) {
          if (isArray$1(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath$1(toString$1(value)));
        }
        var isProduction = "production" === 'production';
        function warning(condition, message) {
          if (!isProduction) {
            if (condition) {
              return;
            }
            var text = "Warning: " + message;
            if (typeof console !== 'undefined') {
              console.warn(text);
            }
            try {
              throw Error(text);
            } catch (x) {}
          }
        }
        var reactIs$1 = {
          exports: {}
        };
        var reactIs_production_min = {};

        /** @license React v16.13.1
         * react-is.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var b = "function" === typeof Symbol && Symbol.for,
          c = b ? Symbol.for("react.element") : 60103,
          d = b ? Symbol.for("react.portal") : 60106,
          e = b ? Symbol.for("react.fragment") : 60107,
          f = b ? Symbol.for("react.strict_mode") : 60108,
          g = b ? Symbol.for("react.profiler") : 60114,
          h$1 = b ? Symbol.for("react.provider") : 60109,
          k = b ? Symbol.for("react.context") : 60110,
          l = b ? Symbol.for("react.async_mode") : 60111,
          m = b ? Symbol.for("react.concurrent_mode") : 60111,
          n = b ? Symbol.for("react.forward_ref") : 60112,
          p = b ? Symbol.for("react.suspense") : 60113,
          q = b ? Symbol.for("react.suspense_list") : 60120,
          r = b ? Symbol.for("react.memo") : 60115,
          t = b ? Symbol.for("react.lazy") : 60116,
          v$1 = b ? Symbol.for("react.block") : 60121,
          w$1 = b ? Symbol.for("react.fundamental") : 60117,
          x = b ? Symbol.for("react.responder") : 60118,
          y = b ? Symbol.for("react.scope") : 60119;
        function z(a) {
          if ("object" === _typeof2(a) && null !== a) {
            var u = a.$$typeof;
            switch (u) {
              case c:
                switch (a = a.type, a) {
                  case l:
                  case m:
                  case e:
                  case g:
                  case f:
                  case p:
                    return a;
                  default:
                    switch (a = a && a.$$typeof, a) {
                      case k:
                      case n:
                      case t:
                      case r:
                      case h$1:
                        return a;
                      default:
                        return u;
                    }
                }
              case d:
                return u;
            }
          }
        }
        function A(a) {
          return z(a) === m;
        }
        reactIs_production_min.AsyncMode = l;
        reactIs_production_min.ConcurrentMode = m;
        reactIs_production_min.ContextConsumer = k;
        reactIs_production_min.ContextProvider = h$1;
        reactIs_production_min.Element = c;
        reactIs_production_min.ForwardRef = n;
        reactIs_production_min.Fragment = e;
        reactIs_production_min.Lazy = t;
        reactIs_production_min.Memo = r;
        reactIs_production_min.Portal = d;
        reactIs_production_min.Profiler = g;
        reactIs_production_min.StrictMode = f;
        reactIs_production_min.Suspense = p;
        reactIs_production_min.isAsyncMode = function (a) {
          return A(a) || z(a) === l;
        };
        reactIs_production_min.isConcurrentMode = A;
        reactIs_production_min.isContextConsumer = function (a) {
          return z(a) === k;
        };
        reactIs_production_min.isContextProvider = function (a) {
          return z(a) === h$1;
        };
        reactIs_production_min.isElement = function (a) {
          return "object" === _typeof2(a) && null !== a && a.$$typeof === c;
        };
        reactIs_production_min.isForwardRef = function (a) {
          return z(a) === n;
        };
        reactIs_production_min.isFragment = function (a) {
          return z(a) === e;
        };
        reactIs_production_min.isLazy = function (a) {
          return z(a) === t;
        };
        reactIs_production_min.isMemo = function (a) {
          return z(a) === r;
        };
        reactIs_production_min.isPortal = function (a) {
          return z(a) === d;
        };
        reactIs_production_min.isProfiler = function (a) {
          return z(a) === g;
        };
        reactIs_production_min.isStrictMode = function (a) {
          return z(a) === f;
        };
        reactIs_production_min.isSuspense = function (a) {
          return z(a) === p;
        };
        reactIs_production_min.isValidElementType = function (a) {
          return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === _typeof2(a) && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h$1 || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w$1 || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v$1);
        };
        reactIs_production_min.typeOf = z;
        {
          reactIs$1.exports = reactIs_production_min;
        }
        var reactIsExports = reactIs$1.exports;
        var reactIs = reactIsExports;
        var FORWARD_REF_STATICS = {
          '$$typeof': true,
          render: true,
          defaultProps: true,
          displayName: true,
          propTypes: true
        };
        var MEMO_STATICS = {
          '$$typeof': true,
          compare: true,
          defaultProps: true,
          displayName: true,
          propTypes: true,
          type: true
        };
        var TYPE_STATICS = {};
        TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
        TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
        function _extends() {
          _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends.apply(this, arguments);
        }
        function _objectWithoutPropertiesLoose$1(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        /** @private is the given object a Function? */

        var isFunction = function isFunction(obj) {
          return typeof obj === 'function';
        };
        /** @private is the given object an Object? */

        var isObject$1 = function isObject(obj) {
          return obj !== null && _typeof2(obj) === 'object';
        };
        /** @private is the given object an integer? */

        var isInteger = function isInteger(obj) {
          return String(Math.floor(Number(obj))) === obj;
        };
        /** @private is the given object a string? */

        var isString = function isString(obj) {
          return Object.prototype.toString.call(obj) === '[object String]';
        };
        /** @private Does a React component have exactly 0 children? */

        var isEmptyChildren = function isEmptyChildren(children) {
          return reactExports.Children.count(children) === 0;
        };
        /** @private is the given object/value a promise? */

        var isPromise = function isPromise(value) {
          return isObject$1(value) && isFunction(value.then);
        };
        /**
         * Deeply get a value from an object via its path.
         */

        function getIn$1(obj, key, def, p) {
          if (p === void 0) {
            p = 0;
          }
          var path = toPath(key);
          while (obj && p < path.length) {
            obj = obj[path[p++]];
          } // check if path is not in the end

          if (p !== path.length && !obj) {
            return def;
          }
          return obj === undefined ? def : obj;
        }
        /**
         * Deeply set a value from in object via it's path. If the value at `path`
         * has changed, return a shallow copy of obj with `value` set at `path`.
         * If `value` has not changed, return the original `obj`.
         *
         * Existing objects / arrays along `path` are also shallow copied. Sibling
         * objects along path retain the same internal js reference. Since new
         * objects / arrays are only created along `path`, we can test if anything
         * changed in a nested structure by comparing the object's reference in
         * the old and new object, similar to how russian doll cache invalidation
         * works.
         *
         * In earlier versions of this function, which used cloneDeep, there were
         * issues whereby settings a nested value would mutate the parent
         * instead of creating a new object. `clone` avoids that bug making a
         * shallow copy of the objects along the update path
         * so no object is mutated in place.
         *
         * Before changing this function, please read through the following
         * discussions.
         *
         * @see https://github.com/developit/linkstate
         * @see https://github.com/jaredpalmer/formik/pull/123
         */

        function setIn(obj, path, value) {
          var res = clone$1(obj); // this keeps inheritance when obj is a class

          var resVal = res;
          var i = 0;
          var pathArray = toPath(path);
          for (; i < pathArray.length - 1; i++) {
            var currentPath = pathArray[i];
            var currentObj = getIn$1(obj, pathArray.slice(0, i + 1));
            if (currentObj && (isObject$1(currentObj) || Array.isArray(currentObj))) {
              resVal = resVal[currentPath] = clone$1(currentObj);
            } else {
              var nextPath = pathArray[i + 1];
              resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};
            }
          } // Return original object if new value is the same as current

          if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {
            return obj;
          }
          if (value === undefined) {
            delete resVal[pathArray[i]];
          } else {
            resVal[pathArray[i]] = value;
          } // If the path array has a single element, the loop did not run.
          // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.

          if (i === 0 && value === undefined) {
            delete res[pathArray[i]];
          }
          return res;
        }
        /**
         * Recursively a set the same value for all keys and arrays nested object, cloning
         * @param object
         * @param value
         * @param visited
         * @param response
         */

        function setNestedObjectValues(object, value, visited, response) {
          if (visited === void 0) {
            visited = new WeakMap();
          }
          if (response === void 0) {
            response = {};
          }
          for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {
            var k = _Object$keys[_i];
            var val = object[k];
            if (isObject$1(val)) {
              if (!visited.get(val)) {
                visited.set(val, true); // In order to keep array values consistent for both dot path  and
                // bracket syntax, we need to check if this is an array so that
                // this will output  { friends: [true] } and not { friends: { "0": true } }

                response[k] = Array.isArray(val) ? [] : {};
                setNestedObjectValues(val, value, visited, response[k]);
              }
            } else {
              response[k] = value;
            }
          }
          return response;
        }
        var FormikContext = /*#__PURE__*/reactExports.createContext(undefined);
        FormikContext.displayName = 'FormikContext';
        var FormikProvider = FormikContext.Provider;
        FormikContext.Consumer;
        function useFormikContext() {
          var formik = reactExports.useContext(FormikContext);
          !!!formik ? warning(false) : void 0;
          return formik;
        }
        function formikReducer(state, msg) {
          switch (msg.type) {
            case 'SET_VALUES':
              return _extends({}, state, {
                values: msg.payload
              });
            case 'SET_TOUCHED':
              return _extends({}, state, {
                touched: msg.payload
              });
            case 'SET_ERRORS':
              if (isEqual(state.errors, msg.payload)) {
                return state;
              }
              return _extends({}, state, {
                errors: msg.payload
              });
            case 'SET_STATUS':
              return _extends({}, state, {
                status: msg.payload
              });
            case 'SET_ISSUBMITTING':
              return _extends({}, state, {
                isSubmitting: msg.payload
              });
            case 'SET_ISVALIDATING':
              return _extends({}, state, {
                isValidating: msg.payload
              });
            case 'SET_FIELD_VALUE':
              return _extends({}, state, {
                values: setIn(state.values, msg.payload.field, msg.payload.value)
              });
            case 'SET_FIELD_TOUCHED':
              return _extends({}, state, {
                touched: setIn(state.touched, msg.payload.field, msg.payload.value)
              });
            case 'SET_FIELD_ERROR':
              return _extends({}, state, {
                errors: setIn(state.errors, msg.payload.field, msg.payload.value)
              });
            case 'RESET_FORM':
              return _extends({}, state, msg.payload);
            case 'SET_FORMIK_STATE':
              return msg.payload(state);
            case 'SUBMIT_ATTEMPT':
              return _extends({}, state, {
                touched: setNestedObjectValues(state.values, true),
                isSubmitting: true,
                submitCount: state.submitCount + 1
              });
            case 'SUBMIT_FAILURE':
              return _extends({}, state, {
                isSubmitting: false
              });
            case 'SUBMIT_SUCCESS':
              return _extends({}, state, {
                isSubmitting: false
              });
            default:
              return state;
          }
        } // Initial empty states // objects

        var emptyErrors = {};
        var emptyTouched = {};
        function useFormik(_ref) {
          var _ref$validateOnChange = _ref.validateOnChange,
            validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange,
            _ref$validateOnBlur = _ref.validateOnBlur,
            validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur,
            _ref$validateOnMount = _ref.validateOnMount,
            validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount,
            isInitialValid = _ref.isInitialValid,
            _ref$enableReinitiali = _ref.enableReinitialize,
            enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali,
            onSubmit = _ref.onSubmit,
            rest = _objectWithoutPropertiesLoose$1(_ref, ["validateOnChange", "validateOnBlur", "validateOnMount", "isInitialValid", "enableReinitialize", "onSubmit"]);
          var props = _extends({
            validateOnChange: validateOnChange,
            validateOnBlur: validateOnBlur,
            validateOnMount: validateOnMount,
            onSubmit: onSubmit
          }, rest);
          var initialValues = reactExports.useRef(props.initialValues);
          var initialErrors = reactExports.useRef(props.initialErrors || emptyErrors);
          var initialTouched = reactExports.useRef(props.initialTouched || emptyTouched);
          var initialStatus = reactExports.useRef(props.initialStatus);
          var isMounted = reactExports.useRef(false);
          var fieldRegistry = reactExports.useRef({});
          reactExports.useEffect(function () {
            isMounted.current = true;
            return function () {
              isMounted.current = false;
            };
          }, []);
          var _React$useReducer = reactExports.useReducer(formikReducer, {
              values: props.initialValues,
              errors: props.initialErrors || emptyErrors,
              touched: props.initialTouched || emptyTouched,
              status: props.initialStatus,
              isSubmitting: false,
              isValidating: false,
              submitCount: 0
            }),
            state = _React$useReducer[0],
            dispatch = _React$useReducer[1];
          var runValidateHandler = reactExports.useCallback(function (values, field) {
            return new Promise(function (resolve, reject) {
              var maybePromisedErrors = props.validate(values, field);
              if (maybePromisedErrors == null) {
                // use loose null check here on purpose
                resolve(emptyErrors);
              } else if (isPromise(maybePromisedErrors)) {
                maybePromisedErrors.then(function (errors) {
                  resolve(errors || emptyErrors);
                }, function (actualException) {
                  reject(actualException);
                });
              } else {
                resolve(maybePromisedErrors);
              }
            });
          }, [props.validate]);
          /**
           * Run validation against a Yup schema and optionally run a function if successful
           */

          var runValidationSchema = reactExports.useCallback(function (values, field) {
            var validationSchema = props.validationSchema;
            var schema = isFunction(validationSchema) ? validationSchema(field) : validationSchema;
            var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);
            return new Promise(function (resolve, reject) {
              promise.then(function () {
                resolve(emptyErrors);
              }, function (err) {
                // Yup will throw a validation error if validation fails. We catch those and
                // resolve them into Formik errors. We can sniff if something is a Yup error
                // by checking error.name.
                // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string
                if (err.name === 'ValidationError') {
                  resolve(yupToFormErrors(err));
                } else {
                  reject(err);
                }
              });
            });
          }, [props.validationSchema]);
          var runSingleFieldLevelValidation = reactExports.useCallback(function (field, value) {
            return new Promise(function (resolve) {
              return resolve(fieldRegistry.current[field].validate(value));
            });
          }, []);
          var runFieldLevelValidations = reactExports.useCallback(function (values) {
            var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function (f) {
              return isFunction(fieldRegistry.current[f].validate);
            }); // Construct an array with all of the field validation functions

            var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function (f) {
              return runSingleFieldLevelValidation(f, getIn$1(values, f));
            }) : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)

            return Promise.all(fieldValidations).then(function (fieldErrorsList) {
              return fieldErrorsList.reduce(function (prev, curr, index) {
                if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {
                  return prev;
                }
                if (curr) {
                  prev = setIn(prev, fieldKeysWithValidation[index], curr);
                }
                return prev;
              }, {});
            });
          }, [runSingleFieldLevelValidation]); // Run all validations and return the result

          var runAllValidations = reactExports.useCallback(function (values) {
            return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function (_ref2) {
              var fieldErrors = _ref2[0],
                schemaErrors = _ref2[1],
                validateErrors = _ref2[2];
              var combinedErrors = deepmerge_1.all([fieldErrors, schemaErrors, validateErrors], {
                arrayMerge: arrayMerge
              });
              return combinedErrors;
            });
          }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]); // Run all validations methods and update state accordingly

          var validateFormWithHighPriority = useEventCallback(function (values) {
            if (values === void 0) {
              values = state.values;
            }
            dispatch({
              type: 'SET_ISVALIDATING',
              payload: true
            });
            return runAllValidations(values).then(function (combinedErrors) {
              if (!!isMounted.current) {
                dispatch({
                  type: 'SET_ISVALIDATING',
                  payload: false
                });
                dispatch({
                  type: 'SET_ERRORS',
                  payload: combinedErrors
                });
              }
              return combinedErrors;
            });
          });
          reactExports.useEffect(function () {
            if (validateOnMount && isMounted.current === true && isEqual(initialValues.current, props.initialValues)) {
              validateFormWithHighPriority(initialValues.current);
            }
          }, [validateOnMount, validateFormWithHighPriority]);
          var resetForm = reactExports.useCallback(function (nextState) {
            var values = nextState && nextState.values ? nextState.values : initialValues.current;
            var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};
            var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};
            var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;
            initialValues.current = values;
            initialErrors.current = errors;
            initialTouched.current = touched;
            initialStatus.current = status;
            var dispatchFn = function dispatchFn() {
              dispatch({
                type: 'RESET_FORM',
                payload: {
                  isSubmitting: !!nextState && !!nextState.isSubmitting,
                  errors: errors,
                  touched: touched,
                  status: status,
                  values: values,
                  isValidating: !!nextState && !!nextState.isValidating,
                  submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === 'number' ? nextState.submitCount : 0
                }
              });
            };
            if (props.onReset) {
              var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);
              if (isPromise(maybePromisedOnReset)) {
                maybePromisedOnReset.then(dispatchFn);
              } else {
                dispatchFn();
              }
            } else {
              dispatchFn();
            }
          }, [props.initialErrors, props.initialStatus, props.initialTouched]);
          reactExports.useEffect(function () {
            if (isMounted.current === true && !isEqual(initialValues.current, props.initialValues)) {
              if (enableReinitialize) {
                initialValues.current = props.initialValues;
                resetForm();
                if (validateOnMount) {
                  validateFormWithHighPriority(initialValues.current);
                }
              }
            }
          }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);
          reactExports.useEffect(function () {
            if (enableReinitialize && isMounted.current === true && !isEqual(initialErrors.current, props.initialErrors)) {
              initialErrors.current = props.initialErrors || emptyErrors;
              dispatch({
                type: 'SET_ERRORS',
                payload: props.initialErrors || emptyErrors
              });
            }
          }, [enableReinitialize, props.initialErrors]);
          reactExports.useEffect(function () {
            if (enableReinitialize && isMounted.current === true && !isEqual(initialTouched.current, props.initialTouched)) {
              initialTouched.current = props.initialTouched || emptyTouched;
              dispatch({
                type: 'SET_TOUCHED',
                payload: props.initialTouched || emptyTouched
              });
            }
          }, [enableReinitialize, props.initialTouched]);
          reactExports.useEffect(function () {
            if (enableReinitialize && isMounted.current === true && !isEqual(initialStatus.current, props.initialStatus)) {
              initialStatus.current = props.initialStatus;
              dispatch({
                type: 'SET_STATUS',
                payload: props.initialStatus
              });
            }
          }, [enableReinitialize, props.initialStatus, props.initialTouched]);
          var validateField = useEventCallback(function (name) {
            // This will efficiently validate a single field by avoiding state
            // changes if the validation function is synchronous. It's different from
            // what is called when using validateForm.
            if (fieldRegistry.current[name] && isFunction(fieldRegistry.current[name].validate)) {
              var value = getIn$1(state.values, name);
              var maybePromise = fieldRegistry.current[name].validate(value);
              if (isPromise(maybePromise)) {
                // Only flip isValidating if the function is async.
                dispatch({
                  type: 'SET_ISVALIDATING',
                  payload: true
                });
                return maybePromise.then(function (x) {
                  return x;
                }).then(function (error) {
                  dispatch({
                    type: 'SET_FIELD_ERROR',
                    payload: {
                      field: name,
                      value: error
                    }
                  });
                  dispatch({
                    type: 'SET_ISVALIDATING',
                    payload: false
                  });
                });
              } else {
                dispatch({
                  type: 'SET_FIELD_ERROR',
                  payload: {
                    field: name,
                    value: maybePromise
                  }
                });
                return Promise.resolve(maybePromise);
              }
            } else if (props.validationSchema) {
              dispatch({
                type: 'SET_ISVALIDATING',
                payload: true
              });
              return runValidationSchema(state.values, name).then(function (x) {
                return x;
              }).then(function (error) {
                dispatch({
                  type: 'SET_FIELD_ERROR',
                  payload: {
                    field: name,
                    value: getIn$1(error, name)
                  }
                });
                dispatch({
                  type: 'SET_ISVALIDATING',
                  payload: false
                });
              });
            }
            return Promise.resolve();
          });
          var registerField = reactExports.useCallback(function (name, _ref3) {
            var validate = _ref3.validate;
            fieldRegistry.current[name] = {
              validate: validate
            };
          }, []);
          var unregisterField = reactExports.useCallback(function (name) {
            delete fieldRegistry.current[name];
          }, []);
          var setTouched = useEventCallback(function (touched, shouldValidate) {
            dispatch({
              type: 'SET_TOUCHED',
              payload: touched
            });
            var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;
            return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
          });
          var setErrors = reactExports.useCallback(function (errors) {
            dispatch({
              type: 'SET_ERRORS',
              payload: errors
            });
          }, []);
          var setValues = useEventCallback(function (values, shouldValidate) {
            var resolvedValues = isFunction(values) ? values(state.values) : values;
            dispatch({
              type: 'SET_VALUES',
              payload: resolvedValues
            });
            var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;
            return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();
          });
          var setFieldError = reactExports.useCallback(function (field, value) {
            dispatch({
              type: 'SET_FIELD_ERROR',
              payload: {
                field: field,
                value: value
              }
            });
          }, []);
          var setFieldValue = useEventCallback(function (field, value, shouldValidate) {
            dispatch({
              type: 'SET_FIELD_VALUE',
              payload: {
                field: field,
                value: value
              }
            });
            var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;
            return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value)) : Promise.resolve();
          });
          var executeChange = reactExports.useCallback(function (eventOrTextValue, maybePath) {
            // By default, assume that the first argument is a string. This allows us to use
            // handleChange with React Native and React Native Web's onChangeText prop which
            // provides just the value of the input.
            var field = maybePath;
            var val = eventOrTextValue;
            var parsed; // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),
            // so we handle like we would a normal HTML change event.

            if (!isString(eventOrTextValue)) {
              // If we can, persist the event
              // @see https://reactjs.org/docs/events.html#event-pooling
              if (eventOrTextValue.persist) {
                eventOrTextValue.persist();
              }
              var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;
              var type = target.type,
                name = target.name,
                id = target.id,
                value = target.value,
                checked = target.checked,
                outerHTML = target.outerHTML,
                options = target.options,
                multiple = target.multiple;
              field = maybePath ? maybePath : name ? name : id;
              if (!field && "production" !== "production") {
                warnAboutMissingIdentifier({
                  htmlContent: outerHTML,
                  documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',
                  handlerName: 'handleChange'
                });
              }
              val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? '' : parsed) : /checkbox/.test(type) // checkboxes
              ? getValueForCheckbox(getIn$1(state.values, field), checked, value) : options && multiple // <select multiple>
              ? getSelectedValues(options) : value;
            }
            if (field) {
              // Set form fields by name
              setFieldValue(field, val);
            }
          }, [setFieldValue, state.values]);
          var handleChange = useEventCallback(function (eventOrPath) {
            if (isString(eventOrPath)) {
              return function (event) {
                return executeChange(event, eventOrPath);
              };
            } else {
              executeChange(eventOrPath);
            }
          });
          var setFieldTouched = useEventCallback(function (field, touched, shouldValidate) {
            if (touched === void 0) {
              touched = true;
            }
            dispatch({
              type: 'SET_FIELD_TOUCHED',
              payload: {
                field: field,
                value: touched
              }
            });
            var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;
            return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
          });
          var executeBlur = reactExports.useCallback(function (e, path) {
            if (e.persist) {
              e.persist();
            }
            var _e$target = e.target,
              name = _e$target.name,
              id = _e$target.id,
              outerHTML = _e$target.outerHTML;
            var field = path ? path : name ? name : id;
            if (!field && "production" !== "production") {
              warnAboutMissingIdentifier({
                htmlContent: outerHTML,
                documentationAnchorLink: 'handleblur-e-any--void',
                handlerName: 'handleBlur'
              });
            }
            setFieldTouched(field, true);
          }, [setFieldTouched]);
          var handleBlur = useEventCallback(function (eventOrString) {
            if (isString(eventOrString)) {
              return function (event) {
                return executeBlur(event, eventOrString);
              };
            } else {
              executeBlur(eventOrString);
            }
          });
          var setFormikState = reactExports.useCallback(function (stateOrCb) {
            if (isFunction(stateOrCb)) {
              dispatch({
                type: 'SET_FORMIK_STATE',
                payload: stateOrCb
              });
            } else {
              dispatch({
                type: 'SET_FORMIK_STATE',
                payload: function payload() {
                  return stateOrCb;
                }
              });
            }
          }, []);
          var setStatus = reactExports.useCallback(function (status) {
            dispatch({
              type: 'SET_STATUS',
              payload: status
            });
          }, []);
          var setSubmitting = reactExports.useCallback(function (isSubmitting) {
            dispatch({
              type: 'SET_ISSUBMITTING',
              payload: isSubmitting
            });
          }, []);
          var submitForm = useEventCallback(function () {
            dispatch({
              type: 'SUBMIT_ATTEMPT'
            });
            return validateFormWithHighPriority().then(function (combinedErrors) {
              // In case an error was thrown and passed to the resolved Promise,
              // `combinedErrors` can be an instance of an Error. We need to check
              // that and abort the submit.
              // If we don't do that, calling `Object.keys(new Error())` yields an
              // empty array, which causes the validation to pass and the form
              // to be submitted.
              var isInstanceOfError = combinedErrors instanceof Error;
              var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;
              if (isActuallyValid) {
                // Proceed with submit...
                //
                // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and
                // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.
                // This would be fine in simple cases, but make it impossible to disable submit
                // buttons where people use callbacks or promises as side effects (which is basically
                // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,
                //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.
                // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle
                // cleanup of isSubmitting on behalf of the consumer.
                var promiseOrUndefined;
                try {
                  promiseOrUndefined = executeSubmit(); // Bail if it's sync, consumer is responsible for cleaning up
                  // via setSubmitting(false)

                  if (promiseOrUndefined === undefined) {
                    return;
                  }
                } catch (error) {
                  throw error;
                }
                return Promise.resolve(promiseOrUndefined).then(function (result) {
                  if (!!isMounted.current) {
                    dispatch({
                      type: 'SUBMIT_SUCCESS'
                    });
                  }
                  return result;
                })["catch"](function (_errors) {
                  if (!!isMounted.current) {
                    dispatch({
                      type: 'SUBMIT_FAILURE'
                    }); // This is a legit error rejected by the onSubmit fn
                    // so we don't want to break the promise chain

                    throw _errors;
                  }
                });
              } else if (!!isMounted.current) {
                // ^^^ Make sure Formik is still mounted before updating state
                dispatch({
                  type: 'SUBMIT_FAILURE'
                }); // throw combinedErrors;

                if (isInstanceOfError) {
                  throw combinedErrors;
                }
              }
              return;
            });
          });
          var handleSubmit = useEventCallback(function (e) {
            if (e && e.preventDefault && isFunction(e.preventDefault)) {
              e.preventDefault();
            }
            if (e && e.stopPropagation && isFunction(e.stopPropagation)) {
              e.stopPropagation();
            } // Warn if form submission is triggered by a <button> without a

            submitForm()["catch"](function (reason) {
              console.warn("Warning: An unhandled error was caught from submitForm()", reason);
            });
          });
          var imperativeMethods = {
            resetForm: resetForm,
            validateForm: validateFormWithHighPriority,
            validateField: validateField,
            setErrors: setErrors,
            setFieldError: setFieldError,
            setFieldTouched: setFieldTouched,
            setFieldValue: setFieldValue,
            setStatus: setStatus,
            setSubmitting: setSubmitting,
            setTouched: setTouched,
            setValues: setValues,
            setFormikState: setFormikState,
            submitForm: submitForm
          };
          var executeSubmit = useEventCallback(function () {
            return onSubmit(state.values, imperativeMethods);
          });
          var handleReset = useEventCallback(function (e) {
            if (e && e.preventDefault && isFunction(e.preventDefault)) {
              e.preventDefault();
            }
            if (e && e.stopPropagation && isFunction(e.stopPropagation)) {
              e.stopPropagation();
            }
            resetForm();
          });
          var getFieldMeta = reactExports.useCallback(function (name) {
            return {
              value: getIn$1(state.values, name),
              error: getIn$1(state.errors, name),
              touched: !!getIn$1(state.touched, name),
              initialValue: getIn$1(initialValues.current, name),
              initialTouched: !!getIn$1(initialTouched.current, name),
              initialError: getIn$1(initialErrors.current, name)
            };
          }, [state.errors, state.touched, state.values]);
          var getFieldHelpers = reactExports.useCallback(function (name) {
            return {
              setValue: function setValue(value, shouldValidate) {
                return setFieldValue(name, value, shouldValidate);
              },
              setTouched: function setTouched(value, shouldValidate) {
                return setFieldTouched(name, value, shouldValidate);
              },
              setError: function setError(value) {
                return setFieldError(name, value);
              }
            };
          }, [setFieldValue, setFieldTouched, setFieldError]);
          var getFieldProps = reactExports.useCallback(function (nameOrOptions) {
            var isAnObject = isObject$1(nameOrOptions);
            var name = isAnObject ? nameOrOptions.name : nameOrOptions;
            var valueState = getIn$1(state.values, name);
            var field = {
              name: name,
              value: valueState,
              onChange: handleChange,
              onBlur: handleBlur
            };
            if (isAnObject) {
              var type = nameOrOptions.type,
                valueProp = nameOrOptions.value,
                is = nameOrOptions.as,
                multiple = nameOrOptions.multiple;
              if (type === 'checkbox') {
                if (valueProp === undefined) {
                  field.checked = !!valueState;
                } else {
                  field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));
                  field.value = valueProp;
                }
              } else if (type === 'radio') {
                field.checked = valueState === valueProp;
                field.value = valueProp;
              } else if (is === 'select' && multiple) {
                field.value = field.value || [];
                field.multiple = true;
              }
            }
            return field;
          }, [handleBlur, handleChange, state.values]);
          var dirty = reactExports.useMemo(function () {
            return !isEqual(initialValues.current, state.values);
          }, [initialValues.current, state.values]);
          var isValid = reactExports.useMemo(function () {
            return typeof isInitialValid !== 'undefined' ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;
          }, [isInitialValid, dirty, state.errors, props]);
          var ctx = _extends({}, state, {
            initialValues: initialValues.current,
            initialErrors: initialErrors.current,
            initialTouched: initialTouched.current,
            initialStatus: initialStatus.current,
            handleBlur: handleBlur,
            handleChange: handleChange,
            handleReset: handleReset,
            handleSubmit: handleSubmit,
            resetForm: resetForm,
            setErrors: setErrors,
            setFormikState: setFormikState,
            setFieldTouched: setFieldTouched,
            setFieldValue: setFieldValue,
            setFieldError: setFieldError,
            setStatus: setStatus,
            setSubmitting: setSubmitting,
            setTouched: setTouched,
            setValues: setValues,
            submitForm: submitForm,
            validateForm: validateFormWithHighPriority,
            validateField: validateField,
            isValid: isValid,
            dirty: dirty,
            unregisterField: unregisterField,
            registerField: registerField,
            getFieldProps: getFieldProps,
            getFieldMeta: getFieldMeta,
            getFieldHelpers: getFieldHelpers,
            validateOnBlur: validateOnBlur,
            validateOnChange: validateOnChange,
            validateOnMount: validateOnMount
          });
          return ctx;
        }
        function Formik(props) {
          var formikbag = useFormik(props);
          var component = props.component,
            children = props.children,
            render = props.render,
            innerRef = props.innerRef; // This allows folks to pass a ref to <Formik />

          reactExports.useImperativeHandle(innerRef, function () {
            return formikbag;
          });
          return reactExports.createElement(FormikProvider, {
            value: formikbag
          }, component ? reactExports.createElement(component, formikbag) : render ? render(formikbag) : children // children come last, always called
          ? isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? reactExports.Children.only(children) : null : null);
        }
        function warnAboutMissingIdentifier(_ref4) {
          var htmlContent = _ref4.htmlContent,
            documentationAnchorLink = _ref4.documentationAnchorLink,
            handlerName = _ref4.handlerName;
          console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n    " + htmlContent + "\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#" + documentationAnchorLink + "\n  ");
        }
        /**
         * Transform Yup ValidationError to a more usable object
         */

        function yupToFormErrors(yupError) {
          var errors = {};
          if (yupError.inner) {
            if (yupError.inner.length === 0) {
              return setIn(errors, yupError.path, yupError.message);
            }
            for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
              var _ref5;
              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref5 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref5 = _i.value;
              }
              var err = _ref5;
              if (!getIn$1(errors, err.path)) {
                errors = setIn(errors, err.path, err.message);
              }
            }
          }
          return errors;
        }
        /**
         * Validate a yup schema.
         */

        function validateYupSchema(values, schema, sync, context) {
          if (sync === void 0) {
            sync = false;
          }
          var normalizedValues = prepareDataForValidation(values);
          return schema[sync ? 'validateSync' : 'validate'](normalizedValues, {
            abortEarly: false,
            context: context || normalizedValues
          });
        }
        /**
         * Recursively prepare values.
         */

        function prepareDataForValidation(values) {
          var data = Array.isArray(values) ? [] : {};
          for (var k in values) {
            if (Object.prototype.hasOwnProperty.call(values, k)) {
              var key = String(k);
              if (Array.isArray(values[key]) === true) {
                data[key] = values[key].map(function (value) {
                  if (Array.isArray(value) === true || isPlainObject(value)) {
                    return prepareDataForValidation(value);
                  } else {
                    return value !== '' ? value : undefined;
                  }
                });
              } else if (isPlainObject(values[key])) {
                data[key] = prepareDataForValidation(values[key]);
              } else {
                data[key] = values[key] !== '' ? values[key] : undefined;
              }
            }
          }
          return data;
        }
        /**
         * deepmerge array merging algorithm
         * https://github.com/KyleAMathews/deepmerge#combine-array
         */

        function arrayMerge(target, source, options) {
          var destination = target.slice();
          source.forEach(function merge(e, i) {
            if (typeof destination[i] === 'undefined') {
              var cloneRequested = options.clone !== false;
              var shouldClone = cloneRequested && options.isMergeableObject(e);
              destination[i] = shouldClone ? deepmerge_1(Array.isArray(e) ? [] : {}, e, options) : e;
            } else if (options.isMergeableObject(e)) {
              destination[i] = deepmerge_1(target[i], e, options);
            } else if (target.indexOf(e) === -1) {
              destination.push(e);
            }
          });
          return destination;
        }
        /** Return multi select values based on an array of options */

        function getSelectedValues(options) {
          return Array.from(options).filter(function (el) {
            return el.selected;
          }).map(function (el) {
            return el.value;
          });
        }
        /** Return the next value for a checkbox */

        function getValueForCheckbox(currentValue, checked, valueProp) {
          // If the current value was a boolean, return a boolean
          if (typeof currentValue === 'boolean') {
            return Boolean(checked);
          } // If the currentValue was not a boolean we want to return an array

          var currentArrayOfValues = [];
          var isValueInArray = false;
          var index = -1;
          if (!Array.isArray(currentValue)) {
            // eslint-disable-next-line eqeqeq
            if (!valueProp || valueProp == 'true' || valueProp == 'false') {
              return Boolean(checked);
            }
          } else {
            // If the current value is already an array, use it
            currentArrayOfValues = currentValue;
            index = currentValue.indexOf(valueProp);
            isValueInArray = index >= 0;
          } // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values

          if (checked && valueProp && !isValueInArray) {
            return currentArrayOfValues.concat(valueProp);
          } // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values

          if (!isValueInArray) {
            return currentArrayOfValues;
          } // If the checkbox was unchecked and the value is in the array, remove the value and return the array

          return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));
        } // React currently throws a warning when using useLayoutEffect on the server.
        // To get around it, we can conditionally useEffect on the server (no-op) and
        // useLayoutEffect in the browser.
        // @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85

        var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? reactExports.useLayoutEffect : reactExports.useEffect;
        function useEventCallback(fn) {
          var ref = reactExports.useRef(fn); // we copy a ref to the callback scoped to the current state/props on each render

          useIsomorphicLayoutEffect(function () {
            ref.current = fn;
          });
          return reactExports.useCallback(function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return ref.current.apply(void 0, args);
          }, []);
        }
        var Form = /*#__PURE__*/reactExports.forwardRef(function (props, ref) {
          // iOS needs an "action" attribute for nice input: https://stackoverflow.com/a/39485162/406725
          // We default the action to "#" in case the preventDefault fails (just updates the URL hash)
          var action = props.action,
            rest = _objectWithoutPropertiesLoose$1(props, ["action"]);
          var _action = action != null ? action : '#';
          var _useFormikContext = useFormikContext(),
            handleReset = _useFormikContext.handleReset,
            handleSubmit = _useFormikContext.handleSubmit;
          return reactExports.createElement("form", Object.assign({
            onSubmit: handleSubmit,
            ref: ref,
            onReset: handleReset,
            action: _action
          }, rest));
        });
        Form.displayName = 'Form';

        /**
         * Based on Kendo UI Core expression code <https://github.com/telerik/kendo-ui-core#license-information>
         */

        function Cache(maxSize) {
          this._maxSize = maxSize;
          this.clear();
        }
        Cache.prototype.clear = function () {
          this._size = 0;
          this._values = Object.create(null);
        };
        Cache.prototype.get = function (key) {
          return this._values[key];
        };
        Cache.prototype.set = function (key, value) {
          this._size >= this._maxSize && this.clear();
          if (!(key in this._values)) this._size++;
          return this._values[key] = value;
        };
        var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g,
          DIGIT_REGEX = /^\d+$/,
          LEAD_DIGIT_REGEX = /^\d/,
          SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g,
          CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/,
          MAX_CACHE_SIZE = 512;
        var pathCache = new Cache(MAX_CACHE_SIZE),
          setCache = new Cache(MAX_CACHE_SIZE),
          getCache = new Cache(MAX_CACHE_SIZE);
        var propertyExpr = {
          Cache: Cache,
          split: split,
          normalizePath: normalizePath,
          setter: function setter(path) {
            var parts = normalizePath(path);
            return setCache.get(path) || setCache.set(path, function setter(obj, value) {
              var index = 0;
              var len = parts.length;
              var data = obj;
              while (index < len - 1) {
                var part = parts[index];
                if (part === '__proto__' || part === 'constructor' || part === 'prototype') {
                  return obj;
                }
                data = data[parts[index++]];
              }
              data[parts[index]] = value;
            });
          },
          getter: function getter(path, safe) {
            var parts = normalizePath(path);
            return getCache.get(path) || getCache.set(path, function getter(data) {
              var index = 0,
                len = parts.length;
              while (index < len) {
                if (data != null || !safe) data = data[parts[index++]];else return;
              }
              return data;
            });
          },
          join: function join(segments) {
            return segments.reduce(function (path, part) {
              return path + (isQuoted(part) || DIGIT_REGEX.test(part) ? '[' + part + ']' : (path ? '.' : '') + part);
            }, '');
          },
          forEach: function forEach(path, cb, thisArg) {
            _forEach(Array.isArray(path) ? path : split(path), cb, thisArg);
          }
        };
        function normalizePath(path) {
          return pathCache.get(path) || pathCache.set(path, split(path).map(function (part) {
            return part.replace(CLEAN_QUOTES_REGEX, '$2');
          }));
        }
        function split(path) {
          return path.match(SPLIT_REGEX) || [''];
        }
        function _forEach(parts, iter, thisArg) {
          var len = parts.length,
            part,
            idx,
            isArray,
            isBracket;
          for (idx = 0; idx < len; idx++) {
            part = parts[idx];
            if (part) {
              if (shouldBeQuoted(part)) {
                part = '"' + part + '"';
              }
              isBracket = isQuoted(part);
              isArray = !isBracket && /^\d+$/.test(part);
              iter.call(thisArg, part, isBracket, isArray, idx, parts);
            }
          }
        }
        function isQuoted(str) {
          return typeof str === 'string' && str && ["'", '"'].indexOf(str.charAt(0)) !== -1;
        }
        function hasLeadingNumber(part) {
          return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
        }
        function hasSpecialChars(part) {
          return SPEC_CHAR_REGEX.test(part);
        }
        function shouldBeQuoted(part) {
          return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
        }
        var reWords = /[A-Z\xc0-\xd6\xd8-\xde]?[a-z\xdf-\xf6\xf8-\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde]|$)|(?:[A-Z\xc0-\xd6\xd8-\xde]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde](?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])|$)|[A-Z\xc0-\xd6\xd8-\xde]?(?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\xc0-\xd6\xd8-\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\d*(?:1ST|2ND|3RD|(?![123])\dTH)(?=\b|[a-z_])|\d*(?:1st|2nd|3rd|(?![123])\dth)(?=\b|[A-Z_])|\d+|(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?(?:\u200d(?:[^\ud800-\udfff]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?)*/g;
        var words = function words(str) {
          return str.match(reWords) || [];
        };
        var upperFirst = function upperFirst(str) {
          return str[0].toUpperCase() + str.slice(1);
        };
        var join = function join(str, d) {
          return words(str).join(d).toLowerCase();
        };
        var camelCase = function camelCase(str) {
          return words(str).reduce(function (acc, next) {
            return "".concat(acc).concat(!acc ? next.toLowerCase() : next[0].toUpperCase() + next.slice(1).toLowerCase());
          }, '');
        };
        var pascalCase = function pascalCase(str) {
          return upperFirst(camelCase(str));
        };
        var snakeCase = function snakeCase(str) {
          return join(str, '_');
        };
        var kebabCase = function kebabCase(str) {
          return join(str, '-');
        };
        var sentenceCase = function sentenceCase(str) {
          return upperFirst(join(str, ' '));
        };
        var titleCase = function titleCase(str) {
          return words(str).map(upperFirst).join(' ');
        };
        var tinyCase = {
          words: words,
          upperFirst: upperFirst,
          camelCase: camelCase,
          pascalCase: pascalCase,
          snakeCase: snakeCase,
          kebabCase: kebabCase,
          sentenceCase: sentenceCase,
          titleCase: titleCase
        };
        var toposort$2 = {
          exports: {}
        };

        /**
         * Topological sorting function
         *
         * @param {Array} edges
         * @returns {Array}
         */

        toposort$2.exports = function (edges) {
          return toposort(uniqueNodes(edges), edges);
        };
        toposort$2.exports.array = toposort;
        function toposort(nodes, edges) {
          var cursor = nodes.length,
            sorted = new Array(cursor),
            visited = {},
            i = cursor
            // Better data structures make algorithm much faster.
            ,
            outgoingEdges = makeOutgoingEdges(edges),
            nodesHash = makeNodesHash(nodes);

          // check for unknown nodes
          edges.forEach(function (edge) {
            if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
              throw new Error('Unknown node. There is an unknown node in the supplied edges.');
            }
          });
          while (i--) {
            if (!visited[i]) visit(nodes[i], i, new Set());
          }
          return sorted;
          function visit(node, i, predecessors) {
            if (predecessors.has(node)) {
              var nodeRep;
              try {
                nodeRep = ", node was:" + JSON.stringify(node);
              } catch (e) {
                nodeRep = "";
              }
              throw new Error('Cyclic dependency' + nodeRep);
            }
            if (!nodesHash.has(node)) {
              throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: ' + JSON.stringify(node));
            }
            if (visited[i]) return;
            visited[i] = true;
            var outgoing = outgoingEdges.get(node) || new Set();
            outgoing = Array.from(outgoing);
            if (i = outgoing.length) {
              predecessors.add(node);
              do {
                var child = outgoing[--i];
                visit(child, nodesHash.get(child), predecessors);
              } while (i);
              predecessors.delete(node);
            }
            sorted[--cursor] = node;
          }
        }
        function uniqueNodes(arr) {
          var res = new Set();
          for (var i = 0, len = arr.length; i < len; i++) {
            var edge = arr[i];
            res.add(edge[0]);
            res.add(edge[1]);
          }
          return Array.from(res);
        }
        function makeOutgoingEdges(arr) {
          var edges = new Map();
          for (var i = 0, len = arr.length; i < len; i++) {
            var edge = arr[i];
            if (!edges.has(edge[0])) edges.set(edge[0], new Set());
            if (!edges.has(edge[1])) edges.set(edge[1], new Set());
            edges.get(edge[0]).add(edge[1]);
          }
          return edges;
        }
        function makeNodesHash(arr) {
          var res = new Map();
          for (var i = 0, len = arr.length; i < len; i++) {
            res.set(arr[i], i);
          }
          return res;
        }
        var toposortExports = toposort$2.exports;
        var toposort$1 = /*@__PURE__*/getDefaultExportFromCjs(toposortExports);
        var toString = Object.prototype.toString;
        var errorToString = Error.prototype.toString;
        var regExpToString = RegExp.prototype.toString;
        var symbolToString = typeof Symbol !== 'undefined' ? Symbol.prototype.toString : function () {
          return '';
        };
        var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
        function printNumber(val) {
          if (val != +val) return 'NaN';
          var isNegativeZero = val === 0 && 1 / val < 0;
          return isNegativeZero ? '-0' : '' + val;
        }
        function printSimpleValue(val) {
          var quoteStrings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          if (val == null || val === true || val === false) return '' + val;
          var typeOf = _typeof2(val);
          if (typeOf === 'number') return printNumber(val);
          if (typeOf === 'string') return quoteStrings ? "\"".concat(val, "\"") : val;
          if (typeOf === 'function') return '[Function ' + (val.name || 'anonymous') + ']';
          if (typeOf === 'symbol') return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
          var tag = toString.call(val).slice(8, -1);
          if (tag === 'Date') return isNaN(val.getTime()) ? '' + val : val.toISOString(val);
          if (tag === 'Error' || val instanceof Error) return '[' + errorToString.call(val) + ']';
          if (tag === 'RegExp') return regExpToString.call(val);
          return null;
        }
        function printValue(value, quoteStrings) {
          var result = printSimpleValue(value, quoteStrings);
          if (result !== null) return result;
          return JSON.stringify(value, function (key, value) {
            var result = printSimpleValue(this[key], quoteStrings);
            if (result !== null) return result;
            return value;
          }, 2);
        }
        function toArray(value) {
          return value == null ? [] : [].concat(value);
        }
        var strReg = /\$\{\s*(\w+)\s*\}/g;
        var ValidationError = /*#__PURE__*/function (_Error3) {
          _inherits(ValidationError, _Error3);
          var _super13 = _createSuper(ValidationError);
          function ValidationError(errorOrErrors, value, field, type) {
            var _this31;
            _classCallCheck(this, ValidationError);
            _this31 = _super13.call(this);
            _this31.value = void 0;
            _this31.path = void 0;
            _this31.type = void 0;
            _this31.errors = void 0;
            _this31.params = void 0;
            _this31.inner = void 0;
            _this31.name = 'ValidationError';
            _this31.value = value;
            _this31.path = field;
            _this31.type = type;
            _this31.errors = [];
            _this31.inner = [];
            toArray(errorOrErrors).forEach(function (err) {
              if (ValidationError.isError(err)) {
                var _this31$errors;
                (_this31$errors = _this31.errors).push.apply(_this31$errors, _toConsumableArray(err.errors));
                _this31.inner = _this31.inner.concat(err.inner.length ? err.inner : err);
              } else {
                _this31.errors.push(err);
              }
            });
            _this31.message = _this31.errors.length > 1 ? "".concat(_this31.errors.length, " errors occurred") : _this31.errors[0];
            if (Error.captureStackTrace) Error.captureStackTrace(_assertThisInitialized(_this31), ValidationError);
            return _this31;
          }
          _createClass(ValidationError, null, [{
            key: "formatError",
            value: function formatError(message, params) {
              var path = params.label || params.path || 'this';
              if (path !== params.path) params = Object.assign({}, params, {
                path: path
              });
              if (typeof message === 'string') return message.replace(strReg, function (_, key) {
                return printValue(params[key]);
              });
              if (typeof message === 'function') return message(params);
              return message;
            }
          }, {
            key: "isError",
            value: function isError(err) {
              return err && err.name === 'ValidationError';
            }
          }]);
          return ValidationError;
        }( /*#__PURE__*/_wrapNativeSuper(Error));
        var mixed = {
          default: '${path} is invalid',
          required: '${path} is a required field',
          defined: '${path} must be defined',
          notNull: '${path} cannot be null',
          oneOf: '${path} must be one of the following values: ${values}',
          notOneOf: '${path} must not be one of the following values: ${values}',
          notType: function notType(_ref52) {
            var path = _ref52.path,
              type = _ref52.type,
              value = _ref52.value,
              originalValue = _ref52.originalValue;
            var castMsg = originalValue != null && originalValue !== value ? " (cast from the value `".concat(printValue(originalValue, true), "`).") : '.';
            return type !== 'mixed' ? "".concat(path, " must be a `").concat(type, "` type, ") + "but the final value was: `".concat(printValue(value, true), "`") + castMsg : "".concat(path, " must match the configured type. ") + "The validated value was: `".concat(printValue(value, true), "`") + castMsg;
          }
        };
        var string = {
          length: '${path} must be exactly ${length} characters',
          min: '${path} must be at least ${min} characters',
          max: '${path} must be at most ${max} characters',
          matches: '${path} must match the following: "${regex}"',
          email: '${path} must be a valid email',
          url: '${path} must be a valid URL',
          uuid: '${path} must be a valid UUID',
          trim: '${path} must be a trimmed string',
          lowercase: '${path} must be a lowercase string',
          uppercase: '${path} must be a upper case string'
        };
        var number = {
          min: '${path} must be greater than or equal to ${min}',
          max: '${path} must be less than or equal to ${max}',
          lessThan: '${path} must be less than ${less}',
          moreThan: '${path} must be greater than ${more}',
          positive: '${path} must be a positive number',
          negative: '${path} must be a negative number',
          integer: '${path} must be an integer'
        };
        var date = {
          min: '${path} field must be later than ${min}',
          max: '${path} field must be at earlier than ${max}'
        };
        var boolean = {
          isValue: '${path} field must be ${value}'
        };
        var object = {
          noUnknown: '${path} field has unspecified keys: ${unknown}'
        };
        var array = {
          min: '${path} field must have at least ${min} items',
          max: '${path} field must have less than or equal to ${max} items',
          length: '${path} must have ${length} items'
        };
        Object.assign(Object.create(null), {
          mixed: mixed,
          string: string,
          number: number,
          date: date,
          object: object,
          array: array,
          boolean: boolean
        });
        var isSchema = function isSchema(obj) {
          return obj && obj.__isYupSchema__;
        };
        var Condition = /*#__PURE__*/function () {
          function Condition(refs, builder) {
            _classCallCheck(this, Condition);
            this.fn = void 0;
            this.refs = refs;
            this.refs = refs;
            this.fn = builder;
          }
          _createClass(Condition, [{
            key: "resolve",
            value: function resolve(base, options) {
              var values = this.refs.map(function (ref) {
                return (
                  // TODO: ? operator here?
                  ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context)
                );
              });
              var schema = this.fn(values, base, options);
              if (schema === undefined ||
              // @ts-ignore this can be base
              schema === base) {
                return base;
              }
              if (!isSchema(schema)) throw new TypeError('conditions must return a schema object');
              return schema.resolve(options);
            }
          }], [{
            key: "fromOptions",
            value: function fromOptions(refs, config) {
              if (!config.then && !config.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');
              var is = config.is,
                then = config.then,
                otherwise = config.otherwise;
              var check = typeof is === 'function' ? is : function () {
                for (var _len9 = arguments.length, values = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
                  values[_key9] = arguments[_key9];
                }
                return values.every(function (value) {
                  return value === is;
                });
              };
              return new Condition(refs, function (values, schema) {
                var _branch;
                var branch = check.apply(void 0, _toConsumableArray(values)) ? then : otherwise;
                return (_branch = branch == null ? void 0 : branch(schema)) != null ? _branch : schema;
              });
            }
          }]);
          return Condition;
        }();
        var prefixes = {
          context: '$',
          value: '.'
        };
        var Reference = /*#__PURE__*/function () {
          function Reference(key) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, Reference);
            this.key = void 0;
            this.isContext = void 0;
            this.isValue = void 0;
            this.isSibling = void 0;
            this.path = void 0;
            this.getter = void 0;
            this.map = void 0;
            if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);
            this.key = key.trim();
            if (key === '') throw new TypeError('ref must be a non-empty string');
            this.isContext = this.key[0] === prefixes.context;
            this.isValue = this.key[0] === prefixes.value;
            this.isSibling = !this.isContext && !this.isValue;
            var prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';
            this.path = this.key.slice(prefix.length);
            this.getter = this.path && propertyExpr.getter(this.path, true);
            this.map = options.map;
          }
          _createClass(Reference, [{
            key: "getValue",
            value: function getValue(value, parent, context) {
              var result = this.isContext ? context : this.isValue ? value : parent;
              if (this.getter) result = this.getter(result || {});
              if (this.map) result = this.map(result);
              return result;
            }

            /**
             *
             * @param {*} value
             * @param {Object} options
             * @param {Object=} options.context
             * @param {Object=} options.parent
             */
          }, {
            key: "cast",
            value: function cast(value, options) {
              return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
            }
          }, {
            key: "resolve",
            value: function resolve() {
              return this;
            }
          }, {
            key: "describe",
            value: function describe() {
              return {
                type: 'ref',
                key: this.key
              };
            }
          }, {
            key: "toString",
            value: function toString() {
              return "Ref(".concat(this.key, ")");
            }
          }], [{
            key: "isRef",
            value: function isRef(value) {
              return value && value.__isYupRef;
            }
          }]);
          return Reference;
        }(); // @ts-ignore
        Reference.prototype.__isYupRef = true;
        var isAbsent = function isAbsent(value) {
          return value == null;
        };
        function createValidation(config) {
          function validate(_ref53, panic, next) {
            var value = _ref53.value,
              _ref53$path = _ref53.path,
              path = _ref53$path === void 0 ? '' : _ref53$path,
              options = _ref53.options,
              originalValue = _ref53.originalValue,
              schema = _ref53.schema;
            var name = config.name,
              test = config.test,
              params = config.params,
              message = config.message,
              skipAbsent = config.skipAbsent;
            var parent = options.parent,
              context = options.context,
              _options$abortEarly2 = options.abortEarly,
              abortEarly = _options$abortEarly2 === void 0 ? schema.spec.abortEarly : _options$abortEarly2;
            function resolve(item) {
              return Reference.isRef(item) ? item.getValue(value, parent, context) : item;
            }
            function createError() {
              var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var nextParams = Object.assign({
                value: value,
                originalValue: originalValue,
                label: schema.spec.label,
                path: overrides.path || path,
                spec: schema.spec
              }, params, overrides.params);
              for (var _i3 = 0, _Object$keys2 = Object.keys(nextParams); _i3 < _Object$keys2.length; _i3++) {
                var key = _Object$keys2[_i3];
                nextParams[key] = resolve(nextParams[key]);
              }
              var error = new ValidationError(ValidationError.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name);
              error.params = nextParams;
              return error;
            }
            var invalid = abortEarly ? panic : next;
            var ctx = {
              path: path,
              parent: parent,
              type: name,
              from: options.from,
              createError: createError,
              resolve: resolve,
              options: options,
              originalValue: originalValue,
              schema: schema
            };
            var handleResult = function handleResult(validOrError) {
              if (ValidationError.isError(validOrError)) invalid(validOrError);else if (!validOrError) invalid(createError());else next(null);
            };
            var handleError = function handleError(err) {
              if (ValidationError.isError(err)) invalid(err);else panic(err);
            };
            var shouldSkip = skipAbsent && isAbsent(value);
            if (!options.sync) {
              try {
                Promise.resolve(!shouldSkip ? test.call(ctx, value, ctx) : true).then(handleResult, handleError);
              } catch (err) {
                handleError(err);
              }
              return;
            }
            var result;
            try {
              var _result;
              result = !shouldSkip ? test.call(ctx, value, ctx) : true;
              if (typeof ((_result = result) == null ? void 0 : _result.then) === 'function') {
                throw new Error("Validation test of type: \"".concat(ctx.type, "\" returned a Promise during a synchronous validate. ") + "This test will finish after the validate call has returned");
              }
            } catch (err) {
              handleError(err);
              return;
            }
            handleResult(result);
          }
          validate.OPTIONS = config;
          return validate;
        }
        function getIn(schema, path, value) {
          var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : value;
          var parent, lastPart, lastPartDebug;

          // root path: ''
          if (!path) return {
            parent: parent,
            parentPath: path,
            schema: schema
          };
          propertyExpr.forEach(path, function (_part, isBracket, isArray) {
            var part = isBracket ? _part.slice(1, _part.length - 1) : _part;
            schema = schema.resolve({
              context: context,
              parent: parent,
              value: value
            });
            var isTuple = schema.type === 'tuple';
            var idx = isArray ? parseInt(part, 10) : 0;
            if (schema.innerType || isTuple) {
              if (isTuple && !isArray) throw new Error("Yup.reach cannot implicitly index into a tuple type. the path part \"".concat(lastPartDebug, "\" must contain an index to the tuple element, e.g. \"").concat(lastPartDebug, "[0]\""));
              if (value && idx >= value.length) {
                throw new Error("Yup.reach cannot resolve an array item at index: ".concat(_part, ", in the path: ").concat(path, ". ") + "because there is no value at that index. ");
              }
              parent = value;
              value = value && value[idx];
              schema = isTuple ? schema.spec.types[idx] : schema.innerType;
            }

            // sometimes the array index part of a path doesn't exist: "nested.arr.child"
            // in these cases the current part is the next schema and should be processed
            // in this iteration. For cases where the index signature is included this
            // check will fail and we'll handle the `child` part on the next iteration like normal
            if (!isArray) {
              if (!schema.fields || !schema.fields[part]) throw new Error("The schema does not contain the path: ".concat(path, ". ") + "(failed at: ".concat(lastPartDebug, " which is a type: \"").concat(schema.type, "\")"));
              parent = value;
              value = value && value[part];
              schema = schema.fields[part];
            }
            lastPart = part;
            lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;
          });
          return {
            schema: schema,
            parent: parent,
            parentPath: lastPart
          };
        }
        var ReferenceSet = /*#__PURE__*/function (_Set) {
          _inherits(ReferenceSet, _Set);
          var _super14 = _createSuper(ReferenceSet);
          function ReferenceSet() {
            _classCallCheck(this, ReferenceSet);
            return _super14.apply(this, arguments);
          }
          _createClass(ReferenceSet, [{
            key: "describe",
            value: function describe() {
              var description = [];
              var _iterator15 = _createForOfIteratorHelper(this.values()),
                _step14;
              try {
                for (_iterator15.s(); !(_step14 = _iterator15.n()).done;) {
                  var item = _step14.value;
                  description.push(Reference.isRef(item) ? item.describe() : item);
                }
              } catch (err) {
                _iterator15.e(err);
              } finally {
                _iterator15.f();
              }
              return description;
            }
          }, {
            key: "resolveAll",
            value: function resolveAll(resolve) {
              var result = [];
              var _iterator16 = _createForOfIteratorHelper(this.values()),
                _step15;
              try {
                for (_iterator16.s(); !(_step15 = _iterator16.n()).done;) {
                  var item = _step15.value;
                  result.push(resolve(item));
                }
              } catch (err) {
                _iterator16.e(err);
              } finally {
                _iterator16.f();
              }
              return result;
            }
          }, {
            key: "clone",
            value: function clone() {
              return new ReferenceSet(this.values());
            }
          }, {
            key: "merge",
            value: function merge(newItems, removeItems) {
              var next = this.clone();
              newItems.forEach(function (value) {
                return next.add(value);
              });
              removeItems.forEach(function (value) {
                return next.delete(value);
              });
              return next;
            }
          }]);
          return ReferenceSet;
        }( /*#__PURE__*/_wrapNativeSuper(Set)); // tweaked from https://github.com/Kelin2025/nanoclone/blob/0abeb7635bda9b68ef2277093f76dbe3bf3948e1/src/index.js
        function _clone(src) {
          var seen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();
          if (isSchema(src) || !src || _typeof2(src) !== 'object') return src;
          if (seen.has(src)) return seen.get(src);
          var copy;
          if (src instanceof Date) {
            // Date
            copy = new Date(src.getTime());
            seen.set(src, copy);
          } else if (src instanceof RegExp) {
            // RegExp
            copy = new RegExp(src);
            seen.set(src, copy);
          } else if (Array.isArray(src)) {
            // Array
            copy = new Array(src.length);
            seen.set(src, copy);
            for (var i = 0; i < src.length; i++) copy[i] = _clone(src[i], seen);
          } else if (src instanceof Map) {
            // Map
            copy = new Map();
            seen.set(src, copy);
            var _iterator17 = _createForOfIteratorHelper(src.entries()),
              _step16;
            try {
              for (_iterator17.s(); !(_step16 = _iterator17.n()).done;) {
                var _step16$value = _slicedToArray2(_step16.value, 2),
                  _k = _step16$value[0],
                  _v2 = _step16$value[1];
                copy.set(_k, _clone(_v2, seen));
              }
            } catch (err) {
              _iterator17.e(err);
            } finally {
              _iterator17.f();
            }
          } else if (src instanceof Set) {
            // Set
            copy = new Set();
            seen.set(src, copy);
            var _iterator18 = _createForOfIteratorHelper(src),
              _step17;
            try {
              for (_iterator18.s(); !(_step17 = _iterator18.n()).done;) {
                var _v3 = _step17.value;
                copy.add(_clone(_v3, seen));
              }
            } catch (err) {
              _iterator18.e(err);
            } finally {
              _iterator18.f();
            }
          } else if (src instanceof Object) {
            // Object
            copy = {};
            seen.set(src, copy);
            for (var _i4 = 0, _Object$entries = Object.entries(src); _i4 < _Object$entries.length; _i4++) {
              var _Object$entries$_i = _slicedToArray2(_Object$entries[_i4], 2),
                _k2 = _Object$entries$_i[0],
                _v4 = _Object$entries$_i[1];
              copy[_k2] = _clone(_v4, seen);
            }
          } else {
            throw Error("Unable to clone ".concat(src));
          }
          return copy;
        }
        var Schema = /*#__PURE__*/function () {
          function Schema(options) {
            var _this32 = this;
            _classCallCheck(this, Schema);
            this.type = void 0;
            this.deps = [];
            this.tests = void 0;
            this.transforms = void 0;
            this.conditions = [];
            this._mutate = void 0;
            this.internalTests = {};
            this._whitelist = new ReferenceSet();
            this._blacklist = new ReferenceSet();
            this.exclusiveTests = Object.create(null);
            this._typeCheck = void 0;
            this.spec = void 0;
            this.tests = [];
            this.transforms = [];
            this.withMutation(function () {
              _this32.typeError(mixed.notType);
            });
            this.type = options.type;
            this._typeCheck = options.check;
            this.spec = Object.assign({
              strip: false,
              strict: false,
              abortEarly: true,
              recursive: true,
              nullable: false,
              optional: true,
              coerce: true
            }, options == null ? void 0 : options.spec);
            this.withMutation(function (s) {
              s.nonNullable();
            });
          }

          // TODO: remove
          _createClass(Schema, [{
            key: "_type",
            get: function get() {
              return this.type;
            }
          }, {
            key: "clone",
            value: function clone(spec) {
              if (this._mutate) {
                if (spec) Object.assign(this.spec, spec);
                return this;
              }

              // if the nested value is a schema we can skip cloning, since
              // they are already immutable
              var next = Object.create(Object.getPrototypeOf(this));

              // @ts-expect-error this is readonly
              next.type = this.type;
              next._typeCheck = this._typeCheck;
              next._whitelist = this._whitelist.clone();
              next._blacklist = this._blacklist.clone();
              next.internalTests = Object.assign({}, this.internalTests);
              next.exclusiveTests = Object.assign({}, this.exclusiveTests);

              // @ts-expect-error this is readonly
              next.deps = _toConsumableArray(this.deps);
              next.conditions = _toConsumableArray(this.conditions);
              next.tests = _toConsumableArray(this.tests);
              next.transforms = _toConsumableArray(this.transforms);
              next.spec = _clone(Object.assign({}, this.spec, spec));
              return next;
            }
          }, {
            key: "label",
            value: function label(_label) {
              var next = this.clone();
              next.spec.label = _label;
              return next;
            }
          }, {
            key: "meta",
            value: function meta() {
              if (arguments.length === 0) return this.spec.meta;
              var next = this.clone();
              next.spec.meta = Object.assign(next.spec.meta || {}, arguments.length <= 0 ? undefined : arguments[0]);
              return next;
            }
          }, {
            key: "withMutation",
            value: function withMutation(fn) {
              var before = this._mutate;
              this._mutate = true;
              var result = fn(this);
              this._mutate = before;
              return result;
            }
          }, {
            key: "concat",
            value: function concat(schema) {
              if (!schema || schema === this) return this;
              if (schema.type !== this.type && this.type !== 'mixed') throw new TypeError("You cannot `concat()` schema's of different types: ".concat(this.type, " and ").concat(schema.type));
              var base = this;
              var combined = schema.clone();
              var mergedSpec = Object.assign({}, base.spec, combined.spec);
              combined.spec = mergedSpec;
              combined.internalTests = Object.assign({}, base.internalTests, combined.internalTests);

              // manually merge the blacklist/whitelist (the other `schema` takes
              // precedence in case of conflicts)
              combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);
              combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist);

              // start with the current tests
              combined.tests = base.tests;
              combined.exclusiveTests = base.exclusiveTests;

              // manually add the new tests to ensure
              // the deduping logic is consistent
              combined.withMutation(function (next) {
                schema.tests.forEach(function (fn) {
                  next.test(fn.OPTIONS);
                });
              });
              combined.transforms = [].concat(_toConsumableArray(base.transforms), _toConsumableArray(combined.transforms));
              return combined;
            }
          }, {
            key: "isType",
            value: function isType(v) {
              if (v == null) {
                if (this.spec.nullable && v === null) return true;
                if (this.spec.optional && v === undefined) return true;
                return false;
              }
              return this._typeCheck(v);
            }
          }, {
            key: "resolve",
            value: function resolve(options) {
              var schema = this;
              if (schema.conditions.length) {
                var conditions = schema.conditions;
                schema = schema.clone();
                schema.conditions = [];
                schema = conditions.reduce(function (prevSchema, condition) {
                  return condition.resolve(prevSchema, options);
                }, schema);
                schema = schema.resolve(options);
              }
              return schema;
            }
          }, {
            key: "resolveOptions",
            value: function resolveOptions(options) {
              var _options$strict, _options$abortEarly, _options$recursive;
              return Object.assign({}, options, {
                from: options.from || [],
                strict: (_options$strict = options.strict) != null ? _options$strict : this.spec.strict,
                abortEarly: (_options$abortEarly = options.abortEarly) != null ? _options$abortEarly : this.spec.abortEarly,
                recursive: (_options$recursive = options.recursive) != null ? _options$recursive : this.spec.recursive
              });
            }

            /**
             * Run the configured transform pipeline over an input value.
             */
          }, {
            key: "cast",
            value: function cast(value) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              var resolvedSchema = this.resolve(Object.assign({
                value: value
              }, options));
              var allowOptionality = options.assert === 'ignore-optionality';
              var result = resolvedSchema._cast(value, options);
              if (options.assert !== false && !resolvedSchema.isType(result)) {
                if (allowOptionality && isAbsent(result)) {
                  return result;
                }
                var formattedValue = printValue(value);
                var formattedResult = printValue(result);
                throw new TypeError("The value of ".concat(options.path || 'field', " could not be cast to a value ") + "that satisfies the schema type: \"".concat(resolvedSchema.type, "\". \n\n") + "attempted value: ".concat(formattedValue, " \n") + (formattedResult !== formattedValue ? "result of cast: ".concat(formattedResult) : ''));
              }
              return result;
            }
          }, {
            key: "_cast",
            value: function _cast(rawValue, options) {
              var _this33 = this;
              var value = rawValue === undefined ? rawValue : this.transforms.reduce(function (prevValue, fn) {
                return fn.call(_this33, prevValue, rawValue, _this33);
              }, rawValue);
              if (value === undefined) {
                value = this.getDefault(options);
              }
              return value;
            }
          }, {
            key: "_validate",
            value: function _validate(_value) {
              var _this34 = this;
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              var panic = arguments.length > 2 ? arguments[2] : undefined;
              var next = arguments.length > 3 ? arguments[3] : undefined;
              var path = options.path,
                _options$originalValu = options.originalValue,
                originalValue = _options$originalValu === void 0 ? _value : _options$originalValu,
                _options$strict2 = options.strict,
                strict = _options$strict2 === void 0 ? this.spec.strict : _options$strict2;
              var value = _value;
              if (!strict) {
                value = this._cast(value, Object.assign({
                  assert: false
                }, options));
              }
              var initialTests = [];
              for (var _i5 = 0, _Object$values = Object.values(this.internalTests); _i5 < _Object$values.length; _i5++) {
                var test = _Object$values[_i5];
                if (test) initialTests.push(test);
              }
              this.runTests({
                path: path,
                value: value,
                originalValue: originalValue,
                options: options,
                tests: initialTests
              }, panic, function (initialErrors) {
                // even if we aren't ending early we can't proceed further if the types aren't correct
                if (initialErrors.length) {
                  return next(initialErrors, value);
                }
                _this34.runTests({
                  path: path,
                  value: value,
                  originalValue: originalValue,
                  options: options,
                  tests: _this34.tests
                }, panic, next);
              });
            }

            /**
             * Executes a set of validations, either schema, produced Tests or a nested
             * schema validate result.
             */
          }, {
            key: "runTests",
            value: function runTests(runOptions, panic, next) {
              var fired = false;
              var tests = runOptions.tests,
                value = runOptions.value,
                originalValue = runOptions.originalValue,
                path = runOptions.path,
                options = runOptions.options;
              var panicOnce = function panicOnce(arg) {
                if (fired) return;
                fired = true;
                panic(arg, value);
              };
              var nextOnce = function nextOnce(arg) {
                if (fired) return;
                fired = true;
                next(arg, value);
              };
              var count = tests.length;
              var nestedErrors = [];
              if (!count) return nextOnce([]);
              var args = {
                value: value,
                originalValue: originalValue,
                path: path,
                options: options,
                schema: this
              };
              for (var i = 0; i < tests.length; i++) {
                var test = tests[i];
                test(args, panicOnce, function finishTestRun(err) {
                  if (err) {
                    nestedErrors = nestedErrors.concat(err);
                  }
                  if (--count <= 0) {
                    nextOnce(nestedErrors);
                  }
                });
              }
            }
          }, {
            key: "asNestedTest",
            value: function asNestedTest(_ref54) {
              var _Object$assign,
                _this35 = this;
              var key = _ref54.key,
                index = _ref54.index,
                parent = _ref54.parent,
                parentPath = _ref54.parentPath,
                originalParent = _ref54.originalParent,
                options = _ref54.options;
              var k = key != null ? key : index;
              if (k == null) {
                throw TypeError('Must include `key` or `index` for nested validations');
              }
              var isIndex = typeof k === 'number';
              var value = parent[k];
              var testOptions = Object.assign({}, options, (_Object$assign = {
                // Nested validations fields are always strict:
                //    1. parent isn't strict so the casting will also have cast inner values
                //    2. parent is strict in which case the nested values weren't cast either
                strict: true,
                parent: parent,
                value: value,
                originalValue: originalParent[k],
                // FIXME: tests depend on `index` being passed around deeply,
                //   we should not let the options.key/index bleed through
                key: undefined
              }, _defineProperty2(_Object$assign, isIndex ? 'index' : 'key', k), _defineProperty2(_Object$assign, "path", isIndex || k.includes('.') ? "".concat(parentPath || '', "[").concat(value ? k : "\"".concat(k, "\""), "]") : (parentPath ? "".concat(parentPath, ".") : '') + key), _Object$assign));
              return function (_, panic, next) {
                return _this35.resolve(testOptions)._validate(value, testOptions, panic, next);
              };
            }
          }, {
            key: "validate",
            value: function validate(value, options) {
              var schema = this.resolve(Object.assign({}, options, {
                value: value
              }));
              return new Promise(function (resolve, reject) {
                return schema._validate(value, options, function (error, parsed) {
                  if (ValidationError.isError(error)) error.value = parsed;
                  reject(error);
                }, function (errors, validated) {
                  if (errors.length) reject(new ValidationError(errors, validated));else resolve(validated);
                });
              });
            }
          }, {
            key: "validateSync",
            value: function validateSync(value, options) {
              var schema = this.resolve(Object.assign({}, options, {
                value: value
              }));
              var result;
              schema._validate(value, Object.assign({}, options, {
                sync: true
              }), function (error, parsed) {
                if (ValidationError.isError(error)) error.value = parsed;
                throw error;
              }, function (errors, validated) {
                if (errors.length) throw new ValidationError(errors, value);
                result = validated;
              });
              return result;
            }
          }, {
            key: "isValid",
            value: function isValid(value, options) {
              return this.validate(value, options).then(function () {
                return true;
              }, function (err) {
                if (ValidationError.isError(err)) return false;
                throw err;
              });
            }
          }, {
            key: "isValidSync",
            value: function isValidSync(value, options) {
              try {
                this.validateSync(value, options);
                return true;
              } catch (err) {
                if (ValidationError.isError(err)) return false;
                throw err;
              }
            }
          }, {
            key: "_getDefault",
            value: function _getDefault(options) {
              var defaultValue = this.spec.default;
              if (defaultValue == null) {
                return defaultValue;
              }
              return typeof defaultValue === 'function' ? defaultValue.call(this, options) : _clone(defaultValue);
            }
          }, {
            key: "getDefault",
            value: function getDefault(options
            // If schema is defaulted we know it's at least not undefined
            ) {
              var schema = this.resolve(options || {});
              return schema._getDefault(options);
            }
          }, {
            key: "default",
            value: function _default(def) {
              if (arguments.length === 0) {
                return this._getDefault();
              }
              var next = this.clone({
                default: def
              });
              return next;
            }
          }, {
            key: "strict",
            value: function strict() {
              var isStrict = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
              return this.clone({
                strict: isStrict
              });
            }
          }, {
            key: "nullability",
            value: function nullability(nullable, message) {
              var next = this.clone({
                nullable: nullable
              });
              next.internalTests.nullable = createValidation({
                message: message,
                name: 'nullable',
                test: function test(value) {
                  return value === null ? this.schema.spec.nullable : true;
                }
              });
              return next;
            }
          }, {
            key: "optionality",
            value: function optionality(optional, message) {
              var next = this.clone({
                optional: optional
              });
              next.internalTests.optionality = createValidation({
                message: message,
                name: 'optionality',
                test: function test(value) {
                  return value === undefined ? this.schema.spec.optional : true;
                }
              });
              return next;
            }
          }, {
            key: "optional",
            value: function optional() {
              return this.optionality(true);
            }
          }, {
            key: "defined",
            value: function defined() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : mixed.defined;
              return this.optionality(false, message);
            }
          }, {
            key: "nullable",
            value: function nullable() {
              return this.nullability(true);
            }
          }, {
            key: "nonNullable",
            value: function nonNullable() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : mixed.notNull;
              return this.nullability(false, message);
            }
          }, {
            key: "required",
            value: function required() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : mixed.required;
              return this.clone().withMutation(function (next) {
                return next.nonNullable(message).defined(message);
              });
            }
          }, {
            key: "notRequired",
            value: function notRequired() {
              return this.clone().withMutation(function (next) {
                return next.nullable().optional();
              });
            }
          }, {
            key: "transform",
            value: function transform(fn) {
              var next = this.clone();
              next.transforms.push(fn);
              return next;
            }

            /**
             * Adds a test function to the schema's queue of tests.
             * tests can be exclusive or non-exclusive.
             *
             * - exclusive tests, will replace any existing tests of the same name.
             * - non-exclusive: can be stacked
             *
             * If a non-exclusive test is added to a schema with an exclusive test of the same name
             * the exclusive test is removed and further tests of the same name will be stacked.
             *
             * If an exclusive test is added to a schema with non-exclusive tests of the same name
             * the previous tests are removed and further tests of the same name will replace each other.
             */
          }, {
            key: "test",
            value: function test() {
              var opts;
              if (arguments.length === 1) {
                if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'function') {
                  opts = {
                    test: arguments.length <= 0 ? undefined : arguments[0]
                  };
                } else {
                  opts = arguments.length <= 0 ? undefined : arguments[0];
                }
              } else if (arguments.length === 2) {
                opts = {
                  name: arguments.length <= 0 ? undefined : arguments[0],
                  test: arguments.length <= 1 ? undefined : arguments[1]
                };
              } else {
                opts = {
                  name: arguments.length <= 0 ? undefined : arguments[0],
                  message: arguments.length <= 1 ? undefined : arguments[1],
                  test: arguments.length <= 2 ? undefined : arguments[2]
                };
              }
              if (opts.message === undefined) opts.message = mixed.default;
              if (typeof opts.test !== 'function') throw new TypeError('`test` is a required parameters');
              var next = this.clone();
              var validate = createValidation(opts);
              var isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
              if (opts.exclusive) {
                if (!opts.name) throw new TypeError('Exclusive tests must provide a unique `name` identifying the test');
              }
              if (opts.name) next.exclusiveTests[opts.name] = !!opts.exclusive;
              next.tests = next.tests.filter(function (fn) {
                if (fn.OPTIONS.name === opts.name) {
                  if (isExclusive) return false;
                  if (fn.OPTIONS.test === validate.OPTIONS.test) return false;
                }
                return true;
              });
              next.tests.push(validate);
              return next;
            }
          }, {
            key: "when",
            value: function when(keys, options) {
              if (!Array.isArray(keys) && typeof keys !== 'string') {
                options = keys;
                keys = '.';
              }
              var next = this.clone();
              var deps = toArray(keys).map(function (key) {
                return new Reference(key);
              });
              deps.forEach(function (dep) {
                // @ts-ignore readonly array
                if (dep.isSibling) next.deps.push(dep.key);
              });
              next.conditions.push(typeof options === 'function' ? new Condition(deps, options) : Condition.fromOptions(deps, options));
              return next;
            }
          }, {
            key: "typeError",
            value: function typeError(message) {
              var next = this.clone();
              next.internalTests.typeError = createValidation({
                message: message,
                name: 'typeError',
                skipAbsent: true,
                test: function test(value) {
                  if (!this.schema._typeCheck(value)) return this.createError({
                    params: {
                      type: this.schema.type
                    }
                  });
                  return true;
                }
              });
              return next;
            }
          }, {
            key: "oneOf",
            value: function oneOf(enums) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mixed.oneOf;
              var next = this.clone();
              enums.forEach(function (val) {
                next._whitelist.add(val);
                next._blacklist.delete(val);
              });
              next.internalTests.whiteList = createValidation({
                message: message,
                name: 'oneOf',
                skipAbsent: true,
                test: function test(value) {
                  var valids = this.schema._whitelist;
                  var resolved = valids.resolveAll(this.resolve);
                  return resolved.includes(value) ? true : this.createError({
                    params: {
                      values: Array.from(valids).join(', '),
                      resolved: resolved
                    }
                  });
                }
              });
              return next;
            }
          }, {
            key: "notOneOf",
            value: function notOneOf(enums) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : mixed.notOneOf;
              var next = this.clone();
              enums.forEach(function (val) {
                next._blacklist.add(val);
                next._whitelist.delete(val);
              });
              next.internalTests.blacklist = createValidation({
                message: message,
                name: 'notOneOf',
                test: function test(value) {
                  var invalids = this.schema._blacklist;
                  var resolved = invalids.resolveAll(this.resolve);
                  if (resolved.includes(value)) return this.createError({
                    params: {
                      values: Array.from(invalids).join(', '),
                      resolved: resolved
                    }
                  });
                  return true;
                }
              });
              return next;
            }
          }, {
            key: "strip",
            value: function strip() {
              var _strip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
              var next = this.clone();
              next.spec.strip = _strip;
              return next;
            }

            /**
             * Return a serialized description of the schema including validations, flags, types etc.
             *
             * @param options Provide any needed context for resolving runtime schema alterations (lazy, when conditions, etc).
             */
          }, {
            key: "describe",
            value: function describe(options) {
              var next = (options ? this.resolve(options) : this).clone();
              var _next$spec = next.spec,
                label = _next$spec.label,
                meta = _next$spec.meta,
                optional = _next$spec.optional,
                nullable = _next$spec.nullable;
              var description = {
                meta: meta,
                label: label,
                optional: optional,
                nullable: nullable,
                default: next.getDefault(options),
                type: next.type,
                oneOf: next._whitelist.describe(),
                notOneOf: next._blacklist.describe(),
                tests: next.tests.map(function (fn) {
                  return {
                    name: fn.OPTIONS.name,
                    params: fn.OPTIONS.params
                  };
                }).filter(function (n, idx, list) {
                  return list.findIndex(function (c) {
                    return c.name === n.name;
                  }) === idx;
                })
              };
              return description;
            }
          }]);
          return Schema;
        }(); // @ts-expect-error
        Schema.prototype.__isYupSchema__ = true;
        var _loop = function _loop() {
          var method = _arr2[_i6];
          Schema.prototype["".concat(method, "At")] = function (path, value) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var _getIn = getIn(this, path, value, options.context),
              parent = _getIn.parent,
              parentPath = _getIn.parentPath,
              schema = _getIn.schema;
            return schema[method](parent && parent[parentPath], Object.assign({}, options, {
              parent: parent,
              path: path
            }));
          };
        };
        for (var _i6 = 0, _arr2 = ['validate', 'validateSync']; _i6 < _arr2.length; _i6++) {
          _loop();
        }
        for (var _i7 = 0, _arr3 = ['equals', 'is']; _i7 < _arr3.length; _i7++) {
          var alias = _arr3[_i7];
          Schema.prototype[alias] = Schema.prototype.oneOf;
        }
        for (var _i8 = 0, _arr4 = ['not', 'nope']; _i8 < _arr4.length; _i8++) {
          var _alias = _arr4[_i8];
          Schema.prototype[_alias] = Schema.prototype.notOneOf;
        }
        var returnsTrue = function returnsTrue() {
          return true;
        };
        function create$8(spec) {
          return new MixedSchema(spec);
        }
        var MixedSchema = /*#__PURE__*/function (_Schema) {
          _inherits(MixedSchema, _Schema);
          var _super15 = _createSuper(MixedSchema);
          function MixedSchema(spec) {
            _classCallCheck(this, MixedSchema);
            return _super15.call(this, typeof spec === 'function' ? {
              type: 'mixed',
              check: spec
            } : Object.assign({
              type: 'mixed',
              check: returnsTrue
            }, spec));
          }
          return _createClass(MixedSchema);
        }(Schema);
        create$8.prototype = MixedSchema.prototype;
        function create$7() {
          return new BooleanSchema();
        }
        var BooleanSchema = /*#__PURE__*/function (_Schema2) {
          _inherits(BooleanSchema, _Schema2);
          var _super16 = _createSuper(BooleanSchema);
          function BooleanSchema() {
            var _this36;
            _classCallCheck(this, BooleanSchema);
            _this36 = _super16.call(this, {
              type: 'boolean',
              check: function check(v) {
                if (v instanceof Boolean) v = v.valueOf();
                return typeof v === 'boolean';
              }
            });
            _this36.withMutation(function () {
              _this36.transform(function (value, _raw, ctx) {
                if (ctx.spec.coerce && !ctx.isType(value)) {
                  if (/^(true|1)$/i.test(String(value))) return true;
                  if (/^(false|0)$/i.test(String(value))) return false;
                }
                return value;
              });
            });
            return _this36;
          }
          _createClass(BooleanSchema, [{
            key: "isTrue",
            value: function isTrue() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : boolean.isValue;
              return this.test({
                message: message,
                name: 'is-value',
                exclusive: true,
                params: {
                  value: 'true'
                },
                test: function test(value) {
                  return isAbsent(value) || value === true;
                }
              });
            }
          }, {
            key: "isFalse",
            value: function isFalse() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : boolean.isValue;
              return this.test({
                message: message,
                name: 'is-value',
                exclusive: true,
                params: {
                  value: 'false'
                },
                test: function test(value) {
                  return isAbsent(value) || value === false;
                }
              });
            }
          }, {
            key: "default",
            value: function _default(def) {
              return _get(_getPrototypeOf(BooleanSchema.prototype), "default", this).call(this, def);
            }
          }, {
            key: "defined",
            value: function defined(msg) {
              return _get(_getPrototypeOf(BooleanSchema.prototype), "defined", this).call(this, msg);
            }
          }, {
            key: "optional",
            value: function optional() {
              return _get(_getPrototypeOf(BooleanSchema.prototype), "optional", this).call(this);
            }
          }, {
            key: "required",
            value: function required(msg) {
              return _get(_getPrototypeOf(BooleanSchema.prototype), "required", this).call(this, msg);
            }
          }, {
            key: "notRequired",
            value: function notRequired() {
              return _get(_getPrototypeOf(BooleanSchema.prototype), "notRequired", this).call(this);
            }
          }, {
            key: "nullable",
            value: function nullable() {
              return _get(_getPrototypeOf(BooleanSchema.prototype), "nullable", this).call(this);
            }
          }, {
            key: "nonNullable",
            value: function nonNullable(msg) {
              return _get(_getPrototypeOf(BooleanSchema.prototype), "nonNullable", this).call(this, msg);
            }
          }, {
            key: "strip",
            value: function strip(v) {
              return _get(_getPrototypeOf(BooleanSchema.prototype), "strip", this).call(this, v);
            }
          }]);
          return BooleanSchema;
        }(Schema);
        create$7.prototype = BooleanSchema.prototype;

        // Taken from HTML spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address
        var rEmail =
        // eslint-disable-next-line
        /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
        var rUrl =
        // eslint-disable-next-line
        /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;

        // eslint-disable-next-line
        var rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
        var isTrimmed = function isTrimmed(value) {
          return isAbsent(value) || value === value.trim();
        };
        var objStringTag = {}.toString();
        function create$6() {
          return new StringSchema();
        }
        var StringSchema = /*#__PURE__*/function (_Schema3) {
          _inherits(StringSchema, _Schema3);
          var _super17 = _createSuper(StringSchema);
          function StringSchema() {
            var _this37;
            _classCallCheck(this, StringSchema);
            _this37 = _super17.call(this, {
              type: 'string',
              check: function check(value) {
                if (value instanceof String) value = value.valueOf();
                return typeof value === 'string';
              }
            });
            _this37.withMutation(function () {
              _this37.transform(function (value, _raw, ctx) {
                if (!ctx.spec.coerce || ctx.isType(value)) return value;

                // don't ever convert arrays
                if (Array.isArray(value)) return value;
                var strValue = value != null && value.toString ? value.toString() : value;

                // no one wants plain objects converted to [Object object]
                if (strValue === objStringTag) return value;
                return strValue;
              });
            });
            return _this37;
          }
          _createClass(StringSchema, [{
            key: "required",
            value: function required(message) {
              return _get(_getPrototypeOf(StringSchema.prototype), "required", this).call(this, message).withMutation(function (schema) {
                return schema.test({
                  message: message || mixed.required,
                  name: 'required',
                  skipAbsent: true,
                  test: function test(value) {
                    return !!value.length;
                  }
                });
              });
            }
          }, {
            key: "notRequired",
            value: function notRequired() {
              return _get(_getPrototypeOf(StringSchema.prototype), "notRequired", this).call(this).withMutation(function (schema) {
                schema.tests = schema.tests.filter(function (t) {
                  return t.OPTIONS.name !== 'required';
                });
                return schema;
              });
            }
          }, {
            key: "length",
            value: function length(_length2) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : string.length;
              return this.test({
                message: message,
                name: 'length',
                exclusive: true,
                params: {
                  length: _length2
                },
                skipAbsent: true,
                test: function test(value) {
                  return value.length === this.resolve(_length2);
                }
              });
            }
          }, {
            key: "min",
            value: function min(_min) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : string.min;
              return this.test({
                message: message,
                name: 'min',
                exclusive: true,
                params: {
                  min: _min
                },
                skipAbsent: true,
                test: function test(value) {
                  return value.length >= this.resolve(_min);
                }
              });
            }
          }, {
            key: "max",
            value: function max(_max) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : string.max;
              return this.test({
                name: 'max',
                exclusive: true,
                message: message,
                params: {
                  max: _max
                },
                skipAbsent: true,
                test: function test(value) {
                  return value.length <= this.resolve(_max);
                }
              });
            }
          }, {
            key: "matches",
            value: function matches(regex, options) {
              var excludeEmptyString = false;
              var message;
              var name;
              if (options) {
                if (_typeof2(options) === 'object') {
                  var _options$excludeEmpty = options.excludeEmptyString;
                  excludeEmptyString = _options$excludeEmpty === void 0 ? false : _options$excludeEmpty;
                  message = options.message;
                  name = options.name;
                } else {
                  message = options;
                }
              }
              return this.test({
                name: name || 'matches',
                message: message || string.matches,
                params: {
                  regex: regex
                },
                skipAbsent: true,
                test: function test(value) {
                  return value === '' && excludeEmptyString || value.search(regex) !== -1;
                }
              });
            }
          }, {
            key: "email",
            value: function email() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : string.email;
              return this.matches(rEmail, {
                name: 'email',
                message: message,
                excludeEmptyString: true
              });
            }
          }, {
            key: "url",
            value: function url() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : string.url;
              return this.matches(rUrl, {
                name: 'url',
                message: message,
                excludeEmptyString: true
              });
            }
          }, {
            key: "uuid",
            value: function uuid() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : string.uuid;
              return this.matches(rUUID, {
                name: 'uuid',
                message: message,
                excludeEmptyString: false
              });
            }

            //-- transforms --
          }, {
            key: "ensure",
            value: function ensure() {
              return this.default('').transform(function (val) {
                return val === null ? '' : val;
              });
            }
          }, {
            key: "trim",
            value: function trim() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : string.trim;
              return this.transform(function (val) {
                return val != null ? val.trim() : val;
              }).test({
                message: message,
                name: 'trim',
                test: isTrimmed
              });
            }
          }, {
            key: "lowercase",
            value: function lowercase() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : string.lowercase;
              return this.transform(function (value) {
                return !isAbsent(value) ? value.toLowerCase() : value;
              }).test({
                message: message,
                name: 'string_case',
                exclusive: true,
                skipAbsent: true,
                test: function test(value) {
                  return isAbsent(value) || value === value.toLowerCase();
                }
              });
            }
          }, {
            key: "uppercase",
            value: function uppercase() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : string.uppercase;
              return this.transform(function (value) {
                return !isAbsent(value) ? value.toUpperCase() : value;
              }).test({
                message: message,
                name: 'string_case',
                exclusive: true,
                skipAbsent: true,
                test: function test(value) {
                  return isAbsent(value) || value === value.toUpperCase();
                }
              });
            }
          }]);
          return StringSchema;
        }(Schema);
        create$6.prototype = StringSchema.prototype;

        //
        // String Interfaces
        //

        var isNaN$1 = function isNaN$1(value) {
          return value != +value;
        };
        function create$5() {
          return new NumberSchema();
        }
        var NumberSchema = /*#__PURE__*/function (_Schema4) {
          _inherits(NumberSchema, _Schema4);
          var _super18 = _createSuper(NumberSchema);
          function NumberSchema() {
            var _this38;
            _classCallCheck(this, NumberSchema);
            _this38 = _super18.call(this, {
              type: 'number',
              check: function check(value) {
                if (value instanceof Number) value = value.valueOf();
                return typeof value === 'number' && !isNaN$1(value);
              }
            });
            _this38.withMutation(function () {
              _this38.transform(function (value, _raw, ctx) {
                if (!ctx.spec.coerce) return value;
                var parsed = value;
                if (typeof parsed === 'string') {
                  parsed = parsed.replace(/\s/g, '');
                  if (parsed === '') return NaN;
                  // don't use parseFloat to avoid positives on alpha-numeric strings
                  parsed = +parsed;
                }

                // null -> NaN isn't useful; treat all nulls as null and let it fail on
                // nullability check vs TypeErrors
                if (ctx.isType(parsed) || parsed === null) return parsed;
                return parseFloat(parsed);
              });
            });
            return _this38;
          }
          _createClass(NumberSchema, [{
            key: "min",
            value: function min(_min2) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : number.min;
              return this.test({
                message: message,
                name: 'min',
                exclusive: true,
                params: {
                  min: _min2
                },
                skipAbsent: true,
                test: function test(value) {
                  return value >= this.resolve(_min2);
                }
              });
            }
          }, {
            key: "max",
            value: function max(_max2) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : number.max;
              return this.test({
                message: message,
                name: 'max',
                exclusive: true,
                params: {
                  max: _max2
                },
                skipAbsent: true,
                test: function test(value) {
                  return value <= this.resolve(_max2);
                }
              });
            }
          }, {
            key: "lessThan",
            value: function lessThan(less) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : number.lessThan;
              return this.test({
                message: message,
                name: 'max',
                exclusive: true,
                params: {
                  less: less
                },
                skipAbsent: true,
                test: function test(value) {
                  return value < this.resolve(less);
                }
              });
            }
          }, {
            key: "moreThan",
            value: function moreThan(more) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : number.moreThan;
              return this.test({
                message: message,
                name: 'min',
                exclusive: true,
                params: {
                  more: more
                },
                skipAbsent: true,
                test: function test(value) {
                  return value > this.resolve(more);
                }
              });
            }
          }, {
            key: "positive",
            value: function positive() {
              var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : number.positive;
              return this.moreThan(0, msg);
            }
          }, {
            key: "negative",
            value: function negative() {
              var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : number.negative;
              return this.lessThan(0, msg);
            }
          }, {
            key: "integer",
            value: function integer() {
              var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : number.integer;
              return this.test({
                name: 'integer',
                message: message,
                skipAbsent: true,
                test: function test(val) {
                  return Number.isInteger(val);
                }
              });
            }
          }, {
            key: "truncate",
            value: function truncate() {
              return this.transform(function (value) {
                return !isAbsent(value) ? value | 0 : value;
              });
            }
          }, {
            key: "round",
            value: function round(method) {
              var _method;
              var avail = ['ceil', 'floor', 'round', 'trunc'];
              method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || 'round';

              // this exists for symemtry with the new Math.trunc
              if (method === 'trunc') return this.truncate();
              if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));
              return this.transform(function (value) {
                return !isAbsent(value) ? Math[method](value) : value;
              });
            }
          }]);
          return NumberSchema;
        }(Schema);
        create$5.prototype = NumberSchema.prototype;

        //
        // Number Interfaces
        //

        /* eslint-disable */
        /**
         *
         * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
         * NON-CONFORMANT EDITION.
         * © 2011 Colin Snover <http://zetafleet.com>
         * Released under MIT license.
         */

        //              1 YYYY                 2 MM        3 DD              4 HH     5 mm        6 ss            7 msec         8 Z 9 ±    10 tzHH    11 tzmm
        var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
        function parseIsoDate(date) {
          var numericKeys = [1, 4, 5, 6, 7, 10, 11],
            minutesOffset = 0,
            timestamp,
            struct;
          if (struct = isoReg.exec(date)) {
            // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
            for (var i = 0, k; k = numericKeys[i]; ++i) struct[k] = +struct[k] || 0;

            // allow undefined days and months
            struct[2] = (+struct[2] || 1) - 1;
            struct[3] = +struct[3] || 1;

            // allow arbitrary sub-second precision beyond milliseconds
            struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0;

            // timestamps without timezone identifiers should be considered local time
            if ((struct[8] === undefined || struct[8] === '') && (struct[9] === undefined || struct[9] === '')) timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);else {
              if (struct[8] !== 'Z' && struct[9] !== undefined) {
                minutesOffset = struct[10] * 60 + struct[11];
                if (struct[9] === '+') minutesOffset = 0 - minutesOffset;
              }
              timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
            }
          } else timestamp = Date.parse ? Date.parse(date) : NaN;
          return timestamp;
        }

        // @ts-ignore
        var invalidDate = new Date('');
        var isDate$1 = function isDate$1(obj) {
          return Object.prototype.toString.call(obj) === '[object Date]';
        };
        var DateSchema = /*#__PURE__*/function (_Schema5) {
          _inherits(DateSchema, _Schema5);
          var _super19 = _createSuper(DateSchema);
          function DateSchema() {
            var _this39;
            _classCallCheck(this, DateSchema);
            _this39 = _super19.call(this, {
              type: 'date',
              check: function check(v) {
                return isDate$1(v) && !isNaN(v.getTime());
              }
            });
            _this39.withMutation(function () {
              _this39.transform(function (value, _raw, ctx) {
                // null -> InvalidDate isn't useful; treat all nulls as null and let it fail on
                // nullability check vs TypeErrors
                if (!ctx.spec.coerce || ctx.isType(value) || value === null) return value;
                value = parseIsoDate(value);

                // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.
                return !isNaN(value) ? new Date(value) : DateSchema.INVALID_DATE;
              });
            });
            return _this39;
          }
          _createClass(DateSchema, [{
            key: "prepareParam",
            value: function prepareParam(ref, name) {
              var param;
              if (!Reference.isRef(ref)) {
                var cast = this.cast(ref);
                if (!this._typeCheck(cast)) throw new TypeError("`".concat(name, "` must be a Date or a value that can be `cast()` to a Date"));
                param = cast;
              } else {
                param = ref;
              }
              return param;
            }
          }, {
            key: "min",
            value: function min(_min3) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : date.min;
              var limit = this.prepareParam(_min3, 'min');
              return this.test({
                message: message,
                name: 'min',
                exclusive: true,
                params: {
                  min: _min3
                },
                skipAbsent: true,
                test: function test(value) {
                  return value >= this.resolve(limit);
                }
              });
            }
          }, {
            key: "max",
            value: function max(_max3) {
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : date.max;
              var limit = this.prepareParam(_max3, 'max');
              return this.test({
                message: message,
                name: 'max',
                exclusive: true,
                params: {
                  max: _max3
                },
                skipAbsent: true,
                test: function test(value) {
                  return value <= this.resolve(limit);
                }
              });
            }
          }]);
          return DateSchema;
        }(Schema);
        DateSchema.INVALID_DATE = invalidDate;
        DateSchema.prototype;

        // @ts-expect-error
        function sortFields(fields) {
          var excludedEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var edges = [];
          var nodes = new Set();
          var excludes = new Set(excludedEdges.map(function (_ref55) {
            var _ref56 = _slicedToArray2(_ref55, 2),
              a = _ref56[0],
              b = _ref56[1];
            return "".concat(a, "-").concat(b);
          }));
          function addNode(depPath, key) {
            var node = propertyExpr.split(depPath)[0];
            nodes.add(node);
            if (!excludes.has("".concat(key, "-").concat(node))) edges.push([key, node]);
          }
          var _loop2 = function _loop2() {
            var key = _Object$keys3[_i9];
            var value = fields[key];
            nodes.add(key);
            if (Reference.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(function (path) {
              return addNode(path, key);
            });
          };
          for (var _i9 = 0, _Object$keys3 = Object.keys(fields); _i9 < _Object$keys3.length; _i9++) {
            _loop2();
          }
          return toposort$1.array(Array.from(nodes), edges).reverse();
        }
        function findIndex$1(arr, err) {
          var idx = Infinity;
          arr.some(function (key, ii) {
            var _err$path;
            if ((_err$path = err.path) != null && _err$path.includes(key)) {
              idx = ii;
              return true;
            }
          });
          return idx;
        }
        function sortByKeyOrder(keys) {
          return function (a, b) {
            return findIndex$1(keys, a) - findIndex$1(keys, b);
          };
        }
        var parseJson = function parseJson(value, _, ctx) {
          if (typeof value !== 'string') {
            return value;
          }
          var parsed = value;
          try {
            parsed = JSON.parse(value);
          } catch (err) {
            /* */
          }
          return ctx.isType(parsed) ? parsed : value;
        };

        // @ts-ignore
        function _deepPartial(schema) {
          if ('fields' in schema) {
            var partial = {};
            for (var _i10 = 0, _Object$entries2 = Object.entries(schema.fields); _i10 < _Object$entries2.length; _i10++) {
              var _Object$entries2$_i = _slicedToArray2(_Object$entries2[_i10], 2),
                key = _Object$entries2$_i[0],
                fieldSchema = _Object$entries2$_i[1];
              partial[key] = _deepPartial(fieldSchema);
            }
            return schema.setFields(partial);
          }
          if (schema.type === 'array') {
            var nextArray = schema.optional();
            if (nextArray.innerType) nextArray.innerType = _deepPartial(nextArray.innerType);
            return nextArray;
          }
          if (schema.type === 'tuple') {
            return schema.optional().clone({
              types: schema.spec.types.map(_deepPartial)
            });
          }
          if ('optional' in schema) {
            return schema.optional();
          }
          return schema;
        }
        var deepHas = function deepHas(obj, p) {
          var path = _toConsumableArray(propertyExpr.normalizePath(p));
          if (path.length === 1) return path[0] in obj;
          var last = path.pop();
          var parent = propertyExpr.getter(propertyExpr.join(path), true)(obj);
          return !!(parent && last in parent);
        };
        var isObject = function isObject(obj) {
          return Object.prototype.toString.call(obj) === '[object Object]';
        };
        function unknown(ctx, value) {
          var known = Object.keys(ctx.fields);
          return Object.keys(value).filter(function (key) {
            return known.indexOf(key) === -1;
          });
        }
        var defaultSort = sortByKeyOrder([]);
        function create$3(spec) {
          return new ObjectSchema(spec);
        }
        var ObjectSchema = /*#__PURE__*/function (_Schema6) {
          _inherits(ObjectSchema, _Schema6);
          var _super20 = _createSuper(ObjectSchema);
          function ObjectSchema(spec) {
            var _this40;
            _classCallCheck(this, ObjectSchema);
            _this40 = _super20.call(this, {
              type: 'object',
              check: function check(value) {
                return isObject(value) || typeof value === 'function';
              }
            });
            _this40.fields = Object.create(null);
            _this40._sortErrors = defaultSort;
            _this40._nodes = [];
            _this40._excludedEdges = [];
            _this40.withMutation(function () {
              if (spec) {
                _this40.shape(spec);
              }
            });
            return _this40;
          }
          _createClass(ObjectSchema, [{
            key: "_cast",
            value: function _cast(_value) {
              var _this41 = this;
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              var _options$stripUnknown;
              var value = _get(_getPrototypeOf(ObjectSchema.prototype), "_cast", this).call(this, _value, options);

              //should ignore nulls here
              if (value === undefined) return this.getDefault(options);
              if (!this._typeCheck(value)) return value;
              var fields = this.fields;
              var strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
              var props = [].concat(this._nodes, Object.keys(value).filter(function (v) {
                return !_this41._nodes.includes(v);
              }));
              var intermediateValue = {}; // is filled during the transform below
              var innerOptions = Object.assign({}, options, {
                parent: intermediateValue,
                __validating: options.__validating || false
              });
              var isChanged = false;
              var _iterator19 = _createForOfIteratorHelper(props),
                _step18;
              try {
                for (_iterator19.s(); !(_step18 = _iterator19.n()).done;) {
                  var prop = _step18.value;
                  var field = fields[prop];
                  var exists = (prop in value);
                  if (field) {
                    var fieldValue = void 0;
                    var inputValue = value[prop];

                    // safe to mutate since this is fired in sequence
                    innerOptions.path = (options.path ? "".concat(options.path, ".") : '') + prop;
                    field = field.resolve({
                      value: inputValue,
                      context: options.context,
                      parent: intermediateValue
                    });
                    var fieldSpec = field instanceof Schema ? field.spec : undefined;
                    var strict = fieldSpec == null ? void 0 : fieldSpec.strict;
                    if (fieldSpec != null && fieldSpec.strip) {
                      isChanged = isChanged || prop in value;
                      continue;
                    }
                    fieldValue = !options.__validating || !strict ?
                    // TODO: use _cast, this is double resolving
                    field.cast(value[prop], innerOptions) : value[prop];
                    if (fieldValue !== undefined) {
                      intermediateValue[prop] = fieldValue;
                    }
                  } else if (exists && !strip) {
                    intermediateValue[prop] = value[prop];
                  }
                  if (exists !== prop in intermediateValue || intermediateValue[prop] !== value[prop]) {
                    isChanged = true;
                  }
                }
              } catch (err) {
                _iterator19.e(err);
              } finally {
                _iterator19.f();
              }
              return isChanged ? intermediateValue : value;
            }
          }, {
            key: "_validate",
            value: function _validate(_value) {
              var _this42 = this;
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              var panic = arguments.length > 2 ? arguments[2] : undefined;
              var next = arguments.length > 3 ? arguments[3] : undefined;
              var _options$from = options.from,
                from = _options$from === void 0 ? [] : _options$from,
                _options$originalValu2 = options.originalValue,
                originalValue = _options$originalValu2 === void 0 ? _value : _options$originalValu2,
                _options$recursive2 = options.recursive,
                recursive = _options$recursive2 === void 0 ? this.spec.recursive : _options$recursive2;
              options.from = [{
                schema: this,
                value: originalValue
              }].concat(_toConsumableArray(from));
              // this flag is needed for handling `strict` correctly in the context of
              // validation vs just casting. e.g strict() on a field is only used when validating
              options.__validating = true;
              options.originalValue = originalValue;
              _get(_getPrototypeOf(ObjectSchema.prototype), "_validate", this).call(this, _value, options, panic, function (objectErrors, value) {
                if (!recursive || !isObject(value)) {
                  next(objectErrors, value);
                  return;
                }
                originalValue = originalValue || value;
                var tests = [];
                var _iterator20 = _createForOfIteratorHelper(_this42._nodes),
                  _step19;
                try {
                  for (_iterator20.s(); !(_step19 = _iterator20.n()).done;) {
                    var key = _step19.value;
                    var field = _this42.fields[key];
                    if (!field || Reference.isRef(field)) {
                      continue;
                    }
                    tests.push(field.asNestedTest({
                      options: options,
                      key: key,
                      parent: value,
                      parentPath: options.path,
                      originalParent: originalValue
                    }));
                  }
                } catch (err) {
                  _iterator20.e(err);
                } finally {
                  _iterator20.f();
                }
                _this42.runTests({
                  tests: tests,
                  value: value,
                  originalValue: originalValue,
                  options: options
                }, panic, function (fieldErrors) {
                  next(fieldErrors.sort(_this42._sortErrors).concat(objectErrors), value);
                });
              });
            }
          }, {
            key: "clone",
            value: function clone(spec) {
              var next = _get(_getPrototypeOf(ObjectSchema.prototype), "clone", this).call(this, spec);
              next.fields = Object.assign({}, this.fields);
              next._nodes = this._nodes;
              next._excludedEdges = this._excludedEdges;
              next._sortErrors = this._sortErrors;
              return next;
            }
          }, {
            key: "concat",
            value: function concat(schema) {
              var _this43 = this;
              var next = _get(_getPrototypeOf(ObjectSchema.prototype), "concat", this).call(this, schema);
              var nextFields = next.fields;
              for (var _i11 = 0, _Object$entries3 = Object.entries(this.fields); _i11 < _Object$entries3.length; _i11++) {
                var _Object$entries3$_i = _slicedToArray2(_Object$entries3[_i11], 2),
                  field = _Object$entries3$_i[0],
                  schemaOrRef = _Object$entries3$_i[1];
                var target = nextFields[field];
                nextFields[field] = target === undefined ? schemaOrRef : target;
              }
              return next.withMutation(function (s) {
                return (
                  // XXX: excludes here is wrong
                  s.setFields(nextFields, [].concat(_toConsumableArray(_this43._excludedEdges), _toConsumableArray(schema._excludedEdges)))
                );
              });
            }
          }, {
            key: "_getDefault",
            value: function _getDefault(options) {
              var _this44 = this;
              if ('default' in this.spec) {
                return _get(_getPrototypeOf(ObjectSchema.prototype), "_getDefault", this).call(this, options);
              }

              // if there is no default set invent one
              if (!this._nodes.length) {
                return undefined;
              }
              var dft = {};
              this._nodes.forEach(function (key) {
                var _innerOptions;
                var field = _this44.fields[key];
                var innerOptions = options;
                if ((_innerOptions = innerOptions) != null && _innerOptions.value) {
                  innerOptions = Object.assign({}, innerOptions, {
                    parent: innerOptions.value,
                    value: innerOptions.value[key]
                  });
                }
                dft[key] = field && 'getDefault' in field ? field.getDefault(innerOptions) : undefined;
              });
              return dft;
            }
          }, {
            key: "setFields",
            value: function setFields(shape, excludedEdges) {
              var next = this.clone();
              next.fields = shape;
              next._nodes = sortFields(shape, excludedEdges);
              next._sortErrors = sortByKeyOrder(Object.keys(shape));
              // XXX: this carries over edges which may not be what you want
              if (excludedEdges) next._excludedEdges = excludedEdges;
              return next;
            }
          }, {
            key: "shape",
            value: function shape(additions) {
              var excludes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
              return this.clone().withMutation(function (next) {
                var edges = next._excludedEdges;
                if (excludes.length) {
                  if (!Array.isArray(excludes[0])) excludes = [excludes];
                  edges = [].concat(_toConsumableArray(next._excludedEdges), _toConsumableArray(excludes));
                }

                // XXX: excludes here is wrong
                return next.setFields(Object.assign(next.fields, additions), edges);
              });
            }
          }, {
            key: "partial",
            value: function partial() {
              var partial = {};
              for (var _i12 = 0, _Object$entries4 = Object.entries(this.fields); _i12 < _Object$entries4.length; _i12++) {
                var _Object$entries4$_i = _slicedToArray2(_Object$entries4[_i12], 2),
                  key = _Object$entries4$_i[0],
                  schema = _Object$entries4$_i[1];
                partial[key] = 'optional' in schema && schema.optional instanceof Function ? schema.optional() : schema;
              }
              return this.setFields(partial);
            }
          }, {
            key: "deepPartial",
            value: function deepPartial() {
              var next = _deepPartial(this);
              return next;
            }
          }, {
            key: "pick",
            value: function pick(keys) {
              var picked = {};
              var _iterator21 = _createForOfIteratorHelper(keys),
                _step20;
              try {
                for (_iterator21.s(); !(_step20 = _iterator21.n()).done;) {
                  var key = _step20.value;
                  if (this.fields[key]) picked[key] = this.fields[key];
                }
              } catch (err) {
                _iterator21.e(err);
              } finally {
                _iterator21.f();
              }
              return this.setFields(picked);
            }
          }, {
            key: "omit",
            value: function omit(keys) {
              var fields = Object.assign({}, this.fields);
              var _iterator22 = _createForOfIteratorHelper(keys),
                _step21;
              try {
                for (_iterator22.s(); !(_step21 = _iterator22.n()).done;) {
                  var key = _step21.value;
                  delete fields[key];
                }
              } catch (err) {
                _iterator22.e(err);
              } finally {
                _iterator22.f();
              }
              return this.setFields(fields);
            }
          }, {
            key: "from",
            value: function from(_from, to, alias) {
              var fromGetter = propertyExpr.getter(_from, true);
              return this.transform(function (obj) {
                if (!obj) return obj;
                var newObj = obj;
                if (deepHas(obj, _from)) {
                  newObj = Object.assign({}, obj);
                  if (!alias) delete newObj[_from];
                  newObj[to] = fromGetter(obj);
                }
                return newObj;
              });
            }

            /** Parse an input JSON string to an object */
          }, {
            key: "json",
            value: function json() {
              return this.transform(parseJson);
            }
          }, {
            key: "noUnknown",
            value: function noUnknown() {
              var noAllow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : object.noUnknown;
              if (typeof noAllow !== 'boolean') {
                message = noAllow;
                noAllow = true;
              }
              var next = this.test({
                name: 'noUnknown',
                exclusive: true,
                message: message,
                test: function test(value) {
                  if (value == null) return true;
                  var unknownKeys = unknown(this.schema, value);
                  return !noAllow || unknownKeys.length === 0 || this.createError({
                    params: {
                      unknown: unknownKeys.join(', ')
                    }
                  });
                }
              });
              next.spec.noUnknown = noAllow;
              return next;
            }
          }, {
            key: "unknown",
            value: function unknown() {
              var allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
              var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : object.noUnknown;
              return this.noUnknown(!allow, message);
            }
          }, {
            key: "transformKeys",
            value: function transformKeys(fn) {
              return this.transform(function (obj) {
                if (!obj) return obj;
                var result = {};
                for (var _i13 = 0, _Object$keys4 = Object.keys(obj); _i13 < _Object$keys4.length; _i13++) {
                  var key = _Object$keys4[_i13];
                  result[fn(key)] = obj[key];
                }
                return result;
              });
            }
          }, {
            key: "camelCase",
            value: function camelCase() {
              return this.transformKeys(tinyCase.camelCase);
            }
          }, {
            key: "snakeCase",
            value: function snakeCase() {
              return this.transformKeys(tinyCase.snakeCase);
            }
          }, {
            key: "constantCase",
            value: function constantCase() {
              return this.transformKeys(function (key) {
                return tinyCase.snakeCase(key).toUpperCase();
              });
            }
          }, {
            key: "describe",
            value: function describe(options) {
              var base = _get(_getPrototypeOf(ObjectSchema.prototype), "describe", this).call(this, options);
              base.fields = {};
              for (var _i14 = 0, _Object$entries5 = Object.entries(this.fields); _i14 < _Object$entries5.length; _i14++) {
                var _Object$entries5$_i = _slicedToArray2(_Object$entries5[_i14], 2),
                  key = _Object$entries5$_i[0],
                  value = _Object$entries5$_i[1];
                var _innerOptions2;
                var innerOptions = options;
                if ((_innerOptions2 = innerOptions) != null && _innerOptions2.value) {
                  innerOptions = Object.assign({}, innerOptions, {
                    parent: innerOptions.value,
                    value: innerOptions.value[key]
                  });
                }
                base.fields[key] = value.describe(innerOptions);
              }
              return base;
            }
          }]);
          return ObjectSchema;
        }(Schema);
        create$3.prototype = ObjectSchema.prototype;
        var PERMISSIONS = {
          CAN_VIEW_VIEWSEEDPHRASE: "view_seed_phrase",
          CAN_VIEW_ENTERSEEDPHRASE: "view_enter_seed_phrase",
          CAN_VIEW_IMPORTSEEDPHRASE: "view_import_seed_phrase",
          CAN_VIEW_WIPETHISNODE: "view_wipe_this_node",
          CAN_VIEW_RESYNCING: "view_resyncing",
          CAN_VIEW_RESTORE: "view_restore",
          CAN_VIEW_MODAL: "view_modal",
          CAN_VIEW_AUTOCREATEPASSWORD: "view_auto_create_password",
          CAN_VIEW_DELETE_BACKUP: "view_delete_backup",
          CAN_VIEW_DELETE_ARCHIVE: "view_delete_archive",
          CAN_VIEW_UPLOADING: "can_view_uploading"
        };
        var TogglePasswordIcon = function TogglePasswordIcon(_ref57) {
          var toggle = _ref57.toggle;
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [toggle && /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
              width: "20",
              height: "20",
              viewBox: "0 0 20 20",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                id: "mask0_604_3898",
                maskUnits: "userSpaceOnUse",
                x: "0",
                y: "0",
                width: "20",
                height: "20",
                children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                  width: "20",
                  height: "20",
                  fill: "#D9D9D9"
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                mask: "url(#mask0_604_3898)",
                children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                  d: "M13.271 11.146L11.979 9.85399C12.0343 9.32599 11.8747 8.87133 11.5 8.48999C11.1253 8.10799 10.674 7.94466 10.146 7.99999L8.854 6.70799C9.03467 6.63866 9.22233 6.58666 9.417 6.55199C9.611 6.51733 9.80533 6.49999 10 6.49999C10.972 6.49999 11.7983 6.84033 12.479 7.52099C13.1597 8.20166 13.5 9.02799 13.5 9.99999C13.5 10.1947 13.4827 10.389 13.448 10.583C13.4133 10.7777 13.3543 10.9653 13.271 11.146ZM16.042 13.917L14.958 12.833C15.458 12.4443 15.913 12.0173 16.323 11.552C16.733 11.0867 17.0767 10.5693 17.354 9.99999C16.6733 8.59733 15.67 7.49666 14.344 6.69799C13.0173 5.89933 11.5693 5.49999 10 5.49999C9.63867 5.49999 9.28467 5.52066 8.938 5.56199C8.59067 5.60399 8.25033 5.67366 7.917 5.77099L6.708 4.56199C7.236 4.35399 7.77433 4.20833 8.323 4.12499C8.87167 4.04166 9.43067 3.99999 10 3.99999C11.986 3.99999 13.802 4.53833 15.448 5.61499C17.094 6.69099 18.278 8.15266 19 9.99999C18.6947 10.792 18.2883 11.5107 17.781 12.156C17.2743 12.802 16.6947 13.389 16.042 13.917ZM16 18.125L13.292 15.417C12.764 15.611 12.2257 15.7567 11.677 15.854C11.1283 15.9513 10.5693 16 10 16C8.014 16 6.198 15.4617 4.552 14.385C2.906 13.309 1.722 11.8473 1 9.99999C1.30533 9.20799 1.708 8.48566 2.208 7.83299C2.708 7.18033 3.29133 6.58999 3.958 6.06199L1.875 3.97899L2.938 2.91699L17.062 17.062L16 18.125ZM5.021 7.14599C4.535 7.53466 4.08367 7.96166 3.667 8.42699C3.25033 8.89233 2.91 9.41666 2.646 9.99999C3.32667 11.4027 4.33 12.5033 5.656 13.302C6.98267 14.1007 8.43067 14.5 10 14.5C10.3613 14.5 10.7153 14.4757 11.062 14.427C11.4093 14.3783 11.7567 14.3123 12.104 14.229L11.167 13.292C10.9723 13.3613 10.7777 13.4133 10.583 13.448C10.389 13.4827 10.1947 13.5 10 13.5C9.028 13.5 8.20167 13.1597 7.521 12.479C6.84033 11.7983 6.5 10.972 6.5 9.99999C6.5 9.80533 6.52433 9.61099 6.573 9.41699C6.62167 9.22233 6.66667 9.02766 6.708 8.83299L5.021 7.14599Z",
                  fill: "#A7A7B0"
                })
              })]
            }), !toggle && /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
              width: "21",
              height: "20",
              viewBox: "0 0 21 20",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                id: "mask0_1102_25545",
                maskUnits: "userSpaceOnUse",
                x: "0",
                y: "0",
                width: "21",
                height: "20",
                children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                  x: "0.5",
                  width: "20",
                  height: "20",
                  fill: "#D9D9D9"
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                mask: "url(#mask0_1102_25545)",
                children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                  d: "M10.5 13.5C11.472 13.5 12.2983 13.1597 12.979 12.479C13.6597 11.7983 14 10.972 14 10C14 9.028 13.6597 8.20167 12.979 7.521C12.2983 6.84033 11.472 6.5 10.5 6.5C9.528 6.5 8.70167 6.84033 8.021 7.521C7.34033 8.20167 7 9.028 7 10C7 10.972 7.34033 11.7983 8.021 12.479C8.70167 13.1597 9.528 13.5 10.5 13.5ZM10.5 12C9.94467 12 9.47233 11.8057 9.083 11.417C8.69433 11.0277 8.5 10.5553 8.5 10C8.5 9.44467 8.69433 8.97233 9.083 8.583C9.47233 8.19433 9.94467 8 10.5 8C11.0553 8 11.5277 8.19433 11.917 8.583C12.3057 8.97233 12.5 9.44467 12.5 10C12.5 10.5553 12.3057 11.0277 11.917 11.417C11.5277 11.8057 11.0553 12 10.5 12ZM10.5 16C8.514 16 6.70833 15.455 5.083 14.365C3.45833 13.2743 2.264 11.8193 1.5 10C2.264 8.18067 3.45833 6.72567 5.083 5.635C6.70833 4.545 8.514 4 10.5 4C12.486 4 14.2917 4.545 15.917 5.635C17.5417 6.72567 18.736 8.18067 19.5 10C18.736 11.8193 17.5417 13.2743 15.917 14.365C14.2917 15.455 12.486 16 10.5 16ZM10.5 14.5C12.0553 14.5 13.4927 14.0973 14.812 13.292C16.132 12.486 17.146 11.3887 17.854 10C17.146 8.61133 16.132 7.514 14.812 6.708C13.4927 5.90267 12.0553 5.5 10.5 5.5C8.94467 5.5 7.50733 5.90267 6.188 6.708C4.868 7.514 3.854 8.61133 3.146 10C3.854 11.3887 4.868 12.486 6.188 13.292C7.50733 14.0973 8.94467 14.5 10.5 14.5Z",
                  fill: "#A7A7B0"
                })
              })]
            })]
          });
        };
        var validationSchema$6 = create$3().shape({
          password: create$6().matches(/^[~!@#=?+<>,._'/()?a-zA-Z0-9-]+$/, "Invalid character").required("Please enter a password").min(12, "Password must be at least 12 characters long"),
          confirmPassword: create$6().required("Please re-enter your password").test("matchy-passwords", function (val) {
            var path = this.path,
              parent = this.parent,
              createError = this.createError;
            if (val === void 0) {
              return false;
            }
            var pwd = parent.password;
            var matching = pwd === val;
            if (matching) {
              return true;
            }
            return createError({
              path: path,
              message: "Passwords do not match"
            });
          }),
          understand: create$7().required("Field is required")
        });
        var validationSchemaUnlock = create$3().shape({
          password: create$6().required("Please enter a password")
        });
        var LockPrivateKeys = function LockPrivateKeys() {
          var _reactExports$useCont11 = reactExports.useContext(appContext),
            setModal = _reactExports$useCont11.setModal,
            vaultLocked = _reactExports$useCont11.vaultLocked,
            checkVaultLocked = _reactExports$useCont11.checkVaultLocked,
            setBackButton = _reactExports$useCont11.setBackButton,
            displayHeaderBackButton = _reactExports$useCont11.displayBackButton;
          var location = useLocation();
          var _useAuth = useAuth(),
            authNavigate = _useAuth.authNavigate;
          var _reactExports$useStat57 = reactExports.useState(false),
            _reactExports$useStat58 = _slicedToArray2(_reactExports$useStat57, 2),
            hidePassword = _reactExports$useStat58[0],
            togglePasswordVisibility = _reactExports$useStat58[1];
          var _reactExports$useStat59 = reactExports.useState(false),
            _reactExports$useStat60 = _slicedToArray2(_reactExports$useStat59, 2),
            hideConfirmPassword = _reactExports$useStat60[0],
            toggleConfirmPasswordVisiblity = _reactExports$useStat60[1];
          reactExports.useEffect(function () {
            setBackButton({
              display: true,
              to: "/dashboard",
              title: "Back"
            });
          }, [location]);
          var UnlockDialog = {
            content: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col justify-center items-center",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("img", {
                className: "mb-8 h-[128px] w-[128px]",
                alt: "unlock",
                src: "./assets/lock_open.svg"
              }), " ", /* @__PURE__ */jsxRuntimeExports.jsxs("h1", {
                className: "text-2xl font-semibold",
                children: ["You have unlocked ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " your private keys"]
              })]
            }),
            primaryActions: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
            secondaryActions: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
              variant: "tertiary",
              extraClass: "mt-4",
              onClick: function onClick() {
                authNavigate("/dashboard/lockprivatekeys", []);
                checkVaultLocked();
              },
              children: "Close"
            })
          };
          var LockDialog = {
            content: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col items-center",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("img", {
                className: "mb-8",
                alt: "unlock",
                src: "./assets/lock.svg"
              }), " ", /* @__PURE__ */jsxRuntimeExports.jsxs("h1", {
                className: "text-2xl font-semibold",
                children: ["You have locked ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " your private keys"]
              })]
            }),
            primaryActions: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
            secondaryActions: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
              variant: "tertiary",
              extraClass: "mt-4",
              onClick: function onClick() {
                authNavigate("/dashboard/lockprivatekeys", []);
                checkVaultLocked();
              },
              children: "Close"
            })
          };
          var formik = useFormik({
            initialValues: {
              password: "",
              confirmPassword: "",
              understand: false
            },
            onSubmit: function () {
              var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(formData) {
                return _regeneratorRuntime().wrap(function _callee15$(_context15) {
                  while (1) switch (_context15.prev = _context15.next) {
                    case 0:
                      formik.setStatus(void 0);
                      if (vaultLocked) {
                        _context15.next = 4;
                        break;
                      }
                      _context15.next = 4;
                      return vaultPasswordLock(formData.password).then(function (response) {
                        var isConfirmed = response === 1;
                        if (isConfirmed) {
                          authNavigate("/dashboard/modal", PERMISSIONS.CAN_VIEW_MODAL);
                          setModal({
                            content: LockDialog.content,
                            primaryActions: LockDialog.primaryActions,
                            secondaryActions: LockDialog.secondaryActions
                          });
                        }
                      }).catch(function (error) {
                        formik.setStatus(error);
                        setTimeout(function () {
                          return formik.setStatus(void 0);
                        }, 2500);
                      });
                    case 4:
                      if (!vaultLocked) {
                        _context15.next = 7;
                        break;
                      }
                      _context15.next = 7;
                      return vaultPasswordUnlock(formData.password).then(function (response) {
                        var isConfirmed = response === 1;
                        if (isConfirmed) {
                          authNavigate("/dashboard/modal", PERMISSIONS.CAN_VIEW_MODAL);
                          setModal({
                            content: UnlockDialog.content,
                            primaryActions: UnlockDialog.primaryActions,
                            secondaryActions: UnlockDialog.secondaryActions
                          });
                        }
                      }).catch(function (error) {
                        formik.setStatus(error);
                        setTimeout(function () {
                          return formik.setStatus(void 0);
                        }, 2500);
                      });
                    case 7:
                    case "end":
                      return _context15.stop();
                  }
                }, _callee15);
              }));
              function onSubmit(_x70) {
                return _onSubmit.apply(this, arguments);
              }
              return onSubmit;
            }(),
            validationSchema: !vaultLocked ? validationSchema$6 : validationSchemaUnlock
          });
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [!vaultLocked && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "flex flex-col h-full bg-black px-4 pb-4",
              children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col h-full",
                children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                  to: "/dashboard",
                  title: "Back"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "mt-6 text-2xl mb-8 text-left bg-inherit",
                  children: "Lock private keys"
                }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col gap-5",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "rounded",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "mb-3 text-left pb-2",
                        children: ["Locking your node prevents unauthorised access to your wallet and seed phrase. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " Your private keys will be encrypted with a password which you will be required to enter when transacting. You will still be able to receive funds as usual."]
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "text-core-grey-80 text-left",
                        children: "Before locking, ensure you have a copy of your seed phrase written down."
                      })]
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "core-black-contrast-2 p-4 rounded flex flex-col gap-6",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                      autoComplete: "off",
                      onSubmit: formik.handleSubmit,
                      className: "flex flex-col gap-4",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                        disabled: formik.isSubmitting,
                        extraClass: "core-black-contrast",
                        handleEndIconClick: function handleEndIconClick() {
                          return togglePasswordVisibility(function (prevState) {
                            return !prevState;
                          });
                        },
                        type: !hidePassword ? "password" : "text",
                        autoComplete: "new-password",
                        placeholder: "Enter password",
                        name: "password",
                        id: "password",
                        error: formik.errors.password,
                        value: formik.values.password,
                        onChange: formik.handleChange,
                        endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                          toggle: hidePassword
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                        disabled: formik.isSubmitting,
                        extraClass: "core-black-contrast",
                        handleEndIconClick: function handleEndIconClick() {
                          return toggleConfirmPasswordVisiblity(function (prevState) {
                            return !prevState;
                          });
                        },
                        type: !hideConfirmPassword ? "password" : "text",
                        autoComplete: "new-password",
                        placeholder: "Confirm password",
                        name: "confirmPassword",
                        id: "confirmPassword",
                        error: formik.errors.confirmPassword,
                        value: formik.values.confirmPassword,
                        onChange: formik.handleChange,
                        endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                          toggle: hideConfirmPassword
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "flex flex-col gap-8",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx(UnderstandRadio, {
                          id: "understand",
                          htmlFor: "understand",
                          name: "understand",
                          children: "I understand I am responsible for keeping a record of my Seed Phrase.",
                          onChange: function onChange() {
                            formik.setFieldValue("understand", !formik.values.understand);
                          }
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          variant: "primary",
                          type: "submit",
                          disabled: !(formik.isValid && formik.values.understand) || formik.isSubmitting,
                          children: "Lock private keys"
                        })]
                      }), formik.status && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "text-sm form-error-message text-left",
                        children: formik.status
                      })]
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "text-left",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                      className: "text-sm password-label mr-4 ml-4",
                      children: ["Enter a password over 12 characters using a-z, A-Z, 0-9 and", " ", "!@#=?+<>,.-_ '()/", "symbols only. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Your password cannot contain spaces."]
                    })
                  })]
                })]
              })
            }), !!vaultLocked && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "flex flex-col h-full bg-black px-4 pb-4",
              children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col h-full",
                children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                  to: "/dashboard",
                  title: "Security"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "mt-6 text-2xl mb-8 text-left bg-inherit",
                  children: "Unlock private keys"
                }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col gap-5",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "rounded",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "mb-3 text-left pb-2",
                        children: ["Your seed phrase and private keys will be visible and unprotected against unauthorised access. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "You should only unlock your private keys temporarily if required."]
                      })
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "core-black-contrast-2 p-4 rounded flex flex-col gap-6",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                      autoComplete: "off",
                      onSubmit: formik.handleSubmit,
                      className: "flex flex-col gap-4",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                        disabled: formik.isSubmitting,
                        extraClass: "core-black-contrast",
                        autoComplete: "new-password",
                        handleEndIconClick: function handleEndIconClick() {
                          return togglePasswordVisibility(function (prevState) {
                            return !prevState;
                          });
                        },
                        type: !hidePassword ? "password" : "text",
                        placeholder: "Enter password",
                        name: "password",
                        id: "password",
                        error: formik.errors.password,
                        value: formik.values.password,
                        onChange: formik.handleChange,
                        endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                          toggle: hidePassword
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "flex flex-col gap-8",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          variant: "primary",
                          extraClass: "text-black",
                          type: "submit",
                          disabled: !formik.isValid || formik.isSubmitting,
                          children: "Unlock private keys"
                        })
                      }), formik.status && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "text-sm form-error-message text-left",
                        children: formik.status
                      })]
                    })
                  })]
                })]
              })
            })]
          });
        };
        function _typeof(obj) {
          "@babel/helpers - typeof";

          return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
            return typeof obj;
          } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          }, _typeof(obj);
        }
        function toInteger(dirtyNumber) {
          if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
            return NaN;
          }
          var number = Number(dirtyNumber);
          if (isNaN(number)) {
            return number;
          }
          return number < 0 ? Math.ceil(number) : Math.floor(number);
        }
        function requiredArgs(required, args) {
          if (args.length < required) {
            throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
          }
        }

        /**
         * @name toDate
         * @category Common Helpers
         * @summary Convert the given argument to an instance of Date.
         *
         * @description
         * Convert the given argument to an instance of Date.
         *
         * If the argument is an instance of Date, the function returns its clone.
         *
         * If the argument is a number, it is treated as a timestamp.
         *
         * If the argument is none of the above, the function returns Invalid Date.
         *
         * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
         *
         * @param {Date|Number} argument - the value to convert
         * @returns {Date} the parsed date in the local time zone
         * @throws {TypeError} 1 argument required
         *
         * @example
         * // Clone the date:
         * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
         * //=> Tue Feb 11 2014 11:30:30
         *
         * @example
         * // Convert the timestamp to date:
         * const result = toDate(1392098430000)
         * //=> Tue Feb 11 2014 11:30:30
         */
        function toDate(argument) {
          requiredArgs(1, arguments);
          var argStr = Object.prototype.toString.call(argument);

          // Clone the date
          if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
            // Prevent the date to lose the milliseconds when passed to new Date() in IE10
            return new Date(argument.getTime());
          } else if (typeof argument === 'number' || argStr === '[object Number]') {
            return new Date(argument);
          } else {
            if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
              // eslint-disable-next-line no-console
              console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
              // eslint-disable-next-line no-console
              console.warn(new Error().stack);
            }
            return new Date(NaN);
          }
        }

        /**
         * @name addMilliseconds
         * @category Millisecond Helpers
         * @summary Add the specified number of milliseconds to the given date.
         *
         * @description
         * Add the specified number of milliseconds to the given date.
         *
         * @param {Date|Number} date - the date to be changed
         * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
         * @returns {Date} the new date with the milliseconds added
         * @throws {TypeError} 2 arguments required
         *
         * @example
         * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
         * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
         * //=> Thu Jul 10 2014 12:45:30.750
         */
        function addMilliseconds(dirtyDate, dirtyAmount) {
          requiredArgs(2, arguments);
          var timestamp = toDate(dirtyDate).getTime();
          var amount = toInteger(dirtyAmount);
          return new Date(timestamp + amount);
        }
        var defaultOptions = {};
        function getDefaultOptions() {
          return defaultOptions;
        }

        /**
         * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
         * They usually appear for dates that denote time before the timezones were introduced
         * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
         * and GMT+01:00:00 after that date)
         *
         * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
         * which would lead to incorrect calculations.
         *
         * This function returns the timezone offset in milliseconds that takes seconds in account.
         */
        function getTimezoneOffsetInMilliseconds(date) {
          var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
          utcDate.setUTCFullYear(date.getFullYear());
          return date.getTime() - utcDate.getTime();
        }

        /**
         * @name compareAsc
         * @category Common Helpers
         * @summary Compare the two dates and return -1, 0 or 1.
         *
         * @description
         * Compare the two dates and return 1 if the first date is after the second,
         * -1 if the first date is before the second or 0 if dates are equal.
         *
         * @param {Date|Number} dateLeft - the first date to compare
         * @param {Date|Number} dateRight - the second date to compare
         * @returns {Number} the result of the comparison
         * @throws {TypeError} 2 arguments required
         *
         * @example
         * // Compare 11 February 1987 and 10 July 1989:
         * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
         * //=> -1
         *
         * @example
         * // Sort the array of dates:
         * const result = [
         *   new Date(1995, 6, 2),
         *   new Date(1987, 1, 11),
         *   new Date(1989, 6, 10)
         * ].sort(compareAsc)
         * //=> [
         * //   Wed Feb 11 1987 00:00:00,
         * //   Mon Jul 10 1989 00:00:00,
         * //   Sun Jul 02 1995 00:00:00
         * // ]
         */
        function compareAsc(dirtyDateLeft, dirtyDateRight) {
          requiredArgs(2, arguments);
          var dateLeft = toDate(dirtyDateLeft);
          var dateRight = toDate(dirtyDateRight);
          var diff = dateLeft.getTime() - dateRight.getTime();
          if (diff < 0) {
            return -1;
          } else if (diff > 0) {
            return 1;
            // Return 0 if diff is 0; return NaN if diff is NaN
          } else {
            return diff;
          }
        }

        /**
         * @name isDate
         * @category Common Helpers
         * @summary Is the given value a date?
         *
         * @description
         * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
         *
         * @param {*} value - the value to check
         * @returns {boolean} true if the given value is a date
         * @throws {TypeError} 1 arguments required
         *
         * @example
         * // For a valid date:
         * const result = isDate(new Date())
         * //=> true
         *
         * @example
         * // For an invalid date:
         * const result = isDate(new Date(NaN))
         * //=> true
         *
         * @example
         * // For some value:
         * const result = isDate('2014-02-31')
         * //=> false
         *
         * @example
         * // For an object:
         * const result = isDate({})
         * //=> false
         */
        function isDate(value) {
          requiredArgs(1, arguments);
          return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
        }

        /**
         * @name isValid
         * @category Common Helpers
         * @summary Is the given date valid?
         *
         * @description
         * Returns false if argument is Invalid Date and true otherwise.
         * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
         * Invalid Date is a Date, whose time value is NaN.
         *
         * Time value of Date: http://es5.github.io/#x15.9.1.1
         *
         * @param {*} date - the date to check
         * @returns {Boolean} the date is valid
         * @throws {TypeError} 1 argument required
         *
         * @example
         * // For the valid date:
         * const result = isValid(new Date(2014, 1, 31))
         * //=> true
         *
         * @example
         * // For the value, convertable into a date:
         * const result = isValid(1393804800000)
         * //=> true
         *
         * @example
         * // For the invalid date:
         * const result = isValid(new Date(''))
         * //=> false
         */
        function isValid(dirtyDate) {
          requiredArgs(1, arguments);
          if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
            return false;
          }
          var date = toDate(dirtyDate);
          return !isNaN(Number(date));
        }

        /**
         * @name differenceInCalendarMonths
         * @category Month Helpers
         * @summary Get the number of calendar months between the given dates.
         *
         * @description
         * Get the number of calendar months between the given dates.
         *
         * @param {Date|Number} dateLeft - the later date
         * @param {Date|Number} dateRight - the earlier date
         * @returns {Number} the number of calendar months
         * @throws {TypeError} 2 arguments required
         *
         * @example
         * // How many calendar months are between 31 January 2014 and 1 September 2014?
         * const result = differenceInCalendarMonths(
         *   new Date(2014, 8, 1),
         *   new Date(2014, 0, 31)
         * )
         * //=> 8
         */
        function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
          requiredArgs(2, arguments);
          var dateLeft = toDate(dirtyDateLeft);
          var dateRight = toDate(dirtyDateRight);
          var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
          var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
          return yearDiff * 12 + monthDiff;
        }

        /**
         * @name differenceInMilliseconds
         * @category Millisecond Helpers
         * @summary Get the number of milliseconds between the given dates.
         *
         * @description
         * Get the number of milliseconds between the given dates.
         *
         * @param {Date|Number} dateLeft - the later date
         * @param {Date|Number} dateRight - the earlier date
         * @returns {Number} the number of milliseconds
         * @throws {TypeError} 2 arguments required
         *
         * @example
         * // How many milliseconds are between
         * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
         * const result = differenceInMilliseconds(
         *   new Date(2014, 6, 2, 12, 30, 21, 700),
         *   new Date(2014, 6, 2, 12, 30, 20, 600)
         * )
         * //=> 1100
         */
        function differenceInMilliseconds(dateLeft, dateRight) {
          requiredArgs(2, arguments);
          return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
        }
        var roundingMap = {
          ceil: Math.ceil,
          round: Math.round,
          floor: Math.floor,
          trunc: function trunc(value) {
            return value < 0 ? Math.ceil(value) : Math.floor(value);
          } // Math.trunc is not supported by IE
        };

        var defaultRoundingMethod = 'trunc';
        function getRoundingMethod(method) {
          return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
        }

        /**
         * @name endOfDay
         * @category Day Helpers
         * @summary Return the end of a day for the given date.
         *
         * @description
         * Return the end of a day for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|Number} date - the original date
         * @returns {Date} the end of a day
         * @throws {TypeError} 1 argument required
         *
         * @example
         * // The end of a day for 2 September 2014 11:55:00:
         * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Tue Sep 02 2014 23:59:59.999
         */
        function endOfDay(dirtyDate) {
          requiredArgs(1, arguments);
          var date = toDate(dirtyDate);
          date.setHours(23, 59, 59, 999);
          return date;
        }

        /**
         * @name endOfMonth
         * @category Month Helpers
         * @summary Return the end of a month for the given date.
         *
         * @description
         * Return the end of a month for the given date.
         * The result will be in the local timezone.
         *
         * @param {Date|Number} date - the original date
         * @returns {Date} the end of a month
         * @throws {TypeError} 1 argument required
         *
         * @example
         * // The end of a month for 2 September 2014 11:55:00:
         * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
         * //=> Tue Sep 30 2014 23:59:59.999
         */
        function endOfMonth(dirtyDate) {
          requiredArgs(1, arguments);
          var date = toDate(dirtyDate);
          var month = date.getMonth();
          date.setFullYear(date.getFullYear(), month + 1, 0);
          date.setHours(23, 59, 59, 999);
          return date;
        }

        /**
         * @name isLastDayOfMonth
         * @category Month Helpers
         * @summary Is the given date the last day of a month?
         *
         * @description
         * Is the given date the last day of a month?
         *
         * @param {Date|Number} date - the date to check
         * @returns {Boolean} the date is the last day of a month
         * @throws {TypeError} 1 argument required
         *
         * @example
         * // Is 28 February 2014 the last day of a month?
         * const result = isLastDayOfMonth(new Date(2014, 1, 28))
         * //=> true
         */
        function isLastDayOfMonth(dirtyDate) {
          requiredArgs(1, arguments);
          var date = toDate(dirtyDate);
          return endOfDay(date).getTime() === endOfMonth(date).getTime();
        }

        /**
         * @name differenceInMonths
         * @category Month Helpers
         * @summary Get the number of full months between the given dates.
         *
         * @description
         * Get the number of full months between the given dates using trunc as a default rounding method.
         *
         * @param {Date|Number} dateLeft - the later date
         * @param {Date|Number} dateRight - the earlier date
         * @returns {Number} the number of full months
         * @throws {TypeError} 2 arguments required
         *
         * @example
         * // How many full months are between 31 January 2014 and 1 September 2014?
         * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
         * //=> 7
         */
        function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
          requiredArgs(2, arguments);
          var dateLeft = toDate(dirtyDateLeft);
          var dateRight = toDate(dirtyDateRight);
          var sign = compareAsc(dateLeft, dateRight);
          var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
          var result;

          // Check for the difference of less than month
          if (difference < 1) {
            result = 0;
          } else {
            if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
              // This will check if the date is end of Feb and assign a higher end of month date
              // to compare it with Jan
              dateLeft.setDate(30);
            }
            dateLeft.setMonth(dateLeft.getMonth() - sign * difference);

            // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
            // If so, result must be decreased by 1 in absolute value
            var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;

            // Check for cases of one full calendar month
            if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
              isLastMonthNotFull = false;
            }
            result = sign * (difference - Number(isLastMonthNotFull));
          }

          // Prevent negative zero
          return result === 0 ? 0 : result;
        }

        /**
         * @name differenceInSeconds
         * @category Second Helpers
         * @summary Get the number of seconds between the given dates.
         *
         * @description
         * Get the number of seconds between the given dates.
         *
         * @param {Date|Number} dateLeft - the later date
         * @param {Date|Number} dateRight - the earlier date
         * @param {Object} [options] - an object with options.
         * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)
         * @returns {Number} the number of seconds
         * @throws {TypeError} 2 arguments required
         *
         * @example
         * // How many seconds are between
         * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
         * const result = differenceInSeconds(
         *   new Date(2014, 6, 2, 12, 30, 20, 0),
         *   new Date(2014, 6, 2, 12, 30, 7, 999)
         * )
         * //=> 12
         */
        function differenceInSeconds(dateLeft, dateRight, options) {
          requiredArgs(2, arguments);
          var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;
          return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
        }

        /**
         * @name subMilliseconds
         * @category Millisecond Helpers
         * @summary Subtract the specified number of milliseconds from the given date.
         *
         * @description
         * Subtract the specified number of milliseconds from the given date.
         *
         * @param {Date|Number} date - the date to be changed
         * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
         * @returns {Date} the new date with the milliseconds subtracted
         * @throws {TypeError} 2 arguments required
         *
         * @example
         * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
         * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
         * //=> Thu Jul 10 2014 12:45:29.250
         */
        function subMilliseconds(dirtyDate, dirtyAmount) {
          requiredArgs(2, arguments);
          var amount = toInteger(dirtyAmount);
          return addMilliseconds(dirtyDate, -amount);
        }
        var MILLISECONDS_IN_DAY = 86400000;
        function getUTCDayOfYear(dirtyDate) {
          requiredArgs(1, arguments);
          var date = toDate(dirtyDate);
          var timestamp = date.getTime();
          date.setUTCMonth(0, 1);
          date.setUTCHours(0, 0, 0, 0);
          var startOfYearTimestamp = date.getTime();
          var difference = timestamp - startOfYearTimestamp;
          return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
        }
        function startOfUTCISOWeek(dirtyDate) {
          requiredArgs(1, arguments);
          var weekStartsOn = 1;
          var date = toDate(dirtyDate);
          var day = date.getUTCDay();
          var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
          date.setUTCDate(date.getUTCDate() - diff);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
        function getUTCISOWeekYear(dirtyDate) {
          requiredArgs(1, arguments);
          var date = toDate(dirtyDate);
          var year = date.getUTCFullYear();
          var fourthOfJanuaryOfNextYear = new Date(0);
          fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
          fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
          var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
          var fourthOfJanuaryOfThisYear = new Date(0);
          fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
          fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
          var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
          if (date.getTime() >= startOfNextYear.getTime()) {
            return year + 1;
          } else if (date.getTime() >= startOfThisYear.getTime()) {
            return year;
          } else {
            return year - 1;
          }
        }
        function startOfUTCISOWeekYear(dirtyDate) {
          requiredArgs(1, arguments);
          var year = getUTCISOWeekYear(dirtyDate);
          var fourthOfJanuary = new Date(0);
          fourthOfJanuary.setUTCFullYear(year, 0, 4);
          fourthOfJanuary.setUTCHours(0, 0, 0, 0);
          var date = startOfUTCISOWeek(fourthOfJanuary);
          return date;
        }
        var MILLISECONDS_IN_WEEK$1 = 604800000;
        function getUTCISOWeek(dirtyDate) {
          requiredArgs(1, arguments);
          var date = toDate(dirtyDate);
          var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

          // Round the number of days to the nearest integer
          // because the number of milliseconds in a week is not constant
          // (e.g. it's different in the week of the daylight saving time clock shift)
          return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
        }
        function startOfUTCWeek(dirtyDate, options) {
          var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
          requiredArgs(1, arguments);
          var defaultOptions = getDefaultOptions();
          var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

          // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
          if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
          }
          var date = toDate(dirtyDate);
          var day = date.getUTCDay();
          var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
          date.setUTCDate(date.getUTCDate() - diff);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
        function getUTCWeekYear(dirtyDate, options) {
          var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
          requiredArgs(1, arguments);
          var date = toDate(dirtyDate);
          var year = date.getUTCFullYear();
          var defaultOptions = getDefaultOptions();
          var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

          // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
          if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
            throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
          }
          var firstWeekOfNextYear = new Date(0);
          firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
          firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
          var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
          var firstWeekOfThisYear = new Date(0);
          firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
          firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
          var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
          if (date.getTime() >= startOfNextYear.getTime()) {
            return year + 1;
          } else if (date.getTime() >= startOfThisYear.getTime()) {
            return year;
          } else {
            return year - 1;
          }
        }
        function startOfUTCWeekYear(dirtyDate, options) {
          var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
          requiredArgs(1, arguments);
          var defaultOptions = getDefaultOptions();
          var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
          var year = getUTCWeekYear(dirtyDate, options);
          var firstWeek = new Date(0);
          firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
          firstWeek.setUTCHours(0, 0, 0, 0);
          var date = startOfUTCWeek(firstWeek, options);
          return date;
        }
        var MILLISECONDS_IN_WEEK = 604800000;
        function getUTCWeek(dirtyDate, options) {
          requiredArgs(1, arguments);
          var date = toDate(dirtyDate);
          var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

          // Round the number of days to the nearest integer
          // because the number of milliseconds in a week is not constant
          // (e.g. it's different in the week of the daylight saving time clock shift)
          return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
        }
        function addLeadingZeros(number, targetLength) {
          var sign = number < 0 ? '-' : '';
          var output = Math.abs(number).toString();
          while (output.length < targetLength) {
            output = '0' + output;
          }
          return sign + output;
        }

        /*
         * |     | Unit                           |     | Unit                           |
         * |-----|--------------------------------|-----|--------------------------------|
         * |  a  | AM, PM                         |  A* |                                |
         * |  d  | Day of month                   |  D  |                                |
         * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
         * |  m  | Minute                         |  M  | Month                          |
         * |  s  | Second                         |  S  | Fraction of second             |
         * |  y  | Year (abs)                     |  Y  |                                |
         *
         * Letters marked by * are not implemented but reserved by Unicode standard.
         */
        var formatters$2 = {
          // Year
          y: function y(date, token) {
            // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
            // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
            // |----------|-------|----|-------|-------|-------|
            // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
            // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
            // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
            // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
            // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

            var signedYear = date.getUTCFullYear();
            // Returns 1 for 1 BC (which is year 0 in JavaScript)
            var year = signedYear > 0 ? signedYear : 1 - signedYear;
            return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
          },
          // Month
          M: function M(date, token) {
            var month = date.getUTCMonth();
            return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
          },
          // Day of the month
          d: function d(date, token) {
            return addLeadingZeros(date.getUTCDate(), token.length);
          },
          // AM or PM
          a: function a(date, token) {
            var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
            switch (token) {
              case 'a':
              case 'aa':
                return dayPeriodEnumValue.toUpperCase();
              case 'aaa':
                return dayPeriodEnumValue;
              case 'aaaaa':
                return dayPeriodEnumValue[0];
              case 'aaaa':
              default:
                return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
            }
          },
          // Hour [1-12]
          h: function h(date, token) {
            return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
          },
          // Hour [0-23]
          H: function H(date, token) {
            return addLeadingZeros(date.getUTCHours(), token.length);
          },
          // Minute
          m: function m(date, token) {
            return addLeadingZeros(date.getUTCMinutes(), token.length);
          },
          // Second
          s: function s(date, token) {
            return addLeadingZeros(date.getUTCSeconds(), token.length);
          },
          // Fraction of second
          S: function S(date, token) {
            var numberOfDigits = token.length;
            var milliseconds = date.getUTCMilliseconds();
            var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
            return addLeadingZeros(fractionalSeconds, token.length);
          }
        };
        var formatters$3 = formatters$2;
        var dayPeriodEnum = {
          am: 'am',
          pm: 'pm',
          midnight: 'midnight',
          noon: 'noon',
          morning: 'morning',
          afternoon: 'afternoon',
          evening: 'evening',
          night: 'night'
        };
        /*
         * |     | Unit                           |     | Unit                           |
         * |-----|--------------------------------|-----|--------------------------------|
         * |  a  | AM, PM                         |  A* | Milliseconds in day            |
         * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
         * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
         * |  d  | Day of month                   |  D  | Day of year                    |
         * |  e  | Local day of week              |  E  | Day of week                    |
         * |  f  |                                |  F* | Day of week in month           |
         * |  g* | Modified Julian day            |  G  | Era                            |
         * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
         * |  i! | ISO day of week                |  I! | ISO week of year               |
         * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
         * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
         * |  l* | (deprecated)                   |  L  | Stand-alone month              |
         * |  m  | Minute                         |  M  | Month                          |
         * |  n  |                                |  N  |                                |
         * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
         * |  p! | Long localized time            |  P! | Long localized date            |
         * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
         * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
         * |  s  | Second                         |  S  | Fraction of second             |
         * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
         * |  u  | Extended year                  |  U* | Cyclic year                    |
         * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
         * |  w  | Local week of year             |  W* | Week of month                  |
         * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
         * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
         * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
         *
         * Letters marked by * are not implemented but reserved by Unicode standard.
         *
         * Letters marked by ! are non-standard, but implemented by date-fns:
         * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
         * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
         *   i.e. 7 for Sunday, 1 for Monday, etc.
         * - `I` is ISO week of year, as opposed to `w` which is local week of year.
         * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
         *   `R` is supposed to be used in conjunction with `I` and `i`
         *   for universal ISO week-numbering date, whereas
         *   `Y` is supposed to be used in conjunction with `w` and `e`
         *   for week-numbering date specific to the locale.
         * - `P` is long localized date format
         * - `p` is long localized time format
         */

        var formatters = {
          // Era
          G: function G(date, token, localize) {
            var era = date.getUTCFullYear() > 0 ? 1 : 0;
            switch (token) {
              // AD, BC
              case 'G':
              case 'GG':
              case 'GGG':
                return localize.era(era, {
                  width: 'abbreviated'
                });
              // A, B
              case 'GGGGG':
                return localize.era(era, {
                  width: 'narrow'
                });
              // Anno Domini, Before Christ
              case 'GGGG':
              default:
                return localize.era(era, {
                  width: 'wide'
                });
            }
          },
          // Year
          y: function y(date, token, localize) {
            // Ordinal number
            if (token === 'yo') {
              var signedYear = date.getUTCFullYear();
              // Returns 1 for 1 BC (which is year 0 in JavaScript)
              var year = signedYear > 0 ? signedYear : 1 - signedYear;
              return localize.ordinalNumber(year, {
                unit: 'year'
              });
            }
            return formatters$3.y(date, token);
          },
          // Local week-numbering year
          Y: function Y(date, token, localize, options) {
            var signedWeekYear = getUTCWeekYear(date, options);
            // Returns 1 for 1 BC (which is year 0 in JavaScript)
            var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

            // Two digit year
            if (token === 'YY') {
              var twoDigitYear = weekYear % 100;
              return addLeadingZeros(twoDigitYear, 2);
            }

            // Ordinal number
            if (token === 'Yo') {
              return localize.ordinalNumber(weekYear, {
                unit: 'year'
              });
            }

            // Padding
            return addLeadingZeros(weekYear, token.length);
          },
          // ISO week-numbering year
          R: function R(date, token) {
            var isoWeekYear = getUTCISOWeekYear(date);

            // Padding
            return addLeadingZeros(isoWeekYear, token.length);
          },
          // Extended year. This is a single number designating the year of this calendar system.
          // The main difference between `y` and `u` localizers are B.C. years:
          // | Year | `y` | `u` |
          // |------|-----|-----|
          // | AC 1 |   1 |   1 |
          // | BC 1 |   1 |   0 |
          // | BC 2 |   2 |  -1 |
          // Also `yy` always returns the last two digits of a year,
          // while `uu` pads single digit years to 2 characters and returns other years unchanged.
          u: function u(date, token) {
            var year = date.getUTCFullYear();
            return addLeadingZeros(year, token.length);
          },
          // Quarter
          Q: function Q(date, token, localize) {
            var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
            switch (token) {
              // 1, 2, 3, 4
              case 'Q':
                return String(quarter);
              // 01, 02, 03, 04
              case 'QQ':
                return addLeadingZeros(quarter, 2);
              // 1st, 2nd, 3rd, 4th
              case 'Qo':
                return localize.ordinalNumber(quarter, {
                  unit: 'quarter'
                });
              // Q1, Q2, Q3, Q4
              case 'QQQ':
                return localize.quarter(quarter, {
                  width: 'abbreviated',
                  context: 'formatting'
                });
              // 1, 2, 3, 4 (narrow quarter; could be not numerical)
              case 'QQQQQ':
                return localize.quarter(quarter, {
                  width: 'narrow',
                  context: 'formatting'
                });
              // 1st quarter, 2nd quarter, ...
              case 'QQQQ':
              default:
                return localize.quarter(quarter, {
                  width: 'wide',
                  context: 'formatting'
                });
            }
          },
          // Stand-alone quarter
          q: function q(date, token, localize) {
            var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
            switch (token) {
              // 1, 2, 3, 4
              case 'q':
                return String(quarter);
              // 01, 02, 03, 04
              case 'qq':
                return addLeadingZeros(quarter, 2);
              // 1st, 2nd, 3rd, 4th
              case 'qo':
                return localize.ordinalNumber(quarter, {
                  unit: 'quarter'
                });
              // Q1, Q2, Q3, Q4
              case 'qqq':
                return localize.quarter(quarter, {
                  width: 'abbreviated',
                  context: 'standalone'
                });
              // 1, 2, 3, 4 (narrow quarter; could be not numerical)
              case 'qqqqq':
                return localize.quarter(quarter, {
                  width: 'narrow',
                  context: 'standalone'
                });
              // 1st quarter, 2nd quarter, ...
              case 'qqqq':
              default:
                return localize.quarter(quarter, {
                  width: 'wide',
                  context: 'standalone'
                });
            }
          },
          // Month
          M: function M(date, token, localize) {
            var month = date.getUTCMonth();
            switch (token) {
              case 'M':
              case 'MM':
                return formatters$3.M(date, token);
              // 1st, 2nd, ..., 12th
              case 'Mo':
                return localize.ordinalNumber(month + 1, {
                  unit: 'month'
                });
              // Jan, Feb, ..., Dec
              case 'MMM':
                return localize.month(month, {
                  width: 'abbreviated',
                  context: 'formatting'
                });
              // J, F, ..., D
              case 'MMMMM':
                return localize.month(month, {
                  width: 'narrow',
                  context: 'formatting'
                });
              // January, February, ..., December
              case 'MMMM':
              default:
                return localize.month(month, {
                  width: 'wide',
                  context: 'formatting'
                });
            }
          },
          // Stand-alone month
          L: function L(date, token, localize) {
            var month = date.getUTCMonth();
            switch (token) {
              // 1, 2, ..., 12
              case 'L':
                return String(month + 1);
              // 01, 02, ..., 12
              case 'LL':
                return addLeadingZeros(month + 1, 2);
              // 1st, 2nd, ..., 12th
              case 'Lo':
                return localize.ordinalNumber(month + 1, {
                  unit: 'month'
                });
              // Jan, Feb, ..., Dec
              case 'LLL':
                return localize.month(month, {
                  width: 'abbreviated',
                  context: 'standalone'
                });
              // J, F, ..., D
              case 'LLLLL':
                return localize.month(month, {
                  width: 'narrow',
                  context: 'standalone'
                });
              // January, February, ..., December
              case 'LLLL':
              default:
                return localize.month(month, {
                  width: 'wide',
                  context: 'standalone'
                });
            }
          },
          // Local week of year
          w: function w(date, token, localize, options) {
            var week = getUTCWeek(date, options);
            if (token === 'wo') {
              return localize.ordinalNumber(week, {
                unit: 'week'
              });
            }
            return addLeadingZeros(week, token.length);
          },
          // ISO week of year
          I: function I(date, token, localize) {
            var isoWeek = getUTCISOWeek(date);
            if (token === 'Io') {
              return localize.ordinalNumber(isoWeek, {
                unit: 'week'
              });
            }
            return addLeadingZeros(isoWeek, token.length);
          },
          // Day of the month
          d: function d(date, token, localize) {
            if (token === 'do') {
              return localize.ordinalNumber(date.getUTCDate(), {
                unit: 'date'
              });
            }
            return formatters$3.d(date, token);
          },
          // Day of year
          D: function D(date, token, localize) {
            var dayOfYear = getUTCDayOfYear(date);
            if (token === 'Do') {
              return localize.ordinalNumber(dayOfYear, {
                unit: 'dayOfYear'
              });
            }
            return addLeadingZeros(dayOfYear, token.length);
          },
          // Day of week
          E: function E(date, token, localize) {
            var dayOfWeek = date.getUTCDay();
            switch (token) {
              // Tue
              case 'E':
              case 'EE':
              case 'EEE':
                return localize.day(dayOfWeek, {
                  width: 'abbreviated',
                  context: 'formatting'
                });
              // T
              case 'EEEEE':
                return localize.day(dayOfWeek, {
                  width: 'narrow',
                  context: 'formatting'
                });
              // Tu
              case 'EEEEEE':
                return localize.day(dayOfWeek, {
                  width: 'short',
                  context: 'formatting'
                });
              // Tuesday
              case 'EEEE':
              default:
                return localize.day(dayOfWeek, {
                  width: 'wide',
                  context: 'formatting'
                });
            }
          },
          // Local day of week
          e: function e(date, token, localize, options) {
            var dayOfWeek = date.getUTCDay();
            var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
            switch (token) {
              // Numerical value (Nth day of week with current locale or weekStartsOn)
              case 'e':
                return String(localDayOfWeek);
              // Padded numerical value
              case 'ee':
                return addLeadingZeros(localDayOfWeek, 2);
              // 1st, 2nd, ..., 7th
              case 'eo':
                return localize.ordinalNumber(localDayOfWeek, {
                  unit: 'day'
                });
              case 'eee':
                return localize.day(dayOfWeek, {
                  width: 'abbreviated',
                  context: 'formatting'
                });
              // T
              case 'eeeee':
                return localize.day(dayOfWeek, {
                  width: 'narrow',
                  context: 'formatting'
                });
              // Tu
              case 'eeeeee':
                return localize.day(dayOfWeek, {
                  width: 'short',
                  context: 'formatting'
                });
              // Tuesday
              case 'eeee':
              default:
                return localize.day(dayOfWeek, {
                  width: 'wide',
                  context: 'formatting'
                });
            }
          },
          // Stand-alone local day of week
          c: function c(date, token, localize, options) {
            var dayOfWeek = date.getUTCDay();
            var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
            switch (token) {
              // Numerical value (same as in `e`)
              case 'c':
                return String(localDayOfWeek);
              // Padded numerical value
              case 'cc':
                return addLeadingZeros(localDayOfWeek, token.length);
              // 1st, 2nd, ..., 7th
              case 'co':
                return localize.ordinalNumber(localDayOfWeek, {
                  unit: 'day'
                });
              case 'ccc':
                return localize.day(dayOfWeek, {
                  width: 'abbreviated',
                  context: 'standalone'
                });
              // T
              case 'ccccc':
                return localize.day(dayOfWeek, {
                  width: 'narrow',
                  context: 'standalone'
                });
              // Tu
              case 'cccccc':
                return localize.day(dayOfWeek, {
                  width: 'short',
                  context: 'standalone'
                });
              // Tuesday
              case 'cccc':
              default:
                return localize.day(dayOfWeek, {
                  width: 'wide',
                  context: 'standalone'
                });
            }
          },
          // ISO day of week
          i: function i(date, token, localize) {
            var dayOfWeek = date.getUTCDay();
            var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
            switch (token) {
              // 2
              case 'i':
                return String(isoDayOfWeek);
              // 02
              case 'ii':
                return addLeadingZeros(isoDayOfWeek, token.length);
              // 2nd
              case 'io':
                return localize.ordinalNumber(isoDayOfWeek, {
                  unit: 'day'
                });
              // Tue
              case 'iii':
                return localize.day(dayOfWeek, {
                  width: 'abbreviated',
                  context: 'formatting'
                });
              // T
              case 'iiiii':
                return localize.day(dayOfWeek, {
                  width: 'narrow',
                  context: 'formatting'
                });
              // Tu
              case 'iiiiii':
                return localize.day(dayOfWeek, {
                  width: 'short',
                  context: 'formatting'
                });
              // Tuesday
              case 'iiii':
              default:
                return localize.day(dayOfWeek, {
                  width: 'wide',
                  context: 'formatting'
                });
            }
          },
          // AM or PM
          a: function a(date, token, localize) {
            var hours = date.getUTCHours();
            var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
            switch (token) {
              case 'a':
              case 'aa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'abbreviated',
                  context: 'formatting'
                });
              case 'aaa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'abbreviated',
                  context: 'formatting'
                }).toLowerCase();
              case 'aaaaa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'narrow',
                  context: 'formatting'
                });
              case 'aaaa':
              default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'wide',
                  context: 'formatting'
                });
            }
          },
          // AM, PM, midnight, noon
          b: function b(date, token, localize) {
            var hours = date.getUTCHours();
            var dayPeriodEnumValue;
            if (hours === 12) {
              dayPeriodEnumValue = dayPeriodEnum.noon;
            } else if (hours === 0) {
              dayPeriodEnumValue = dayPeriodEnum.midnight;
            } else {
              dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
            }
            switch (token) {
              case 'b':
              case 'bb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'abbreviated',
                  context: 'formatting'
                });
              case 'bbb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'abbreviated',
                  context: 'formatting'
                }).toLowerCase();
              case 'bbbbb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'narrow',
                  context: 'formatting'
                });
              case 'bbbb':
              default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'wide',
                  context: 'formatting'
                });
            }
          },
          // in the morning, in the afternoon, in the evening, at night
          B: function B(date, token, localize) {
            var hours = date.getUTCHours();
            var dayPeriodEnumValue;
            if (hours >= 17) {
              dayPeriodEnumValue = dayPeriodEnum.evening;
            } else if (hours >= 12) {
              dayPeriodEnumValue = dayPeriodEnum.afternoon;
            } else if (hours >= 4) {
              dayPeriodEnumValue = dayPeriodEnum.morning;
            } else {
              dayPeriodEnumValue = dayPeriodEnum.night;
            }
            switch (token) {
              case 'B':
              case 'BB':
              case 'BBB':
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'abbreviated',
                  context: 'formatting'
                });
              case 'BBBBB':
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'narrow',
                  context: 'formatting'
                });
              case 'BBBB':
              default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                  width: 'wide',
                  context: 'formatting'
                });
            }
          },
          // Hour [1-12]
          h: function h(date, token, localize) {
            if (token === 'ho') {
              var hours = date.getUTCHours() % 12;
              if (hours === 0) hours = 12;
              return localize.ordinalNumber(hours, {
                unit: 'hour'
              });
            }
            return formatters$3.h(date, token);
          },
          // Hour [0-23]
          H: function H(date, token, localize) {
            if (token === 'Ho') {
              return localize.ordinalNumber(date.getUTCHours(), {
                unit: 'hour'
              });
            }
            return formatters$3.H(date, token);
          },
          // Hour [0-11]
          K: function K(date, token, localize) {
            var hours = date.getUTCHours() % 12;
            if (token === 'Ko') {
              return localize.ordinalNumber(hours, {
                unit: 'hour'
              });
            }
            return addLeadingZeros(hours, token.length);
          },
          // Hour [1-24]
          k: function k(date, token, localize) {
            var hours = date.getUTCHours();
            if (hours === 0) hours = 24;
            if (token === 'ko') {
              return localize.ordinalNumber(hours, {
                unit: 'hour'
              });
            }
            return addLeadingZeros(hours, token.length);
          },
          // Minute
          m: function m(date, token, localize) {
            if (token === 'mo') {
              return localize.ordinalNumber(date.getUTCMinutes(), {
                unit: 'minute'
              });
            }
            return formatters$3.m(date, token);
          },
          // Second
          s: function s(date, token, localize) {
            if (token === 'so') {
              return localize.ordinalNumber(date.getUTCSeconds(), {
                unit: 'second'
              });
            }
            return formatters$3.s(date, token);
          },
          // Fraction of second
          S: function S(date, token) {
            return formatters$3.S(date, token);
          },
          // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
          X: function X(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            if (timezoneOffset === 0) {
              return 'Z';
            }
            switch (token) {
              // Hours and optional minutes
              case 'X':
                return formatTimezoneWithOptionalMinutes(timezoneOffset);

              // Hours, minutes and optional seconds without `:` delimiter
              // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
              // so this token always has the same output as `XX`
              case 'XXXX':
              case 'XX':
                // Hours and minutes without `:` delimiter
                return formatTimezone(timezoneOffset);

              // Hours, minutes and optional seconds with `:` delimiter
              // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
              // so this token always has the same output as `XXX`
              case 'XXXXX':
              case 'XXX': // Hours and minutes with `:` delimiter
              default:
                return formatTimezone(timezoneOffset, ':');
            }
          },
          // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
          x: function x(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            switch (token) {
              // Hours and optional minutes
              case 'x':
                return formatTimezoneWithOptionalMinutes(timezoneOffset);

              // Hours, minutes and optional seconds without `:` delimiter
              // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
              // so this token always has the same output as `xx`
              case 'xxxx':
              case 'xx':
                // Hours and minutes without `:` delimiter
                return formatTimezone(timezoneOffset);

              // Hours, minutes and optional seconds with `:` delimiter
              // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
              // so this token always has the same output as `xxx`
              case 'xxxxx':
              case 'xxx': // Hours and minutes with `:` delimiter
              default:
                return formatTimezone(timezoneOffset, ':');
            }
          },
          // Timezone (GMT)
          O: function O(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            switch (token) {
              // Short
              case 'O':
              case 'OO':
              case 'OOO':
                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
              // Long
              case 'OOOO':
              default:
                return 'GMT' + formatTimezone(timezoneOffset, ':');
            }
          },
          // Timezone (specific non-location)
          z: function z(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timezoneOffset = originalDate.getTimezoneOffset();
            switch (token) {
              // Short
              case 'z':
              case 'zz':
              case 'zzz':
                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
              // Long
              case 'zzzz':
              default:
                return 'GMT' + formatTimezone(timezoneOffset, ':');
            }
          },
          // Seconds timestamp
          t: function t(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timestamp = Math.floor(originalDate.getTime() / 1000);
            return addLeadingZeros(timestamp, token.length);
          },
          // Milliseconds timestamp
          T: function T(date, token, _localize, options) {
            var originalDate = options._originalDate || date;
            var timestamp = originalDate.getTime();
            return addLeadingZeros(timestamp, token.length);
          }
        };
        function formatTimezoneShort(offset, dirtyDelimiter) {
          var sign = offset > 0 ? '-' : '+';
          var absOffset = Math.abs(offset);
          var hours = Math.floor(absOffset / 60);
          var minutes = absOffset % 60;
          if (minutes === 0) {
            return sign + String(hours);
          }
          var delimiter = dirtyDelimiter || '';
          return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
        }
        function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
          if (offset % 60 === 0) {
            var sign = offset > 0 ? '-' : '+';
            return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
          }
          return formatTimezone(offset, dirtyDelimiter);
        }
        function formatTimezone(offset, dirtyDelimiter) {
          var delimiter = dirtyDelimiter || '';
          var sign = offset > 0 ? '-' : '+';
          var absOffset = Math.abs(offset);
          var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
          var minutes = addLeadingZeros(absOffset % 60, 2);
          return sign + hours + delimiter + minutes;
        }
        var formatters$1 = formatters;
        var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
          switch (pattern) {
            case 'P':
              return formatLong.date({
                width: 'short'
              });
            case 'PP':
              return formatLong.date({
                width: 'medium'
              });
            case 'PPP':
              return formatLong.date({
                width: 'long'
              });
            case 'PPPP':
            default:
              return formatLong.date({
                width: 'full'
              });
          }
        };
        var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
          switch (pattern) {
            case 'p':
              return formatLong.time({
                width: 'short'
              });
            case 'pp':
              return formatLong.time({
                width: 'medium'
              });
            case 'ppp':
              return formatLong.time({
                width: 'long'
              });
            case 'pppp':
            default:
              return formatLong.time({
                width: 'full'
              });
          }
        };
        var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
          var matchResult = pattern.match(/(P+)(p+)?/) || [];
          var datePattern = matchResult[1];
          var timePattern = matchResult[2];
          if (!timePattern) {
            return dateLongFormatter(pattern, formatLong);
          }
          var dateTimeFormat;
          switch (datePattern) {
            case 'P':
              dateTimeFormat = formatLong.dateTime({
                width: 'short'
              });
              break;
            case 'PP':
              dateTimeFormat = formatLong.dateTime({
                width: 'medium'
              });
              break;
            case 'PPP':
              dateTimeFormat = formatLong.dateTime({
                width: 'long'
              });
              break;
            case 'PPPP':
            default:
              dateTimeFormat = formatLong.dateTime({
                width: 'full'
              });
              break;
          }
          return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
        };
        var longFormatters = {
          p: timeLongFormatter,
          P: dateTimeLongFormatter
        };
        var longFormatters$1 = longFormatters;
        var protectedDayOfYearTokens = ['D', 'DD'];
        var protectedWeekYearTokens = ['YY', 'YYYY'];
        function isProtectedDayOfYearToken(token) {
          return protectedDayOfYearTokens.indexOf(token) !== -1;
        }
        function isProtectedWeekYearToken(token) {
          return protectedWeekYearTokens.indexOf(token) !== -1;
        }
        function throwProtectedError(token, format, input) {
          if (token === 'YYYY') {
            throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
          } else if (token === 'YY') {
            throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
          } else if (token === 'D') {
            throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
          } else if (token === 'DD') {
            throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
          }
        }
        var formatDistanceLocale = {
          lessThanXSeconds: {
            one: 'less than a second',
            other: 'less than {{count}} seconds'
          },
          xSeconds: {
            one: '1 second',
            other: '{{count}} seconds'
          },
          halfAMinute: 'half a minute',
          lessThanXMinutes: {
            one: 'less than a minute',
            other: 'less than {{count}} minutes'
          },
          xMinutes: {
            one: '1 minute',
            other: '{{count}} minutes'
          },
          aboutXHours: {
            one: 'about 1 hour',
            other: 'about {{count}} hours'
          },
          xHours: {
            one: '1 hour',
            other: '{{count}} hours'
          },
          xDays: {
            one: '1 day',
            other: '{{count}} days'
          },
          aboutXWeeks: {
            one: 'about 1 week',
            other: 'about {{count}} weeks'
          },
          xWeeks: {
            one: '1 week',
            other: '{{count}} weeks'
          },
          aboutXMonths: {
            one: 'about 1 month',
            other: 'about {{count}} months'
          },
          xMonths: {
            one: '1 month',
            other: '{{count}} months'
          },
          aboutXYears: {
            one: 'about 1 year',
            other: 'about {{count}} years'
          },
          xYears: {
            one: '1 year',
            other: '{{count}} years'
          },
          overXYears: {
            one: 'over 1 year',
            other: 'over {{count}} years'
          },
          almostXYears: {
            one: 'almost 1 year',
            other: 'almost {{count}} years'
          }
        };
        var formatDistance$1 = function formatDistance(token, count, options) {
          var result;
          var tokenValue = formatDistanceLocale[token];
          if (typeof tokenValue === 'string') {
            result = tokenValue;
          } else if (count === 1) {
            result = tokenValue.one;
          } else {
            result = tokenValue.other.replace('{{count}}', count.toString());
          }
          if (options !== null && options !== void 0 && options.addSuffix) {
            if (options.comparison && options.comparison > 0) {
              return 'in ' + result;
            } else {
              return result + ' ago';
            }
          }
          return result;
        };
        var formatDistance$2 = formatDistance$1;
        function buildFormatLongFn(args) {
          return function () {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            // TODO: Remove String()
            var width = options.width ? String(options.width) : args.defaultWidth;
            var format = args.formats[width] || args.formats[args.defaultWidth];
            return format;
          };
        }
        var dateFormats = {
          full: 'EEEE, MMMM do, y',
          long: 'MMMM do, y',
          medium: 'MMM d, y',
          short: 'MM/dd/yyyy'
        };
        var timeFormats = {
          full: 'h:mm:ss a zzzz',
          long: 'h:mm:ss a z',
          medium: 'h:mm:ss a',
          short: 'h:mm a'
        };
        var dateTimeFormats = {
          full: "{{date}} 'at' {{time}}",
          long: "{{date}} 'at' {{time}}",
          medium: '{{date}}, {{time}}',
          short: '{{date}}, {{time}}'
        };
        var formatLong = {
          date: buildFormatLongFn({
            formats: dateFormats,
            defaultWidth: 'full'
          }),
          time: buildFormatLongFn({
            formats: timeFormats,
            defaultWidth: 'full'
          }),
          dateTime: buildFormatLongFn({
            formats: dateTimeFormats,
            defaultWidth: 'full'
          })
        };
        var formatLong$1 = formatLong;
        var formatRelativeLocale = {
          lastWeek: "'last' eeee 'at' p",
          yesterday: "'yesterday at' p",
          today: "'today at' p",
          tomorrow: "'tomorrow at' p",
          nextWeek: "eeee 'at' p",
          other: 'P'
        };
        var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
          return formatRelativeLocale[token];
        };
        var formatRelative$1 = formatRelative;
        function buildLocalizeFn(args) {
          return function (dirtyIndex, options) {
            var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
            var valuesArray;
            if (context === 'formatting' && args.formattingValues) {
              var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
              var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
              valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
            } else {
              var _defaultWidth = args.defaultWidth;
              var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
              valuesArray = args.values[_width] || args.values[_defaultWidth];
            }
            var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
            // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
            return valuesArray[index];
          };
        }
        var eraValues = {
          narrow: ['B', 'A'],
          abbreviated: ['BC', 'AD'],
          wide: ['Before Christ', 'Anno Domini']
        };
        var quarterValues = {
          narrow: ['1', '2', '3', '4'],
          abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
          wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
        };

        // Note: in English, the names of days of the week and months are capitalized.
        // If you are making a new locale based on this one, check if the same is true for the language you're working on.
        // Generally, formatted dates should look like they are in the middle of a sentence,
        // e.g. in Spanish language the weekdays and months should be in the lowercase.
        var monthValues = {
          narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
          abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
          wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
        };
        var dayValues = {
          narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
          short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
          abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
          wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
        };
        var dayPeriodValues = {
          narrow: {
            am: 'a',
            pm: 'p',
            midnight: 'mi',
            noon: 'n',
            morning: 'morning',
            afternoon: 'afternoon',
            evening: 'evening',
            night: 'night'
          },
          abbreviated: {
            am: 'AM',
            pm: 'PM',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'morning',
            afternoon: 'afternoon',
            evening: 'evening',
            night: 'night'
          },
          wide: {
            am: 'a.m.',
            pm: 'p.m.',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'morning',
            afternoon: 'afternoon',
            evening: 'evening',
            night: 'night'
          }
        };
        var formattingDayPeriodValues = {
          narrow: {
            am: 'a',
            pm: 'p',
            midnight: 'mi',
            noon: 'n',
            morning: 'in the morning',
            afternoon: 'in the afternoon',
            evening: 'in the evening',
            night: 'at night'
          },
          abbreviated: {
            am: 'AM',
            pm: 'PM',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'in the morning',
            afternoon: 'in the afternoon',
            evening: 'in the evening',
            night: 'at night'
          },
          wide: {
            am: 'a.m.',
            pm: 'p.m.',
            midnight: 'midnight',
            noon: 'noon',
            morning: 'in the morning',
            afternoon: 'in the afternoon',
            evening: 'in the evening',
            night: 'at night'
          }
        };
        var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
          var number = Number(dirtyNumber);

          // If ordinal numbers depend on context, for example,
          // if they are different for different grammatical genders,
          // use `options.unit`.
          //
          // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
          // 'day', 'hour', 'minute', 'second'.

          var rem100 = number % 100;
          if (rem100 > 20 || rem100 < 10) {
            switch (rem100 % 10) {
              case 1:
                return number + 'st';
              case 2:
                return number + 'nd';
              case 3:
                return number + 'rd';
            }
          }
          return number + 'th';
        };
        var localize = {
          ordinalNumber: ordinalNumber,
          era: buildLocalizeFn({
            values: eraValues,
            defaultWidth: 'wide'
          }),
          quarter: buildLocalizeFn({
            values: quarterValues,
            defaultWidth: 'wide',
            argumentCallback: function argumentCallback(quarter) {
              return quarter - 1;
            }
          }),
          month: buildLocalizeFn({
            values: monthValues,
            defaultWidth: 'wide'
          }),
          day: buildLocalizeFn({
            values: dayValues,
            defaultWidth: 'wide'
          }),
          dayPeriod: buildLocalizeFn({
            values: dayPeriodValues,
            defaultWidth: 'wide',
            formattingValues: formattingDayPeriodValues,
            defaultFormattingWidth: 'wide'
          })
        };
        var localize$1 = localize;
        function buildMatchFn(args) {
          return function (string) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var width = options.width;
            var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
            var matchResult = string.match(matchPattern);
            if (!matchResult) {
              return null;
            }
            var matchedString = matchResult[0];
            var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
            var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
              return pattern.test(matchedString);
            }) : findKey(parsePatterns, function (pattern) {
              return pattern.test(matchedString);
            });
            var value;
            value = args.valueCallback ? args.valueCallback(key) : key;
            value = options.valueCallback ? options.valueCallback(value) : value;
            var rest = string.slice(matchedString.length);
            return {
              value: value,
              rest: rest
            };
          };
        }
        function findKey(object, predicate) {
          for (var key in object) {
            if (object.hasOwnProperty(key) && predicate(object[key])) {
              return key;
            }
          }
          return undefined;
        }
        function findIndex(array, predicate) {
          for (var key = 0; key < array.length; key++) {
            if (predicate(array[key])) {
              return key;
            }
          }
          return undefined;
        }
        function buildMatchPatternFn(args) {
          return function (string) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var matchResult = string.match(args.matchPattern);
            if (!matchResult) return null;
            var matchedString = matchResult[0];
            var parseResult = string.match(args.parsePattern);
            if (!parseResult) return null;
            var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
            value = options.valueCallback ? options.valueCallback(value) : value;
            var rest = string.slice(matchedString.length);
            return {
              value: value,
              rest: rest
            };
          };
        }
        var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
        var parseOrdinalNumberPattern = /\d+/i;
        var matchEraPatterns = {
          narrow: /^(b|a)/i,
          abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
          wide: /^(before christ|before common era|anno domini|common era)/i
        };
        var parseEraPatterns = {
          any: [/^b/i, /^(a|c)/i]
        };
        var matchQuarterPatterns = {
          narrow: /^[1234]/i,
          abbreviated: /^q[1234]/i,
          wide: /^[1234](th|st|nd|rd)? quarter/i
        };
        var parseQuarterPatterns = {
          any: [/1/i, /2/i, /3/i, /4/i]
        };
        var matchMonthPatterns = {
          narrow: /^[jfmasond]/i,
          abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
          wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
        };
        var parseMonthPatterns = {
          narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
          any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
        };
        var matchDayPatterns = {
          narrow: /^[smtwf]/i,
          short: /^(su|mo|tu|we|th|fr|sa)/i,
          abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
          wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
        };
        var parseDayPatterns = {
          narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
          any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
        };
        var matchDayPeriodPatterns = {
          narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
          any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
        };
        var parseDayPeriodPatterns = {
          any: {
            am: /^a/i,
            pm: /^p/i,
            midnight: /^mi/i,
            noon: /^no/i,
            morning: /morning/i,
            afternoon: /afternoon/i,
            evening: /evening/i,
            night: /night/i
          }
        };
        var match = {
          ordinalNumber: buildMatchPatternFn({
            matchPattern: matchOrdinalNumberPattern,
            parsePattern: parseOrdinalNumberPattern,
            valueCallback: function valueCallback(value) {
              return parseInt(value, 10);
            }
          }),
          era: buildMatchFn({
            matchPatterns: matchEraPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseEraPatterns,
            defaultParseWidth: 'any'
          }),
          quarter: buildMatchFn({
            matchPatterns: matchQuarterPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseQuarterPatterns,
            defaultParseWidth: 'any',
            valueCallback: function valueCallback(index) {
              return index + 1;
            }
          }),
          month: buildMatchFn({
            matchPatterns: matchMonthPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseMonthPatterns,
            defaultParseWidth: 'any'
          }),
          day: buildMatchFn({
            matchPatterns: matchDayPatterns,
            defaultMatchWidth: 'wide',
            parsePatterns: parseDayPatterns,
            defaultParseWidth: 'any'
          }),
          dayPeriod: buildMatchFn({
            matchPatterns: matchDayPeriodPatterns,
            defaultMatchWidth: 'any',
            parsePatterns: parseDayPeriodPatterns,
            defaultParseWidth: 'any'
          })
        };
        var match$1 = match;

        /**
         * @type {Locale}
         * @category Locales
         * @summary English locale (United States).
         * @language English
         * @iso-639-2 eng
         * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
         * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
         */
        var locale = {
          code: 'en-US',
          formatDistance: formatDistance$2,
          formatLong: formatLong$1,
          formatRelative: formatRelative$1,
          localize: localize$1,
          match: match$1,
          options: {
            weekStartsOn: 0 /* Sunday */,
            firstWeekContainsDate: 1
          }
        };
        var defaultLocale = locale;

        // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
        //   (one of the certain letters followed by `o`)
        // - (\w)\1* matches any sequences of the same letter
        // - '' matches two quote characters in a row
        // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
        //   except a single quote symbol, which ends the sequence.
        //   Two quote characters do not end the sequence.
        //   If there is no matching single quote
        //   then the sequence will continue until the end of the string.
        // - . matches any single character unmatched by previous parts of the RegExps
        var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

        // This RegExp catches symbols escaped by quotes, and also
        // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
        var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
        var escapedStringRegExp = /^'([^]*?)'?$/;
        var doubleQuoteRegExp = /''/g;
        var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

        /**
         * @name format
         * @category Common Helpers
         * @summary Format the date.
         *
         * @description
         * Return the formatted date string in the given format. The result may vary by locale.
         *
         * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
         * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
         *
         * The characters wrapped between two single quotes characters (') are escaped.
         * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
         * (see the last example)
         *
         * Format of the string is based on Unicode Technical Standard #35:
         * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
         * with a few additions (see note 7 below the table).
         *
         * Accepted patterns:
         * | Unit                            | Pattern | Result examples                   | Notes |
         * |---------------------------------|---------|-----------------------------------|-------|
         * | Era                             | G..GGG  | AD, BC                            |       |
         * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
         * |                                 | GGGGG   | A, B                              |       |
         * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
         * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
         * |                                 | yy      | 44, 01, 00, 17                    | 5     |
         * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
         * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
         * |                                 | yyyyy   | ...                               | 3,5   |
         * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
         * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
         * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
         * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
         * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
         * |                                 | YYYYY   | ...                               | 3,5   |
         * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
         * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
         * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
         * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
         * |                                 | RRRRR   | ...                               | 3,5,7 |
         * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
         * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
         * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
         * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
         * |                                 | uuuuu   | ...                               | 3,5   |
         * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
         * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
         * |                                 | QQ      | 01, 02, 03, 04                    |       |
         * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
         * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
         * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
         * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
         * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
         * |                                 | qq      | 01, 02, 03, 04                    |       |
         * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
         * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
         * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
         * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
         * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
         * |                                 | MM      | 01, 02, ..., 12                   |       |
         * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
         * |                                 | MMMM    | January, February, ..., December  | 2     |
         * |                                 | MMMMM   | J, F, ..., D                      |       |
         * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
         * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
         * |                                 | LL      | 01, 02, ..., 12                   |       |
         * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
         * |                                 | LLLL    | January, February, ..., December  | 2     |
         * |                                 | LLLLL   | J, F, ..., D                      |       |
         * | Local week of year              | w       | 1, 2, ..., 53                     |       |
         * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
         * |                                 | ww      | 01, 02, ..., 53                   |       |
         * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
         * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
         * |                                 | II      | 01, 02, ..., 53                   | 7     |
         * | Day of month                    | d       | 1, 2, ..., 31                     |       |
         * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
         * |                                 | dd      | 01, 02, ..., 31                   |       |
         * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
         * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
         * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
         * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
         * |                                 | DDDD    | ...                               | 3     |
         * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
         * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
         * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
         * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
         * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
         * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
         * |                                 | ii      | 01, 02, ..., 07                   | 7     |
         * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
         * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
         * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
         * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
         * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
         * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
         * |                                 | ee      | 02, 03, ..., 01                   |       |
         * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
         * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
         * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
         * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
         * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
         * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
         * |                                 | cc      | 02, 03, ..., 01                   |       |
         * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
         * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
         * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
         * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
         * | AM, PM                          | a..aa   | AM, PM                            |       |
         * |                                 | aaa     | am, pm                            |       |
         * |                                 | aaaa    | a.m., p.m.                        | 2     |
         * |                                 | aaaaa   | a, p                              |       |
         * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
         * |                                 | bbb     | am, pm, noon, midnight            |       |
         * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
         * |                                 | bbbbb   | a, p, n, mi                       |       |
         * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
         * |                                 | BBBB    | at night, in the morning, ...     | 2     |
         * |                                 | BBBBB   | at night, in the morning, ...     |       |
         * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
         * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
         * |                                 | hh      | 01, 02, ..., 11, 12               |       |
         * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
         * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
         * |                                 | HH      | 00, 01, 02, ..., 23               |       |
         * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
         * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
         * |                                 | KK      | 01, 02, ..., 11, 00               |       |
         * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
         * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
         * |                                 | kk      | 24, 01, 02, ..., 23               |       |
         * | Minute                          | m       | 0, 1, ..., 59                     |       |
         * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
         * |                                 | mm      | 00, 01, ..., 59                   |       |
         * | Second                          | s       | 0, 1, ..., 59                     |       |
         * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
         * |                                 | ss      | 00, 01, ..., 59                   |       |
         * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
         * |                                 | SS      | 00, 01, ..., 99                   |       |
         * |                                 | SSS     | 000, 001, ..., 999                |       |
         * |                                 | SSSS    | ...                               | 3     |
         * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
         * |                                 | XX      | -0800, +0530, Z                   |       |
         * |                                 | XXX     | -08:00, +05:30, Z                 |       |
         * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
         * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
         * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
         * |                                 | xx      | -0800, +0530, +0000               |       |
         * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
         * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
         * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
         * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
         * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
         * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
         * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
         * | Seconds timestamp               | t       | 512969520                         | 7     |
         * |                                 | tt      | ...                               | 3,7   |
         * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
         * |                                 | TT      | ...                               | 3,7   |
         * | Long localized date             | P       | 04/29/1453                        | 7     |
         * |                                 | PP      | Apr 29, 1453                      | 7     |
         * |                                 | PPP     | April 29th, 1453                  | 7     |
         * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
         * | Long localized time             | p       | 12:00 AM                          | 7     |
         * |                                 | pp      | 12:00:00 AM                       | 7     |
         * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
         * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
         * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
         * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
         * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
         * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
         * Notes:
         * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
         *    are the same as "stand-alone" units, but are different in some languages.
         *    "Formatting" units are declined according to the rules of the language
         *    in the context of a date. "Stand-alone" units are always nominative singular:
         *
         *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
         *
         *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
         *
         * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
         *    the single quote characters (see below).
         *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
         *    the output will be the same as default pattern for this unit, usually
         *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
         *    are marked with "2" in the last column of the table.
         *
         *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
         *
         *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
         *
         *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
         *
         *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
         *
         *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
         *
         * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
         *    The output will be padded with zeros to match the length of the pattern.
         *
         *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
         *
         * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
         *    These tokens represent the shortest form of the quarter.
         *
         * 5. The main difference between `y` and `u` patterns are B.C. years:
         *
         *    | Year | `y` | `u` |
         *    |------|-----|-----|
         *    | AC 1 |   1 |   1 |
         *    | BC 1 |   1 |   0 |
         *    | BC 2 |   2 |  -1 |
         *
         *    Also `yy` always returns the last two digits of a year,
         *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
         *
         *    | Year | `yy` | `uu` |
         *    |------|------|------|
         *    | 1    |   01 |   01 |
         *    | 14   |   14 |   14 |
         *    | 376  |   76 |  376 |
         *    | 1453 |   53 | 1453 |
         *
         *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
         *    except local week-numbering years are dependent on `options.weekStartsOn`
         *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
         *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
         *
         * 6. Specific non-location timezones are currently unavailable in `date-fns`,
         *    so right now these tokens fall back to GMT timezones.
         *
         * 7. These patterns are not in the Unicode Technical Standard #35:
         *    - `i`: ISO day of week
         *    - `I`: ISO week of year
         *    - `R`: ISO week-numbering year
         *    - `t`: seconds timestamp
         *    - `T`: milliseconds timestamp
         *    - `o`: ordinal number modifier
         *    - `P`: long localized date
         *    - `p`: long localized time
         *
         * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
         *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
         *
         * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
         *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
         *
         * @param {Date|Number} date - the original date
         * @param {String} format - the string of tokens
         * @param {Object} [options] - an object with options.
         * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
         * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
         * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
         * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
         *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
         * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
         *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
         * @returns {String} the formatted date string
         * @throws {TypeError} 2 arguments required
         * @throws {RangeError} `date` must not be Invalid Date
         * @throws {RangeError} `options.locale` must contain `localize` property
         * @throws {RangeError} `options.locale` must contain `formatLong` property
         * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
         * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
         * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
         * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
         * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
         * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
         * @throws {RangeError} format string contains an unescaped latin alphabet character
         *
         * @example
         * // Represent 11 February 2014 in middle-endian format:
         * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
         * //=> '02/11/2014'
         *
         * @example
         * // Represent 2 July 2014 in Esperanto:
         * import { eoLocale } from 'date-fns/locale/eo'
         * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
         *   locale: eoLocale
         * })
         * //=> '2-a de julio 2014'
         *
         * @example
         * // Escape string by single quote characters:
         * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
         * //=> "3 o'clock"
         */

        function format(dirtyDate, dirtyFormatStr, options) {
          var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
          requiredArgs(2, arguments);
          var formatStr = String(dirtyFormatStr);
          var defaultOptions = getDefaultOptions();
          var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
          var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

          // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
          if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
            throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
          }
          var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

          // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
          if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
            throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
          }
          if (!locale.localize) {
            throw new RangeError('locale must contain localize property');
          }
          if (!locale.formatLong) {
            throw new RangeError('locale must contain formatLong property');
          }
          var originalDate = toDate(dirtyDate);
          if (!isValid(originalDate)) {
            throw new RangeError('Invalid time value');
          }

          // Convert the date in system timezone to the same date in UTC+00:00 timezone.
          // This ensures that when UTC functions will be implemented, locales will be compatible with them.
          // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
          var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
          var utcDate = subMilliseconds(originalDate, timezoneOffset);
          var formatterOptions = {
            firstWeekContainsDate: firstWeekContainsDate,
            weekStartsOn: weekStartsOn,
            locale: locale,
            _originalDate: originalDate
          };
          var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
            var firstCharacter = substring[0];
            if (firstCharacter === 'p' || firstCharacter === 'P') {
              var longFormatter = longFormatters$1[firstCharacter];
              return longFormatter(substring, locale.formatLong);
            }
            return substring;
          }).join('').match(formattingTokensRegExp).map(function (substring) {
            // Replace two single quote characters with one single quote character
            if (substring === "''") {
              return "'";
            }
            var firstCharacter = substring[0];
            if (firstCharacter === "'") {
              return cleanEscapedString(substring);
            }
            var formatter = formatters$1[firstCharacter];
            if (formatter) {
              if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
                throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
              }
              if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
                throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
              }
              return formatter(utcDate, substring, locale.localize, formatterOptions);
            }
            if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
              throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
            }
            return substring;
          }).join('');
          return result;
        }
        function cleanEscapedString(input) {
          var matched = input.match(escapedStringRegExp);
          if (!matched) {
            return input;
          }
          return matched[1].replace(doubleQuoteRegExp, "'");
        }
        function assign(target, object) {
          if (target == null) {
            throw new TypeError('assign requires that input parameter not be null or undefined');
          }
          for (var property in object) {
            if (Object.prototype.hasOwnProperty.call(object, property)) {
              target[property] = object[property];
            }
          }
          return target;
        }
        function cloneObject(object) {
          return assign({}, object);
        }
        var MINUTES_IN_DAY = 1440;
        var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
        var MINUTES_IN_MONTH = 43200;
        var MINUTES_IN_TWO_MONTHS = 86400;

        /**
         * @name formatDistance
         * @category Common Helpers
         * @summary Return the distance between the given dates in words.
         *
         * @description
         * Return the distance between the given dates in words.
         *
         * | Distance between dates                                            | Result              |
         * |-------------------------------------------------------------------|---------------------|
         * | 0 ... 30 secs                                                     | less than a minute  |
         * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
         * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
         * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
         * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
         * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
         * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
         * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
         * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
         * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
         * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
         * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
         * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
         * | N yrs ... N yrs 3 months                                          | about N years       |
         * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
         * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
         *
         * With `options.includeSeconds == true`:
         * | Distance between dates | Result               |
         * |------------------------|----------------------|
         * | 0 secs ... 5 secs      | less than 5 seconds  |
         * | 5 secs ... 10 secs     | less than 10 seconds |
         * | 10 secs ... 20 secs    | less than 20 seconds |
         * | 20 secs ... 40 secs    | half a minute        |
         * | 40 secs ... 60 secs    | less than a minute   |
         * | 60 secs ... 90 secs    | 1 minute             |
         *
         * @param {Date|Number} date - the date
         * @param {Date|Number} baseDate - the date to compare with
         * @param {Object} [options] - an object with options.
         * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
         * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
         * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
         * @returns {String} the distance in words
         * @throws {TypeError} 2 arguments required
         * @throws {RangeError} `date` must not be Invalid Date
         * @throws {RangeError} `baseDate` must not be Invalid Date
         * @throws {RangeError} `options.locale` must contain `formatDistance` property
         *
         * @example
         * // What is the distance between 2 July 2014 and 1 January 2015?
         * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
         * //=> '6 months'
         *
         * @example
         * // What is the distance between 1 January 2015 00:00:15
         * // and 1 January 2015 00:00:00, including seconds?
         * const result = formatDistance(
         *   new Date(2015, 0, 1, 0, 0, 15),
         *   new Date(2015, 0, 1, 0, 0, 0),
         *   { includeSeconds: true }
         * )
         * //=> 'less than 20 seconds'
         *
         * @example
         * // What is the distance from 1 January 2016
         * // to 1 January 2015, with a suffix?
         * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
         *   addSuffix: true
         * })
         * //=> 'about 1 year ago'
         *
         * @example
         * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
         * import { eoLocale } from 'date-fns/locale/eo'
         * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
         *   locale: eoLocale
         * })
         * //=> 'pli ol 1 jaro'
         */

        function formatDistance(dirtyDate, dirtyBaseDate, options) {
          var _ref, _options$locale;
          requiredArgs(2, arguments);
          var defaultOptions = getDefaultOptions();
          var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
          if (!locale.formatDistance) {
            throw new RangeError('locale must contain formatDistance property');
          }
          var comparison = compareAsc(dirtyDate, dirtyBaseDate);
          if (isNaN(comparison)) {
            throw new RangeError('Invalid time value');
          }
          var localizeOptions = assign(cloneObject(options), {
            addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),
            comparison: comparison
          });
          var dateLeft;
          var dateRight;
          if (comparison > 0) {
            dateLeft = toDate(dirtyBaseDate);
            dateRight = toDate(dirtyDate);
          } else {
            dateLeft = toDate(dirtyDate);
            dateRight = toDate(dirtyBaseDate);
          }
          var seconds = differenceInSeconds(dateRight, dateLeft);
          var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;
          var minutes = Math.round((seconds - offsetInSeconds) / 60);
          var months;

          // 0 up to 2 mins
          if (minutes < 2) {
            if (options !== null && options !== void 0 && options.includeSeconds) {
              if (seconds < 5) {
                return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);
              } else if (seconds < 10) {
                return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);
              } else if (seconds < 20) {
                return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);
              } else if (seconds < 40) {
                return locale.formatDistance('halfAMinute', 0, localizeOptions);
              } else if (seconds < 60) {
                return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);
              } else {
                return locale.formatDistance('xMinutes', 1, localizeOptions);
              }
            } else {
              if (minutes === 0) {
                return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);
              } else {
                return locale.formatDistance('xMinutes', minutes, localizeOptions);
              }
            }

            // 2 mins up to 0.75 hrs
          } else if (minutes < 45) {
            return locale.formatDistance('xMinutes', minutes, localizeOptions);

            // 0.75 hrs up to 1.5 hrs
          } else if (minutes < 90) {
            return locale.formatDistance('aboutXHours', 1, localizeOptions);

            // 1.5 hrs up to 24 hrs
          } else if (minutes < MINUTES_IN_DAY) {
            var hours = Math.round(minutes / 60);
            return locale.formatDistance('aboutXHours', hours, localizeOptions);

            // 1 day up to 1.75 days
          } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
            return locale.formatDistance('xDays', 1, localizeOptions);

            // 1.75 days up to 30 days
          } else if (minutes < MINUTES_IN_MONTH) {
            var days = Math.round(minutes / MINUTES_IN_DAY);
            return locale.formatDistance('xDays', days, localizeOptions);

            // 1 month up to 2 months
          } else if (minutes < MINUTES_IN_TWO_MONTHS) {
            months = Math.round(minutes / MINUTES_IN_MONTH);
            return locale.formatDistance('aboutXMonths', months, localizeOptions);
          }
          months = differenceInMonths(dateRight, dateLeft);

          // 2 months up to 12 months
          if (months < 12) {
            var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
            return locale.formatDistance('xMonths', nearestMonth, localizeOptions);

            // 1 year up to max Date
          } else {
            var monthsSinceStartOfYear = months % 12;
            var years = Math.floor(months / 12);

            // N years up to 1 years 3 months
            if (monthsSinceStartOfYear < 3) {
              return locale.formatDistance('aboutXYears', years, localizeOptions);

              // N years 3 months up to N years 9 months
            } else if (monthsSinceStartOfYear < 9) {
              return locale.formatDistance('overXYears', years, localizeOptions);

              // N years 9 months up to N year 12 months
            } else {
              return locale.formatDistance('almostXYears', years + 1, localizeOptions);
            }
          }
        }

        /**
         * @name formatDistanceToNow
         * @category Common Helpers
         * @summary Return the distance between the given date and now in words.
         * @pure false
         *
         * @description
         * Return the distance between the given date and now in words.
         *
         * | Distance to now                                                   | Result              |
         * |-------------------------------------------------------------------|---------------------|
         * | 0 ... 30 secs                                                     | less than a minute  |
         * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
         * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
         * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
         * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
         * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
         * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
         * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
         * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
         * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
         * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
         * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
         * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
         * | N yrs ... N yrs 3 months                                          | about N years       |
         * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
         * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
         *
         * With `options.includeSeconds == true`:
         * | Distance to now     | Result               |
         * |---------------------|----------------------|
         * | 0 secs ... 5 secs   | less than 5 seconds  |
         * | 5 secs ... 10 secs  | less than 10 seconds |
         * | 10 secs ... 20 secs | less than 20 seconds |
         * | 20 secs ... 40 secs | half a minute        |
         * | 40 secs ... 60 secs | less than a minute   |
         * | 60 secs ... 90 secs | 1 minute             |
         *
         * > ⚠️ Please note that this function is not present in the FP submodule as
         * > it uses `Date.now()` internally hence impure and can't be safely curried.
         *
         * @param {Date|Number} date - the given date
         * @param {Object} [options] - the object with options
         * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
         * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date
         * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
         * @returns {String} the distance in words
         * @throws {TypeError} 1 argument required
         * @throws {RangeError} `date` must not be Invalid Date
         * @throws {RangeError} `options.locale` must contain `formatDistance` property
         *
         * @example
         * // If today is 1 January 2015, what is the distance to 2 July 2014?
         * const result = formatDistanceToNow(
         *   new Date(2014, 6, 2)
         * )
         * //=> '6 months'
         *
         * @example
         * // If now is 1 January 2015 00:00:00,
         * // what is the distance to 1 January 2015 00:00:15, including seconds?
         * const result = formatDistanceToNow(
         *   new Date(2015, 0, 1, 0, 0, 15),
         *   {includeSeconds: true}
         * )
         * //=> 'less than 20 seconds'
         *
         * @example
         * // If today is 1 January 2015,
         * // what is the distance to 1 January 2016, with a suffix?
         * const result = formatDistanceToNow(
         *   new Date(2016, 0, 1),
         *   {addSuffix: true}
         * )
         * //=> 'in about 1 year'
         *
         * @example
         * // If today is 1 January 2015,
         * // what is the distance to 1 August 2016 in Esperanto?
         * const eoLocale = require('date-fns/locale/eo')
         * const result = formatDistanceToNow(
         *   new Date(2016, 7, 1),
         *   {locale: eoLocale}
         * )
         * //=> 'pli ol 1 jaro'
         */
        function formatDistanceToNow(dirtyDate, options) {
          requiredArgs(1, arguments);
          return formatDistance(dirtyDate, Date.now(), options);
        }
        var slider = "_slider_18hyd_17";
        var round = "_round_18hyd_60";
        var styles$8 = {
          "switch": "_switch_18hyd_2",
          slider: slider,
          round: round
        };
        var Toggle = function Toggle(_ref58) {
          var onChange = _ref58.onChange,
            checkedStatus = _ref58.checkedStatus;
          return /* @__PURE__ */jsxRuntimeExports.jsxs("label", {
            className: styles$8.switch,
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("input", {
              checked: checkedStatus,
              type: "checkbox",
              onChange: onChange
            }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
              className: "".concat(styles$8.slider, " ").concat(styles$8.round)
            })]
          });
        };
        var SlideIn = function SlideIn(_ref59) {
          var _ref59$isOpen = _ref59.isOpen,
            isOpen = _ref59$isOpen === void 0 ? true : _ref59$isOpen,
            children = _ref59.children,
            delay = _ref59.delay,
            _ref59$loop = _ref59.loop,
            loop = _ref59$loop === void 0 ? false : _ref59$loop;
          var transition = useTransition(isOpen, {
            from: {
              position: "absolute",
              right: "-1000px",
              opacity: 0
            },
            enter: {
              position: "relative",
              right: "0",
              opacity: 1
            },
            leave: {
              right: "0",
              opacity: 0
            },
            delay: delay,
            loop: loop
          });
          return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
            children: transition(function (style, isOpen2) {
              return !!isOpen2 && /* @__PURE__ */jsxRuntimeExports.jsx(animated.div, {
                style: style,
                children: children
              });
            })
          });
        };
        var SharedDialog = function SharedDialog(_ref60) {
          var nav = _ref60.nav,
            main = _ref60.main,
            primary = _ref60.primary,
            secondary = _ref60.secondary,
            _ref60$bg = _ref60.bg,
            bg = _ref60$bg === void 0 ? "primary" : _ref60$bg;
          var background = "";
          if (bg === "secondary") {
            background = "core-black-contrast-2";
          }
          if (bg === "primary") {
            background = "core-black-contrast";
          }
          return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
            children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "h-full bg-black absolute left-0 top-0 bottom-0 right-0 grid grid-rows-[auto_1fr] grid-cols-1 overflow-hidden",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "relative top-0 left-0 right-0 max-h-[54px]",
                children: nav ? nav : /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "h-[48px]"
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "overflow-y-auto grid grid-cols-[1fr_minmax(0,_560px)_1fr] lg:grid-cols-[1fr_minmax(0,_900px)_1fr]",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {}), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "grid md:grid-rows-1",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "px-6 pt-8 pb-8 h-max mb-8 ".concat(background, " rounded mx-4 md:mx-0 md:mt-0 md:self-center"),
                    children: [main, primary, secondary && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "md:block hidden",
                      children: secondary
                    })]
                  }), secondary && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "md:hidden flex mx-4 items-end mb-8",
                    children: secondary
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {})]
              })]
            })
          });
        };
        var ComposableModal = function ComposableModal(_ref61) {
          var children = _ref61.children,
            dismiss = _ref61.dismiss,
            extraClass = _ref61.extraClass;
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "fixed left-0 right-0 bottom-0 top-0 grid grid-cols-[1fr_minmax(0,_560px)_1fr] ".concat(extraClass && extraClass),
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
              onClick: dismiss,
              id: "backdrop",
              className: "backdrop-blur-sm fixed left-0 right-0 top-0 bottom-0"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {}), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "relative z-[21] h-full",
              children: children
            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {})]
          });
        };
        var Cross = function Cross(_ref62) {
          var dismiss = _ref62.dismiss;
          return /* @__PURE__ */jsxRuntimeExports.jsx("div", {
            onClick: dismiss,
            children: /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
              xmlns: "http://www.w3.org/2000/svg",
              width: "24",
              height: "24",
              viewBox: "0 0 24 24",
              strokeWidth: "1.5",
              stroke: "currentColor",
              fill: "none",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("path", {
                stroke: "none",
                d: "M0 0h24v24H0z",
                fill: "none"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                d: "M18 6l-12 12"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                d: "M6 6l12 12"
              })]
            })
          });
        };
        var BackupLogs = function BackupLogs() {
          var _reactExports$useCont12 = reactExports.useContext(appContext),
            _backupLogs = _reactExports$useCont12._backupLogs,
            promptBackupLogs = _reactExports$useCont12.promptBackupLogs,
            _promptBackupLogs = _reactExports$useCont12._promptBackupLogs,
            getBackupLogs = _reactExports$useCont12.getBackupLogs,
            loaded = _reactExports$useCont12.loaded;
          var springProps = useSpring({
            opacity: _promptBackupLogs ? 1 : 0,
            transform: _promptBackupLogs ? "translateY(0%) scale(1)" : "translateY(-50%) scale(0.8)",
            config: config$1.stiff
          });
          reactExports.useEffect(function () {
            if (loaded.current) getBackupLogs();
          }, [_backupLogs, loaded]);
          if (!_promptBackupLogs) {
            return null;
          }
          return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
            children: _promptBackupLogs && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(ComposableModal, {
              dismiss: promptBackupLogs,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "h-full flex items-center justify-center",
                children: /* @__PURE__ */jsxRuntimeExports.jsx(animated.div, {
                  style: springProps,
                  className: "max-w-lg w-full bg-black rounded p-4 min-h-[50vh] md:min-h-[350px] shadow-sm shadow-white mx-4",
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "grid grid-rows-[min-content]",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "grid grid-cols-[1fr_auto] p-4",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("h3", {
                        className: "font-bold text-white",
                        children: "Logs"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx(Cross, {
                        dismiss: promptBackupLogs
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "px-4 text-sm flex-1 overflow-y-auto",
                      children: _backupLogs.length > 0 ? /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "max-h-80 overflow-y-auto",
                        children: /* @__PURE__ */jsxRuntimeExports.jsxs("table", {
                          className: "w-full bg-black",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("thead", {
                            className: "bg-gradient-to-r from-blue-500 to-indigo-500 sticky top-0",
                            children: /* @__PURE__ */jsxRuntimeExports.jsxs("tr", {
                              children: [/* @__PURE__ */jsxRuntimeExports.jsx("th", {
                                className: "py-2 px-4 text-left text-white",
                                children: "Timestamp"
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("th", {
                                className: "py-2 px-4 text-left text-white",
                                children: "Status"
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("th", {
                                className: "py-2 px-4 text-left text-white",
                                children: "Size"
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("th", {
                                className: "py-2 px-4 text-left text-white",
                                children: "Message"
                              })]
                            })
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("tbody", {
                            children: _backupLogs.sort(function (a, b) {
                              return b.timestamp - a.timestamp;
                            }).map(function (log, index) {
                              return /* @__PURE__ */jsxRuntimeExports.jsxs("tr", {
                                className: index % 2 === 0 ? "bg-black text-white" : "bg-gray-900 text-white",
                                children: [/* @__PURE__ */jsxRuntimeExports.jsx("td", {
                                  className: "py-3 px-4",
                                  children: formatDistanceToNow(new Date(log.timestamp), {
                                    addSuffix: true
                                  })
                                }), /* @__PURE__ */jsxRuntimeExports.jsxs("td", {
                                  className: "py-3 px-4",
                                  children: [log.status === 1 && "Skipped", log.status === 2 && "Done", log.status === 0 && "Pending"]
                                }), /* @__PURE__ */jsxRuntimeExports.jsx("td", {
                                  className: "py-3 px-4",
                                  children: log.size
                                }), /* @__PURE__ */jsxRuntimeExports.jsx("td", {
                                  className: "py-3 px-4",
                                  children: log.message
                                })]
                              }, index);
                            })
                          })]
                        })
                      }) : /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "text-center text-gray-400",
                        children: "No logs available yet."
                      })
                    })]
                  })
                })
              })
            }), document.body)
          });
        };
        var ConfirmDelete = function ConfirmDelete(_ref63) {
          var isDeleteConfirmationOpen = _ref63.isDeleteConfirmationOpen,
            deleteBackup = _ref63.deleteBackup,
            close = _ref63.close;
          if (!isDeleteConfirmationOpen) {
            return null;
          }
          return /* @__PURE__ */jsxRuntimeExports.jsx(ComposableModal, {
            extraClass: "z-[1000]",
            children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "fixed inset-0 overflow-y-auto",
              children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("span", {
                  className: "hidden sm:inline-block sm:align-middle sm:h-screen",
                  "aria-hidden": "true",
                  children: "​"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6",
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                        className: "h-6 w-6 text-red-600",
                        xmlns: "http://www.w3.org/2000/svg",
                        fill: "none",
                        viewBox: "0 0 24 24",
                        stroke: "currentColor",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          strokeLinecap: "round",
                          strokeLinejoin: "round",
                          strokeWidth: 2,
                          d: "M6 18L18 6M6 6l12 12"
                        })
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "mt-3 text-center sm:mt-5",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("h3", {
                        className: "text-lg leading-6 font-medium text-gray-900",
                        children: "Delete Backup?"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "mt-2",
                        children: /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-sm text-gray-500",
                          children: ["Are you sure you want to delete the backup", " ", /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                            className: "font-medium break-all inline-block",
                            children: isDeleteConfirmationOpen
                          }), "?"]
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "mt-5 sm:mt-6",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("button", {
                        onClick: deleteBackup,
                        type: "button",
                        className: "inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:text-sm",
                        children: "Delete"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                        onClick: close,
                        type: "button",
                        className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm",
                        children: "Cancel"
                      })]
                    })]
                  })
                })]
              })
            })
          });
        };
        var Backups = function Backups() {
          var _reactExports$useStat61 = reactExports.useState(""),
            _reactExports$useStat62 = _slicedToArray2(_reactExports$useStat61, 2),
            searchText = _reactExports$useStat62[0],
            setSearchText = _reactExports$useStat62[1];
          var _reactExports$useCont13 = reactExports.useContext(appContext),
            getBackups = _reactExports$useCont13.getBackups,
            backups = _reactExports$useCont13.backups,
            _promptBackups = _reactExports$useCont13._promptBackups,
            promptBackups = _reactExports$useCont13.promptBackups,
            loaded = _reactExports$useCont13.loaded;
          var _reactExports$useStat63 = reactExports.useState(false),
            _reactExports$useStat64 = _slicedToArray2(_reactExports$useStat63, 2),
            _promptDeleteFile = _reactExports$useStat64[0],
            setPromptDeleteFile = _reactExports$useStat64[1];
          var _reactExports$useStat65 = reactExports.useState(-1),
            _reactExports$useStat66 = _slicedToArray2(_reactExports$useStat65, 2),
            dropdownIndex = _reactExports$useStat66[0],
            setDropdownIndex = _reactExports$useStat66[1];
          var dropdownRef = reactExports.useRef(null);
          var springProps = useSpring({
            opacity: _promptBackups ? 1 : 0,
            transform: _promptBackups ? "translateY(0%) scale(1)" : "translateY(-50%) scale(0.8)",
            config: config$1.stiff
          });
          var toggleDropdown = function toggleDropdown(index) {
            if (dropdownIndex === index) {
              setDropdownIndex(-1);
            } else {
              setDropdownIndex(index);
            }
          };
          var promptDeleteFile = function promptDeleteFile(file) {
            setPromptDeleteFile(file);
          };
          reactExports.useEffect(function () {
            var handleClickOutside = function handleClickOutside(event) {
              if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
                setDropdownIndex(-1);
              }
            };
            document.addEventListener("mousedown", handleClickOutside);
            return function () {
              document.removeEventListener("mousedown", handleClickOutside);
            };
          }, [dropdownRef]);
          reactExports.useEffect(function () {
            if (loaded && loaded.current) {
              getBackups();
            }
          }, [_promptBackups, loaded]);
          var handleChange = function handleChange(e) {
            setSearchText(e.target.value);
          };
          var createDownloadLink = function createDownloadLink(folder, mdsfile) {
            var origFilePath = "/".concat(folder, "/").concat(mdsfile);
            var newFilePath = "/my_downloads/".concat(mdsfile, "_minima_download_as_file_");
            window.MDS.file.copytoweb(origFilePath, newFilePath, function () {
              var url = "my_downloads/".concat(mdsfile, "_minima_download_as_file_");
              var temporaryLink = document.createElement("a");
              temporaryLink.style.display = "none";
              temporaryLink.target = "_blank";
              temporaryLink.href = url;
              temporaryLink.click();
              window.MDS.file.deletefromweb(url, function () {
                temporaryLink.remove();
              });
            });
          };
          var handleDelete = /*#__PURE__*/function () {
            var _ref64 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(backupFile) {
              return _regeneratorRuntime().wrap(function _callee16$(_context16) {
                while (1) switch (_context16.prev = _context16.next) {
                  case 0:
                    _context16.next = 2;
                    return deleteFile("/backups/" + backupFile).then(function () {
                      getBackups();
                      promptDeleteFile(false);
                    });
                  case 2:
                  case "end":
                    return _context16.stop();
                }
              }, _callee16);
            }));
            return function handleDelete(_x71) {
              return _ref64.apply(this, arguments);
            };
          }();
          var makeTimestamp = function makeTimestamp(filename) {
            var regex = /^(auto_)?minima_backup_(\d+)__([^_]+)_(\d+)\.bak$/;
            var match = filename.match(regex);
            filename.match(regex);
            if (!match) return "";
            var timestamp = parseInt(match[2]);
            var timestampDate = new Date(timestamp);
            return format(timestampDate, "dd/MM/yyyy HH:mm");
          };
          var makeAuto = function makeAuto(filename) {
            var regex = /^(auto_)?minima_backup_(\d+)__([^_]+)_(\d+)\.bak$/;
            var match = filename.match(regex);
            filename.match(regex);
            if (!match) return null;
            var isAuto = match[1] === "auto_";
            return isAuto ? "Auto" : "";
          };
          if (!_promptBackups) {
            return null;
          }
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [_promptDeleteFile && /* @__PURE__ */jsxRuntimeExports.jsx(ConfirmDelete, {
              deleteBackup: function deleteBackup() {
                return handleDelete(_promptDeleteFile);
              },
              close: function close() {
                return promptDeleteFile(false);
              },
              isDeleteConfirmationOpen: _promptDeleteFile
            }), _promptBackups && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(ComposableModal, {
              dismiss: promptBackups,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "h-full flex items-center justify-center",
                children: /* @__PURE__ */jsxRuntimeExports.jsx(animated.div, {
                  style: springProps,
                  className: "max-w-lg w-full bg-black rounded p-4 py-0 shadow-sm shadow-white mx-4 min-h-[50vh] md:min-h-[350px] max-h-32 overflow-y-auto",
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "grid grid-rows-[min-content]",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "sticky top-0 z-10 bg-black p-4",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "grid grid-cols-[1fr_auto]",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h3", {
                          className: "font-bold text-white",
                          children: "Latest Backups"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Cross, {
                          dismiss: promptBackups
                        })]
                      }), !!backups.length && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "my-4 bg-black",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                          disabled: false,
                          id: "search",
                          name: "search",
                          type: "text",
                          placeholder: "Search backups by date",
                          onChange: handleChange,
                          className: "w-full bg-black text-white border border-gray-600 rounded px-3 py-2",
                          autoComplete: "off"
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "px-4 text-sm",
                        children: backups.length ? /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                          className: "pb-4 grid grid-cols-1 gap-4 mb-4",
                          children: [searchText.length ? backups.filter(function (o) {
                            return makeTimestamp(o.name).includes(searchText);
                          }).map(function (b, i) {
                            return /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                              onClick: function onClick() {
                                return toggleDropdown(i);
                              },
                              className: "relative font-normal p-4 pr-1 core-grey-5 rounded color-black grid grid-cols-[1fr_auto] md:grid-cols-1",
                              children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("h3", {
                                  className: "font-bold",
                                  children: ["My backup", " ", /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                                    className: "text-violet-300",
                                    children: makeAuto(b.name)
                                  })]
                                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                                  className: "font-medium text-sm break-word",
                                  children: makeTimestamp(b.name)
                                })]
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                                className: "md:hidden flex items-center justify-center",
                                children: /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                                  onClick: function onClick() {
                                    return toggleDropdown(i);
                                  },
                                  xmlns: "http://www.w3.org/2000/svg",
                                  width: "24",
                                  height: "24",
                                  viewBox: "0 0 24 24",
                                  strokeWidth: "1.5",
                                  stroke: "#000000",
                                  fill: "none",
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round",
                                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                    stroke: "none",
                                    d: "M0 0h24v24H0z",
                                    fill: "none"
                                  }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                    d: "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"
                                  }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                    d: "M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"
                                  }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                    d: "M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"
                                  })]
                                })
                              }), dropdownIndex === i && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                                ref: dropdownRef,
                                className: "absolute right-0 md:left-0 mt-2 w-auto bg-white z-[1] border border-gray-200 rounded-md shadow-md",
                                children: [/* @__PURE__ */jsxRuntimeExports.jsx("a", {
                                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                                  onClick: function onClick(e) {
                                    e.stopPropagation();
                                    promptDeleteFile(b.name);
                                  },
                                  children: "Delete"
                                }), window.navigator.userAgent.includes("Minima Browser") && /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                                  onClick: function () {
                                    var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(e) {
                                      var fullPath;
                                      return _regeneratorRuntime().wrap(function _callee17$(_context17) {
                                        while (1) switch (_context17.prev = _context17.next) {
                                          case 0:
                                            e.stopPropagation();
                                            _context17.next = 3;
                                            return getPath("/backups/" + b.name);
                                          case 3:
                                            fullPath = _context17.sent;
                                            Android.shareFile(fullPath, "*/*");
                                          case 5:
                                          case "end":
                                            return _context17.stop();
                                        }
                                      }, _callee17);
                                    }));
                                    function onClick(_x72) {
                                      return _onClick.apply(this, arguments);
                                    }
                                    return onClick;
                                  }(),
                                  children: "Share"
                                }), /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                                  onClick: function onClick(e) {
                                    e.stopPropagation();
                                    if (window.navigator.userAgent.includes("Minima Browser")) {
                                      return Android.fileDownload(window.MDS.minidappuid, "/backups/" + b.name);
                                    }
                                    createDownloadLink("backups", b.name);
                                  },
                                  children: "Download"
                                })]
                              })]
                            }, i);
                          }) : backups.map(function (b, i) {
                            return /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                              onClick: function onClick() {
                                return toggleDropdown(i);
                              },
                              className: "relative font-normal p-4 pr-1 core-grey-5 rounded color-black grid grid-cols-[1fr_auto] md:grid-cols-1",
                              children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("h3", {
                                  className: "font-bold",
                                  children: ["My backup", " ", /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                                    className: "text-violet-300",
                                    children: makeAuto(b.name)
                                  })]
                                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                                  className: "font-medium text-sm break-word",
                                  children: makeTimestamp(b.name)
                                })]
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                                className: "md:hidden flex items-center justify-center",
                                children: /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                                  onClick: function onClick() {
                                    return toggleDropdown(i);
                                  },
                                  xmlns: "http://www.w3.org/2000/svg",
                                  width: "24",
                                  height: "24",
                                  viewBox: "0 0 24 24",
                                  strokeWidth: "1.5",
                                  stroke: "#000000",
                                  fill: "none",
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round",
                                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                    stroke: "none",
                                    d: "M0 0h24v24H0z",
                                    fill: "none"
                                  }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                    d: "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"
                                  }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                    d: "M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"
                                  }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                    d: "M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"
                                  })]
                                })
                              }), dropdownIndex === i && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                                ref: dropdownRef,
                                className: "absolute right-0 md:left-0 mt-2 w-auto bg-white z-[25] border border-gray-200 rounded-md shadow-md",
                                children: [/* @__PURE__ */jsxRuntimeExports.jsx("a", {
                                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                                  onClick: function onClick(e) {
                                    e.stopPropagation();
                                    promptDeleteFile(b.name);
                                  },
                                  children: "Delete"
                                }), window.navigator.userAgent.includes("Minima Browser") && /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                                  onClick: function () {
                                    var _onClick2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(e) {
                                      var fullPath;
                                      return _regeneratorRuntime().wrap(function _callee18$(_context18) {
                                        while (1) switch (_context18.prev = _context18.next) {
                                          case 0:
                                            e.stopPropagation();
                                            _context18.next = 3;
                                            return getPath("/backups/" + b.name);
                                          case 3:
                                            fullPath = _context18.sent;
                                            Android.shareFile(fullPath, "*/*");
                                          case 5:
                                          case "end":
                                            return _context18.stop();
                                        }
                                      }, _callee18);
                                    }));
                                    function onClick(_x73) {
                                      return _onClick2.apply(this, arguments);
                                    }
                                    return onClick;
                                  }(),
                                  children: "Share"
                                }), /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                                  onClick: function onClick(e) {
                                    e.stopPropagation();
                                    if (window.navigator.userAgent.includes("Minima Browser")) {
                                      return Android.fileDownload(window.MDS.minidappuid, "/backups/" + b.name);
                                    }
                                    createDownloadLink("backups", b.name);
                                  },
                                  children: "Download"
                                })]
                              })]
                            }, i);
                          }), !!searchText.length && backups.filter(function (o) {
                            return makeTimestamp(o.name).includes(searchText);
                          }).length === 0 && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-center",
                            children: "No results found"
                          })]
                        }) : /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                            className: "mb-6 sticky top-0 z-10 bg-black",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                              disabled: false,
                              id: "search",
                              name: "search",
                              type: "text",
                              placeholder: "Search backups by date",
                              onChange: handleChange,
                              className: "w-full bg-black text-white border border-gray-600 rounded px-3 py-2",
                              autoComplete: "off"
                            })
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-center text-gray-400",
                            children: "You have no recent backups"
                          })]
                        })
                      })
                    })]
                  })
                })
              })
            }), document.body)]
          });
        };
        var validationSchema$5 = create$3().shape({
          password: create$6().matches(/^[~!@#=?+<>,._'/()?a-zA-Z0-9-]+$/, "Invalid character").min(12, "Password must be at least 12 characters long"),
          confirmPassword: create$6().test("matchy-passwords", function (val) {
            var path = this.path,
              parent = this.parent,
              createError = this.createError;
            if (parent.password === void 0) {
              return true;
            }
            if (val === void 0 && parent.password !== void 0) {
              return createError({
                path: path,
                message: "Please re-enter your password"
              });
            }
            var pwd = parent.password;
            var matching = pwd === val;
            if (matching) {
              return true;
            }
            return createError({
              path: path,
              message: "Passwords do not match"
            });
          })
        });
        var BackupNode = function BackupNode() {
          var _reactExports$useCont14 = reactExports.useContext(appContext),
            promptBackups = _reactExports$useCont14.promptBackups,
            loaded = _reactExports$useCont14.loaded;
          var navigate = useNavigate();
          var _reactExports$useStat67 = reactExports.useState(0),
            _reactExports$useStat68 = _slicedToArray2(_reactExports$useStat67, 2),
            step = _reactExports$useStat68[0],
            setStep = _reactExports$useStat68[1];
          var _reactExports$useStat69 = reactExports.useState(false),
            _reactExports$useStat70 = _slicedToArray2(_reactExports$useStat69, 2),
            hidePassword = _reactExports$useStat70[0],
            togglePasswordVisibility = _reactExports$useStat70[1];
          var _reactExports$useStat71 = reactExports.useState(false),
            _reactExports$useStat72 = _slicedToArray2(_reactExports$useStat71, 2),
            hideConfirmPassword = _reactExports$useStat72[0],
            toggleConfirmPasswordVisiblity = _reactExports$useStat72[1];
          var _reactExports$useStat73 = reactExports.useState(false),
            _reactExports$useStat74 = _slicedToArray2(_reactExports$useStat73, 2),
            autoBackupStatus = _reactExports$useStat74[0],
            setAutoBackupStatus = _reactExports$useStat74[1];
          var _reactExports$useStat75 = reactExports.useState(false),
            _reactExports$useStat76 = _slicedToArray2(_reactExports$useStat75, 2),
            error = _reactExports$useStat76[0],
            setError = _reactExports$useStat76[1];
          var _reactExports$useStat77 = reactExports.useState(false),
            _reactExports$useStat78 = _slicedToArray2(_reactExports$useStat77, 2),
            data = _reactExports$useStat78[0],
            setData = _reactExports$useStat78[1];
          var _useAuth2 = useAuth(),
            authNavigate = _useAuth2.authNavigate;
          var _reactExports$useCont15 = reactExports.useContext(appContext),
            vaultLocked = _reactExports$useCont15.vaultLocked,
            setModal = _reactExports$useCont15.setModal,
            setBackButton = _reactExports$useCont15.setBackButton,
            displayHeaderBackButton = _reactExports$useCont15.displayBackButton,
            promptBackupLogs = _reactExports$useCont15.promptBackupLogs;
          reactExports.useEffect(function () {
            if (step === 0) {
              return setBackButton({
                display: true,
                to: "/dashboard",
                title: "Back"
              });
            }
            if (step === 1) {
              return setBackButton({
                display: true,
                onClickHandler: function onClickHandler() {
                  return setStep(0);
                },
                title: "Back"
              });
            }
          }, [step, setBackButton]);
          var createDownloadLink = function createDownloadLink(folder, mdsfile) {
            var origFilePath = "/".concat(folder, "/").concat(mdsfile);
            var newFilePath = "/my_downloads/".concat(mdsfile, "_minima_download_as_file_");
            window.MDS.file.copytoweb(origFilePath, newFilePath, function () {
              var url = "my_downloads/".concat(mdsfile, "_minima_download_as_file_");
              var temporaryLink = document.createElement("a");
              temporaryLink.style.display = "none";
              temporaryLink.target = "_blank";
              temporaryLink.href = url;
              temporaryLink.click();
              window.MDS.file.deletefromweb(url, function () {
                temporaryLink.remove();
              });
            });
          };
          var getBackupStatus$1 = /*#__PURE__*/function () {
            var _ref65 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
              return _regeneratorRuntime().wrap(function _callee19$(_context19) {
                while (1) switch (_context19.prev = _context19.next) {
                  case 0:
                    _context19.next = 2;
                    return getBackupStatus().then(function (response) {
                      if (response.status) {
                        var backupStatus = JSON.parse(response.value);
                        return setAutoBackupStatus(backupStatus.active);
                      }
                      return setAutoBackupStatus(false);
                    });
                  case 2:
                  case "end":
                    return _context19.stop();
                }
              }, _callee19);
            }));
            return function getBackupStatus$1() {
              return _ref65.apply(this, arguments);
            };
          }();
          reactExports.useEffect(function () {
            if (loaded.current) getBackupStatus$1();
          }, [loaded]);
          var toggleBackupStatus$1 = /*#__PURE__*/function () {
            var _ref66 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(e) {
              var togglingOff, togglingOn;
              return _regeneratorRuntime().wrap(function _callee21$(_context21) {
                while (1) switch (_context21.prev = _context21.next) {
                  case 0:
                    togglingOff = e.target.checked === false;
                    togglingOn = e.target.checked === true;
                    if (togglingOff) {
                      authNavigate("/dashboard/modal", PERMISSIONS.CAN_VIEW_MODAL);
                      setModal({
                        content: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "flex flex-col justify-center items-center",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("img", {
                            className: "mb-4",
                            alt: "informative",
                            src: "./assets/error.svg"
                          }), " ", /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-2xl mb-8",
                            children: "Deactivate auto backup?"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "mb-6",
                            children: "Daily backups help protect your node."
                          })]
                        }),
                        primaryActions: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          onClick: function () {
                            var _onClick3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
                              return _regeneratorRuntime().wrap(function _callee20$(_context20) {
                                while (1) switch (_context20.prev = _context20.next) {
                                  case 0:
                                    _context20.next = 2;
                                    return toggleBackupStatus(e.target.checked);
                                  case 2:
                                    window.MDS.keypair.set("autopassword", "");
                                    setModal({
                                      content: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                                        className: "flex flex-col text-center justify-center items-center",
                                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("img", {
                                          className: "mb-4",
                                          alt: "informative",
                                          src: "./assets/error.svg"
                                        }), " ", /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                                          className: "text-2xl mb-8",
                                          children: "Auto-backup deactivated"
                                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                                          className: "mb-6",
                                          children: "To re-activate auto-backup, go to Backup Node in the Settings menu."
                                        })]
                                      }),
                                      primaryActions: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
                                      secondaryActions: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                                        variant: "tertiary",
                                        onClick: function onClick() {
                                          return authNavigate("/dashboard/backup", []);
                                        },
                                        children: "Cancel"
                                      })
                                    });
                                  case 4:
                                  case "end":
                                    return _context20.stop();
                                }
                              }, _callee20);
                            }));
                            function onClick() {
                              return _onClick3.apply(this, arguments);
                            }
                            return onClick;
                          }(),
                          children: "Turn off auto-backup"
                        }),
                        secondaryActions: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          variant: "tertiary",
                          onClick: function onClick() {
                            return authNavigate("/dashboard/backup", []);
                          },
                          children: "Cancel"
                        })
                      });
                    }
                    if (togglingOn) {
                      authNavigate("/dashboard/backup/autocreatepassword", PERMISSIONS.CAN_VIEW_AUTOCREATEPASSWORD);
                    }
                    getBackupStatus$1();
                  case 5:
                  case "end":
                    return _context21.stop();
                }
              }, _callee21);
            }));
            return function toggleBackupStatus$1(_x74) {
              return _ref66.apply(this, arguments);
            };
          }();
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsx(Backups, {}), step === 0 && /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
              isOpen: true,
              delay: 0,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "flex flex-col h-full bg-black px-4 pb-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col h-full",
                  children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                    to: "/dashboard",
                    title: "Back"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mt-6 text-2xl mb-8 text-left",
                    children: "Backup node"
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "flex flex-col gap-5",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "text-left",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "mb-3",
                          children: ["Your backup will contain your private keys, current chain and the proofs of your coins that no one else has. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "It is recommended to backup your node at least monthly to ensure a successful restore. The more recent your backup is, the easier it will be to re-sync to the chain when restoring."]
                        })
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: " text-left",
                      children: "Before taking a backup, check that you are in sync with the chain."
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "core-black-contrast-2 p-4 rounded",
                      children: [!vaultLocked && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: " text-left mb-6",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-base pb-4 font-bold",
                          children: "Your node is unlocked."
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-base font-medium",
                          children: ["Consider", " ", /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                            className: "hover:cursor-pointer",
                            onClick: function onClick() {
                              return navigate("/dashboard/lockprivatekeys");
                            },
                            children: "locking"
                          }), " ", "your private keys so they are not exposed if someone gets hold of your backup."]
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                        onClick: function onClick() {
                          return setStep(1);
                        },
                        children: "Backup node"
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "text-left",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "text-sm password-label mr-4 ml-4",
                        children: "Always store your backup in a secure location offline and never share your backup with anyone."
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      onClick: promptBackups,
                      className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer",
                      children: ["Browse internal backups", " ", /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "absolute right-0 top-0 h-full px-5 flex items-center",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                          width: "8",
                          height: "12",
                          viewBox: "0 0 8 12",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                            d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                            fill: "#F4F4F5"
                          })
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("span", {
                          className: "make-svg-inline",
                          children: ["Auto-backup", " ", /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            className: "mx-2 mb-1",
                            xmlns: "http://www.w3.org/2000/svg",
                            width: "24",
                            height: "24",
                            viewBox: "0 0 24 24",
                            fill: "none",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_583_16266",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "24",
                              height: "24",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                width: "24",
                                height: "24",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_583_16266)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M6.49998 19.5C5.11794 19.5 3.9391 19.0205 2.96345 18.0617C1.98782 17.1029 1.5 15.9311 1.5 14.5461C1.5 13.3038 1.89968 12.2112 2.69905 11.2683C3.49842 10.3253 4.48976 9.76667 5.67308 9.59232C5.99359 8.09744 6.74519 6.875 7.92788 5.925C9.11056 4.975 10.4679 4.5 12 4.5C13.8107 4.5 15.3467 5.13066 16.608 6.39198C17.8693 7.65328 18.5 9.18928 18.5 11V11.5H18.8077C19.8615 11.5821 20.7403 12.0058 21.4442 12.7712C22.148 13.5365 22.5 14.4461 22.5 15.5C22.5 16.6153 22.1153 17.5609 21.3461 18.3365C20.5769 19.1121 19.6346 19.5 18.5192 19.5H13.0577C12.5525 19.5 12.125 19.325 11.775 18.975C11.425 18.625 11.25 18.1974 11.25 17.6923V12.2153L9.39998 14.0346L8.34615 12.9904L12 9.33655L15.6538 12.9904L14.6 14.0346L12.75 12.2153V17.6923C12.75 17.7692 12.782 17.8397 12.8461 17.9038C12.9102 17.9679 12.9807 18 13.0577 18H18.5C19.2 18 19.7916 17.7583 20.275 17.275C20.7583 16.7916 21 16.2 21 15.5C21 14.8 20.7583 14.2083 20.275 13.725C19.7916 13.2416 19.2 13 18.5 13H17V11C17 9.61664 16.5125 8.43748 15.5375 7.46248C14.5625 6.48748 13.3833 5.99998 12 5.99998C10.6166 5.99998 9.43748 6.48748 8.46248 7.46248C7.48748 8.43748 6.99998 9.61664 6.99998 11H6.48075C5.53332 11 4.71633 11.3416 4.02978 12.025C3.34324 12.7083 2.99998 13.5333 2.99998 14.5C2.99998 15.4666 3.34164 16.2916 4.02498 16.975C4.70831 17.6583 5.53331 18 6.49998 18H8.99998V19.5H6.49998Z",
                                fill: "#F9F9FA"
                              })
                            })]
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          className: "absolute right-0 top-0 h-full px-5 flex items-center",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx(Toggle, {
                            checkedStatus: autoBackupStatus,
                            onChange: toggleBackupStatus$1
                          })
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "flex justify-end",
                        children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          onClick: promptBackupLogs,
                          className: "flex gap-1 items-center",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("a", {
                            className: "text-sm cursor-pointer",
                            children: "View backup logs"
                          }), /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            xmlns: "http://www.w3.org/2000/svg",
                            width: "16",
                            height: "16",
                            viewBox: "0 0 24 24",
                            strokeWidth: "1.5",
                            stroke: "#ffec00",
                            fill: "none",
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              stroke: "none",
                              d: "M0 0h24v24H0z",
                              fill: "none"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M9 9v-1a3 3 0 0 1 6 0v1"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M8 9h8a6 6 0 0 1 1 3v3a5 5 0 0 1 -10 0v-3a6 6 0 0 1 1 -3"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M3 13l4 0"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M17 13l4 0"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M12 20l0 -6"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M4 19l3.35 -2"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M20 19l-3.35 -2"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M4 7l3.75 2.4"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M20 7l-3.75 2.4"
                            })]
                          })]
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "text-left",
                      children: /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                        className: "text-sm password-label mr-4 ml-4",
                        children: ["Auto backups will be taken every 24 hours. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Only the most recent 14 backups will be stored (including manual backups), so you should download and move them to an offline device. The password provided will be required if you need to restore the backup."]
                      })
                    })]
                  })]
                })
              })
            }), step === 1 && /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
              isOpen: true,
              delay: 0,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "flex flex-col h-full bg-black px-4 pb-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col h-full",
                  children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                    onClickHandler: function onClickHandler() {
                      return setStep(0);
                    },
                    title: "Back"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mt-6 text-2xl mb-8 text-left",
                    children: "Create password"
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "flex flex-col gap-5",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "text-left",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "mb-3",
                          children: ["Create a password for this backup, you will be required to enter this password if you need to restore this backup.", " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "This is not the same as the password used to lock your private keys."]
                        })
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
                      validationSchema: validationSchema$5,
                      initialValues: {
                        password: "",
                        confirmPassword: "",
                        txpows: 0
                      },
                      onSubmit: function () {
                        var _onSubmit2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(formData) {
                          var now, dateCreation, fileName, fullPath, password;
                          return _regeneratorRuntime().wrap(function _callee22$(_context22) {
                            while (1) switch (_context22.prev = _context22.next) {
                              case 0:
                                _context22.prev = 0;
                                now = /* @__PURE__ */new Date();
                                dateCreation = format(now, "__dMMMyyyy_Hmm");
                                fileName = "minima_backup_".concat(now.getTime()) + dateCreation + ".bak";
                                _context22.next = 6;
                                return getPath("/backups/" + fileName);
                              case 6:
                                fullPath = _context22.sent;
                                password = formData.password;
                                _context22.next = 10;
                                return createBackup(fullPath, password).then(function (resp) {
                                  setData(resp);
                                }).catch(function (err) {
                                  throw err;
                                });
                              case 10:
                                _context22.next = 15;
                                break;
                              case 12:
                                _context22.prev = 12;
                                _context22.t0 = _context22["catch"](0);
                                setError(_context22.t0);
                              case 15:
                              case "end":
                                return _context22.stop();
                            }
                          }, _callee22, null, [[0, 12]]);
                        }));
                        function onSubmit(_x75) {
                          return _onSubmit2.apply(this, arguments);
                        }
                        return onSubmit;
                      }(),
                      children: function children(_ref67) {
                        var handleSubmit = _ref67.handleSubmit,
                          isSubmitting = _ref67.isSubmitting,
                          isValid = _ref67.isValid,
                          errors = _ref67.errors,
                          values = _ref67.values,
                          touched = _ref67.touched,
                          handleChange = _ref67.handleChange,
                          handleBlur = _ref67.handleBlur;
                        return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                            className: "core-black-contrast-2 p-4 rounded flex flex-col gap-6",
                            children: /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                              autoComplete: "off",
                              onSubmit: handleSubmit,
                              className: "flex flex-col gap-4",
                              children: [/* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                                disabled: isSubmitting,
                                extraClass: "core-black-contrast",
                                autoComplete: "new-password",
                                handleEndIconClick: function handleEndIconClick() {
                                  return togglePasswordVisibility(function (prevState) {
                                    return !prevState;
                                  });
                                },
                                type: !hidePassword ? "password" : "text",
                                placeholder: "Enter password",
                                name: "password",
                                id: "password",
                                error: touched.password && errors.password ? errors.password : false,
                                value: values.password,
                                onChange: handleChange,
                                onBlur: handleBlur,
                                endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                                  toggle: hidePassword
                                })
                              }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                                disabled: isSubmitting || values.password.length === 0,
                                extraClass: "core-black-contrast",
                                autoComplete: "new-password",
                                handleEndIconClick: function handleEndIconClick() {
                                  return toggleConfirmPasswordVisiblity(function (prevState) {
                                    return !prevState;
                                  });
                                },
                                type: !hideConfirmPassword ? "password" : "text",
                                placeholder: "Confirm password",
                                name: "confirmPassword",
                                id: "confirmPassword",
                                error: touched.confirmPassword && errors.confirmPassword ? errors.confirmPassword : false,
                                value: values.confirmPassword,
                                onChange: handleChange,
                                onBlur: handleBlur,
                                endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                                  toggle: hideConfirmPassword
                                })
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                                className: "flex flex-col",
                                children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                                  type: "submit",
                                  disabled: isSubmitting || !isValid,
                                  children: "Backup node"
                                })
                              })]
                            })
                          })
                        });
                      }
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "text-left",
                      children: /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                        className: "text-sm password-label mr-4 ml-4",
                        children: ["Enter a password over 12 characters using a-z, A-Z, 0-9 and", " ", "!@#=?+<>,.-_'()/", " symbols only. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Your password cannot contain spaces. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " Please make sure you save this password somewhere safe, it cannot be recovered if lost."]
                      })
                    })]
                  })]
                })
              })
            }), data && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                delay: 0,
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "mb-8 flex items-center flex-col text-center",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                    className: "mb-2",
                    width: "64",
                    height: "64",
                    viewBox: "0 0 64 64",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                      id: "mask0_850_14572",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                        width: "64",
                        height: "64",
                        fill: "#D9D9D9"
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                      mask: "url(#mask0_850_14572)",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                        d: "M16.8205 51.9997C15.4735 51.9997 14.3333 51.5331 13.4 50.5997C12.4667 49.6664 12 48.5262 12 47.1792V39.9998H15.9999V47.1792C15.9999 47.3844 16.0854 47.5724 16.2563 47.7434C16.4273 47.9143 16.6154 47.9998 16.8205 47.9998H47.1793C47.3845 47.9998 47.5726 47.9143 47.7435 47.7434C47.9145 47.5724 47.9999 47.3844 47.9999 47.1792V39.9998H51.9999V47.1792C51.9999 48.5262 51.5332 49.6664 50.5999 50.5997C49.6665 51.5331 48.5264 51.9997 47.1793 51.9997H16.8205ZM31.9999 41.6407L20.6155 30.2563L23.4257 27.3641L30 33.9384V11.5383H33.9999V33.9384L40.5742 27.3641L43.3844 30.2563L31.9999 41.6407Z",
                        fill: "#F4F4F5"
                      })
                    })]
                  }), " ", /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                    className: "text-2xl mb-8",
                    children: "Download your backup"
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                    className: "break-all",
                    children: ["Download your backup file locally ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                      className: "text-good",
                      children: data.file.split("/backups/")[1] ? data.file.split("/backups/")[1] : data.file.split("\\backups\\")[1]
                    }), " ", "which was create on block", " ", /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                      className: "text-good",
                      children: data.block
                    }), " with a size of ", /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                      className: "text-good",
                      children: data.size
                    }), " and save it in ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "a secure location."]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    className: "text-sm mt-4 opacity-80",
                    children: "(It will already be stored in your internal backups)"
                  })]
                })
              }),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "primary",
                onClick: function onClick() {
                  if (window.navigator.userAgent.includes("Minima Browser")) {
                    return Android.fileDownload(window.MDS.minidappuid, "/backups/" + data.file.split("/backups/")[1]);
                  }
                  createDownloadLink("backups", data.file.split("/backups/")[1] ? data.file.split("/backups/")[1] : data.file.split("\\backups\\")[1]);
                },
                children: "Download backup"
              }),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                extraClass: "mt-4",
                variant: "tertiary",
                onClick: function onClick() {
                  setData(false);
                  setStep(0);
                },
                children: "Close"
              })
            }), document.body), error && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                    id: "mask0_594_13339",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "64",
                    height: "64",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                      width: "64",
                      height: "64",
                      fill: "#D9D9D9"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                    mask: "url(#mask0_594_13339)",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                      fill: "#F4F4F5"
                    })
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-8 text-center",
                  children: "Hmm.. something went wrong."
                }), typeof error === "string" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                  children: error
                }), _typeof2(error) === "object" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                  children: JSON.stringify(error)
                })]
              }),
              primary: null,
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "tertiary",
                onClick: function onClick() {
                  setError(false);
                },
                children: "Cancel"
              })
            }), document.body), /* @__PURE__ */jsxRuntimeExports.jsx(BackupLogs, {})]
          });
        };
        var FileChooser = function FileChooser(_ref68) {
          var accept = _ref68.accept,
            onChange = _ref68.onChange,
            onBlur = _ref68.onBlur,
            placeholder = _ref68.placeholder,
            autoComplete = _ref68.autoComplete,
            type = _ref68.type,
            name = _ref68.name,
            id = _ref68.id,
            extraClass = _ref68.extraClass,
            endIcon = _ref68.endIcon,
            error = _ref68.error,
            handleEndIconClick = _ref68.handleEndIconClick,
            onKeyUp = _ref68.onKeyUp,
            keyValue = _ref68.keyValue,
            disabled = _ref68.disabled;
          var _reactExports$useStat79 = reactExports.useState(false),
            _reactExports$useStat80 = _slicedToArray2(_reactExports$useStat79, 2),
            focus = _reactExports$useStat80[0],
            setFocus = _reactExports$useStat80[1];
          var wrapperBase = "flex flex-row relative";
          var base = "core-grey-20 font-medium color-black w-full px-4 py-3.5 rounded rounded-r-none disabled:opacity-40 disabled:cursor-not-allowed focus:outline-none";
          if (extraClass) {
            base += " ".concat(extraClass);
          }
          if (error) {
            wrapperBase += " form-error-border";
          }
          if (focus) {
            wrapperBase += " input-outline";
          }
          if (!focus) {
            wrapperBase += " input-no-outline";
          }
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "flex flex-col gap-2",
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: wrapperBase,
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("input", {
                disabled: disabled,
                autoComplete: autoComplete ? autoComplete : "",
                onBlur: onBlur,
                name: name,
                id: id,
                type: type,
                placeholder: placeholder,
                className: "".concat(base, " ").concat(endIcon ? "pr-12" : ""),
                onChange: onChange,
                accept: accept,
                onKeyUp: onKeyUp,
                onFocus: function onFocus() {
                  return setFocus(true);
                }
              }, keyValue), !!endIcon && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                onClick: disabled ? void 0 : handleEndIconClick,
                className: "pr-4 absolute right-[1px] top-[12.5px] bottom-0",
                children: endIcon
              })]
            }), error && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "text-sm form-error-message text-left",
              children: error
            })]
          });
        };
        var tooltip = "_tooltip_1frir_1";
        var styles$7 = {
          tooltip: tooltip,
          "tooltip-hook": "_tooltip-hook_1frir_20"
        };
        var Tooltip = function Tooltip(_ref69) {
          var content = _ref69.content,
            position = _ref69.position,
            onClick = _ref69.onClick,
            extraClass = _ref69.extraClass;
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            onClick: onClick,
            className: "".concat(styles$7.tooltip, " ").concat(extraClass),
            children: [content, /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: styles$7["tooltip-hook"],
              style: {
                left: position + "px"
              }
            })]
          });
        };
        var lottie$1 = {
          exports: {}
        };
        (function (module, exports) {
          typeof navigator !== "undefined" && function (global, factory) {
            module.exports = factory();
          }(commonjsGlobal, function () {
            var svgNS = 'http://www.w3.org/2000/svg';
            var locationHref = '';
            var _useWebWorker = false;
            var initialDefaultFrame = -999999;
            var setWebWorker = function setWebWorker(flag) {
              _useWebWorker = !!flag;
            };
            var getWebWorker = function getWebWorker() {
              return _useWebWorker;
            };
            var setLocationHref = function setLocationHref(value) {
              locationHref = value;
            };
            var getLocationHref = function getLocationHref() {
              return locationHref;
            };
            function createTag(type) {
              // return {appendChild:function(){},setAttribute:function(){},style:{}}
              return document.createElement(type);
            }
            function extendPrototype(sources, destination) {
              var i;
              var len = sources.length;
              var sourcePrototype;
              for (i = 0; i < len; i += 1) {
                sourcePrototype = sources[i].prototype;
                for (var attr in sourcePrototype) {
                  if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr)) destination.prototype[attr] = sourcePrototype[attr];
                }
              }
            }
            function getDescriptor(object, prop) {
              return Object.getOwnPropertyDescriptor(object, prop);
            }
            function createProxyFunction(prototype) {
              function ProxyFunction() {}
              ProxyFunction.prototype = prototype;
              return ProxyFunction;
            }

            // import Howl from '../../3rd_party/howler';
            var audioControllerFactory = function () {
              function AudioController(audioFactory) {
                this.audios = [];
                this.audioFactory = audioFactory;
                this._volume = 1;
                this._isMuted = false;
              }
              AudioController.prototype = {
                addAudio: function addAudio(audio) {
                  this.audios.push(audio);
                },
                pause: function pause() {
                  var i;
                  var len = this.audios.length;
                  for (i = 0; i < len; i += 1) {
                    this.audios[i].pause();
                  }
                },
                resume: function resume() {
                  var i;
                  var len = this.audios.length;
                  for (i = 0; i < len; i += 1) {
                    this.audios[i].resume();
                  }
                },
                setRate: function setRate(rateValue) {
                  var i;
                  var len = this.audios.length;
                  for (i = 0; i < len; i += 1) {
                    this.audios[i].setRate(rateValue);
                  }
                },
                createAudio: function createAudio(assetPath) {
                  if (this.audioFactory) {
                    return this.audioFactory(assetPath);
                  }
                  if (window.Howl) {
                    return new window.Howl({
                      src: [assetPath]
                    });
                  }
                  return {
                    isPlaying: false,
                    play: function play() {
                      this.isPlaying = true;
                    },
                    seek: function seek() {
                      this.isPlaying = false;
                    },
                    playing: function playing() {},
                    rate: function rate() {},
                    setVolume: function setVolume() {}
                  };
                },
                setAudioFactory: function setAudioFactory(audioFactory) {
                  this.audioFactory = audioFactory;
                },
                setVolume: function setVolume(value) {
                  this._volume = value;
                  this._updateVolume();
                },
                mute: function mute() {
                  this._isMuted = true;
                  this._updateVolume();
                },
                unmute: function unmute() {
                  this._isMuted = false;
                  this._updateVolume();
                },
                getVolume: function getVolume() {
                  return this._volume;
                },
                _updateVolume: function _updateVolume() {
                  var i;
                  var len = this.audios.length;
                  for (i = 0; i < len; i += 1) {
                    this.audios[i].volume(this._volume * (this._isMuted ? 0 : 1));
                  }
                }
              };
              return function () {
                return new AudioController();
              };
            }();
            var createTypedArray = function () {
              function createRegularArray(type, len) {
                var i = 0;
                var arr = [];
                var value;
                switch (type) {
                  case 'int16':
                  case 'uint8c':
                    value = 1;
                    break;
                  default:
                    value = 1.1;
                    break;
                }
                for (i = 0; i < len; i += 1) {
                  arr.push(value);
                }
                return arr;
              }
              function createTypedArrayFactory(type, len) {
                if (type === 'float32') {
                  return new Float32Array(len);
                }
                if (type === 'int16') {
                  return new Int16Array(len);
                }
                if (type === 'uint8c') {
                  return new Uint8ClampedArray(len);
                }
                return createRegularArray(type, len);
              }
              if (typeof Uint8ClampedArray === 'function' && typeof Float32Array === 'function') {
                return createTypedArrayFactory;
              }
              return createRegularArray;
            }();
            function createSizedArray(len) {
              return Array.apply(null, {
                length: len
              });
            }
            function _typeof$6(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof$6 = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                _typeof$6 = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }
              return _typeof$6(obj);
            }
            var subframeEnabled = true;
            var expressionsPlugin = null;
            var expressionsInterfaces = null;
            var idPrefix$1 = '';
            var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
            var bmPow = Math.pow;
            var bmSqrt = Math.sqrt;
            var bmFloor = Math.floor;
            var bmMax = Math.max;
            var bmMin = Math.min;
            var BMMath = {};
            (function () {
              var propertyNames = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'atan2', 'ceil', 'cbrt', 'expm1', 'clz32', 'cos', 'cosh', 'exp', 'floor', 'fround', 'hypot', 'imul', 'log', 'log1p', 'log2', 'log10', 'max', 'min', 'pow', 'random', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc', 'E', 'LN10', 'LN2', 'LOG10E', 'LOG2E', 'PI', 'SQRT1_2', 'SQRT2'];
              var i;
              var len = propertyNames.length;
              for (i = 0; i < len; i += 1) {
                BMMath[propertyNames[i]] = Math[propertyNames[i]];
              }
            })();
            BMMath.random = Math.random;
            BMMath.abs = function (val) {
              var tOfVal = _typeof$6(val);
              if (tOfVal === 'object' && val.length) {
                var absArr = createSizedArray(val.length);
                var i;
                var len = val.length;
                for (i = 0; i < len; i += 1) {
                  absArr[i] = Math.abs(val[i]);
                }
                return absArr;
              }
              return Math.abs(val);
            };
            var defaultCurveSegments = 150;
            var degToRads = Math.PI / 180;
            var roundCorner = 0.5519;
            function styleDiv(element) {
              element.style.position = 'absolute';
              element.style.top = 0;
              element.style.left = 0;
              element.style.display = 'block';
              element.style.transformOrigin = '0 0';
              element.style.webkitTransformOrigin = '0 0';
              element.style.backfaceVisibility = 'visible';
              element.style.webkitBackfaceVisibility = 'visible';
              element.style.transformStyle = 'preserve-3d';
              element.style.webkitTransformStyle = 'preserve-3d';
              element.style.mozTransformStyle = 'preserve-3d';
            }
            function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {
              this.type = type;
              this.currentTime = currentTime;
              this.totalTime = totalTime;
              this.direction = frameMultiplier < 0 ? -1 : 1;
            }
            function BMCompleteEvent(type, frameMultiplier) {
              this.type = type;
              this.direction = frameMultiplier < 0 ? -1 : 1;
            }
            function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier) {
              this.type = type;
              this.currentLoop = currentLoop;
              this.totalLoops = totalLoops;
              this.direction = frameMultiplier < 0 ? -1 : 1;
            }
            function BMSegmentStartEvent(type, firstFrame, totalFrames) {
              this.type = type;
              this.firstFrame = firstFrame;
              this.totalFrames = totalFrames;
            }
            function BMDestroyEvent(type, target) {
              this.type = type;
              this.target = target;
            }
            function BMRenderFrameErrorEvent(nativeError, currentTime) {
              this.type = 'renderFrameError';
              this.nativeError = nativeError;
              this.currentTime = currentTime;
            }
            function BMConfigErrorEvent(nativeError) {
              this.type = 'configError';
              this.nativeError = nativeError;
            }
            var createElementID = function () {
              var _count = 0;
              return function createID() {
                _count += 1;
                return idPrefix$1 + '__lottie_element_' + _count;
              };
            }();
            function HSVtoRGB(h, s, v) {
              var r;
              var g;
              var b;
              var i;
              var f;
              var p;
              var q;
              var t;
              i = Math.floor(h * 6);
              f = h * 6 - i;
              p = v * (1 - s);
              q = v * (1 - f * s);
              t = v * (1 - (1 - f) * s);
              switch (i % 6) {
                case 0:
                  r = v;
                  g = t;
                  b = p;
                  break;
                case 1:
                  r = q;
                  g = v;
                  b = p;
                  break;
                case 2:
                  r = p;
                  g = v;
                  b = t;
                  break;
                case 3:
                  r = p;
                  g = q;
                  b = v;
                  break;
                case 4:
                  r = t;
                  g = p;
                  b = v;
                  break;
                case 5:
                  r = v;
                  g = p;
                  b = q;
                  break;
              }
              return [r, g, b];
            }
            function RGBtoHSV(r, g, b) {
              var max = Math.max(r, g, b);
              var min = Math.min(r, g, b);
              var d = max - min;
              var h;
              var s = max === 0 ? 0 : d / max;
              var v = max / 255;
              switch (max) {
                case min:
                  h = 0;
                  break;
                case r:
                  h = g - b + d * (g < b ? 6 : 0);
                  h /= 6 * d;
                  break;
                case g:
                  h = b - r + d * 2;
                  h /= 6 * d;
                  break;
                case b:
                  h = r - g + d * 4;
                  h /= 6 * d;
                  break;
              }
              return [h, s, v];
            }
            function addSaturationToRGB(color, offset) {
              var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
              hsv[1] += offset;
              if (hsv[1] > 1) {
                hsv[1] = 1;
              } else if (hsv[1] <= 0) {
                hsv[1] = 0;
              }
              return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
            }
            function addBrightnessToRGB(color, offset) {
              var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
              hsv[2] += offset;
              if (hsv[2] > 1) {
                hsv[2] = 1;
              } else if (hsv[2] < 0) {
                hsv[2] = 0;
              }
              return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
            }
            function addHueToRGB(color, offset) {
              var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
              hsv[0] += offset / 360;
              if (hsv[0] > 1) {
                hsv[0] -= 1;
              } else if (hsv[0] < 0) {
                hsv[0] += 1;
              }
              return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
            }
            var rgbToHex = function () {
              var colorMap = [];
              var i;
              var hex;
              for (i = 0; i < 256; i += 1) {
                hex = i.toString(16);
                colorMap[i] = hex.length === 1 ? '0' + hex : hex;
              }
              return function (r, g, b) {
                if (r < 0) {
                  r = 0;
                }
                if (g < 0) {
                  g = 0;
                }
                if (b < 0) {
                  b = 0;
                }
                return '#' + colorMap[r] + colorMap[g] + colorMap[b];
              };
            }();
            var setSubframeEnabled = function setSubframeEnabled(flag) {
              subframeEnabled = !!flag;
            };
            var getSubframeEnabled = function getSubframeEnabled() {
              return subframeEnabled;
            };
            var setExpressionsPlugin = function setExpressionsPlugin(value) {
              expressionsPlugin = value;
            };
            var getExpressionsPlugin = function getExpressionsPlugin() {
              return expressionsPlugin;
            };
            var setExpressionInterfaces = function setExpressionInterfaces(value) {
              expressionsInterfaces = value;
            };
            var getExpressionInterfaces = function getExpressionInterfaces() {
              return expressionsInterfaces;
            };
            var setDefaultCurveSegments = function setDefaultCurveSegments(value) {
              defaultCurveSegments = value;
            };
            var getDefaultCurveSegments = function getDefaultCurveSegments() {
              return defaultCurveSegments;
            };
            var setIdPrefix = function setIdPrefix(value) {
              idPrefix$1 = value;
            };
            function createNS(type) {
              // return {appendChild:function(){},setAttribute:function(){},style:{}}
              return document.createElementNS(svgNS, type);
            }
            function _typeof$5(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof$5 = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                _typeof$5 = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }
              return _typeof$5(obj);
            }
            var dataManager = function () {
              var _counterId = 1;
              var processes = [];
              var workerFn;
              var workerInstance;
              var workerProxy = {
                onmessage: function onmessage() {},
                postMessage: function postMessage(path) {
                  workerFn({
                    data: path
                  });
                }
              };
              var _workerSelf = {
                postMessage: function postMessage(data) {
                  workerProxy.onmessage({
                    data: data
                  });
                }
              };
              function createWorker(fn) {
                if (window.Worker && window.Blob && getWebWorker()) {
                  var blob = new Blob(['var _workerSelf = self; self.onmessage = ', fn.toString()], {
                    type: 'text/javascript'
                  }); // var blob = new Blob(['self.onmessage = ', fn.toString()], { type: 'text/javascript' });

                  var url = URL.createObjectURL(blob);
                  return new Worker(url);
                }
                workerFn = fn;
                return workerProxy;
              }
              function setupWorker() {
                if (!workerInstance) {
                  workerInstance = createWorker(function workerStart(e) {
                    function dataFunctionManager() {
                      function completeLayers(layers, comps) {
                        var layerData;
                        var i;
                        var len = layers.length;
                        var j;
                        var jLen;
                        var k;
                        var kLen;
                        for (i = 0; i < len; i += 1) {
                          layerData = layers[i];
                          if ('ks' in layerData && !layerData.completed) {
                            layerData.completed = true;
                            if (layerData.hasMask) {
                              var maskProps = layerData.masksProperties;
                              jLen = maskProps.length;
                              for (j = 0; j < jLen; j += 1) {
                                if (maskProps[j].pt.k.i) {
                                  convertPathsToAbsoluteValues(maskProps[j].pt.k);
                                } else {
                                  kLen = maskProps[j].pt.k.length;
                                  for (k = 0; k < kLen; k += 1) {
                                    if (maskProps[j].pt.k[k].s) {
                                      convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
                                    }
                                    if (maskProps[j].pt.k[k].e) {
                                      convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
                                    }
                                  }
                                }
                              }
                            }
                            if (layerData.ty === 0) {
                              layerData.layers = findCompLayers(layerData.refId, comps);
                              completeLayers(layerData.layers, comps);
                            } else if (layerData.ty === 4) {
                              completeShapes(layerData.shapes);
                            } else if (layerData.ty === 5) {
                              completeText(layerData);
                            }
                          }
                        }
                      }
                      function completeChars(chars, assets) {
                        if (chars) {
                          var i = 0;
                          var len = chars.length;
                          for (i = 0; i < len; i += 1) {
                            if (chars[i].t === 1) {
                              // var compData = findComp(chars[i].data.refId, assets);
                              chars[i].data.layers = findCompLayers(chars[i].data.refId, assets); // chars[i].data.ip = 0;
                              // chars[i].data.op = 99999;
                              // chars[i].data.st = 0;
                              // chars[i].data.sr = 1;
                              // chars[i].w = compData.w;
                              // chars[i].data.ks = {
                              //   a: { k: [0, 0, 0], a: 0 },
                              //   p: { k: [0, -compData.h, 0], a: 0 },
                              //   r: { k: 0, a: 0 },
                              //   s: { k: [100, 100], a: 0 },
                              //   o: { k: 100, a: 0 },
                              // };

                              completeLayers(chars[i].data.layers, assets);
                            }
                          }
                        }
                      }
                      function findComp(id, comps) {
                        var i = 0;
                        var len = comps.length;
                        while (i < len) {
                          if (comps[i].id === id) {
                            return comps[i];
                          }
                          i += 1;
                        }
                        return null;
                      }
                      function findCompLayers(id, comps) {
                        var comp = findComp(id, comps);
                        if (comp) {
                          if (!comp.layers.__used) {
                            comp.layers.__used = true;
                            return comp.layers;
                          }
                          return JSON.parse(JSON.stringify(comp.layers));
                        }
                        return null;
                      }
                      function completeShapes(arr) {
                        var i;
                        var len = arr.length;
                        var j;
                        var jLen;
                        for (i = len - 1; i >= 0; i -= 1) {
                          if (arr[i].ty === 'sh') {
                            if (arr[i].ks.k.i) {
                              convertPathsToAbsoluteValues(arr[i].ks.k);
                            } else {
                              jLen = arr[i].ks.k.length;
                              for (j = 0; j < jLen; j += 1) {
                                if (arr[i].ks.k[j].s) {
                                  convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
                                }
                                if (arr[i].ks.k[j].e) {
                                  convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
                                }
                              }
                            }
                          } else if (arr[i].ty === 'gr') {
                            completeShapes(arr[i].it);
                          }
                        }
                      }
                      function convertPathsToAbsoluteValues(path) {
                        var i;
                        var len = path.i.length;
                        for (i = 0; i < len; i += 1) {
                          path.i[i][0] += path.v[i][0];
                          path.i[i][1] += path.v[i][1];
                          path.o[i][0] += path.v[i][0];
                          path.o[i][1] += path.v[i][1];
                        }
                      }
                      function checkVersion(minimum, animVersionString) {
                        var animVersion = animVersionString ? animVersionString.split('.') : [100, 100, 100];
                        if (minimum[0] > animVersion[0]) {
                          return true;
                        }
                        if (animVersion[0] > minimum[0]) {
                          return false;
                        }
                        if (minimum[1] > animVersion[1]) {
                          return true;
                        }
                        if (animVersion[1] > minimum[1]) {
                          return false;
                        }
                        if (minimum[2] > animVersion[2]) {
                          return true;
                        }
                        if (animVersion[2] > minimum[2]) {
                          return false;
                        }
                        return null;
                      }
                      var checkText = function () {
                        var minimumVersion = [4, 4, 14];
                        function updateTextLayer(textLayer) {
                          var documentData = textLayer.t.d;
                          textLayer.t.d = {
                            k: [{
                              s: documentData,
                              t: 0
                            }]
                          };
                        }
                        function iterateLayers(layers) {
                          var i;
                          var len = layers.length;
                          for (i = 0; i < len; i += 1) {
                            if (layers[i].ty === 5) {
                              updateTextLayer(layers[i]);
                            }
                          }
                        }
                        return function (animationData) {
                          if (checkVersion(minimumVersion, animationData.v)) {
                            iterateLayers(animationData.layers);
                            if (animationData.assets) {
                              var i;
                              var len = animationData.assets.length;
                              for (i = 0; i < len; i += 1) {
                                if (animationData.assets[i].layers) {
                                  iterateLayers(animationData.assets[i].layers);
                                }
                              }
                            }
                          }
                        };
                      }();
                      var checkChars = function () {
                        var minimumVersion = [4, 7, 99];
                        return function (animationData) {
                          if (animationData.chars && !checkVersion(minimumVersion, animationData.v)) {
                            var i;
                            var len = animationData.chars.length;
                            for (i = 0; i < len; i += 1) {
                              var charData = animationData.chars[i];
                              if (charData.data && charData.data.shapes) {
                                completeShapes(charData.data.shapes);
                                charData.data.ip = 0;
                                charData.data.op = 99999;
                                charData.data.st = 0;
                                charData.data.sr = 1;
                                charData.data.ks = {
                                  p: {
                                    k: [0, 0],
                                    a: 0
                                  },
                                  s: {
                                    k: [100, 100],
                                    a: 0
                                  },
                                  a: {
                                    k: [0, 0],
                                    a: 0
                                  },
                                  r: {
                                    k: 0,
                                    a: 0
                                  },
                                  o: {
                                    k: 100,
                                    a: 0
                                  }
                                };
                                if (!animationData.chars[i].t) {
                                  charData.data.shapes.push({
                                    ty: 'no'
                                  });
                                  charData.data.shapes[0].it.push({
                                    p: {
                                      k: [0, 0],
                                      a: 0
                                    },
                                    s: {
                                      k: [100, 100],
                                      a: 0
                                    },
                                    a: {
                                      k: [0, 0],
                                      a: 0
                                    },
                                    r: {
                                      k: 0,
                                      a: 0
                                    },
                                    o: {
                                      k: 100,
                                      a: 0
                                    },
                                    sk: {
                                      k: 0,
                                      a: 0
                                    },
                                    sa: {
                                      k: 0,
                                      a: 0
                                    },
                                    ty: 'tr'
                                  });
                                }
                              }
                            }
                          }
                        };
                      }();
                      var checkPathProperties = function () {
                        var minimumVersion = [5, 7, 15];
                        function updateTextLayer(textLayer) {
                          var pathData = textLayer.t.p;
                          if (typeof pathData.a === 'number') {
                            pathData.a = {
                              a: 0,
                              k: pathData.a
                            };
                          }
                          if (typeof pathData.p === 'number') {
                            pathData.p = {
                              a: 0,
                              k: pathData.p
                            };
                          }
                          if (typeof pathData.r === 'number') {
                            pathData.r = {
                              a: 0,
                              k: pathData.r
                            };
                          }
                        }
                        function iterateLayers(layers) {
                          var i;
                          var len = layers.length;
                          for (i = 0; i < len; i += 1) {
                            if (layers[i].ty === 5) {
                              updateTextLayer(layers[i]);
                            }
                          }
                        }
                        return function (animationData) {
                          if (checkVersion(minimumVersion, animationData.v)) {
                            iterateLayers(animationData.layers);
                            if (animationData.assets) {
                              var i;
                              var len = animationData.assets.length;
                              for (i = 0; i < len; i += 1) {
                                if (animationData.assets[i].layers) {
                                  iterateLayers(animationData.assets[i].layers);
                                }
                              }
                            }
                          }
                        };
                      }();
                      var checkColors = function () {
                        var minimumVersion = [4, 1, 9];
                        function iterateShapes(shapes) {
                          var i;
                          var len = shapes.length;
                          var j;
                          var jLen;
                          for (i = 0; i < len; i += 1) {
                            if (shapes[i].ty === 'gr') {
                              iterateShapes(shapes[i].it);
                            } else if (shapes[i].ty === 'fl' || shapes[i].ty === 'st') {
                              if (shapes[i].c.k && shapes[i].c.k[0].i) {
                                jLen = shapes[i].c.k.length;
                                for (j = 0; j < jLen; j += 1) {
                                  if (shapes[i].c.k[j].s) {
                                    shapes[i].c.k[j].s[0] /= 255;
                                    shapes[i].c.k[j].s[1] /= 255;
                                    shapes[i].c.k[j].s[2] /= 255;
                                    shapes[i].c.k[j].s[3] /= 255;
                                  }
                                  if (shapes[i].c.k[j].e) {
                                    shapes[i].c.k[j].e[0] /= 255;
                                    shapes[i].c.k[j].e[1] /= 255;
                                    shapes[i].c.k[j].e[2] /= 255;
                                    shapes[i].c.k[j].e[3] /= 255;
                                  }
                                }
                              } else {
                                shapes[i].c.k[0] /= 255;
                                shapes[i].c.k[1] /= 255;
                                shapes[i].c.k[2] /= 255;
                                shapes[i].c.k[3] /= 255;
                              }
                            }
                          }
                        }
                        function iterateLayers(layers) {
                          var i;
                          var len = layers.length;
                          for (i = 0; i < len; i += 1) {
                            if (layers[i].ty === 4) {
                              iterateShapes(layers[i].shapes);
                            }
                          }
                        }
                        return function (animationData) {
                          if (checkVersion(minimumVersion, animationData.v)) {
                            iterateLayers(animationData.layers);
                            if (animationData.assets) {
                              var i;
                              var len = animationData.assets.length;
                              for (i = 0; i < len; i += 1) {
                                if (animationData.assets[i].layers) {
                                  iterateLayers(animationData.assets[i].layers);
                                }
                              }
                            }
                          }
                        };
                      }();
                      var checkShapes = function () {
                        var minimumVersion = [4, 4, 18];
                        function completeClosingShapes(arr) {
                          var i;
                          var len = arr.length;
                          var j;
                          var jLen;
                          for (i = len - 1; i >= 0; i -= 1) {
                            if (arr[i].ty === 'sh') {
                              if (arr[i].ks.k.i) {
                                arr[i].ks.k.c = arr[i].closed;
                              } else {
                                jLen = arr[i].ks.k.length;
                                for (j = 0; j < jLen; j += 1) {
                                  if (arr[i].ks.k[j].s) {
                                    arr[i].ks.k[j].s[0].c = arr[i].closed;
                                  }
                                  if (arr[i].ks.k[j].e) {
                                    arr[i].ks.k[j].e[0].c = arr[i].closed;
                                  }
                                }
                              }
                            } else if (arr[i].ty === 'gr') {
                              completeClosingShapes(arr[i].it);
                            }
                          }
                        }
                        function iterateLayers(layers) {
                          var layerData;
                          var i;
                          var len = layers.length;
                          var j;
                          var jLen;
                          var k;
                          var kLen;
                          for (i = 0; i < len; i += 1) {
                            layerData = layers[i];
                            if (layerData.hasMask) {
                              var maskProps = layerData.masksProperties;
                              jLen = maskProps.length;
                              for (j = 0; j < jLen; j += 1) {
                                if (maskProps[j].pt.k.i) {
                                  maskProps[j].pt.k.c = maskProps[j].cl;
                                } else {
                                  kLen = maskProps[j].pt.k.length;
                                  for (k = 0; k < kLen; k += 1) {
                                    if (maskProps[j].pt.k[k].s) {
                                      maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
                                    }
                                    if (maskProps[j].pt.k[k].e) {
                                      maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
                                    }
                                  }
                                }
                              }
                            }
                            if (layerData.ty === 4) {
                              completeClosingShapes(layerData.shapes);
                            }
                          }
                        }
                        return function (animationData) {
                          if (checkVersion(minimumVersion, animationData.v)) {
                            iterateLayers(animationData.layers);
                            if (animationData.assets) {
                              var i;
                              var len = animationData.assets.length;
                              for (i = 0; i < len; i += 1) {
                                if (animationData.assets[i].layers) {
                                  iterateLayers(animationData.assets[i].layers);
                                }
                              }
                            }
                          }
                        };
                      }();
                      function completeData(animationData) {
                        if (animationData.__complete) {
                          return;
                        }
                        checkColors(animationData);
                        checkText(animationData);
                        checkChars(animationData);
                        checkPathProperties(animationData);
                        checkShapes(animationData);
                        completeLayers(animationData.layers, animationData.assets);
                        completeChars(animationData.chars, animationData.assets);
                        animationData.__complete = true;
                      }
                      function completeText(data) {
                        if (data.t.a.length === 0 && !('m' in data.t.p)) ;
                      }
                      var moduleOb = {};
                      moduleOb.completeData = completeData;
                      moduleOb.checkColors = checkColors;
                      moduleOb.checkChars = checkChars;
                      moduleOb.checkPathProperties = checkPathProperties;
                      moduleOb.checkShapes = checkShapes;
                      moduleOb.completeLayers = completeLayers;
                      return moduleOb;
                    }
                    if (!_workerSelf.dataManager) {
                      _workerSelf.dataManager = dataFunctionManager();
                    }
                    if (!_workerSelf.assetLoader) {
                      _workerSelf.assetLoader = function () {
                        function formatResponse(xhr) {
                          // using typeof doubles the time of execution of this method,
                          // so if available, it's better to use the header to validate the type
                          var contentTypeHeader = xhr.getResponseHeader('content-type');
                          if (contentTypeHeader && xhr.responseType === 'json' && contentTypeHeader.indexOf('json') !== -1) {
                            return xhr.response;
                          }
                          if (xhr.response && _typeof$5(xhr.response) === 'object') {
                            return xhr.response;
                          }
                          if (xhr.response && typeof xhr.response === 'string') {
                            return JSON.parse(xhr.response);
                          }
                          if (xhr.responseText) {
                            return JSON.parse(xhr.responseText);
                          }
                          return null;
                        }
                        function loadAsset(path, fullPath, callback, errorCallback) {
                          var response;
                          var xhr = new XMLHttpRequest(); // set responseType after calling open or IE will break.

                          try {
                            // This crashes on Android WebView prior to KitKat
                            xhr.responseType = 'json';
                          } catch (err) {} // eslint-disable-line no-empty

                          xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4) {
                              if (xhr.status === 200) {
                                response = formatResponse(xhr);
                                callback(response);
                              } else {
                                try {
                                  response = formatResponse(xhr);
                                  callback(response);
                                } catch (err) {
                                  if (errorCallback) {
                                    errorCallback(err);
                                  }
                                }
                              }
                            }
                          };
                          try {
                            // Hack to workaround banner validation
                            xhr.open(['G', 'E', 'T'].join(''), path, true);
                          } catch (error) {
                            // Hack to workaround banner validation
                            xhr.open(['G', 'E', 'T'].join(''), fullPath + '/' + path, true);
                          }
                          xhr.send();
                        }
                        return {
                          load: loadAsset
                        };
                      }();
                    }
                    if (e.data.type === 'loadAnimation') {
                      _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function (data) {
                        _workerSelf.dataManager.completeData(data);
                        _workerSelf.postMessage({
                          id: e.data.id,
                          payload: data,
                          status: 'success'
                        });
                      }, function () {
                        _workerSelf.postMessage({
                          id: e.data.id,
                          status: 'error'
                        });
                      });
                    } else if (e.data.type === 'complete') {
                      var animation = e.data.animation;
                      _workerSelf.dataManager.completeData(animation);
                      _workerSelf.postMessage({
                        id: e.data.id,
                        payload: animation,
                        status: 'success'
                      });
                    } else if (e.data.type === 'loadData') {
                      _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function (data) {
                        _workerSelf.postMessage({
                          id: e.data.id,
                          payload: data,
                          status: 'success'
                        });
                      }, function () {
                        _workerSelf.postMessage({
                          id: e.data.id,
                          status: 'error'
                        });
                      });
                    }
                  });
                  workerInstance.onmessage = function (event) {
                    var data = event.data;
                    var id = data.id;
                    var process = processes[id];
                    processes[id] = null;
                    if (data.status === 'success') {
                      process.onComplete(data.payload);
                    } else if (process.onError) {
                      process.onError();
                    }
                  };
                }
              }
              function createProcess(onComplete, onError) {
                _counterId += 1;
                var id = 'processId_' + _counterId;
                processes[id] = {
                  onComplete: onComplete,
                  onError: onError
                };
                return id;
              }
              function loadAnimation(path, onComplete, onError) {
                setupWorker();
                var processId = createProcess(onComplete, onError);
                workerInstance.postMessage({
                  type: 'loadAnimation',
                  path: path,
                  fullPath: window.location.origin + window.location.pathname,
                  id: processId
                });
              }
              function loadData(path, onComplete, onError) {
                setupWorker();
                var processId = createProcess(onComplete, onError);
                workerInstance.postMessage({
                  type: 'loadData',
                  path: path,
                  fullPath: window.location.origin + window.location.pathname,
                  id: processId
                });
              }
              function completeAnimation(anim, onComplete, onError) {
                setupWorker();
                var processId = createProcess(onComplete, onError);
                workerInstance.postMessage({
                  type: 'complete',
                  animation: anim,
                  id: processId
                });
              }
              return {
                loadAnimation: loadAnimation,
                loadData: loadData,
                completeAnimation: completeAnimation
              };
            }();
            var ImagePreloader = function () {
              var proxyImage = function () {
                var canvas = createTag('canvas');
                canvas.width = 1;
                canvas.height = 1;
                var ctx = canvas.getContext('2d');
                ctx.fillStyle = 'rgba(0,0,0,0)';
                ctx.fillRect(0, 0, 1, 1);
                return canvas;
              }();
              function imageLoaded() {
                this.loadedAssets += 1;
                if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
                  if (this.imagesLoadedCb) {
                    this.imagesLoadedCb(null);
                  }
                }
              }
              function footageLoaded() {
                this.loadedFootagesCount += 1;
                if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
                  if (this.imagesLoadedCb) {
                    this.imagesLoadedCb(null);
                  }
                }
              }
              function getAssetsPath(assetData, assetsPath, originalPath) {
                var path = '';
                if (assetData.e) {
                  path = assetData.p;
                } else if (assetsPath) {
                  var imagePath = assetData.p;
                  if (imagePath.indexOf('images/') !== -1) {
                    imagePath = imagePath.split('/')[1];
                  }
                  path = assetsPath + imagePath;
                } else {
                  path = originalPath;
                  path += assetData.u ? assetData.u : '';
                  path += assetData.p;
                }
                return path;
              }
              function testImageLoaded(img) {
                var _count = 0;
                var intervalId = setInterval(function () {
                  var box = img.getBBox();
                  if (box.width || _count > 500) {
                    this._imageLoaded();
                    clearInterval(intervalId);
                  }
                  _count += 1;
                }.bind(this), 50);
              }
              function createImageData(assetData) {
                var path = getAssetsPath(assetData, this.assetsPath, this.path);
                var img = createNS('image');
                if (isSafari) {
                  this.testImageLoaded(img);
                } else {
                  img.addEventListener('load', this._imageLoaded, false);
                }
                img.addEventListener('error', function () {
                  ob.img = proxyImage;
                  this._imageLoaded();
                }.bind(this), false);
                img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);
                if (this._elementHelper.append) {
                  this._elementHelper.append(img);
                } else {
                  this._elementHelper.appendChild(img);
                }
                var ob = {
                  img: img,
                  assetData: assetData
                };
                return ob;
              }
              function createImgData(assetData) {
                var path = getAssetsPath(assetData, this.assetsPath, this.path);
                var img = createTag('img');
                img.crossOrigin = 'anonymous';
                img.addEventListener('load', this._imageLoaded, false);
                img.addEventListener('error', function () {
                  ob.img = proxyImage;
                  this._imageLoaded();
                }.bind(this), false);
                img.src = path;
                var ob = {
                  img: img,
                  assetData: assetData
                };
                return ob;
              }
              function createFootageData(data) {
                var ob = {
                  assetData: data
                };
                var path = getAssetsPath(data, this.assetsPath, this.path);
                dataManager.loadData(path, function (footageData) {
                  ob.img = footageData;
                  this._footageLoaded();
                }.bind(this), function () {
                  ob.img = {};
                  this._footageLoaded();
                }.bind(this));
                return ob;
              }
              function loadAssets(assets, cb) {
                this.imagesLoadedCb = cb;
                var i;
                var len = assets.length;
                for (i = 0; i < len; i += 1) {
                  if (!assets[i].layers) {
                    if (!assets[i].t || assets[i].t === 'seq') {
                      this.totalImages += 1;
                      this.images.push(this._createImageData(assets[i]));
                    } else if (assets[i].t === 3) {
                      this.totalFootages += 1;
                      this.images.push(this.createFootageData(assets[i]));
                    }
                  }
                }
              }
              function setPath(path) {
                this.path = path || '';
              }
              function setAssetsPath(path) {
                this.assetsPath = path || '';
              }
              function getAsset(assetData) {
                var i = 0;
                var len = this.images.length;
                while (i < len) {
                  if (this.images[i].assetData === assetData) {
                    return this.images[i].img;
                  }
                  i += 1;
                }
                return null;
              }
              function destroy() {
                this.imagesLoadedCb = null;
                this.images.length = 0;
              }
              function loadedImages() {
                return this.totalImages === this.loadedAssets;
              }
              function loadedFootages() {
                return this.totalFootages === this.loadedFootagesCount;
              }
              function setCacheType(type, elementHelper) {
                if (type === 'svg') {
                  this._elementHelper = elementHelper;
                  this._createImageData = this.createImageData.bind(this);
                } else {
                  this._createImageData = this.createImgData.bind(this);
                }
              }
              function ImagePreloaderFactory() {
                this._imageLoaded = imageLoaded.bind(this);
                this._footageLoaded = footageLoaded.bind(this);
                this.testImageLoaded = testImageLoaded.bind(this);
                this.createFootageData = createFootageData.bind(this);
                this.assetsPath = '';
                this.path = '';
                this.totalImages = 0;
                this.totalFootages = 0;
                this.loadedAssets = 0;
                this.loadedFootagesCount = 0;
                this.imagesLoadedCb = null;
                this.images = [];
              }
              ImagePreloaderFactory.prototype = {
                loadAssets: loadAssets,
                setAssetsPath: setAssetsPath,
                setPath: setPath,
                loadedImages: loadedImages,
                loadedFootages: loadedFootages,
                destroy: destroy,
                getAsset: getAsset,
                createImgData: createImgData,
                createImageData: createImageData,
                imageLoaded: imageLoaded,
                footageLoaded: footageLoaded,
                setCacheType: setCacheType
              };
              return ImagePreloaderFactory;
            }();
            function BaseEvent() {}
            BaseEvent.prototype = {
              triggerEvent: function triggerEvent(eventName, args) {
                if (this._cbs[eventName]) {
                  var callbacks = this._cbs[eventName];
                  for (var i = 0; i < callbacks.length; i += 1) {
                    callbacks[i](args);
                  }
                }
              },
              addEventListener: function addEventListener(eventName, callback) {
                if (!this._cbs[eventName]) {
                  this._cbs[eventName] = [];
                }
                this._cbs[eventName].push(callback);
                return function () {
                  this.removeEventListener(eventName, callback);
                }.bind(this);
              },
              removeEventListener: function removeEventListener(eventName, callback) {
                if (!callback) {
                  this._cbs[eventName] = null;
                } else if (this._cbs[eventName]) {
                  var i = 0;
                  var len = this._cbs[eventName].length;
                  while (i < len) {
                    if (this._cbs[eventName][i] === callback) {
                      this._cbs[eventName].splice(i, 1);
                      i -= 1;
                      len -= 1;
                    }
                    i += 1;
                  }
                  if (!this._cbs[eventName].length) {
                    this._cbs[eventName] = null;
                  }
                }
              }
            };
            var markerParser = function () {
              function parsePayloadLines(payload) {
                var lines = payload.split('\r\n');
                var keys = {};
                var line;
                var keysCount = 0;
                for (var i = 0; i < lines.length; i += 1) {
                  line = lines[i].split(':');
                  if (line.length === 2) {
                    keys[line[0]] = line[1].trim();
                    keysCount += 1;
                  }
                }
                if (keysCount === 0) {
                  throw new Error();
                }
                return keys;
              }
              return function (_markers) {
                var markers = [];
                for (var i = 0; i < _markers.length; i += 1) {
                  var _marker = _markers[i];
                  var markerData = {
                    time: _marker.tm,
                    duration: _marker.dr
                  };
                  try {
                    markerData.payload = JSON.parse(_markers[i].cm);
                  } catch (_) {
                    try {
                      markerData.payload = parsePayloadLines(_markers[i].cm);
                    } catch (__) {
                      markerData.payload = {
                        name: _markers[i].cm
                      };
                    }
                  }
                  markers.push(markerData);
                }
                return markers;
              };
            }();
            var ProjectInterface = function () {
              function registerComposition(comp) {
                this.compositions.push(comp);
              }
              return function () {
                function _thisProjectFunction(name) {
                  var i = 0;
                  var len = this.compositions.length;
                  while (i < len) {
                    if (this.compositions[i].data && this.compositions[i].data.nm === name) {
                      if (this.compositions[i].prepareFrame && this.compositions[i].data.xt) {
                        this.compositions[i].prepareFrame(this.currentFrame);
                      }
                      return this.compositions[i].compInterface;
                    }
                    i += 1;
                  }
                  return null;
                }
                _thisProjectFunction.compositions = [];
                _thisProjectFunction.currentFrame = 0;
                _thisProjectFunction.registerComposition = registerComposition;
                return _thisProjectFunction;
              };
            }();
            var renderers = {};
            var registerRenderer = function registerRenderer(key, value) {
              renderers[key] = value;
            };
            function getRenderer(key) {
              return renderers[key];
            }
            function getRegisteredRenderer() {
              // Returns canvas by default for compatibility
              if (renderers.canvas) {
                return 'canvas';
              } // Returns any renderer that is registered

              for (var key in renderers) {
                if (renderers[key]) {
                  return key;
                }
              }
              return '';
            }
            function _typeof$4(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof$4 = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                _typeof$4 = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }
              return _typeof$4(obj);
            }
            var AnimationItem = function AnimationItem() {
              this._cbs = [];
              this.name = '';
              this.path = '';
              this.isLoaded = false;
              this.currentFrame = 0;
              this.currentRawFrame = 0;
              this.firstFrame = 0;
              this.totalFrames = 0;
              this.frameRate = 0;
              this.frameMult = 0;
              this.playSpeed = 1;
              this.playDirection = 1;
              this.playCount = 0;
              this.animationData = {};
              this.assets = [];
              this.isPaused = true;
              this.autoplay = false;
              this.loop = true;
              this.renderer = null;
              this.animationID = createElementID();
              this.assetsPath = '';
              this.timeCompleted = 0;
              this.segmentPos = 0;
              this.isSubframeEnabled = getSubframeEnabled();
              this.segments = [];
              this._idle = true;
              this._completedLoop = false;
              this.projectInterface = ProjectInterface();
              this.imagePreloader = new ImagePreloader();
              this.audioController = audioControllerFactory();
              this.markers = [];
              this.configAnimation = this.configAnimation.bind(this);
              this.onSetupError = this.onSetupError.bind(this);
              this.onSegmentComplete = this.onSegmentComplete.bind(this);
              this.drawnFrameEvent = new BMEnterFrameEvent('drawnFrame', 0, 0, 0);
              this.expressionsPlugin = getExpressionsPlugin();
            };
            extendPrototype([BaseEvent], AnimationItem);
            AnimationItem.prototype.setParams = function (params) {
              if (params.wrapper || params.container) {
                this.wrapper = params.wrapper || params.container;
              }
              var animType = 'svg';
              if (params.animType) {
                animType = params.animType;
              } else if (params.renderer) {
                animType = params.renderer;
              }
              var RendererClass = getRenderer(animType);
              this.renderer = new RendererClass(this, params.rendererSettings);
              this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);
              this.renderer.setProjectInterface(this.projectInterface);
              this.animType = animType;
              if (params.loop === '' || params.loop === null || params.loop === undefined || params.loop === true) {
                this.loop = true;
              } else if (params.loop === false) {
                this.loop = false;
              } else {
                this.loop = parseInt(params.loop, 10);
              }
              this.autoplay = 'autoplay' in params ? params.autoplay : true;
              this.name = params.name ? params.name : '';
              this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, 'autoloadSegments') ? params.autoloadSegments : true;
              this.assetsPath = params.assetsPath;
              this.initialSegment = params.initialSegment;
              if (params.audioFactory) {
                this.audioController.setAudioFactory(params.audioFactory);
              }
              if (params.animationData) {
                this.setupAnimation(params.animationData);
              } else if (params.path) {
                if (params.path.lastIndexOf('\\') !== -1) {
                  this.path = params.path.substr(0, params.path.lastIndexOf('\\') + 1);
                } else {
                  this.path = params.path.substr(0, params.path.lastIndexOf('/') + 1);
                }
                this.fileName = params.path.substr(params.path.lastIndexOf('/') + 1);
                this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf('.json'));
                dataManager.loadAnimation(params.path, this.configAnimation, this.onSetupError);
              }
            };
            AnimationItem.prototype.onSetupError = function () {
              this.trigger('data_failed');
            };
            AnimationItem.prototype.setupAnimation = function (data) {
              dataManager.completeAnimation(data, this.configAnimation);
            };
            AnimationItem.prototype.setData = function (wrapper, animationData) {
              if (animationData) {
                if (_typeof$4(animationData) !== 'object') {
                  animationData = JSON.parse(animationData);
                }
              }
              var params = {
                wrapper: wrapper,
                animationData: animationData
              };
              var wrapperAttributes = wrapper.attributes;
              params.path = wrapperAttributes.getNamedItem('data-animation-path') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-animation-path').value : wrapperAttributes.getNamedItem('data-bm-path') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-bm-path').value : wrapperAttributes.getNamedItem('bm-path') ? wrapperAttributes.getNamedItem('bm-path').value : '';
              params.animType = wrapperAttributes.getNamedItem('data-anim-type') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-anim-type').value : wrapperAttributes.getNamedItem('data-bm-type') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-bm-type').value : wrapperAttributes.getNamedItem('bm-type') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('bm-type').value : wrapperAttributes.getNamedItem('data-bm-renderer') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-bm-renderer').value : wrapperAttributes.getNamedItem('bm-renderer') ? wrapperAttributes.getNamedItem('bm-renderer').value : getRegisteredRenderer() || 'canvas';
              var loop = wrapperAttributes.getNamedItem('data-anim-loop') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-anim-loop').value : wrapperAttributes.getNamedItem('data-bm-loop') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-bm-loop').value : wrapperAttributes.getNamedItem('bm-loop') ? wrapperAttributes.getNamedItem('bm-loop').value : '';
              if (loop === 'false') {
                params.loop = false;
              } else if (loop === 'true') {
                params.loop = true;
              } else if (loop !== '') {
                params.loop = parseInt(loop, 10);
              }
              var autoplay = wrapperAttributes.getNamedItem('data-anim-autoplay') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-anim-autoplay').value : wrapperAttributes.getNamedItem('data-bm-autoplay') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-bm-autoplay').value : wrapperAttributes.getNamedItem('bm-autoplay') ? wrapperAttributes.getNamedItem('bm-autoplay').value : true;
              params.autoplay = autoplay !== 'false';
              params.name = wrapperAttributes.getNamedItem('data-name') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-name').value : wrapperAttributes.getNamedItem('data-bm-name') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-bm-name').value : wrapperAttributes.getNamedItem('bm-name') ? wrapperAttributes.getNamedItem('bm-name').value : '';
              var prerender = wrapperAttributes.getNamedItem('data-anim-prerender') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-anim-prerender').value : wrapperAttributes.getNamedItem('data-bm-prerender') // eslint-disable-line no-nested-ternary
              ? wrapperAttributes.getNamedItem('data-bm-prerender').value : wrapperAttributes.getNamedItem('bm-prerender') ? wrapperAttributes.getNamedItem('bm-prerender').value : '';
              if (prerender === 'false') {
                params.prerender = false;
              }
              if (!params.path) {
                this.trigger('destroy');
              } else {
                this.setParams(params);
              }
            };
            AnimationItem.prototype.includeLayers = function (data) {
              if (data.op > this.animationData.op) {
                this.animationData.op = data.op;
                this.totalFrames = Math.floor(data.op - this.animationData.ip);
              }
              var layers = this.animationData.layers;
              var i;
              var len = layers.length;
              var newLayers = data.layers;
              var j;
              var jLen = newLayers.length;
              for (j = 0; j < jLen; j += 1) {
                i = 0;
                while (i < len) {
                  if (layers[i].id === newLayers[j].id) {
                    layers[i] = newLayers[j];
                    break;
                  }
                  i += 1;
                }
              }
              if (data.chars || data.fonts) {
                this.renderer.globalData.fontManager.addChars(data.chars);
                this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);
              }
              if (data.assets) {
                len = data.assets.length;
                for (i = 0; i < len; i += 1) {
                  this.animationData.assets.push(data.assets[i]);
                }
              }
              this.animationData.__complete = false;
              dataManager.completeAnimation(this.animationData, this.onSegmentComplete);
            };
            AnimationItem.prototype.onSegmentComplete = function (data) {
              this.animationData = data;
              var expressionsPlugin = getExpressionsPlugin();
              if (expressionsPlugin) {
                expressionsPlugin.initExpressions(this);
              }
              this.loadNextSegment();
            };
            AnimationItem.prototype.loadNextSegment = function () {
              var segments = this.animationData.segments;
              if (!segments || segments.length === 0 || !this.autoloadSegments) {
                this.trigger('data_ready');
                this.timeCompleted = this.totalFrames;
                return;
              }
              var segment = segments.shift();
              this.timeCompleted = segment.time * this.frameRate;
              var segmentPath = this.path + this.fileName + '_' + this.segmentPos + '.json';
              this.segmentPos += 1;
              dataManager.loadData(segmentPath, this.includeLayers.bind(this), function () {
                this.trigger('data_failed');
              }.bind(this));
            };
            AnimationItem.prototype.loadSegments = function () {
              var segments = this.animationData.segments;
              if (!segments) {
                this.timeCompleted = this.totalFrames;
              }
              this.loadNextSegment();
            };
            AnimationItem.prototype.imagesLoaded = function () {
              this.trigger('loaded_images');
              this.checkLoaded();
            };
            AnimationItem.prototype.preloadImages = function () {
              this.imagePreloader.setAssetsPath(this.assetsPath);
              this.imagePreloader.setPath(this.path);
              this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
            };
            AnimationItem.prototype.configAnimation = function (animData) {
              if (!this.renderer) {
                return;
              }
              try {
                this.animationData = animData;
                if (this.initialSegment) {
                  this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
                  this.firstFrame = Math.round(this.initialSegment[0]);
                } else {
                  this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
                  this.firstFrame = Math.round(this.animationData.ip);
                }
                this.renderer.configAnimation(animData);
                if (!animData.assets) {
                  animData.assets = [];
                }
                this.assets = this.animationData.assets;
                this.frameRate = this.animationData.fr;
                this.frameMult = this.animationData.fr / 1000;
                this.renderer.searchExtraCompositions(animData.assets);
                this.markers = markerParser(animData.markers || []);
                this.trigger('config_ready');
                this.preloadImages();
                this.loadSegments();
                this.updaFrameModifier();
                this.waitForFontsLoaded();
                if (this.isPaused) {
                  this.audioController.pause();
                }
              } catch (error) {
                this.triggerConfigError(error);
              }
            };
            AnimationItem.prototype.waitForFontsLoaded = function () {
              if (!this.renderer) {
                return;
              }
              if (this.renderer.globalData.fontManager.isLoaded) {
                this.checkLoaded();
              } else {
                setTimeout(this.waitForFontsLoaded.bind(this), 20);
              }
            };
            AnimationItem.prototype.checkLoaded = function () {
              if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== 'canvas') && this.imagePreloader.loadedFootages()) {
                this.isLoaded = true;
                var expressionsPlugin = getExpressionsPlugin();
                if (expressionsPlugin) {
                  expressionsPlugin.initExpressions(this);
                }
                this.renderer.initItems();
                setTimeout(function () {
                  this.trigger('DOMLoaded');
                }.bind(this), 0);
                this.gotoFrame();
                if (this.autoplay) {
                  this.play();
                }
              }
            };
            AnimationItem.prototype.resize = function (width, height) {
              // Adding this validation for backwards compatibility in case an event object was being passed down
              var _width = typeof width === 'number' ? width : undefined;
              var _height = typeof height === 'number' ? height : undefined;
              this.renderer.updateContainerSize(_width, _height);
            };
            AnimationItem.prototype.setSubframe = function (flag) {
              this.isSubframeEnabled = !!flag;
            };
            AnimationItem.prototype.gotoFrame = function () {
              this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame; // eslint-disable-line no-bitwise

              if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
                this.currentFrame = this.timeCompleted;
              }
              this.trigger('enterFrame');
              this.renderFrame();
              this.trigger('drawnFrame');
            };
            AnimationItem.prototype.renderFrame = function () {
              if (this.isLoaded === false || !this.renderer) {
                return;
              }
              try {
                if (this.expressionsPlugin) {
                  this.expressionsPlugin.resetFrame();
                }
                this.renderer.renderFrame(this.currentFrame + this.firstFrame);
              } catch (error) {
                this.triggerRenderFrameError(error);
              }
            };
            AnimationItem.prototype.play = function (name) {
              if (name && this.name !== name) {
                return;
              }
              if (this.isPaused === true) {
                this.isPaused = false;
                this.trigger('_play');
                this.audioController.resume();
                if (this._idle) {
                  this._idle = false;
                  this.trigger('_active');
                }
              }
            };
            AnimationItem.prototype.pause = function (name) {
              if (name && this.name !== name) {
                return;
              }
              if (this.isPaused === false) {
                this.isPaused = true;
                this.trigger('_pause');
                this._idle = true;
                this.trigger('_idle');
                this.audioController.pause();
              }
            };
            AnimationItem.prototype.togglePause = function (name) {
              if (name && this.name !== name) {
                return;
              }
              if (this.isPaused === true) {
                this.play();
              } else {
                this.pause();
              }
            };
            AnimationItem.prototype.stop = function (name) {
              if (name && this.name !== name) {
                return;
              }
              this.pause();
              this.playCount = 0;
              this._completedLoop = false;
              this.setCurrentRawFrameValue(0);
            };
            AnimationItem.prototype.getMarkerData = function (markerName) {
              var marker;
              for (var i = 0; i < this.markers.length; i += 1) {
                marker = this.markers[i];
                if (marker.payload && marker.payload.name === markerName) {
                  return marker;
                }
              }
              return null;
            };
            AnimationItem.prototype.goToAndStop = function (value, isFrame, name) {
              if (name && this.name !== name) {
                return;
              }
              var numValue = Number(value);
              if (isNaN(numValue)) {
                var marker = this.getMarkerData(value);
                if (marker) {
                  this.goToAndStop(marker.time, true);
                }
              } else if (isFrame) {
                this.setCurrentRawFrameValue(value);
              } else {
                this.setCurrentRawFrameValue(value * this.frameModifier);
              }
              this.pause();
            };
            AnimationItem.prototype.goToAndPlay = function (value, isFrame, name) {
              if (name && this.name !== name) {
                return;
              }
              var numValue = Number(value);
              if (isNaN(numValue)) {
                var marker = this.getMarkerData(value);
                if (marker) {
                  if (!marker.duration) {
                    this.goToAndStop(marker.time, true);
                  } else {
                    this.playSegments([marker.time, marker.time + marker.duration], true);
                  }
                }
              } else {
                this.goToAndStop(numValue, isFrame, name);
              }
              this.play();
            };
            AnimationItem.prototype.advanceTime = function (value) {
              if (this.isPaused === true || this.isLoaded === false) {
                return;
              }
              var nextValue = this.currentRawFrame + value * this.frameModifier;
              var _isComplete = false; // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
              // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.

              if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
                if (!this.loop || this.playCount === this.loop) {
                  if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
                    _isComplete = true;
                    nextValue = this.totalFrames - 1;
                  }
                } else if (nextValue >= this.totalFrames) {
                  this.playCount += 1;
                  if (!this.checkSegments(nextValue % this.totalFrames)) {
                    this.setCurrentRawFrameValue(nextValue % this.totalFrames);
                    this._completedLoop = true;
                    this.trigger('loopComplete');
                  }
                } else {
                  this.setCurrentRawFrameValue(nextValue);
                }
              } else if (nextValue < 0) {
                if (!this.checkSegments(nextValue % this.totalFrames)) {
                  if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
                    // eslint-disable-line no-plusplus
                    this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);
                    if (!this._completedLoop) {
                      this._completedLoop = true;
                    } else {
                      this.trigger('loopComplete');
                    }
                  } else {
                    _isComplete = true;
                    nextValue = 0;
                  }
                }
              } else {
                this.setCurrentRawFrameValue(nextValue);
              }
              if (_isComplete) {
                this.setCurrentRawFrameValue(nextValue);
                this.pause();
                this.trigger('complete');
              }
            };
            AnimationItem.prototype.adjustSegment = function (arr, offset) {
              this.playCount = 0;
              if (arr[1] < arr[0]) {
                if (this.frameModifier > 0) {
                  if (this.playSpeed < 0) {
                    this.setSpeed(-this.playSpeed);
                  } else {
                    this.setDirection(-1);
                  }
                }
                this.totalFrames = arr[0] - arr[1];
                this.timeCompleted = this.totalFrames;
                this.firstFrame = arr[1];
                this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset);
              } else if (arr[1] > arr[0]) {
                if (this.frameModifier < 0) {
                  if (this.playSpeed < 0) {
                    this.setSpeed(-this.playSpeed);
                  } else {
                    this.setDirection(1);
                  }
                }
                this.totalFrames = arr[1] - arr[0];
                this.timeCompleted = this.totalFrames;
                this.firstFrame = arr[0];
                this.setCurrentRawFrameValue(0.001 + offset);
              }
              this.trigger('segmentStart');
            };
            AnimationItem.prototype.setSegment = function (init, end) {
              var pendingFrame = -1;
              if (this.isPaused) {
                if (this.currentRawFrame + this.firstFrame < init) {
                  pendingFrame = init;
                } else if (this.currentRawFrame + this.firstFrame > end) {
                  pendingFrame = end - init;
                }
              }
              this.firstFrame = init;
              this.totalFrames = end - init;
              this.timeCompleted = this.totalFrames;
              if (pendingFrame !== -1) {
                this.goToAndStop(pendingFrame, true);
              }
            };
            AnimationItem.prototype.playSegments = function (arr, forceFlag) {
              if (forceFlag) {
                this.segments.length = 0;
              }
              if (_typeof$4(arr[0]) === 'object') {
                var i;
                var len = arr.length;
                for (i = 0; i < len; i += 1) {
                  this.segments.push(arr[i]);
                }
              } else {
                this.segments.push(arr);
              }
              if (this.segments.length && forceFlag) {
                this.adjustSegment(this.segments.shift(), 0);
              }
              if (this.isPaused) {
                this.play();
              }
            };
            AnimationItem.prototype.resetSegments = function (forceFlag) {
              this.segments.length = 0;
              this.segments.push([this.animationData.ip, this.animationData.op]);
              if (forceFlag) {
                this.checkSegments(0);
              }
            };
            AnimationItem.prototype.checkSegments = function (offset) {
              if (this.segments.length) {
                this.adjustSegment(this.segments.shift(), offset);
                return true;
              }
              return false;
            };
            AnimationItem.prototype.destroy = function (name) {
              if (name && this.name !== name || !this.renderer) {
                return;
              }
              this.renderer.destroy();
              this.imagePreloader.destroy();
              this.trigger('destroy');
              this._cbs = null;
              this.onEnterFrame = null;
              this.onLoopComplete = null;
              this.onComplete = null;
              this.onSegmentStart = null;
              this.onDestroy = null;
              this.renderer = null;
              this.expressionsPlugin = null;
              this.imagePreloader = null;
              this.projectInterface = null;
            };
            AnimationItem.prototype.setCurrentRawFrameValue = function (value) {
              this.currentRawFrame = value;
              this.gotoFrame();
            };
            AnimationItem.prototype.setSpeed = function (val) {
              this.playSpeed = val;
              this.updaFrameModifier();
            };
            AnimationItem.prototype.setDirection = function (val) {
              this.playDirection = val < 0 ? -1 : 1;
              this.updaFrameModifier();
            };
            AnimationItem.prototype.setLoop = function (isLooping) {
              this.loop = isLooping;
            };
            AnimationItem.prototype.setVolume = function (val, name) {
              if (name && this.name !== name) {
                return;
              }
              this.audioController.setVolume(val);
            };
            AnimationItem.prototype.getVolume = function () {
              return this.audioController.getVolume();
            };
            AnimationItem.prototype.mute = function (name) {
              if (name && this.name !== name) {
                return;
              }
              this.audioController.mute();
            };
            AnimationItem.prototype.unmute = function (name) {
              if (name && this.name !== name) {
                return;
              }
              this.audioController.unmute();
            };
            AnimationItem.prototype.updaFrameModifier = function () {
              this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
              this.audioController.setRate(this.playSpeed * this.playDirection);
            };
            AnimationItem.prototype.getPath = function () {
              return this.path;
            };
            AnimationItem.prototype.getAssetsPath = function (assetData) {
              var path = '';
              if (assetData.e) {
                path = assetData.p;
              } else if (this.assetsPath) {
                var imagePath = assetData.p;
                if (imagePath.indexOf('images/') !== -1) {
                  imagePath = imagePath.split('/')[1];
                }
                path = this.assetsPath + imagePath;
              } else {
                path = this.path;
                path += assetData.u ? assetData.u : '';
                path += assetData.p;
              }
              return path;
            };
            AnimationItem.prototype.getAssetData = function (id) {
              var i = 0;
              var len = this.assets.length;
              while (i < len) {
                if (id === this.assets[i].id) {
                  return this.assets[i];
                }
                i += 1;
              }
              return null;
            };
            AnimationItem.prototype.hide = function () {
              this.renderer.hide();
            };
            AnimationItem.prototype.show = function () {
              this.renderer.show();
            };
            AnimationItem.prototype.getDuration = function (isFrame) {
              return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
            };
            AnimationItem.prototype.updateDocumentData = function (path, documentData, index) {
              try {
                var element = this.renderer.getElementByPath(path);
                element.updateDocumentData(documentData, index);
              } catch (error) {// TODO: decide how to handle catch case
              }
            };
            AnimationItem.prototype.trigger = function (name) {
              if (this._cbs && this._cbs[name]) {
                switch (name) {
                  case 'enterFrame':
                    this.triggerEvent(name, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameModifier));
                    break;
                  case 'drawnFrame':
                    this.drawnFrameEvent.currentTime = this.currentFrame;
                    this.drawnFrameEvent.totalTime = this.totalFrames;
                    this.drawnFrameEvent.direction = this.frameModifier;
                    this.triggerEvent(name, this.drawnFrameEvent);
                    break;
                  case 'loopComplete':
                    this.triggerEvent(name, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
                    break;
                  case 'complete':
                    this.triggerEvent(name, new BMCompleteEvent(name, this.frameMult));
                    break;
                  case 'segmentStart':
                    this.triggerEvent(name, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
                    break;
                  case 'destroy':
                    this.triggerEvent(name, new BMDestroyEvent(name, this));
                    break;
                  default:
                    this.triggerEvent(name);
                }
              }
              if (name === 'enterFrame' && this.onEnterFrame) {
                this.onEnterFrame.call(this, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameMult));
              }
              if (name === 'loopComplete' && this.onLoopComplete) {
                this.onLoopComplete.call(this, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
              }
              if (name === 'complete' && this.onComplete) {
                this.onComplete.call(this, new BMCompleteEvent(name, this.frameMult));
              }
              if (name === 'segmentStart' && this.onSegmentStart) {
                this.onSegmentStart.call(this, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
              }
              if (name === 'destroy' && this.onDestroy) {
                this.onDestroy.call(this, new BMDestroyEvent(name, this));
              }
            };
            AnimationItem.prototype.triggerRenderFrameError = function (nativeError) {
              var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
              this.triggerEvent('error', error);
              if (this.onError) {
                this.onError.call(this, error);
              }
            };
            AnimationItem.prototype.triggerConfigError = function (nativeError) {
              var error = new BMConfigErrorEvent(nativeError, this.currentFrame);
              this.triggerEvent('error', error);
              if (this.onError) {
                this.onError.call(this, error);
              }
            };
            var animationManager = function () {
              var moduleOb = {};
              var registeredAnimations = [];
              var initTime = 0;
              var len = 0;
              var playingAnimationsNum = 0;
              var _stopped = true;
              var _isFrozen = false;
              function removeElement(ev) {
                var i = 0;
                var animItem = ev.target;
                while (i < len) {
                  if (registeredAnimations[i].animation === animItem) {
                    registeredAnimations.splice(i, 1);
                    i -= 1;
                    len -= 1;
                    if (!animItem.isPaused) {
                      subtractPlayingCount();
                    }
                  }
                  i += 1;
                }
              }
              function registerAnimation(element, animationData) {
                if (!element) {
                  return null;
                }
                var i = 0;
                while (i < len) {
                  if (registeredAnimations[i].elem === element && registeredAnimations[i].elem !== null) {
                    return registeredAnimations[i].animation;
                  }
                  i += 1;
                }
                var animItem = new AnimationItem();
                setupAnimation(animItem, element);
                animItem.setData(element, animationData);
                return animItem;
              }
              function getRegisteredAnimations() {
                var i;
                var lenAnims = registeredAnimations.length;
                var animations = [];
                for (i = 0; i < lenAnims; i += 1) {
                  animations.push(registeredAnimations[i].animation);
                }
                return animations;
              }
              function addPlayingCount() {
                playingAnimationsNum += 1;
                activate();
              }
              function subtractPlayingCount() {
                playingAnimationsNum -= 1;
              }
              function setupAnimation(animItem, element) {
                animItem.addEventListener('destroy', removeElement);
                animItem.addEventListener('_active', addPlayingCount);
                animItem.addEventListener('_idle', subtractPlayingCount);
                registeredAnimations.push({
                  elem: element,
                  animation: animItem
                });
                len += 1;
              }
              function loadAnimation(params) {
                var animItem = new AnimationItem();
                setupAnimation(animItem, null);
                animItem.setParams(params);
                return animItem;
              }
              function setSpeed(val, animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.setSpeed(val, animation);
                }
              }
              function setDirection(val, animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.setDirection(val, animation);
                }
              }
              function play(animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.play(animation);
                }
              }
              function resume(nowTime) {
                var elapsedTime = nowTime - initTime;
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.advanceTime(elapsedTime);
                }
                initTime = nowTime;
                if (playingAnimationsNum && !_isFrozen) {
                  window.requestAnimationFrame(resume);
                } else {
                  _stopped = true;
                }
              }
              function first(nowTime) {
                initTime = nowTime;
                window.requestAnimationFrame(resume);
              }
              function pause(animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.pause(animation);
                }
              }
              function goToAndStop(value, isFrame, animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.goToAndStop(value, isFrame, animation);
                }
              }
              function stop(animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.stop(animation);
                }
              }
              function togglePause(animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.togglePause(animation);
                }
              }
              function destroy(animation) {
                var i;
                for (i = len - 1; i >= 0; i -= 1) {
                  registeredAnimations[i].animation.destroy(animation);
                }
              }
              function searchAnimations(animationData, standalone, renderer) {
                var animElements = [].concat([].slice.call(document.getElementsByClassName('lottie')), [].slice.call(document.getElementsByClassName('bodymovin')));
                var i;
                var lenAnims = animElements.length;
                for (i = 0; i < lenAnims; i += 1) {
                  if (renderer) {
                    animElements[i].setAttribute('data-bm-type', renderer);
                  }
                  registerAnimation(animElements[i], animationData);
                }
                if (standalone && lenAnims === 0) {
                  if (!renderer) {
                    renderer = 'svg';
                  }
                  var body = document.getElementsByTagName('body')[0];
                  body.innerText = '';
                  var div = createTag('div');
                  div.style.width = '100%';
                  div.style.height = '100%';
                  div.setAttribute('data-bm-type', renderer);
                  body.appendChild(div);
                  registerAnimation(div, animationData);
                }
              }
              function resize() {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.resize();
                }
              }
              function activate() {
                if (!_isFrozen && playingAnimationsNum) {
                  if (_stopped) {
                    window.requestAnimationFrame(first);
                    _stopped = false;
                  }
                }
              }
              function freeze() {
                _isFrozen = true;
              }
              function unfreeze() {
                _isFrozen = false;
                activate();
              }
              function setVolume(val, animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.setVolume(val, animation);
                }
              }
              function mute(animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.mute(animation);
                }
              }
              function unmute(animation) {
                var i;
                for (i = 0; i < len; i += 1) {
                  registeredAnimations[i].animation.unmute(animation);
                }
              }
              moduleOb.registerAnimation = registerAnimation;
              moduleOb.loadAnimation = loadAnimation;
              moduleOb.setSpeed = setSpeed;
              moduleOb.setDirection = setDirection;
              moduleOb.play = play;
              moduleOb.pause = pause;
              moduleOb.stop = stop;
              moduleOb.togglePause = togglePause;
              moduleOb.searchAnimations = searchAnimations;
              moduleOb.resize = resize; // moduleOb.start = start;

              moduleOb.goToAndStop = goToAndStop;
              moduleOb.destroy = destroy;
              moduleOb.freeze = freeze;
              moduleOb.unfreeze = unfreeze;
              moduleOb.setVolume = setVolume;
              moduleOb.mute = mute;
              moduleOb.unmute = unmute;
              moduleOb.getRegisteredAnimations = getRegisteredAnimations;
              return moduleOb;
            }();

            /* eslint-disable */
            var BezierFactory = function () {
              /**
                 * BezierEasing - use bezier curve for transition easing function
                 * by Gaëtan Renaudeau 2014 - 2015 – MIT License
                 *
                 * Credits: is based on Firefox's nsSMILKeySpline.cpp
                 * Usage:
                 * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
                 * spline.get(x) => returns the easing value | x must be in [0, 1] range
                 *
                 */
              var ob = {};
              ob.getBezierEasing = getBezierEasing;
              var beziers = {};
              function getBezierEasing(a, b, c, d, nm) {
                var str = nm || ('bez_' + a + '_' + b + '_' + c + '_' + d).replace(/\./g, 'p');
                if (beziers[str]) {
                  return beziers[str];
                }
                var bezEasing = new BezierEasing([a, b, c, d]);
                beziers[str] = bezEasing;
                return bezEasing;
              } // These values are established by empiricism with tests (tradeoff: performance VS precision)

              var NEWTON_ITERATIONS = 4;
              var NEWTON_MIN_SLOPE = 0.001;
              var SUBDIVISION_PRECISION = 0.0000001;
              var SUBDIVISION_MAX_ITERATIONS = 10;
              var kSplineTableSize = 11;
              var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
              var float32ArraySupported = typeof Float32Array === 'function';
              function A(aA1, aA2) {
                return 1.0 - 3.0 * aA2 + 3.0 * aA1;
              }
              function B(aA1, aA2) {
                return 3.0 * aA2 - 6.0 * aA1;
              }
              function C(aA1) {
                return 3.0 * aA1;
              } // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.

              function calcBezier(aT, aA1, aA2) {
                return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
              } // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.

              function getSlope(aT, aA1, aA2) {
                return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
              }
              function binarySubdivide(aX, aA, aB, mX1, mX2) {
                var currentX,
                  currentT,
                  i = 0;
                do {
                  currentT = aA + (aB - aA) / 2.0;
                  currentX = calcBezier(currentT, mX1, mX2) - aX;
                  if (currentX > 0.0) {
                    aB = currentT;
                  } else {
                    aA = currentT;
                  }
                } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
                return currentT;
              }
              function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
                for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
                  var currentSlope = getSlope(aGuessT, mX1, mX2);
                  if (currentSlope === 0.0) return aGuessT;
                  var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
                  aGuessT -= currentX / currentSlope;
                }
                return aGuessT;
              }
              /**
                 * points is an array of [ mX1, mY1, mX2, mY2 ]
                 */

              function BezierEasing(points) {
                this._p = points;
                this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
                this._precomputed = false;
                this.get = this.get.bind(this);
              }
              BezierEasing.prototype = {
                get: function get(x) {
                  var mX1 = this._p[0],
                    mY1 = this._p[1],
                    mX2 = this._p[2],
                    mY2 = this._p[3];
                  if (!this._precomputed) this._precompute();
                  if (mX1 === mY1 && mX2 === mY2) return x; // linear
                  // Because JavaScript number are imprecise, we should guarantee the extremes are right.

                  if (x === 0) return 0;
                  if (x === 1) return 1;
                  return calcBezier(this._getTForX(x), mY1, mY2);
                },
                // Private part
                _precompute: function _precompute() {
                  var mX1 = this._p[0],
                    mY1 = this._p[1],
                    mX2 = this._p[2],
                    mY2 = this._p[3];
                  this._precomputed = true;
                  if (mX1 !== mY1 || mX2 !== mY2) {
                    this._calcSampleValues();
                  }
                },
                _calcSampleValues: function _calcSampleValues() {
                  var mX1 = this._p[0],
                    mX2 = this._p[2];
                  for (var i = 0; i < kSplineTableSize; ++i) {
                    this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
                  }
                },
                /**
                     * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
                     */
                _getTForX: function _getTForX(aX) {
                  var mX1 = this._p[0],
                    mX2 = this._p[2],
                    mSampleValues = this._mSampleValues;
                  var intervalStart = 0.0;
                  var currentSample = 1;
                  var lastSample = kSplineTableSize - 1;
                  for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
                    intervalStart += kSampleStepSize;
                  }
                  --currentSample; // Interpolate to provide an initial guess for t

                  var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
                  var guessForT = intervalStart + dist * kSampleStepSize;
                  var initialSlope = getSlope(guessForT, mX1, mX2);
                  if (initialSlope >= NEWTON_MIN_SLOPE) {
                    return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
                  }
                  if (initialSlope === 0.0) {
                    return guessForT;
                  }
                  return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
                }
              };
              return ob;
            }();
            var pooling = function () {
              function _double(arr) {
                return arr.concat(createSizedArray(arr.length));
              }
              return {
                "double": _double
              };
            }();
            var poolFactory = function () {
              return function (initialLength, _create, _release) {
                var _length = 0;
                var _maxLength = initialLength;
                var pool = createSizedArray(_maxLength);
                var ob = {
                  newElement: newElement,
                  release: release
                };
                function newElement() {
                  var element;
                  if (_length) {
                    _length -= 1;
                    element = pool[_length];
                  } else {
                    element = _create();
                  }
                  return element;
                }
                function release(element) {
                  if (_length === _maxLength) {
                    pool = pooling["double"](pool);
                    _maxLength *= 2;
                  }
                  if (_release) {
                    _release(element);
                  }
                  pool[_length] = element;
                  _length += 1;
                }
                return ob;
              };
            }();
            var bezierLengthPool = function () {
              function create() {
                return {
                  addedLength: 0,
                  percents: createTypedArray('float32', getDefaultCurveSegments()),
                  lengths: createTypedArray('float32', getDefaultCurveSegments())
                };
              }
              return poolFactory(8, create);
            }();
            var segmentsLengthPool = function () {
              function create() {
                return {
                  lengths: [],
                  totalLength: 0
                };
              }
              function release(element) {
                var i;
                var len = element.lengths.length;
                for (i = 0; i < len; i += 1) {
                  bezierLengthPool.release(element.lengths[i]);
                }
                element.lengths.length = 0;
              }
              return poolFactory(8, create, release);
            }();
            function bezFunction() {
              var math = Math;
              function pointOnLine2D(x1, y1, x2, y2, x3, y3) {
                var det1 = x1 * y2 + y1 * x3 + x2 * y3 - x3 * y2 - y3 * x1 - x2 * y1;
                return det1 > -0.001 && det1 < 0.001;
              }
              function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
                if (z1 === 0 && z2 === 0 && z3 === 0) {
                  return pointOnLine2D(x1, y1, x2, y2, x3, y3);
                }
                var dist1 = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) + math.pow(z2 - z1, 2));
                var dist2 = math.sqrt(math.pow(x3 - x1, 2) + math.pow(y3 - y1, 2) + math.pow(z3 - z1, 2));
                var dist3 = math.sqrt(math.pow(x3 - x2, 2) + math.pow(y3 - y2, 2) + math.pow(z3 - z2, 2));
                var diffDist;
                if (dist1 > dist2) {
                  if (dist1 > dist3) {
                    diffDist = dist1 - dist2 - dist3;
                  } else {
                    diffDist = dist3 - dist2 - dist1;
                  }
                } else if (dist3 > dist2) {
                  diffDist = dist3 - dist2 - dist1;
                } else {
                  diffDist = dist2 - dist1 - dist3;
                }
                return diffDist > -0.0001 && diffDist < 0.0001;
              }
              var getBezierLength = function () {
                return function (pt1, pt2, pt3, pt4) {
                  var curveSegments = getDefaultCurveSegments();
                  var k;
                  var i;
                  var len;
                  var ptCoord;
                  var perc;
                  var addedLength = 0;
                  var ptDistance;
                  var point = [];
                  var lastPoint = [];
                  var lengthData = bezierLengthPool.newElement();
                  len = pt3.length;
                  for (k = 0; k < curveSegments; k += 1) {
                    perc = k / (curveSegments - 1);
                    ptDistance = 0;
                    for (i = 0; i < len; i += 1) {
                      ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * pt3[i] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i] + bmPow(perc, 3) * pt2[i];
                      point[i] = ptCoord;
                      if (lastPoint[i] !== null) {
                        ptDistance += bmPow(point[i] - lastPoint[i], 2);
                      }
                      lastPoint[i] = point[i];
                    }
                    if (ptDistance) {
                      ptDistance = bmSqrt(ptDistance);
                      addedLength += ptDistance;
                    }
                    lengthData.percents[k] = perc;
                    lengthData.lengths[k] = addedLength;
                  }
                  lengthData.addedLength = addedLength;
                  return lengthData;
                };
              }();
              function getSegmentsLength(shapeData) {
                var segmentsLength = segmentsLengthPool.newElement();
                var closed = shapeData.c;
                var pathV = shapeData.v;
                var pathO = shapeData.o;
                var pathI = shapeData.i;
                var i;
                var len = shapeData._length;
                var lengths = segmentsLength.lengths;
                var totalLength = 0;
                for (i = 0; i < len - 1; i += 1) {
                  lengths[i] = getBezierLength(pathV[i], pathV[i + 1], pathO[i], pathI[i + 1]);
                  totalLength += lengths[i].addedLength;
                }
                if (closed && len) {
                  lengths[i] = getBezierLength(pathV[i], pathV[0], pathO[i], pathI[0]);
                  totalLength += lengths[i].addedLength;
                }
                segmentsLength.totalLength = totalLength;
                return segmentsLength;
              }
              function BezierData(length) {
                this.segmentLength = 0;
                this.points = new Array(length);
              }
              function PointData(partial, point) {
                this.partialLength = partial;
                this.point = point;
              }
              var buildBezierData = function () {
                var storedData = {};
                return function (pt1, pt2, pt3, pt4) {
                  var bezierName = (pt1[0] + '_' + pt1[1] + '_' + pt2[0] + '_' + pt2[1] + '_' + pt3[0] + '_' + pt3[1] + '_' + pt4[0] + '_' + pt4[1]).replace(/\./g, 'p');
                  if (!storedData[bezierName]) {
                    var curveSegments = getDefaultCurveSegments();
                    var k;
                    var i;
                    var len;
                    var ptCoord;
                    var perc;
                    var addedLength = 0;
                    var ptDistance;
                    var point;
                    var lastPoint = null;
                    if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
                      curveSegments = 2;
                    }
                    var bezierData = new BezierData(curveSegments);
                    len = pt3.length;
                    for (k = 0; k < curveSegments; k += 1) {
                      point = createSizedArray(len);
                      perc = k / (curveSegments - 1);
                      ptDistance = 0;
                      for (i = 0; i < len; i += 1) {
                        ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i] + pt3[i]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i] + pt4[i]) + bmPow(perc, 3) * pt2[i];
                        point[i] = ptCoord;
                        if (lastPoint !== null) {
                          ptDistance += bmPow(point[i] - lastPoint[i], 2);
                        }
                      }
                      ptDistance = bmSqrt(ptDistance);
                      addedLength += ptDistance;
                      bezierData.points[k] = new PointData(ptDistance, point);
                      lastPoint = point;
                    }
                    bezierData.segmentLength = addedLength;
                    storedData[bezierName] = bezierData;
                  }
                  return storedData[bezierName];
                };
              }();
              function getDistancePerc(perc, bezierData) {
                var percents = bezierData.percents;
                var lengths = bezierData.lengths;
                var len = percents.length;
                var initPos = bmFloor((len - 1) * perc);
                var lengthPos = perc * bezierData.addedLength;
                var lPerc = 0;
                if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
                  return percents[initPos];
                }
                var dir = lengths[initPos] > lengthPos ? -1 : 1;
                var flag = true;
                while (flag) {
                  if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
                    lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
                    flag = false;
                  } else {
                    initPos += dir;
                  }
                  if (initPos < 0 || initPos >= len - 1) {
                    // FIX for TypedArrays that don't store floating point values with enough accuracy
                    if (initPos === len - 1) {
                      return percents[initPos];
                    }
                    flag = false;
                  }
                }
                return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
              }
              function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
                var t1 = getDistancePerc(percent, bezierData);
                var u1 = 1 - t1;
                var ptX = math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1000) / 1000;
                var ptY = math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1000) / 1000;
                return [ptX, ptY];
              }
              var bezierSegmentPoints = createTypedArray('float32', 8);
              function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {
                if (startPerc < 0) {
                  startPerc = 0;
                } else if (startPerc > 1) {
                  startPerc = 1;
                }
                var t0 = getDistancePerc(startPerc, bezierData);
                endPerc = endPerc > 1 ? 1 : endPerc;
                var t1 = getDistancePerc(endPerc, bezierData);
                var i;
                var len = pt1.length;
                var u0 = 1 - t0;
                var u1 = 1 - t1;
                var u0u0u0 = u0 * u0 * u0;
                var t0u0u0_3 = t0 * u0 * u0 * 3; // eslint-disable-line camelcase

                var t0t0u0_3 = t0 * t0 * u0 * 3; // eslint-disable-line camelcase

                var t0t0t0 = t0 * t0 * t0; //

                var u0u0u1 = u0 * u0 * u1;
                var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1; // eslint-disable-line camelcase

                var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1; // eslint-disable-line camelcase

                var t0t0t1 = t0 * t0 * t1; //

                var u0u1u1 = u0 * u1 * u1;
                var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1; // eslint-disable-line camelcase

                var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1; // eslint-disable-line camelcase

                var t0t1t1 = t0 * t1 * t1; //

                var u1u1u1 = u1 * u1 * u1;
                var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1; // eslint-disable-line camelcase

                var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1; // eslint-disable-line camelcase

                var t1t1t1 = t1 * t1 * t1;
                for (i = 0; i < len; i += 1) {
                  bezierSegmentPoints[i * 4] = math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase

                  bezierSegmentPoints[i * 4 + 1] = math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase

                  bezierSegmentPoints[i * 4 + 2] = math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase

                  bezierSegmentPoints[i * 4 + 3] = math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase
                }

                return bezierSegmentPoints;
              }
              return {
                getSegmentsLength: getSegmentsLength,
                getNewSegment: getNewSegment,
                getPointInSegment: getPointInSegment,
                buildBezierData: buildBezierData,
                pointOnLine2D: pointOnLine2D,
                pointOnLine3D: pointOnLine3D
              };
            }
            var bez = bezFunction();
            var initFrame = initialDefaultFrame;
            var mathAbs = Math.abs;
            function interpolateValue(frameNum, caching) {
              var offsetTime = this.offsetTime;
              var newValue;
              if (this.propType === 'multidimensional') {
                newValue = createTypedArray('float32', this.pv.length);
              }
              var iterationIndex = caching.lastIndex;
              var i = iterationIndex;
              var len = this.keyframes.length - 1;
              var flag = true;
              var keyData;
              var nextKeyData;
              var keyframeMetadata;
              while (flag) {
                keyData = this.keyframes[i];
                nextKeyData = this.keyframes[i + 1];
                if (i === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
                  if (keyData.h) {
                    keyData = nextKeyData;
                  }
                  iterationIndex = 0;
                  break;
                }
                if (nextKeyData.t - offsetTime > frameNum) {
                  iterationIndex = i;
                  break;
                }
                if (i < len - 1) {
                  i += 1;
                } else {
                  iterationIndex = 0;
                  flag = false;
                }
              }
              keyframeMetadata = this.keyframesMetadata[i] || {};
              var k;
              var kLen;
              var perc;
              var jLen;
              var j;
              var fnc;
              var nextKeyTime = nextKeyData.t - offsetTime;
              var keyTime = keyData.t - offsetTime;
              var endValue;
              if (keyData.to) {
                if (!keyframeMetadata.bezierData) {
                  keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
                }
                var bezierData = keyframeMetadata.bezierData;
                if (frameNum >= nextKeyTime || frameNum < keyTime) {
                  var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
                  kLen = bezierData.points[ind].point.length;
                  for (k = 0; k < kLen; k += 1) {
                    newValue[k] = bezierData.points[ind].point[k];
                  } // caching._lastKeyframeIndex = -1;
                } else {
                  if (keyframeMetadata.__fnct) {
                    fnc = keyframeMetadata.__fnct;
                  } else {
                    fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
                    keyframeMetadata.__fnct = fnc;
                  }
                  perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                  var distanceInLine = bezierData.segmentLength * perc;
                  var segmentPerc;
                  var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastAddedLength : 0;
                  j = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastPoint : 0;
                  flag = true;
                  jLen = bezierData.points.length;
                  while (flag) {
                    addedLength += bezierData.points[j].partialLength;
                    if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {
                      kLen = bezierData.points[j].point.length;
                      for (k = 0; k < kLen; k += 1) {
                        newValue[k] = bezierData.points[j].point[k];
                      }
                      break;
                    } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
                      segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;
                      kLen = bezierData.points[j].point.length;
                      for (k = 0; k < kLen; k += 1) {
                        newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j + 1].point[k] - bezierData.points[j].point[k]) * segmentPerc;
                      }
                      break;
                    }
                    if (j < jLen - 1) {
                      j += 1;
                    } else {
                      flag = false;
                    }
                  }
                  caching._lastPoint = j;
                  caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
                  caching._lastKeyframeIndex = i;
                }
              } else {
                var outX;
                var outY;
                var inX;
                var inY;
                var keyValue;
                len = keyData.s.length;
                endValue = nextKeyData.s || keyData.e;
                if (this.sh && keyData.h !== 1) {
                  if (frameNum >= nextKeyTime) {
                    newValue[0] = endValue[0];
                    newValue[1] = endValue[1];
                    newValue[2] = endValue[2];
                  } else if (frameNum <= keyTime) {
                    newValue[0] = keyData.s[0];
                    newValue[1] = keyData.s[1];
                    newValue[2] = keyData.s[2];
                  } else {
                    var quatStart = createQuaternion(keyData.s);
                    var quatEnd = createQuaternion(endValue);
                    var time = (frameNum - keyTime) / (nextKeyTime - keyTime);
                    quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));
                  }
                } else {
                  for (i = 0; i < len; i += 1) {
                    if (keyData.h !== 1) {
                      if (frameNum >= nextKeyTime) {
                        perc = 1;
                      } else if (frameNum < keyTime) {
                        perc = 0;
                      } else {
                        if (keyData.o.x.constructor === Array) {
                          if (!keyframeMetadata.__fnct) {
                            keyframeMetadata.__fnct = [];
                          }
                          if (!keyframeMetadata.__fnct[i]) {
                            outX = keyData.o.x[i] === undefined ? keyData.o.x[0] : keyData.o.x[i];
                            outY = keyData.o.y[i] === undefined ? keyData.o.y[0] : keyData.o.y[i];
                            inX = keyData.i.x[i] === undefined ? keyData.i.x[0] : keyData.i.x[i];
                            inY = keyData.i.y[i] === undefined ? keyData.i.y[0] : keyData.i.y[i];
                            fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                            keyframeMetadata.__fnct[i] = fnc;
                          } else {
                            fnc = keyframeMetadata.__fnct[i];
                          }
                        } else if (!keyframeMetadata.__fnct) {
                          outX = keyData.o.x;
                          outY = keyData.o.y;
                          inX = keyData.i.x;
                          inY = keyData.i.y;
                          fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                          keyData.keyframeMetadata = fnc;
                        } else {
                          fnc = keyframeMetadata.__fnct;
                        }
                        perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                      }
                    }
                    endValue = nextKeyData.s || keyData.e;
                    keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i] + (endValue[i] - keyData.s[i]) * perc;
                    if (this.propType === 'multidimensional') {
                      newValue[i] = keyValue;
                    } else {
                      newValue = keyValue;
                    }
                  }
                }
              }
              caching.lastIndex = iterationIndex;
              return newValue;
            } // based on @Toji's https://github.com/toji/gl-matrix/

            function slerp(a, b, t) {
              var out = [];
              var ax = a[0];
              var ay = a[1];
              var az = a[2];
              var aw = a[3];
              var bx = b[0];
              var by = b[1];
              var bz = b[2];
              var bw = b[3];
              var omega;
              var cosom;
              var sinom;
              var scale0;
              var scale1;
              cosom = ax * bx + ay * by + az * bz + aw * bw;
              if (cosom < 0.0) {
                cosom = -cosom;
                bx = -bx;
                by = -by;
                bz = -bz;
                bw = -bw;
              }
              if (1.0 - cosom > 0.000001) {
                omega = Math.acos(cosom);
                sinom = Math.sin(omega);
                scale0 = Math.sin((1.0 - t) * omega) / sinom;
                scale1 = Math.sin(t * omega) / sinom;
              } else {
                scale0 = 1.0 - t;
                scale1 = t;
              }
              out[0] = scale0 * ax + scale1 * bx;
              out[1] = scale0 * ay + scale1 * by;
              out[2] = scale0 * az + scale1 * bz;
              out[3] = scale0 * aw + scale1 * bw;
              return out;
            }
            function quaternionToEuler(out, quat) {
              var qx = quat[0];
              var qy = quat[1];
              var qz = quat[2];
              var qw = quat[3];
              var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
              var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
              var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
              out[0] = heading / degToRads;
              out[1] = attitude / degToRads;
              out[2] = bank / degToRads;
            }
            function createQuaternion(values) {
              var heading = values[0] * degToRads;
              var attitude = values[1] * degToRads;
              var bank = values[2] * degToRads;
              var c1 = Math.cos(heading / 2);
              var c2 = Math.cos(attitude / 2);
              var c3 = Math.cos(bank / 2);
              var s1 = Math.sin(heading / 2);
              var s2 = Math.sin(attitude / 2);
              var s3 = Math.sin(bank / 2);
              var w = c1 * c2 * c3 - s1 * s2 * s3;
              var x = s1 * s2 * c3 + c1 * c2 * s3;
              var y = s1 * c2 * c3 + c1 * s2 * s3;
              var z = c1 * s2 * c3 - s1 * c2 * s3;
              return [x, y, z, w];
            }
            function getValueAtCurrentTime() {
              var frameNum = this.comp.renderedFrame - this.offsetTime;
              var initTime = this.keyframes[0].t - this.offsetTime;
              var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
              if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
                if (this._caching.lastFrame >= frameNum) {
                  this._caching._lastKeyframeIndex = -1;
                  this._caching.lastIndex = 0;
                }
                var renderResult = this.interpolateValue(frameNum, this._caching);
                this.pv = renderResult;
              }
              this._caching.lastFrame = frameNum;
              return this.pv;
            }
            function setVValue(val) {
              var multipliedValue;
              if (this.propType === 'unidimensional') {
                multipliedValue = val * this.mult;
                if (mathAbs(this.v - multipliedValue) > 0.00001) {
                  this.v = multipliedValue;
                  this._mdf = true;
                }
              } else {
                var i = 0;
                var len = this.v.length;
                while (i < len) {
                  multipliedValue = val[i] * this.mult;
                  if (mathAbs(this.v[i] - multipliedValue) > 0.00001) {
                    this.v[i] = multipliedValue;
                    this._mdf = true;
                  }
                  i += 1;
                }
              }
            }
            function processEffectsSequence() {
              if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
                return;
              }
              if (this.lock) {
                this.setVValue(this.pv);
                return;
              }
              this.lock = true;
              this._mdf = this._isFirstFrame;
              var i;
              var len = this.effectsSequence.length;
              var finalValue = this.kf ? this.pv : this.data.k;
              for (i = 0; i < len; i += 1) {
                finalValue = this.effectsSequence[i](finalValue);
              }
              this.setVValue(finalValue);
              this._isFirstFrame = false;
              this.lock = false;
              this.frameId = this.elem.globalData.frameId;
            }
            function addEffect(effectFunction) {
              this.effectsSequence.push(effectFunction);
              this.container.addDynamicProperty(this);
            }
            function ValueProperty(elem, data, mult, container) {
              this.propType = 'unidimensional';
              this.mult = mult || 1;
              this.data = data;
              this.v = mult ? data.k * mult : data.k;
              this.pv = data.k;
              this._mdf = false;
              this.elem = elem;
              this.container = container;
              this.comp = elem.comp;
              this.k = false;
              this.kf = false;
              this.vel = 0;
              this.effectsSequence = [];
              this._isFirstFrame = true;
              this.getValue = processEffectsSequence;
              this.setVValue = setVValue;
              this.addEffect = addEffect;
            }
            function MultiDimensionalProperty(elem, data, mult, container) {
              this.propType = 'multidimensional';
              this.mult = mult || 1;
              this.data = data;
              this._mdf = false;
              this.elem = elem;
              this.container = container;
              this.comp = elem.comp;
              this.k = false;
              this.kf = false;
              this.frameId = -1;
              var i;
              var len = data.k.length;
              this.v = createTypedArray('float32', len);
              this.pv = createTypedArray('float32', len);
              this.vel = createTypedArray('float32', len);
              for (i = 0; i < len; i += 1) {
                this.v[i] = data.k[i] * this.mult;
                this.pv[i] = data.k[i];
              }
              this._isFirstFrame = true;
              this.effectsSequence = [];
              this.getValue = processEffectsSequence;
              this.setVValue = setVValue;
              this.addEffect = addEffect;
            }
            function KeyframedValueProperty(elem, data, mult, container) {
              this.propType = 'unidimensional';
              this.keyframes = data.k;
              this.keyframesMetadata = [];
              this.offsetTime = elem.data.st;
              this.frameId = -1;
              this._caching = {
                lastFrame: initFrame,
                lastIndex: 0,
                value: 0,
                _lastKeyframeIndex: -1
              };
              this.k = true;
              this.kf = true;
              this.data = data;
              this.mult = mult || 1;
              this.elem = elem;
              this.container = container;
              this.comp = elem.comp;
              this.v = initFrame;
              this.pv = initFrame;
              this._isFirstFrame = true;
              this.getValue = processEffectsSequence;
              this.setVValue = setVValue;
              this.interpolateValue = interpolateValue;
              this.effectsSequence = [getValueAtCurrentTime.bind(this)];
              this.addEffect = addEffect;
            }
            function KeyframedMultidimensionalProperty(elem, data, mult, container) {
              this.propType = 'multidimensional';
              var i;
              var len = data.k.length;
              var s;
              var e;
              var to;
              var ti;
              for (i = 0; i < len - 1; i += 1) {
                if (data.k[i].to && data.k[i].s && data.k[i + 1] && data.k[i + 1].s) {
                  s = data.k[i].s;
                  e = data.k[i + 1].s;
                  to = data.k[i].to;
                  ti = data.k[i].ti;
                  if (s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], s[0] + to[0], s[1] + to[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], e[0] + ti[0], e[1] + ti[1]) || s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], s[0] + to[0], s[1] + to[1], s[2] + to[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], e[0] + ti[0], e[1] + ti[1], e[2] + ti[2])) {
                    data.k[i].to = null;
                    data.k[i].ti = null;
                  }
                  if (s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
                    if (s.length === 2 || s[2] === e[2] && to[2] === 0 && ti[2] === 0) {
                      data.k[i].to = null;
                      data.k[i].ti = null;
                    }
                  }
                }
              }
              this.effectsSequence = [getValueAtCurrentTime.bind(this)];
              this.data = data;
              this.keyframes = data.k;
              this.keyframesMetadata = [];
              this.offsetTime = elem.data.st;
              this.k = true;
              this.kf = true;
              this._isFirstFrame = true;
              this.mult = mult || 1;
              this.elem = elem;
              this.container = container;
              this.comp = elem.comp;
              this.getValue = processEffectsSequence;
              this.setVValue = setVValue;
              this.interpolateValue = interpolateValue;
              this.frameId = -1;
              var arrLen = data.k[0].s.length;
              this.v = createTypedArray('float32', arrLen);
              this.pv = createTypedArray('float32', arrLen);
              for (i = 0; i < arrLen; i += 1) {
                this.v[i] = initFrame;
                this.pv[i] = initFrame;
              }
              this._caching = {
                lastFrame: initFrame,
                lastIndex: 0,
                value: createTypedArray('float32', arrLen)
              };
              this.addEffect = addEffect;
            }
            var PropertyFactory = function () {
              function getProp(elem, data, type, mult, container) {
                if (data.sid) {
                  data = elem.globalData.slotManager.getProp(data);
                }
                var p;
                if (!data.k.length) {
                  p = new ValueProperty(elem, data, mult, container);
                } else if (typeof data.k[0] === 'number') {
                  p = new MultiDimensionalProperty(elem, data, mult, container);
                } else {
                  switch (type) {
                    case 0:
                      p = new KeyframedValueProperty(elem, data, mult, container);
                      break;
                    case 1:
                      p = new KeyframedMultidimensionalProperty(elem, data, mult, container);
                      break;
                  }
                }
                if (p.effectsSequence.length) {
                  container.addDynamicProperty(p);
                }
                return p;
              }
              var ob = {
                getProp: getProp
              };
              return ob;
            }();
            function DynamicPropertyContainer() {}
            DynamicPropertyContainer.prototype = {
              addDynamicProperty: function addDynamicProperty(prop) {
                if (this.dynamicProperties.indexOf(prop) === -1) {
                  this.dynamicProperties.push(prop);
                  this.container.addDynamicProperty(this);
                  this._isAnimated = true;
                }
              },
              iterateDynamicProperties: function iterateDynamicProperties() {
                this._mdf = false;
                var i;
                var len = this.dynamicProperties.length;
                for (i = 0; i < len; i += 1) {
                  this.dynamicProperties[i].getValue();
                  if (this.dynamicProperties[i]._mdf) {
                    this._mdf = true;
                  }
                }
              },
              initDynamicPropertyContainer: function initDynamicPropertyContainer(container) {
                this.container = container;
                this.dynamicProperties = [];
                this._mdf = false;
                this._isAnimated = false;
              }
            };
            var pointPool = function () {
              function create() {
                return createTypedArray('float32', 2);
              }
              return poolFactory(8, create);
            }();
            function ShapePath() {
              this.c = false;
              this._length = 0;
              this._maxLength = 8;
              this.v = createSizedArray(this._maxLength);
              this.o = createSizedArray(this._maxLength);
              this.i = createSizedArray(this._maxLength);
            }
            ShapePath.prototype.setPathData = function (closed, len) {
              this.c = closed;
              this.setLength(len);
              var i = 0;
              while (i < len) {
                this.v[i] = pointPool.newElement();
                this.o[i] = pointPool.newElement();
                this.i[i] = pointPool.newElement();
                i += 1;
              }
            };
            ShapePath.prototype.setLength = function (len) {
              while (this._maxLength < len) {
                this.doubleArrayLength();
              }
              this._length = len;
            };
            ShapePath.prototype.doubleArrayLength = function () {
              this.v = this.v.concat(createSizedArray(this._maxLength));
              this.i = this.i.concat(createSizedArray(this._maxLength));
              this.o = this.o.concat(createSizedArray(this._maxLength));
              this._maxLength *= 2;
            };
            ShapePath.prototype.setXYAt = function (x, y, type, pos, replace) {
              var arr;
              this._length = Math.max(this._length, pos + 1);
              if (this._length >= this._maxLength) {
                this.doubleArrayLength();
              }
              switch (type) {
                case 'v':
                  arr = this.v;
                  break;
                case 'i':
                  arr = this.i;
                  break;
                case 'o':
                  arr = this.o;
                  break;
                default:
                  arr = [];
                  break;
              }
              if (!arr[pos] || arr[pos] && !replace) {
                arr[pos] = pointPool.newElement();
              }
              arr[pos][0] = x;
              arr[pos][1] = y;
            };
            ShapePath.prototype.setTripleAt = function (vX, vY, oX, oY, iX, iY, pos, replace) {
              this.setXYAt(vX, vY, 'v', pos, replace);
              this.setXYAt(oX, oY, 'o', pos, replace);
              this.setXYAt(iX, iY, 'i', pos, replace);
            };
            ShapePath.prototype.reverse = function () {
              var newPath = new ShapePath();
              newPath.setPathData(this.c, this._length);
              var vertices = this.v;
              var outPoints = this.o;
              var inPoints = this.i;
              var init = 0;
              if (this.c) {
                newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
                init = 1;
              }
              var cnt = this._length - 1;
              var len = this._length;
              var i;
              for (i = init; i < len; i += 1) {
                newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);
                cnt -= 1;
              }
              return newPath;
            };
            ShapePath.prototype.length = function () {
              return this._length;
            };
            var shapePool = function () {
              function create() {
                return new ShapePath();
              }
              function release(shapePath) {
                var len = shapePath._length;
                var i;
                for (i = 0; i < len; i += 1) {
                  pointPool.release(shapePath.v[i]);
                  pointPool.release(shapePath.i[i]);
                  pointPool.release(shapePath.o[i]);
                  shapePath.v[i] = null;
                  shapePath.i[i] = null;
                  shapePath.o[i] = null;
                }
                shapePath._length = 0;
                shapePath.c = false;
              }
              function clone(shape) {
                var cloned = factory.newElement();
                var i;
                var len = shape._length === undefined ? shape.v.length : shape._length;
                cloned.setLength(len);
                cloned.c = shape.c;
                for (i = 0; i < len; i += 1) {
                  cloned.setTripleAt(shape.v[i][0], shape.v[i][1], shape.o[i][0], shape.o[i][1], shape.i[i][0], shape.i[i][1], i);
                }
                return cloned;
              }
              var factory = poolFactory(4, create, release);
              factory.clone = clone;
              return factory;
            }();
            function ShapeCollection() {
              this._length = 0;
              this._maxLength = 4;
              this.shapes = createSizedArray(this._maxLength);
            }
            ShapeCollection.prototype.addShape = function (shapeData) {
              if (this._length === this._maxLength) {
                this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
                this._maxLength *= 2;
              }
              this.shapes[this._length] = shapeData;
              this._length += 1;
            };
            ShapeCollection.prototype.releaseShapes = function () {
              var i;
              for (i = 0; i < this._length; i += 1) {
                shapePool.release(this.shapes[i]);
              }
              this._length = 0;
            };
            var shapeCollectionPool = function () {
              var ob = {
                newShapeCollection: newShapeCollection,
                release: release
              };
              var _length = 0;
              var _maxLength = 4;
              var pool = createSizedArray(_maxLength);
              function newShapeCollection() {
                var shapeCollection;
                if (_length) {
                  _length -= 1;
                  shapeCollection = pool[_length];
                } else {
                  shapeCollection = new ShapeCollection();
                }
                return shapeCollection;
              }
              function release(shapeCollection) {
                var i;
                var len = shapeCollection._length;
                for (i = 0; i < len; i += 1) {
                  shapePool.release(shapeCollection.shapes[i]);
                }
                shapeCollection._length = 0;
                if (_length === _maxLength) {
                  pool = pooling["double"](pool);
                  _maxLength *= 2;
                }
                pool[_length] = shapeCollection;
                _length += 1;
              }
              return ob;
            }();
            var ShapePropertyFactory = function () {
              var initFrame = -999999;
              function interpolateShape(frameNum, previousValue, caching) {
                var iterationIndex = caching.lastIndex;
                var keyPropS;
                var keyPropE;
                var isHold;
                var j;
                var k;
                var jLen;
                var kLen;
                var perc;
                var vertexValue;
                var kf = this.keyframes;
                if (frameNum < kf[0].t - this.offsetTime) {
                  keyPropS = kf[0].s[0];
                  isHold = true;
                  iterationIndex = 0;
                } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {
                  keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
                  /* if(kf[kf.length - 1].s){
                            keyPropS = kf[kf.length - 1].s[0];
                        }else{
                            keyPropS = kf[kf.length - 2].e[0];
                        } */

                  isHold = true;
                } else {
                  var i = iterationIndex;
                  var len = kf.length - 1;
                  var flag = true;
                  var keyData;
                  var nextKeyData;
                  var keyframeMetadata;
                  while (flag) {
                    keyData = kf[i];
                    nextKeyData = kf[i + 1];
                    if (nextKeyData.t - this.offsetTime > frameNum) {
                      break;
                    }
                    if (i < len - 1) {
                      i += 1;
                    } else {
                      flag = false;
                    }
                  }
                  keyframeMetadata = this.keyframesMetadata[i] || {};
                  isHold = keyData.h === 1;
                  iterationIndex = i;
                  if (!isHold) {
                    if (frameNum >= nextKeyData.t - this.offsetTime) {
                      perc = 1;
                    } else if (frameNum < keyData.t - this.offsetTime) {
                      perc = 0;
                    } else {
                      var fnc;
                      if (keyframeMetadata.__fnct) {
                        fnc = keyframeMetadata.__fnct;
                      } else {
                        fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                        keyframeMetadata.__fnct = fnc;
                      }
                      perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
                    }
                    keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
                  }
                  keyPropS = keyData.s[0];
                }
                jLen = previousValue._length;
                kLen = keyPropS.i[0].length;
                caching.lastIndex = iterationIndex;
                for (j = 0; j < jLen; j += 1) {
                  for (k = 0; k < kLen; k += 1) {
                    vertexValue = isHold ? keyPropS.i[j][k] : keyPropS.i[j][k] + (keyPropE.i[j][k] - keyPropS.i[j][k]) * perc;
                    previousValue.i[j][k] = vertexValue;
                    vertexValue = isHold ? keyPropS.o[j][k] : keyPropS.o[j][k] + (keyPropE.o[j][k] - keyPropS.o[j][k]) * perc;
                    previousValue.o[j][k] = vertexValue;
                    vertexValue = isHold ? keyPropS.v[j][k] : keyPropS.v[j][k] + (keyPropE.v[j][k] - keyPropS.v[j][k]) * perc;
                    previousValue.v[j][k] = vertexValue;
                  }
                }
              }
              function interpolateShapeCurrentTime() {
                var frameNum = this.comp.renderedFrame - this.offsetTime;
                var initTime = this.keyframes[0].t - this.offsetTime;
                var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
                var lastFrame = this._caching.lastFrame;
                if (!(lastFrame !== initFrame && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
                  /// /
                  this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
                  this.interpolateShape(frameNum, this.pv, this._caching); /// /
                }

                this._caching.lastFrame = frameNum;
                return this.pv;
              }
              function resetShape() {
                this.paths = this.localShapeCollection;
              }
              function shapesEqual(shape1, shape2) {
                if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
                  return false;
                }
                var i;
                var len = shape1._length;
                for (i = 0; i < len; i += 1) {
                  if (shape1.v[i][0] !== shape2.v[i][0] || shape1.v[i][1] !== shape2.v[i][1] || shape1.o[i][0] !== shape2.o[i][0] || shape1.o[i][1] !== shape2.o[i][1] || shape1.i[i][0] !== shape2.i[i][0] || shape1.i[i][1] !== shape2.i[i][1]) {
                    return false;
                  }
                }
                return true;
              }
              function setVValue(newPath) {
                if (!shapesEqual(this.v, newPath)) {
                  this.v = shapePool.clone(newPath);
                  this.localShapeCollection.releaseShapes();
                  this.localShapeCollection.addShape(this.v);
                  this._mdf = true;
                  this.paths = this.localShapeCollection;
                }
              }
              function processEffectsSequence() {
                if (this.elem.globalData.frameId === this.frameId) {
                  return;
                }
                if (!this.effectsSequence.length) {
                  this._mdf = false;
                  return;
                }
                if (this.lock) {
                  this.setVValue(this.pv);
                  return;
                }
                this.lock = true;
                this._mdf = false;
                var finalValue;
                if (this.kf) {
                  finalValue = this.pv;
                } else if (this.data.ks) {
                  finalValue = this.data.ks.k;
                } else {
                  finalValue = this.data.pt.k;
                }
                var i;
                var len = this.effectsSequence.length;
                for (i = 0; i < len; i += 1) {
                  finalValue = this.effectsSequence[i](finalValue);
                }
                this.setVValue(finalValue);
                this.lock = false;
                this.frameId = this.elem.globalData.frameId;
              }
              function ShapeProperty(elem, data, type) {
                this.propType = 'shape';
                this.comp = elem.comp;
                this.container = elem;
                this.elem = elem;
                this.data = data;
                this.k = false;
                this.kf = false;
                this._mdf = false;
                var pathData = type === 3 ? data.pt.k : data.ks.k;
                this.v = shapePool.clone(pathData);
                this.pv = shapePool.clone(this.v);
                this.localShapeCollection = shapeCollectionPool.newShapeCollection();
                this.paths = this.localShapeCollection;
                this.paths.addShape(this.v);
                this.reset = resetShape;
                this.effectsSequence = [];
              }
              function addEffect(effectFunction) {
                this.effectsSequence.push(effectFunction);
                this.container.addDynamicProperty(this);
              }
              ShapeProperty.prototype.interpolateShape = interpolateShape;
              ShapeProperty.prototype.getValue = processEffectsSequence;
              ShapeProperty.prototype.setVValue = setVValue;
              ShapeProperty.prototype.addEffect = addEffect;
              function KeyframedShapeProperty(elem, data, type) {
                this.propType = 'shape';
                this.comp = elem.comp;
                this.elem = elem;
                this.container = elem;
                this.offsetTime = elem.data.st;
                this.keyframes = type === 3 ? data.pt.k : data.ks.k;
                this.keyframesMetadata = [];
                this.k = true;
                this.kf = true;
                var len = this.keyframes[0].s[0].i.length;
                this.v = shapePool.newElement();
                this.v.setPathData(this.keyframes[0].s[0].c, len);
                this.pv = shapePool.clone(this.v);
                this.localShapeCollection = shapeCollectionPool.newShapeCollection();
                this.paths = this.localShapeCollection;
                this.paths.addShape(this.v);
                this.lastFrame = initFrame;
                this.reset = resetShape;
                this._caching = {
                  lastFrame: initFrame,
                  lastIndex: 0
                };
                this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
              }
              KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
              KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
              KeyframedShapeProperty.prototype.setVValue = setVValue;
              KeyframedShapeProperty.prototype.addEffect = addEffect;
              var EllShapeProperty = function () {
                var cPoint = roundCorner;
                function EllShapePropertyFactory(elem, data) {
                  this.v = shapePool.newElement();
                  this.v.setPathData(true, 4);
                  this.localShapeCollection = shapeCollectionPool.newShapeCollection();
                  this.paths = this.localShapeCollection;
                  this.localShapeCollection.addShape(this.v);
                  this.d = data.d;
                  this.elem = elem;
                  this.comp = elem.comp;
                  this.frameId = -1;
                  this.initDynamicPropertyContainer(elem);
                  this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
                  this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
                  if (this.dynamicProperties.length) {
                    this.k = true;
                  } else {
                    this.k = false;
                    this.convertEllToPath();
                  }
                }
                EllShapePropertyFactory.prototype = {
                  reset: resetShape,
                  getValue: function getValue() {
                    if (this.elem.globalData.frameId === this.frameId) {
                      return;
                    }
                    this.frameId = this.elem.globalData.frameId;
                    this.iterateDynamicProperties();
                    if (this._mdf) {
                      this.convertEllToPath();
                    }
                  },
                  convertEllToPath: function convertEllToPath() {
                    var p0 = this.p.v[0];
                    var p1 = this.p.v[1];
                    var s0 = this.s.v[0] / 2;
                    var s1 = this.s.v[1] / 2;
                    var _cw = this.d !== 3;
                    var _v = this.v;
                    _v.v[0][0] = p0;
                    _v.v[0][1] = p1 - s1;
                    _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
                    _v.v[1][1] = p1;
                    _v.v[2][0] = p0;
                    _v.v[2][1] = p1 + s1;
                    _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
                    _v.v[3][1] = p1;
                    _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                    _v.i[0][1] = p1 - s1;
                    _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
                    _v.i[1][1] = p1 - s1 * cPoint;
                    _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                    _v.i[2][1] = p1 + s1;
                    _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
                    _v.i[3][1] = p1 + s1 * cPoint;
                    _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                    _v.o[0][1] = p1 - s1;
                    _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
                    _v.o[1][1] = p1 + s1 * cPoint;
                    _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                    _v.o[2][1] = p1 + s1;
                    _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
                    _v.o[3][1] = p1 - s1 * cPoint;
                  }
                };
                extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
                return EllShapePropertyFactory;
              }();
              var StarShapeProperty = function () {
                function StarShapePropertyFactory(elem, data) {
                  this.v = shapePool.newElement();
                  this.v.setPathData(true, 0);
                  this.elem = elem;
                  this.comp = elem.comp;
                  this.data = data;
                  this.frameId = -1;
                  this.d = data.d;
                  this.initDynamicPropertyContainer(elem);
                  if (data.sy === 1) {
                    this.ir = PropertyFactory.getProp(elem, data.ir, 0, 0, this);
                    this.is = PropertyFactory.getProp(elem, data.is, 0, 0.01, this);
                    this.convertToPath = this.convertStarToPath;
                  } else {
                    this.convertToPath = this.convertPolygonToPath;
                  }
                  this.pt = PropertyFactory.getProp(elem, data.pt, 0, 0, this);
                  this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
                  this.r = PropertyFactory.getProp(elem, data.r, 0, degToRads, this);
                  this.or = PropertyFactory.getProp(elem, data.or, 0, 0, this);
                  this.os = PropertyFactory.getProp(elem, data.os, 0, 0.01, this);
                  this.localShapeCollection = shapeCollectionPool.newShapeCollection();
                  this.localShapeCollection.addShape(this.v);
                  this.paths = this.localShapeCollection;
                  if (this.dynamicProperties.length) {
                    this.k = true;
                  } else {
                    this.k = false;
                    this.convertToPath();
                  }
                }
                StarShapePropertyFactory.prototype = {
                  reset: resetShape,
                  getValue: function getValue() {
                    if (this.elem.globalData.frameId === this.frameId) {
                      return;
                    }
                    this.frameId = this.elem.globalData.frameId;
                    this.iterateDynamicProperties();
                    if (this._mdf) {
                      this.convertToPath();
                    }
                  },
                  convertStarToPath: function convertStarToPath() {
                    var numPts = Math.floor(this.pt.v) * 2;
                    var angle = Math.PI * 2 / numPts;
                    /* this.v.v.length = numPts;
                            this.v.i.length = numPts;
                            this.v.o.length = numPts; */

                    var longFlag = true;
                    var longRad = this.or.v;
                    var shortRad = this.ir.v;
                    var longRound = this.os.v;
                    var shortRound = this.is.v;
                    var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
                    var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
                    var i;
                    var rad;
                    var roundness;
                    var perimSegment;
                    var currentAng = -Math.PI / 2;
                    currentAng += this.r.v;
                    var dir = this.data.d === 3 ? -1 : 1;
                    this.v._length = 0;
                    for (i = 0; i < numPts; i += 1) {
                      rad = longFlag ? longRad : shortRad;
                      roundness = longFlag ? longRound : shortRound;
                      perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
                      var x = rad * Math.cos(currentAng);
                      var y = rad * Math.sin(currentAng);
                      var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                      var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                      x += +this.p.v[0];
                      y += +this.p.v[1];
                      this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
                      /* this.v.v[i] = [x,y];
                                this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
                                this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
                                this.v._length = numPts; */

                      longFlag = !longFlag;
                      currentAng += angle * dir;
                    }
                  },
                  convertPolygonToPath: function convertPolygonToPath() {
                    var numPts = Math.floor(this.pt.v);
                    var angle = Math.PI * 2 / numPts;
                    var rad = this.or.v;
                    var roundness = this.os.v;
                    var perimSegment = 2 * Math.PI * rad / (numPts * 4);
                    var i;
                    var currentAng = -Math.PI * 0.5;
                    var dir = this.data.d === 3 ? -1 : 1;
                    currentAng += this.r.v;
                    this.v._length = 0;
                    for (i = 0; i < numPts; i += 1) {
                      var x = rad * Math.cos(currentAng);
                      var y = rad * Math.sin(currentAng);
                      var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                      var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                      x += +this.p.v[0];
                      y += +this.p.v[1];
                      this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
                      currentAng += angle * dir;
                    }
                    this.paths.length = 0;
                    this.paths[0] = this.v;
                  }
                };
                extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
                return StarShapePropertyFactory;
              }();
              var RectShapeProperty = function () {
                function RectShapePropertyFactory(elem, data) {
                  this.v = shapePool.newElement();
                  this.v.c = true;
                  this.localShapeCollection = shapeCollectionPool.newShapeCollection();
                  this.localShapeCollection.addShape(this.v);
                  this.paths = this.localShapeCollection;
                  this.elem = elem;
                  this.comp = elem.comp;
                  this.frameId = -1;
                  this.d = data.d;
                  this.initDynamicPropertyContainer(elem);
                  this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
                  this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
                  this.r = PropertyFactory.getProp(elem, data.r, 0, 0, this);
                  if (this.dynamicProperties.length) {
                    this.k = true;
                  } else {
                    this.k = false;
                    this.convertRectToPath();
                  }
                }
                RectShapePropertyFactory.prototype = {
                  convertRectToPath: function convertRectToPath() {
                    var p0 = this.p.v[0];
                    var p1 = this.p.v[1];
                    var v0 = this.s.v[0] / 2;
                    var v1 = this.s.v[1] / 2;
                    var round = bmMin(v0, v1, this.r.v);
                    var cPoint = round * (1 - roundCorner);
                    this.v._length = 0;
                    if (this.d === 2 || this.d === 1) {
                      this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, 0, true);
                      this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round, 1, true);
                      if (round !== 0) {
                        this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                        this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round, p1 + v1, 3, true);
                        this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, 4, true);
                        this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round, 5, true);
                        this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                        this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round, p1 - v1, 7, true);
                      } else {
                        this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                        this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
                      }
                    } else {
                      this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round, 0, true);
                      if (round !== 0) {
                        this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                        this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round, p1 - v1, 2, true);
                        this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, 3, true);
                        this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round, 4, true);
                        this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                        this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round, p1 + v1, 6, true);
                        this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, 7, true);
                      } else {
                        this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                        this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                        this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
                      }
                    }
                  },
                  getValue: function getValue() {
                    if (this.elem.globalData.frameId === this.frameId) {
                      return;
                    }
                    this.frameId = this.elem.globalData.frameId;
                    this.iterateDynamicProperties();
                    if (this._mdf) {
                      this.convertRectToPath();
                    }
                  },
                  reset: resetShape
                };
                extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
                return RectShapePropertyFactory;
              }();
              function getShapeProp(elem, data, type) {
                var prop;
                if (type === 3 || type === 4) {
                  var dataProp = type === 3 ? data.pt : data.ks;
                  var keys = dataProp.k;
                  if (keys.length) {
                    prop = new KeyframedShapeProperty(elem, data, type);
                  } else {
                    prop = new ShapeProperty(elem, data, type);
                  }
                } else if (type === 5) {
                  prop = new RectShapeProperty(elem, data);
                } else if (type === 6) {
                  prop = new EllShapeProperty(elem, data);
                } else if (type === 7) {
                  prop = new StarShapeProperty(elem, data);
                }
                if (prop.k) {
                  elem.addDynamicProperty(prop);
                }
                return prop;
              }
              function getConstructorFunction() {
                return ShapeProperty;
              }
              function getKeyframedConstructorFunction() {
                return KeyframedShapeProperty;
              }
              var ob = {};
              ob.getShapeProp = getShapeProp;
              ob.getConstructorFunction = getConstructorFunction;
              ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
              return ob;
            }();

            /*!
             Transformation Matrix v2.0
             (c) Epistemex 2014-2015
             www.epistemex.com
             By Ken Fyrstenberg
             Contributions by leeoniya.
             License: MIT, header required.
             */

            /**
             * 2D transformation matrix object initialized with identity matrix.
             *
             * The matrix can synchronize a canvas context by supplying the context
             * as an argument, or later apply current absolute transform to an
             * existing context.
             *
             * All values are handled as floating point values.
             *
             * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
             * @prop {number} a - scale x
             * @prop {number} b - shear y
             * @prop {number} c - shear x
             * @prop {number} d - scale y
             * @prop {number} e - translate x
             * @prop {number} f - translate y
             * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
             * @constructor
             */

            var Matrix = function () {
              var _cos = Math.cos;
              var _sin = Math.sin;
              var _tan = Math.tan;
              var _rnd = Math.round;
              function reset() {
                this.props[0] = 1;
                this.props[1] = 0;
                this.props[2] = 0;
                this.props[3] = 0;
                this.props[4] = 0;
                this.props[5] = 1;
                this.props[6] = 0;
                this.props[7] = 0;
                this.props[8] = 0;
                this.props[9] = 0;
                this.props[10] = 1;
                this.props[11] = 0;
                this.props[12] = 0;
                this.props[13] = 0;
                this.props[14] = 0;
                this.props[15] = 1;
                return this;
              }
              function rotate(angle) {
                if (angle === 0) {
                  return this;
                }
                var mCos = _cos(angle);
                var mSin = _sin(angle);
                return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
              }
              function rotateX(angle) {
                if (angle === 0) {
                  return this;
                }
                var mCos = _cos(angle);
                var mSin = _sin(angle);
                return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
              }
              function rotateY(angle) {
                if (angle === 0) {
                  return this;
                }
                var mCos = _cos(angle);
                var mSin = _sin(angle);
                return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
              }
              function rotateZ(angle) {
                if (angle === 0) {
                  return this;
                }
                var mCos = _cos(angle);
                var mSin = _sin(angle);
                return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
              }
              function shear(sx, sy) {
                return this._t(1, sy, sx, 1, 0, 0);
              }
              function skew(ax, ay) {
                return this.shear(_tan(ax), _tan(ay));
              }
              function skewFromAxis(ax, angle) {
                var mCos = _cos(angle);
                var mSin = _sin(angle);
                return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); // return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
              }

              function scale(sx, sy, sz) {
                if (!sz && sz !== 0) {
                  sz = 1;
                }
                if (sx === 1 && sy === 1 && sz === 1) {
                  return this;
                }
                return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
              }
              function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
                this.props[0] = a;
                this.props[1] = b;
                this.props[2] = c;
                this.props[3] = d;
                this.props[4] = e;
                this.props[5] = f;
                this.props[6] = g;
                this.props[7] = h;
                this.props[8] = i;
                this.props[9] = j;
                this.props[10] = k;
                this.props[11] = l;
                this.props[12] = m;
                this.props[13] = n;
                this.props[14] = o;
                this.props[15] = p;
                return this;
              }
              function translate(tx, ty, tz) {
                tz = tz || 0;
                if (tx !== 0 || ty !== 0 || tz !== 0) {
                  return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
                }
                return this;
              }
              function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {
                var _p = this.props;
                if (a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0) {
                  // NOTE: commenting this condition because TurboFan deoptimizes code when present
                  // if(m2 !== 0 || n2 !== 0 || o2 !== 0){
                  _p[12] = _p[12] * a2 + _p[15] * m2;
                  _p[13] = _p[13] * f2 + _p[15] * n2;
                  _p[14] = _p[14] * k2 + _p[15] * o2;
                  _p[15] *= p2; // }

                  this._identityCalculated = false;
                  return this;
                }
                var a1 = _p[0];
                var b1 = _p[1];
                var c1 = _p[2];
                var d1 = _p[3];
                var e1 = _p[4];
                var f1 = _p[5];
                var g1 = _p[6];
                var h1 = _p[7];
                var i1 = _p[8];
                var j1 = _p[9];
                var k1 = _p[10];
                var l1 = _p[11];
                var m1 = _p[12];
                var n1 = _p[13];
                var o1 = _p[14];
                var p1 = _p[15];
                /* matrix order (canvas compatible):
                     * ace
                     * bdf
                     * 001
                     */

                _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
                _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2;
                _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2;
                _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2;
                _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2;
                _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2;
                _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2;
                _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2;
                _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2;
                _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2;
                _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2;
                _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2;
                _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2;
                _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2;
                _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2;
                _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2;
                this._identityCalculated = false;
                return this;
              }
              function multiply(matrix) {
                var matrixProps = matrix.props;
                return this.transform(matrixProps[0], matrixProps[1], matrixProps[2], matrixProps[3], matrixProps[4], matrixProps[5], matrixProps[6], matrixProps[7], matrixProps[8], matrixProps[9], matrixProps[10], matrixProps[11], matrixProps[12], matrixProps[13], matrixProps[14], matrixProps[15]);
              }
              function isIdentity() {
                if (!this._identityCalculated) {
                  this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
                  this._identityCalculated = true;
                }
                return this._identity;
              }
              function equals(matr) {
                var i = 0;
                while (i < 16) {
                  if (matr.props[i] !== this.props[i]) {
                    return false;
                  }
                  i += 1;
                }
                return true;
              }
              function clone(matr) {
                var i;
                for (i = 0; i < 16; i += 1) {
                  matr.props[i] = this.props[i];
                }
                return matr;
              }
              function cloneFromProps(props) {
                var i;
                for (i = 0; i < 16; i += 1) {
                  this.props[i] = props[i];
                }
              }
              function applyToPoint(x, y, z) {
                return {
                  x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
                  y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
                  z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
                };
                /* return {
                     x: x * me.a + y * me.c + me.e,
                     y: x * me.b + y * me.d + me.f
                     }; */
              }

              function applyToX(x, y, z) {
                return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
              }
              function applyToY(x, y, z) {
                return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
              }
              function applyToZ(x, y, z) {
                return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
              }
              function getInverseMatrix() {
                var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
                var a = this.props[5] / determinant;
                var b = -this.props[1] / determinant;
                var c = -this.props[4] / determinant;
                var d = this.props[0] / determinant;
                var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
                var f = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
                var inverseMatrix = new Matrix();
                inverseMatrix.props[0] = a;
                inverseMatrix.props[1] = b;
                inverseMatrix.props[4] = c;
                inverseMatrix.props[5] = d;
                inverseMatrix.props[12] = e;
                inverseMatrix.props[13] = f;
                return inverseMatrix;
              }
              function inversePoint(pt) {
                var inverseMatrix = this.getInverseMatrix();
                return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);
              }
              function inversePoints(pts) {
                var i;
                var len = pts.length;
                var retPts = [];
                for (i = 0; i < len; i += 1) {
                  retPts[i] = inversePoint(pts[i]);
                }
                return retPts;
              }
              function applyToTriplePoints(pt1, pt2, pt3) {
                var arr = createTypedArray('float32', 6);
                if (this.isIdentity()) {
                  arr[0] = pt1[0];
                  arr[1] = pt1[1];
                  arr[2] = pt2[0];
                  arr[3] = pt2[1];
                  arr[4] = pt3[0];
                  arr[5] = pt3[1];
                } else {
                  var p0 = this.props[0];
                  var p1 = this.props[1];
                  var p4 = this.props[4];
                  var p5 = this.props[5];
                  var p12 = this.props[12];
                  var p13 = this.props[13];
                  arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
                  arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
                  arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
                  arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
                  arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
                  arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
                }
                return arr;
              }
              function applyToPointArray(x, y, z) {
                var arr;
                if (this.isIdentity()) {
                  arr = [x, y, z];
                } else {
                  arr = [x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12], x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13], x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
                }
                return arr;
              }
              function applyToPointStringified(x, y) {
                if (this.isIdentity()) {
                  return x + ',' + y;
                }
                var _p = this.props;
                return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100 + ',' + Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
              }
              function toCSS() {
                // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.

                /* if(this.isIdentity()) {
                        return '';
                    } */
                var i = 0;
                var props = this.props;
                var cssValue = 'matrix3d(';
                var v = 10000;
                while (i < 16) {
                  cssValue += _rnd(props[i] * v) / v;
                  cssValue += i === 15 ? ')' : ',';
                  i += 1;
                }
                return cssValue;
              }
              function roundMatrixProperty(val) {
                var v = 10000;
                if (val < 0.000001 && val > 0 || val > -0.000001 && val < 0) {
                  return _rnd(val * v) / v;
                }
                return val;
              }
              function to2dCSS() {
                // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.

                /* if(this.isIdentity()) {
                        return '';
                    } */
                var props = this.props;
                var _a = roundMatrixProperty(props[0]);
                var _b = roundMatrixProperty(props[1]);
                var _c = roundMatrixProperty(props[4]);
                var _d = roundMatrixProperty(props[5]);
                var _e = roundMatrixProperty(props[12]);
                var _f = roundMatrixProperty(props[13]);
                return 'matrix(' + _a + ',' + _b + ',' + _c + ',' + _d + ',' + _e + ',' + _f + ')';
              }
              return function () {
                this.reset = reset;
                this.rotate = rotate;
                this.rotateX = rotateX;
                this.rotateY = rotateY;
                this.rotateZ = rotateZ;
                this.skew = skew;
                this.skewFromAxis = skewFromAxis;
                this.shear = shear;
                this.scale = scale;
                this.setTransform = setTransform;
                this.translate = translate;
                this.transform = transform;
                this.multiply = multiply;
                this.applyToPoint = applyToPoint;
                this.applyToX = applyToX;
                this.applyToY = applyToY;
                this.applyToZ = applyToZ;
                this.applyToPointArray = applyToPointArray;
                this.applyToTriplePoints = applyToTriplePoints;
                this.applyToPointStringified = applyToPointStringified;
                this.toCSS = toCSS;
                this.to2dCSS = to2dCSS;
                this.clone = clone;
                this.cloneFromProps = cloneFromProps;
                this.equals = equals;
                this.inversePoints = inversePoints;
                this.inversePoint = inversePoint;
                this.getInverseMatrix = getInverseMatrix;
                this._t = this.transform;
                this.isIdentity = isIdentity;
                this._identity = true;
                this._identityCalculated = false;
                this.props = createTypedArray('float32', 16);
                this.reset();
              };
            }();
            function _typeof$3(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof$3 = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                _typeof$3 = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }
              return _typeof$3(obj);
            }
            var lottie = {};
            function setLocation(href) {
              setLocationHref(href);
            }
            function searchAnimations() {
              {
                animationManager.searchAnimations();
              }
            }
            function setSubframeRendering(flag) {
              setSubframeEnabled(flag);
            }
            function setPrefix(prefix) {
              setIdPrefix(prefix);
            }
            function loadAnimation(params) {
              return animationManager.loadAnimation(params);
            }
            function setQuality(value) {
              if (typeof value === 'string') {
                switch (value) {
                  case 'high':
                    setDefaultCurveSegments(200);
                    break;
                  default:
                  case 'medium':
                    setDefaultCurveSegments(50);
                    break;
                  case 'low':
                    setDefaultCurveSegments(10);
                    break;
                }
              } else if (!isNaN(value) && value > 1) {
                setDefaultCurveSegments(value);
              }
            }
            function inBrowser() {
              return typeof navigator !== 'undefined';
            }
            function installPlugin(type, plugin) {
              if (type === 'expressions') {
                setExpressionsPlugin(plugin);
              }
            }
            function getFactory(name) {
              switch (name) {
                case 'propertyFactory':
                  return PropertyFactory;
                case 'shapePropertyFactory':
                  return ShapePropertyFactory;
                case 'matrix':
                  return Matrix;
                default:
                  return null;
              }
            }
            lottie.play = animationManager.play;
            lottie.pause = animationManager.pause;
            lottie.setLocationHref = setLocation;
            lottie.togglePause = animationManager.togglePause;
            lottie.setSpeed = animationManager.setSpeed;
            lottie.setDirection = animationManager.setDirection;
            lottie.stop = animationManager.stop;
            lottie.searchAnimations = searchAnimations;
            lottie.registerAnimation = animationManager.registerAnimation;
            lottie.loadAnimation = loadAnimation;
            lottie.setSubframeRendering = setSubframeRendering;
            lottie.resize = animationManager.resize; // lottie.start = start;

            lottie.goToAndStop = animationManager.goToAndStop;
            lottie.destroy = animationManager.destroy;
            lottie.setQuality = setQuality;
            lottie.inBrowser = inBrowser;
            lottie.installPlugin = installPlugin;
            lottie.freeze = animationManager.freeze;
            lottie.unfreeze = animationManager.unfreeze;
            lottie.setVolume = animationManager.setVolume;
            lottie.mute = animationManager.mute;
            lottie.unmute = animationManager.unmute;
            lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
            lottie.useWebWorker = setWebWorker;
            lottie.setIDPrefix = setPrefix;
            lottie.__getFactory = getFactory;
            lottie.version = '5.12.2';
            function checkReady() {
              if (document.readyState === 'complete') {
                clearInterval(readyStateCheckInterval);
                searchAnimations();
              }
            }
            function getQueryVariable(variable) {
              var vars = queryString.split('&');
              for (var i = 0; i < vars.length; i += 1) {
                var pair = vars[i].split('=');
                if (decodeURIComponent(pair[0]) == variable) {
                  // eslint-disable-line eqeqeq
                  return decodeURIComponent(pair[1]);
                }
              }
              return null;
            }
            var queryString = '';
            {
              var scripts = document.getElementsByTagName('script');
              var index = scripts.length - 1;
              var myScript = scripts[index] || {
                src: ''
              };
              queryString = myScript.src ? myScript.src.replace(/^[^\?]+\??/, '') : ''; // eslint-disable-line no-useless-escape

              getQueryVariable('renderer');
            }
            var readyStateCheckInterval = setInterval(checkReady, 100); // this adds bodymovin to the window object for backwards compatibility

            try {
              if (!(('object' === "undefined" ? "undefined" : _typeof$3(exports)) === 'object' && 'object' !== 'undefined') && !(typeof undefined === 'function' && undefined.amd) // eslint-disable-line no-undef
              ) {
                window.bodymovin = lottie;
              }
            } catch (err) {//
            }
            var ShapeModifiers = function () {
              var ob = {};
              var modifiers = {};
              ob.registerModifier = registerModifier;
              ob.getModifier = getModifier;
              function registerModifier(nm, factory) {
                if (!modifiers[nm]) {
                  modifiers[nm] = factory;
                }
              }
              function getModifier(nm, elem, data) {
                return new modifiers[nm](elem, data);
              }
              return ob;
            }();
            function ShapeModifier() {}
            ShapeModifier.prototype.initModifierProperties = function () {};
            ShapeModifier.prototype.addShapeToModifier = function () {};
            ShapeModifier.prototype.addShape = function (data) {
              if (!this.closed) {
                // Adding shape to dynamic properties. It covers the case where a shape has no effects applied, to reset it's _mdf state on every tick.
                data.sh.container.addDynamicProperty(data.sh);
                var shapeData = {
                  shape: data.sh,
                  data: data,
                  localShapeCollection: shapeCollectionPool.newShapeCollection()
                };
                this.shapes.push(shapeData);
                this.addShapeToModifier(shapeData);
                if (this._isAnimated) {
                  data.setAsAnimated();
                }
              }
            };
            ShapeModifier.prototype.init = function (elem, data) {
              this.shapes = [];
              this.elem = elem;
              this.initDynamicPropertyContainer(elem);
              this.initModifierProperties(elem, data);
              this.frameId = initialDefaultFrame;
              this.closed = false;
              this.k = false;
              if (this.dynamicProperties.length) {
                this.k = true;
              } else {
                this.getValue(true);
              }
            };
            ShapeModifier.prototype.processKeys = function () {
              if (this.elem.globalData.frameId === this.frameId) {
                return;
              }
              this.frameId = this.elem.globalData.frameId;
              this.iterateDynamicProperties();
            };
            extendPrototype([DynamicPropertyContainer], ShapeModifier);
            function TrimModifier() {}
            extendPrototype([ShapeModifier], TrimModifier);
            TrimModifier.prototype.initModifierProperties = function (elem, data) {
              this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);
              this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);
              this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);
              this.sValue = 0;
              this.eValue = 0;
              this.getValue = this.processKeys;
              this.m = data.m;
              this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
            };
            TrimModifier.prototype.addShapeToModifier = function (shapeData) {
              shapeData.pathsData = [];
            };
            TrimModifier.prototype.calculateShapeEdges = function (s, e, shapeLength, addedLength, totalModifierLength) {
              var segments = [];
              if (e <= 1) {
                segments.push({
                  s: s,
                  e: e
                });
              } else if (s >= 1) {
                segments.push({
                  s: s - 1,
                  e: e - 1
                });
              } else {
                segments.push({
                  s: s,
                  e: 1
                });
                segments.push({
                  s: 0,
                  e: e - 1
                });
              }
              var shapeSegments = [];
              var i;
              var len = segments.length;
              var segmentOb;
              for (i = 0; i < len; i += 1) {
                segmentOb = segments[i];
                if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {
                  var shapeS;
                  var shapeE;
                  if (segmentOb.s * totalModifierLength <= addedLength) {
                    shapeS = 0;
                  } else {
                    shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
                  }
                  if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
                    shapeE = 1;
                  } else {
                    shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
                  }
                  shapeSegments.push([shapeS, shapeE]);
                }
              }
              if (!shapeSegments.length) {
                shapeSegments.push([0, 0]);
              }
              return shapeSegments;
            };
            TrimModifier.prototype.releasePathsData = function (pathsData) {
              var i;
              var len = pathsData.length;
              for (i = 0; i < len; i += 1) {
                segmentsLengthPool.release(pathsData[i]);
              }
              pathsData.length = 0;
              return pathsData;
            };
            TrimModifier.prototype.processShapes = function (_isFirstFrame) {
              var s;
              var e;
              if (this._mdf || _isFirstFrame) {
                var o = this.o.v % 360 / 360;
                if (o < 0) {
                  o += 1;
                }
                if (this.s.v > 1) {
                  s = 1 + o;
                } else if (this.s.v < 0) {
                  s = 0 + o;
                } else {
                  s = this.s.v + o;
                }
                if (this.e.v > 1) {
                  e = 1 + o;
                } else if (this.e.v < 0) {
                  e = 0 + o;
                } else {
                  e = this.e.v + o;
                }
                if (s > e) {
                  var _s = s;
                  s = e;
                  e = _s;
                }
                s = Math.round(s * 10000) * 0.0001;
                e = Math.round(e * 10000) * 0.0001;
                this.sValue = s;
                this.eValue = e;
              } else {
                s = this.sValue;
                e = this.eValue;
              }
              var shapePaths;
              var i;
              var len = this.shapes.length;
              var j;
              var jLen;
              var pathsData;
              var pathData;
              var totalShapeLength;
              var totalModifierLength = 0;
              if (e === s) {
                for (i = 0; i < len; i += 1) {
                  this.shapes[i].localShapeCollection.releaseShapes();
                  this.shapes[i].shape._mdf = true;
                  this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;
                  if (this._mdf) {
                    this.shapes[i].pathsData.length = 0;
                  }
                }
              } else if (!(e === 1 && s === 0 || e === 0 && s === 1)) {
                var segments = [];
                var shapeData;
                var localShapeCollection;
                for (i = 0; i < len; i += 1) {
                  shapeData = this.shapes[i]; // if shape hasn't changed and trim properties haven't changed, cached previous path can be used

                  if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
                    shapeData.shape.paths = shapeData.localShapeCollection;
                  } else {
                    shapePaths = shapeData.shape.paths;
                    jLen = shapePaths._length;
                    totalShapeLength = 0;
                    if (!shapeData.shape._mdf && shapeData.pathsData.length) {
                      totalShapeLength = shapeData.totalShapeLength;
                    } else {
                      pathsData = this.releasePathsData(shapeData.pathsData);
                      for (j = 0; j < jLen; j += 1) {
                        pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
                        pathsData.push(pathData);
                        totalShapeLength += pathData.totalLength;
                      }
                      shapeData.totalShapeLength = totalShapeLength;
                      shapeData.pathsData = pathsData;
                    }
                    totalModifierLength += totalShapeLength;
                    shapeData.shape._mdf = true;
                  }
                }
                var shapeS = s;
                var shapeE = e;
                var addedLength = 0;
                var edges;
                for (i = len - 1; i >= 0; i -= 1) {
                  shapeData = this.shapes[i];
                  if (shapeData.shape._mdf) {
                    localShapeCollection = shapeData.localShapeCollection;
                    localShapeCollection.releaseShapes(); // if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group

                    if (this.m === 2 && len > 1) {
                      edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
                      addedLength += shapeData.totalShapeLength;
                    } else {
                      edges = [[shapeS, shapeE]];
                    }
                    jLen = edges.length;
                    for (j = 0; j < jLen; j += 1) {
                      shapeS = edges[j][0];
                      shapeE = edges[j][1];
                      segments.length = 0;
                      if (shapeE <= 1) {
                        segments.push({
                          s: shapeData.totalShapeLength * shapeS,
                          e: shapeData.totalShapeLength * shapeE
                        });
                      } else if (shapeS >= 1) {
                        segments.push({
                          s: shapeData.totalShapeLength * (shapeS - 1),
                          e: shapeData.totalShapeLength * (shapeE - 1)
                        });
                      } else {
                        segments.push({
                          s: shapeData.totalShapeLength * shapeS,
                          e: shapeData.totalShapeLength
                        });
                        segments.push({
                          s: 0,
                          e: shapeData.totalShapeLength * (shapeE - 1)
                        });
                      }
                      var newShapesData = this.addShapes(shapeData, segments[0]);
                      if (segments[0].s !== segments[0].e) {
                        if (segments.length > 1) {
                          var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
                          if (lastShapeInCollection.c) {
                            var lastShape = newShapesData.pop();
                            this.addPaths(newShapesData, localShapeCollection);
                            newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                          } else {
                            this.addPaths(newShapesData, localShapeCollection);
                            newShapesData = this.addShapes(shapeData, segments[1]);
                          }
                        }
                        this.addPaths(newShapesData, localShapeCollection);
                      }
                    }
                    shapeData.shape.paths = localShapeCollection;
                  }
                }
              } else if (this._mdf) {
                for (i = 0; i < len; i += 1) {
                  // Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
                  // Don't remove this even if it's losing cached info.
                  this.shapes[i].pathsData.length = 0;
                  this.shapes[i].shape._mdf = true;
                }
              }
            };
            TrimModifier.prototype.addPaths = function (newPaths, localShapeCollection) {
              var i;
              var len = newPaths.length;
              for (i = 0; i < len; i += 1) {
                localShapeCollection.addShape(newPaths[i]);
              }
            };
            TrimModifier.prototype.addSegment = function (pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
              shapePath.setXYAt(pt2[0], pt2[1], 'o', pos);
              shapePath.setXYAt(pt3[0], pt3[1], 'i', pos + 1);
              if (newShape) {
                shapePath.setXYAt(pt1[0], pt1[1], 'v', pos);
              }
              shapePath.setXYAt(pt4[0], pt4[1], 'v', pos + 1);
            };
            TrimModifier.prototype.addSegmentFromArray = function (points, shapePath, pos, newShape) {
              shapePath.setXYAt(points[1], points[5], 'o', pos);
              shapePath.setXYAt(points[2], points[6], 'i', pos + 1);
              if (newShape) {
                shapePath.setXYAt(points[0], points[4], 'v', pos);
              }
              shapePath.setXYAt(points[3], points[7], 'v', pos + 1);
            };
            TrimModifier.prototype.addShapes = function (shapeData, shapeSegment, shapePath) {
              var pathsData = shapeData.pathsData;
              var shapePaths = shapeData.shape.paths.shapes;
              var i;
              var len = shapeData.shape.paths._length;
              var j;
              var jLen;
              var addedLength = 0;
              var currentLengthData;
              var segmentCount;
              var lengths;
              var segment;
              var shapes = [];
              var initPos;
              var newShape = true;
              if (!shapePath) {
                shapePath = shapePool.newElement();
                segmentCount = 0;
                initPos = 0;
              } else {
                segmentCount = shapePath._length;
                initPos = shapePath._length;
              }
              shapes.push(shapePath);
              for (i = 0; i < len; i += 1) {
                lengths = pathsData[i].lengths;
                shapePath.c = shapePaths[i].c;
                jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;
                for (j = 1; j < jLen; j += 1) {
                  currentLengthData = lengths[j - 1];
                  if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
                    addedLength += currentLengthData.addedLength;
                    shapePath.c = false;
                  } else if (addedLength > shapeSegment.e) {
                    shapePath.c = false;
                    break;
                  } else {
                    if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
                      this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);
                      newShape = false;
                    } else {
                      segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j - 1]);
                      this.addSegmentFromArray(segment, shapePath, segmentCount, newShape); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);

                      newShape = false;
                      shapePath.c = false;
                    }
                    addedLength += currentLengthData.addedLength;
                    segmentCount += 1;
                  }
                }
                if (shapePaths[i].c && lengths.length) {
                  currentLengthData = lengths[j - 1];
                  if (addedLength <= shapeSegment.e) {
                    var segmentLength = lengths[j - 1].addedLength;
                    if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
                      this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);
                      newShape = false;
                    } else {
                      segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
                      this.addSegmentFromArray(segment, shapePath, segmentCount, newShape); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);

                      newShape = false;
                      shapePath.c = false;
                    }
                  } else {
                    shapePath.c = false;
                  }
                  addedLength += currentLengthData.addedLength;
                  segmentCount += 1;
                }
                if (shapePath._length) {
                  shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], 'i', initPos);
                  shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], 'o', shapePath._length - 1);
                }
                if (addedLength > shapeSegment.e) {
                  break;
                }
                if (i < len - 1) {
                  shapePath = shapePool.newElement();
                  newShape = true;
                  shapes.push(shapePath);
                  segmentCount = 0;
                }
              }
              return shapes;
            };
            function PuckerAndBloatModifier() {}
            extendPrototype([ShapeModifier], PuckerAndBloatModifier);
            PuckerAndBloatModifier.prototype.initModifierProperties = function (elem, data) {
              this.getValue = this.processKeys;
              this.amount = PropertyFactory.getProp(elem, data.a, 0, null, this);
              this._isAnimated = !!this.amount.effectsSequence.length;
            };
            PuckerAndBloatModifier.prototype.processPath = function (path, amount) {
              var percent = amount / 100;
              var centerPoint = [0, 0];
              var pathLength = path._length;
              var i = 0;
              for (i = 0; i < pathLength; i += 1) {
                centerPoint[0] += path.v[i][0];
                centerPoint[1] += path.v[i][1];
              }
              centerPoint[0] /= pathLength;
              centerPoint[1] /= pathLength;
              var clonedPath = shapePool.newElement();
              clonedPath.c = path.c;
              var vX;
              var vY;
              var oX;
              var oY;
              var iX;
              var iY;
              for (i = 0; i < pathLength; i += 1) {
                vX = path.v[i][0] + (centerPoint[0] - path.v[i][0]) * percent;
                vY = path.v[i][1] + (centerPoint[1] - path.v[i][1]) * percent;
                oX = path.o[i][0] + (centerPoint[0] - path.o[i][0]) * -percent;
                oY = path.o[i][1] + (centerPoint[1] - path.o[i][1]) * -percent;
                iX = path.i[i][0] + (centerPoint[0] - path.i[i][0]) * -percent;
                iY = path.i[i][1] + (centerPoint[1] - path.i[i][1]) * -percent;
                clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i);
              }
              return clonedPath;
            };
            PuckerAndBloatModifier.prototype.processShapes = function (_isFirstFrame) {
              var shapePaths;
              var i;
              var len = this.shapes.length;
              var j;
              var jLen;
              var amount = this.amount.v;
              if (amount !== 0) {
                var shapeData;
                var localShapeCollection;
                for (i = 0; i < len; i += 1) {
                  shapeData = this.shapes[i];
                  localShapeCollection = shapeData.localShapeCollection;
                  if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                    localShapeCollection.releaseShapes();
                    shapeData.shape._mdf = true;
                    shapePaths = shapeData.shape.paths.shapes;
                    jLen = shapeData.shape.paths._length;
                    for (j = 0; j < jLen; j += 1) {
                      localShapeCollection.addShape(this.processPath(shapePaths[j], amount));
                    }
                  }
                  shapeData.shape.paths = shapeData.localShapeCollection;
                }
              }
              if (!this.dynamicProperties.length) {
                this._mdf = false;
              }
            };
            var TransformPropertyFactory = function () {
              var defaultVector = [0, 0];
              function applyToMatrix(mat) {
                var _mdf = this._mdf;
                this.iterateDynamicProperties();
                this._mdf = this._mdf || _mdf;
                if (this.a) {
                  mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
                }
                if (this.s) {
                  mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
                }
                if (this.sk) {
                  mat.skewFromAxis(-this.sk.v, this.sa.v);
                }
                if (this.r) {
                  mat.rotate(-this.r.v);
                } else {
                  mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
                }
                if (this.data.p.s) {
                  if (this.data.p.z) {
                    mat.translate(this.px.v, this.py.v, -this.pz.v);
                  } else {
                    mat.translate(this.px.v, this.py.v, 0);
                  }
                } else {
                  mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
                }
              }
              function processKeys(forceRender) {
                if (this.elem.globalData.frameId === this.frameId) {
                  return;
                }
                if (this._isDirty) {
                  this.precalculateMatrix();
                  this._isDirty = false;
                }
                this.iterateDynamicProperties();
                if (this._mdf || forceRender) {
                  var frameRate;
                  this.v.cloneFromProps(this.pre.props);
                  if (this.appliedTransformations < 1) {
                    this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
                  }
                  if (this.appliedTransformations < 2) {
                    this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
                  }
                  if (this.sk && this.appliedTransformations < 3) {
                    this.v.skewFromAxis(-this.sk.v, this.sa.v);
                  }
                  if (this.r && this.appliedTransformations < 4) {
                    this.v.rotate(-this.r.v);
                  } else if (!this.r && this.appliedTransformations < 4) {
                    this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
                  }
                  if (this.autoOriented) {
                    var v1;
                    var v2;
                    frameRate = this.elem.globalData.frameRate;
                    if (this.p && this.p.keyframes && this.p.getValueAtTime) {
                      if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                        v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                        v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
                      } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                        v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
                        v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
                      } else {
                        v1 = this.p.pv;
                        v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
                      }
                    } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
                      v1 = [];
                      v2 = [];
                      var px = this.px;
                      var py = this.py;
                      if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
                        v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
                        v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                        v2[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
                        v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
                      } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                        v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);
                        v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
                        v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
                        v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
                      } else {
                        v1 = [px.pv, py.pv];
                        v2[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
                        v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
                      }
                    } else {
                      v2 = defaultVector;
                      v1 = v2;
                    }
                    this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
                  }
                  if (this.data.p && this.data.p.s) {
                    if (this.data.p.z) {
                      this.v.translate(this.px.v, this.py.v, -this.pz.v);
                    } else {
                      this.v.translate(this.px.v, this.py.v, 0);
                    }
                  } else {
                    this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
                  }
                }
                this.frameId = this.elem.globalData.frameId;
              }
              function precalculateMatrix() {
                this.appliedTransformations = 0;
                this.pre.reset();
                if (!this.a.effectsSequence.length) {
                  this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
                  this.appliedTransformations = 1;
                } else {
                  return;
                }
                if (!this.s.effectsSequence.length) {
                  this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
                  this.appliedTransformations = 2;
                } else {
                  return;
                }
                if (this.sk) {
                  if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
                    this.pre.skewFromAxis(-this.sk.v, this.sa.v);
                    this.appliedTransformations = 3;
                  } else {
                    return;
                  }
                }
                if (this.r) {
                  if (!this.r.effectsSequence.length) {
                    this.pre.rotate(-this.r.v);
                    this.appliedTransformations = 4;
                  }
                } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
                  this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
                  this.appliedTransformations = 4;
                }
              }
              function autoOrient() {//
                // var prevP = this.getValueAtTime();
              }
              function addDynamicProperty(prop) {
                this._addDynamicProperty(prop);
                this.elem.addDynamicProperty(prop);
                this._isDirty = true;
              }
              function TransformProperty(elem, data, container) {
                this.elem = elem;
                this.frameId = -1;
                this.propType = 'transform';
                this.data = data;
                this.v = new Matrix(); // Precalculated matrix with non animated properties

                this.pre = new Matrix();
                this.appliedTransformations = 0;
                this.initDynamicPropertyContainer(container || elem);
                if (data.p && data.p.s) {
                  this.px = PropertyFactory.getProp(elem, data.p.x, 0, 0, this);
                  this.py = PropertyFactory.getProp(elem, data.p.y, 0, 0, this);
                  if (data.p.z) {
                    this.pz = PropertyFactory.getProp(elem, data.p.z, 0, 0, this);
                  }
                } else {
                  this.p = PropertyFactory.getProp(elem, data.p || {
                    k: [0, 0, 0]
                  }, 1, 0, this);
                }
                if (data.rx) {
                  this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);
                  this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);
                  this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);
                  if (data.or.k[0].ti) {
                    var i;
                    var len = data.or.k.length;
                    for (i = 0; i < len; i += 1) {
                      data.or.k[i].to = null;
                      data.or.k[i].ti = null;
                    }
                  }
                  this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this); // sh Indicates it needs to be capped between -180 and 180

                  this.or.sh = true;
                } else {
                  this.r = PropertyFactory.getProp(elem, data.r || {
                    k: 0
                  }, 0, degToRads, this);
                }
                if (data.sk) {
                  this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);
                  this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);
                }
                this.a = PropertyFactory.getProp(elem, data.a || {
                  k: [0, 0, 0]
                }, 1, 0, this);
                this.s = PropertyFactory.getProp(elem, data.s || {
                  k: [100, 100, 100]
                }, 1, 0.01, this); // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.

                if (data.o) {
                  this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, elem);
                } else {
                  this.o = {
                    _mdf: false,
                    v: 1
                  };
                }
                this._isDirty = true;
                if (!this.dynamicProperties.length) {
                  this.getValue(true);
                }
              }
              TransformProperty.prototype = {
                applyToMatrix: applyToMatrix,
                getValue: processKeys,
                precalculateMatrix: precalculateMatrix,
                autoOrient: autoOrient
              };
              extendPrototype([DynamicPropertyContainer], TransformProperty);
              TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
              TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;
              function getTransformProperty(elem, data, container) {
                return new TransformProperty(elem, data, container);
              }
              return {
                getTransformProperty: getTransformProperty
              };
            }();
            function RepeaterModifier() {}
            extendPrototype([ShapeModifier], RepeaterModifier);
            RepeaterModifier.prototype.initModifierProperties = function (elem, data) {
              this.getValue = this.processKeys;
              this.c = PropertyFactory.getProp(elem, data.c, 0, null, this);
              this.o = PropertyFactory.getProp(elem, data.o, 0, null, this);
              this.tr = TransformPropertyFactory.getTransformProperty(elem, data.tr, this);
              this.so = PropertyFactory.getProp(elem, data.tr.so, 0, 0.01, this);
              this.eo = PropertyFactory.getProp(elem, data.tr.eo, 0, 0.01, this);
              this.data = data;
              if (!this.dynamicProperties.length) {
                this.getValue(true);
              }
              this._isAnimated = !!this.dynamicProperties.length;
              this.pMatrix = new Matrix();
              this.rMatrix = new Matrix();
              this.sMatrix = new Matrix();
              this.tMatrix = new Matrix();
              this.matrix = new Matrix();
            };
            RepeaterModifier.prototype.applyTransforms = function (pMatrix, rMatrix, sMatrix, transform, perc, inv) {
              var dir = inv ? -1 : 1;
              var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);
              var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);
              pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);
              rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
              rMatrix.rotate(-transform.r.v * dir * perc);
              rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
              sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
              sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
              sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
            };
            RepeaterModifier.prototype.init = function (elem, arr, pos, elemsData) {
              this.elem = elem;
              this.arr = arr;
              this.pos = pos;
              this.elemsData = elemsData;
              this._currentCopies = 0;
              this._elements = [];
              this._groups = [];
              this.frameId = -1;
              this.initDynamicPropertyContainer(elem);
              this.initModifierProperties(elem, arr[pos]);
              while (pos > 0) {
                pos -= 1; // this._elements.unshift(arr.splice(pos,1)[0]);

                this._elements.unshift(arr[pos]);
              }
              if (this.dynamicProperties.length) {
                this.k = true;
              } else {
                this.getValue(true);
              }
            };
            RepeaterModifier.prototype.resetElements = function (elements) {
              var i;
              var len = elements.length;
              for (i = 0; i < len; i += 1) {
                elements[i]._processed = false;
                if (elements[i].ty === 'gr') {
                  this.resetElements(elements[i].it);
                }
              }
            };
            RepeaterModifier.prototype.cloneElements = function (elements) {
              var newElements = JSON.parse(JSON.stringify(elements));
              this.resetElements(newElements);
              return newElements;
            };
            RepeaterModifier.prototype.changeGroupRender = function (elements, renderFlag) {
              var i;
              var len = elements.length;
              for (i = 0; i < len; i += 1) {
                elements[i]._render = renderFlag;
                if (elements[i].ty === 'gr') {
                  this.changeGroupRender(elements[i].it, renderFlag);
                }
              }
            };
            RepeaterModifier.prototype.processShapes = function (_isFirstFrame) {
              var items;
              var itemsTransform;
              var i;
              var dir;
              var cont;
              var hasReloaded = false;
              if (this._mdf || _isFirstFrame) {
                var copies = Math.ceil(this.c.v);
                if (this._groups.length < copies) {
                  while (this._groups.length < copies) {
                    var group = {
                      it: this.cloneElements(this._elements),
                      ty: 'gr'
                    };
                    group.it.push({
                      a: {
                        a: 0,
                        ix: 1,
                        k: [0, 0]
                      },
                      nm: 'Transform',
                      o: {
                        a: 0,
                        ix: 7,
                        k: 100
                      },
                      p: {
                        a: 0,
                        ix: 2,
                        k: [0, 0]
                      },
                      r: {
                        a: 1,
                        ix: 6,
                        k: [{
                          s: 0,
                          e: 0,
                          t: 0
                        }, {
                          s: 0,
                          e: 0,
                          t: 1
                        }]
                      },
                      s: {
                        a: 0,
                        ix: 3,
                        k: [100, 100]
                      },
                      sa: {
                        a: 0,
                        ix: 5,
                        k: 0
                      },
                      sk: {
                        a: 0,
                        ix: 4,
                        k: 0
                      },
                      ty: 'tr'
                    });
                    this.arr.splice(0, 0, group);
                    this._groups.splice(0, 0, group);
                    this._currentCopies += 1;
                  }
                  this.elem.reloadShapes();
                  hasReloaded = true;
                }
                cont = 0;
                var renderFlag;
                for (i = 0; i <= this._groups.length - 1; i += 1) {
                  renderFlag = cont < copies;
                  this._groups[i]._render = renderFlag;
                  this.changeGroupRender(this._groups[i].it, renderFlag);
                  if (!renderFlag) {
                    var elems = this.elemsData[i].it;
                    var transformData = elems[elems.length - 1];
                    if (transformData.transform.op.v !== 0) {
                      transformData.transform.op._mdf = true;
                      transformData.transform.op.v = 0;
                    } else {
                      transformData.transform.op._mdf = false;
                    }
                  }
                  cont += 1;
                }
                this._currentCopies = copies; /// /

                var offset = this.o.v;
                var offsetModulo = offset % 1;
                var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
                var pProps = this.pMatrix.props;
                var rProps = this.rMatrix.props;
                var sProps = this.sMatrix.props;
                this.pMatrix.reset();
                this.rMatrix.reset();
                this.sMatrix.reset();
                this.tMatrix.reset();
                this.matrix.reset();
                var iteration = 0;
                if (offset > 0) {
                  while (iteration < roundOffset) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                    iteration += 1;
                  }
                  if (offsetModulo) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
                    iteration += offsetModulo;
                  }
                } else if (offset < 0) {
                  while (iteration > roundOffset) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
                    iteration -= 1;
                  }
                  if (offsetModulo) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
                    iteration -= offsetModulo;
                  }
                }
                i = this.data.m === 1 ? 0 : this._currentCopies - 1;
                dir = this.data.m === 1 ? 1 : -1;
                cont = this._currentCopies;
                var j;
                var jLen;
                while (cont) {
                  items = this.elemsData[i].it;
                  itemsTransform = items[items.length - 1].transform.mProps.v.props;
                  jLen = itemsTransform.length;
                  items[items.length - 1].transform.mProps._mdf = true;
                  items[items.length - 1].transform.op._mdf = true;
                  items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1));
                  if (iteration !== 0) {
                    if (i !== 0 && dir === 1 || i !== this._currentCopies - 1 && dir === -1) {
                      this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                    }
                    this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
                    this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
                    this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);
                    for (j = 0; j < jLen; j += 1) {
                      itemsTransform[j] = this.matrix.props[j];
                    }
                    this.matrix.reset();
                  } else {
                    this.matrix.reset();
                    for (j = 0; j < jLen; j += 1) {
                      itemsTransform[j] = this.matrix.props[j];
                    }
                  }
                  iteration += 1;
                  cont -= 1;
                  i += dir;
                }
              } else {
                cont = this._currentCopies;
                i = 0;
                dir = 1;
                while (cont) {
                  items = this.elemsData[i].it;
                  itemsTransform = items[items.length - 1].transform.mProps.v.props;
                  items[items.length - 1].transform.mProps._mdf = false;
                  items[items.length - 1].transform.op._mdf = false;
                  cont -= 1;
                  i += dir;
                }
              }
              return hasReloaded;
            };
            RepeaterModifier.prototype.addShape = function () {};
            function RoundCornersModifier() {}
            extendPrototype([ShapeModifier], RoundCornersModifier);
            RoundCornersModifier.prototype.initModifierProperties = function (elem, data) {
              this.getValue = this.processKeys;
              this.rd = PropertyFactory.getProp(elem, data.r, 0, null, this);
              this._isAnimated = !!this.rd.effectsSequence.length;
            };
            RoundCornersModifier.prototype.processPath = function (path, round) {
              var clonedPath = shapePool.newElement();
              clonedPath.c = path.c;
              var i;
              var len = path._length;
              var currentV;
              var currentI;
              var currentO;
              var closerV;
              var distance;
              var newPosPerc;
              var index = 0;
              var vX;
              var vY;
              var oX;
              var oY;
              var iX;
              var iY;
              for (i = 0; i < len; i += 1) {
                currentV = path.v[i];
                currentO = path.o[i];
                currentI = path.i[i];
                if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
                  if ((i === 0 || i === len - 1) && !path.c) {
                    clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index);
                    /* clonedPath.v[index] = currentV;
                            clonedPath.o[index] = currentO;
                            clonedPath.i[index] = currentI; */

                    index += 1;
                  } else {
                    if (i === 0) {
                      closerV = path.v[len - 1];
                    } else {
                      closerV = path.v[i - 1];
                    }
                    distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                    newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                    iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                    vX = iX;
                    iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
                    vY = iY;
                    oX = vX - (vX - currentV[0]) * roundCorner;
                    oY = vY - (vY - currentV[1]) * roundCorner;
                    clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index);
                    index += 1;
                    if (i === len - 1) {
                      closerV = path.v[0];
                    } else {
                      closerV = path.v[i + 1];
                    }
                    distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                    newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                    oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                    vX = oX;
                    oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
                    vY = oY;
                    iX = vX - (vX - currentV[0]) * roundCorner;
                    iY = vY - (vY - currentV[1]) * roundCorner;
                    clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index);
                    index += 1;
                  }
                } else {
                  clonedPath.setTripleAt(path.v[i][0], path.v[i][1], path.o[i][0], path.o[i][1], path.i[i][0], path.i[i][1], index);
                  index += 1;
                }
              }
              return clonedPath;
            };
            RoundCornersModifier.prototype.processShapes = function (_isFirstFrame) {
              var shapePaths;
              var i;
              var len = this.shapes.length;
              var j;
              var jLen;
              var rd = this.rd.v;
              if (rd !== 0) {
                var shapeData;
                var localShapeCollection;
                for (i = 0; i < len; i += 1) {
                  shapeData = this.shapes[i];
                  localShapeCollection = shapeData.localShapeCollection;
                  if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                    localShapeCollection.releaseShapes();
                    shapeData.shape._mdf = true;
                    shapePaths = shapeData.shape.paths.shapes;
                    jLen = shapeData.shape.paths._length;
                    for (j = 0; j < jLen; j += 1) {
                      localShapeCollection.addShape(this.processPath(shapePaths[j], rd));
                    }
                  }
                  shapeData.shape.paths = shapeData.localShapeCollection;
                }
              }
              if (!this.dynamicProperties.length) {
                this._mdf = false;
              }
            };
            function floatEqual(a, b) {
              return Math.abs(a - b) * 100000 <= Math.min(Math.abs(a), Math.abs(b));
            }
            function floatZero(f) {
              return Math.abs(f) <= 0.00001;
            }
            function lerp(p0, p1, amount) {
              return p0 * (1 - amount) + p1 * amount;
            }
            function lerpPoint(p0, p1, amount) {
              return [lerp(p0[0], p1[0], amount), lerp(p0[1], p1[1], amount)];
            }
            function quadRoots(a, b, c) {
              // no root
              if (a === 0) return [];
              var s = b * b - 4 * a * c; // Complex roots

              if (s < 0) return [];
              var singleRoot = -b / (2 * a); // 1 root

              if (s === 0) return [singleRoot];
              var delta = Math.sqrt(s) / (2 * a); // 2 roots

              return [singleRoot - delta, singleRoot + delta];
            }
            function polynomialCoefficients(p0, p1, p2, p3) {
              return [-p0 + 3 * p1 - 3 * p2 + p3, 3 * p0 - 6 * p1 + 3 * p2, -3 * p0 + 3 * p1, p0];
            }
            function singlePoint(p) {
              return new PolynomialBezier(p, p, p, p, false);
            }
            function PolynomialBezier(p0, p1, p2, p3, linearize) {
              if (linearize && pointEqual(p0, p1)) {
                p1 = lerpPoint(p0, p3, 1 / 3);
              }
              if (linearize && pointEqual(p2, p3)) {
                p2 = lerpPoint(p0, p3, 2 / 3);
              }
              var coeffx = polynomialCoefficients(p0[0], p1[0], p2[0], p3[0]);
              var coeffy = polynomialCoefficients(p0[1], p1[1], p2[1], p3[1]);
              this.a = [coeffx[0], coeffy[0]];
              this.b = [coeffx[1], coeffy[1]];
              this.c = [coeffx[2], coeffy[2]];
              this.d = [coeffx[3], coeffy[3]];
              this.points = [p0, p1, p2, p3];
            }
            PolynomialBezier.prototype.point = function (t) {
              return [((this.a[0] * t + this.b[0]) * t + this.c[0]) * t + this.d[0], ((this.a[1] * t + this.b[1]) * t + this.c[1]) * t + this.d[1]];
            };
            PolynomialBezier.prototype.derivative = function (t) {
              return [(3 * t * this.a[0] + 2 * this.b[0]) * t + this.c[0], (3 * t * this.a[1] + 2 * this.b[1]) * t + this.c[1]];
            };
            PolynomialBezier.prototype.tangentAngle = function (t) {
              var p = this.derivative(t);
              return Math.atan2(p[1], p[0]);
            };
            PolynomialBezier.prototype.normalAngle = function (t) {
              var p = this.derivative(t);
              return Math.atan2(p[0], p[1]);
            };
            PolynomialBezier.prototype.inflectionPoints = function () {
              var denom = this.a[1] * this.b[0] - this.a[0] * this.b[1];
              if (floatZero(denom)) return [];
              var tcusp = -0.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / denom;
              var square = tcusp * tcusp - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / denom;
              if (square < 0) return [];
              var root = Math.sqrt(square);
              if (floatZero(root)) {
                if (root > 0 && root < 1) return [tcusp];
                return [];
              }
              return [tcusp - root, tcusp + root].filter(function (r) {
                return r > 0 && r < 1;
              });
            };
            PolynomialBezier.prototype.split = function (t) {
              if (t <= 0) return [singlePoint(this.points[0]), this];
              if (t >= 1) return [this, singlePoint(this.points[this.points.length - 1])];
              var p10 = lerpPoint(this.points[0], this.points[1], t);
              var p11 = lerpPoint(this.points[1], this.points[2], t);
              var p12 = lerpPoint(this.points[2], this.points[3], t);
              var p20 = lerpPoint(p10, p11, t);
              var p21 = lerpPoint(p11, p12, t);
              var p3 = lerpPoint(p20, p21, t);
              return [new PolynomialBezier(this.points[0], p10, p20, p3, true), new PolynomialBezier(p3, p21, p12, this.points[3], true)];
            };
            function extrema(bez, comp) {
              var min = bez.points[0][comp];
              var max = bez.points[bez.points.length - 1][comp];
              if (min > max) {
                var e = max;
                max = min;
                min = e;
              } // Derivative roots to find min/max

              var f = quadRoots(3 * bez.a[comp], 2 * bez.b[comp], bez.c[comp]);
              for (var i = 0; i < f.length; i += 1) {
                if (f[i] > 0 && f[i] < 1) {
                  var val = bez.point(f[i])[comp];
                  if (val < min) min = val;else if (val > max) max = val;
                }
              }
              return {
                min: min,
                max: max
              };
            }
            PolynomialBezier.prototype.bounds = function () {
              return {
                x: extrema(this, 0),
                y: extrema(this, 1)
              };
            };
            PolynomialBezier.prototype.boundingBox = function () {
              var bounds = this.bounds();
              return {
                left: bounds.x.min,
                right: bounds.x.max,
                top: bounds.y.min,
                bottom: bounds.y.max,
                width: bounds.x.max - bounds.x.min,
                height: bounds.y.max - bounds.y.min,
                cx: (bounds.x.max + bounds.x.min) / 2,
                cy: (bounds.y.max + bounds.y.min) / 2
              };
            };
            function intersectData(bez, t1, t2) {
              var box = bez.boundingBox();
              return {
                cx: box.cx,
                cy: box.cy,
                width: box.width,
                height: box.height,
                bez: bez,
                t: (t1 + t2) / 2,
                t1: t1,
                t2: t2
              };
            }
            function splitData(data) {
              var split = data.bez.split(0.5);
              return [intersectData(split[0], data.t1, data.t), intersectData(split[1], data.t, data.t2)];
            }
            function boxIntersect(b1, b2) {
              return Math.abs(b1.cx - b2.cx) * 2 < b1.width + b2.width && Math.abs(b1.cy - b2.cy) * 2 < b1.height + b2.height;
            }
            function intersectsImpl(d1, d2, depth, tolerance, intersections, maxRecursion) {
              if (!boxIntersect(d1, d2)) return;
              if (depth >= maxRecursion || d1.width <= tolerance && d1.height <= tolerance && d2.width <= tolerance && d2.height <= tolerance) {
                intersections.push([d1.t, d2.t]);
                return;
              }
              var d1s = splitData(d1);
              var d2s = splitData(d2);
              intersectsImpl(d1s[0], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
              intersectsImpl(d1s[0], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
              intersectsImpl(d1s[1], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
              intersectsImpl(d1s[1], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
            }
            PolynomialBezier.prototype.intersections = function (other, tolerance, maxRecursion) {
              if (tolerance === undefined) tolerance = 2;
              if (maxRecursion === undefined) maxRecursion = 7;
              var intersections = [];
              intersectsImpl(intersectData(this, 0, 1), intersectData(other, 0, 1), 0, tolerance, intersections, maxRecursion);
              return intersections;
            };
            PolynomialBezier.shapeSegment = function (shapePath, index) {
              var nextIndex = (index + 1) % shapePath.length();
              return new PolynomialBezier(shapePath.v[index], shapePath.o[index], shapePath.i[nextIndex], shapePath.v[nextIndex], true);
            };
            PolynomialBezier.shapeSegmentInverted = function (shapePath, index) {
              var nextIndex = (index + 1) % shapePath.length();
              return new PolynomialBezier(shapePath.v[nextIndex], shapePath.i[nextIndex], shapePath.o[index], shapePath.v[index], true);
            };
            function crossProduct(a, b) {
              return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
            }
            function lineIntersection(start1, end1, start2, end2) {
              var v1 = [start1[0], start1[1], 1];
              var v2 = [end1[0], end1[1], 1];
              var v3 = [start2[0], start2[1], 1];
              var v4 = [end2[0], end2[1], 1];
              var r = crossProduct(crossProduct(v1, v2), crossProduct(v3, v4));
              if (floatZero(r[2])) return null;
              return [r[0] / r[2], r[1] / r[2]];
            }
            function polarOffset(p, angle, length) {
              return [p[0] + Math.cos(angle) * length, p[1] - Math.sin(angle) * length];
            }
            function pointDistance(p1, p2) {
              return Math.hypot(p1[0] - p2[0], p1[1] - p2[1]);
            }
            function pointEqual(p1, p2) {
              return floatEqual(p1[0], p2[0]) && floatEqual(p1[1], p2[1]);
            }
            function ZigZagModifier() {}
            extendPrototype([ShapeModifier], ZigZagModifier);
            ZigZagModifier.prototype.initModifierProperties = function (elem, data) {
              this.getValue = this.processKeys;
              this.amplitude = PropertyFactory.getProp(elem, data.s, 0, null, this);
              this.frequency = PropertyFactory.getProp(elem, data.r, 0, null, this);
              this.pointsType = PropertyFactory.getProp(elem, data.pt, 0, null, this);
              this._isAnimated = this.amplitude.effectsSequence.length !== 0 || this.frequency.effectsSequence.length !== 0 || this.pointsType.effectsSequence.length !== 0;
            };
            function setPoint(outputBezier, point, angle, direction, amplitude, outAmplitude, inAmplitude) {
              var angO = angle - Math.PI / 2;
              var angI = angle + Math.PI / 2;
              var px = point[0] + Math.cos(angle) * direction * amplitude;
              var py = point[1] - Math.sin(angle) * direction * amplitude;
              outputBezier.setTripleAt(px, py, px + Math.cos(angO) * outAmplitude, py - Math.sin(angO) * outAmplitude, px + Math.cos(angI) * inAmplitude, py - Math.sin(angI) * inAmplitude, outputBezier.length());
            }
            function getPerpendicularVector(pt1, pt2) {
              var vector = [pt2[0] - pt1[0], pt2[1] - pt1[1]];
              var rot = -Math.PI * 0.5;
              var rotatedVector = [Math.cos(rot) * vector[0] - Math.sin(rot) * vector[1], Math.sin(rot) * vector[0] + Math.cos(rot) * vector[1]];
              return rotatedVector;
            }
            function getProjectingAngle(path, cur) {
              var prevIndex = cur === 0 ? path.length() - 1 : cur - 1;
              var nextIndex = (cur + 1) % path.length();
              var prevPoint = path.v[prevIndex];
              var nextPoint = path.v[nextIndex];
              var pVector = getPerpendicularVector(prevPoint, nextPoint);
              return Math.atan2(0, 1) - Math.atan2(pVector[1], pVector[0]);
            }
            function zigZagCorner(outputBezier, path, cur, amplitude, frequency, pointType, direction) {
              var angle = getProjectingAngle(path, cur);
              var point = path.v[cur % path._length];
              var prevPoint = path.v[cur === 0 ? path._length - 1 : cur - 1];
              var nextPoint = path.v[(cur + 1) % path._length];
              var prevDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - prevPoint[0], 2) + Math.pow(point[1] - prevPoint[1], 2)) : 0;
              var nextDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - nextPoint[0], 2) + Math.pow(point[1] - nextPoint[1], 2)) : 0;
              setPoint(outputBezier, path.v[cur % path._length], angle, direction, amplitude, nextDist / ((frequency + 1) * 2), prevDist / ((frequency + 1) * 2));
            }
            function zigZagSegment(outputBezier, segment, amplitude, frequency, pointType, direction) {
              for (var i = 0; i < frequency; i += 1) {
                var t = (i + 1) / (frequency + 1);
                var dist = pointType === 2 ? Math.sqrt(Math.pow(segment.points[3][0] - segment.points[0][0], 2) + Math.pow(segment.points[3][1] - segment.points[0][1], 2)) : 0;
                var angle = segment.normalAngle(t);
                var point = segment.point(t);
                setPoint(outputBezier, point, angle, direction, amplitude, dist / ((frequency + 1) * 2), dist / ((frequency + 1) * 2));
                direction = -direction;
              }
              return direction;
            }
            ZigZagModifier.prototype.processPath = function (path, amplitude, frequency, pointType) {
              var count = path._length;
              var clonedPath = shapePool.newElement();
              clonedPath.c = path.c;
              if (!path.c) {
                count -= 1;
              }
              if (count === 0) return clonedPath;
              var direction = -1;
              var segment = PolynomialBezier.shapeSegment(path, 0);
              zigZagCorner(clonedPath, path, 0, amplitude, frequency, pointType, direction);
              for (var i = 0; i < count; i += 1) {
                direction = zigZagSegment(clonedPath, segment, amplitude, frequency, pointType, -direction);
                if (i === count - 1 && !path.c) {
                  segment = null;
                } else {
                  segment = PolynomialBezier.shapeSegment(path, (i + 1) % count);
                }
                zigZagCorner(clonedPath, path, i + 1, amplitude, frequency, pointType, direction);
              }
              return clonedPath;
            };
            ZigZagModifier.prototype.processShapes = function (_isFirstFrame) {
              var shapePaths;
              var i;
              var len = this.shapes.length;
              var j;
              var jLen;
              var amplitude = this.amplitude.v;
              var frequency = Math.max(0, Math.round(this.frequency.v));
              var pointType = this.pointsType.v;
              if (amplitude !== 0) {
                var shapeData;
                var localShapeCollection;
                for (i = 0; i < len; i += 1) {
                  shapeData = this.shapes[i];
                  localShapeCollection = shapeData.localShapeCollection;
                  if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                    localShapeCollection.releaseShapes();
                    shapeData.shape._mdf = true;
                    shapePaths = shapeData.shape.paths.shapes;
                    jLen = shapeData.shape.paths._length;
                    for (j = 0; j < jLen; j += 1) {
                      localShapeCollection.addShape(this.processPath(shapePaths[j], amplitude, frequency, pointType));
                    }
                  }
                  shapeData.shape.paths = shapeData.localShapeCollection;
                }
              }
              if (!this.dynamicProperties.length) {
                this._mdf = false;
              }
            };
            function linearOffset(p1, p2, amount) {
              var angle = Math.atan2(p2[0] - p1[0], p2[1] - p1[1]);
              return [polarOffset(p1, angle, amount), polarOffset(p2, angle, amount)];
            }
            function offsetSegment(segment, amount) {
              var p0;
              var p1a;
              var p1b;
              var p2b;
              var p2a;
              var p3;
              var e;
              e = linearOffset(segment.points[0], segment.points[1], amount);
              p0 = e[0];
              p1a = e[1];
              e = linearOffset(segment.points[1], segment.points[2], amount);
              p1b = e[0];
              p2b = e[1];
              e = linearOffset(segment.points[2], segment.points[3], amount);
              p2a = e[0];
              p3 = e[1];
              var p1 = lineIntersection(p0, p1a, p1b, p2b);
              if (p1 === null) p1 = p1a;
              var p2 = lineIntersection(p2a, p3, p1b, p2b);
              if (p2 === null) p2 = p2a;
              return new PolynomialBezier(p0, p1, p2, p3);
            }
            function joinLines(outputBezier, seg1, seg2, lineJoin, miterLimit) {
              var p0 = seg1.points[3];
              var p1 = seg2.points[0]; // Bevel

              if (lineJoin === 3) return p0; // Connected, they don't need a joint

              if (pointEqual(p0, p1)) return p0; // Round

              if (lineJoin === 2) {
                var angleOut = -seg1.tangentAngle(1);
                var angleIn = -seg2.tangentAngle(0) + Math.PI;
                var center = lineIntersection(p0, polarOffset(p0, angleOut + Math.PI / 2, 100), p1, polarOffset(p1, angleOut + Math.PI / 2, 100));
                var radius = center ? pointDistance(center, p0) : pointDistance(p0, p1) / 2;
                var tan = polarOffset(p0, angleOut, 2 * radius * roundCorner);
                outputBezier.setXYAt(tan[0], tan[1], 'o', outputBezier.length() - 1);
                tan = polarOffset(p1, angleIn, 2 * radius * roundCorner);
                outputBezier.setTripleAt(p1[0], p1[1], p1[0], p1[1], tan[0], tan[1], outputBezier.length());
                return p1;
              } // Miter

              var t0 = pointEqual(p0, seg1.points[2]) ? seg1.points[0] : seg1.points[2];
              var t1 = pointEqual(p1, seg2.points[1]) ? seg2.points[3] : seg2.points[1];
              var intersection = lineIntersection(t0, p0, p1, t1);
              if (intersection && pointDistance(intersection, p0) < miterLimit) {
                outputBezier.setTripleAt(intersection[0], intersection[1], intersection[0], intersection[1], intersection[0], intersection[1], outputBezier.length());
                return intersection;
              }
              return p0;
            }
            function getIntersection(a, b) {
              var intersect = a.intersections(b);
              if (intersect.length && floatEqual(intersect[0][0], 1)) intersect.shift();
              if (intersect.length) return intersect[0];
              return null;
            }
            function pruneSegmentIntersection(a, b) {
              var outa = a.slice();
              var outb = b.slice();
              var intersect = getIntersection(a[a.length - 1], b[0]);
              if (intersect) {
                outa[a.length - 1] = a[a.length - 1].split(intersect[0])[0];
                outb[0] = b[0].split(intersect[1])[1];
              }
              if (a.length > 1 && b.length > 1) {
                intersect = getIntersection(a[0], b[b.length - 1]);
                if (intersect) {
                  return [[a[0].split(intersect[0])[0]], [b[b.length - 1].split(intersect[1])[1]]];
                }
              }
              return [outa, outb];
            }
            function pruneIntersections(segments) {
              var e;
              for (var i = 1; i < segments.length; i += 1) {
                e = pruneSegmentIntersection(segments[i - 1], segments[i]);
                segments[i - 1] = e[0];
                segments[i] = e[1];
              }
              if (segments.length > 1) {
                e = pruneSegmentIntersection(segments[segments.length - 1], segments[0]);
                segments[segments.length - 1] = e[0];
                segments[0] = e[1];
              }
              return segments;
            }
            function offsetSegmentSplit(segment, amount) {
              /*
                We split each bezier segment into smaller pieces based
                on inflection points, this ensures the control point
                polygon is convex.
                  (A cubic bezier can have none, one, or two inflection points)
              */
              var flex = segment.inflectionPoints();
              var left;
              var right;
              var split;
              var mid;
              if (flex.length === 0) {
                return [offsetSegment(segment, amount)];
              }
              if (flex.length === 1 || floatEqual(flex[1], 1)) {
                split = segment.split(flex[0]);
                left = split[0];
                right = split[1];
                return [offsetSegment(left, amount), offsetSegment(right, amount)];
              }
              split = segment.split(flex[0]);
              left = split[0];
              var t = (flex[1] - flex[0]) / (1 - flex[0]);
              split = split[1].split(t);
              mid = split[0];
              right = split[1];
              return [offsetSegment(left, amount), offsetSegment(mid, amount), offsetSegment(right, amount)];
            }
            function OffsetPathModifier() {}
            extendPrototype([ShapeModifier], OffsetPathModifier);
            OffsetPathModifier.prototype.initModifierProperties = function (elem, data) {
              this.getValue = this.processKeys;
              this.amount = PropertyFactory.getProp(elem, data.a, 0, null, this);
              this.miterLimit = PropertyFactory.getProp(elem, data.ml, 0, null, this);
              this.lineJoin = data.lj;
              this._isAnimated = this.amount.effectsSequence.length !== 0;
            };
            OffsetPathModifier.prototype.processPath = function (inputBezier, amount, lineJoin, miterLimit) {
              var outputBezier = shapePool.newElement();
              outputBezier.c = inputBezier.c;
              var count = inputBezier.length();
              if (!inputBezier.c) {
                count -= 1;
              }
              var i;
              var j;
              var segment;
              var multiSegments = [];
              for (i = 0; i < count; i += 1) {
                segment = PolynomialBezier.shapeSegment(inputBezier, i);
                multiSegments.push(offsetSegmentSplit(segment, amount));
              }
              if (!inputBezier.c) {
                for (i = count - 1; i >= 0; i -= 1) {
                  segment = PolynomialBezier.shapeSegmentInverted(inputBezier, i);
                  multiSegments.push(offsetSegmentSplit(segment, amount));
                }
              }
              multiSegments = pruneIntersections(multiSegments); // Add bezier segments to the output and apply line joints

              var lastPoint = null;
              var lastSeg = null;
              for (i = 0; i < multiSegments.length; i += 1) {
                var multiSegment = multiSegments[i];
                if (lastSeg) lastPoint = joinLines(outputBezier, lastSeg, multiSegment[0], lineJoin, miterLimit);
                lastSeg = multiSegment[multiSegment.length - 1];
                for (j = 0; j < multiSegment.length; j += 1) {
                  segment = multiSegment[j];
                  if (lastPoint && pointEqual(segment.points[0], lastPoint)) {
                    outputBezier.setXYAt(segment.points[1][0], segment.points[1][1], 'o', outputBezier.length() - 1);
                  } else {
                    outputBezier.setTripleAt(segment.points[0][0], segment.points[0][1], segment.points[1][0], segment.points[1][1], segment.points[0][0], segment.points[0][1], outputBezier.length());
                  }
                  outputBezier.setTripleAt(segment.points[3][0], segment.points[3][1], segment.points[3][0], segment.points[3][1], segment.points[2][0], segment.points[2][1], outputBezier.length());
                  lastPoint = segment.points[3];
                }
              }
              if (multiSegments.length) joinLines(outputBezier, lastSeg, multiSegments[0][0], lineJoin, miterLimit);
              return outputBezier;
            };
            OffsetPathModifier.prototype.processShapes = function (_isFirstFrame) {
              var shapePaths;
              var i;
              var len = this.shapes.length;
              var j;
              var jLen;
              var amount = this.amount.v;
              var miterLimit = this.miterLimit.v;
              var lineJoin = this.lineJoin;
              if (amount !== 0) {
                var shapeData;
                var localShapeCollection;
                for (i = 0; i < len; i += 1) {
                  shapeData = this.shapes[i];
                  localShapeCollection = shapeData.localShapeCollection;
                  if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                    localShapeCollection.releaseShapes();
                    shapeData.shape._mdf = true;
                    shapePaths = shapeData.shape.paths.shapes;
                    jLen = shapeData.shape.paths._length;
                    for (j = 0; j < jLen; j += 1) {
                      localShapeCollection.addShape(this.processPath(shapePaths[j], amount, lineJoin, miterLimit));
                    }
                  }
                  shapeData.shape.paths = shapeData.localShapeCollection;
                }
              }
              if (!this.dynamicProperties.length) {
                this._mdf = false;
              }
            };
            function getFontProperties(fontData) {
              var styles = fontData.fStyle ? fontData.fStyle.split(' ') : [];
              var fWeight = 'normal';
              var fStyle = 'normal';
              var len = styles.length;
              var styleName;
              for (var i = 0; i < len; i += 1) {
                styleName = styles[i].toLowerCase();
                switch (styleName) {
                  case 'italic':
                    fStyle = 'italic';
                    break;
                  case 'bold':
                    fWeight = '700';
                    break;
                  case 'black':
                    fWeight = '900';
                    break;
                  case 'medium':
                    fWeight = '500';
                    break;
                  case 'regular':
                  case 'normal':
                    fWeight = '400';
                    break;
                  case 'light':
                  case 'thin':
                    fWeight = '200';
                    break;
                }
              }
              return {
                style: fStyle,
                weight: fontData.fWeight || fWeight
              };
            }
            var FontManager = function () {
              var maxWaitingTime = 5000;
              var emptyChar = {
                w: 0,
                size: 0,
                shapes: [],
                data: {
                  shapes: []
                }
              };
              var combinedCharacters = []; // Hindi characters

              combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
              var BLACK_FLAG_CODE_POINT = 127988;
              var CANCEL_TAG_CODE_POINT = 917631;
              var A_TAG_CODE_POINT = 917601;
              var Z_TAG_CODE_POINT = 917626;
              var VARIATION_SELECTOR_16_CODE_POINT = 65039;
              var ZERO_WIDTH_JOINER_CODE_POINT = 8205;
              var REGIONAL_CHARACTER_A_CODE_POINT = 127462;
              var REGIONAL_CHARACTER_Z_CODE_POINT = 127487;
              var surrogateModifiers = ['d83cdffb', 'd83cdffc', 'd83cdffd', 'd83cdffe', 'd83cdfff'];
              function trimFontOptions(font) {
                var familyArray = font.split(',');
                var i;
                var len = familyArray.length;
                var enabledFamilies = [];
                for (i = 0; i < len; i += 1) {
                  if (familyArray[i] !== 'sans-serif' && familyArray[i] !== 'monospace') {
                    enabledFamilies.push(familyArray[i]);
                  }
                }
                return enabledFamilies.join(',');
              }
              function setUpNode(font, family) {
                var parentNode = createTag('span'); // Node is invisible to screen readers.

                parentNode.setAttribute('aria-hidden', true);
                parentNode.style.fontFamily = family;
                var node = createTag('span'); // Characters that vary significantly among different fonts

                node.innerText = 'giItT1WQy@!-/#'; // Visible - so we can measure it - but not on the screen

                parentNode.style.position = 'absolute';
                parentNode.style.left = '-10000px';
                parentNode.style.top = '-10000px'; // Large font size makes even subtle changes obvious

                parentNode.style.fontSize = '300px'; // Reset any font properties

                parentNode.style.fontVariant = 'normal';
                parentNode.style.fontStyle = 'normal';
                parentNode.style.fontWeight = 'normal';
                parentNode.style.letterSpacing = '0';
                parentNode.appendChild(node);
                document.body.appendChild(parentNode); // Remember width with no applied web font

                var width = node.offsetWidth;
                node.style.fontFamily = trimFontOptions(font) + ', ' + family;
                return {
                  node: node,
                  w: width,
                  parent: parentNode
                };
              }
              function checkLoadedFonts() {
                var i;
                var len = this.fonts.length;
                var node;
                var w;
                var loadedCount = len;
                for (i = 0; i < len; i += 1) {
                  if (this.fonts[i].loaded) {
                    loadedCount -= 1;
                  } else if (this.fonts[i].fOrigin === 'n' || this.fonts[i].origin === 0) {
                    this.fonts[i].loaded = true;
                  } else {
                    node = this.fonts[i].monoCase.node;
                    w = this.fonts[i].monoCase.w;
                    if (node.offsetWidth !== w) {
                      loadedCount -= 1;
                      this.fonts[i].loaded = true;
                    } else {
                      node = this.fonts[i].sansCase.node;
                      w = this.fonts[i].sansCase.w;
                      if (node.offsetWidth !== w) {
                        loadedCount -= 1;
                        this.fonts[i].loaded = true;
                      }
                    }
                    if (this.fonts[i].loaded) {
                      this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);
                      this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);
                    }
                  }
                }
                if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
                  setTimeout(this.checkLoadedFontsBinded, 20);
                } else {
                  setTimeout(this.setIsLoadedBinded, 10);
                }
              }
              function createHelper(fontData, def) {
                var engine = document.body && def ? 'svg' : 'canvas';
                var helper;
                var fontProps = getFontProperties(fontData);
                if (engine === 'svg') {
                  var tHelper = createNS('text');
                  tHelper.style.fontSize = '100px'; // tHelper.style.fontFamily = fontData.fFamily;

                  tHelper.setAttribute('font-family', fontData.fFamily);
                  tHelper.setAttribute('font-style', fontProps.style);
                  tHelper.setAttribute('font-weight', fontProps.weight);
                  tHelper.textContent = '1';
                  if (fontData.fClass) {
                    tHelper.style.fontFamily = 'inherit';
                    tHelper.setAttribute('class', fontData.fClass);
                  } else {
                    tHelper.style.fontFamily = fontData.fFamily;
                  }
                  def.appendChild(tHelper);
                  helper = tHelper;
                } else {
                  var tCanvasHelper = new OffscreenCanvas(500, 500).getContext('2d');
                  tCanvasHelper.font = fontProps.style + ' ' + fontProps.weight + ' 100px ' + fontData.fFamily;
                  helper = tCanvasHelper;
                }
                function measure(text) {
                  if (engine === 'svg') {
                    helper.textContent = text;
                    return helper.getComputedTextLength();
                  }
                  return helper.measureText(text).width;
                }
                return {
                  measureText: measure
                };
              }
              function addFonts(fontData, defs) {
                if (!fontData) {
                  this.isLoaded = true;
                  return;
                }
                if (this.chars) {
                  this.isLoaded = true;
                  this.fonts = fontData.list;
                  return;
                }
                if (!document.body) {
                  this.isLoaded = true;
                  fontData.list.forEach(function (data) {
                    data.helper = createHelper(data);
                    data.cache = {};
                  });
                  this.fonts = fontData.list;
                  return;
                }
                var fontArr = fontData.list;
                var i;
                var len = fontArr.length;
                var _pendingFonts = len;
                for (i = 0; i < len; i += 1) {
                  var shouldLoadFont = true;
                  var loadedSelector;
                  var j;
                  fontArr[i].loaded = false;
                  fontArr[i].monoCase = setUpNode(fontArr[i].fFamily, 'monospace');
                  fontArr[i].sansCase = setUpNode(fontArr[i].fFamily, 'sans-serif');
                  if (!fontArr[i].fPath) {
                    fontArr[i].loaded = true;
                    _pendingFonts -= 1;
                  } else if (fontArr[i].fOrigin === 'p' || fontArr[i].origin === 3) {
                    loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i].fFamily + '"]');
                    if (loadedSelector.length > 0) {
                      shouldLoadFont = false;
                    }
                    if (shouldLoadFont) {
                      var s = createTag('style');
                      s.setAttribute('f-forigin', fontArr[i].fOrigin);
                      s.setAttribute('f-origin', fontArr[i].origin);
                      s.setAttribute('f-family', fontArr[i].fFamily);
                      s.type = 'text/css';
                      s.innerText = '@font-face {font-family: ' + fontArr[i].fFamily + "; font-style: normal; src: url('" + fontArr[i].fPath + "');}";
                      defs.appendChild(s);
                    }
                  } else if (fontArr[i].fOrigin === 'g' || fontArr[i].origin === 1) {
                    loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');
                    for (j = 0; j < loadedSelector.length; j += 1) {
                      if (loadedSelector[j].href.indexOf(fontArr[i].fPath) !== -1) {
                        // Font is already loaded
                        shouldLoadFont = false;
                      }
                    }
                    if (shouldLoadFont) {
                      var l = createTag('link');
                      l.setAttribute('f-forigin', fontArr[i].fOrigin);
                      l.setAttribute('f-origin', fontArr[i].origin);
                      l.type = 'text/css';
                      l.rel = 'stylesheet';
                      l.href = fontArr[i].fPath;
                      document.body.appendChild(l);
                    }
                  } else if (fontArr[i].fOrigin === 't' || fontArr[i].origin === 2) {
                    loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');
                    for (j = 0; j < loadedSelector.length; j += 1) {
                      if (fontArr[i].fPath === loadedSelector[j].src) {
                        // Font is already loaded
                        shouldLoadFont = false;
                      }
                    }
                    if (shouldLoadFont) {
                      var sc = createTag('link');
                      sc.setAttribute('f-forigin', fontArr[i].fOrigin);
                      sc.setAttribute('f-origin', fontArr[i].origin);
                      sc.setAttribute('rel', 'stylesheet');
                      sc.setAttribute('href', fontArr[i].fPath);
                      defs.appendChild(sc);
                    }
                  }
                  fontArr[i].helper = createHelper(fontArr[i], defs);
                  fontArr[i].cache = {};
                  this.fonts.push(fontArr[i]);
                }
                if (_pendingFonts === 0) {
                  this.isLoaded = true;
                } else {
                  // On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.
                  // Adding this timeout seems to fix it
                  setTimeout(this.checkLoadedFonts.bind(this), 100);
                }
              }
              function addChars(chars) {
                if (!chars) {
                  return;
                }
                if (!this.chars) {
                  this.chars = [];
                }
                var i;
                var len = chars.length;
                var j;
                var jLen = this.chars.length;
                var found;
                for (i = 0; i < len; i += 1) {
                  j = 0;
                  found = false;
                  while (j < jLen) {
                    if (this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch) {
                      found = true;
                    }
                    j += 1;
                  }
                  if (!found) {
                    this.chars.push(chars[i]);
                    jLen += 1;
                  }
                }
              }
              function getCharData(_char, style, font) {
                var i = 0;
                var len = this.chars.length;
                while (i < len) {
                  if (this.chars[i].ch === _char && this.chars[i].style === style && this.chars[i].fFamily === font) {
                    return this.chars[i];
                  }
                  i += 1;
                }
                if ((typeof _char === 'string' && _char.charCodeAt(0) !== 13 || !_char) && console && console.warn // eslint-disable-line no-console
                && !this._warned) {
                  this._warned = true;
                  console.warn('Missing character from exported characters list: ', _char, style, font); // eslint-disable-line no-console
                }

                return emptyChar;
              }
              function measureText(_char2, fontName, size) {
                var fontData = this.getFontByName(fontName); // Using the char instead of char.charCodeAt(0)
                // to avoid collisions between equal chars

                var index = _char2;
                if (!fontData.cache[index]) {
                  var tHelper = fontData.helper;
                  if (_char2 === ' ') {
                    var doubleSize = tHelper.measureText('|' + _char2 + '|');
                    var singleSize = tHelper.measureText('||');
                    fontData.cache[index] = (doubleSize - singleSize) / 100;
                  } else {
                    fontData.cache[index] = tHelper.measureText(_char2) / 100;
                  }
                }
                return fontData.cache[index] * size;
              }
              function getFontByName(name) {
                var i = 0;
                var len = this.fonts.length;
                while (i < len) {
                  if (this.fonts[i].fName === name) {
                    return this.fonts[i];
                  }
                  i += 1;
                }
                return this.fonts[0];
              }
              function getCodePoint(string) {
                var codePoint = 0;
                var first = string.charCodeAt(0);
                if (first >= 0xD800 && first <= 0xDBFF) {
                  var second = string.charCodeAt(1);
                  if (second >= 0xDC00 && second <= 0xDFFF) {
                    codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                  }
                }
                return codePoint;
              } // Skin tone modifiers

              function isModifier(firstCharCode, secondCharCode) {
                var sum = firstCharCode.toString(16) + secondCharCode.toString(16);
                return surrogateModifiers.indexOf(sum) !== -1;
              }
              function isZeroWidthJoiner(charCode) {
                return charCode === ZERO_WIDTH_JOINER_CODE_POINT;
              } // This codepoint may change the appearance of the preceding character.
              // If that is a symbol, dingbat or emoji, U+FE0F forces it to be rendered
              // as a colorful image as compared to a monochrome text variant.

              function isVariationSelector(charCode) {
                return charCode === VARIATION_SELECTOR_16_CODE_POINT;
              } // The regional indicator symbols are a set of 26 alphabetic Unicode
              /// characters (A–Z) intended to be used to encode ISO 3166-1 alpha-2
              // two-letter country codes in a way that allows optional special treatment.

              function isRegionalCode(string) {
                var codePoint = getCodePoint(string);
                if (codePoint >= REGIONAL_CHARACTER_A_CODE_POINT && codePoint <= REGIONAL_CHARACTER_Z_CODE_POINT) {
                  return true;
                }
                return false;
              } // Some Emoji implementations represent combinations of
              // two “regional indicator” letters as a single flag symbol.

              function isFlagEmoji(string) {
                return isRegionalCode(string.substr(0, 2)) && isRegionalCode(string.substr(2, 2));
              }
              function isCombinedCharacter(_char3) {
                return combinedCharacters.indexOf(_char3) !== -1;
              } // Regional flags start with a BLACK_FLAG_CODE_POINT
              // folowed by 5 chars in the TAG range
              // and end with a CANCEL_TAG_CODE_POINT

              function isRegionalFlag(text, index) {
                var codePoint = getCodePoint(text.substr(index, 2));
                if (codePoint !== BLACK_FLAG_CODE_POINT) {
                  return false;
                }
                var count = 0;
                index += 2;
                while (count < 5) {
                  codePoint = getCodePoint(text.substr(index, 2));
                  if (codePoint < A_TAG_CODE_POINT || codePoint > Z_TAG_CODE_POINT) {
                    return false;
                  }
                  count += 1;
                  index += 2;
                }
                return getCodePoint(text.substr(index, 2)) === CANCEL_TAG_CODE_POINT;
              }
              function setIsLoaded() {
                this.isLoaded = true;
              }
              var Font = function Font() {
                this.fonts = [];
                this.chars = null;
                this.typekitLoaded = 0;
                this.isLoaded = false;
                this._warned = false;
                this.initTime = Date.now();
                this.setIsLoadedBinded = this.setIsLoaded.bind(this);
                this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
              };
              Font.isModifier = isModifier;
              Font.isZeroWidthJoiner = isZeroWidthJoiner;
              Font.isFlagEmoji = isFlagEmoji;
              Font.isRegionalCode = isRegionalCode;
              Font.isCombinedCharacter = isCombinedCharacter;
              Font.isRegionalFlag = isRegionalFlag;
              Font.isVariationSelector = isVariationSelector;
              Font.BLACK_FLAG_CODE_POINT = BLACK_FLAG_CODE_POINT;
              var fontPrototype = {
                addChars: addChars,
                addFonts: addFonts,
                getCharData: getCharData,
                getFontByName: getFontByName,
                measureText: measureText,
                checkLoadedFonts: checkLoadedFonts,
                setIsLoaded: setIsLoaded
              };
              Font.prototype = fontPrototype;
              return Font;
            }();
            function SlotManager(animationData) {
              this.animationData = animationData;
            }
            SlotManager.prototype.getProp = function (data) {
              if (this.animationData.slots && this.animationData.slots[data.sid]) {
                return Object.assign(data, this.animationData.slots[data.sid].p);
              }
              return data;
            };
            function slotFactory(animationData) {
              return new SlotManager(animationData);
            }
            function RenderableElement() {}
            RenderableElement.prototype = {
              initRenderable: function initRenderable() {
                // layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
                this.isInRange = false; // layer's display state

                this.hidden = false; // If layer's transparency equals 0, it can be hidden

                this.isTransparent = false; // list of animated components

                this.renderableComponents = [];
              },
              addRenderableComponent: function addRenderableComponent(component) {
                if (this.renderableComponents.indexOf(component) === -1) {
                  this.renderableComponents.push(component);
                }
              },
              removeRenderableComponent: function removeRenderableComponent(component) {
                if (this.renderableComponents.indexOf(component) !== -1) {
                  this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
                }
              },
              prepareRenderableFrame: function prepareRenderableFrame(num) {
                this.checkLayerLimits(num);
              },
              checkTransparency: function checkTransparency() {
                if (this.finalTransform.mProp.o.v <= 0) {
                  if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
                    this.isTransparent = true;
                    this.hide();
                  }
                } else if (this.isTransparent) {
                  this.isTransparent = false;
                  this.show();
                }
              },
              /**
                 * @function
                 * Initializes frame related properties.
                 *
                 * @param {number} num
                 * current frame number in Layer's time
                 *
                 */
              checkLayerLimits: function checkLayerLimits(num) {
                if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
                  if (this.isInRange !== true) {
                    this.globalData._mdf = true;
                    this._mdf = true;
                    this.isInRange = true;
                    this.show();
                  }
                } else if (this.isInRange !== false) {
                  this.globalData._mdf = true;
                  this.isInRange = false;
                  this.hide();
                }
              },
              renderRenderable: function renderRenderable() {
                var i;
                var len = this.renderableComponents.length;
                for (i = 0; i < len; i += 1) {
                  this.renderableComponents[i].renderFrame(this._isFirstFrame);
                }
                /* this.maskManager.renderFrame(this.finalTransform.mat);
                    this.renderableEffectsManager.renderFrame(this._isFirstFrame); */
              },

              sourceRectAtTime: function sourceRectAtTime() {
                return {
                  top: 0,
                  left: 0,
                  width: 100,
                  height: 100
                };
              },
              getLayerSize: function getLayerSize() {
                if (this.data.ty === 5) {
                  return {
                    w: this.data.textData.width,
                    h: this.data.textData.height
                  };
                }
                return {
                  w: this.data.width,
                  h: this.data.height
                };
              }
            };
            var getBlendMode = function () {
              var blendModeEnums = {
                0: 'source-over',
                1: 'multiply',
                2: 'screen',
                3: 'overlay',
                4: 'darken',
                5: 'lighten',
                6: 'color-dodge',
                7: 'color-burn',
                8: 'hard-light',
                9: 'soft-light',
                10: 'difference',
                11: 'exclusion',
                12: 'hue',
                13: 'saturation',
                14: 'color',
                15: 'luminosity'
              };
              return function (mode) {
                return blendModeEnums[mode] || '';
              };
            }();
            function SliderEffect(data, elem, container) {
              this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
            }
            function AngleEffect(data, elem, container) {
              this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
            }
            function ColorEffect(data, elem, container) {
              this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);
            }
            function PointEffect(data, elem, container) {
              this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);
            }
            function LayerIndexEffect(data, elem, container) {
              this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
            }
            function MaskIndexEffect(data, elem, container) {
              this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
            }
            function CheckboxEffect(data, elem, container) {
              this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
            }
            function NoValueEffect() {
              this.p = {};
            }
            function EffectsManager(data, element) {
              var effects = data.ef || [];
              this.effectElements = [];
              var i;
              var len = effects.length;
              var effectItem;
              for (i = 0; i < len; i += 1) {
                effectItem = new GroupEffect(effects[i], element);
                this.effectElements.push(effectItem);
              }
            }
            function GroupEffect(data, element) {
              this.init(data, element);
            }
            extendPrototype([DynamicPropertyContainer], GroupEffect);
            GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;
            GroupEffect.prototype.init = function (data, element) {
              this.data = data;
              this.effectElements = [];
              this.initDynamicPropertyContainer(element);
              var i;
              var len = this.data.ef.length;
              var eff;
              var effects = this.data.ef;
              for (i = 0; i < len; i += 1) {
                eff = null;
                switch (effects[i].ty) {
                  case 0:
                    eff = new SliderEffect(effects[i], element, this);
                    break;
                  case 1:
                    eff = new AngleEffect(effects[i], element, this);
                    break;
                  case 2:
                    eff = new ColorEffect(effects[i], element, this);
                    break;
                  case 3:
                    eff = new PointEffect(effects[i], element, this);
                    break;
                  case 4:
                  case 7:
                    eff = new CheckboxEffect(effects[i], element, this);
                    break;
                  case 10:
                    eff = new LayerIndexEffect(effects[i], element, this);
                    break;
                  case 11:
                    eff = new MaskIndexEffect(effects[i], element, this);
                    break;
                  case 5:
                    eff = new EffectsManager(effects[i], element);
                    break;
                  // case 6:

                  default:
                    eff = new NoValueEffect(effects[i]);
                    break;
                }
                if (eff) {
                  this.effectElements.push(eff);
                }
              }
            };
            function BaseElement() {}
            BaseElement.prototype = {
              checkMasks: function checkMasks() {
                if (!this.data.hasMask) {
                  return false;
                }
                var i = 0;
                var len = this.data.masksProperties.length;
                while (i < len) {
                  if (this.data.masksProperties[i].mode !== 'n' && this.data.masksProperties[i].cl !== false) {
                    return true;
                  }
                  i += 1;
                }
                return false;
              },
              initExpressions: function initExpressions() {
                var expressionsInterfaces = getExpressionInterfaces();
                if (!expressionsInterfaces) {
                  return;
                }
                var LayerExpressionInterface = expressionsInterfaces('layer');
                var EffectsExpressionInterface = expressionsInterfaces('effects');
                var ShapeExpressionInterface = expressionsInterfaces('shape');
                var TextExpressionInterface = expressionsInterfaces('text');
                var CompExpressionInterface = expressionsInterfaces('comp');
                this.layerInterface = LayerExpressionInterface(this);
                if (this.data.hasMask && this.maskManager) {
                  this.layerInterface.registerMaskInterface(this.maskManager);
                }
                var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this, this.layerInterface);
                this.layerInterface.registerEffectsInterface(effectsInterface);
                if (this.data.ty === 0 || this.data.xt) {
                  this.compInterface = CompExpressionInterface(this);
                } else if (this.data.ty === 4) {
                  this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData, this.itemsData, this.layerInterface);
                  this.layerInterface.content = this.layerInterface.shapeInterface;
                } else if (this.data.ty === 5) {
                  this.layerInterface.textInterface = TextExpressionInterface(this);
                  this.layerInterface.text = this.layerInterface.textInterface;
                }
              },
              setBlendMode: function setBlendMode() {
                var blendModeValue = getBlendMode(this.data.bm);
                var elem = this.baseElement || this.layerElement;
                elem.style['mix-blend-mode'] = blendModeValue;
              },
              initBaseData: function initBaseData(data, globalData, comp) {
                this.globalData = globalData;
                this.comp = comp;
                this.data = data;
                this.layerId = createElementID(); // Stretch factor for old animations missing this property.

                if (!this.data.sr) {
                  this.data.sr = 1;
                } // effects manager

                this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
              },
              getType: function getType() {
                return this.type;
              },
              sourceRectAtTime: function sourceRectAtTime() {}
            };

            /**
             * @file
             * Handles element's layer frame update.
             * Checks layer in point and out point
             *
             */
            function FrameElement() {}
            FrameElement.prototype = {
              /**
                 * @function
                 * Initializes frame related properties.
                 *
                 */
              initFrame: function initFrame() {
                // set to true when inpoint is rendered
                this._isFirstFrame = false; // list of animated properties

                this.dynamicProperties = []; // If layer has been modified in current tick this will be true

                this._mdf = false;
              },
              /**
                 * @function
                 * Calculates all dynamic values
                 *
                 * @param {number} num
                 * current frame number in Layer's time
                 * @param {boolean} isVisible
                 * if layers is currently in range
                 *
                 */
              prepareProperties: function prepareProperties(num, isVisible) {
                var i;
                var len = this.dynamicProperties.length;
                for (i = 0; i < len; i += 1) {
                  if (isVisible || this._isParent && this.dynamicProperties[i].propType === 'transform') {
                    this.dynamicProperties[i].getValue();
                    if (this.dynamicProperties[i]._mdf) {
                      this.globalData._mdf = true;
                      this._mdf = true;
                    }
                  }
                }
              },
              addDynamicProperty: function addDynamicProperty(prop) {
                if (this.dynamicProperties.indexOf(prop) === -1) {
                  this.dynamicProperties.push(prop);
                }
              }
            };
            function FootageElement(data, globalData, comp) {
              this.initFrame();
              this.initRenderable();
              this.assetData = globalData.getAssetData(data.refId);
              this.footageData = globalData.imageLoader.getAsset(this.assetData);
              this.initBaseData(data, globalData, comp);
            }
            FootageElement.prototype.prepareFrame = function () {};
            extendPrototype([RenderableElement, BaseElement, FrameElement], FootageElement);
            FootageElement.prototype.getBaseElement = function () {
              return null;
            };
            FootageElement.prototype.renderFrame = function () {};
            FootageElement.prototype.destroy = function () {};
            FootageElement.prototype.initExpressions = function () {
              var expressionsInterfaces = getExpressionInterfaces();
              if (!expressionsInterfaces) {
                return;
              }
              var FootageInterface = expressionsInterfaces('footage');
              this.layerInterface = FootageInterface(this);
            };
            FootageElement.prototype.getFootageData = function () {
              return this.footageData;
            };
            function AudioElement(data, globalData, comp) {
              this.initFrame();
              this.initRenderable();
              this.assetData = globalData.getAssetData(data.refId);
              this.initBaseData(data, globalData, comp);
              this._isPlaying = false;
              this._canPlay = false;
              var assetPath = this.globalData.getAssetsPath(this.assetData);
              this.audio = this.globalData.audioController.createAudio(assetPath);
              this._currentTime = 0;
              this.globalData.audioController.addAudio(this);
              this._volumeMultiplier = 1;
              this._volume = 1;
              this._previousVolume = null;
              this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
                _placeholder: true
              };
              this.lv = PropertyFactory.getProp(this, data.au && data.au.lv ? data.au.lv : {
                k: [100]
              }, 1, 0.01, this);
            }
            AudioElement.prototype.prepareFrame = function (num) {
              this.prepareRenderableFrame(num, true);
              this.prepareProperties(num, true);
              if (!this.tm._placeholder) {
                var timeRemapped = this.tm.v;
                this._currentTime = timeRemapped;
              } else {
                this._currentTime = num / this.data.sr;
              }
              this._volume = this.lv.v[0];
              var totalVolume = this._volume * this._volumeMultiplier;
              if (this._previousVolume !== totalVolume) {
                this._previousVolume = totalVolume;
                this.audio.volume(totalVolume);
              }
            };
            extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);
            AudioElement.prototype.renderFrame = function () {
              if (this.isInRange && this._canPlay) {
                if (!this._isPlaying) {
                  this.audio.play();
                  this.audio.seek(this._currentTime / this.globalData.frameRate);
                  this._isPlaying = true;
                } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {
                  this.audio.seek(this._currentTime / this.globalData.frameRate);
                }
              }
            };
            AudioElement.prototype.show = function () {// this.audio.play()
            };
            AudioElement.prototype.hide = function () {
              this.audio.pause();
              this._isPlaying = false;
            };
            AudioElement.prototype.pause = function () {
              this.audio.pause();
              this._isPlaying = false;
              this._canPlay = false;
            };
            AudioElement.prototype.resume = function () {
              this._canPlay = true;
            };
            AudioElement.prototype.setRate = function (rateValue) {
              this.audio.rate(rateValue);
            };
            AudioElement.prototype.volume = function (volumeValue) {
              this._volumeMultiplier = volumeValue;
              this._previousVolume = volumeValue * this._volume;
              this.audio.volume(this._previousVolume);
            };
            AudioElement.prototype.getBaseElement = function () {
              return null;
            };
            AudioElement.prototype.destroy = function () {};
            AudioElement.prototype.sourceRectAtTime = function () {};
            AudioElement.prototype.initExpressions = function () {};
            function BaseRenderer() {}
            BaseRenderer.prototype.checkLayers = function (num) {
              var i;
              var len = this.layers.length;
              var data;
              this.completeLayers = true;
              for (i = len - 1; i >= 0; i -= 1) {
                if (!this.elements[i]) {
                  data = this.layers[i];
                  if (data.ip - data.st <= num - this.layers[i].st && data.op - data.st > num - this.layers[i].st) {
                    this.buildItem(i);
                  }
                }
                this.completeLayers = this.elements[i] ? this.completeLayers : false;
              }
              this.checkPendingElements();
            };
            BaseRenderer.prototype.createItem = function (layer) {
              switch (layer.ty) {
                case 2:
                  return this.createImage(layer);
                case 0:
                  return this.createComp(layer);
                case 1:
                  return this.createSolid(layer);
                case 3:
                  return this.createNull(layer);
                case 4:
                  return this.createShape(layer);
                case 5:
                  return this.createText(layer);
                case 6:
                  return this.createAudio(layer);
                case 13:
                  return this.createCamera(layer);
                case 15:
                  return this.createFootage(layer);
                default:
                  return this.createNull(layer);
              }
            };
            BaseRenderer.prototype.createCamera = function () {
              throw new Error('You\'re using a 3d camera. Try the html renderer.');
            };
            BaseRenderer.prototype.createAudio = function (data) {
              return new AudioElement(data, this.globalData, this);
            };
            BaseRenderer.prototype.createFootage = function (data) {
              return new FootageElement(data, this.globalData, this);
            };
            BaseRenderer.prototype.buildAllItems = function () {
              var i;
              var len = this.layers.length;
              for (i = 0; i < len; i += 1) {
                this.buildItem(i);
              }
              this.checkPendingElements();
            };
            BaseRenderer.prototype.includeLayers = function (newLayers) {
              this.completeLayers = false;
              var i;
              var len = newLayers.length;
              var j;
              var jLen = this.layers.length;
              for (i = 0; i < len; i += 1) {
                j = 0;
                while (j < jLen) {
                  if (this.layers[j].id === newLayers[i].id) {
                    this.layers[j] = newLayers[i];
                    break;
                  }
                  j += 1;
                }
              }
            };
            BaseRenderer.prototype.setProjectInterface = function (pInterface) {
              this.globalData.projectInterface = pInterface;
            };
            BaseRenderer.prototype.initItems = function () {
              if (!this.globalData.progressiveLoad) {
                this.buildAllItems();
              }
            };
            BaseRenderer.prototype.buildElementParenting = function (element, parentName, hierarchy) {
              var elements = this.elements;
              var layers = this.layers;
              var i = 0;
              var len = layers.length;
              while (i < len) {
                if (layers[i].ind == parentName) {
                  // eslint-disable-line eqeqeq
                  if (!elements[i] || elements[i] === true) {
                    this.buildItem(i);
                    this.addPendingElement(element);
                  } else {
                    hierarchy.push(elements[i]);
                    elements[i].setAsParent();
                    if (layers[i].parent !== undefined) {
                      this.buildElementParenting(element, layers[i].parent, hierarchy);
                    } else {
                      element.setHierarchy(hierarchy);
                    }
                  }
                }
                i += 1;
              }
            };
            BaseRenderer.prototype.addPendingElement = function (element) {
              this.pendingElements.push(element);
            };
            BaseRenderer.prototype.searchExtraCompositions = function (assets) {
              var i;
              var len = assets.length;
              for (i = 0; i < len; i += 1) {
                if (assets[i].xt) {
                  var comp = this.createComp(assets[i]);
                  comp.initExpressions();
                  this.globalData.projectInterface.registerComposition(comp);
                }
              }
            };
            BaseRenderer.prototype.getElementById = function (ind) {
              var i;
              var len = this.elements.length;
              for (i = 0; i < len; i += 1) {
                if (this.elements[i].data.ind === ind) {
                  return this.elements[i];
                }
              }
              return null;
            };
            BaseRenderer.prototype.getElementByPath = function (path) {
              var pathValue = path.shift();
              var element;
              if (typeof pathValue === 'number') {
                element = this.elements[pathValue];
              } else {
                var i;
                var len = this.elements.length;
                for (i = 0; i < len; i += 1) {
                  if (this.elements[i].data.nm === pathValue) {
                    element = this.elements[i];
                    break;
                  }
                }
              }
              if (path.length === 0) {
                return element;
              }
              return element.getElementByPath(path);
            };
            BaseRenderer.prototype.setupGlobalData = function (animData, fontsContainer) {
              this.globalData.fontManager = new FontManager();
              this.globalData.slotManager = slotFactory(animData);
              this.globalData.fontManager.addChars(animData.chars);
              this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
              this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
              this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
              this.globalData.imageLoader = this.animationItem.imagePreloader;
              this.globalData.audioController = this.animationItem.audioController;
              this.globalData.frameId = 0;
              this.globalData.frameRate = animData.fr;
              this.globalData.nm = animData.nm;
              this.globalData.compSize = {
                w: animData.w,
                h: animData.h
              };
            };
            var effectTypes = {
              TRANSFORM_EFFECT: 'transformEFfect'
            };
            function TransformElement() {}
            TransformElement.prototype = {
              initTransform: function initTransform() {
                var mat = new Matrix();
                this.finalTransform = {
                  mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
                    o: 0
                  },
                  _matMdf: false,
                  _localMatMdf: false,
                  _opMdf: false,
                  mat: mat,
                  localMat: mat,
                  localOpacity: 1
                };
                if (this.data.ao) {
                  this.finalTransform.mProp.autoOriented = true;
                } // TODO: check TYPE 11: Guided elements

                if (this.data.ty !== 11) ;
              },
              renderTransform: function renderTransform() {
                this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
                this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;
                if (this.hierarchy) {
                  var mat;
                  var finalMat = this.finalTransform.mat;
                  var i = 0;
                  var len = this.hierarchy.length; // Checking if any of the transformation matrices in the hierarchy chain has changed.

                  if (!this.finalTransform._matMdf) {
                    while (i < len) {
                      if (this.hierarchy[i].finalTransform.mProp._mdf) {
                        this.finalTransform._matMdf = true;
                        break;
                      }
                      i += 1;
                    }
                  }
                  if (this.finalTransform._matMdf) {
                    mat = this.finalTransform.mProp.v.props;
                    finalMat.cloneFromProps(mat);
                    for (i = 0; i < len; i += 1) {
                      finalMat.multiply(this.hierarchy[i].finalTransform.mProp.v);
                    }
                  }
                }
                if (this.finalTransform._matMdf) {
                  this.finalTransform._localMatMdf = this.finalTransform._matMdf;
                }
                if (this.finalTransform._opMdf) {
                  this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
                }
              },
              renderLocalTransform: function renderLocalTransform() {
                if (this.localTransforms) {
                  var i = 0;
                  var len = this.localTransforms.length;
                  this.finalTransform._localMatMdf = this.finalTransform._matMdf;
                  if (!this.finalTransform._localMatMdf || !this.finalTransform._opMdf) {
                    while (i < len) {
                      if (this.localTransforms[i]._mdf) {
                        this.finalTransform._localMatMdf = true;
                      }
                      if (this.localTransforms[i]._opMdf && !this.finalTransform._opMdf) {
                        this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
                        this.finalTransform._opMdf = true;
                      }
                      i += 1;
                    }
                  }
                  if (this.finalTransform._localMatMdf) {
                    var localMat = this.finalTransform.localMat;
                    this.localTransforms[0].matrix.clone(localMat);
                    for (i = 1; i < len; i += 1) {
                      var lmat = this.localTransforms[i].matrix;
                      localMat.multiply(lmat);
                    }
                    localMat.multiply(this.finalTransform.mat);
                  }
                  if (this.finalTransform._opMdf) {
                    var localOp = this.finalTransform.localOpacity;
                    for (i = 0; i < len; i += 1) {
                      localOp *= this.localTransforms[i].opacity * 0.01;
                    }
                    this.finalTransform.localOpacity = localOp;
                  }
                }
              },
              searchEffectTransforms: function searchEffectTransforms() {
                if (this.renderableEffectsManager) {
                  var transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
                  if (transformEffects.length) {
                    this.localTransforms = [];
                    this.finalTransform.localMat = new Matrix();
                    var i = 0;
                    var len = transformEffects.length;
                    for (i = 0; i < len; i += 1) {
                      this.localTransforms.push(transformEffects[i]);
                    }
                  }
                }
              },
              globalToLocal: function globalToLocal(pt) {
                var transforms = [];
                transforms.push(this.finalTransform);
                var flag = true;
                var comp = this.comp;
                while (flag) {
                  if (comp.finalTransform) {
                    if (comp.data.hasMask) {
                      transforms.splice(0, 0, comp.finalTransform);
                    }
                    comp = comp.comp;
                  } else {
                    flag = false;
                  }
                }
                var i;
                var len = transforms.length;
                var ptNew;
                for (i = 0; i < len; i += 1) {
                  ptNew = transforms[i].mat.applyToPointArray(0, 0, 0); // ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);

                  pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
                }
                return pt;
              },
              mHelper: new Matrix()
            };
            function MaskElement(data, element, globalData) {
              this.data = data;
              this.element = element;
              this.globalData = globalData;
              this.storedData = [];
              this.masksProperties = this.data.masksProperties || [];
              this.maskElement = null;
              var defs = this.globalData.defs;
              var i;
              var len = this.masksProperties ? this.masksProperties.length : 0;
              this.viewData = createSizedArray(len);
              this.solidPath = '';
              var path;
              var properties = this.masksProperties;
              var count = 0;
              var currentMasks = [];
              var j;
              var jLen;
              var layerId = createElementID();
              var rect;
              var expansor;
              var feMorph;
              var x;
              var maskType = 'clipPath';
              var maskRef = 'clip-path';
              for (i = 0; i < len; i += 1) {
                if (properties[i].mode !== 'a' && properties[i].mode !== 'n' || properties[i].inv || properties[i].o.k !== 100 || properties[i].o.x) {
                  maskType = 'mask';
                  maskRef = 'mask';
                }
                if ((properties[i].mode === 's' || properties[i].mode === 'i') && count === 0) {
                  rect = createNS('rect');
                  rect.setAttribute('fill', '#ffffff');
                  rect.setAttribute('width', this.element.comp.data.w || 0);
                  rect.setAttribute('height', this.element.comp.data.h || 0);
                  currentMasks.push(rect);
                } else {
                  rect = null;
                }
                path = createNS('path');
                if (properties[i].mode === 'n') {
                  // TODO move this to a factory or to a constructor
                  this.viewData[i] = {
                    op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
                    prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
                    elem: path,
                    lastPath: ''
                  };
                  defs.appendChild(path);
                } else {
                  count += 1;
                  path.setAttribute('fill', properties[i].mode === 's' ? '#000000' : '#ffffff');
                  path.setAttribute('clip-rule', 'nonzero');
                  var filterID;
                  if (properties[i].x.k !== 0) {
                    maskType = 'mask';
                    maskRef = 'mask';
                    x = PropertyFactory.getProp(this.element, properties[i].x, 0, null, this.element);
                    filterID = createElementID();
                    expansor = createNS('filter');
                    expansor.setAttribute('id', filterID);
                    feMorph = createNS('feMorphology');
                    feMorph.setAttribute('operator', 'erode');
                    feMorph.setAttribute('in', 'SourceGraphic');
                    feMorph.setAttribute('radius', '0');
                    expansor.appendChild(feMorph);
                    defs.appendChild(expansor);
                    path.setAttribute('stroke', properties[i].mode === 's' ? '#000000' : '#ffffff');
                  } else {
                    feMorph = null;
                    x = null;
                  } // TODO move this to a factory or to a constructor

                  this.storedData[i] = {
                    elem: path,
                    x: x,
                    expan: feMorph,
                    lastPath: '',
                    lastOperator: '',
                    filterId: filterID,
                    lastRadius: 0
                  };
                  if (properties[i].mode === 'i') {
                    jLen = currentMasks.length;
                    var g = createNS('g');
                    for (j = 0; j < jLen; j += 1) {
                      g.appendChild(currentMasks[j]);
                    }
                    var mask = createNS('mask');
                    mask.setAttribute('mask-type', 'alpha');
                    mask.setAttribute('id', layerId + '_' + count);
                    mask.appendChild(path);
                    defs.appendChild(mask);
                    g.setAttribute('mask', 'url(' + getLocationHref() + '#' + layerId + '_' + count + ')');
                    currentMasks.length = 0;
                    currentMasks.push(g);
                  } else {
                    currentMasks.push(path);
                  }
                  if (properties[i].inv && !this.solidPath) {
                    this.solidPath = this.createLayerSolidPath();
                  } // TODO move this to a factory or to a constructor

                  this.viewData[i] = {
                    elem: path,
                    lastPath: '',
                    op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
                    prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
                    invRect: rect
                  };
                  if (!this.viewData[i].prop.k) {
                    this.drawPath(properties[i], this.viewData[i].prop.v, this.viewData[i]);
                  }
                }
              }
              this.maskElement = createNS(maskType);
              len = currentMasks.length;
              for (i = 0; i < len; i += 1) {
                this.maskElement.appendChild(currentMasks[i]);
              }
              if (count > 0) {
                this.maskElement.setAttribute('id', layerId);
                this.element.maskedElement.setAttribute(maskRef, 'url(' + getLocationHref() + '#' + layerId + ')');
                defs.appendChild(this.maskElement);
              }
              if (this.viewData.length) {
                this.element.addRenderableComponent(this);
              }
            }
            MaskElement.prototype.getMaskProperty = function (pos) {
              return this.viewData[pos].prop;
            };
            MaskElement.prototype.renderFrame = function (isFirstFrame) {
              var finalMat = this.element.finalTransform.mat;
              var i;
              var len = this.masksProperties.length;
              for (i = 0; i < len; i += 1) {
                if (this.viewData[i].prop._mdf || isFirstFrame) {
                  this.drawPath(this.masksProperties[i], this.viewData[i].prop.v, this.viewData[i]);
                }
                if (this.viewData[i].op._mdf || isFirstFrame) {
                  this.viewData[i].elem.setAttribute('fill-opacity', this.viewData[i].op.v);
                }
                if (this.masksProperties[i].mode !== 'n') {
                  if (this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
                    this.viewData[i].invRect.setAttribute('transform', finalMat.getInverseMatrix().to2dCSS());
                  }
                  if (this.storedData[i].x && (this.storedData[i].x._mdf || isFirstFrame)) {
                    var feMorph = this.storedData[i].expan;
                    if (this.storedData[i].x.v < 0) {
                      if (this.storedData[i].lastOperator !== 'erode') {
                        this.storedData[i].lastOperator = 'erode';
                        this.storedData[i].elem.setAttribute('filter', 'url(' + getLocationHref() + '#' + this.storedData[i].filterId + ')');
                      }
                      feMorph.setAttribute('radius', -this.storedData[i].x.v);
                    } else {
                      if (this.storedData[i].lastOperator !== 'dilate') {
                        this.storedData[i].lastOperator = 'dilate';
                        this.storedData[i].elem.setAttribute('filter', null);
                      }
                      this.storedData[i].elem.setAttribute('stroke-width', this.storedData[i].x.v * 2);
                    }
                  }
                }
              }
            };
            MaskElement.prototype.getMaskelement = function () {
              return this.maskElement;
            };
            MaskElement.prototype.createLayerSolidPath = function () {
              var path = 'M0,0 ';
              path += ' h' + this.globalData.compSize.w;
              path += ' v' + this.globalData.compSize.h;
              path += ' h-' + this.globalData.compSize.w;
              path += ' v-' + this.globalData.compSize.h + ' ';
              return path;
            };
            MaskElement.prototype.drawPath = function (pathData, pathNodes, viewData) {
              var pathString = ' M' + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
              var i;
              var len;
              len = pathNodes._length;
              for (i = 1; i < len; i += 1) {
                // pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
                pathString += ' C' + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + ' ' + pathNodes.i[i][0] + ',' + pathNodes.i[i][1] + ' ' + pathNodes.v[i][0] + ',' + pathNodes.v[i][1];
              } // pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];

              if (pathNodes.c && len > 1) {
                pathString += ' C' + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + ' ' + pathNodes.i[0][0] + ',' + pathNodes.i[0][1] + ' ' + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
              } // pathNodes.__renderedString = pathString;

              if (viewData.lastPath !== pathString) {
                var pathShapeValue = '';
                if (viewData.elem) {
                  if (pathNodes.c) {
                    pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
                  }
                  viewData.elem.setAttribute('d', pathShapeValue);
                }
                viewData.lastPath = pathString;
              }
            };
            MaskElement.prototype.destroy = function () {
              this.element = null;
              this.globalData = null;
              this.maskElement = null;
              this.data = null;
              this.masksProperties = null;
            };
            var filtersFactory = function () {
              var ob = {};
              ob.createFilter = createFilter;
              ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;
              function createFilter(filId, skipCoordinates) {
                var fil = createNS('filter');
                fil.setAttribute('id', filId);
                if (skipCoordinates !== true) {
                  fil.setAttribute('filterUnits', 'objectBoundingBox');
                  fil.setAttribute('x', '0%');
                  fil.setAttribute('y', '0%');
                  fil.setAttribute('width', '100%');
                  fil.setAttribute('height', '100%');
                }
                return fil;
              }
              function createAlphaToLuminanceFilter() {
                var feColorMatrix = createNS('feColorMatrix');
                feColorMatrix.setAttribute('type', 'matrix');
                feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
                feColorMatrix.setAttribute('values', '0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');
                return feColorMatrix;
              }
              return ob;
            }();
            var featureSupport = function () {
              var ob = {
                maskType: true,
                svgLumaHidden: true,
                offscreenCanvas: typeof OffscreenCanvas !== 'undefined'
              };
              if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
                ob.maskType = false;
              }
              if (/firefox/i.test(navigator.userAgent)) {
                ob.svgLumaHidden = false;
              }
              return ob;
            }();
            var registeredEffects$1 = {};
            var idPrefix = 'filter_result_';
            function SVGEffects(elem) {
              var i;
              var source = 'SourceGraphic';
              var len = elem.data.ef ? elem.data.ef.length : 0;
              var filId = createElementID();
              var fil = filtersFactory.createFilter(filId, true);
              var count = 0;
              this.filters = [];
              var filterManager;
              for (i = 0; i < len; i += 1) {
                filterManager = null;
                var type = elem.data.ef[i].ty;
                if (registeredEffects$1[type]) {
                  var Effect = registeredEffects$1[type].effect;
                  filterManager = new Effect(fil, elem.effectsManager.effectElements[i], elem, idPrefix + count, source);
                  source = idPrefix + count;
                  if (registeredEffects$1[type].countsAsEffect) {
                    count += 1;
                  }
                }
                if (filterManager) {
                  this.filters.push(filterManager);
                }
              }
              if (count) {
                elem.globalData.defs.appendChild(fil);
                elem.layerElement.setAttribute('filter', 'url(' + getLocationHref() + '#' + filId + ')');
              }
              if (this.filters.length) {
                elem.addRenderableComponent(this);
              }
            }
            SVGEffects.prototype.renderFrame = function (_isFirstFrame) {
              var i;
              var len = this.filters.length;
              for (i = 0; i < len; i += 1) {
                this.filters[i].renderFrame(_isFirstFrame);
              }
            };
            SVGEffects.prototype.getEffects = function (type) {
              var i;
              var len = this.filters.length;
              var effects = [];
              for (i = 0; i < len; i += 1) {
                if (this.filters[i].type === type) {
                  effects.push(this.filters[i]);
                }
              }
              return effects;
            };
            function registerEffect$1(id, effect, countsAsEffect) {
              registeredEffects$1[id] = {
                effect: effect,
                countsAsEffect: countsAsEffect
              };
            }
            function SVGBaseElement() {}
            SVGBaseElement.prototype = {
              initRendererElement: function initRendererElement() {
                this.layerElement = createNS('g');
              },
              createContainerElements: function createContainerElements() {
                this.matteElement = createNS('g');
                this.transformedElement = this.layerElement;
                this.maskedElement = this.layerElement;
                this._sizeChanged = false;
                var layerElementParent = null; // If this layer acts as a mask for the following layer

                if (this.data.td) {
                  this.matteMasks = {};
                  var gg = createNS('g');
                  gg.setAttribute('id', this.layerId);
                  gg.appendChild(this.layerElement);
                  layerElementParent = gg;
                  this.globalData.defs.appendChild(gg);
                } else if (this.data.tt) {
                  this.matteElement.appendChild(this.layerElement);
                  layerElementParent = this.matteElement;
                  this.baseElement = this.matteElement;
                } else {
                  this.baseElement = this.layerElement;
                }
                if (this.data.ln) {
                  this.layerElement.setAttribute('id', this.data.ln);
                }
                if (this.data.cl) {
                  this.layerElement.setAttribute('class', this.data.cl);
                } // Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped

                if (this.data.ty === 0 && !this.data.hd) {
                  var cp = createNS('clipPath');
                  var pt = createNS('path');
                  pt.setAttribute('d', 'M0,0 L' + this.data.w + ',0 L' + this.data.w + ',' + this.data.h + ' L0,' + this.data.h + 'z');
                  var clipId = createElementID();
                  cp.setAttribute('id', clipId);
                  cp.appendChild(pt);
                  this.globalData.defs.appendChild(cp);
                  if (this.checkMasks()) {
                    var cpGroup = createNS('g');
                    cpGroup.setAttribute('clip-path', 'url(' + getLocationHref() + '#' + clipId + ')');
                    cpGroup.appendChild(this.layerElement);
                    this.transformedElement = cpGroup;
                    if (layerElementParent) {
                      layerElementParent.appendChild(this.transformedElement);
                    } else {
                      this.baseElement = this.transformedElement;
                    }
                  } else {
                    this.layerElement.setAttribute('clip-path', 'url(' + getLocationHref() + '#' + clipId + ')');
                  }
                }
                if (this.data.bm !== 0) {
                  this.setBlendMode();
                }
              },
              renderElement: function renderElement() {
                if (this.finalTransform._localMatMdf) {
                  this.transformedElement.setAttribute('transform', this.finalTransform.localMat.to2dCSS());
                }
                if (this.finalTransform._opMdf) {
                  this.transformedElement.setAttribute('opacity', this.finalTransform.localOpacity);
                }
              },
              destroyBaseElement: function destroyBaseElement() {
                this.layerElement = null;
                this.matteElement = null;
                this.maskManager.destroy();
              },
              getBaseElement: function getBaseElement() {
                if (this.data.hd) {
                  return null;
                }
                return this.baseElement;
              },
              createRenderableComponents: function createRenderableComponents() {
                this.maskManager = new MaskElement(this.data, this, this.globalData);
                this.renderableEffectsManager = new SVGEffects(this);
                this.searchEffectTransforms();
              },
              getMatte: function getMatte(matteType) {
                // This should not be a common case. But for backward compatibility, we'll create the matte object.
                // It solves animations that have two consecutive layers marked as matte masks.
                // Which is an undefined behavior in AE.
                if (!this.matteMasks) {
                  this.matteMasks = {};
                }
                if (!this.matteMasks[matteType]) {
                  var id = this.layerId + '_' + matteType;
                  var filId;
                  var fil;
                  var useElement;
                  var gg;
                  if (matteType === 1 || matteType === 3) {
                    var masker = createNS('mask');
                    masker.setAttribute('id', id);
                    masker.setAttribute('mask-type', matteType === 3 ? 'luminance' : 'alpha');
                    useElement = createNS('use');
                    useElement.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#' + this.layerId);
                    masker.appendChild(useElement);
                    this.globalData.defs.appendChild(masker);
                    if (!featureSupport.maskType && matteType === 1) {
                      masker.setAttribute('mask-type', 'luminance');
                      filId = createElementID();
                      fil = filtersFactory.createFilter(filId);
                      this.globalData.defs.appendChild(fil);
                      fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                      gg = createNS('g');
                      gg.appendChild(useElement);
                      masker.appendChild(gg);
                      gg.setAttribute('filter', 'url(' + getLocationHref() + '#' + filId + ')');
                    }
                  } else if (matteType === 2) {
                    var maskGroup = createNS('mask');
                    maskGroup.setAttribute('id', id);
                    maskGroup.setAttribute('mask-type', 'alpha');
                    var maskGrouper = createNS('g');
                    maskGroup.appendChild(maskGrouper);
                    filId = createElementID();
                    fil = filtersFactory.createFilter(filId); /// /

                    var feCTr = createNS('feComponentTransfer');
                    feCTr.setAttribute('in', 'SourceGraphic');
                    fil.appendChild(feCTr);
                    var feFunc = createNS('feFuncA');
                    feFunc.setAttribute('type', 'table');
                    feFunc.setAttribute('tableValues', '1.0 0.0');
                    feCTr.appendChild(feFunc); /// /

                    this.globalData.defs.appendChild(fil);
                    var alphaRect = createNS('rect');
                    alphaRect.setAttribute('width', this.comp.data.w);
                    alphaRect.setAttribute('height', this.comp.data.h);
                    alphaRect.setAttribute('x', '0');
                    alphaRect.setAttribute('y', '0');
                    alphaRect.setAttribute('fill', '#ffffff');
                    alphaRect.setAttribute('opacity', '0');
                    maskGrouper.setAttribute('filter', 'url(' + getLocationHref() + '#' + filId + ')');
                    maskGrouper.appendChild(alphaRect);
                    useElement = createNS('use');
                    useElement.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#' + this.layerId);
                    maskGrouper.appendChild(useElement);
                    if (!featureSupport.maskType) {
                      maskGroup.setAttribute('mask-type', 'luminance');
                      fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                      gg = createNS('g');
                      maskGrouper.appendChild(alphaRect);
                      gg.appendChild(this.layerElement);
                      maskGrouper.appendChild(gg);
                    }
                    this.globalData.defs.appendChild(maskGroup);
                  }
                  this.matteMasks[matteType] = id;
                }
                return this.matteMasks[matteType];
              },
              setMatte: function setMatte(id) {
                if (!this.matteElement) {
                  return;
                }
                this.matteElement.setAttribute('mask', 'url(' + getLocationHref() + '#' + id + ')');
              }
            };

            /**
             * @file
             * Handles AE's layer parenting property.
             *
             */
            function HierarchyElement() {}
            HierarchyElement.prototype = {
              /**
                 * @function
                 * Initializes hierarchy properties
                 *
                 */
              initHierarchy: function initHierarchy() {
                // element's parent list
                this.hierarchy = []; // if element is parent of another layer _isParent will be true

                this._isParent = false;
                this.checkParenting();
              },
              /**
                 * @function
                 * Sets layer's hierarchy.
                 * @param {array} hierarch
                 * layer's parent list
                 *
                 */
              setHierarchy: function setHierarchy(hierarchy) {
                this.hierarchy = hierarchy;
              },
              /**
                 * @function
                 * Sets layer as parent.
                 *
                 */
              setAsParent: function setAsParent() {
                this._isParent = true;
              },
              /**
                 * @function
                 * Searches layer's parenting chain
                 *
                 */
              checkParenting: function checkParenting() {
                if (this.data.parent !== undefined) {
                  this.comp.buildElementParenting(this, this.data.parent, []);
                }
              }
            };
            function RenderableDOMElement() {}
            (function () {
              var _prototype = {
                initElement: function initElement(data, globalData, comp) {
                  this.initFrame();
                  this.initBaseData(data, globalData, comp);
                  this.initTransform(data, globalData, comp);
                  this.initHierarchy();
                  this.initRenderable();
                  this.initRendererElement();
                  this.createContainerElements();
                  this.createRenderableComponents();
                  this.createContent();
                  this.hide();
                },
                hide: function hide() {
                  // console.log('HIDE', this);
                  if (!this.hidden && (!this.isInRange || this.isTransparent)) {
                    var elem = this.baseElement || this.layerElement;
                    elem.style.display = 'none';
                    this.hidden = true;
                  }
                },
                show: function show() {
                  // console.log('SHOW', this);
                  if (this.isInRange && !this.isTransparent) {
                    if (!this.data.hd) {
                      var elem = this.baseElement || this.layerElement;
                      elem.style.display = 'block';
                    }
                    this.hidden = false;
                    this._isFirstFrame = true;
                  }
                },
                renderFrame: function renderFrame() {
                  // If it is exported as hidden (data.hd === true) no need to render
                  // If it is not visible no need to render
                  if (this.data.hd || this.hidden) {
                    return;
                  }
                  this.renderTransform();
                  this.renderRenderable();
                  this.renderLocalTransform();
                  this.renderElement();
                  this.renderInnerContent();
                  if (this._isFirstFrame) {
                    this._isFirstFrame = false;
                  }
                },
                renderInnerContent: function renderInnerContent() {},
                prepareFrame: function prepareFrame(num) {
                  this._mdf = false;
                  this.prepareRenderableFrame(num);
                  this.prepareProperties(num, this.isInRange);
                  this.checkTransparency();
                },
                destroy: function destroy() {
                  this.innerElem = null;
                  this.destroyBaseElement();
                }
              };
              extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
            })();
            function IImageElement(data, globalData, comp) {
              this.assetData = globalData.getAssetData(data.refId);
              if (this.assetData && this.assetData.sid) {
                this.assetData = globalData.slotManager.getProp(this.assetData);
              }
              this.initElement(data, globalData, comp);
              this.sourceRect = {
                top: 0,
                left: 0,
                width: this.assetData.w,
                height: this.assetData.h
              };
            }
            extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);
            IImageElement.prototype.createContent = function () {
              var assetPath = this.globalData.getAssetsPath(this.assetData);
              this.innerElem = createNS('image');
              this.innerElem.setAttribute('width', this.assetData.w + 'px');
              this.innerElem.setAttribute('height', this.assetData.h + 'px');
              this.innerElem.setAttribute('preserveAspectRatio', this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
              this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);
              this.layerElement.appendChild(this.innerElem);
            };
            IImageElement.prototype.sourceRectAtTime = function () {
              return this.sourceRect;
            };
            function ProcessedElement(element, position) {
              this.elem = element;
              this.pos = position;
            }
            function IShapeElement() {}
            IShapeElement.prototype = {
              addShapeToModifiers: function addShapeToModifiers(data) {
                var i;
                var len = this.shapeModifiers.length;
                for (i = 0; i < len; i += 1) {
                  this.shapeModifiers[i].addShape(data);
                }
              },
              isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data) {
                var i = 0;
                var len = this.shapeModifiers.length;
                while (i < len) {
                  if (this.shapeModifiers[i].isAnimatedWithShape(data)) {
                    return true;
                  }
                }
                return false;
              },
              renderModifiers: function renderModifiers() {
                if (!this.shapeModifiers.length) {
                  return;
                }
                var i;
                var len = this.shapes.length;
                for (i = 0; i < len; i += 1) {
                  this.shapes[i].sh.reset();
                }
                len = this.shapeModifiers.length;
                var shouldBreakProcess;
                for (i = len - 1; i >= 0; i -= 1) {
                  shouldBreakProcess = this.shapeModifiers[i].processShapes(this._isFirstFrame); // workaround to fix cases where a repeater resets the shape so the following processes get called twice
                  // TODO: find a better solution for this

                  if (shouldBreakProcess) {
                    break;
                  }
                }
              },
              searchProcessedElement: function searchProcessedElement(elem) {
                var elements = this.processedElements;
                var i = 0;
                var len = elements.length;
                while (i < len) {
                  if (elements[i].elem === elem) {
                    return elements[i].pos;
                  }
                  i += 1;
                }
                return 0;
              },
              addProcessedElement: function addProcessedElement(elem, pos) {
                var elements = this.processedElements;
                var i = elements.length;
                while (i) {
                  i -= 1;
                  if (elements[i].elem === elem) {
                    elements[i].pos = pos;
                    return;
                  }
                }
                elements.push(new ProcessedElement(elem, pos));
              },
              prepareFrame: function prepareFrame(num) {
                this.prepareRenderableFrame(num);
                this.prepareProperties(num, this.isInRange);
              }
            };
            var lineCapEnum = {
              1: 'butt',
              2: 'round',
              3: 'square'
            };
            var lineJoinEnum = {
              1: 'miter',
              2: 'round',
              3: 'bevel'
            };
            function SVGShapeData(transformers, level, shape) {
              this.caches = [];
              this.styles = [];
              this.transformers = transformers;
              this.lStr = '';
              this.sh = shape;
              this.lvl = level; // TODO find if there are some cases where _isAnimated can be false.
              // For now, since shapes add up with other shapes. They have to be calculated every time.
              // One way of finding out is checking if all styles associated to this shape depend only of this shape

              this._isAnimated = !!shape.k; // TODO: commenting this for now since all shapes are animated

              var i = 0;
              var len = transformers.length;
              while (i < len) {
                if (transformers[i].mProps.dynamicProperties.length) {
                  this._isAnimated = true;
                  break;
                }
                i += 1;
              }
            }
            SVGShapeData.prototype.setAsAnimated = function () {
              this._isAnimated = true;
            };
            function SVGStyleData(data, level) {
              this.data = data;
              this.type = data.ty;
              this.d = '';
              this.lvl = level;
              this._mdf = false;
              this.closed = data.hd === true;
              this.pElem = createNS('path');
              this.msElem = null;
            }
            SVGStyleData.prototype.reset = function () {
              this.d = '';
              this._mdf = false;
            };
            function DashProperty(elem, data, renderer, container) {
              this.elem = elem;
              this.frameId = -1;
              this.dataProps = createSizedArray(data.length);
              this.renderer = renderer;
              this.k = false;
              this.dashStr = '';
              this.dashArray = createTypedArray('float32', data.length ? data.length - 1 : 0);
              this.dashoffset = createTypedArray('float32', 1);
              this.initDynamicPropertyContainer(container);
              var i;
              var len = data.length || 0;
              var prop;
              for (i = 0; i < len; i += 1) {
                prop = PropertyFactory.getProp(elem, data[i].v, 0, 0, this);
                this.k = prop.k || this.k;
                this.dataProps[i] = {
                  n: data[i].n,
                  p: prop
                };
              }
              if (!this.k) {
                this.getValue(true);
              }
              this._isAnimated = this.k;
            }
            DashProperty.prototype.getValue = function (forceRender) {
              if (this.elem.globalData.frameId === this.frameId && !forceRender) {
                return;
              }
              this.frameId = this.elem.globalData.frameId;
              this.iterateDynamicProperties();
              this._mdf = this._mdf || forceRender;
              if (this._mdf) {
                var i = 0;
                var len = this.dataProps.length;
                if (this.renderer === 'svg') {
                  this.dashStr = '';
                }
                for (i = 0; i < len; i += 1) {
                  if (this.dataProps[i].n !== 'o') {
                    if (this.renderer === 'svg') {
                      this.dashStr += ' ' + this.dataProps[i].p.v;
                    } else {
                      this.dashArray[i] = this.dataProps[i].p.v;
                    }
                  } else {
                    this.dashoffset[0] = this.dataProps[i].p.v;
                  }
                }
              }
            };
            extendPrototype([DynamicPropertyContainer], DashProperty);
            function SVGStrokeStyleData(elem, data, styleOb) {
              this.initDynamicPropertyContainer(elem);
              this.getValue = this.iterateDynamicProperties;
              this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
              this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
              this.d = new DashProperty(elem, data.d || {}, 'svg', this);
              this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
              this.style = styleOb;
              this._isAnimated = !!this._isAnimated;
            }
            extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
            function SVGFillStyleData(elem, data, styleOb) {
              this.initDynamicPropertyContainer(elem);
              this.getValue = this.iterateDynamicProperties;
              this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
              this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
              this.style = styleOb;
            }
            extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
            function SVGNoStyleData(elem, data, styleOb) {
              this.initDynamicPropertyContainer(elem);
              this.getValue = this.iterateDynamicProperties;
              this.style = styleOb;
            }
            extendPrototype([DynamicPropertyContainer], SVGNoStyleData);
            function GradientProperty(elem, data, container) {
              this.data = data;
              this.c = createTypedArray('uint8c', data.p * 4);
              var cLength = data.k.k[0].s ? data.k.k[0].s.length - data.p * 4 : data.k.k.length - data.p * 4;
              this.o = createTypedArray('float32', cLength);
              this._cmdf = false;
              this._omdf = false;
              this._collapsable = this.checkCollapsable();
              this._hasOpacity = cLength;
              this.initDynamicPropertyContainer(container);
              this.prop = PropertyFactory.getProp(elem, data.k, 1, null, this);
              this.k = this.prop.k;
              this.getValue(true);
            }
            GradientProperty.prototype.comparePoints = function (values, points) {
              var i = 0;
              var len = this.o.length / 2;
              var diff;
              while (i < len) {
                diff = Math.abs(values[i * 4] - values[points * 4 + i * 2]);
                if (diff > 0.01) {
                  return false;
                }
                i += 1;
              }
              return true;
            };
            GradientProperty.prototype.checkCollapsable = function () {
              if (this.o.length / 2 !== this.c.length / 4) {
                return false;
              }
              if (this.data.k.k[0].s) {
                var i = 0;
                var len = this.data.k.k.length;
                while (i < len) {
                  if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {
                    return false;
                  }
                  i += 1;
                }
              } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
                return false;
              }
              return true;
            };
            GradientProperty.prototype.getValue = function (forceRender) {
              this.prop.getValue();
              this._mdf = false;
              this._cmdf = false;
              this._omdf = false;
              if (this.prop._mdf || forceRender) {
                var i;
                var len = this.data.p * 4;
                var mult;
                var val;
                for (i = 0; i < len; i += 1) {
                  mult = i % 4 === 0 ? 100 : 255;
                  val = Math.round(this.prop.v[i] * mult);
                  if (this.c[i] !== val) {
                    this.c[i] = val;
                    this._cmdf = !forceRender;
                  }
                }
                if (this.o.length) {
                  len = this.prop.v.length;
                  for (i = this.data.p * 4; i < len; i += 1) {
                    mult = i % 2 === 0 ? 100 : 1;
                    val = i % 2 === 0 ? Math.round(this.prop.v[i] * 100) : this.prop.v[i];
                    if (this.o[i - this.data.p * 4] !== val) {
                      this.o[i - this.data.p * 4] = val;
                      this._omdf = !forceRender;
                    }
                  }
                }
                this._mdf = !forceRender;
              }
            };
            extendPrototype([DynamicPropertyContainer], GradientProperty);
            function SVGGradientFillStyleData(elem, data, styleOb) {
              this.initDynamicPropertyContainer(elem);
              this.getValue = this.iterateDynamicProperties;
              this.initGradientData(elem, data, styleOb);
            }
            SVGGradientFillStyleData.prototype.initGradientData = function (elem, data, styleOb) {
              this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
              this.s = PropertyFactory.getProp(elem, data.s, 1, null, this);
              this.e = PropertyFactory.getProp(elem, data.e, 1, null, this);
              this.h = PropertyFactory.getProp(elem, data.h || {
                k: 0
              }, 0, 0.01, this);
              this.a = PropertyFactory.getProp(elem, data.a || {
                k: 0
              }, 0, degToRads, this);
              this.g = new GradientProperty(elem, data.g, this);
              this.style = styleOb;
              this.stops = [];
              this.setGradientData(styleOb.pElem, data);
              this.setGradientOpacity(data, styleOb);
              this._isAnimated = !!this._isAnimated;
            };
            SVGGradientFillStyleData.prototype.setGradientData = function (pathElement, data) {
              var gradientId = createElementID();
              var gfill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
              gfill.setAttribute('id', gradientId);
              gfill.setAttribute('spreadMethod', 'pad');
              gfill.setAttribute('gradientUnits', 'userSpaceOnUse');
              var stops = [];
              var stop;
              var j;
              var jLen;
              jLen = data.g.p * 4;
              for (j = 0; j < jLen; j += 4) {
                stop = createNS('stop');
                gfill.appendChild(stop);
                stops.push(stop);
              }
              pathElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(' + getLocationHref() + '#' + gradientId + ')');
              this.gf = gfill;
              this.cst = stops;
            };
            SVGGradientFillStyleData.prototype.setGradientOpacity = function (data, styleOb) {
              if (this.g._hasOpacity && !this.g._collapsable) {
                var stop;
                var j;
                var jLen;
                var mask = createNS('mask');
                var maskElement = createNS('path');
                mask.appendChild(maskElement);
                var opacityId = createElementID();
                var maskId = createElementID();
                mask.setAttribute('id', maskId);
                var opFill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
                opFill.setAttribute('id', opacityId);
                opFill.setAttribute('spreadMethod', 'pad');
                opFill.setAttribute('gradientUnits', 'userSpaceOnUse');
                jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;
                var stops = this.stops;
                for (j = data.g.p * 4; j < jLen; j += 2) {
                  stop = createNS('stop');
                  stop.setAttribute('stop-color', 'rgb(255,255,255)');
                  opFill.appendChild(stop);
                  stops.push(stop);
                }
                maskElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(' + getLocationHref() + '#' + opacityId + ')');
                if (data.ty === 'gs') {
                  maskElement.setAttribute('stroke-linecap', lineCapEnum[data.lc || 2]);
                  maskElement.setAttribute('stroke-linejoin', lineJoinEnum[data.lj || 2]);
                  if (data.lj === 1) {
                    maskElement.setAttribute('stroke-miterlimit', data.ml);
                  }
                }
                this.of = opFill;
                this.ms = mask;
                this.ost = stops;
                this.maskId = maskId;
                styleOb.msElem = maskElement;
              }
            };
            extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
            function SVGGradientStrokeStyleData(elem, data, styleOb) {
              this.initDynamicPropertyContainer(elem);
              this.getValue = this.iterateDynamicProperties;
              this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
              this.d = new DashProperty(elem, data.d || {}, 'svg', this);
              this.initGradientData(elem, data, styleOb);
              this._isAnimated = !!this._isAnimated;
            }
            extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
            function ShapeGroupData() {
              this.it = [];
              this.prevViewData = [];
              this.gr = createNS('g');
            }
            function SVGTransformData(mProps, op, container) {
              this.transform = {
                mProps: mProps,
                op: op,
                container: container
              };
              this.elements = [];
              this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
            }
            var buildShapeString = function buildShapeString(pathNodes, length, closed, mat) {
              if (length === 0) {
                return '';
              }
              var _o = pathNodes.o;
              var _i = pathNodes.i;
              var _v = pathNodes.v;
              var i;
              var shapeString = ' M' + mat.applyToPointStringified(_v[0][0], _v[0][1]);
              for (i = 1; i < length; i += 1) {
                shapeString += ' C' + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + ' ' + mat.applyToPointStringified(_i[i][0], _i[i][1]) + ' ' + mat.applyToPointStringified(_v[i][0], _v[i][1]);
              }
              if (closed && length) {
                shapeString += ' C' + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + ' ' + mat.applyToPointStringified(_i[0][0], _i[0][1]) + ' ' + mat.applyToPointStringified(_v[0][0], _v[0][1]);
                shapeString += 'z';
              }
              return shapeString;
            };
            var SVGElementsRenderer = function () {
              var _identityMatrix = new Matrix();
              var _matrixHelper = new Matrix();
              var ob = {
                createRenderFunction: createRenderFunction
              };
              function createRenderFunction(data) {
                switch (data.ty) {
                  case 'fl':
                    return renderFill;
                  case 'gf':
                    return renderGradient;
                  case 'gs':
                    return renderGradientStroke;
                  case 'st':
                    return renderStroke;
                  case 'sh':
                  case 'el':
                  case 'rc':
                  case 'sr':
                    return renderPath;
                  case 'tr':
                    return renderContentTransform;
                  case 'no':
                    return renderNoop;
                  default:
                    return null;
                }
              }
              function renderContentTransform(styleData, itemData, isFirstFrame) {
                if (isFirstFrame || itemData.transform.op._mdf) {
                  itemData.transform.container.setAttribute('opacity', itemData.transform.op.v);
                }
                if (isFirstFrame || itemData.transform.mProps._mdf) {
                  itemData.transform.container.setAttribute('transform', itemData.transform.mProps.v.to2dCSS());
                }
              }
              function renderNoop() {}
              function renderPath(styleData, itemData, isFirstFrame) {
                var j;
                var jLen;
                var pathStringTransformed;
                var redraw;
                var pathNodes;
                var l;
                var lLen = itemData.styles.length;
                var lvl = itemData.lvl;
                var paths;
                var mat;
                var iterations;
                var k;
                for (l = 0; l < lLen; l += 1) {
                  redraw = itemData.sh._mdf || isFirstFrame;
                  if (itemData.styles[l].lvl < lvl) {
                    mat = _matrixHelper.reset();
                    iterations = lvl - itemData.styles[l].lvl;
                    k = itemData.transformers.length - 1;
                    while (!redraw && iterations > 0) {
                      redraw = itemData.transformers[k].mProps._mdf || redraw;
                      iterations -= 1;
                      k -= 1;
                    }
                    if (redraw) {
                      iterations = lvl - itemData.styles[l].lvl;
                      k = itemData.transformers.length - 1;
                      while (iterations > 0) {
                        mat.multiply(itemData.transformers[k].mProps.v);
                        iterations -= 1;
                        k -= 1;
                      }
                    }
                  } else {
                    mat = _identityMatrix;
                  }
                  paths = itemData.sh.paths;
                  jLen = paths._length;
                  if (redraw) {
                    pathStringTransformed = '';
                    for (j = 0; j < jLen; j += 1) {
                      pathNodes = paths.shapes[j];
                      if (pathNodes && pathNodes._length) {
                        pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
                      }
                    }
                    itemData.caches[l] = pathStringTransformed;
                  } else {
                    pathStringTransformed = itemData.caches[l];
                  }
                  itemData.styles[l].d += styleData.hd === true ? '' : pathStringTransformed;
                  itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
                }
              }
              function renderFill(styleData, itemData, isFirstFrame) {
                var styleElem = itemData.style;
                if (itemData.c._mdf || isFirstFrame) {
                  styleElem.pElem.setAttribute('fill', 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')');
                }
                if (itemData.o._mdf || isFirstFrame) {
                  styleElem.pElem.setAttribute('fill-opacity', itemData.o.v);
                }
              }
              function renderGradientStroke(styleData, itemData, isFirstFrame) {
                renderGradient(styleData, itemData, isFirstFrame);
                renderStroke(styleData, itemData, isFirstFrame);
              }
              function renderGradient(styleData, itemData, isFirstFrame) {
                var gfill = itemData.gf;
                var hasOpacity = itemData.g._hasOpacity;
                var pt1 = itemData.s.v;
                var pt2 = itemData.e.v;
                if (itemData.o._mdf || isFirstFrame) {
                  var attr = styleData.ty === 'gf' ? 'fill-opacity' : 'stroke-opacity';
                  itemData.style.pElem.setAttribute(attr, itemData.o.v);
                }
                if (itemData.s._mdf || isFirstFrame) {
                  var attr1 = styleData.t === 1 ? 'x1' : 'cx';
                  var attr2 = attr1 === 'x1' ? 'y1' : 'cy';
                  gfill.setAttribute(attr1, pt1[0]);
                  gfill.setAttribute(attr2, pt1[1]);
                  if (hasOpacity && !itemData.g._collapsable) {
                    itemData.of.setAttribute(attr1, pt1[0]);
                    itemData.of.setAttribute(attr2, pt1[1]);
                  }
                }
                var stops;
                var i;
                var len;
                var stop;
                if (itemData.g._cmdf || isFirstFrame) {
                  stops = itemData.cst;
                  var cValues = itemData.g.c;
                  len = stops.length;
                  for (i = 0; i < len; i += 1) {
                    stop = stops[i];
                    stop.setAttribute('offset', cValues[i * 4] + '%');
                    stop.setAttribute('stop-color', 'rgb(' + cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ',' + cValues[i * 4 + 3] + ')');
                  }
                }
                if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
                  var oValues = itemData.g.o;
                  if (itemData.g._collapsable) {
                    stops = itemData.cst;
                  } else {
                    stops = itemData.ost;
                  }
                  len = stops.length;
                  for (i = 0; i < len; i += 1) {
                    stop = stops[i];
                    if (!itemData.g._collapsable) {
                      stop.setAttribute('offset', oValues[i * 2] + '%');
                    }
                    stop.setAttribute('stop-opacity', oValues[i * 2 + 1]);
                  }
                }
                if (styleData.t === 1) {
                  if (itemData.e._mdf || isFirstFrame) {
                    gfill.setAttribute('x2', pt2[0]);
                    gfill.setAttribute('y2', pt2[1]);
                    if (hasOpacity && !itemData.g._collapsable) {
                      itemData.of.setAttribute('x2', pt2[0]);
                      itemData.of.setAttribute('y2', pt2[1]);
                    }
                  }
                } else {
                  var rad;
                  if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
                    rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                    gfill.setAttribute('r', rad);
                    if (hasOpacity && !itemData.g._collapsable) {
                      itemData.of.setAttribute('r', rad);
                    }
                  }
                  if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
                    if (!rad) {
                      rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                    }
                    var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
                    var percent = itemData.h.v;
                    if (percent >= 1) {
                      percent = 0.99;
                    } else if (percent <= -1) {
                      percent = -0.99;
                    }
                    var dist = rad * percent;
                    var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
                    var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
                    gfill.setAttribute('fx', x);
                    gfill.setAttribute('fy', y);
                    if (hasOpacity && !itemData.g._collapsable) {
                      itemData.of.setAttribute('fx', x);
                      itemData.of.setAttribute('fy', y);
                    }
                  } // gfill.setAttribute('fy','200');
                }
              }

              function renderStroke(styleData, itemData, isFirstFrame) {
                var styleElem = itemData.style;
                var d = itemData.d;
                if (d && (d._mdf || isFirstFrame) && d.dashStr) {
                  styleElem.pElem.setAttribute('stroke-dasharray', d.dashStr);
                  styleElem.pElem.setAttribute('stroke-dashoffset', d.dashoffset[0]);
                }
                if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
                  styleElem.pElem.setAttribute('stroke', 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')');
                }
                if (itemData.o._mdf || isFirstFrame) {
                  styleElem.pElem.setAttribute('stroke-opacity', itemData.o.v);
                }
                if (itemData.w._mdf || isFirstFrame) {
                  styleElem.pElem.setAttribute('stroke-width', itemData.w.v);
                  if (styleElem.msElem) {
                    styleElem.msElem.setAttribute('stroke-width', itemData.w.v);
                  }
                }
              }
              return ob;
            }();
            function SVGShapeElement(data, globalData, comp) {
              // List of drawable elements
              this.shapes = []; // Full shape data

              this.shapesData = data.shapes; // List of styles that will be applied to shapes

              this.stylesList = []; // List of modifiers that will be applied to shapes

              this.shapeModifiers = []; // List of items in shape tree

              this.itemsData = []; // List of items in previous shape tree

              this.processedElements = []; // List of animated components

              this.animatedContents = [];
              this.initElement(data, globalData, comp); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
              // List of elements that have been created

              this.prevViewData = []; // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
            }

            extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);
            SVGShapeElement.prototype.initSecondaryElement = function () {};
            SVGShapeElement.prototype.identityMatrix = new Matrix();
            SVGShapeElement.prototype.buildExpressionInterface = function () {};
            SVGShapeElement.prototype.createContent = function () {
              this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
              this.filterUniqueShapes();
            };
            /*
            This method searches for multiple shapes that affect a single element and one of them is animated
            */

            SVGShapeElement.prototype.filterUniqueShapes = function () {
              var i;
              var len = this.shapes.length;
              var shape;
              var j;
              var jLen = this.stylesList.length;
              var style;
              var tempShapes = [];
              var areAnimated = false;
              for (j = 0; j < jLen; j += 1) {
                style = this.stylesList[j];
                areAnimated = false;
                tempShapes.length = 0;
                for (i = 0; i < len; i += 1) {
                  shape = this.shapes[i];
                  if (shape.styles.indexOf(style) !== -1) {
                    tempShapes.push(shape);
                    areAnimated = shape._isAnimated || areAnimated;
                  }
                }
                if (tempShapes.length > 1 && areAnimated) {
                  this.setShapesAsAnimated(tempShapes);
                }
              }
            };
            SVGShapeElement.prototype.setShapesAsAnimated = function (shapes) {
              var i;
              var len = shapes.length;
              for (i = 0; i < len; i += 1) {
                shapes[i].setAsAnimated();
              }
            };
            SVGShapeElement.prototype.createStyleElement = function (data, level) {
              // TODO: prevent drawing of hidden styles
              var elementData;
              var styleOb = new SVGStyleData(data, level);
              var pathElement = styleOb.pElem;
              if (data.ty === 'st') {
                elementData = new SVGStrokeStyleData(this, data, styleOb);
              } else if (data.ty === 'fl') {
                elementData = new SVGFillStyleData(this, data, styleOb);
              } else if (data.ty === 'gf' || data.ty === 'gs') {
                var GradientConstructor = data.ty === 'gf' ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
                elementData = new GradientConstructor(this, data, styleOb);
                this.globalData.defs.appendChild(elementData.gf);
                if (elementData.maskId) {
                  this.globalData.defs.appendChild(elementData.ms);
                  this.globalData.defs.appendChild(elementData.of);
                  pathElement.setAttribute('mask', 'url(' + getLocationHref() + '#' + elementData.maskId + ')');
                }
              } else if (data.ty === 'no') {
                elementData = new SVGNoStyleData(this, data, styleOb);
              }
              if (data.ty === 'st' || data.ty === 'gs') {
                pathElement.setAttribute('stroke-linecap', lineCapEnum[data.lc || 2]);
                pathElement.setAttribute('stroke-linejoin', lineJoinEnum[data.lj || 2]);
                pathElement.setAttribute('fill-opacity', '0');
                if (data.lj === 1) {
                  pathElement.setAttribute('stroke-miterlimit', data.ml);
                }
              }
              if (data.r === 2) {
                pathElement.setAttribute('fill-rule', 'evenodd');
              }
              if (data.ln) {
                pathElement.setAttribute('id', data.ln);
              }
              if (data.cl) {
                pathElement.setAttribute('class', data.cl);
              }
              if (data.bm) {
                pathElement.style['mix-blend-mode'] = getBlendMode(data.bm);
              }
              this.stylesList.push(styleOb);
              this.addToAnimatedContents(data, elementData);
              return elementData;
            };
            SVGShapeElement.prototype.createGroupElement = function (data) {
              var elementData = new ShapeGroupData();
              if (data.ln) {
                elementData.gr.setAttribute('id', data.ln);
              }
              if (data.cl) {
                elementData.gr.setAttribute('class', data.cl);
              }
              if (data.bm) {
                elementData.gr.style['mix-blend-mode'] = getBlendMode(data.bm);
              }
              return elementData;
            };
            SVGShapeElement.prototype.createTransformElement = function (data, container) {
              var transformProperty = TransformPropertyFactory.getTransformProperty(this, data, this);
              var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
              this.addToAnimatedContents(data, elementData);
              return elementData;
            };
            SVGShapeElement.prototype.createShapeElement = function (data, ownTransformers, level) {
              var ty = 4;
              if (data.ty === 'rc') {
                ty = 5;
              } else if (data.ty === 'el') {
                ty = 6;
              } else if (data.ty === 'sr') {
                ty = 7;
              }
              var shapeProperty = ShapePropertyFactory.getShapeProp(this, data, ty, this);
              var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
              this.shapes.push(elementData);
              this.addShapeToModifiers(elementData);
              this.addToAnimatedContents(data, elementData);
              return elementData;
            };
            SVGShapeElement.prototype.addToAnimatedContents = function (data, element) {
              var i = 0;
              var len = this.animatedContents.length;
              while (i < len) {
                if (this.animatedContents[i].element === element) {
                  return;
                }
                i += 1;
              }
              this.animatedContents.push({
                fn: SVGElementsRenderer.createRenderFunction(data),
                element: element,
                data: data
              });
            };
            SVGShapeElement.prototype.setElementStyles = function (elementData) {
              var arr = elementData.styles;
              var j;
              var jLen = this.stylesList.length;
              for (j = 0; j < jLen; j += 1) {
                if (!this.stylesList[j].closed) {
                  arr.push(this.stylesList[j]);
                }
              }
            };
            SVGShapeElement.prototype.reloadShapes = function () {
              this._isFirstFrame = true;
              var i;
              var len = this.itemsData.length;
              for (i = 0; i < len; i += 1) {
                this.prevViewData[i] = this.itemsData[i];
              }
              this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
              this.filterUniqueShapes();
              len = this.dynamicProperties.length;
              for (i = 0; i < len; i += 1) {
                this.dynamicProperties[i].getValue();
              }
              this.renderModifiers();
            };
            SVGShapeElement.prototype.searchShapes = function (arr, itemsData, prevViewData, container, level, transformers, render) {
              var ownTransformers = [].concat(transformers);
              var i;
              var len = arr.length - 1;
              var j;
              var jLen;
              var ownStyles = [];
              var ownModifiers = [];
              var currentTransform;
              var modifier;
              var processedPos;
              for (i = len; i >= 0; i -= 1) {
                processedPos = this.searchProcessedElement(arr[i]);
                if (!processedPos) {
                  arr[i]._render = render;
                } else {
                  itemsData[i] = prevViewData[processedPos - 1];
                }
                if (arr[i].ty === 'fl' || arr[i].ty === 'st' || arr[i].ty === 'gf' || arr[i].ty === 'gs' || arr[i].ty === 'no') {
                  if (!processedPos) {
                    itemsData[i] = this.createStyleElement(arr[i], level);
                  } else {
                    itemsData[i].style.closed = false;
                  }
                  if (arr[i]._render) {
                    if (itemsData[i].style.pElem.parentNode !== container) {
                      container.appendChild(itemsData[i].style.pElem);
                    }
                  }
                  ownStyles.push(itemsData[i].style);
                } else if (arr[i].ty === 'gr') {
                  if (!processedPos) {
                    itemsData[i] = this.createGroupElement(arr[i]);
                  } else {
                    jLen = itemsData[i].it.length;
                    for (j = 0; j < jLen; j += 1) {
                      itemsData[i].prevViewData[j] = itemsData[i].it[j];
                    }
                  }
                  this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, itemsData[i].gr, level + 1, ownTransformers, render);
                  if (arr[i]._render) {
                    if (itemsData[i].gr.parentNode !== container) {
                      container.appendChild(itemsData[i].gr);
                    }
                  }
                } else if (arr[i].ty === 'tr') {
                  if (!processedPos) {
                    itemsData[i] = this.createTransformElement(arr[i], container);
                  }
                  currentTransform = itemsData[i].transform;
                  ownTransformers.push(currentTransform);
                } else if (arr[i].ty === 'sh' || arr[i].ty === 'rc' || arr[i].ty === 'el' || arr[i].ty === 'sr') {
                  if (!processedPos) {
                    itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);
                  }
                  this.setElementStyles(itemsData[i]);
                } else if (arr[i].ty === 'tm' || arr[i].ty === 'rd' || arr[i].ty === 'ms' || arr[i].ty === 'pb' || arr[i].ty === 'zz' || arr[i].ty === 'op') {
                  if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    modifier.init(this, arr[i]);
                    itemsData[i] = modifier;
                    this.shapeModifiers.push(modifier);
                  } else {
                    modifier = itemsData[i];
                    modifier.closed = false;
                  }
                  ownModifiers.push(modifier);
                } else if (arr[i].ty === 'rp') {
                  if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    itemsData[i] = modifier;
                    modifier.init(this, arr, i, itemsData);
                    this.shapeModifiers.push(modifier);
                    render = false;
                  } else {
                    modifier = itemsData[i];
                    modifier.closed = true;
                  }
                  ownModifiers.push(modifier);
                }
                this.addProcessedElement(arr[i], i + 1);
              }
              len = ownStyles.length;
              for (i = 0; i < len; i += 1) {
                ownStyles[i].closed = true;
              }
              len = ownModifiers.length;
              for (i = 0; i < len; i += 1) {
                ownModifiers[i].closed = true;
              }
            };
            SVGShapeElement.prototype.renderInnerContent = function () {
              this.renderModifiers();
              var i;
              var len = this.stylesList.length;
              for (i = 0; i < len; i += 1) {
                this.stylesList[i].reset();
              }
              this.renderShape();
              for (i = 0; i < len; i += 1) {
                if (this.stylesList[i]._mdf || this._isFirstFrame) {
                  if (this.stylesList[i].msElem) {
                    this.stylesList[i].msElem.setAttribute('d', this.stylesList[i].d); // Adding M0 0 fixes same mask bug on all browsers

                    this.stylesList[i].d = 'M0 0' + this.stylesList[i].d;
                  }
                  this.stylesList[i].pElem.setAttribute('d', this.stylesList[i].d || 'M0 0');
                }
              }
            };
            SVGShapeElement.prototype.renderShape = function () {
              var i;
              var len = this.animatedContents.length;
              var animatedContent;
              for (i = 0; i < len; i += 1) {
                animatedContent = this.animatedContents[i];
                if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
                  animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
                }
              }
            };
            SVGShapeElement.prototype.destroy = function () {
              this.destroyBaseElement();
              this.shapesData = null;
              this.itemsData = null;
            };
            function LetterProps(o, sw, sc, fc, m, p) {
              this.o = o;
              this.sw = sw;
              this.sc = sc;
              this.fc = fc;
              this.m = m;
              this.p = p;
              this._mdf = {
                o: true,
                sw: !!sw,
                sc: !!sc,
                fc: !!fc,
                m: true,
                p: true
              };
            }
            LetterProps.prototype.update = function (o, sw, sc, fc, m, p) {
              this._mdf.o = false;
              this._mdf.sw = false;
              this._mdf.sc = false;
              this._mdf.fc = false;
              this._mdf.m = false;
              this._mdf.p = false;
              var updated = false;
              if (this.o !== o) {
                this.o = o;
                this._mdf.o = true;
                updated = true;
              }
              if (this.sw !== sw) {
                this.sw = sw;
                this._mdf.sw = true;
                updated = true;
              }
              if (this.sc !== sc) {
                this.sc = sc;
                this._mdf.sc = true;
                updated = true;
              }
              if (this.fc !== fc) {
                this.fc = fc;
                this._mdf.fc = true;
                updated = true;
              }
              if (this.m !== m) {
                this.m = m;
                this._mdf.m = true;
                updated = true;
              }
              if (p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
                this.p = p;
                this._mdf.p = true;
                updated = true;
              }
              return updated;
            };
            function TextProperty(elem, data) {
              this._frameId = initialDefaultFrame;
              this.pv = '';
              this.v = '';
              this.kf = false;
              this._isFirstFrame = true;
              this._mdf = false;
              if (data.d && data.d.sid) {
                data.d = elem.globalData.slotManager.getProp(data.d);
              }
              this.data = data;
              this.elem = elem;
              this.comp = this.elem.comp;
              this.keysIndex = 0;
              this.canResize = false;
              this.minimumFontSize = 1;
              this.effectsSequence = [];
              this.currentData = {
                ascent: 0,
                boxWidth: this.defaultBoxWidth,
                f: '',
                fStyle: '',
                fWeight: '',
                fc: '',
                j: '',
                justifyOffset: '',
                l: [],
                lh: 0,
                lineWidths: [],
                ls: '',
                of: '',
                s: '',
                sc: '',
                sw: 0,
                t: 0,
                tr: 0,
                sz: 0,
                ps: null,
                fillColorAnim: false,
                strokeColorAnim: false,
                strokeWidthAnim: false,
                yOffset: 0,
                finalSize: 0,
                finalText: [],
                finalLineHeight: 0,
                __complete: false
              };
              this.copyData(this.currentData, this.data.d.k[0].s);
              if (!this.searchProperty()) {
                this.completeTextData(this.currentData);
              }
            }
            TextProperty.prototype.defaultBoxWidth = [0, 0];
            TextProperty.prototype.copyData = function (obj, data) {
              for (var s in data) {
                if (Object.prototype.hasOwnProperty.call(data, s)) {
                  obj[s] = data[s];
                }
              }
              return obj;
            };
            TextProperty.prototype.setCurrentData = function (data) {
              if (!data.__complete) {
                this.completeTextData(data);
              }
              this.currentData = data;
              this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
              this._mdf = true;
            };
            TextProperty.prototype.searchProperty = function () {
              return this.searchKeyframes();
            };
            TextProperty.prototype.searchKeyframes = function () {
              this.kf = this.data.d.k.length > 1;
              if (this.kf) {
                this.addEffect(this.getKeyframeValue.bind(this));
              }
              return this.kf;
            };
            TextProperty.prototype.addEffect = function (effectFunction) {
              this.effectsSequence.push(effectFunction);
              this.elem.addDynamicProperty(this);
            };
            TextProperty.prototype.getValue = function (_finalValue) {
              if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
                return;
              }
              this.currentData.t = this.data.d.k[this.keysIndex].s.t;
              var currentValue = this.currentData;
              var currentIndex = this.keysIndex;
              if (this.lock) {
                this.setCurrentData(this.currentData);
                return;
              }
              this.lock = true;
              this._mdf = false;
              var i;
              var len = this.effectsSequence.length;
              var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
              for (i = 0; i < len; i += 1) {
                // Checking if index changed to prevent creating a new object every time the expression updates.
                if (currentIndex !== this.keysIndex) {
                  finalValue = this.effectsSequence[i](finalValue, finalValue.t);
                } else {
                  finalValue = this.effectsSequence[i](this.currentData, finalValue.t);
                }
              }
              if (currentValue !== finalValue) {
                this.setCurrentData(finalValue);
              }
              this.v = this.currentData;
              this.pv = this.v;
              this.lock = false;
              this.frameId = this.elem.globalData.frameId;
            };
            TextProperty.prototype.getKeyframeValue = function () {
              var textKeys = this.data.d.k;
              var frameNum = this.elem.comp.renderedFrame;
              var i = 0;
              var len = textKeys.length;
              while (i <= len - 1) {
                if (i === len - 1 || textKeys[i + 1].t > frameNum) {
                  break;
                }
                i += 1;
              }
              if (this.keysIndex !== i) {
                this.keysIndex = i;
              }
              return this.data.d.k[this.keysIndex].s;
            };
            TextProperty.prototype.buildFinalText = function (text) {
              var charactersArray = [];
              var i = 0;
              var len = text.length;
              var charCode;
              var secondCharCode;
              var shouldCombine = false;
              var shouldCombineNext = false;
              var currentChars = '';
              while (i < len) {
                shouldCombine = shouldCombineNext;
                shouldCombineNext = false;
                charCode = text.charCodeAt(i);
                currentChars = text.charAt(i);
                if (FontManager.isCombinedCharacter(charCode)) {
                  shouldCombine = true; // It's a potential surrogate pair (this is the High surrogate)
                } else if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                  if (FontManager.isRegionalFlag(text, i)) {
                    currentChars = text.substr(i, 14);
                  } else {
                    secondCharCode = text.charCodeAt(i + 1); // It's a surrogate pair (this is the Low surrogate)

                    if (secondCharCode >= 0xDC00 && secondCharCode <= 0xDFFF) {
                      if (FontManager.isModifier(charCode, secondCharCode)) {
                        currentChars = text.substr(i, 2);
                        shouldCombine = true;
                      } else if (FontManager.isFlagEmoji(text.substr(i, 4))) {
                        currentChars = text.substr(i, 4);
                      } else {
                        currentChars = text.substr(i, 2);
                      }
                    }
                  }
                } else if (charCode > 0xDBFF) {
                  secondCharCode = text.charCodeAt(i + 1);
                  if (FontManager.isVariationSelector(charCode)) {
                    shouldCombine = true;
                  }
                } else if (FontManager.isZeroWidthJoiner(charCode)) {
                  shouldCombine = true;
                  shouldCombineNext = true;
                }
                if (shouldCombine) {
                  charactersArray[charactersArray.length - 1] += currentChars;
                  shouldCombine = false;
                } else {
                  charactersArray.push(currentChars);
                }
                i += currentChars.length;
              }
              return charactersArray;
            };
            TextProperty.prototype.completeTextData = function (documentData) {
              documentData.__complete = true;
              var fontManager = this.elem.globalData.fontManager;
              var data = this.data;
              var letters = [];
              var i;
              var len;
              var newLineFlag;
              var index = 0;
              var val;
              var anchorGrouping = data.m.g;
              var currentSize = 0;
              var currentPos = 0;
              var currentLine = 0;
              var lineWidths = [];
              var lineWidth = 0;
              var maxLineWidth = 0;
              var j;
              var jLen;
              var fontData = fontManager.getFontByName(documentData.f);
              var charData;
              var cLength = 0;
              var fontProps = getFontProperties(fontData);
              documentData.fWeight = fontProps.weight;
              documentData.fStyle = fontProps.style;
              documentData.finalSize = documentData.s;
              documentData.finalText = this.buildFinalText(documentData.t);
              len = documentData.finalText.length;
              documentData.finalLineHeight = documentData.lh;
              var trackingOffset = documentData.tr / 1000 * documentData.finalSize;
              var charCode;
              if (documentData.sz) {
                var flag = true;
                var boxWidth = documentData.sz[0];
                var boxHeight = documentData.sz[1];
                var currentHeight;
                var finalText;
                while (flag) {
                  finalText = this.buildFinalText(documentData.t);
                  currentHeight = 0;
                  lineWidth = 0;
                  len = finalText.length;
                  trackingOffset = documentData.tr / 1000 * documentData.finalSize;
                  var lastSpaceIndex = -1;
                  for (i = 0; i < len; i += 1) {
                    charCode = finalText[i].charCodeAt(0);
                    newLineFlag = false;
                    if (finalText[i] === ' ') {
                      lastSpaceIndex = i;
                    } else if (charCode === 13 || charCode === 3) {
                      lineWidth = 0;
                      newLineFlag = true;
                      currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                    }
                    if (fontManager.chars) {
                      charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);
                      cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
                    } else {
                      // tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
                      cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);
                    }
                    if (lineWidth + cLength > boxWidth && finalText[i] !== ' ') {
                      if (lastSpaceIndex === -1) {
                        len += 1;
                      } else {
                        i = lastSpaceIndex;
                      }
                      currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                      finalText.splice(i, lastSpaceIndex === i ? 1 : 0, '\r'); // finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);

                      lastSpaceIndex = -1;
                      lineWidth = 0;
                    } else {
                      lineWidth += cLength;
                      lineWidth += trackingOffset;
                    }
                  }
                  currentHeight += fontData.ascent * documentData.finalSize / 100;
                  if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
                    documentData.finalSize -= 1;
                    documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
                  } else {
                    documentData.finalText = finalText;
                    len = documentData.finalText.length;
                    flag = false;
                  }
                }
              }
              lineWidth = -trackingOffset;
              cLength = 0;
              var uncollapsedSpaces = 0;
              var currentChar;
              for (i = 0; i < len; i += 1) {
                newLineFlag = false;
                currentChar = documentData.finalText[i];
                charCode = currentChar.charCodeAt(0);
                if (charCode === 13 || charCode === 3) {
                  uncollapsedSpaces = 0;
                  lineWidths.push(lineWidth);
                  maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
                  lineWidth = -2 * trackingOffset;
                  val = '';
                  newLineFlag = true;
                  currentLine += 1;
                } else {
                  val = currentChar;
                }
                if (fontManager.chars) {
                  charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
                  cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
                } else {
                  // var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
                  // tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
                  cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);
                } //

                if (currentChar === ' ') {
                  uncollapsedSpaces += cLength + trackingOffset;
                } else {
                  lineWidth += cLength + trackingOffset + uncollapsedSpaces;
                  uncollapsedSpaces = 0;
                }
                letters.push({
                  l: cLength,
                  an: cLength,
                  add: currentSize,
                  n: newLineFlag,
                  anIndexes: [],
                  val: val,
                  line: currentLine,
                  animatorJustifyOffset: 0
                });
                if (anchorGrouping == 2) {
                  // eslint-disable-line eqeqeq
                  currentSize += cLength;
                  if (val === '' || val === ' ' || i === len - 1) {
                    if (val === '' || val === ' ') {
                      currentSize -= cLength;
                    }
                    while (currentPos <= i) {
                      letters[currentPos].an = currentSize;
                      letters[currentPos].ind = index;
                      letters[currentPos].extra = cLength;
                      currentPos += 1;
                    }
                    index += 1;
                    currentSize = 0;
                  }
                } else if (anchorGrouping == 3) {
                  // eslint-disable-line eqeqeq
                  currentSize += cLength;
                  if (val === '' || i === len - 1) {
                    if (val === '') {
                      currentSize -= cLength;
                    }
                    while (currentPos <= i) {
                      letters[currentPos].an = currentSize;
                      letters[currentPos].ind = index;
                      letters[currentPos].extra = cLength;
                      currentPos += 1;
                    }
                    currentSize = 0;
                    index += 1;
                  }
                } else {
                  letters[index].ind = index;
                  letters[index].extra = 0;
                  index += 1;
                }
              }
              documentData.l = letters;
              maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
              lineWidths.push(lineWidth);
              if (documentData.sz) {
                documentData.boxWidth = documentData.sz[0];
                documentData.justifyOffset = 0;
              } else {
                documentData.boxWidth = maxLineWidth;
                switch (documentData.j) {
                  case 1:
                    documentData.justifyOffset = -documentData.boxWidth;
                    break;
                  case 2:
                    documentData.justifyOffset = -documentData.boxWidth / 2;
                    break;
                  default:
                    documentData.justifyOffset = 0;
                }
              }
              documentData.lineWidths = lineWidths;
              var animators = data.a;
              var animatorData;
              var letterData;
              jLen = animators.length;
              var based;
              var ind;
              var indexes = [];
              for (j = 0; j < jLen; j += 1) {
                animatorData = animators[j];
                if (animatorData.a.sc) {
                  documentData.strokeColorAnim = true;
                }
                if (animatorData.a.sw) {
                  documentData.strokeWidthAnim = true;
                }
                if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
                  documentData.fillColorAnim = true;
                }
                ind = 0;
                based = animatorData.s.b;
                for (i = 0; i < len; i += 1) {
                  letterData = letters[i];
                  letterData.anIndexes[j] = ind;
                  if (based == 1 && letterData.val !== '' || based == 2 && letterData.val !== '' && letterData.val !== ' ' || based == 3 && (letterData.n || letterData.val == ' ' || i == len - 1) || based == 4 && (letterData.n || i == len - 1)) {
                    // eslint-disable-line eqeqeq
                    if (animatorData.s.rn === 1) {
                      indexes.push(ind);
                    }
                    ind += 1;
                  }
                }
                data.a[j].s.totalChars = ind;
                var currentInd = -1;
                var newInd;
                if (animatorData.s.rn === 1) {
                  for (i = 0; i < len; i += 1) {
                    letterData = letters[i];
                    if (currentInd != letterData.anIndexes[j]) {
                      // eslint-disable-line eqeqeq
                      currentInd = letterData.anIndexes[j];
                      newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
                    }
                    letterData.anIndexes[j] = newInd;
                  }
                }
              }
              documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
              documentData.ls = documentData.ls || 0;
              documentData.ascent = fontData.ascent * documentData.finalSize / 100;
            };
            TextProperty.prototype.updateDocumentData = function (newData, index) {
              index = index === undefined ? this.keysIndex : index;
              var dData = this.copyData({}, this.data.d.k[index].s);
              dData = this.copyData(dData, newData);
              this.data.d.k[index].s = dData;
              this.recalculate(index);
              this.setCurrentData(dData);
              this.elem.addDynamicProperty(this);
            };
            TextProperty.prototype.recalculate = function (index) {
              var dData = this.data.d.k[index].s;
              dData.__complete = false;
              this.keysIndex = 0;
              this._isFirstFrame = true;
              this.getValue(dData);
            };
            TextProperty.prototype.canResizeFont = function (_canResize) {
              this.canResize = _canResize;
              this.recalculate(this.keysIndex);
              this.elem.addDynamicProperty(this);
            };
            TextProperty.prototype.setMinimumFontSize = function (_fontValue) {
              this.minimumFontSize = Math.floor(_fontValue) || 1;
              this.recalculate(this.keysIndex);
              this.elem.addDynamicProperty(this);
            };
            var TextSelectorProp = function () {
              var max = Math.max;
              var min = Math.min;
              var floor = Math.floor;
              function TextSelectorPropFactory(elem, data) {
                this._currentTextLength = -1;
                this.k = false;
                this.data = data;
                this.elem = elem;
                this.comp = elem.comp;
                this.finalS = 0;
                this.finalE = 0;
                this.initDynamicPropertyContainer(elem);
                this.s = PropertyFactory.getProp(elem, data.s || {
                  k: 0
                }, 0, 0, this);
                if ('e' in data) {
                  this.e = PropertyFactory.getProp(elem, data.e, 0, 0, this);
                } else {
                  this.e = {
                    v: 100
                  };
                }
                this.o = PropertyFactory.getProp(elem, data.o || {
                  k: 0
                }, 0, 0, this);
                this.xe = PropertyFactory.getProp(elem, data.xe || {
                  k: 0
                }, 0, 0, this);
                this.ne = PropertyFactory.getProp(elem, data.ne || {
                  k: 0
                }, 0, 0, this);
                this.sm = PropertyFactory.getProp(elem, data.sm || {
                  k: 100
                }, 0, 0, this);
                this.a = PropertyFactory.getProp(elem, data.a, 0, 0.01, this);
                if (!this.dynamicProperties.length) {
                  this.getValue();
                }
              }
              TextSelectorPropFactory.prototype = {
                getMult: function getMult(ind) {
                  if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
                    this.getValue();
                  }
                  var x1 = 0;
                  var y1 = 0;
                  var x2 = 1;
                  var y2 = 1;
                  if (this.ne.v > 0) {
                    x1 = this.ne.v / 100.0;
                  } else {
                    y1 = -this.ne.v / 100.0;
                  }
                  if (this.xe.v > 0) {
                    x2 = 1.0 - this.xe.v / 100.0;
                  } else {
                    y2 = 1.0 + this.xe.v / 100.0;
                  }
                  var easer = BezierFactory.getBezierEasing(x1, y1, x2, y2).get;
                  var mult = 0;
                  var s = this.finalS;
                  var e = this.finalE;
                  var type = this.data.sh;
                  if (type === 2) {
                    if (e === s) {
                      mult = ind >= e ? 1 : 0;
                    } else {
                      mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                    }
                    mult = easer(mult);
                  } else if (type === 3) {
                    if (e === s) {
                      mult = ind >= e ? 0 : 1;
                    } else {
                      mult = 1 - max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                    }
                    mult = easer(mult);
                  } else if (type === 4) {
                    if (e === s) {
                      mult = 0;
                    } else {
                      mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                      if (mult < 0.5) {
                        mult *= 2;
                      } else {
                        mult = 1 - 2 * (mult - 0.5);
                      }
                    }
                    mult = easer(mult);
                  } else if (type === 5) {
                    if (e === s) {
                      mult = 0;
                    } else {
                      var tot = e - s;
                      /* ind += 0.5;
                                mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind; */

                      ind = min(max(0, ind + 0.5 - s), e - s);
                      var x = -tot / 2 + ind;
                      var a = tot / 2;
                      mult = Math.sqrt(1 - x * x / (a * a));
                    }
                    mult = easer(mult);
                  } else if (type === 6) {
                    if (e === s) {
                      mult = 0;
                    } else {
                      ind = min(max(0, ind + 0.5 - s), e - s);
                      mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e - s))) / 2; // eslint-disable-line
                    }

                    mult = easer(mult);
                  } else {
                    if (ind >= floor(s)) {
                      if (ind - s < 0) {
                        mult = max(0, min(min(e, 1) - (s - ind), 1));
                      } else {
                        mult = max(0, min(e - ind, 1));
                      }
                    }
                    mult = easer(mult);
                  } // Smoothness implementation.
                  // The smoothness represents a reduced range of the original [0; 1] range.
                  // if smoothness is 25%, the new range will be [0.375; 0.625]
                  // Steps are:
                  // - find the lower value of the new range (threshold)
                  // - if multiplier is smaller than that value, floor it to 0
                  // - if it is larger,
                  //     - subtract the threshold
                  //     - divide it by the smoothness (this will return the range to [0; 1])
                  // Note: If it doesn't work on some scenarios, consider applying it before the easer.

                  if (this.sm.v !== 100) {
                    var smoothness = this.sm.v * 0.01;
                    if (smoothness === 0) {
                      smoothness = 0.00000001;
                    }
                    var threshold = 0.5 - smoothness * 0.5;
                    if (mult < threshold) {
                      mult = 0;
                    } else {
                      mult = (mult - threshold) / smoothness;
                      if (mult > 1) {
                        mult = 1;
                      }
                    }
                  }
                  return mult * this.a.v;
                },
                getValue: function getValue(newCharsFlag) {
                  this.iterateDynamicProperties();
                  this._mdf = newCharsFlag || this._mdf;
                  this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
                  if (newCharsFlag && this.data.r === 2) {
                    this.e.v = this._currentTextLength;
                  }
                  var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
                  var o = this.o.v / divisor;
                  var s = this.s.v / divisor + o;
                  var e = this.e.v / divisor + o;
                  if (s > e) {
                    var _s = s;
                    s = e;
                    e = _s;
                  }
                  this.finalS = s;
                  this.finalE = e;
                }
              };
              extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);
              function getTextSelectorProp(elem, data, arr) {
                return new TextSelectorPropFactory(elem, data);
              }
              return {
                getTextSelectorProp: getTextSelectorProp
              };
            }();
            function TextAnimatorDataProperty(elem, animatorProps, container) {
              var defaultData = {
                propType: false
              };
              var getProp = PropertyFactory.getProp;
              var textAnimatorAnimatables = animatorProps.a;
              this.a = {
                r: textAnimatorAnimatables.r ? getProp(elem, textAnimatorAnimatables.r, 0, degToRads, container) : defaultData,
                rx: textAnimatorAnimatables.rx ? getProp(elem, textAnimatorAnimatables.rx, 0, degToRads, container) : defaultData,
                ry: textAnimatorAnimatables.ry ? getProp(elem, textAnimatorAnimatables.ry, 0, degToRads, container) : defaultData,
                sk: textAnimatorAnimatables.sk ? getProp(elem, textAnimatorAnimatables.sk, 0, degToRads, container) : defaultData,
                sa: textAnimatorAnimatables.sa ? getProp(elem, textAnimatorAnimatables.sa, 0, degToRads, container) : defaultData,
                s: textAnimatorAnimatables.s ? getProp(elem, textAnimatorAnimatables.s, 1, 0.01, container) : defaultData,
                a: textAnimatorAnimatables.a ? getProp(elem, textAnimatorAnimatables.a, 1, 0, container) : defaultData,
                o: textAnimatorAnimatables.o ? getProp(elem, textAnimatorAnimatables.o, 0, 0.01, container) : defaultData,
                p: textAnimatorAnimatables.p ? getProp(elem, textAnimatorAnimatables.p, 1, 0, container) : defaultData,
                sw: textAnimatorAnimatables.sw ? getProp(elem, textAnimatorAnimatables.sw, 0, 0, container) : defaultData,
                sc: textAnimatorAnimatables.sc ? getProp(elem, textAnimatorAnimatables.sc, 1, 0, container) : defaultData,
                fc: textAnimatorAnimatables.fc ? getProp(elem, textAnimatorAnimatables.fc, 1, 0, container) : defaultData,
                fh: textAnimatorAnimatables.fh ? getProp(elem, textAnimatorAnimatables.fh, 0, 0, container) : defaultData,
                fs: textAnimatorAnimatables.fs ? getProp(elem, textAnimatorAnimatables.fs, 0, 0.01, container) : defaultData,
                fb: textAnimatorAnimatables.fb ? getProp(elem, textAnimatorAnimatables.fb, 0, 0.01, container) : defaultData,
                t: textAnimatorAnimatables.t ? getProp(elem, textAnimatorAnimatables.t, 0, 0, container) : defaultData
              };
              this.s = TextSelectorProp.getTextSelectorProp(elem, animatorProps.s, container);
              this.s.t = animatorProps.s.t;
            }
            function TextAnimatorProperty(textData, renderType, elem) {
              this._isFirstFrame = true;
              this._hasMaskedPath = false;
              this._frameId = -1;
              this._textData = textData;
              this._renderType = renderType;
              this._elem = elem;
              this._animatorsData = createSizedArray(this._textData.a.length);
              this._pathData = {};
              this._moreOptions = {
                alignment: {}
              };
              this.renderedLetters = [];
              this.lettersChangedFlag = false;
              this.initDynamicPropertyContainer(elem);
            }
            TextAnimatorProperty.prototype.searchProperties = function () {
              var i;
              var len = this._textData.a.length;
              var animatorProps;
              var getProp = PropertyFactory.getProp;
              for (i = 0; i < len; i += 1) {
                animatorProps = this._textData.a[i];
                this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
              }
              if (this._textData.p && 'm' in this._textData.p) {
                this._pathData = {
                  a: getProp(this._elem, this._textData.p.a, 0, 0, this),
                  f: getProp(this._elem, this._textData.p.f, 0, 0, this),
                  l: getProp(this._elem, this._textData.p.l, 0, 0, this),
                  r: getProp(this._elem, this._textData.p.r, 0, 0, this),
                  p: getProp(this._elem, this._textData.p.p, 0, 0, this),
                  m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
                };
                this._hasMaskedPath = true;
              } else {
                this._hasMaskedPath = false;
              }
              this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
            };
            TextAnimatorProperty.prototype.getMeasures = function (documentData, lettersChangedFlag) {
              this.lettersChangedFlag = lettersChangedFlag;
              if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
                return;
              }
              this._isFirstFrame = false;
              var alignment = this._moreOptions.alignment.v;
              var animators = this._animatorsData;
              var textData = this._textData;
              var matrixHelper = this.mHelper;
              var renderType = this._renderType;
              var renderedLettersCount = this.renderedLetters.length;
              var xPos;
              var yPos;
              var i;
              var len;
              var letters = documentData.l;
              var pathInfo;
              var currentLength;
              var currentPoint;
              var segmentLength;
              var flag;
              var pointInd;
              var segmentInd;
              var prevPoint;
              var points;
              var segments;
              var partialLength;
              var totalLength;
              var perc;
              var tanAngle;
              var mask;
              if (this._hasMaskedPath) {
                mask = this._pathData.m;
                if (!this._pathData.n || this._pathData._mdf) {
                  var paths = mask.v;
                  if (this._pathData.r.v) {
                    paths = paths.reverse();
                  } // TODO: release bezier data cached from previous pathInfo: this._pathData.pi

                  pathInfo = {
                    tLength: 0,
                    segments: []
                  };
                  len = paths._length - 1;
                  var bezierData;
                  totalLength = 0;
                  for (i = 0; i < len; i += 1) {
                    bezierData = bez.buildBezierData(paths.v[i], paths.v[i + 1], [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]], [paths.i[i + 1][0] - paths.v[i + 1][0], paths.i[i + 1][1] - paths.v[i + 1][1]]);
                    pathInfo.tLength += bezierData.segmentLength;
                    pathInfo.segments.push(bezierData);
                    totalLength += bezierData.segmentLength;
                  }
                  i = len;
                  if (mask.v.c) {
                    bezierData = bez.buildBezierData(paths.v[i], paths.v[0], [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]], [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
                    pathInfo.tLength += bezierData.segmentLength;
                    pathInfo.segments.push(bezierData);
                    totalLength += bezierData.segmentLength;
                  }
                  this._pathData.pi = pathInfo;
                }
                pathInfo = this._pathData.pi;
                currentLength = this._pathData.f.v;
                segmentInd = 0;
                pointInd = 1;
                segmentLength = 0;
                flag = true;
                segments = pathInfo.segments;
                if (currentLength < 0 && mask.v.c) {
                  if (pathInfo.tLength < Math.abs(currentLength)) {
                    currentLength = -Math.abs(currentLength) % pathInfo.tLength;
                  }
                  segmentInd = segments.length - 1;
                  points = segments[segmentInd].points;
                  pointInd = points.length - 1;
                  while (currentLength < 0) {
                    currentLength += points[pointInd].partialLength;
                    pointInd -= 1;
                    if (pointInd < 0) {
                      segmentInd -= 1;
                      points = segments[segmentInd].points;
                      pointInd = points.length - 1;
                    }
                  }
                }
                points = segments[segmentInd].points;
                prevPoint = points[pointInd - 1];
                currentPoint = points[pointInd];
                partialLength = currentPoint.partialLength;
              }
              len = letters.length;
              xPos = 0;
              yPos = 0;
              var yOff = documentData.finalSize * 1.2 * 0.714;
              var firstLine = true;
              var animatorProps;
              var animatorSelector;
              var j;
              var jLen;
              var letterValue;
              jLen = animators.length;
              var mult;
              var ind = -1;
              var offf;
              var xPathPos;
              var yPathPos;
              var initPathPos = currentLength;
              var initSegmentInd = segmentInd;
              var initPointInd = pointInd;
              var currentLine = -1;
              var elemOpacity;
              var sc;
              var sw;
              var fc;
              var k;
              var letterSw;
              var letterSc;
              var letterFc;
              var letterM = '';
              var letterP = this.defaultPropsArray;
              var letterO; //

              if (documentData.j === 2 || documentData.j === 1) {
                var animatorJustifyOffset = 0;
                var animatorFirstCharOffset = 0;
                var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
                var lastIndex = 0;
                var isNewLine = true;
                for (i = 0; i < len; i += 1) {
                  if (letters[i].n) {
                    if (animatorJustifyOffset) {
                      animatorJustifyOffset += animatorFirstCharOffset;
                    }
                    while (lastIndex < i) {
                      letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                      lastIndex += 1;
                    }
                    animatorJustifyOffset = 0;
                    isNewLine = true;
                  } else {
                    for (j = 0; j < jLen; j += 1) {
                      animatorProps = animators[j].a;
                      if (animatorProps.t.propType) {
                        if (isNewLine && documentData.j === 2) {
                          animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                        }
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        if (mult.length) {
                          animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                        } else {
                          animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                        }
                      }
                    }
                    isNewLine = false;
                  }
                }
                if (animatorJustifyOffset) {
                  animatorJustifyOffset += animatorFirstCharOffset;
                }
                while (lastIndex < i) {
                  letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                  lastIndex += 1;
                }
              } //

              for (i = 0; i < len; i += 1) {
                matrixHelper.reset();
                elemOpacity = 1;
                if (letters[i].n) {
                  xPos = 0;
                  yPos += documentData.yOffset;
                  yPos += firstLine ? 1 : 0;
                  currentLength = initPathPos;
                  firstLine = false;
                  if (this._hasMaskedPath) {
                    segmentInd = initSegmentInd;
                    pointInd = initPointInd;
                    points = segments[segmentInd].points;
                    prevPoint = points[pointInd - 1];
                    currentPoint = points[pointInd];
                    partialLength = currentPoint.partialLength;
                    segmentLength = 0;
                  }
                  letterM = '';
                  letterFc = '';
                  letterSw = '';
                  letterO = '';
                  letterP = this.defaultPropsArray;
                } else {
                  if (this._hasMaskedPath) {
                    if (currentLine !== letters[i].line) {
                      switch (documentData.j) {
                        case 1:
                          currentLength += totalLength - documentData.lineWidths[letters[i].line];
                          break;
                        case 2:
                          currentLength += (totalLength - documentData.lineWidths[letters[i].line]) / 2;
                          break;
                      }
                      currentLine = letters[i].line;
                    }
                    if (ind !== letters[i].ind) {
                      if (letters[ind]) {
                        currentLength += letters[ind].extra;
                      }
                      currentLength += letters[i].an / 2;
                      ind = letters[i].ind;
                    }
                    currentLength += alignment[0] * letters[i].an * 0.005;
                    var animatorOffset = 0;
                    for (j = 0; j < jLen; j += 1) {
                      animatorProps = animators[j].a;
                      if (animatorProps.p.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        if (mult.length) {
                          animatorOffset += animatorProps.p.v[0] * mult[0];
                        } else {
                          animatorOffset += animatorProps.p.v[0] * mult;
                        }
                      }
                      if (animatorProps.a.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        if (mult.length) {
                          animatorOffset += animatorProps.a.v[0] * mult[0];
                        } else {
                          animatorOffset += animatorProps.a.v[0] * mult;
                        }
                      }
                    }
                    flag = true; // Force alignment only works with a single line for now

                    if (this._pathData.a.v) {
                      currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);
                      currentLength += this._pathData.f.v;
                    }
                    while (flag) {
                      if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                        perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                        xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                        yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                        matrixHelper.translate(-alignment[0] * letters[i].an * 0.005, -(alignment[1] * yOff) * 0.01);
                        flag = false;
                      } else if (points) {
                        segmentLength += currentPoint.partialLength;
                        pointInd += 1;
                        if (pointInd >= points.length) {
                          pointInd = 0;
                          segmentInd += 1;
                          if (!segments[segmentInd]) {
                            if (mask.v.c) {
                              pointInd = 0;
                              segmentInd = 0;
                              points = segments[segmentInd].points;
                            } else {
                              segmentLength -= currentPoint.partialLength;
                              points = null;
                            }
                          } else {
                            points = segments[segmentInd].points;
                          }
                        }
                        if (points) {
                          prevPoint = currentPoint;
                          currentPoint = points[pointInd];
                          partialLength = currentPoint.partialLength;
                        }
                      }
                    }
                    offf = letters[i].an / 2 - letters[i].add;
                    matrixHelper.translate(-offf, 0, 0);
                  } else {
                    offf = letters[i].an / 2 - letters[i].add;
                    matrixHelper.translate(-offf, 0, 0); // Grouping alignment

                    matrixHelper.translate(-alignment[0] * letters[i].an * 0.005, -alignment[1] * yOff * 0.01, 0);
                  }
                  for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.t.propType) {
                      animatorSelector = animators[j].s;
                      mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars); // This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"

                      if (xPos !== 0 || documentData.j !== 0) {
                        if (this._hasMaskedPath) {
                          if (mult.length) {
                            currentLength += animatorProps.t.v * mult[0];
                          } else {
                            currentLength += animatorProps.t.v * mult;
                          }
                        } else if (mult.length) {
                          xPos += animatorProps.t.v * mult[0];
                        } else {
                          xPos += animatorProps.t.v * mult;
                        }
                      }
                    }
                  }
                  if (documentData.strokeWidthAnim) {
                    sw = documentData.sw || 0;
                  }
                  if (documentData.strokeColorAnim) {
                    if (documentData.sc) {
                      sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
                    } else {
                      sc = [0, 0, 0];
                    }
                  }
                  if (documentData.fillColorAnim && documentData.fc) {
                    fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
                  }
                  for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.a.propType) {
                      animatorSelector = animators[j].s;
                      mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                      if (mult.length) {
                        matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
                      } else {
                        matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
                      }
                    }
                  }
                  for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.s.propType) {
                      animatorSelector = animators[j].s;
                      mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                      if (mult.length) {
                        matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
                      } else {
                        matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
                      }
                    }
                  }
                  for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                    if (animatorProps.sk.propType) {
                      if (mult.length) {
                        matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
                      } else {
                        matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
                      }
                    }
                    if (animatorProps.r.propType) {
                      if (mult.length) {
                        matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
                      } else {
                        matrixHelper.rotateZ(-animatorProps.r.v * mult);
                      }
                    }
                    if (animatorProps.ry.propType) {
                      if (mult.length) {
                        matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
                      } else {
                        matrixHelper.rotateY(animatorProps.ry.v * mult);
                      }
                    }
                    if (animatorProps.rx.propType) {
                      if (mult.length) {
                        matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
                      } else {
                        matrixHelper.rotateX(animatorProps.rx.v * mult);
                      }
                    }
                    if (animatorProps.o.propType) {
                      if (mult.length) {
                        elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
                      } else {
                        elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
                      }
                    }
                    if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
                      if (mult.length) {
                        sw += animatorProps.sw.v * mult[0];
                      } else {
                        sw += animatorProps.sw.v * mult;
                      }
                    }
                    if (documentData.strokeColorAnim && animatorProps.sc.propType) {
                      for (k = 0; k < 3; k += 1) {
                        if (mult.length) {
                          sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult[0];
                        } else {
                          sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult;
                        }
                      }
                    }
                    if (documentData.fillColorAnim && documentData.fc) {
                      if (animatorProps.fc.propType) {
                        for (k = 0; k < 3; k += 1) {
                          if (mult.length) {
                            fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult[0];
                          } else {
                            fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult;
                          }
                        }
                      }
                      if (animatorProps.fh.propType) {
                        if (mult.length) {
                          fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
                        } else {
                          fc = addHueToRGB(fc, animatorProps.fh.v * mult);
                        }
                      }
                      if (animatorProps.fs.propType) {
                        if (mult.length) {
                          fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
                        } else {
                          fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
                        }
                      }
                      if (animatorProps.fb.propType) {
                        if (mult.length) {
                          fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
                        } else {
                          fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
                        }
                      }
                    }
                  }
                  for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.p.propType) {
                      animatorSelector = animators[j].s;
                      mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                      if (this._hasMaskedPath) {
                        if (mult.length) {
                          matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                        } else {
                          matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                        }
                      } else if (mult.length) {
                        matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
                      } else {
                        matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                      }
                    }
                  }
                  if (documentData.strokeWidthAnim) {
                    letterSw = sw < 0 ? 0 : sw;
                  }
                  if (documentData.strokeColorAnim) {
                    letterSc = 'rgb(' + Math.round(sc[0] * 255) + ',' + Math.round(sc[1] * 255) + ',' + Math.round(sc[2] * 255) + ')';
                  }
                  if (documentData.fillColorAnim && documentData.fc) {
                    letterFc = 'rgb(' + Math.round(fc[0] * 255) + ',' + Math.round(fc[1] * 255) + ',' + Math.round(fc[2] * 255) + ')';
                  }
                  if (this._hasMaskedPath) {
                    matrixHelper.translate(0, -documentData.ls);
                    matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);
                    if (this._pathData.p.v) {
                      tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
                      var rot = Math.atan(tanAngle) * 180 / Math.PI;
                      if (currentPoint.point[0] < prevPoint.point[0]) {
                        rot += 180;
                      }
                      matrixHelper.rotate(-rot * Math.PI / 180);
                    }
                    matrixHelper.translate(xPathPos, yPathPos, 0);
                    currentLength -= alignment[0] * letters[i].an * 0.005;
                    if (letters[i + 1] && ind !== letters[i + 1].ind) {
                      currentLength += letters[i].an / 2;
                      currentLength += documentData.tr * 0.001 * documentData.finalSize;
                    }
                  } else {
                    matrixHelper.translate(xPos, yPos, 0);
                    if (documentData.ps) {
                      // matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
                      matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
                    }
                    switch (documentData.j) {
                      case 1:
                        matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]), 0, 0);
                        break;
                      case 2:
                        matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]) / 2, 0, 0);
                        break;
                    }
                    matrixHelper.translate(0, -documentData.ls);
                    matrixHelper.translate(offf, 0, 0);
                    matrixHelper.translate(alignment[0] * letters[i].an * 0.005, alignment[1] * yOff * 0.01, 0);
                    xPos += letters[i].l + documentData.tr * 0.001 * documentData.finalSize;
                  }
                  if (renderType === 'html') {
                    letterM = matrixHelper.toCSS();
                  } else if (renderType === 'svg') {
                    letterM = matrixHelper.to2dCSS();
                  } else {
                    letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
                  }
                  letterO = elemOpacity;
                }
                if (renderedLettersCount <= i) {
                  letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
                  this.renderedLetters.push(letterValue);
                  renderedLettersCount += 1;
                  this.lettersChangedFlag = true;
                } else {
                  letterValue = this.renderedLetters[i];
                  this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
                }
              }
            };
            TextAnimatorProperty.prototype.getValue = function () {
              if (this._elem.globalData.frameId === this._frameId) {
                return;
              }
              this._frameId = this._elem.globalData.frameId;
              this.iterateDynamicProperties();
            };
            TextAnimatorProperty.prototype.mHelper = new Matrix();
            TextAnimatorProperty.prototype.defaultPropsArray = [];
            extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
            function ITextElement() {}
            ITextElement.prototype.initElement = function (data, globalData, comp) {
              this.lettersChangedFlag = true;
              this.initFrame();
              this.initBaseData(data, globalData, comp);
              this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);
              this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);
              this.initTransform(data, globalData, comp);
              this.initHierarchy();
              this.initRenderable();
              this.initRendererElement();
              this.createContainerElements();
              this.createRenderableComponents();
              this.createContent();
              this.hide();
              this.textAnimator.searchProperties(this.dynamicProperties);
            };
            ITextElement.prototype.prepareFrame = function (num) {
              this._mdf = false;
              this.prepareRenderableFrame(num);
              this.prepareProperties(num, this.isInRange);
            };
            ITextElement.prototype.createPathShape = function (matrixHelper, shapes) {
              var j;
              var jLen = shapes.length;
              var pathNodes;
              var shapeStr = '';
              for (j = 0; j < jLen; j += 1) {
                if (shapes[j].ty === 'sh') {
                  pathNodes = shapes[j].ks.k;
                  shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
                }
              }
              return shapeStr;
            };
            ITextElement.prototype.updateDocumentData = function (newData, index) {
              this.textProperty.updateDocumentData(newData, index);
            };
            ITextElement.prototype.canResizeFont = function (_canResize) {
              this.textProperty.canResizeFont(_canResize);
            };
            ITextElement.prototype.setMinimumFontSize = function (_fontSize) {
              this.textProperty.setMinimumFontSize(_fontSize);
            };
            ITextElement.prototype.applyTextPropertiesToMatrix = function (documentData, matrixHelper, lineNumber, xPos, yPos) {
              if (documentData.ps) {
                matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
              }
              matrixHelper.translate(0, -documentData.ls, 0);
              switch (documentData.j) {
                case 1:
                  matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
                  break;
                case 2:
                  matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
                  break;
              }
              matrixHelper.translate(xPos, yPos, 0);
            };
            ITextElement.prototype.buildColor = function (colorData) {
              return 'rgb(' + Math.round(colorData[0] * 255) + ',' + Math.round(colorData[1] * 255) + ',' + Math.round(colorData[2] * 255) + ')';
            };
            ITextElement.prototype.emptyProp = new LetterProps();
            ITextElement.prototype.destroy = function () {};
            ITextElement.prototype.validateText = function () {
              if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
                this.buildNewText();
                this.textProperty._isFirstFrame = false;
                this.textProperty._mdf = false;
              }
            };
            var emptyShapeData = {
              shapes: []
            };
            function SVGTextLottieElement(data, globalData, comp) {
              this.textSpans = [];
              this.renderType = 'svg';
              this.initElement(data, globalData, comp);
            }
            extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextLottieElement);
            SVGTextLottieElement.prototype.createContent = function () {
              if (this.data.singleShape && !this.globalData.fontManager.chars) {
                this.textContainer = createNS('text');
              }
            };
            SVGTextLottieElement.prototype.buildTextContents = function (textArray) {
              var i = 0;
              var len = textArray.length;
              var textContents = [];
              var currentTextContent = '';
              while (i < len) {
                if (textArray[i] === String.fromCharCode(13) || textArray[i] === String.fromCharCode(3)) {
                  textContents.push(currentTextContent);
                  currentTextContent = '';
                } else {
                  currentTextContent += textArray[i];
                }
                i += 1;
              }
              textContents.push(currentTextContent);
              return textContents;
            };
            SVGTextLottieElement.prototype.buildShapeData = function (data, scale) {
              // data should probably be cloned to apply scale separately to each instance of a text on different layers
              // but since text internal content gets only rendered once and then it's never rerendered,
              // it's probably safe not to clone data and reuse always the same instance even if the object is mutated.
              // Avoiding cloning is preferred since cloning each character shape data is expensive
              if (data.shapes && data.shapes.length) {
                var shape = data.shapes[0];
                if (shape.it) {
                  var shapeItem = shape.it[shape.it.length - 1];
                  if (shapeItem.s) {
                    shapeItem.s.k[0] = scale;
                    shapeItem.s.k[1] = scale;
                  }
                }
              }
              return data;
            };
            SVGTextLottieElement.prototype.buildNewText = function () {
              this.addDynamicProperty(this);
              var i;
              var len;
              var documentData = this.textProperty.currentData;
              this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
              if (documentData.fc) {
                this.layerElement.setAttribute('fill', this.buildColor(documentData.fc));
              } else {
                this.layerElement.setAttribute('fill', 'rgba(0,0,0,0)');
              }
              if (documentData.sc) {
                this.layerElement.setAttribute('stroke', this.buildColor(documentData.sc));
                this.layerElement.setAttribute('stroke-width', documentData.sw);
              }
              this.layerElement.setAttribute('font-size', documentData.finalSize);
              var fontData = this.globalData.fontManager.getFontByName(documentData.f);
              if (fontData.fClass) {
                this.layerElement.setAttribute('class', fontData.fClass);
              } else {
                this.layerElement.setAttribute('font-family', fontData.fFamily);
                var fWeight = documentData.fWeight;
                var fStyle = documentData.fStyle;
                this.layerElement.setAttribute('font-style', fStyle);
                this.layerElement.setAttribute('font-weight', fWeight);
              }
              this.layerElement.setAttribute('aria-label', documentData.t);
              var letters = documentData.l || [];
              var usesGlyphs = !!this.globalData.fontManager.chars;
              len = letters.length;
              var tSpan;
              var matrixHelper = this.mHelper;
              var shapeStr = '';
              var singleShape = this.data.singleShape;
              var xPos = 0;
              var yPos = 0;
              var firstLine = true;
              var trackingOffset = documentData.tr * 0.001 * documentData.finalSize;
              if (singleShape && !usesGlyphs && !documentData.sz) {
                var tElement = this.textContainer;
                var justify = 'start';
                switch (documentData.j) {
                  case 1:
                    justify = 'end';
                    break;
                  case 2:
                    justify = 'middle';
                    break;
                  default:
                    justify = 'start';
                    break;
                }
                tElement.setAttribute('text-anchor', justify);
                tElement.setAttribute('letter-spacing', trackingOffset);
                var textContent = this.buildTextContents(documentData.finalText);
                len = textContent.length;
                yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
                for (i = 0; i < len; i += 1) {
                  tSpan = this.textSpans[i].span || createNS('tspan');
                  tSpan.textContent = textContent[i];
                  tSpan.setAttribute('x', 0);
                  tSpan.setAttribute('y', yPos);
                  tSpan.style.display = 'inherit';
                  tElement.appendChild(tSpan);
                  if (!this.textSpans[i]) {
                    this.textSpans[i] = {
                      span: null,
                      glyph: null
                    };
                  }
                  this.textSpans[i].span = tSpan;
                  yPos += documentData.finalLineHeight;
                }
                this.layerElement.appendChild(tElement);
              } else {
                var cachedSpansLength = this.textSpans.length;
                var charData;
                for (i = 0; i < len; i += 1) {
                  if (!this.textSpans[i]) {
                    this.textSpans[i] = {
                      span: null,
                      childSpan: null,
                      glyph: null
                    };
                  }
                  if (!usesGlyphs || !singleShape || i === 0) {
                    tSpan = cachedSpansLength > i ? this.textSpans[i].span : createNS(usesGlyphs ? 'g' : 'text');
                    if (cachedSpansLength <= i) {
                      tSpan.setAttribute('stroke-linecap', 'butt');
                      tSpan.setAttribute('stroke-linejoin', 'round');
                      tSpan.setAttribute('stroke-miterlimit', '4');
                      this.textSpans[i].span = tSpan;
                      if (usesGlyphs) {
                        var childSpan = createNS('g');
                        tSpan.appendChild(childSpan);
                        this.textSpans[i].childSpan = childSpan;
                      }
                      this.textSpans[i].span = tSpan;
                      this.layerElement.appendChild(tSpan);
                    }
                    tSpan.style.display = 'inherit';
                  }
                  matrixHelper.reset();
                  if (singleShape) {
                    if (letters[i].n) {
                      xPos = -trackingOffset;
                      yPos += documentData.yOffset;
                      yPos += firstLine ? 1 : 0;
                      firstLine = false;
                    }
                    this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
                    xPos += letters[i].l || 0; // xPos += letters[i].val === ' ' ? 0 : trackingOffset;

                    xPos += trackingOffset;
                  }
                  if (usesGlyphs) {
                    charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                    var glyphElement; // t === 1 means the character has been replaced with an animated shaped

                    if (charData.t === 1) {
                      glyphElement = new SVGCompElement(charData.data, this.globalData, this);
                    } else {
                      var data = emptyShapeData;
                      if (charData.data && charData.data.shapes) {
                        data = this.buildShapeData(charData.data, documentData.finalSize);
                      }
                      glyphElement = new SVGShapeElement(data, this.globalData, this);
                    }
                    if (this.textSpans[i].glyph) {
                      var glyph = this.textSpans[i].glyph;
                      this.textSpans[i].childSpan.removeChild(glyph.layerElement);
                      glyph.destroy();
                    }
                    this.textSpans[i].glyph = glyphElement;
                    glyphElement._debug = true;
                    glyphElement.prepareFrame(0);
                    glyphElement.renderFrame();
                    this.textSpans[i].childSpan.appendChild(glyphElement.layerElement); // when using animated shapes, the layer will be scaled instead of replacing the internal scale
                    // this might have issues with strokes and might need a different solution

                    if (charData.t === 1) {
                      this.textSpans[i].childSpan.setAttribute('transform', 'scale(' + documentData.finalSize / 100 + ',' + documentData.finalSize / 100 + ')');
                    }
                  } else {
                    if (singleShape) {
                      tSpan.setAttribute('transform', 'translate(' + matrixHelper.props[12] + ',' + matrixHelper.props[13] + ')');
                    }
                    tSpan.textContent = letters[i].val;
                    tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');
                  } //
                }

                if (singleShape && tSpan) {
                  tSpan.setAttribute('d', shapeStr);
                }
              }
              while (i < this.textSpans.length) {
                this.textSpans[i].span.style.display = 'none';
                i += 1;
              }
              this._sizeChanged = true;
            };
            SVGTextLottieElement.prototype.sourceRectAtTime = function () {
              this.prepareFrame(this.comp.renderedFrame - this.data.st);
              this.renderInnerContent();
              if (this._sizeChanged) {
                this._sizeChanged = false;
                var textBox = this.layerElement.getBBox();
                this.bbox = {
                  top: textBox.y,
                  left: textBox.x,
                  width: textBox.width,
                  height: textBox.height
                };
              }
              return this.bbox;
            };
            SVGTextLottieElement.prototype.getValue = function () {
              var i;
              var len = this.textSpans.length;
              var glyphElement;
              this.renderedFrame = this.comp.renderedFrame;
              for (i = 0; i < len; i += 1) {
                glyphElement = this.textSpans[i].glyph;
                if (glyphElement) {
                  glyphElement.prepareFrame(this.comp.renderedFrame - this.data.st);
                  if (glyphElement._mdf) {
                    this._mdf = true;
                  }
                }
              }
            };
            SVGTextLottieElement.prototype.renderInnerContent = function () {
              this.validateText();
              if (!this.data.singleShape || this._mdf) {
                this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
                if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
                  this._sizeChanged = true;
                  var i;
                  var len;
                  var renderedLetters = this.textAnimator.renderedLetters;
                  var letters = this.textProperty.currentData.l;
                  len = letters.length;
                  var renderedLetter;
                  var textSpan;
                  var glyphElement;
                  for (i = 0; i < len; i += 1) {
                    if (!letters[i].n) {
                      renderedLetter = renderedLetters[i];
                      textSpan = this.textSpans[i].span;
                      glyphElement = this.textSpans[i].glyph;
                      if (glyphElement) {
                        glyphElement.renderFrame();
                      }
                      if (renderedLetter._mdf.m) {
                        textSpan.setAttribute('transform', renderedLetter.m);
                      }
                      if (renderedLetter._mdf.o) {
                        textSpan.setAttribute('opacity', renderedLetter.o);
                      }
                      if (renderedLetter._mdf.sw) {
                        textSpan.setAttribute('stroke-width', renderedLetter.sw);
                      }
                      if (renderedLetter._mdf.sc) {
                        textSpan.setAttribute('stroke', renderedLetter.sc);
                      }
                      if (renderedLetter._mdf.fc) {
                        textSpan.setAttribute('fill', renderedLetter.fc);
                      }
                    }
                  }
                }
              }
            };
            function ISolidElement(data, globalData, comp) {
              this.initElement(data, globalData, comp);
            }
            extendPrototype([IImageElement], ISolidElement);
            ISolidElement.prototype.createContent = function () {
              var rect = createNS('rect'); /// /rect.style.width = this.data.sw;
              /// /rect.style.height = this.data.sh;
              /// /rect.style.fill = this.data.sc;

              rect.setAttribute('width', this.data.sw);
              rect.setAttribute('height', this.data.sh);
              rect.setAttribute('fill', this.data.sc);
              this.layerElement.appendChild(rect);
            };
            function NullElement(data, globalData, comp) {
              this.initFrame();
              this.initBaseData(data, globalData, comp);
              this.initFrame();
              this.initTransform(data, globalData, comp);
              this.initHierarchy();
            }
            NullElement.prototype.prepareFrame = function (num) {
              this.prepareProperties(num, true);
            };
            NullElement.prototype.renderFrame = function () {};
            NullElement.prototype.getBaseElement = function () {
              return null;
            };
            NullElement.prototype.destroy = function () {};
            NullElement.prototype.sourceRectAtTime = function () {};
            NullElement.prototype.hide = function () {};
            extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);
            function SVGRendererBase() {}
            extendPrototype([BaseRenderer], SVGRendererBase);
            SVGRendererBase.prototype.createNull = function (data) {
              return new NullElement(data, this.globalData, this);
            };
            SVGRendererBase.prototype.createShape = function (data) {
              return new SVGShapeElement(data, this.globalData, this);
            };
            SVGRendererBase.prototype.createText = function (data) {
              return new SVGTextLottieElement(data, this.globalData, this);
            };
            SVGRendererBase.prototype.createImage = function (data) {
              return new IImageElement(data, this.globalData, this);
            };
            SVGRendererBase.prototype.createSolid = function (data) {
              return new ISolidElement(data, this.globalData, this);
            };
            SVGRendererBase.prototype.configAnimation = function (animData) {
              this.svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
              this.svgElement.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');
              if (this.renderConfig.viewBoxSize) {
                this.svgElement.setAttribute('viewBox', this.renderConfig.viewBoxSize);
              } else {
                this.svgElement.setAttribute('viewBox', '0 0 ' + animData.w + ' ' + animData.h);
              }
              if (!this.renderConfig.viewBoxOnly) {
                this.svgElement.setAttribute('width', animData.w);
                this.svgElement.setAttribute('height', animData.h);
                this.svgElement.style.width = '100%';
                this.svgElement.style.height = '100%';
                this.svgElement.style.transform = 'translate3d(0,0,0)';
                this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;
              }
              if (this.renderConfig.width) {
                this.svgElement.setAttribute('width', this.renderConfig.width);
              }
              if (this.renderConfig.height) {
                this.svgElement.setAttribute('height', this.renderConfig.height);
              }
              if (this.renderConfig.className) {
                this.svgElement.setAttribute('class', this.renderConfig.className);
              }
              if (this.renderConfig.id) {
                this.svgElement.setAttribute('id', this.renderConfig.id);
              }
              if (this.renderConfig.focusable !== undefined) {
                this.svgElement.setAttribute('focusable', this.renderConfig.focusable);
              }
              this.svgElement.setAttribute('preserveAspectRatio', this.renderConfig.preserveAspectRatio); // this.layerElement.style.transform = 'translate3d(0,0,0)';
              // this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";

              this.animationItem.wrapper.appendChild(this.svgElement); // Mask animation

              var defs = this.globalData.defs;
              this.setupGlobalData(animData, defs);
              this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
              this.data = animData;
              var maskElement = createNS('clipPath');
              var rect = createNS('rect');
              rect.setAttribute('width', animData.w);
              rect.setAttribute('height', animData.h);
              rect.setAttribute('x', 0);
              rect.setAttribute('y', 0);
              var maskId = createElementID();
              maskElement.setAttribute('id', maskId);
              maskElement.appendChild(rect);
              this.layerElement.setAttribute('clip-path', 'url(' + getLocationHref() + '#' + maskId + ')');
              defs.appendChild(maskElement);
              this.layers = animData.layers;
              this.elements = createSizedArray(animData.layers.length);
            };
            SVGRendererBase.prototype.destroy = function () {
              if (this.animationItem.wrapper) {
                this.animationItem.wrapper.innerText = '';
              }
              this.layerElement = null;
              this.globalData.defs = null;
              var i;
              var len = this.layers ? this.layers.length : 0;
              for (i = 0; i < len; i += 1) {
                if (this.elements[i] && this.elements[i].destroy) {
                  this.elements[i].destroy();
                }
              }
              this.elements.length = 0;
              this.destroyed = true;
              this.animationItem = null;
            };
            SVGRendererBase.prototype.updateContainerSize = function () {};
            SVGRendererBase.prototype.findIndexByInd = function (ind) {
              var i = 0;
              var len = this.layers.length;
              for (i = 0; i < len; i += 1) {
                if (this.layers[i].ind === ind) {
                  return i;
                }
              }
              return -1;
            };
            SVGRendererBase.prototype.buildItem = function (pos) {
              var elements = this.elements;
              if (elements[pos] || this.layers[pos].ty === 99) {
                return;
              }
              elements[pos] = true;
              var element = this.createItem(this.layers[pos]);
              elements[pos] = element;
              if (getExpressionsPlugin()) {
                if (this.layers[pos].ty === 0) {
                  this.globalData.projectInterface.registerComposition(element);
                }
                element.initExpressions();
              }
              this.appendElementInPos(element, pos);
              if (this.layers[pos].tt) {
                var elementIndex = 'tp' in this.layers[pos] ? this.findIndexByInd(this.layers[pos].tp) : pos - 1;
                if (elementIndex === -1) {
                  return;
                }
                if (!this.elements[elementIndex] || this.elements[elementIndex] === true) {
                  this.buildItem(elementIndex);
                  this.addPendingElement(element);
                } else {
                  var matteElement = elements[elementIndex];
                  var matteMask = matteElement.getMatte(this.layers[pos].tt);
                  element.setMatte(matteMask);
                }
              }
            };
            SVGRendererBase.prototype.checkPendingElements = function () {
              while (this.pendingElements.length) {
                var element = this.pendingElements.pop();
                element.checkParenting();
                if (element.data.tt) {
                  var i = 0;
                  var len = this.elements.length;
                  while (i < len) {
                    if (this.elements[i] === element) {
                      var elementIndex = 'tp' in element.data ? this.findIndexByInd(element.data.tp) : i - 1;
                      var matteElement = this.elements[elementIndex];
                      var matteMask = matteElement.getMatte(this.layers[i].tt);
                      element.setMatte(matteMask);
                      break;
                    }
                    i += 1;
                  }
                }
              }
            };
            SVGRendererBase.prototype.renderFrame = function (num) {
              if (this.renderedFrame === num || this.destroyed) {
                return;
              }
              if (num === null) {
                num = this.renderedFrame;
              } else {
                this.renderedFrame = num;
              } // console.log('-------');
              // console.log('FRAME ',num);

              this.globalData.frameNum = num;
              this.globalData.frameId += 1;
              this.globalData.projectInterface.currentFrame = num;
              this.globalData._mdf = false;
              var i;
              var len = this.layers.length;
              if (!this.completeLayers) {
                this.checkLayers(num);
              }
              for (i = len - 1; i >= 0; i -= 1) {
                if (this.completeLayers || this.elements[i]) {
                  this.elements[i].prepareFrame(num - this.layers[i].st);
                }
              }
              if (this.globalData._mdf) {
                for (i = 0; i < len; i += 1) {
                  if (this.completeLayers || this.elements[i]) {
                    this.elements[i].renderFrame();
                  }
                }
              }
            };
            SVGRendererBase.prototype.appendElementInPos = function (element, pos) {
              var newElement = element.getBaseElement();
              if (!newElement) {
                return;
              }
              var i = 0;
              var nextElement;
              while (i < pos) {
                if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement()) {
                  nextElement = this.elements[i].getBaseElement();
                }
                i += 1;
              }
              if (nextElement) {
                this.layerElement.insertBefore(newElement, nextElement);
              } else {
                this.layerElement.appendChild(newElement);
              }
            };
            SVGRendererBase.prototype.hide = function () {
              this.layerElement.style.display = 'none';
            };
            SVGRendererBase.prototype.show = function () {
              this.layerElement.style.display = 'block';
            };
            function ICompElement() {}
            extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);
            ICompElement.prototype.initElement = function (data, globalData, comp) {
              this.initFrame();
              this.initBaseData(data, globalData, comp);
              this.initTransform(data, globalData, comp);
              this.initRenderable();
              this.initHierarchy();
              this.initRendererElement();
              this.createContainerElements();
              this.createRenderableComponents();
              if (this.data.xt || !globalData.progressiveLoad) {
                this.buildAllItems();
              }
              this.hide();
            };
            /* ICompElement.prototype.hide = function(){
                if(!this.hidden){
                    this.hideElement();
                    var i,len = this.elements.length;
                    for( i = 0; i < len; i+=1 ){
                        if(this.elements[i]){
                            this.elements[i].hide();
                        }
                    }
                }
            }; */

            ICompElement.prototype.prepareFrame = function (num) {
              this._mdf = false;
              this.prepareRenderableFrame(num);
              this.prepareProperties(num, this.isInRange);
              if (!this.isInRange && !this.data.xt) {
                return;
              }
              if (!this.tm._placeholder) {
                var timeRemapped = this.tm.v;
                if (timeRemapped === this.data.op) {
                  timeRemapped = this.data.op - 1;
                }
                this.renderedFrame = timeRemapped;
              } else {
                this.renderedFrame = num / this.data.sr;
              }
              var i;
              var len = this.elements.length;
              if (!this.completeLayers) {
                this.checkLayers(this.renderedFrame);
              } // This iteration needs to be backwards because of how expressions connect between each other

              for (i = len - 1; i >= 0; i -= 1) {
                if (this.completeLayers || this.elements[i]) {
                  this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);
                  if (this.elements[i]._mdf) {
                    this._mdf = true;
                  }
                }
              }
            };
            ICompElement.prototype.renderInnerContent = function () {
              var i;
              var len = this.layers.length;
              for (i = 0; i < len; i += 1) {
                if (this.completeLayers || this.elements[i]) {
                  this.elements[i].renderFrame();
                }
              }
            };
            ICompElement.prototype.setElements = function (elems) {
              this.elements = elems;
            };
            ICompElement.prototype.getElements = function () {
              return this.elements;
            };
            ICompElement.prototype.destroyElements = function () {
              var i;
              var len = this.layers.length;
              for (i = 0; i < len; i += 1) {
                if (this.elements[i]) {
                  this.elements[i].destroy();
                }
              }
            };
            ICompElement.prototype.destroy = function () {
              this.destroyElements();
              this.destroyBaseElement();
            };
            function SVGCompElement(data, globalData, comp) {
              this.layers = data.layers;
              this.supports3d = true;
              this.completeLayers = false;
              this.pendingElements = [];
              this.elements = this.layers ? createSizedArray(this.layers.length) : [];
              this.initElement(data, globalData, comp);
              this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
                _placeholder: true
              };
            }
            extendPrototype([SVGRendererBase, ICompElement, SVGBaseElement], SVGCompElement);
            SVGCompElement.prototype.createComp = function (data) {
              return new SVGCompElement(data, this.globalData, this);
            };
            function SVGRenderer(animationItem, config) {
              this.animationItem = animationItem;
              this.layers = null;
              this.renderedFrame = -1;
              this.svgElement = createNS('svg');
              var ariaLabel = '';
              if (config && config.title) {
                var titleElement = createNS('title');
                var titleId = createElementID();
                titleElement.setAttribute('id', titleId);
                titleElement.textContent = config.title;
                this.svgElement.appendChild(titleElement);
                ariaLabel += titleId;
              }
              if (config && config.description) {
                var descElement = createNS('desc');
                var descId = createElementID();
                descElement.setAttribute('id', descId);
                descElement.textContent = config.description;
                this.svgElement.appendChild(descElement);
                ariaLabel += ' ' + descId;
              }
              if (ariaLabel) {
                this.svgElement.setAttribute('aria-labelledby', ariaLabel);
              }
              var defs = createNS('defs');
              this.svgElement.appendChild(defs);
              var maskElement = createNS('g');
              this.svgElement.appendChild(maskElement);
              this.layerElement = maskElement;
              this.renderConfig = {
                preserveAspectRatio: config && config.preserveAspectRatio || 'xMidYMid meet',
                imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
                contentVisibility: config && config.contentVisibility || 'visible',
                progressiveLoad: config && config.progressiveLoad || false,
                hideOnTransparent: !(config && config.hideOnTransparent === false),
                viewBoxOnly: config && config.viewBoxOnly || false,
                viewBoxSize: config && config.viewBoxSize || false,
                className: config && config.className || '',
                id: config && config.id || '',
                focusable: config && config.focusable,
                filterSize: {
                  width: config && config.filterSize && config.filterSize.width || '100%',
                  height: config && config.filterSize && config.filterSize.height || '100%',
                  x: config && config.filterSize && config.filterSize.x || '0%',
                  y: config && config.filterSize && config.filterSize.y || '0%'
                },
                width: config && config.width,
                height: config && config.height,
                runExpressions: !config || config.runExpressions === undefined || config.runExpressions
              };
              this.globalData = {
                _mdf: false,
                frameNum: -1,
                defs: defs,
                renderConfig: this.renderConfig
              };
              this.elements = [];
              this.pendingElements = [];
              this.destroyed = false;
              this.rendererType = 'svg';
            }
            extendPrototype([SVGRendererBase], SVGRenderer);
            SVGRenderer.prototype.createComp = function (data) {
              return new SVGCompElement(data, this.globalData, this);
            };
            function ShapeTransformManager() {
              this.sequences = {};
              this.sequenceList = [];
              this.transform_key_count = 0;
            }
            ShapeTransformManager.prototype = {
              addTransformSequence: function addTransformSequence(transforms) {
                var i;
                var len = transforms.length;
                var key = '_';
                for (i = 0; i < len; i += 1) {
                  key += transforms[i].transform.key + '_';
                }
                var sequence = this.sequences[key];
                if (!sequence) {
                  sequence = {
                    transforms: [].concat(transforms),
                    finalTransform: new Matrix(),
                    _mdf: false
                  };
                  this.sequences[key] = sequence;
                  this.sequenceList.push(sequence);
                }
                return sequence;
              },
              processSequence: function processSequence(sequence, isFirstFrame) {
                var i = 0;
                var len = sequence.transforms.length;
                var _mdf = isFirstFrame;
                while (i < len && !isFirstFrame) {
                  if (sequence.transforms[i].transform.mProps._mdf) {
                    _mdf = true;
                    break;
                  }
                  i += 1;
                }
                if (_mdf) {
                  sequence.finalTransform.reset();
                  for (i = len - 1; i >= 0; i -= 1) {
                    sequence.finalTransform.multiply(sequence.transforms[i].transform.mProps.v);
                  }
                }
                sequence._mdf = _mdf;
              },
              processSequences: function processSequences(isFirstFrame) {
                var i;
                var len = this.sequenceList.length;
                for (i = 0; i < len; i += 1) {
                  this.processSequence(this.sequenceList[i], isFirstFrame);
                }
              },
              getNewKey: function getNewKey() {
                this.transform_key_count += 1;
                return '_' + this.transform_key_count;
              }
            };
            var lumaLoader = function lumaLoader() {
              var id = '__lottie_element_luma_buffer';
              var lumaBuffer = null;
              var lumaBufferCtx = null;
              var svg = null; // This alternate solution has a slight delay before the filter is applied, resulting in a flicker on the first frame.
              // Keeping this here for reference, and in the future, if offscreen canvas supports url filters, this can be used.
              // For now, neither of them work for offscreen canvas, so canvas workers can't support the luma track matte mask.
              // Naming it solution 2 to mark the extra comment lines.

              /*
              var svgString = [
                '<svg xmlns="http://www.w3.org/2000/svg">',
                '<filter id="' + id + '">',
                '<feColorMatrix type="matrix" color-interpolation-filters="sRGB" values="',
                '0.3, 0.3, 0.3, 0, 0, ',
                '0.3, 0.3, 0.3, 0, 0, ',
                '0.3, 0.3, 0.3, 0, 0, ',
                '0.3, 0.3, 0.3, 0, 0',
                '"/>',
                '</filter>',
                '</svg>',
              ].join('');
              var blob = new Blob([svgString], { type: 'image/svg+xml' });
              var url = URL.createObjectURL(blob);
              */

              function createLumaSvgFilter() {
                var _svg = createNS('svg');
                var fil = createNS('filter');
                var matrix = createNS('feColorMatrix');
                fil.setAttribute('id', id);
                matrix.setAttribute('type', 'matrix');
                matrix.setAttribute('color-interpolation-filters', 'sRGB');
                matrix.setAttribute('values', '0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0');
                fil.appendChild(matrix);
                _svg.appendChild(fil);
                _svg.setAttribute('id', id + '_svg');
                if (featureSupport.svgLumaHidden) {
                  _svg.style.display = 'none';
                }
                return _svg;
              }
              function loadLuma() {
                if (!lumaBuffer) {
                  svg = createLumaSvgFilter();
                  document.body.appendChild(svg);
                  lumaBuffer = createTag('canvas');
                  lumaBufferCtx = lumaBuffer.getContext('2d'); // lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2

                  lumaBufferCtx.filter = 'url(#' + id + ')';
                  lumaBufferCtx.fillStyle = 'rgba(0,0,0,0)';
                  lumaBufferCtx.fillRect(0, 0, 1, 1);
                }
              }
              function getLuma(canvas) {
                if (!lumaBuffer) {
                  loadLuma();
                }
                lumaBuffer.width = canvas.width;
                lumaBuffer.height = canvas.height; // lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2

                lumaBufferCtx.filter = 'url(#' + id + ')';
                return lumaBuffer;
              }
              return {
                load: loadLuma,
                get: getLuma
              };
            };
            function createCanvas(width, height) {
              if (featureSupport.offscreenCanvas) {
                return new OffscreenCanvas(width, height);
              }
              var canvas = createTag('canvas');
              canvas.width = width;
              canvas.height = height;
              return canvas;
            }
            var assetLoader = function () {
              return {
                loadLumaCanvas: lumaLoader.load,
                getLumaCanvas: lumaLoader.get,
                createCanvas: createCanvas
              };
            }();
            var registeredEffects = {};
            function CVEffects(elem) {
              var i;
              var len = elem.data.ef ? elem.data.ef.length : 0;
              this.filters = [];
              var filterManager;
              for (i = 0; i < len; i += 1) {
                filterManager = null;
                var type = elem.data.ef[i].ty;
                if (registeredEffects[type]) {
                  var Effect = registeredEffects[type].effect;
                  filterManager = new Effect(elem.effectsManager.effectElements[i], elem);
                }
                if (filterManager) {
                  this.filters.push(filterManager);
                }
              }
              if (this.filters.length) {
                elem.addRenderableComponent(this);
              }
            }
            CVEffects.prototype.renderFrame = function (_isFirstFrame) {
              var i;
              var len = this.filters.length;
              for (i = 0; i < len; i += 1) {
                this.filters[i].renderFrame(_isFirstFrame);
              }
            };
            CVEffects.prototype.getEffects = function (type) {
              var i;
              var len = this.filters.length;
              var effects = [];
              for (i = 0; i < len; i += 1) {
                if (this.filters[i].type === type) {
                  effects.push(this.filters[i]);
                }
              }
              return effects;
            };
            function registerEffect(id, effect) {
              registeredEffects[id] = {
                effect: effect
              };
            }
            function CVMaskElement(data, element) {
              this.data = data;
              this.element = element;
              this.masksProperties = this.data.masksProperties || [];
              this.viewData = createSizedArray(this.masksProperties.length);
              var i;
              var len = this.masksProperties.length;
              var hasMasks = false;
              for (i = 0; i < len; i += 1) {
                if (this.masksProperties[i].mode !== 'n') {
                  hasMasks = true;
                }
                this.viewData[i] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i], 3);
              }
              this.hasMasks = hasMasks;
              if (hasMasks) {
                this.element.addRenderableComponent(this);
              }
            }
            CVMaskElement.prototype.renderFrame = function () {
              if (!this.hasMasks) {
                return;
              }
              var transform = this.element.finalTransform.mat;
              var ctx = this.element.canvasContext;
              var i;
              var len = this.masksProperties.length;
              var pt;
              var pts;
              var data;
              ctx.beginPath();
              for (i = 0; i < len; i += 1) {
                if (this.masksProperties[i].mode !== 'n') {
                  if (this.masksProperties[i].inv) {
                    ctx.moveTo(0, 0);
                    ctx.lineTo(this.element.globalData.compSize.w, 0);
                    ctx.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
                    ctx.lineTo(0, this.element.globalData.compSize.h);
                    ctx.lineTo(0, 0);
                  }
                  data = this.viewData[i].v;
                  pt = transform.applyToPointArray(data.v[0][0], data.v[0][1], 0);
                  ctx.moveTo(pt[0], pt[1]);
                  var j;
                  var jLen = data._length;
                  for (j = 1; j < jLen; j += 1) {
                    pts = transform.applyToTriplePoints(data.o[j - 1], data.i[j], data.v[j]);
                    ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
                  }
                  pts = transform.applyToTriplePoints(data.o[j - 1], data.i[0], data.v[0]);
                  ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
                }
              }
              this.element.globalData.renderer.save(true);
              ctx.clip();
            };
            CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;
            CVMaskElement.prototype.destroy = function () {
              this.element = null;
            };
            function CVBaseElement() {}
            var operationsMap = {
              1: 'source-in',
              2: 'source-out',
              3: 'source-in',
              4: 'source-out'
            };
            CVBaseElement.prototype = {
              createElements: function createElements() {},
              initRendererElement: function initRendererElement() {},
              createContainerElements: function createContainerElements() {
                // If the layer is masked we will use two buffers to store each different states of the drawing
                // This solution is not ideal for several reason. But unfortunately, because of the recursive
                // nature of the render tree, it's the only simple way to make sure one inner mask doesn't override an outer mask.
                // TODO: try to reduce the size of these buffers to the size of the composition contaning the layer
                // It might be challenging because the layer most likely is transformed in some way
                if (this.data.tt >= 1) {
                  this.buffers = [];
                  var canvasContext = this.globalData.canvasContext;
                  var bufferCanvas = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
                  this.buffers.push(bufferCanvas);
                  var bufferCanvas2 = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
                  this.buffers.push(bufferCanvas2);
                  if (this.data.tt >= 3 && !document._isProxy) {
                    assetLoader.loadLumaCanvas();
                  }
                }
                this.canvasContext = this.globalData.canvasContext;
                this.transformCanvas = this.globalData.transformCanvas;
                this.renderableEffectsManager = new CVEffects(this);
                this.searchEffectTransforms();
              },
              createContent: function createContent() {},
              setBlendMode: function setBlendMode() {
                var globalData = this.globalData;
                if (globalData.blendMode !== this.data.bm) {
                  globalData.blendMode = this.data.bm;
                  var blendModeValue = getBlendMode(this.data.bm);
                  globalData.canvasContext.globalCompositeOperation = blendModeValue;
                }
              },
              createRenderableComponents: function createRenderableComponents() {
                this.maskManager = new CVMaskElement(this.data, this);
                this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
              },
              hideElement: function hideElement() {
                if (!this.hidden && (!this.isInRange || this.isTransparent)) {
                  this.hidden = true;
                }
              },
              showElement: function showElement() {
                if (this.isInRange && !this.isTransparent) {
                  this.hidden = false;
                  this._isFirstFrame = true;
                  this.maskManager._isFirstFrame = true;
                }
              },
              clearCanvas: function clearCanvas(canvasContext) {
                canvasContext.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);
              },
              prepareLayer: function prepareLayer() {
                if (this.data.tt >= 1) {
                  var buffer = this.buffers[0];
                  var bufferCtx = buffer.getContext('2d');
                  this.clearCanvas(bufferCtx); // on the first buffer we store the current state of the global drawing

                  bufferCtx.drawImage(this.canvasContext.canvas, 0, 0); // The next four lines are to clear the canvas
                  // TODO: Check if there is a way to clear the canvas without resetting the transform

                  this.currentTransform = this.canvasContext.getTransform();
                  this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
                  this.clearCanvas(this.canvasContext);
                  this.canvasContext.setTransform(this.currentTransform);
                }
              },
              exitLayer: function exitLayer() {
                if (this.data.tt >= 1) {
                  var buffer = this.buffers[1]; // On the second buffer we store the current state of the global drawing
                  // that only contains the content of this layer
                  // (if it is a composition, it also includes the nested layers)

                  var bufferCtx = buffer.getContext('2d');
                  this.clearCanvas(bufferCtx);
                  bufferCtx.drawImage(this.canvasContext.canvas, 0, 0); // We clear the canvas again

                  this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
                  this.clearCanvas(this.canvasContext);
                  this.canvasContext.setTransform(this.currentTransform); // We draw the mask

                  var mask = this.comp.getElementById('tp' in this.data ? this.data.tp : this.data.ind - 1);
                  mask.renderFrame(true); // We draw the second buffer (that contains the content of this layer)

                  this.canvasContext.setTransform(1, 0, 0, 1, 0, 0); // If the mask is a Luma matte, we need to do two extra painting operations
                  // the _isProxy check is to avoid drawing a fake canvas in workers that will throw an error

                  if (this.data.tt >= 3 && !document._isProxy) {
                    // We copy the painted mask to a buffer that has a color matrix filter applied to it
                    // that applies the rgb values to the alpha channel
                    var lumaBuffer = assetLoader.getLumaCanvas(this.canvasContext.canvas);
                    var lumaBufferCtx = lumaBuffer.getContext('2d');
                    lumaBufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
                    this.clearCanvas(this.canvasContext); // we repaint the context with the mask applied to it

                    this.canvasContext.drawImage(lumaBuffer, 0, 0);
                  }
                  this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt];
                  this.canvasContext.drawImage(buffer, 0, 0); // We finally draw the first buffer (that contains the content of the global drawing)
                  // We use destination-over to draw the global drawing below the current layer

                  this.canvasContext.globalCompositeOperation = 'destination-over';
                  this.canvasContext.drawImage(this.buffers[0], 0, 0);
                  this.canvasContext.setTransform(this.currentTransform); // We reset the globalCompositeOperation to source-over, the standard type of operation

                  this.canvasContext.globalCompositeOperation = 'source-over';
                }
              },
              renderFrame: function renderFrame(forceRender) {
                if (this.hidden || this.data.hd) {
                  return;
                }
                if (this.data.td === 1 && !forceRender) {
                  return;
                }
                this.renderTransform();
                this.renderRenderable();
                this.renderLocalTransform();
                this.setBlendMode();
                var forceRealStack = this.data.ty === 0;
                this.prepareLayer();
                this.globalData.renderer.save(forceRealStack);
                this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);
                this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);
                this.renderInnerContent();
                this.globalData.renderer.restore(forceRealStack);
                this.exitLayer();
                if (this.maskManager.hasMasks) {
                  this.globalData.renderer.restore(true);
                }
                if (this._isFirstFrame) {
                  this._isFirstFrame = false;
                }
              },
              destroy: function destroy() {
                this.canvasContext = null;
                this.data = null;
                this.globalData = null;
                this.maskManager.destroy();
              },
              mHelper: new Matrix()
            };
            CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
            CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;
            function CVShapeData(element, data, styles, transformsManager) {
              this.styledShapes = [];
              this.tr = [0, 0, 0, 0, 0, 0];
              var ty = 4;
              if (data.ty === 'rc') {
                ty = 5;
              } else if (data.ty === 'el') {
                ty = 6;
              } else if (data.ty === 'sr') {
                ty = 7;
              }
              this.sh = ShapePropertyFactory.getShapeProp(element, data, ty, element);
              var i;
              var len = styles.length;
              var styledShape;
              for (i = 0; i < len; i += 1) {
                if (!styles[i].closed) {
                  styledShape = {
                    transforms: transformsManager.addTransformSequence(styles[i].transforms),
                    trNodes: []
                  };
                  this.styledShapes.push(styledShape);
                  styles[i].elements.push(styledShape);
                }
              }
            }
            CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;
            function CVShapeElement(data, globalData, comp) {
              this.shapes = [];
              this.shapesData = data.shapes;
              this.stylesList = [];
              this.itemsData = [];
              this.prevViewData = [];
              this.shapeModifiers = [];
              this.processedElements = [];
              this.transformsManager = new ShapeTransformManager();
              this.initElement(data, globalData, comp);
            }
            extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement);
            CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;
            CVShapeElement.prototype.transformHelper = {
              opacity: 1,
              _opMdf: false
            };
            CVShapeElement.prototype.dashResetter = [];
            CVShapeElement.prototype.createContent = function () {
              this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
            };
            CVShapeElement.prototype.createStyleElement = function (data, transforms) {
              var styleElem = {
                data: data,
                type: data.ty,
                preTransforms: this.transformsManager.addTransformSequence(transforms),
                transforms: [],
                elements: [],
                closed: data.hd === true
              };
              var elementData = {};
              if (data.ty === 'fl' || data.ty === 'st') {
                elementData.c = PropertyFactory.getProp(this, data.c, 1, 255, this);
                if (!elementData.c.k) {
                  styleElem.co = 'rgb(' + bmFloor(elementData.c.v[0]) + ',' + bmFloor(elementData.c.v[1]) + ',' + bmFloor(elementData.c.v[2]) + ')';
                }
              } else if (data.ty === 'gf' || data.ty === 'gs') {
                elementData.s = PropertyFactory.getProp(this, data.s, 1, null, this);
                elementData.e = PropertyFactory.getProp(this, data.e, 1, null, this);
                elementData.h = PropertyFactory.getProp(this, data.h || {
                  k: 0
                }, 0, 0.01, this);
                elementData.a = PropertyFactory.getProp(this, data.a || {
                  k: 0
                }, 0, degToRads, this);
                elementData.g = new GradientProperty(this, data.g, this);
              }
              elementData.o = PropertyFactory.getProp(this, data.o, 0, 0.01, this);
              if (data.ty === 'st' || data.ty === 'gs') {
                styleElem.lc = lineCapEnum[data.lc || 2];
                styleElem.lj = lineJoinEnum[data.lj || 2];
                if (data.lj == 1) {
                  // eslint-disable-line eqeqeq
                  styleElem.ml = data.ml;
                }
                elementData.w = PropertyFactory.getProp(this, data.w, 0, null, this);
                if (!elementData.w.k) {
                  styleElem.wi = elementData.w.v;
                }
                if (data.d) {
                  var d = new DashProperty(this, data.d, 'canvas', this);
                  elementData.d = d;
                  if (!elementData.d.k) {
                    styleElem.da = elementData.d.dashArray;
                    styleElem["do"] = elementData.d.dashoffset[0];
                  }
                }
              } else {
                styleElem.r = data.r === 2 ? 'evenodd' : 'nonzero';
              }
              this.stylesList.push(styleElem);
              elementData.style = styleElem;
              return elementData;
            };
            CVShapeElement.prototype.createGroupElement = function () {
              var elementData = {
                it: [],
                prevViewData: []
              };
              return elementData;
            };
            CVShapeElement.prototype.createTransformElement = function (data) {
              var elementData = {
                transform: {
                  opacity: 1,
                  _opMdf: false,
                  key: this.transformsManager.getNewKey(),
                  op: PropertyFactory.getProp(this, data.o, 0, 0.01, this),
                  mProps: TransformPropertyFactory.getTransformProperty(this, data, this)
                }
              };
              return elementData;
            };
            CVShapeElement.prototype.createShapeElement = function (data) {
              var elementData = new CVShapeData(this, data, this.stylesList, this.transformsManager);
              this.shapes.push(elementData);
              this.addShapeToModifiers(elementData);
              return elementData;
            };
            CVShapeElement.prototype.reloadShapes = function () {
              this._isFirstFrame = true;
              var i;
              var len = this.itemsData.length;
              for (i = 0; i < len; i += 1) {
                this.prevViewData[i] = this.itemsData[i];
              }
              this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
              len = this.dynamicProperties.length;
              for (i = 0; i < len; i += 1) {
                this.dynamicProperties[i].getValue();
              }
              this.renderModifiers();
              this.transformsManager.processSequences(this._isFirstFrame);
            };
            CVShapeElement.prototype.addTransformToStyleList = function (transform) {
              var i;
              var len = this.stylesList.length;
              for (i = 0; i < len; i += 1) {
                if (!this.stylesList[i].closed) {
                  this.stylesList[i].transforms.push(transform);
                }
              }
            };
            CVShapeElement.prototype.removeTransformFromStyleList = function () {
              var i;
              var len = this.stylesList.length;
              for (i = 0; i < len; i += 1) {
                if (!this.stylesList[i].closed) {
                  this.stylesList[i].transforms.pop();
                }
              }
            };
            CVShapeElement.prototype.closeStyles = function (styles) {
              var i;
              var len = styles.length;
              for (i = 0; i < len; i += 1) {
                styles[i].closed = true;
              }
            };
            CVShapeElement.prototype.searchShapes = function (arr, itemsData, prevViewData, shouldRender, transforms) {
              var i;
              var len = arr.length - 1;
              var j;
              var jLen;
              var ownStyles = [];
              var ownModifiers = [];
              var processedPos;
              var modifier;
              var currentTransform;
              var ownTransforms = [].concat(transforms);
              for (i = len; i >= 0; i -= 1) {
                processedPos = this.searchProcessedElement(arr[i]);
                if (!processedPos) {
                  arr[i]._shouldRender = shouldRender;
                } else {
                  itemsData[i] = prevViewData[processedPos - 1];
                }
                if (arr[i].ty === 'fl' || arr[i].ty === 'st' || arr[i].ty === 'gf' || arr[i].ty === 'gs') {
                  if (!processedPos) {
                    itemsData[i] = this.createStyleElement(arr[i], ownTransforms);
                  } else {
                    itemsData[i].style.closed = false;
                  }
                  ownStyles.push(itemsData[i].style);
                } else if (arr[i].ty === 'gr') {
                  if (!processedPos) {
                    itemsData[i] = this.createGroupElement(arr[i]);
                  } else {
                    jLen = itemsData[i].it.length;
                    for (j = 0; j < jLen; j += 1) {
                      itemsData[i].prevViewData[j] = itemsData[i].it[j];
                    }
                  }
                  this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, shouldRender, ownTransforms);
                } else if (arr[i].ty === 'tr') {
                  if (!processedPos) {
                    currentTransform = this.createTransformElement(arr[i]);
                    itemsData[i] = currentTransform;
                  }
                  ownTransforms.push(itemsData[i]);
                  this.addTransformToStyleList(itemsData[i]);
                } else if (arr[i].ty === 'sh' || arr[i].ty === 'rc' || arr[i].ty === 'el' || arr[i].ty === 'sr') {
                  if (!processedPos) {
                    itemsData[i] = this.createShapeElement(arr[i]);
                  }
                } else if (arr[i].ty === 'tm' || arr[i].ty === 'rd' || arr[i].ty === 'pb' || arr[i].ty === 'zz' || arr[i].ty === 'op') {
                  if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    modifier.init(this, arr[i]);
                    itemsData[i] = modifier;
                    this.shapeModifiers.push(modifier);
                  } else {
                    modifier = itemsData[i];
                    modifier.closed = false;
                  }
                  ownModifiers.push(modifier);
                } else if (arr[i].ty === 'rp') {
                  if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    itemsData[i] = modifier;
                    modifier.init(this, arr, i, itemsData);
                    this.shapeModifiers.push(modifier);
                    shouldRender = false;
                  } else {
                    modifier = itemsData[i];
                    modifier.closed = true;
                  }
                  ownModifiers.push(modifier);
                }
                this.addProcessedElement(arr[i], i + 1);
              }
              this.removeTransformFromStyleList();
              this.closeStyles(ownStyles);
              len = ownModifiers.length;
              for (i = 0; i < len; i += 1) {
                ownModifiers[i].closed = true;
              }
            };
            CVShapeElement.prototype.renderInnerContent = function () {
              this.transformHelper.opacity = 1;
              this.transformHelper._opMdf = false;
              this.renderModifiers();
              this.transformsManager.processSequences(this._isFirstFrame);
              this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);
            };
            CVShapeElement.prototype.renderShapeTransform = function (parentTransform, groupTransform) {
              if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
                groupTransform.opacity = parentTransform.opacity;
                groupTransform.opacity *= groupTransform.op.v;
                groupTransform._opMdf = true;
              }
            };
            CVShapeElement.prototype.drawLayer = function () {
              var i;
              var len = this.stylesList.length;
              var j;
              var jLen;
              var k;
              var kLen;
              var elems;
              var nodes;
              var renderer = this.globalData.renderer;
              var ctx = this.globalData.canvasContext;
              var type;
              var currentStyle;
              for (i = 0; i < len; i += 1) {
                currentStyle = this.stylesList[i];
                type = currentStyle.type; // Skipping style when
                // Stroke width equals 0
                // style should not be rendered (extra unused repeaters)
                // current opacity equals 0
                // global opacity equals 0

                if (!((type === 'st' || type === 'gs') && currentStyle.wi === 0 || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {
                  renderer.save();
                  elems = currentStyle.elements;
                  if (type === 'st' || type === 'gs') {
                    renderer.ctxStrokeStyle(type === 'st' ? currentStyle.co : currentStyle.grd); // ctx.strokeStyle = type === 'st' ? currentStyle.co : currentStyle.grd;

                    renderer.ctxLineWidth(currentStyle.wi); // ctx.lineWidth = currentStyle.wi;

                    renderer.ctxLineCap(currentStyle.lc); // ctx.lineCap = currentStyle.lc;

                    renderer.ctxLineJoin(currentStyle.lj); // ctx.lineJoin = currentStyle.lj;

                    renderer.ctxMiterLimit(currentStyle.ml || 0); // ctx.miterLimit = currentStyle.ml || 0;
                  } else {
                    renderer.ctxFillStyle(type === 'fl' ? currentStyle.co : currentStyle.grd); // ctx.fillStyle = type === 'fl' ? currentStyle.co : currentStyle.grd;
                  }

                  renderer.ctxOpacity(currentStyle.coOp);
                  if (type !== 'st' && type !== 'gs') {
                    ctx.beginPath();
                  }
                  renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);
                  jLen = elems.length;
                  for (j = 0; j < jLen; j += 1) {
                    if (type === 'st' || type === 'gs') {
                      ctx.beginPath();
                      if (currentStyle.da) {
                        ctx.setLineDash(currentStyle.da);
                        ctx.lineDashOffset = currentStyle["do"];
                      }
                    }
                    nodes = elems[j].trNodes;
                    kLen = nodes.length;
                    for (k = 0; k < kLen; k += 1) {
                      if (nodes[k].t === 'm') {
                        ctx.moveTo(nodes[k].p[0], nodes[k].p[1]);
                      } else if (nodes[k].t === 'c') {
                        ctx.bezierCurveTo(nodes[k].pts[0], nodes[k].pts[1], nodes[k].pts[2], nodes[k].pts[3], nodes[k].pts[4], nodes[k].pts[5]);
                      } else {
                        ctx.closePath();
                      }
                    }
                    if (type === 'st' || type === 'gs') {
                      // ctx.stroke();
                      renderer.ctxStroke();
                      if (currentStyle.da) {
                        ctx.setLineDash(this.dashResetter);
                      }
                    }
                  }
                  if (type !== 'st' && type !== 'gs') {
                    // ctx.fill(currentStyle.r);
                    this.globalData.renderer.ctxFill(currentStyle.r);
                  }
                  renderer.restore();
                }
              }
            };
            CVShapeElement.prototype.renderShape = function (parentTransform, items, data, isMain) {
              var i;
              var len = items.length - 1;
              var groupTransform;
              groupTransform = parentTransform;
              for (i = len; i >= 0; i -= 1) {
                if (items[i].ty === 'tr') {
                  groupTransform = data[i].transform;
                  this.renderShapeTransform(parentTransform, groupTransform);
                } else if (items[i].ty === 'sh' || items[i].ty === 'el' || items[i].ty === 'rc' || items[i].ty === 'sr') {
                  this.renderPath(items[i], data[i]);
                } else if (items[i].ty === 'fl') {
                  this.renderFill(items[i], data[i], groupTransform);
                } else if (items[i].ty === 'st') {
                  this.renderStroke(items[i], data[i], groupTransform);
                } else if (items[i].ty === 'gf' || items[i].ty === 'gs') {
                  this.renderGradientFill(items[i], data[i], groupTransform);
                } else if (items[i].ty === 'gr') {
                  this.renderShape(groupTransform, items[i].it, data[i].it);
                } else if (items[i].ty === 'tm') ;
              }
              if (isMain) {
                this.drawLayer();
              }
            };
            CVShapeElement.prototype.renderStyledShape = function (styledShape, shape) {
              if (this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {
                var shapeNodes = styledShape.trNodes;
                var paths = shape.paths;
                var i;
                var len;
                var j;
                var jLen = paths._length;
                shapeNodes.length = 0;
                var groupTransformMat = styledShape.transforms.finalTransform;
                for (j = 0; j < jLen; j += 1) {
                  var pathNodes = paths.shapes[j];
                  if (pathNodes && pathNodes.v) {
                    len = pathNodes._length;
                    for (i = 1; i < len; i += 1) {
                      if (i === 1) {
                        shapeNodes.push({
                          t: 'm',
                          p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                        });
                      }
                      shapeNodes.push({
                        t: 'c',
                        pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[i], pathNodes.v[i])
                      });
                    }
                    if (len === 1) {
                      shapeNodes.push({
                        t: 'm',
                        p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                      });
                    }
                    if (pathNodes.c && len) {
                      shapeNodes.push({
                        t: 'c',
                        pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[0], pathNodes.v[0])
                      });
                      shapeNodes.push({
                        t: 'z'
                      });
                    }
                  }
                }
                styledShape.trNodes = shapeNodes;
              }
            };
            CVShapeElement.prototype.renderPath = function (pathData, itemData) {
              if (pathData.hd !== true && pathData._shouldRender) {
                var i;
                var len = itemData.styledShapes.length;
                for (i = 0; i < len; i += 1) {
                  this.renderStyledShape(itemData.styledShapes[i], itemData.sh);
                }
              }
            };
            CVShapeElement.prototype.renderFill = function (styleData, itemData, groupTransform) {
              var styleElem = itemData.style;
              if (itemData.c._mdf || this._isFirstFrame) {
                styleElem.co = 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')';
              }
              if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
                styleElem.coOp = itemData.o.v * groupTransform.opacity;
              }
            };
            CVShapeElement.prototype.renderGradientFill = function (styleData, itemData, groupTransform) {
              var styleElem = itemData.style;
              var grd;
              if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf)) {
                var ctx = this.globalData.canvasContext;
                var pt1 = itemData.s.v;
                var pt2 = itemData.e.v;
                if (styleData.t === 1) {
                  grd = ctx.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
                } else {
                  var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                  var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
                  var percent = itemData.h.v;
                  if (percent >= 1) {
                    percent = 0.99;
                  } else if (percent <= -1) {
                    percent = -0.99;
                  }
                  var dist = rad * percent;
                  var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
                  var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
                  grd = ctx.createRadialGradient(x, y, 0, pt1[0], pt1[1], rad);
                }
                var i;
                var len = styleData.g.p;
                var cValues = itemData.g.c;
                var opacity = 1;
                for (i = 0; i < len; i += 1) {
                  if (itemData.g._hasOpacity && itemData.g._collapsable) {
                    opacity = itemData.g.o[i * 2 + 1];
                  }
                  grd.addColorStop(cValues[i * 4] / 100, 'rgba(' + cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ',' + cValues[i * 4 + 3] + ',' + opacity + ')');
                }
                styleElem.grd = grd;
              }
              styleElem.coOp = itemData.o.v * groupTransform.opacity;
            };
            CVShapeElement.prototype.renderStroke = function (styleData, itemData, groupTransform) {
              var styleElem = itemData.style;
              var d = itemData.d;
              if (d && (d._mdf || this._isFirstFrame)) {
                styleElem.da = d.dashArray;
                styleElem["do"] = d.dashoffset[0];
              }
              if (itemData.c._mdf || this._isFirstFrame) {
                styleElem.co = 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')';
              }
              if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
                styleElem.coOp = itemData.o.v * groupTransform.opacity;
              }
              if (itemData.w._mdf || this._isFirstFrame) {
                styleElem.wi = itemData.w.v;
              }
            };
            CVShapeElement.prototype.destroy = function () {
              this.shapesData = null;
              this.globalData = null;
              this.canvasContext = null;
              this.stylesList.length = 0;
              this.itemsData.length = 0;
            };
            function CVTextElement(data, globalData, comp) {
              this.textSpans = [];
              this.yOffset = 0;
              this.fillColorAnim = false;
              this.strokeColorAnim = false;
              this.strokeWidthAnim = false;
              this.stroke = false;
              this.fill = false;
              this.justifyOffset = 0;
              this.currentRender = null;
              this.renderType = 'canvas';
              this.values = {
                fill: 'rgba(0,0,0,0)',
                stroke: 'rgba(0,0,0,0)',
                sWidth: 0,
                fValue: ''
              };
              this.initElement(data, globalData, comp);
            }
            extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement);
            CVTextElement.prototype.tHelper = createTag('canvas').getContext('2d');
            CVTextElement.prototype.buildNewText = function () {
              var documentData = this.textProperty.currentData;
              this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
              var hasFill = false;
              if (documentData.fc) {
                hasFill = true;
                this.values.fill = this.buildColor(documentData.fc);
              } else {
                this.values.fill = 'rgba(0,0,0,0)';
              }
              this.fill = hasFill;
              var hasStroke = false;
              if (documentData.sc) {
                hasStroke = true;
                this.values.stroke = this.buildColor(documentData.sc);
                this.values.sWidth = documentData.sw;
              }
              var fontData = this.globalData.fontManager.getFontByName(documentData.f);
              var i;
              var len;
              var letters = documentData.l;
              var matrixHelper = this.mHelper;
              this.stroke = hasStroke;
              this.values.fValue = documentData.finalSize + 'px ' + this.globalData.fontManager.getFontByName(documentData.f).fFamily;
              len = documentData.finalText.length; // this.tHelper.font = this.values.fValue;

              var charData;
              var shapeData;
              var k;
              var kLen;
              var shapes;
              var j;
              var jLen;
              var pathNodes;
              var commands;
              var pathArr;
              var singleShape = this.data.singleShape;
              var trackingOffset = documentData.tr * 0.001 * documentData.finalSize;
              var xPos = 0;
              var yPos = 0;
              var firstLine = true;
              var cnt = 0;
              for (i = 0; i < len; i += 1) {
                charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                shapeData = charData && charData.data || {};
                matrixHelper.reset();
                if (singleShape && letters[i].n) {
                  xPos = -trackingOffset;
                  yPos += documentData.yOffset;
                  yPos += firstLine ? 1 : 0;
                  firstLine = false;
                }
                shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
                jLen = shapes.length;
                matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
                if (singleShape) {
                  this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
                }
                commands = createSizedArray(jLen - 1);
                var commandsCounter = 0;
                for (j = 0; j < jLen; j += 1) {
                  if (shapes[j].ty === 'sh') {
                    kLen = shapes[j].ks.k.i.length;
                    pathNodes = shapes[j].ks.k;
                    pathArr = [];
                    for (k = 1; k < kLen; k += 1) {
                      if (k === 1) {
                        pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
                      }
                      pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToY(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToX(pathNodes.v[k][0], pathNodes.v[k][1], 0), matrixHelper.applyToY(pathNodes.v[k][0], pathNodes.v[k][1], 0));
                    }
                    pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
                    commands[commandsCounter] = pathArr;
                    commandsCounter += 1;
                  }
                }
                if (singleShape) {
                  xPos += letters[i].l;
                  xPos += trackingOffset;
                }
                if (this.textSpans[cnt]) {
                  this.textSpans[cnt].elem = commands;
                } else {
                  this.textSpans[cnt] = {
                    elem: commands
                  };
                }
                cnt += 1;
              }
            };
            CVTextElement.prototype.renderInnerContent = function () {
              this.validateText();
              var ctx = this.canvasContext;
              ctx.font = this.values.fValue;
              this.globalData.renderer.ctxLineCap('butt'); // ctx.lineCap = 'butt';

              this.globalData.renderer.ctxLineJoin('miter'); // ctx.lineJoin = 'miter';

              this.globalData.renderer.ctxMiterLimit(4); // ctx.miterLimit = 4;

              if (!this.data.singleShape) {
                this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
              }
              var i;
              var len;
              var j;
              var jLen;
              var k;
              var kLen;
              var renderedLetters = this.textAnimator.renderedLetters;
              var letters = this.textProperty.currentData.l;
              len = letters.length;
              var renderedLetter;
              var lastFill = null;
              var lastStroke = null;
              var lastStrokeW = null;
              var commands;
              var pathArr;
              var renderer = this.globalData.renderer;
              for (i = 0; i < len; i += 1) {
                if (!letters[i].n) {
                  renderedLetter = renderedLetters[i];
                  if (renderedLetter) {
                    renderer.save();
                    renderer.ctxTransform(renderedLetter.p);
                    renderer.ctxOpacity(renderedLetter.o);
                  }
                  if (this.fill) {
                    if (renderedLetter && renderedLetter.fc) {
                      if (lastFill !== renderedLetter.fc) {
                        renderer.ctxFillStyle(renderedLetter.fc);
                        lastFill = renderedLetter.fc; // ctx.fillStyle = renderedLetter.fc;
                      }
                    } else if (lastFill !== this.values.fill) {
                      lastFill = this.values.fill;
                      renderer.ctxFillStyle(this.values.fill); // ctx.fillStyle = this.values.fill;
                    }

                    commands = this.textSpans[i].elem;
                    jLen = commands.length;
                    this.globalData.canvasContext.beginPath();
                    for (j = 0; j < jLen; j += 1) {
                      pathArr = commands[j];
                      kLen = pathArr.length;
                      this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                      for (k = 2; k < kLen; k += 6) {
                        this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
                      }
                    }
                    this.globalData.canvasContext.closePath();
                    renderer.ctxFill(); // this.globalData.canvasContext.fill();
                    /// ctx.fillText(this.textSpans[i].val,0,0);
                  }

                  if (this.stroke) {
                    if (renderedLetter && renderedLetter.sw) {
                      if (lastStrokeW !== renderedLetter.sw) {
                        lastStrokeW = renderedLetter.sw;
                        renderer.ctxLineWidth(renderedLetter.sw); // ctx.lineWidth = renderedLetter.sw;
                      }
                    } else if (lastStrokeW !== this.values.sWidth) {
                      lastStrokeW = this.values.sWidth;
                      renderer.ctxLineWidth(this.values.sWidth); // ctx.lineWidth = this.values.sWidth;
                    }

                    if (renderedLetter && renderedLetter.sc) {
                      if (lastStroke !== renderedLetter.sc) {
                        lastStroke = renderedLetter.sc;
                        renderer.ctxStrokeStyle(renderedLetter.sc); // ctx.strokeStyle = renderedLetter.sc;
                      }
                    } else if (lastStroke !== this.values.stroke) {
                      lastStroke = this.values.stroke;
                      renderer.ctxStrokeStyle(this.values.stroke); // ctx.strokeStyle = this.values.stroke;
                    }

                    commands = this.textSpans[i].elem;
                    jLen = commands.length;
                    this.globalData.canvasContext.beginPath();
                    for (j = 0; j < jLen; j += 1) {
                      pathArr = commands[j];
                      kLen = pathArr.length;
                      this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                      for (k = 2; k < kLen; k += 6) {
                        this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
                      }
                    }
                    this.globalData.canvasContext.closePath();
                    renderer.ctxStroke(); // this.globalData.canvasContext.stroke();
                    /// ctx.strokeText(letters[i].val,0,0);
                  }

                  if (renderedLetter) {
                    this.globalData.renderer.restore();
                  }
                }
              }
            };
            function CVImageElement(data, globalData, comp) {
              this.assetData = globalData.getAssetData(data.refId);
              this.img = globalData.imageLoader.getAsset(this.assetData);
              this.initElement(data, globalData, comp);
            }
            extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);
            CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
            CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
            CVImageElement.prototype.createContent = function () {
              if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
                var canvas = createTag('canvas');
                canvas.width = this.assetData.w;
                canvas.height = this.assetData.h;
                var ctx = canvas.getContext('2d');
                var imgW = this.img.width;
                var imgH = this.img.height;
                var imgRel = imgW / imgH;
                var canvasRel = this.assetData.w / this.assetData.h;
                var widthCrop;
                var heightCrop;
                var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
                if (imgRel > canvasRel && par === 'xMidYMid slice' || imgRel < canvasRel && par !== 'xMidYMid slice') {
                  heightCrop = imgH;
                  widthCrop = heightCrop * canvasRel;
                } else {
                  widthCrop = imgW;
                  heightCrop = widthCrop / canvasRel;
                }
                ctx.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);
                this.img = canvas;
              }
            };
            CVImageElement.prototype.renderInnerContent = function () {
              this.canvasContext.drawImage(this.img, 0, 0);
            };
            CVImageElement.prototype.destroy = function () {
              this.img = null;
            };
            function CVSolidElement(data, globalData, comp) {
              this.initElement(data, globalData, comp);
            }
            extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);
            CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
            CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
            CVSolidElement.prototype.renderInnerContent = function () {
              // var ctx = this.canvasContext;
              this.globalData.renderer.ctxFillStyle(this.data.sc); // ctx.fillStyle = this.data.sc;

              this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh); // ctx.fillRect(0, 0, this.data.sw, this.data.sh);
              //
            };

            function CanvasRendererBase() {}
            extendPrototype([BaseRenderer], CanvasRendererBase);
            CanvasRendererBase.prototype.createShape = function (data) {
              return new CVShapeElement(data, this.globalData, this);
            };
            CanvasRendererBase.prototype.createText = function (data) {
              return new CVTextElement(data, this.globalData, this);
            };
            CanvasRendererBase.prototype.createImage = function (data) {
              return new CVImageElement(data, this.globalData, this);
            };
            CanvasRendererBase.prototype.createSolid = function (data) {
              return new CVSolidElement(data, this.globalData, this);
            };
            CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
            CanvasRendererBase.prototype.ctxTransform = function (props) {
              if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {
                return;
              }
              this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);
            };
            CanvasRendererBase.prototype.ctxOpacity = function (op) {
              this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
            };
            CanvasRendererBase.prototype.ctxFillStyle = function (value) {
              this.canvasContext.fillStyle = value;
            };
            CanvasRendererBase.prototype.ctxStrokeStyle = function (value) {
              this.canvasContext.strokeStyle = value;
            };
            CanvasRendererBase.prototype.ctxLineWidth = function (value) {
              this.canvasContext.lineWidth = value;
            };
            CanvasRendererBase.prototype.ctxLineCap = function (value) {
              this.canvasContext.lineCap = value;
            };
            CanvasRendererBase.prototype.ctxLineJoin = function (value) {
              this.canvasContext.lineJoin = value;
            };
            CanvasRendererBase.prototype.ctxMiterLimit = function (value) {
              this.canvasContext.miterLimit = value;
            };
            CanvasRendererBase.prototype.ctxFill = function (rule) {
              this.canvasContext.fill(rule);
            };
            CanvasRendererBase.prototype.ctxFillRect = function (x, y, w, h) {
              this.canvasContext.fillRect(x, y, w, h);
            };
            CanvasRendererBase.prototype.ctxStroke = function () {
              this.canvasContext.stroke();
            };
            CanvasRendererBase.prototype.reset = function () {
              if (!this.renderConfig.clearCanvas) {
                this.canvasContext.restore();
                return;
              }
              this.contextData.reset();
            };
            CanvasRendererBase.prototype.save = function () {
              this.canvasContext.save();
            };
            CanvasRendererBase.prototype.restore = function (actionFlag) {
              if (!this.renderConfig.clearCanvas) {
                this.canvasContext.restore();
                return;
              }
              if (actionFlag) {
                this.globalData.blendMode = 'source-over';
              }
              this.contextData.restore(actionFlag);
            };
            CanvasRendererBase.prototype.configAnimation = function (animData) {
              if (this.animationItem.wrapper) {
                this.animationItem.container = createTag('canvas');
                var containerStyle = this.animationItem.container.style;
                containerStyle.width = '100%';
                containerStyle.height = '100%';
                var origin = '0px 0px 0px';
                containerStyle.transformOrigin = origin;
                containerStyle.mozTransformOrigin = origin;
                containerStyle.webkitTransformOrigin = origin;
                containerStyle['-webkit-transform'] = origin;
                containerStyle.contentVisibility = this.renderConfig.contentVisibility;
                this.animationItem.wrapper.appendChild(this.animationItem.container);
                this.canvasContext = this.animationItem.container.getContext('2d');
                if (this.renderConfig.className) {
                  this.animationItem.container.setAttribute('class', this.renderConfig.className);
                }
                if (this.renderConfig.id) {
                  this.animationItem.container.setAttribute('id', this.renderConfig.id);
                }
              } else {
                this.canvasContext = this.renderConfig.context;
              }
              this.contextData.setContext(this.canvasContext);
              this.data = animData;
              this.layers = animData.layers;
              this.transformCanvas = {
                w: animData.w,
                h: animData.h,
                sx: 0,
                sy: 0,
                tx: 0,
                ty: 0
              };
              this.setupGlobalData(animData, document.body);
              this.globalData.canvasContext = this.canvasContext;
              this.globalData.renderer = this;
              this.globalData.isDashed = false;
              this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
              this.globalData.transformCanvas = this.transformCanvas;
              this.elements = createSizedArray(animData.layers.length);
              this.updateContainerSize();
            };
            CanvasRendererBase.prototype.updateContainerSize = function (width, height) {
              this.reset();
              var elementWidth;
              var elementHeight;
              if (width) {
                elementWidth = width;
                elementHeight = height;
                this.canvasContext.canvas.width = elementWidth;
                this.canvasContext.canvas.height = elementHeight;
              } else {
                if (this.animationItem.wrapper && this.animationItem.container) {
                  elementWidth = this.animationItem.wrapper.offsetWidth;
                  elementHeight = this.animationItem.wrapper.offsetHeight;
                } else {
                  elementWidth = this.canvasContext.canvas.width;
                  elementHeight = this.canvasContext.canvas.height;
                }
                this.canvasContext.canvas.width = elementWidth * this.renderConfig.dpr;
                this.canvasContext.canvas.height = elementHeight * this.renderConfig.dpr;
              }
              var elementRel;
              var animationRel;
              if (this.renderConfig.preserveAspectRatio.indexOf('meet') !== -1 || this.renderConfig.preserveAspectRatio.indexOf('slice') !== -1) {
                var par = this.renderConfig.preserveAspectRatio.split(' ');
                var fillType = par[1] || 'meet';
                var pos = par[0] || 'xMidYMid';
                var xPos = pos.substr(0, 4);
                var yPos = pos.substr(4);
                elementRel = elementWidth / elementHeight;
                animationRel = this.transformCanvas.w / this.transformCanvas.h;
                if (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice') {
                  this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
                  this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
                } else {
                  this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
                  this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
                }
                if (xPos === 'xMid' && (animationRel < elementRel && fillType === 'meet' || animationRel > elementRel && fillType === 'slice')) {
                  this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;
                } else if (xPos === 'xMax' && (animationRel < elementRel && fillType === 'meet' || animationRel > elementRel && fillType === 'slice')) {
                  this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;
                } else {
                  this.transformCanvas.tx = 0;
                }
                if (yPos === 'YMid' && (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice')) {
                  this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;
                } else if (yPos === 'YMax' && (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice')) {
                  this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) * this.renderConfig.dpr;
                } else {
                  this.transformCanvas.ty = 0;
                }
              } else if (this.renderConfig.preserveAspectRatio === 'none') {
                this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
                this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
                this.transformCanvas.tx = 0;
                this.transformCanvas.ty = 0;
              } else {
                this.transformCanvas.sx = this.renderConfig.dpr;
                this.transformCanvas.sy = this.renderConfig.dpr;
                this.transformCanvas.tx = 0;
                this.transformCanvas.ty = 0;
              }
              this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1];
              /* var i, len = this.elements.length;
                for(i=0;i<len;i+=1){
                    if(this.elements[i] && this.elements[i].data.ty === 0){
                        this.elements[i].resize(this.globalData.transformCanvas);
                    }
                } */

              this.ctxTransform(this.transformCanvas.props);
              this.canvasContext.beginPath();
              this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
              this.canvasContext.closePath();
              this.canvasContext.clip();
              this.renderFrame(this.renderedFrame, true);
            };
            CanvasRendererBase.prototype.destroy = function () {
              if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {
                this.animationItem.wrapper.innerText = '';
              }
              var i;
              var len = this.layers ? this.layers.length : 0;
              for (i = len - 1; i >= 0; i -= 1) {
                if (this.elements[i] && this.elements[i].destroy) {
                  this.elements[i].destroy();
                }
              }
              this.elements.length = 0;
              this.globalData.canvasContext = null;
              this.animationItem.container = null;
              this.destroyed = true;
            };
            CanvasRendererBase.prototype.renderFrame = function (num, forceRender) {
              if (this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender || this.destroyed || num === -1) {
                return;
              }
              this.renderedFrame = num;
              this.globalData.frameNum = num - this.animationItem._isFirstFrame;
              this.globalData.frameId += 1;
              this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
              this.globalData.projectInterface.currentFrame = num; // console.log('--------');
              // console.log('NEW: ',num);

              var i;
              var len = this.layers.length;
              if (!this.completeLayers) {
                this.checkLayers(num);
              }
              for (i = len - 1; i >= 0; i -= 1) {
                if (this.completeLayers || this.elements[i]) {
                  this.elements[i].prepareFrame(num - this.layers[i].st);
                }
              }
              if (this.globalData._mdf) {
                if (this.renderConfig.clearCanvas === true) {
                  this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
                } else {
                  this.save();
                }
                for (i = len - 1; i >= 0; i -= 1) {
                  if (this.completeLayers || this.elements[i]) {
                    this.elements[i].renderFrame();
                  }
                }
                if (this.renderConfig.clearCanvas !== true) {
                  this.restore();
                }
              }
            };
            CanvasRendererBase.prototype.buildItem = function (pos) {
              var elements = this.elements;
              if (elements[pos] || this.layers[pos].ty === 99) {
                return;
              }
              var element = this.createItem(this.layers[pos], this, this.globalData);
              elements[pos] = element;
              element.initExpressions();
              /* if(this.layers[pos].ty === 0){
                    element.resize(this.globalData.transformCanvas);
                } */
            };

            CanvasRendererBase.prototype.checkPendingElements = function () {
              while (this.pendingElements.length) {
                var element = this.pendingElements.pop();
                element.checkParenting();
              }
            };
            CanvasRendererBase.prototype.hide = function () {
              this.animationItem.container.style.display = 'none';
            };
            CanvasRendererBase.prototype.show = function () {
              this.animationItem.container.style.display = 'block';
            };
            function CanvasContext() {
              this.opacity = -1;
              this.transform = createTypedArray('float32', 16);
              this.fillStyle = '';
              this.strokeStyle = '';
              this.lineWidth = '';
              this.lineCap = '';
              this.lineJoin = '';
              this.miterLimit = '';
              this.id = Math.random();
            }
            function CVContextData() {
              this.stack = [];
              this.cArrPos = 0;
              this.cTr = new Matrix();
              var i;
              var len = 15;
              for (i = 0; i < len; i += 1) {
                var canvasContext = new CanvasContext();
                this.stack[i] = canvasContext;
              }
              this._length = len;
              this.nativeContext = null;
              this.transformMat = new Matrix();
              this.currentOpacity = 1; //

              this.currentFillStyle = '';
              this.appliedFillStyle = ''; //

              this.currentStrokeStyle = '';
              this.appliedStrokeStyle = ''; //

              this.currentLineWidth = '';
              this.appliedLineWidth = ''; //

              this.currentLineCap = '';
              this.appliedLineCap = ''; //

              this.currentLineJoin = '';
              this.appliedLineJoin = ''; //

              this.appliedMiterLimit = '';
              this.currentMiterLimit = '';
            }
            CVContextData.prototype.duplicate = function () {
              var newLength = this._length * 2;
              var i = 0;
              for (i = this._length; i < newLength; i += 1) {
                this.stack[i] = new CanvasContext();
              }
              this._length = newLength;
            };
            CVContextData.prototype.reset = function () {
              this.cArrPos = 0;
              this.cTr.reset();
              this.stack[this.cArrPos].opacity = 1;
            };
            CVContextData.prototype.restore = function (forceRestore) {
              this.cArrPos -= 1;
              var currentContext = this.stack[this.cArrPos];
              var transform = currentContext.transform;
              var i;
              var arr = this.cTr.props;
              for (i = 0; i < 16; i += 1) {
                arr[i] = transform[i];
              }
              if (forceRestore) {
                this.nativeContext.restore();
                var prevStack = this.stack[this.cArrPos + 1];
                this.appliedFillStyle = prevStack.fillStyle;
                this.appliedStrokeStyle = prevStack.strokeStyle;
                this.appliedLineWidth = prevStack.lineWidth;
                this.appliedLineCap = prevStack.lineCap;
                this.appliedLineJoin = prevStack.lineJoin;
                this.appliedMiterLimit = prevStack.miterLimit;
              }
              this.nativeContext.setTransform(transform[0], transform[1], transform[4], transform[5], transform[12], transform[13]);
              if (forceRestore || currentContext.opacity !== -1 && this.currentOpacity !== currentContext.opacity) {
                this.nativeContext.globalAlpha = currentContext.opacity;
                this.currentOpacity = currentContext.opacity;
              }
              this.currentFillStyle = currentContext.fillStyle;
              this.currentStrokeStyle = currentContext.strokeStyle;
              this.currentLineWidth = currentContext.lineWidth;
              this.currentLineCap = currentContext.lineCap;
              this.currentLineJoin = currentContext.lineJoin;
              this.currentMiterLimit = currentContext.miterLimit;
            };
            CVContextData.prototype.save = function (saveOnNativeFlag) {
              if (saveOnNativeFlag) {
                this.nativeContext.save();
              }
              var props = this.cTr.props;
              if (this._length <= this.cArrPos) {
                this.duplicate();
              }
              var currentStack = this.stack[this.cArrPos];
              var i;
              for (i = 0; i < 16; i += 1) {
                currentStack.transform[i] = props[i];
              }
              this.cArrPos += 1;
              var newStack = this.stack[this.cArrPos];
              newStack.opacity = currentStack.opacity;
              newStack.fillStyle = currentStack.fillStyle;
              newStack.strokeStyle = currentStack.strokeStyle;
              newStack.lineWidth = currentStack.lineWidth;
              newStack.lineCap = currentStack.lineCap;
              newStack.lineJoin = currentStack.lineJoin;
              newStack.miterLimit = currentStack.miterLimit;
            };
            CVContextData.prototype.setOpacity = function (value) {
              this.stack[this.cArrPos].opacity = value;
            };
            CVContextData.prototype.setContext = function (value) {
              this.nativeContext = value;
            };
            CVContextData.prototype.fillStyle = function (value) {
              if (this.stack[this.cArrPos].fillStyle !== value) {
                this.currentFillStyle = value;
                this.stack[this.cArrPos].fillStyle = value;
              }
            };
            CVContextData.prototype.strokeStyle = function (value) {
              if (this.stack[this.cArrPos].strokeStyle !== value) {
                this.currentStrokeStyle = value;
                this.stack[this.cArrPos].strokeStyle = value;
              }
            };
            CVContextData.prototype.lineWidth = function (value) {
              if (this.stack[this.cArrPos].lineWidth !== value) {
                this.currentLineWidth = value;
                this.stack[this.cArrPos].lineWidth = value;
              }
            };
            CVContextData.prototype.lineCap = function (value) {
              if (this.stack[this.cArrPos].lineCap !== value) {
                this.currentLineCap = value;
                this.stack[this.cArrPos].lineCap = value;
              }
            };
            CVContextData.prototype.lineJoin = function (value) {
              if (this.stack[this.cArrPos].lineJoin !== value) {
                this.currentLineJoin = value;
                this.stack[this.cArrPos].lineJoin = value;
              }
            };
            CVContextData.prototype.miterLimit = function (value) {
              if (this.stack[this.cArrPos].miterLimit !== value) {
                this.currentMiterLimit = value;
                this.stack[this.cArrPos].miterLimit = value;
              }
            };
            CVContextData.prototype.transform = function (props) {
              this.transformMat.cloneFromProps(props); // Taking the last transform value from the stored stack of transforms

              var currentTransform = this.cTr; // Applying the last transform value after the new transform to respect the order of transformations

              this.transformMat.multiply(currentTransform); // Storing the new transformed value in the stored transform

              currentTransform.cloneFromProps(this.transformMat.props);
              var trProps = currentTransform.props; // Applying the new transform to the canvas

              this.nativeContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);
            };
            CVContextData.prototype.opacity = function (op) {
              var currentOpacity = this.stack[this.cArrPos].opacity;
              currentOpacity *= op < 0 ? 0 : op;
              if (this.stack[this.cArrPos].opacity !== currentOpacity) {
                if (this.currentOpacity !== op) {
                  this.nativeContext.globalAlpha = op;
                  this.currentOpacity = op;
                }
                this.stack[this.cArrPos].opacity = currentOpacity;
              }
            };
            CVContextData.prototype.fill = function (rule) {
              if (this.appliedFillStyle !== this.currentFillStyle) {
                this.appliedFillStyle = this.currentFillStyle;
                this.nativeContext.fillStyle = this.appliedFillStyle;
              }
              this.nativeContext.fill(rule);
            };
            CVContextData.prototype.fillRect = function (x, y, w, h) {
              if (this.appliedFillStyle !== this.currentFillStyle) {
                this.appliedFillStyle = this.currentFillStyle;
                this.nativeContext.fillStyle = this.appliedFillStyle;
              }
              this.nativeContext.fillRect(x, y, w, h);
            };
            CVContextData.prototype.stroke = function () {
              if (this.appliedStrokeStyle !== this.currentStrokeStyle) {
                this.appliedStrokeStyle = this.currentStrokeStyle;
                this.nativeContext.strokeStyle = this.appliedStrokeStyle;
              }
              if (this.appliedLineWidth !== this.currentLineWidth) {
                this.appliedLineWidth = this.currentLineWidth;
                this.nativeContext.lineWidth = this.appliedLineWidth;
              }
              if (this.appliedLineCap !== this.currentLineCap) {
                this.appliedLineCap = this.currentLineCap;
                this.nativeContext.lineCap = this.appliedLineCap;
              }
              if (this.appliedLineJoin !== this.currentLineJoin) {
                this.appliedLineJoin = this.currentLineJoin;
                this.nativeContext.lineJoin = this.appliedLineJoin;
              }
              if (this.appliedMiterLimit !== this.currentMiterLimit) {
                this.appliedMiterLimit = this.currentMiterLimit;
                this.nativeContext.miterLimit = this.appliedMiterLimit;
              }
              this.nativeContext.stroke();
            };
            function CVCompElement(data, globalData, comp) {
              this.completeLayers = false;
              this.layers = data.layers;
              this.pendingElements = [];
              this.elements = createSizedArray(this.layers.length);
              this.initElement(data, globalData, comp);
              this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
                _placeholder: true
              };
            }
            extendPrototype([CanvasRendererBase, ICompElement, CVBaseElement], CVCompElement);
            CVCompElement.prototype.renderInnerContent = function () {
              var ctx = this.canvasContext;
              ctx.beginPath();
              ctx.moveTo(0, 0);
              ctx.lineTo(this.data.w, 0);
              ctx.lineTo(this.data.w, this.data.h);
              ctx.lineTo(0, this.data.h);
              ctx.lineTo(0, 0);
              ctx.clip();
              var i;
              var len = this.layers.length;
              for (i = len - 1; i >= 0; i -= 1) {
                if (this.completeLayers || this.elements[i]) {
                  this.elements[i].renderFrame();
                }
              }
            };
            CVCompElement.prototype.destroy = function () {
              var i;
              var len = this.layers.length;
              for (i = len - 1; i >= 0; i -= 1) {
                if (this.elements[i]) {
                  this.elements[i].destroy();
                }
              }
              this.layers = null;
              this.elements = null;
            };
            CVCompElement.prototype.createComp = function (data) {
              return new CVCompElement(data, this.globalData, this);
            };
            function CanvasRenderer(animationItem, config) {
              this.animationItem = animationItem;
              this.renderConfig = {
                clearCanvas: config && config.clearCanvas !== undefined ? config.clearCanvas : true,
                context: config && config.context || null,
                progressiveLoad: config && config.progressiveLoad || false,
                preserveAspectRatio: config && config.preserveAspectRatio || 'xMidYMid meet',
                imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
                contentVisibility: config && config.contentVisibility || 'visible',
                className: config && config.className || '',
                id: config && config.id || '',
                runExpressions: !config || config.runExpressions === undefined || config.runExpressions
              };
              this.renderConfig.dpr = config && config.dpr || 1;
              if (this.animationItem.wrapper) {
                this.renderConfig.dpr = config && config.dpr || window.devicePixelRatio || 1;
              }
              this.renderedFrame = -1;
              this.globalData = {
                frameNum: -1,
                _mdf: false,
                renderConfig: this.renderConfig,
                currentGlobalAlpha: -1
              };
              this.contextData = new CVContextData();
              this.elements = [];
              this.pendingElements = [];
              this.transformMat = new Matrix();
              this.completeLayers = false;
              this.rendererType = 'canvas';
              if (this.renderConfig.clearCanvas) {
                this.ctxTransform = this.contextData.transform.bind(this.contextData);
                this.ctxOpacity = this.contextData.opacity.bind(this.contextData);
                this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData);
                this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData);
                this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData);
                this.ctxLineCap = this.contextData.lineCap.bind(this.contextData);
                this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData);
                this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData);
                this.ctxFill = this.contextData.fill.bind(this.contextData);
                this.ctxFillRect = this.contextData.fillRect.bind(this.contextData);
                this.ctxStroke = this.contextData.stroke.bind(this.contextData);
                this.save = this.contextData.save.bind(this.contextData);
              }
            }
            extendPrototype([CanvasRendererBase], CanvasRenderer);
            CanvasRenderer.prototype.createComp = function (data) {
              return new CVCompElement(data, this.globalData, this);
            };
            function HBaseElement() {}
            HBaseElement.prototype = {
              checkBlendMode: function checkBlendMode() {},
              initRendererElement: function initRendererElement() {
                this.baseElement = createTag(this.data.tg || 'div');
                if (this.data.hasMask) {
                  this.svgElement = createNS('svg');
                  this.layerElement = createNS('g');
                  this.maskedElement = this.layerElement;
                  this.svgElement.appendChild(this.layerElement);
                  this.baseElement.appendChild(this.svgElement);
                } else {
                  this.layerElement = this.baseElement;
                }
                styleDiv(this.baseElement);
              },
              createContainerElements: function createContainerElements() {
                this.renderableEffectsManager = new CVEffects(this);
                this.transformedElement = this.baseElement;
                this.maskedElement = this.layerElement;
                if (this.data.ln) {
                  this.layerElement.setAttribute('id', this.data.ln);
                }
                if (this.data.cl) {
                  this.layerElement.setAttribute('class', this.data.cl);
                }
                if (this.data.bm !== 0) {
                  this.setBlendMode();
                }
              },
              renderElement: function renderElement() {
                var transformedElementStyle = this.transformedElement ? this.transformedElement.style : {};
                if (this.finalTransform._matMdf) {
                  var matrixValue = this.finalTransform.mat.toCSS();
                  transformedElementStyle.transform = matrixValue;
                  transformedElementStyle.webkitTransform = matrixValue;
                }
                if (this.finalTransform._opMdf) {
                  transformedElementStyle.opacity = this.finalTransform.mProp.o.v;
                }
              },
              renderFrame: function renderFrame() {
                // If it is exported as hidden (data.hd === true) no need to render
                // If it is not visible no need to render
                if (this.data.hd || this.hidden) {
                  return;
                }
                this.renderTransform();
                this.renderRenderable();
                this.renderElement();
                this.renderInnerContent();
                if (this._isFirstFrame) {
                  this._isFirstFrame = false;
                }
              },
              destroy: function destroy() {
                this.layerElement = null;
                this.transformedElement = null;
                if (this.matteElement) {
                  this.matteElement = null;
                }
                if (this.maskManager) {
                  this.maskManager.destroy();
                  this.maskManager = null;
                }
              },
              createRenderableComponents: function createRenderableComponents() {
                this.maskManager = new MaskElement(this.data, this, this.globalData);
              },
              addEffects: function addEffects() {},
              setMatte: function setMatte() {}
            };
            HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
            HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
            HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;
            function HSolidElement(data, globalData, comp) {
              this.initElement(data, globalData, comp);
            }
            extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);
            HSolidElement.prototype.createContent = function () {
              var rect;
              if (this.data.hasMask) {
                rect = createNS('rect');
                rect.setAttribute('width', this.data.sw);
                rect.setAttribute('height', this.data.sh);
                rect.setAttribute('fill', this.data.sc);
                this.svgElement.setAttribute('width', this.data.sw);
                this.svgElement.setAttribute('height', this.data.sh);
              } else {
                rect = createTag('div');
                rect.style.width = this.data.sw + 'px';
                rect.style.height = this.data.sh + 'px';
                rect.style.backgroundColor = this.data.sc;
              }
              this.layerElement.appendChild(rect);
            };
            function HShapeElement(data, globalData, comp) {
              // List of drawable elements
              this.shapes = []; // Full shape data

              this.shapesData = data.shapes; // List of styles that will be applied to shapes

              this.stylesList = []; // List of modifiers that will be applied to shapes

              this.shapeModifiers = []; // List of items in shape tree

              this.itemsData = []; // List of items in previous shape tree

              this.processedElements = []; // List of animated components

              this.animatedContents = [];
              this.shapesContainer = createNS('g');
              this.initElement(data, globalData, comp); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
              // List of elements that have been created

              this.prevViewData = [];
              this.currentBBox = {
                x: 999999,
                y: -999999,
                h: 0,
                w: 0
              };
            }
            extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
            HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;
            HShapeElement.prototype.createContent = function () {
              var cont;
              this.baseElement.style.fontSize = 0;
              if (this.data.hasMask) {
                this.layerElement.appendChild(this.shapesContainer);
                cont = this.svgElement;
              } else {
                cont = createNS('svg');
                var size = this.comp.data ? this.comp.data : this.globalData.compSize;
                cont.setAttribute('width', size.w);
                cont.setAttribute('height', size.h);
                cont.appendChild(this.shapesContainer);
                this.layerElement.appendChild(cont);
              }
              this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
              this.filterUniqueShapes();
              this.shapeCont = cont;
            };
            HShapeElement.prototype.getTransformedPoint = function (transformers, point) {
              var i;
              var len = transformers.length;
              for (i = 0; i < len; i += 1) {
                point = transformers[i].mProps.v.applyToPointArray(point[0], point[1], 0);
              }
              return point;
            };
            HShapeElement.prototype.calculateShapeBoundingBox = function (item, boundingBox) {
              var shape = item.sh.v;
              var transformers = item.transformers;
              var i;
              var len = shape._length;
              var vPoint;
              var oPoint;
              var nextIPoint;
              var nextVPoint;
              if (len <= 1) {
                return;
              }
              for (i = 0; i < len - 1; i += 1) {
                vPoint = this.getTransformedPoint(transformers, shape.v[i]);
                oPoint = this.getTransformedPoint(transformers, shape.o[i]);
                nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);
                nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);
                this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
              }
              if (shape.c) {
                vPoint = this.getTransformedPoint(transformers, shape.v[i]);
                oPoint = this.getTransformedPoint(transformers, shape.o[i]);
                nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
                nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
                this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
              }
            };
            HShapeElement.prototype.checkBounds = function (vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
              this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
              var bounds = this.shapeBoundingBox;
              boundingBox.x = bmMin(bounds.left, boundingBox.x);
              boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);
              boundingBox.y = bmMin(bounds.top, boundingBox.y);
              boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);
            };
            HShapeElement.prototype.shapeBoundingBox = {
              left: 0,
              right: 0,
              top: 0,
              bottom: 0
            };
            HShapeElement.prototype.tempBoundingBox = {
              x: 0,
              xMax: 0,
              y: 0,
              yMax: 0,
              width: 0,
              height: 0
            };
            HShapeElement.prototype.getBoundsOfCurve = function (p0, p1, p2, p3) {
              var bounds = [[p0[0], p3[0]], [p0[1], p3[1]]];
              for (var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i) {
                // eslint-disable-line no-plusplus
                b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
                a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
                c = 3 * p1[i] - 3 * p0[i];
                b |= 0; // eslint-disable-line no-bitwise

                a |= 0; // eslint-disable-line no-bitwise

                c |= 0; // eslint-disable-line no-bitwise

                if (a === 0 && b === 0) ;else if (a === 0) {
                  t = -c / b;
                  if (t > 0 && t < 1) {
                    bounds[i].push(this.calculateF(t, p0, p1, p2, p3, i));
                  }
                } else {
                  b2ac = b * b - 4 * c * a;
                  if (b2ac >= 0) {
                    t1 = (-b + bmSqrt(b2ac)) / (2 * a);
                    if (t1 > 0 && t1 < 1) bounds[i].push(this.calculateF(t1, p0, p1, p2, p3, i));
                    t2 = (-b - bmSqrt(b2ac)) / (2 * a);
                    if (t2 > 0 && t2 < 1) bounds[i].push(this.calculateF(t2, p0, p1, p2, p3, i));
                  }
                }
              }
              this.shapeBoundingBox.left = bmMin.apply(null, bounds[0]);
              this.shapeBoundingBox.top = bmMin.apply(null, bounds[1]);
              this.shapeBoundingBox.right = bmMax.apply(null, bounds[0]);
              this.shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);
            };
            HShapeElement.prototype.calculateF = function (t, p0, p1, p2, p3, i) {
              return bmPow(1 - t, 3) * p0[i] + 3 * bmPow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * bmPow(t, 2) * p2[i] + bmPow(t, 3) * p3[i];
            };
            HShapeElement.prototype.calculateBoundingBox = function (itemsData, boundingBox) {
              var i;
              var len = itemsData.length;
              for (i = 0; i < len; i += 1) {
                if (itemsData[i] && itemsData[i].sh) {
                  this.calculateShapeBoundingBox(itemsData[i], boundingBox);
                } else if (itemsData[i] && itemsData[i].it) {
                  this.calculateBoundingBox(itemsData[i].it, boundingBox);
                } else if (itemsData[i] && itemsData[i].style && itemsData[i].w) {
                  this.expandStrokeBoundingBox(itemsData[i].w, boundingBox);
                }
              }
            };
            HShapeElement.prototype.expandStrokeBoundingBox = function (widthProperty, boundingBox) {
              var width = 0;
              if (widthProperty.keyframes) {
                for (var i = 0; i < widthProperty.keyframes.length; i += 1) {
                  var kfw = widthProperty.keyframes[i].s;
                  if (kfw > width) {
                    width = kfw;
                  }
                }
                width *= widthProperty.mult;
              } else {
                width = widthProperty.v * widthProperty.mult;
              }
              boundingBox.x -= width;
              boundingBox.xMax += width;
              boundingBox.y -= width;
              boundingBox.yMax += width;
            };
            HShapeElement.prototype.currentBoxContains = function (box) {
              return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;
            };
            HShapeElement.prototype.renderInnerContent = function () {
              this._renderShapeFrame();
              if (!this.hidden && (this._isFirstFrame || this._mdf)) {
                var tempBoundingBox = this.tempBoundingBox;
                var max = 999999;
                tempBoundingBox.x = max;
                tempBoundingBox.xMax = -max;
                tempBoundingBox.y = max;
                tempBoundingBox.yMax = -max;
                this.calculateBoundingBox(this.itemsData, tempBoundingBox);
                tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
                tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y; // var tempBoundingBox = this.shapeCont.getBBox();

                if (this.currentBoxContains(tempBoundingBox)) {
                  return;
                }
                var changed = false;
                if (this.currentBBox.w !== tempBoundingBox.width) {
                  this.currentBBox.w = tempBoundingBox.width;
                  this.shapeCont.setAttribute('width', tempBoundingBox.width);
                  changed = true;
                }
                if (this.currentBBox.h !== tempBoundingBox.height) {
                  this.currentBBox.h = tempBoundingBox.height;
                  this.shapeCont.setAttribute('height', tempBoundingBox.height);
                  changed = true;
                }
                if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
                  this.currentBBox.w = tempBoundingBox.width;
                  this.currentBBox.h = tempBoundingBox.height;
                  this.currentBBox.x = tempBoundingBox.x;
                  this.currentBBox.y = tempBoundingBox.y;
                  this.shapeCont.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
                  var shapeStyle = this.shapeCont.style;
                  var shapeTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
                  shapeStyle.transform = shapeTransform;
                  shapeStyle.webkitTransform = shapeTransform;
                }
              }
            };
            function HTextElement(data, globalData, comp) {
              this.textSpans = [];
              this.textPaths = [];
              this.currentBBox = {
                x: 999999,
                y: -999999,
                h: 0,
                w: 0
              };
              this.renderType = 'svg';
              this.isMasked = false;
              this.initElement(data, globalData, comp);
            }
            extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);
            HTextElement.prototype.createContent = function () {
              this.isMasked = this.checkMasks();
              if (this.isMasked) {
                this.renderType = 'svg';
                this.compW = this.comp.data.w;
                this.compH = this.comp.data.h;
                this.svgElement.setAttribute('width', this.compW);
                this.svgElement.setAttribute('height', this.compH);
                var g = createNS('g');
                this.maskedElement.appendChild(g);
                this.innerElem = g;
              } else {
                this.renderType = 'html';
                this.innerElem = this.layerElement;
              }
              this.checkParenting();
            };
            HTextElement.prototype.buildNewText = function () {
              var documentData = this.textProperty.currentData;
              this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
              var innerElemStyle = this.innerElem.style;
              var textColor = documentData.fc ? this.buildColor(documentData.fc) : 'rgba(0,0,0,0)';
              innerElemStyle.fill = textColor;
              innerElemStyle.color = textColor;
              if (documentData.sc) {
                innerElemStyle.stroke = this.buildColor(documentData.sc);
                innerElemStyle.strokeWidth = documentData.sw + 'px';
              }
              var fontData = this.globalData.fontManager.getFontByName(documentData.f);
              if (!this.globalData.fontManager.chars) {
                innerElemStyle.fontSize = documentData.finalSize + 'px';
                innerElemStyle.lineHeight = documentData.finalSize + 'px';
                if (fontData.fClass) {
                  this.innerElem.className = fontData.fClass;
                } else {
                  innerElemStyle.fontFamily = fontData.fFamily;
                  var fWeight = documentData.fWeight;
                  var fStyle = documentData.fStyle;
                  innerElemStyle.fontStyle = fStyle;
                  innerElemStyle.fontWeight = fWeight;
                }
              }
              var i;
              var len;
              var letters = documentData.l;
              len = letters.length;
              var tSpan;
              var tParent;
              var tCont;
              var matrixHelper = this.mHelper;
              var shapes;
              var shapeStr = '';
              var cnt = 0;
              for (i = 0; i < len; i += 1) {
                if (this.globalData.fontManager.chars) {
                  if (!this.textPaths[cnt]) {
                    tSpan = createNS('path');
                    tSpan.setAttribute('stroke-linecap', lineCapEnum[1]);
                    tSpan.setAttribute('stroke-linejoin', lineJoinEnum[2]);
                    tSpan.setAttribute('stroke-miterlimit', '4');
                  } else {
                    tSpan = this.textPaths[cnt];
                  }
                  if (!this.isMasked) {
                    if (this.textSpans[cnt]) {
                      tParent = this.textSpans[cnt];
                      tCont = tParent.children[0];
                    } else {
                      tParent = createTag('div');
                      tParent.style.lineHeight = 0;
                      tCont = createNS('svg');
                      tCont.appendChild(tSpan);
                      styleDiv(tParent);
                    }
                  }
                } else if (!this.isMasked) {
                  if (this.textSpans[cnt]) {
                    tParent = this.textSpans[cnt];
                    tSpan = this.textPaths[cnt];
                  } else {
                    tParent = createTag('span');
                    styleDiv(tParent);
                    tSpan = createTag('span');
                    styleDiv(tSpan);
                    tParent.appendChild(tSpan);
                  }
                } else {
                  tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS('text');
                } // tSpan.setAttribute('visibility', 'hidden');

                if (this.globalData.fontManager.chars) {
                  var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                  var shapeData;
                  if (charData) {
                    shapeData = charData.data;
                  } else {
                    shapeData = null;
                  }
                  matrixHelper.reset();
                  if (shapeData && shapeData.shapes && shapeData.shapes.length) {
                    shapes = shapeData.shapes[0].it;
                    matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
                    shapeStr = this.createPathShape(matrixHelper, shapes);
                    tSpan.setAttribute('d', shapeStr);
                  }
                  if (!this.isMasked) {
                    this.innerElem.appendChild(tParent);
                    if (shapeData && shapeData.shapes) {
                      // document.body.appendChild is needed to get exact measure of shape
                      document.body.appendChild(tCont);
                      var boundingBox = tCont.getBBox();
                      tCont.setAttribute('width', boundingBox.width + 2);
                      tCont.setAttribute('height', boundingBox.height + 2);
                      tCont.setAttribute('viewBox', boundingBox.x - 1 + ' ' + (boundingBox.y - 1) + ' ' + (boundingBox.width + 2) + ' ' + (boundingBox.height + 2));
                      var tContStyle = tCont.style;
                      var tContTranslation = 'translate(' + (boundingBox.x - 1) + 'px,' + (boundingBox.y - 1) + 'px)';
                      tContStyle.transform = tContTranslation;
                      tContStyle.webkitTransform = tContTranslation;
                      letters[i].yOffset = boundingBox.y - 1;
                    } else {
                      tCont.setAttribute('width', 1);
                      tCont.setAttribute('height', 1);
                    }
                    tParent.appendChild(tCont);
                  } else {
                    this.innerElem.appendChild(tSpan);
                  }
                } else {
                  tSpan.textContent = letters[i].val;
                  tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');
                  if (!this.isMasked) {
                    this.innerElem.appendChild(tParent); //

                    var tStyle = tSpan.style;
                    var tSpanTranslation = 'translate3d(0,' + -documentData.finalSize / 1.2 + 'px,0)';
                    tStyle.transform = tSpanTranslation;
                    tStyle.webkitTransform = tSpanTranslation;
                  } else {
                    this.innerElem.appendChild(tSpan);
                  }
                } //

                if (!this.isMasked) {
                  this.textSpans[cnt] = tParent;
                } else {
                  this.textSpans[cnt] = tSpan;
                }
                this.textSpans[cnt].style.display = 'block';
                this.textPaths[cnt] = tSpan;
                cnt += 1;
              }
              while (cnt < this.textSpans.length) {
                this.textSpans[cnt].style.display = 'none';
                cnt += 1;
              }
            };
            HTextElement.prototype.renderInnerContent = function () {
              this.validateText();
              var svgStyle;
              if (this.data.singleShape) {
                if (!this._isFirstFrame && !this.lettersChangedFlag) {
                  return;
                }
                if (this.isMasked && this.finalTransform._matMdf) {
                  // Todo Benchmark if using this is better than getBBox
                  this.svgElement.setAttribute('viewBox', -this.finalTransform.mProp.p.v[0] + ' ' + -this.finalTransform.mProp.p.v[1] + ' ' + this.compW + ' ' + this.compH);
                  svgStyle = this.svgElement.style;
                  var translation = 'translate(' + -this.finalTransform.mProp.p.v[0] + 'px,' + -this.finalTransform.mProp.p.v[1] + 'px)';
                  svgStyle.transform = translation;
                  svgStyle.webkitTransform = translation;
                }
              }
              this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
              if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
                return;
              }
              var i;
              var len;
              var count = 0;
              var renderedLetters = this.textAnimator.renderedLetters;
              var letters = this.textProperty.currentData.l;
              len = letters.length;
              var renderedLetter;
              var textSpan;
              var textPath;
              for (i = 0; i < len; i += 1) {
                if (letters[i].n) {
                  count += 1;
                } else {
                  textSpan = this.textSpans[i];
                  textPath = this.textPaths[i];
                  renderedLetter = renderedLetters[count];
                  count += 1;
                  if (renderedLetter._mdf.m) {
                    if (!this.isMasked) {
                      textSpan.style.webkitTransform = renderedLetter.m;
                      textSpan.style.transform = renderedLetter.m;
                    } else {
                      textSpan.setAttribute('transform', renderedLetter.m);
                    }
                  } /// /textSpan.setAttribute('opacity',renderedLetter.o);

                  textSpan.style.opacity = renderedLetter.o;
                  if (renderedLetter.sw && renderedLetter._mdf.sw) {
                    textPath.setAttribute('stroke-width', renderedLetter.sw);
                  }
                  if (renderedLetter.sc && renderedLetter._mdf.sc) {
                    textPath.setAttribute('stroke', renderedLetter.sc);
                  }
                  if (renderedLetter.fc && renderedLetter._mdf.fc) {
                    textPath.setAttribute('fill', renderedLetter.fc);
                    textPath.style.color = renderedLetter.fc;
                  }
                }
              }
              if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
                var boundingBox = this.innerElem.getBBox();
                if (this.currentBBox.w !== boundingBox.width) {
                  this.currentBBox.w = boundingBox.width;
                  this.svgElement.setAttribute('width', boundingBox.width);
                }
                if (this.currentBBox.h !== boundingBox.height) {
                  this.currentBBox.h = boundingBox.height;
                  this.svgElement.setAttribute('height', boundingBox.height);
                }
                var margin = 1;
                if (this.currentBBox.w !== boundingBox.width + margin * 2 || this.currentBBox.h !== boundingBox.height + margin * 2 || this.currentBBox.x !== boundingBox.x - margin || this.currentBBox.y !== boundingBox.y - margin) {
                  this.currentBBox.w = boundingBox.width + margin * 2;
                  this.currentBBox.h = boundingBox.height + margin * 2;
                  this.currentBBox.x = boundingBox.x - margin;
                  this.currentBBox.y = boundingBox.y - margin;
                  this.svgElement.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
                  svgStyle = this.svgElement.style;
                  var svgTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
                  svgStyle.transform = svgTransform;
                  svgStyle.webkitTransform = svgTransform;
                }
              }
            };
            function HCameraElement(data, globalData, comp) {
              this.initFrame();
              this.initBaseData(data, globalData, comp);
              this.initHierarchy();
              var getProp = PropertyFactory.getProp;
              this.pe = getProp(this, data.pe, 0, 0, this);
              if (data.ks.p.s) {
                this.px = getProp(this, data.ks.p.x, 1, 0, this);
                this.py = getProp(this, data.ks.p.y, 1, 0, this);
                this.pz = getProp(this, data.ks.p.z, 1, 0, this);
              } else {
                this.p = getProp(this, data.ks.p, 1, 0, this);
              }
              if (data.ks.a) {
                this.a = getProp(this, data.ks.a, 1, 0, this);
              }
              if (data.ks.or.k.length && data.ks.or.k[0].to) {
                var i;
                var len = data.ks.or.k.length;
                for (i = 0; i < len; i += 1) {
                  data.ks.or.k[i].to = null;
                  data.ks.or.k[i].ti = null;
                }
              }
              this.or = getProp(this, data.ks.or, 1, degToRads, this);
              this.or.sh = true;
              this.rx = getProp(this, data.ks.rx, 0, degToRads, this);
              this.ry = getProp(this, data.ks.ry, 0, degToRads, this);
              this.rz = getProp(this, data.ks.rz, 0, degToRads, this);
              this.mat = new Matrix();
              this._prevMat = new Matrix();
              this._isFirstFrame = true; // TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.

              this.finalTransform = {
                mProp: this
              };
            }
            extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);
            HCameraElement.prototype.setup = function () {
              var i;
              var len = this.comp.threeDElements.length;
              var comp;
              var perspectiveStyle;
              var containerStyle;
              for (i = 0; i < len; i += 1) {
                // [perspectiveElem,container]
                comp = this.comp.threeDElements[i];
                if (comp.type === '3d') {
                  perspectiveStyle = comp.perspectiveElem.style;
                  containerStyle = comp.container.style;
                  var perspective = this.pe.v + 'px';
                  var origin = '0px 0px 0px';
                  var matrix = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
                  perspectiveStyle.perspective = perspective;
                  perspectiveStyle.webkitPerspective = perspective;
                  containerStyle.transformOrigin = origin;
                  containerStyle.mozTransformOrigin = origin;
                  containerStyle.webkitTransformOrigin = origin;
                  perspectiveStyle.transform = matrix;
                  perspectiveStyle.webkitTransform = matrix;
                }
              }
            };
            HCameraElement.prototype.createElements = function () {};
            HCameraElement.prototype.hide = function () {};
            HCameraElement.prototype.renderFrame = function () {
              var _mdf = this._isFirstFrame;
              var i;
              var len;
              if (this.hierarchy) {
                len = this.hierarchy.length;
                for (i = 0; i < len; i += 1) {
                  _mdf = this.hierarchy[i].finalTransform.mProp._mdf || _mdf;
                }
              }
              if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
                this.mat.reset();
                if (this.hierarchy) {
                  len = this.hierarchy.length - 1;
                  for (i = len; i >= 0; i -= 1) {
                    var mTransf = this.hierarchy[i].finalTransform.mProp;
                    this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
                    this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
                    this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
                    this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
                    this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
                  }
                }
                if (this.p) {
                  this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
                } else {
                  this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
                }
                if (this.a) {
                  var diffVector;
                  if (this.p) {
                    diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
                  } else {
                    diffVector = [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
                  }
                  var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2)); // var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));

                  var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
                  var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
                  var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
                  var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);
                  this.mat.rotateY(mRotationY).rotateX(-mRotationX);
                }
                this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
                this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
                this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
                this.mat.translate(0, 0, this.pe.v);
                var hasMatrixChanged = !this._prevMat.equals(this.mat);
                if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
                  len = this.comp.threeDElements.length;
                  var comp;
                  var perspectiveStyle;
                  var containerStyle;
                  for (i = 0; i < len; i += 1) {
                    comp = this.comp.threeDElements[i];
                    if (comp.type === '3d') {
                      if (hasMatrixChanged) {
                        var matValue = this.mat.toCSS();
                        containerStyle = comp.container.style;
                        containerStyle.transform = matValue;
                        containerStyle.webkitTransform = matValue;
                      }
                      if (this.pe._mdf) {
                        perspectiveStyle = comp.perspectiveElem.style;
                        perspectiveStyle.perspective = this.pe.v + 'px';
                        perspectiveStyle.webkitPerspective = this.pe.v + 'px';
                      }
                    }
                  }
                  this.mat.clone(this._prevMat);
                }
              }
              this._isFirstFrame = false;
            };
            HCameraElement.prototype.prepareFrame = function (num) {
              this.prepareProperties(num, true);
            };
            HCameraElement.prototype.destroy = function () {};
            HCameraElement.prototype.getBaseElement = function () {
              return null;
            };
            function HImageElement(data, globalData, comp) {
              this.assetData = globalData.getAssetData(data.refId);
              this.initElement(data, globalData, comp);
            }
            extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);
            HImageElement.prototype.createContent = function () {
              var assetPath = this.globalData.getAssetsPath(this.assetData);
              var img = new Image();
              if (this.data.hasMask) {
                this.imageElem = createNS('image');
                this.imageElem.setAttribute('width', this.assetData.w + 'px');
                this.imageElem.setAttribute('height', this.assetData.h + 'px');
                this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);
                this.layerElement.appendChild(this.imageElem);
                this.baseElement.setAttribute('width', this.assetData.w);
                this.baseElement.setAttribute('height', this.assetData.h);
              } else {
                this.layerElement.appendChild(img);
              }
              img.crossOrigin = 'anonymous';
              img.src = assetPath;
              if (this.data.ln) {
                this.baseElement.setAttribute('id', this.data.ln);
              }
            };
            function HybridRendererBase(animationItem, config) {
              this.animationItem = animationItem;
              this.layers = null;
              this.renderedFrame = -1;
              this.renderConfig = {
                className: config && config.className || '',
                imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
                hideOnTransparent: !(config && config.hideOnTransparent === false),
                filterSize: {
                  width: config && config.filterSize && config.filterSize.width || '400%',
                  height: config && config.filterSize && config.filterSize.height || '400%',
                  x: config && config.filterSize && config.filterSize.x || '-100%',
                  y: config && config.filterSize && config.filterSize.y || '-100%'
                }
              };
              this.globalData = {
                _mdf: false,
                frameNum: -1,
                renderConfig: this.renderConfig
              };
              this.pendingElements = [];
              this.elements = [];
              this.threeDElements = [];
              this.destroyed = false;
              this.camera = null;
              this.supports3d = true;
              this.rendererType = 'html';
            }
            extendPrototype([BaseRenderer], HybridRendererBase);
            HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;
            HybridRendererBase.prototype.checkPendingElements = function () {
              while (this.pendingElements.length) {
                var element = this.pendingElements.pop();
                element.checkParenting();
              }
            };
            HybridRendererBase.prototype.appendElementInPos = function (element, pos) {
              var newDOMElement = element.getBaseElement();
              if (!newDOMElement) {
                return;
              }
              var layer = this.layers[pos];
              if (!layer.ddd || !this.supports3d) {
                if (this.threeDElements) {
                  this.addTo3dContainer(newDOMElement, pos);
                } else {
                  var i = 0;
                  var nextDOMElement;
                  var nextLayer;
                  var tmpDOMElement;
                  while (i < pos) {
                    if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement) {
                      nextLayer = this.elements[i];
                      tmpDOMElement = this.layers[i].ddd ? this.getThreeDContainerByPos(i) : nextLayer.getBaseElement();
                      nextDOMElement = tmpDOMElement || nextDOMElement;
                    }
                    i += 1;
                  }
                  if (nextDOMElement) {
                    if (!layer.ddd || !this.supports3d) {
                      this.layerElement.insertBefore(newDOMElement, nextDOMElement);
                    }
                  } else if (!layer.ddd || !this.supports3d) {
                    this.layerElement.appendChild(newDOMElement);
                  }
                }
              } else {
                this.addTo3dContainer(newDOMElement, pos);
              }
            };
            HybridRendererBase.prototype.createShape = function (data) {
              if (!this.supports3d) {
                return new SVGShapeElement(data, this.globalData, this);
              }
              return new HShapeElement(data, this.globalData, this);
            };
            HybridRendererBase.prototype.createText = function (data) {
              if (!this.supports3d) {
                return new SVGTextLottieElement(data, this.globalData, this);
              }
              return new HTextElement(data, this.globalData, this);
            };
            HybridRendererBase.prototype.createCamera = function (data) {
              this.camera = new HCameraElement(data, this.globalData, this);
              return this.camera;
            };
            HybridRendererBase.prototype.createImage = function (data) {
              if (!this.supports3d) {
                return new IImageElement(data, this.globalData, this);
              }
              return new HImageElement(data, this.globalData, this);
            };
            HybridRendererBase.prototype.createSolid = function (data) {
              if (!this.supports3d) {
                return new ISolidElement(data, this.globalData, this);
              }
              return new HSolidElement(data, this.globalData, this);
            };
            HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
            HybridRendererBase.prototype.getThreeDContainerByPos = function (pos) {
              var i = 0;
              var len = this.threeDElements.length;
              while (i < len) {
                if (this.threeDElements[i].startPos <= pos && this.threeDElements[i].endPos >= pos) {
                  return this.threeDElements[i].perspectiveElem;
                }
                i += 1;
              }
              return null;
            };
            HybridRendererBase.prototype.createThreeDContainer = function (pos, type) {
              var perspectiveElem = createTag('div');
              var style;
              var containerStyle;
              styleDiv(perspectiveElem);
              var container = createTag('div');
              styleDiv(container);
              if (type === '3d') {
                style = perspectiveElem.style;
                style.width = this.globalData.compSize.w + 'px';
                style.height = this.globalData.compSize.h + 'px';
                var center = '50% 50%';
                style.webkitTransformOrigin = center;
                style.mozTransformOrigin = center;
                style.transformOrigin = center;
                containerStyle = container.style;
                var matrix = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
                containerStyle.transform = matrix;
                containerStyle.webkitTransform = matrix;
              }
              perspectiveElem.appendChild(container); // this.resizerElem.appendChild(perspectiveElem);

              var threeDContainerData = {
                container: container,
                perspectiveElem: perspectiveElem,
                startPos: pos,
                endPos: pos,
                type: type
              };
              this.threeDElements.push(threeDContainerData);
              return threeDContainerData;
            };
            HybridRendererBase.prototype.build3dContainers = function () {
              var i;
              var len = this.layers.length;
              var lastThreeDContainerData;
              var currentContainer = '';
              for (i = 0; i < len; i += 1) {
                if (this.layers[i].ddd && this.layers[i].ty !== 3) {
                  if (currentContainer !== '3d') {
                    currentContainer = '3d';
                    lastThreeDContainerData = this.createThreeDContainer(i, '3d');
                  }
                  lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
                } else {
                  if (currentContainer !== '2d') {
                    currentContainer = '2d';
                    lastThreeDContainerData = this.createThreeDContainer(i, '2d');
                  }
                  lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
                }
              }
              len = this.threeDElements.length;
              for (i = len - 1; i >= 0; i -= 1) {
                this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);
              }
            };
            HybridRendererBase.prototype.addTo3dContainer = function (elem, pos) {
              var i = 0;
              var len = this.threeDElements.length;
              while (i < len) {
                if (pos <= this.threeDElements[i].endPos) {
                  var j = this.threeDElements[i].startPos;
                  var nextElement;
                  while (j < pos) {
                    if (this.elements[j] && this.elements[j].getBaseElement) {
                      nextElement = this.elements[j].getBaseElement();
                    }
                    j += 1;
                  }
                  if (nextElement) {
                    this.threeDElements[i].container.insertBefore(elem, nextElement);
                  } else {
                    this.threeDElements[i].container.appendChild(elem);
                  }
                  break;
                }
                i += 1;
              }
            };
            HybridRendererBase.prototype.configAnimation = function (animData) {
              var resizerElem = createTag('div');
              var wrapper = this.animationItem.wrapper;
              var style = resizerElem.style;
              style.width = animData.w + 'px';
              style.height = animData.h + 'px';
              this.resizerElem = resizerElem;
              styleDiv(resizerElem);
              style.transformStyle = 'flat';
              style.mozTransformStyle = 'flat';
              style.webkitTransformStyle = 'flat';
              if (this.renderConfig.className) {
                resizerElem.setAttribute('class', this.renderConfig.className);
              }
              wrapper.appendChild(resizerElem);
              style.overflow = 'hidden';
              var svg = createNS('svg');
              svg.setAttribute('width', '1');
              svg.setAttribute('height', '1');
              styleDiv(svg);
              this.resizerElem.appendChild(svg);
              var defs = createNS('defs');
              svg.appendChild(defs);
              this.data = animData; // Mask animation

              this.setupGlobalData(animData, svg);
              this.globalData.defs = defs;
              this.layers = animData.layers;
              this.layerElement = this.resizerElem;
              this.build3dContainers();
              this.updateContainerSize();
            };
            HybridRendererBase.prototype.destroy = function () {
              if (this.animationItem.wrapper) {
                this.animationItem.wrapper.innerText = '';
              }
              this.animationItem.container = null;
              this.globalData.defs = null;
              var i;
              var len = this.layers ? this.layers.length : 0;
              for (i = 0; i < len; i += 1) {
                if (this.elements[i] && this.elements[i].destroy) {
                  this.elements[i].destroy();
                }
              }
              this.elements.length = 0;
              this.destroyed = true;
              this.animationItem = null;
            };
            HybridRendererBase.prototype.updateContainerSize = function () {
              var elementWidth = this.animationItem.wrapper.offsetWidth;
              var elementHeight = this.animationItem.wrapper.offsetHeight;
              var elementRel = elementWidth / elementHeight;
              var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
              var sx;
              var sy;
              var tx;
              var ty;
              if (animationRel > elementRel) {
                sx = elementWidth / this.globalData.compSize.w;
                sy = elementWidth / this.globalData.compSize.w;
                tx = 0;
                ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;
              } else {
                sx = elementHeight / this.globalData.compSize.h;
                sy = elementHeight / this.globalData.compSize.h;
                tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
                ty = 0;
              }
              var style = this.resizerElem.style;
              style.webkitTransform = 'matrix3d(' + sx + ',0,0,0,0,' + sy + ',0,0,0,0,1,0,' + tx + ',' + ty + ',0,1)';
              style.transform = style.webkitTransform;
            };
            HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;
            HybridRendererBase.prototype.hide = function () {
              this.resizerElem.style.display = 'none';
            };
            HybridRendererBase.prototype.show = function () {
              this.resizerElem.style.display = 'block';
            };
            HybridRendererBase.prototype.initItems = function () {
              this.buildAllItems();
              if (this.camera) {
                this.camera.setup();
              } else {
                var cWidth = this.globalData.compSize.w;
                var cHeight = this.globalData.compSize.h;
                var i;
                var len = this.threeDElements.length;
                for (i = 0; i < len; i += 1) {
                  var style = this.threeDElements[i].perspectiveElem.style;
                  style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + 'px';
                  style.perspective = style.webkitPerspective;
                }
              }
            };
            HybridRendererBase.prototype.searchExtraCompositions = function (assets) {
              var i;
              var len = assets.length;
              var floatingContainer = createTag('div');
              for (i = 0; i < len; i += 1) {
                if (assets[i].xt) {
                  var comp = this.createComp(assets[i], floatingContainer, this.globalData.comp, null);
                  comp.initExpressions();
                  this.globalData.projectInterface.registerComposition(comp);
                }
              }
            };
            function HCompElement(data, globalData, comp) {
              this.layers = data.layers;
              this.supports3d = !data.hasMask;
              this.completeLayers = false;
              this.pendingElements = [];
              this.elements = this.layers ? createSizedArray(this.layers.length) : [];
              this.initElement(data, globalData, comp);
              this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
                _placeholder: true
              };
            }
            extendPrototype([HybridRendererBase, ICompElement, HBaseElement], HCompElement);
            HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;
            HCompElement.prototype.createContainerElements = function () {
              this._createBaseContainerElements(); // divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';

              if (this.data.hasMask) {
                this.svgElement.setAttribute('width', this.data.w);
                this.svgElement.setAttribute('height', this.data.h);
                this.transformedElement = this.baseElement;
              } else {
                this.transformedElement = this.layerElement;
              }
            };
            HCompElement.prototype.addTo3dContainer = function (elem, pos) {
              var j = 0;
              var nextElement;
              while (j < pos) {
                if (this.elements[j] && this.elements[j].getBaseElement) {
                  nextElement = this.elements[j].getBaseElement();
                }
                j += 1;
              }
              if (nextElement) {
                this.layerElement.insertBefore(elem, nextElement);
              } else {
                this.layerElement.appendChild(elem);
              }
            };
            HCompElement.prototype.createComp = function (data) {
              if (!this.supports3d) {
                return new SVGCompElement(data, this.globalData, this);
              }
              return new HCompElement(data, this.globalData, this);
            };
            function HybridRenderer(animationItem, config) {
              this.animationItem = animationItem;
              this.layers = null;
              this.renderedFrame = -1;
              this.renderConfig = {
                className: config && config.className || '',
                imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
                hideOnTransparent: !(config && config.hideOnTransparent === false),
                filterSize: {
                  width: config && config.filterSize && config.filterSize.width || '400%',
                  height: config && config.filterSize && config.filterSize.height || '400%',
                  x: config && config.filterSize && config.filterSize.x || '-100%',
                  y: config && config.filterSize && config.filterSize.y || '-100%'
                },
                runExpressions: !config || config.runExpressions === undefined || config.runExpressions
              };
              this.globalData = {
                _mdf: false,
                frameNum: -1,
                renderConfig: this.renderConfig
              };
              this.pendingElements = [];
              this.elements = [];
              this.threeDElements = [];
              this.destroyed = false;
              this.camera = null;
              this.supports3d = true;
              this.rendererType = 'html';
            }
            extendPrototype([HybridRendererBase], HybridRenderer);
            HybridRenderer.prototype.createComp = function (data) {
              if (!this.supports3d) {
                return new SVGCompElement(data, this.globalData, this);
              }
              return new HCompElement(data, this.globalData, this);
            };
            var CompExpressionInterface = function () {
              return function (comp) {
                function _thisLayerFunction(name) {
                  var i = 0;
                  var len = comp.layers.length;
                  while (i < len) {
                    if (comp.layers[i].nm === name || comp.layers[i].ind === name) {
                      return comp.elements[i].layerInterface;
                    }
                    i += 1;
                  }
                  return null; // return {active:false};
                }

                Object.defineProperty(_thisLayerFunction, '_name', {
                  value: comp.data.nm
                });
                _thisLayerFunction.layer = _thisLayerFunction;
                _thisLayerFunction.pixelAspect = 1;
                _thisLayerFunction.height = comp.data.h || comp.globalData.compSize.h;
                _thisLayerFunction.width = comp.data.w || comp.globalData.compSize.w;
                _thisLayerFunction.pixelAspect = 1;
                _thisLayerFunction.frameDuration = 1 / comp.globalData.frameRate;
                _thisLayerFunction.displayStartTime = 0;
                _thisLayerFunction.numLayers = comp.layers.length;
                return _thisLayerFunction;
              };
            }();
            function _typeof$2(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof$2 = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                _typeof$2 = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }
              return _typeof$2(obj);
            }

            /* eslint-disable */

            /*
             Copyright 2014 David Bau.
               Permission is hereby granted, free of charge, to any person obtaining
             a copy of this software and associated documentation files (the
             "Software"), to deal in the Software without restriction, including
             without limitation the rights to use, copy, modify, merge, publish,
             distribute, sublicense, and/or sell copies of the Software, and to
             permit persons to whom the Software is furnished to do so, subject to
             the following conditions:
               The above copyright notice and this permission notice shall be
             included in all copies or substantial portions of the Software.
               THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
             EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
             MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
             IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
             CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
             TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
             SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
               */
            function seedRandom(pool, math) {
              //
              // The following constants are related to IEEE 754 limits.
              //
              var global = this,
                width = 256,
                // each RC4 output is 0 <= x < 256
                chunks = 6,
                // at least six RC4 outputs for each double
                digits = 52,
                // there are 52 significant digits in a double
                rngname = 'random',
                // rngname: name for Math.random and Math.seedrandom
                startdenom = math.pow(width, chunks),
                significance = math.pow(2, digits),
                overflow = significance * 2,
                mask = width - 1,
                nodecrypto; // node.js crypto module, initialized at the bottom.
              //
              // seedrandom()
              // This is the seedrandom function described above.
              //

              function seedrandom(seed, options, callback) {
                var key = [];
                options = options === true ? {
                  entropy: true
                } : options || {}; // Flatten the seed string or build one from local entropy if needed.

                var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed, 3), key); // Use the seed to initialize an ARC4 generator.

                var arc4 = new ARC4(key); // This function returns a random double in [0, 1) that contains
                // randomness in every bit of the mantissa of the IEEE 754 value.

                var prng = function prng() {
                  var n = arc4.g(chunks),
                    // Start with a numerator n < 2 ^ 48
                    d = startdenom,
                    //   and denominator d = 2 ^ 48.
                    x = 0; //   and no 'extra last byte'.

                  while (n < significance) {
                    // Fill up all significant digits by
                    n = (n + x) * width; //   shifting numerator and

                    d *= width; //   denominator and generating a

                    x = arc4.g(1); //   new least-significant-byte.
                  }

                  while (n >= overflow) {
                    // To avoid rounding up, before adding
                    n /= 2; //   last byte, shift everything

                    d /= 2; //   right using integer math until

                    x >>>= 1; //   we have exactly the desired bits.
                  }

                  return (n + x) / d; // Form the number within [0, 1).
                };

                prng.int32 = function () {
                  return arc4.g(4) | 0;
                };
                prng.quick = function () {
                  return arc4.g(4) / 0x100000000;
                };
                prng["double"] = prng; // Mix the randomness into accumulated entropy.

                mixkey(tostring(arc4.S), pool); // Calling convention: what to return as a function of prng, seed, is_math.

                return (options.pass || callback || function (prng, seed, is_math_call, state) {
                  if (state) {
                    // Load the arc4 state from the given state if it has an S array.
                    if (state.S) {
                      copy(state, arc4);
                    } // Only provide the .state method if requested via options.state.

                    prng.state = function () {
                      return copy(arc4, {});
                    };
                  } // If called as a method of Math (Math.seedrandom()), mutate
                  // Math.random because that is how seedrandom.js has worked since v1.0.

                  if (is_math_call) {
                    math[rngname] = prng;
                    return seed;
                  } // Otherwise, it is a newer calling convention, so return the
                  // prng directly.
                  else return prng;
                })(prng, shortseed, 'global' in options ? options.global : this == math, options.state);
              }
              math['seed' + rngname] = seedrandom; //
              // ARC4
              //
              // An ARC4 implementation.  The constructor takes a key in the form of
              // an array of at most (width) integers that should be 0 <= x < (width).
              //
              // The g(count) method returns a pseudorandom integer that concatenates
              // the next (count) outputs from ARC4.  Its return value is a number x
              // that is in the range 0 <= x < (width ^ count).
              //

              function ARC4(key) {
                var t,
                  keylen = key.length,
                  me = this,
                  i = 0,
                  j = me.i = me.j = 0,
                  s = me.S = []; // The empty key [] is treated as [0].

                if (!keylen) {
                  key = [keylen++];
                } // Set up S using the standard key scheduling algorithm.

                while (i < width) {
                  s[i] = i++;
                }
                for (i = 0; i < width; i++) {
                  s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
                  s[j] = t;
                } // The "g" method returns the next (count) outputs as one number.

                me.g = function (count) {
                  // Using instance members instead of closure state nearly doubles speed.
                  var t,
                    r = 0,
                    i = me.i,
                    j = me.j,
                    s = me.S;
                  while (count--) {
                    t = s[i = mask & i + 1];
                    r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];
                  }
                  me.i = i;
                  me.j = j;
                  return r; // For robust unpredictability, the function call below automatically
                  // discards an initial batch of values.  This is called RC4-drop[256].
                  // See http://google.com/search?q=rsa+fluhrer+response&btnI
                };
              } //
              // copy()
              // Copies internal state of ARC4 to or from a plain object.
              //

              function copy(f, t) {
                t.i = f.i;
                t.j = f.j;
                t.S = f.S.slice();
                return t;
              } //
              // flatten()
              // Converts an object tree to nested arrays of strings.
              //

              function flatten(obj, depth) {
                var result = [],
                  typ = _typeof$2(obj),
                  prop;
                if (depth && typ == 'object') {
                  for (prop in obj) {
                    try {
                      result.push(flatten(obj[prop], depth - 1));
                    } catch (e) {}
                  }
                }
                return result.length ? result : typ == 'string' ? obj : obj + '\0';
              } //
              // mixkey()
              // Mixes a string seed into a key that is an array of integers, and
              // returns a shortened string seed that is equivalent to the result key.
              //

              function mixkey(seed, key) {
                var stringseed = seed + '',
                  smear,
                  j = 0;
                while (j < stringseed.length) {
                  key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
                }
                return tostring(key);
              } //
              // autoseed()
              // Returns an object for autoseeding, using window.crypto and Node crypto
              // module if available.
              //

              function autoseed() {
                try {
                  if (nodecrypto) ;
                  var out = new Uint8Array(width);
                  (global.crypto || global.msCrypto).getRandomValues(out);
                  return tostring(out);
                } catch (e) {
                  var browser = global.navigator,
                    plugins = browser && browser.plugins;
                  return [+new Date(), global, plugins, global.screen, tostring(pool)];
                }
              } //
              // tostring()
              // Converts an array of charcodes to a string
              //

              function tostring(a) {
                return String.fromCharCode.apply(0, a);
              } //
              // When seedrandom.js is loaded, we immediately mix a few bits
              // from the built-in RNG into the entropy pool.  Because we do
              // not want to interfere with deterministic PRNG state later,
              // seedrandom will not call math.random on its own again after
              // initialization.
              //

              mixkey(math.random(), pool); //
              // Nodejs and AMD support: export the implementation as a module using
              // either convention.
              //
              // End anonymous scope, and pass initial values.
            }

            function initialize$2(BMMath) {
              seedRandom([], BMMath);
            }
            var propTypes = {
              SHAPE: 'shape'
            };
            function _typeof$1(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof$1 = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                _typeof$1 = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }
              return _typeof$1(obj);
            }
            var ExpressionManager = function () {
              var ob = {};
              var Math = BMMath;
              var window = null;
              var document = null;
              var XMLHttpRequest = null;
              var fetch = null;
              var frames = null;
              var _lottieGlobal = {};
              initialize$2(BMMath);
              function resetFrame() {
                _lottieGlobal = {};
              }
              function $bm_isInstanceOfArray(arr) {
                return arr.constructor === Array || arr.constructor === Float32Array;
              }
              function isNumerable(tOfV, v) {
                return tOfV === 'number' || v instanceof Number || tOfV === 'boolean' || tOfV === 'string';
              }
              function $bm_neg(a) {
                var tOfA = _typeof$1(a);
                if (tOfA === 'number' || a instanceof Number || tOfA === 'boolean') {
                  return -a;
                }
                if ($bm_isInstanceOfArray(a)) {
                  var i;
                  var lenA = a.length;
                  var retArr = [];
                  for (i = 0; i < lenA; i += 1) {
                    retArr[i] = -a[i];
                  }
                  return retArr;
                }
                if (a.propType) {
                  return a.v;
                }
                return -a;
              }
              var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, 'easeIn').get;
              var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, 'easeOut').get;
              var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, 'easeInOut').get;
              function sum(a, b) {
                var tOfA = _typeof$1(a);
                var tOfB = _typeof$1(b);
                if (isNumerable(tOfA, a) && isNumerable(tOfB, b) || tOfA === 'string' || tOfB === 'string') {
                  return a + b;
                }
                if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
                  a = a.slice(0);
                  a[0] += b;
                  return a;
                }
                if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
                  b = b.slice(0);
                  b[0] = a + b[0];
                  return b;
                }
                if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
                  var i = 0;
                  var lenA = a.length;
                  var lenB = b.length;
                  var retArr = [];
                  while (i < lenA || i < lenB) {
                    if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
                      retArr[i] = a[i] + b[i];
                    } else {
                      retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
                    }
                    i += 1;
                  }
                  return retArr;
                }
                return 0;
              }
              var add = sum;
              function sub(a, b) {
                var tOfA = _typeof$1(a);
                var tOfB = _typeof$1(b);
                if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
                  if (tOfA === 'string') {
                    a = parseInt(a, 10);
                  }
                  if (tOfB === 'string') {
                    b = parseInt(b, 10);
                  }
                  return a - b;
                }
                if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
                  a = a.slice(0);
                  a[0] -= b;
                  return a;
                }
                if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
                  b = b.slice(0);
                  b[0] = a - b[0];
                  return b;
                }
                if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
                  var i = 0;
                  var lenA = a.length;
                  var lenB = b.length;
                  var retArr = [];
                  while (i < lenA || i < lenB) {
                    if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
                      retArr[i] = a[i] - b[i];
                    } else {
                      retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
                    }
                    i += 1;
                  }
                  return retArr;
                }
                return 0;
              }
              function mul(a, b) {
                var tOfA = _typeof$1(a);
                var tOfB = _typeof$1(b);
                var arr;
                if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
                  return a * b;
                }
                var i;
                var len;
                if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
                  len = a.length;
                  arr = createTypedArray('float32', len);
                  for (i = 0; i < len; i += 1) {
                    arr[i] = a[i] * b;
                  }
                  return arr;
                }
                if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
                  len = b.length;
                  arr = createTypedArray('float32', len);
                  for (i = 0; i < len; i += 1) {
                    arr[i] = a * b[i];
                  }
                  return arr;
                }
                return 0;
              }
              function div(a, b) {
                var tOfA = _typeof$1(a);
                var tOfB = _typeof$1(b);
                var arr;
                if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
                  return a / b;
                }
                var i;
                var len;
                if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
                  len = a.length;
                  arr = createTypedArray('float32', len);
                  for (i = 0; i < len; i += 1) {
                    arr[i] = a[i] / b;
                  }
                  return arr;
                }
                if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
                  len = b.length;
                  arr = createTypedArray('float32', len);
                  for (i = 0; i < len; i += 1) {
                    arr[i] = a / b[i];
                  }
                  return arr;
                }
                return 0;
              }
              function mod(a, b) {
                if (typeof a === 'string') {
                  a = parseInt(a, 10);
                }
                if (typeof b === 'string') {
                  b = parseInt(b, 10);
                }
                return a % b;
              }
              var $bm_sum = sum;
              var $bm_sub = sub;
              var $bm_mul = mul;
              var $bm_div = div;
              var $bm_mod = mod;
              function clamp(num, min, max) {
                if (min > max) {
                  var mm = max;
                  max = min;
                  min = mm;
                }
                return Math.min(Math.max(num, min), max);
              }
              function radiansToDegrees(val) {
                return val / degToRads;
              }
              var radians_to_degrees = radiansToDegrees;
              function degreesToRadians(val) {
                return val * degToRads;
              }
              var degrees_to_radians = radiansToDegrees;
              var helperLengthArray = [0, 0, 0, 0, 0, 0];
              function length(arr1, arr2) {
                if (typeof arr1 === 'number' || arr1 instanceof Number) {
                  arr2 = arr2 || 0;
                  return Math.abs(arr1 - arr2);
                }
                if (!arr2) {
                  arr2 = helperLengthArray;
                }
                var i;
                var len = Math.min(arr1.length, arr2.length);
                var addedLength = 0;
                for (i = 0; i < len; i += 1) {
                  addedLength += Math.pow(arr2[i] - arr1[i], 2);
                }
                return Math.sqrt(addedLength);
              }
              function normalize(vec) {
                return div(vec, length(vec));
              }
              function rgbToHsl(val) {
                var r = val[0];
                var g = val[1];
                var b = val[2];
                var max = Math.max(r, g, b);
                var min = Math.min(r, g, b);
                var h;
                var s;
                var l = (max + min) / 2;
                if (max === min) {
                  h = 0; // achromatic

                  s = 0; // achromatic
                } else {
                  var d = max - min;
                  s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                  switch (max) {
                    case r:
                      h = (g - b) / d + (g < b ? 6 : 0);
                      break;
                    case g:
                      h = (b - r) / d + 2;
                      break;
                    case b:
                      h = (r - g) / d + 4;
                      break;
                  }
                  h /= 6;
                }
                return [h, s, l, val[3]];
              }
              function hue2rgb(p, q, t) {
                if (t < 0) t += 1;
                if (t > 1) t -= 1;
                if (t < 1 / 6) return p + (q - p) * 6 * t;
                if (t < 1 / 2) return q;
                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
                return p;
              }
              function hslToRgb(val) {
                var h = val[0];
                var s = val[1];
                var l = val[2];
                var r;
                var g;
                var b;
                if (s === 0) {
                  r = l; // achromatic

                  b = l; // achromatic

                  g = l; // achromatic
                } else {
                  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                  var p = 2 * l - q;
                  r = hue2rgb(p, q, h + 1 / 3);
                  g = hue2rgb(p, q, h);
                  b = hue2rgb(p, q, h - 1 / 3);
                }
                return [r, g, b, val[3]];
              }
              function linear(t, tMin, tMax, value1, value2) {
                if (value1 === undefined || value2 === undefined) {
                  value1 = tMin;
                  value2 = tMax;
                  tMin = 0;
                  tMax = 1;
                }
                if (tMax < tMin) {
                  var _tMin = tMax;
                  tMax = tMin;
                  tMin = _tMin;
                }
                if (t <= tMin) {
                  return value1;
                }
                if (t >= tMax) {
                  return value2;
                }
                var perc = tMax === tMin ? 0 : (t - tMin) / (tMax - tMin);
                if (!value1.length) {
                  return value1 + (value2 - value1) * perc;
                }
                var i;
                var len = value1.length;
                var arr = createTypedArray('float32', len);
                for (i = 0; i < len; i += 1) {
                  arr[i] = value1[i] + (value2[i] - value1[i]) * perc;
                }
                return arr;
              }
              function random(min, max) {
                if (max === undefined) {
                  if (min === undefined) {
                    min = 0;
                    max = 1;
                  } else {
                    max = min;
                    min = undefined;
                  }
                }
                if (max.length) {
                  var i;
                  var len = max.length;
                  if (!min) {
                    min = createTypedArray('float32', len);
                  }
                  var arr = createTypedArray('float32', len);
                  var rnd = BMMath.random();
                  for (i = 0; i < len; i += 1) {
                    arr[i] = min[i] + rnd * (max[i] - min[i]);
                  }
                  return arr;
                }
                if (min === undefined) {
                  min = 0;
                }
                var rndm = BMMath.random();
                return min + rndm * (max - min);
              }
              function createPath(points, inTangents, outTangents, closed) {
                var i;
                var len = points.length;
                var path = shapePool.newElement();
                path.setPathData(!!closed, len);
                var arrPlaceholder = [0, 0];
                var inVertexPoint;
                var outVertexPoint;
                for (i = 0; i < len; i += 1) {
                  inVertexPoint = inTangents && inTangents[i] ? inTangents[i] : arrPlaceholder;
                  outVertexPoint = outTangents && outTangents[i] ? outTangents[i] : arrPlaceholder;
                  path.setTripleAt(points[i][0], points[i][1], outVertexPoint[0] + points[i][0], outVertexPoint[1] + points[i][1], inVertexPoint[0] + points[i][0], inVertexPoint[1] + points[i][1], i, true);
                }
                return path;
              }
              function initiateExpression(elem, data, property) {
                // Bail out if we don't want expressions
                function noOp(_value) {
                  return _value;
                }
                if (!elem.globalData.renderConfig.runExpressions) {
                  return noOp;
                }
                var val = data.x;
                var needsVelocity = /velocity(?![\w\d])/.test(val);
                var _needsRandom = val.indexOf('random') !== -1;
                var elemType = elem.data.ty;
                var transform;
                var $bm_transform;
                var content;
                var effect;
                var thisProperty = property;
                thisProperty.valueAtTime = thisProperty.getValueAtTime;
                Object.defineProperty(thisProperty, 'value', {
                  get: function get() {
                    return thisProperty.v;
                  }
                });
                elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
                elem.comp.displayStartTime = 0;
                var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
                var outPoint = elem.data.op / elem.comp.globalData.frameRate;
                var width = elem.data.sw ? elem.data.sw : 0;
                var height = elem.data.sh ? elem.data.sh : 0;
                var name = elem.data.nm;
                var loopIn;
                var loop_in;
                var loopOut;
                var loop_out;
                var smooth;
                var toWorld;
                var fromWorld;
                var fromComp;
                var toComp;
                var fromCompToSurface;
                var position;
                var rotation;
                var anchorPoint;
                var scale;
                var thisLayer;
                var thisComp;
                var mask;
                var valueAtTime;
                var velocityAtTime;
                var scoped_bm_rt; // val = val.replace(/(\\?"|')((http)(s)?(:\/))?\/.*?(\\?"|')/g, "\"\""); // deter potential network calls

                var expression_function = eval('[function _expression_function(){' + val + ';scoped_bm_rt=$bm_rt}]')[0]; // eslint-disable-line no-eval

                var numKeys = property.kf ? data.k.length : 0;
                var active = !this.data || this.data.hd !== true;
                var wiggle = function wiggle(freq, amp) {
                  var iWiggle;
                  var j;
                  var lenWiggle = this.pv.length ? this.pv.length : 1;
                  var addedAmps = createTypedArray('float32', lenWiggle);
                  freq = 5;
                  var iterations = Math.floor(time * freq);
                  iWiggle = 0;
                  j = 0;
                  while (iWiggle < iterations) {
                    // var rnd = BMMath.random();
                    for (j = 0; j < lenWiggle; j += 1) {
                      addedAmps[j] += -amp + amp * 2 * BMMath.random(); // addedAmps[j] += -amp + amp*2*rnd;
                    }

                    iWiggle += 1;
                  } // var rnd2 = BMMath.random();

                  var periods = time * freq;
                  var perc = periods - Math.floor(periods);
                  var arr = createTypedArray('float32', lenWiggle);
                  if (lenWiggle > 1) {
                    for (j = 0; j < lenWiggle; j += 1) {
                      arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp * 2 * BMMath.random()) * perc; // arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
                      // arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
                    }

                    return arr;
                  }
                  return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;
                }.bind(this);
                if (thisProperty.loopIn) {
                  loopIn = thisProperty.loopIn.bind(thisProperty);
                  loop_in = loopIn;
                }
                if (thisProperty.loopOut) {
                  loopOut = thisProperty.loopOut.bind(thisProperty);
                  loop_out = loopOut;
                }
                if (thisProperty.smooth) {
                  smooth = thisProperty.smooth.bind(thisProperty);
                }
                function loopInDuration(type, duration) {
                  return loopIn(type, duration, true);
                }
                function loopOutDuration(type, duration) {
                  return loopOut(type, duration, true);
                }
                if (this.getValueAtTime) {
                  valueAtTime = this.getValueAtTime.bind(this);
                }
                if (this.getVelocityAtTime) {
                  velocityAtTime = this.getVelocityAtTime.bind(this);
                }
                var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);
                function lookAt(elem1, elem2) {
                  var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
                  var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
                  var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
                  return [yaw, pitch, 0];
                }
                function easeOut(t, tMin, tMax, val1, val2) {
                  return applyEase(easeOutBez, t, tMin, tMax, val1, val2);
                }
                function easeIn(t, tMin, tMax, val1, val2) {
                  return applyEase(easeInBez, t, tMin, tMax, val1, val2);
                }
                function ease(t, tMin, tMax, val1, val2) {
                  return applyEase(easeInOutBez, t, tMin, tMax, val1, val2);
                }
                function applyEase(fn, t, tMin, tMax, val1, val2) {
                  if (val1 === undefined) {
                    val1 = tMin;
                    val2 = tMax;
                  } else {
                    t = (t - tMin) / (tMax - tMin);
                  }
                  if (t > 1) {
                    t = 1;
                  } else if (t < 0) {
                    t = 0;
                  }
                  var mult = fn(t);
                  if ($bm_isInstanceOfArray(val1)) {
                    var iKey;
                    var lenKey = val1.length;
                    var arr = createTypedArray('float32', lenKey);
                    for (iKey = 0; iKey < lenKey; iKey += 1) {
                      arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
                    }
                    return arr;
                  }
                  return (val2 - val1) * mult + val1;
                }
                function nearestKey(time) {
                  var iKey;
                  var lenKey = data.k.length;
                  var index;
                  var keyTime;
                  if (!data.k.length || typeof data.k[0] === 'number') {
                    index = 0;
                    keyTime = 0;
                  } else {
                    index = -1;
                    time *= elem.comp.globalData.frameRate;
                    if (time < data.k[0].t) {
                      index = 1;
                      keyTime = data.k[0].t;
                    } else {
                      for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
                        if (time === data.k[iKey].t) {
                          index = iKey + 1;
                          keyTime = data.k[iKey].t;
                          break;
                        } else if (time > data.k[iKey].t && time < data.k[iKey + 1].t) {
                          if (time - data.k[iKey].t > data.k[iKey + 1].t - time) {
                            index = iKey + 2;
                            keyTime = data.k[iKey + 1].t;
                          } else {
                            index = iKey + 1;
                            keyTime = data.k[iKey].t;
                          }
                          break;
                        }
                      }
                      if (index === -1) {
                        index = iKey + 1;
                        keyTime = data.k[iKey].t;
                      }
                    }
                  }
                  var obKey = {};
                  obKey.index = index;
                  obKey.time = keyTime / elem.comp.globalData.frameRate;
                  return obKey;
                }
                function key(ind) {
                  var obKey;
                  var iKey;
                  var lenKey;
                  if (!data.k.length || typeof data.k[0] === 'number') {
                    throw new Error('The property has no keyframe at index ' + ind);
                  }
                  ind -= 1;
                  obKey = {
                    time: data.k[ind].t / elem.comp.globalData.frameRate,
                    value: []
                  };
                  var arr = Object.prototype.hasOwnProperty.call(data.k[ind], 's') ? data.k[ind].s : data.k[ind - 1].e;
                  lenKey = arr.length;
                  for (iKey = 0; iKey < lenKey; iKey += 1) {
                    obKey[iKey] = arr[iKey];
                    obKey.value[iKey] = arr[iKey];
                  }
                  return obKey;
                }
                function framesToTime(fr, fps) {
                  if (!fps) {
                    fps = elem.comp.globalData.frameRate;
                  }
                  return fr / fps;
                }
                function timeToFrames(t, fps) {
                  if (!t && t !== 0) {
                    t = time;
                  }
                  if (!fps) {
                    fps = elem.comp.globalData.frameRate;
                  }
                  return t * fps;
                }
                function seedRandom(seed) {
                  BMMath.seedrandom(randSeed + seed);
                }
                function sourceRectAtTime() {
                  return elem.sourceRectAtTime();
                }
                function substring(init, end) {
                  if (typeof value === 'string') {
                    if (end === undefined) {
                      return value.substring(init);
                    }
                    return value.substring(init, end);
                  }
                  return '';
                }
                function substr(init, end) {
                  if (typeof value === 'string') {
                    if (end === undefined) {
                      return value.substr(init);
                    }
                    return value.substr(init, end);
                  }
                  return '';
                }
                function posterizeTime(framesPerSecond) {
                  time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;
                  value = valueAtTime(time);
                }
                var time;
                var velocity;
                var value;
                var text;
                var textIndex;
                var textTotal;
                var selectorValue;
                var index = elem.data.ind;
                var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
                var parent;
                var randSeed = Math.floor(Math.random() * 1000000);
                var globalData = elem.globalData;
                function executeExpression(_value) {
                  // globalData.pushExpression();
                  value = _value;
                  if (this.frameExpressionId === elem.globalData.frameId && this.propType !== 'textSelector') {
                    return value;
                  }
                  if (this.propType === 'textSelector') {
                    textIndex = this.textIndex;
                    textTotal = this.textTotal;
                    selectorValue = this.selectorValue;
                  }
                  if (!thisLayer) {
                    text = elem.layerInterface.text;
                    thisLayer = elem.layerInterface;
                    thisComp = elem.comp.compInterface;
                    toWorld = thisLayer.toWorld.bind(thisLayer);
                    fromWorld = thisLayer.fromWorld.bind(thisLayer);
                    fromComp = thisLayer.fromComp.bind(thisLayer);
                    toComp = thisLayer.toComp.bind(thisLayer);
                    mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
                    fromCompToSurface = fromComp;
                  }
                  if (!transform) {
                    transform = elem.layerInterface('ADBE Transform Group');
                    $bm_transform = transform;
                    if (transform) {
                      anchorPoint = transform.anchorPoint;
                      /* position = transform.position;
                                rotation = transform.rotation;
                                scale = transform.scale; */
                    }
                  }

                  if (elemType === 4 && !content) {
                    content = thisLayer('ADBE Root Vectors Group');
                  }
                  if (!effect) {
                    effect = thisLayer(4);
                  }
                  hasParent = !!(elem.hierarchy && elem.hierarchy.length);
                  if (hasParent && !parent) {
                    parent = elem.hierarchy[0].layerInterface;
                  }
                  time = this.comp.renderedFrame / this.comp.globalData.frameRate;
                  if (_needsRandom) {
                    seedRandom(randSeed + time);
                  }
                  if (needsVelocity) {
                    velocity = velocityAtTime(time);
                  }
                  expression_function();
                  this.frameExpressionId = elem.globalData.frameId; // TODO: Check if it's possible to return on ShapeInterface the .v value
                  // Changed this to a ternary operation because Rollup failed compiling it correctly

                  scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;
                  return scoped_bm_rt;
                } // Bundlers will see these as dead code and unless we reference them

                executeExpression.__preventDeadCodeRemoval = [$bm_transform, anchorPoint, time, velocity, inPoint, outPoint, width, height, name, loop_in, loop_out, smooth, toComp, fromCompToSurface, toWorld, fromWorld, mask, position, rotation, scale, thisComp, numKeys, active, wiggle, loopInDuration, loopOutDuration, comp, lookAt, easeOut, easeIn, ease, nearestKey, key, text, textIndex, textTotal, selectorValue, framesToTime, timeToFrames, sourceRectAtTime, substring, substr, posterizeTime, index, globalData];
                return executeExpression;
              }
              ob.initiateExpression = initiateExpression;
              ob.__preventDeadCodeRemoval = [window, document, XMLHttpRequest, fetch, frames, $bm_neg, add, $bm_sum, $bm_sub, $bm_mul, $bm_div, $bm_mod, clamp, radians_to_degrees, degreesToRadians, degrees_to_radians, normalize, rgbToHsl, hslToRgb, linear, random, createPath, _lottieGlobal];
              ob.resetFrame = resetFrame;
              return ob;
            }();
            var Expressions = function () {
              var ob = {};
              ob.initExpressions = initExpressions;
              ob.resetFrame = ExpressionManager.resetFrame;
              function initExpressions(animation) {
                var stackCount = 0;
                var registers = [];
                function pushExpression() {
                  stackCount += 1;
                }
                function popExpression() {
                  stackCount -= 1;
                  if (stackCount === 0) {
                    releaseInstances();
                  }
                }
                function registerExpressionProperty(expression) {
                  if (registers.indexOf(expression) === -1) {
                    registers.push(expression);
                  }
                }
                function releaseInstances() {
                  var i;
                  var len = registers.length;
                  for (i = 0; i < len; i += 1) {
                    registers[i].release();
                  }
                  registers.length = 0;
                }
                animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
                animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
                animation.renderer.globalData.pushExpression = pushExpression;
                animation.renderer.globalData.popExpression = popExpression;
                animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
              }
              return ob;
            }();
            var MaskManagerInterface = function () {
              function MaskInterface(mask, data) {
                this._mask = mask;
                this._data = data;
              }
              Object.defineProperty(MaskInterface.prototype, 'maskPath', {
                get: function get() {
                  if (this._mask.prop.k) {
                    this._mask.prop.getValue();
                  }
                  return this._mask.prop;
                }
              });
              Object.defineProperty(MaskInterface.prototype, 'maskOpacity', {
                get: function get() {
                  if (this._mask.op.k) {
                    this._mask.op.getValue();
                  }
                  return this._mask.op.v * 100;
                }
              });
              var MaskManager = function MaskManager(maskManager) {
                var _masksInterfaces = createSizedArray(maskManager.viewData.length);
                var i;
                var len = maskManager.viewData.length;
                for (i = 0; i < len; i += 1) {
                  _masksInterfaces[i] = new MaskInterface(maskManager.viewData[i], maskManager.masksProperties[i]);
                }
                var maskFunction = function maskFunction(name) {
                  i = 0;
                  while (i < len) {
                    if (maskManager.masksProperties[i].nm === name) {
                      return _masksInterfaces[i];
                    }
                    i += 1;
                  }
                  return null;
                };
                return maskFunction;
              };
              return MaskManager;
            }();
            var ExpressionPropertyInterface = function () {
              var defaultUnidimensionalValue = {
                pv: 0,
                v: 0,
                mult: 1
              };
              var defaultMultidimensionalValue = {
                pv: [0, 0, 0],
                v: [0, 0, 0],
                mult: 1
              };
              function completeProperty(expressionValue, property, type) {
                Object.defineProperty(expressionValue, 'velocity', {
                  get: function get() {
                    return property.getVelocityAtTime(property.comp.currentFrame);
                  }
                });
                expressionValue.numKeys = property.keyframes ? property.keyframes.length : 0;
                expressionValue.key = function (pos) {
                  if (!expressionValue.numKeys) {
                    return 0;
                  }
                  var value = '';
                  if ('s' in property.keyframes[pos - 1]) {
                    value = property.keyframes[pos - 1].s;
                  } else if ('e' in property.keyframes[pos - 2]) {
                    value = property.keyframes[pos - 2].e;
                  } else {
                    value = property.keyframes[pos - 2].s;
                  }
                  var valueProp = type === 'unidimensional' ? new Number(value) : Object.assign({}, value); // eslint-disable-line no-new-wrappers

                  valueProp.time = property.keyframes[pos - 1].t / property.elem.comp.globalData.frameRate;
                  valueProp.value = type === 'unidimensional' ? value[0] : value;
                  return valueProp;
                };
                expressionValue.valueAtTime = property.getValueAtTime;
                expressionValue.speedAtTime = property.getSpeedAtTime;
                expressionValue.velocityAtTime = property.getVelocityAtTime;
                expressionValue.propertyGroup = property.propertyGroup;
              }
              function UnidimensionalPropertyInterface(property) {
                if (!property || !('pv' in property)) {
                  property = defaultUnidimensionalValue;
                }
                var mult = 1 / property.mult;
                var val = property.pv * mult;
                var expressionValue = new Number(val); // eslint-disable-line no-new-wrappers

                expressionValue.value = val;
                completeProperty(expressionValue, property, 'unidimensional');
                return function () {
                  if (property.k) {
                    property.getValue();
                  }
                  val = property.v * mult;
                  if (expressionValue.value !== val) {
                    expressionValue = new Number(val); // eslint-disable-line no-new-wrappers

                    expressionValue.value = val;
                    completeProperty(expressionValue, property, 'unidimensional');
                  }
                  return expressionValue;
                };
              }
              function MultidimensionalPropertyInterface(property) {
                if (!property || !('pv' in property)) {
                  property = defaultMultidimensionalValue;
                }
                var mult = 1 / property.mult;
                var len = property.data && property.data.l || property.pv.length;
                var expressionValue = createTypedArray('float32', len);
                var arrValue = createTypedArray('float32', len);
                expressionValue.value = arrValue;
                completeProperty(expressionValue, property, 'multidimensional');
                return function () {
                  if (property.k) {
                    property.getValue();
                  }
                  for (var i = 0; i < len; i += 1) {
                    arrValue[i] = property.v[i] * mult;
                    expressionValue[i] = arrValue[i];
                  }
                  return expressionValue;
                };
              } // TODO: try to avoid using this getter

              function defaultGetter() {
                return defaultUnidimensionalValue;
              }
              return function (property) {
                if (!property) {
                  return defaultGetter;
                }
                if (property.propType === 'unidimensional') {
                  return UnidimensionalPropertyInterface(property);
                }
                return MultidimensionalPropertyInterface(property);
              };
            }();
            var TransformExpressionInterface = function () {
              return function (transform) {
                function _thisFunction(name) {
                  switch (name) {
                    case 'scale':
                    case 'Scale':
                    case 'ADBE Scale':
                    case 6:
                      return _thisFunction.scale;
                    case 'rotation':
                    case 'Rotation':
                    case 'ADBE Rotation':
                    case 'ADBE Rotate Z':
                    case 10:
                      return _thisFunction.rotation;
                    case 'ADBE Rotate X':
                      return _thisFunction.xRotation;
                    case 'ADBE Rotate Y':
                      return _thisFunction.yRotation;
                    case 'position':
                    case 'Position':
                    case 'ADBE Position':
                    case 2:
                      return _thisFunction.position;
                    case 'ADBE Position_0':
                      return _thisFunction.xPosition;
                    case 'ADBE Position_1':
                      return _thisFunction.yPosition;
                    case 'ADBE Position_2':
                      return _thisFunction.zPosition;
                    case 'anchorPoint':
                    case 'AnchorPoint':
                    case 'Anchor Point':
                    case 'ADBE AnchorPoint':
                    case 1:
                      return _thisFunction.anchorPoint;
                    case 'opacity':
                    case 'Opacity':
                    case 11:
                      return _thisFunction.opacity;
                    default:
                      return null;
                  }
                }
                Object.defineProperty(_thisFunction, 'rotation', {
                  get: ExpressionPropertyInterface(transform.r || transform.rz)
                });
                Object.defineProperty(_thisFunction, 'zRotation', {
                  get: ExpressionPropertyInterface(transform.rz || transform.r)
                });
                Object.defineProperty(_thisFunction, 'xRotation', {
                  get: ExpressionPropertyInterface(transform.rx)
                });
                Object.defineProperty(_thisFunction, 'yRotation', {
                  get: ExpressionPropertyInterface(transform.ry)
                });
                Object.defineProperty(_thisFunction, 'scale', {
                  get: ExpressionPropertyInterface(transform.s)
                });
                var _px;
                var _py;
                var _pz;
                var _transformFactory;
                if (transform.p) {
                  _transformFactory = ExpressionPropertyInterface(transform.p);
                } else {
                  _px = ExpressionPropertyInterface(transform.px);
                  _py = ExpressionPropertyInterface(transform.py);
                  if (transform.pz) {
                    _pz = ExpressionPropertyInterface(transform.pz);
                  }
                }
                Object.defineProperty(_thisFunction, 'position', {
                  get: function get() {
                    if (transform.p) {
                      return _transformFactory();
                    }
                    return [_px(), _py(), _pz ? _pz() : 0];
                  }
                });
                Object.defineProperty(_thisFunction, 'xPosition', {
                  get: ExpressionPropertyInterface(transform.px)
                });
                Object.defineProperty(_thisFunction, 'yPosition', {
                  get: ExpressionPropertyInterface(transform.py)
                });
                Object.defineProperty(_thisFunction, 'zPosition', {
                  get: ExpressionPropertyInterface(transform.pz)
                });
                Object.defineProperty(_thisFunction, 'anchorPoint', {
                  get: ExpressionPropertyInterface(transform.a)
                });
                Object.defineProperty(_thisFunction, 'opacity', {
                  get: ExpressionPropertyInterface(transform.o)
                });
                Object.defineProperty(_thisFunction, 'skew', {
                  get: ExpressionPropertyInterface(transform.sk)
                });
                Object.defineProperty(_thisFunction, 'skewAxis', {
                  get: ExpressionPropertyInterface(transform.sa)
                });
                Object.defineProperty(_thisFunction, 'orientation', {
                  get: ExpressionPropertyInterface(transform.or)
                });
                return _thisFunction;
              };
            }();
            var LayerExpressionInterface = function () {
              function getMatrix(time) {
                var toWorldMat = new Matrix();
                if (time !== undefined) {
                  var propMatrix = this._elem.finalTransform.mProp.getValueAtTime(time);
                  propMatrix.clone(toWorldMat);
                } else {
                  var transformMat = this._elem.finalTransform.mProp;
                  transformMat.applyToMatrix(toWorldMat);
                }
                return toWorldMat;
              }
              function toWorldVec(arr, time) {
                var toWorldMat = this.getMatrix(time);
                toWorldMat.props[12] = 0;
                toWorldMat.props[13] = 0;
                toWorldMat.props[14] = 0;
                return this.applyPoint(toWorldMat, arr);
              }
              function toWorld(arr, time) {
                var toWorldMat = this.getMatrix(time);
                return this.applyPoint(toWorldMat, arr);
              }
              function fromWorldVec(arr, time) {
                var toWorldMat = this.getMatrix(time);
                toWorldMat.props[12] = 0;
                toWorldMat.props[13] = 0;
                toWorldMat.props[14] = 0;
                return this.invertPoint(toWorldMat, arr);
              }
              function fromWorld(arr, time) {
                var toWorldMat = this.getMatrix(time);
                return this.invertPoint(toWorldMat, arr);
              }
              function applyPoint(matrix, arr) {
                if (this._elem.hierarchy && this._elem.hierarchy.length) {
                  var i;
                  var len = this._elem.hierarchy.length;
                  for (i = 0; i < len; i += 1) {
                    this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);
                  }
                }
                return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);
              }
              function invertPoint(matrix, arr) {
                if (this._elem.hierarchy && this._elem.hierarchy.length) {
                  var i;
                  var len = this._elem.hierarchy.length;
                  for (i = 0; i < len; i += 1) {
                    this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);
                  }
                }
                return matrix.inversePoint(arr);
              }
              function fromComp(arr) {
                var toWorldMat = new Matrix();
                toWorldMat.reset();
                this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
                if (this._elem.hierarchy && this._elem.hierarchy.length) {
                  var i;
                  var len = this._elem.hierarchy.length;
                  for (i = 0; i < len; i += 1) {
                    this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
                  }
                  return toWorldMat.inversePoint(arr);
                }
                return toWorldMat.inversePoint(arr);
              }
              function sampleImage() {
                return [1, 1, 1, 1];
              }
              return function (elem) {
                var transformInterface;
                function _registerMaskInterface(maskManager) {
                  _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem);
                }
                function _registerEffectsInterface(effects) {
                  _thisLayerFunction.effect = effects;
                }
                function _thisLayerFunction(name) {
                  switch (name) {
                    case 'ADBE Root Vectors Group':
                    case 'Contents':
                    case 2:
                      return _thisLayerFunction.shapeInterface;
                    case 1:
                    case 6:
                    case 'Transform':
                    case 'transform':
                    case 'ADBE Transform Group':
                      return transformInterface;
                    case 4:
                    case 'ADBE Effect Parade':
                    case 'effects':
                    case 'Effects':
                      return _thisLayerFunction.effect;
                    case 'ADBE Text Properties':
                      return _thisLayerFunction.textInterface;
                    default:
                      return null;
                  }
                }
                _thisLayerFunction.getMatrix = getMatrix;
                _thisLayerFunction.invertPoint = invertPoint;
                _thisLayerFunction.applyPoint = applyPoint;
                _thisLayerFunction.toWorld = toWorld;
                _thisLayerFunction.toWorldVec = toWorldVec;
                _thisLayerFunction.fromWorld = fromWorld;
                _thisLayerFunction.fromWorldVec = fromWorldVec;
                _thisLayerFunction.toComp = toWorld;
                _thisLayerFunction.fromComp = fromComp;
                _thisLayerFunction.sampleImage = sampleImage;
                _thisLayerFunction.sourceRectAtTime = elem.sourceRectAtTime.bind(elem);
                _thisLayerFunction._elem = elem;
                transformInterface = TransformExpressionInterface(elem.finalTransform.mProp);
                var anchorPointDescriptor = getDescriptor(transformInterface, 'anchorPoint');
                Object.defineProperties(_thisLayerFunction, {
                  hasParent: {
                    get: function get() {
                      return elem.hierarchy.length;
                    }
                  },
                  parent: {
                    get: function get() {
                      return elem.hierarchy[0].layerInterface;
                    }
                  },
                  rotation: getDescriptor(transformInterface, 'rotation'),
                  scale: getDescriptor(transformInterface, 'scale'),
                  position: getDescriptor(transformInterface, 'position'),
                  opacity: getDescriptor(transformInterface, 'opacity'),
                  anchorPoint: anchorPointDescriptor,
                  anchor_point: anchorPointDescriptor,
                  transform: {
                    get: function get() {
                      return transformInterface;
                    }
                  },
                  active: {
                    get: function get() {
                      return elem.isInRange;
                    }
                  }
                });
                _thisLayerFunction.startTime = elem.data.st;
                _thisLayerFunction.index = elem.data.ind;
                _thisLayerFunction.source = elem.data.refId;
                _thisLayerFunction.height = elem.data.ty === 0 ? elem.data.h : 100;
                _thisLayerFunction.width = elem.data.ty === 0 ? elem.data.w : 100;
                _thisLayerFunction.inPoint = elem.data.ip / elem.comp.globalData.frameRate;
                _thisLayerFunction.outPoint = elem.data.op / elem.comp.globalData.frameRate;
                _thisLayerFunction._name = elem.data.nm;
                _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
                _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
                return _thisLayerFunction;
              };
            }();
            var propertyGroupFactory = function () {
              return function (interfaceFunction, parentPropertyGroup) {
                return function (val) {
                  val = val === undefined ? 1 : val;
                  if (val <= 0) {
                    return interfaceFunction;
                  }
                  return parentPropertyGroup(val - 1);
                };
              };
            }();
            var PropertyInterface = function () {
              return function (propertyName, propertyGroup) {
                var interfaceFunction = {
                  _name: propertyName
                };
                function _propertyGroup(val) {
                  val = val === undefined ? 1 : val;
                  if (val <= 0) {
                    return interfaceFunction;
                  }
                  return propertyGroup(val - 1);
                }
                return _propertyGroup;
              };
            }();
            var EffectsExpressionInterface = function () {
              var ob = {
                createEffectsInterface: createEffectsInterface
              };
              function createEffectsInterface(elem, propertyGroup) {
                if (elem.effectsManager) {
                  var effectElements = [];
                  var effectsData = elem.data.ef;
                  var i;
                  var len = elem.effectsManager.effectElements.length;
                  for (i = 0; i < len; i += 1) {
                    effectElements.push(createGroupInterface(effectsData[i], elem.effectsManager.effectElements[i], propertyGroup, elem));
                  }
                  var effects = elem.data.ef || [];
                  var groupInterface = function groupInterface(name) {
                    i = 0;
                    len = effects.length;
                    while (i < len) {
                      if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {
                        return effectElements[i];
                      }
                      i += 1;
                    }
                    return null;
                  };
                  Object.defineProperty(groupInterface, 'numProperties', {
                    get: function get() {
                      return effects.length;
                    }
                  });
                  return groupInterface;
                }
                return null;
              }
              function createGroupInterface(data, elements, propertyGroup, elem) {
                function groupInterface(name) {
                  var effects = data.ef;
                  var i = 0;
                  var len = effects.length;
                  while (i < len) {
                    if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {
                      if (effects[i].ty === 5) {
                        return effectElements[i];
                      }
                      return effectElements[i]();
                    }
                    i += 1;
                  }
                  throw new Error();
                }
                var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);
                var effectElements = [];
                var i;
                var len = data.ef.length;
                for (i = 0; i < len; i += 1) {
                  if (data.ef[i].ty === 5) {
                    effectElements.push(createGroupInterface(data.ef[i], elements.effectElements[i], elements.effectElements[i].propertyGroup, elem));
                  } else {
                    effectElements.push(createValueInterface(elements.effectElements[i], data.ef[i].ty, elem, _propertyGroup));
                  }
                }
                if (data.mn === 'ADBE Color Control') {
                  Object.defineProperty(groupInterface, 'color', {
                    get: function get() {
                      return effectElements[0]();
                    }
                  });
                }
                Object.defineProperties(groupInterface, {
                  numProperties: {
                    get: function get() {
                      return data.np;
                    }
                  },
                  _name: {
                    value: data.nm
                  },
                  propertyGroup: {
                    value: _propertyGroup
                  }
                });
                groupInterface.enabled = data.en !== 0;
                groupInterface.active = groupInterface.enabled;
                return groupInterface;
              }
              function createValueInterface(element, type, elem, propertyGroup) {
                var expressionProperty = ExpressionPropertyInterface(element.p);
                function interfaceFunction() {
                  if (type === 10) {
                    return elem.comp.compInterface(element.p.v);
                  }
                  return expressionProperty();
                }
                if (element.p.setGroupProperty) {
                  element.p.setGroupProperty(PropertyInterface('', propertyGroup));
                }
                return interfaceFunction;
              }
              return ob;
            }();
            var ShapePathInterface = function () {
              return function pathInterfaceFactory(shape, view, propertyGroup) {
                var prop = view.sh;
                function interfaceFunction(val) {
                  if (val === 'Shape' || val === 'shape' || val === 'Path' || val === 'path' || val === 'ADBE Vector Shape' || val === 2) {
                    return interfaceFunction.path;
                  }
                  return null;
                }
                var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                prop.setGroupProperty(PropertyInterface('Path', _propertyGroup));
                Object.defineProperties(interfaceFunction, {
                  path: {
                    get: function get() {
                      if (prop.k) {
                        prop.getValue();
                      }
                      return prop;
                    }
                  },
                  shape: {
                    get: function get() {
                      if (prop.k) {
                        prop.getValue();
                      }
                      return prop;
                    }
                  },
                  _name: {
                    value: shape.nm
                  },
                  ix: {
                    value: shape.ix
                  },
                  propertyIndex: {
                    value: shape.ix
                  },
                  mn: {
                    value: shape.mn
                  },
                  propertyGroup: {
                    value: propertyGroup
                  }
                });
                return interfaceFunction;
              };
            }();
            var ShapeExpressionInterface = function () {
              function iterateElements(shapes, view, propertyGroup) {
                var arr = [];
                var i;
                var len = shapes ? shapes.length : 0;
                for (i = 0; i < len; i += 1) {
                  if (shapes[i].ty === 'gr') {
                    arr.push(groupInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'fl') {
                    arr.push(fillInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'st') {
                    arr.push(strokeInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'tm') {
                    arr.push(trimInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'tr') ;else if (shapes[i].ty === 'el') {
                    arr.push(ellipseInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'sr') {
                    arr.push(starInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'sh') {
                    arr.push(ShapePathInterface(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'rc') {
                    arr.push(rectInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'rd') {
                    arr.push(roundedInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'rp') {
                    arr.push(repeaterInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else if (shapes[i].ty === 'gf') {
                    arr.push(gradientFillInterfaceFactory(shapes[i], view[i], propertyGroup));
                  } else {
                    arr.push(defaultInterfaceFactory(shapes[i], view[i]));
                  }
                }
                return arr;
              }
              function contentsInterfaceFactory(shape, view, propertyGroup) {
                var interfaces;
                var interfaceFunction = function _interfaceFunction(value) {
                  var i = 0;
                  var len = interfaces.length;
                  while (i < len) {
                    if (interfaces[i]._name === value || interfaces[i].mn === value || interfaces[i].propertyIndex === value || interfaces[i].ix === value || interfaces[i].ind === value) {
                      return interfaces[i];
                    }
                    i += 1;
                  }
                  if (typeof value === 'number') {
                    return interfaces[value - 1];
                  }
                  return null;
                };
                interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                interfaces = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
                interfaceFunction.numProperties = interfaces.length;
                var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
                interfaceFunction.transform = transformInterface;
                interfaceFunction.propertyIndex = shape.cix;
                interfaceFunction._name = shape.nm;
                return interfaceFunction;
              }
              function groupInterfaceFactory(shape, view, propertyGroup) {
                var interfaceFunction = function _interfaceFunction(value) {
                  switch (value) {
                    case 'ADBE Vectors Group':
                    case 'Contents':
                    case 2:
                      return interfaceFunction.content;
                    // Not necessary for now. Keeping them here in case a new case appears
                    // case 'ADBE Vector Transform Group':
                    // case 3:

                    default:
                      return interfaceFunction.transform;
                  }
                };
                interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                var content = contentsInterfaceFactory(shape, view, interfaceFunction.propertyGroup);
                var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
                interfaceFunction.content = content;
                interfaceFunction.transform = transformInterface;
                Object.defineProperty(interfaceFunction, '_name', {
                  get: function get() {
                    return shape.nm;
                  }
                }); // interfaceFunction.content = interfaceFunction;

                interfaceFunction.numProperties = shape.np;
                interfaceFunction.propertyIndex = shape.ix;
                interfaceFunction.nm = shape.nm;
                interfaceFunction.mn = shape.mn;
                return interfaceFunction;
              }
              function fillInterfaceFactory(shape, view, propertyGroup) {
                function interfaceFunction(val) {
                  if (val === 'Color' || val === 'color') {
                    return interfaceFunction.color;
                  }
                  if (val === 'Opacity' || val === 'opacity') {
                    return interfaceFunction.opacity;
                  }
                  return null;
                }
                Object.defineProperties(interfaceFunction, {
                  color: {
                    get: ExpressionPropertyInterface(view.c)
                  },
                  opacity: {
                    get: ExpressionPropertyInterface(view.o)
                  },
                  _name: {
                    value: shape.nm
                  },
                  mn: {
                    value: shape.mn
                  }
                });
                view.c.setGroupProperty(PropertyInterface('Color', propertyGroup));
                view.o.setGroupProperty(PropertyInterface('Opacity', propertyGroup));
                return interfaceFunction;
              }
              function gradientFillInterfaceFactory(shape, view, propertyGroup) {
                function interfaceFunction(val) {
                  if (val === 'Start Point' || val === 'start point') {
                    return interfaceFunction.startPoint;
                  }
                  if (val === 'End Point' || val === 'end point') {
                    return interfaceFunction.endPoint;
                  }
                  if (val === 'Opacity' || val === 'opacity') {
                    return interfaceFunction.opacity;
                  }
                  return null;
                }
                Object.defineProperties(interfaceFunction, {
                  startPoint: {
                    get: ExpressionPropertyInterface(view.s)
                  },
                  endPoint: {
                    get: ExpressionPropertyInterface(view.e)
                  },
                  opacity: {
                    get: ExpressionPropertyInterface(view.o)
                  },
                  type: {
                    get: function get() {
                      return 'a';
                    }
                  },
                  _name: {
                    value: shape.nm
                  },
                  mn: {
                    value: shape.mn
                  }
                });
                view.s.setGroupProperty(PropertyInterface('Start Point', propertyGroup));
                view.e.setGroupProperty(PropertyInterface('End Point', propertyGroup));
                view.o.setGroupProperty(PropertyInterface('Opacity', propertyGroup));
                return interfaceFunction;
              }
              function defaultInterfaceFactory() {
                function interfaceFunction() {
                  return null;
                }
                return interfaceFunction;
              }
              function strokeInterfaceFactory(shape, view, propertyGroup) {
                var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);
                function addPropertyToDashOb(i) {
                  Object.defineProperty(dashOb, shape.d[i].nm, {
                    get: ExpressionPropertyInterface(view.d.dataProps[i].p)
                  });
                }
                var i;
                var len = shape.d ? shape.d.length : 0;
                var dashOb = {};
                for (i = 0; i < len; i += 1) {
                  addPropertyToDashOb(i);
                  view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);
                }
                function interfaceFunction(val) {
                  if (val === 'Color' || val === 'color') {
                    return interfaceFunction.color;
                  }
                  if (val === 'Opacity' || val === 'opacity') {
                    return interfaceFunction.opacity;
                  }
                  if (val === 'Stroke Width' || val === 'stroke width') {
                    return interfaceFunction.strokeWidth;
                  }
                  return null;
                }
                Object.defineProperties(interfaceFunction, {
                  color: {
                    get: ExpressionPropertyInterface(view.c)
                  },
                  opacity: {
                    get: ExpressionPropertyInterface(view.o)
                  },
                  strokeWidth: {
                    get: ExpressionPropertyInterface(view.w)
                  },
                  dash: {
                    get: function get() {
                      return dashOb;
                    }
                  },
                  _name: {
                    value: shape.nm
                  },
                  mn: {
                    value: shape.mn
                  }
                });
                view.c.setGroupProperty(PropertyInterface('Color', _propertyGroup));
                view.o.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
                view.w.setGroupProperty(PropertyInterface('Stroke Width', _propertyGroup));
                return interfaceFunction;
              }
              function trimInterfaceFactory(shape, view, propertyGroup) {
                function interfaceFunction(val) {
                  if (val === shape.e.ix || val === 'End' || val === 'end') {
                    return interfaceFunction.end;
                  }
                  if (val === shape.s.ix) {
                    return interfaceFunction.start;
                  }
                  if (val === shape.o.ix) {
                    return interfaceFunction.offset;
                  }
                  return null;
                }
                var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                interfaceFunction.propertyIndex = shape.ix;
                view.s.setGroupProperty(PropertyInterface('Start', _propertyGroup));
                view.e.setGroupProperty(PropertyInterface('End', _propertyGroup));
                view.o.setGroupProperty(PropertyInterface('Offset', _propertyGroup));
                interfaceFunction.propertyIndex = shape.ix;
                interfaceFunction.propertyGroup = propertyGroup;
                Object.defineProperties(interfaceFunction, {
                  start: {
                    get: ExpressionPropertyInterface(view.s)
                  },
                  end: {
                    get: ExpressionPropertyInterface(view.e)
                  },
                  offset: {
                    get: ExpressionPropertyInterface(view.o)
                  },
                  _name: {
                    value: shape.nm
                  }
                });
                interfaceFunction.mn = shape.mn;
                return interfaceFunction;
              }
              function transformInterfaceFactory(shape, view, propertyGroup) {
                function interfaceFunction(value) {
                  if (shape.a.ix === value || value === 'Anchor Point') {
                    return interfaceFunction.anchorPoint;
                  }
                  if (shape.o.ix === value || value === 'Opacity') {
                    return interfaceFunction.opacity;
                  }
                  if (shape.p.ix === value || value === 'Position') {
                    return interfaceFunction.position;
                  }
                  if (shape.r.ix === value || value === 'Rotation' || value === 'ADBE Vector Rotation') {
                    return interfaceFunction.rotation;
                  }
                  if (shape.s.ix === value || value === 'Scale') {
                    return interfaceFunction.scale;
                  }
                  if (shape.sk && shape.sk.ix === value || value === 'Skew') {
                    return interfaceFunction.skew;
                  }
                  if (shape.sa && shape.sa.ix === value || value === 'Skew Axis') {
                    return interfaceFunction.skewAxis;
                  }
                  return null;
                }
                var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                view.transform.mProps.o.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
                view.transform.mProps.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
                view.transform.mProps.a.setGroupProperty(PropertyInterface('Anchor Point', _propertyGroup));
                view.transform.mProps.s.setGroupProperty(PropertyInterface('Scale', _propertyGroup));
                view.transform.mProps.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));
                if (view.transform.mProps.sk) {
                  view.transform.mProps.sk.setGroupProperty(PropertyInterface('Skew', _propertyGroup));
                  view.transform.mProps.sa.setGroupProperty(PropertyInterface('Skew Angle', _propertyGroup));
                }
                view.transform.op.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
                Object.defineProperties(interfaceFunction, {
                  opacity: {
                    get: ExpressionPropertyInterface(view.transform.mProps.o)
                  },
                  position: {
                    get: ExpressionPropertyInterface(view.transform.mProps.p)
                  },
                  anchorPoint: {
                    get: ExpressionPropertyInterface(view.transform.mProps.a)
                  },
                  scale: {
                    get: ExpressionPropertyInterface(view.transform.mProps.s)
                  },
                  rotation: {
                    get: ExpressionPropertyInterface(view.transform.mProps.r)
                  },
                  skew: {
                    get: ExpressionPropertyInterface(view.transform.mProps.sk)
                  },
                  skewAxis: {
                    get: ExpressionPropertyInterface(view.transform.mProps.sa)
                  },
                  _name: {
                    value: shape.nm
                  }
                });
                interfaceFunction.ty = 'tr';
                interfaceFunction.mn = shape.mn;
                interfaceFunction.propertyGroup = propertyGroup;
                return interfaceFunction;
              }
              function ellipseInterfaceFactory(shape, view, propertyGroup) {
                function interfaceFunction(value) {
                  if (shape.p.ix === value) {
                    return interfaceFunction.position;
                  }
                  if (shape.s.ix === value) {
                    return interfaceFunction.size;
                  }
                  return null;
                }
                var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                interfaceFunction.propertyIndex = shape.ix;
                var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
                prop.s.setGroupProperty(PropertyInterface('Size', _propertyGroup));
                prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
                Object.defineProperties(interfaceFunction, {
                  size: {
                    get: ExpressionPropertyInterface(prop.s)
                  },
                  position: {
                    get: ExpressionPropertyInterface(prop.p)
                  },
                  _name: {
                    value: shape.nm
                  }
                });
                interfaceFunction.mn = shape.mn;
                return interfaceFunction;
              }
              function starInterfaceFactory(shape, view, propertyGroup) {
                function interfaceFunction(value) {
                  if (shape.p.ix === value) {
                    return interfaceFunction.position;
                  }
                  if (shape.r.ix === value) {
                    return interfaceFunction.rotation;
                  }
                  if (shape.pt.ix === value) {
                    return interfaceFunction.points;
                  }
                  if (shape.or.ix === value || value === 'ADBE Vector Star Outer Radius') {
                    return interfaceFunction.outerRadius;
                  }
                  if (shape.os.ix === value) {
                    return interfaceFunction.outerRoundness;
                  }
                  if (shape.ir && (shape.ir.ix === value || value === 'ADBE Vector Star Inner Radius')) {
                    return interfaceFunction.innerRadius;
                  }
                  if (shape.is && shape.is.ix === value) {
                    return interfaceFunction.innerRoundness;
                  }
                  return null;
                }
                var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
                interfaceFunction.propertyIndex = shape.ix;
                prop.or.setGroupProperty(PropertyInterface('Outer Radius', _propertyGroup));
                prop.os.setGroupProperty(PropertyInterface('Outer Roundness', _propertyGroup));
                prop.pt.setGroupProperty(PropertyInterface('Points', _propertyGroup));
                prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
                prop.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));
                if (shape.ir) {
                  prop.ir.setGroupProperty(PropertyInterface('Inner Radius', _propertyGroup));
                  prop.is.setGroupProperty(PropertyInterface('Inner Roundness', _propertyGroup));
                }
                Object.defineProperties(interfaceFunction, {
                  position: {
                    get: ExpressionPropertyInterface(prop.p)
                  },
                  rotation: {
                    get: ExpressionPropertyInterface(prop.r)
                  },
                  points: {
                    get: ExpressionPropertyInterface(prop.pt)
                  },
                  outerRadius: {
                    get: ExpressionPropertyInterface(prop.or)
                  },
                  outerRoundness: {
                    get: ExpressionPropertyInterface(prop.os)
                  },
                  innerRadius: {
                    get: ExpressionPropertyInterface(prop.ir)
                  },
                  innerRoundness: {
                    get: ExpressionPropertyInterface(prop.is)
                  },
                  _name: {
                    value: shape.nm
                  }
                });
                interfaceFunction.mn = shape.mn;
                return interfaceFunction;
              }
              function rectInterfaceFactory(shape, view, propertyGroup) {
                function interfaceFunction(value) {
                  if (shape.p.ix === value) {
                    return interfaceFunction.position;
                  }
                  if (shape.r.ix === value) {
                    return interfaceFunction.roundness;
                  }
                  if (shape.s.ix === value || value === 'Size' || value === 'ADBE Vector Rect Size') {
                    return interfaceFunction.size;
                  }
                  return null;
                }
                var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
                interfaceFunction.propertyIndex = shape.ix;
                prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
                prop.s.setGroupProperty(PropertyInterface('Size', _propertyGroup));
                prop.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));
                Object.defineProperties(interfaceFunction, {
                  position: {
                    get: ExpressionPropertyInterface(prop.p)
                  },
                  roundness: {
                    get: ExpressionPropertyInterface(prop.r)
                  },
                  size: {
                    get: ExpressionPropertyInterface(prop.s)
                  },
                  _name: {
                    value: shape.nm
                  }
                });
                interfaceFunction.mn = shape.mn;
                return interfaceFunction;
              }
              function roundedInterfaceFactory(shape, view, propertyGroup) {
                function interfaceFunction(value) {
                  if (shape.r.ix === value || value === 'Round Corners 1') {
                    return interfaceFunction.radius;
                  }
                  return null;
                }
                var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                var prop = view;
                interfaceFunction.propertyIndex = shape.ix;
                prop.rd.setGroupProperty(PropertyInterface('Radius', _propertyGroup));
                Object.defineProperties(interfaceFunction, {
                  radius: {
                    get: ExpressionPropertyInterface(prop.rd)
                  },
                  _name: {
                    value: shape.nm
                  }
                });
                interfaceFunction.mn = shape.mn;
                return interfaceFunction;
              }
              function repeaterInterfaceFactory(shape, view, propertyGroup) {
                function interfaceFunction(value) {
                  if (shape.c.ix === value || value === 'Copies') {
                    return interfaceFunction.copies;
                  }
                  if (shape.o.ix === value || value === 'Offset') {
                    return interfaceFunction.offset;
                  }
                  return null;
                }
                var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
                var prop = view;
                interfaceFunction.propertyIndex = shape.ix;
                prop.c.setGroupProperty(PropertyInterface('Copies', _propertyGroup));
                prop.o.setGroupProperty(PropertyInterface('Offset', _propertyGroup));
                Object.defineProperties(interfaceFunction, {
                  copies: {
                    get: ExpressionPropertyInterface(prop.c)
                  },
                  offset: {
                    get: ExpressionPropertyInterface(prop.o)
                  },
                  _name: {
                    value: shape.nm
                  }
                });
                interfaceFunction.mn = shape.mn;
                return interfaceFunction;
              }
              return function (shapes, view, propertyGroup) {
                var interfaces;
                function _interfaceFunction(value) {
                  if (typeof value === 'number') {
                    value = value === undefined ? 1 : value;
                    if (value === 0) {
                      return propertyGroup;
                    }
                    return interfaces[value - 1];
                  }
                  var i = 0;
                  var len = interfaces.length;
                  while (i < len) {
                    if (interfaces[i]._name === value) {
                      return interfaces[i];
                    }
                    i += 1;
                  }
                  return null;
                }
                function parentGroupWrapper() {
                  return propertyGroup;
                }
                _interfaceFunction.propertyGroup = propertyGroupFactory(_interfaceFunction, parentGroupWrapper);
                interfaces = iterateElements(shapes, view, _interfaceFunction.propertyGroup);
                _interfaceFunction.numProperties = interfaces.length;
                _interfaceFunction._name = 'Contents';
                return _interfaceFunction;
              };
            }();
            var TextExpressionInterface = function () {
              return function (elem) {
                var _sourceText;
                function _thisLayerFunction(name) {
                  switch (name) {
                    case 'ADBE Text Document':
                      return _thisLayerFunction.sourceText;
                    default:
                      return null;
                  }
                }
                Object.defineProperty(_thisLayerFunction, 'sourceText', {
                  get: function get() {
                    elem.textProperty.getValue();
                    var stringValue = elem.textProperty.currentData.t;
                    if (!_sourceText || stringValue !== _sourceText.value) {
                      _sourceText = new String(stringValue); // eslint-disable-line no-new-wrappers
                      // If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive

                      _sourceText.value = stringValue || new String(stringValue); // eslint-disable-line no-new-wrappers

                      Object.defineProperty(_sourceText, 'style', {
                        get: function get() {
                          return {
                            fillColor: elem.textProperty.currentData.fc
                          };
                        }
                      });
                    }
                    return _sourceText;
                  }
                });
                return _thisLayerFunction;
              };
            }();
            function _typeof(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                _typeof = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }
              return _typeof(obj);
            }
            var FootageInterface = function () {
              var outlineInterfaceFactory = function outlineInterfaceFactory(elem) {
                var currentPropertyName = '';
                var currentProperty = elem.getFootageData();
                function init() {
                  currentPropertyName = '';
                  currentProperty = elem.getFootageData();
                  return searchProperty;
                }
                function searchProperty(value) {
                  if (currentProperty[value]) {
                    currentPropertyName = value;
                    currentProperty = currentProperty[value];
                    if (_typeof(currentProperty) === 'object') {
                      return searchProperty;
                    }
                    return currentProperty;
                  }
                  var propertyNameIndex = value.indexOf(currentPropertyName);
                  if (propertyNameIndex !== -1) {
                    var index = parseInt(value.substr(propertyNameIndex + currentPropertyName.length), 10);
                    currentProperty = currentProperty[index];
                    if (_typeof(currentProperty) === 'object') {
                      return searchProperty;
                    }
                    return currentProperty;
                  }
                  return '';
                }
                return init;
              };
              var dataInterfaceFactory = function dataInterfaceFactory(elem) {
                function interfaceFunction(value) {
                  if (value === 'Outline') {
                    return interfaceFunction.outlineInterface();
                  }
                  return null;
                }
                interfaceFunction._name = 'Outline';
                interfaceFunction.outlineInterface = outlineInterfaceFactory(elem);
                return interfaceFunction;
              };
              return function (elem) {
                function _interfaceFunction(value) {
                  if (value === 'Data') {
                    return _interfaceFunction.dataInterface;
                  }
                  return null;
                }
                _interfaceFunction._name = 'Data';
                _interfaceFunction.dataInterface = dataInterfaceFactory(elem);
                return _interfaceFunction;
              };
            }();
            var interfaces = {
              layer: LayerExpressionInterface,
              effects: EffectsExpressionInterface,
              comp: CompExpressionInterface,
              shape: ShapeExpressionInterface,
              text: TextExpressionInterface,
              footage: FootageInterface
            };
            function getInterface(type) {
              return interfaces[type] || null;
            }
            var expressionHelpers = function () {
              function searchExpressions(elem, data, prop) {
                if (data.x) {
                  prop.k = true;
                  prop.x = true;
                  prop.initiateExpression = ExpressionManager.initiateExpression;
                  prop.effectsSequence.push(prop.initiateExpression(elem, data, prop).bind(prop));
                }
              }
              function getValueAtTime(frameNum) {
                frameNum *= this.elem.globalData.frameRate;
                frameNum -= this.offsetTime;
                if (frameNum !== this._cachingAtTime.lastFrame) {
                  this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
                  this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
                  this._cachingAtTime.lastFrame = frameNum;
                }
                return this._cachingAtTime.value;
              }
              function getSpeedAtTime(frameNum) {
                var delta = -0.01;
                var v1 = this.getValueAtTime(frameNum);
                var v2 = this.getValueAtTime(frameNum + delta);
                var speed = 0;
                if (v1.length) {
                  var i;
                  for (i = 0; i < v1.length; i += 1) {
                    speed += Math.pow(v2[i] - v1[i], 2);
                  }
                  speed = Math.sqrt(speed) * 100;
                } else {
                  speed = 0;
                }
                return speed;
              }
              function getVelocityAtTime(frameNum) {
                if (this.vel !== undefined) {
                  return this.vel;
                }
                var delta = -0.001; // frameNum += this.elem.data.st;

                var v1 = this.getValueAtTime(frameNum);
                var v2 = this.getValueAtTime(frameNum + delta);
                var velocity;
                if (v1.length) {
                  velocity = createTypedArray('float32', v1.length);
                  var i;
                  for (i = 0; i < v1.length; i += 1) {
                    // removing frameRate
                    // if needed, don't add it here
                    // velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
                    velocity[i] = (v2[i] - v1[i]) / delta;
                  }
                } else {
                  velocity = (v2 - v1) / delta;
                }
                return velocity;
              }
              function getStaticValueAtTime() {
                return this.pv;
              }
              function setGroupProperty(propertyGroup) {
                this.propertyGroup = propertyGroup;
              }
              return {
                searchExpressions: searchExpressions,
                getSpeedAtTime: getSpeedAtTime,
                getVelocityAtTime: getVelocityAtTime,
                getValueAtTime: getValueAtTime,
                getStaticValueAtTime: getStaticValueAtTime,
                setGroupProperty: setGroupProperty
              };
            }();
            function addPropertyDecorator() {
              function loopOut(type, duration, durationFlag) {
                if (!this.k || !this.keyframes) {
                  return this.pv;
                }
                type = type ? type.toLowerCase() : '';
                var currentFrame = this.comp.renderedFrame;
                var keyframes = this.keyframes;
                var lastKeyFrame = keyframes[keyframes.length - 1].t;
                if (currentFrame <= lastKeyFrame) {
                  return this.pv;
                }
                var cycleDuration;
                var firstKeyFrame;
                if (!durationFlag) {
                  if (!duration || duration > keyframes.length - 1) {
                    duration = keyframes.length - 1;
                  }
                  firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
                  cycleDuration = lastKeyFrame - firstKeyFrame;
                } else {
                  if (!duration) {
                    cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);
                  } else {
                    cycleDuration = Math.abs(lastKeyFrame - this.elem.comp.globalData.frameRate * duration);
                  }
                  firstKeyFrame = lastKeyFrame - cycleDuration;
                }
                var i;
                var len;
                var ret;
                if (type === 'pingpong') {
                  var iterations = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);
                  if (iterations % 2 !== 0) {
                    return this.getValueAtTime((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line
                  }
                } else if (type === 'offset') {
                  var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
                  var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
                  var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line

                  var repeats = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);
                  if (this.pv.length) {
                    ret = new Array(initV.length);
                    len = ret.length;
                    for (i = 0; i < len; i += 1) {
                      ret[i] = (endV[i] - initV[i]) * repeats + current[i];
                    }
                    return ret;
                  }
                  return (endV - initV) * repeats + current;
                } else if (type === 'continue') {
                  var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
                  var nextLastValue = this.getValueAtTime((lastKeyFrame - 0.001) / this.comp.globalData.frameRate, 0);
                  if (this.pv.length) {
                    ret = new Array(lastValue.length);
                    len = ret.length;
                    for (i = 0; i < len; i += 1) {
                      ret[i] = lastValue[i] + (lastValue[i] - nextLastValue[i]) * ((currentFrame - lastKeyFrame) / this.comp.globalData.frameRate) / 0.0005; // eslint-disable-line
                    }

                    return ret;
                  }
                  return lastValue + (lastValue - nextLastValue) * ((currentFrame - lastKeyFrame) / 0.001);
                }
                return this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line
              }

              function loopIn(type, duration, durationFlag) {
                if (!this.k) {
                  return this.pv;
                }
                type = type ? type.toLowerCase() : '';
                var currentFrame = this.comp.renderedFrame;
                var keyframes = this.keyframes;
                var firstKeyFrame = keyframes[0].t;
                if (currentFrame >= firstKeyFrame) {
                  return this.pv;
                }
                var cycleDuration;
                var lastKeyFrame;
                if (!durationFlag) {
                  if (!duration || duration > keyframes.length - 1) {
                    duration = keyframes.length - 1;
                  }
                  lastKeyFrame = keyframes[duration].t;
                  cycleDuration = lastKeyFrame - firstKeyFrame;
                } else {
                  if (!duration) {
                    cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);
                  } else {
                    cycleDuration = Math.abs(this.elem.comp.globalData.frameRate * duration);
                  }
                  lastKeyFrame = firstKeyFrame + cycleDuration;
                }
                var i;
                var len;
                var ret;
                if (type === 'pingpong') {
                  var iterations = Math.floor((firstKeyFrame - currentFrame) / cycleDuration);
                  if (iterations % 2 === 0) {
                    return this.getValueAtTime(((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line
                  }
                } else if (type === 'offset') {
                  var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
                  var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
                  var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
                  var repeats = Math.floor((firstKeyFrame - currentFrame) / cycleDuration) + 1;
                  if (this.pv.length) {
                    ret = new Array(initV.length);
                    len = ret.length;
                    for (i = 0; i < len; i += 1) {
                      ret[i] = current[i] - (endV[i] - initV[i]) * repeats;
                    }
                    return ret;
                  }
                  return current - (endV - initV) * repeats;
                } else if (type === 'continue') {
                  var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
                  var nextFirstValue = this.getValueAtTime((firstKeyFrame + 0.001) / this.comp.globalData.frameRate, 0);
                  if (this.pv.length) {
                    ret = new Array(firstValue.length);
                    len = ret.length;
                    for (i = 0; i < len; i += 1) {
                      ret[i] = firstValue[i] + (firstValue[i] - nextFirstValue[i]) * (firstKeyFrame - currentFrame) / 0.001;
                    }
                    return ret;
                  }
                  return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame) / 0.001;
                }
                return this.getValueAtTime((cycleDuration - ((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0); // eslint-disable-line
              }

              function smooth(width, samples) {
                if (!this.k) {
                  return this.pv;
                }
                width = (width || 0.4) * 0.5;
                samples = Math.floor(samples || 5);
                if (samples <= 1) {
                  return this.pv;
                }
                var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
                var initFrame = currentTime - width;
                var endFrame = currentTime + width;
                var sampleFrequency = samples > 1 ? (endFrame - initFrame) / (samples - 1) : 1;
                var i = 0;
                var j = 0;
                var value;
                if (this.pv.length) {
                  value = createTypedArray('float32', this.pv.length);
                } else {
                  value = 0;
                }
                var sampleValue;
                while (i < samples) {
                  sampleValue = this.getValueAtTime(initFrame + i * sampleFrequency);
                  if (this.pv.length) {
                    for (j = 0; j < this.pv.length; j += 1) {
                      value[j] += sampleValue[j];
                    }
                  } else {
                    value += sampleValue;
                  }
                  i += 1;
                }
                if (this.pv.length) {
                  for (j = 0; j < this.pv.length; j += 1) {
                    value[j] /= samples;
                  }
                } else {
                  value /= samples;
                }
                return value;
              }
              function getTransformValueAtTime(time) {
                if (!this._transformCachingAtTime) {
                  this._transformCachingAtTime = {
                    v: new Matrix()
                  };
                } /// /

                var matrix = this._transformCachingAtTime.v;
                matrix.cloneFromProps(this.pre.props);
                if (this.appliedTransformations < 1) {
                  var anchor = this.a.getValueAtTime(time);
                  matrix.translate(-anchor[0] * this.a.mult, -anchor[1] * this.a.mult, anchor[2] * this.a.mult);
                }
                if (this.appliedTransformations < 2) {
                  var scale = this.s.getValueAtTime(time);
                  matrix.scale(scale[0] * this.s.mult, scale[1] * this.s.mult, scale[2] * this.s.mult);
                }
                if (this.sk && this.appliedTransformations < 3) {
                  var skew = this.sk.getValueAtTime(time);
                  var skewAxis = this.sa.getValueAtTime(time);
                  matrix.skewFromAxis(-skew * this.sk.mult, skewAxis * this.sa.mult);
                }
                if (this.r && this.appliedTransformations < 4) {
                  var rotation = this.r.getValueAtTime(time);
                  matrix.rotate(-rotation * this.r.mult);
                } else if (!this.r && this.appliedTransformations < 4) {
                  var rotationZ = this.rz.getValueAtTime(time);
                  var rotationY = this.ry.getValueAtTime(time);
                  var rotationX = this.rx.getValueAtTime(time);
                  var orientation = this.or.getValueAtTime(time);
                  matrix.rotateZ(-rotationZ * this.rz.mult).rotateY(rotationY * this.ry.mult).rotateX(rotationX * this.rx.mult).rotateZ(-orientation[2] * this.or.mult).rotateY(orientation[1] * this.or.mult).rotateX(orientation[0] * this.or.mult);
                }
                if (this.data.p && this.data.p.s) {
                  var positionX = this.px.getValueAtTime(time);
                  var positionY = this.py.getValueAtTime(time);
                  if (this.data.p.z) {
                    var positionZ = this.pz.getValueAtTime(time);
                    matrix.translate(positionX * this.px.mult, positionY * this.py.mult, -positionZ * this.pz.mult);
                  } else {
                    matrix.translate(positionX * this.px.mult, positionY * this.py.mult, 0);
                  }
                } else {
                  var position = this.p.getValueAtTime(time);
                  matrix.translate(position[0] * this.p.mult, position[1] * this.p.mult, -position[2] * this.p.mult);
                }
                return matrix; /// /
              }

              function getTransformStaticValueAtTime() {
                return this.v.clone(new Matrix());
              }
              var getTransformProperty = TransformPropertyFactory.getTransformProperty;
              TransformPropertyFactory.getTransformProperty = function (elem, data, container) {
                var prop = getTransformProperty(elem, data, container);
                if (prop.dynamicProperties.length) {
                  prop.getValueAtTime = getTransformValueAtTime.bind(prop);
                } else {
                  prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
                }
                prop.setGroupProperty = expressionHelpers.setGroupProperty;
                return prop;
              };
              var propertyGetProp = PropertyFactory.getProp;
              PropertyFactory.getProp = function (elem, data, type, mult, container) {
                var prop = propertyGetProp(elem, data, type, mult, container); // prop.getVelocityAtTime = getVelocityAtTime;
                // prop.loopOut = loopOut;
                // prop.loopIn = loopIn;

                if (prop.kf) {
                  prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
                } else {
                  prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
                }
                prop.setGroupProperty = expressionHelpers.setGroupProperty;
                prop.loopOut = loopOut;
                prop.loopIn = loopIn;
                prop.smooth = smooth;
                prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
                prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
                prop.numKeys = data.a === 1 ? data.k.length : 0;
                prop.propertyIndex = data.ix;
                var value = 0;
                if (type !== 0) {
                  value = createTypedArray('float32', data.a === 1 ? data.k[0].s.length : data.k.length);
                }
                prop._cachingAtTime = {
                  lastFrame: initialDefaultFrame,
                  lastIndex: 0,
                  value: value
                };
                expressionHelpers.searchExpressions(elem, data, prop);
                if (prop.k) {
                  container.addDynamicProperty(prop);
                }
                return prop;
              };
              function getShapeValueAtTime(frameNum) {
                // For now this caching object is created only when needed instead of creating it when the shape is initialized.
                if (!this._cachingAtTime) {
                  this._cachingAtTime = {
                    shapeValue: shapePool.clone(this.pv),
                    lastIndex: 0,
                    lastTime: initialDefaultFrame
                  };
                }
                frameNum *= this.elem.globalData.frameRate;
                frameNum -= this.offsetTime;
                if (frameNum !== this._cachingAtTime.lastTime) {
                  this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
                  this._cachingAtTime.lastTime = frameNum;
                  this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
                }
                return this._cachingAtTime.shapeValue;
              }
              var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
              var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();
              function ShapeExpressions() {}
              ShapeExpressions.prototype = {
                vertices: function vertices(prop, time) {
                  if (this.k) {
                    this.getValue();
                  }
                  var shapePath = this.v;
                  if (time !== undefined) {
                    shapePath = this.getValueAtTime(time, 0);
                  }
                  var i;
                  var len = shapePath._length;
                  var vertices = shapePath[prop];
                  var points = shapePath.v;
                  var arr = createSizedArray(len);
                  for (i = 0; i < len; i += 1) {
                    if (prop === 'i' || prop === 'o') {
                      arr[i] = [vertices[i][0] - points[i][0], vertices[i][1] - points[i][1]];
                    } else {
                      arr[i] = [vertices[i][0], vertices[i][1]];
                    }
                  }
                  return arr;
                },
                points: function points(time) {
                  return this.vertices('v', time);
                },
                inTangents: function inTangents(time) {
                  return this.vertices('i', time);
                },
                outTangents: function outTangents(time) {
                  return this.vertices('o', time);
                },
                isClosed: function isClosed() {
                  return this.v.c;
                },
                pointOnPath: function pointOnPath(perc, time) {
                  var shapePath = this.v;
                  if (time !== undefined) {
                    shapePath = this.getValueAtTime(time, 0);
                  }
                  if (!this._segmentsLength) {
                    this._segmentsLength = bez.getSegmentsLength(shapePath);
                  }
                  var segmentsLength = this._segmentsLength;
                  var lengths = segmentsLength.lengths;
                  var lengthPos = segmentsLength.totalLength * perc;
                  var i = 0;
                  var len = lengths.length;
                  var accumulatedLength = 0;
                  var pt;
                  while (i < len) {
                    if (accumulatedLength + lengths[i].addedLength > lengthPos) {
                      var initIndex = i;
                      var endIndex = shapePath.c && i === len - 1 ? 0 : i + 1;
                      var segmentPerc = (lengthPos - accumulatedLength) / lengths[i].addedLength;
                      pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i]);
                      break;
                    } else {
                      accumulatedLength += lengths[i].addedLength;
                    }
                    i += 1;
                  }
                  if (!pt) {
                    pt = shapePath.c ? [shapePath.v[0][0], shapePath.v[0][1]] : [shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1]];
                  }
                  return pt;
                },
                vectorOnPath: function vectorOnPath(perc, time, vectorType) {
                  // perc doesn't use triple equality because it can be a Number object as well as a primitive.
                  if (perc == 1) {
                    // eslint-disable-line eqeqeq
                    perc = this.v.c;
                  } else if (perc == 0) {
                    // eslint-disable-line eqeqeq
                    perc = 0.999;
                  }
                  var pt1 = this.pointOnPath(perc, time);
                  var pt2 = this.pointOnPath(perc + 0.001, time);
                  var xLength = pt2[0] - pt1[0];
                  var yLength = pt2[1] - pt1[1];
                  var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));
                  if (magnitude === 0) {
                    return [0, 0];
                  }
                  var unitVector = vectorType === 'tangent' ? [xLength / magnitude, yLength / magnitude] : [-yLength / magnitude, xLength / magnitude];
                  return unitVector;
                },
                tangentOnPath: function tangentOnPath(perc, time) {
                  return this.vectorOnPath(perc, time, 'tangent');
                },
                normalOnPath: function normalOnPath(perc, time) {
                  return this.vectorOnPath(perc, time, 'normal');
                },
                setGroupProperty: expressionHelpers.setGroupProperty,
                getValueAtTime: expressionHelpers.getStaticValueAtTime
              };
              extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
              extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
              KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
              KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;
              var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
              ShapePropertyFactory.getShapeProp = function (elem, data, type, arr, trims) {
                var prop = propertyGetShapeProp(elem, data, type, arr, trims);
                prop.propertyIndex = data.ix;
                prop.lock = false;
                if (type === 3) {
                  expressionHelpers.searchExpressions(elem, data.pt, prop);
                } else if (type === 4) {
                  expressionHelpers.searchExpressions(elem, data.ks, prop);
                }
                if (prop.k) {
                  elem.addDynamicProperty(prop);
                }
                return prop;
              };
            }
            function initialize$1() {
              addPropertyDecorator();
            }
            function addDecorator() {
              function searchExpressions() {
                if (this.data.d.x) {
                  this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);
                  this.addEffect(this.getExpressionValue.bind(this));
                  return true;
                }
                return null;
              }
              TextProperty.prototype.getExpressionValue = function (currentValue, text) {
                var newValue = this.calculateExpression(text);
                if (currentValue.t !== newValue) {
                  var newData = {};
                  this.copyData(newData, currentValue);
                  newData.t = newValue.toString();
                  newData.__complete = false;
                  return newData;
                }
                return currentValue;
              };
              TextProperty.prototype.searchProperty = function () {
                var isKeyframed = this.searchKeyframes();
                var hasExpressions = this.searchExpressions();
                this.kf = isKeyframed || hasExpressions;
                return this.kf;
              };
              TextProperty.prototype.searchExpressions = searchExpressions;
            }
            function initialize() {
              addDecorator();
            }
            function SVGComposableEffect() {}
            SVGComposableEffect.prototype = {
              createMergeNode: function createMergeNode(resultId, ins) {
                var feMerge = createNS('feMerge');
                feMerge.setAttribute('result', resultId);
                var feMergeNode;
                var i;
                for (i = 0; i < ins.length; i += 1) {
                  feMergeNode = createNS('feMergeNode');
                  feMergeNode.setAttribute('in', ins[i]);
                  feMerge.appendChild(feMergeNode);
                  feMerge.appendChild(feMergeNode);
                }
                return feMerge;
              }
            };
            var linearFilterValue = '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0';
            function SVGTintFilter(filter, filterManager, elem, id, source) {
              this.filterManager = filterManager;
              var feColorMatrix = createNS('feColorMatrix');
              feColorMatrix.setAttribute('type', 'matrix');
              feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
              feColorMatrix.setAttribute('values', linearFilterValue + ' 1 0');
              this.linearFilter = feColorMatrix;
              feColorMatrix.setAttribute('result', id + '_tint_1');
              filter.appendChild(feColorMatrix);
              feColorMatrix = createNS('feColorMatrix');
              feColorMatrix.setAttribute('type', 'matrix');
              feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
              feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
              feColorMatrix.setAttribute('result', id + '_tint_2');
              filter.appendChild(feColorMatrix);
              this.matrixFilter = feColorMatrix;
              var feMerge = this.createMergeNode(id, [source, id + '_tint_1', id + '_tint_2']);
              filter.appendChild(feMerge);
            }
            extendPrototype([SVGComposableEffect], SVGTintFilter);
            SVGTintFilter.prototype.renderFrame = function (forceRender) {
              if (forceRender || this.filterManager._mdf) {
                var colorBlack = this.filterManager.effectElements[0].p.v;
                var colorWhite = this.filterManager.effectElements[1].p.v;
                var opacity = this.filterManager.effectElements[2].p.v / 100;
                this.linearFilter.setAttribute('values', linearFilterValue + ' ' + opacity + ' 0');
                this.matrixFilter.setAttribute('values', colorWhite[0] - colorBlack[0] + ' 0 0 0 ' + colorBlack[0] + ' ' + (colorWhite[1] - colorBlack[1]) + ' 0 0 0 ' + colorBlack[1] + ' ' + (colorWhite[2] - colorBlack[2]) + ' 0 0 0 ' + colorBlack[2] + ' 0 0 0 1 0');
              }
            };
            function SVGFillFilter(filter, filterManager, elem, id) {
              this.filterManager = filterManager;
              var feColorMatrix = createNS('feColorMatrix');
              feColorMatrix.setAttribute('type', 'matrix');
              feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
              feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
              feColorMatrix.setAttribute('result', id);
              filter.appendChild(feColorMatrix);
              this.matrixFilter = feColorMatrix;
            }
            SVGFillFilter.prototype.renderFrame = function (forceRender) {
              if (forceRender || this.filterManager._mdf) {
                var color = this.filterManager.effectElements[2].p.v;
                var opacity = this.filterManager.effectElements[6].p.v;
                this.matrixFilter.setAttribute('values', '0 0 0 0 ' + color[0] + ' 0 0 0 0 ' + color[1] + ' 0 0 0 0 ' + color[2] + ' 0 0 0 ' + opacity + ' 0');
              }
            };
            function SVGStrokeEffect(fil, filterManager, elem) {
              this.initialized = false;
              this.filterManager = filterManager;
              this.elem = elem;
              this.paths = [];
            }
            SVGStrokeEffect.prototype.initialize = function () {
              var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
              var path;
              var groupPath;
              var i;
              var len;
              if (this.filterManager.effectElements[1].p.v === 1) {
                len = this.elem.maskManager.masksProperties.length;
                i = 0;
              } else {
                i = this.filterManager.effectElements[0].p.v - 1;
                len = i + 1;
              }
              groupPath = createNS('g');
              groupPath.setAttribute('fill', 'none');
              groupPath.setAttribute('stroke-linecap', 'round');
              groupPath.setAttribute('stroke-dashoffset', 1);
              for (i; i < len; i += 1) {
                path = createNS('path');
                groupPath.appendChild(path);
                this.paths.push({
                  p: path,
                  m: i
                });
              }
              if (this.filterManager.effectElements[10].p.v === 3) {
                var mask = createNS('mask');
                var id = createElementID();
                mask.setAttribute('id', id);
                mask.setAttribute('mask-type', 'alpha');
                mask.appendChild(groupPath);
                this.elem.globalData.defs.appendChild(mask);
                var g = createNS('g');
                g.setAttribute('mask', 'url(' + getLocationHref() + '#' + id + ')');
                while (elemChildren[0]) {
                  g.appendChild(elemChildren[0]);
                }
                this.elem.layerElement.appendChild(g);
                this.masker = mask;
                groupPath.setAttribute('stroke', '#fff');
              } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
                if (this.filterManager.effectElements[10].p.v === 2) {
                  elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
                  while (elemChildren.length) {
                    this.elem.layerElement.removeChild(elemChildren[0]);
                  }
                }
                this.elem.layerElement.appendChild(groupPath);
                this.elem.layerElement.removeAttribute('mask');
                groupPath.setAttribute('stroke', '#fff');
              }
              this.initialized = true;
              this.pathMasker = groupPath;
            };
            SVGStrokeEffect.prototype.renderFrame = function (forceRender) {
              if (!this.initialized) {
                this.initialize();
              }
              var i;
              var len = this.paths.length;
              var mask;
              var path;
              for (i = 0; i < len; i += 1) {
                if (this.paths[i].m !== -1) {
                  mask = this.elem.maskManager.viewData[this.paths[i].m];
                  path = this.paths[i].p;
                  if (forceRender || this.filterManager._mdf || mask.prop._mdf) {
                    path.setAttribute('d', mask.lastPath);
                  }
                  if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf) {
                    var dasharrayValue;
                    if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
                      var s = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                      var e = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                      var l = path.getTotalLength();
                      dasharrayValue = '0 0 0 ' + l * s + ' ';
                      var lineLength = l * (e - s);
                      var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
                      var units = Math.floor(lineLength / segment);
                      var j;
                      for (j = 0; j < units; j += 1) {
                        dasharrayValue += '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + ' ';
                      }
                      dasharrayValue += '0 ' + l * 10 + ' 0 0';
                    } else {
                      dasharrayValue = '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
                    }
                    path.setAttribute('stroke-dasharray', dasharrayValue);
                  }
                }
              }
              if (forceRender || this.filterManager.effectElements[4].p._mdf) {
                this.pathMasker.setAttribute('stroke-width', this.filterManager.effectElements[4].p.v * 2);
              }
              if (forceRender || this.filterManager.effectElements[6].p._mdf) {
                this.pathMasker.setAttribute('opacity', this.filterManager.effectElements[6].p.v);
              }
              if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
                if (forceRender || this.filterManager.effectElements[3].p._mdf) {
                  var color = this.filterManager.effectElements[3].p.v;
                  this.pathMasker.setAttribute('stroke', 'rgb(' + bmFloor(color[0] * 255) + ',' + bmFloor(color[1] * 255) + ',' + bmFloor(color[2] * 255) + ')');
                }
              }
            };
            function SVGTritoneFilter(filter, filterManager, elem, id) {
              this.filterManager = filterManager;
              var feColorMatrix = createNS('feColorMatrix');
              feColorMatrix.setAttribute('type', 'matrix');
              feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
              feColorMatrix.setAttribute('values', '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
              filter.appendChild(feColorMatrix);
              var feComponentTransfer = createNS('feComponentTransfer');
              feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
              feComponentTransfer.setAttribute('result', id);
              this.matrixFilter = feComponentTransfer;
              var feFuncR = createNS('feFuncR');
              feFuncR.setAttribute('type', 'table');
              feComponentTransfer.appendChild(feFuncR);
              this.feFuncR = feFuncR;
              var feFuncG = createNS('feFuncG');
              feFuncG.setAttribute('type', 'table');
              feComponentTransfer.appendChild(feFuncG);
              this.feFuncG = feFuncG;
              var feFuncB = createNS('feFuncB');
              feFuncB.setAttribute('type', 'table');
              feComponentTransfer.appendChild(feFuncB);
              this.feFuncB = feFuncB;
              filter.appendChild(feComponentTransfer);
            }
            SVGTritoneFilter.prototype.renderFrame = function (forceRender) {
              if (forceRender || this.filterManager._mdf) {
                var color1 = this.filterManager.effectElements[0].p.v;
                var color2 = this.filterManager.effectElements[1].p.v;
                var color3 = this.filterManager.effectElements[2].p.v;
                var tableR = color3[0] + ' ' + color2[0] + ' ' + color1[0];
                var tableG = color3[1] + ' ' + color2[1] + ' ' + color1[1];
                var tableB = color3[2] + ' ' + color2[2] + ' ' + color1[2];
                this.feFuncR.setAttribute('tableValues', tableR);
                this.feFuncG.setAttribute('tableValues', tableG);
                this.feFuncB.setAttribute('tableValues', tableB);
              }
            };
            function SVGProLevelsFilter(filter, filterManager, elem, id) {
              this.filterManager = filterManager;
              var effectElements = this.filterManager.effectElements;
              var feComponentTransfer = createNS('feComponentTransfer'); // Red

              if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
                this.feFuncR = this.createFeFunc('feFuncR', feComponentTransfer);
              } // Green

              if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
                this.feFuncG = this.createFeFunc('feFuncG', feComponentTransfer);
              } // Blue

              if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
                this.feFuncB = this.createFeFunc('feFuncB', feComponentTransfer);
              } // Alpha

              if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
                this.feFuncA = this.createFeFunc('feFuncA', feComponentTransfer);
              } // RGB

              if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
                feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
                filter.appendChild(feComponentTransfer);
              }
              if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {
                feComponentTransfer = createNS('feComponentTransfer');
                feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
                feComponentTransfer.setAttribute('result', id);
                filter.appendChild(feComponentTransfer);
                this.feFuncRComposed = this.createFeFunc('feFuncR', feComponentTransfer);
                this.feFuncGComposed = this.createFeFunc('feFuncG', feComponentTransfer);
                this.feFuncBComposed = this.createFeFunc('feFuncB', feComponentTransfer);
              }
            }
            SVGProLevelsFilter.prototype.createFeFunc = function (type, feComponentTransfer) {
              var feFunc = createNS(type);
              feFunc.setAttribute('type', 'table');
              feComponentTransfer.appendChild(feFunc);
              return feFunc;
            };
            SVGProLevelsFilter.prototype.getTableValue = function (inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
              var cnt = 0;
              var segments = 256;
              var perc;
              var min = Math.min(inputBlack, inputWhite);
              var max = Math.max(inputBlack, inputWhite);
              var table = Array.call(null, {
                length: segments
              });
              var colorValue;
              var pos = 0;
              var outputDelta = outputWhite - outputBlack;
              var inputDelta = inputWhite - inputBlack;
              while (cnt <= 256) {
                perc = cnt / 256;
                if (perc <= min) {
                  colorValue = inputDelta < 0 ? outputWhite : outputBlack;
                } else if (perc >= max) {
                  colorValue = inputDelta < 0 ? outputBlack : outputWhite;
                } else {
                  colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
                }
                table[pos] = colorValue;
                pos += 1;
                cnt += 256 / (segments - 1);
              }
              return table.join(' ');
            };
            SVGProLevelsFilter.prototype.renderFrame = function (forceRender) {
              if (forceRender || this.filterManager._mdf) {
                var val;
                var effectElements = this.filterManager.effectElements;
                if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
                  val = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
                  this.feFuncRComposed.setAttribute('tableValues', val);
                  this.feFuncGComposed.setAttribute('tableValues', val);
                  this.feFuncBComposed.setAttribute('tableValues', val);
                }
                if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
                  val = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
                  this.feFuncR.setAttribute('tableValues', val);
                }
                if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
                  val = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
                  this.feFuncG.setAttribute('tableValues', val);
                }
                if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
                  val = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
                  this.feFuncB.setAttribute('tableValues', val);
                }
                if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
                  val = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
                  this.feFuncA.setAttribute('tableValues', val);
                }
              }
            };
            function SVGDropShadowEffect(filter, filterManager, elem, id, source) {
              var globalFilterSize = filterManager.container.globalData.renderConfig.filterSize;
              var filterSize = filterManager.data.fs || globalFilterSize;
              filter.setAttribute('x', filterSize.x || globalFilterSize.x);
              filter.setAttribute('y', filterSize.y || globalFilterSize.y);
              filter.setAttribute('width', filterSize.width || globalFilterSize.width);
              filter.setAttribute('height', filterSize.height || globalFilterSize.height);
              this.filterManager = filterManager;
              var feGaussianBlur = createNS('feGaussianBlur');
              feGaussianBlur.setAttribute('in', 'SourceAlpha');
              feGaussianBlur.setAttribute('result', id + '_drop_shadow_1');
              feGaussianBlur.setAttribute('stdDeviation', '0');
              this.feGaussianBlur = feGaussianBlur;
              filter.appendChild(feGaussianBlur);
              var feOffset = createNS('feOffset');
              feOffset.setAttribute('dx', '25');
              feOffset.setAttribute('dy', '0');
              feOffset.setAttribute('in', id + '_drop_shadow_1');
              feOffset.setAttribute('result', id + '_drop_shadow_2');
              this.feOffset = feOffset;
              filter.appendChild(feOffset);
              var feFlood = createNS('feFlood');
              feFlood.setAttribute('flood-color', '#00ff00');
              feFlood.setAttribute('flood-opacity', '1');
              feFlood.setAttribute('result', id + '_drop_shadow_3');
              this.feFlood = feFlood;
              filter.appendChild(feFlood);
              var feComposite = createNS('feComposite');
              feComposite.setAttribute('in', id + '_drop_shadow_3');
              feComposite.setAttribute('in2', id + '_drop_shadow_2');
              feComposite.setAttribute('operator', 'in');
              feComposite.setAttribute('result', id + '_drop_shadow_4');
              filter.appendChild(feComposite);
              var feMerge = this.createMergeNode(id, [id + '_drop_shadow_4', source]);
              filter.appendChild(feMerge); //
            }

            extendPrototype([SVGComposableEffect], SVGDropShadowEffect);
            SVGDropShadowEffect.prototype.renderFrame = function (forceRender) {
              if (forceRender || this.filterManager._mdf) {
                if (forceRender || this.filterManager.effectElements[4].p._mdf) {
                  this.feGaussianBlur.setAttribute('stdDeviation', this.filterManager.effectElements[4].p.v / 4);
                }
                if (forceRender || this.filterManager.effectElements[0].p._mdf) {
                  var col = this.filterManager.effectElements[0].p.v;
                  this.feFlood.setAttribute('flood-color', rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
                }
                if (forceRender || this.filterManager.effectElements[1].p._mdf) {
                  this.feFlood.setAttribute('flood-opacity', this.filterManager.effectElements[1].p.v / 255);
                }
                if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
                  var distance = this.filterManager.effectElements[3].p.v;
                  var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
                  var x = distance * Math.cos(angle);
                  var y = distance * Math.sin(angle);
                  this.feOffset.setAttribute('dx', x);
                  this.feOffset.setAttribute('dy', y);
                }
              }
            };
            var _svgMatteSymbols = [];
            function SVGMatte3Effect(filterElem, filterManager, elem) {
              this.initialized = false;
              this.filterManager = filterManager;
              this.filterElem = filterElem;
              this.elem = elem;
              elem.matteElement = createNS('g');
              elem.matteElement.appendChild(elem.layerElement);
              elem.matteElement.appendChild(elem.transformedElement);
              elem.baseElement = elem.matteElement;
            }
            SVGMatte3Effect.prototype.findSymbol = function (mask) {
              var i = 0;
              var len = _svgMatteSymbols.length;
              while (i < len) {
                if (_svgMatteSymbols[i] === mask) {
                  return _svgMatteSymbols[i];
                }
                i += 1;
              }
              return null;
            };
            SVGMatte3Effect.prototype.replaceInParent = function (mask, symbolId) {
              var parentNode = mask.layerElement.parentNode;
              if (!parentNode) {
                return;
              }
              var children = parentNode.children;
              var i = 0;
              var len = children.length;
              while (i < len) {
                if (children[i] === mask.layerElement) {
                  break;
                }
                i += 1;
              }
              var nextChild;
              if (i <= len - 2) {
                nextChild = children[i + 1];
              }
              var useElem = createNS('use');
              useElem.setAttribute('href', '#' + symbolId);
              if (nextChild) {
                parentNode.insertBefore(useElem, nextChild);
              } else {
                parentNode.appendChild(useElem);
              }
            };
            SVGMatte3Effect.prototype.setElementAsMask = function (elem, mask) {
              if (!this.findSymbol(mask)) {
                var symbolId = createElementID();
                var masker = createNS('mask');
                masker.setAttribute('id', mask.layerId);
                masker.setAttribute('mask-type', 'alpha');
                _svgMatteSymbols.push(mask);
                var defs = elem.globalData.defs;
                defs.appendChild(masker);
                var symbol = createNS('symbol');
                symbol.setAttribute('id', symbolId);
                this.replaceInParent(mask, symbolId);
                symbol.appendChild(mask.layerElement);
                defs.appendChild(symbol);
                var useElem = createNS('use');
                useElem.setAttribute('href', '#' + symbolId);
                masker.appendChild(useElem);
                mask.data.hd = false;
                mask.show();
              }
              elem.setMatte(mask.layerId);
            };
            SVGMatte3Effect.prototype.initialize = function () {
              var ind = this.filterManager.effectElements[0].p.v;
              var elements = this.elem.comp.elements;
              var i = 0;
              var len = elements.length;
              while (i < len) {
                if (elements[i] && elements[i].data.ind === ind) {
                  this.setElementAsMask(this.elem, elements[i]);
                }
                i += 1;
              }
              this.initialized = true;
            };
            SVGMatte3Effect.prototype.renderFrame = function () {
              if (!this.initialized) {
                this.initialize();
              }
            };
            function SVGGaussianBlurEffect(filter, filterManager, elem, id) {
              // Outset the filter region by 100% on all sides to accommodate blur expansion.
              filter.setAttribute('x', '-100%');
              filter.setAttribute('y', '-100%');
              filter.setAttribute('width', '300%');
              filter.setAttribute('height', '300%');
              this.filterManager = filterManager;
              var feGaussianBlur = createNS('feGaussianBlur');
              feGaussianBlur.setAttribute('result', id);
              filter.appendChild(feGaussianBlur);
              this.feGaussianBlur = feGaussianBlur;
            }
            SVGGaussianBlurEffect.prototype.renderFrame = function (forceRender) {
              if (forceRender || this.filterManager._mdf) {
                // Empirical value, matching AE's blur appearance.
                var kBlurrinessToSigma = 0.3;
                var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma; // Dimensions mapping:
                //
                //   1 -> horizontal & vertical
                //   2 -> horizontal only
                //   3 -> vertical only
                //

                var dimensions = this.filterManager.effectElements[1].p.v;
                var sigmaX = dimensions == 3 ? 0 : sigma; // eslint-disable-line eqeqeq

                var sigmaY = dimensions == 2 ? 0 : sigma; // eslint-disable-line eqeqeq

                this.feGaussianBlur.setAttribute('stdDeviation', sigmaX + ' ' + sigmaY); // Repeat edges mapping:
                //
                //   0 -> off -> duplicate
                //   1 -> on  -> wrap

                var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? 'wrap' : 'duplicate'; // eslint-disable-line eqeqeq

                this.feGaussianBlur.setAttribute('edgeMode', edgeMode);
              }
            };
            function TransformEffect() {}
            TransformEffect.prototype.init = function (effectsManager) {
              this.effectsManager = effectsManager;
              this.type = effectTypes.TRANSFORM_EFFECT;
              this.matrix = new Matrix();
              this.opacity = -1;
              this._mdf = false;
              this._opMdf = false;
            };
            TransformEffect.prototype.renderFrame = function (forceFrame) {
              this._opMdf = false;
              this._mdf = false;
              if (forceFrame || this.effectsManager._mdf) {
                var effectElements = this.effectsManager.effectElements;
                var anchor = effectElements[0].p.v;
                var position = effectElements[1].p.v;
                var isUniformScale = effectElements[2].p.v === 1;
                var scaleHeight = effectElements[3].p.v;
                var scaleWidth = isUniformScale ? scaleHeight : effectElements[4].p.v;
                var skew = effectElements[5].p.v;
                var skewAxis = effectElements[6].p.v;
                var rotation = effectElements[7].p.v;
                this.matrix.reset();
                this.matrix.translate(-anchor[0], -anchor[1], anchor[2]);
                this.matrix.scale(scaleWidth * 0.01, scaleHeight * 0.01, 1);
                this.matrix.rotate(-rotation * degToRads);
                this.matrix.skewFromAxis(-skew * degToRads, (skewAxis + 90) * degToRads);
                this.matrix.translate(position[0], position[1], 0);
                this._mdf = true;
                if (this.opacity !== effectElements[8].p.v) {
                  this.opacity = effectElements[8].p.v;
                  this._opMdf = true;
                }
              }
            };
            function SVGTransformEffect(_, filterManager) {
              this.init(filterManager);
            }
            extendPrototype([TransformEffect], SVGTransformEffect);
            function CVTransformEffect(effectsManager) {
              this.init(effectsManager);
            }
            extendPrototype([TransformEffect], CVTransformEffect);
            registerRenderer('canvas', CanvasRenderer);
            registerRenderer('html', HybridRenderer);
            registerRenderer('svg', SVGRenderer); // Registering shape modifiers

            ShapeModifiers.registerModifier('tm', TrimModifier);
            ShapeModifiers.registerModifier('pb', PuckerAndBloatModifier);
            ShapeModifiers.registerModifier('rp', RepeaterModifier);
            ShapeModifiers.registerModifier('rd', RoundCornersModifier);
            ShapeModifiers.registerModifier('zz', ZigZagModifier);
            ShapeModifiers.registerModifier('op', OffsetPathModifier); // Registering expression plugin

            setExpressionsPlugin(Expressions);
            setExpressionInterfaces(getInterface);
            initialize$1();
            initialize(); // Registering svg effects

            registerEffect$1(20, SVGTintFilter, true);
            registerEffect$1(21, SVGFillFilter, true);
            registerEffect$1(22, SVGStrokeEffect, false);
            registerEffect$1(23, SVGTritoneFilter, true);
            registerEffect$1(24, SVGProLevelsFilter, true);
            registerEffect$1(25, SVGDropShadowEffect, true);
            registerEffect$1(28, SVGMatte3Effect, false);
            registerEffect$1(29, SVGGaussianBlurEffect, true);
            registerEffect$1(35, SVGTransformEffect, false);
            registerEffect(35, CVTransformEffect);
            return lottie;
          });
        })(lottie$1, lottie$1.exports);
        var lottieExports = lottie$1.exports;
        var lottie = /*@__PURE__*/getDefaultExportFromCjs(lottieExports);
        function _iterableToArrayLimit(arr, i) {
          var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
          if (null != _i) {
            var _s,
              _e,
              _x,
              _r,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              if (_x = (_i = _i.call(arr)).next, 0 === i) {
                if (Object(_i) !== _i) return;
                _n = !1;
              } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
            } catch (err) {
              _d = !0, _e = err;
            } finally {
              try {
                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
        }
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = null != arguments[i] ? arguments[i] : {};
            i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          key = _toPropertyKey(key);
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null) return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function _slicedToArray(arr, i) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        }
        function _unsupportedIterableToArray(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length) len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
          return arr2;
        }
        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _toPrimitive(input, hint) {
          if (_typeof2(input) !== "object" || input === null) return input;
          var prim = input[Symbol.toPrimitive];
          if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if (_typeof2(res) !== "object") return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return (hint === "string" ? String : Number)(input);
        }
        function _toPropertyKey(arg) {
          var key = _toPrimitive(arg, "string");
          return _typeof2(key) === "symbol" ? key : String(key);
        }
        var _excluded$1 = ["animationData", "loop", "autoplay", "initialSegment", "onComplete", "onLoopComplete", "onEnterFrame", "onSegmentStart", "onConfigReady", "onDataReady", "onDataFailed", "onLoadedImages", "onDOMLoaded", "onDestroy", "lottieRef", "renderer", "name", "assetsPath", "rendererSettings"];
        var useLottie = function useLottie(props, style) {
          var animationData = props.animationData,
            loop = props.loop,
            autoplay = props.autoplay,
            initialSegment = props.initialSegment,
            onComplete = props.onComplete,
            onLoopComplete = props.onLoopComplete,
            onEnterFrame = props.onEnterFrame,
            onSegmentStart = props.onSegmentStart,
            onConfigReady = props.onConfigReady,
            onDataReady = props.onDataReady,
            onDataFailed = props.onDataFailed,
            onLoadedImages = props.onLoadedImages,
            onDOMLoaded = props.onDOMLoaded,
            onDestroy = props.onDestroy;
          props.lottieRef;
          props.renderer;
          props.name;
          props.assetsPath;
          props.rendererSettings;
          var rest = _objectWithoutProperties(props, _excluded$1);
          var _useState = reactExports.useState(false),
            _useState2 = _slicedToArray(_useState, 2),
            animationLoaded = _useState2[0],
            setAnimationLoaded = _useState2[1];
          var animationInstanceRef = reactExports.useRef();
          var animationContainer = reactExports.useRef(null);
          /*
                ======================================
                    INTERACTION METHODS
                ======================================
             */
          /**
           * Play
           */
          var play = function play() {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.play();
          };
          /**
           * Stop
           */
          var stop = function stop() {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.stop();
          };
          /**
           * Pause
           */
          var pause = function pause() {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.pause();
          };
          /**
           * Set animation speed
           * @param speed
           */
          var setSpeed = function setSpeed(speed) {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSpeed(speed);
          };
          /**
           * Got to frame and play
           * @param value
           * @param isFrame
           */
          var goToAndPlay = function goToAndPlay(value, isFrame) {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndPlay(value, isFrame);
          };
          /**
           * Got to frame and stop
           * @param value
           * @param isFrame
           */
          var goToAndStop = function goToAndStop(value, isFrame) {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndStop(value, isFrame);
          };
          /**
           * Set animation direction
           * @param direction
           */
          var setDirection = function setDirection(direction) {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setDirection(direction);
          };
          /**
           * Play animation segments
           * @param segments
           * @param forceFlag
           */
          var playSegments = function playSegments(segments, forceFlag) {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.playSegments(segments, forceFlag);
          };
          /**
           * Set sub frames
           * @param useSubFrames
           */
          var setSubframe = function setSubframe(useSubFrames) {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSubframe(useSubFrames);
          };
          /**
           * Get animation duration
           * @param inFrames
           */
          var getDuration = function getDuration(inFrames) {
            var _a;
            return (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.getDuration(inFrames);
          };
          /**
           * Destroy animation
           */
          var destroy = function destroy() {
            var _a;
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
            // Removing the reference to the animation so separate cleanups are skipped.
            // Without it the internal `lottie-react` instance throws exceptions as it already cleared itself on destroy.
            animationInstanceRef.current = undefined;
          };
          /*
                ======================================
                    LOTTIE
                ======================================
             */
          /**
           * Load a new animation, and if it's the case, destroy the previous one
           * @param {Object} forcedConfigs
           */
          var loadAnimation = function loadAnimation() {
            var forcedConfigs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var _a;
            // Return if the container ref is null
            if (!animationContainer.current) {
              return;
            }
            // Destroy any previous instance
            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
            // Build the animation configuration
            var config = _objectSpread2(_objectSpread2(_objectSpread2({}, props), forcedConfigs), {}, {
              container: animationContainer.current
            });
            // Save the animation instance
            animationInstanceRef.current = lottie.loadAnimation(config);
            setAnimationLoaded(!!animationInstanceRef.current);
            // Return a function that will clean up
            return function () {
              var _a;
              (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
              animationInstanceRef.current = undefined;
            };
          };
          /**
           * (Re)Initialize when animation data changed
           */
          reactExports.useEffect(function () {
            var onUnmount = loadAnimation();
            // Clean up on unmount
            return function () {
              return onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount();
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
          }, [animationData, loop]);
          // Update the autoplay state
          reactExports.useEffect(function () {
            if (!animationInstanceRef.current) {
              return;
            }
            animationInstanceRef.current.autoplay = !!autoplay;
          }, [autoplay]);
          // Update the initial segment state
          reactExports.useEffect(function () {
            if (!animationInstanceRef.current) {
              return;
            }
            // When null should reset to default animation length
            if (!initialSegment) {
              animationInstanceRef.current.resetSegments(true);
              return;
            }
            // If it's not a valid segment, do nothing
            if (!Array.isArray(initialSegment) || !initialSegment.length) {
              return;
            }
            // If the current position it's not in the new segment
            // set the current position to start
            if (animationInstanceRef.current.currentRawFrame < initialSegment[0] || animationInstanceRef.current.currentRawFrame > initialSegment[1]) {
              animationInstanceRef.current.currentRawFrame = initialSegment[0];
            }
            // Update the segment
            animationInstanceRef.current.setSegment(initialSegment[0], initialSegment[1]);
          }, [initialSegment]);
          /*
                ======================================
                    EVENTS
                ======================================
             */
          /**
           * Reinitialize listener on change
           */
          reactExports.useEffect(function () {
            var partialListeners = [{
              name: "complete",
              handler: onComplete
            }, {
              name: "loopComplete",
              handler: onLoopComplete
            }, {
              name: "enterFrame",
              handler: onEnterFrame
            }, {
              name: "segmentStart",
              handler: onSegmentStart
            }, {
              name: "config_ready",
              handler: onConfigReady
            }, {
              name: "data_ready",
              handler: onDataReady
            }, {
              name: "data_failed",
              handler: onDataFailed
            }, {
              name: "loaded_images",
              handler: onLoadedImages
            }, {
              name: "DOMLoaded",
              handler: onDOMLoaded
            }, {
              name: "destroy",
              handler: onDestroy
            }];
            var listeners = partialListeners.filter(function (listener) {
              return listener.handler != null;
            });
            if (!listeners.length) {
              return;
            }
            var deregisterList = listeners.map(
            /**
             * Handle the process of adding an event listener
             * @param {Listener} listener
             * @return {Function} Function that deregister the listener
             */
            function (listener) {
              var _a;
              (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(listener.name, listener.handler);
              // Return a function to deregister this listener
              return function () {
                var _a;
                (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener(listener.name, listener.handler);
              };
            });
            // Deregister listeners on unmount
            return function () {
              deregisterList.forEach(function (deregister) {
                return deregister();
              });
            };
          }, [onComplete, onLoopComplete, onEnterFrame, onSegmentStart, onConfigReady, onDataReady, onDataFailed, onLoadedImages, onDOMLoaded, onDestroy]);
          /**
           * Build the animation view
           */
          var View = /*#__PURE__*/React.createElement("div", _objectSpread2({
            style: style,
            ref: animationContainer
          }, rest));
          return {
            View: View,
            play: play,
            stop: stop,
            pause: pause,
            setSpeed: setSpeed,
            goToAndStop: goToAndStop,
            goToAndPlay: goToAndPlay,
            setDirection: setDirection,
            playSegments: playSegments,
            setSubframe: setSubframe,
            getDuration: getDuration,
            destroy: destroy,
            animationContainerRef: animationContainer,
            animationLoaded: animationLoaded,
            animationItem: animationInstanceRef.current
          };
        };

        // helpers
        function getContainerVisibility(container) {
          var _container$getBoundin = container.getBoundingClientRect(),
            top = _container$getBoundin.top,
            height = _container$getBoundin.height;
          var current = window.innerHeight - top;
          var max = window.innerHeight + height;
          return current / max;
        }
        function getContainerCursorPosition(container, cursorX, cursorY) {
          var _container$getBoundin2 = container.getBoundingClientRect(),
            top = _container$getBoundin2.top,
            left = _container$getBoundin2.left,
            width = _container$getBoundin2.width,
            height = _container$getBoundin2.height;
          var x = (cursorX - left) / width;
          var y = (cursorY - top) / height;
          return {
            x: x,
            y: y
          };
        }
        var useInitInteractivity = function useInitInteractivity(_ref) {
          var wrapperRef = _ref.wrapperRef,
            animationItem = _ref.animationItem,
            mode = _ref.mode,
            actions = _ref.actions;
          reactExports.useEffect(function () {
            var wrapper = wrapperRef.current;
            if (!wrapper || !animationItem || !actions.length) {
              return;
            }
            animationItem.stop();
            var scrollModeHandler = function scrollModeHandler() {
              var assignedSegment = null;
              var scrollHandler = function scrollHandler() {
                var currentPercent = getContainerVisibility(wrapper);
                // Find the first action that satisfies the current position conditions
                var action = actions.find(function (_ref2) {
                  var visibility = _ref2.visibility;
                  return visibility && currentPercent >= visibility[0] && currentPercent <= visibility[1];
                });
                // Skip if no matching action was found!
                if (!action) {
                  return;
                }
                if (action.type === "seek" && action.visibility && action.frames.length === 2) {
                  // Seek: Go to a frame based on player scroll position action
                  var frameToGo = action.frames[0] + Math.ceil((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0]) * action.frames[1]);
                  //! goToAndStop must be relative to the start of the current segment
                  animationItem.goToAndStop(frameToGo - animationItem.firstFrame - 1, true);
                }
                if (action.type === "loop") {
                  // Loop: Loop a given frames
                  if (assignedSegment === null) {
                    // if not playing any segments currently. play those segments and save to state
                    animationItem.playSegments(action.frames, true);
                    assignedSegment = action.frames;
                  } else {
                    // if playing any segments currently.
                    //check if segments in state are equal to the frames selected by action
                    if (assignedSegment !== action.frames) {
                      // if they are not equal. new segments are to be loaded
                      animationItem.playSegments(action.frames, true);
                      assignedSegment = action.frames;
                    } else if (animationItem.isPaused) {
                      // if they are equal the play method must be called only if lottie is paused
                      animationItem.playSegments(action.frames, true);
                      assignedSegment = action.frames;
                    }
                  }
                }
                if (action.type === "play" && animationItem.isPaused) {
                  // Play: Reset segments and continue playing full animation from current position
                  animationItem.resetSegments(true);
                  animationItem.play();
                }
                if (action.type === "stop") {
                  // Stop: Stop playback
                  animationItem.goToAndStop(action.frames[0] - animationItem.firstFrame - 1, true);
                }
              };
              document.addEventListener("scroll", scrollHandler);
              return function () {
                document.removeEventListener("scroll", scrollHandler);
              };
            };
            var cursorModeHandler = function cursorModeHandler() {
              var handleCursor = function handleCursor(_x, _y) {
                var x = _x;
                var y = _y;
                // Resolve cursor position if cursor is inside container
                if (x !== -1 && y !== -1) {
                  // Get container cursor position
                  var pos = getContainerCursorPosition(wrapper, x, y);
                  // Use the resolved position
                  x = pos.x;
                  y = pos.y;
                }
                // Find the first action that satisfies the current position conditions
                var action = actions.find(function (_ref3) {
                  var position = _ref3.position;
                  if (position && Array.isArray(position.x) && Array.isArray(position.y)) {
                    return x >= position.x[0] && x <= position.x[1] && y >= position.y[0] && y <= position.y[1];
                  }
                  if (position && !Number.isNaN(position.x) && !Number.isNaN(position.y)) {
                    return x === position.x && y === position.y;
                  }
                  return false;
                });
                // Skip if no matching action was found!
                if (!action) {
                  return;
                }
                // Process action types:
                if (action.type === "seek" && action.position && Array.isArray(action.position.x) && Array.isArray(action.position.y) && action.frames.length === 2) {
                  // Seek: Go to a frame based on player scroll position action
                  var xPercent = (x - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);
                  var yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);
                  animationItem.playSegments(action.frames, true);
                  animationItem.goToAndStop(Math.ceil((xPercent + yPercent) / 2 * (action.frames[1] - action.frames[0])), true);
                }
                if (action.type === "loop") {
                  animationItem.playSegments(action.frames, true);
                }
                if (action.type === "play") {
                  // Play: Reset segments and continue playing full animation from current position
                  if (animationItem.isPaused) {
                    animationItem.resetSegments(false);
                  }
                  animationItem.playSegments(action.frames);
                }
                if (action.type === "stop") {
                  animationItem.goToAndStop(action.frames[0], true);
                }
              };
              var mouseMoveHandler = function mouseMoveHandler(ev) {
                handleCursor(ev.clientX, ev.clientY);
              };
              var mouseOutHandler = function mouseOutHandler() {
                handleCursor(-1, -1);
              };
              wrapper.addEventListener("mousemove", mouseMoveHandler);
              wrapper.addEventListener("mouseout", mouseOutHandler);
              return function () {
                wrapper.removeEventListener("mousemove", mouseMoveHandler);
                wrapper.removeEventListener("mouseout", mouseOutHandler);
              };
            };
            switch (mode) {
              case "scroll":
                return scrollModeHandler();
              case "cursor":
                return cursorModeHandler();
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
          }, [mode, animationItem]);
        };
        var useLottieInteractivity = function useLottieInteractivity(_ref4) {
          var actions = _ref4.actions,
            mode = _ref4.mode,
            lottieObj = _ref4.lottieObj;
          var animationItem = lottieObj.animationItem,
            View = lottieObj.View,
            animationContainerRef = lottieObj.animationContainerRef;
          useInitInteractivity({
            actions: actions,
            animationItem: animationItem,
            mode: mode,
            wrapperRef: animationContainerRef
          });
          return View;
        };
        var _excluded = ["style", "interactivity"];
        var Lottie = function Lottie(props) {
          var _a, _b, _c;
          var style = props.style,
            interactivity = props.interactivity,
            lottieProps = _objectWithoutProperties(props, _excluded);
          /**
           * Initialize the 'useLottie' hook
           */
          var _useLottie = useLottie(lottieProps, style),
            View = _useLottie.View,
            play = _useLottie.play,
            stop = _useLottie.stop,
            pause = _useLottie.pause,
            setSpeed = _useLottie.setSpeed,
            goToAndStop = _useLottie.goToAndStop,
            goToAndPlay = _useLottie.goToAndPlay,
            setDirection = _useLottie.setDirection,
            playSegments = _useLottie.playSegments,
            setSubframe = _useLottie.setSubframe,
            getDuration = _useLottie.getDuration,
            destroy = _useLottie.destroy,
            animationContainerRef = _useLottie.animationContainerRef,
            animationLoaded = _useLottie.animationLoaded,
            animationItem = _useLottie.animationItem;
          /**
           * Make the hook variables/methods available through the provided 'lottieRef'
           */
          reactExports.useEffect(function () {
            if (props.lottieRef) {
              props.lottieRef.current = {
                play: play,
                stop: stop,
                pause: pause,
                setSpeed: setSpeed,
                goToAndPlay: goToAndPlay,
                goToAndStop: goToAndStop,
                setDirection: setDirection,
                playSegments: playSegments,
                setSubframe: setSubframe,
                getDuration: getDuration,
                destroy: destroy,
                animationContainerRef: animationContainerRef,
                animationLoaded: animationLoaded,
                animationItem: animationItem
              };
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
          }, [(_a = props.lottieRef) === null || _a === void 0 ? void 0 : _a.current]);
          return useLottieInteractivity({
            lottieObj: {
              View: View,
              play: play,
              stop: stop,
              pause: pause,
              setSpeed: setSpeed,
              goToAndStop: goToAndStop,
              goToAndPlay: goToAndPlay,
              setDirection: setDirection,
              playSegments: playSegments,
              setSubframe: setSubframe,
              getDuration: getDuration,
              destroy: destroy,
              animationContainerRef: animationContainerRef,
              animationLoaded: animationLoaded,
              animationItem: animationItem
            },
            actions: (_b = interactivity === null || interactivity === void 0 ? void 0 : interactivity.actions) !== null && _b !== void 0 ? _b : [],
            mode: (_c = interactivity === null || interactivity === void 0 ? void 0 : interactivity.mode) !== null && _c !== void 0 ? _c : "scroll"
          });
        };
        var v = "4.8.0";
        var meta = {
          g: "LottieFiles AE 3.4.3",
          a: "",
          k: "",
          d: "",
          tc: ""
        };
        var fr = 30;
        var ip = 0;
        var op = 50;
        var w = 720;
        var h = 720;
        var nm = "loading";
        var ddd = 0;
        var assets = [];
        var layers = [{
          ddd: 0,
          ind: 1,
          ty: 4,
          nm: "Shape Layer 2",
          sr: 1,
          ks: {
            o: {
              a: 0,
              k: 100,
              ix: 11
            },
            r: {
              a: 1,
              k: [{
                i: {
                  x: [0.297],
                  y: [1]
                },
                o: {
                  x: [0.279],
                  y: [0]
                },
                t: 0,
                s: [0]
              }, {
                t: 50,
                s: [36]
              }],
              ix: 10
            },
            p: {
              a: 0,
              k: [360, 360, 0],
              ix: 2
            },
            a: {
              a: 0,
              k: [46, 14, 0],
              ix: 1
            },
            s: {
              a: 0,
              k: [112.004, 112.004, 100],
              ix: 6
            }
          },
          ao: 0,
          shapes: [{
            ty: "gr",
            it: [{
              d: 1,
              ty: "el",
              s: {
                a: 0,
                k: [559.031, 559.031],
                ix: 2
              },
              p: {
                a: 0,
                k: [0, 0],
                ix: 3
              },
              nm: "Ellipse Path 1",
              mn: "ADBE Vector Shape - Ellipse",
              hd: false
            }, {
              ty: "st",
              c: {
                a: 0,
                k: [0.956862745098, 0.956862745098, 0.960784313725, 1],
                ix: 3
              },
              o: {
                a: 0,
                k: 100,
                ix: 4
              },
              w: {
                a: 0,
                k: 64,
                ix: 5
              },
              lc: 1,
              lj: 1,
              ml: 4,
              bm: 0,
              nm: "Stroke 1",
              mn: "ADBE Vector Graphic - Stroke",
              hd: false
            }, {
              ty: "tr",
              p: {
                a: 0,
                k: [46, 14],
                ix: 2
              },
              a: {
                a: 0,
                k: [0, 0],
                ix: 1
              },
              s: {
                a: 0,
                k: [88.542, 88.542],
                ix: 3
              },
              r: {
                a: 0,
                k: 0,
                ix: 6
              },
              o: {
                a: 0,
                k: 100,
                ix: 7
              },
              sk: {
                a: 0,
                k: 0,
                ix: 4
              },
              sa: {
                a: 0,
                k: 0,
                ix: 5
              },
              nm: "Transform"
            }],
            nm: "Ellipse 1",
            np: 3,
            cix: 2,
            bm: 0,
            ix: 1,
            mn: "ADBE Vector Group",
            hd: false
          }, {
            ty: "tm",
            s: {
              a: 1,
              k: [{
                i: {
                  x: [0.243],
                  y: [1]
                },
                o: {
                  x: [0.431],
                  y: [0]
                },
                t: 10,
                s: [0]
              }, {
                t: 50,
                s: [90]
              }],
              ix: 1
            },
            e: {
              a: 1,
              k: [{
                i: {
                  x: [0.243],
                  y: [1]
                },
                o: {
                  x: [0.431],
                  y: [0]
                },
                t: 0,
                s: [10]
              }, {
                t: 40,
                s: [100]
              }],
              ix: 2
            },
            o: {
              a: 0,
              k: 0,
              ix: 3
            },
            m: 1,
            ix: 2,
            nm: "Trim Paths 1",
            mn: "ADBE Vector Filter - Trim",
            hd: false
          }],
          ip: 0,
          op: 60,
          st: 0,
          bm: 0
        }, {
          ddd: 0,
          ind: 2,
          ty: 4,
          nm: "Shape Layer 1",
          sr: 1,
          ks: {
            o: {
              a: 0,
              k: 100,
              ix: 11
            },
            r: {
              a: 0,
              k: 0,
              ix: 10
            },
            p: {
              a: 0,
              k: [360, 360, 0],
              ix: 2
            },
            a: {
              a: 0,
              k: [46, 14, 0],
              ix: 1
            },
            s: {
              a: 0,
              k: [112.004, 112.004, 100],
              ix: 6
            }
          },
          ao: 0,
          shapes: [{
            ty: "gr",
            it: [{
              d: 1,
              ty: "el",
              s: {
                a: 0,
                k: [559.031, 559.031],
                ix: 2
              },
              p: {
                a: 0,
                k: [0, 0],
                ix: 3
              },
              nm: "Ellipse Path 1",
              mn: "ADBE Vector Shape - Ellipse",
              hd: false
            }, {
              ty: "st",
              c: {
                a: 0,
                k: [0.274509803922, 0.298039215686, 0.309803921569, 1],
                ix: 3
              },
              o: {
                a: 0,
                k: 100,
                ix: 4
              },
              w: {
                a: 0,
                k: 64,
                ix: 5
              },
              lc: 1,
              lj: 1,
              ml: 4,
              bm: 0,
              nm: "Stroke 1",
              mn: "ADBE Vector Graphic - Stroke",
              hd: false
            }, {
              ty: "tr",
              p: {
                a: 0,
                k: [46, 14],
                ix: 2
              },
              a: {
                a: 0,
                k: [0, 0],
                ix: 1
              },
              s: {
                a: 0,
                k: [88.542, 88.542],
                ix: 3
              },
              r: {
                a: 0,
                k: 0,
                ix: 6
              },
              o: {
                a: 0,
                k: 100,
                ix: 7
              },
              sk: {
                a: 0,
                k: 0,
                ix: 4
              },
              sa: {
                a: 0,
                k: 0,
                ix: 5
              },
              nm: "Transform"
            }],
            nm: "Ellipse 1",
            np: 3,
            cix: 2,
            bm: 0,
            ix: 1,
            mn: "ADBE Vector Group",
            hd: false
          }],
          ip: 0,
          op: 60,
          st: 0,
          bm: 0
        }];
        var markers = [];
        var Loading = {
          v: v,
          meta: meta,
          fr: fr,
          ip: ip,
          op: op,
          w: w,
          h: h,
          nm: nm,
          ddd: ddd,
          assets: assets,
          layers: layers,
          markers: markers
        };
        var logs = "_logs_1supl_3";
        var toggle = "_toggle_1supl_3";
        var stream = "_stream_1supl_12";
        var active$1 = "_active_1supl_29";
        var passive = "_passive_1supl_33";
        var borderAll = "_borderAll_1supl_38";
        var borderTwo = "_borderTwo_1supl_42";
        var styles$6 = {
          logs: logs,
          toggle: toggle,
          stream: stream,
          active: active$1,
          passive: passive,
          borderAll: borderAll,
          borderTwo: borderTwo
        };
        var Logs = function Logs() {
          var _reactExports$useStat81 = reactExports.useState(true),
            _reactExports$useStat82 = _slicedToArray2(_reactExports$useStat81, 2),
            hide = _reactExports$useStat82[0],
            setHide = _reactExports$useStat82[1];
          var ref = reactExports.createRef();
          var _reactExports$useCont16 = reactExports.useContext(appContext),
            logs = _reactExports$useCont16.logs;
          var scrollToBottomOfList = reactExports.useCallback(function () {
            if (ref && ref.current) {
              ref.current.scrollIntoView({
                behavior: "smooth",
                block: "end"
              });
            }
          }, [ref]);
          reactExports.useEffect(function () {
            scrollToBottomOfList();
          }, [logs]);
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: styles$6["logs"],
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "".concat(styles$6.toggle, " ").concat(hide ? styles$6.borderAll : styles$6.borderTwo),
              onClick: function onClick() {
                return setHide(function (prevState) {
                  return !prevState;
                });
              },
              children: [/* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                children: [hide ? "Show" : "Hide", " logs"]
              }), /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                className: "".concat(!hide ? styles$6.active : styles$6.passive),
                xmlns: "http://www.w3.org/2000/svg",
                width: "24",
                height: "24",
                viewBox: "0 0 24 24",
                fill: "none",
                children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                  d: "M11.6502 15.2747L6 9.5999L6.9 8.7251L11.6502 13.4747L16.4004 8.7251L17.3004 9.6251L11.6502 15.2747Z",
                  fill: "#F4F4F5"
                })
              })]
            }), !hide && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: styles$6["stream"],
              children: [logs.length ? logs.map(function (l, i) {
                return /* @__PURE__ */jsxRuntimeExports.jsx("code", {
                  className: "text-white",
                  children: l
                }, i);
              }) : /* @__PURE__ */jsxRuntimeExports.jsx("code", {
                className: "text-white",
                children: "Loading logs..."
              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                ref: ref,
                className: "pt-2"
              })]
            })]
          });
        };
        var active = "_active_1pbmb_1";
        var layout = "_layout_1pbmb_6";
        var picker = "_picker_1pbmb_10";
        var dd = "_dd_1pbmb_36";
        var backdrop = "_backdrop_1pbmb_51";
        var styles$5 = {
          active: active,
          layout: layout,
          picker: picker,
          dd: dd,
          backdrop: backdrop,
          "no-results": "_no-results_1pbmb_94"
        };
        function formatBytes(bytes) {
          var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
          if (!+bytes) return "0 Bytes";
          var k = 1024;
          var dm = decimals < 0 ? 0 : decimals;
          var sizes = ["Bytes", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"];
          var i = Math.floor(Math.log(bytes) / Math.log(k));
          return "".concat(parseFloat((bytes / Math.pow(k, i)).toFixed(dm)), " ").concat(sizes[i]);
        }
        var List = function List(_ref70) {
          var options = _ref70.options,
            setForm = _ref70.setForm,
            disabled = _ref70.disabled;
          var _reactExports$useStat83 = reactExports.useState(""),
            _reactExports$useStat84 = _slicedToArray2(_reactExports$useStat83, 2),
            selected = _reactExports$useStat84[0],
            setSelected = _reactExports$useStat84[1];
          var _reactExports$useStat85 = reactExports.useState(false),
            _reactExports$useStat86 = _slicedToArray2(_reactExports$useStat85, 2),
            openModal = _reactExports$useStat86[0],
            setModal = _reactExports$useStat86[1];
          var _reactExports$useStat87 = reactExports.useState(""),
            _reactExports$useStat88 = _slicedToArray2(_reactExports$useStat87, 2),
            searchText = _reactExports$useStat88[0],
            setSearchText = _reactExports$useStat88[1];
          var handleChange = function handleChange(e) {
            setSearchText(e.target.value);
          };
          var handleSelect = function handleSelect(backup) {
            setSelected(backup);
            setModal(false);
            setForm(backup);
            setSearchText("");
          };
          reactExports.useEffect(function () {
            if (selected === "") {
              handleSelect(options.length ? options[0].name : "");
              setForm(options.length ? options[0].name : "");
            }
          }, [options]);
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "".concat(styles$5.layout, " core-grey-20"),
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              onClick: function onClick() {
                if (!disabled) {
                  options.length ? setModal(function (prevState) {
                    return !prevState;
                  }) : null;
                }
              },
              className: "".concat(styles$5.picker, " hover:cursor-pointer hover:bg-slate-200 relative ").concat(disabled ? "hover:cursor-not-allowed" : ""),
              children: [/* @__PURE__ */jsxRuntimeExports.jsxs("span", {
                className: "color-black font-sm ".concat(disabled ? "text-disabled" : ""),
                children: [!!selected.length && selected, !selected.length && "No files available"]
              }), !disabled && /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                className: "".concat(openModal ? styles$5.active : "", " top-6 absolute right-4"),
                width: "16",
                height: "10",
                viewBox: "0 0 16 10",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                  d: "M8.0004 9.06678L0.466797 1.50038L1.6668 0.333984L8.0004 6.66678L14.334 0.333984L15.534 1.53398L8.0004 9.06678Z",
                  fill: "#91919D"
                })
              })]
            }), openModal && /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: styles$5["backdrop"],
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: styles$5["dd"],
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "flex justify-between items-center mb-6",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                      className: "text-2xl",
                      children: "Choose a file"
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                      className: "hover:cursor-pointer",
                      onClick: function onClick() {
                        return setModal(false);
                      },
                      width: "16",
                      height: "17",
                      viewBox: "0 0 16 17",
                      fill: "none",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                        d: "M1.23077 16.5L0 15.2692L6.76923 8.5C4.12568 5.85645 2.64355 4.37432 0 1.73077L1.23077 0.5L8 7.26923L14.7692 0.5L16 1.73077L9.23077 8.5L16 15.2692L14.7692 16.5L8 9.73077L1.23077 16.5Z",
                        fill: "#F9F9FA"
                      })
                    })]
                  }), !!options.length && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "mb-6",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                        disabled: false,
                        id: "search",
                        name: "search",
                        type: "text",
                        placeholder: "Search files",
                        onChange: handleChange,
                        extraClass: "core-black-contrast-2 rounded-r-none",
                        endIcon: /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                          width: "20",
                          height: "20",
                          viewBox: "0 0 20 20",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("path", {
                            d: "M16.3913 8.69565C16.3913 12.9458 12.9459 16.3913 8.69566 16.3913C4.44546 16.3913 1 12.9458 1 8.69565C1 4.44546 4.44546 1 8.69566 1C12.9459 1 16.3913 4.44546 16.3913 8.69565Z",
                            stroke: "#BDBDC4",
                            strokeWidth: "2",
                            strokeMiterlimit: "10",
                            strokeLinecap: "round",
                            strokeLinejoin: "round"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                            d: "M19 19L15 15",
                            stroke: "#BDBDC4",
                            strokeWidth: "2",
                            strokeMiterlimit: "10",
                            strokeLinecap: "round",
                            strokeLinejoin: "round"
                          })]
                        })
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                      className: "pb-4",
                      children: [!!searchText.length && options.filter(function (o) {
                        return o.name.includes(searchText);
                      }).map(function (b, i) {
                        return /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                          className: "font-normal p-4 core-grey-5 rounded color-black grid grid-cols-[1fr,auto] grid-rows-1 gap-2 items-center",
                          onClick: function onClick() {
                            return handleSelect(b.name);
                          },
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "font-medium text-sm break-all",
                            children: b.name
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-sm font-medium text-right grid",
                            children: formatBytes(b.size)
                          })]
                        }, i);
                      }), !searchText.length && options.map(function (b, i) {
                        return /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                          className: "font-normal p-4 core-grey-5 rounded color-black grid grid-cols-[1fr,auto] grid-rows-1 gap-2 items-center",
                          onClick: function onClick() {
                            return handleSelect(b.name);
                          },
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "font-medium text-sm break-all",
                            children: b.name
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-sm font-medium text-right grid",
                            children: formatBytes(b.size)
                          })]
                        }, i);
                      }), !!searchText.length && options.filter(function (o) {
                        return o.name.includes(searchText);
                      }).length === 0 && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: styles$5["no-results"],
                        children: "No results found"
                      })]
                    })]
                  }), !options.length && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    className: styles$5["no-results"],
                    children: "No file found"
                  })]
                })
              })
            })]
          });
        };
        var RestoreFromBackup = function RestoreFromBackup() {
          var _reactExports$useCont17 = reactExports.useContext(appContext),
            setBackButton = _reactExports$useCont17.setBackButton,
            displayHeaderBackButton = _reactExports$useCont17.displayBackButton,
            backups = _reactExports$useCont17.backups,
            getBackups = _reactExports$useCont17.getBackups,
            shuttingDown = _reactExports$useCont17.shuttingDown;
          var location = useLocation();
          var _reactExports$useStat89 = reactExports.useState({
              host: false
            }),
            _reactExports$useStat90 = _slicedToArray2(_reactExports$useStat89, 2),
            tooltip = _reactExports$useStat90[0],
            setTooltip = _reactExports$useStat90[1];
          var _reactExports$useStat91 = reactExports.useState(false),
            _reactExports$useStat92 = _slicedToArray2(_reactExports$useStat91, 2),
            hidePassword = _reactExports$useStat92[0],
            togglePasswordVisibility = _reactExports$useStat92[1];
          var _reactExports$useStat93 = reactExports.useState(false),
            _reactExports$useStat94 = _slicedToArray2(_reactExports$useStat93, 2),
            MDSShutdown = _reactExports$useStat94[0],
            setMDSShutdown = _reactExports$useStat94[1];
          var _reactExports$useStat95 = reactExports.useState(false),
            _reactExports$useStat96 = _slicedToArray2(_reactExports$useStat95, 2),
            beginRestoring = _reactExports$useStat96[0],
            setBeginRestoring = _reactExports$useStat96[1];
          var _reactExports$useStat97 = reactExports.useState(false),
            _reactExports$useStat98 = _slicedToArray2(_reactExports$useStat97, 2),
            error = _reactExports$useStat98[0],
            setError = _reactExports$useStat98[1];
          var _reactExports$useStat99 = reactExports.useState(false),
            _reactExports$useStat100 = _slicedToArray2(_reactExports$useStat99, 2),
            step = _reactExports$useStat100[0],
            setStep = _reactExports$useStat100[1];
          var _reactExports$useStat101 = reactExports.useState(0),
            _reactExports$useStat102 = _slicedToArray2(_reactExports$useStat101, 2),
            resetFileField = _reactExports$useStat102[0],
            setResetFileField = _reactExports$useStat102[1];
          reactExports.useEffect(function () {
            if (shuttingDown) {
              setMDSShutdown(true);
            }
          }, [shuttingDown]);
          reactExports.useEffect(function () {
            setBackButton({
              display: true,
              to: -1,
              title: "Back"
            });
          }, [location]);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [step && step === 1 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("img", {
                  className: "mb-4",
                  alt: "informative",
                  src: "./assets/error.svg"
                }), " ", /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-8",
                  children: "Please note"
                }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                  className: "mb-6 text-center",
                  children: ["Restoring a backup is irreversible. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " Consider taking a backup of this node before restoring"]
                })]
              }),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                onClick: function onClick() {
                  setStep(2);
                },
                children: "Continue"
              }),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "tertiary",
                onClick: function onClick() {
                  return setStep(false);
                },
                extraClass: "mt-4",
                children: "Cancel"
              })
            }), document.body), step && step === 2 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("img", {
                  className: "mb-4",
                  alt: "informative",
                  src: "./assets/error.svg"
                }), " ", /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-8",
                  children: "Restore from backup"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "mb-6 text-center",
                  children: "Select a backup stored internally within the app or upload a new backup from an external location."
                })]
              }),
              primary: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [/* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  extraClass: "mb-2",
                  onClick: function onClick() {
                    setStep(3);
                    getBackups();
                  },
                  children: "Select an internal backup"
                }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  onClick: function onClick() {
                    setStep(4);
                  },
                  children: "Upload an external backup"
                })]
              }),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "tertiary",
                onClick: function onClick() {
                  return setStep(step - 1);
                },
                extraClass: "mt-4",
                children: "Cancel"
              })
            }), document.body), step && step === 3 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              bg: "primary",
              main: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [/* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
                  validationSchema: validationSchema$4,
                  initialValues: {
                    host: "",
                    password: "",
                    file: void 0
                  },
                  onSubmit: function () {
                    var _onSubmit3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(formData) {
                      return _regeneratorRuntime().wrap(function _callee23$(_context23) {
                        while (1) switch (_context23.prev = _context23.next) {
                          case 0:
                            setBeginRestoring(true);
                            _context23.prev = 1;
                            _context23.next = 4;
                            return restoreFromBackup(formData.host, formData.file, formData.password).catch(function (error2) {
                              throw error2;
                            });
                          case 4:
                            _context23.next = 9;
                            break;
                          case 6:
                            _context23.prev = 6;
                            _context23.t0 = _context23["catch"](1);
                            setError(_context23.t0);
                          case 9:
                          case "end":
                            return _context23.stop();
                        }
                      }, _callee23, null, [[1, 6]]);
                    }));
                    function onSubmit(_x76) {
                      return _onSubmit3.apply(this, arguments);
                    }
                    return onSubmit;
                  }(),
                  children: function children(_ref71) {
                    var handleSubmit = _ref71.handleSubmit,
                      setFieldValue = _ref71.setFieldValue,
                      errors = _ref71.errors,
                      touched = _ref71.touched,
                      values = _ref71.values,
                      handleBlur = _ref71.handleBlur,
                      handleChange = _ref71.handleChange,
                      isValid = _ref71.isValid,
                      isSubmitting = _ref71.isSubmitting;
                    return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                      children: !beginRestoring && /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                        autoComplete: "off",
                        className: "flex flex-col gap-4",
                        onSubmit: handleSubmit,
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-2xl mb-4 text-center",
                          children: "Restore from backup"
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "mb-12 text-center",
                          children: ["Once restored, the node will attempt to ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " sync to the latest block, please be patient."]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(List, {
                          options: backups,
                          setForm: function () {
                            var _setForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(option) {
                              var fullPath;
                              return _regeneratorRuntime().wrap(function _callee24$(_context24) {
                                while (1) switch (_context24.prev = _context24.next) {
                                  case 0:
                                    if (!option.length) {
                                      _context24.next = 5;
                                      break;
                                    }
                                    _context24.next = 3;
                                    return getPath("/backups/" + option);
                                  case 3:
                                    fullPath = _context24.sent;
                                    setFieldValue("file", fullPath);
                                  case 5:
                                  case "end":
                                    return _context24.stop();
                                }
                              }, _callee24);
                            }));
                            function setForm(_x77) {
                              return _setForm.apply(this, arguments);
                            }
                            return setForm;
                          }()
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                          disabled: isSubmitting,
                          error: errors.password ? errors.password : false,
                          autoComplete: "new-password",
                          onChange: handleChange,
                          onBlur: handleBlur,
                          placeholder: "Enter password",
                          handleEndIconClick: function handleEndIconClick() {
                            return togglePasswordVisibility(function (prevState) {
                              return !prevState;
                            });
                          },
                          type: !hidePassword ? "password" : "text",
                          id: "password",
                          name: "password",
                          value: values.password,
                          endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                            toggle: hidePassword
                          })
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("span", {
                          className: "mb-2 flex gap-2 items-center",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                            className: "text-left",
                            children: "Archive node host"
                          }), !tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                            className: "w-4 h-4",
                            onClick: function onClick() {
                              return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                host: true
                              }));
                            },
                            alt: "tooltip",
                            src: "./assets/help_filled.svg"
                          }), !!tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                            className: "w-4 h-4",
                            onClick: function onClick() {
                              return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                host: false
                              }));
                            },
                            alt: "tooltip-dismiss",
                            src: "./assets/cancel_filled.svg"
                          })]
                        }), tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx(Tooltip, {
                          extraClass: "!mb-0 !mt-0",
                          onClick: function onClick() {
                            return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                              host: false
                            }));
                          },
                          content: " ip:port of the archive node to sync from. Use 'auto' to connect to a default archive node.",
                          position: 148
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          children: /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                            disabled: isSubmitting,
                            id: "host",
                            name: "host",
                            placeholder: "host (optional)",
                            type: "text",
                            value: values.host,
                            onChange: handleChange,
                            onBlur: handleBlur,
                            autoComplete: "off",
                            error: touched.host && errors.host ? errors.host : false
                          })
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          disabled: !isValid || isSubmitting || !values.file,
                          type: "submit",
                          children: "Restore"
                        })]
                      })
                    });
                  }
                }), error && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col items-center",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                    className: "mb-3 inline",
                    width: "64",
                    height: "64",
                    viewBox: "0 0 64 64",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                      id: "mask0_594_13339",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                        width: "64",
                        height: "64",
                        fill: "#D9D9D9"
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                      mask: "url(#mask0_594_13339)",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                        d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                        fill: "#F4F4F5"
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                    className: "text-2xl mb-8 text-center",
                    children: "Hmm.. something went wrong."
                  }), typeof error === "string" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                    children: error.includes("GZIP") ? "Invalid password." : error.includes("connectdata") ? "Host is invalid." : error.includes("Incorrect Password!") ? "Incorrect password!" : error
                  }), _typeof2(error) === "object" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                    children: JSON.stringify(error)
                  })]
                }), !!beginRestoring && !error && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col align-center",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx(Lottie, {
                    className: "mb-4 inline",
                    width: 4,
                    height: 4,
                    style: {
                      maxWidth: 80,
                      alignSelf: "center"
                    },
                    animationData: Loading
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                    className: "text-2xl mb-8 text-center",
                    children: "Restoring"
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                    className: "mb-8 text-center",
                    children: ["Please don’t leave this screen whilst the chain is re-syncing.", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Your node will shutdown once it is complete."]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Logs, {})]
                })]
              }),
              primary: null,
              secondary: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [!beginRestoring && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  extraClass: "mt-4",
                  onClick: function onClick() {
                    return setStep(2);
                  },
                  children: "Cancel"
                }), error && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  onClick: function onClick() {
                    setError(false);
                    setBeginRestoring(false);
                  },
                  children: "Cancel"
                })]
              })
            }), document.body), step && step === 4 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              bg: "primary",
              main: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [!beginRestoring && /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
                  validationSchema: validationSchema$4,
                  initialValues: {
                    host: "",
                    password: "",
                    file: void 0
                  },
                  onSubmit: function () {
                    var _onSubmit4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(formData) {
                      var arrayBuffer, hex, fullPath;
                      return _regeneratorRuntime().wrap(function _callee25$(_context25) {
                        while (1) switch (_context25.prev = _context25.next) {
                          case 0:
                            setBeginRestoring(true);
                            _context25.prev = 1;
                            _context25.next = 4;
                            return blobToArrayBuffer(formData.file);
                          case 4:
                            arrayBuffer = _context25.sent;
                            hex = bufferToHex(arrayBuffer);
                            _context25.next = 8;
                            return saveFileAsBinary("/backups/" + formData.file.name, hex);
                          case 8:
                            _context25.next = 10;
                            return getPath("/backups/" + formData.file.name);
                          case 10:
                            fullPath = _context25.sent;
                            _context25.next = 13;
                            return restoreFromBackup(formData.host, fullPath, formData.password).catch(function (error2) {
                              throw error2;
                            });
                          case 13:
                            _context25.next = 18;
                            break;
                          case 15:
                            _context25.prev = 15;
                            _context25.t0 = _context25["catch"](1);
                            setError(_context25.t0);
                          case 18:
                          case "end":
                            return _context25.stop();
                        }
                      }, _callee25, null, [[1, 15]]);
                    }));
                    function onSubmit(_x78) {
                      return _onSubmit4.apply(this, arguments);
                    }
                    return onSubmit;
                  }(),
                  children: function children(_ref72) {
                    var handleSubmit = _ref72.handleSubmit,
                      setFieldValue = _ref72.setFieldValue,
                      errors = _ref72.errors,
                      touched = _ref72.touched,
                      values = _ref72.values,
                      handleBlur = _ref72.handleBlur,
                      handleChange = _ref72.handleChange,
                      isValid = _ref72.isValid,
                      isSubmitting = _ref72.isSubmitting;
                    return /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                      onSubmit: handleSubmit,
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                        className: "text-2xl mb-4 text-center",
                        children: "Restore from backup"
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                        className: "mb-12 text-center",
                        children: ["Once restored, the node will attempt to ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " sync to the latest block, please be patient."]
                      }), /* @__PURE__ */jsxRuntimeExports.jsx(FileChooser, {
                        disabled: isSubmitting,
                        keyValue: resetFileField,
                        handleEndIconClick: function handleEndIconClick() {
                          setResetFileField(function (prev) {
                            return prev + 1;
                          });
                          setFieldValue("file", void 0);
                        },
                        error: errors.file && errors.file ? errors.file : false,
                        extraClass: "core-grey-20",
                        accept: ".bak",
                        onChange: function onChange(e) {
                          if (e.target.files) {
                            setFieldValue("file", e.target.files[0]);
                          }
                        },
                        onBlur: handleBlur,
                        placeholder: "Select file",
                        type: "file",
                        id: "file",
                        name: "file",
                        endIcon: values.file && /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                          xmlns: "http://www.w3.org/2000/svg",
                          width: "25",
                          height: "24",
                          viewBox: "0 0 25 24",
                          fill: "none",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                            id: "mask0_645_17003",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "25",
                            height: "24",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                              x: "0.5",
                              width: "24",
                              height: "24",
                              fill: "#D9D9D9"
                            })
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                            mask: "url(#mask0_645_17003)",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                              fill: "#91919D"
                            })
                          })]
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                        disabled: isSubmitting,
                        mb: "mb-4",
                        mt: "mt-4",
                        error: errors.password ? errors.password : false,
                        autoComplete: "new-password",
                        onChange: handleChange,
                        onBlur: handleBlur,
                        placeholder: "Enter password",
                        handleEndIconClick: function handleEndIconClick() {
                          return togglePasswordVisibility(function (prevState) {
                            return !prevState;
                          });
                        },
                        type: !hidePassword ? "password" : "text",
                        id: "password",
                        name: "password",
                        value: values.password,
                        endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                          toggle: hidePassword
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("span", {
                          className: "mb-2 flex gap-2 items-center",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                            className: "text-left",
                            children: "Archive node host"
                          }), !tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                            className: "w-4 h-4",
                            onClick: function onClick() {
                              return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                host: true
                              }));
                            },
                            alt: "tooltip",
                            src: "./assets/help_filled.svg"
                          }), !!tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                            className: "w-4 h-4",
                            onClick: function onClick() {
                              return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                host: false
                              }));
                            },
                            alt: "tooltip-dismiss",
                            src: "./assets/cancel_filled.svg"
                          })]
                        }), !!tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx(Tooltip, {
                          extraClass: "!mt-0 mb-2",
                          onClick: function onClick() {
                            return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                              host: false
                            }));
                          },
                          content: " ip:port of the archive node to sync from.",
                          position: 148
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          children: /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                            disabled: isSubmitting,
                            mb: "mb-4",
                            id: "host",
                            name: "host",
                            placeholder: "host (optional)",
                            type: "text",
                            value: values.host,
                            onChange: handleChange,
                            onBlur: handleBlur,
                            autoComplete: "off",
                            error: touched.host && errors.host ? errors.host : false
                          })
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          type: "submit",
                          disabled: !isValid || isSubmitting,
                          children: "Restore"
                        })]
                      })]
                    });
                  }
                }), error && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col items-center",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                    className: "mb-3 inline",
                    width: "64",
                    height: "64",
                    viewBox: "0 0 64 64",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                      id: "mask0_594_13339",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                        width: "64",
                        height: "64",
                        fill: "#D9D9D9"
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                      mask: "url(#mask0_594_13339)",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                        d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                        fill: "#F4F4F5"
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                    className: "text-2xl mb-8 text-center",
                    children: "Hmm.. something went wrong."
                  }), typeof error === "string" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                    children: error.includes("GZIP") ? "Invalid password." : error.includes("connectdata") ? "Host is invalid." : error.includes("Incorrect Password!") ? "Incorrect password!" : error
                  }), _typeof2(error) === "object" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                    children: JSON.stringify(error)
                  })]
                }), !!beginRestoring && !error && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col align-center",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx(Lottie, {
                    className: "mb-4 inline",
                    width: 4,
                    height: 4,
                    style: {
                      maxWidth: 80,
                      alignSelf: "center"
                    },
                    animationData: Loading
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                    className: "text-2xl mb-8 text-center",
                    children: "Restoring"
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                    className: "mb-8 text-center",
                    children: ["Please don’t leave this screen whilst the chain is re-syncing.", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Your node will shutdown once it is complete."]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Logs, {})]
                })]
              }),
              primary: null,
              secondary: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [!beginRestoring && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  extraClass: "mt-4",
                  onClick: function onClick() {
                    return setStep(2);
                  },
                  children: "Cancel"
                }), error && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  onClick: function onClick() {
                    setError(false);
                    setBeginRestoring(false);
                  },
                  children: "Cancel"
                })]
              })
            }), document.body), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "flex flex-col h-full bg-black px-4 pb-4",
              children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col h-full",
                children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                  to: -1,
                  title: "Back"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "mt-6 text-2xl mb-8 text-left",
                  children: "Restore from backup"
                }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col gap-5",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "core-black-contrast-2 p-4 rounded",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "mb-6 text-left",
                      children: ["Restoring a backup will wipe this node and import the private keys, coin proofs and chain state provided in the backup. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " Once restored, the node will attempt to sync to the latest block, please be patient."]
                    }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                      onClick: function onClick() {
                        return setStep(1);
                      },
                      children: "Restore"
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "text-left",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                      className: "text-sm password-label mr-4 ml-4",
                      children: "Once the syncing process has finished, the node will shutdown. Restart the node for the restore to take effect."
                    })
                  })]
                })]
              })
            }), MDSShutdown && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              bg: "primary",
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center justify-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                    id: "mask0_1102_25908",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "64",
                    height: "64",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                      width: "64",
                      height: "64",
                      fill: "#D9D9D9"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                    mask: "url(#mask0_1102_25908)",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                      fill: "#F4F4F5"
                    })
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-4 font-semibold text-center",
                  children: "Restore complete"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "font-medium mb-6 mt-6 text-center",
                  children: "Your node was successfully restored and will shutdown. Restart Minima for the restore to take effect."
                })]
              }),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "primary",
                onClick: function onClick() {
                  if (window.navigator.userAgent.includes("Minima Browser")) {
                    return Android.shutdownMinima();
                  }
                  return window.close();
                },
                children: "Close application"
              })
            }), document.body)]
          });
        };
        var validationSchema$4 = create$3().shape({
          host: create$6(),
          file: create$8().required("Please select a (.bak) file").test("Test extension", function (val) {
            var path = this.path,
              createError = this.createError;
            var re = /(?:\.([^.]+))?$/;
            if (val === void 0 || val === null || val.length === 0) {
              return createError({
                path: "file",
                message: "Please select a valid (.bak) file"
              });
            }
            if (val && val.name && typeof val.name === "string") {
              var extension = re.exec(val.name);
              if (extension && typeof extension[1] === "string" && extension[1] !== "bak") {
                return createError({
                  path: path,
                  message: "Please select a valid file extension type."
                });
              }
            }
            return true;
          }),
          password: create$6()
        });
        var validationSchema$3 = create$3().shape({
          host: create$6().required("Enter an archive node host")
        });
        var ChainResyncReset = function ChainResyncReset() {
          var _reactExports$useCont18 = reactExports.useContext(appContext),
            displayHeaderBackButton = _reactExports$useCont18.displayBackButton,
            setBackButton = _reactExports$useCont18.setBackButton,
            shuttingDown = _reactExports$useCont18.shuttingDown;
          var _reactExports$useCont19 = reactExports.useContext(appContext),
            archives = _reactExports$useCont19.archives,
            getArchives = _reactExports$useCont19.getArchives;
          var navigate = useNavigate();
          var _reactExports$useStat103 = reactExports.useState(false),
            _reactExports$useStat104 = _slicedToArray2(_reactExports$useStat103, 2),
            MDSShutdown = _reactExports$useStat104[0],
            setMDSShutdown = _reactExports$useStat104[1];
          var _reactExports$useStat105 = reactExports.useState(false),
            _reactExports$useStat106 = _slicedToArray2(_reactExports$useStat105, 2),
            haveArchive = _reactExports$useStat106[0],
            setHaveArchive = _reactExports$useStat106[1];
          var _reactExports$useStat107 = reactExports.useState(false),
            _reactExports$useStat108 = _slicedToArray2(_reactExports$useStat107, 2),
            noHaveArchive = _reactExports$useStat108[0],
            setNoHaveArchive = _reactExports$useStat108[1];
          var _reactExports$useStat109 = reactExports.useState(0),
            _reactExports$useStat110 = _slicedToArray2(_reactExports$useStat109, 2),
            resetFileField = _reactExports$useStat110[0],
            setResetFileField = _reactExports$useStat110[1];
          var _reactExports$useStat111 = reactExports.useState("local"),
            _reactExports$useStat112 = _slicedToArray2(_reactExports$useStat111, 2),
            archiveFileSelection = _reactExports$useStat112[0],
            setArchiveFileSelection = _reactExports$useStat112[1];
          var _reactExports$useStat113 = reactExports.useState(false),
            _reactExports$useStat114 = _slicedToArray2(_reactExports$useStat113, 2),
            beginResyncing = _reactExports$useStat114[0],
            setBeginResyncing = _reactExports$useStat114[1];
          var _reactExports$useStat115 = reactExports.useState(false),
            _reactExports$useStat116 = _slicedToArray2(_reactExports$useStat115, 2),
            error = _reactExports$useStat116[0],
            setError = _reactExports$useStat116[1];
          var _reactExports$useStat117 = reactExports.useState(0),
            _reactExports$useStat118 = _slicedToArray2(_reactExports$useStat117, 2),
            progress = _reactExports$useStat118[0],
            setProgress = _reactExports$useStat118[1];
          var _reactExports$useStat119 = reactExports.useState(false),
            _reactExports$useStat120 = _slicedToArray2(_reactExports$useStat119, 2),
            fileUpload = _reactExports$useStat120[0],
            setFileUpload = _reactExports$useStat120[1];
          var _reactExports$useStat121 = reactExports.useState(0),
            _reactExports$useStat122 = _slicedToArray2(_reactExports$useStat121, 2),
            stepNo = _reactExports$useStat122[0],
            setStepNo = _reactExports$useStat122[1];
          var _reactExports$useStat123 = reactExports.useState({
              host: false
            }),
            _reactExports$useStat124 = _slicedToArray2(_reactExports$useStat123, 2),
            tooltip = _reactExports$useStat124[0],
            setTooltip = _reactExports$useStat124[1];
          reactExports.useEffect(function () {
            if (shuttingDown) {
              setMDSShutdown(true);
            }
          }, [shuttingDown]);
          reactExports.useEffect(function () {
            setBackButton({
              display: true,
              onClickHandler: function onClickHandler() {
                return navigate("/dashboard/archivereset");
              },
              title: "Archive Reset"
            });
          }, []);
          var handleArchiveSelector = function handleArchiveSelector(event) {
            setArchiveFileSelection(event.target.value);
          };
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [haveArchive && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
                  initialValues: {
                    file: "",
                    upload: null
                  },
                  onSubmit: function () {
                    var _onSubmit5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(formData) {
                      var archivefilepath, fullPath;
                      return _regeneratorRuntime().wrap(function _callee26$(_context26) {
                        while (1) switch (_context26.prev = _context26.next) {
                          case 0:
                            setBeginResyncing(true);
                            _context26.prev = 1;
                            archivefilepath = formData.file;
                            _context26.next = 5;
                            return getPath(archivefilepath);
                          case 5:
                            fullPath = _context26.sent;
                            _context26.next = 8;
                            return resetChainResync(fullPath).catch(function (error2) {
                              throw new Error(error2);
                            });
                          case 8:
                            _context26.next = 13;
                            break;
                          case 10:
                            _context26.prev = 10;
                            _context26.t0 = _context26["catch"](1);
                            setError(_context26.t0 instanceof Error ? _context26.t0.message : "An unexpected error occurred");
                          case 13:
                          case "end":
                            return _context26.stop();
                        }
                      }, _callee26, null, [[1, 10]]);
                    }));
                    function onSubmit(_x79) {
                      return _onSubmit5.apply(this, arguments);
                    }
                    return onSubmit;
                  }(),
                  children: function children(_ref73) {
                    var handleSubmit = _ref73.handleSubmit,
                      setFieldValue = _ref73.setFieldValue,
                      errors = _ref73.errors,
                      values = _ref73.values,
                      handleBlur = _ref73.handleBlur,
                      isSubmitting = _ref73.isSubmitting,
                      resetForm = _ref73.resetForm;
                    return /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                      onSubmit: handleSubmit,
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                        className: "text-2xl mb-8 text-center",
                        children: "Select an archive"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "mb-6 text-center",
                        children: "Select a local archive or upload a new one"
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "relative mb-4",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("select", {
                          disabled: fileUpload,
                          defaultValue: archiveFileSelection,
                          onChange: function onChange(e) {
                            handleArchiveSelector(e);
                            resetForm();
                          },
                          className: "p-4 bg-black hover:cursor-pointer rounded w-full hover:opacity-80",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("option", {
                            id: "value",
                            value: "local",
                            children: "Select an internal archive file"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("option", {
                            id: "split",
                            value: "upload",
                            children: "Upload an archive file"
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                          className: "my-auto absolute right-2 top-[12px]",
                          width: "32",
                          height: "33",
                          viewBox: "0 0 32 33",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                            id: "mask0_2226_53255",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "32",
                            height: "33",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                              y: "0.550781",
                              width: "32",
                              height: "32",
                              fill: "#D9D9D9"
                            })
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                            mask: "url(#mask0_2226_53255)",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M16.0004 20.6172L8.4668 13.0508L9.6668 11.8844L16.0004 18.2172L22.334 11.8844L23.534 13.0844L16.0004 20.6172Z",
                              fill: "#FaFaFF"
                            })
                          })]
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [archiveFileSelection === "local" && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx(List, {
                            disabled: archives.length === 0,
                            options: archives,
                            setForm: function () {
                              var _setForm2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(option) {
                                return _regeneratorRuntime().wrap(function _callee27$(_context27) {
                                  while (1) switch (_context27.prev = _context27.next) {
                                    case 0:
                                      if (option.length) {
                                        setFieldValue("file", "/archives/" + option);
                                      }
                                    case 1:
                                    case "end":
                                      return _context27.stop();
                                  }
                                }, _callee27);
                              }));
                              function setForm(_x80) {
                                return _setForm2.apply(this, arguments);
                              }
                              return setForm;
                            }()
                          }), archives.length === 0 && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-sm mt-2 text-good",
                            children: "No archives found in your internal files. Upload a new one!"
                          })]
                        }), !fileUpload && archiveFileSelection === "upload" && !values.file.length && /* @__PURE__ */jsxRuntimeExports.jsx(FileChooser, {
                          disabled: isSubmitting,
                          keyValue: resetFileField,
                          handleEndIconClick: function handleEndIconClick() {
                            setResetFileField(function (prev) {
                              return prev + 1;
                            });
                            setFieldValue("upload", void 0);
                          },
                          error: errors.upload && errors.upload ? errors.upload : false,
                          extraClass: "core-grey-20",
                          accept: ".gzip,.dat",
                          onChange: function onChange(e) {
                            if (e.target.files) {
                              setFieldValue("upload", e.target.files[0]);
                            }
                          },
                          onBlur: handleBlur,
                          placeholder: "Select file",
                          type: "file",
                          id: "upload",
                          name: "upload",
                          endIcon: values.upload && /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            xmlns: "http://www.w3.org/2000/svg",
                            width: "25",
                            height: "24",
                            viewBox: "0 0 25 24",
                            fill: "none",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_645_17003",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "25",
                              height: "24",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                x: "0.5",
                                width: "24",
                                height: "24",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_645_17003)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                fill: "#91919D"
                              })
                            })]
                          })
                        }), fileUpload && archiveFileSelection === "upload" && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "core-black-contrast-2 h-[56px] rounded p-4 mt-4 relative",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                            className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black",
                            children: [(Number(progress) * 100).toFixed(0), "%"]
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                            className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                            style: {
                              transform: "scaleX(".concat(progress, ")"),
                              left: "-1px",
                              top: "-2px",
                              width: "calc(100% + 1px)"
                            }
                          })]
                        }), fileUpload && values.upload && /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-sm mt-2",
                          children: ["Uploading", " ", values.upload.name ? values.upload.name + "..." : ""]
                        }), !fileUpload && !!values.file.length && archiveFileSelection === "upload" && /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-sm text-good flex items-center mt-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                            xmlns: "http://www.w3.org/2000/svg",
                            height: "24",
                            viewBox: "0 -960 960 960",
                            width: "24",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              fill: "#4FE3C1",
                              d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                            })
                          }), values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]]
                        }), values.upload && /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                          children: !fileUpload && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            variant: "primary",
                            extraClass: "mt-4",
                            onClick: function () {
                              var _onClick4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
                                return _regeneratorRuntime().wrap(function _callee29$(_context29) {
                                  while (1) switch (_context29.prev = _context29.next) {
                                    case 0:
                                      setFileUpload(true);
                                      setFieldValue("file", "");
                                      window.MDS.file.upload(values.upload, /*#__PURE__*/function () {
                                        var _ref74 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(resp) {
                                          var fileName;
                                          return _regeneratorRuntime().wrap(function _callee28$(_context28) {
                                            while (1) switch (_context28.prev = _context28.next) {
                                              case 0:
                                                if (resp.allchunks >= 10) {
                                                  setProgress(resp.chunk / resp.allchunks);
                                                }
                                                fileName = resp.filename;
                                                if (resp.allchunks === resp.chunk) {
                                                  setFileUpload(false);
                                                  window.MDS.file.move("/fileupload/" + fileName, "/archives/" + fileName, function (resp2) {
                                                    if (resp2.status) {
                                                      setFieldValue("file", "/archives/" + fileName);
                                                      setFieldValue("upload", void 0);
                                                      setFileUpload(false);
                                                      getArchives();
                                                    }
                                                  });
                                                }
                                              case 3:
                                              case "end":
                                                return _context28.stop();
                                            }
                                          }, _callee28);
                                        }));
                                        return function (_x81) {
                                          return _ref74.apply(this, arguments);
                                        };
                                      }());
                                    case 3:
                                    case "end":
                                      return _context29.stop();
                                  }
                                }, _callee29);
                              }));
                              function onClick() {
                                return _onClick4.apply(this, arguments);
                              }
                              return onClick;
                            }(),
                            children: "Upload"
                          })
                        }), values.file && values.file.length > 0 && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          type: "submit",
                          variant: "primary",
                          extraClass: "mt-4",
                          children: "Continue"
                        }), !fileUpload && archiveFileSelection === "upload" && !!values.file.length && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          onClick: function onClick() {
                            return setFieldValue("file", "");
                          },
                          variant: "tertiary",
                          extraClass: "mt-4",
                          children: "Upload a different file"
                        })]
                      })]
                    });
                  }
                })
              }),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [error && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  onClick: function onClick() {
                    setError(false);
                    setBeginResyncing(false);
                  },
                  children: "Cancel"
                }), !fileUpload && !error && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  extraClass: "mt-4",
                  onClick: function onClick() {
                    setHaveArchive(false);
                  },
                  children: "Cancel"
                })]
              })
            }), document.body), noHaveArchive && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
                  validationSchema: validationSchema$3,
                  initialValues: {
                    host: ""
                  },
                  onSubmit: function () {
                    var _onSubmit6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(formData) {
                      var host;
                      return _regeneratorRuntime().wrap(function _callee30$(_context30) {
                        while (1) switch (_context30.prev = _context30.next) {
                          case 0:
                            setBeginResyncing(true);
                            host = formData.host;
                            window.MDS.cmd("archive action:resync host:\"".concat(host, "\""), function (response) {
                              if (!response.status) {
                                setError(response.error);
                              }
                            });
                          case 3:
                          case "end":
                            return _context30.stop();
                        }
                      }, _callee30);
                    }));
                    function onSubmit(_x82) {
                      return _onSubmit6.apply(this, arguments);
                    }
                    return onSubmit;
                  }(),
                  children: function children(_ref75) {
                    var handleSubmit = _ref75.handleSubmit,
                      values = _ref75.values,
                      handleChange = _ref75.handleChange,
                      handleBlur = _ref75.handleBlur,
                      isSubmitting = _ref75.isSubmitting,
                      isValid = _ref75.isValid,
                      errors = _ref75.errors;
                    return /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                      onSubmit: handleSubmit,
                      children: [stepNo === 0 && /* @__PURE__ */jsxRuntimeExports.jsxs(FadeIn, {
                        delay: 0,
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-2xl mb-8 text-center",
                          children: "Re-sync your node?"
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "mb-6 text-center",
                          children: ["The full chain will be downloaded from your chosen archive node. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "This action is irreversible, consider taking a backup before starting re-sync. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "This process should take up to 2 hours to complete but could take longer. Please connect your device to a power source before continuing."]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          variant: "primary",
                          type: "submit",
                          onClick: function onClick() {
                            return setStepNo(1);
                          },
                          children: "Continue"
                        })]
                      }), stepNo === 1 && /* @__PURE__ */jsxRuntimeExports.jsxs(FadeIn, {
                        delay: 0,
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "flex flex-col items-center",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            className: "mb-2",
                            width: "64",
                            height: "64",
                            viewBox: "0 0 64 64",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_1607_21111",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "64",
                              height: "64",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                width: "64",
                                height: "64",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_1607_21111)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M31.9993 44.6146C32.6096 44.6146 33.1211 44.4082 33.5339 43.9954C33.9467 43.5826 34.1531 43.071 34.1531 42.4608C34.1531 41.8506 33.9467 41.339 33.5339 40.9262C33.1211 40.5134 32.6096 40.307 31.9993 40.307C31.389 40.307 30.8775 40.5134 30.4647 40.9262C30.0519 41.339 29.8455 41.8506 29.8455 42.4608C29.8455 43.071 30.0519 43.5826 30.4647 43.9954C30.8775 44.4082 31.389 44.6146 31.9993 44.6146ZM29.9994 34.8711H33.9992V18.8711H29.9994V34.8711ZM32.0037 57.3326C28.4999 57.3326 25.2065 56.6677 22.1235 55.3379C19.0404 54.0081 16.3586 52.2034 14.078 49.9239C11.7974 47.6443 9.99191 44.9636 8.66155 41.882C7.33119 38.8003 6.66602 35.5076 6.66602 32.0038C6.66602 28.4999 7.3309 25.2065 8.66068 22.1235C9.99046 19.0404 11.7951 16.3586 14.0747 14.078C16.3543 11.7974 19.0349 9.99191 22.1166 8.66155C25.1983 7.3312 28.491 6.66602 31.9948 6.66602C35.4986 6.66602 38.7921 7.33091 41.8751 8.66069C44.9582 9.99046 47.64 11.7951 49.9206 14.0747C52.2012 16.3543 54.0067 19.0349 55.337 22.1166C56.6674 25.1983 57.3326 28.491 57.3326 31.9948C57.3326 35.4986 56.6677 38.7921 55.3379 41.8751C54.0081 44.9582 52.2034 47.64 49.9239 49.9206C47.6443 52.2012 44.9636 54.0067 41.882 55.337C38.8003 56.6674 35.5076 57.3326 32.0037 57.3326Z",
                                fill: "#F4F4F5"
                              })
                            })]
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-2xl mb-8 text-center",
                            children: "Restore without archive file"
                          }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                            className: "mb-6 text-center",
                            children: ["Restoring without an archive file can take much longer to re-sync the chain. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " Please ensure you have a stable internet connection and plug your device into a power source before continuing."]
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          variant: "primary",
                          type: "submit",
                          onClick: function onClick() {
                            return setStepNo(2);
                          },
                          children: "Continue"
                        })]
                      }), stepNo === 2 && /* @__PURE__ */jsxRuntimeExports.jsxs(FadeIn, {
                        delay: 0,
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-2xl mb-8 text-center",
                          children: "Enter your archive host"
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "mb-4 rounded",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("span", {
                            className: "mb-2 flex gap-2 items-center",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                              className: "text-left",
                              children: "Archive node host"
                            }), !tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                              className: "w-4 h-4",
                              onClick: function onClick() {
                                return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                  host: true
                                }));
                              },
                              alt: "tooltip",
                              src: "./assets/help_filled.svg"
                            }), !!tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                              className: "w-4 h-4",
                              onClick: function onClick() {
                                return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                  host: false
                                }));
                              },
                              alt: "tooltip-dismiss",
                              src: "./assets/cancel_filled.svg"
                            })]
                          }), tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx(Tooltip, {
                            extraClass: "!mb-0 !mt-0 !mb-4",
                            onClick: function onClick() {
                              return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                host: false
                              }));
                            },
                            content: "Enter an ip:port of the archive node to sync from.",
                            position: 148
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                            className: "mb-6",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                              disabled: isSubmitting,
                              extraClass: "",
                              id: "host",
                              name: "host",
                              placeholder: "host",
                              type: "text",
                              value: values.host,
                              onChange: handleChange,
                              onBlur: handleBlur,
                              autoComplete: "off",
                              error: errors && errors.host ? errors.host : false
                            })
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          disabled: !isValid || isSubmitting,
                          variant: "primary",
                          type: "submit",
                          children: "Re-sync"
                        })]
                      })]
                    });
                  }
                })
              }),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  extraClass: "mt-4",
                  variant: "tertiary",
                  onClick: function onClick() {
                    {
                      stepNo === 0 ? setNoHaveArchive(false) : setStepNo(0);
                    }
                  },
                  children: "Cancel"
                })
              })
            }), document.body), error && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                    id: "mask0_594_13339",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "64",
                    height: "64",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                      width: "64",
                      height: "64",
                      fill: "#D9D9D9"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                    mask: "url(#mask0_594_13339)",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                      fill: "#F4F4F5"
                    })
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-8 text-center",
                  children: "Hmm.. something went wrong."
                }), typeof error === "string" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                  children: typeof error.includes !== "undefined" && error.toString().includes("GZIP") ? "Invalid password." : typeof error.includes !== "undefined" && error.toString().includes("connectdata") ? "Host is invalid." : typeof error.includes !== "undefined" && error.toString().includes("Incorrect Password!") ? "Incorrect password!" : error.toString()
                }), _typeof2(error) === "object" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                  children: JSON.stringify(error)
                })]
              }),
              primary: null,
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "tertiary",
                onClick: function onClick() {
                  setError(false);
                  setBeginResyncing(false);
                },
                children: "Cancel"
              })
            }), document.body), beginResyncing && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              size: "lg",
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col align-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx(Lottie, {
                  className: "mb-4 inline",
                  width: 4,
                  height: 4,
                  style: {
                    maxWidth: 80,
                    alignSelf: "center"
                  },
                  animationData: Loading
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-8 text-center",
                  children: "Re-syncing"
                }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                  className: "mb-8 text-center",
                  children: ["Please don’t leave this screen whilst the chain is re-syncing.", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Your node will shutdown when it is complete."]
                }), /* @__PURE__ */jsxRuntimeExports.jsx(Logs, {})]
              }),
              primary: null,
              secondary: null
            }), document.body), MDSShutdown && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              bg: "primary",
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center justify-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                    id: "mask0_1102_25908",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "64",
                    height: "64",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                      width: "64",
                      height: "64",
                      fill: "#D9D9D9"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                    mask: "url(#mask0_1102_25908)",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                      fill: "#F4F4F5"
                    })
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-4 font-semibold text-center",
                  children: "Re-sync complete"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "font-medium mb-6 mt-6 text-center",
                  children: "Your node was successfully re-synced and will shutdown. Restart Minima for the re-sync to take effect."
                })]
              }),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "primary",
                onClick: function onClick() {
                  if (window.navigator.userAgent.includes("Minima Browser")) {
                    return Android.shutdownMinima();
                  }
                  return window.close();
                },
                children: "Close application"
              })
            }), document.body), /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
              isOpen: true,
              delay: 0,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "flex flex-col h-full bg-black px-4 pb-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col h-full",
                  children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                    onClickHandler: function onClickHandler() {
                      return navigate("/dashboard/archivereset");
                    },
                    title: "Archive Reset"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mt-6 text-2xl mb-8 text-left",
                    children: "Chain re-sync"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mb-4",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "mb-3 text-left",
                      children: ["If your node is on the wrong chain or has been offline for a long time, you can re-sync all blocks from an archive file.", " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " Before doing a chain re-sync, you can attempt to get back in sync with the chain by:", /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside mb-4",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          className: "pt-4 pl-2.5",
                          children: "Shutting down your node from Settings and restarting it (please allow 10-15 minutes for the node to sync)"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          className: "pl-2.5",
                          children: "Checking your internet connection is stable"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          className: "pl-2.5",
                          children: "Checking the battery settings for the Minima app to ensure it is allowed to run in the background"
                        })]
                      }), "The archive file will be used to sync your node to the chain's top block and must be recently extracted from an archive node."]
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "text-left flex gap-2 mb-8",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                      className: "flex-none w-7",
                      xmlns: "http://www.w3.org/2000/svg",
                      width: "48",
                      height: "24",
                      viewBox: "0 0 24 24",
                      fill: "none",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("circle", {
                        cx: "12",
                        cy: "12",
                        r: "8",
                        fill: "#08090B"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                        id: "mask0_1607_18879",
                        maskUnits: "userSpaceOnUse",
                        x: "0",
                        y: "0",
                        width: "24",
                        height: "24",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                          width: "24",
                          height: "24",
                          fill: "#D9D9D9"
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                        mask: "url(#mask0_1607_18879)",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M12 16.7307C12.2288 16.7307 12.4207 16.6533 12.5755 16.4985C12.7303 16.3437 12.8077 16.1519 12.8077 15.9231C12.8077 15.6942 12.7303 15.5024 12.5755 15.3476C12.4207 15.1928 12.2288 15.1154 12 15.1154C11.7711 15.1154 11.5793 15.1928 11.4245 15.3476C11.2697 15.5024 11.1923 15.6942 11.1923 15.9231C11.1923 16.1519 11.2697 16.3437 11.4245 16.4985C11.5793 16.6533 11.7711 16.7307 12 16.7307ZM11.25 13.0769H12.75V7.0769H11.25V13.0769ZM12.0017 21.5C10.6877 21.5 9.45268 21.2506 8.29655 20.752C7.1404 20.2533 6.13472 19.5765 5.2795 18.7217C4.42427 17.8669 3.74721 16.8616 3.24833 15.706C2.74944 14.5504 2.5 13.3156 2.5 12.0017C2.5 10.6877 2.74933 9.45268 3.248 8.29655C3.74667 7.1404 4.42342 6.13472 5.27825 5.2795C6.1331 4.42427 7.13834 3.74721 8.29398 3.24833C9.44959 2.74944 10.6844 2.5 11.9983 2.5C13.3122 2.5 14.5473 2.74933 15.7034 3.248C16.8596 3.74667 17.8652 4.42342 18.7205 5.27825C19.5757 6.1331 20.2527 7.13834 20.7516 8.29398C21.2505 9.44959 21.5 10.6844 21.5 11.9983C21.5 13.3122 21.2506 14.5473 20.752 15.7034C20.2533 16.8596 19.5765 17.8652 18.7217 18.7205C17.8669 19.5757 16.8616 20.2527 15.706 20.7516C14.5504 21.2505 13.3156 21.5 12.0017 21.5Z",
                          fill: "#E9E9EB"
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                      className: "text-sm password-label",
                      children: ["If you don't have an archive file, you can visit the archive file channel on our Discord server", " ", /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                        target: "_blank",
                        href: "https://discord.com/invite/minima",
                        children: "https://discord.com/invite/minima"
                      })]
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    extraClass: "mb-4",
                    onClick: function onClick() {
                      return setHaveArchive(true);
                    },
                    children: "I have an archive file"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    variant: "tertiary",
                    onClick: function onClick() {
                      return setNoHaveArchive(true);
                    },
                    children: "I don't have an archive file"
                  })]
                })
              })
            })]
          });
        };
        var styles$4 = {
          "seed-phrase-list": "_seed-phrase-list_1olpg_1"
        };
        var useLongPress = function useLongPress(onLongPress, onClick, onFinish) {
          var _ref76 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
            _ref76$shouldPreventD = _ref76.shouldPreventDefault,
            shouldPreventDefault = _ref76$shouldPreventD === void 0 ? true : _ref76$shouldPreventD,
            _ref76$delay = _ref76.delay,
            delay = _ref76$delay === void 0 ? 300 : _ref76$delay;
          var _reactExports$useStat125 = reactExports.useState(false),
            _reactExports$useStat126 = _slicedToArray2(_reactExports$useStat125, 2),
            longPressTriggered = _reactExports$useStat126[0],
            setLongPressTriggered = _reactExports$useStat126[1];
          var timeout = reactExports.useRef();
          var target = reactExports.useRef();
          var start = reactExports.useCallback(function (event) {
            if (shouldPreventDefault && event.target) {
              event.target.addEventListener("touchend", preventDefault, {
                passive: false
              });
              target.current = event.target;
            }
            timeout.current = setTimeout(function () {
              onLongPress(event);
              setLongPressTriggered(true);
            }, delay);
          }, [onLongPress, delay, shouldPreventDefault]);
          var clear = reactExports.useCallback(function () {
            var shouldTriggerClick = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            onFinish();
            timeout.current && clearTimeout(timeout.current);
            shouldTriggerClick && !longPressTriggered && onClick();
            setLongPressTriggered(false);
            if (shouldPreventDefault && target.current) {
              target.current.removeEventListener("touchend", preventDefault);
            }
          }, [shouldPreventDefault, onClick, longPressTriggered]);
          return {
            onMouseDown: function onMouseDown(e) {
              return start(e);
            },
            onTouchStart: function onTouchStart(e) {
              return start(e);
            },
            onMouseUp: function onMouseUp(e) {
              return clear(e);
            },
            onMouseLeave: function onMouseLeave() {
              return clear(false);
            },
            onTouchEnd: function onTouchEnd(e) {
              return clear(e);
            }
          };
        };
        var isTouchEvent = function isTouchEvent(event) {
          return "touches" in event;
        };
        var preventDefault = function preventDefault(event) {
          if (!isTouchEvent(event)) return;
          if (event.touches.length < 2 && event.preventDefault) {
            event.preventDefault();
          }
        };
        var ViewSeedPhrase = function ViewSeedPhrase() {
          var location = useLocation();
          var _reactExports$useCont20 = reactExports.useContext(appContext),
            phraseAsArray = _reactExports$useCont20.phraseAsArray,
            setBackButton = _reactExports$useCont20.setBackButton,
            displayHeaderBackButton = _reactExports$useCont20.displayBackButton;
          var _reactExports$useStat127 = reactExports.useState(true),
            _reactExports$useStat128 = _slicedToArray2(_reactExports$useStat127, 2),
            hide = _reactExports$useStat128[0],
            setHideSeedPhrase = _reactExports$useStat128[1];
          var onLongPress = function onLongPress() {
            setHideSeedPhrase(false);
          };
          reactExports.useEffect(function () {
            setBackButton({
              display: true,
              to: "/dashboard/manageseedphrase",
              title: "Back"
            });
          }, [location]);
          var defaultOptions = {
            shouldPreventDefault: true,
            delay: 500
          };
          var longPressEvent = useLongPress(onLongPress, defaultOptions, function () {
            return setHideSeedPhrase(true);
          });
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "h-full flex flex-col justify-between px-4 pb-4",
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                to: "/dashboard/manageseedphrase",
                title: "Back"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "mt-6 text-2xl mb-8 text-left bg-inherit",
                children: "Your seed phrase"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("ul", {
                className: styles$4["seed-phrase-list"],
                children: phraseAsArray.map(function (p, index) {
                  return /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      children: index + 1
                    }), !hide ? p.toUpperCase() : ""]
                  }, index);
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsxs(Button, _objectSpread(_objectSpread({}, longPressEvent), {}, {
                extraClass: "desktop-only p-16 flex gap-2 items-center justify-center mt-8 ".concat(!hide ? "core-black-contrast core-grey-contrast-3" : ""),
                children: ["Hold to view", " ", /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  width: "21",
                  height: "20",
                  viewBox: "0 0 21 20",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                    id: "mask0_1102_25545",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "21",
                    height: "20",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                      x: "0.5",
                      width: "20",
                      height: "20",
                      fill: hide ? "#D9D9D9" : "#464C4F"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                    mask: "url(#mask0_1102_25545)",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      d: "M10.5 13.5C11.472 13.5 12.2983 13.1597 12.979 12.479C13.6597 11.7983 14 10.972 14 10C14 9.028 13.6597 8.20167 12.979 7.521C12.2983 6.84033 11.472 6.5 10.5 6.5C9.528 6.5 8.70167 6.84033 8.021 7.521C7.34033 8.20167 7 9.028 7 10C7 10.972 7.34033 11.7983 8.021 12.479C8.70167 13.1597 9.528 13.5 10.5 13.5ZM10.5 12C9.94467 12 9.47233 11.8057 9.083 11.417C8.69433 11.0277 8.5 10.5553 8.5 10C8.5 9.44467 8.69433 8.97233 9.083 8.583C9.47233 8.19433 9.94467 8 10.5 8C11.0553 8 11.5277 8.19433 11.917 8.583C12.3057 8.97233 12.5 9.44467 12.5 10C12.5 10.5553 12.3057 11.0277 11.917 11.417C11.5277 11.8057 11.0553 12 10.5 12ZM10.5 16C8.514 16 6.70833 15.455 5.083 14.365C3.45833 13.2743 2.264 11.8193 1.5 10C2.264 8.18067 3.45833 6.72567 5.083 5.635C6.70833 4.545 8.514 4 10.5 4C12.486 4 14.2917 4.545 15.917 5.635C17.5417 6.72567 18.736 8.18067 19.5 10C18.736 11.8193 17.5417 13.2743 15.917 14.365C14.2917 15.455 12.486 16 10.5 16ZM10.5 14.5C12.0553 14.5 13.4927 14.0973 14.812 13.292C16.132 12.486 17.146 11.3887 17.854 10C17.146 8.61133 16.132 7.514 14.812 6.708C13.4927 5.90267 12.0553 5.5 10.5 5.5C8.94467 5.5 7.50733 5.90267 6.188 6.708C4.868 7.514 3.854 8.61133 3.146 10C3.854 11.3887 4.868 12.486 6.188 13.292C7.50733 14.0973 8.94467 14.5 10.5 14.5Z",
                      fill: hide ? "#08090B" : "#464C4F"
                    })
                  })]
                })]
              }))]
            }), /* @__PURE__ */jsxRuntimeExports.jsxs(Button, {
              onTouchStart: function onTouchStart() {
                return setHideSeedPhrase(false);
              },
              onTouchEnd: function onTouchEnd() {
                return setHideSeedPhrase(true);
              },
              extraClass: "mobile-only p-16 flex gap-2 items-center justify-center mb-8 mt-4 ".concat(!hide ? "core-black-contrast core-grey-contrast-3" : ""),
              children: ["Hold to view", " ", /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                width: "21",
                height: "20",
                viewBox: "0 0 21 20",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                  id: "mask0_1102_25545",
                  maskUnits: "userSpaceOnUse",
                  x: "0",
                  y: "0",
                  width: "21",
                  height: "20",
                  children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                    x: "0.5",
                    width: "20",
                    height: "20",
                    fill: hide ? "#D9D9D9" : "#464C4F"
                  })
                }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                  mask: "url(#mask0_1102_25545)",
                  children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                    d: "M10.5 13.5C11.472 13.5 12.2983 13.1597 12.979 12.479C13.6597 11.7983 14 10.972 14 10C14 9.028 13.6597 8.20167 12.979 7.521C12.2983 6.84033 11.472 6.5 10.5 6.5C9.528 6.5 8.70167 6.84033 8.021 7.521C7.34033 8.20167 7 9.028 7 10C7 10.972 7.34033 11.7983 8.021 12.479C8.70167 13.1597 9.528 13.5 10.5 13.5ZM10.5 12C9.94467 12 9.47233 11.8057 9.083 11.417C8.69433 11.0277 8.5 10.5553 8.5 10C8.5 9.44467 8.69433 8.97233 9.083 8.583C9.47233 8.19433 9.94467 8 10.5 8C11.0553 8 11.5277 8.19433 11.917 8.583C12.3057 8.97233 12.5 9.44467 12.5 10C12.5 10.5553 12.3057 11.0277 11.917 11.417C11.5277 11.8057 11.0553 12 10.5 12ZM10.5 16C8.514 16 6.70833 15.455 5.083 14.365C3.45833 13.2743 2.264 11.8193 1.5 10C2.264 8.18067 3.45833 6.72567 5.083 5.635C6.70833 4.545 8.514 4 10.5 4C12.486 4 14.2917 4.545 15.917 5.635C17.5417 6.72567 18.736 8.18067 19.5 10C18.736 11.8193 17.5417 13.2743 15.917 14.365C14.2917 15.455 12.486 16 10.5 16ZM10.5 14.5C12.0553 14.5 13.4927 14.0973 14.812 13.292C16.132 12.486 17.146 11.3887 17.854 10C17.146 8.61133 16.132 7.514 14.812 6.708C13.4927 5.90267 12.0553 5.5 10.5 5.5C8.94467 5.5 7.50733 5.90267 6.188 6.708C4.868 7.514 3.854 8.61133 3.146 10C3.854 11.3887 4.868 12.486 6.188 13.292C7.50733 14.0973 8.94467 14.5 10.5 14.5Z",
                    fill: hide ? "#08090B" : "#464C4F"
                  })
                })]
              })]
            })]
          });
        };
        var Authorisation = function Authorisation(_ref77) {
          var permissions = _ref77.permissions;
          var _useAuth3 = useAuth(),
            userPermissions = _useAuth3.permissions;
          var isAllowed = permissions.some(function (allowed) {
            return userPermissions.includes(allowed);
          });
          return isAllowed ? /* @__PURE__ */jsxRuntimeExports.jsx(Outlet, {}) : /* @__PURE__ */jsxRuntimeExports.jsx(Navigate, {
            to: "/dashboard",
            replace: true
          });
        };
        var RightArrow = function RightArrow() {
          return /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
            width: "8",
            height: "12",
            viewBox: "0 0 8 12",
            fill: "currentColor",
            xmlns: "http://www.w3.org/2000/svg",
            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
              d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
              fill: "currentColor"
            })
          });
        };
        var HomeScreenNavigation = function HomeScreenNavigation(_ref78) {
          var extraClass = _ref78.extraClass,
            location = _ref78.location,
            children = _ref78.children,
            icon = _ref78.icon,
            handleClick = _ref78.handleClick;
          var navigate = useNavigate();
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            onClick: function onClick() {
              return location ? navigate(location) : handleClick ? handleClick() : null;
            },
            className: "bg-[#1B1B1B] p-4 rounded grid grid-cols-[1fr_auto] cursor-pointer ".concat(extraClass && extraClass),
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("span", {
              className: "text-sm tracking-wide opacity-80 font-bold",
              children: children
            }), /* @__PURE__ */jsxRuntimeExports.jsxs("span", {
              className: "my-auto",
              children: [!icon && /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                className: "text-gray-300",
                children: /* @__PURE__ */jsxRuntimeExports.jsx(RightArrow, {})
              }), icon && icon]
            })]
          });
        };
        var Locked = function Locked() {
          return /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            width: "16",
            height: "16",
            viewBox: "0 0 24 24",
            fill: "currentColor",
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
              id: "mask0_583_16035",
              maskUnits: "userSpaceOnUse",
              x: "0",
              y: "0",
              width: "24",
              height: "24",
              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                width: "24",
                height: "24",
                fill: "currentColor"
              })
            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
              mask: "url(#mask0_583_16035)",
              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                d: "M6.3077 21.4999C5.81058 21.4999 5.38502 21.3229 5.03102 20.9689C4.67701 20.6149 4.5 20.1893 4.5 19.6922V10.3077C4.5 9.81053 4.67701 9.38498 5.03102 9.03098C5.38502 8.67696 5.81058 8.49995 6.3077 8.49995H7.5V6.49995C7.5 5.25125 7.93782 4.18908 8.81345 3.31345C9.6891 2.43782 10.7513 2 12 2C13.2487 2 14.3108 2.43782 15.1865 3.31345C16.0621 4.18908 16.5 5.25125 16.5 6.49995V8.49995H17.6922C18.1894 8.49995 18.6149 8.67696 18.9689 9.03098C19.3229 9.38498 19.5 9.81053 19.5 10.3077V19.6922C19.5 20.1893 19.3229 20.6149 18.9689 20.9689C18.6149 21.3229 18.1894 21.4999 17.6922 21.4999H6.3077ZM12 16.7499C12.4859 16.7499 12.899 16.5797 13.2394 16.2393C13.5798 15.899 13.75 15.4858 13.75 14.9999C13.75 14.514 13.5798 14.1009 13.2394 13.7605C12.899 13.4201 12.4859 13.25 12 13.25C11.5141 13.25 11.1009 13.4201 10.7606 13.7605C10.4202 14.1009 10.25 14.514 10.25 14.9999C10.25 15.4858 10.4202 15.899 10.7606 16.2393C11.1009 16.5797 11.5141 16.7499 12 16.7499ZM8.99997 8.49995H15V6.49995C15 5.66662 14.7083 4.95828 14.125 4.37495C13.5416 3.79162 12.8333 3.49995 12 3.49995C11.1666 3.49995 10.4583 3.79162 9.87497 4.37495C9.29164 4.95828 8.99997 5.66662 8.99997 6.49995V8.49995Z",
                fill: "currentColor"
              })
            })]
          });
        };
        var Unlocked = function Unlocked() {
          return /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
            className: "ml-2",
            xmlns: "http://www.w3.org/2000/svg",
            width: "16",
            height: "20",
            viewBox: "0 0 16 20",
            fill: "currentColor",
            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
              d: "M2.3 6.5H11V4.5C11 3.66667 10.7083 2.95833 10.125 2.375C9.54167 1.79167 8.83333 1.5 8 1.5C7.16667 1.5 6.45833 1.79167 5.875 2.375C5.29167 2.95833 5 3.66667 5 4.5H3.5C3.5 3.25 3.93733 2.18733 4.812 1.312C5.68733 0.437333 6.75 0 8 0C9.25 0 10.3127 0.437333 11.188 1.312C12.0627 2.18733 12.5 3.25 12.5 4.5V6.5H13.7C14.2 6.5 14.625 6.675 14.975 7.025C15.325 7.375 15.5 7.8 15.5 8.3V17.7C15.5 18.2 15.325 18.625 14.975 18.975C14.625 19.325 14.2 19.5 13.7 19.5H2.3C1.8 19.5 1.375 19.325 1.025 18.975C0.675 18.625 0.5 18.2 0.5 17.7V8.3C0.5 7.8 0.675 7.375 1.025 7.025C1.375 6.675 1.8 6.5 2.3 6.5ZM8 14.75C8.48333 14.75 8.896 14.5793 9.238 14.238C9.57933 13.896 9.75 13.4833 9.75 13C9.75 12.5167 9.57933 12.104 9.238 11.762C8.896 11.4207 8.48333 11.25 8 11.25C7.51667 11.25 7.104 11.4207 6.762 11.762C6.42067 12.104 6.25 12.5167 6.25 13C6.25 13.4833 6.42067 13.896 6.762 14.238C7.104 14.5793 7.51667 14.75 8 14.75Z",
              fill: "currentColor"
            })
          });
        };
        function Security() {
          var _reactExports$useCont21 = reactExports.useContext(appContext),
            vaultLocked = _reactExports$useCont21.vaultLocked,
            setBackButton = _reactExports$useCont21.setBackButton;
          reactExports.useEffect(function () {
            setBackButton({
              display: false,
              to: "/dashboard",
              title: "Security"
            });
          }, [setBackButton]);
          var VAULT_LOCKED = vaultLocked !== null && vaultLocked;
          var VAULT_UNLOCKED = vaultLocked !== null && !vaultLocked;
          var VAULT_STATUS_UNDEFINED = vaultLocked === null;
          return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "max-w-md mx-auto w-full",
              children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "my-3 flex flex-col gap-2 mx-3 md:mx-0",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
                  extraClass: "bg-black border border-[#1B1B1B] cursor-default",
                  icon: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [!!VAULT_LOCKED && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "grid grid-cols-[1fr_auto] items-center text-teal-300",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("span", {
                        className: "text-sm tracking-tighter font-bold pr-1 my-auto",
                        children: "LOCKED"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx(Locked, {})]
                    }), !!VAULT_UNLOCKED && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "grid grid-cols-[1fr_auto] items-center text-red-300",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("span", {
                        className: "text-sm tracking-tighter font-bold pr-1 my-auto",
                        children: "UNLOCKED"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx(Unlocked, {})]
                    }), !!VAULT_STATUS_UNDEFINED && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "my-auto",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx(RefreshIcon, {
                        extraClass: "animate-spin w-[20px]",
                        fill: "currentColor"
                      })
                    })]
                  }),
                  children: /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                    children: "Node status"
                  })
                }), /* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
                  location: "lockprivatekeys",
                  children: !vaultLocked ? "Lock private keys" : "Unlock private keys"
                }), /* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
                  location: "backup",
                  children: "Backup node"
                }), /* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
                  location: "quicksync",
                  children: "Restore node"
                }), /* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
                  location: "manageseedphrase",
                  children: "Manage seed phrase"
                }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "grid grid-cols-[1fr_auto_1fr] items-center",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("hr", {
                    className: "border-gray-500 w-full"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mx-3",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                      className: "text-xs text-violet-400",
                      children: "Legacy"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("hr", {
                    className: "border-gray-500 w-full"
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
                  location: "restore",
                  children: "Restore from backup"
                }), /* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
                  location: "archivereset",
                  children: "Archive reset"
                })]
              })
            })
          });
        }
        var dialog$2 = "_dialog_am9c7_1";
        var button__wrapper$2 = "_button__wrapper_am9c7_16";
        var primaryActions$2 = "_primaryActions_am9c7_20";
        var secondaryActions$2 = "_secondaryActions_am9c7_41";
        var desktop_only$2 = "_desktop_only_am9c7_62";
        var mobile_only$2 = "_mobile_only_am9c7_65";
        var styles$3 = {
          dialog: dialog$2,
          button__wrapper: button__wrapper$2,
          primaryActions: primaryActions$2,
          secondaryActions: secondaryActions$2,
          desktop_only: desktop_only$2,
          mobile_only: mobile_only$2
        };
        var Dialog = function Dialog() {
          var _reactExports$useCont22 = reactExports.useContext(appContext),
            modal = _reactExports$useCont22.modal;
          var location = useLocation();
          var _reactExports$useStat129 = reactExports.useState(false),
            _reactExports$useStat130 = _slicedToArray2(_reactExports$useStat129, 2),
            error = _reactExports$useStat130[0],
            setError = _reactExports$useStat130[1];
          reactExports.useEffect(function () {
            if (location.state && location.state.hasOwnPropery("error")) {
              setError(location.state.error);
            }
          }, [location]);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: styles$3["dialog"],
              children: [modal.content, modal.primaryActions && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col gap-3",
                children: [!!error && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "text-sm form-error-message text-left",
                  children: error
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "".concat(styles$3.primaryActions),
                  children: modal.primaryActions
                }), modal.secondaryActions && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "".concat(styles$3.desktop_only, " ").concat(styles$3.secondaryActions),
                  children: modal.secondaryActions
                })]
              })]
            }), modal.secondaryActions && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "".concat(styles$3.mobile_only, " ").concat(styles$3.secondaryActions),
              children: modal.secondaryActions
            })]
          });
        };
        var validationSchema$2 = create$3().shape({
          password: create$6().matches(/^[~!@#=?+<>,._'/()?a-zA-Z0-9-]+$/, "Invalid character").min(12, "Password must be at least 12 characters long"),
          confirmPassword: create$6().test("matchy-passwords", function (val) {
            var path = this.path,
              parent = this.parent,
              createError = this.createError;
            if (parent.password === void 0) {
              return true;
            }
            if (val === void 0 && parent.password !== void 0) {
              return createError({
                path: path,
                message: "Please re-enter your password"
              });
            }
            var pwd = parent.password;
            var matching = pwd === val;
            if (matching) {
              return true;
            }
            return createError({
              path: path,
              message: "Passwords do not match"
            });
          })
        });
        var AutoCreatePassword = function AutoCreatePassword() {
          var navigate = useNavigate();
          var _reactExports$useStat131 = reactExports.useState(false),
            _reactExports$useStat132 = _slicedToArray2(_reactExports$useStat131, 2),
            hidePassword = _reactExports$useStat132[0],
            togglePasswordVisibility = _reactExports$useStat132[1];
          var _reactExports$useStat133 = reactExports.useState(false),
            _reactExports$useStat134 = _slicedToArray2(_reactExports$useStat133, 2),
            hideConfirmPassword = _reactExports$useStat134[0],
            toggleConfirmPasswordVisiblity = _reactExports$useStat134[1];
          var _reactExports$useCont23 = reactExports.useContext(appContext),
            displayHeaderBackButton = _reactExports$useCont23.displayBackButton,
            setBackButton = _reactExports$useCont23.setBackButton,
            setModal = _reactExports$useCont23.setModal;
          var _useAuth4 = useAuth(),
            authNavigate = _useAuth4.authNavigate;
          reactExports.useEffect(function () {
            return setBackButton({
              display: true,
              to: "/dashboard/backup",
              title: "Back"
            });
          }, []);
          var formik = useFormik({
            initialValues: {
              password: "",
              confirmPassword: ""
            },
            onSubmit: function () {
              var _onSubmit7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(formData) {
                return _regeneratorRuntime().wrap(function _callee31$(_context31) {
                  while (1) switch (_context31.prev = _context31.next) {
                    case 0:
                      window.MDS.keypair.set("autopassword", formData.password);
                      _context31.next = 3;
                      return toggleBackupStatus(true);
                    case 3:
                      authNavigate("/dashboard/modal", PERMISSIONS.CAN_VIEW_MODAL);
                      setModal({
                        content: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "flex text-center flex-col items-center justify-center",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            className: "mb-3 inline",
                            width: "64",
                            height: "64",
                            viewBox: "0 0 64 64",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_1102_25908",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "64",
                              height: "64",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                width: "64",
                                height: "64",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_1102_25908)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                                fill: "#F4F4F5"
                              })
                            })]
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-2xl mb-4 font-semibold",
                            children: "Auto-backup activated"
                          }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                            className: "font-medium mb-6 mt-6",
                            children: ["Auto backups will be taken every 24 hours. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Only the most recent 14 backups will be stored (including manual backups), so you should download and move them to an offline device. The password provided will be required if you need to restore the backup."]
                          })]
                        }),
                        primaryActions: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
                        secondaryActions: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          variant: "tertiary",
                          onClick: function onClick() {
                            authNavigate("dashboard/backup", []);
                          },
                          children: "Close"
                        })
                      });
                    case 5:
                    case "end":
                      return _context31.stop();
                  }
                }, _callee31);
              }));
              function onSubmit(_x83) {
                return _onSubmit7.apply(this, arguments);
              }
              return onSubmit;
            }(),
            validationSchema: validationSchema$2
          });
          return /* @__PURE__ */jsxRuntimeExports.jsx("div", {
            className: "flex flex-col h-full bg-black px-4 pb-4",
            children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col h-full",
              children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                onClickHandler: function onClickHandler() {
                  return navigate("/dashboard/backup");
                },
                title: "Back"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "mt-6 text-2xl mb-8 text-left",
                children: "Create password"
              }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col gap-5",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "text-left",
                  children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "mb-3",
                      children: ["Create a password to protect your backups, you will be required to enter this password if you need to restore from an auto-backup. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "This is not the same as the password used to lock your private keys."]
                    })
                  })
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "core-black-contrast-2 p-4 rounded flex flex-col gap-6",
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                    autoComplete: "off",
                    onSubmit: formik.handleSubmit,
                    className: "flex flex-col gap-4",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                      disabled: formik.isSubmitting,
                      extraClass: "core-black-contrast",
                      autoComplete: "new-password",
                      handleEndIconClick: function handleEndIconClick() {
                        return togglePasswordVisibility(function (prevState) {
                          return !prevState;
                        });
                      },
                      type: !hidePassword ? "password" : "text",
                      placeholder: "Enter password",
                      name: "password",
                      id: "password",
                      error: formik.errors.password,
                      value: formik.values.password,
                      onChange: formik.handleChange,
                      onBlur: formik.handleBlur,
                      endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                        toggle: hidePassword
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                      disabled: formik.isSubmitting,
                      extraClass: "core-black-contrast",
                      autoComplete: "new-password",
                      handleEndIconClick: function handleEndIconClick() {
                        return toggleConfirmPasswordVisiblity(function (prevState) {
                          return !prevState;
                        });
                      },
                      type: !hideConfirmPassword ? "password" : "text",
                      placeholder: "Confirm password",
                      name: "confirmPassword",
                      id: "confirmPassword",
                      error: formik.errors.confirmPassword,
                      value: formik.values.confirmPassword,
                      onChange: formik.handleChange,
                      onBlur: formik.handleBlur,
                      endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                        toggle: hideConfirmPassword
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "flex flex-col",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                        type: "submit",
                        disabled: !formik.isValid,
                        children: "Turn on auto-backup"
                      })
                    })]
                  })
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "text-left",
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                    className: "text-sm password-label mr-4 ml-4",
                    children: ["Enter a password over 12 characters using a-z, A-Z, 0-9 and", " ", "!@#=?+<>,.-_'()/", " symbols only. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Your password cannot contain spaces. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " Please make sure you save this password somewhere safe, it cannot be recovered if lost."]
                  })
                })]
              })]
            })
          });
        };
        var dialog$1 = "_dialog_am9c7_1";
        var button__wrapper$1 = "_button__wrapper_am9c7_16";
        var primaryActions$1 = "_primaryActions_am9c7_20";
        var secondaryActions$1 = "_secondaryActions_am9c7_41";
        var desktop_only$1 = "_desktop_only_am9c7_62";
        var mobile_only$1 = "_mobile_only_am9c7_65";
        var styles$2 = {
          dialog: dialog$1,
          button__wrapper: button__wrapper$1,
          primaryActions: primaryActions$1,
          secondaryActions: secondaryActions$1,
          desktop_only: desktop_only$1,
          mobile_only: mobile_only$1
        };
        var DeleteArchive = function DeleteArchive() {
          var location = useLocation();
          var _reactExports$useStat135 = reactExports.useState(false),
            _reactExports$useStat136 = _slicedToArray2(_reactExports$useStat135, 2),
            error = _reactExports$useStat136[0],
            setError = _reactExports$useStat136[1];
          var _reactExports$useStat137 = reactExports.useState(false),
            _reactExports$useStat138 = _slicedToArray2(_reactExports$useStat137, 2),
            loading = _reactExports$useStat138[0],
            setLoading = _reactExports$useStat138[1];
          var _reactExports$useCont24 = reactExports.useContext(appContext),
            getBackups = _reactExports$useCont24.getBackups;
          var _useAuth5 = useAuth(),
            authNavigate = _useAuth5.authNavigate;
          var handleClick = /*#__PURE__*/function () {
            var _ref79 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
              return _regeneratorRuntime().wrap(function _callee32$(_context32) {
                while (1) switch (_context32.prev = _context32.next) {
                  case 0:
                    setLoading(true);
                    _context32.next = 3;
                    return deleteFile("/archives/" + location.state.backup.name).then(function () {
                      getBackups();
                      authNavigate("/dashboard/archivereset/archives", []);
                    }).catch(function (error2) {
                      setTimeout(function () {
                        return setLoading(false);
                      }, 1500);
                      setError(error2);
                    });
                  case 3:
                  case "end":
                    return _context32.stop();
                }
              }, _callee32);
            }));
            return function handleClick() {
              return _ref79.apply(this, arguments);
            };
          }();
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: styles$2["dialog"],
              children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                  className: "inline mb-2",
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "64",
                  height: "65",
                  viewBox: "0 0 64 65",
                  fill: "none",
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("g", {
                    id: "delete",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                      id: "mask0_1422_18346",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "65",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                        id: "Bounding box",
                        y: "0.5",
                        width: "64",
                        height: "64",
                        fill: "#D9D9D9"
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                      mask: "url(#mask0_1422_18346)",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                        id: "delete_2",
                        d: "M20.3083 53.8333C19.081 53.8333 18.0562 53.4222 17.234 52.6C16.4118 51.7778 16.0007 50.753 16.0007 49.5257V16.5H13.334V13.8333H24.0007V11.782H40.0006V13.8333H50.6673V16.5H48.0006V49.5257C48.0006 50.753 47.5895 51.7778 46.7673 52.6C45.9451 53.4222 44.9203 53.8333 43.693 53.8333H20.3083ZM26.1545 45.8333H28.8212V21.8333H26.1545V45.8333ZM35.1801 45.8333H37.8468V21.8333H35.1801V45.8333Z",
                        fill: "#F9F9FA"
                      })
                    })]
                  })
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-1",
                  children: "Delete this archive?"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "text-xl mb-9 text-core-grey-80 ",
                  children: location.state.backup.name
                })]
              }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col gap-3",
                children: [!!error && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "text-sm form-error-message text-left",
                  children: error
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "".concat(styles$2.primaryActions),
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    disabled: loading,
                    onClick: handleClick,
                    children: !loading ? "Delete archive" : "Deleting..."
                  })
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "".concat(styles$2.desktop_only, " ").concat(styles$2.secondaryActions),
                  children: !loading && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    variant: "tertiary",
                    onClick: function onClick() {
                      return authNavigate("/dashboard/archivereset/archives", []);
                    },
                    children: "Cancel"
                  })
                })]
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "".concat(styles$2.mobile_only, " ").concat(styles$2.secondaryActions),
              children: !loading && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "tertiary",
                onClick: function onClick() {
                  return authNavigate("/dashboard/archivereset/archives", []);
                },
                children: "Cancel"
              })
            })]
          });
        };
        var dialog = "_dialog_1a7wj_1";
        var button__wrapper = "_button__wrapper_1a7wj_13";
        var primaryActions = "_primaryActions_1a7wj_17";
        var secondaryActions = "_secondaryActions_1a7wj_38";
        var desktop_only = "_desktop_only_1a7wj_60";
        var mobile_only = "_mobile_only_1a7wj_63";
        var styles$1 = {
          dialog: dialog,
          button__wrapper: button__wrapper,
          primaryActions: primaryActions,
          secondaryActions: secondaryActions,
          desktop_only: desktop_only,
          mobile_only: mobile_only
        };
        var CommonDialogLayout = function CommonDialogLayout(_ref80) {
          var status = _ref80.status,
            content = _ref80.content,
            primaryActions = _ref80.primaryActions,
            secondaryActions = _ref80.secondaryActions;
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "".concat(styles$1.dialog, " core-black-contrast"),
              children: [content, primaryActions && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col gap-3",
                children: [!!status && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "text-sm form-".concat(status.error ? "error" : status.warning ? "warning" : "success", "-message text-left"),
                  children: status.message
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "".concat(styles$1.primaryActions),
                  children: primaryActions
                }), secondaryActions && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "".concat(styles$1.desktop_only, " ").concat(styles$1.secondaryActions),
                  children: secondaryActions
                })]
              })]
            }), secondaryActions && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "".concat(styles$1.mobile_only, " ").concat(styles$1.secondaryActions),
              children: secondaryActions
            })]
          });
        };
        var Archives = function Archives() {
          var _reactExports$useStat139 = reactExports.useState(""),
            _reactExports$useStat140 = _slicedToArray2(_reactExports$useStat139, 2),
            searchText = _reactExports$useStat140[0],
            setSearchText = _reactExports$useStat140[1];
          var _reactExports$useCont25 = reactExports.useContext(appContext),
            getArchives = _reactExports$useCont25.getArchives,
            archives = _reactExports$useCont25.archives,
            _promptArchives = _reactExports$useCont25._promptArchives,
            promptArchives = _reactExports$useCont25.promptArchives,
            loaded = _reactExports$useCont25.loaded;
          var _reactExports$useStat141 = reactExports.useState(-1),
            _reactExports$useStat142 = _slicedToArray2(_reactExports$useStat141, 2),
            dropdownIndex = _reactExports$useStat142[0],
            setDropdownIndex = _reactExports$useStat142[1];
          var _reactExports$useStat143 = reactExports.useState(false),
            _reactExports$useStat144 = _slicedToArray2(_reactExports$useStat143, 2),
            _promptDeleteFile = _reactExports$useStat144[0],
            setPromptDeleteFile = _reactExports$useStat144[1];
          var dropdownRef = reactExports.useRef(null);
          reactExports.useEffect(function () {
            if (loaded && loaded.current) getArchives();
          }, [loaded, _promptArchives]);
          var springProps = useSpring({
            opacity: _promptArchives ? 1 : 0,
            transform: _promptArchives ? "translateY(0%) scale(1)" : "translateY(-50%) scale(0.8)",
            config: config$1.stiff
          });
          var toggleDropdown = function toggleDropdown(index) {
            if (dropdownIndex === index) {
              setDropdownIndex(-1);
            } else {
              setDropdownIndex(index);
            }
          };
          var promptDeleteFile = function promptDeleteFile(file) {
            setPromptDeleteFile(file);
          };
          reactExports.useEffect(function () {
            var handleClickOutside = function handleClickOutside(event) {
              if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
                setDropdownIndex(-1);
              }
            };
            document.addEventListener("mousedown", handleClickOutside);
            return function () {
              document.removeEventListener("mousedown", handleClickOutside);
            };
          }, [dropdownRef]);
          var handleChange = function handleChange(e) {
            setSearchText(e.target.value);
          };
          var createDownloadLink = function createDownloadLink(folder, mdsfile) {
            var origFilePath = "/".concat(folder, "/").concat(mdsfile);
            var newFilePath = "/my_downloads/".concat(mdsfile, "_minima_download_as_file_");
            window.MDS.file.copytoweb(origFilePath, newFilePath, function () {
              var url = "my_downloads/".concat(mdsfile, "_minima_download_as_file_");
              var temporaryLink = document.createElement("a");
              temporaryLink.style.display = "none";
              temporaryLink.target = "_blank";
              temporaryLink.href = url;
              temporaryLink.click();
              window.MDS.file.deletefromweb(url, function () {
                temporaryLink.remove();
              });
            });
          };
          var handleDelete = /*#__PURE__*/function () {
            var _ref81 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(archiveFile) {
              return _regeneratorRuntime().wrap(function _callee33$(_context33) {
                while (1) switch (_context33.prev = _context33.next) {
                  case 0:
                    _context33.next = 2;
                    return deleteFile("/archives/" + archiveFile).then(function () {
                      getArchives();
                      promptDeleteFile(false);
                    });
                  case 2:
                  case "end":
                    return _context33.stop();
                }
              }, _callee33);
            }));
            return function handleDelete(_x84) {
              return _ref81.apply(this, arguments);
            };
          }();
          var makeTimestamp = function makeTimestamp(filename) {
            var regex = /archive_export_(\d+)__([^_]+)_(\d+)\.raw\.dat$/;
            var match = filename.match(regex);
            filename.match(regex);
            if (!match) return "";
            var timestamp = parseInt(match[1]);
            var timestampDate = new Date(timestamp);
            return format(timestampDate, "dd/MM/yyyy HH:mm");
          };
          if (!_promptArchives) {
            return null;
          }
          var renderArchiveItem = function renderArchiveItem(b, i) {
            return /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
              onClick: function onClick() {
                return toggleDropdown(i);
              },
              className: "relative font-normal p-4 pr-1 core-grey-5 rounded color-black grid grid-cols-[1fr_auto] md:grid-cols-1 h-max",
              children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("h3", {
                  className: "font-bold",
                  children: "Archive"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "font-medium text-sm break-word",
                  children: makeTimestamp(b.name)
                })]
              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "md:hidden z-[2] flex items-center justify-center",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  onClick: function onClick() {
                    return toggleDropdown(i);
                  },
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "24",
                  height: "24",
                  viewBox: "0 0 24 24",
                  strokeWidth: "1.5",
                  stroke: "#000000",
                  fill: "none",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("path", {
                    stroke: "none",
                    d: "M0 0h24v24H0z",
                    fill: "none"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                    d: "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                    d: "M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                    d: "M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0"
                  })]
                })
              }), dropdownIndex === i && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                ref: dropdownRef,
                className: "absolute right-0 md:left-0 mt-2 w-auto bg-white z-[25] border border-gray-200 rounded-md shadow-md",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("a", {
                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                  onClick: function onClick(e) {
                    e.stopPropagation();
                    promptDeleteFile(b.name);
                  },
                  children: "Delete"
                }), window.navigator.userAgent.includes("Minima Browser") && /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                  onClick: function () {
                    var _onClick5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34(e) {
                      var fullPath;
                      return _regeneratorRuntime().wrap(function _callee34$(_context34) {
                        while (1) switch (_context34.prev = _context34.next) {
                          case 0:
                            e.stopPropagation();
                            _context34.next = 3;
                            return getPath("/archives/" + b.name);
                          case 3:
                            fullPath = _context34.sent;
                            Android.shareFile(fullPath, "*/*");
                          case 5:
                          case "end":
                            return _context34.stop();
                        }
                      }, _callee34);
                    }));
                    function onClick(_x85) {
                      return _onClick5.apply(this, arguments);
                    }
                    return onClick;
                  }(),
                  children: "Share"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                  className: "block px-4 py-4 text-gray-800 hover:bg-gray-200",
                  onClick: function onClick(e) {
                    e.stopPropagation();
                    if (window.navigator.userAgent.includes("Minima Browser")) {
                      return Android.fileDownload(window.MDS.minidappuid, "/archives/" + b.name);
                    }
                    createDownloadLink("archives", b.name);
                  },
                  children: "Download"
                })]
              })]
            }, i);
          };
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [_promptDeleteFile && /* @__PURE__ */jsxRuntimeExports.jsx(ConfirmDelete, {
              deleteBackup: function deleteBackup() {
                return handleDelete(_promptDeleteFile);
              },
              close: function close() {
                return promptDeleteFile(false);
              },
              isDeleteConfirmationOpen: _promptDeleteFile
            }), _promptArchives && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(ComposableModal, {
              dismiss: promptArchives,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "h-full flex items-center justify-center",
                children: /* @__PURE__ */jsxRuntimeExports.jsx(animated.div, {
                  style: springProps,
                  className: "max-w-lg w-full bg-black rounded p-4 py-0 shadow-sm shadow-white mx-4 min-h-[50vh] md:min-h-[350px] max-h-32 overflow-y-auto",
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "grid grid-rows-[min-content]",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "sticky top-0 z-10 bg-black p-4",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "grid grid-cols-[1fr_auto]",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h3", {
                          className: "font-bold text-white",
                          children: "Latest Archives"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Cross, {
                          dismiss: promptArchives
                        })]
                      }), !!archives.length && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "my-4 bg-black",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                          disabled: false,
                          id: "search",
                          name: "search",
                          type: "text",
                          placeholder: "Search archives by date",
                          onChange: handleChange,
                          className: "w-full bg-black text-white border border-gray-600 rounded px-3 py-2",
                          autoComplete: "off"
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "px-4 text-sm",
                      children: [!!archives.length && /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                        className: "pb-4 grid grid-cols-1 gap-4 mb-4",
                        children: [searchText.length ? archives.filter(function (o) {
                          return makeTimestamp(o.name).includes(searchText);
                        }).map(renderArchiveItem) : archives.map(renderArchiveItem), !!searchText.length && archives.filter(function (o) {
                          return makeTimestamp(o.name).includes(searchText);
                        }).length === 0 && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "text-center",
                          children: "No results found"
                        })]
                      }), !archives.length && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "text-center text-gray-400",
                        children: "You have no recent archives"
                      })]
                    })]
                  })
                })
              })
            }), document.body)]
          });
        };
        var ArchiveReset$1 = function ArchiveReset$1() {
          var _reactExports$useCont26 = reactExports.useContext(appContext),
            displayHeaderBackButton = _reactExports$useCont26.displayBackButton,
            setBackButton = _reactExports$useCont26.setBackButton,
            promptArchives = _reactExports$useCont26.promptArchives;
          var navigate = useNavigate();
          var _useAuth6 = useAuth(),
            authNavigate = _useAuth6.authNavigate;
          var _reactExports$useStat145 = reactExports.useState(false),
            _reactExports$useStat146 = _slicedToArray2(_reactExports$useStat145, 2),
            exportingArchive = _reactExports$useStat146[0],
            setExportingArchive = _reactExports$useStat146[1];
          var _reactExports$useStat147 = reactExports.useState(false),
            _reactExports$useStat148 = _slicedToArray2(_reactExports$useStat147, 2),
            exporting = _reactExports$useStat148[0],
            setExporting = _reactExports$useStat148[1];
          var _reactExports$useStat149 = reactExports.useState(null),
            _reactExports$useStat150 = _slicedToArray2(_reactExports$useStat149, 2),
            exportedArchive = _reactExports$useStat150[0],
            setExportedArchive = _reactExports$useStat150[1];
          var _reactExports$useStat151 = reactExports.useState(false),
            _reactExports$useStat152 = _slicedToArray2(_reactExports$useStat151, 2),
            error = _reactExports$useStat152[0],
            setError = _reactExports$useStat152[1];
          var _reactExports$useStat153 = reactExports.useState(""),
            _reactExports$useStat154 = _slicedToArray2(_reactExports$useStat153, 2),
            fileName = _reactExports$useStat154[0],
            setFileName = _reactExports$useStat154[1];
          var downloadFile = function downloadFile(folder, mdsfile) {
            var origFilePath = "/".concat(folder, "/").concat(mdsfile);
            var newFilePath = "/my_downloads/".concat(mdsfile, "_minima_download_as_file_");
            window.MDS.file.copytoweb(origFilePath, newFilePath, function () {
              var url = "my_downloads/".concat(mdsfile, "_minima_download_as_file_");
              var temporaryLink = document.createElement("a");
              temporaryLink.style.display = "none";
              temporaryLink.target = "_blank";
              temporaryLink.href = url;
              temporaryLink.click();
              window.MDS.file.deletefromweb(url, function () {
                temporaryLink.remove();
              });
            });
          };
          reactExports.useEffect(function () {
            setBackButton({
              display: true,
              to: "/dashboard",
              title: "Back"
            });
          }, []);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsx(Archives, {}), !exportingArchive && /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
              isOpen: true,
              delay: 0,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "flex flex-col h-full bg-black px-4 pb-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col h-full",
                  children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                    to: "/dashboard",
                    title: "Back"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mt-6 text-2xl mb-8 text-left",
                    children: "Reset node"
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "text-left flex gap-2 mb-8",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                      className: "flex-none w-7",
                      xmlns: "http://www.w3.org/2000/svg",
                      width: "48",
                      height: "24",
                      viewBox: "0 0 24 24",
                      fill: "none",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("circle", {
                        cx: "12",
                        cy: "12",
                        r: "8",
                        fill: "#08090B"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                        id: "mask0_1607_18879",
                        maskUnits: "userSpaceOnUse",
                        x: "0",
                        y: "0",
                        width: "24",
                        height: "24",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                          width: "24",
                          height: "24",
                          fill: "#D9D9D9"
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                        mask: "url(#mask0_1607_18879)",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M12 16.7307C12.2288 16.7307 12.4207 16.6533 12.5755 16.4985C12.7303 16.3437 12.8077 16.1519 12.8077 15.9231C12.8077 15.6942 12.7303 15.5024 12.5755 15.3476C12.4207 15.1928 12.2288 15.1154 12 15.1154C11.7711 15.1154 11.5793 15.1928 11.4245 15.3476C11.2697 15.5024 11.1923 15.6942 11.1923 15.9231C11.1923 16.1519 11.2697 16.3437 11.4245 16.4985C11.5793 16.6533 11.7711 16.7307 12 16.7307ZM11.25 13.0769H12.75V7.0769H11.25V13.0769ZM12.0017 21.5C10.6877 21.5 9.45268 21.2506 8.29655 20.752C7.1404 20.2533 6.13472 19.5765 5.2795 18.7217C4.42427 17.8669 3.74721 16.8616 3.24833 15.706C2.74944 14.5504 2.5 13.3156 2.5 12.0017C2.5 10.6877 2.74933 9.45268 3.248 8.29655C3.74667 7.1404 4.42342 6.13472 5.27825 5.2795C6.1331 4.42427 7.13834 3.74721 8.29398 3.24833C9.44959 2.74944 10.6844 2.5 11.9983 2.5C13.3122 2.5 14.5473 2.74933 15.7034 3.248C16.8596 3.74667 17.8652 4.42342 18.7205 5.27825C19.5757 6.1331 20.2527 7.13834 20.7516 8.29398C21.2505 9.44959 21.5 10.6844 21.5 11.9983C21.5 13.3122 21.2506 14.5473 20.752 15.7034C20.2533 16.8596 19.5765 17.8652 18.7217 18.7205C17.8669 19.5757 16.8616 20.2527 15.706 20.7516C14.5504 21.2505 13.3156 21.5 12.0017 21.5Z",
                          fill: "#E9E9EB"
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                      className: "text-sm password-label",
                      children: "Make sure you have your seed phrase written down before resetting your node or you could lose access to your coins."
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    onClick: function onClick() {
                      return authNavigate("/dashboard/archivereset/restorebackup", []);
                    },
                    className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer mb-4",
                    children: ["Restore a backup", /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "absolute right-0 top-0 h-full px-5 flex items-center",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                        width: "8",
                        height: "12",
                        viewBox: "0 0 8 12",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                          fill: "#F4F4F5"
                        })
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    onClick: function onClick() {
                      return authNavigate("/dashboard/archivereset/chainresync", []);
                    },
                    className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer mb-4",
                    children: ["Chain re-sync", /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "absolute right-0 top-0 h-full px-5 flex items-center",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                        width: "8",
                        height: "12",
                        viewBox: "0 0 8 12",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                          fill: "#F4F4F5"
                        })
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    onClick: function onClick() {
                      return authNavigate("/dashboard/archivereset/seedresync", []);
                    },
                    className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer mb-4",
                    children: ["Import seed phrase", /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "absolute right-0 top-0 h-full px-5 flex items-center",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                        width: "8",
                        height: "12",
                        viewBox: "0 0 8 12",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                          fill: "#F4F4F5"
                        })
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    className: "text-sm text-left password-label mb-6",
                    children: "If you are running an archive node, you can export it as a file."
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    onClick: function onClick() {
                      return setExportingArchive(true);
                    },
                    children: "Archive export"
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    onClick: promptArchives,
                    className: "text-left relative core-black-contrast-2 py-4 px-4 rounded cursor-pointer mt-4",
                    children: ["Browse internal archives", " ", /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "absolute right-0 top-0 h-full px-5 flex items-center",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                        width: "8",
                        height: "12",
                        viewBox: "0 0 8 12",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                          fill: "#F4F4F5"
                        })
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    onClick: function onClick() {
                      return navigate("integritycheck");
                    },
                    className: "text-left relative core-black-contrast-2 py-4 px-5 rounded cursor-pointer mt-4",
                    children: ["Archive integrity check", /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "absolute right-0 top-0 h-full px-5 flex items-center",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                        width: "8",
                        height: "12",
                        viewBox: "0 0 8 12",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                          fill: "#F4F4F5"
                        })
                      })
                    })]
                  })]
                })
              })
            }), !!exportingArchive && /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
              isOpen: true,
              delay: 0,
              children: /* @__PURE__ */jsxRuntimeExports.jsx(CommonDialogLayout, {
                status: void 0,
                primaryActions: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                  children: [error && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "text-sm form-error-message text-left mb-4 break-words",
                    children: error
                  }), exportedArchive === null && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    disabled: exporting,
                    onClick: function () {
                      var _onClick6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {
                        var rootPath, now, dateCreation, fileName2;
                        return _regeneratorRuntime().wrap(function _callee36$(_context36) {
                          while (1) switch (_context36.prev = _context36.next) {
                            case 0:
                              setError(false);
                              setExporting(true);
                              _context36.next = 4;
                              return getPath("");
                            case 4:
                              rootPath = _context36.sent;
                              now = /* @__PURE__ */new Date();
                              dateCreation = format(now, "__dMMMyyyy_Hmm");
                              fileName2 = "archive_export_".concat(now.getTime()) + dateCreation + ".raw.dat";
                              setFileName(fileName2);
                              window.MDS.cmd("archive action:exportraw file:\"".concat(rootPath, "/archives/").concat(fileName2, "\""), /*#__PURE__*/function () {
                                var _ref82 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35(resp) {
                                  return _regeneratorRuntime().wrap(function _callee35$(_context35) {
                                    while (1) switch (_context35.prev = _context35.next) {
                                      case 0:
                                        if (!resp.status) {
                                          setError(resp.error ? resp.error : "Exporting archive failed, please try again...");
                                          setExporting(false);
                                        }
                                        if (resp.status) {
                                          setExporting(false);
                                          setExportedArchive({
                                            fileLocation: resp.response.file,
                                            size: resp.response.size
                                          });
                                        }
                                      case 2:
                                      case "end":
                                        return _context35.stop();
                                    }
                                  }, _callee35);
                                }));
                                return function (_x86) {
                                  return _ref82.apply(this, arguments);
                                };
                              }());
                            case 10:
                            case "end":
                              return _context36.stop();
                          }
                        }, _callee36);
                      }));
                      function onClick() {
                        return _onClick6.apply(this, arguments);
                      }
                      return onClick;
                    }(),
                    children: !exporting ? "Export archive file" : "Exporting..."
                  }), !exporting && exportedArchive !== null && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    variant: "primary",
                    onClick: function onClick() {
                      if (window.navigator.userAgent.includes("Minima Browser")) {
                        return Android.fileDownload(window.MDS.minidappuid, "/archives/" + fileName);
                      }
                      downloadFile("archives", fileName);
                    },
                    children: "Download now"
                  })]
                }),
                secondaryActions: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                  children: !exporting && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    onClick: function onClick() {
                      setExportingArchive(false);
                      setExportedArchive(null);
                    },
                    children: exportedArchive === null ? "Cancel" : "Done"
                  })
                }),
                content: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                  children: [exportedArchive !== null && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "flex flex-col justify-center items-center text-center",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                      className: "inline mb-6",
                      xmlns: "http://www.w3.org/2000/svg",
                      width: "48",
                      height: "48",
                      viewBox: "0 0 28 28",
                      fill: "none",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                        id: "mask0_1546_39369",
                        maskUnits: "userSpaceOnUse",
                        x: "0",
                        y: "0",
                        width: "28",
                        height: "28",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                          width: "28",
                          height: "28",
                          fill: "#D9D9D9"
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                        mask: "url(#mask0_1546_39369)",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M11.9085 20.2688L21.8162 10.3611L20.2632 8.80812L11.9085 17.1628L7.70849 12.9628L6.15548 14.5158L11.9085 20.2688ZM14.0025 28C12.0661 28 10.2461 27.6326 8.54231 26.8977C6.8385 26.1628 5.35644 25.1655 4.09612 23.9057C2.83577 22.6459 1.838 21.1645 1.1028 19.4615C0.367599 17.7585 0 15.9388 0 14.0025C0 12.0661 0.36744 10.2461 1.10232 8.54231C1.8372 6.8385 2.83452 5.35644 4.09427 4.09612C5.35406 2.83577 6.83547 1.838 8.53851 1.1028C10.2415 0.367601 12.0612 0 13.9975 0C15.9339 0 17.7539 0.367441 19.4577 1.10232C21.1615 1.8372 22.6436 2.83452 23.9039 4.09427C25.1642 5.35406 26.162 6.83547 26.8972 8.53851C27.6324 10.2415 28 12.0612 28 13.9975C28 15.9339 27.6326 17.7539 26.8977 19.4577C26.1628 21.1615 25.1655 22.6436 23.9057 23.9039C22.6459 25.1642 21.1645 26.162 19.4615 26.8972C17.7585 27.6324 15.9388 28 14.0025 28Z",
                          fill: "#F4F4F5"
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                      className: "text-2xl mb-8",
                      children: "Export completed"
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                      className: "mb-6",
                      children: ["An archive ", /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                        className: "text-good",
                        children: fileName
                      }), " ", "with size", " ", /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                        className: "text-good",
                        children: exportedArchive.size
                      }), " ", "has been saved in your internal archives directory. Click", " ", /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                        className: "cursor-pointer",
                        onClick: function onClick() {
                          setExportingArchive(false);
                          setExportedArchive(null);
                          promptArchives();
                        },
                        children: "here"
                      }), " ", "to browse your archives. You can also download it below:"]
                    })]
                  }), exportedArchive === null && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "flex items-center flex-col justify-center text-center",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("img", {
                      className: "mb-4 inline",
                      alt: "informative",
                      src: "./assets/error.svg"
                    }), " ", /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                      className: "text-2xl mb-8",
                      children: "Please note"
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                      className: "mb-6",
                      children: "Only do this if you are an archive node."
                    })]
                  })]
                })
              })
            })]
          });
        };
        var ArchiveReset = function ArchiveReset() {
          var _reactExports$useCont27 = reactExports.useContext(appContext),
            displayHeaderBackButton = _reactExports$useCont27.displayBackButton,
            setBackButton = _reactExports$useCont27.setBackButton;
          var navigate = useNavigate();
          var _reactExports$useCont28 = reactExports.useContext(appContext),
            archives = _reactExports$useCont28.archives,
            getArchives = _reactExports$useCont28.getArchives,
            backups = _reactExports$useCont28.backups,
            shuttingDown = _reactExports$useCont28.shuttingDown;
          var _reactExports$useStat155 = reactExports.useState(false),
            _reactExports$useStat156 = _slicedToArray2(_reactExports$useStat155, 2),
            MDSShutdown = _reactExports$useStat156[0],
            setMDSShutdown = _reactExports$useStat156[1];
          var _reactExports$useStat157 = reactExports.useState(0),
            _reactExports$useStat158 = _slicedToArray2(_reactExports$useStat157, 2),
            progress = _reactExports$useStat158[0],
            setProgress = _reactExports$useStat158[1];
          var _reactExports$useStat159 = reactExports.useState(false),
            _reactExports$useStat160 = _slicedToArray2(_reactExports$useStat159, 2),
            fileUpload = _reactExports$useStat160[0],
            setFileUpload = _reactExports$useStat160[1];
          var _reactExports$useStat161 = reactExports.useState(0),
            _reactExports$useStat162 = _slicedToArray2(_reactExports$useStat161, 2),
            resetFileField = _reactExports$useStat162[0],
            setResetFileField = _reactExports$useStat162[1];
          var _reactExports$useStat163 = reactExports.useState(false),
            _reactExports$useStat164 = _slicedToArray2(_reactExports$useStat163, 2),
            beginRestoring = _reactExports$useStat164[0],
            setBeginRestoring = _reactExports$useStat164[1];
          var _reactExports$useStat165 = reactExports.useState(false),
            _reactExports$useStat166 = _slicedToArray2(_reactExports$useStat165, 2),
            error = _reactExports$useStat166[0],
            setError = _reactExports$useStat166[1];
          var _reactExports$useStat167 = reactExports.useState("local"),
            _reactExports$useStat168 = _slicedToArray2(_reactExports$useStat167, 2),
            archiveFileSelection = _reactExports$useStat168[0],
            setArchiveFileSelection = _reactExports$useStat168[1];
          var _reactExports$useStat169 = reactExports.useState(false),
            _reactExports$useStat170 = _slicedToArray2(_reactExports$useStat169, 2),
            haveArchive = _reactExports$useStat170[0],
            setHaveArchive = _reactExports$useStat170[1];
          var _reactExports$useStat171 = reactExports.useState(false),
            _reactExports$useStat172 = _slicedToArray2(_reactExports$useStat171, 2),
            backupSelect = _reactExports$useStat172[0],
            setBackupSelect = _reactExports$useStat172[1];
          var _reactExports$useStat173 = reactExports.useState(0),
            _reactExports$useStat174 = _slicedToArray2(_reactExports$useStat173, 2),
            backupSteps = _reactExports$useStat174[0],
            setBackupSteps = _reactExports$useStat174[1];
          var _reactExports$useStat175 = reactExports.useState(false),
            _reactExports$useStat176 = _slicedToArray2(_reactExports$useStat175, 2),
            hidePassword = _reactExports$useStat176[0],
            togglePasswordVisibility = _reactExports$useStat176[1];
          reactExports.useEffect(function () {
            if (shuttingDown) {
              setMDSShutdown(true);
            }
          }, [shuttingDown]);
          reactExports.useEffect(function () {
            setBackButton({
              display: true,
              onClickHandler: function onClickHandler() {
                return navigate("/dashboard/archivereset");
              },
              title: "Archive Reset"
            });
          }, []);
          var handleArchiveSelector = function handleArchiveSelector(event) {
            setArchiveFileSelection(event.target.value);
          };
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [haveArchive && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
                  validationSchema: validationSchema$1,
                  initialValues: {
                    file: "",
                    upload: null,
                    password: "",
                    backupfilepath: ""
                  },
                  onSubmit: function () {
                    var _onSubmit8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37(formData) {
                      var archivefilepath, backupfilepath, password, fullArchivePath;
                      return _regeneratorRuntime().wrap(function _callee37$(_context37) {
                        while (1) switch (_context37.prev = _context37.next) {
                          case 0:
                            setBeginRestoring(true);
                            _context37.prev = 1;
                            archivefilepath = formData.file, backupfilepath = formData.backupfilepath, password = formData.password;
                            _context37.next = 5;
                            return getPath(archivefilepath);
                          case 5:
                            fullArchivePath = _context37.sent;
                            _context37.next = 8;
                            return reset(fullArchivePath, backupfilepath, password).catch(function (error2) {
                              throw new Error(error2);
                            });
                          case 8:
                            _context37.next = 13;
                            break;
                          case 10:
                            _context37.prev = 10;
                            _context37.t0 = _context37["catch"](1);
                            setError(_context37.t0 instanceof Error ? _context37.t0.message : "An unexpected error occurred");
                          case 13:
                          case "end":
                            return _context37.stop();
                        }
                      }, _callee37, null, [[1, 10]]);
                    }));
                    function onSubmit(_x87) {
                      return _onSubmit8.apply(this, arguments);
                    }
                    return onSubmit;
                  }(),
                  children: function children(_ref83) {
                    var handleSubmit = _ref83.handleSubmit,
                      setFieldValue = _ref83.setFieldValue,
                      errors = _ref83.errors,
                      values = _ref83.values,
                      handleBlur = _ref83.handleBlur,
                      handleChange = _ref83.handleChange,
                      isValid = _ref83.isValid,
                      isSubmitting = _ref83.isSubmitting,
                      resetForm = _ref83.resetForm,
                      submitForm = _ref83.submitForm;
                    return /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                      onSubmit: handleSubmit,
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                        className: "text-2xl mb-8 text-center",
                        children: "Select an archive"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "mb-6 text-center",
                        children: "Select a local archive or upload a new one"
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "relative mb-4",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("select", {
                          disabled: fileUpload,
                          defaultValue: archiveFileSelection,
                          onChange: function onChange(e) {
                            handleArchiveSelector(e);
                            resetForm();
                          },
                          className: "p-4 bg-black hover:cursor-pointer rounded w-full hover:opacity-80",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("option", {
                            id: "value",
                            value: "local",
                            children: "Select an internal archive file"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("option", {
                            id: "split",
                            value: "upload",
                            children: "Upload an archive file"
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                          className: "my-auto absolute right-2 top-[12px]",
                          width: "32",
                          height: "33",
                          viewBox: "0 0 32 33",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                            id: "mask0_2226_53255",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "32",
                            height: "33",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                              y: "0.550781",
                              width: "32",
                              height: "32",
                              fill: "#D9D9D9"
                            })
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                            mask: "url(#mask0_2226_53255)",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M16.0004 20.6172L8.4668 13.0508L9.6668 11.8844L16.0004 18.2172L22.334 11.8844L23.534 13.0844L16.0004 20.6172Z",
                              fill: "#FaFaFF"
                            })
                          })]
                        })]
                      }), !backupSelect && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [archiveFileSelection === "local" && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx(List, {
                            disabled: archives.length === 0,
                            options: archives,
                            setForm: function setForm(option) {
                              if (option.length) {
                                setFieldValue("file", "/archives/" + option);
                              }
                            }
                          }), archives.length === 0 && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-sm mt-2 text-good",
                            children: "No archives found in your internal files. Upload a new one!"
                          })]
                        }), !fileUpload && archiveFileSelection === "upload" && !values.file.length && /* @__PURE__ */jsxRuntimeExports.jsx(FileChooser, {
                          disabled: isSubmitting,
                          keyValue: resetFileField,
                          handleEndIconClick: function handleEndIconClick() {
                            setResetFileField(function (prev) {
                              return prev + 1;
                            });
                            setFieldValue("upload", void 0);
                          },
                          error: errors.upload && errors.upload ? errors.upload : false,
                          extraClass: "core-grey-20",
                          accept: ".gzip,.dat",
                          onChange: function onChange(e) {
                            if (e.target.files) {
                              setFieldValue("upload", e.target.files[0]);
                            }
                          },
                          onBlur: handleBlur,
                          placeholder: "Select file",
                          type: "file",
                          id: "upload",
                          name: "upload",
                          endIcon: values.upload && /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            xmlns: "http://www.w3.org/2000/svg",
                            width: "25",
                            height: "24",
                            viewBox: "0 0 25 24",
                            fill: "none",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_645_17003",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "25",
                              height: "24",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                x: "0.5",
                                width: "24",
                                height: "24",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_645_17003)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                fill: "#91919D"
                              })
                            })]
                          })
                        }), fileUpload && archiveFileSelection === "upload" && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "core-black-contrast-2 h-[56px] rounded p-4 mt-4 relative",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                            className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black",
                            children: [(Number(progress) * 100).toFixed(0), "%"]
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                            className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                            style: {
                              transform: "scaleX(".concat(progress, ")"),
                              left: "-1px",
                              top: "-2px",
                              width: "calc(100% + 1px)"
                            }
                          })]
                        }), fileUpload && values.upload && /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-sm mt-2",
                          children: ["Uploading", " ", values.upload.name ? values.upload.name + "..." : ""]
                        }), !fileUpload && !!values.file.length && archiveFileSelection === "upload" && /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-sm text-good flex items-center mt-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                            xmlns: "http://www.w3.org/2000/svg",
                            height: "24",
                            viewBox: "0 -960 960 960",
                            width: "24",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              fill: "#4FE3C1",
                              d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                            })
                          }), values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]]
                        }), values.upload && /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                          children: !fileUpload && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            variant: "primary",
                            extraClass: "mt-4",
                            onClick: function () {
                              var _onClick7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {
                                return _regeneratorRuntime().wrap(function _callee39$(_context39) {
                                  while (1) switch (_context39.prev = _context39.next) {
                                    case 0:
                                      setFileUpload(true);
                                      setFieldValue("file", "");
                                      window.MDS.file.upload(values.upload, /*#__PURE__*/function () {
                                        var _ref84 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38(resp) {
                                          var fileName;
                                          return _regeneratorRuntime().wrap(function _callee38$(_context38) {
                                            while (1) switch (_context38.prev = _context38.next) {
                                              case 0:
                                                if (resp.allchunks >= 10) {
                                                  setProgress(resp.chunk / resp.allchunks);
                                                }
                                                fileName = resp.filename;
                                                if (resp.allchunks === resp.chunk) {
                                                  setFileUpload(false);
                                                  window.MDS.file.move("/fileupload/" + fileName, "/archives/" + fileName, function (resp2) {
                                                    if (resp2.status) {
                                                      setFieldValue("file", "/archives/" + fileName);
                                                      setFieldValue("upload", void 0);
                                                      setFileUpload(false);
                                                      getArchives();
                                                    }
                                                  });
                                                }
                                              case 3:
                                              case "end":
                                                return _context38.stop();
                                            }
                                          }, _callee38);
                                        }));
                                        return function (_x88) {
                                          return _ref84.apply(this, arguments);
                                        };
                                      }());
                                    case 3:
                                    case "end":
                                      return _context39.stop();
                                  }
                                }, _callee39);
                              }));
                              function onClick() {
                                return _onClick7.apply(this, arguments);
                              }
                              return onClick;
                            }(),
                            children: "Upload"
                          })
                        }), values.file && values.file.length > 0 && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          onClick: function onClick() {
                            return setBackupSelect(true);
                          },
                          variant: "primary",
                          extraClass: "mt-4",
                          children: "Continue"
                        }), !fileUpload && archiveFileSelection === "upload" && !!values.file.length && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          onClick: function onClick() {
                            return setFieldValue("file", "");
                          },
                          variant: "tertiary",
                          extraClass: "mt-4",
                          children: "Upload a different file"
                        })]
                      }), !!backupSelect && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [backupSteps === 0 && /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                          main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                            className: "flex flex-col items-center",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("img", {
                              className: "mb-4",
                              alt: "informative",
                              src: "./assets/error.svg"
                            }), " ", /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                              className: "text-2xl mb-8",
                              children: "Restore from backup"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                              className: "mb-6 text-center",
                              children: "Select a backup stored internally within the app or upload a new backup from an external location."
                            })]
                          }),
                          primary: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                              extraClass: "mb-4",
                              onClick: function onClick() {
                                setFieldValue("backupfilepath", "");
                                setBackupSteps(1);
                              },
                              children: "Select an internal backup"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                              onClick: function onClick() {
                                setFieldValue("backupfilepath", "");
                                setBackupSteps(2);
                              },
                              children: "Upload an external backup"
                            })]
                          }),
                          secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            variant: "tertiary",
                            onClick: function onClick() {
                              return setBackupSelect(false);
                            },
                            extraClass: "mt-4",
                            children: "Cancel"
                          })
                        }), backupSteps === 1 && /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                          main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                            className: "flex flex-col gap-4",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                              className: "text-2xl mb-4 text-center",
                              children: "Restore from backup"
                            }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                              className: "mb-12 text-center",
                              children: ["Once restored, the node will attempt to", " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " sync to the latest block, please be patient."]
                            }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                              children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                                className: "text-base pb-1",
                                children: "Archive file"
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                                className: "p-4 core-grey-20 rounded truncate whitespace-normal break-all  !bg-black text-good",
                                children: values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]
                              })]
                            }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                              children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                                className: "text-base pb-1",
                                children: "Backup file"
                              }), /* @__PURE__ */jsxRuntimeExports.jsx(List, {
                                options: backups,
                                setForm: function () {
                                  var _setForm3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40(option) {
                                    var fullPath;
                                    return _regeneratorRuntime().wrap(function _callee40$(_context40) {
                                      while (1) switch (_context40.prev = _context40.next) {
                                        case 0:
                                          if (!option.length) {
                                            _context40.next = 5;
                                            break;
                                          }
                                          _context40.next = 3;
                                          return getPath("/backups/" + option);
                                        case 3:
                                          fullPath = _context40.sent;
                                          setFieldValue("backupfilepath", fullPath);
                                        case 5:
                                        case "end":
                                          return _context40.stop();
                                      }
                                    }, _callee40);
                                  }));
                                  function setForm(_x89) {
                                    return _setForm3.apply(this, arguments);
                                  }
                                  return setForm;
                                }()
                              })]
                            }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                              disabled: isSubmitting,
                              error: errors.password ? errors.password : false,
                              autoComplete: "new-password",
                              onChange: handleChange,
                              onBlur: handleBlur,
                              placeholder: "Enter password",
                              handleEndIconClick: function handleEndIconClick() {
                                return togglePasswordVisibility(function (prevState) {
                                  return !prevState;
                                });
                              },
                              type: !hidePassword ? "password" : "text",
                              id: "password",
                              name: "password",
                              value: values.password,
                              endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                                toggle: hidePassword
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                              disabled: !isValid || isSubmitting,
                              onClick: submitForm,
                              children: "Restore"
                            })]
                          }),
                          primary: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {}),
                          secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            variant: "tertiary",
                            onClick: function onClick() {
                              return setBackupSteps(0);
                            },
                            extraClass: "mt-4",
                            children: "Cancel"
                          })
                        }), backupSteps === 2 && /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                          bg: "primary",
                          main: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                            children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                              children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                                className: "text-2xl mb-4 text-center",
                                children: "Restore from backup"
                              }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                                className: "mb-12 text-center",
                                children: ["Once restored, the node will attempt to", " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " sync to the latest block, please be patient."]
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                                className: "text-base pb-1",
                                children: "Archive file"
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                                className: "p-4 mb-4 core-grey-20 rounded truncate whitespace-normal break-all !bg-black text-good",
                                children: values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                                className: "text-base pb-1",
                                children: "Backup file"
                              }), /* @__PURE__ */jsxRuntimeExports.jsx(FileChooser, {
                                disabled: isSubmitting,
                                keyValue: resetFileField,
                                handleEndIconClick: function handleEndIconClick() {
                                  setResetFileField(function (prev) {
                                    return prev + 1;
                                  });
                                  setFieldValue("upload", void 0);
                                },
                                error: errors.file && errors.file ? errors.file : false,
                                extraClass: "core-grey-20",
                                accept: ".bak",
                                onChange: function onChange(e) {
                                  if (e.target.files) {
                                    setFieldValue("upload", e.target.files[0]);
                                    setFieldValue("backupfilepath", "");
                                  }
                                },
                                onBlur: handleBlur,
                                placeholder: "Select file",
                                type: "file",
                                id: "upload",
                                name: "upload",
                                endIcon: values.upload && /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                                  xmlns: "http://www.w3.org/2000/svg",
                                  width: "25",
                                  height: "24",
                                  viewBox: "0 0 25 24",
                                  fill: "none",
                                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                                    id: "mask0_645_17003",
                                    maskUnits: "userSpaceOnUse",
                                    x: "0",
                                    y: "0",
                                    width: "25",
                                    height: "24",
                                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                      x: "0.5",
                                      width: "24",
                                      height: "24",
                                      fill: "#D9D9D9"
                                    })
                                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                                    mask: "url(#mask0_645_17003)",
                                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                      d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                      fill: "#91919D"
                                    })
                                  })]
                                })
                              }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                                disabled: isSubmitting,
                                mb: "mb-4",
                                mt: "mt-4",
                                error: errors.password ? errors.password : false,
                                autoComplete: "new-password",
                                onChange: handleChange,
                                onBlur: handleBlur,
                                placeholder: "Enter password",
                                handleEndIconClick: function handleEndIconClick() {
                                  return togglePasswordVisibility(function (prevState) {
                                    return !prevState;
                                  });
                                },
                                type: !hidePassword ? "password" : "text",
                                id: "password",
                                name: "password",
                                value: values.password,
                                endIcon: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                                  toggle: hidePassword
                                })
                              }), /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                children: [values.backupfilepath.length > 0 && values.file.length > 0 && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                                  className: "flex gap-2 justify-center",
                                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                                    className: "mb-2 text-good text-center flex items-center justify-center gap-1",
                                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                                      xmlns: "http://www.w3.org/2000/svg",
                                      height: "24",
                                      viewBox: "0 -960 960 960",
                                      width: "24",
                                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                        fill: "#4FE3C1",
                                        d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                                      })
                                    }), "Archive ready!"]
                                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                                    className: "mb-2 text-good text-center flex items-center justify-center gap-1",
                                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                                      xmlns: "http://www.w3.org/2000/svg",
                                      height: "24",
                                      viewBox: "0 -960 960 960",
                                      width: "24",
                                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                        fill: "#4FE3C1",
                                        d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                                      })
                                    }), "Backup ready!"]
                                  })]
                                }), values.backupfilepath.length > 0 && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                                  type: "submit",
                                  disabled: !isValid || isSubmitting,
                                  children: "Restore"
                                }), values.backupfilepath.length === 0 && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                                  disabled: fileUpload || !values.upload,
                                  onClick: function () {
                                    var _onClick8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {
                                      var arrayBuffer, hex, fullPath;
                                      return _regeneratorRuntime().wrap(function _callee41$(_context41) {
                                        while (1) switch (_context41.prev = _context41.next) {
                                          case 0:
                                            setFileUpload(true);
                                            _context41.prev = 1;
                                            _context41.next = 4;
                                            return blobToArrayBuffer(values.upload);
                                          case 4:
                                            arrayBuffer = _context41.sent;
                                            hex = bufferToHex(arrayBuffer);
                                            _context41.next = 8;
                                            return saveFileAsBinary("/backups/" + values.upload.name, hex);
                                          case 8:
                                            _context41.next = 10;
                                            return getPath("/backups/" + values.upload.name);
                                          case 10:
                                            fullPath = _context41.sent;
                                            setFieldValue("upload", null);
                                            setFieldValue("backupfilepath", fullPath);
                                            _context41.next = 18;
                                            break;
                                          case 15:
                                            _context41.prev = 15;
                                            _context41.t0 = _context41["catch"](1);
                                            setError(_context41.t0);
                                          case 18:
                                            _context41.prev = 18;
                                            setFileUpload(false);
                                            return _context41.finish(18);
                                          case 21:
                                          case "end":
                                            return _context41.stop();
                                        }
                                      }, _callee41, null, [[1, 15, 18, 21]]);
                                    }));
                                    function onClick() {
                                      return _onClick8.apply(this, arguments);
                                    }
                                    return onClick;
                                  }(),
                                  children: fileUpload ? "Upload..." : "Upload"
                                })]
                              })]
                            })
                          }),
                          primary: null,
                          secondary: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                            children: !beginRestoring && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                              variant: "tertiary",
                              extraClass: "mt-2",
                              onClick: function onClick() {
                                return setBackupSteps(0);
                              },
                              children: "Cancel"
                            })
                          })
                        })]
                      })]
                    });
                  }
                })
              }),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [error && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  onClick: function onClick() {
                    setError(false);
                    setBeginRestoring(false);
                  },
                  children: "Cancel"
                }), !fileUpload && !error && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  extraClass: "mt-4",
                  onClick: function onClick() {
                    return setHaveArchive(false);
                  },
                  children: "Cancel"
                })]
              })
            }), document.body), error && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                    id: "mask0_594_13339",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "64",
                    height: "64",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                      width: "64",
                      height: "64",
                      fill: "#D9D9D9"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                    mask: "url(#mask0_594_13339)",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                      fill: "#F4F4F5"
                    })
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-8 text-center",
                  children: "Hmm.. something went wrong."
                }), typeof error === "string" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                  children: typeof error.includes !== "undefined" && error.toString().includes("GZIP") ? "Invalid password." : typeof error.includes !== "undefined" && error.toString().includes("connectdata") ? "Host is invalid." : typeof error.includes !== "undefined" && error.toString().includes("Incorrect Password!") ? "Incorrect password!" : error.toString()
                }), _typeof2(error) === "object" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                  children: JSON.stringify(error)
                })]
              }),
              primary: null,
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "tertiary",
                onClick: function onClick() {
                  setError(false);
                  setBeginRestoring(false);
                },
                children: "Cancel"
              })
            }), document.body), beginRestoring && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              size: "lg",
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col align-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx(Lottie, {
                  className: "mb-4 inline",
                  width: 4,
                  height: 4,
                  style: {
                    maxWidth: 80,
                    alignSelf: "center"
                  },
                  animationData: Loading
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-8 text-center",
                  children: "Restoring"
                }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                  className: "mb-8 text-center",
                  children: ["Please don’t leave this screen whilst the chain is re-syncing.", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Your node will shutdown once it is complete."]
                }), /* @__PURE__ */jsxRuntimeExports.jsx(Logs, {})]
              }),
              primary: null,
              secondary: null
            }), document.body), /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
              isOpen: true,
              delay: 0,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "flex flex-col h-full bg-black px-4 pb-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col h-full",
                  children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                    to: -1,
                    title: "Back"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mt-6 text-2xl mb-8 text-left",
                    children: "Restore"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mb-4",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "mb-3 text-left",
                      children: ["If you have lost access to your node or started a new node, you can restore your wallet from a backup. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " You will need:", /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside mb-4",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          className: "pt-4 pl-2.5",
                          children: "Upload an archive file (.gzip/.dat)"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          className: "pl-2.5",
                          children: "Upload your backup file (.bak) and provide the password if applicable"
                        })]
                      }), "The archive file will be used to sync your node to the chain's top block and must be recently extracted from an archive node."]
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "text-left flex gap-2 mb-8",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                      className: "flex-none w-7",
                      xmlns: "http://www.w3.org/2000/svg",
                      width: "48",
                      height: "24",
                      viewBox: "0 0 24 24",
                      fill: "none",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("circle", {
                        cx: "12",
                        cy: "12",
                        r: "8",
                        fill: "#08090B"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                        id: "mask0_1607_18879",
                        maskUnits: "userSpaceOnUse",
                        x: "0",
                        y: "0",
                        width: "24",
                        height: "24",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                          width: "24",
                          height: "24",
                          fill: "#D9D9D9"
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                        mask: "url(#mask0_1607_18879)",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M12 16.7307C12.2288 16.7307 12.4207 16.6533 12.5755 16.4985C12.7303 16.3437 12.8077 16.1519 12.8077 15.9231C12.8077 15.6942 12.7303 15.5024 12.5755 15.3476C12.4207 15.1928 12.2288 15.1154 12 15.1154C11.7711 15.1154 11.5793 15.1928 11.4245 15.3476C11.2697 15.5024 11.1923 15.6942 11.1923 15.9231C11.1923 16.1519 11.2697 16.3437 11.4245 16.4985C11.5793 16.6533 11.7711 16.7307 12 16.7307ZM11.25 13.0769H12.75V7.0769H11.25V13.0769ZM12.0017 21.5C10.6877 21.5 9.45268 21.2506 8.29655 20.752C7.1404 20.2533 6.13472 19.5765 5.2795 18.7217C4.42427 17.8669 3.74721 16.8616 3.24833 15.706C2.74944 14.5504 2.5 13.3156 2.5 12.0017C2.5 10.6877 2.74933 9.45268 3.248 8.29655C3.74667 7.1404 4.42342 6.13472 5.27825 5.2795C6.1331 4.42427 7.13834 3.74721 8.29398 3.24833C9.44959 2.74944 10.6844 2.5 11.9983 2.5C13.3122 2.5 14.5473 2.74933 15.7034 3.248C16.8596 3.74667 17.8652 4.42342 18.7205 5.27825C19.5757 6.1331 20.2527 7.13834 20.7516 8.29398C21.2505 9.44959 21.5 10.6844 21.5 11.9983C21.5 13.3122 21.2506 14.5473 20.752 15.7034C20.2533 16.8596 19.5765 17.8652 18.7217 18.7205C17.8669 19.5757 16.8616 20.2527 15.706 20.7516C14.5504 21.2505 13.3156 21.5 12.0017 21.5Z",
                          fill: "#E9E9EB"
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                      className: "text-sm password-label",
                      children: ["If you don't have an archive file, you can visit the archive file channel on our Discord server", " ", /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                        target: "_blank",
                        href: "https://discord.com/invite/minima",
                        children: "https://discord.com/invite/minima"
                      })]
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    extraClass: "mb-4",
                    onClick: function onClick() {
                      return setHaveArchive(true);
                    },
                    children: "I have an archive file"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    variant: "tertiary",
                    onClick: function onClick() {
                      return navigate("/dashboard/restore");
                    },
                    children: "I don't have an archive file"
                  })]
                })
              })
            }), MDSShutdown && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              bg: "primary",
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center justify-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                    id: "mask0_1102_25908",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "64",
                    height: "64",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                      width: "64",
                      height: "64",
                      fill: "#D9D9D9"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                    mask: "url(#mask0_1102_25908)",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                      fill: "#F4F4F5"
                    })
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-4 font-semibold text-center",
                  children: "Re-sync complete"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "font-medium mb-6 mt-6 text-center",
                  children: "Your node was successfully re-synced and will shutdown. Restart Minima for the re-sync to take effect."
                })]
              }),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "primary",
                onClick: function onClick() {
                  if (window.navigator.userAgent.includes("Minima Browser")) {
                    return Android.shutdownMinima();
                  }
                  return window.close();
                },
                children: "Close application"
              })
            }), document.body)]
          });
        };
        var validationSchema$1 = create$3().shape({
          backupfilepath: create$8().required("Please select a (.bak) file").test("Test extension", function (val) {
            var path = this.path,
              createError = this.createError;
            var re = /(?:\.([^.]+))?$/;
            if (val === void 0 || val === null || val.length === 0) {
              return createError({
                path: "file",
                message: "Please select a valid (.bak) file"
              });
            }
            if (val && val.name && typeof val.name === "string") {
              var extension = re.exec(val.name);
              if (extension && typeof extension[1] === "string" && extension[1] !== "bak") {
                return createError({
                  path: path,
                  message: "Please select a valid file extension type."
                });
              }
            }
            return true;
          }),
          password: create$6()
        });
        var grid = "_grid_1mjka_1";
        var full = "_full_1mjka_27";
        var styles = {
          grid: grid,
          full: full
        };
        var Grid = function Grid(_ref85) {
          var header = _ref85.header,
            content = _ref85.content,
            _ref85$fullHeight = _ref85.fullHeight,
            fullHeight = _ref85$fullHeight === void 0 ? false : _ref85$fullHeight;
          var height = useGetInnerHeight();
          var openTitleBar = useCanUseTitleBar();
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: styles["grid"],
            style: {
              height: "".concat(height, "px")
            },
            children: [header && /* @__PURE__ */jsxRuntimeExports.jsx("header", {
              onClick: openTitleBar,
              children: header
            }), /* @__PURE__ */jsxRuntimeExports.jsx("main", {
              children: /* @__PURE__ */jsxRuntimeExports.jsx("section", {
                className: fullHeight ? "!h-screen" : "",
                children: content
              })
            })]
          });
        };
        var Uploading = function Uploading() {
          var inputRef = reactExports.useRef(null);
          var location = useLocation();
          var navigate = useNavigate();
          var _useAuth7 = useAuth(),
            authNavigate = _useAuth7.authNavigate;
          var _reactExports$useStat177 = reactExports.useState(false),
            _reactExports$useStat178 = _slicedToArray2(_reactExports$useStat177, 2),
            error = _reactExports$useStat178[0],
            setError = _reactExports$useStat178[1];
          var _reactExports$useStat179 = reactExports.useState(0),
            _reactExports$useStat180 = _slicedToArray2(_reactExports$useStat179, 2),
            progress = _reactExports$useStat180[0],
            setProgress = _reactExports$useStat180[1];
          var _reactExports$useStat181 = reactExports.useState(false),
            _reactExports$useStat182 = _slicedToArray2(_reactExports$useStat181, 2),
            uploading = _reactExports$useStat182[0],
            setUploading = _reactExports$useStat182[1];
          var _useArchiveContext = useArchiveContext(),
            context = _useArchiveContext.context,
            resetArchiveContext = _useArchiveContext.resetArchiveContext,
            handleArchivePathContext = _useArchiveContext.handleArchivePathContext,
            archivePathToResetWith = _useArchiveContext.archivePathToResetWith,
            archiveFileToUpload = _useArchiveContext.archiveFileToUpload;
          var _reactExports$useCont29 = reactExports.useContext(appContext),
            getArchives = _reactExports$useCont29.getArchives;
          reactExports.useEffect(function () {
            if (archiveFileToUpload) {
              handleFileUpload(archiveFileToUpload);
            }
          }, [location, archiveFileToUpload]);
          var handleFileUpload = function handleFileUpload(file) {
            setUploading(true);
            try {
              window.MDS.file.upload(file, /*#__PURE__*/function () {
                var _ref86 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42(resp) {
                  var fileName;
                  return _regeneratorRuntime().wrap(function _callee42$(_context42) {
                    while (1) switch (_context42.prev = _context42.next) {
                      case 0:
                        if (resp.allchunks >= 10) {
                          setProgress(resp.chunk / resp.allchunks);
                        }
                        fileName = resp.filename;
                        if (resp.allchunks === resp.chunk) {
                          setUploading(false);
                          window.MDS.file.move("/fileupload/" + fileName, "/archives/" + fileName, function (resp2) {
                            if (resp2.status) {
                              handleArchivePathContext("/archives/" + fileName, location.state && location.state.context ? location.state.context : null);
                              getArchives();
                            }
                          });
                        }
                      case 3:
                      case "end":
                        return _context42.stop();
                    }
                  }, _callee42);
                }));
                return function (_x90) {
                  return _ref86.apply(this, arguments);
                };
              }());
            } catch (error2) {
              console.error(error2);
              setError(error2);
              setUploading(false);
            }
          };
          return /* @__PURE__ */jsxRuntimeExports.jsx(Grid, {
            header: null,
            content: /* @__PURE__ */jsxRuntimeExports.jsx(CommonDialogLayout, {
              status: void 0,
              primaryActions: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [location.state && !location.state.justUploading && !uploading && !error && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  onClick: function () {
                    var _onClick9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {
                      return _regeneratorRuntime().wrap(function _callee43$(_context43) {
                        while (1) switch (_context43.prev = _context43.next) {
                          case 0:
                            if (context === "restore") {
                              authNavigate("/dashboard/restore/frombackup", [PERMISSIONS.CAN_VIEW_RESTORE]);
                            }
                            if (!(context === "chainresync")) {
                              _context43.next = 5;
                              break;
                            }
                            authNavigate("/dashboard/resyncing", [PERMISSIONS.CAN_VIEW_RESYNCING]);
                            _context43.next = 5;
                            return resetChainResync(archivePathToResetWith).catch(function (error2) {
                              authNavigate("/dashboard/resyncing", [PERMISSIONS.CAN_VIEW_RESYNCING], {
                                state: {
                                  error: error2 ? error2 : "Something went wrong, please try again."
                                }
                              });
                            });
                          case 5:
                            if (context === "seedresync") {
                              authNavigate("/dashboard/manageseedphrase/importseedphrase", [PERMISSIONS.CAN_VIEW_IMPORTSEEDPHRASE], {
                                state: {
                                  seedresync: true
                                }
                              });
                            }
                          case 6:
                          case "end":
                            return _context43.stop();
                        }
                      }, _callee43);
                    }));
                    function onClick() {
                      return _onClick9.apply(this, arguments);
                    }
                    return onClick;
                  }(),
                  children: "Continue"
                }), !uploading && error && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("input", {
                    accept: ".gzip",
                    className: "hidden",
                    type: "file",
                    ref: inputRef,
                    onChange: function onChange(e) {
                      var file = e.target.files ? e.target.files[0] : null;
                      if (file) {
                        setError(false);
                        handleFileUpload(file);
                        authNavigate("/upload", [PERMISSIONS["CAN_VIEW_UPLOADING"]], location.state);
                      }
                    }
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    extraClass: "mt-4",
                    onClick: function onClick() {
                      var _inputRef$current;
                      return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click();
                    },
                    children: "Upload a different file"
                  })]
                })]
              }),
              secondaryActions: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: !uploading && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  onClick: function onClick() {
                    if (location.state && location.state.justUploading) {
                      return navigate(-1);
                    }
                    resetArchiveContext();
                    navigate("/dashboard/archivereset");
                  },
                  children: "Cancel"
                })
              }),
              content: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "grid h-full",
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "flex w-full justify-between px-2 py-2",
                      children: [!!uploading && /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                        className: "text-2xl",
                        children: "Uploading file..."
                      }), !uploading && /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                        className: "text-2xl",
                        children: "Upload complete"
                      }), !!uploading && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "col-span-1 flex justify-end",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          children: /* @__PURE__ */jsxRuntimeExports.jsx(Lottie, {
                            className: "mb-4",
                            style: {
                              width: 32,
                              height: 32,
                              alignSelf: "center"
                            },
                            animationData: Loading
                          })
                        })
                      }), !uploading && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "col-span-1 flex justify-end",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          children: /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            xmlns: "http://www.w3.org/2000/svg",
                            width: "28",
                            height: "28",
                            viewBox: "0 0 28 28",
                            fill: "none",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_1546_39369",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "28",
                              height: "28",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                width: "28",
                                height: "28",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_1546_39369)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M11.9085 20.2688L21.8162 10.3611L20.2632 8.80812L11.9085 17.1628L7.70849 12.9628L6.15548 14.5158L11.9085 20.2688ZM14.0025 28C12.0661 28 10.2461 27.6326 8.54231 26.8977C6.8385 26.1628 5.35644 25.1655 4.09612 23.9057C2.83577 22.6459 1.838 21.1645 1.1028 19.4615C0.367599 17.7585 0 15.9388 0 14.0025C0 12.0661 0.36744 10.2461 1.10232 8.54231C1.8372 6.8385 2.83452 5.35644 4.09427 4.09612C5.35406 2.83577 6.83547 1.838 8.53851 1.1028C10.2415 0.367601 12.0612 0 13.9975 0C15.9339 0 17.7539 0.367441 19.4577 1.10232C21.1615 1.8372 22.6436 2.83452 23.9039 4.09427C25.1642 5.35406 26.162 6.83547 26.8972 8.53851C27.6324 10.2415 28 12.0612 28 13.9975C28 15.9339 27.6326 17.7539 26.8977 19.4577C26.1628 21.1615 25.1655 22.6436 23.9057 23.9039C22.6459 25.1642 21.1645 26.162 19.4615 26.8972C17.7585 27.6324 15.9388 28 14.0025 28Z",
                                fill: "#F4F4F5"
                              })
                            })]
                          })
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "break-all w-full p-4 text-white mt-4 text-left core-black-contrast-2 rounded mb-4 ".concat(error ? "upload-error" : ""),
                      children: archiveFileToUpload ? archiveFileToUpload.name : "N/A"
                    }), uploading && !!progress && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "core-black-contrast-2 h-[56px] rounded p-4 mt-6 mb-8 relative",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black",
                        children: [(Number(progress) * 100).toFixed(0), "%"]
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                        style: {
                          transform: "scaleX(".concat(progress, ")"),
                          left: "-1px",
                          top: "-2px",
                          width: "calc(100% + 1px)"
                        }
                      })]
                    }), !uploading && error && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "px-4 py-3 mb-4 rounded flex  gap-4 form-error-box",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                        className: "flex-none",
                        width: "20",
                        height: "20",
                        viewBox: "0 0 20 20",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M6.4 15L10 11.4L13.6 15L15 13.6L11.4 10L15 6.4L13.6 5L10 8.6L6.4 5L5 6.4L8.6 10L5 13.6L6.4 15ZM10 20C8.61667 20 7.31667 19.7375 6.1 19.2125C4.88333 18.6875 3.825 17.975 2.925 17.075C2.025 16.175 1.3125 15.1167 0.7875 13.9C0.2625 12.6833 0 11.3833 0 10C0 8.61667 0.2625 7.31667 0.7875 6.1C1.3125 4.88333 2.025 3.825 2.925 2.925C3.825 2.025 4.88333 1.3125 6.1 0.7875C7.31667 0.2625 8.61667 0 10 0C11.3833 0 12.6833 0.2625 13.9 0.7875C15.1167 1.3125 16.175 2.025 17.075 2.925C17.975 3.825 18.6875 4.88333 19.2125 6.1C19.7375 7.31667 20 8.61667 20 10C20 11.3833 19.7375 12.6833 19.2125 13.9C18.6875 15.1167 17.975 16.175 17.075 17.075C16.175 17.975 15.1167 18.6875 13.9 19.2125C12.6833 19.7375 11.3833 20 10 20Z",
                          fill: "#FF627E"
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "text-sm text-left my-auto text-black",
                        children: "This archive file contains errors, please use another file."
                      })]
                    })]
                  })
                })
              })
            })
          });
        };
        var bip39 = ["ABANDON", "ABILITY", "ABLE", "ABOUT", "ABOVE", "ABSENT", "ABSORB", "ABSTRACT", "ABSURD", "ABUSE", "ACCESS", "ACCIDENT", "ACCOUNT", "ACCUSE", "ACHIEVE", "ACID", "ACOUSTIC", "ACQUIRE", "ACROSS", "ACT", "ACTION", "ACTOR", "ACTRESS", "ACTUAL", "ADAPT", "ADD", "ADDICT", "ADDRESS", "ADJUST", "ADMIT", "ADULT", "ADVANCE", "ADVICE", "AEROBIC", "AFFAIR", "AFFORD", "AFRAID", "AGAIN", "AGE", "AGENT", "AGREE", "AHEAD", "AIM", "AIR", "AIRPORT", "AISLE", "ALARM", "ALBUM", "ALCOHOL", "ALERT", "ALIEN", "ALL", "ALLEY", "ALLOW", "ALMOST", "ALONE", "ALPHA", "ALREADY", "ALSO", "ALTER", "ALWAYS", "AMATEUR", "AMAZING", "AMONG", "AMOUNT", "AMUSED", "ANALYST", "ANCHOR", "ANCIENT", "ANGER", "ANGLE", "ANGRY", "ANIMAL", "ANKLE", "ANNOUNCE", "ANNUAL", "ANOTHER", "ANSWER", "ANTENNA", "ANTIQUE", "ANXIETY", "ANY", "APART", "APOLOGY", "APPEAR", "APPLE", "APPROVE", "APRIL", "ARCH", "ARCTIC", "AREA", "ARENA", "ARGUE", "ARM", "ARMED", "ARMOR", "ARMY", "AROUND", "ARRANGE", "ARREST", "ARRIVE", "ARROW", "ART", "ARTEFACT", "ARTIST", "ARTWORK", "ASK", "ASPECT", "ASSAULT", "ASSET", "ASSIST", "ASSUME", "ASTHMA", "ATHLETE", "ATOM", "ATTACK", "ATTEND", "ATTITUDE", "ATTRACT", "AUCTION", "AUDIT", "AUGUST", "AUNT", "AUTHOR", "AUTO", "AUTUMN", "AVERAGE", "AVOCADO", "AVOID", "AWAKE", "AWARE", "AWAY", "AWESOME", "AWFUL", "AWKWARD", "AXIS", "BABY", "BACHELOR", "BACON", "BADGE", "BAG", "BALANCE", "BALCONY", "BALL", "BAMBOO", "BANANA", "BANNER", "BAR", "BARELY", "BARGAIN", "BARREL", "BASE", "BASIC", "BASKET", "BATTLE", "BEACH", "BEAN", "BEAUTY", "BECAUSE", "BECOME", "BEEF", "BEFORE", "BEGIN", "BEHAVE", "BEHIND", "BELIEVE", "BELOW", "BELT", "BENCH", "BENEFIT", "BEST", "BETRAY", "BETTER", "BETWEEN", "BEYOND", "BICYCLE", "BID", "BIKE", "BIND", "BIOLOGY", "BIRD", "BIRTH", "BITTER", "BLACK", "BLADE", "BLAME", "BLANKET", "BLAST", "BLEAK", "BLESS", "BLIND", "BLOOD", "BLOSSOM", "BLOUSE", "BLUE", "BLUR", "BLUSH", "BOARD", "BOAT", "BODY", "BOIL", "BOMB", "BONE", "BONUS", "BOOK", "BOOST", "BORDER", "BORING", "BORROW", "BOSS", "BOTTOM", "BOUNCE", "BOX", "BOY", "BRACKET", "BRAIN", "BRAND", "BRASS", "BRAVE", "BREAD", "BREEZE", "BRICK", "BRIDGE", "BRIEF", "BRIGHT", "BRING", "BRISK", "BROCCOLI", "BROKEN", "BRONZE", "BROOM", "BROTHER", "BROWN", "BRUSH", "BUBBLE", "BUDDY", "BUDGET", "BUFFALO", "BUILD", "BULB", "BULK", "BULLET", "BUNDLE", "BUNKER", "BURDEN", "BURGER", "BURST", "BUS", "BUSINESS", "BUSY", "BUTTER", "BUYER", "BUZZ", "CABBAGE", "CABIN", "CABLE", "CACTUS", "CAGE", "CAKE", "CALL", "CALM", "CAMERA", "CAMP", "CAN", "CANAL", "CANCEL", "CANDY", "CANNON", "CANOE", "CANVAS", "CANYON", "CAPABLE", "CAPITAL", "CAPTAIN", "CAR", "CARBON", "CARD", "CARGO", "CARPET", "CARRY", "CART", "CASE", "CASH", "CASINO", "CASTLE", "CASUAL", "CAT", "CATALOG", "CATCH", "CATEGORY", "CATTLE", "CAUGHT", "CAUSE", "CAUTION", "CAVE", "CEILING", "CELERY", "CEMENT", "CENSUS", "CENTURY", "CEREAL", "CERTAIN", "CHAIR", "CHALK", "CHAMPION", "CHANGE", "CHAOS", "CHAPTER", "CHARGE", "CHASE", "CHAT", "CHEAP", "CHECK", "CHEESE", "CHEF", "CHERRY", "CHEST", "CHICKEN", "CHIEF", "CHILD", "CHIMNEY", "CHOICE", "CHOOSE", "CHRONIC", "CHUCKLE", "CHUNK", "CHURN", "CIGAR", "CINNAMON", "CIRCLE", "CITIZEN", "CITY", "CIVIL", "CLAIM", "CLAP", "CLARIFY", "CLAW", "CLAY", "CLEAN", "CLERK", "CLEVER", "CLICK", "CLIENT", "CLIFF", "CLIMB", "CLINIC", "CLIP", "CLOCK", "CLOG", "CLOSE", "CLOTH", "CLOUD", "CLOWN", "CLUB", "CLUMP", "CLUSTER", "CLUTCH", "COACH", "COAST", "COCONUT", "CODE", "COFFEE", "COIL", "COIN", "COLLECT", "COLOR", "COLUMN", "COMBINE", "COME", "COMFORT", "COMIC", "COMMON", "COMPANY", "CONCERT", "CONDUCT", "CONFIRM", "CONGRESS", "CONNECT", "CONSIDER", "CONTROL", "CONVINCE", "COOK", "COOL", "COPPER", "COPY", "CORAL", "CORE", "CORN", "CORRECT", "COST", "COTTON", "COUCH", "COUNTRY", "COUPLE", "COURSE", "COUSIN", "COVER", "COYOTE", "CRACK", "CRADLE", "CRAFT", "CRAM", "CRANE", "CRASH", "CRATER", "CRAWL", "CRAZY", "CREAM", "CREDIT", "CREEK", "CREW", "CRICKET", "CRIME", "CRISP", "CRITIC", "CROP", "CROSS", "CROUCH", "CROWD", "CRUCIAL", "CRUEL", "CRUISE", "CRUMBLE", "CRUNCH", "CRUSH", "CRY", "CRYSTAL", "CUBE", "CULTURE", "CUP", "CUPBOARD", "CURIOUS", "CURRENT", "CURTAIN", "CURVE", "CUSHION", "CUSTOM", "CUTE", "CYCLE", "DAD", "DAMAGE", "DAMP", "DANCE", "DANGER", "DARING", "DASH", "DAUGHTER", "DAWN", "DAY", "DEAL", "DEBATE", "DEBRIS", "DECADE", "DECEMBER", "DECIDE", "DECLINE", "DECORATE", "DECREASE", "DEER", "DEFENSE", "DEFINE", "DEFY", "DEGREE", "DELAY", "DELIVER", "DEMAND", "DEMISE", "DENIAL", "DENTIST", "DENY", "DEPART", "DEPEND", "DEPOSIT", "DEPTH", "DEPUTY", "DERIVE", "DESCRIBE", "DESERT", "DESIGN", "DESK", "DESPAIR", "DESTROY", "DETAIL", "DETECT", "DEVELOP", "DEVICE", "DEVOTE", "DIAGRAM", "DIAL", "DIAMOND", "DIARY", "DICE", "DIESEL", "DIET", "DIFFER", "DIGITAL", "DIGNITY", "DILEMMA", "DINNER", "DINOSAUR", "DIRECT", "DIRT", "DISAGREE", "DISCOVER", "DISEASE", "DISH", "DISMISS", "DISORDER", "DISPLAY", "DISTANCE", "DIVERT", "DIVIDE", "DIVORCE", "DIZZY", "DOCTOR", "DOCUMENT", "DOG", "DOLL", "DOLPHIN", "DOMAIN", "DONATE", "DONKEY", "DONOR", "DOOR", "DOSE", "DOUBLE", "DOVE", "DRAFT", "DRAGON", "DRAMA", "DRASTIC", "DRAW", "DREAM", "DRESS", "DRIFT", "DRILL", "DRINK", "DRIP", "DRIVE", "DROP", "DRUM", "DRY", "DUCK", "DUMB", "DUNE", "DURING", "DUST", "DUTCH", "DUTY", "DWARF", "DYNAMIC", "EAGER", "EAGLE", "EARLY", "EARN", "EARTH", "EASILY", "EAST", "EASY", "ECHO", "ECOLOGY", "ECONOMY", "EDGE", "EDIT", "EDUCATE", "EFFORT", "EGG", "EIGHT", "EITHER", "ELBOW", "ELDER", "ELECTRIC", "ELEGANT", "ELEMENT", "ELEPHANT", "ELEVATOR", "ELITE", "ELSE", "EMBARK", "EMBODY", "EMBRACE", "EMERGE", "EMOTION", "EMPLOY", "EMPOWER", "EMPTY", "ENABLE", "ENACT", "END", "ENDLESS", "ENDORSE", "ENEMY", "ENERGY", "ENFORCE", "ENGAGE", "ENGINE", "ENHANCE", "ENJOY", "ENLIST", "ENOUGH", "ENRICH", "ENROLL", "ENSURE", "ENTER", "ENTIRE", "ENTRY", "ENVELOPE", "EPISODE", "EQUAL", "EQUIP", "ERA", "ERASE", "ERODE", "EROSION", "ERROR", "ERUPT", "ESCAPE", "ESSAY", "ESSENCE", "ESTATE", "ETERNAL", "ETHICS", "EVIDENCE", "EVIL", "EVOKE", "EVOLVE", "EXACT", "EXAMPLE", "EXCESS", "EXCHANGE", "EXCITE", "EXCLUDE", "EXCUSE", "EXECUTE", "EXERCISE", "EXHAUST", "EXHIBIT", "EXILE", "EXIST", "EXIT", "EXOTIC", "EXPAND", "EXPECT", "EXPIRE", "EXPLAIN", "EXPOSE", "EXPRESS", "EXTEND", "EXTRA", "EYE", "EYEBROW", "FABRIC", "FACE", "FACULTY", "FADE", "FAINT", "FAITH", "FALL", "FALSE", "FAME", "FAMILY", "FAMOUS", "FAN", "FANCY", "FANTASY", "FARM", "FASHION", "FAT", "FATAL", "FATHER", "FATIGUE", "FAULT", "FAVORITE", "FEATURE", "FEBRUARY", "FEDERAL", "FEE", "FEED", "FEEL", "FEMALE", "FENCE", "FESTIVAL", "FETCH", "FEVER", "FEW", "FIBER", "FICTION", "FIELD", "FIGURE", "FILE", "FILM", "FILTER", "FINAL", "FIND", "FINE", "FINGER", "FINISH", "FIRE", "FIRM", "FIRST", "FISCAL", "FISH", "FIT", "FITNESS", "FIX", "FLAG", "FLAME", "FLASH", "FLAT", "FLAVOR", "FLEE", "FLIGHT", "FLIP", "FLOAT", "FLOCK", "FLOOR", "FLOWER", "FLUID", "FLUSH", "FLY", "FOAM", "FOCUS", "FOG", "FOIL", "FOLD", "FOLLOW", "FOOD", "FOOT", "FORCE", "FOREST", "FORGET", "FORK", "FORTUNE", "FORUM", "FORWARD", "FOSSIL", "FOSTER", "FOUND", "FOX", "FRAGILE", "FRAME", "FREQUENT", "FRESH", "FRIEND", "FRINGE", "FROG", "FRONT", "FROST", "FROWN", "FROZEN", "FRUIT", "FUEL", "FUN", "FUNNY", "FURNACE", "FURY", "FUTURE", "GADGET", "GAIN", "GALAXY", "GALLERY", "GAME", "GAP", "GARAGE", "GARBAGE", "GARDEN", "GARLIC", "GARMENT", "GAS", "GASP", "GATE", "GATHER", "GAUGE", "GAZE", "GENERAL", "GENIUS", "GENRE", "GENTLE", "GENUINE", "GESTURE", "GHOST", "GIANT", "GIFT", "GIGGLE", "GINGER", "GIRAFFE", "GIRL", "GIVE", "GLAD", "GLANCE", "GLARE", "GLASS", "GLIDE", "GLIMPSE", "GLOBE", "GLOOM", "GLORY", "GLOVE", "GLOW", "GLUE", "GOAT", "GODDESS", "GOLD", "GOOD", "GOOSE", "GORILLA", "GOSPEL", "GOSSIP", "GOVERN", "GOWN", "GRAB", "GRACE", "GRAIN", "GRANT", "GRAPE", "GRASS", "GRAVITY", "GREAT", "GREEN", "GRID", "GRIEF", "GRIT", "GROCERY", "GROUP", "GROW", "GRUNT", "GUARD", "GUESS", "GUIDE", "GUILT", "GUITAR", "GUN", "GYM", "HABIT", "HAIR", "HALF", "HAMMER", "HAMSTER", "HAND", "HAPPY", "HARBOR", "HARD", "HARSH", "HARVEST", "HAT", "HAVE", "HAWK", "HAZARD", "HEAD", "HEALTH", "HEART", "HEAVY", "HEDGEHOG", "HEIGHT", "HELLO", "HELMET", "HELP", "HEN", "HERO", "HIDDEN", "HIGH", "HILL", "HINT", "HIP", "HIRE", "HISTORY", "HOBBY", "HOCKEY", "HOLD", "HOLE", "HOLIDAY", "HOLLOW", "HOME", "HONEY", "HOOD", "HOPE", "HORN", "HORROR", "HORSE", "HOSPITAL", "HOST", "HOTEL", "HOUR", "HOVER", "HUB", "HUGE", "HUMAN", "HUMBLE", "HUMOR", "HUNDRED", "HUNGRY", "HUNT", "HURDLE", "HURRY", "HURT", "HUSBAND", "HYBRID", "ICE", "ICON", "IDEA", "IDENTIFY", "IDLE", "IGNORE", "ILL", "ILLEGAL", "ILLNESS", "IMAGE", "IMITATE", "IMMENSE", "IMMUNE", "IMPACT", "IMPOSE", "IMPROVE", "IMPULSE", "INCH", "INCLUDE", "INCOME", "INCREASE", "INDEX", "INDICATE", "INDOOR", "INDUSTRY", "INFANT", "INFLICT", "INFORM", "INHALE", "INHERIT", "INITIAL", "INJECT", "INJURY", "INMATE", "INNER", "INNOCENT", "INPUT", "INQUIRY", "INSANE", "INSECT", "INSIDE", "INSPIRE", "INSTALL", "INTACT", "INTEREST", "INTO", "INVEST", "INVITE", "INVOLVE", "IRON", "ISLAND", "ISOLATE", "ISSUE", "ITEM", "IVORY", "JACKET", "JAGUAR", "JAR", "JAZZ", "JEALOUS", "JEANS", "JELLY", "JEWEL", "JOB", "JOIN", "JOKE", "JOURNEY", "JOY", "JUDGE", "JUICE", "JUMP", "JUNGLE", "JUNIOR", "JUNK", "JUST", "KANGAROO", "KEEN", "KEEP", "KETCHUP", "KEY", "KICK", "KID", "KIDNEY", "KIND", "KINGDOM", "KISS", "KIT", "KITCHEN", "KITE", "KITTEN", "KIWI", "KNEE", "KNIFE", "KNOCK", "KNOW", "LAB", "LABEL", "LABOR", "LADDER", "LADY", "LAKE", "LAMP", "LANGUAGE", "LAPTOP", "LARGE", "LATER", "LATIN", "LAUGH", "LAUNDRY", "LAVA", "LAW", "LAWN", "LAWSUIT", "LAYER", "LAZY", "LEADER", "LEAF", "LEARN", "LEAVE", "LECTURE", "LEFT", "LEG", "LEGAL", "LEGEND", "LEISURE", "LEMON", "LEND", "LENGTH", "LENS", "LEOPARD", "LESSON", "LETTER", "LEVEL", "LIAR", "LIBERTY", "LIBRARY", "LICENSE", "LIFE", "LIFT", "LIGHT", "LIKE", "LIMB", "LIMIT", "LINK", "LION", "LIQUID", "LIST", "LITTLE", "LIVE", "LIZARD", "LOAD", "LOAN", "LOBSTER", "LOCAL", "LOCK", "LOGIC", "LONELY", "LONG", "LOOP", "LOTTERY", "LOUD", "LOUNGE", "LOVE", "LOYAL", "LUCKY", "LUGGAGE", "LUMBER", "LUNAR", "LUNCH", "LUXURY", "LYRICS", "MACHINE", "MAD", "MAGIC", "MAGNET", "MAID", "MAIL", "MAIN", "MAJOR", "MAKE", "MAMMAL", "MAN", "MANAGE", "MANDATE", "MANGO", "MANSION", "MANUAL", "MAPLE", "MARBLE", "MARCH", "MARGIN", "MARINE", "MARKET", "MARRIAGE", "MASK", "MASS", "MASTER", "MATCH", "MATERIAL", "MATH", "MATRIX", "MATTER", "MAXIMUM", "MAZE", "MEADOW", "MEAN", "MEASURE", "MEAT", "MECHANIC", "MEDAL", "MEDIA", "MELODY", "MELT", "MEMBER", "MEMORY", "MENTION", "MENU", "MERCY", "MERGE", "MERIT", "MERRY", "MESH", "MESSAGE", "METAL", "METHOD", "MIDDLE", "MIDNIGHT", "MILK", "MILLION", "MIMIC", "MIND", "MINIMUM", "MINOR", "MINUTE", "MIRACLE", "MIRROR", "MISERY", "MISS", "MISTAKE", "MIX", "MIXED", "MIXTURE", "MOBILE", "MODEL", "MODIFY", "MOM", "MOMENT", "MONITOR", "MONKEY", "MONSTER", "MONTH", "MOON", "MORAL", "MORE", "MORNING", "MOSQUITO", "MOTHER", "MOTION", "MOTOR", "MOUNTAIN", "MOUSE", "MOVE", "MOVIE", "MUCH", "MUFFIN", "MULE", "MULTIPLY", "MUSCLE", "MUSEUM", "MUSHROOM", "MUSIC", "MUST", "MUTUAL", "MYSELF", "MYSTERY", "MYTH", "NAIVE", "NAME", "NAPKIN", "NARROW", "NASTY", "NATION", "NATURE", "NEAR", "NECK", "NEED", "NEGATIVE", "NEGLECT", "NEITHER", "NEPHEW", "NERVE", "NEST", "NET", "NETWORK", "NEUTRAL", "NEVER", "NEWS", "NEXT", "NICE", "NIGHT", "NOBLE", "NOISE", "NOMINEE", "NOODLE", "NORMAL", "NORTH", "NOSE", "NOTABLE", "NOTE", "NOTHING", "NOTICE", "NOVEL", "NOW", "NUCLEAR", "NUMBER", "NURSE", "NUT", "OAK", "OBEY", "OBJECT", "OBLIGE", "OBSCURE", "OBSERVE", "OBTAIN", "OBVIOUS", "OCCUR", "OCEAN", "OCTOBER", "ODOR", "OFF", "OFFER", "OFFICE", "OFTEN", "OIL", "OKAY", "OLD", "OLIVE", "OLYMPIC", "OMIT", "ONCE", "ONE", "ONION", "ONLINE", "ONLY", "OPEN", "OPERA", "OPINION", "OPPOSE", "OPTION", "ORANGE", "ORBIT", "ORCHARD", "ORDER", "ORDINARY", "ORGAN", "ORIENT", "ORIGINAL", "ORPHAN", "OSTRICH", "OTHER", "OUTDOOR", "OUTER", "OUTPUT", "OUTSIDE", "OVAL", "OVEN", "OVER", "OWN", "OWNER", "OXYGEN", "OYSTER", "OZONE", "PACT", "PADDLE", "PAGE", "PAIR", "PALACE", "PALM", "PANDA", "PANEL", "PANIC", "PANTHER", "PAPER", "PARADE", "PARENT", "PARK", "PARROT", "PARTY", "PASS", "PATCH", "PATH", "PATIENT", "PATROL", "PATTERN", "PAUSE", "PAVE", "PAYMENT", "PEACE", "PEANUT", "PEAR", "PEASANT", "PELICAN", "PEN", "PENALTY", "PENCIL", "PEOPLE", "PEPPER", "PERFECT", "PERMIT", "PERSON", "PET", "PHONE", "PHOTO", "PHRASE", "PHYSICAL", "PIANO", "PICNIC", "PICTURE", "PIECE", "PIG", "PIGEON", "PILL", "PILOT", "PINK", "PIONEER", "PIPE", "PISTOL", "PITCH", "PIZZA", "PLACE", "PLANET", "PLASTIC", "PLATE", "PLAY", "PLEASE", "PLEDGE", "PLUCK", "PLUG", "PLUNGE", "POEM", "POET", "POINT", "POLAR", "POLE", "POLICE", "POND", "PONY", "POOL", "POPULAR", "PORTION", "POSITION", "POSSIBLE", "POST", "POTATO", "POTTERY", "POVERTY", "POWDER", "POWER", "PRACTICE", "PRAISE", "PREDICT", "PREFER", "PREPARE", "PRESENT", "PRETTY", "PREVENT", "PRICE", "PRIDE", "PRIMARY", "PRINT", "PRIORITY", "PRISON", "PRIVATE", "PRIZE", "PROBLEM", "PROCESS", "PRODUCE", "PROFIT", "PROGRAM", "PROJECT", "PROMOTE", "PROOF", "PROPERTY", "PROSPER", "PROTECT", "PROUD", "PROVIDE", "PUBLIC", "PUDDING", "PULL", "PULP", "PULSE", "PUMPKIN", "PUNCH", "PUPIL", "PUPPY", "PURCHASE", "PURITY", "PURPOSE", "PURSE", "PUSH", "PUT", "PUZZLE", "PYRAMID", "QUALITY", "QUANTUM", "QUARTER", "QUESTION", "QUICK", "QUIT", "QUIZ", "QUOTE", "RABBIT", "RACCOON", "RACE", "RACK", "RADAR", "RADIO", "RAIL", "RAIN", "RAISE", "RALLY", "RAMP", "RANCH", "RANDOM", "RANGE", "RAPID", "RARE", "RATE", "RATHER", "RAVEN", "RAW", "RAZOR", "READY", "REAL", "REASON", "REBEL", "REBUILD", "RECALL", "RECEIVE", "RECIPE", "RECORD", "RECYCLE", "REDUCE", "REFLECT", "REFORM", "REFUSE", "REGION", "REGRET", "REGULAR", "REJECT", "RELAX", "RELEASE", "RELIEF", "RELY", "REMAIN", "REMEMBER", "REMIND", "REMOVE", "RENDER", "RENEW", "RENT", "REOPEN", "REPAIR", "REPEAT", "REPLACE", "REPORT", "REQUIRE", "RESCUE", "RESEMBLE", "RESIST", "RESOURCE", "RESPONSE", "RESULT", "RETIRE", "RETREAT", "RETURN", "REUNION", "REVEAL", "REVIEW", "REWARD", "RHYTHM", "RIB", "RIBBON", "RICE", "RICH", "RIDE", "RIDGE", "RIFLE", "RIGHT", "RIGID", "RING", "RIOT", "RIPPLE", "RISK", "RITUAL", "RIVAL", "RIVER", "ROAD", "ROAST", "ROBOT", "ROBUST", "ROCKET", "ROMANCE", "ROOF", "ROOKIE", "ROOM", "ROSE", "ROTATE", "ROUGH", "ROUND", "ROUTE", "ROYAL", "RUBBER", "RUDE", "RUG", "RULE", "RUN", "RUNWAY", "RURAL", "SAD", "SADDLE", "SADNESS", "SAFE", "SAIL", "SALAD", "SALMON", "SALON", "SALT", "SALUTE", "SAME", "SAMPLE", "SAND", "SATISFY", "SATOSHI", "SAUCE", "SAUSAGE", "SAVE", "SAY", "SCALE", "SCAN", "SCARE", "SCATTER", "SCENE", "SCHEME", "SCHOOL", "SCIENCE", "SCISSORS", "SCORPION", "SCOUT", "SCRAP", "SCREEN", "SCRIPT", "SCRUB", "SEA", "SEARCH", "SEASON", "SEAT", "SECOND", "SECRET", "SECTION", "SECURITY", "SEED", "SEEK", "SEGMENT", "SELECT", "SELL", "SEMINAR", "SENIOR", "SENSE", "SENTENCE", "SERIES", "SERVICE", "SESSION", "SETTLE", "SETUP", "SEVEN", "SHADOW", "SHAFT", "SHALLOW", "SHARE", "SHED", "SHELL", "SHERIFF", "SHIELD", "SHIFT", "SHINE", "SHIP", "SHIVER", "SHOCK", "SHOE", "SHOOT", "SHOP", "SHORT", "SHOULDER", "SHOVE", "SHRIMP", "SHRUG", "SHUFFLE", "SHY", "SIBLING", "SICK", "SIDE", "SIEGE", "SIGHT", "SIGN", "SILENT", "SILK", "SILLY", "SILVER", "SIMILAR", "SIMPLE", "SINCE", "SING", "SIREN", "SISTER", "SITUATE", "SIX", "SIZE", "SKATE", "SKETCH", "SKI", "SKILL", "SKIN", "SKIRT", "SKULL", "SLAB", "SLAM", "SLEEP", "SLENDER", "SLICE", "SLIDE", "SLIGHT", "SLIM", "SLOGAN", "SLOT", "SLOW", "SLUSH", "SMALL", "SMART", "SMILE", "SMOKE", "SMOOTH", "SNACK", "SNAKE", "SNAP", "SNIFF", "SNOW", "SOAP", "SOCCER", "SOCIAL", "SOCK", "SODA", "SOFT", "SOLAR", "SOLDIER", "SOLID", "SOLUTION", "SOLVE", "SOMEONE", "SONG", "SOON", "SORRY", "SORT", "SOUL", "SOUND", "SOUP", "SOURCE", "SOUTH", "SPACE", "SPARE", "SPATIAL", "SPAWN", "SPEAK", "SPECIAL", "SPEED", "SPELL", "SPEND", "SPHERE", "SPICE", "SPIDER", "SPIKE", "SPIN", "SPIRIT", "SPLIT", "SPOIL", "SPONSOR", "SPOON", "SPORT", "SPOT", "SPRAY", "SPREAD", "SPRING", "SPY", "SQUARE", "SQUEEZE", "SQUIRREL", "STABLE", "STADIUM", "STAFF", "STAGE", "STAIRS", "STAMP", "STAND", "START", "STATE", "STAY", "STEAK", "STEEL", "STEM", "STEP", "STEREO", "STICK", "STILL", "STING", "STOCK", "STOMACH", "STONE", "STOOL", "STORY", "STOVE", "STRATEGY", "STREET", "STRIKE", "STRONG", "STRUGGLE", "STUDENT", "STUFF", "STUMBLE", "STYLE", "SUBJECT", "SUBMIT", "SUBWAY", "SUCCESS", "SUCH", "SUDDEN", "SUFFER", "SUGAR", "SUGGEST", "SUIT", "SUMMER", "SUN", "SUNNY", "SUNSET", "SUPER", "SUPPLY", "SUPREME", "SURE", "SURFACE", "SURGE", "SURPRISE", "SURROUND", "SURVEY", "SUSPECT", "SUSTAIN", "SWALLOW", "SWAMP", "SWAP", "SWARM", "SWEAR", "SWEET", "SWIFT", "SWIM", "SWING", "SWITCH", "SWORD", "SYMBOL", "SYMPTOM", "SYRUP", "SYSTEM", "TABLE", "TACKLE", "TAG", "TAIL", "TALENT", "TALK", "TANK", "TAPE", "TARGET", "TASK", "TASTE", "TATTOO", "TAXI", "TEACH", "TEAM", "TELL", "TEN", "TENANT", "TENNIS", "TENT", "TERM", "TEST", "TEXT", "THANK", "THAT", "THEME", "THEN", "THEORY", "THERE", "THEY", "THING", "THIS", "THOUGHT", "THREE", "THRIVE", "THROW", "THUMB", "THUNDER", "TICKET", "TIDE", "TIGER", "TILT", "TIMBER", "TIME", "TINY", "TIP", "TIRED", "TISSUE", "TITLE", "TOAST", "TOBACCO", "TODAY", "TODDLER", "TOE", "TOGETHER", "TOILET", "TOKEN", "TOMATO", "TOMORROW", "TONE", "TONGUE", "TONIGHT", "TOOL", "TOOTH", "TOP", "TOPIC", "TOPPLE", "TORCH", "TORNADO", "TORTOISE", "TOSS", "TOTAL", "TOURIST", "TOWARD", "TOWER", "TOWN", "TOY", "TRACK", "TRADE", "TRAFFIC", "TRAGIC", "TRAIN", "TRANSFER", "TRAP", "TRASH", "TRAVEL", "TRAY", "TREAT", "TREE", "TREND", "TRIAL", "TRIBE", "TRICK", "TRIGGER", "TRIM", "TRIP", "TROPHY", "TROUBLE", "TRUCK", "TRUE", "TRULY", "TRUMPET", "TRUST", "TRUTH", "TRY", "TUBE", "TUITION", "TUMBLE", "TUNA", "TUNNEL", "TURKEY", "TURN", "TURTLE", "TWELVE", "TWENTY", "TWICE", "TWIN", "TWIST", "TWO", "TYPE", "TYPICAL", "UGLY", "UMBRELLA", "UNABLE", "UNAWARE", "UNCLE", "UNCOVER", "UNDER", "UNDO", "UNFAIR", "UNFOLD", "UNHAPPY", "UNIFORM", "UNIQUE", "UNIT", "UNIVERSE", "UNKNOWN", "UNLOCK", "UNTIL", "UNUSUAL", "UNVEIL", "UPDATE", "UPGRADE", "UPHOLD", "UPON", "UPPER", "UPSET", "URBAN", "URGE", "USAGE", "USE", "USED", "USEFUL", "USELESS", "USUAL", "UTILITY", "VACANT", "VACUUM", "VAGUE", "VALID", "VALLEY", "VALVE", "VAN", "VANISH", "VAPOR", "VARIOUS", "VAST", "VAULT", "VEHICLE", "VELVET", "VENDOR", "VENTURE", "VENUE", "VERB", "VERIFY", "VERSION", "VERY", "VESSEL", "VETERAN", "VIABLE", "VIBRANT", "VICIOUS", "VICTORY", "VIDEO", "VIEW", "VILLAGE", "VINTAGE", "VIOLIN", "VIRTUAL", "VIRUS", "VISA", "VISIT", "VISUAL", "VITAL", "VIVID", "VOCAL", "VOICE", "VOID", "VOLCANO", "VOLUME", "VOTE", "VOYAGE", "WAGE", "WAGON", "WAIT", "WALK", "WALL", "WALNUT", "WANT", "WARFARE", "WARM", "WARRIOR", "WASH", "WASP", "WASTE", "WATER", "WAVE", "WAY", "WEALTH", "WEAPON", "WEAR", "WEASEL", "WEATHER", "WEB", "WEDDING", "WEEKEND", "WEIRD", "WELCOME", "WEST", "WET", "WHALE", "WHAT", "WHEAT", "WHEEL", "WHEN", "WHERE", "WHIP", "WHISPER", "WIDE", "WIDTH", "WIFE", "WILD", "WILL", "WIN", "WINDOW", "WINE", "WING", "WINK", "WINNER", "WINTER", "WIRE", "WISDOM", "WISE", "WISH", "WITNESS", "WOLF", "WOMAN", "WONDER", "WOOD", "WOOL", "WORD", "WORK", "WORLD", "WORRY", "WORTH", "WRAP", "WRECK", "WRESTLE", "WRIST", "WRITE", "WRONG", "YARD", "YEAR", "YELLOW", "YOU", "YOUNG", "YOUTH", "ZEBRA", "ZERO", "ZONE", "ZOO"];
        var Autocomplete = function Autocomplete(_ref87) {
          var accept = _ref87.accept,
            onChange = _ref87.onChange,
            onBlur = _ref87.onBlur,
            placeholder = _ref87.placeholder,
            autoComplete = _ref87.autoComplete,
            type = _ref87.type,
            name = _ref87.name,
            id = _ref87.id,
            extraClass = _ref87.extraClass,
            value = _ref87.value,
            endIcon = _ref87.endIcon,
            startIcon = _ref87.startIcon,
            error = _ref87.error,
            handleEndIconClick = _ref87.handleEndIconClick,
            onKeyUp = _ref87.onKeyUp,
            disabled = _ref87.disabled,
            mt = _ref87.mt,
            mb = _ref87.mb,
            suggestions = _ref87.suggestions,
            onPaste = _ref87.onPaste;
          var suggestionsContainerRef = reactExports.useRef(null);
          var _reactExports$useStat183 = reactExports.useState(-1),
            _reactExports$useStat184 = _slicedToArray2(_reactExports$useStat183, 2),
            selectedIndex = _reactExports$useStat184[0],
            setSelectedIndex = _reactExports$useStat184[1];
          var _reactExports$useStat185 = reactExports.useState([]),
            _reactExports$useStat186 = _slicedToArray2(_reactExports$useStat185, 2),
            filteredSuggestions = _reactExports$useStat186[0],
            setFilteredSuggestions = _reactExports$useStat186[1];
          var wrapperBase = "".concat(mt, " ").concat(mb, " ").concat(startIcon ? "grid grid-cols-[1fr_auto] grid-rows-1" : "flex");
          var base = "core-black-contrast-2 w-full px-4 py-3.5 ".concat(filteredSuggestions.length > 0 ? "rounded-t" : "rounded", " disabled:opacity-40 disabled:cursor-not-allowed focus:outline-none focus:border-[#fff] border-[#fff] focus:border-[#464C4F]");
          if (extraClass) {
            base += " ".concat(extraClass);
          }
          var handleKeyDown = function handleKeyDown(event) {
            switch (event.key) {
              case "ArrowDown":
                setFilteredSuggestions(suggestions.filter(function (s) {
                  return s.startsWith(value.toUpperCase());
                }));
                setSelectedIndex(function (prevIndex) {
                  return Math.min(prevIndex + 1, filteredSuggestions.length - 1);
                });
                break;
              case "ArrowUp":
                if (selectedIndex === 0) {
                  setFilteredSuggestions([]);
                }
                setSelectedIndex(function (prevIndex) {
                  return Math.max(prevIndex - 1, 0);
                });
                break;
              case "Enter":
                if (selectedIndex !== -1 && filteredSuggestions[selectedIndex]) {
                  onChange(filteredSuggestions[selectedIndex]);
                  setFilteredSuggestions([]);
                }
                break;
              case "Tab":
                if (selectedIndex === -1) {
                  setSelectedIndex(0);
                  event.preventDefault();
                }
                if (selectedIndex !== -1 && filteredSuggestions[selectedIndex]) {
                  onChange(filteredSuggestions[selectedIndex]);
                  setFilteredSuggestions([]);
                }
                break;
              case "Escape":
                setFilteredSuggestions([]);
                break;
            }
          };
          var handleInputChange = function handleInputChange(event) {
            var value2 = event.target.value;
            onChange(value2);
            if (value2.length === 0) {
              return setFilteredSuggestions([]);
            }
            var filtered = suggestions.filter(function (s) {
              return s.startsWith(value2.toUpperCase());
            });
            setFilteredSuggestions(filtered);
          };
          var handleSelect = function handleSelect(suggestion) {
            onChange(suggestion);
            setFilteredSuggestions([]);
          };
          reactExports.useEffect(function () {
            if (suggestionsContainerRef.current && selectedIndex !== -1) {
              var selectedSuggestion =
              // @ts-ignore
              suggestionsContainerRef.current.children[selectedIndex];
              if (selectedSuggestion) {
                selectedSuggestion.scrollIntoView({
                  behavior: "smooth",
                  block: "nearest"
                });
              }
            }
          }, [selectedIndex]);
          reactExports.useEffect(function () {
            var handleDocumentClick = function handleDocumentClick(event) {
              if (suggestionsContainerRef.current &&
              // @ts-ignore
              !suggestionsContainerRef.current.contains(event.target)) {
                setFilteredSuggestions([]);
              }
            };
            document.addEventListener("click", handleDocumentClick);
            return function () {
              document.removeEventListener("click", handleDocumentClick);
            };
          }, []);
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "flex flex-col gap-2",
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "".concat(wrapperBase),
              children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "relative w-full",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("input", {
                  onPaste: onPaste,
                  disabled: disabled,
                  onKeyDown: handleKeyDown,
                  autoComplete: autoComplete ? autoComplete : "off",
                  onBlur: onBlur,
                  name: name,
                  id: id,
                  value: value,
                  type: type,
                  placeholder: placeholder,
                  className: "".concat(base, " ").concat(startIcon ? "pl-10" : "", " ").concat(endIcon ? "pr-12" : ""),
                  onChange: handleInputChange,
                  accept: accept,
                  onKeyUp: onKeyUp
                }), filteredSuggestions.length > 0 && /* @__PURE__ */jsxRuntimeExports.jsx("ul", {
                  ref: suggestionsContainerRef,
                  id: "autocomplete_list_".concat(id),
                  className: "max-h-[150px] scroll overflow-y-auto absolute top-[100%] z-[1000] w-full bg-white px-0 rounded-b-lg animate-fadeIn",
                  children: filteredSuggestions.filter(function (s) {
                    return s.startsWith(value.toUpperCase());
                  }).map(function (s, index) {
                    return /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                      onClick: function onClick() {
                        handleSelect(s);
                      },
                      className: "".concat(selectedIndex === index ? "bg-slate-200" : "", " first:pb-2 last:border-b-none! hover:cursor-pointer hover:bg-slate-200 hover:font-semibold ").concat(startIcon ? "grid grid-cols-[32px_auto] grid-rows-1" : "flex", "  px-2 pt-2 text-black font-light ").concat(filteredSuggestions.length > 1 ? "border-b pb-2" : ""),
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("span", {}), s]
                    }, "word_".concat(s));
                  })
                }), startIcon, !!endIcon && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  onClick: disabled ? void 0 : handleEndIconClick,
                  className: "pr-4 my-auto absolute right-[1px] top-4 bottom-0",
                  children: endIcon
                })]
              })
            }), error && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "text-sm form-error-message text-left",
              children: error
            })]
          });
        };
        var validationSchema = create$3().shape({
          seedPhrase: create$3({
            "1": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "2": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "3": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "4": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "5": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "6": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "7": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "8": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "9": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "10": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "11": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "12": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "13": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "14": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "15": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "16": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "17": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "18": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "19": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "20": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "21": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "22": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "23": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "24": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word")
          }),
          keyuses: create$5().required("Please enter the maximum times you have signed a transaction.  Otherwise leave the default 1000 if you think you haven't signed over 1000 transactions")
        });
        var validationSchemaNoArchive = create$3().shape({
          seedPhrase: create$3({
            "1": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "2": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "3": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "4": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "5": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "6": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "7": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "8": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "9": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "10": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "11": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "12": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "13": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "14": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "15": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "16": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "17": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "18": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "19": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "20": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "21": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "22": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "23": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
            "24": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word")
          }),
          keyuses: create$5().required("Please enter the maximum times you have signed a transaction.  Otherwise leave the default 1000 if you think you haven't signed over 1000 transactions"),
          host: create$6().required("A host is required")
        });
        var SeedResyncReset = function SeedResyncReset() {
          var _reactExports$useCont30 = reactExports.useContext(appContext),
            setBackButton = _reactExports$useCont30.setBackButton,
            displayHeaderBackButton = _reactExports$useCont30.displayBackButton,
            shuttingDown = _reactExports$useCont30.shuttingDown;
          var _reactExports$useCont31 = reactExports.useContext(appContext),
            archives = _reactExports$useCont31.archives,
            getArchives = _reactExports$useCont31.getArchives;
          var _reactExports$useStat187 = reactExports.useState(false),
            _reactExports$useStat188 = _slicedToArray2(_reactExports$useStat187, 2),
            MDSShutdown = _reactExports$useStat188[0],
            setMDSShutdown = _reactExports$useStat188[1];
          var _reactExports$useStat189 = reactExports.useState(false),
            _reactExports$useStat190 = _slicedToArray2(_reactExports$useStat189, 2),
            haveArchive = _reactExports$useStat190[0],
            setHaveArchive = _reactExports$useStat190[1];
          var _reactExports$useStat191 = reactExports.useState(false),
            _reactExports$useStat192 = _slicedToArray2(_reactExports$useStat191, 2),
            noHaveArchive = _reactExports$useStat192[0],
            setNoHaveArchive = _reactExports$useStat192[1];
          var _reactExports$useStat193 = reactExports.useState(0),
            _reactExports$useStat194 = _slicedToArray2(_reactExports$useStat193, 2),
            resetFileField = _reactExports$useStat194[0],
            setResetFileField = _reactExports$useStat194[1];
          var _reactExports$useStat195 = reactExports.useState("local"),
            _reactExports$useStat196 = _slicedToArray2(_reactExports$useStat195, 2),
            archiveFileSelection = _reactExports$useStat196[0],
            setArchiveFileSelection = _reactExports$useStat196[1];
          var _reactExports$useStat197 = reactExports.useState(false),
            _reactExports$useStat198 = _slicedToArray2(_reactExports$useStat197, 2),
            beginResyncing = _reactExports$useStat198[0],
            setBeginResyncing = _reactExports$useStat198[1];
          var _reactExports$useStat199 = reactExports.useState(false),
            _reactExports$useStat200 = _slicedToArray2(_reactExports$useStat199, 2),
            error = _reactExports$useStat200[0],
            setError = _reactExports$useStat200[1];
          var _reactExports$useStat201 = reactExports.useState(0),
            _reactExports$useStat202 = _slicedToArray2(_reactExports$useStat201, 2),
            progress = _reactExports$useStat202[0],
            setProgress = _reactExports$useStat202[1];
          var _reactExports$useStat203 = reactExports.useState(false),
            _reactExports$useStat204 = _slicedToArray2(_reactExports$useStat203, 2),
            fileUpload = _reactExports$useStat204[0],
            setFileUpload = _reactExports$useStat204[1];
          var _reactExports$useStat205 = reactExports.useState(0),
            _reactExports$useStat206 = _slicedToArray2(_reactExports$useStat205, 2),
            step = _reactExports$useStat206[0],
            setStep = _reactExports$useStat206[1];
          var _reactExports$useStat207 = reactExports.useState(0),
            _reactExports$useStat208 = _slicedToArray2(_reactExports$useStat207, 2),
            stepNo = _reactExports$useStat208[0],
            setStepNo = _reactExports$useStat208[1];
          var _reactExports$useStat209 = reactExports.useState({
              host: false,
              keyuses: false
            }),
            _reactExports$useStat210 = _slicedToArray2(_reactExports$useStat209, 2),
            tooltip = _reactExports$useStat210[0],
            setTooltip = _reactExports$useStat210[1];
          var navigate = useNavigate();
          var handlePaste = /*#__PURE__*/function () {
            var _ref88 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44(event, setFieldValue, validateForm, setFieldError, setFieldTouched) {
              var clipboardData, pastedText, isPastedTextASeedPhrase, errors;
              return _regeneratorRuntime().wrap(function _callee44$(_context44) {
                while (1) switch (_context44.prev = _context44.next) {
                  case 0:
                    clipboardData = event.clipboardData;
                    pastedText = clipboardData.getData("text");
                    isPastedTextASeedPhrase = pastedText.split(" ").length === 24;
                    if (!isPastedTextASeedPhrase) {
                      _context44.next = 12;
                      break;
                    }
                    event.preventDefault();
                    pastedText.split(" ").forEach(function (_seed, index) {
                      return setFieldValue("seedPhrase.".concat(index + 1), "");
                    });
                    pastedText.split(" ").forEach(function (_seed, index) {
                      return setFieldValue("seedPhrase.".concat(index + 1), _seed.toUpperCase());
                    });
                    _context44.next = 9;
                    return validateForm();
                  case 9:
                    errors = _context44.sent;
                    if (errors.seedPhrase) {
                      Object.keys(errors.seedPhrase).map(function (key) {
                        if (errors.seedPhrase[key]) {
                          setFieldError("seedPhrase.".concat(key), errors.seedPhrase[key]);
                          setFieldTouched("seedPhrase.".concat(key), errors.seedPhrase[key]);
                        }
                      });
                    }
                    return _context44.abrupt("return", pastedText);
                  case 12:
                    return _context44.abrupt("return", false);
                  case 13:
                  case "end":
                    return _context44.stop();
                }
              }, _callee44);
            }));
            return function handlePaste(_x91, _x92, _x93, _x94, _x95) {
              return _ref88.apply(this, arguments);
            };
          }();
          reactExports.useEffect(function () {
            if (shuttingDown) {
              setMDSShutdown(true);
            }
          }, [shuttingDown]);
          reactExports.useEffect(function () {
            setBackButton({
              display: true,
              onClickHandler: function onClickHandler() {
                return navigate("/dashboard/archivereset");
              },
              title: "Archive Reset"
            });
          }, []);
          var handleArchiveSelector = function handleArchiveSelector(event) {
            setArchiveFileSelection(event.target.value);
          };
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [haveArchive && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
                  validationSchema: validationSchema,
                  initialValues: {
                    seedPhrase: {
                      1: "".toUpperCase(),
                      2: "".toUpperCase(),
                      3: "".toUpperCase(),
                      4: "".toUpperCase(),
                      5: "".toUpperCase(),
                      6: "".toUpperCase(),
                      7: "".toUpperCase(),
                      8: "".toUpperCase(),
                      9: "".toUpperCase(),
                      10: "".toUpperCase(),
                      11: "".toUpperCase(),
                      12: "".toUpperCase(),
                      13: "".toUpperCase(),
                      14: "".toUpperCase(),
                      15: "".toUpperCase(),
                      16: "".toUpperCase(),
                      17: "".toUpperCase(),
                      18: "".toUpperCase(),
                      19: "".toUpperCase(),
                      20: "".toUpperCase(),
                      21: "".toUpperCase(),
                      22: "".toUpperCase(),
                      23: "".toUpperCase(),
                      24: "".toUpperCase()
                    },
                    keyuses: 1e3,
                    host: "",
                    upload: null,
                    file: ""
                  },
                  onSubmit: function () {
                    var _onSubmit9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45(formData) {
                      var phraseAsString, keyuses, file, fullPath;
                      return _regeneratorRuntime().wrap(function _callee45$(_context45) {
                        while (1) switch (_context45.prev = _context45.next) {
                          case 0:
                            setBeginResyncing(true);
                            _context45.prev = 1;
                            phraseAsString = Object.values(formData.seedPhrase).toString().replaceAll(",", " ");
                            keyuses = formData.keyuses, file = formData.file;
                            _context45.next = 6;
                            return getPath(file);
                          case 6:
                            fullPath = _context45.sent;
                            _context45.next = 9;
                            return resetSeedSync(fullPath, phraseAsString, keyuses).catch(function (error2) {
                              throw new Error(error2);
                            });
                          case 9:
                            _context45.next = 14;
                            break;
                          case 11:
                            _context45.prev = 11;
                            _context45.t0 = _context45["catch"](1);
                            setError(_context45.t0 instanceof Error ? _context45.t0.message : "An unexpected error occurred");
                          case 14:
                          case "end":
                            return _context45.stop();
                        }
                      }, _callee45, null, [[1, 11]]);
                    }));
                    function onSubmit(_x96) {
                      return _onSubmit9.apply(this, arguments);
                    }
                    return onSubmit;
                  }(),
                  children: function children(_ref89) {
                    var handleSubmit = _ref89.handleSubmit,
                      setFieldValue = _ref89.setFieldValue,
                      errors = _ref89.errors,
                      touched = _ref89.touched,
                      values = _ref89.values,
                      handleBlur = _ref89.handleBlur,
                      handleChange = _ref89.handleChange,
                      isSubmitting = _ref89.isSubmitting,
                      resetForm = _ref89.resetForm,
                      isValid = _ref89.isValid,
                      dirty = _ref89.dirty,
                      submitForm = _ref89.submitForm,
                      validateForm = _ref89.validateForm,
                      setFieldError = _ref89.setFieldError,
                      setFieldTouched = _ref89.setFieldTouched;
                    return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                      children: [step === 0 && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "flex flex-col items-center mb-2",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                          width: "64",
                          height: "64",
                          viewBox: "0 0 64 64",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                            id: "mask0_1546_39570",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "64",
                            height: "64",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                              width: "64",
                              height: "64",
                              fill: "#D9D9D9"
                            })
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                            mask: "url(#mask0_1546_39570)",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M31.9993 44.6146C32.6096 44.6146 33.1211 44.4082 33.5339 43.9954C33.9467 43.5826 34.1531 43.071 34.1531 42.4608C34.1531 41.8506 33.9467 41.339 33.5339 40.9262C33.1211 40.5134 32.6096 40.307 31.9993 40.307C31.389 40.307 30.8775 40.5134 30.4647 40.9262C30.0519 41.339 29.8455 41.8506 29.8455 42.4608C29.8455 43.071 30.0519 43.5826 30.4647 43.9954C30.8775 44.4082 31.389 44.6146 31.9993 44.6146ZM29.9994 34.8711H33.9992V18.8711H29.9994V34.8711ZM32.0037 57.3326C28.4999 57.3326 25.2065 56.6677 22.1235 55.3379C19.0404 54.0081 16.3586 52.2034 14.078 49.9239C11.7974 47.6443 9.99191 44.9636 8.66155 41.882C7.33119 38.8003 6.66602 35.5076 6.66602 32.0038C6.66602 28.4999 7.3309 25.2065 8.66068 22.1235C9.99046 19.0404 11.7951 16.3586 14.0747 14.078C16.3543 11.7974 19.0349 9.99191 22.1166 8.66155C25.1983 7.3312 28.491 6.66602 31.9948 6.66602C35.4986 6.66602 38.7921 7.33091 41.8751 8.66069C44.9582 9.99046 47.64 11.7951 49.9206 14.0747C52.2012 16.3543 54.0067 19.0349 55.337 22.1166C56.6674 25.1983 57.3326 28.491 57.3326 31.9948C57.3326 35.4986 56.6677 38.7921 55.3379 41.8751C54.0081 44.9582 52.2034 47.64 49.9239 49.9206C47.6443 52.2012 44.9636 54.0067 41.882 55.337C38.8003 56.6674 35.5076 57.3326 32.0037 57.3326Z",
                              fill: "#F4F4F5"
                            })
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-2xl mb-8 text-center",
                          children: "Please note"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "mb-6 text-center",
                          children: "Importing a seed phrase is irreversible. Consider taking a backup of this node before restoring."
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          variant: "primary",
                          onClick: function onClick() {
                            return setStep(1);
                          },
                          children: "Select archive file"
                        })]
                      }), step === 1 && /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                        onSubmit: handleSubmit,
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-2xl mb-8 text-center",
                          children: "Select an archive"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "mb-6 text-center",
                          children: "Select a local archive or upload a new one"
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "relative mb-4",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("select", {
                            disabled: fileUpload,
                            defaultValue: archiveFileSelection,
                            onChange: function onChange(e) {
                              handleArchiveSelector(e);
                              resetForm();
                            },
                            className: "p-4 bg-black hover:cursor-pointer rounded w-full hover:opacity-80",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("option", {
                              id: "value",
                              value: "local",
                              children: "Select an internal archive file"
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("option", {
                              id: "split",
                              value: "upload",
                              children: "Upload an archive file"
                            })]
                          }), /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            className: "my-auto absolute right-2 top-[12px]",
                            width: "32",
                            height: "33",
                            viewBox: "0 0 32 33",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_2226_53255",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "32",
                              height: "33",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                y: "0.550781",
                                width: "32",
                                height: "32",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_2226_53255)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M16.0004 20.6172L8.4668 13.0508L9.6668 11.8844L16.0004 18.2172L22.334 11.8844L23.534 13.0844L16.0004 20.6172Z",
                                fill: "#FaFaFF"
                              })
                            })]
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                          children: [archiveFileSelection === "local" && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx(List, {
                              disabled: archives.length === 0,
                              options: archives,
                              setForm: function () {
                                var _setForm4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46(option) {
                                  return _regeneratorRuntime().wrap(function _callee46$(_context46) {
                                    while (1) switch (_context46.prev = _context46.next) {
                                      case 0:
                                        if (option.length) {
                                          setFieldValue("file", "/archives/" + option);
                                        }
                                      case 1:
                                      case "end":
                                        return _context46.stop();
                                    }
                                  }, _callee46);
                                }));
                                function setForm(_x97) {
                                  return _setForm4.apply(this, arguments);
                                }
                                return setForm;
                              }()
                            }), archives.length === 0 && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                              className: "text-sm mt-2 text-good",
                              children: "No archives found in your internal files. Upload a new one!"
                            })]
                          }), !fileUpload && archiveFileSelection === "upload" && !values.file.length && /* @__PURE__ */jsxRuntimeExports.jsx(FileChooser, {
                            disabled: isSubmitting,
                            keyValue: resetFileField,
                            handleEndIconClick: function handleEndIconClick() {
                              setResetFileField(function (prev) {
                                return prev + 1;
                              });
                              setFieldValue("upload", void 0);
                            },
                            error: errors.upload && errors.upload ? errors.upload : false,
                            extraClass: "core-grey-20",
                            accept: ".gzip,.dat",
                            onChange: function onChange(e) {
                              if (e.target.files) {
                                setFieldValue("upload", e.target.files[0]);
                              }
                            },
                            onBlur: handleBlur,
                            placeholder: "Select file",
                            type: "file",
                            id: "upload",
                            name: "upload",
                            endIcon: values.upload && /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                              xmlns: "http://www.w3.org/2000/svg",
                              width: "25",
                              height: "24",
                              viewBox: "0 0 25 24",
                              fill: "none",
                              children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                                id: "mask0_645_17003",
                                maskUnits: "userSpaceOnUse",
                                x: "0",
                                y: "0",
                                width: "25",
                                height: "24",
                                children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                  x: "0.5",
                                  width: "24",
                                  height: "24",
                                  fill: "#D9D9D9"
                                })
                              }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                                mask: "url(#mask0_645_17003)",
                                children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                  d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                  fill: "#91919D"
                                })
                              })]
                            })
                          }), fileUpload && archiveFileSelection === "upload" && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                            className: "core-black-contrast-2 h-[56px] rounded p-4 mt-4 relative",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                              className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black",
                              children: [(Number(progress) * 100).toFixed(0), "%"]
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                              className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                              style: {
                                transform: "scaleX(".concat(progress, ")"),
                                left: "-1px",
                                top: "-2px",
                                width: "calc(100% + 1px)"
                              }
                            })]
                          }), fileUpload && values.upload && /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                            className: "text-sm mt-2",
                            children: ["Uploading", " ", values.upload.name ? values.upload.name + "..." : ""]
                          }), !fileUpload && !!values.file.length && archiveFileSelection === "upload" && /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                            className: "text-sm text-good flex items-center mt-2",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                              xmlns: "http://www.w3.org/2000/svg",
                              height: "24",
                              viewBox: "0 -960 960 960",
                              width: "24",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                fill: "#4FE3C1",
                                d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                              })
                            }), values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]]
                          }), values.upload && /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                            children: !fileUpload && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                              variant: "primary",
                              extraClass: "mt-4",
                              onClick: function () {
                                var _onClick10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {
                                  return _regeneratorRuntime().wrap(function _callee48$(_context48) {
                                    while (1) switch (_context48.prev = _context48.next) {
                                      case 0:
                                        setFileUpload(true);
                                        setFieldValue("file", "");
                                        window.MDS.file.upload(values.upload, /*#__PURE__*/function () {
                                          var _ref90 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47(resp) {
                                            var fileName;
                                            return _regeneratorRuntime().wrap(function _callee47$(_context47) {
                                              while (1) switch (_context47.prev = _context47.next) {
                                                case 0:
                                                  if (resp.allchunks >= 10) {
                                                    setProgress(resp.chunk / resp.allchunks);
                                                  }
                                                  fileName = resp.filename;
                                                  if (resp.allchunks === resp.chunk) {
                                                    setFileUpload(false);
                                                    window.MDS.file.move("/fileupload/" + fileName, "/archives/" + fileName, function (resp2) {
                                                      if (resp2.status) {
                                                        setFieldValue("file", "/archives/" + fileName);
                                                        setFieldValue("upload", void 0);
                                                        setFileUpload(false);
                                                        getArchives();
                                                      }
                                                    });
                                                  }
                                                case 3:
                                                case "end":
                                                  return _context47.stop();
                                              }
                                            }, _callee47);
                                          }));
                                          return function (_x98) {
                                            return _ref90.apply(this, arguments);
                                          };
                                        }());
                                      case 3:
                                      case "end":
                                        return _context48.stop();
                                    }
                                  }, _callee48);
                                }));
                                function onClick() {
                                  return _onClick10.apply(this, arguments);
                                }
                                return onClick;
                              }(),
                              children: "Upload"
                            })
                          }), values.file && values.file.length > 0 && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            onClick: function onClick() {
                              return setStep(2);
                            },
                            variant: "primary",
                            extraClass: "mt-4",
                            children: "Continue"
                          }), !fileUpload && archiveFileSelection === "upload" && !!values.file.length && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            onClick: function onClick() {
                              return setFieldValue("file", "");
                            },
                            variant: "tertiary",
                            extraClass: "mt-4",
                            children: "Upload a different file"
                          })]
                        })]
                      }), step === 2 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                        nav: /* @__PURE__ */jsxRuntimeExports.jsxs(Button, {
                          onClick: function onClick() {
                            return setStep(1);
                          },
                          extraClass: "w-max !bg-transparent text-white border-b-1 flex items-center hover:opacity-80",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            width: "16",
                            height: "17",
                            viewBox: "0 0 16 17",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_1546_42097",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "16",
                              height: "17",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                y: "0.5",
                                width: "16",
                                height: "16",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_1546_42097)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M6.39969 14.6685L0.230469 8.4993L6.39969 2.33008L7.29582 3.22621L2.02275 8.4993L7.29582 13.7724L6.39969 14.6685Z",
                                fill: "#F9F9FA"
                              })
                            })]
                          }), "Cancel"]
                        }),
                        main: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("h1", {
                            className: "text-2xl mb-8 text-center",
                            children: ["Enter your ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " 24-word seed phrase"]
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("ul", {
                            className: "grid grid-cols-2 lg:grid-cols-4 gap-2 mb-4",
                            children: values.seedPhrase && Object.keys(values.seedPhrase).map(function (seed) {
                              return /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                                className: "relative",
                                children: /* @__PURE__ */jsxRuntimeExports.jsx(Autocomplete, {
                                  onPaste: function onPaste(e) {
                                    return handlePaste(e, setFieldValue, validateForm, setFieldError, setFieldTouched);
                                  },
                                  extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                                  disabled: false,
                                  placeholder: "",
                                  type: "text",
                                  value: values.seedPhrase[seed],
                                  id: "seedPhrase.".concat(seed),
                                  name: "seedPhrase.".concat(seed),
                                  suggestions: bip39,
                                  onChange: function onChange(value) {
                                    return setFieldValue("seedPhrase.".concat(seed), value);
                                  },
                                  onBlur: handleBlur,
                                  error: getIn$1(touched, "seedPhrase.".concat(seed)) && getIn$1(errors, "seedPhrase.".concat(seed)) ? getIn$1(errors, "seedPhrase.".concat(seed)) : false,
                                  startIcon: /* @__PURE__ */jsxRuntimeExports.jsx("h4", {
                                    className: "absolute top-[15px] left-[15px] ".concat(getIn$1(touched, "seedPhrase.".concat(seed)) && getIn$1(errors, "seedPhrase.".concat(seed)) ? "fa-error" : "fa", " color-core-grey text-base z-20"),
                                    children: seed
                                  })
                                })
                              }, "seedInputField_".concat(seed));
                            })
                          }), dirty && isValid && /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                            delay: 50,
                            children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                              onClick: function onClick() {
                                return setStep(3);
                              },
                              children: "I'm ready"
                            })
                          })]
                        }),
                        primary: null,
                        secondary: null
                      }), document.body), step === 3 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                        main: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-2xl mb-8 text-center",
                            children: "Final step"
                          }), /* @__PURE__ */jsxRuntimeExports.jsxs("span", {
                            className: "mb-2 flex gap-2 items-center mt-2",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                              className: "text-left",
                              children: "Key uses"
                            }), !tooltip.keyuses && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                              className: "w-4 h-4",
                              onClick: function onClick() {
                                return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                  keyuses: true
                                }));
                              },
                              alt: "tooltip",
                              src: "./assets/help_filled.svg"
                            }), !!tooltip.keyuses && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                              className: "w-4 h-4",
                              onClick: function onClick() {
                                return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                  keyuses: false
                                }));
                              },
                              alt: "tooltip-dismiss",
                              src: "./assets/cancel_filled.svg"
                            })]
                          }), tooltip.keyuses && /* @__PURE__ */jsxRuntimeExports.jsx(Tooltip, {
                            onClick: function onClick() {
                              return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                keyuses: false
                              }));
                            },
                            content: "How many times at most you used your keys. Your keys are used for signing every transaction you make. Every time you import your seed phrase this needs to be higher.",
                            position: 75
                          }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                            extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                            disabled: false,
                            placeholder: "default 1000",
                            type: "text",
                            value: values.keyuses,
                            id: "keyuses",
                            name: "keyuses",
                            onChange: handleChange,
                            onBlur: handleBlur,
                            error: errors.keyuses ? errors.keyuses : false
                          }), values.keyuses && values.keyuses < 1e3 && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-sm mt-2 opacity-50",
                            children: "We suggest for you to use 1000 as a safe number"
                          })]
                        }),
                        primary: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                          delay: 50,
                          children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            disabled: !isValid,
                            extraClass: "mt-4",
                            onClick: function onClick() {
                              return setStep(4);
                            },
                            children: "Re-sync"
                          })
                        }),
                        secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          extraClass: "mt-4",
                          variant: "tertiary",
                          onClick: function onClick() {
                            setStep(2);
                            if (!values.keyuses || errors.keyuses) {
                              setFieldValue("keyuses", 1e3);
                            }
                          },
                          children: "Cancel"
                        })
                      }), document.body), step === 4 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                        main: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                          children: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                              className: "text-2xl mb-8 text-center",
                              children: "Wipe this node?"
                            }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                              className: "text-center mb-4",
                              children: ["This node will be wiped and recreated with the given seed phrase. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " This process can take up to an hour, please connect your device to a power source before you continue."]
                            })]
                          })
                        }),
                        primary: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                          delay: 50,
                          children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            disabled: !isValid,
                            onClick: function onClick() {
                              return submitForm();
                            },
                            children: "Start re-sync"
                          })
                        }),
                        secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          extraClass: "mt-4",
                          variant: "tertiary",
                          onClick: function onClick() {
                            return setStep(3);
                          },
                          children: "Cancel"
                        })
                      }), document.body)]
                    });
                  }
                })
              }),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [error && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  onClick: function onClick() {
                    setError(false);
                    setBeginResyncing(false);
                  },
                  children: "Cancel"
                }), !fileUpload && !error && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  variant: "tertiary",
                  extraClass: "mt-2",
                  onClick: function onClick() {
                    setHaveArchive(false);
                    setStep(0);
                  },
                  children: "Cancel"
                })]
              })
            }), document.body), noHaveArchive && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
                  validationSchema: validationSchemaNoArchive,
                  initialValues: {
                    seedPhrase: {
                      1: "".toUpperCase(),
                      2: "".toUpperCase(),
                      3: "".toUpperCase(),
                      4: "".toUpperCase(),
                      5: "".toUpperCase(),
                      6: "".toUpperCase(),
                      7: "".toUpperCase(),
                      8: "".toUpperCase(),
                      9: "".toUpperCase(),
                      10: "".toUpperCase(),
                      11: "".toUpperCase(),
                      12: "".toUpperCase(),
                      13: "".toUpperCase(),
                      14: "".toUpperCase(),
                      15: "".toUpperCase(),
                      16: "".toUpperCase(),
                      17: "".toUpperCase(),
                      18: "".toUpperCase(),
                      19: "".toUpperCase(),
                      20: "".toUpperCase(),
                      21: "".toUpperCase(),
                      22: "".toUpperCase(),
                      23: "".toUpperCase(),
                      24: "".toUpperCase()
                    },
                    keyuses: 1e3,
                    host: ""
                  },
                  onSubmit: function () {
                    var _onSubmit10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee49(formData) {
                      var phraseAsString, keyuses, _host;
                      return _regeneratorRuntime().wrap(function _callee49$(_context49) {
                        while (1) switch (_context49.prev = _context49.next) {
                          case 0:
                            setBeginResyncing(true);
                            _context49.prev = 1;
                            phraseAsString = Object.values(formData.seedPhrase).toString().replaceAll(",", " ");
                            keyuses = formData.keyuses, _host = formData.host;
                            _context49.next = 6;
                            return importSeedPhrase(phraseAsString, _host, keyuses).catch(function (error2) {
                              throw error2;
                            });
                          case 6:
                            _context49.next = 11;
                            break;
                          case 8:
                            _context49.prev = 8;
                            _context49.t0 = _context49["catch"](1);
                            setError(_context49.t0);
                          case 11:
                          case "end":
                            return _context49.stop();
                        }
                      }, _callee49, null, [[1, 8]]);
                    }));
                    function onSubmit(_x99) {
                      return _onSubmit10.apply(this, arguments);
                    }
                    return onSubmit;
                  }(),
                  children: function children(_ref91) {
                    var setFieldValue = _ref91.setFieldValue,
                      dirty = _ref91.dirty,
                      handleSubmit = _ref91.handleSubmit,
                      values = _ref91.values,
                      handleChange = _ref91.handleChange,
                      handleBlur = _ref91.handleBlur,
                      touched = _ref91.touched,
                      submitForm = _ref91.submitForm,
                      isValid = _ref91.isValid,
                      errors = _ref91.errors,
                      validateForm = _ref91.validateForm,
                      setFieldError = _ref91.setFieldError,
                      setFieldTouched = _ref91.setFieldTouched;
                    return /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                      onSubmit: handleSubmit,
                      children: [stepNo === 0 && /* @__PURE__ */jsxRuntimeExports.jsxs(FadeIn, {
                        delay: 0,
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "flex flex-col items-center",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            className: "mb-2",
                            width: "64",
                            height: "64",
                            viewBox: "0 0 64 64",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_1607_21111",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "64",
                              height: "64",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                width: "64",
                                height: "64",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_1607_21111)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M31.9993 44.6146C32.6096 44.6146 33.1211 44.4082 33.5339 43.9954C33.9467 43.5826 34.1531 43.071 34.1531 42.4608C34.1531 41.8506 33.9467 41.339 33.5339 40.9262C33.1211 40.5134 32.6096 40.307 31.9993 40.307C31.389 40.307 30.8775 40.5134 30.4647 40.9262C30.0519 41.339 29.8455 41.8506 29.8455 42.4608C29.8455 43.071 30.0519 43.5826 30.4647 43.9954C30.8775 44.4082 31.389 44.6146 31.9993 44.6146ZM29.9994 34.8711H33.9992V18.8711H29.9994V34.8711ZM32.0037 57.3326C28.4999 57.3326 25.2065 56.6677 22.1235 55.3379C19.0404 54.0081 16.3586 52.2034 14.078 49.9239C11.7974 47.6443 9.99191 44.9636 8.66155 41.882C7.33119 38.8003 6.66602 35.5076 6.66602 32.0038C6.66602 28.4999 7.3309 25.2065 8.66068 22.1235C9.99046 19.0404 11.7951 16.3586 14.0747 14.078C16.3543 11.7974 19.0349 9.99191 22.1166 8.66155C25.1983 7.3312 28.491 6.66602 31.9948 6.66602C35.4986 6.66602 38.7921 7.33091 41.8751 8.66069C44.9582 9.99046 47.64 11.7951 49.9206 14.0747C52.2012 16.3543 54.0067 19.0349 55.337 22.1166C56.6674 25.1983 57.3326 28.491 57.3326 31.9948C57.3326 35.4986 56.6677 38.7921 55.3379 41.8751C54.0081 44.9582 52.2034 47.64 49.9239 49.9206C47.6443 52.2012 44.9636 54.0067 41.882 55.337C38.8003 56.6674 35.5076 57.3326 32.0037 57.3326Z",
                                fill: "#F4F4F5"
                              })
                            })]
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-2xl mb-8 text-center",
                            children: "Restore without archive file"
                          }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                            className: "mb-6 text-center",
                            children: ["Restoring without an archive file can take much longer to re-sync the chain. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " Please ensure you have a stable internet connection and plug your device into a power source before continuing."]
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          variant: "primary",
                          type: "submit",
                          onClick: function onClick() {
                            return setStepNo(1);
                          },
                          children: "Continue"
                        })]
                      }), stepNo === 1 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                        nav: /* @__PURE__ */jsxRuntimeExports.jsxs(Button, {
                          onClick: function onClick() {
                            setStepNo(0);
                            setNoHaveArchive(false);
                          },
                          extraClass: "w-max !bg-transparent text-white border-b-1 flex items-center hover:opacity-80",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            width: "16",
                            height: "17",
                            viewBox: "0 0 16 17",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_1546_42097",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "16",
                              height: "17",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                y: "0.5",
                                width: "16",
                                height: "16",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_1546_42097)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M6.39969 14.6685L0.230469 8.4993L6.39969 2.33008L7.29582 3.22621L2.02275 8.4993L7.29582 13.7724L6.39969 14.6685Z",
                                fill: "#F9F9FA"
                              })
                            })]
                          }), "Cancel"]
                        }),
                        main: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("h1", {
                            className: "text-2xl mb-8 text-center",
                            children: ["Enter your ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " 24-word seed phrase", " "]
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("ul", {
                            className: "grid grid-cols-2 lg:grid-cols-4 gap-2 mb-4",
                            children: values.seedPhrase && Object.keys(values.seedPhrase).map(function (seed) {
                              return /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                                className: "relative",
                                children: /* @__PURE__ */jsxRuntimeExports.jsx(Autocomplete, {
                                  onPaste: function onPaste(e) {
                                    return handlePaste(e, setFieldValue, validateForm, setFieldError, setFieldTouched);
                                  },
                                  extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                                  disabled: false,
                                  placeholder: "",
                                  type: "text",
                                  value: values.seedPhrase[seed],
                                  id: "seedPhrase.".concat(seed),
                                  name: "seedPhrase.".concat(seed),
                                  suggestions: bip39,
                                  onChange: function onChange(value) {
                                    return setFieldValue("seedPhrase.".concat(seed), value);
                                  },
                                  onBlur: handleBlur,
                                  error: getIn$1(touched, "seedPhrase.".concat(seed)) && getIn$1(errors, "seedPhrase.".concat(seed)) ? getIn$1(errors, "seedPhrase.".concat(seed)) : false,
                                  startIcon: /* @__PURE__ */jsxRuntimeExports.jsx("h4", {
                                    className: "absolute top-[15px] left-[15px] ".concat(getIn$1(touched, "seedPhrase.".concat(seed)) && getIn$1(errors, "seedPhrase.".concat(seed)) ? "fa-error" : "fa", " color-core-grey text-base z-20"),
                                    children: seed
                                  })
                                })
                              }, seed);
                            })
                          }), dirty && !errors.seedPhrase && /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                            delay: 50,
                            children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                              onClick: function onClick() {
                                return setStepNo(2);
                              },
                              children: "I'm ready"
                            })
                          })]
                        }),
                        primary: null,
                        secondary: null
                      }), document.body), stepNo === 2 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                        main: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-2xl mb-8 text-center",
                            children: "Final step"
                          }), /* @__PURE__ */jsxRuntimeExports.jsxs("span", {
                            className: "mb-2 flex gap-2 items-center mt-2",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                              className: "text-left",
                              children: "Archive host"
                            }), !tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                              className: "w-4 h-4",
                              onClick: function onClick() {
                                return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                  host: true
                                }));
                              },
                              alt: "tooltip",
                              src: "./assets/help_filled.svg"
                            }), !!tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                              className: "w-4 h-4",
                              onClick: function onClick() {
                                return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                  host: false
                                }));
                              },
                              alt: "tooltip-dismiss",
                              src: "./assets/cancel_filled.svg"
                            })]
                          }), tooltip.host && /* @__PURE__ */jsxRuntimeExports.jsx(Tooltip, {
                            onClick: function onClick() {
                              return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                host: false
                              }));
                            },
                            content: "Enter an ip:port of the archive node to sync from.",
                            position: 75
                          }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                            extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                            disabled: false,
                            placeholder: "",
                            type: "text",
                            value: values.host,
                            id: "host",
                            name: "host",
                            onChange: handleChange,
                            onBlur: handleBlur,
                            error: errors.host ? errors.host : false
                          }), /* @__PURE__ */jsxRuntimeExports.jsxs("span", {
                            className: "mb-2 flex gap-2 items-center mt-2",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                              className: "text-left",
                              children: "Key uses"
                            }), !tooltip.keyuses && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                              className: "w-4 h-4",
                              onClick: function onClick() {
                                return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                  keyuses: true
                                }));
                              },
                              alt: "tooltip",
                              src: "./assets/help_filled.svg"
                            }), !!tooltip.keyuses && /* @__PURE__ */jsxRuntimeExports.jsx("img", {
                              className: "w-4 h-4",
                              onClick: function onClick() {
                                return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                  keyuses: false
                                }));
                              },
                              alt: "tooltip-dismiss",
                              src: "./assets/cancel_filled.svg"
                            })]
                          }), tooltip.keyuses && /* @__PURE__ */jsxRuntimeExports.jsx(Tooltip, {
                            onClick: function onClick() {
                              return setTooltip(_objectSpread(_objectSpread({}, tooltip), {}, {
                                keyuses: false
                              }));
                            },
                            content: "How many times at most you used your keys. Your keys are used for signing every transaction you make. Every time you import your seed phrase this needs to be higher.",
                            position: 75
                          }), /* @__PURE__ */jsxRuntimeExports.jsx(Input, {
                            extraClass: "focus:bg-white focus:text-black focus:border focus:border-[#464C4F] focus:font-bold",
                            disabled: false,
                            placeholder: "default 1000",
                            type: "text",
                            value: values.keyuses,
                            id: "keyuses",
                            name: "keyuses",
                            onChange: handleChange,
                            onBlur: handleBlur,
                            error: errors.keyuses ? errors.keyuses : false
                          }), values.keyuses && values.keyuses < 1e3 && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-sm mt-2 opacity-50",
                            children: "We suggest for you to use 1000 as a safe number"
                          })]
                        }),
                        primary: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                          delay: 50,
                          children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            disabled: !isValid,
                            extraClass: "mt-4",
                            onClick: function onClick() {
                              return setStepNo(3);
                            },
                            children: "Re-sync"
                          })
                        }),
                        secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          extraClass: "mt-4",
                          variant: "tertiary",
                          onClick: function onClick() {
                            return setStepNo(1);
                          },
                          children: "Cancel"
                        })
                      }), document.body), stepNo === 3 && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                        main: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                          children: /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                              className: "text-2xl mb-8 text-center",
                              children: "Wipe this node?"
                            }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                              className: "text-center mb-4",
                              children: ["This node will be wiped and recreated with the given seed phrase. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " This process can take up to an hour, please connect your device to a power source before you continue."]
                            })]
                          })
                        }),
                        primary: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                          delay: 50,
                          children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            disabled: !isValid,
                            onClick: function onClick() {
                              return submitForm();
                            },
                            children: "Start re-sync"
                          })
                        }),
                        secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          extraClass: "mt-4",
                          variant: "tertiary",
                          onClick: function onClick() {
                            return setStepNo(2);
                          },
                          children: "Cancel"
                        })
                      }), document.body)]
                    });
                  }
                })
              }),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  extraClass: "mt-4",
                  variant: "tertiary",
                  onClick: function onClick() {
                    {
                      stepNo === 0 ? setNoHaveArchive(false) : setStepNo(0);
                    }
                  },
                  children: "Cancel"
                })
              })
            }), document.body), error && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                    id: "mask0_594_13339",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "64",
                    height: "64",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                      width: "64",
                      height: "64",
                      fill: "#D9D9D9"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                    mask: "url(#mask0_594_13339)",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                      fill: "#F4F4F5"
                    })
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-8 text-center",
                  children: "Hmm.. something went wrong."
                }), typeof error === "string" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                  children: typeof error.includes !== "undefined" && error.toString().includes("GZIP") ? "Invalid password." : typeof error.includes !== "undefined" && error.toString().includes("connectdata") ? "Host is invalid." : typeof error.includes !== "undefined" && error.toString().includes("Incorrect Password!") ? "Incorrect password!" : error.toString()
                }), _typeof2(error) === "object" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                  children: JSON.stringify(error)
                })]
              }),
              primary: null,
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "tertiary",
                onClick: function onClick() {
                  setError(false);
                  setBeginResyncing(false);
                },
                children: "Cancel"
              })
            }), document.body), beginResyncing && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              size: "lg",
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col align-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx(Lottie, {
                  className: "mb-4 inline",
                  width: 4,
                  height: 4,
                  style: {
                    maxWidth: 80,
                    alignSelf: "center"
                  },
                  animationData: Loading
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-8 text-center",
                  children: "Re-syncing"
                }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                  className: "mb-8 text-center",
                  children: ["Please don’t leave this screen whilst the chain is re-syncing.", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Your node will shutdown once it is complete."]
                }), /* @__PURE__ */jsxRuntimeExports.jsx(Logs, {})]
              }),
              primary: null,
              secondary: null
            }), document.body), MDSShutdown && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
              bg: "primary",
              main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "flex flex-col items-center justify-center",
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                  className: "mb-3 inline",
                  width: "64",
                  height: "64",
                  viewBox: "0 0 64 64",
                  fill: "none",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                    id: "mask0_1102_25908",
                    maskUnits: "userSpaceOnUse",
                    x: "0",
                    y: "0",
                    width: "64",
                    height: "64",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                      width: "64",
                      height: "64",
                      fill: "#D9D9D9"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                    mask: "url(#mask0_1102_25908)",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      d: "M28.2157 43.3436L46.1438 25.4154L43.3336 22.6052L28.2157 37.7232L20.6157 30.1232L17.8055 32.9334L28.2157 43.3436ZM32.0047 57.3333C28.5009 57.3333 25.2075 56.6684 22.1245 55.3386C19.0414 54.0088 16.3596 52.2042 14.079 49.9246C11.7984 47.645 9.99288 44.9644 8.66253 41.8827C7.33217 38.801 6.66699 35.5083 6.66699 32.0045C6.66699 28.5007 7.33188 25.2072 8.66166 22.1242C9.99144 19.0411 11.7961 16.3593 14.0757 14.0788C16.3553 11.7981 19.0359 9.99264 22.1176 8.66228C25.1992 7.33193 28.492 6.66675 31.9958 6.66675C35.4996 6.66675 38.793 7.33164 41.8761 8.66142C44.9591 9.9912 47.641 11.7959 49.9215 14.0754C52.2022 16.355 54.0076 19.0357 55.338 22.1174C56.6684 25.199 57.3335 28.4917 57.3335 31.9956C57.3335 35.4994 56.6686 38.7928 55.3389 41.8758C54.0091 44.9589 52.2044 47.6407 49.9249 49.9213C47.6453 52.2019 44.9646 54.0074 41.8829 55.3378C38.8013 56.6681 35.5085 57.3333 32.0047 57.3333Z",
                      fill: "#F4F4F5"
                    })
                  })]
                }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                  className: "text-2xl mb-4 font-semibold text-center",
                  children: "Seed phrase imported"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "font-medium mb-6 mt-6 text-center",
                  children: "Your node will shutdown, restart it for the restore to take effect."
                })]
              }),
              secondary: /* @__PURE__ */jsxRuntimeExports.jsx("div", {}),
              primary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                variant: "primary",
                onClick: function onClick() {
                  if (window.navigator.userAgent.includes("Minima Browser")) {
                    return Android.shutdownMinima();
                  }
                  return window.close();
                },
                children: "Close application"
              })
            }), document.body), /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
              isOpen: true,
              delay: 0,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "flex flex-col h-full bg-black px-4 pb-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col h-full",
                  children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                    onClickHandler: function onClickHandler() {
                      return navigate("/dashboard/archivereset");
                    },
                    title: "Archive Reset"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mt-6 text-2xl mb-8 text-left",
                    children: "Import seed phrase"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mb-4",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "mb-3 text-left",
                      children: ["If you have lost access to your node or started a new node, you can restore your wallet using just your seed phrase. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "You will need:", /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                        className: "list-disc list-inside mb-4",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          className: "pt-4 pl-2.5",
                          children: "Your 24 word seed phrase"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          className: "pl-2.5",
                          children: "An archive file or archive host"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          className: "pl-2.5",
                          children: "Checking the battery settings for the Minima app to ensure it is allowed to run in the background"
                        })]
                      }), "The archive file will be used to sync your node to the chain's top block and must be recently extracted from an archive node."]
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "text-left flex gap-2 mb-8",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                      className: "flex-none w-7",
                      xmlns: "http://www.w3.org/2000/svg",
                      width: "48",
                      height: "24",
                      viewBox: "0 0 24 24",
                      fill: "none",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("circle", {
                        cx: "12",
                        cy: "12",
                        r: "8",
                        fill: "#08090B"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                        id: "mask0_1607_18879",
                        maskUnits: "userSpaceOnUse",
                        x: "0",
                        y: "0",
                        width: "24",
                        height: "24",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                          width: "24",
                          height: "24",
                          fill: "#D9D9D9"
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                        mask: "url(#mask0_1607_18879)",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                          d: "M12 16.7307C12.2288 16.7307 12.4207 16.6533 12.5755 16.4985C12.7303 16.3437 12.8077 16.1519 12.8077 15.9231C12.8077 15.6942 12.7303 15.5024 12.5755 15.3476C12.4207 15.1928 12.2288 15.1154 12 15.1154C11.7711 15.1154 11.5793 15.1928 11.4245 15.3476C11.2697 15.5024 11.1923 15.6942 11.1923 15.9231C11.1923 16.1519 11.2697 16.3437 11.4245 16.4985C11.5793 16.6533 11.7711 16.7307 12 16.7307ZM11.25 13.0769H12.75V7.0769H11.25V13.0769ZM12.0017 21.5C10.6877 21.5 9.45268 21.2506 8.29655 20.752C7.1404 20.2533 6.13472 19.5765 5.2795 18.7217C4.42427 17.8669 3.74721 16.8616 3.24833 15.706C2.74944 14.5504 2.5 13.3156 2.5 12.0017C2.5 10.6877 2.74933 9.45268 3.248 8.29655C3.74667 7.1404 4.42342 6.13472 5.27825 5.2795C6.1331 4.42427 7.13834 3.74721 8.29398 3.24833C9.44959 2.74944 10.6844 2.5 11.9983 2.5C13.3122 2.5 14.5473 2.74933 15.7034 3.248C16.8596 3.74667 17.8652 4.42342 18.7205 5.27825C19.5757 6.1331 20.2527 7.13834 20.7516 8.29398C21.2505 9.44959 21.5 10.6844 21.5 11.9983C21.5 13.3122 21.2506 14.5473 20.752 15.7034C20.2533 16.8596 19.5765 17.8652 18.7217 18.7205C17.8669 19.5757 16.8616 20.2527 15.706 20.7516C14.5504 21.2505 13.3156 21.5 12.0017 21.5Z",
                          fill: "#E9E9EB"
                        })
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                      className: "text-sm password-label",
                      children: ["If you don't have an archive file, you can visit the archive file channel on our Discord server", " ", /* @__PURE__ */jsxRuntimeExports.jsx("a", {
                        target: "_blank",
                        href: "https://discord.com/invite/minima",
                        children: "https://discord.com/invite/minima"
                      })]
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    extraClass: "mb-4",
                    onClick: function onClick() {
                      return setHaveArchive(true);
                    },
                    children: "I have an archive file"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    variant: "tertiary",
                    onClick: function onClick() {
                      return setNoHaveArchive(true);
                    },
                    children: "I don't have an archive file"
                  })]
                })
              })
            })]
          });
        };
        var IntegrityCheck = function IntegrityCheck() {
          var inputRef = reactExports.useRef(null);
          var _reactExports$useStat211 = reactExports.useState(0),
            _reactExports$useStat212 = _slicedToArray2(_reactExports$useStat211, 2),
            progress = _reactExports$useStat212[0],
            setProgress = _reactExports$useStat212[1];
          var _reactExports$useStat213 = reactExports.useState(false),
            _reactExports$useStat214 = _slicedToArray2(_reactExports$useStat213, 2),
            error = _reactExports$useStat214[0],
            setError = _reactExports$useStat214[1];
          var _reactExports$useStat215 = reactExports.useState("local"),
            _reactExports$useStat216 = _slicedToArray2(_reactExports$useStat215, 2),
            archiveFileSelection = _reactExports$useStat216[0],
            setArchiveFileSelection = _reactExports$useStat216[1];
          var _reactExports$useStat217 = reactExports.useState(0),
            _reactExports$useStat218 = _slicedToArray2(_reactExports$useStat217, 2),
            resetFileField = _reactExports$useStat218[0],
            setResetFileField = _reactExports$useStat218[1];
          var _reactExports$useStat219 = reactExports.useState(false),
            _reactExports$useStat220 = _slicedToArray2(_reactExports$useStat219, 2),
            fileUpload = _reactExports$useStat220[0],
            setFileUpload = _reactExports$useStat220[1];
          var _reactExports$useStat221 = reactExports.useState(null),
            _reactExports$useStat222 = _slicedToArray2(_reactExports$useStat221, 2),
            myIntegrity = _reactExports$useStat222[0],
            setMyIntegrity = _reactExports$useStat222[1];
          var _reactExports$useStat223 = reactExports.useState(null),
            _reactExports$useStat224 = _slicedToArray2(_reactExports$useStat223, 2),
            lastCheck = _reactExports$useStat224[0],
            setLastCheck = _reactExports$useStat224[1];
          var _reactExports$useStat225 = reactExports.useState(false),
            _reactExports$useStat226 = _slicedToArray2(_reactExports$useStat225, 2),
            errorIntegrity = _reactExports$useStat226[0],
            setErrorIntegrity = _reactExports$useStat226[1];
          var _reactExports$useStat227 = reactExports.useState(false),
            _reactExports$useStat228 = _slicedToArray2(_reactExports$useStat227, 2),
            showExternal = _reactExports$useStat228[0],
            setShowExternal = _reactExports$useStat228[1];
          var _reactExports$useStat229 = reactExports.useState(false),
            _reactExports$useStat230 = _slicedToArray2(_reactExports$useStat229, 2),
            loading = _reactExports$useStat230[0],
            setLoading = _reactExports$useStat230[1];
          var _reactExports$useStat231 = reactExports.useState(false),
            _reactExports$useStat232 = _slicedToArray2(_reactExports$useStat231, 2),
            showIntegrity = _reactExports$useStat232[0],
            setShowIntegrity = _reactExports$useStat232[1];
          var _reactExports$useStat233 = reactExports.useState(""),
            _reactExports$useStat234 = _slicedToArray2(_reactExports$useStat233, 2),
            externalPath = _reactExports$useStat234[0],
            setExternalPath = _reactExports$useStat234[1];
          var _reactExports$useStat235 = reactExports.useState(null),
            _reactExports$useStat236 = _slicedToArray2(_reactExports$useStat235, 2),
            inspection = _reactExports$useStat236[0],
            setExternalInspection = _reactExports$useStat236[1];
          var _useAuth8 = useAuth(),
            authNavigate = _useAuth8.authNavigate;
          var _reactExports$useCont32 = reactExports.useContext(appContext),
            getArchives = _reactExports$useCont32.getArchives;
          var _useArchiveContext2 = useArchiveContext(),
            handleUploadContext = _useArchiveContext2.handleUploadContext;
          var _reactExports$useCont33 = reactExports.useContext(appContext),
            setBackButton = _reactExports$useCont33.setBackButton,
            displayHeaderBackButton = _reactExports$useCont33.displayBackButton,
            archives = _reactExports$useCont33.archives;
          reactExports.useEffect(function () {
            setBackButton({
              display: true,
              to: -1,
              title: "Back"
            });
          }, []);
          reactExports.useEffect(function () {
            window.MDS.keypair.get("integritycheck", function (res) {
              if (res.status) {
                var lastCheck2 = JSON.parse(res.value);
                setLastCheck(parseInt(lastCheck2.ms));
                setMyIntegrity(lastCheck2.integrity);
              }
            });
          }, []);
          var handleExternalClick = function handleExternalClick() {
            setShowExternal(true);
          };
          var handleArchiveSelector = function handleArchiveSelector(event) {
            setArchiveFileSelection(event.target.value);
          };
          var handleExternalIntegrityCheck = function handleExternalIntegrityCheck() {
            setLoading(true);
            setError(false);
            window.MDS.cmd("archive action:inspect file:\"".concat(externalPath, "\""), /*#__PURE__*/function () {
              var _ref92 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee50(resp) {
                return _regeneratorRuntime().wrap(function _callee50$(_context50) {
                  while (1) switch (_context50.prev = _context50.next) {
                    case 0:
                      if (!resp.status) {
                        setError(resp.error ? resp.error : "Inspection failed!");
                        setLoading(false);
                      }
                      if (resp.status) {
                        setLoading(false);
                        setExternalInspection(resp.response);
                      }
                    case 2:
                    case "end":
                      return _context50.stop();
                  }
                }, _callee50);
              }));
              return function (_x100) {
                return _ref92.apply(this, arguments);
              };
            }());
          };
          var handleIntegrityCheckOwn = function handleIntegrityCheckOwn() {
            setLastCheck(null);
            setMyIntegrity(null);
            setLoading(true);
            setErrorIntegrity(false);
            window.MDS.cmd("archive action:integrity", function (resp) {
              if (resp.status) {
                var ms = /* @__PURE__ */new Date().getTime();
                window.MDS.keypair.set("integritycheck", JSON.stringify({
                  ms: ms,
                  integrity: _objectSpread({}, resp.response)
                }));
                setLoading(false);
                setLastCheck(ms);
                setMyIntegrity(resp.response);
              }
              if (!resp.status) {
                setLoading(false);
                setErrorIntegrity(resp.error);
              }
            });
          };
          var complete = inspection && inspection.archive.last === "1";
          var warning = inspection && parseInt(inspection.archive.last) > 1;
          var bad = inspection && parseInt(inspection.archive.last) <= 0;
          return /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
            isOpen: true,
            delay: 0,
            children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "flex flex-col h-full bg-black px-4 pb-4",
              children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                to: -1,
                title: "Back"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                className: "mt-6 text-2xl mb-8 text-left bg-inherit",
                children: "Archive integrity check"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "mb-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "mb-3 text-left",
                  children: ["Check the integrity of your archive database. No host is required.", " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "You can either check the integrity of your node's archive database. Or you can check an external file."]
                })
              }), loading && /* @__PURE__ */jsxRuntimeExports.jsx("ul", {
                className: "mb-2",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                  className: "core-black-contrast-2 flex rounded justify-between p-4 ".concat(showIntegrity ? "border-b-0" : ""),
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                    className: "text-base",
                    children: "Checking archive integrity..."
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Lottie, {
                    style: {
                      width: 26,
                      height: 26,
                      alignSelf: "center"
                    },
                    animationData: Loading
                  })]
                })
              }), !loading && myIntegrity && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                  className: "mb-2",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                    className: "core-black-contrast-2 flex rounded justify-between p-4 ".concat(showIntegrity ? "border-b-0" : ""),
                    onClick: function onClick() {
                      return setShowIntegrity(function (prevState) {
                        return !prevState;
                      });
                    },
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                      className: "text-base",
                      children: "Archive Integrity"
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                      className: "".concat(showIntegrity ? "arrow-active" : "arrow-passive"),
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "24",
                      viewBox: "0 -960 960 960",
                      width: "24",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                        d: "M480-345 240-585l56-56 184 184 184-184 56 56-240 240Z",
                        fill: "#d9d9d9"
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                    "aria-expanded": !showIntegrity,
                    className: "accordion-content flex flex-col gap-4 drawer-active",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                      className: "text-left p-4 rounded-b-lg core-black-contrast",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("li", {
                        className: "mb-4",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "".concat(myIntegrity.valid ? "form-success-message" : "text-error"),
                          children: myIntegrity === null || myIntegrity === void 0 ? void 0 : myIntegrity.recommend
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-lg text-white",
                          children: "Archive"
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                        className: "text-black mt-2",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-sm text-white",
                          children: "Blocks"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "text-base text-white opacity-50",
                          children: myIntegrity === null || myIntegrity === void 0 ? void 0 : myIntegrity.archive.blocks
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                        className: "text-black mt-2",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-sm text-white",
                          children: "End"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "text-base text-white opacity-50",
                          children: myIntegrity === null || myIntegrity === void 0 ? void 0 : myIntegrity.archive.end
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                        className: "text-black mt-2",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-sm text-white",
                          children: "Start"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "text-base text-white opacity-50",
                          children: myIntegrity === null || myIntegrity === void 0 ? void 0 : myIntegrity.archive.start
                        })]
                      }), (myIntegrity === null || myIntegrity === void 0 ? void 0 : myIntegrity.cascade.exists) && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          className: "mt-2",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-lg text-white",
                            children: "Cascade"
                          })
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                          className: "text-black mt-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-sm text-white",
                            children: "Exists"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-base text-white opacity-50",
                            children: myIntegrity !== null && myIntegrity !== void 0 && myIntegrity.cascade.exists ? "True" : "False"
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                          className: "text-black mt-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-sm text-white",
                            children: "Tip"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-base text-white opacity-50",
                            children: myIntegrity === null || myIntegrity === void 0 ? void 0 : myIntegrity.cascade.tip
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                          className: "text-black mt-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-sm text-white",
                            children: "Start"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-base text-white opacity-50",
                            children: myIntegrity === null || myIntegrity === void 0 ? void 0 : myIntegrity.cascade.length
                          })]
                        })]
                      })]
                    })
                  })]
                }), lastCheck && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "mb-6",
                  children: /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                    className: "text-sm text-left flex gap-1 items-center",
                    children: ["Your last check was on", " ", format(lastCheck, "yyyy/dd/MM - hh:mm:ss a"), " ", /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                      xmlns: "http://www.w3.org/2000/svg",
                      height: "16",
                      viewBox: "0 -960 960 960",
                      width: "16",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                        fill: "#4FE3C1",
                        d: "M440-120v-319q-64 0-123-24.5T213-533q-45-45-69-104t-24-123v-80h80q63 0 122 24.5T426-746q31 31 51.5 68t31.5 79q5-7 11-13.5t13-13.5q45-45 104-69.5T760-720h80v80q0 64-24.5 123T746-413q-45 45-103.5 69T520-320v200h-80Zm0-400q0-48-18.5-91.5T369-689q-34-34-77.5-52.5T200-760q0 48 18 92t52 78q34 34 78 52t92 18Zm80 120q48 0 91.5-18t77.5-52q34-34 52.5-78t18.5-92q-48 0-92 18.5T590-569q-34 34-52 77.5T520-400Zm0 0Zm-80-120Z"
                      })
                    })]
                  })
                })]
              }), !loading && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "core-black-contrast-2 rounded text-left p-4",
                children: [errorIntegrity && errorIntegrity.length && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "text-sm form-error-message text-left mb-4 break-words",
                  children: errorIntegrity
                }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  disabled: loading,
                  onClick: handleIntegrityCheckOwn,
                  extraClass: "core-black-contrast-1 mb-4",
                  children: "Check my integrity"
                }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  onClick: handleExternalClick,
                  variant: "primary",
                  children: "Check external"
                })]
              }), showExternal && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "absolute top-[54px] left-0 right-0 bottom-0",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "grid grid-cols-[1fr_minmax(0,_560px)_1fr] grid-rows-1 bg-black h-full",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {}), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "flex justify-center items-center",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "core-black-contrast p-4 rounded w-full mx-4",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsxs("h1", {
                        className: "text-2xl mb-12 flex items-center justify-between",
                        children: [!loading && "External integrity check", loading && "Inspecting file...", loading && /* @__PURE__ */jsxRuntimeExports.jsx(Lottie, {
                          style: {
                            width: 26,
                            height: 26,
                            alignSelf: "center"
                          },
                          animationData: Loading
                        }), !loading && /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                          className: "hover:cursor-pointer",
                          onClick: function onClick() {
                            setShowExternal(false);
                          },
                          width: "16",
                          height: "17",
                          viewBox: "0 0 16 17",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                            d: "M1.23077 16.5L0 15.2692L6.76923 8.5C4.12568 5.85645 2.64355 4.37432 0 1.73077L1.23077 0.5L8 7.26923L14.7692 0.5L16 1.73077L9.23077 8.5L16 15.2692L14.7692 16.5L8 9.73077L1.23077 16.5Z",
                            fill: "#F9F9FA"
                          })
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsx(List, {
                        disabled: loading,
                        options: archives,
                        setForm: function () {
                          var _setForm5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee51(option) {
                            return _regeneratorRuntime().wrap(function _callee51$(_context51) {
                              while (1) switch (_context51.prev = _context51.next) {
                                case 0:
                                  setLoading(true);
                                  _context51.next = 3;
                                  return getPath("/archives/" + option).then(function (path) {
                                    setExternalPath(path);
                                    setLoading(false);
                                  }).catch(function (err) {
                                    return setError(err);
                                  });
                                case 3:
                                case "end":
                                  return _context51.stop();
                              }
                            }, _callee51);
                          }));
                          function setForm(_x101) {
                            return _setForm5.apply(this, arguments);
                          }
                          return setForm;
                        }()
                      }), !loading && error && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "text-sm form-error-message text-left mb-4 break-words mt-4",
                        children: error
                      }), !loading && complete && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "px-4 py-3 mb-4 flex rounded gap-4 form-success-box mt-4",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                          className: "flex-none",
                          width: "24",
                          height: "24",
                          viewBox: "0 0 24 24",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("circle", {
                            cx: "12",
                            cy: "12",
                            r: "8",
                            fill: "white"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                            id: "mask0_1546_39376",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "24",
                            height: "24",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                              width: "24",
                              height: "24",
                              fill: "#D9D9D9"
                            })
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                            mask: "url(#mask0_1546_39376)",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M10.5061 16.4777L17.583 9.40081L16.4737 8.29152L10.5061 14.2591L7.50607 11.2591L6.39677 12.3684L10.5061 16.4777ZM12.0018 22C10.6187 22 9.31863 21.7375 8.10165 21.2126C6.88464 20.6877 5.82603 19.9753 4.9258 19.0755C4.02555 18.1757 3.31285 17.1175 2.78771 15.9011C2.26257 14.6846 2 13.3849 2 12.0018C2 10.6187 2.26246 9.31863 2.78737 8.10165C3.31228 6.88464 4.02465 5.82603 4.92448 4.9258C5.82433 4.02555 6.88248 3.31286 8.09894 2.78771C9.31538 2.26257 10.6151 2 11.9982 2C13.3813 2 14.6814 2.26246 15.8984 2.78737C17.1154 3.31229 18.174 4.02465 19.0742 4.92448C19.9745 5.82433 20.6871 6.88248 21.2123 8.09894C21.7374 9.31538 22 10.6151 22 11.9982C22 13.3813 21.7375 14.6814 21.2126 15.8984C20.6877 17.1154 19.9753 18.174 19.0755 19.0742C18.1757 19.9745 17.1175 20.6871 15.9011 21.2123C14.6846 21.7374 13.3849 22 12.0018 22Z",
                              fill: "#00CBB6"
                            })
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "text-sm my-auto text-left text-black",
                          children: "This archive file contains no errors."
                        })]
                      }), !loading && warning && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "px-4 py-3 rounded mb-4 flex gap-4 form-info-box mt-4",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                          className: "flex-none",
                          width: "20",
                          height: "20",
                          viewBox: "0 0 20 20",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                            d: "M9.99998 14.7307C10.2288 14.7307 10.4207 14.6533 10.5755 14.4985C10.7303 14.3437 10.8077 14.1519 10.8077 13.9231C10.8077 13.6942 10.7303 13.5024 10.5755 13.3476C10.4207 13.1928 10.2288 13.1154 9.99998 13.1154C9.77113 13.1154 9.5793 13.1928 9.4245 13.3476C9.2697 13.5024 9.1923 13.6942 9.1923 13.9231C9.1923 14.1519 9.2697 14.3437 9.4245 14.4985C9.5793 14.6533 9.77113 14.7307 9.99998 14.7307ZM9.25 11.0769H10.75V5.0769H9.25V11.0769ZM10.0017 19.5C8.68772 19.5 7.45268 19.2506 6.29655 18.752C5.1404 18.2533 4.13472 17.5765 3.2795 16.7217C2.42427 15.8669 1.74721 14.8616 1.24833 13.706C0.749442 12.5504 0.5 11.3156 0.5 10.0017C0.5 8.68772 0.749334 7.45268 1.248 6.29655C1.74667 5.1404 2.42342 4.13472 3.27825 3.2795C4.1331 2.42427 5.13834 1.74721 6.29398 1.24833C7.44959 0.749443 8.68437 0.5 9.9983 0.5C11.3122 0.5 12.5473 0.749334 13.7034 1.248C14.8596 1.74667 15.8652 2.42342 16.7205 3.27825C17.5757 4.1331 18.2527 5.13834 18.7516 6.29398C19.2505 7.44959 19.5 8.68437 19.5 9.9983C19.5 11.3122 19.2506 12.5473 18.752 13.7034C18.2533 14.8596 17.5765 15.8652 16.7217 16.7205C15.8669 17.5757 14.8616 18.2527 13.706 18.7516C12.5504 19.2505 11.3156 19.5 10.0017 19.5Z",
                            fill: "#FFD028"
                          })
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-sm text-left my-auto text-black",
                          children: ["This archive file can only re-sync from block", " ", inspection.archive.last, " and may not be able to re-sync all coins, consider using a different archive file."]
                        })]
                      }), !loading && bad && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "px-4 py-3 mb-4 rounded flex  gap-4 form-error-box mt-4",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                          className: "flex-none",
                          width: "20",
                          height: "20",
                          viewBox: "0 0 20 20",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                            d: "M6.4 15L10 11.4L13.6 15L15 13.6L11.4 10L15 6.4L13.6 5L10 8.6L6.4 5L5 6.4L8.6 10L5 13.6L6.4 15ZM10 20C8.61667 20 7.31667 19.7375 6.1 19.2125C4.88333 18.6875 3.825 17.975 2.925 17.075C2.025 16.175 1.3125 15.1167 0.7875 13.9C0.2625 12.6833 0 11.3833 0 10C0 8.61667 0.2625 7.31667 0.7875 6.1C1.3125 4.88333 2.025 3.825 2.925 2.925C3.825 2.025 4.88333 1.3125 6.1 0.7875C7.31667 0.2625 8.61667 0 10 0C11.3833 0 12.6833 0.2625 13.9 0.7875C15.1167 1.3125 16.175 2.025 17.075 2.925C17.975 3.825 18.6875 4.88333 19.2125 6.1C19.7375 7.31667 20 8.61667 20 10C20 11.3833 19.7375 12.6833 19.2125 13.9C18.6875 15.1167 17.975 16.175 17.075 17.075C16.175 17.975 15.1167 18.6875 13.9 19.2125C12.6833 19.7375 11.3833 20 10 20Z",
                            fill: "#FF627E"
                          })
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "text-sm text-left my-auto text-black",
                          children: "This archive file contains errors, please use another file."
                        })]
                      }), !loading && (complete || warning) && /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                        className: "text-left p-4 rounded core-black-contrast-2",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("li", {
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-lg text-white",
                            children: "Archive"
                          })
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                          className: "text-black mt-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-sm text-white",
                            children: "First"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-base text-white opacity-50",
                            children: inspection === null || inspection === void 0 ? void 0 : inspection.archive.first
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                          className: "text-black mt-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-sm text-white",
                            children: "Last"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-base text-white opacity-50",
                            children: inspection === null || inspection === void 0 ? void 0 : inspection.archive.last
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                          className: "text-black mt-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                            className: "text-sm text-white",
                            children: "Size"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-base text-white opacity-50",
                            children: inspection === null || inspection === void 0 ? void 0 : inspection.archive.size
                          })]
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs(Button, {
                        onClick: handleExternalIntegrityCheck,
                        disabled: loading || !archives.length,
                        variant: "primary",
                        extraClass: "mt-6 flex justify-center bg-white",
                        children: [!loading && "Check integrity", loading && "Inspecting..."]
                      }), !loading && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("input", {
                          accept: ".gzip",
                          className: "hidden",
                          type: "file",
                          ref: inputRef,
                          onChange: function onChange(e) {
                            var file = e.target.files ? e.target.files[0] : null;
                            if (file) {
                              setError(false);
                              handleUploadContext(file);
                              authNavigate("/upload", [PERMISSIONS["CAN_VIEW_UPLOADING"]], {
                                state: {
                                  justUploading: true
                                }
                              });
                            }
                          }
                        }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          onClick: function onClick() {
                            var _inputRef$current2;
                            return (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.click();
                          },
                          variant: "tertiary",
                          extraClass: "mt-2",
                          children: !archives.length ? "Upload file" : "Upload another file"
                        })]
                      })]
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {})]
                })
              }), document.body), showExternal && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                main: /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
                  initialValues: {
                    file: "",
                    upload: null
                  },
                  onSubmit: function () {
                    var _onSubmit11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee52(formData) {
                      var fullPath, response;
                      return _regeneratorRuntime().wrap(function _callee52$(_context52) {
                        while (1) switch (_context52.prev = _context52.next) {
                          case 0:
                            setLoading(true);
                            _context52.prev = 1;
                            _context52.next = 4;
                            return getPath(formData.file);
                          case 4:
                            fullPath = _context52.sent;
                            _context52.next = 7;
                            return new Promise(function (resolve, reject) {
                              window.MDS.cmd("archive action:inspect file:\"".concat(fullPath, "\""), function (resp) {
                                if (!resp.status) {
                                  reject(resp.error ? resp.error : "Failed to inspect archive");
                                } else {
                                  resolve(resp.response);
                                }
                              });
                            }).catch(function (err) {
                              throw new Error(err);
                            });
                          case 7:
                            response = _context52.sent;
                            setExternalInspection(response);
                            _context52.next = 14;
                            break;
                          case 11:
                            _context52.prev = 11;
                            _context52.t0 = _context52["catch"](1);
                            setError(_context52.t0 instanceof Error ? _context52.t0.message : "An unexpected error occurred");
                          case 14:
                          case "end":
                            return _context52.stop();
                        }
                      }, _callee52, null, [[1, 11]]);
                    }));
                    function onSubmit(_x102) {
                      return _onSubmit11.apply(this, arguments);
                    }
                    return onSubmit;
                  }(),
                  children: function children(_ref93) {
                    var handleSubmit = _ref93.handleSubmit,
                      setFieldValue = _ref93.setFieldValue,
                      errors = _ref93.errors,
                      values = _ref93.values,
                      handleBlur = _ref93.handleBlur,
                      isSubmitting = _ref93.isSubmitting,
                      resetForm = _ref93.resetForm;
                    return /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                      onSubmit: handleSubmit,
                      children: [" ", /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                        className: "text-2xl mb-8 text-center",
                        children: "Select an archive"
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                        className: "mb-6 text-center",
                        children: ["Select a local archive or upload a new one, ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " then you can then inspect its integrity"]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "relative mb-4",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("select", {
                          disabled: fileUpload,
                          defaultValue: archiveFileSelection,
                          onChange: function onChange(e) {
                            handleArchiveSelector(e);
                            resetForm();
                          },
                          className: "p-4 bg-black hover:cursor-pointer rounded w-full hover:opacity-80",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("option", {
                            id: "value",
                            value: "local",
                            children: "Select an internal archive file"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("option", {
                            id: "split",
                            value: "upload",
                            children: "Upload an archive file"
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                          className: "my-auto absolute right-2 top-[12px]",
                          width: "32",
                          height: "33",
                          viewBox: "0 0 32 33",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                            id: "mask0_2226_53255",
                            maskUnits: "userSpaceOnUse",
                            x: "0",
                            y: "0",
                            width: "32",
                            height: "33",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                              y: "0.550781",
                              width: "32",
                              height: "32",
                              fill: "#D9D9D9"
                            })
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                            mask: "url(#mask0_2226_53255)",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              d: "M16.0004 20.6172L8.4668 13.0508L9.6668 11.8844L16.0004 18.2172L22.334 11.8844L23.534 13.0844L16.0004 20.6172Z",
                              fill: "#FaFaFF"
                            })
                          })]
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                        children: [archiveFileSelection === "local" && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx(List, {
                            disabled: archives.length === 0,
                            options: archives,
                            setForm: function () {
                              var _setForm6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee53(option) {
                                return _regeneratorRuntime().wrap(function _callee53$(_context53) {
                                  while (1) switch (_context53.prev = _context53.next) {
                                    case 0:
                                      if (option.length) {
                                        setFieldValue("file", "/archives/" + option);
                                      }
                                    case 1:
                                    case "end":
                                      return _context53.stop();
                                  }
                                }, _callee53);
                              }));
                              function setForm(_x103) {
                                return _setForm6.apply(this, arguments);
                              }
                              return setForm;
                            }()
                          }), archives.length === 0 && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-sm mt-2 text-good",
                            children: "No archives found in your internal files. Upload a new one!"
                          })]
                        }), !fileUpload && archiveFileSelection === "upload" && !values.file.length && /* @__PURE__ */jsxRuntimeExports.jsx(FileChooser, {
                          disabled: isSubmitting,
                          keyValue: resetFileField,
                          handleEndIconClick: function handleEndIconClick() {
                            setResetFileField(function (prev) {
                              return prev + 1;
                            });
                            setFieldValue("upload", void 0);
                          },
                          error: errors.upload && errors.upload ? errors.upload : false,
                          extraClass: "core-grey-20",
                          accept: ".gzip",
                          onChange: function onChange(e) {
                            if (e.target.files) {
                              setFieldValue("upload", e.target.files[0]);
                            }
                          },
                          onBlur: handleBlur,
                          placeholder: "Select file",
                          type: "file",
                          id: "upload",
                          name: "upload",
                          endIcon: values.upload && /* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                            xmlns: "http://www.w3.org/2000/svg",
                            width: "25",
                            height: "24",
                            viewBox: "0 0 25 24",
                            fill: "none",
                            children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                              id: "mask0_645_17003",
                              maskUnits: "userSpaceOnUse",
                              x: "0",
                              y: "0",
                              width: "25",
                              height: "24",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                                x: "0.5",
                                width: "24",
                                height: "24",
                                fill: "#D9D9D9"
                              })
                            }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                              mask: "url(#mask0_645_17003)",
                              children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                                d: "M9.89997 16.1539L12.5 13.5539L15.1 16.1539L16.1538 15.1001L13.5538 12.5001L16.1538 9.90005L15.1 8.84623L12.5 11.4462L9.89997 8.84623L8.84615 9.90005L11.4461 12.5001L8.84615 15.1001L9.89997 16.1539ZM7.8077 20.5C7.30257 20.5 6.875 20.325 6.525 19.975C6.175 19.625 6 19.1975 6 18.6923V6.00005H5V4.50008H9.49997V3.61548H15.5V4.50008H20V6.00005H19V18.6923C19 19.1975 18.825 19.625 18.475 19.975C18.125 20.325 17.6974 20.5 17.1922 20.5H7.8077ZM17.5 6.00005H7.49997V18.6923C7.49997 18.7693 7.53203 18.8398 7.59613 18.9039C7.66024 18.968 7.73077 19.0001 7.8077 19.0001H17.1922C17.2692 19.0001 17.3397 18.968 17.4038 18.9039C17.4679 18.8398 17.5 18.7693 17.5 18.6923V6.00005Z",
                                fill: "#91919D"
                              })
                            })]
                          })
                        }), fileUpload && archiveFileSelection === "upload" && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "core-black-contrast-2 h-[56px] rounded p-4 mt-4 relative",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                            className: "absolute text-left blend z-10 left-[16px] top-[15px] font-black",
                            children: [(Number(progress) * 100).toFixed(0), "%"]
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                            className: "bg-white absolute w-full h-[56px] rounded transition-all origin-left",
                            style: {
                              transform: "scaleX(".concat(progress, ")"),
                              left: "-1px",
                              top: "-2px",
                              width: "calc(100% + 1px)"
                            }
                          })]
                        }), fileUpload && values.upload && /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-sm mt-2",
                          children: ["Uploading", " ", values.upload.name ? values.upload.name + "..." : ""]
                        }), !fileUpload && !!values.file.length && archiveFileSelection === "upload" && /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-sm text-good flex items-center mt-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                            xmlns: "http://www.w3.org/2000/svg",
                            height: "24",
                            viewBox: "0 -960 960 960",
                            width: "24",
                            children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                              fill: "#4FE3C1",
                              d: "M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"
                            })
                          }), values.file.split("/archives/")[1].length ? values.file.split("/archives/")[1] : values.file.split("\\archives\\")[1]]
                        }), values.upload && /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                          children: !fileUpload && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                            variant: "primary",
                            extraClass: "mt-4",
                            onClick: function () {
                              var _onClick11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {
                                return _regeneratorRuntime().wrap(function _callee55$(_context55) {
                                  while (1) switch (_context55.prev = _context55.next) {
                                    case 0:
                                      setFileUpload(true);
                                      setFieldValue("file", "");
                                      window.MDS.file.upload(values.upload, /*#__PURE__*/function () {
                                        var _ref94 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee54(resp) {
                                          var fileName;
                                          return _regeneratorRuntime().wrap(function _callee54$(_context54) {
                                            while (1) switch (_context54.prev = _context54.next) {
                                              case 0:
                                                if (resp.allchunks >= 10) {
                                                  setProgress(resp.chunk / resp.allchunks);
                                                }
                                                fileName = resp.filename;
                                                if (resp.allchunks === resp.chunk) {
                                                  setFileUpload(false);
                                                  window.MDS.file.move("/fileupload/" + fileName, "/archives/" + fileName, function (resp2) {
                                                    if (resp2.status) {
                                                      setFieldValue("file", "/archives/" + fileName);
                                                      setFieldValue("upload", void 0);
                                                      setFileUpload(false);
                                                      getArchives();
                                                    }
                                                  });
                                                }
                                              case 3:
                                              case "end":
                                                return _context54.stop();
                                            }
                                          }, _callee54);
                                        }));
                                        return function (_x104) {
                                          return _ref94.apply(this, arguments);
                                        };
                                      }());
                                    case 3:
                                    case "end":
                                      return _context55.stop();
                                  }
                                }, _callee55);
                              }));
                              function onClick() {
                                return _onClick11.apply(this, arguments);
                              }
                              return onClick;
                            }(),
                            children: "Upload"
                          })
                        }), values.file && values.file.length > 0 && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          type: "submit",
                          variant: "primary",
                          extraClass: "mt-4",
                          children: "Inspect integrity"
                        }), !fileUpload && archiveFileSelection === "upload" && !!values.file.length && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                          onClick: function onClick() {
                            return setFieldValue("file", "");
                          },
                          variant: "tertiary",
                          extraClass: "mt-4",
                          children: "Upload a different file"
                        })]
                      })]
                    });
                  }
                }),
                primary: null,
                secondary: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                  children: !fileUpload && /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    extraClass: "mt-4",
                    onClick: function onClick() {
                      return setShowExternal(false);
                    },
                    variant: "tertiary",
                    children: "Cancel"
                  })
                })
              }), document.body), error && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col items-center",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("svg", {
                    className: "mb-3 inline",
                    width: "64",
                    height: "64",
                    viewBox: "0 0 64 64",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("mask", {
                      id: "mask0_594_13339",
                      maskUnits: "userSpaceOnUse",
                      x: "0",
                      y: "0",
                      width: "64",
                      height: "64",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("rect", {
                        width: "64",
                        height: "64",
                        fill: "#D9D9D9"
                      })
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("g", {
                      mask: "url(#mask0_594_13339)",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                        d: "M31.9998 44.6151C32.61 44.6151 33.1216 44.4087 33.5344 43.9959C33.9472 43.5831 34.1536 43.0715 34.1536 42.4613C34.1536 41.851 33.9472 41.3395 33.5344 40.9267C33.1216 40.5139 32.61 40.3075 31.9998 40.3075C31.3895 40.3075 30.878 40.5139 30.4652 40.9267C30.0524 41.3395 29.846 41.851 29.846 42.4613C29.846 43.0715 30.0524 43.5831 30.4652 43.9959C30.878 44.4087 31.3895 44.6151 31.9998 44.6151ZM29.9998 34.8716H33.9997V18.8716H29.9998V34.8716ZM32.0042 57.333C28.5004 57.333 25.207 56.6682 22.124 55.3384C19.0409 54.0086 16.3591 52.2039 14.0785 49.9244C11.7979 47.6448 9.99239 44.9641 8.66204 41.8824C7.33168 38.8008 6.6665 35.5081 6.6665 32.0042C6.6665 28.5004 7.33139 25.207 8.66117 22.124C9.99095 19.0409 11.7956 16.3591 14.0752 14.0785C16.3548 11.7979 19.0354 9.9924 22.1171 8.66204C25.1987 7.33168 28.4915 6.6665 31.9953 6.6665C35.4991 6.6665 38.7926 7.3314 41.8756 8.66117C44.9586 9.99095 47.6405 11.7956 49.921 14.0752C52.2017 16.3548 54.0072 19.0354 55.3375 22.1171C56.6679 25.1988 57.333 28.4915 57.333 31.9953C57.333 35.4991 56.6682 38.7925 55.3384 41.8756C54.0086 44.9586 52.2039 47.6405 49.9244 49.921C47.6448 52.2017 44.9641 54.0072 41.8824 55.3375C38.8008 56.6679 35.5081 57.333 32.0042 57.333Z",
                        fill: "#F4F4F5"
                      })
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                    className: "text-2xl mb-8 text-center",
                    children: "Hmm.. something went wrong."
                  }), typeof error === "string" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                    children: error.includes("GZIP") ? "Invalid password." : error.includes("connectdata") ? "Host is invalid." : error.includes("Incorrect Password!") ? "Incorrect password!" : error
                  }), _typeof2(error) === "object" && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                    className: "mb-8 text-center text-error truncate whitespace-normal break-all",
                    children: JSON.stringify(error)
                  })]
                }),
                primary: null,
                secondary: /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    extraClass: "mt-4",
                    variant: "tertiary",
                    onClick: function onClick() {
                      setError(false);
                      setLoading(false);
                    },
                    children: "Cancel"
                  })
                })
              }), document.body), loading && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col align-center",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx(Lottie, {
                    className: "mb-4 inline",
                    width: 4,
                    height: 4,
                    style: {
                      maxWidth: 80,
                      alignSelf: "center"
                    },
                    animationData: Loading
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                    className: "text-2xl mb-8 text-center",
                    children: "Inspecting..."
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                    className: "mb-8 text-center",
                    children: ["Please don’t leave this screen whilst the archive is being inspected.", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "This may take a few minutes to finish."]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Logs, {})]
                }),
                primary: null,
                secondary: null
              }), document.body), inspection && reactDomExports.createPortal( /* @__PURE__ */jsxRuntimeExports.jsx(SharedDialog, {
                main: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col items-center",
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                    className: "mb-2",
                    xmlns: "http://www.w3.org/2000/svg",
                    height: "64",
                    viewBox: "0 -960 960 960",
                    width: "64",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                      fill: "#4FE3C1",
                      d: "M440-120v-319q-64 0-123-24.5T213-533q-45-45-69-104t-24-123v-80h80q63 0 122 24.5T426-746q31 31 51.5 68t31.5 79q5-7 11-13.5t13-13.5q45-45 104-69.5T760-720h80v80q0 64-24.5 123T746-413q-45 45-103.5 69T520-320v200h-80Zm0-400q0-48-18.5-91.5T369-689q-34-34-77.5-52.5T200-760q0 48 18 92t52 78q34 34 78 52t92 18Zm80 120q48 0 91.5-18t77.5-52q34-34 52.5-78t18.5-92q-48 0-92 18.5T590-569q-34 34-52 77.5T520-400Zm0 0Zm-80-120Z"
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                    className: "text-2xl mb-4 font-semibold text-center",
                    children: "Inspection completed"
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "w-full bg-black rounded",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                      className: "text-base text-center font-bold core-black-contrast-2 p-4 w-full rounded-t",
                      children: "Your results..."
                    }), (inspection === null || inspection === void 0 ? void 0 : inspection.cascade.exists) && /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                      className: "text-left pt-4 pl-4",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("li", {
                        className: "text-bold",
                        children: "Cascade"
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                        className: "pt-1",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-sm opacity-80",
                          children: "Start"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: inspection === null || inspection === void 0 ? void 0 : inspection.cascade.start
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                        className: "pt-1",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-sm opacity-80",
                          children: "Length"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: inspection === null || inspection === void 0 ? void 0 : inspection.cascade.length
                        })]
                      })]
                    }), !(inspection !== null && inspection !== void 0 && inspection.cascade.exists) && /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                      className: "text-left pt-4 pl-4",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("li", {
                        className: "text-bold",
                        children: "Cascade"
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                        className: "pt-1",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-sm opacity-80",
                          children: "Exists"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: "False"
                        })]
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("ul", {
                      className: "pt-4 pl-4 pb-4",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("li", {
                        className: "text-left text-bold",
                        children: "Archive"
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                        className: "pt-1",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-sm opacity-80",
                          children: "First"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: inspection === null || inspection === void 0 ? void 0 : inspection.archive.first
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                        className: "pt-1",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-sm opacity-80",
                          children: "Last"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: inspection === null || inspection === void 0 ? void 0 : inspection.archive.last
                        })]
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                        className: "pt-1",
                        children: [/* @__PURE__ */jsxRuntimeExports.jsx("h1", {
                          className: "text-sm opacity-80",
                          children: "Size"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: inspection === null || inspection === void 0 ? void 0 : inspection.archive.size
                        })]
                      })]
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                    extraClass: "mt-4",
                    onClick: function onClick() {
                      setLoading(false);
                      setExternalInspection(false);
                    },
                    children: "Inspect another file"
                  })]
                }),
                primary: null,
                secondary: /* @__PURE__ */jsxRuntimeExports.jsx(Button, {
                  extraClass: "mt-4",
                  variant: "tertiary",
                  onClick: function onClick() {
                    setLoading(false);
                    setShowExternal(false);
                    setExternalInspection(false);
                  },
                  children: "Done"
                })
              }), document.body)]
            })
          });
        };
        var ManageSeedPhrase = function ManageSeedPhrase() {
          var location = useLocation();
          var navigate = useNavigate();
          var _useAuth9 = useAuth(),
            authNavigate = _useAuth9.authNavigate;
          var _reactExports$useCont34 = reactExports.useContext(appContext),
            vaultLocked = _reactExports$useCont34.vaultLocked,
            setBackButton = _reactExports$useCont34.setBackButton,
            displayHeaderBackButton = _reactExports$useCont34.displayBackButton;
          reactExports.useEffect(function () {
            setBackButton({
              display: true,
              to: "/dashboard",
              title: "Security"
            });
          }, [location]);
          return /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(SlideScreen, {
              display: true,
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: "flex flex-col h-full bg-black px-4 pb-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: "flex flex-col h-full",
                  children: [!displayHeaderBackButton && /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                    to: "/dashboard",
                    title: "Security"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "mt-6 text-2xl mb-8 text-left",
                    children: "Manage seed phrase"
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "core-black-contrast p-4 rounded",
                    children: [!!vaultLocked && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "mb-5 text-left",
                      onClick: function onClick() {
                        return navigate("/dashboard/lockprivatekeys");
                      },
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("a", {
                        className: "hover:cursor-pointer",
                        onClick: function onClick() {
                          return navigate("/dashboard/lockprivatekeys");
                        },
                        children: "Unlock"
                      }), " ", "your node to view your seed phrase."]
                    }), !vaultLocked && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "mb-5 text-left",
                      children: ["If you haven't already, write down your seed phrase and store it in a secure place. ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), " ", /* @__PURE__ */jsxRuntimeExports.jsx("br", {}), "Your seed phrase allows you to recover your coins if you lose access to your node and do not have a backup."]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      onClick: function onClick() {
                        if (!vaultLocked) {
                          return authNavigate("/dashboard/manageseedphrase/viewseedphrase", [PERMISSIONS.CAN_VIEW_VIEWSEEDPHRASE]);
                        }
                      },
                      className: "text-left relative core-black-contrast-2 py-4 px-5 rounded cursor-pointer",
                      children: ["Show seed phrase", !!vaultLocked && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "form-error-message absolute flex-row gap-2 right-0 top-0 h-full px-5 flex items-center",
                        children: ["Node locked", /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                          xmlns: "http://www.w3.org/2000/svg",
                          width: "16",
                          height: "20",
                          viewBox: "0 0 16 20",
                          fill: "none",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                            d: "M2.3077 19.4999C1.81058 19.4999 1.38502 19.3229 1.03102 18.9689C0.677008 18.6149 0.5 18.1893 0.5 17.6922V8.30765C0.5 7.81053 0.677008 7.38498 1.03102 7.03098C1.38502 6.67696 1.81058 6.49995 2.3077 6.49995H3.5V4.49995C3.5 3.25125 3.93782 2.18908 4.81345 1.31345C5.6891 0.437817 6.75127 0 7.99997 0C9.24867 0 10.3108 0.437817 11.1865 1.31345C12.0621 2.18908 12.5 3.25125 12.5 4.49995V6.49995H13.6922C14.1894 6.49995 14.6149 6.67696 14.9689 7.03098C15.3229 7.38498 15.5 7.81053 15.5 8.30765V17.6922C15.5 18.1893 15.3229 18.6149 14.9689 18.9689C14.6149 19.3229 14.1894 19.4999 13.6922 19.4999H2.3077ZM7.99997 14.7499C8.48587 14.7499 8.89901 14.5797 9.23938 14.2393C9.57976 13.899 9.74995 13.4858 9.74995 12.9999C9.74995 12.514 9.57976 12.1009 9.23938 11.7605C8.89901 11.4201 8.48587 11.25 7.99997 11.25C7.51407 11.25 7.10094 11.4201 6.76058 11.7605C6.42019 12.1009 6.25 12.514 6.25 12.9999C6.25 13.4858 6.42019 13.899 6.76058 14.2393C7.10094 14.5797 7.51407 14.7499 7.99997 14.7499ZM4.99997 6.49995H11V4.49995C11 3.66662 10.7083 2.95828 10.125 2.37495C9.54164 1.79162 8.83331 1.49995 7.99997 1.49995C7.16664 1.49995 6.45831 1.79162 5.87497 2.37495C5.29164 2.95828 4.99997 3.66662 4.99997 4.49995V6.49995Z",
                            fill: "#FF627E"
                          })
                        })]
                      }), !vaultLocked && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "absolute right-0 top-0 h-full px-5 flex items-center",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("svg", {
                          width: "8",
                          height: "12",
                          viewBox: "0 0 8 12",
                          fill: "none",
                          xmlns: "http://www.w3.org/2000/svg",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("path", {
                            d: "M7.04984 5.99995L1.37504 11.6501L0.500244 10.7501L5.24984 5.99995L0.500244 1.24975L1.40024 0.349747L7.04984 5.99995Z",
                            fill: "#F4F4F5"
                          })
                        })
                      })]
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "flex flex-col gap-5",
                    children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                      className: "text-left",
                      children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        children: !vaultLocked && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          className: "text-left mt-4",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-sm password-label mr-4 ml-4 mb-1",
                            children: "Do not share your seed phrase with anyone. It can be used to access your coins regardless of whether your node is locked."
                          })
                        })
                      })
                    })
                  })]
                })
              })
            })
          });
        };
        var Navigation = function Navigation() {
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
              location: "host",
              extraClass: "mb-3",
              children: "QuickSync"
            }), /* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
              location: "fromseedphrase",
              extraClass: "mb-3",
              children: "Import Seed Phrase"
            }), /* @__PURE__ */jsxRuntimeExports.jsx(HomeScreenNavigation, {
              location: "frombackup",
              extraClass: "mb-3",
              children: "Import Backup"
            })]
          });
        };
        var QuickSync = function QuickSync() {
          var location = useLocation();
          var isChildRoute = ["/dashboard/quicksync/host", "/dashboard/quicksync/fromseedphrase", "/dashboard/quicksync/frombackup"].includes(location.pathname);
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "mx-4",
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "grid grid-cols-[auto_1fr] mb-4",
              children: /* @__PURE__ */jsxRuntimeExports.jsx(BackButton, {
                title: "Back",
                to: -1
              })
            }), /* @__PURE__ */jsxRuntimeExports.jsx("h1", {
              className: "text-2xl mb-5",
              children: "QuickSync & Restore"
            }), !isChildRoute && /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                className: "mb-5",
                children: "Choose an option:"
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Navigation, {})]
            }), /* @__PURE__ */jsxRuntimeExports.jsx(Outlet, {})]
          });
        };
        var DialogLogs = function DialogLogs() {
          var _reactExports$useCont35 = reactExports.useContext(appContext),
            cliLogs = _reactExports$useCont35.logs,
            setLogs = _reactExports$useCont35.setLogs;
          var logsEndRef = reactExports.useRef(null);
          var scrollToBottom = function scrollToBottom() {
            var _logsEndRef$current;
            (_logsEndRef$current = logsEndRef.current) === null || _logsEndRef$current === void 0 ? void 0 : _logsEndRef$current.scrollIntoView({
              behavior: "smooth"
            });
          };
          reactExports.useEffect(function () {
            setLogs([]);
          }, []);
          reactExports.useEffect(function () {
            scrollToBottom();
          }, [cliLogs]);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [cliLogs.length === 0 && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "grid grid-cols-[1fr_auto] my-3 items-center",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                className: "text-xs animate-pulse",
                children: "Loading logs..."
              }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                className: "text-teal-300 my-auto",
                children: /* @__PURE__ */jsxRuntimeExports.jsx(RefreshIcon, {
                  fill: "currentColor",
                  extraClass: "animate-spin w-[16px]"
                })
              })]
            }), cliLogs.length > 0 && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "my-3",
              children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "grid grid-cols-[1fr_auto_1fr] gap-2",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("hr", {
                  className: "border-sky-400 pb-1 mt-2"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "text-xs text-center text-white font-bold",
                  children: "CLI Logs"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("hr", {
                  className: "border-sky-400 pb-1 mt-2"
                })]
              }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: "bg-[#1B1B1B] rounded-lg px-3 py-3 overflow-auto max-h-[200px] grid gap-2",
                children: [cliLogs.map(function (l) {
                  return /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                    className: "text-xs",
                    children: l
                  }, l);
                }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  ref: logsEndRef
                })]
              })]
            })]
          });
        };
        var Host = function Host() {
          var _reactExports$useStat237 = reactExports.useState(false),
            _reactExports$useStat238 = _slicedToArray2(_reactExports$useStat237, 2),
            f = _reactExports$useStat238[0],
            setF = _reactExports$useStat238[1];
          var _reactExports$useStat239 = reactExports.useState(false),
            _reactExports$useStat240 = _slicedToArray2(_reactExports$useStat239, 2),
            confirm = _reactExports$useStat240[0],
            setConfirm = _reactExports$useStat240[1];
          var _reactExports$useStat241 = reactExports.useState(false),
            _reactExports$useStat242 = _slicedToArray2(_reactExports$useStat241, 2),
            loading = _reactExports$useStat242[0],
            setLoading = _reactExports$useStat242[1];
          var _reactExports$useStat243 = reactExports.useState(false),
            _reactExports$useStat244 = _slicedToArray2(_reactExports$useStat243, 2),
            error = _reactExports$useStat244[0],
            setError = _reactExports$useStat244[1];
          var _reactExports$useStat245 = reactExports.useState(false),
            _reactExports$useStat246 = _slicedToArray2(_reactExports$useStat245, 2),
            shutdown = _reactExports$useStat246[0],
            setShutdown = _reactExports$useStat246[1];
          var DEFAULT = !loading && !error && !shutdown;
          var RESYNCING = loading && !error && !shutdown;
          var ERROR = !loading && error && !shutdown;
          var SUCCESS = !loading && !error && shutdown;
          return /* @__PURE__ */jsxRuntimeExports.jsxs(SlideIn, {
            isOpen: true,
            delay: 0,
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("h3", {
              className: "text-xl mb-2 font-bold",
              children: "QuickSync"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
              children: "QuickSync will restore the coins for this node and re-sync the chain to the latest block."
            }), /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
              validateOnMount: true,
              initialValues: {
                ip: ""
              },
              validationSchema: create$3().shape({
                ip: create$6().matches(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]|65[0-4][0-9][0-9]|6[0-4][0-9][0-9][0-9][0-9]|[1-5](\d){4}|[1-9](\d){0,3})$/, "Invalid IP:Port format").required("IP:Port is required").trim()
              }),
              onSubmit: function () {
                var _onSubmit12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee56(_ref95) {
                  var ip;
                  return _regeneratorRuntime().wrap(function _callee56$(_context56) {
                    while (1) switch (_context56.prev = _context56.next) {
                      case 0:
                        ip = _ref95.ip;
                        setLoading(true);
                        setError(false);
                        _context56.prev = 3;
                        _context56.next = 6;
                        return new Promise(function (resolve, reject) {
                          window.MDS.cmd("megammrsync action:resync host:".concat(ip.trim()), function (resp) {
                            if (!resp.status) reject(resp.error ? resp.error : "Mega node re-sync failed with host:".concat(ip));
                            resolve(resp);
                          });
                        }).catch(function (error2) {
                          throw error2;
                        });
                      case 6:
                        setShutdown(true);
                        setLoading(false);
                        _context56.next = 18;
                        break;
                      case 10:
                        _context56.prev = 10;
                        _context56.t0 = _context56["catch"](3);
                        setLoading(false);
                        if (!(typeof _context56.t0 === "string")) {
                          _context56.next = 15;
                          break;
                        }
                        return _context56.abrupt("return", setError(_context56.t0.includes("Incorrect Password!") ? "Incorrect password!" : _context56.t0));
                      case 15:
                        if (!(_context56.t0 instanceof Error)) {
                          _context56.next = 17;
                          break;
                        }
                        return _context56.abrupt("return", setError(_context56.t0.message));
                      case 17:
                        setError("Host re-sync failed, please try again.");
                      case 18:
                      case "end":
                        return _context56.stop();
                    }
                  }, _callee56, null, [[3, 10]]);
                }));
                function onSubmit(_x105) {
                  return _onSubmit12.apply(this, arguments);
                }
                return onSubmit;
              }(),
              children: function children(_ref96) {
                var handleSubmit = _ref96.handleSubmit,
                  handleChange = _ref96.handleChange,
                  handleBlur = _ref96.handleBlur,
                  errors = _ref96.errors,
                  values = _ref96.values,
                  isValid = _ref96.isValid,
                  submitForm = _ref96.submitForm,
                  isSubmitting = _ref96.isSubmitting;
                return /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                  onSubmit: handleSubmit,
                  className: "my-3 core-black-contrast-2 p-4 rounded ".concat(f && "outline outline-[#1B1B1B]"),
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: " grid grid-rows-[auto_1fr]",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("label", {
                      className: "text-sm mb-3",
                      children: "Enter the IP:Port of a Mega node to QuickSync from"
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                      id: "ip",
                      name: "ip",
                      onChange: handleChange,
                      value: values.ip,
                      onFocus: function onFocus() {
                        return setF(true);
                      },
                      onBlur: function onBlur(e) {
                        handleBlur(e);
                        setF(false);
                      },
                      placeholder: "e.g. 34.32.59.133:9001",
                      className: "truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ".concat(errors.ip && "!outline !outline-[#FF627E]")
                    }), errors.ip && /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                      className: "mt-3 text-[#FF627E]",
                      children: errors.ip
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                    onClick: function onClick() {
                      return setConfirm(true);
                    },
                    type: "button",
                    disabled: !isValid,
                    className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                    children: "Restore"
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(AnimatedDialog, {
                    isOpen: confirm,
                    onClose: function onClose() {
                      return null;
                    },
                    position: "items-start mt-20",
                    extraClass: "max-w-sm mx-auto",
                    dialogStyles: "h-[400px] rounded-lg !shadow-teal-800 !shadow-sm overflow-hidden bg-black",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "h-full",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "flex justify-between items-center pr-4",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          className: "grid grid-cols-[auto_1fr] ml-2",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("h3", {
                            className: "my-auto font-bold ml-2",
                            children: "Host Resync"
                          })
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "px-4 h-full flex flex-col justify-between",
                        children: [DEFAULT && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "text-sm my-3",
                          children: "Are you sure you wish to restore the coins for this node and re-sync to the latest block?"
                        }), SUCCESS && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            children: "Re-sync completed. Please close this screen and re-login to the Minihub."
                          })
                        }), ERROR && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: error.replace("Archive", "")
                        }), RESYNCING && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "animate-pulse",
                            children: "Re-syncing..."
                          }), /* @__PURE__ */jsxRuntimeExports.jsx(DialogLogs, {})]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "flex justify-end mb-4",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {}), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-[auto_1fr] gap-2",
                            children: [!SUCCESS && !RESYNCING && /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                              disabled: isSubmitting,
                              className: "disabled:bg-opacity-10 bg-gray-600 !py-2  font-bold tracking-tighter",
                              type: "button",
                              onClick: function onClick() {
                                return setConfirm(false);
                              },
                              children: "Dismiss"
                            }), /* @__PURE__ */jsxRuntimeExports.jsxs("button", {
                              disabled: isSubmitting,
                              onClick: function onClick() {
                                if (!SUCCESS) {
                                  return submitForm();
                                }
                                if (window.navigator.userAgent.includes("Minima Browser")) {
                                  return Android.shutdownMinima();
                                }
                                return window.close();
                              },
                              type: "button",
                              className: "disabled:bg-opacity-50 font-bold !py-2 text-black bg-violet-300",
                              children: [DEFAULT && "Okay", ERROR && "Re-try", SUCCESS && "Close", RESYNCING && "Re-syncing"]
                            })]
                          })]
                        })]
                      })]
                    })
                  })]
                });
              }
            })]
          });
        };
        var EnterSeedPhrase = function EnterSeedPhrase(_ref97) {
          var formNext = _ref97.formNext;
          var _useFormikContext2 = useFormikContext(),
            values = _useFormikContext2.values,
            setFieldValue = _useFormikContext2.setFieldValue,
            validateForm = _useFormikContext2.validateForm,
            setFieldError = _useFormikContext2.setFieldError,
            setFieldTouched = _useFormikContext2.setFieldTouched,
            touched = _useFormikContext2.touched,
            errors = _useFormikContext2.errors,
            handleBlur = _useFormikContext2.handleBlur;
          var _reactExports$useStat247 = reactExports.useState(3),
            _reactExports$useStat248 = _slicedToArray2(_reactExports$useStat247, 2),
            step = _reactExports$useStat248[0],
            _ = _reactExports$useStat248[1];
          var seeds = Object.keys(values.seedPhrase);
          var handlePaste = /*#__PURE__*/function () {
            var _ref98 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee57(event, setFieldValue2, validateForm2, setFieldError2, setFieldTouched2) {
              var clipboardData, pastedText, isPastedTextASeedPhrase, errors2;
              return _regeneratorRuntime().wrap(function _callee57$(_context57) {
                while (1) switch (_context57.prev = _context57.next) {
                  case 0:
                    clipboardData = event.clipboardData;
                    pastedText = clipboardData.getData("text");
                    isPastedTextASeedPhrase = pastedText.split(" ").length === 24;
                    if (!isPastedTextASeedPhrase) {
                      _context57.next = 12;
                      break;
                    }
                    event.preventDefault();
                    pastedText.split(" ").forEach(function (_seed, index) {
                      return setFieldValue2("seedPhrase.".concat(index + 1), "");
                    });
                    pastedText.split(" ").forEach(function (_seed, index) {
                      return setFieldValue2("seedPhrase.".concat(index + 1), _seed.toUpperCase());
                    });
                    _context57.next = 9;
                    return validateForm2();
                  case 9:
                    errors2 = _context57.sent;
                    if (errors2.seedPhrase) {
                      Object.keys(errors2.seedPhrase).map(function (key) {
                        if (errors2.seedPhrase[key]) {
                          setFieldError2("seedPhrase.".concat(key), errors2.seedPhrase[key]);
                          setFieldTouched2("seedPhrase.".concat(key), errors2.seedPhrase[key]);
                        }
                      });
                    }
                    return _context57.abrupt("return", pastedText);
                  case 12:
                    return _context57.abrupt("return", false);
                  case 13:
                  case "end":
                    return _context57.stop();
                }
              }, _callee57);
            }));
            return function handlePaste(_x106, _x107, _x108, _x109, _x110) {
              return _ref98.apply(this, arguments);
            };
          }();
          var TOUCHED_ALL_SEEDPHRASES = touched.seedPhrase && touched.seedPhrase.length === 25;
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [step === 3 && !!errors.seedPhrase && TOUCHED_ALL_SEEDPHRASES && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
              className: "text-black text-sm bg-yellow-300 rounded p-2 mb-3",
              children: "There is something wrong with your seed phrase, double check that you have entered it correctly."
            }), /* @__PURE__ */jsxRuntimeExports.jsx("ul", {
              className: "grid grid-cols-2 gap-2 mb-4",
              children: values.seedPhrase && seeds.map(function (seed) {
                return /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                  className: "relative",
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(Autocomplete, {
                    onPaste: function onPaste(e) {
                      return handlePaste(e, setFieldValue, validateForm, setFieldError, setFieldTouched);
                    },
                    extraClass: "!bg-[#1B1B1B] focus:!bg-white focus:!text-black focus:border !focus:border-[#464C4F] focus:font-bold",
                    disabled: false,
                    placeholder: "",
                    type: "text",
                    value: values.seedPhrase[seed],
                    id: "seedPhrase.".concat(seed),
                    name: "seedPhrase.".concat(seed),
                    suggestions: bip39,
                    onChange: function onChange(value) {
                      return setFieldValue("seedPhrase.".concat(seed), value);
                    },
                    onBlur: handleBlur,
                    error: getIn$1(touched, "seedPhrase.".concat(seed)) && getIn$1(errors, "seedPhrase.".concat(seed)) ? getIn$1(errors, "seedPhrase.".concat(seed)) : false,
                    startIcon: /* @__PURE__ */jsxRuntimeExports.jsx("h4", {
                      className: "absolute top-[15px] left-[15px] ".concat(getIn$1(touched, "seedPhrase.".concat(seed)) && getIn$1(errors, "seedPhrase.".concat(seed)) ? "fa-error" : "fa", " color-core-grey text-base z-20"),
                      children: seed
                    })
                  })
                }, "seedInputField_".concat(seed));
              })
            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: "mt-3",
              children: /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                disabled: step === 3 && !!errors.seedPhrase || step === 3 && !TOUCHED_ALL_SEEDPHRASES,
                type: "button",
                onClick: function onClick() {
                  return formNext();
                },
                className: "font-bold bg-white text-black disabled:bg-opacity-10 w-full",
                children: "Next"
              })
            })]
          });
        };
        var FromSeedPhrase = function FromSeedPhrase() {
          var _reactExports$useStat249 = reactExports.useState(false),
            _reactExports$useStat250 = _slicedToArray2(_reactExports$useStat249, 2),
            f = _reactExports$useStat250[0],
            setF = _reactExports$useStat250[1];
          var _reactExports$useStat251 = reactExports.useState(1),
            _reactExports$useStat252 = _slicedToArray2(_reactExports$useStat251, 2),
            step = _reactExports$useStat252[0],
            setStep = _reactExports$useStat252[1];
          var _reactExports$useStat253 = reactExports.useState(false),
            _reactExports$useStat254 = _slicedToArray2(_reactExports$useStat253, 2),
            confirm = _reactExports$useStat254[0],
            setConfirm = _reactExports$useStat254[1];
          var _reactExports$useStat255 = reactExports.useState(false),
            _reactExports$useStat256 = _slicedToArray2(_reactExports$useStat255, 2),
            loading = _reactExports$useStat256[0],
            setLoading = _reactExports$useStat256[1];
          var _reactExports$useStat257 = reactExports.useState(false),
            _reactExports$useStat258 = _slicedToArray2(_reactExports$useStat257, 2),
            error = _reactExports$useStat258[0],
            setError = _reactExports$useStat258[1];
          var _reactExports$useStat259 = reactExports.useState(false),
            _reactExports$useStat260 = _slicedToArray2(_reactExports$useStat259, 2),
            shutdown = _reactExports$useStat260[0],
            setShutdown = _reactExports$useStat260[1];
          var DEFAULT = !loading && !error && !shutdown;
          var RESYNCING = loading && !error && !shutdown;
          var ERROR = !loading && error && !shutdown;
          var SUCCESS = !loading && !error && shutdown;
          return /* @__PURE__ */jsxRuntimeExports.jsxs(SlideIn, {
            isOpen: true,
            delay: 0,
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("h3", {
              className: "text-xl mb-2 font-bold",
              children: "Import Seed Phrase with QuickSync"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
              children: "Importing your seed phrase with QuickSync will wipe this node, restore your coins using the seed phrase provided and re-sync the chain to the latest block using the QuickSync host provided."
            }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
              className: "text-center text-violet-300 mt-3",
              children: ["Step ", step, "/4"]
            }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "grid grid-cols-[auto_16px_auto_16px_auto_16px_auto] my-3 text-center items-center",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                onClick: function onClick() {
                  return !RESYNCING && step === 2 ? setStep(1) : null;
                },
                className: "text-xs opacity-50 cursor-pointer ".concat(step === 1 && "opacity-100 text-yellow-300 font-bold", " ").concat(step > 1 && "opacity-100 text-violet-300 font-bold"),
                children: "QuickSync"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                className: "".concat(step > 1 && "text-violet-300 opacity-50"),
                children: /* @__PURE__ */jsxRuntimeExports.jsx(RightArrow, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                onClick: function onClick() {
                  return !RESYNCING && step === 3 ? setStep(2) : null;
                },
                className: "text-xs opacity-50 cursor-pointer ".concat(step === 2 && "opacity-100 text-yellow-300", " ").concat(step > 2 && "opacity-100 text-violet-300 font-bold"),
                children: "Seed Phrase"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                className: "".concat(step > 2 && "text-violet-300 opacity-50"),
                children: /* @__PURE__ */jsxRuntimeExports.jsx(RightArrow, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                onClick: function onClick() {
                  return !RESYNCING && step === 4 ? setStep(3) : null;
                },
                className: "text-xs opacity-50 cursor-pointer ".concat(step === 3 && "opacity-100 text-yellow-300", " ").concat(step > 2 && "opacity-100 text-violet-300 font-bold"),
                children: "Keys"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                className: "".concat(step > 3 && "text-violet-300 opacity-50"),
                children: /* @__PURE__ */jsxRuntimeExports.jsx(RightArrow, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                className: "text-xs opacity-50 cursor-pointer ".concat(step === 4 && "opacity-100 text-yellow-300", " ").concat(step > 3 && "opacity-100 text-violet-300 font-bold"),
                children: "Key Uses"
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
              validateOnMount: true,
              initialValues: {
                ip: "",
                keys: 64,
                keyuses: 1e3,
                seedPhrase: Array.from({
                  length: 24
                }, function (_, i) {
                  return _defineProperty2({}, i + 1, "".toUpperCase());
                }).reduce(function (acc, cur) {
                  return Object.assign(acc, cur);
                }, {})
              },
              validationSchema: create$3().shape({
                ip: create$6().matches(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]|65[0-4][0-9][0-9]|6[0-4][0-9][0-9][0-9][0-9]|[1-5](\d){4}|[1-9](\d){0,3})$/, "Invalid IP:Port format").required("IP:Port is required").trim(),
                seedPhrase: create$3({
                  "1": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "2": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "3": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "4": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "5": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "6": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "7": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "8": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "9": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "10": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "11": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "12": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "13": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "14": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "15": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "16": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "17": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "18": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "19": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "20": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "21": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "22": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "23": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word"),
                  "24": create$6().uppercase().oneOf(bip39, "Invalid word.").required("Looks like you missed a word")
                }),
                keys: create$5().required("This field is required"),
                keyuses: create$5().required("This field is required")
              }),
              onSubmit: function () {
                var _onSubmit13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee58(_ref100) {
                  var ip, seedPhrase, keys, keyuses, phraseAsString;
                  return _regeneratorRuntime().wrap(function _callee58$(_context58) {
                    while (1) switch (_context58.prev = _context58.next) {
                      case 0:
                        ip = _ref100.ip, seedPhrase = _ref100.seedPhrase, keys = _ref100.keys, keyuses = _ref100.keyuses;
                        setLoading(true);
                        setError(false);
                        _context58.prev = 3;
                        phraseAsString = Object.values(seedPhrase).toString().replaceAll(",", " ");
                        _context58.next = 7;
                        return new Promise(function (resolve, reject) {
                          window.MDS.cmd("megammrsync action:resync host:".concat(ip.trim(), " phrase:\"").concat(phraseAsString, "\" keys:").concat(keys, " keyuses:").concat(keyuses), function (resp) {
                            if (!resp.status) reject(resp.error ? resp.error : "Mega node re-sync failed with host:".concat(ip));
                            resolve(resp);
                          });
                        });
                      case 7:
                        setShutdown(true);
                        setLoading(false);
                        _context58.next = 19;
                        break;
                      case 11:
                        _context58.prev = 11;
                        _context58.t0 = _context58["catch"](3);
                        setLoading(false);
                        if (!(typeof _context58.t0 === "string")) {
                          _context58.next = 16;
                          break;
                        }
                        return _context58.abrupt("return", setError(_context58.t0.includes("Incorrect Password!") ? "Incorrect password!" : _context58.t0));
                      case 16:
                        if (!(_context58.t0 instanceof Error)) {
                          _context58.next = 18;
                          break;
                        }
                        return _context58.abrupt("return", setError(_context58.t0.message));
                      case 18:
                        setError("Seed phrase re-sync failed, please try again.");
                      case 19:
                      case "end":
                        return _context58.stop();
                    }
                  }, _callee58, null, [[3, 11]]);
                }));
                function onSubmit(_x111) {
                  return _onSubmit13.apply(this, arguments);
                }
                return onSubmit;
              }(),
              children: function children(_ref101) {
                var handleSubmit = _ref101.handleSubmit,
                  handleChange = _ref101.handleChange,
                  handleBlur = _ref101.handleBlur,
                  errors = _ref101.errors,
                  values = _ref101.values,
                  submitForm = _ref101.submitForm,
                  isSubmitting = _ref101.isSubmitting;
                return /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                  onSubmit: handleSubmit,
                  className: "my-3 core-black-contrast-2 p-4 rounded ".concat(f && "outline outline-none"),
                  children: [step === 1 && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: " grid grid-rows-[auto_1fr]",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("label", {
                      className: "text-sm mb-3",
                      children: "Enter the IP:Port of a Mega node to QuickSync from"
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                      id: "ip",
                      name: "ip",
                      onChange: handleChange,
                      value: values.ip,
                      onFocus: function onFocus() {
                        return setF(true);
                      },
                      onBlur: function onBlur(e) {
                        handleBlur(e);
                        setF(false);
                      },
                      placeholder: "e.g. 34.32.59.133:9001",
                      className: "truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ".concat(errors.ip && "!outline !outline-[#FF627E]")
                    }), errors.ip && /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                      className: "mt-3 text-[#FF627E]",
                      children: errors.ip
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                      onClick: function onClick() {
                        return setStep(2);
                      },
                      disabled: !!errors.ip,
                      type: "button",
                      className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                      children: "Next"
                    })]
                  }), step === 2 && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(EnterSeedPhrase, {
                      formNext: function formNext() {
                        return setStep(function (prevState) {
                          return prevState + 1;
                        });
                      },
                      formPrev: function formPrev() {
                        return setStep(function (prevState) {
                          return prevState - 1;
                        });
                      }
                    })
                  }), step === 3 && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: " grid grid-rows-[auto_1fr]",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("label", {
                        className: "text-sm mb-3",
                        children: "Enter the number of keys (addresses) to create (default is 64)"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                        id: "keys",
                        name: "keys",
                        onChange: handleChange,
                        value: values.keys,
                        onFocus: function onFocus() {
                          return setF(true);
                        },
                        onBlur: function onBlur(e) {
                          handleBlur(e);
                          setF(false);
                        },
                        placeholder: "Number of keys (addresses)",
                        className: "truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ".concat(errors.ip && "!outline !outline-[#FF627E]"),
                        type: "number"
                      }), errors.keys && /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                        className: "mt-3 text-[#FF627E]",
                        children: errors.keys
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "my-2",
                        children: "All Minima nodes are started with 64 addresses by default. If you created more, you can set the number of addresses to create manually here. Note that in future you should always create at least this many addresses to ensure all your coins are recovered."
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                        onClick: function onClick() {
                          return setStep(4);
                        },
                        disabled: !!errors.keys,
                        type: "button",
                        className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                        children: "Next"
                      })]
                    })
                  }), step === 4 && /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: " grid grid-rows-[auto_1fr]",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("label", {
                        className: "text-sm mb-3",
                        children: "Enter the number of key uses"
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                        id: "keyuses",
                        name: "keyuses",
                        onChange: handleChange,
                        value: values.keyuses,
                        onFocus: function onFocus() {
                          return setF(true);
                        },
                        onBlur: function onBlur(e) {
                          handleBlur(e);
                          setF(false);
                        },
                        placeholder: "Number of signatures",
                        className: "truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ".concat(errors.ip && "!outline !outline-[#FF627E]"),
                        type: "number"
                      }), errors.keyuses && /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                        className: "mt-3 text-[#FF627E]",
                        children: errors.keyuses
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                        className: "my-2",
                        children: "Enter the maximum times you have signed a transaction or leave the default if you think you haven't signed over 1000 transactions."
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                        onClick: function onClick() {
                          return setConfirm(true);
                        },
                        disabled: !!errors.keyuses,
                        type: "button",
                        className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                        children: "Next"
                      })]
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(AnimatedDialog, {
                    isOpen: confirm,
                    onClose: function onClose() {
                      return null;
                    },
                    position: "items-start mt-20",
                    extraClass: "max-w-sm mx-auto",
                    dialogStyles: "h-[400px] rounded-lg !shadow-teal-800 !shadow-sm overflow-hidden bg-black",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "h-full",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "flex justify-between items-center pr-4",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          className: "grid grid-cols-[auto_1fr] ml-2",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("h3", {
                            className: "my-auto font-bold ml-2",
                            children: "Seed Phrase Restore"
                          })
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "px-4 h-full flex flex-col justify-between",
                        children: [DEFAULT && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          className: "text-sm my-3",
                          children: "Are you sure you wish to wipe and restore this node to the seed phrase provided? Your coins will be restored and the node will re-sync to the latest block."
                        }), SUCCESS && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: "Re-sync complete. Please close this screen and re-login to the Minihub."
                        }), ERROR && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: error.replace("Archive", "")
                        }), RESYNCING && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "animate-pulse",
                            children: "Re-syncing..."
                          }), /* @__PURE__ */jsxRuntimeExports.jsx(DialogLogs, {})]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "flex justify-end mb-4",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {}), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-[auto_1fr] gap-2",
                            children: [!SUCCESS && !RESYNCING && /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                              disabled: isSubmitting,
                              className: "disabled:bg-opacity-10 bg-gray-600 !py-2  font-bold tracking-tighter",
                              type: "button",
                              onClick: function onClick() {
                                return setConfirm(false);
                              },
                              children: "Dismiss"
                            }), /* @__PURE__ */jsxRuntimeExports.jsxs("button", {
                              disabled: isSubmitting,
                              onClick: function onClick() {
                                if (!SUCCESS) {
                                  return submitForm();
                                }
                                if (window.navigator.userAgent.includes("Minima Browser")) {
                                  return Android.shutdownMinima();
                                }
                                return window.close();
                              },
                              type: "button",
                              className: "disabled:bg-opacity-50 font-bold !py-2 text-black bg-violet-300",
                              children: [DEFAULT && "Okay", ERROR && "Re-try", SUCCESS && "Close", RESYNCING && "Re-syncing"]
                            })]
                          })]
                        })]
                      })]
                    })
                  })]
                });
              }
            })]
          });
        };
        var MinimaFileUploader = function MinimaFileUploader(_ref102) {
          var renderData = _ref102.renderData,
            internalDataName = _ref102.internalDataName,
            internalListStyle = _ref102.internalListStyle,
            internalSearch = _ref102.internalSearch,
            externalAcceptFileType = _ref102.externalAcceptFileType;
          var inputRef = reactExports.useRef(null);
          var _reactExports$useCont36 = reactExports.useContext(appContext),
            _promptFileUpload = _reactExports$useCont36._promptFileUpload,
            promptFileUpload = _reactExports$useCont36.promptFileUpload;
          var _useFormikContext3 = useFormikContext(),
            setFieldValue = _useFormikContext3.setFieldValue;
          var _reactExports$useStat261 = reactExports.useState(false),
            _reactExports$useStat262 = _slicedToArray2(_reactExports$useStat261, 2),
            promptInternal = _reactExports$useStat262[0],
            setPromptInternal = _reactExports$useStat262[1];
          return /* @__PURE__ */jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("button", {
                onClick: function onClick() {
                  return setPromptInternal(true);
                },
                type: "button",
                className: "bg-white focus:outline focus:outline-violet-300 text-black hover:bg-opacity-80 w-full mb-2 font-bold",
                children: "Select an internal backup"
              }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("button", {
                  onClick: function onClick() {
                    var _inputRef$current3;
                    return (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.click();
                  },
                  type: "button",
                  className: "bg-white focus:outline focus:outline-violet-300 text-black hover:bg-opacity-80 w-full font-bold",
                  children: "Select an external backup"
                }), /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                  ref: inputRef,
                  id: "upload",
                  name: "upload",
                  type: "file",
                  className: "hidden",
                  accept: externalAcceptFileType,
                  onChange: function () {
                    var _onChange2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee60(e) {
                      return _regeneratorRuntime().wrap(function _callee60$(_context60) {
                        while (1) switch (_context60.prev = _context60.next) {
                          case 0:
                            _context60.prev = 0;
                            promptFileUpload({
                              status: null,
                              progress: "",
                              error: ""
                            });
                            if (!(e.target.files && e.target.files.length)) {
                              _context60.next = 7;
                              break;
                            }
                            _context60.next = 5;
                            return new Promise(function (resolve, reject) {
                              window.MDS.file.upload(
                              // @ts-ignore
                              e.target.files[0], /*#__PURE__*/function () {
                                var _ref103 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee59(resp) {
                                  return _regeneratorRuntime().wrap(function _callee59$(_context59) {
                                    while (1) switch (_context59.prev = _context59.next) {
                                      case 0:
                                        if (!resp.status) reject(resp.error ? resp.error : "Upload failed...");
                                        if (resp.allchunks >= 10) {
                                          promptFileUpload({
                                            status: null,
                                            progress: resp.chunk / resp.allchunks,
                                            error: ""
                                          });
                                        }
                                        if (resp.allchunks === resp.chunk) {
                                          promptFileUpload({
                                            status: true,
                                            progress: "100",
                                            error: ""
                                          });
                                          window.MDS.file.move("/fileupload/" + resp.filename, "/".concat(internalDataName.toLowerCase(), "/") + resp.filename, function (moveres) {
                                            if (!moveres.status) reject(moveres.error ? moveres.error : "Moving file failed...");
                                            setFieldValue("file", "/".concat(internalDataName.toLowerCase(), "/") + resp.filename);
                                            resolve(true);
                                          });
                                        }
                                      case 3:
                                      case "end":
                                        return _context59.stop();
                                    }
                                  }, _callee59);
                                }));
                                return function (_x113) {
                                  return _ref103.apply(this, arguments);
                                };
                              }());
                            }).catch(function (error) {
                              throw error;
                            });
                          case 5:
                            _context60.next = 8;
                            break;
                          case 7:
                            promptFileUpload(false);
                          case 8:
                            _context60.next = 15;
                            break;
                          case 10:
                            _context60.prev = 10;
                            _context60.t0 = _context60["catch"](0);
                            if (!(_context60.t0 instanceof Error)) {
                              _context60.next = 14;
                              break;
                            }
                            return _context60.abrupt("return", promptFileUpload({
                              status: false,
                              progress: "",
                              error: _context60.t0.message
                            }));
                          case 14:
                            promptFileUpload({
                              status: false,
                              progress: "",
                              error: "Something went wrong, please try again."
                            });
                          case 15:
                            _context60.prev = 15;
                            setTimeout(function () {
                              promptFileUpload(false);
                            }, _promptFileUpload && _promptFileUpload.status === false ? 5e3 : 2e3);
                            return _context60.finish(15);
                          case 18:
                          case "end":
                            return _context60.stop();
                        }
                      }, _callee60, null, [[0, 10, 15, 18]]);
                    }));
                    function onChange(_x112) {
                      return _onChange2.apply(this, arguments);
                    }
                    return onChange;
                  }()
                })]
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsx(AnimatedDialog, {
              isOpen: promptInternal,
              onClose: function onClose() {
                return setPromptInternal(false);
              },
              position: "items-start mt-20",
              extraClass: "max-w-sm mx-auto",
              dialogStyles: "h-[400px] rounded-lg !shadow-teal-800 !shadow-sm bg-black overflow-y-scroll",
              children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                  className: "flex justify-between items-center pr-4",
                  children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: "grid grid-cols-[auto_1fr] ml-2",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("h3", {
                      className: "my-auto font-bold ml-2",
                      children: ["Select from ", internalDataName, " ", /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                        className: "text-xs",
                        children: "(Internal)"
                      })]
                    })
                  })
                }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  children: [internalSearch && internalSearch, /* @__PURE__ */jsxRuntimeExports.jsx("ul", {
                    className: internalListStyle,
                    children: renderData({
                      setFieldValue: setFieldValue,
                      setPromptInternal: setPromptInternal
                    })
                  })]
                })]
              })
            })]
          });
        };
        var makeTimestamp = function makeTimestamp(filename) {
          var regex = /^(auto_)?minima_backup_(\d+)__([^_]+)_(\d+)\.bak$/;
          var match = filename.match(regex);
          filename.match(regex);
          if (!match) return "";
          var timestamp = parseInt(match[2]);
          var timestampDate = new Date(timestamp);
          return format(timestampDate, "dd/MM/yyyy HH:mm");
        };
        var makeAuto = function makeAuto(filename) {
          var regex = /^(auto_)?minima_backup_(\d+)__([^_]+)_(\d+)\.bak$/;
          var match = filename.match(regex);
          filename.match(regex);
          if (!match) return null;
          var isAuto = match[1] === "auto_";
          return isAuto ? "Auto" : "";
        };
        var FromBackup = function FromBackup() {
          var _reactExports$useCont37 = reactExports.useContext(appContext),
            backups = _reactExports$useCont37.backups;
          var _reactExports$useStat263 = reactExports.useState(false),
            _reactExports$useStat264 = _slicedToArray2(_reactExports$useStat263, 2),
            f = _reactExports$useStat264[0],
            setF = _reactExports$useStat264[1];
          var _reactExports$useStat265 = reactExports.useState(1),
            _reactExports$useStat266 = _slicedToArray2(_reactExports$useStat265, 2),
            step = _reactExports$useStat266[0],
            setStep = _reactExports$useStat266[1];
          var _reactExports$useStat267 = reactExports.useState(true),
            _reactExports$useStat268 = _slicedToArray2(_reactExports$useStat267, 2),
            hidePassword = _reactExports$useStat268[0],
            setHidePassword = _reactExports$useStat268[1];
          var _reactExports$useStat269 = reactExports.useState(""),
            _reactExports$useStat270 = _slicedToArray2(_reactExports$useStat269, 2),
            searchText = _reactExports$useStat270[0],
            setSearchText = _reactExports$useStat270[1];
          var _reactExports$useStat271 = reactExports.useState(false),
            _reactExports$useStat272 = _slicedToArray2(_reactExports$useStat271, 2),
            confirm = _reactExports$useStat272[0],
            setConfirm = _reactExports$useStat272[1];
          var _reactExports$useStat273 = reactExports.useState(false),
            _reactExports$useStat274 = _slicedToArray2(_reactExports$useStat273, 2),
            loading = _reactExports$useStat274[0],
            setLoading = _reactExports$useStat274[1];
          var _reactExports$useStat275 = reactExports.useState(false),
            _reactExports$useStat276 = _slicedToArray2(_reactExports$useStat275, 2),
            error = _reactExports$useStat276[0],
            setError = _reactExports$useStat276[1];
          var _reactExports$useStat277 = reactExports.useState(false),
            _reactExports$useStat278 = _slicedToArray2(_reactExports$useStat277, 2),
            shutdown = _reactExports$useStat278[0],
            setShutdown = _reactExports$useStat278[1];
          var handleSearchEvent = function handleSearchEvent(e) {
            setSearchText(e.target.value);
          };
          var renderBackups = function renderBackups(_ref104) {
            var setFieldValue = _ref104.setFieldValue,
              setPromptInternal = _ref104.setPromptInternal;
            if (backups.filter(function (b) {
              return makeTimestamp(b.name).includes(searchText);
            }).length === 0) {
              return /* @__PURE__ */jsxRuntimeExports.jsx("li", {
                className: "px-4",
                children: /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                  className: "text-xs text-center",
                  children: "No backup found with the specified date/time"
                })
              });
            }
            return /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
              isOpen: true,
              delay: 0,
              children: backups.filter(function (b) {
                return makeTimestamp(b.name).includes(searchText);
              }).sort(function (a, b) {
                var dateA = new Date(makeTimestamp(a.name));
                var dateB = new Date(makeTimestamp(b.name));
                return dateA - dateB;
              }).map(function (backup, index) {
                return /* @__PURE__ */jsxRuntimeExports.jsxs("li", {
                  className: "grid grid-cols-[1fr_auto] bg-[#1B1B1B] px-4 py-3 mb-3",
                  onClick: function onClick() {
                    setFieldValue("file", backup.location);
                    setPromptInternal(false);
                  },
                  children: [/* @__PURE__ */jsxRuntimeExports.jsxs("h3", {
                    className: "text-white font-bold",
                    children: ["My ", makeAuto(backup.name), " Backup"]
                  }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: "my-auto",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                      className: "text-xs",
                      children: makeTimestamp(backup.name)
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                      className: "text-xs text-right fotn-bold",
                      children: formatBytes$1(backup.size)
                    })]
                  })]
                }, index);
              })
            });
          };
          var DEFAULT = !loading && !error && !shutdown;
          var RESYNCING = loading && !error && !shutdown;
          var ERROR = !loading && error && !shutdown;
          var SUCCESS = !loading && !error && shutdown;
          return /* @__PURE__ */jsxRuntimeExports.jsxs(SlideIn, {
            isOpen: true,
            delay: 0,
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("h3", {
              className: "text-xl mb-2 font-bold",
              children: "Import a Backup"
            }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
              children: "Importing a backup will restore the node to its locked or unlocked state when the backup was taken. QuickSync will ensure your coins are restored and the chain is synced to the latest block (optional but recommended)"
            }), /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
              className: "text-center text-violet-300 mt-3",
              children: ["Step ", step, "/3"]
            }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: "grid grid-cols-[auto_16px_auto_16px_auto] my-3 text-center items-center",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                onClick: function onClick() {
                  return !RESYNCING && step === 2 ? setStep(1) : null;
                },
                className: "text-xs opacity-50 cursor-pointer ".concat(step === 1 && "opacity-100 text-yellow-300 font-bold", " ").concat(step > 1 && "opacity-100 text-violet-300 font-bold"),
                children: "Back up"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                className: "".concat(step > 1 && "text-violet-300 opacity-50"),
                children: /* @__PURE__ */jsxRuntimeExports.jsx(RightArrow, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                onClick: function onClick() {
                  return !RESYNCING && step === 3 ? setStep(2) : null;
                },
                className: "text-xs opacity-50 cursor-pointer ".concat(step === 2 && "opacity-100 text-yellow-300", " ").concat(step > 2 && "opacity-100 text-violet-300 font-bold"),
                children: "Password"
              }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                className: "".concat(step > 2 && "text-violet-300 opacity-50"),
                children: /* @__PURE__ */jsxRuntimeExports.jsx(RightArrow, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                className: "text-xs opacity-50 cursor-pointer ".concat(step === 3 && "opacity-100 text-yellow-300", " ").concat(step > 3 && "opacity-100 text-violet-300 font-bold"),
                children: "QuickSync"
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsx(Formik, {
              initialValues: {
                ip: "",
                file: "",
                password: ""
              },
              validationSchema: create$3().shape({
                ip: create$6().matches(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]|65[0-4][0-9][0-9]|6[0-4][0-9][0-9][0-9][0-9]|[1-5](\d){4}|[1-9](\d){0,3})$/, "Invalid IP:Port format").trim(),
                file: create$6().required("Backup required").min(1).trim()
              }),
              onSubmit: function () {
                var _onSubmit14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee61(_ref105) {
                  var ip, file, password, fullPath;
                  return _regeneratorRuntime().wrap(function _callee61$(_context61) {
                    while (1) switch (_context61.prev = _context61.next) {
                      case 0:
                        ip = _ref105.ip, file = _ref105.file, password = _ref105.password;
                        setLoading(true);
                        setError(false);
                        _context61.prev = 3;
                        _context61.next = 6;
                        return getPath(file);
                      case 6:
                        fullPath = _context61.sent;
                        _context61.next = 9;
                        return new Promise(function (resolve, reject) {
                          if (ip.trim().length === 0) {
                            window.MDS.cmd("restoresync file:\"".concat(fullPath, "\" password:\"").concat(password.length ? password : "minima", "\""), function (response) {
                              if (!response.status) return reject(response.error ? response.error : "Restoring from backup failed, please try again");
                              resolve(response);
                            });
                          } else {
                            window.MDS.cmd("megammrsync action:resync file:\"".concat(fullPath, "\" ").concat(ip.length > 0 ? "host:".concat(ip.trim()) : "", " ").concat(password.length > 0 ? "password:" + password : ""), function (resp) {
                              if (!resp.status) reject(resp.error ? resp.error : "Mega node re-sync failed with host:".concat(ip));
                              resolve(resp);
                            });
                          }
                        });
                      case 9:
                        setShutdown(true);
                        setLoading(false);
                        _context61.next = 21;
                        break;
                      case 13:
                        _context61.prev = 13;
                        _context61.t0 = _context61["catch"](3);
                        setLoading(false);
                        if (!(typeof _context61.t0 === "string")) {
                          _context61.next = 18;
                          break;
                        }
                        return _context61.abrupt("return", setError(_context61.t0.includes("GZIP") || _context61.t0.includes("Incorrect Password!") ? "Incorrect password!" : _context61.t0));
                      case 18:
                        if (!(_context61.t0 instanceof Error)) {
                          _context61.next = 20;
                          break;
                        }
                        return _context61.abrupt("return", setError(_context61.t0.message));
                      case 20:
                        setError("Backup re-sync failed, please try again.");
                      case 21:
                      case "end":
                        return _context61.stop();
                    }
                  }, _callee61, null, [[3, 13]]);
                }));
                function onSubmit(_x114) {
                  return _onSubmit14.apply(this, arguments);
                }
                return onSubmit;
              }(),
              children: function children(_ref106) {
                var handleSubmit = _ref106.handleSubmit,
                  handleChange = _ref106.handleChange,
                  handleBlur = _ref106.handleBlur,
                  setFieldValue = _ref106.setFieldValue,
                  submitForm = _ref106.submitForm,
                  errors = _ref106.errors,
                  values = _ref106.values,
                  isSubmitting = _ref106.isSubmitting;
                return /* @__PURE__ */jsxRuntimeExports.jsxs("form", {
                  onSubmit: handleSubmit,
                  className: "my-3 core-black-contrast-2 p-4 rounded ".concat(f && "outline outline-none"),
                  children: [step === 1 && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("label", {
                      className: "text-sm mb-3",
                      children: "Select a backup to restore"
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "grid grid-rows-[16px_1fr]",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {}), values.file.length === 0 && /* @__PURE__ */jsxRuntimeExports.jsx(MinimaFileUploader, {
                        renderData: renderBackups,
                        internalDataName: "backups",
                        internalListStyle: "my-3",
                        internalSearch: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          className: "px-3",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                            value: searchText,
                            onChange: handleSearchEvent,
                            placeholder: "Search by date/time",
                            className: "w-full rounded px-3 mt-3 !text-black focus:!outline focus:outline-violet-300 py-2"
                          })
                        }),
                        externalAcceptFileType: ".bak"
                      }), values.file.length > 0 && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        children: [/* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "grid grid-rows-2 bg-[#1B1B1B] px-3 my-2 rounded py-2",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-violet-300",
                            children: "Selected file"
                          }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "text-sm break-all",
                            children: values.file
                          })]
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                          onClick: function onClick() {
                            return setFieldValue("file", "");
                          },
                          type: "button",
                          className: "!p-2 bg-black focus:outline focus:outline-violet-300 text-white hover:!cursor-pointer w-full font-bold mb-2",
                          children: "Use another file"
                        }), /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                          disabled: !!errors.file,
                          onClick: function onClick() {
                            return setStep(2);
                          },
                          type: "button",
                          className: "bg-white focus:outline focus:outline-violet-300 text-black hover:bg-opacity-80 w-full font-bold disabled:opacity-10",
                          children: "Next"
                        })]
                      })]
                    })]
                  }), step === 3 && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: " grid grid-rows-[auto_1fr]",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsx("label", {
                      className: "text-sm mb-3",
                      children: "Enter the IP:Port of a Mega node to QuickSync from"
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("input", {
                      id: "ip",
                      name: "ip",
                      onChange: handleChange,
                      value: values.ip,
                      onFocus: function onFocus() {
                        return setF(true);
                      },
                      onBlur: function onBlur(e) {
                        handleBlur(e);
                        setF(false);
                      },
                      placeholder: "e.g. 34.32.59.133:9001",
                      className: "truncate focus:!outline-violet-300 px-4 py-3 core-black-contrast ".concat(errors.ip && "!outline !outline-[#FF627E]")
                    }), errors.ip && /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                      className: "mt-3 text-[#FF627E]",
                      children: errors.ip
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                      onClick: function onClick() {
                        return setConfirm(true);
                      },
                      disabled: !!errors.ip,
                      type: "button",
                      className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                      children: "Next"
                    })]
                  }), step === 2 && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                    className: " grid grid-rows-[auto_1fr]",
                    children: [/* @__PURE__ */jsxRuntimeExports.jsxs("label", {
                      className: "text-sm mb-3",
                      children: ["Enter your backup password", " ", /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                        className: "text-xs",
                        children: "(if applicable)"
                      })]
                    }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "w-full bg-[#1B1B1B] grid grid-cols-[1fr_auto] ".concat(errors.password && "!outline !outline-[#FF627E]", " ").concat(f && "outline outline-violet-300", " rounded"),
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("input", {
                        id: "password",
                        name: "password",
                        type: hidePassword ? "password" : "text",
                        onChange: handleChange,
                        value: values.password,
                        onFocus: function onFocus() {
                          return setF(true);
                        },
                        onBlur: function onBlur(e) {
                          handleBlur(e);
                          setF(false);
                        },
                        placeholder: "Enter password",
                        className: "truncate focus:outline-none px-4 py-3 core-black-contrast "
                      }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "my-auto px-3",
                        onClick: function onClick() {
                          return setHidePassword(function (prevState) {
                            return !prevState;
                          });
                        },
                        children: /* @__PURE__ */jsxRuntimeExports.jsx(TogglePasswordIcon, {
                          toggle: !hidePassword
                        })
                      })]
                    }), errors.password && /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                      className: "mt-3 text-[#FF627E]",
                      children: errors.password
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                      className: "my-2",
                      children: "Keep the field empty if you haven't set any."
                    }), /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                      onClick: function onClick() {
                        return setStep(3);
                      },
                      disabled: !!errors.password,
                      type: "button",
                      className: "bg-white text-black w-full mt-4 font-bold hover:bg-opacity-80 disabled:opacity-10",
                      children: "Next"
                    })]
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(AnimatedDialog, {
                    isOpen: confirm,
                    onClose: function onClose() {
                      return null;
                    },
                    position: "items-start mt-20",
                    extraClass: "max-w-sm mx-auto",
                    dialogStyles: "h-[400px] rounded-lg !shadow-violet-800 !shadow-sm overflow-hidden bg-black",
                    children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                      className: "h-full",
                      children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "flex justify-between items-center pr-4",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          className: "grid grid-cols-[auto_1fr] ml-2",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx("h3", {
                            className: "my-auto font-bold ml-2",
                            children: "Import backup"
                          })
                        })
                      }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                        className: "px-4 h-full flex flex-col justify-between",
                        children: [DEFAULT && /* @__PURE__ */jsxRuntimeExports.jsxs("p", {
                          className: "text-sm my-3",
                          children: [!values.ip.length && "This will restore the backup and attempt to sync to the latest block. If not using QuickSync and the backup is old or was taken when out of sync with the chain, it may not be possible to sync to the latest block. Continue?", !!values.ip.length && "This will restore the backup and attempt to re-sync the chain to the latest block using the QuickSync host provided.” Continue?"]
                        }), SUCCESS && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: "Re-sync completed. Please close this screen and re-login to the Minihub."
                        }), ERROR && /* @__PURE__ */jsxRuntimeExports.jsx("p", {
                          children: error.replace("Archive", "")
                        }), RESYNCING && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("p", {
                            className: "animate-pulse",
                            children: "Re-syncing..."
                          }), /* @__PURE__ */jsxRuntimeExports.jsx(DialogLogs, {})]
                        }), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                          className: "flex justify-end mb-4",
                          children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {}), /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                            className: "grid grid-cols-[auto_1fr] gap-2",
                            children: [!SUCCESS && !RESYNCING && /* @__PURE__ */jsxRuntimeExports.jsx("button", {
                              disabled: isSubmitting,
                              className: "disabled:bg-opacity-10 bg-gray-600 !py-2  font-bold tracking-tighter",
                              type: "button",
                              onClick: function onClick() {
                                return setConfirm(false);
                              },
                              children: "Dismiss"
                            }), /* @__PURE__ */jsxRuntimeExports.jsxs("button", {
                              disabled: isSubmitting,
                              onClick: function onClick() {
                                if (!SUCCESS) {
                                  return submitForm();
                                }
                                if (window.navigator.userAgent.includes("Minima Browser")) {
                                  return Android.shutdownMinima();
                                }
                                return window.close();
                              },
                              type: "button",
                              className: "disabled:bg-opacity-50 font-bold !py-2 text-black bg-violet-300",
                              children: [DEFAULT && "Okay", ERROR && "Re-try", SUCCESS && "Close", RESYNCING && "Re-syncing"]
                            })]
                          })]
                        })]
                      })]
                    })
                  })]
                });
              }
            })]
          });
        };
        var router = createHashRouter(createRoutesFromChildren( /* @__PURE__ */jsxRuntimeExports.jsxs(Route, {
          path: "/",
          element: /* @__PURE__ */jsxRuntimeExports.jsx(App, {}),
          loader: function loader() {
            return localStorage.getItem(getAppUID());
          },
          children: [/* @__PURE__ */jsxRuntimeExports.jsx(Route, {
            index: true,
            element: /* @__PURE__ */jsxRuntimeExports.jsx(Splash, {})
          }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
            element: /* @__PURE__ */jsxRuntimeExports.jsx(Authorisation, {
              permissions: [PERMISSIONS["CAN_VIEW_UPLOADING"]]
            }),
            children: /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
              path: "upload",
              element: /* @__PURE__ */jsxRuntimeExports.jsx(Uploading, {})
            })
          }), /* @__PURE__ */jsxRuntimeExports.jsxs(Route, {
            path: "/dashboard",
            element: /* @__PURE__ */jsxRuntimeExports.jsx(Dashboard, {}),
            children: [/* @__PURE__ */jsxRuntimeExports.jsx(Route, {
              index: true,
              element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                delay: 0,
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Security, {})
              })
            }), /* @__PURE__ */jsxRuntimeExports.jsxs(Route, {
              path: "archivereset",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                index: true,
                element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                  delay: 0,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(ArchiveReset$1, {})
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                path: "restorebackup",
                element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                  delay: 0,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(ArchiveReset, {})
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                path: "chainresync",
                element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                  delay: 0,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(ChainResyncReset, {})
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                path: "seedresync",
                element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                  delay: 0,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(SeedResyncReset, {})
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsxs(Route, {
                path: "archives",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                  index: true,
                  element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                    delay: 100,
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(Archives, {})
                  })
                }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                  element: /* @__PURE__ */jsxRuntimeExports.jsx(Authorisation, {
                    permissions: [PERMISSIONS["CAN_VIEW_DELETE_ARCHIVE"]]
                  }),
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                    path: "delete",
                    element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                      delay: 100,
                      children: /* @__PURE__ */jsxRuntimeExports.jsx(DeleteArchive, {})
                    })
                  })
                })]
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                path: "integritycheck",
                element: /* @__PURE__ */jsxRuntimeExports.jsx(IntegrityCheck, {})
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
              path: "lockprivatekeys",
              element: /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
                delay: 100,
                children: /* @__PURE__ */jsxRuntimeExports.jsx(LockPrivateKeys, {})
              })
            }), /* @__PURE__ */jsxRuntimeExports.jsxs(Route, {
              path: "quicksync",
              element: /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
                delay: 100,
                children: /* @__PURE__ */jsxRuntimeExports.jsx(QuickSync, {})
              }),
              children: [/* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                path: "host",
                element: /* @__PURE__ */jsxRuntimeExports.jsx(Host, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                path: "fromseedphrase",
                element: /* @__PURE__ */jsxRuntimeExports.jsx(FromSeedPhrase, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                path: "frombackup",
                element: /* @__PURE__ */jsxRuntimeExports.jsx(FromBackup, {})
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsxs(Route, {
              path: "backup",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                index: true,
                element: /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
                  delay: 100,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(BackupNode, {})
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                path: "backups",
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                  index: true,
                  element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                    delay: 100,
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(Backups, {})
                  })
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                element: /* @__PURE__ */jsxRuntimeExports.jsx(Authorisation, {
                  permissions: [PERMISSIONS["CAN_VIEW_AUTOCREATEPASSWORD"]]
                }),
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                  path: "autocreatepassword",
                  element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                    delay: 100,
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(AutoCreatePassword, {})
                  })
                })
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsxs(Route, {
              path: "manageseedphrase",
              children: [/* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                index: true,
                element: /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
                  delay: 100,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(ManageSeedPhrase, {})
                })
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                element: /* @__PURE__ */jsxRuntimeExports.jsx(Authorisation, {
                  permissions: [PERMISSIONS["CAN_VIEW_VIEWSEEDPHRASE"]]
                }),
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                  path: "viewseedphrase",
                  element: /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
                    delay: 100,
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(ViewSeedPhrase, {})
                  })
                })
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
              path: "restore",
              children: /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                index: true,
                element: /* @__PURE__ */jsxRuntimeExports.jsx(SlideIn, {
                  delay: 100,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(RestoreFromBackup, {})
                })
              })
            }), /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
              element: /* @__PURE__ */jsxRuntimeExports.jsx(Authorisation, {
                permissions: [PERMISSIONS["CAN_VIEW_MODAL"]]
              }),
              children: /* @__PURE__ */jsxRuntimeExports.jsx(Route, {
                path: "modal",
                element: /* @__PURE__ */jsxRuntimeExports.jsx(FadeIn, {
                  delay: 100,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(Dialog, {})
                })
              })
            })]
          })]
        })));
        client.createRoot(document.getElementById("root")).render( /* @__PURE__ */jsxRuntimeExports.jsx(React.StrictMode, {
          children: /* @__PURE__ */jsxRuntimeExports.jsx(RouterProvider, {
            router: router
          })
        }));
      }
    };
  });
})();
